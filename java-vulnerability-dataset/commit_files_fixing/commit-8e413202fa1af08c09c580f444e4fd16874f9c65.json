{
    "sha": "8e413202fa1af08c09c580f444e4fd16874f9c65",
    "node_id": "MDY6Q29tbWl0ODE5OTA3OjhlNDEzMjAyZmExYWYwOGMwOWM1ODBmNDQ0ZTRmZDE2ODc0ZjljNjU=",
    "commit": {
        "author": {
            "name": "Martin Kouba",
            "email": "mkouba@redhat.com",
            "date": "2014-12-03T13:21:39Z"
        },
        "committer": {
            "name": "Jozef Hartinger",
            "email": "jharting@redhat.com",
            "date": "2014-12-04T10:24:22Z"
        },
        "message": "WELD-1802 An exception during context deactivation/dissociation should\nnot abort further procesing",
        "tree": {
            "sha": "f6c51e152ea84dd88001072841a056d4769f02af",
            "url": "https://api.github.com/repos/weld/core/git/trees/f6c51e152ea84dd88001072841a056d4769f02af"
        },
        "url": "https://api.github.com/repos/weld/core/git/commits/8e413202fa1af08c09c580f444e4fd16874f9c65",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/weld/core/commits/8e413202fa1af08c09c580f444e4fd16874f9c65",
    "html_url": "https://github.com/weld/core/commit/8e413202fa1af08c09c580f444e4fd16874f9c65",
    "comments_url": "https://api.github.com/repos/weld/core/commits/8e413202fa1af08c09c580f444e4fd16874f9c65/comments",
    "author": {
        "login": "mkouba",
        "id": 913004,
        "node_id": "MDQ6VXNlcjkxMzAwNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/913004?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mkouba",
        "html_url": "https://github.com/mkouba",
        "followers_url": "https://api.github.com/users/mkouba/followers",
        "following_url": "https://api.github.com/users/mkouba/following{/other_user}",
        "gists_url": "https://api.github.com/users/mkouba/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mkouba/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mkouba/subscriptions",
        "organizations_url": "https://api.github.com/users/mkouba/orgs",
        "repos_url": "https://api.github.com/users/mkouba/repos",
        "events_url": "https://api.github.com/users/mkouba/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mkouba/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "jharting",
        "id": 167352,
        "node_id": "MDQ6VXNlcjE2NzM1Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/167352?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jharting",
        "html_url": "https://github.com/jharting",
        "followers_url": "https://api.github.com/users/jharting/followers",
        "following_url": "https://api.github.com/users/jharting/following{/other_user}",
        "gists_url": "https://api.github.com/users/jharting/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jharting/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jharting/subscriptions",
        "organizations_url": "https://api.github.com/users/jharting/orgs",
        "repos_url": "https://api.github.com/users/jharting/repos",
        "events_url": "https://api.github.com/users/jharting/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jharting/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "6808b11cd6d97c71a2eed754ed4f955acd789086",
            "url": "https://api.github.com/repos/weld/core/commits/6808b11cd6d97c71a2eed754ed4f955acd789086",
            "html_url": "https://github.com/weld/core/commit/6808b11cd6d97c71a2eed754ed4f955acd789086"
        }
    ],
    "stats": {
        "total": 98,
        "additions": 61,
        "deletions": 37
    },
    "files": [
        {
            "sha": "45ec40676bc39ee24784f81bd9171c58a160a7b4",
            "filename": "impl/src/main/java/org/jboss/weld/logging/ServletLogger.java",
            "status": "modified",
            "additions": 6,
            "deletions": 5,
            "changes": 11,
            "blob_url": "https://github.com/weld/core/blob/8e413202fa1af08c09c580f444e4fd16874f9c65/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Flogging%2FServletLogger.java",
            "raw_url": "https://github.com/weld/core/raw/8e413202fa1af08c09c580f444e4fd16874f9c65/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Flogging%2FServletLogger.java",
            "contents_url": "https://api.github.com/repos/weld/core/contents/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Flogging%2FServletLogger.java?ref=8e413202fa1af08c09c580f444e4fd16874f9c65",
            "patch": "@@ -18,9 +18,6 @@\n \n import static org.jboss.weld.logging.WeldLogger.WELD_PROJECT_CODE;\n \n-import javax.enterprise.context.spi.Context;\n-import javax.servlet.http.HttpServletRequest;\n-\n import org.jboss.logging.Logger;\n import org.jboss.logging.Logger.Level;\n import org.jboss.logging.annotations.Cause;\n@@ -60,8 +57,8 @@ public interface ServletLogger extends WeldLogger {\n     void webXmlMappingPatternIgnored(String pattern);\n \n     @LogMessage(level = Level.WARN)\n-    @Message(id = 712, value = \"Unable to dissociate context {0} when destroying request {1}\", format = Format.MESSAGE_FORMAT)\n-    void unableToDissociateContext(Context context, HttpServletRequest request);\n+    @Message(id = 712, value = \"Unable to dissociate context {0} from the storage {1}\", format = Format.MESSAGE_FORMAT)\n+    void unableToDissociateContext(Object context, Object storage);\n \n     @Message(id = 713, value = \"Unable to inject ServletContext. None is associated with {0}, {1}\", format = Format.MESSAGE_FORMAT)\n     IllegalStateException cannotInjectServletContext(ClassLoader classLoader, ServletContextService service);\n@@ -78,4 +75,8 @@ public interface ServletLogger extends WeldLogger {\n     @Message(id = 716, value = \"Running in Servlet 2.x environment. Asynchronous request support is disabled.\")\n     void servlet2Environment();\n \n+    @LogMessage(level = Level.WARN)\n+    @Message(id = 717, value = \"Unable to deactivate context {0} when destroying request {1}\", format = Format.MESSAGE_FORMAT)\n+    void unableToDeactivateContext(Object context, Object request);\n+\n }\n\\ No newline at end of file"
        },
        {
            "sha": "6c9b3846ab13607ba031b5af229376a11091d0b5",
            "filename": "impl/src/main/java/org/jboss/weld/servlet/ConversationContextActivator.java",
            "status": "modified",
            "additions": 25,
            "deletions": 20,
            "changes": 45,
            "blob_url": "https://github.com/weld/core/blob/8e413202fa1af08c09c580f444e4fd16874f9c65/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fservlet%2FConversationContextActivator.java",
            "raw_url": "https://github.com/weld/core/raw/8e413202fa1af08c09c580f444e4fd16874f9c65/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fservlet%2FConversationContextActivator.java",
            "contents_url": "https://api.github.com/repos/weld/core/contents/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fservlet%2FConversationContextActivator.java?ref=8e413202fa1af08c09c580f444e4fd16874f9c65",
            "patch": "@@ -138,30 +138,35 @@ private boolean isContextActivatedInRequest(HttpServletRequest request) {\n     }\n \n     protected void deactivateConversationContext(HttpServletRequest request) {\n-        ConversationContext conversationContext = httpConversationContext();\n-        if (conversationContext.isActive()) {\n-            // Only deactivate the context if one is already active, otherwise we get Exceptions\n-            if (conversationContext instanceof LazyHttpConversationContextImpl) {\n-                LazyHttpConversationContextImpl lazyConversationContext = (LazyHttpConversationContextImpl) conversationContext;\n-                if (!lazyConversationContext.isInitialized()) {\n-                    // if this lazy conversation has not been touched yet, just deactivate it\n-                    lazyConversationContext.deactivate();\n-                    return;\n+        try {\n+            ConversationContext conversationContext = httpConversationContext();\n+            if (conversationContext.isActive()) {\n+                // Only deactivate the context if one is already active, otherwise we get Exceptions\n+                if (conversationContext instanceof LazyHttpConversationContextImpl) {\n+                    LazyHttpConversationContextImpl lazyConversationContext = (LazyHttpConversationContextImpl) conversationContext;\n+                    if (!lazyConversationContext.isInitialized()) {\n+                        // if this lazy conversation has not been touched yet, just deactivate it\n+                        lazyConversationContext.deactivate();\n+                        return;\n+                    }\n                 }\n-            }\n-            boolean isTransient = conversationContext.getCurrentConversation().isTransient();\n-            if (ConversationLogger.LOG.isTraceEnabled()) {\n+                boolean isTransient = conversationContext.getCurrentConversation().isTransient();\n+                if (ConversationLogger.LOG.isTraceEnabled()) {\n+                    if (isTransient) {\n+                        ConversationLogger.LOG.cleaningUpTransientConversation();\n+                    } else {\n+                        ConversationLogger.LOG.cleaningUpConversation(conversationContext.getCurrentConversation().getId());\n+                    }\n+                }\n+                conversationContext.invalidate();\n+                conversationContext.deactivate();\n                 if (isTransient) {\n-                    ConversationLogger.LOG.cleaningUpTransientConversation();\n-                } else {\n-                    ConversationLogger.LOG.cleaningUpConversation(conversationContext.getCurrentConversation().getId());\n+                    conversationDestroyedEvent.fire(request);\n                 }\n             }\n-            conversationContext.invalidate();\n-            conversationContext.deactivate();\n-            if (isTransient) {\n-                conversationDestroyedEvent.fire(request);\n-            }\n+        } catch (Exception e) {\n+            ServletLogger.LOG.unableToDeactivateContext(httpConversationContext(), request);\n+            ServletLogger.LOG.catchingDebug(e);\n         }\n     }\n "
        },
        {
            "sha": "f16bfef56226b95d261676ac343da80ff0e169db",
            "filename": "impl/src/main/java/org/jboss/weld/servlet/HttpContextLifecycle.java",
            "status": "modified",
            "additions": 30,
            "deletions": 12,
            "changes": 42,
            "blob_url": "https://github.com/weld/core/blob/8e413202fa1af08c09c580f444e4fd16874f9c65/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fservlet%2FHttpContextLifecycle.java",
            "raw_url": "https://github.com/weld/core/raw/8e413202fa1af08c09c580f444e4fd16874f9c65/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fservlet%2FHttpContextLifecycle.java",
            "contents_url": "https://api.github.com/repos/weld/core/contents/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fservlet%2FHttpContextLifecycle.java?ref=8e413202fa1af08c09c580f444e4fd16874f9c65",
            "patch": "@@ -23,6 +23,8 @@\n \n import org.jboss.weld.Container;\n import org.jboss.weld.bootstrap.api.Service;\n+import org.jboss.weld.context.BoundContext;\n+import org.jboss.weld.context.ManagedContext;\n import org.jboss.weld.context.cache.RequestScopedCache;\n import org.jboss.weld.context.http.HttpRequestContext;\n import org.jboss.weld.context.http.HttpRequestContextImpl;\n@@ -279,24 +281,21 @@ public void requestDestroyed(HttpServletRequest request) {\n             if (!servletApi.isAsyncSupported() || !servletApi.isAsyncStarted(request)) {\n                 getRequestContext().invalidate();\n             }\n-            getRequestContext().deactivate();\n+\n+            safelyDeactivate(getRequestContext(),  request);\n             // fire @Destroyed(RequestScoped.class)\n             requestDestroyedEvent.fire(request);\n-            getSessionContext().deactivate();\n+\n+            safelyDeactivate(getSessionContext(), request);\n             // fire @Destroyed(SessionScoped.class)\n             if (!getSessionContext().isValid()) {\n                 sessionDestroyedEvent.fire((HttpSession) request.getAttribute(HTTP_SESSION));\n             }\n         } finally {\n-            getRequestContext().dissociate(request);\n-\n+            safelyDissociate(getRequestContext(), request);\n             // WFLY-1533 Underlying HTTP session may be invalid\n-            try {\n-                getSessionContext().dissociate(request);\n-            } catch (Exception e) {\n-                ServletLogger.LOG.unableToDissociateContext(getSessionContext(), request);\n-                ServletLogger.LOG.catchingDebug(e);\n-            }\n+            safelyDissociate(getSessionContext(), request);\n+\n             // Catch block is inside the activator method so that we're able to log the context\n             conversationContextActivator.disassociateConversationContext(request);\n \n@@ -312,6 +311,10 @@ public void setConversationActivationEnabled(boolean conversationActivationEnabl\n         this.conversationActivationEnabled = conversationActivationEnabled;\n     }\n \n+    @Override\n+    public void cleanup() {\n+    }\n+\n     /**\n      * Some Servlet containers fire HttpServletListeners for include requests (inner requests caused by calling the include method of RequestDispatcher). This\n      * causes problems with context shut down as context manipulation is not reentrant. This method detects if this request is an included request or not.\n@@ -338,7 +341,22 @@ private boolean isRequestDestroyed(HttpServletRequest request) {\n         return request.getAttribute(REQUEST_DESTROYED) != null;\n     }\n \n-    @Override\n-    public void cleanup() {\n+    private <T> void safelyDissociate(BoundContext<T> context, T storage) {\n+        try {\n+            context.dissociate(storage);\n+        } catch(Exception e) {\n+            ServletLogger.LOG.unableToDissociateContext(context, storage);\n+            ServletLogger.LOG.catchingDebug(e);\n+        }\n+    }\n+\n+    private void safelyDeactivate(ManagedContext context, HttpServletRequest request) {\n+        try {\n+            context.deactivate();\n+        } catch(Exception e) {\n+            ServletLogger.LOG.unableToDeactivateContext(context, request);\n+            ServletLogger.LOG.catchingDebug(e);\n+        }\n     }\n+\n }"
        }
    ]
}