{
    "sha": "957c56dbe5b1490490c09ddfbca9a4204c7c9d00",
    "node_id": "MDY6Q29tbWl0MjM0MTg1MTc6OTU3YzU2ZGJlNWIxNDkwNDkwYzA5ZGRmYmNhOWE0MjA0YzdjOWQwMA==",
    "commit": {
        "author": {
            "name": "Kihwal Lee",
            "email": "kihwal@apache.org",
            "date": "2014-05-31T14:33:31Z"
        },
        "committer": {
            "name": "Kihwal Lee",
            "email": "kihwal@apache.org",
            "date": "2014-05-31T14:33:31Z"
        },
        "message": "Fix merge error.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/branch-0.23@1598876 13f79535-47bb-0310-9956-ffa450edef68",
        "tree": {
            "sha": "07cdbbaf1f474fbd6999feac747b28849ac3e9dd",
            "url": "https://api.github.com/repos/apache/hadoop/git/trees/07cdbbaf1f474fbd6999feac747b28849ac3e9dd"
        },
        "url": "https://api.github.com/repos/apache/hadoop/git/commits/957c56dbe5b1490490c09ddfbca9a4204c7c9d00",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/hadoop/commits/957c56dbe5b1490490c09ddfbca9a4204c7c9d00",
    "html_url": "https://github.com/apache/hadoop/commit/957c56dbe5b1490490c09ddfbca9a4204c7c9d00",
    "comments_url": "https://api.github.com/repos/apache/hadoop/commits/957c56dbe5b1490490c09ddfbca9a4204c7c9d00/comments",
    "author": {
        "login": "kihwal",
        "id": 340000,
        "node_id": "MDQ6VXNlcjM0MDAwMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/340000?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kihwal",
        "html_url": "https://github.com/kihwal",
        "followers_url": "https://api.github.com/users/kihwal/followers",
        "following_url": "https://api.github.com/users/kihwal/following{/other_user}",
        "gists_url": "https://api.github.com/users/kihwal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kihwal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kihwal/subscriptions",
        "organizations_url": "https://api.github.com/users/kihwal/orgs",
        "repos_url": "https://api.github.com/users/kihwal/repos",
        "events_url": "https://api.github.com/users/kihwal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kihwal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "kihwal",
        "id": 340000,
        "node_id": "MDQ6VXNlcjM0MDAwMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/340000?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kihwal",
        "html_url": "https://github.com/kihwal",
        "followers_url": "https://api.github.com/users/kihwal/followers",
        "following_url": "https://api.github.com/users/kihwal/following{/other_user}",
        "gists_url": "https://api.github.com/users/kihwal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kihwal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kihwal/subscriptions",
        "organizations_url": "https://api.github.com/users/kihwal/orgs",
        "repos_url": "https://api.github.com/users/kihwal/repos",
        "events_url": "https://api.github.com/users/kihwal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kihwal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "5c182ca1c1e4c6a3b737473614e411825ca972b9",
            "url": "https://api.github.com/repos/apache/hadoop/commits/5c182ca1c1e4c6a3b737473614e411825ca972b9",
            "html_url": "https://github.com/apache/hadoop/commit/5c182ca1c1e4c6a3b737473614e411825ca972b9"
        }
    ],
    "stats": {
        "total": 43,
        "additions": 43,
        "deletions": 0
    },
    "files": [
        {
            "sha": "7bb10c35bcd1218b4ef498edfc55b7e5d687bb76",
            "filename": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java",
            "status": "modified",
            "additions": 43,
            "deletions": 0,
            "changes": 43,
            "blob_url": "https://github.com/apache/hadoop/blob/957c56dbe5b1490490c09ddfbca9a4204c7c9d00/hadoop-hdfs-project%2Fhadoop-hdfs%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fhadoop%2Fhdfs%2Fserver%2Fdatanode%2FDataNode.java",
            "raw_url": "https://github.com/apache/hadoop/raw/957c56dbe5b1490490c09ddfbca9a4204c7c9d00/hadoop-hdfs-project%2Fhadoop-hdfs%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fhadoop%2Fhdfs%2Fserver%2Fdatanode%2FDataNode.java",
            "contents_url": "https://api.github.com/repos/apache/hadoop/contents/hadoop-hdfs-project%2Fhadoop-hdfs%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fhadoop%2Fhdfs%2Fserver%2Fdatanode%2FDataNode.java?ref=957c56dbe5b1490490c09ddfbca9a4204c7c9d00",
            "patch": "@@ -398,6 +398,10 @@ void refreshNamenodes(Configuration conf)\n   private Configuration conf;\n \n   private final String userWithLocalPathAccess;\n+  private String supergroup;\n+  private boolean isPermissionEnabled;\n+  private String dnUserName = null;\n+\n \n   /**\n    * Create the DataNode given a configuration and an array of dataDirs.\n@@ -419,6 +423,11 @@ void refreshNamenodes(Configuration conf)\n \n     this.userWithLocalPathAccess = conf\n         .get(DFSConfigKeys.DFS_BLOCK_LOCAL_PATH_ACCESS_USER_KEY);\n+    this.supergroup = conf.get(DFSConfigKeys.DFS_PERMISSIONS_SUPERUSERGROUP_KEY,\n+        DFSConfigKeys.DFS_PERMISSIONS_SUPERUSERGROUP_DEFAULT);\n+    this.isPermissionEnabled = conf.getBoolean(\n+        DFSConfigKeys.DFS_PERMISSIONS_ENABLED_KEY,\n+        DFSConfigKeys.DFS_PERMISSIONS_ENABLED_DEFAULT);\n     try {\n       confHostName = getHostName(conf);\n       hostName = confHostName;\n@@ -525,6 +534,33 @@ private void initIpcServer(Configuration conf) throws IOException {\n       ipcServer.refreshServiceAcl(conf, new HDFSPolicyProvider());\n     }\n   }\n+\n+  /** Check whether the current user is in the superuser group. */\n+  private void checkSuperuserPrivilege() throws IOException, AccessControlException {\n+    if (!isPermissionEnabled) {\n+      return;\n+    }\n+    // Try to get the ugi in the RPC call.\n+    UserGroupInformation callerUgi = ipcServer.getRemoteUser();\n+    if (callerUgi == null) {\n+      // This is not from RPC.\n+      callerUgi = UserGroupInformation.getCurrentUser();\n+    }\n+\n+    // Is this by the DN user itself?\n+    assert dnUserName != null;\n+    if (callerUgi.getShortUserName().equals(dnUserName)) {\n+      return;\n+    }\n+\n+    // Is the user a member of the super group?\n+    List<String> groups = Arrays.asList(callerUgi.getGroupNames());\n+    if (groups.contains(supergroup)) {\n+      return;\n+    }\n+    // Not a superuser.\n+    throw new AccessControlException();\n+  }\n   \n /**\n  * Initialize the datanode's periodic scanners:\n@@ -704,6 +740,11 @@ void startDataNode(Configuration conf,\n   \n     // BlockPoolTokenSecretManager is required to create ipc server.\n     this.blockPoolTokenSecretManager = new BlockPoolTokenSecretManager();\n+    // Login is done by now. Set the DN user name.\n+    dnUserName = UserGroupInformation.getCurrentUser().getShortUserName();\n+    LOG.info(\"dnUserName = \" + dnUserName);\n+    LOG.info(\"supergroup = \" + supergroup);\n+\n     initIpcServer(conf);\n \n     metrics = DataNodeMetrics.create(conf, getMachineName());\n@@ -2230,13 +2271,15 @@ public void refreshNamenodes(Configuration conf) throws IOException {\n \n   @Override //ClientDatanodeProtocol\n   public void refreshNamenodes() throws IOException {\n+    checkSuperuserPrivilege();\n     conf = new Configuration();\n     refreshNamenodes(conf);\n   }\n   \n   @Override // ClientDatanodeProtocol\n   public void deleteBlockPool(String blockPoolId, boolean force)\n       throws IOException {\n+    checkSuperuserPrivilege();\n     LOG.info(\"deleteBlockPool command received for block pool \" + blockPoolId\n         + \", force=\" + force);\n     if (blockPoolManager.get(blockPoolId) != null) {"
        }
    ]
}