{
    "sha": "d43c68c0126306021a12afbfe7876a36612fbbc3",
    "node_id": "MDY6Q29tbWl0MjA2NDEyOmQ0M2M2OGMwMTI2MzA2MDIxYTEyYWZiZmU3ODc2YTM2NjEyZmJiYzM=",
    "commit": {
        "author": {
            "name": "Sven Meier",
            "email": "svenmeier@apache.org",
            "date": "2020-04-28T20:07:42Z"
        },
        "committer": {
            "name": "Sven Meier",
            "email": "svenmeier@apache.org",
            "date": "2020-04-28T20:28:35Z"
        },
        "message": "WICKET-6771 avoid access to removals\n\nunless needed",
        "tree": {
            "sha": "dd9deccc1d9eb565b798aa69d5c35bf1a90451be",
            "url": "https://api.github.com/repos/apache/wicket/git/trees/dd9deccc1d9eb565b798aa69d5c35bf1a90451be"
        },
        "url": "https://api.github.com/repos/apache/wicket/git/commits/d43c68c0126306021a12afbfe7876a36612fbbc3",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/wicket/commits/d43c68c0126306021a12afbfe7876a36612fbbc3",
    "html_url": "https://github.com/apache/wicket/commit/d43c68c0126306021a12afbfe7876a36612fbbc3",
    "comments_url": "https://api.github.com/repos/apache/wicket/commits/d43c68c0126306021a12afbfe7876a36612fbbc3/comments",
    "author": null,
    "committer": null,
    "parents": [
        {
            "sha": "ee2c0d9ea0dfa4609ef32db09921b9094bea4780",
            "url": "https://api.github.com/repos/apache/wicket/commits/ee2c0d9ea0dfa4609ef32db09921b9094bea4780",
            "html_url": "https://github.com/apache/wicket/commit/ee2c0d9ea0dfa4609ef32db09921b9094bea4780"
        }
    ],
    "stats": {
        "total": 77,
        "additions": 30,
        "deletions": 47
    },
    "files": [
        {
            "sha": "d848f1cac19aad94170f2265c9e75f3df4ec35e3",
            "filename": "wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
            "status": "modified",
            "additions": 30,
            "deletions": 47,
            "changes": 77,
            "blob_url": "https://github.com/apache/wicket/blob/d43c68c0126306021a12afbfe7876a36612fbbc3/wicket-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fwicket%2FMarkupContainer.java",
            "raw_url": "https://github.com/apache/wicket/raw/d43c68c0126306021a12afbfe7876a36612fbbc3/wicket-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fwicket%2FMarkupContainer.java",
            "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fwicket%2FMarkupContainer.java?ref=d43c68c0126306021a12afbfe7876a36612fbbc3",
            "patch": "@@ -562,7 +562,7 @@ public Iterator<Component> iterator()\n \t\t */\n \t\tclass MarkupChildIterator implements Iterator<Component>\n \t\t{\n-\t\t\tprivate int indexInRemovalsSinceLastUpdate = removals_size();\n+\t\t\tprivate int indexInRemovalsSinceLastUpdate;\n \t\t\tprivate int expectedModCounter = -1;\n \t\t\tprivate Component currentComponent = null;\n \t\t\tprivate Iterator<Component> internalIterator = null;\n@@ -590,8 +590,10 @@ public void remove()\n \n \t\t\tprivate void refreshInternalIteratorIfNeeded()\n \t\t\t{\n-\t\t\t\tif (expectedModCounter >= modCounter)\n+\t\t\t\tif (expectedModCounter >= modCounter) {\n+\t\t\t\t\t// no new modifications\n \t\t\t\t\treturn;\n+\t\t\t\t}\n \n \t\t\t\tif (children == null)\n \t\t\t\t{\n@@ -615,7 +617,6 @@ else if (children instanceof List)\n \t\t\t\t// since we now have a new iterator, we need to set it to the last known position\n \t\t\t\tcurrentComponent = findLastExistingChildAlreadyReturned(currentComponent);\n \t\t\t\texpectedModCounter = modCounter;\n-\t\t\t\tindexInRemovalsSinceLastUpdate = removals_size();\n \n \t\t\t\tif (currentComponent != null)\n \t\t\t\t{\n@@ -627,33 +628,38 @@ else if (children instanceof List)\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tprivate Component findLastExistingChildAlreadyReturned(Component target)\n+\t\t\tprivate Component findLastExistingChildAlreadyReturned(Component current)\n \t\t\t{\n-\t\t\t\twhile (true)\n-\t\t\t\t{\n-\t\t\t\t\tif (target == null)\n-\t\t\t\t\t\treturn null;\n-\n-\t\t\t\t\tRemovedChild removedChild = null;\n-\t\t\t\t\tfor (int i = indexInRemovalsSinceLastUpdate; i < removals_size(); i++)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tRemovedChild curRemovedChild = removals_get(i);\n-\t\t\t\t\t\tif (curRemovedChild.removedChild == target ||\n-\t\t\t\t\t\t\tcurRemovedChild.removedChild == null)\n+\t\t\t\tif (current == null) {\n+\t\t\t\t\tindexInRemovalsSinceLastUpdate = 0;\n+\t\t\t\t} else {\n+\t\t\t\t\tLinkedList<RemovedChild> removals = removals_get();\n+\t\t\t\t\tif (removals != null) {\n+\t\t\t\t\t\tcheck_removed:\n+\t\t\t\t\t\twhile (current != null)\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\tremovedChild = curRemovedChild;\n+\t\t\t\t\t\t\tfor (int i = indexInRemovalsSinceLastUpdate; i < removals.size(); i++)\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tRemovedChild removal = removals.get(i);\n+\t\t\t\t\t\t\t\tif (removal.removedChild == current ||\n+\t\t\t\t\t\t\t\t\tremoval.removedChild == null)\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\tcurrent = removal.previousSibling;\n+\t\t\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t\t\t// current was removed, use its sibling instead\n+\t\t\t\t\t\t\t\t\tcontinue check_removed;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t// current wasn't removed, keep it\n \t\t\t\t\t\t\tbreak;\n \t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\tif (removedChild == null)\n-\t\t\t\t\t{\n-\t\t\t\t\t\treturn target;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttarget = removedChild.previousSibling;\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tindexInRemovalsSinceLastUpdate = removals.size();\n \t\t\t\t\t}\n \t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn current;\n \t\t\t}\n \t\t};\n \t\treturn new MarkupChildIterator();\n@@ -1361,29 +1367,6 @@ private void removals_add(Component removedChild, Component prevSibling)\n \t\tremovals.add(new RemovedChild(removedChild, prevSibling));\n \t}\n \n-\t/**\n-\t * Gets the {@link RemovedChild} from the list of removals at given position.\n-\t * \n-\t * @param i\n-\t *            the position\n-\t * @return the removed child\n-\t */\n-\tprivate RemovedChild removals_get(int i)\n-\t{\n-\t\treturn getMetaData(REMOVALS_KEY).get(i);\n-\t}\n-\n-\t/**\n-\t * Gets the number of removals that happened during the request.\n-\t * \n-\t * @return the number of removals\n-\t */\n-\tprivate int removals_size()\n-\t{\n-\t\tLinkedList<RemovedChild> removals = removals_get();\n-\t\treturn removals == null ? 0 : removals.size();\n-\t}\n-\n \t/**\n \t * @param component\n \t *            Component being removed"
        }
    ]
}