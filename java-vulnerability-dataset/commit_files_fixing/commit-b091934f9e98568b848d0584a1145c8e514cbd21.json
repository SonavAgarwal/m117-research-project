{
    "sha": "b091934f9e98568b848d0584a1145c8e514cbd21",
    "node_id": "MDY6Q29tbWl0NTAyMjk0ODc6YjA5MTkzNGY5ZTk4NTY4Yjg0OGQwNTg0YTExNDVjOGU1MTRjYmQyMQ==",
    "commit": {
        "author": {
            "name": "Shalin Shekhar Mangar",
            "email": "shalin@apache.org",
            "date": "2017-08-09T10:46:53Z"
        },
        "committer": {
            "name": "Shalin Shekhar Mangar",
            "email": "shalin@apache.org",
            "date": "2017-08-09T10:46:53Z"
        },
        "message": "Create znode upfront and fix chroot handling in delegation token feature",
        "tree": {
            "sha": "966cea2bf48a64739d984f20ef8727403f8a5ec4",
            "url": "https://api.github.com/repos/apache/lucene-solr/git/trees/966cea2bf48a64739d984f20ef8727403f8a5ec4"
        },
        "url": "https://api.github.com/repos/apache/lucene-solr/git/commits/b091934f9e98568b848d0584a1145c8e514cbd21",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/lucene-solr/commits/b091934f9e98568b848d0584a1145c8e514cbd21",
    "html_url": "https://github.com/apache/lucene-solr/commit/b091934f9e98568b848d0584a1145c8e514cbd21",
    "comments_url": "https://api.github.com/repos/apache/lucene-solr/commits/b091934f9e98568b848d0584a1145c8e514cbd21/comments",
    "author": {
        "login": "shalinmangar",
        "id": 65780,
        "node_id": "MDQ6VXNlcjY1Nzgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/65780?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shalinmangar",
        "html_url": "https://github.com/shalinmangar",
        "followers_url": "https://api.github.com/users/shalinmangar/followers",
        "following_url": "https://api.github.com/users/shalinmangar/following{/other_user}",
        "gists_url": "https://api.github.com/users/shalinmangar/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/shalinmangar/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/shalinmangar/subscriptions",
        "organizations_url": "https://api.github.com/users/shalinmangar/orgs",
        "repos_url": "https://api.github.com/users/shalinmangar/repos",
        "events_url": "https://api.github.com/users/shalinmangar/events{/privacy}",
        "received_events_url": "https://api.github.com/users/shalinmangar/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "shalinmangar",
        "id": 65780,
        "node_id": "MDQ6VXNlcjY1Nzgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/65780?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shalinmangar",
        "html_url": "https://github.com/shalinmangar",
        "followers_url": "https://api.github.com/users/shalinmangar/followers",
        "following_url": "https://api.github.com/users/shalinmangar/following{/other_user}",
        "gists_url": "https://api.github.com/users/shalinmangar/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/shalinmangar/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/shalinmangar/subscriptions",
        "organizations_url": "https://api.github.com/users/shalinmangar/orgs",
        "repos_url": "https://api.github.com/users/shalinmangar/repos",
        "events_url": "https://api.github.com/users/shalinmangar/events{/privacy}",
        "received_events_url": "https://api.github.com/users/shalinmangar/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "8e2dab7315739a0f5194600ee524f6a2ea616af6",
            "url": "https://api.github.com/repos/apache/lucene-solr/commits/8e2dab7315739a0f5194600ee524f6a2ea616af6",
            "html_url": "https://github.com/apache/lucene-solr/commit/8e2dab7315739a0f5194600ee524f6a2ea616af6"
        }
    ],
    "stats": {
        "total": 303,
        "additions": 293,
        "deletions": 10
    },
    "files": [
        {
            "sha": "ce3544c0658a85afec0c98ff13e634b6f4f46366",
            "filename": "solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter.java",
            "status": "modified",
            "additions": 37,
            "deletions": 5,
            "changes": 42,
            "blob_url": "https://github.com/apache/lucene-solr/blob/b091934f9e98568b848d0584a1145c8e514cbd21/solr%2Fcore%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Fsecurity%2FDelegationTokenKerberosFilter.java",
            "raw_url": "https://github.com/apache/lucene-solr/raw/b091934f9e98568b848d0584a1145c8e514cbd21/solr%2Fcore%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Fsecurity%2FDelegationTokenKerberosFilter.java",
            "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr%2Fcore%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Fsecurity%2FDelegationTokenKerberosFilter.java?ref=b091934f9e98568b848d0584a1145c8e514cbd21",
            "patch": "@@ -46,6 +46,8 @@\n import org.apache.solr.common.cloud.SolrZkClient;\n import org.apache.solr.common.cloud.ZkACLProvider;\n import org.apache.solr.common.cloud.ZkCredentialsProvider;\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.data.ACL;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -65,8 +67,12 @@ public void init(FilterConfig conf) throws ServletException {\n     if (conf != null && \"zookeeper\".equals(conf.getInitParameter(\"signer.secret.provider\"))) {\n       SolrZkClient zkClient =\n           (SolrZkClient)conf.getServletContext().getAttribute(KerberosPlugin.DELEGATION_TOKEN_ZK_CLIENT);\n-      conf.getServletContext().setAttribute(\"signer.secret.provider.zookeeper.curator.client\",\n-          getCuratorClient(zkClient));\n+      try {\n+        conf.getServletContext().setAttribute(\"signer.secret.provider.zookeeper.curator.client\",\n+            getCuratorClient(zkClient));\n+      } catch (InterruptedException | KeeperException e) {\n+        throw new ServletException(e);\n+      }\n     }\n     super.init(conf);\n   }\n@@ -147,7 +153,7 @@ protected void initializeAuthHandler(String authHandlerClassName,\n     newAuthHandler.setAuthHandler(authHandler);\n   }\n \n-  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) {\n+  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) throws InterruptedException, KeeperException {\n     // should we try to build a RetryPolicy off of the ZkController?\n     RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n     if (zkClient == null) {\n@@ -161,6 +167,17 @@ protected CuratorFramework getCuratorClient(SolrZkClient zkClient) {\n     SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n     final int connectionTimeoutMs = 30000; // this value is currently hard coded, see SOLR-7561.\n \n+    // Create /security znode upfront. Without this, the curator framework creates this directory path\n+    // without the appropriate ACL configuration. This issue is possibly related to HADOOP-11973\n+    try {\n+      zkClient.makePath(SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH, CreateMode.PERSISTENT, true);\n+\n+    } catch (KeeperException ex) {\n+      if (ex.code() != KeeperException.Code.NODEEXISTS) {\n+        throw ex;\n+      }\n+    }\n+\n     curatorFramework = CuratorFrameworkFactory.builder()\n         .namespace(zkNamespace)\n         .connectString(zkConnectionString)\n@@ -178,12 +195,15 @@ protected CuratorFramework getCuratorClient(SolrZkClient zkClient) {\n    * Convert Solr Zk Credentials/ACLs to Curator versions\n    */\n   protected static class SolrZkToCuratorCredentialsACLs {\n+    private final String zkChroot;\n     private final ACLProvider aclProvider;\n     private final List<AuthInfo> authInfos;\n \n     public SolrZkToCuratorCredentialsACLs(SolrZkClient zkClient) {\n       this.aclProvider = createACLProvider(zkClient);\n       this.authInfos = createAuthInfo(zkClient);\n+      String zkHost = zkClient.getZkServerAddress();\n+      this.zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): null;\n     }\n \n     public ACLProvider getACLProvider() { return aclProvider; }\n@@ -199,8 +219,20 @@ public List<ACL> getDefaultAcl() {\n \n         @Override\n         public List<ACL> getAclForPath(String path) {\n-           List<ACL> acls = zkACLProvider.getACLsToAdd(path);\n-           return acls;\n+          List<ACL> acls = null;\n+\n+          // The logic in SecurityAwareZkACLProvider does not work when\n+          // the Solr zkPath is chrooted (e.g. /solr instead of /). This\n+          // due to the fact that the getACLsToAdd(..) callback provides\n+          // an absolute path (instead of relative path to the chroot) and\n+          // the string comparison in SecurityAwareZkACLProvider fails.\n+          if (zkACLProvider instanceof SecurityAwareZkACLProvider && zkChroot != null) {\n+            acls = zkACLProvider.getACLsToAdd(path.replace(zkChroot, \"\"));\n+          } else {\n+            acls = zkACLProvider.getACLsToAdd(path);\n+          }\n+\n+          return acls;\n         }\n       };\n     }"
        },
        {
            "sha": "205becc88354ca6fc4f94d9aaeb29533159fd001",
            "filename": "solr/core/src/java/org/apache/solr/security/HadoopAuthFilter.java",
            "status": "modified",
            "additions": 37,
            "deletions": 5,
            "changes": 42,
            "blob_url": "https://github.com/apache/lucene-solr/blob/b091934f9e98568b848d0584a1145c8e514cbd21/solr%2Fcore%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Fsecurity%2FHadoopAuthFilter.java",
            "raw_url": "https://github.com/apache/lucene-solr/raw/b091934f9e98568b848d0584a1145c8e514cbd21/solr%2Fcore%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Fsecurity%2FHadoopAuthFilter.java",
            "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr%2Fcore%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Fsecurity%2FHadoopAuthFilter.java?ref=b091934f9e98568b848d0584a1145c8e514cbd21",
            "patch": "@@ -43,6 +43,8 @@\n import org.apache.solr.common.cloud.SolrZkClient;\n import org.apache.solr.common.cloud.ZkACLProvider;\n import org.apache.solr.common.cloud.ZkCredentialsProvider;\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.data.ACL;\n \n /**\n@@ -62,8 +64,12 @@ public void init(FilterConfig conf) throws ServletException {\n     if (conf != null && \"zookeeper\".equals(conf.getInitParameter(\"signer.secret.provider\"))) {\n       SolrZkClient zkClient =\n           (SolrZkClient)conf.getServletContext().getAttribute(DELEGATION_TOKEN_ZK_CLIENT);\n-      conf.getServletContext().setAttribute(\"signer.secret.provider.zookeeper.curator.client\",\n-          getCuratorClient(zkClient));\n+      try {\n+        conf.getServletContext().setAttribute(\"signer.secret.provider.zookeeper.curator.client\",\n+            getCuratorClient(zkClient));\n+      } catch (KeeperException | InterruptedException e) {\n+        throw new ServletException(e);\n+      }\n     }\n     super.init(conf);\n   }\n@@ -125,7 +131,7 @@ protected void initializeAuthHandler(String authHandlerClassName,\n     newAuthHandler.setAuthHandler(authHandler);\n   }\n \n-  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) {\n+  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n     // should we try to build a RetryPolicy off of the ZkController?\n     RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n     if (zkClient == null) {\n@@ -139,6 +145,17 @@ protected CuratorFramework getCuratorClient(SolrZkClient zkClient) {\n     SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n     final int connectionTimeoutMs = 30000; // this value is currently hard coded, see SOLR-7561.\n \n+    // Create /security znode upfront. Without this, the curator framework creates this directory path\n+    // without the appropriate ACL configuration. This issue is possibly related to HADOOP-11973\n+    try {\n+      zkClient.makePath(SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH, CreateMode.PERSISTENT, true);\n+\n+    } catch (KeeperException ex) {\n+      if (ex.code() != KeeperException.Code.NODEEXISTS) {\n+        throw ex;\n+      }\n+    }\n+\n     curatorFramework = CuratorFrameworkFactory.builder()\n         .namespace(zkNamespace)\n         .connectString(zkConnectionString)\n@@ -156,12 +173,15 @@ protected CuratorFramework getCuratorClient(SolrZkClient zkClient) {\n    * Convert Solr Zk Credentials/ACLs to Curator versions\n    */\n   protected static class SolrZkToCuratorCredentialsACLs {\n+    private final String zkChroot;\n     private final ACLProvider aclProvider;\n     private final List<AuthInfo> authInfos;\n \n     public SolrZkToCuratorCredentialsACLs(SolrZkClient zkClient) {\n       this.aclProvider = createACLProvider(zkClient);\n       this.authInfos = createAuthInfo(zkClient);\n+      String zkHost = zkClient.getZkServerAddress();\n+      this.zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): null;\n     }\n \n     public ACLProvider getACLProvider() { return aclProvider; }\n@@ -177,8 +197,20 @@ public List<ACL> getDefaultAcl() {\n \n         @Override\n         public List<ACL> getAclForPath(String path) {\n-           List<ACL> acls = zkACLProvider.getACLsToAdd(path);\n-           return acls;\n+          List<ACL> acls = null;\n+\n+          // The logic in SecurityAwareZkACLProvider does not work when\n+          // the Solr zkPath is chrooted (e.g. /solr instead of /). This\n+          // due to the fact that the getACLsToAdd(..) callback provides\n+          // an absolute path (instead of relative path to the chroot) and\n+          // the string comparison in SecurityAwareZkACLProvider fails.\n+          if (zkACLProvider instanceof SecurityAwareZkACLProvider && zkChroot != null) {\n+            acls = zkACLProvider.getACLsToAdd(path.replace(zkChroot, \"\"));\n+          } else {\n+            acls = zkACLProvider.getACLsToAdd(path);\n+          }\n+\n+          return acls;\n         }\n       };\n     }"
        },
        {
            "sha": "28352f34ff97a63c6995f517a655c668bc59d191",
            "filename": "solr/core/src/java/org/apache/solr/security/HadoopAuthPlugin.java",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/apache/lucene-solr/blob/b091934f9e98568b848d0584a1145c8e514cbd21/solr%2Fcore%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Fsecurity%2FHadoopAuthPlugin.java",
            "raw_url": "https://github.com/apache/lucene-solr/raw/b091934f9e98568b848d0584a1145c8e514cbd21/solr%2Fcore%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Fsecurity%2FHadoopAuthPlugin.java",
            "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr%2Fcore%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Fsecurity%2FHadoopAuthPlugin.java?ref=b091934f9e98568b848d0584a1145c8e514cbd21",
            "patch": "@@ -142,6 +142,7 @@ public void init(Map<String,Object> pluginConfig) {\n       authFilter.init(conf);\n \n     } catch (ServletException e) {\n+      log.error(\"Error initializing \" + getClass().getSimpleName(), e);\n       throw new SolrException(ErrorCode.SERVER_ERROR, \"Error initializing \" + getClass().getName() + \": \"+e);\n     }\n   }"
        },
        {
            "sha": "ed734991c0687f11c6a99760e773a4a04f57a6c9",
            "filename": "solr/core/src/test/org/apache/solr/security/hadoop/TestZkAclsWithHadoopAuth.java",
            "status": "added",
            "additions": 216,
            "deletions": 0,
            "changes": 216,
            "blob_url": "https://github.com/apache/lucene-solr/blob/b091934f9e98568b848d0584a1145c8e514cbd21/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fsecurity%2Fhadoop%2FTestZkAclsWithHadoopAuth.java",
            "raw_url": "https://github.com/apache/lucene-solr/raw/b091934f9e98568b848d0584a1145c8e514cbd21/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fsecurity%2Fhadoop%2FTestZkAclsWithHadoopAuth.java",
            "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fsecurity%2Fhadoop%2FTestZkAclsWithHadoopAuth.java?ref=b091934f9e98568b848d0584a1145c8e514cbd21",
            "patch": "@@ -0,0 +1,216 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.security.hadoop;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.lucene.util.Constants;\n+import org.apache.solr.cloud.MiniSolrCloudCluster;\n+import org.apache.solr.cloud.SolrCloudTestCase;\n+import org.apache.solr.common.cloud.SecurityAwareZkACLProvider;\n+import org.apache.solr.common.cloud.ZkCredentialsProvider;\n+import org.apache.solr.common.cloud.ZkStateReader;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.KeeperException.Code;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.ZooDefs;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.data.ACL;\n+import org.apache.zookeeper.data.Id;\n+import org.apache.zookeeper.data.Stat;\n+import org.apache.zookeeper.server.ServerCnxn;\n+import org.apache.zookeeper.server.auth.AuthenticationProvider;\n+import org.apache.zookeeper.server.auth.ProviderRegistry;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class TestZkAclsWithHadoopAuth extends SolrCloudTestCase {\n+  protected static final int NUM_SERVERS = 1;\n+  protected static final int NUM_SHARDS = 1;\n+  protected static final int REPLICATION_FACTOR = 1;\n+\n+  @BeforeClass\n+  public static void setupClass() throws Exception {\n+    assumeFalse(\"Hadoop does not work on Windows\", Constants.WINDOWS);\n+    assumeFalse(\"FIXME: SOLR-8182: This test fails under Java 9\", Constants.JRE_IS_MINIMUM_JAVA9);\n+\n+    System.setProperty(\"zookeeper.authProvider.1\", DummyZKAuthProvider.class.getName());\n+    System.setProperty(\"zkCredentialsProvider\", DummyZkCredentialsProvider.class.getName());\n+    System.setProperty(\"zkACLProvider\", DummyZkAclProvider.class.getName());\n+\n+    ProviderRegistry.initialize();\n+\n+    configureCluster(NUM_SERVERS)// nodes\n+        .withSolrXml(MiniSolrCloudCluster.DEFAULT_CLOUD_SOLR_XML)\n+        .withSecurityJson(TEST_PATH().resolve(\"security\").resolve(\"hadoop_simple_auth_with_delegation.json\"))\n+        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n+        .configure();\n+  }\n+\n+  @AfterClass\n+  public static void tearDownClass() {\n+    System.clearProperty(\"zookeeper.authProvider.1\");\n+    System.clearProperty(\"zkCredentialsProvider\");\n+    System.clearProperty(\"zkACLProvider\");\n+  }\n+\n+  @Test\n+  public void testZkAcls() throws Exception {\n+    ZooKeeper keeper = null;\n+    try {\n+      keeper = new ZooKeeper(cluster.getZkServer().getZkAddress(), (int) TimeUnit.MINUTES.toMillis(1), new Watcher() {\n+        @Override\n+        public void process(WatchedEvent arg0) {\n+          // Do nothing\n+        }\n+      });\n+\n+      keeper.addAuthInfo(\"dummyauth\", \"solr\".getBytes(StandardCharsets.UTF_8));\n+\n+      // Test well known paths.\n+      checkNonSecurityACLs(keeper, \"/solr.xml\");\n+      checkSecurityACLs(keeper, \"/security/token\");\n+      checkSecurityACLs(keeper, \"/security\");\n+\n+      // Now test all ZK tree.\n+      String zkHost = cluster.getSolrClient().getZkHost();\n+      String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): null;\n+      walkZkTree(keeper, zkChroot, \"/\");\n+\n+    } finally {\n+      if (keeper != null) {\n+        keeper.close();\n+      }\n+    }\n+  }\n+\n+  private void walkZkTree (ZooKeeper keeper, String zkChroot, String path) throws Exception {\n+    if (isSecurityZNode(zkChroot, path)) {\n+      checkSecurityACLs(keeper, path);\n+    } else {\n+      checkNonSecurityACLs(keeper, path);\n+    }\n+\n+    List<String> children = keeper.getChildren(path, false);\n+    for (String child : children) {\n+      String subpath = path.endsWith(\"/\") ? path + child : path + \"/\" + child;\n+      walkZkTree(keeper, zkChroot, subpath);\n+    }\n+  }\n+\n+  private boolean isSecurityZNode(String zkChroot, String path) {\n+    String temp = path;\n+    if (zkChroot != null) {\n+      temp = path.replace(zkChroot, \"\");\n+    }\n+    return !ZkStateReader.SOLR_SECURITY_CONF_PATH.equals(path) &&\n+           temp.startsWith(SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH);\n+  }\n+\n+  private void checkSecurityACLs(ZooKeeper keeper, String path) throws Exception {\n+    List<ACL> acls = keeper.getACL(path, new Stat());\n+    String message = String.format(Locale.ROOT, \"Path %s ACLs found %s\", path, acls);\n+    assertEquals(message, 1, acls.size());\n+    assertTrue(message, acls.contains(new ACL(ZooDefs.Perms.ALL, new Id(\"dummyauth\", \"solr\"))));\n+  }\n+\n+  private void checkNonSecurityACLs(ZooKeeper keeper, String path)  throws Exception {\n+    List<ACL> acls = keeper.getACL(path, new Stat());\n+    String message = String.format(Locale.ROOT, \"Path %s ACLs found %s\", path, acls);\n+    assertEquals(message, 2, acls.size());\n+    assertTrue(message, acls.contains(new ACL(ZooDefs.Perms.ALL, new Id(\"dummyauth\", \"solr\"))));\n+    assertTrue(message, acls.contains(new ACL(ZooDefs.Perms.READ, new Id(\"world\", \"anyone\"))));\n+  }\n+\n+  public static class DummyZKAuthProvider implements AuthenticationProvider {\n+    public static final String zkSuperUser = \"zookeeper\";\n+    public static final Collection<String> validUsers = Arrays.asList(zkSuperUser, \"solr\", \"foo\");\n+\n+    @Override\n+    public String getScheme() {\n+      return \"dummyauth\";\n+    }\n+\n+    @Override\n+    public Code handleAuthentication(ServerCnxn arg0, byte[] arg1) {\n+      String userName = new String(arg1, StandardCharsets.UTF_8);\n+\n+      if (validUsers.contains(userName)) {\n+        if (zkSuperUser.equals(userName)) {\n+          arg0.addAuthInfo(new Id(\"super\", \"\"));\n+        }\n+        arg0.addAuthInfo(new Id(getScheme(), userName));\n+        return KeeperException.Code.OK;\n+      }\n+\n+      return KeeperException.Code.AUTHFAILED;\n+    }\n+\n+    @Override\n+    public boolean isAuthenticated() {\n+      return true;\n+    }\n+\n+    @Override\n+    public boolean isValid(String arg0) {\n+      return (arg0 != null) && validUsers.contains(arg0);\n+    }\n+\n+    @Override\n+    public boolean matches(String arg0, String arg1) {\n+      return arg0.equals(arg1);\n+    }\n+  }\n+\n+  public static class DummyZkCredentialsProvider implements ZkCredentialsProvider {\n+    public static final Collection<ZkCredentials> solrCreds =\n+        Arrays.asList(new ZkCredentials(\"dummyauth\", \"solr\".getBytes(StandardCharsets.UTF_8)));\n+\n+    @Override\n+    public Collection<ZkCredentials> getCredentials() {\n+      return solrCreds;\n+    }\n+  }\n+\n+  public static class DummyZkAclProvider extends SecurityAwareZkACLProvider {\n+\n+    @Override\n+    protected List<ACL> createNonSecurityACLsToAdd() {\n+      List<ACL> result = new ArrayList<>(2);\n+      result.add(new ACL(ZooDefs.Perms.ALL, new Id(\"dummyauth\", \"solr\")));\n+      result.add(new ACL(ZooDefs.Perms.READ, ZooDefs.Ids.ANYONE_ID_UNSAFE));\n+\n+      return result;\n+    }\n+\n+    @Override\n+    protected List<ACL> createSecurityACLsToAdd() {\n+      List<ACL> ret = new ArrayList<ACL>();\n+      ret.add(new ACL(ZooDefs.Perms.ALL, new Id(\"dummyauth\", \"solr\")));\n+      return ret;\n+    }\n+  }\n+\n+}"
        },
        {
            "sha": "7f4f0cb4e8dbd99da56cb828b5237f32ef4ace5a",
            "filename": "solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster.java",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/apache/lucene-solr/blob/b091934f9e98568b848d0584a1145c8e514cbd21/solr%2Ftest-framework%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Fcloud%2FMiniSolrCloudCluster.java",
            "raw_url": "https://github.com/apache/lucene-solr/raw/b091934f9e98568b848d0584a1145c8e514cbd21/solr%2Ftest-framework%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Fcloud%2FMiniSolrCloudCluster.java",
            "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr%2Ftest-framework%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Fcloud%2FMiniSolrCloudCluster.java?ref=b091934f9e98568b848d0584a1145c8e514cbd21",
            "patch": "@@ -86,6 +86,8 @@ public class MiniSolrCloudCluster {\n       \"    <int name=\\\"leaderVoteWait\\\">10000</int>\\n\" +\n       \"    <int name=\\\"distribUpdateConnTimeout\\\">${distribUpdateConnTimeout:45000}</int>\\n\" +\n       \"    <int name=\\\"distribUpdateSoTimeout\\\">${distribUpdateSoTimeout:340000}</int>\\n\" +\n+      \"    <str name=\\\"zkCredentialsProvider\\\">${zkCredentialsProvider:org.apache.solr.common.cloud.DefaultZkCredentialsProvider}</str> \\n\" +\n+      \"    <str name=\\\"zkACLProvider\\\">${zkACLProvider:org.apache.solr.common.cloud.DefaultZkACLProvider}</str> \\n\" +\n       \"  </solrcloud>\\n\" +\n       \"  <metrics>\\n\" +\n       \"    <reporter name=\\\"default\\\" class=\\\"org.apache.solr.metrics.reporters.SolrJmxReporter\\\">\\n\" +"
        }
    ]
}