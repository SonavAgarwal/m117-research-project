{
    "sha": "d87d1e4f8e20f6494c0232bf8560c961b46db634",
    "node_id": "MDY6Q29tbWl0MTI3MjEyOTpkODdkMWU0ZjhlMjBmNjQ5NGMwMjMyYmY4NTYwYzk2MWI0NmRiNjM0",
    "commit": {
        "author": {
            "name": "Jochen Schalanda",
            "email": "jochen@schalanda.name",
            "date": "2020-02-20T01:36:40Z"
        },
        "committer": {
            "name": "GitHub",
            "email": "noreply@github.com",
            "date": "2020-02-20T01:36:40Z"
        },
        "message": "Escape EL expressions in ViolationCollector (#3157)\n\nFixes #3153",
        "tree": {
            "sha": "c6f7015b7c2713d429c0285d5ecf57247bf0a295",
            "url": "https://api.github.com/repos/dropwizard/dropwizard/git/trees/c6f7015b7c2713d429c0285d5ecf57247bf0a295"
        },
        "url": "https://api.github.com/repos/dropwizard/dropwizard/git/commits/d87d1e4f8e20f6494c0232bf8560c961b46db634",
        "comment_count": 0,
        "verification": {
            "verified": true,
            "reason": "valid",
            "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeTeKoCRBK7hj4Ov3rIwAAdHIIAF2x/Wf/hQitvvOKxuB28j59\ngCenamyintBkekL+abPYVDVi6NTlscDGIyz2uCxdRn1FSi+RXEVR+d0oIm1VN7WR\nKZR9EViQUaXmunGDlsvnmIgqBKYpxXscz0BN+cEWS9x4yIiM8eFviMAkWESfeIUi\nEluKYYi7GMzq4AOul4qft9oZ+5X5AWohukyIvAltwLqBVIugEMS8qQGZmPvdyf8n\ngVkRCmIOvqBwGYztIFah6zsXTUplgmv/7dTJoPvU0dhPIhzYcOi8YUvcvEnTxKcO\ncSG7f15wMuXUjxSGICqqAAZTuMs6TLZl39DssObCFot3gYmdEWUnLvxZZGiVnnM=\n=wOim\n-----END PGP SIGNATURE-----\n",
            "payload": "tree c6f7015b7c2713d429c0285d5ecf57247bf0a295\nparent af0833b110a054742b543db27e4877976ca1ac27\nauthor Jochen Schalanda <jochen@schalanda.name> 1582162600 +0100\ncommitter GitHub <noreply@github.com> 1582162600 +0100\n\nEscape EL expressions in ViolationCollector (#3157)\n\nFixes #3153",
            "verified_at": "2024-11-08T07:46:02Z"
        }
    },
    "url": "https://api.github.com/repos/dropwizard/dropwizard/commits/d87d1e4f8e20f6494c0232bf8560c961b46db634",
    "html_url": "https://github.com/dropwizard/dropwizard/commit/d87d1e4f8e20f6494c0232bf8560c961b46db634",
    "comments_url": "https://api.github.com/repos/dropwizard/dropwizard/commits/d87d1e4f8e20f6494c0232bf8560c961b46db634/comments",
    "author": {
        "login": "joschi",
        "id": 43951,
        "node_id": "MDQ6VXNlcjQzOTUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/43951?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joschi",
        "html_url": "https://github.com/joschi",
        "followers_url": "https://api.github.com/users/joschi/followers",
        "following_url": "https://api.github.com/users/joschi/following{/other_user}",
        "gists_url": "https://api.github.com/users/joschi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/joschi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/joschi/subscriptions",
        "organizations_url": "https://api.github.com/users/joschi/orgs",
        "repos_url": "https://api.github.com/users/joschi/repos",
        "events_url": "https://api.github.com/users/joschi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/joschi/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "af0833b110a054742b543db27e4877976ca1ac27",
            "url": "https://api.github.com/repos/dropwizard/dropwizard/commits/af0833b110a054742b543db27e4877976ca1ac27",
            "html_url": "https://github.com/dropwizard/dropwizard/commit/af0833b110a054742b543db27e4877976ca1ac27"
        }
    ],
    "stats": {
        "total": 288,
        "additions": 197,
        "deletions": 91
    },
    "files": [
        {
            "sha": "5c0005cb7a0ba069db9df99b6d3c155e1dc9ed77",
            "filename": "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java",
            "status": "modified",
            "additions": 75,
            "deletions": 5,
            "changes": 80,
            "blob_url": "https://github.com/dropwizard/dropwizard/blob/d87d1e4f8e20f6494c0232bf8560c961b46db634/dropwizard-validation%2Fsrc%2Fmain%2Fjava%2Fio%2Fdropwizard%2Fvalidation%2Fselfvalidating%2FViolationCollector.java",
            "raw_url": "https://github.com/dropwizard/dropwizard/raw/d87d1e4f8e20f6494c0232bf8560c961b46db634/dropwizard-validation%2Fsrc%2Fmain%2Fjava%2Fio%2Fdropwizard%2Fvalidation%2Fselfvalidating%2FViolationCollector.java",
            "contents_url": "https://api.github.com/repos/dropwizard/dropwizard/contents/dropwizard-validation%2Fsrc%2Fmain%2Fjava%2Fio%2Fdropwizard%2Fvalidation%2Fselfvalidating%2FViolationCollector.java?ref=d87d1e4f8e20f6494c0232bf8560c961b46db634",
            "patch": "@@ -1,12 +1,16 @@\n package io.dropwizard.validation.selfvalidating;\n \n+import javax.annotation.Nullable;\n import javax.validation.ConstraintValidatorContext;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n /**\n  * This class is a simple wrapper around the ConstraintValidatorContext of hibernate validation.\n  * It collects all the violations of the SelfValidation methods of an object.\n  */\n public class ViolationCollector {\n+    private static final Pattern ESCAPE_PATTERN = Pattern.compile(\"\\\\$\\\\{\");\n \n     private boolean violationOccurred = false;\n     private ConstraintValidatorContext context;\n@@ -17,14 +21,80 @@ public ViolationCollector(ConstraintValidatorContext context) {\n     }\n \n     /**\n-     * Adds a new violation to this collector. This also sets violationOccurred to true.\n+     * Adds a new violation to this collector. This also sets {@code violationOccurred} to {@code true}.\n      *\n-     * @param msg the message of the violation\n+     * @param message the message of the violation (any EL expression will be escaped and not parsed)\n      */\n-    public void addViolation(String msg) {\n+    public void addViolation(String message) {\n         violationOccurred = true;\n-        context.buildConstraintViolationWithTemplate(msg)\n-            .addConstraintViolation();\n+        String messageTemplate = escapeEl(message);\n+        context.buildConstraintViolationWithTemplate(messageTemplate)\n+                .addConstraintViolation();\n+    }\n+\n+    /**\n+     * Adds a new violation to this collector. This also sets {@code violationOccurred} to {@code true}.\n+     *\n+     * @param propertyName the name of the property\n+     * @param message      the message of the violation (any EL expression will be escaped and not parsed)\n+     * @since 2.0.2\n+     */\n+    public void addViolation(String propertyName, String message) {\n+        violationOccurred = true;\n+        String messageTemplate = escapeEl(message);\n+        context.buildConstraintViolationWithTemplate(messageTemplate)\n+                .addPropertyNode(propertyName)\n+                .addConstraintViolation();\n+    }\n+\n+    /**\n+     * Adds a new violation to this collector. This also sets {@code violationOccurred} to {@code true}.\n+     *\n+     * @param propertyName the name of the property with the violation\n+     * @param index        the index of the element with the violation\n+     * @param message      the message of the violation (any EL expression will be escaped and not parsed)\n+     * @since 2.0.2\n+     */\n+    public void addViolation(String propertyName, Integer index, String message) {\n+        violationOccurred = true;\n+        String messageTemplate = escapeEl(message);\n+        context.buildConstraintViolationWithTemplate(messageTemplate)\n+                .addPropertyNode(propertyName)\n+                .addBeanNode().inIterable().atIndex(index)\n+                .addConstraintViolation();\n+    }\n+\n+    /**\n+     * Adds a new violation to this collector. This also sets {@code violationOccurred} to {@code true}.\n+     *\n+     * @param propertyName the name of the property with the violation\n+     * @param key          the key of the element with the violation\n+     * @param message      the message of the violation (any EL expression will be escaped and not parsed)\n+     * @since 2.0.2\n+     */\n+    public void addViolation(String propertyName, String key, String message) {\n+        violationOccurred = true;\n+        String messageTemplate = escapeEl(message);\n+        context.buildConstraintViolationWithTemplate(messageTemplate)\n+                .addPropertyNode(propertyName)\n+                .addBeanNode().inIterable().atKey(key)\n+                .addConstraintViolation();\n+    }\n+\n+    @Nullable\n+    private String escapeEl(@Nullable String s) {\n+        if (s == null || s.isEmpty()) {\n+            return s;\n+        }\n+\n+        final Matcher m = ESCAPE_PATTERN.matcher(s);\n+        final StringBuffer sb = new StringBuffer(s.length() + 16);\n+        while (m.find()) {\n+            m.appendReplacement(sb, \"\\\\\\\\\\\\${\");\n+        }\n+        m.appendTail(sb);\n+\n+        return sb.toString();\n     }\n \n     /**"
        },
        {
            "sha": "7ccf915579dbc840973840368e9f06805d45d22d",
            "filename": "dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java",
            "status": "modified",
            "additions": 122,
            "deletions": 86,
            "changes": 208,
            "blob_url": "https://github.com/dropwizard/dropwizard/blob/d87d1e4f8e20f6494c0232bf8560c961b46db634/dropwizard-validation%2Fsrc%2Ftest%2Fjava%2Fio%2Fdropwizard%2Fvalidation%2FSelfValidationTest.java",
            "raw_url": "https://github.com/dropwizard/dropwizard/raw/d87d1e4f8e20f6494c0232bf8560c961b46db634/dropwizard-validation%2Fsrc%2Ftest%2Fjava%2Fio%2Fdropwizard%2Fvalidation%2FSelfValidationTest.java",
            "contents_url": "https://api.github.com/repos/dropwizard/dropwizard/contents/dropwizard-validation%2Fsrc%2Ftest%2Fjava%2Fio%2Fdropwizard%2Fvalidation%2FSelfValidationTest.java?ref=d87d1e4f8e20f6494c0232bf8560c961b46db634",
            "patch": "@@ -1,64 +1,68 @@\n package io.dropwizard.validation;\n \n-import static org.assertj.core.api.Assertions.assertThat;\n-\n-import javax.annotation.concurrent.NotThreadSafe;\n-import javax.validation.Validator;\n-\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-\n import io.dropwizard.validation.selfvalidating.SelfValidating;\n import io.dropwizard.validation.selfvalidating.SelfValidation;\n import io.dropwizard.validation.selfvalidating.ViolationCollector;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n import uk.org.lidalia.slf4jext.Level;\n import uk.org.lidalia.slf4jtest.LoggingEvent;\n import uk.org.lidalia.slf4jtest.TestLoggerFactory;\n \n+import javax.annotation.concurrent.NotThreadSafe;\n+import javax.validation.Validator;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n @NotThreadSafe\n public class SelfValidationTest {\n \n     private static final String FAILED = \"failed\";\n     private static final String FAILED_RESULT = \" \" + FAILED;\n-    \n-    @BeforeEach @AfterEach\n+\n+    @AfterEach\n+    @BeforeEach\n     public void clearAllLoggers() {\n         //this must be a clear all because the validation runs in other threads\n         TestLoggerFactory.clearAll();\n     }\n \n     @SelfValidating\n     public static class FailingExample {\n+        @SuppressWarnings(\"unused\")\n         @SelfValidation\n         public void validateFail(ViolationCollector col) {\n             col.addViolation(FAILED);\n         }\n     }\n-    \n+\n     public static class SubclassExample extends FailingExample {\n+        @SuppressWarnings(\"unused\")\n         @SelfValidation\n         public void subValidateFail(ViolationCollector col) {\n-            col.addViolation(FAILED+\"subclass\");\n-        } \n+            col.addViolation(FAILED + \"subclass\");\n+        }\n     }\n \n     @SelfValidating\n     public static class AnnotatedSubclassExample extends FailingExample {\n+        @SuppressWarnings(\"unused\")\n         @SelfValidation\n         public void subValidateFail(ViolationCollector col) {\n-            col.addViolation(FAILED+\"subclass\");\n-        } \n+            col.addViolation(FAILED + \"subclass\");\n+        }\n     }\n-    \n+\n     public static class OverridingExample extends FailingExample {\n         @Override\n         public void validateFail(ViolationCollector col) {\n-        } \n+        }\n     }\n \n     @SelfValidating\n     public static class DirectContextExample {\n+        @SuppressWarnings(\"unused\")\n         @SelfValidation\n         public void validateFail(ViolationCollector col) {\n             col.getContext().buildConstraintViolationWithTemplate(FAILED).addConstraintViolation();\n@@ -102,19 +106,28 @@ private void validateFailPrivate(ViolationCollector col) {\n \n     @SelfValidating\n     public static class ComplexExample {\n+        @SuppressWarnings(\"unused\")\n         @SelfValidation\n         public void validateFail1(ViolationCollector col) {\n             col.addViolation(FAILED + \"1\");\n         }\n \n+        @SuppressWarnings(\"unused\")\n         @SelfValidation\n         public void validateFail2(ViolationCollector col) {\n-            col.addViolation(FAILED + \"2\");\n+            col.addViolation(\"p2\", FAILED);\n         }\n \n+        @SuppressWarnings(\"unused\")\n         @SelfValidation\n         public void validateFail3(ViolationCollector col) {\n-            col.addViolation(FAILED + \"3\");\n+            col.addViolation(\"p\", 3, FAILED);\n+        }\n+\n+        @SuppressWarnings(\"unused\")\n+        @SelfValidation\n+        public void validateFail4(ViolationCollector col) {\n+            col.addViolation(\"p\", \"four\", FAILED);\n         }\n \n         @SuppressWarnings(\"unused\")\n@@ -127,121 +140,144 @@ public void validateCorrect(ViolationCollector col) {\n     public static class NoValidations {\n     }\n \n+    @SelfValidating\n+    public static class InjectionExample {\n+        @SuppressWarnings(\"unused\")\n+        @SelfValidation\n+        public void validateFail(ViolationCollector col) {\n+            col.addViolation(\"${'value'}\");\n+            col.addViolation(\"${'property'}\", \"${'value'}\");\n+            col.addViolation(\"${'property'}\", 1, \"${'value'}\");\n+            col.addViolation(\"${'property'}\", \"${'key'}\", \"${'value'}\");\n+        }\n+    }\n+\n     private final Validator validator = BaseValidator.newValidator();\n \n     @Test\n-    public void failingExample() throws Exception {\n+    public void failingExample() {\n         assertThat(ConstraintViolations.format(validator.validate(new FailingExample())))\n-            .containsExactlyInAnyOrder(FAILED_RESULT);\n+                .containsExactlyInAnyOrder(FAILED_RESULT);\n         assertThat(TestLoggerFactory.getAllLoggingEvents())\n-            .isEmpty();\n+                .isEmpty();\n     }\n-    \n+\n     @Test\n-    public void subClassExample() throws Exception {\n+    public void subClassExample() {\n         assertThat(ConstraintViolations.format(validator.validate(new SubclassExample())))\n-            .containsExactlyInAnyOrder(\n-                    FAILED_RESULT,\n-                    FAILED_RESULT+\"subclass\"\n-            );\n+                .containsExactlyInAnyOrder(\n+                        FAILED_RESULT,\n+                        FAILED_RESULT + \"subclass\"\n+                );\n         assertThat(TestLoggerFactory.getAllLoggingEvents())\n-            .isEmpty();\n+                .isEmpty();\n     }\n-    \n+\n     @Test\n-    public void annotatedSubClassExample() throws Exception {\n+    public void annotatedSubClassExample() {\n         assertThat(ConstraintViolations.format(validator.validate(new AnnotatedSubclassExample())))\n-            .containsExactlyInAnyOrder(\n-                    FAILED_RESULT,\n-                    FAILED_RESULT+\"subclass\"\n-            );\n+                .containsExactlyInAnyOrder(\n+                        FAILED_RESULT,\n+                        FAILED_RESULT + \"subclass\"\n+                );\n         assertThat(TestLoggerFactory.getAllLoggingEvents())\n-            .isEmpty();\n+                .isEmpty();\n     }\n-    \n+\n     @Test\n-    public void overridingSubClassExample() throws Exception {\n+    public void overridingSubClassExample() {\n         assertThat(ConstraintViolations.format(validator.validate(new OverridingExample())))\n-            .isEmpty();\n+                .isEmpty();\n         assertThat(TestLoggerFactory.getAllLoggingEvents())\n-            .isEmpty();\n+                .isEmpty();\n     }\n \n     @Test\n-    public void correctExample() throws Exception {\n+    public void correctExample() {\n         assertThat(ConstraintViolations.format(validator.validate(new CorrectExample())))\n-            .isEmpty();\n+                .isEmpty();\n         assertThat(TestLoggerFactory.getAllLoggingEvents())\n-            .isEmpty();\n+                .isEmpty();\n     }\n \n     @Test\n-    public void multipleTestingOfSameClass() throws Exception {\n+    public void multipleTestingOfSameClass() {\n         assertThat(ConstraintViolations.format(validator.validate(new CorrectExample())))\n-            .isEmpty();\n+                .isEmpty();\n         assertThat(ConstraintViolations.format(validator.validate(new CorrectExample())))\n-            .isEmpty();\n+                .isEmpty();\n         assertThat(TestLoggerFactory.getAllLoggingEvents())\n-            .isEmpty();\n+                .isEmpty();\n     }\n \n     @Test\n-    public void testDirectContextUsage() throws Exception {\n+    public void testDirectContextUsage() {\n         assertThat(ConstraintViolations.format(validator.validate(new DirectContextExample())))\n-            .containsExactlyInAnyOrder(FAILED_RESULT);\n+                .containsExactlyInAnyOrder(FAILED_RESULT);\n         assertThat(TestLoggerFactory.getAllLoggingEvents())\n-            .isEmpty();\n+                .isEmpty();\n     }\n \n     @Test\n-    public void complexExample() throws Exception {\n+    public void complexExample() {\n         assertThat(ConstraintViolations.format(validator.validate(new ComplexExample())))\n-            .containsExactlyInAnyOrder(\n-                FAILED_RESULT + \"1\",\n-                FAILED_RESULT + \"2\",\n-                FAILED_RESULT + \"3\"\n-            );\n+                .containsExactly(\n+                        \" failed1\",\n+                        \"p2 failed\",\n+                        \"p[3] failed\",\n+                        \"p[four] failed\");\n         assertThat(TestLoggerFactory.getAllLoggingEvents())\n-            .isEmpty();\n+                .isEmpty();\n     }\n \n     @Test\n     public void invalidExample() throws Exception {\n         assertThat(ConstraintViolations.format(validator.validate(new InvalidExample())))\n-            .isEmpty();\n+                .isEmpty();\n         assertThat(TestLoggerFactory.getAllLoggingEvents())\n-            .containsExactlyInAnyOrder(\n-                    new LoggingEvent(\n-                            Level.ERROR, \n-                            \"The method {} is annotated with @SelfValidation but does not have a single parameter of type {}\",\n-                            InvalidExample.class.getMethod(\"validateFailAdditionalParameters\", ViolationCollector.class, int.class),\n-                            ViolationCollector.class\n-                    ),\n-                    new LoggingEvent(\n-                            Level.ERROR, \n-                            \"The method {} is annotated with @SelfValidation but does not return void. It is ignored\",\n-                            InvalidExample.class.getMethod(\"validateFailReturn\", ViolationCollector.class)\n-                    ),\n-                    new LoggingEvent(\n-                            Level.ERROR, \n-                            \"The method {} is annotated with @SelfValidation but is not public\",\n-                            InvalidExample.class.getDeclaredMethod(\"validateFailPrivate\", ViolationCollector.class)\n-                    )\n-            );\n+                .containsExactlyInAnyOrder(\n+                        new LoggingEvent(\n+                                Level.ERROR,\n+                                \"The method {} is annotated with @SelfValidation but does not have a single parameter of type {}\",\n+                                InvalidExample.class.getMethod(\"validateFailAdditionalParameters\", ViolationCollector.class, int.class),\n+                                ViolationCollector.class\n+                        ),\n+                        new LoggingEvent(\n+                                Level.ERROR,\n+                                \"The method {} is annotated with @SelfValidation but does not return void. It is ignored\",\n+                                InvalidExample.class.getMethod(\"validateFailReturn\", ViolationCollector.class)\n+                        ),\n+                        new LoggingEvent(\n+                                Level.ERROR,\n+                                \"The method {} is annotated with @SelfValidation but is not public\",\n+                                InvalidExample.class.getDeclaredMethod(\"validateFailPrivate\", ViolationCollector.class)\n+                        )\n+                );\n     }\n \n     @Test\n-    public void giveWarningIfNoValidationMethods() throws Exception {\n+    public void giveWarningIfNoValidationMethods() {\n         assertThat(ConstraintViolations.format(validator.validate(new NoValidations())))\n-            .isEmpty();\n+                .isEmpty();\n         assertThat(TestLoggerFactory.getAllLoggingEvents())\n-        .containsExactlyInAnyOrder(\n-                new LoggingEvent(\n-                        Level.WARN, \n-                        \"The class {} is annotated with @SelfValidating but contains no valid methods that are annotated with @SelfValidation\",\n-                        NoValidations.class\n-                )\n-                \n+                .containsExactlyInAnyOrder(\n+                        new LoggingEvent(\n+                                Level.WARN,\n+                                \"The class {} is annotated with @SelfValidating but contains no valid methods that are annotated with @SelfValidation\",\n+                                NoValidations.class\n+                        )\n+\n+                );\n+    }\n+\n+    @Test\n+    public void violationMessagesAreEscaped() {\n+        assertThat(ConstraintViolations.format(validator.validate(new InjectionExample()))).containsExactly(\n+                \" ${'value'}\",\n+                \"${'property'} ${'value'}\",\n+                \"${'property'}[${'key'}] ${'value'}\",\n+                \"${'property'}[1] ${'value'}\"\n         );\n+        assertThat(TestLoggerFactory.getAllLoggingEvents()).isEmpty();\n     }\n }"
        }
    ]
}