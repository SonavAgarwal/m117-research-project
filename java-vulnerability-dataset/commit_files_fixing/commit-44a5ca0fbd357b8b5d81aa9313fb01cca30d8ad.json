{
    "sha": "44a5ca0fbd357b8b5d81aa9313fb01cca30d8ad3",
    "node_id": "MDY6Q29tbWl0MjU2MjM5NDI6NDRhNWNhMGZiZDM1N2I4YjVkODFhYTkzMTNmYjAxY2NhMzBkOGFkMw==",
    "commit": {
        "author": {
            "name": "Francesco Chicchiricc\u00f2",
            "email": "ilgrosso@apache.org",
            "date": "2018-03-08T16:25:37Z"
        },
        "committer": {
            "name": "Francesco Chicchiricc\u00f2",
            "email": "ilgrosso@apache.org",
            "date": "2018-03-09T13:49:52Z"
        },
        "message": "Review fields usable for search and orderBy",
        "tree": {
            "sha": "fbc8dcd9222c8abdbbc2cdce42a0ebef18e3a55c",
            "url": "https://api.github.com/repos/apache/syncope/git/trees/fbc8dcd9222c8abdbbc2cdce42a0ebef18e3a55c"
        },
        "url": "https://api.github.com/repos/apache/syncope/git/commits/44a5ca0fbd357b8b5d81aa9313fb01cca30d8ad3",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/syncope/commits/44a5ca0fbd357b8b5d81aa9313fb01cca30d8ad3",
    "html_url": "https://github.com/apache/syncope/commit/44a5ca0fbd357b8b5d81aa9313fb01cca30d8ad3",
    "comments_url": "https://api.github.com/repos/apache/syncope/commits/44a5ca0fbd357b8b5d81aa9313fb01cca30d8ad3/comments",
    "author": {
        "login": "ilgrosso",
        "id": 1064664,
        "node_id": "MDQ6VXNlcjEwNjQ2NjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1064664?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ilgrosso",
        "html_url": "https://github.com/ilgrosso",
        "followers_url": "https://api.github.com/users/ilgrosso/followers",
        "following_url": "https://api.github.com/users/ilgrosso/following{/other_user}",
        "gists_url": "https://api.github.com/users/ilgrosso/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ilgrosso/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ilgrosso/subscriptions",
        "organizations_url": "https://api.github.com/users/ilgrosso/orgs",
        "repos_url": "https://api.github.com/users/ilgrosso/repos",
        "events_url": "https://api.github.com/users/ilgrosso/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ilgrosso/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "ilgrosso",
        "id": 1064664,
        "node_id": "MDQ6VXNlcjEwNjQ2NjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1064664?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ilgrosso",
        "html_url": "https://github.com/ilgrosso",
        "followers_url": "https://api.github.com/users/ilgrosso/followers",
        "following_url": "https://api.github.com/users/ilgrosso/following{/other_user}",
        "gists_url": "https://api.github.com/users/ilgrosso/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ilgrosso/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ilgrosso/subscriptions",
        "organizations_url": "https://api.github.com/users/ilgrosso/orgs",
        "repos_url": "https://api.github.com/users/ilgrosso/repos",
        "events_url": "https://api.github.com/users/ilgrosso/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ilgrosso/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "726231fbf7b817bd2a9467171dcb1c0087c75bc6",
            "url": "https://api.github.com/repos/apache/syncope/commits/726231fbf7b817bd2a9467171dcb1c0087c75bc6",
            "html_url": "https://github.com/apache/syncope/commit/726231fbf7b817bd2a9467171dcb1c0087c75bc6"
        }
    ],
    "stats": {
        "total": 39,
        "additions": 36,
        "deletions": 3
    },
    "files": [
        {
            "sha": "b61dfc8f8dd61a9dbcca1f59e7b5bf4edc634913",
            "filename": "common/src/main/java/org/apache/syncope/common/search/SearchableFields.java",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/apache/syncope/blob/44a5ca0fbd357b8b5d81aa9313fb01cca30d8ad3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FSearchableFields.java",
            "raw_url": "https://github.com/apache/syncope/raw/44a5ca0fbd357b8b5d81aa9313fb01cca30d8ad3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FSearchableFields.java",
            "contents_url": "https://api.github.com/repos/apache/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FSearchableFields.java?ref=44a5ca0fbd357b8b5d81aa9313fb01cca30d8ad3",
            "patch": "@@ -33,7 +33,7 @@ public class SearchableFields {\n     protected static final String[] ATTRIBUTES_NOTINCLUDED = {\n         \"attrs\", \"derAttrs\", \"virAttrs\",\n         \"serialVersionUID\", \"memberships\", \"entitlements\", \"resources\", \"password\",\n-        \"propagationTOs\", \"propagationStatusMap\"\n+        \"propagationTOs\", \"propagationStatusMap\", \"securityAnswer\", \"token\", \"tokenExpireTime\"\n     };\n \n     public static final List<String> get(final SubjectType subjectType) {"
        },
        {
            "sha": "7b03b837ac862719ba3d0b8edd62af2aec846ec9",
            "filename": "core/src/main/java/org/apache/syncope/core/persistence/dao/impl/SubjectSearchDAOImpl.java",
            "status": "modified",
            "additions": 18,
            "deletions": 2,
            "changes": 20,
            "blob_url": "https://github.com/apache/syncope/blob/44a5ca0fbd357b8b5d81aa9313fb01cca30d8ad3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSubjectSearchDAOImpl.java",
            "raw_url": "https://github.com/apache/syncope/raw/44a5ca0fbd357b8b5d81aa9313fb01cca30d8ad3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSubjectSearchDAOImpl.java",
            "contents_url": "https://api.github.com/repos/apache/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSubjectSearchDAOImpl.java?ref=44a5ca0fbd357b8b5d81aa9313fb01cca30d8ad3",
            "patch": "@@ -63,6 +63,10 @@ public class SubjectSearchDAOImpl extends AbstractDAOImpl implements SubjectSear\n \n     private static final String[] SUBJECT_FIELDS = new String[] { \"parent\", \"userOwner\", \"roleOwner\" };\n \n+    private static final String[] ORDER_BY_NOT_ALLOWED = {\n+        \"serialVersionUID\", \"password\", \"securityQuestion\", \"securityAnswer\", \"token\", \"tokenExpireTime\"\n+    };\n+\n     @Autowired\n     private UserDAO userDAO;\n \n@@ -285,12 +289,24 @@ private StringBuilder buildOrderBy(final OrderBySupport obs) {\n         return orderBy;\n     }\n \n-    private OrderBySupport parseOrderBy(final SearchSupport svs, final List<OrderByClause> orderByClauses) {\n+    protected List<OrderByClause> filterOrderBy(final List<OrderByClause> orderBy) {\n+        List<OrderByClause> result = new ArrayList<OrderByClause>();\n+\n+        for (OrderByClause clause : orderBy) {\n+            if (!ArrayUtils.contains(ORDER_BY_NOT_ALLOWED, clause.getField())) {\n+                result.add(clause);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    private OrderBySupport parseOrderBy(final SearchSupport svs, final List<OrderByClause> orderBy) {\n         final AttributableUtil attrUtil = AttributableUtil.getInstance(svs.type.asAttributableType());\n \n         OrderBySupport obs = new OrderBySupport();\n \n-        for (OrderByClause clause : orderByClauses) {\n+        for (OrderByClause clause : filterOrderBy(orderBy)) {\n             OrderBySupport.Item item = new OrderBySupport.Item();\n \n             Field subjectField = ReflectionUtils.findField(attrUtil.attributableClass(), clause.getField());"
        },
        {
            "sha": "974edd8298bf508d0d2b4c29b1981c382017ee15",
            "filename": "core/src/test/java/org/apache/syncope/core/rest/SearchTestITCase.java",
            "status": "modified",
            "additions": 17,
            "deletions": 0,
            "changes": 17,
            "blob_url": "https://github.com/apache/syncope/blob/44a5ca0fbd357b8b5d81aa9313fb01cca30d8ad3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSearchTestITCase.java",
            "raw_url": "https://github.com/apache/syncope/raw/44a5ca0fbd357b8b5d81aa9313fb01cca30d8ad3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSearchTestITCase.java",
            "contents_url": "https://api.github.com/repos/apache/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSearchTestITCase.java?ref=44a5ca0fbd357b8b5d81aa9313fb01cca30d8ad3",
            "patch": "@@ -27,6 +27,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.syncope.client.SyncopeClient;\n import org.apache.syncope.common.reqres.PagedResult;\n import org.apache.syncope.common.services.UserSelfService;\n@@ -199,6 +200,22 @@ public void nested() {\n         }\n     }\n \n+    @Test\n+    public void searchBySecurityAnswer() {\n+        String securityAnswer = RandomStringUtils.randomAlphanumeric(10);\n+        UserTO userTO = UserTestITCase.getUniqueSampleTO(\"securityAnswer@syncope.apache.org\");\n+        userTO.setSecurityQuestion(1L);\n+        userTO.setSecurityAnswer(securityAnswer);\n+\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO.getSecurityQuestion());\n+\n+        PagedResult<UserTO> matchingUsers = userService.search(SyncopeClient.getUserSearchConditionBuilder().\n+                is(\"securityAnswer\").equalTo(securityAnswer).query());\n+        assertNotNull(matchingUsers);\n+        assertTrue(matchingUsers.getResult().isEmpty());\n+    }\n+\n     @Test\n     public void orderBy() {\n         PagedResult<UserTO> users = userService.search("
        }
    ]
}