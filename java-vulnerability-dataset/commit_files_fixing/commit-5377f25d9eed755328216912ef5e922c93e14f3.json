{
    "sha": "5377f25d9eed755328216912ef5e922c93e14f3e",
    "node_id": "MDY6Q29tbWl0NTE1MjI4NTo1Mzc3ZjI1ZDllZWQ3NTUzMjgyMTY5MTJlZjVlOTIyYzkzZTE0ZjNl",
    "commit": {
        "author": {
            "name": "Jake Wharton",
            "email": "jakewharton@gmail.com",
            "date": "2016-02-08T03:17:57Z"
        },
        "committer": {
            "name": "Jake Wharton",
            "email": "jakewharton@gmail.com",
            "date": "2016-02-08T03:17:57Z"
        },
        "message": "Merge pull request #2326 from square/jwilson_0207_backport_pinning_fixes\n\nBackport CertificatePinner fixes to the 2.x branch",
        "tree": {
            "sha": "538436545a747b89a529ba91fa22265f4280efe8",
            "url": "https://api.github.com/repos/square/okhttp/git/trees/538436545a747b89a529ba91fa22265f4280efe8"
        },
        "url": "https://api.github.com/repos/square/okhttp/git/commits/5377f25d9eed755328216912ef5e922c93e14f3e",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/square/okhttp/commits/5377f25d9eed755328216912ef5e922c93e14f3e",
    "html_url": "https://github.com/square/okhttp/commit/5377f25d9eed755328216912ef5e922c93e14f3e",
    "comments_url": "https://api.github.com/repos/square/okhttp/commits/5377f25d9eed755328216912ef5e922c93e14f3e/comments",
    "author": {
        "login": "JakeWharton",
        "id": 66577,
        "node_id": "MDQ6VXNlcjY2NTc3",
        "avatar_url": "https://avatars.githubusercontent.com/u/66577?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JakeWharton",
        "html_url": "https://github.com/JakeWharton",
        "followers_url": "https://api.github.com/users/JakeWharton/followers",
        "following_url": "https://api.github.com/users/JakeWharton/following{/other_user}",
        "gists_url": "https://api.github.com/users/JakeWharton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/JakeWharton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/JakeWharton/subscriptions",
        "organizations_url": "https://api.github.com/users/JakeWharton/orgs",
        "repos_url": "https://api.github.com/users/JakeWharton/repos",
        "events_url": "https://api.github.com/users/JakeWharton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/JakeWharton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "JakeWharton",
        "id": 66577,
        "node_id": "MDQ6VXNlcjY2NTc3",
        "avatar_url": "https://avatars.githubusercontent.com/u/66577?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JakeWharton",
        "html_url": "https://github.com/JakeWharton",
        "followers_url": "https://api.github.com/users/JakeWharton/followers",
        "following_url": "https://api.github.com/users/JakeWharton/following{/other_user}",
        "gists_url": "https://api.github.com/users/JakeWharton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/JakeWharton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/JakeWharton/subscriptions",
        "organizations_url": "https://api.github.com/users/JakeWharton/orgs",
        "repos_url": "https://api.github.com/users/JakeWharton/repos",
        "events_url": "https://api.github.com/users/JakeWharton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/JakeWharton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "831230aaf667ceb8078a36705c41df583678b7aa",
            "url": "https://api.github.com/repos/square/okhttp/commits/831230aaf667ceb8078a36705c41df583678b7aa",
            "html_url": "https://github.com/square/okhttp/commit/831230aaf667ceb8078a36705c41df583678b7aa"
        },
        {
            "sha": "1094d74922d292d3d461c983946a5650dcb53c29",
            "url": "https://api.github.com/repos/square/okhttp/commits/1094d74922d292d3d461c983946a5650dcb53c29",
            "html_url": "https://github.com/square/okhttp/commit/1094d74922d292d3d461c983946a5650dcb53c29"
        }
    ],
    "stats": {
        "total": 312,
        "additions": 225,
        "deletions": 87
    },
    "files": [
        {
            "sha": "68c0946b1aab10cb24853bc9b404c2a6ba210ecb",
            "filename": "okhttp-tests/src/test/java/com/squareup/okhttp/internal/tls/CertificateChainCleanerTest.java",
            "status": "renamed",
            "additions": 25,
            "deletions": 24,
            "changes": 49,
            "blob_url": "https://github.com/square/okhttp/blob/5377f25d9eed755328216912ef5e922c93e14f3e/okhttp-tests%2Fsrc%2Ftest%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2Finternal%2Ftls%2FCertificateChainCleanerTest.java",
            "raw_url": "https://github.com/square/okhttp/raw/5377f25d9eed755328216912ef5e922c93e14f3e/okhttp-tests%2Fsrc%2Ftest%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2Finternal%2Ftls%2FCertificateChainCleanerTest.java",
            "contents_url": "https://api.github.com/repos/square/okhttp/contents/okhttp-tests%2Fsrc%2Ftest%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2Finternal%2Ftls%2FCertificateChainCleanerTest.java?ref=5377f25d9eed755328216912ef5e922c93e14f3e",
            "patch": "@@ -15,33 +15,34 @@\n  */\n package com.squareup.okhttp.internal.tls;\n \n+import com.squareup.okhttp.internal.HeldCertificate;\n import java.security.cert.Certificate;\n import java.util.ArrayList;\n import java.util.List;\n import javax.net.ssl.SSLPeerUnverifiedException;\n-import com.squareup.okhttp.internal.HeldCertificate;\n import org.junit.Test;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.fail;\n \n-public final class CertificateAuthorityCouncilTest {\n+public final class CertificateChainCleanerTest {\n   @Test public void normalizeSingleSelfSignedCertificate() throws Exception {\n     HeldCertificate root = new HeldCertificate.Builder()\n         .serialNumber(\"1\")\n         .build();\n-    CertificateAuthorityCouncil council = new CertificateAuthorityCouncil(root.certificate);\n-    assertEquals(list(root), council.normalizeCertificateChain(list(root)));\n+    CertificateChainCleaner council = new CertificateChainCleaner(\n+        new RealTrustRootIndex(root.certificate));\n+    assertEquals(list(root), council.clean(list(root)));\n   }\n \n   @Test public void normalizeUnknownSelfSignedCertificate() throws Exception {\n     HeldCertificate root = new HeldCertificate.Builder()\n         .serialNumber(\"1\")\n         .build();\n-    CertificateAuthorityCouncil council = new CertificateAuthorityCouncil();\n+    CertificateChainCleaner council = new CertificateChainCleaner(new RealTrustRootIndex());\n \n     try {\n-      council.normalizeCertificateChain(list(root));\n+      council.clean(list(root));\n       fail();\n     } catch (SSLPeerUnverifiedException expected) {\n     }\n@@ -60,9 +61,9 @@ public final class CertificateAuthorityCouncilTest {\n         .issuedBy(certA)\n         .build();\n \n-    CertificateAuthorityCouncil council = new CertificateAuthorityCouncil(root.certificate);\n-    assertEquals(list(certB, certA, root),\n-        council.normalizeCertificateChain(list(certB, certA, root)));\n+    CertificateChainCleaner council = new CertificateChainCleaner(\n+        new RealTrustRootIndex(root.certificate));\n+    assertEquals(list(certB, certA, root), council.clean(list(certB, certA, root)));\n   }\n \n   @Test public void orderedChainOfCertificatesWithoutRoot() throws Exception {\n@@ -78,9 +79,9 @@ public final class CertificateAuthorityCouncilTest {\n         .issuedBy(certA)\n         .build();\n \n-    CertificateAuthorityCouncil council = new CertificateAuthorityCouncil(root.certificate);\n-    assertEquals(list(certB, certA, root),\n-        council.normalizeCertificateChain(list(certB, certA))); // Root is added!\n+    CertificateChainCleaner council = new CertificateChainCleaner(\n+        new RealTrustRootIndex(root.certificate));\n+    assertEquals(list(certB, certA, root), council.clean(list(certB, certA))); // Root is added!\n   }\n \n   @Test public void unorderedChainOfCertificatesWithRoot() throws Exception {\n@@ -100,9 +101,9 @@ public final class CertificateAuthorityCouncilTest {\n         .issuedBy(certB)\n         .build();\n \n-    CertificateAuthorityCouncil council = new CertificateAuthorityCouncil(root.certificate);\n-    assertEquals(list(certC, certB, certA, root),\n-        council.normalizeCertificateChain(list(certC, certA, root, certB)));\n+    CertificateChainCleaner council = new CertificateChainCleaner(\n+        new RealTrustRootIndex(root.certificate));\n+    assertEquals(list(certC, certB, certA, root), council.clean(list(certC, certA, root, certB)));\n   }\n \n   @Test public void unorderedChainOfCertificatesWithoutRoot() throws Exception {\n@@ -122,9 +123,9 @@ public final class CertificateAuthorityCouncilTest {\n         .issuedBy(certB)\n         .build();\n \n-    CertificateAuthorityCouncil council = new CertificateAuthorityCouncil(root.certificate);\n-    assertEquals(list(certC, certB, certA, root),\n-        council.normalizeCertificateChain(list(certC, certA, certB)));\n+    CertificateChainCleaner council = new CertificateChainCleaner(\n+        new RealTrustRootIndex(root.certificate));\n+    assertEquals(list(certC, certB, certA, root), council.clean(list(certC, certA, certB)));\n   }\n \n   @Test public void unrelatedCertificatesAreOmitted() throws Exception {\n@@ -143,9 +144,10 @@ public final class CertificateAuthorityCouncilTest {\n         .serialNumber(\"4\")\n         .build();\n \n-    CertificateAuthorityCouncil council = new CertificateAuthorityCouncil(root.certificate);\n+    CertificateChainCleaner council = new CertificateChainCleaner(\n+        new RealTrustRootIndex(root.certificate));\n     assertEquals(list(certB, certA, root),\n-        council.normalizeCertificateChain(list(certB, certUnnecessary, certA, root)));\n+        council.clean(list(certB, certUnnecessary, certA, root)));\n   }\n \n   @Test public void unnecessaryTrustedCertificatesAreOmitted() throws Exception {\n@@ -165,10 +167,9 @@ public final class CertificateAuthorityCouncilTest {\n         .issuedBy(certA)\n         .build();\n \n-    CertificateAuthorityCouncil council = new CertificateAuthorityCouncil(\n-        superRoot.certificate, root.certificate);\n-    assertEquals(list(certB, certA, root),\n-        council.normalizeCertificateChain(list(certB, certA, root, superRoot)));\n+    CertificateChainCleaner council = new CertificateChainCleaner(\n+        new RealTrustRootIndex(superRoot.certificate, root.certificate));\n+    assertEquals(list(certB, certA, root), council.clean(list(certB, certA, root, superRoot)));\n   }\n \n   private List<Certificate> list(HeldCertificate... heldCertificates) {",
            "previous_filename": "okhttp-tests/src/test/java/com/squareup/okhttp/internal/tls/CertificateAuthorityCouncilTest.java"
        },
        {
            "sha": "bd3df19ca241ffeae4e3f4ff33ee0eea24322be0",
            "filename": "okhttp/src/main/java/com/squareup/okhttp/CertificatePinner.java",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/square/okhttp/blob/5377f25d9eed755328216912ef5e922c93e14f3e/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2FCertificatePinner.java",
            "raw_url": "https://github.com/square/okhttp/raw/5377f25d9eed755328216912ef5e922c93e14f3e/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2FCertificatePinner.java",
            "contents_url": "https://api.github.com/repos/square/okhttp/contents/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2FCertificatePinner.java?ref=5377f25d9eed755328216912ef5e922c93e14f3e",
            "patch": "@@ -135,7 +135,7 @@ public final class CertificatePinner {\n   private final Map<String, Set<ByteString>> hostnameToPins;\n \n   private CertificatePinner(Builder builder) {\n-    hostnameToPins = Util.immutableMap(builder.hostnameToPins);\n+    this.hostnameToPins = Util.immutableMap(builder.hostnameToPins);\n   }\n \n   /**"
        },
        {
            "sha": "a2df181fc605ca06716f7798299f464509d99689",
            "filename": "okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java",
            "status": "modified",
            "additions": 25,
            "deletions": 1,
            "changes": 26,
            "blob_url": "https://github.com/square/okhttp/blob/5377f25d9eed755328216912ef5e922c93e14f3e/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2Finternal%2FPlatform.java",
            "raw_url": "https://github.com/square/okhttp/raw/5377f25d9eed755328216912ef5e922c93e14f3e/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2Finternal%2FPlatform.java",
            "contents_url": "https://api.github.com/repos/square/okhttp/contents/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2Finternal%2FPlatform.java?ref=5377f25d9eed755328216912ef5e922c93e14f3e",
            "patch": "@@ -18,6 +18,9 @@\n \n import android.util.Log;\n import com.squareup.okhttp.Protocol;\n+import com.squareup.okhttp.internal.tls.AndroidTrustRootIndex;\n+import com.squareup.okhttp.internal.tls.RealTrustRootIndex;\n+import com.squareup.okhttp.internal.tls.TrustRootIndex;\n import java.io.IOException;\n import java.lang.reflect.Field;\n import java.lang.reflect.InvocationHandler;\n@@ -86,6 +89,10 @@ public X509TrustManager trustManager(SSLSocketFactory sslSocketFactory) {\n     return null;\n   }\n \n+  public TrustRootIndex trustRootIndex(X509TrustManager trustManager) {\n+    return new RealTrustRootIndex(trustManager.getAcceptedIssuers());\n+  }\n+\n   /**\n    * Configure TLS extensions on {@code sslSocket} for {@code route}.\n    *\n@@ -235,7 +242,18 @@ public Android(Class<?> sslParametersClass, OptionalMethod<Socket> setUseSession\n \n     @Override public X509TrustManager trustManager(SSLSocketFactory sslSocketFactory) {\n       Object context = readFieldOrNull(sslSocketFactory, sslParametersClass, \"sslParameters\");\n-      if (context == null) return null;\n+      if (context == null) {\n+        // If that didn't work, try the Google Play Services SSL provider before giving up. This\n+        // must be loaded by the SSLSocketFactory's class loader.\n+        try {\n+          Class<?> gmsSslParametersClass = Class.forName(\n+              \"com.google.android.gms.org.conscrypt.SSLParametersImpl\", false,\n+              sslSocketFactory.getClass().getClassLoader());\n+          context = readFieldOrNull(sslSocketFactory, gmsSslParametersClass, \"sslParameters\");\n+        } catch (ClassNotFoundException e) {\n+          return null;\n+        }\n+      }\n \n       X509TrustManager x509TrustManager = readFieldOrNull(\n           context, X509TrustManager.class, \"x509TrustManager\");\n@@ -244,6 +262,12 @@ public Android(Class<?> sslParametersClass, OptionalMethod<Socket> setUseSession\n       return readFieldOrNull(context, X509TrustManager.class, \"trustManager\");\n     }\n \n+    @Override public TrustRootIndex trustRootIndex(X509TrustManager trustManager) {\n+      TrustRootIndex result = AndroidTrustRootIndex.get(trustManager);\n+      if (result != null) return result;\n+      return super.trustRootIndex(trustManager);\n+    }\n+\n     @Override public void configureTlsExtensions(\n         SSLSocket sslSocket, String hostname, List<Protocol> protocols) {\n       // Enable SNI and session tickets."
        },
        {
            "sha": "9ff53c1c1068a27c36d8a14ecacf55f506e070f0",
            "filename": "okhttp/src/main/java/com/squareup/okhttp/internal/io/RealConnection.java",
            "status": "modified",
            "additions": 12,
            "deletions": 12,
            "changes": 24,
            "blob_url": "https://github.com/square/okhttp/blob/5377f25d9eed755328216912ef5e922c93e14f3e/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2Finternal%2Fio%2FRealConnection.java",
            "raw_url": "https://github.com/square/okhttp/raw/5377f25d9eed755328216912ef5e922c93e14f3e/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2Finternal%2Fio%2FRealConnection.java",
            "contents_url": "https://api.github.com/repos/square/okhttp/contents/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2Finternal%2Fio%2FRealConnection.java?ref=5377f25d9eed755328216912ef5e922c93e14f3e",
            "patch": "@@ -35,8 +35,9 @@\n import com.squareup.okhttp.internal.http.OkHeaders;\n import com.squareup.okhttp.internal.http.RouteException;\n import com.squareup.okhttp.internal.http.StreamAllocation;\n-import com.squareup.okhttp.internal.tls.CertificateAuthorityCouncil;\n+import com.squareup.okhttp.internal.tls.CertificateChainCleaner;\n import com.squareup.okhttp.internal.tls.OkHostnameVerifier;\n+import com.squareup.okhttp.internal.tls.TrustRootIndex;\n import java.io.IOException;\n import java.lang.ref.Reference;\n import java.net.ConnectException;\n@@ -202,8 +203,9 @@ private void connectTls(int readTimeout, int writeTimeout,\n \n       // Check that the certificate pinner is satisfied by the certificates presented.\n       if (address.getCertificatePinner() != CertificatePinner.DEFAULT) {\n-        List<Certificate> certificates = certificateAuthorityCouncil(address.getSslSocketFactory())\n-            .normalizeCertificateChain(unverifiedHandshake.peerCertificates());\n+        TrustRootIndex trustRootIndex = trustRootIndex(address.getSslSocketFactory());\n+        List<Certificate> certificates = new CertificateChainCleaner(trustRootIndex)\n+            .clean(unverifiedHandshake.peerCertificates());\n         address.getCertificatePinner().check(address.getUriHost(), certificates);\n       }\n \n@@ -233,22 +235,20 @@ private void connectTls(int readTimeout, int writeTimeout,\n   }\n \n   private static SSLSocketFactory lastSslSocketFactory;\n-  private static CertificateAuthorityCouncil lastCertificateAuthorityCouncil;\n+  private static TrustRootIndex lastTrustRootIndex;\n \n   /**\n-   * Returns a certificate authority council for {@code sslSocketFactory}. This uses a static,\n-   * single-element cache to avoid redoing reflection and SSL indexing in the common case where most\n-   * SSL connections use the same SSL socket factory.\n+   * Returns a trust root index for {@code sslSocketFactory}. This uses a static, single-element\n+   * cache to avoid redoing reflection and SSL indexing in the common case where most SSL\n+   * connections use the same SSL socket factory.\n    */\n-  private static synchronized CertificateAuthorityCouncil certificateAuthorityCouncil(\n-      SSLSocketFactory sslSocketFactory) {\n+  private static synchronized TrustRootIndex trustRootIndex(SSLSocketFactory sslSocketFactory) {\n     if (sslSocketFactory != lastSslSocketFactory) {\n       X509TrustManager trustManager = Platform.get().trustManager(sslSocketFactory);\n-      lastCertificateAuthorityCouncil = new CertificateAuthorityCouncil(\n-          trustManager.getAcceptedIssuers());\n+      lastTrustRootIndex = Platform.get().trustRootIndex(trustManager);\n       lastSslSocketFactory = sslSocketFactory;\n     }\n-    return lastCertificateAuthorityCouncil;\n+    return lastTrustRootIndex;\n   }\n \n   /**"
        },
        {
            "sha": "7e683a77dc1edf4f3f4f0d194b4aac48443a8da3",
            "filename": "okhttp/src/main/java/com/squareup/okhttp/internal/tls/AndroidTrustRootIndex.java",
            "status": "added",
            "additions": 63,
            "deletions": 0,
            "changes": 63,
            "blob_url": "https://github.com/square/okhttp/blob/5377f25d9eed755328216912ef5e922c93e14f3e/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2Finternal%2Ftls%2FAndroidTrustRootIndex.java",
            "raw_url": "https://github.com/square/okhttp/raw/5377f25d9eed755328216912ef5e922c93e14f3e/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2Finternal%2Ftls%2FAndroidTrustRootIndex.java",
            "contents_url": "https://api.github.com/repos/square/okhttp/contents/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2Finternal%2Ftls%2FAndroidTrustRootIndex.java?ref=5377f25d9eed755328216912ef5e922c93e14f3e",
            "patch": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright (C) 2016 Square, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.squareup.okhttp.internal.tls;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.security.cert.TrustAnchor;\n+import java.security.cert.X509Certificate;\n+import javax.net.ssl.X509TrustManager;\n+\n+/**\n+ * A index of trusted root certificates that exploits knowledge of Android implementation details.\n+ * This class is potentially much faster to initialize than {@link RealTrustRootIndex} because\n+ * it doesn't need to load and index trusted CA certificates.\n+ */\n+public final class AndroidTrustRootIndex implements TrustRootIndex {\n+  private final X509TrustManager trustManager;\n+  private final Method findByIssuerAndSignatureMethod;\n+\n+  public AndroidTrustRootIndex(\n+      X509TrustManager trustManager, Method findByIssuerAndSignatureMethod) {\n+    this.findByIssuerAndSignatureMethod = findByIssuerAndSignatureMethod;\n+    this.trustManager = trustManager;\n+  }\n+\n+  @Override public X509Certificate findByIssuerAndSignature(X509Certificate cert) {\n+    try {\n+      TrustAnchor trustAnchor = (TrustAnchor) findByIssuerAndSignatureMethod.invoke(\n+          trustManager, cert);\n+      return trustAnchor.getTrustedCert();\n+    } catch (IllegalAccessException e) {\n+      throw new AssertionError();\n+    } catch (InvocationTargetException e) {\n+      return null;\n+    }\n+  }\n+\n+  public static TrustRootIndex get(X509TrustManager trustManager) {\n+    // From org.conscrypt.TrustManagerImpl, we want the method with this signature:\n+    // private TrustAnchor findTrustAnchorByIssuerAndSignature(X509Certificate lastCert);\n+    try {\n+      Method method = trustManager.getClass().getDeclaredMethod(\n+          \"findTrustAnchorByIssuerAndSignature\", X509Certificate.class);\n+      method.setAccessible(true);\n+      return new AndroidTrustRootIndex(trustManager, method);\n+    } catch (NoSuchMethodException e) {\n+      return null;\n+    }\n+  }\n+}"
        },
        {
            "sha": "8095dcaada0dae564dc7d5ab6a3f39901ea8bdca",
            "filename": "okhttp/src/main/java/com/squareup/okhttp/internal/tls/CertificateChainCleaner.java",
            "status": "renamed",
            "additions": 18,
            "deletions": 49,
            "changes": 67,
            "blob_url": "https://github.com/square/okhttp/blob/5377f25d9eed755328216912ef5e922c93e14f3e/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2Finternal%2Ftls%2FCertificateChainCleaner.java",
            "raw_url": "https://github.com/square/okhttp/raw/5377f25d9eed755328216912ef5e922c93e14f3e/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2Finternal%2Ftls%2FCertificateChainCleaner.java",
            "contents_url": "https://api.github.com/repos/square/okhttp/contents/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2Finternal%2Ftls%2FCertificateChainCleaner.java?ref=5377f25d9eed755328216912ef5e922c93e14f3e",
            "patch": "@@ -17,56 +17,43 @@\n package com.squareup.okhttp.internal.tls;\n \n import java.security.GeneralSecurityException;\n-import java.security.PublicKey;\n import java.security.cert.Certificate;\n import java.security.cert.X509Certificate;\n import java.util.ArrayDeque;\n import java.util.ArrayList;\n import java.util.Deque;\n import java.util.Iterator;\n-import java.util.LinkedHashMap;\n import java.util.List;\n-import java.util.Map;\n import javax.net.ssl.SSLPeerUnverifiedException;\n-import javax.security.auth.x500.X500Principal;\n \n /**\n- * A set of trusted Certificate Authority (CA) certificates that are trusted to verify the TLS\n- * certificates offered by remote web servers.\n+ * Computes the effective certificate chain from the raw array returned by Java's built in TLS APIs.\n+ * Cleaning a chain returns a list of certificates where the first element is {@code chain[0]}, each\n+ * certificate is signed by the certificate that follows, and the last certificate is a trusted CA\n+ * certificate.\n+ *\n+ * <p>Use of the chain cleaner is necessary to omit unexpected certificates that aren't relevant to\n+ * the TLS handshake and to extract the trusted CA certificate for the benefit of certificate\n+ * pinning.\n  *\n  * <p>This class includes code from <a href=\"https://conscrypt.org/\">Conscrypt's</a> {@code\n  * TrustManagerImpl} and {@code TrustedCertificateIndex}.\n  */\n-public final class CertificateAuthorityCouncil {\n-  private final Map<X500Principal, List<X509Certificate>> subjectToCaCerts = new LinkedHashMap<>();\n+public final class CertificateChainCleaner {\n+  private final TrustRootIndex trustRootIndex;\n \n-  public CertificateAuthorityCouncil(X509Certificate... caCerts) {\n-    for (X509Certificate caCert : caCerts) {\n-      X500Principal subject = caCert.getSubjectX500Principal();\n-      List<X509Certificate> subjectCaCerts = subjectToCaCerts.get(subject);\n-      if (subjectCaCerts == null) {\n-        subjectCaCerts = new ArrayList<>(1);\n-        subjectToCaCerts.put(subject, subjectCaCerts);\n-      }\n-      subjectCaCerts.add(caCert);\n-    }\n+  public CertificateChainCleaner(TrustRootIndex trustRootIndex) {\n+    this.trustRootIndex = trustRootIndex;\n   }\n \n   /**\n-   * Computes the effective certificate chain from the raw array returned by Java's built in TLS\n-   * APIs. This method returns a list of certificates where the first element is {@code chain[0]},\n-   * each certificate is signed by the certificate that follows, and the last certificate is a\n-   * trusted CA certificate.\n-   *\n-   * <p>Use of this method is necessary to omit unexpected certificates that aren't relevant to the\n-   * TLS handshake and to extract the trusted CA certificate for the benefit of certificate pinning.\n+   * Returns a cleaned chain for {@code chain}.\n    *\n    * <p>This method throws if the complete chain to a trusted CA certificate cannot be constructed.\n-   * This is unexpected unless the X509 trust manager in this class is different from the trust\n-   * manager that was used to establish {@code chain}.\n+   * This is unexpected unless the trust root index in this class has a different trust manager than\n+   * what was used to establish {@code chain}.\n    */\n-  public List<Certificate> normalizeCertificateChain(List<Certificate> chain)\n-      throws SSLPeerUnverifiedException {\n+  public List<Certificate> clean(List<Certificate> chain) throws SSLPeerUnverifiedException {\n     Deque<Certificate> queue = new ArrayDeque<>(chain);\n     List<Certificate> result = new ArrayList<>();\n     result.add(queue.removeFirst());\n@@ -78,8 +65,8 @@ public List<Certificate> normalizeCertificateChain(List<Certificate> chain)\n       // If this cert has been signed by a trusted CA cert, we're done. Add the trusted CA\n       // certificate to the end of the chain, unless it's already present. (That would happen if the\n       // first certificate in the chain is itself a self-signed and trusted CA certificate.)\n-      X509Certificate caCert = findByIssuerAndSignature(toVerify);\n-      if (caCert != null && verifySignature(toVerify, caCert)) {\n+      X509Certificate caCert = trustRootIndex.findByIssuerAndSignature(toVerify);\n+      if (caCert != null) {\n         if (result.size() > 1 || !toVerify.equals(caCert)) {\n           result.add(caCert);\n         }\n@@ -111,22 +98,4 @@ private boolean verifySignature(X509Certificate toVerify, X509Certificate signin\n       return false;\n     }\n   }\n-\n-  /** Returns the trusted CA certificate that signed {@code cert}. */\n-  private X509Certificate findByIssuerAndSignature(X509Certificate cert) {\n-    X500Principal issuer = cert.getIssuerX500Principal();\n-    List<X509Certificate> subjectCaCerts = subjectToCaCerts.get(issuer);\n-    if (subjectCaCerts == null) return null;\n-\n-    for (X509Certificate caCert : subjectCaCerts) {\n-      PublicKey publicKey = caCert.getPublicKey();\n-      try {\n-        cert.verify(publicKey);\n-        return caCert;\n-      } catch (Exception ignored) {\n-      }\n-    }\n-\n-    return null;\n-  }\n }",
            "previous_filename": "okhttp/src/main/java/com/squareup/okhttp/internal/tls/CertificateAuthorityCouncil.java"
        },
        {
            "sha": "885eea4ecfe94f0941ac0b95eb88e558083b153d",
            "filename": "okhttp/src/main/java/com/squareup/okhttp/internal/tls/RealTrustRootIndex.java",
            "status": "added",
            "additions": 58,
            "deletions": 0,
            "changes": 58,
            "blob_url": "https://github.com/square/okhttp/blob/5377f25d9eed755328216912ef5e922c93e14f3e/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2Finternal%2Ftls%2FRealTrustRootIndex.java",
            "raw_url": "https://github.com/square/okhttp/raw/5377f25d9eed755328216912ef5e922c93e14f3e/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2Finternal%2Ftls%2FRealTrustRootIndex.java",
            "contents_url": "https://api.github.com/repos/square/okhttp/contents/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2Finternal%2Ftls%2FRealTrustRootIndex.java?ref=5377f25d9eed755328216912ef5e922c93e14f3e",
            "patch": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright (C) 2016 Square, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.squareup.okhttp.internal.tls;\n+\n+import java.security.PublicKey;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.security.auth.x500.X500Principal;\n+\n+public final class RealTrustRootIndex implements TrustRootIndex {\n+  private final Map<X500Principal, List<X509Certificate>> subjectToCaCerts;\n+\n+  public RealTrustRootIndex(X509Certificate... caCerts) {\n+    subjectToCaCerts = new LinkedHashMap<>();\n+    for (X509Certificate caCert : caCerts) {\n+      X500Principal subject = caCert.getSubjectX500Principal();\n+      List<X509Certificate> subjectCaCerts = subjectToCaCerts.get(subject);\n+      if (subjectCaCerts == null) {\n+        subjectCaCerts = new ArrayList<>(1);\n+        subjectToCaCerts.put(subject, subjectCaCerts);\n+      }\n+      subjectCaCerts.add(caCert);\n+    }\n+  }\n+\n+  @Override public X509Certificate findByIssuerAndSignature(X509Certificate cert) {\n+    X500Principal issuer = cert.getIssuerX500Principal();\n+    List<X509Certificate> subjectCaCerts = subjectToCaCerts.get(issuer);\n+    if (subjectCaCerts == null) return null;\n+\n+    for (X509Certificate caCert : subjectCaCerts) {\n+      PublicKey publicKey = caCert.getPublicKey();\n+      try {\n+        cert.verify(publicKey);\n+        return caCert;\n+      } catch (Exception ignored) {\n+      }\n+    }\n+\n+    return null;\n+  }\n+}"
        },
        {
            "sha": "6b0036b70f65c6af86cbf917ef9abff43e013aaa",
            "filename": "okhttp/src/main/java/com/squareup/okhttp/internal/tls/TrustRootIndex.java",
            "status": "added",
            "additions": 23,
            "deletions": 0,
            "changes": 23,
            "blob_url": "https://github.com/square/okhttp/blob/5377f25d9eed755328216912ef5e922c93e14f3e/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2Finternal%2Ftls%2FTrustRootIndex.java",
            "raw_url": "https://github.com/square/okhttp/raw/5377f25d9eed755328216912ef5e922c93e14f3e/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2Finternal%2Ftls%2FTrustRootIndex.java",
            "contents_url": "https://api.github.com/repos/square/okhttp/contents/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2Finternal%2Ftls%2FTrustRootIndex.java?ref=5377f25d9eed755328216912ef5e922c93e14f3e",
            "patch": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright (C) 2016 Square, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.squareup.okhttp.internal.tls;\n+\n+import java.security.cert.X509Certificate;\n+\n+public interface TrustRootIndex {\n+  /** Returns the trusted CA certificate that signed {@code cert}. */\n+  X509Certificate findByIssuerAndSignature(X509Certificate cert);\n+}"
        }
    ]
}