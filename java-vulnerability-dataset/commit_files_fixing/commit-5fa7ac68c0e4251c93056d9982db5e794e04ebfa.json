{
    "sha": "5fa7ac68c0e4251c93056d9982db5e794e04ebfa",
    "node_id": "MDY6Q29tbWl0NTEwMzc4NTo1ZmE3YWM2OGMwZTQyNTFjOTMwNTZkOTk4MmRiNWU3OTRlMDRlYmZh",
    "commit": {
        "author": {
            "name": "Flavia Rainone",
            "email": "flavia.rainone@jboss.com",
            "date": "2019-07-30T06:07:00Z"
        },
        "committer": {
            "name": "GitHub",
            "email": "noreply@github.com",
            "date": "2019-07-30T06:07:00Z"
        },
        "message": "Merge pull request #794 from gaol/Trailing_Slash_Fix\n\n[UNDERTOW-1578] 401 Unauthorized should be returned when requesting a protected directory without trailing slash",
        "tree": {
            "sha": "203d1fad6e8c0fd0e29eeea2692f83bb94fc42c5",
            "url": "https://api.github.com/repos/undertow-io/undertow/git/trees/203d1fad6e8c0fd0e29eeea2692f83bb94fc42c5"
        },
        "url": "https://api.github.com/repos/undertow-io/undertow/git/commits/5fa7ac68c0e4251c93056d9982db5e794e04ebfa",
        "comment_count": 0,
        "verification": {
            "verified": true,
            "reason": "valid",
            "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdP96ECRBK7hj4Ov3rIwAAdHIIAA3oFfSeM6L8HfGP8yeGMgvE\nszixf980EqdNDn+ZAeRMLCtRDIIowbfHGbn+NCc4qYX1MhWPzBVGfLyh3Op1jxUP\nZD1hG3jr/4DPDO50adhb7A8OD+GILByDQ2FbuBgZx1stCVnyxdnM6BDSO5byBBV/\negVgVJGs2WXySeMXX/GaSWBko0EWTx9SKDZNp77w2iSmEuZR9bmOxvZnqjKE//cL\nzWIaiAqEj2WxY1NdNuSf95E39NdcMrU7NHoR6+OM4BJ2+6+nWZrKTkyK/VaJC2QG\nKVfMq6nKUbSE9XLJYOU9uuu4y23jjh6AVcRQyyvhPI7h9fL9ODq8wg0X+tH6sz0=\n=QSH9\n-----END PGP SIGNATURE-----\n",
            "payload": "tree 203d1fad6e8c0fd0e29eeea2692f83bb94fc42c5\nparent f99c8db3659682ba64c53136a1c3fda53aa2fbcb\nparent d2715e3afa13f50deaa19643676816ce391551e9\nauthor Flavia Rainone <flavia.rainone@jboss.com> 1564466820 -0300\ncommitter GitHub <noreply@github.com> 1564466820 -0300\n\nMerge pull request #794 from gaol/Trailing_Slash_Fix\n\n[UNDERTOW-1578] 401 Unauthorized should be returned when requesting a protected directory without trailing slash",
            "verified_at": "2024-01-16T19:59:59Z"
        }
    },
    "url": "https://api.github.com/repos/undertow-io/undertow/commits/5fa7ac68c0e4251c93056d9982db5e794e04ebfa",
    "html_url": "https://github.com/undertow-io/undertow/commit/5fa7ac68c0e4251c93056d9982db5e794e04ebfa",
    "comments_url": "https://api.github.com/repos/undertow-io/undertow/commits/5fa7ac68c0e4251c93056d9982db5e794e04ebfa/comments",
    "author": {
        "login": "fl4via",
        "id": 403251,
        "node_id": "MDQ6VXNlcjQwMzI1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/403251?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fl4via",
        "html_url": "https://github.com/fl4via",
        "followers_url": "https://api.github.com/users/fl4via/followers",
        "following_url": "https://api.github.com/users/fl4via/following{/other_user}",
        "gists_url": "https://api.github.com/users/fl4via/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fl4via/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fl4via/subscriptions",
        "organizations_url": "https://api.github.com/users/fl4via/orgs",
        "repos_url": "https://api.github.com/users/fl4via/repos",
        "events_url": "https://api.github.com/users/fl4via/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fl4via/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "f99c8db3659682ba64c53136a1c3fda53aa2fbcb",
            "url": "https://api.github.com/repos/undertow-io/undertow/commits/f99c8db3659682ba64c53136a1c3fda53aa2fbcb",
            "html_url": "https://github.com/undertow-io/undertow/commit/f99c8db3659682ba64c53136a1c3fda53aa2fbcb"
        },
        {
            "sha": "d2715e3afa13f50deaa19643676816ce391551e9",
            "url": "https://api.github.com/repos/undertow-io/undertow/commits/d2715e3afa13f50deaa19643676816ce391551e9",
            "html_url": "https://github.com/undertow-io/undertow/commit/d2715e3afa13f50deaa19643676816ce391551e9"
        }
    ],
    "stats": {
        "total": 270,
        "additions": 244,
        "deletions": 26
    },
    "files": [
        {
            "sha": "9c49c4ad53cd7d0b692e7ffab692252110604ce7",
            "filename": "servlet/src/main/java/io/undertow/servlet/core/DeploymentManagerImpl.java",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/undertow-io/undertow/blob/5fa7ac68c0e4251c93056d9982db5e794e04ebfa/servlet%2Fsrc%2Fmain%2Fjava%2Fio%2Fundertow%2Fservlet%2Fcore%2FDeploymentManagerImpl.java",
            "raw_url": "https://github.com/undertow-io/undertow/raw/5fa7ac68c0e4251c93056d9982db5e794e04ebfa/servlet%2Fsrc%2Fmain%2Fjava%2Fio%2Fundertow%2Fservlet%2Fcore%2FDeploymentManagerImpl.java",
            "contents_url": "https://api.github.com/repos/undertow-io/undertow/contents/servlet%2Fsrc%2Fmain%2Fjava%2Fio%2Fundertow%2Fservlet%2Fcore%2FDeploymentManagerImpl.java?ref=5fa7ac68c0e4251c93056d9982db5e794e04ebfa",
            "patch": "@@ -71,6 +71,7 @@\n import io.undertow.servlet.api.ThreadSetupHandler;\n import io.undertow.servlet.api.WebResourceCollection;\n import io.undertow.servlet.handlers.CrawlerSessionManagerHandler;\n+import io.undertow.servlet.handlers.RedirectDirHandler;\n import io.undertow.servlet.handlers.ServletDispatchingHandler;\n import io.undertow.servlet.handlers.ServletHandler;\n import io.undertow.servlet.handlers.ServletInitialHandler;\n@@ -218,6 +219,7 @@ public Void call(HttpServerExchange exchange, Object ignore) throws Exception {\n \n                     HttpHandler wrappedHandlers = ServletDispatchingHandler.INSTANCE;\n                     wrappedHandlers = wrapHandlers(wrappedHandlers, deploymentInfo.getInnerHandlerChainWrappers());\n+                    wrappedHandlers = new RedirectDirHandler(wrappedHandlers, deployment.getServletPaths());\n                     if(!deploymentInfo.isSecurityDisabled()) {\n                         HttpHandler securityHandler = setupSecurityHandlers(wrappedHandlers);\n                         wrappedHandlers = new PredicateHandler(DispatcherTypePredicate.REQUEST, securityHandler, wrappedHandlers);"
        },
        {
            "sha": "576eb11a8788b34ccd3ecbf25335022780985b13",
            "filename": "servlet/src/main/java/io/undertow/servlet/handlers/RedirectDirHandler.java",
            "status": "added",
            "additions": 71,
            "deletions": 0,
            "changes": 71,
            "blob_url": "https://github.com/undertow-io/undertow/blob/5fa7ac68c0e4251c93056d9982db5e794e04ebfa/servlet%2Fsrc%2Fmain%2Fjava%2Fio%2Fundertow%2Fservlet%2Fhandlers%2FRedirectDirHandler.java",
            "raw_url": "https://github.com/undertow-io/undertow/raw/5fa7ac68c0e4251c93056d9982db5e794e04ebfa/servlet%2Fsrc%2Fmain%2Fjava%2Fio%2Fundertow%2Fservlet%2Fhandlers%2FRedirectDirHandler.java",
            "contents_url": "https://api.github.com/repos/undertow-io/undertow/contents/servlet%2Fsrc%2Fmain%2Fjava%2Fio%2Fundertow%2Fservlet%2Fhandlers%2FRedirectDirHandler.java?ref=5fa7ac68c0e4251c93056d9982db5e794e04ebfa",
            "patch": "@@ -0,0 +1,71 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2019 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package io.undertow.servlet.handlers;\n+\n+import io.undertow.server.HttpHandler;\n+import io.undertow.server.HttpServerExchange;\n+import io.undertow.util.Headers;\n+import io.undertow.util.Methods;\n+import io.undertow.util.RedirectBuilder;\n+import io.undertow.util.StatusCodes;\n+\n+/**\n+ * Handler that redirects the directory requests without trailing slash to the one append trailing slash.\n+ *\n+ * @author Lin Gao\n+ */\n+public class RedirectDirHandler implements HttpHandler {\n+\n+    private static final String HTTP2_UPGRADE_PREFIX = \"h2\";\n+\n+    private final HttpHandler next;\n+    private final ServletPathMatches paths;\n+\n+    public RedirectDirHandler(HttpHandler next, ServletPathMatches paths) {\n+        this.next = next;\n+        this.paths = paths;\n+    }\n+\n+    @Override\n+    public void handleRequest(HttpServerExchange exchange) throws Exception {\n+        final String path = exchange.getRelativePath();\n+        final ServletPathMatch info = paths.getServletHandlerByPath(path);\n+        // https://issues.jboss.org/browse/WFLY-3439\n+        // if the request is an upgrade request then we don't want to redirect\n+        // as there is a good chance the web socket client won't understand the redirect\n+        // we make an exception for HTTP2 upgrade requests, as this would have already be handled at\n+        // the connector level if it was going to be handled.\n+        String upgradeString = exchange.getRequestHeaders().getFirst(Headers.UPGRADE);\n+        boolean isUpgradeRequest = upgradeString != null && !upgradeString.startsWith(HTTP2_UPGRADE_PREFIX);\n+        if (info.getType() == ServletPathMatch.Type.REDIRECT && !isUpgradeRequest) {\n+            // UNDERTOW-89\n+            // we redirect on GET requests to the root context to add an / to the end\n+            if (exchange.getRequestMethod().equals(Methods.GET) || exchange.getRequestMethod().equals(Methods.HEAD)) {\n+                exchange.setStatusCode(StatusCodes.FOUND);\n+            } else {\n+                exchange.setStatusCode(StatusCodes.TEMPORARY_REDIRECT);\n+            }\n+            exchange.getResponseHeaders().put(Headers.LOCATION,\n+                    RedirectBuilder.redirect(exchange, exchange.getRelativePath() + \"/\", true));\n+            return;\n+        }\n+        next.handleRequest(exchange);\n+    }\n+\n+}"
        },
        {
            "sha": "7edc7e493cfe66d33dd541d7bd4068705b558013",
            "filename": "servlet/src/main/java/io/undertow/servlet/handlers/ServletInitialHandler.java",
            "status": "modified",
            "additions": 3,
            "deletions": 26,
            "changes": 29,
            "blob_url": "https://github.com/undertow-io/undertow/blob/5fa7ac68c0e4251c93056d9982db5e794e04ebfa/servlet%2Fsrc%2Fmain%2Fjava%2Fio%2Fundertow%2Fservlet%2Fhandlers%2FServletInitialHandler.java",
            "raw_url": "https://github.com/undertow-io/undertow/raw/5fa7ac68c0e4251c93056d9982db5e794e04ebfa/servlet%2Fsrc%2Fmain%2Fjava%2Fio%2Fundertow%2Fservlet%2Fhandlers%2FServletInitialHandler.java",
            "contents_url": "https://api.github.com/repos/undertow-io/undertow/contents/servlet%2Fsrc%2Fmain%2Fjava%2Fio%2Fundertow%2Fservlet%2Fhandlers%2FServletInitialHandler.java?ref=5fa7ac68c0e4251c93056d9982db5e794e04ebfa",
            "patch": "@@ -39,11 +39,8 @@\n import io.undertow.servlet.spec.HttpServletResponseImpl;\n import io.undertow.servlet.spec.RequestDispatcherImpl;\n import io.undertow.servlet.spec.ServletContextImpl;\n-import io.undertow.util.Headers;\n import io.undertow.util.HttpString;\n-import io.undertow.util.Methods;\n import io.undertow.util.Protocols;\n-import io.undertow.util.RedirectBuilder;\n import io.undertow.util.StatusCodes;\n import org.xnio.ChannelListener;\n import org.xnio.Option;\n@@ -80,8 +77,6 @@\n  */\n public class ServletInitialHandler implements HttpHandler, ServletDispatcher {\n \n-    private static final String HTTP2_UPGRADE_PREFIX = \"h2\";\n-\n     private static final RuntimePermission PERMISSION = new RuntimePermission(\"io.undertow.servlet.CREATE_INITIAL_HANDLER\");\n \n     private final HttpHandler next;\n@@ -149,30 +144,12 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {\n             return;\n         }\n         final ServletPathMatch info = paths.getServletHandlerByPath(path);\n-        //https://issues.jboss.org/browse/WFLY-3439\n-        //if the request is an upgrade request then we don't want to redirect\n-        //as there is a good chance the web socket client won't understand the redirect\n-        //we make an exception for HTTP2 upgrade requests, as this would have already be handled at\n-        //the connector level if it was going to be handled.\n-        String upgradeString = exchange.getRequestHeaders().getFirst(Headers.UPGRADE);\n-        boolean isUpgradeRequest = upgradeString != null && !upgradeString.startsWith(HTTP2_UPGRADE_PREFIX);\n-        if (info.getType() == ServletPathMatch.Type.REDIRECT && !isUpgradeRequest) {\n-            //UNDERTOW-89\n-            //we redirect on GET requests to the root context to add an / to the end\n-            if(exchange.getRequestMethod().equals(Methods.GET) || exchange.getRequestMethod().equals(Methods.HEAD)) {\n-                exchange.setStatusCode(StatusCodes.FOUND);\n-            } else {\n-                exchange.setStatusCode(StatusCodes.TEMPORARY_REDIRECT);\n-            }\n-            exchange.getResponseHeaders().put(Headers.LOCATION, RedirectBuilder.redirect(exchange, exchange.getRelativePath() + \"/\", true));\n-            return;\n-        } else if (info.getType() == ServletPathMatch.Type.REWRITE) {\n-            //this can only happen if the path ends with a /\n-            //otherwise there would be a redirect instead\n+        if (info.getType() == ServletPathMatch.Type.REWRITE) {\n+            // this can only happen if the path ends with a /\n+            // otherwise there would be a redirect instead\n             exchange.setRelativePath(info.getRewriteLocation());\n             exchange.setRequestPath(exchange.getResolvedPath() + info.getRewriteLocation());\n         }\n-\n         final HttpServletResponseImpl response = new HttpServletResponseImpl(exchange, servletContext);\n         final HttpServletRequestImpl request = new HttpServletRequestImpl(exchange, servletContext);\n         final ServletRequestContext servletRequestContext = new ServletRequestContext(servletContext.getDeployment(), request, response, info);"
        },
        {
            "sha": "8fa9323177317c6c481f78c8b5fed0819f84541d",
            "filename": "servlet/src/test/java/io/undertow/servlet/test/defaultservlet/SecurityRedirectTestCase.java",
            "status": "added",
            "additions": 168,
            "deletions": 0,
            "changes": 168,
            "blob_url": "https://github.com/undertow-io/undertow/blob/5fa7ac68c0e4251c93056d9982db5e794e04ebfa/servlet%2Fsrc%2Ftest%2Fjava%2Fio%2Fundertow%2Fservlet%2Ftest%2Fdefaultservlet%2FSecurityRedirectTestCase.java",
            "raw_url": "https://github.com/undertow-io/undertow/raw/5fa7ac68c0e4251c93056d9982db5e794e04ebfa/servlet%2Fsrc%2Ftest%2Fjava%2Fio%2Fundertow%2Fservlet%2Ftest%2Fdefaultservlet%2FSecurityRedirectTestCase.java",
            "contents_url": "https://api.github.com/repos/undertow-io/undertow/contents/servlet%2Fsrc%2Ftest%2Fjava%2Fio%2Fundertow%2Fservlet%2Ftest%2Fdefaultservlet%2FSecurityRedirectTestCase.java?ref=5fa7ac68c0e4251c93056d9982db5e794e04ebfa",
            "patch": "@@ -0,0 +1,168 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2019 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package io.undertow.servlet.test.defaultservlet;\n+\n+import static io.undertow.util.Headers.AUTHORIZATION;\n+import static io.undertow.util.Headers.BASIC;\n+import static io.undertow.util.Headers.LOCATION;\n+import static io.undertow.util.Headers.WWW_AUTHENTICATE;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.ServletException;\n+\n+import org.apache.http.Header;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.undertow.server.handlers.PathHandler;\n+import io.undertow.servlet.api.DeploymentInfo;\n+import io.undertow.servlet.api.DeploymentManager;\n+import io.undertow.servlet.api.LoginConfig;\n+import io.undertow.servlet.api.SecurityConstraint;\n+import io.undertow.servlet.api.ServletContainer;\n+import io.undertow.servlet.api.WebResourceCollection;\n+import io.undertow.servlet.test.path.ServletPathMappingTestCase;\n+import io.undertow.servlet.test.security.constraint.ServletIdentityManager;\n+import io.undertow.servlet.test.util.TestClassIntrospector;\n+import io.undertow.servlet.test.util.TestResourceLoader;\n+import io.undertow.testutils.DefaultServer;\n+import io.undertow.testutils.HttpClientUtils;\n+import io.undertow.util.FlexBase64;\n+import io.undertow.util.StatusCodes;\n+\n+/**\n+ * TestCase on redirect with or without trailing slash when requesting protected path.\n+ *\n+ * @author Lin Gao\n+ */\n+@RunWith(DefaultServer.class)\n+public class SecurityRedirectTestCase {\n+\n+    @BeforeClass\n+    public static void setup() throws ServletException {\n+\n+        final PathHandler root = new PathHandler();\n+        final ServletContainer container = ServletContainer.Factory.newInstance();\n+\n+        ServletIdentityManager identityManager = new ServletIdentityManager();\n+        identityManager.addUser(\"user1\", \"password1\", \"role1\");\n+\n+        DeploymentInfo builder = new DeploymentInfo()\n+                .setClassIntrospecter(TestClassIntrospector.INSTANCE)\n+                .setClassLoader(ServletPathMappingTestCase.class.getClassLoader())\n+                .setContextPath(\"/servletContext\")\n+                .setDeploymentName(\"servletContext.war\")\n+                .setResourceManager(new TestResourceLoader(SecurityRedirectTestCase.class))\n+                .addWelcomePages(\"index.html\")\n+                .setIdentityManager(identityManager)\n+                .setLoginConfig(new LoginConfig(\"BASIC\", \"Test Realm\"))\n+                .addSecurityConstraint(new SecurityConstraint()\n+                        .addRoleAllowed(\"role1\")\n+                        .addWebResourceCollection(new WebResourceCollection()\n+                                .addUrlPatterns(\"/index.html\", \"/filterpath/*\")));\n+\n+        DeploymentManager manager = container.addDeployment(builder);\n+        manager.deploy();\n+        root.addPrefixPath(builder.getContextPath(), manager.start());\n+        DefaultServer.setRootHandler(root);\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    @Test\n+    public void testSecurityWithWelcomeFileRedirect() throws IOException {\n+        // disable following redirect\n+        HttpClient client = HttpClientBuilder.create().disableRedirectHandling().build();\n+        try {\n+            HttpGet get = new HttpGet(DefaultServer.getDefaultServerURL() + \"/servletContext\");\n+            HttpResponse result = client.execute(get);\n+            Assert.assertEquals(StatusCodes.FOUND, result.getStatusLine().getStatusCode());\n+            Header[] values = result.getHeaders(LOCATION.toString());\n+            assertEquals(1, values.length);\n+            assertEquals(DefaultServer.getDefaultServerURL() + \"/servletContext/\", values[0].getValue());\n+            HttpClientUtils.readResponse(result);\n+\n+            get = new HttpGet(DefaultServer.getDefaultServerURL() + \"/servletContext/\");\n+            result = client.execute(get);\n+            Assert.assertEquals(StatusCodes.UNAUTHORIZED, result.getStatusLine().getStatusCode());\n+\n+            values = result.getHeaders(WWW_AUTHENTICATE.toString());\n+            assertEquals(1, values.length);\n+            assertEquals(BASIC + \" realm=\\\"Test Realm\\\"\", values[0].getValue());\n+            HttpClientUtils.readResponse(result);\n+\n+            get = new HttpGet(DefaultServer.getDefaultServerURL() + \"/servletContext/\");\n+            get.addHeader(AUTHORIZATION.toString(), BASIC + \" \" + FlexBase64.encodeString(\"user1:password1\".getBytes(), false));\n+            result = client.execute(get);\n+            String response = HttpClientUtils.readResponse(result);\n+            Assert.assertEquals(StatusCodes.OK, result.getStatusLine().getStatusCode());\n+            Assert.assertTrue(response.contains(\"Redirected home page\"));\n+        } finally {\n+            client.getConnectionManager().shutdown();\n+        }\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    @Test\n+    public void testSecurityWithoutWelcomeFileRedirect() throws IOException {\n+        // disable following redirect\n+        HttpClient client = HttpClientBuilder.create().disableRedirectHandling().build();\n+        try {\n+            HttpGet get = new HttpGet(DefaultServer.getDefaultServerURL() + \"/servletContext/filterpath\");\n+            HttpResponse result = client.execute(get);\n+            Assert.assertEquals(StatusCodes.UNAUTHORIZED, result.getStatusLine().getStatusCode());\n+            HttpClientUtils.readResponse(result);\n+\n+            get = new HttpGet(DefaultServer.getDefaultServerURL() + \"/servletContext/filterpath/\");\n+            result = client.execute(get);\n+            Assert.assertEquals(StatusCodes.UNAUTHORIZED, result.getStatusLine().getStatusCode());\n+\n+            Header[] values = result.getHeaders(WWW_AUTHENTICATE.toString());\n+            assertEquals(1, values.length);\n+            assertEquals(BASIC + \" realm=\\\"Test Realm\\\"\", values[0].getValue());\n+            HttpClientUtils.readResponse(result);\n+\n+            get = new HttpGet(DefaultServer.getDefaultServerURL() + \"/servletContext/filterpath\");\n+            get.addHeader(AUTHORIZATION.toString(), BASIC + \" \" + FlexBase64.encodeString(\"user1:password1\".getBytes(), false));\n+            result = client.execute(get);\n+            Assert.assertEquals(StatusCodes.FOUND, result.getStatusLine().getStatusCode());\n+            values = result.getHeaders(LOCATION.toString());\n+            assertEquals(1, values.length);\n+            assertEquals(DefaultServer.getDefaultServerURL() + \"/servletContext/filterpath/\", values[0].getValue());\n+            HttpClientUtils.readResponse(result);\n+\n+            get = new HttpGet(DefaultServer.getDefaultServerURL() + \"/servletContext/filterpath/filtered.txt\");\n+            get.addHeader(AUTHORIZATION.toString(), BASIC + \" \" + FlexBase64.encodeString(\"user1:password1\".getBytes(), false));\n+            result = client.execute(get);\n+            String response = HttpClientUtils.readResponse(result);\n+            Assert.assertEquals(StatusCodes.OK, result.getStatusLine().getStatusCode());\n+            Assert.assertTrue(response.equals(\"Stuart\"));\n+        } finally {\n+            client.getConnectionManager().shutdown();\n+        }\n+    }\n+\n+}"
        }
    ]
}