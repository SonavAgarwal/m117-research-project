{
    "sha": "40bf278e66786544411c471de5123e7a71826b9f",
    "node_id": "MDY6Q29tbWl0MjM1Mjc0NDo0MGJmMjc4ZTY2Nzg2NTQ0NDExYzQ3MWRlNTEyM2U3YTcxODI2Yjlm",
    "commit": {
        "author": {
            "name": "Misagh Moayyed",
            "email": "mm1844@gmail.com",
            "date": "2019-09-17T19:49:46Z"
        },
        "committer": {
            "name": "Misagh Moayyed",
            "email": "mm1844@gmail.com",
            "date": "2019-09-17T19:49:46Z"
        },
        "message": "change generation of rnd numbers",
        "tree": {
            "sha": "84ffc82002874e48ac2aadcf41f04b4251eb16e7",
            "url": "https://api.github.com/repos/apereo/cas/git/trees/84ffc82002874e48ac2aadcf41f04b4251eb16e7"
        },
        "url": "https://api.github.com/repos/apereo/cas/git/commits/40bf278e66786544411c471de5123e7a71826b9f",
        "comment_count": 0,
        "verification": {
            "verified": true,
            "reason": "valid",
            "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEElUyo8doQ6pkfeJVxEb3Dumou+aoFAl2BONoACgkQEb3Dumou\n+apf1AgAjGtcJFFYlfldctIIBL+zrUu/ffjigTcihb9L1bb2bNBWPrCoVMEHILau\nDEgmkzTnAjoJdllpSKTiJmcqFzMzs00vbu3jhDRfDpxD5klpmKrzIS4dF89KZVZF\nZzhKryeTOTSslQAGEMa8l/GOz5ySdKMNwezcRPSQ1h6CDj+tTLB8v4nHJvPbo8NT\nqNJXjACYHoMLBDp3Ai880qLCW84uER3LqEB0x5eWrOfXcptUEma0xIhVTRMvw2lI\nlx5MqphCFEMK/x51FljJAZxcrpRhSS8FWeA09LJ0nGUGxdq0An5mhQgNNnZQHS/O\nEDm5cL34frWEWa5H3tnz8PcQcnCuDg==\n=byP5\n-----END PGP SIGNATURE-----",
            "payload": "tree 84ffc82002874e48ac2aadcf41f04b4251eb16e7\nparent 66932faac65f242b9c3fbdfde460793f39fb18df\nauthor Misagh Moayyed <mm1844@gmail.com> 1568749786 +0430\ncommitter Misagh Moayyed <mm1844@gmail.com> 1568749786 +0430\n\nchange generation of rnd numbers\n",
            "verified_at": "2024-11-06T00:07:20Z"
        }
    },
    "url": "https://api.github.com/repos/apereo/cas/commits/40bf278e66786544411c471de5123e7a71826b9f",
    "html_url": "https://github.com/apereo/cas/commit/40bf278e66786544411c471de5123e7a71826b9f",
    "comments_url": "https://api.github.com/repos/apereo/cas/commits/40bf278e66786544411c471de5123e7a71826b9f/comments",
    "author": {
        "login": "mmoayyed",
        "id": 1205228,
        "node_id": "MDQ6VXNlcjEyMDUyMjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1205228?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mmoayyed",
        "html_url": "https://github.com/mmoayyed",
        "followers_url": "https://api.github.com/users/mmoayyed/followers",
        "following_url": "https://api.github.com/users/mmoayyed/following{/other_user}",
        "gists_url": "https://api.github.com/users/mmoayyed/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mmoayyed/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mmoayyed/subscriptions",
        "organizations_url": "https://api.github.com/users/mmoayyed/orgs",
        "repos_url": "https://api.github.com/users/mmoayyed/repos",
        "events_url": "https://api.github.com/users/mmoayyed/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mmoayyed/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "mmoayyed",
        "id": 1205228,
        "node_id": "MDQ6VXNlcjEyMDUyMjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1205228?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mmoayyed",
        "html_url": "https://github.com/mmoayyed",
        "followers_url": "https://api.github.com/users/mmoayyed/followers",
        "following_url": "https://api.github.com/users/mmoayyed/following{/other_user}",
        "gists_url": "https://api.github.com/users/mmoayyed/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mmoayyed/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mmoayyed/subscriptions",
        "organizations_url": "https://api.github.com/users/mmoayyed/orgs",
        "repos_url": "https://api.github.com/users/mmoayyed/repos",
        "events_url": "https://api.github.com/users/mmoayyed/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mmoayyed/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "66932faac65f242b9c3fbdfde460793f39fb18df",
            "url": "https://api.github.com/repos/apereo/cas/commits/66932faac65f242b9c3fbdfde460793f39fb18df",
            "html_url": "https://github.com/apereo/cas/commit/66932faac65f242b9c3fbdfde460793f39fb18df"
        }
    ],
    "stats": {
        "total": 255,
        "additions": 220,
        "deletions": 35
    },
    "files": [
        {
            "sha": "f74830b9d53e7ed2e7b0017cd45c2ebf782a5044",
            "filename": "core/cas-server-core-audit/src/test/java/org/apereo/cas/audit/spi/ShortenedReturnValueAsStringResourceResolverTests.java",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/apereo/cas/blob/40bf278e66786544411c471de5123e7a71826b9f/core%2Fcas-server-core-audit%2Fsrc%2Ftest%2Fjava%2Forg%2Fapereo%2Fcas%2Faudit%2Fspi%2FShortenedReturnValueAsStringResourceResolverTests.java",
            "raw_url": "https://github.com/apereo/cas/raw/40bf278e66786544411c471de5123e7a71826b9f/core%2Fcas-server-core-audit%2Fsrc%2Ftest%2Fjava%2Forg%2Fapereo%2Fcas%2Faudit%2Fspi%2FShortenedReturnValueAsStringResourceResolverTests.java",
            "contents_url": "https://api.github.com/repos/apereo/cas/contents/core%2Fcas-server-core-audit%2Fsrc%2Ftest%2Fjava%2Forg%2Fapereo%2Fcas%2Faudit%2Fspi%2FShortenedReturnValueAsStringResourceResolverTests.java?ref=40bf278e66786544411c471de5123e7a71826b9f",
            "patch": "@@ -1,9 +1,9 @@\n package org.apereo.cas.audit.spi;\n \n import org.apereo.cas.audit.spi.resource.ShortenedReturnValueAsStringResourceResolver;\n+import org.apereo.cas.util.RandomUtils;\n \n import lombok.val;\n-import org.apache.commons.lang3.RandomStringUtils;\n import org.aspectj.lang.JoinPoint;\n import org.junit.jupiter.api.Test;\n \n@@ -22,6 +22,6 @@ public class ShortenedReturnValueAsStringResourceResolverTests {\n     @Test\n     public void verifyActionPassed() {\n         val jp = mock(JoinPoint.class);\n-        assertTrue(r.resolveFrom(jp, RandomStringUtils.randomAlphabetic(52)).length > 0);\n+        assertTrue(r.resolveFrom(jp, RandomUtils.randomAlphabetic(52)).length > 0);\n     }\n }"
        },
        {
            "sha": "24275c1208a57cb253d2eedc6ede66c50cd451b2",
            "filename": "core/cas-server-core-authentication-mfa-api/src/test/java/org/apereo/cas/authentication/mfa/TestMultifactorAuthenticationProvider.java",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/apereo/cas/blob/40bf278e66786544411c471de5123e7a71826b9f/core%2Fcas-server-core-authentication-mfa-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapereo%2Fcas%2Fauthentication%2Fmfa%2FTestMultifactorAuthenticationProvider.java",
            "raw_url": "https://github.com/apereo/cas/raw/40bf278e66786544411c471de5123e7a71826b9f/core%2Fcas-server-core-authentication-mfa-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapereo%2Fcas%2Fauthentication%2Fmfa%2FTestMultifactorAuthenticationProvider.java",
            "contents_url": "https://api.github.com/repos/apereo/cas/contents/core%2Fcas-server-core-authentication-mfa-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapereo%2Fcas%2Fauthentication%2Fmfa%2FTestMultifactorAuthenticationProvider.java?ref=40bf278e66786544411c471de5123e7a71826b9f",
            "patch": "@@ -1,9 +1,9 @@\n package org.apereo.cas.authentication.mfa;\n \n import org.apereo.cas.authentication.AbstractMultifactorAuthenticationProvider;\n+import org.apereo.cas.util.RandomUtils;\n import org.apereo.cas.util.spring.ApplicationContextProvider;\n \n-import org.apache.commons.lang3.RandomStringUtils;\n import org.springframework.context.ConfigurableApplicationContext;\n \n /**\n@@ -29,7 +29,7 @@ public class TestMultifactorAuthenticationProvider extends AbstractMultifactorAu\n     public static TestMultifactorAuthenticationProvider registerProviderIntoApplicationContext(final ConfigurableApplicationContext applicationContext) {\n         return ApplicationContextProvider.registerBeanIntoApplicationContext(applicationContext,\n             TestMultifactorAuthenticationProvider.class,\n-            \"provider\" + RandomStringUtils.randomAlphabetic(8));\n+            \"provider\" + RandomUtils.randomAlphabetic(8));\n     }\n \n     @Override"
        },
        {
            "sha": "684405848c971d2fd8be9826cf3b0b51d8901834",
            "filename": "core/cas-server-core-services-api/src/main/java/org/apereo/cas/services/AnonymousRegisteredServiceUsernameAttributeProvider.java",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/apereo/cas/blob/40bf278e66786544411c471de5123e7a71826b9f/core%2Fcas-server-core-services-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapereo%2Fcas%2Fservices%2FAnonymousRegisteredServiceUsernameAttributeProvider.java",
            "raw_url": "https://github.com/apereo/cas/raw/40bf278e66786544411c471de5123e7a71826b9f/core%2Fcas-server-core-services-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapereo%2Fcas%2Fservices%2FAnonymousRegisteredServiceUsernameAttributeProvider.java",
            "contents_url": "https://api.github.com/repos/apereo/cas/contents/core%2Fcas-server-core-services-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapereo%2Fcas%2Fservices%2FAnonymousRegisteredServiceUsernameAttributeProvider.java?ref=40bf278e66786544411c471de5123e7a71826b9f",
            "patch": "@@ -4,6 +4,7 @@\n import org.apereo.cas.authentication.principal.Principal;\n import org.apereo.cas.authentication.principal.Service;\n import org.apereo.cas.authentication.principal.ShibbolethCompatiblePersistentIdGenerator;\n+import org.apereo.cas.util.RandomUtils;\n \n import lombok.AllArgsConstructor;\n import lombok.EqualsAndHashCode;\n@@ -12,7 +13,6 @@\n import lombok.Setter;\n import lombok.extern.slf4j.Slf4j;\n import lombok.val;\n-import org.apache.commons.lang3.RandomStringUtils;\n \n /**\n  * Generates a persistent id as username for anonymous service access.\n@@ -36,7 +36,7 @@ public class AnonymousRegisteredServiceUsernameAttributeProvider extends BaseReg\n     /**\n      * Encoder to generate PseudoIds.\n      */\n-    private PersistentIdGenerator persistentIdGenerator = new ShibbolethCompatiblePersistentIdGenerator(RandomStringUtils.randomAlphanumeric(16));\n+    private PersistentIdGenerator persistentIdGenerator = new ShibbolethCompatiblePersistentIdGenerator(RandomUtils.randomAlphanumeric(16));\n \n     @Override\n     protected String resolveUsernameInternal(final Principal principal, final Service service, final RegisteredService registeredService) {"
        },
        {
            "sha": "f96382ff5f85c5c1fca9dcecc2573f6610dc55a9",
            "filename": "core/cas-server-core-services-api/src/test/java/org/apereo/cas/services/util/RegisteredServiceNoOpCipherExecutorTests.java",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/apereo/cas/blob/40bf278e66786544411c471de5123e7a71826b9f/core%2Fcas-server-core-services-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapereo%2Fcas%2Fservices%2Futil%2FRegisteredServiceNoOpCipherExecutorTests.java",
            "raw_url": "https://github.com/apereo/cas/raw/40bf278e66786544411c471de5123e7a71826b9f/core%2Fcas-server-core-services-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapereo%2Fcas%2Fservices%2Futil%2FRegisteredServiceNoOpCipherExecutorTests.java",
            "contents_url": "https://api.github.com/repos/apereo/cas/contents/core%2Fcas-server-core-services-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapereo%2Fcas%2Fservices%2Futil%2FRegisteredServiceNoOpCipherExecutorTests.java?ref=40bf278e66786544411c471de5123e7a71826b9f",
            "patch": "@@ -4,9 +4,9 @@\n import org.apereo.cas.services.RegexRegisteredService;\n import org.apereo.cas.services.RegisteredServiceCipherExecutor;\n import org.apereo.cas.services.RegisteredServicePublicKeyImpl;\n+import org.apereo.cas.util.RandomUtils;\n \n import lombok.val;\n-import org.apache.commons.lang3.RandomStringUtils;\n import org.junit.jupiter.api.Test;\n \n import java.util.Optional;\n@@ -24,7 +24,7 @@ public class RegisteredServiceNoOpCipherExecutorTests {\n     @Test\n     public void verifyCipherUnableToEncodeForStringIsTooLong() {\n         val svc = getService(\"classpath:keys/RSA1024Public.key\");\n-        val ticketId = RandomStringUtils.randomAlphanumeric(120);\n+        val ticketId = RandomUtils.randomAlphanumeric(120);\n         val cipher = RegisteredServiceCipherExecutor.noOp();\n         assertEquals(ticketId, cipher.encode(ticketId, Optional.of(svc)));\n         assertEquals(ticketId, cipher.encode(ticketId));"
        },
        {
            "sha": "667f635d6d6986dea197ba67f612849bce337476",
            "filename": "core/cas-server-core-services-api/src/test/java/org/apereo/cas/services/util/RegisteredServicePublicKeyCipherExecutorTests.java",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/apereo/cas/blob/40bf278e66786544411c471de5123e7a71826b9f/core%2Fcas-server-core-services-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapereo%2Fcas%2Fservices%2Futil%2FRegisteredServicePublicKeyCipherExecutorTests.java",
            "raw_url": "https://github.com/apereo/cas/raw/40bf278e66786544411c471de5123e7a71826b9f/core%2Fcas-server-core-services-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapereo%2Fcas%2Fservices%2Futil%2FRegisteredServicePublicKeyCipherExecutorTests.java",
            "contents_url": "https://api.github.com/repos/apereo/cas/contents/core%2Fcas-server-core-services-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapereo%2Fcas%2Fservices%2Futil%2FRegisteredServicePublicKeyCipherExecutorTests.java?ref=40bf278e66786544411c471de5123e7a71826b9f",
            "patch": "@@ -3,9 +3,9 @@\n import org.apereo.cas.services.AbstractRegisteredService;\n import org.apereo.cas.services.RegexRegisteredService;\n import org.apereo.cas.services.RegisteredServicePublicKeyImpl;\n+import org.apereo.cas.util.RandomUtils;\n \n import lombok.val;\n-import org.apache.commons.lang3.RandomStringUtils;\n import org.junit.jupiter.api.Test;\n \n import java.util.Optional;\n@@ -24,15 +24,15 @@ public class RegisteredServicePublicKeyCipherExecutorTests {\n     public void verifyCipherUnableToEncodeForStringIsTooLong() {\n         val svc = getService(\"classpath:keys/RSA1024Public.key\");\n \n-        val ticketId = RandomStringUtils.randomAlphanumeric(120);\n+        val ticketId = RandomUtils.randomAlphanumeric(120);\n         val e = new RegisteredServicePublicKeyCipherExecutor();\n         assertNull(e.encode(ticketId, Optional.of(svc)));\n     }\n \n     @Test\n     public void verifyCipherAbleToEncode() {\n         val svc = getService(\"classpath:keys/RSA4096Public.key\");\n-        val ticketId = RandomStringUtils.randomAlphanumeric(120);\n+        val ticketId = RandomUtils.randomAlphanumeric(120);\n         val e = new RegisteredServicePublicKeyCipherExecutor();\n         assertNotNull(e.encode(ticketId, Optional.of(svc)));\n     }"
        },
        {
            "sha": "40df7a65e9028ae57c14fb54e782fad5c9e41c01",
            "filename": "core/cas-server-core-util-api/src/main/java/org/apereo/cas/util/RandomUtils.java",
            "status": "modified",
            "additions": 185,
            "deletions": 1,
            "changes": 186,
            "blob_url": "https://github.com/apereo/cas/blob/40bf278e66786544411c471de5123e7a71826b9f/core%2Fcas-server-core-util-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapereo%2Fcas%2Futil%2FRandomUtils.java",
            "raw_url": "https://github.com/apereo/cas/raw/40bf278e66786544411c471de5123e7a71826b9f/core%2Fcas-server-core-util-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapereo%2Fcas%2Futil%2FRandomUtils.java",
            "contents_url": "https://api.github.com/repos/apereo/cas/contents/core%2Fcas-server-core-util-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapereo%2Fcas%2Futil%2FRandomUtils.java?ref=40bf278e66786544411c471de5123e7a71826b9f",
            "patch": "@@ -3,6 +3,8 @@\n import lombok.experimental.UtilityClass;\n import lombok.extern.slf4j.Slf4j;\n import lombok.val;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.Validate;\n \n import java.security.NoSuchAlgorithmException;\n import java.security.SecureRandom;\n@@ -45,9 +47,45 @@ public static SecureRandom getNativeInstance() {\n      * @return the long\n      */\n     public static long nextLong() {\n-        return org.apache.commons.lang3.RandomUtils.nextLong(0, Long.MAX_VALUE);\n+        return nextLong(0, Long.MAX_VALUE);\n+    }\n+\n+    public static long nextLong(final long startInclusive, final long endExclusive) {\n+        Validate.isTrue(endExclusive >= startInclusive,\n+            \"Start value must be smaller or equal to end value.\");\n+        Validate.isTrue(startInclusive >= 0, \"Both range values must be non-negative.\");\n+\n+        if (startInclusive == endExclusive) {\n+            return startInclusive;\n+        }\n+\n+        return (long) nextDouble(startInclusive, endExclusive);\n+    }\n+\n+    public static double nextDouble(final double startInclusive, final double endInclusive) {\n+        Validate.isTrue(endInclusive >= startInclusive,\n+            \"Start value must be smaller or equal to end value.\");\n+        Validate.isTrue(startInclusive >= 0, \"Both range values must be non-negative.\");\n+\n+        if (startInclusive == endInclusive) {\n+            return startInclusive;\n+        }\n+\n+        return startInclusive + (endInclusive - startInclusive) * getNativeInstance().nextDouble();\n     }\n \n+    /**\n+     * <p> Returns a random double within 0 - Double.MAX_VALUE </p> .\n+     *\n+     * @return the random double\n+     * @see #nextDouble(double, double)\n+     * @since 3.5\n+     */\n+    public static double nextDouble() {\n+        return nextDouble(0, Double.MAX_VALUE);\n+    }\n+\n+\n     /**\n      * Generate secure random id string.\n      *\n@@ -72,4 +110,150 @@ public static String generateSecureRandomId() {\n         });\n         return String.valueOf(chars);\n     }\n+\n+    /**\n+     * <p>Creates a random string whose length is the number of characters\n+     * specified.</p>\n+     *\n+     * <p>Characters will be chosen from the set of Latin alphabetic\n+     * characters (a-z, A-Z).</p>\n+     *\n+     * @param count the length of random string to create\n+     * @return the random string\n+     */\n+    public static String randomAlphabetic(final int count) {\n+        return random(count, true, false);\n+    }\n+\n+    /**\n+     * <p>Creates a random string whose length is between the inclusive minimum and\n+     * the exclusive maximum.</p>\n+     *\n+     * <p>Characters will be chosen from the set of Latin alphabetic characters (a-z, A-Z).</p>\n+     *\n+     * @param minLengthInclusive the inclusive minimum length of the string to generate\n+     * @param maxLengthExclusive the exclusive maximum length of the string to generate\n+     * @return the random string\n+     * @since 3.5\n+     */\n+    public static String randomAlphabetic(final int minLengthInclusive, final int maxLengthExclusive) {\n+        return randomAlphabetic(nextInt(minLengthInclusive, maxLengthExclusive));\n+    }\n+\n+\n+    /**\n+     * <p>\n+     * Returns a random integer within the specified range.\n+     * </p>\n+     *\n+     * @param startInclusive the smallest value that can be returned, must be non-negative\n+     * @param endExclusive   the upper bound (not included)\n+     * @return the random integer\n+     * @throws IllegalArgumentException if {@code startInclusive > endExclusive} or if\n+     *                                  {@code startInclusive} is negative\n+     */\n+    public static int nextInt(final int startInclusive, final int endExclusive) {\n+        Validate.isTrue(endExclusive >= startInclusive,\n+            \"Start value must be smaller or equal to end value.\");\n+        Validate.isTrue(startInclusive >= 0, \"Both range values must be non-negative.\");\n+\n+        if (startInclusive == endExclusive) {\n+            return startInclusive;\n+        }\n+\n+        return startInclusive + getNativeInstance().nextInt(endExclusive - startInclusive);\n+    }\n+\n+    /**\n+     * Returns a random int within 0 - Integer.MAX_VALUE.\n+     *\n+     * @return the random integer\n+     * @see #nextInt(int, int)\n+     * @since 3.5\n+     */\n+    public static int nextInt() {\n+        return nextInt(0, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * <p>Creates a random string whose length is the number of characters\n+     * specified.</p>\n+     *\n+     * <p>Characters will be chosen from the set of alpha-numeric\n+     * characters as indicated by the arguments.</p>\n+     *\n+     * @param count   the length of random string to create\n+     * @param letters if {@code true}, generated string may include\n+     *                alphabetic characters\n+     * @param numbers if {@code true}, generated string may include\n+     *                numeric characters\n+     * @return the random string\n+     */\n+    public static String random(final int count, final boolean letters, final boolean numbers) {\n+        return random(count, 0, 0, letters, numbers);\n+    }\n+\n+    /**\n+     * <p>Creates a random string whose length is the number of characters\n+     * specified.</p>\n+     *\n+     * <p>Characters will be chosen from the set of alpha-numeric\n+     * characters as indicated by the arguments.</p>\n+     *\n+     * @param count   the length of random string to create\n+     * @param start   the position in set of chars to start at\n+     * @param end     the position in set of chars to end before\n+     * @param letters if {@code true}, generated string may include\n+     *                alphabetic characters\n+     * @param numbers if {@code true}, generated string may include\n+     *                numeric characters\n+     * @return the random string\n+     */\n+    public static String random(final int count, final int start, final int end, final boolean letters, final boolean numbers) {\n+        return RandomStringUtils.random(count, start, end, letters, numbers, null, getNativeInstance());\n+    }\n+\n+    /**\n+     * <p>Creates a random string whose length is the number of characters\n+     * specified.</p>\n+     *\n+     * <p>Characters will be chosen from the set of Latin alphabetic\n+     * characters (a-z, A-Z) and the digits 0-9.</p>\n+     *\n+     * @param count the length of random string to create\n+     * @return the random string\n+     */\n+    public static String randomAlphanumeric(final int count) {\n+        return random(count, true, true);\n+    }\n+\n+    /**\n+     * <p>Creates a random string whose length is between the inclusive minimum and\n+     * the exclusive maximum.</p>\n+     *\n+     * <p>Characters will be chosen from the set of Latin alphabetic\n+     * characters (a-z, A-Z) and the digits 0-9.</p>\n+     *\n+     * @param minLengthInclusive the inclusive minimum length of the string to generate\n+     * @param maxLengthExclusive the exclusive maximum length of the string to generate\n+     * @return the random string\n+     * @since 3.5\n+     */\n+    public static String randomAlphanumeric(final int minLengthInclusive, final int maxLengthExclusive) {\n+        return randomAlphanumeric(nextInt(minLengthInclusive, maxLengthExclusive));\n+    }\n+\n+    /**\n+     * <p>Creates a random string whose length is the number of characters\n+     * specified.</p>\n+     *\n+     * <p>Characters will be chosen from the set of numeric\n+     * characters.</p>\n+     *\n+     * @param count the length of random string to create\n+     * @return the random string\n+     */\n+    public static String randomNumeric(final int count) {\n+        return random(count, false, true);\n+    }\n }"
        },
        {
            "sha": "4c4a7c9466e5924ce343dacde5c7c43c48569414",
            "filename": "docs/cas-server-documentation/installation/JWT-Authentication.md",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/apereo/cas/blob/40bf278e66786544411c471de5123e7a71826b9f/docs%2Fcas-server-documentation%2Finstallation%2FJWT-Authentication.md",
            "raw_url": "https://github.com/apereo/cas/raw/40bf278e66786544411c471de5123e7a71826b9f/docs%2Fcas-server-documentation%2Finstallation%2FJWT-Authentication.md",
            "contents_url": "https://api.github.com/repos/apereo/cas/contents/docs%2Fcas-server-documentation%2Finstallation%2FJWT-Authentication.md?ref=40bf278e66786544411c471de5123e7a71826b9f",
            "patch": "@@ -25,8 +25,8 @@ CAS expects a `token` parameter (or request header) to be passed along to the `/\n Here is an example of how to generate a JWT via [Pac4j](https://github.com/pac4j/pac4j):\n \n ```java\n-final String signingSecret = RandomStringUtils.randomAlphanumeric(256);\n-final String encryptionSecret = RandomStringUtils.randomAlphanumeric(48);\n+final String signingSecret = RandomUtils.randomAlphanumeric(256);\n+final String encryptionSecret = RandomUtils.randomAlphanumeric(48);\n \n System.out.println(\"signingSecret \" + signingSecret);\n System.out.println(\"encryptionSecret \" + encryptionSecret);"
        },
        {
            "sha": "3333640e6d10cdecc895ea0a7813f552d237f6bf",
            "filename": "support/cas-server-support-electrofence/src/test/java/org/apereo/cas/impl/mock/MockTicketGrantingTicketCreatedEventProducer.java",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/apereo/cas/blob/40bf278e66786544411c471de5123e7a71826b9f/support%2Fcas-server-support-electrofence%2Fsrc%2Ftest%2Fjava%2Forg%2Fapereo%2Fcas%2Fimpl%2Fmock%2FMockTicketGrantingTicketCreatedEventProducer.java",
            "raw_url": "https://github.com/apereo/cas/raw/40bf278e66786544411c471de5123e7a71826b9f/support%2Fcas-server-support-electrofence%2Fsrc%2Ftest%2Fjava%2Forg%2Fapereo%2Fcas%2Fimpl%2Fmock%2FMockTicketGrantingTicketCreatedEventProducer.java",
            "contents_url": "https://api.github.com/repos/apereo/cas/contents/support%2Fcas-server-support-electrofence%2Fsrc%2Ftest%2Fjava%2Forg%2Fapereo%2Fcas%2Fimpl%2Fmock%2FMockTicketGrantingTicketCreatedEventProducer.java?ref=40bf278e66786544411c471de5123e7a71826b9f",
            "patch": "@@ -5,11 +5,11 @@\n import org.apereo.cas.support.events.dao.CasEvent;\n import org.apereo.cas.support.events.ticket.CasTicketGrantingTicketCreatedEvent;\n import org.apereo.cas.util.CollectionUtils;\n+import org.apereo.cas.util.RandomUtils;\n import org.apereo.cas.util.serialization.TicketIdSanitizationUtils;\n \n import lombok.NoArgsConstructor;\n import lombok.val;\n-import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n \n import java.time.ZoneOffset;\n@@ -78,7 +78,7 @@ private static void createEvent(final int i, final CasEventRepository casEventRe\n         dto.setType(CasTicketGrantingTicketCreatedEvent.class.getName());\n         dto.putTimestamp(new Date().getTime());\n         dto.setCreationTime(ZonedDateTime.now(ZoneOffset.UTC).minusDays(5).toString());\n-        dto.putEventId(TicketIdSanitizationUtils.sanitize(\"TGT-\" + i + '-' + RandomStringUtils.randomAlphanumeric(16)));\n+        dto.putEventId(TicketIdSanitizationUtils.sanitize(\"TGT-\" + i + '-' + RandomUtils.randomAlphanumeric(16)));\n         dto.setPrincipalId(\"casuser\");\n         dto.putClientIpAddress(getMockClientIpAddress());\n         dto.putServerIpAddress(\"127.0.0.1\");"
        },
        {
            "sha": "13c69a43ae2c11c3373a17237be0902d7d957b7b",
            "filename": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/ticket/device/DefaultDeviceTokenFactory.java",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/apereo/cas/blob/40bf278e66786544411c471de5123e7a71826b9f/support%2Fcas-server-support-oauth-core-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapereo%2Fcas%2Fticket%2Fdevice%2FDefaultDeviceTokenFactory.java",
            "raw_url": "https://github.com/apereo/cas/raw/40bf278e66786544411c471de5123e7a71826b9f/support%2Fcas-server-support-oauth-core-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapereo%2Fcas%2Fticket%2Fdevice%2FDefaultDeviceTokenFactory.java",
            "contents_url": "https://api.github.com/repos/apereo/cas/contents/support%2Fcas-server-support-oauth-core-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapereo%2Fcas%2Fticket%2Fdevice%2FDefaultDeviceTokenFactory.java?ref=40bf278e66786544411c471de5123e7a71826b9f",
            "patch": "@@ -10,10 +10,10 @@\n import org.apereo.cas.ticket.TicketFactory;\n import org.apereo.cas.ticket.UniqueTicketIdGenerator;\n import org.apereo.cas.util.DefaultUniqueTicketIdGenerator;\n+import org.apereo.cas.util.RandomUtils;\n \n import lombok.RequiredArgsConstructor;\n import lombok.val;\n-import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.commons.lang3.StringUtils;\n \n /**\n@@ -62,7 +62,7 @@ public DeviceToken createDeviceCode(final Service service) {\n \n     @Override\n     public DeviceUserCode createDeviceUserCode(final DeviceToken deviceToken) {\n-        val userCode = generateDeviceUserCode(RandomStringUtils.randomAlphanumeric(userCodeLength));\n+        val userCode = generateDeviceUserCode(RandomUtils.randomAlphanumeric(userCodeLength));\n         val expirationPolicyToUse = determineExpirationPolicyForService(deviceToken.getService());\n         val deviceUserCode = new DeviceUserCodeImpl(userCode, deviceToken.getId(), expirationPolicyToUse);\n         deviceToken.assignUserCode(deviceUserCode);"
        },
        {
            "sha": "0023950a250ef30ecf5b65cf06f376effd63f15f",
            "filename": "support/cas-server-support-oauth/src/test/java/org/apereo/cas/support/oauth/services/OAuth20RegisteredServiceCipherExecutorTests.java",
            "status": "modified",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/apereo/cas/blob/40bf278e66786544411c471de5123e7a71826b9f/support%2Fcas-server-support-oauth%2Fsrc%2Ftest%2Fjava%2Forg%2Fapereo%2Fcas%2Fsupport%2Foauth%2Fservices%2FOAuth20RegisteredServiceCipherExecutorTests.java",
            "raw_url": "https://github.com/apereo/cas/raw/40bf278e66786544411c471de5123e7a71826b9f/support%2Fcas-server-support-oauth%2Fsrc%2Ftest%2Fjava%2Forg%2Fapereo%2Fcas%2Fsupport%2Foauth%2Fservices%2FOAuth20RegisteredServiceCipherExecutorTests.java",
            "contents_url": "https://api.github.com/repos/apereo/cas/contents/support%2Fcas-server-support-oauth%2Fsrc%2Ftest%2Fjava%2Forg%2Fapereo%2Fcas%2Fsupport%2Foauth%2Fservices%2FOAuth20RegisteredServiceCipherExecutorTests.java?ref=40bf278e66786544411c471de5123e7a71826b9f",
            "patch": "@@ -1,7 +1,8 @@\n package org.apereo.cas.support.oauth.services;\n \n+import org.apereo.cas.util.RandomUtils;\n+\n import lombok.val;\n-import org.apache.commons.lang3.RandomStringUtils;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n \n@@ -18,7 +19,7 @@ public class OAuth20RegisteredServiceCipherExecutorTests {\n     @Test\n     public void verifyOperation() {\n         val cipher = new OAuth20RegisteredServiceCipherExecutor();\n-        val secret = RandomStringUtils.randomAlphanumeric(12);\n+        val secret = RandomUtils.randomAlphanumeric(12);\n         val encoded = cipher.encode(secret);\n         assertNotNull(encoded);\n         assertNotEquals(secret, encoded);"
        },
        {
            "sha": "603facc9f1c78d8eb542a1e99a1758b2f2d0beb7",
            "filename": "support/cas-server-support-oauth/src/test/java/org/apereo/cas/support/oauth/util/OAuth20UtilsTests.java",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/apereo/cas/blob/40bf278e66786544411c471de5123e7a71826b9f/support%2Fcas-server-support-oauth%2Fsrc%2Ftest%2Fjava%2Forg%2Fapereo%2Fcas%2Fsupport%2Foauth%2Futil%2FOAuth20UtilsTests.java",
            "raw_url": "https://github.com/apereo/cas/raw/40bf278e66786544411c471de5123e7a71826b9f/support%2Fcas-server-support-oauth%2Fsrc%2Ftest%2Fjava%2Forg%2Fapereo%2Fcas%2Fsupport%2Foauth%2Futil%2FOAuth20UtilsTests.java",
            "contents_url": "https://api.github.com/repos/apereo/cas/contents/support%2Fcas-server-support-oauth%2Fsrc%2Ftest%2Fjava%2Forg%2Fapereo%2Fcas%2Fsupport%2Foauth%2Futil%2FOAuth20UtilsTests.java?ref=40bf278e66786544411c471de5123e7a71826b9f",
            "patch": "@@ -2,9 +2,9 @@\n \n import org.apereo.cas.support.oauth.services.OAuth20RegisteredServiceCipherExecutor;\n import org.apereo.cas.support.oauth.services.OAuthRegisteredService;\n+import org.apereo.cas.util.RandomUtils;\n \n import lombok.val;\n-import org.apache.commons.lang3.RandomStringUtils;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n \n@@ -21,7 +21,7 @@ public class OAuth20UtilsTests {\n     @Test\n     public void verifyClientSecretCheck() {\n         val cipher = new OAuth20RegisteredServiceCipherExecutor();\n-        val secret = RandomStringUtils.randomAlphanumeric(12);\n+        val secret = RandomUtils.randomAlphanumeric(12);\n         val encodedSecret = cipher.encode(secret);\n         val registeredService = new OAuthRegisteredService();\n         registeredService.setClientId(\"clientid\");\n@@ -33,7 +33,7 @@ public void verifyClientSecretCheck() {\n     @Test\n     public void verifyClientSecretCheckWithoutCipher() {\n         val cipher = new OAuth20RegisteredServiceCipherExecutor();\n-        val secret = RandomStringUtils.randomAlphanumeric(12);\n+        val secret = RandomUtils.randomAlphanumeric(12);\n         val registeredService = new OAuthRegisteredService();\n         registeredService.setClientId(\"clientid\");\n         registeredService.setClientSecret(secret);"
        },
        {
            "sha": "0cde8e2585ee33becac3f1fe78e12ee03911e84c",
            "filename": "support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/web/controllers/dynareg/OidcDynamicClientRegistrationEndpointController.java",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/apereo/cas/blob/40bf278e66786544411c471de5123e7a71826b9f/support%2Fcas-server-support-oidc-core-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapereo%2Fcas%2Foidc%2Fweb%2Fcontrollers%2Fdynareg%2FOidcDynamicClientRegistrationEndpointController.java",
            "raw_url": "https://github.com/apereo/cas/raw/40bf278e66786544411c471de5123e7a71826b9f/support%2Fcas-server-support-oidc-core-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapereo%2Fcas%2Foidc%2Fweb%2Fcontrollers%2Fdynareg%2FOidcDynamicClientRegistrationEndpointController.java",
            "contents_url": "https://api.github.com/repos/apereo/cas/contents/support%2Fcas-server-support-oidc-core-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapereo%2Fcas%2Foidc%2Fweb%2Fcontrollers%2Fdynareg%2FOidcDynamicClientRegistrationEndpointController.java?ref=40bf278e66786544411c471de5123e7a71826b9f",
            "patch": "@@ -15,13 +15,13 @@\n import org.apereo.cas.support.oauth.web.endpoints.OAuth20ConfigurationContext;\n import org.apereo.cas.ticket.accesstoken.AccessToken;\n import org.apereo.cas.util.HttpUtils;\n+import org.apereo.cas.util.RandomUtils;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import lombok.SneakyThrows;\n import lombok.extern.slf4j.Slf4j;\n import lombok.val;\n import org.apache.commons.io.IOUtils;\n-import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.http.HttpResponse;\n import org.springframework.http.HttpStatus;\n@@ -92,7 +92,7 @@ public ResponseEntity handleRequestInternal(@RequestBody final String jsonInput,\n             if (StringUtils.isNotBlank(registrationRequest.getClientName())) {\n                 registeredService.setName(registrationRequest.getClientName());\n             } else if (StringUtils.isBlank(registeredService.getName())) {\n-                registeredService.setName(RandomStringUtils.randomAlphabetic(GENERATED_CLIENT_NAME_LENGTH));\n+                registeredService.setName(RandomUtils.randomAlphabetic(GENERATED_CLIENT_NAME_LENGTH));\n             }\n \n             val serviceId = String.join(\"|\", registrationRequest.getRedirectUris());"
        },
        {
            "sha": "e9d6579aa05055afe7d5d7123f36df086ee2a4df",
            "filename": "support/cas-server-support-oidc/src/test/java/org/apereo/cas/oidc/AbstractOidcTests.java",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/apereo/cas/blob/40bf278e66786544411c471de5123e7a71826b9f/support%2Fcas-server-support-oidc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapereo%2Fcas%2Foidc%2FAbstractOidcTests.java",
            "raw_url": "https://github.com/apereo/cas/raw/40bf278e66786544411c471de5123e7a71826b9f/support%2Fcas-server-support-oidc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapereo%2Fcas%2Foidc%2FAbstractOidcTests.java",
            "contents_url": "https://api.github.com/repos/apereo/cas/contents/support%2Fcas-server-support-oidc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapereo%2Fcas%2Foidc%2FAbstractOidcTests.java?ref=40bf278e66786544411c471de5123e7a71826b9f",
            "patch": "@@ -53,14 +53,14 @@\n import org.apereo.cas.ticket.refreshtoken.RefreshToken;\n import org.apereo.cas.ticket.registry.TicketRegistry;\n import org.apereo.cas.util.CollectionUtils;\n+import org.apereo.cas.util.RandomUtils;\n import org.apereo.cas.web.config.CasCookieConfiguration;\n import org.apereo.cas.web.flow.config.CasCoreWebflowConfiguration;\n import org.apereo.cas.web.flow.config.CasMultifactorAuthenticationWebflowConfiguration;\n import org.apereo.cas.web.flow.config.CasWebflowContextConfiguration;\n \n import com.github.benmanes.caffeine.cache.LoadingCache;\n import lombok.val;\n-import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.jose4j.jwe.ContentEncryptionAlgorithmIdentifiers;\n import org.jose4j.jwe.KeyManagementAlgorithmIdentifiers;\n@@ -255,7 +255,7 @@ protected static OAuthRegisteredService getOAuthRegisteredService(final String c\n     protected static JwtClaims getClaims(final String subject, final String issuer,\n                                          final String clientId, final String audience) {\n         val claims = new JwtClaims();\n-        claims.setJwtId(RandomStringUtils.randomAlphanumeric(16));\n+        claims.setJwtId(RandomUtils.randomAlphanumeric(16));\n         claims.setIssuer(issuer);\n         claims.setAudience(audience);\n "
        },
        {
            "sha": "5f72ce4d41e3f92c22fb247b1794d1a1c20824d9",
            "filename": "support/cas-server-support-pac4j-core-clients/src/main/java/org/apereo/cas/support/pac4j/authentication/DelegatedClientFactory.java",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/apereo/cas/blob/40bf278e66786544411c471de5123e7a71826b9f/support%2Fcas-server-support-pac4j-core-clients%2Fsrc%2Fmain%2Fjava%2Forg%2Fapereo%2Fcas%2Fsupport%2Fpac4j%2Fauthentication%2FDelegatedClientFactory.java",
            "raw_url": "https://github.com/apereo/cas/raw/40bf278e66786544411c471de5123e7a71826b9f/support%2Fcas-server-support-pac4j-core-clients%2Fsrc%2Fmain%2Fjava%2Forg%2Fapereo%2Fcas%2Fsupport%2Fpac4j%2Fauthentication%2FDelegatedClientFactory.java",
            "contents_url": "https://api.github.com/repos/apereo/cas/contents/support%2Fcas-server-support-pac4j-core-clients%2Fsrc%2Fmain%2Fjava%2Forg%2Fapereo%2Fcas%2Fsupport%2Fpac4j%2Fauthentication%2FDelegatedClientFactory.java?ref=40bf278e66786544411c471de5123e7a71826b9f",
            "patch": "@@ -7,6 +7,7 @@\n import org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jOidcClientProperties;\n import org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties;\n import org.apereo.cas.configuration.support.Beans;\n+import org.apereo.cas.util.RandomUtils;\n \n import com.github.scribejava.core.model.Verb;\n import com.nimbusds.jose.JWSAlgorithm;\n@@ -15,7 +16,6 @@\n import lombok.SneakyThrows;\n import lombok.extern.slf4j.Slf4j;\n import lombok.val;\n-import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.pac4j.cas.client.CasClient;\n import org.pac4j.cas.config.CasConfiguration;\n@@ -583,7 +583,7 @@ protected void configureClient(final IndirectClient client, final Pac4jBaseClien\n             client.setName(cname);\n         } else {\n             val className = client.getClass().getSimpleName();\n-            val genName = className.concat(RandomStringUtils.randomNumeric(2));\n+            val genName = className.concat(RandomUtils.randomNumeric(2));\n             client.setName(genName);\n             LOGGER.warn(\"Client name for [{}] is set to a generated value of [{}]. \"\n                 + \"Consider defining an explicit name for the delegated provider\", className, genName);"
        },
        {
            "sha": "1b31ced0919e3ff9bda3f877d5aa462066201939",
            "filename": "support/cas-server-support-shell/src/main/java/org/apereo/cas/shell/commands/util/GenerateJwtCommand.java",
            "status": "modified",
            "additions": 4,
            "deletions": 3,
            "changes": 7,
            "blob_url": "https://github.com/apereo/cas/blob/40bf278e66786544411c471de5123e7a71826b9f/support%2Fcas-server-support-shell%2Fsrc%2Fmain%2Fjava%2Forg%2Fapereo%2Fcas%2Fshell%2Fcommands%2Futil%2FGenerateJwtCommand.java",
            "raw_url": "https://github.com/apereo/cas/raw/40bf278e66786544411c471de5123e7a71826b9f/support%2Fcas-server-support-shell%2Fsrc%2Fmain%2Fjava%2Forg%2Fapereo%2Fcas%2Fshell%2Fcommands%2Futil%2FGenerateJwtCommand.java",
            "contents_url": "https://api.github.com/repos/apereo/cas/contents/support%2Fcas-server-support-shell%2Fsrc%2Fmain%2Fjava%2Forg%2Fapereo%2Fcas%2Fshell%2Fcommands%2Futil%2FGenerateJwtCommand.java?ref=40bf278e66786544411c471de5123e7a71826b9f",
            "patch": "@@ -1,13 +1,14 @@\n package org.apereo.cas.shell.commands.util;\n \n+import org.apereo.cas.util.RandomUtils;\n+\n import com.nimbusds.jose.EncryptionMethod;\n import com.nimbusds.jose.JWEAlgorithm;\n import com.nimbusds.jose.JWSAlgorithm;\n import com.nimbusds.jose.crypto.AESDecrypter;\n import com.nimbusds.jose.crypto.DirectDecrypter;\n import lombok.extern.slf4j.Slf4j;\n import lombok.val;\n-import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.jooq.lambda.Unchecked;\n import org.pac4j.core.profile.CommonProfile;\n@@ -108,7 +109,7 @@ private static void configureJwtEncryption(final int encryptionSecretSize, final\n             return;\n         }\n \n-        val encryptionSecret = RandomStringUtils.randomAlphanumeric(encryptionSecretSize);\n+        val encryptionSecret = RandomUtils.randomAlphanumeric(encryptionSecretSize);\n         LOGGER.info(\"==== Encryption Secret ====\\n[{}]\\n\", encryptionSecret);\n \n         val acceptedEncAlgs = Arrays.stream(JWEAlgorithm.class.getDeclaredFields())\n@@ -157,7 +158,7 @@ private static void configureJwtSigning(final int signingSecretSize, final Strin\n             return;\n         }\n \n-        val signingSecret = RandomStringUtils.randomAlphanumeric(signingSecretSize);\n+        val signingSecret = RandomUtils.randomAlphanumeric(signingSecretSize);\n         LOGGER.info(\"==== Signing Secret ====\\n{}\\n\", signingSecret);\n \n         val acceptedSigningAlgs = Arrays.stream(JWSAlgorithm.class.getDeclaredFields())"
        },
        {
            "sha": "981cbb7b4bdb6527b23784c11288ad15c3602960",
            "filename": "support/cas-server-support-simple-mfa/src/main/java/org/apereo/cas/mfa/simple/CasSimpleMultifactorAuthenticationUniqueTicketIdGenerator.java",
            "status": "modified",
            "additions": 2,
            "deletions": 3,
            "changes": 5,
            "blob_url": "https://github.com/apereo/cas/blob/40bf278e66786544411c471de5123e7a71826b9f/support%2Fcas-server-support-simple-mfa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapereo%2Fcas%2Fmfa%2Fsimple%2FCasSimpleMultifactorAuthenticationUniqueTicketIdGenerator.java",
            "raw_url": "https://github.com/apereo/cas/raw/40bf278e66786544411c471de5123e7a71826b9f/support%2Fcas-server-support-simple-mfa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapereo%2Fcas%2Fmfa%2Fsimple%2FCasSimpleMultifactorAuthenticationUniqueTicketIdGenerator.java",
            "contents_url": "https://api.github.com/repos/apereo/cas/contents/support%2Fcas-server-support-simple-mfa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapereo%2Fcas%2Fmfa%2Fsimple%2FCasSimpleMultifactorAuthenticationUniqueTicketIdGenerator.java?ref=40bf278e66786544411c471de5123e7a71826b9f",
            "patch": "@@ -1,8 +1,7 @@\n package org.apereo.cas.mfa.simple;\n \n import org.apereo.cas.ticket.UniqueTicketIdGenerator;\n-\n-import org.apache.commons.lang3.RandomStringUtils;\n+import org.apereo.cas.util.RandomUtils;\n \n /**\n  * This is {@link CasSimpleMultifactorAuthenticationUniqueTicketIdGenerator}.\n@@ -15,6 +14,6 @@ public class CasSimpleMultifactorAuthenticationUniqueTicketIdGenerator implement\n \n     @Override\n     public String getNewTicketId(final String prefix) {\n-        return prefix + SEPARATOR + RandomStringUtils.randomNumeric(TOKEN_LENGTH);\n+        return prefix + SEPARATOR + RandomUtils.randomNumeric(TOKEN_LENGTH);\n     }\n }"
        }
    ]
}