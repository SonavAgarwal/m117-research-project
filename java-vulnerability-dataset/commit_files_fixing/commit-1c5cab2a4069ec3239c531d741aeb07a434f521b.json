{
    "sha": "1c5cab2a4069ec3239c531d741aeb07a434f521b",
    "node_id": "MDY6Q29tbWl0MTE0ODc1MzoxYzVjYWIyYTQwNjllYzMyMzljNTMxZDc0MWFlYjA3YTQzNGY1MjFi",
    "commit": {
        "author": {
            "name": "Rossen Stoyanchev",
            "email": "rstoyanchev@gopivotal.com",
            "date": "2014-02-03T21:56:24Z"
        },
        "committer": {
            "name": "Rossen Stoyanchev",
            "email": "rstoyanchev@gopivotal.com",
            "date": "2014-02-03T21:57:03Z"
        },
        "message": "Add external entity test\n\nIssue: SPR-11376",
        "tree": {
            "sha": "7bbea717c8b3bcdb149059a60c7e5345bd27b5b6",
            "url": "https://api.github.com/repos/spring-projects/spring-framework/git/trees/7bbea717c8b3bcdb149059a60c7e5345bd27b5b6"
        },
        "url": "https://api.github.com/repos/spring-projects/spring-framework/git/commits/1c5cab2a4069ec3239c531d741aeb07a434f521b",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1c5cab2a4069ec3239c531d741aeb07a434f521b",
    "html_url": "https://github.com/spring-projects/spring-framework/commit/1c5cab2a4069ec3239c531d741aeb07a434f521b",
    "comments_url": "https://api.github.com/repos/spring-projects/spring-framework/commits/1c5cab2a4069ec3239c531d741aeb07a434f521b/comments",
    "author": {
        "login": "rstoyanchev",
        "id": 401908,
        "node_id": "MDQ6VXNlcjQwMTkwOA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/401908?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rstoyanchev",
        "html_url": "https://github.com/rstoyanchev",
        "followers_url": "https://api.github.com/users/rstoyanchev/followers",
        "following_url": "https://api.github.com/users/rstoyanchev/following{/other_user}",
        "gists_url": "https://api.github.com/users/rstoyanchev/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rstoyanchev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rstoyanchev/subscriptions",
        "organizations_url": "https://api.github.com/users/rstoyanchev/orgs",
        "repos_url": "https://api.github.com/users/rstoyanchev/repos",
        "events_url": "https://api.github.com/users/rstoyanchev/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rstoyanchev/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "rstoyanchev",
        "id": 401908,
        "node_id": "MDQ6VXNlcjQwMTkwOA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/401908?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rstoyanchev",
        "html_url": "https://github.com/rstoyanchev",
        "followers_url": "https://api.github.com/users/rstoyanchev/followers",
        "following_url": "https://api.github.com/users/rstoyanchev/following{/other_user}",
        "gists_url": "https://api.github.com/users/rstoyanchev/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rstoyanchev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rstoyanchev/subscriptions",
        "organizations_url": "https://api.github.com/users/rstoyanchev/orgs",
        "repos_url": "https://api.github.com/users/rstoyanchev/repos",
        "events_url": "https://api.github.com/users/rstoyanchev/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rstoyanchev/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "f053f60630b3251500bb7ad321853d8679947e29",
            "url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f053f60630b3251500bb7ad321853d8679947e29",
            "html_url": "https://github.com/spring-projects/spring-framework/commit/f053f60630b3251500bb7ad321853d8679947e29"
        }
    ],
    "stats": {
        "total": 52,
        "additions": 49,
        "deletions": 3
    },
    "files": [
        {
            "sha": "344362036e68a6d530652f0a4a01fe7f4b934883",
            "filename": "spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2CollectionHttpMessageConverterTests.java",
            "status": "modified",
            "additions": 49,
            "deletions": 3,
            "changes": 52,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/1c5cab2a4069ec3239c531d741aeb07a434f521b/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fconverter%2Fxml%2FJaxb2CollectionHttpMessageConverterTests.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/1c5cab2a4069ec3239c531d741aeb07a434f521b/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fconverter%2Fxml%2FJaxb2CollectionHttpMessageConverterTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fconverter%2Fxml%2FJaxb2CollectionHttpMessageConverterTests.java?ref=1c5cab2a4069ec3239c531d741aeb07a434f521b",
            "patch": "@@ -28,11 +28,15 @@\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import javax.xml.stream.XMLInputFactory;\n \n import org.junit.Before;\n import org.junit.Test;\n import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n import org.springframework.http.MockHttpInputMessage;\n+import org.springframework.http.converter.HttpMessageConverter;\n \n /**\n  * Test fixture for {@link Jaxb2CollectionHttpMessageConverter}.\n@@ -120,6 +124,48 @@ public void readXmlTypeSet() throws Exception {\n \t\tassertTrue(\"Invalid result\", result.contains(new TestType(\"2\")));\n \t}\n \n+\t@Test\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic void readXmlRootElementWithExternalEntity() throws Exception {\n+\n+\t\tResource external = new ClassPathResource(\"external.txt\", getClass());\n+\t\tString content =  \"<!DOCTYPE root [\" +\n+\t\t\t\t\"  <!ELEMENT external ANY >\\n\" +\n+\t\t\t\t\"  <!ENTITY ext SYSTEM \\\"\" + external.getURI() + \"\\\" >]>\" +\n+\t\t\t\t\"  <list><rootElement><type s=\\\"1\\\"/><external>&ext;</external></rootElement></list>\";\n+\t\tMockHttpInputMessage inputMessage = new MockHttpInputMessage(content.getBytes(\"UTF-8\"));\n+\n+\t\tCollection<RootElement> result = converter.read(rootElementListType, null, inputMessage);\n+\t\tassertEquals(1, result.size());\n+\t\tassertEquals(\"\", result.iterator().next().external);\n+\t}\n+\n+\t@Test\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic void readXmlRootElementExternalEntityEnabled() throws Exception {\n+\n+\t\tResource external = new ClassPathResource(\"external.txt\", getClass());\n+\t\tString content =  \"<!DOCTYPE root [\" +\n+\t\t\t\t\"  <!ELEMENT external ANY >\\n\" +\n+\t\t\t\t\"  <!ENTITY ext SYSTEM \\\"\" + external.getURI() + \"\\\" >]>\" +\n+\t\t\t\t\"  <list><rootElement><type s=\\\"1\\\"/><external>&ext;</external></rootElement></list>\";\n+\t\tMockHttpInputMessage inputMessage = new MockHttpInputMessage(content.getBytes(\"UTF-8\"));\n+\n+\t\t// Now read with\n+\t\tJaxb2CollectionHttpMessageConverter<?> c = new Jaxb2CollectionHttpMessageConverter<Collection<Object>>() {\n+\t\t\t@Override\n+\t\t\tprotected XMLInputFactory createXmlInputFactory() {\n+\t\t\t\tXMLInputFactory inputFactory = XMLInputFactory.newInstance();\n+\t\t\t\tinputFactory.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, true);\n+\t\t\t\treturn inputFactory;\n+\t\t\t}\n+\t\t};\n+\n+\t\tCollection<RootElement> result = c.read(rootElementListType, null, inputMessage);\n+\t\tassertEquals(1, result.size());\n+\t\tassertEquals(\"Foo Bar\", result.iterator().next().external);\n+\t}\n+\n \n \t@XmlRootElement\n \tpublic static class RootElement {\n@@ -134,6 +180,9 @@ public RootElement(String s) {\n \t\t@XmlElement\n \t\tpublic TestType type = new TestType();\n \n+\t\t@XmlElement(required=false)\n+\t\tpublic String external;\n+\n \t\t@Override\n \t\tpublic boolean equals(Object o) {\n \t\t\tif (this == o) {\n@@ -181,9 +230,6 @@ public boolean equals(Object o) {\n \t\tpublic int hashCode() {\n \t\t\treturn s.hashCode();\n \t\t}\n-\n-\n-\n \t}\n \n }"
        }
    ]
}