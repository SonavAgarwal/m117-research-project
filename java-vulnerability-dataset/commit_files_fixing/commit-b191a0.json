{
    "sha": "b191a0d9cf06f4e04257c221bfe41d2b108a9cc8",
    "node_id": "MDY6Q29tbWl0MjQ5MzkwNDpiMTkxYTBkOWNmMDZmNGUwNDI1N2MyMjFiZmU0MWQyYjEwOGE5Y2M4",
    "commit": {
        "author": {
            "name": "Mark Thomas",
            "email": "markt@apache.org",
            "date": "2019-12-17T09:27:49Z"
        },
        "committer": {
            "name": "Mark Thomas",
            "email": "markt@apache.org",
            "date": "2020-02-04T14:47:19Z"
        },
        "message": "Correct a regression in transfer-encoding parsing\n\nInvalid tokens are an error",
        "tree": {
            "sha": "08ba87d2ab717f732098d7f2a44c23d51c42f42a",
            "url": "https://api.github.com/repos/apache/tomcat/git/trees/08ba87d2ab717f732098d7f2a44c23d51c42f42a"
        },
        "url": "https://api.github.com/repos/apache/tomcat/git/commits/b191a0d9cf06f4e04257c221bfe41d2b108a9cc8",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/tomcat/commits/b191a0d9cf06f4e04257c221bfe41d2b108a9cc8",
    "html_url": "https://github.com/apache/tomcat/commit/b191a0d9cf06f4e04257c221bfe41d2b108a9cc8",
    "comments_url": "https://api.github.com/repos/apache/tomcat/commits/b191a0d9cf06f4e04257c221bfe41d2b108a9cc8/comments",
    "author": {
        "login": "markt-asf",
        "id": 4690029,
        "node_id": "MDQ6VXNlcjQ2OTAwMjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4690029?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markt-asf",
        "html_url": "https://github.com/markt-asf",
        "followers_url": "https://api.github.com/users/markt-asf/followers",
        "following_url": "https://api.github.com/users/markt-asf/following{/other_user}",
        "gists_url": "https://api.github.com/users/markt-asf/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markt-asf/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markt-asf/subscriptions",
        "organizations_url": "https://api.github.com/users/markt-asf/orgs",
        "repos_url": "https://api.github.com/users/markt-asf/repos",
        "events_url": "https://api.github.com/users/markt-asf/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markt-asf/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "markt-asf",
        "id": 4690029,
        "node_id": "MDQ6VXNlcjQ2OTAwMjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4690029?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markt-asf",
        "html_url": "https://github.com/markt-asf",
        "followers_url": "https://api.github.com/users/markt-asf/followers",
        "following_url": "https://api.github.com/users/markt-asf/following{/other_user}",
        "gists_url": "https://api.github.com/users/markt-asf/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markt-asf/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markt-asf/subscriptions",
        "organizations_url": "https://api.github.com/users/markt-asf/orgs",
        "repos_url": "https://api.github.com/users/markt-asf/repos",
        "events_url": "https://api.github.com/users/markt-asf/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markt-asf/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "5dbaead9d829581470202c1faef2ac38517872c9",
            "url": "https://api.github.com/repos/apache/tomcat/commits/5dbaead9d829581470202c1faef2ac38517872c9",
            "html_url": "https://github.com/apache/tomcat/commit/5dbaead9d829581470202c1faef2ac38517872c9"
        }
    ],
    "stats": {
        "total": 156,
        "additions": 123,
        "deletions": 33
    },
    "files": [
        {
            "sha": "e5dacca44111a86f5653d9b66828c17e69438173",
            "filename": "java/org/apache/coyote/http11/AbstractHttp11Processor.java",
            "status": "modified",
            "additions": 8,
            "deletions": 4,
            "changes": 12,
            "blob_url": "https://github.com/apache/tomcat/blob/b191a0d9cf06f4e04257c221bfe41d2b108a9cc8/java%2Forg%2Fapache%2Fcoyote%2Fhttp11%2FAbstractHttp11Processor.java",
            "raw_url": "https://github.com/apache/tomcat/raw/b191a0d9cf06f4e04257c221bfe41d2b108a9cc8/java%2Forg%2Fapache%2Fcoyote%2Fhttp11%2FAbstractHttp11Processor.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcoyote%2Fhttp11%2FAbstractHttp11Processor.java?ref=b191a0d9cf06f4e04257c221bfe41d2b108a9cc8",
            "patch": "@@ -1534,10 +1534,14 @@ protected void prepareRequest() throws IOException {\n         }\n         if (transferEncodingValueMB != null) {\n             List<String> encodingNames = new ArrayList<String>();\n-            TokenList.parseTokenList(headers.values(\"transfer-encoding\"), encodingNames);\n-            for (String encodingName : encodingNames) {\n-                // \"identity\" codings are ignored\n-                addInputFilter(inputFilters, encodingName);\n+            if (TokenList.parseTokenList(headers.values(\"transfer-encoding\"), encodingNames)) {\n+                for (String encodingName : encodingNames) {\n+                    // \"identity\" codings are ignored\n+                    addInputFilter(inputFilters, encodingName);\n+                }\n+            } else {\n+                // Invalid transfer encoding\n+                badRequest(\"http11processor.request.invalidTransferEncoding\");\n             }\n         }\n "
        },
        {
            "sha": "b12dd2e699e69fd786a6d15589e499af87d406f4",
            "filename": "java/org/apache/coyote/http11/LocalStrings.properties",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/apache/tomcat/blob/b191a0d9cf06f4e04257c221bfe41d2b108a9cc8/java%2Forg%2Fapache%2Fcoyote%2Fhttp11%2FLocalStrings.properties",
            "raw_url": "https://github.com/apache/tomcat/raw/b191a0d9cf06f4e04257c221bfe41d2b108a9cc8/java%2Forg%2Fapache%2Fcoyote%2Fhttp11%2FLocalStrings.properties",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcoyote%2Fhttp11%2FLocalStrings.properties?ref=b191a0d9cf06f4e04257c221bfe41d2b108a9cc8",
            "patch": "@@ -27,6 +27,7 @@ http11processor.regexp.error=Error parsing regular expression [{0}]\n http11processor.request.finish=Error finishing request\n http11processor.request.inconsistentHosts=The host specified in the request line is not consistent with the host header\n http11processor.request.invalidScheme=The HTTP request contained an absolute URI with an invalid scheme\n+http11processor.request.invalidTransferEncoding=The HTTP request contained an invalid Transfer-Encoding header\n http11processor.request.invalidUri=The HTTP request contained an invalid URI\n http11processor.request.invalidUserInfo=The HTTP request contained an absolute URI with an invalid userinfo\n http11processor.request.multipleContentLength=The request contained multiple content-length headers"
        },
        {
            "sha": "90b0233bb5d8c3f3970e49dc870292c893eaff88",
            "filename": "java/org/apache/tomcat/util/http/parser/TokenList.java",
            "status": "modified",
            "additions": 32,
            "deletions": 11,
            "changes": 43,
            "blob_url": "https://github.com/apache/tomcat/blob/b191a0d9cf06f4e04257c221bfe41d2b108a9cc8/java%2Forg%2Fapache%2Ftomcat%2Futil%2Fhttp%2Fparser%2FTokenList.java",
            "raw_url": "https://github.com/apache/tomcat/raw/b191a0d9cf06f4e04257c221bfe41d2b108a9cc8/java%2Forg%2Fapache%2Ftomcat%2Futil%2Fhttp%2Fparser%2FTokenList.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Ftomcat%2Futil%2Fhttp%2Fparser%2FTokenList.java?ref=b191a0d9cf06f4e04257c221bfe41d2b108a9cc8",
            "patch": "@@ -36,37 +36,51 @@ private TokenList() {\n      * Parses an enumeration of header values of the form 1#token, forcing all\n      * parsed values to lower case.\n      *\n-     * @param inputs The headers to parse\n-     * @param result The Collection (usually a list of a set) to which the\n-     *                   parsed tokens should be added\n+     * @param inputs     The headers to parse\n+     * @param collection The Collection (usually a list of a set) to which the\n+     *                       parsed tokens should be added\n+     *\n+     * @return {@code} true if the header values were parsed cleanly, otherwise\n+     *         {@code false} (e.g. if a non-token value was encountered)\n      *\n      * @throws IOException If an I/O error occurs reading the header\n      */\n-    public static void parseTokenList(Enumeration<String> inputs, Collection<String> result) throws IOException {\n+    public static boolean parseTokenList(Enumeration<String> inputs, Collection<String> collection) throws IOException {\n+        boolean result = true;\n         while (inputs.hasMoreElements()) {\n             String nextHeaderValue = inputs.nextElement();\n             if (nextHeaderValue != null) {\n-                TokenList.parseTokenList(new StringReader(nextHeaderValue), result);\n+                if (!TokenList.parseTokenList(new StringReader(nextHeaderValue), collection)) {\n+                    result = false;\n+                }\n             }\n         }\n+        return result;\n     }\n \n \n     /**\n      * Parses a header of the form 1#token, forcing all parsed values to lower\n      * case. This is typically used when header values are case-insensitive.\n      *\n-     * @param input  The header to parse\n-     * @param result The Collection (usually a list of a set) to which the\n-     *                   parsed tokens should be added\n+     * @param input      The header to parse\n+     * @param collection The Collection (usually a list of a set) to which the\n+     *                       parsed tokens should be added\n+     *\n+     * @return {@code} true if the header was parsed cleanly, otherwise\n+     *         {@code false} (e.g. if a non-token value was encountered)\n      *\n      * @throws IOException If an I/O error occurs reading the header\n      */\n-    public static void parseTokenList(Reader input, Collection<String> result) throws IOException {\n+    public static boolean parseTokenList(Reader input, Collection<String> collection) throws IOException {\n+        boolean invalid = false;\n+        boolean valid = false;\n+\n         do {\n             String fieldName = HttpParser.readToken(input);\n             if (fieldName == null) {\n                 // Invalid field-name, skip to the next one\n+                invalid = true;\n                 HttpParser.skipUntil(input, 0, ',');\n                 continue;\n             }\n@@ -79,16 +93,23 @@ public static void parseTokenList(Reader input, Collection<String> result) throw\n             SkipResult skipResult = HttpParser.skipConstant(input, \",\");\n             if (skipResult == SkipResult.EOF) {\n                 // EOF\n-                result.add(fieldName.toLowerCase(Locale.ENGLISH));\n+                valid = true;\n+                collection.add(fieldName.toLowerCase(Locale.ENGLISH));\n                 break;\n             } else if (skipResult == SkipResult.FOUND) {\n-                result.add(fieldName.toLowerCase(Locale.ENGLISH));\n+                valid = true;\n+                collection.add(fieldName.toLowerCase(Locale.ENGLISH));\n                 continue;\n             } else {\n                 // Not a token - ignore it\n+                invalid = true;\n                 HttpParser.skipUntil(input, 0, ',');\n                 continue;\n             }\n         } while (true);\n+\n+        // Only return true if at least one valid token was read and no invalid\n+        // entries were found\n+        return valid && !invalid;\n     }\n }"
        },
        {
            "sha": "2946727474aa957c8b687a956e80215d5386bec5",
            "filename": "test/org/apache/tomcat/util/http/parser/TestTokenList.java",
            "status": "modified",
            "additions": 77,
            "deletions": 18,
            "changes": 95,
            "blob_url": "https://github.com/apache/tomcat/blob/b191a0d9cf06f4e04257c221bfe41d2b108a9cc8/test%2Forg%2Fapache%2Ftomcat%2Futil%2Fhttp%2Fparser%2FTestTokenList.java",
            "raw_url": "https://github.com/apache/tomcat/raw/b191a0d9cf06f4e04257c221bfe41d2b108a9cc8/test%2Forg%2Fapache%2Ftomcat%2Futil%2Fhttp%2Fparser%2FTestTokenList.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test%2Forg%2Fapache%2Ftomcat%2Futil%2Fhttp%2Fparser%2FTestTokenList.java?ref=b191a0d9cf06f4e04257c221bfe41d2b108a9cc8",
            "patch": "@@ -31,15 +31,15 @@ public class TestTokenList {\n     public void testAll() throws IOException {\n         Set<String> expected = new HashSet<String>();\n         expected.add(\"*\");\n-        doTestVary(\"*\", expected);\n+        doTestVary(\"*\", expected, true);\n     }\n \n \n     @Test\n     public void testSingle() throws IOException {\n         Set<String> expected = new HashSet<String>();\n         expected.add(\"host\");\n-        doTestVary(\"Host\", expected);\n+        doTestVary(\"Host\", expected, true);\n     }\n \n \n@@ -49,21 +49,21 @@ public void testMultiple() throws IOException {\n         expected.add(\"bar\");\n         expected.add(\"foo\");\n         expected.add(\"host\");\n-        doTestVary(\"Host, Foo, Bar\", expected);\n+        doTestVary(\"Host, Foo, Bar\", expected, true);\n     }\n \n \n     @Test\n     public void testEmptyString() throws IOException {\n         Set<String> s = Collections.emptySet();\n-        doTestVary(\"\", s);\n+        doTestVary(\"\", s, false);\n     }\n \n \n     @Test\n     public void testSingleInvalid() throws IOException {\n         Set<String> s = Collections.emptySet();\n-        doTestVary(\"{{{\", s);\n+        doTestVary(\"{{{\", s, false);\n     }\n \n \n@@ -73,7 +73,7 @@ public void testMultipleWithInvalidStart() throws IOException {\n         expected.add(\"bar\");\n         expected.add(\"foo\");\n         expected.add(\"host\");\n-        doTestVary(\"{{{, Host, Foo, Bar\", expected);\n+        doTestVary(\"{{{, Host, Foo, Bar\", expected, false);\n     }\n \n \n@@ -83,7 +83,7 @@ public void testMultipleWithInvalidMiddle() throws IOException {\n         expected.add(\"bar\");\n         expected.add(\"foo\");\n         expected.add(\"host\");\n-        doTestVary(\"Host, {{{, Foo, Bar\", expected);\n+        doTestVary(\"Host, {{{, Foo, Bar\", expected, false);\n     }\n \n \n@@ -93,7 +93,7 @@ public void testMultipleWithInvalidEnd() throws IOException {\n         expected.add(\"bar\");\n         expected.add(\"foo\");\n         expected.add(\"host\");\n-        doTestVary(\"Host, Foo, Bar, {{{\", expected);\n+        doTestVary(\"Host, Foo, Bar, {{{\", expected, false);\n     }\n \n \n@@ -103,7 +103,7 @@ public void testMultipleWithInvalidStart2() throws IOException {\n         expected.add(\"bar\");\n         expected.add(\"foo\");\n         expected.add(\"host\");\n-        doTestVary(\"OK {{{, Host, Foo, Bar\", expected);\n+        doTestVary(\"OK {{{, Host, Foo, Bar\", expected, false);\n     }\n \n \n@@ -113,7 +113,7 @@ public void testMultipleWithInvalidMiddle2() throws IOException {\n         expected.add(\"bar\");\n         expected.add(\"foo\");\n         expected.add(\"host\");\n-        doTestVary(\"Host, OK {{{, Foo, Bar\", expected);\n+        doTestVary(\"Host, OK {{{, Foo, Bar\", expected, false);\n     }\n \n \n@@ -123,21 +123,80 @@ public void testMultipleWithInvalidEnd2() throws IOException {\n         expected.add(\"bar\");\n         expected.add(\"foo\");\n         expected.add(\"host\");\n-        doTestVary(\"Host, Foo, Bar, OK {{{\", expected);\n+        doTestVary(\"Host, Foo, Bar, OK {{{\", expected, false);\n     }\n \n \n     @SuppressWarnings(\"deprecation\")\n-    private void doTestVary(String input, Set<String> expected) throws IOException {\n+    private void doTestVary(String input, Set<String> expectedTokens, boolean expectedResult) throws IOException {\n         StringReader reader = new StringReader(input);\n-        Set<String> result = new HashSet<String>();\n-        Vary.parseVary(reader, result);\n-        Assert.assertEquals(expected, result);\n+        Set<String> tokens = new HashSet<String>();\n+        Vary.parseVary(reader, tokens);\n+        Assert.assertEquals(expectedTokens, tokens);\n \n         // Can't use reset(). Parser uses marks.\n         reader = new StringReader(input);\n-        result.clear();\n-        TokenList.parseTokenList(reader, result);\n-        Assert.assertEquals(expected, result);\n+        tokens.clear();\n+        boolean result = TokenList.parseTokenList(reader, tokens);\n+        Assert.assertEquals(expectedTokens, tokens);\n+        Assert.assertEquals(Boolean.valueOf(expectedResult), Boolean.valueOf(result));\n     }\n+\n+\n+    @Test\n+    public void testMultipleHeadersValidWithoutNull() throws IOException {\n+        doTestMultipleHeadersValid(false);\n+    }\n+\n+\n+    @Test\n+    public void testMultipleHeadersValidWithNull() throws IOException {\n+        doTestMultipleHeadersValid(true);\n+    }\n+\n+\n+    private void doTestMultipleHeadersValid(boolean withNull) throws IOException {\n+        Set<String> expectedTokens = new HashSet<String>();\n+        expectedTokens.add(\"bar\");\n+        expectedTokens.add(\"foo\");\n+        expectedTokens.add(\"foo2\");\n+\n+        Set<String> inputs = new HashSet<String>();\n+        inputs.add(\"foo\");\n+        if (withNull) {\n+            inputs.add(null);\n+        }\n+        inputs.add(\"bar, foo2\");\n+\n+        Set<String> tokens = new HashSet<String>();\n+\n+\n+        boolean result = TokenList.parseTokenList(Collections.enumeration(inputs), tokens);\n+        Assert.assertEquals(expectedTokens, tokens);\n+        Assert.assertTrue(result);\n+    }\n+\n+\n+    @Test\n+    public void doTestMultipleHeadersInvalid() throws IOException {\n+        Set<String> expectedTokens = new HashSet<String>();\n+        expectedTokens.add(\"bar\");\n+        expectedTokens.add(\"bar2\");\n+        expectedTokens.add(\"foo\");\n+        expectedTokens.add(\"foo2\");\n+        expectedTokens.add(\"foo3\");\n+\n+        Set<String> inputs = new HashSet<String>();\n+        inputs.add(\"foo\");\n+        inputs.add(\"bar2, }}}, foo3\");\n+        inputs.add(\"bar, foo2\");\n+\n+        Set<String> tokens = new HashSet<String>();\n+\n+\n+        boolean result = TokenList.parseTokenList(Collections.enumeration(inputs), tokens);\n+        Assert.assertEquals(expectedTokens, tokens);\n+        Assert.assertFalse(result);\n+    }\n+\n }"
        },
        {
            "sha": "99d7e835baf43e8a5a835ae3637b55df8eea2cb7",
            "filename": "webapps/docs/changelog.xml",
            "status": "modified",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/apache/tomcat/blob/b191a0d9cf06f4e04257c221bfe41d2b108a9cc8/webapps%2Fdocs%2Fchangelog.xml",
            "raw_url": "https://github.com/apache/tomcat/raw/b191a0d9cf06f4e04257c221bfe41d2b108a9cc8/webapps%2Fdocs%2Fchangelog.xml",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps%2Fdocs%2Fchangelog.xml?ref=b191a0d9cf06f4e04257c221bfe41d2b108a9cc8",
            "patch": "@@ -129,6 +129,11 @@\n         When reporting / logging invalid HTTP headers encode any non-printing\n         characters using the 0xNN form. (markt)\n       </add>\n+      <fix>\n+        Correct a regression introduced in 7.0.98 that meant invalid tokens in\n+        the <code>Transfer-Encoding</code> header were ignored rather than\n+        treated as an error. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Jasper\">"
        }
    ]
}