{
    "sha": "edba32b3093703d5e9ed42b5b8ec23ecc1998398",
    "node_id": "MDY6Q29tbWl0MTE0ODc1MzplZGJhMzJiMzA5MzcwM2Q1ZTllZDQyYjViOGVjMjNlY2MxOTk4Mzk4",
    "commit": {
        "author": {
            "name": "Rossen Stoyanchev",
            "email": "rstoyanchev@gopivotal.com",
            "date": "2014-02-18T23:48:02Z"
        },
        "committer": {
            "name": "Phillip Webb",
            "email": "pwebb@gopivotal.com",
            "date": "2014-02-18T23:54:30Z"
        },
        "message": "Add processExternalEntities support to OXM\n\nUpdate OXM AbstractMarshaller to support processing of external\nXML entities. By default external entities will not be processed.\n\nIssue: SPR-11376",
        "tree": {
            "sha": "3e35ec402bad0857f213291ee63010012eb5dccc",
            "url": "https://api.github.com/repos/spring-projects/spring-framework/git/trees/3e35ec402bad0857f213291ee63010012eb5dccc"
        },
        "url": "https://api.github.com/repos/spring-projects/spring-framework/git/commits/edba32b3093703d5e9ed42b5b8ec23ecc1998398",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/spring-projects/spring-framework/commits/edba32b3093703d5e9ed42b5b8ec23ecc1998398",
    "html_url": "https://github.com/spring-projects/spring-framework/commit/edba32b3093703d5e9ed42b5b8ec23ecc1998398",
    "comments_url": "https://api.github.com/repos/spring-projects/spring-framework/commits/edba32b3093703d5e9ed42b5b8ec23ecc1998398/comments",
    "author": {
        "login": "rstoyanchev",
        "id": 401908,
        "node_id": "MDQ6VXNlcjQwMTkwOA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/401908?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rstoyanchev",
        "html_url": "https://github.com/rstoyanchev",
        "followers_url": "https://api.github.com/users/rstoyanchev/followers",
        "following_url": "https://api.github.com/users/rstoyanchev/following{/other_user}",
        "gists_url": "https://api.github.com/users/rstoyanchev/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rstoyanchev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rstoyanchev/subscriptions",
        "organizations_url": "https://api.github.com/users/rstoyanchev/orgs",
        "repos_url": "https://api.github.com/users/rstoyanchev/repos",
        "events_url": "https://api.github.com/users/rstoyanchev/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rstoyanchev/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": null,
    "parents": [
        {
            "sha": "7efd54e243ab0451eea3f1cded7cfd7b512aa563",
            "url": "https://api.github.com/repos/spring-projects/spring-framework/commits/7efd54e243ab0451eea3f1cded7cfd7b512aa563",
            "html_url": "https://github.com/spring-projects/spring-framework/commit/7efd54e243ab0451eea3f1cded7cfd7b512aa563"
        }
    ],
    "stats": {
        "total": 375,
        "additions": 349,
        "deletions": 26
    },
    "files": [
        {
            "sha": "4189c0eeb3a5ba02d087dbd31955460476b851f0",
            "filename": "spring-oxm/src/main/java/org/springframework/oxm/castor/CastorMarshaller.java",
            "status": "modified",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/edba32b3093703d5e9ed42b5b8ec23ecc1998398/spring-oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorMarshaller.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/edba32b3093703d5e9ed42b5b8ec23ecc1998398/spring-oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorMarshaller.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorMarshaller.java?ref=edba32b3093703d5e9ed42b5b8ec23ecc1998398",
            "patch": "@@ -162,6 +162,11 @@ public void setEncoding(String encoding) {\n \t\tthis.encoding = encoding;\n \t}\n \n+\t@Override\n+\tprotected String getDefaultEncoding() {\n+\t\treturn this.encoding;\n+\t}\n+\n \t/**\n \t * Set the locations of the Castor XML mapping files.\n \t */"
        },
        {
            "sha": "93fa1a4d1fb18cdc1bc08dc9978598628f2653ac",
            "filename": "spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java",
            "status": "modified",
            "additions": 7,
            "deletions": 0,
            "changes": 7,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/edba32b3093703d5e9ed42b5b8ec23ecc1998398/spring-oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxb2Marshaller.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/edba32b3093703d5e9ed42b5b8ec23ecc1998398/spring-oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxb2Marshaller.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxb2Marshaller.java?ref=edba32b3093703d5e9ed42b5b8ec23ecc1998398",
            "patch": "@@ -400,6 +400,13 @@ public void setProcessExternalEntities(boolean processExternalEntities) {\n \t\tthis.processExternalEntities = processExternalEntities;\n \t}\n \n+\t/**\n+\t * @return the configured value for whether XML external entities are allowed.\n+\t */\n+\tpublic boolean isProcessExternalEntities() {\n+\t\treturn this.processExternalEntities;\n+\t}\n+\n \t@Override\n \tpublic void setBeanClassLoader(ClassLoader classLoader) {\n \t\tthis.beanClassLoader = classLoader;"
        },
        {
            "sha": "715ef4e2356cdf98271f17235f4e31323c440172",
            "filename": "spring-oxm/src/main/java/org/springframework/oxm/jibx/JibxMarshaller.java",
            "status": "modified",
            "additions": 15,
            "deletions": 6,
            "changes": 21,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/edba32b3093703d5e9ed42b5b8ec23ecc1998398/spring-oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxMarshaller.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/edba32b3093703d5e9ed42b5b8ec23ecc1998398/spring-oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxMarshaller.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxMarshaller.java?ref=edba32b3093703d5e9ed42b5b8ec23ecc1998398",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2013 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -28,6 +28,7 @@\n import javax.xml.stream.XMLStreamException;\n import javax.xml.stream.XMLStreamReader;\n import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.OutputKeys;\n import javax.xml.transform.Result;\n import javax.xml.transform.Source;\n import javax.xml.transform.Transformer;\n@@ -149,6 +150,11 @@ public void setEncoding(String encoding) {\n \t\tthis.encoding = encoding;\n \t}\n \n+\t@Override\n+\tprotected String getDefaultEncoding() {\n+\t\treturn this.encoding;\n+\t}\n+\n \t/**\n \t * Set the document standalone flag for marshalling. By default, this flag is not present.\n \t */\n@@ -338,7 +344,7 @@ private void transformAndMarshal(Object graph, Result result) throws IOException\n \t\t}\n \t\tcatch (TransformerException ex) {\n \t\t\tthrow new MarshallingFailureException(\n-\t\t\t\t\t\"Could not transform to [\" + ClassUtils.getShortName(result.getClass()) + \"]\");\n+\t\t\t\t\t\"Could not transform to [\" + ClassUtils.getShortName(result.getClass()) + \"]\", ex);\n \t\t}\n \n \t}\n@@ -398,7 +404,7 @@ protected Object unmarshalReader(Reader reader) throws XmlMappingException, IOEx\n \t@Override\n \tprotected Object unmarshalDomNode(Node node) throws XmlMappingException {\n \t\ttry {\n-\t\t\treturn transformAndUnmarshal(new DOMSource(node));\n+\t\t\treturn transformAndUnmarshal(new DOMSource(node), null);\n \t\t}\n \t\tcatch (IOException ex) {\n \t\t\tthrow new UnmarshallingFailureException(\"JiBX unmarshalling exception\", ex);\n@@ -409,20 +415,23 @@ protected Object unmarshalDomNode(Node node) throws XmlMappingException {\n \tprotected Object unmarshalSaxReader(XMLReader xmlReader, InputSource inputSource)\n \t\t\tthrows XmlMappingException, IOException {\n \n-\t\treturn transformAndUnmarshal(new SAXSource(xmlReader, inputSource));\n+\t\treturn transformAndUnmarshal(new SAXSource(xmlReader, inputSource), inputSource.getEncoding());\n \t}\n \n-\tprivate Object transformAndUnmarshal(Source source) throws IOException {\n+\tprivate Object transformAndUnmarshal(Source source, String encoding) throws IOException {\n \t\ttry {\n \t\t\tTransformer transformer = this.transformerFactory.newTransformer();\n+\t\t\tif (encoding != null) {\n+\t\t\t\ttransformer.setOutputProperty(OutputKeys.ENCODING, encoding);\n+\t\t\t}\n \t\t\tByteArrayOutputStream os = new ByteArrayOutputStream();\n \t\t\ttransformer.transform(source, new StreamResult(os));\n \t\t\tByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());\n \t\t\treturn unmarshalInputStream(is);\n \t\t}\n \t\tcatch (TransformerException ex) {\n \t\t\tthrow new MarshallingFailureException(\n-\t\t\t\t\t\"Could not transform from [\" + ClassUtils.getShortName(source.getClass()) + \"]\");\n+\t\t\t\t\t\"Could not transform from [\" + ClassUtils.getShortName(source.getClass()) + \"]\", ex);\n \t\t}\n \t}\n "
        },
        {
            "sha": "2df808e57463f356f0a07cf357bc9b5daefa7350",
            "filename": "spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java",
            "status": "modified",
            "additions": 67,
            "deletions": 3,
            "changes": 70,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/edba32b3093703d5e9ed42b5b8ec23ecc1998398/spring-oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fsupport%2FAbstractMarshaller.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/edba32b3093703d5e9ed42b5b8ec23ecc1998398/spring-oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fsupport%2FAbstractMarshaller.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fsupport%2FAbstractMarshaller.java?ref=edba32b3093703d5e9ed42b5b8ec23ecc1998398",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2013 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -73,6 +73,34 @@ public abstract class AbstractMarshaller implements Marshaller, Unmarshaller {\n \n \tprivate final Object documentBuilderFactoryMonitor = new Object();\n \n+\tprivate boolean processExternalEntities = false;\n+\n+\n+\t/**\n+\t * Indicates whether external XML entities are processed when unmarshalling.\n+\t * <p>Default is {@code false}, meaning that external entities are not resolved.\n+\t * Note that processing of external entities will only be enabled/disabled when the\n+\t * {@code Source} passed to {@link #unmarshal(Source)} is a {@link SAXSource} or\n+\t * {@link StreamSource}. It has no effect for {@link DOMSource} or {@link StAXSource}\n+\t * instances.\n+\t */\n+\tpublic void setProcessExternalEntities(boolean processExternalEntities) {\n+\t\tthis.processExternalEntities = processExternalEntities;\n+\t}\n+\n+\t/**\n+\t * @return the configured value for whether XML external entities are allowed.\n+\t */\n+\tpublic boolean isProcessExternalEntities() {\n+\t\treturn this.processExternalEntities;\n+\t}\n+\n+\t/**\n+\t * @return the default encoding to use for marshalling or unmarshalling from\n+\t * \ta byte stream, or {@code null}.\n+\t */\n+\tabstract protected String getDefaultEncoding();\n+\n \n \t/**\n \t * Marshals the object graph with the given root into the provided {@code javax.xml.transform.Result}.\n@@ -133,7 +161,7 @@ else if (source instanceof SAXSource) {\n \t\t\treturn unmarshalSaxSource((SAXSource) source);\n \t\t}\n \t\telse if (source instanceof StreamSource) {\n-\t\t\treturn unmarshalStreamSource((StreamSource) source);\n+\t\t\treturn unmarshalStreamSourceNoExternalEntitities((StreamSource) source);\n \t\t}\n \t\telse {\n \t\t\tthrow new IllegalArgumentException(\"Unknown Source type: \" + source.getClass());\n@@ -175,7 +203,9 @@ protected DocumentBuilderFactory createDocumentBuilderFactory() throws ParserCon\n \t * @throws SAXException if thrown by JAXP methods\n \t */\n \tprotected XMLReader createXmlReader() throws SAXException {\n-\t\treturn XMLReaderFactory.createXMLReader();\n+\t\tXMLReader xmlReader = XMLReaderFactory.createXMLReader();\n+\t\txmlReader.setFeature(\"http://xml.org/sax/features/external-general-entities\", isProcessExternalEntities());\n+\t\treturn xmlReader;\n \t}\n \n \n@@ -357,9 +387,43 @@ protected Object unmarshalSaxSource(SAXSource saxSource) throws XmlMappingExcept\n \t\treturn unmarshalSaxReader(saxSource.getXMLReader(), saxSource.getInputSource());\n \t}\n \n+\t/**\n+\t * Template method for handling {@code StreamSource}s with protection against\n+\t * the XML External Entity (XXE) processing vulnerability taking into account\n+\t * the value of the {@link #setProcessExternalEntities(boolean)} property.\n+\t * <p>\n+\t * The default implementation wraps the StreamSource as a SAXSource and delegates\n+\t * to {@link #unmarshalSaxSource(javax.xml.transform.sax.SAXSource)}.\n+\t *\n+\t * @param streamSource the {@code StreamSource}\n+\t * @return the object graph\n+\t * @throws IOException if an I/O exception occurs\n+\t * @throws XmlMappingException if the given source cannot be mapped to an object\n+\t *\n+\t * @see <a href=\"https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing\">XML_External_Entity_(XXE)_Processing</a>\n+\t */\n+\tprotected Object unmarshalStreamSourceNoExternalEntitities(StreamSource streamSource) throws XmlMappingException, IOException {\n+\t\tInputSource inputSource;\n+\t\tif (streamSource.getInputStream() != null) {\n+\t\t\tinputSource = new InputSource(streamSource.getInputStream());\n+\t\t\tinputSource.setEncoding(getDefaultEncoding());\n+\t\t}\n+\t\telse if (streamSource.getReader() != null) {\n+\t\t\tinputSource = new InputSource(streamSource.getReader());\n+\t\t}\n+\t\telse {\n+\t\t\tinputSource = new InputSource(streamSource.getSystemId());\n+\t\t}\n+\t\treturn unmarshalSaxSource(new SAXSource(inputSource));\n+\t}\n+\n \t/**\n \t * Template method for handling {@code StreamSource}s.\n \t * <p>This implementation defers to {@code unmarshalInputStream} or {@code unmarshalReader}.\n+\t * <p>As of 3.2.8 and 4.0.2 this method is no longer invoked from\n+\t * {@link #unmarshal(javax.xml.transform.Source)}. The method invoked instead is\n+\t * {@link #unmarshalStreamSourceNoExternalEntitities(javax.xml.transform.stream.StreamSource)}.\n+\t *\n \t * @param streamSource the {@code StreamSource}\n \t * @return the object graph\n \t * @throws IOException if an I/O exception occurs"
        },
        {
            "sha": "b3bb5cf11f397084018adc1177a8d0d2925ab2a5",
            "filename": "spring-oxm/src/main/java/org/springframework/oxm/xmlbeans/XmlBeansMarshaller.java",
            "status": "modified",
            "additions": 5,
            "deletions": 1,
            "changes": 6,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/edba32b3093703d5e9ed42b5b8ec23ecc1998398/spring-oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansMarshaller.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/edba32b3093703d5e9ed42b5b8ec23ecc1998398/spring-oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansMarshaller.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansMarshaller.java?ref=edba32b3093703d5e9ed42b5b8ec23ecc1998398",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -113,6 +113,10 @@ public boolean isValidating() {\n \t\treturn this.validating;\n \t}\n \n+\t@Override\n+\tprotected String getDefaultEncoding() {\n+\t\treturn null;\n+\t}\n \n \t/**\n \t * This implementation returns true if the given class is an implementation of {@link XmlObject}."
        },
        {
            "sha": "52c121e86ed7671c5309c6e3375e555dd964164f",
            "filename": "spring-oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java",
            "status": "modified",
            "additions": 15,
            "deletions": 5,
            "changes": 20,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/edba32b3093703d5e9ed42b5b8ec23ecc1998398/spring-oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamMarshaller.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/edba32b3093703d5e9ed42b5b8ec23ecc1998398/spring-oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamMarshaller.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamMarshaller.java?ref=edba32b3093703d5e9ed42b5b8ec23ecc1998398",
            "patch": "@@ -27,11 +27,9 @@\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-import javax.xml.stream.XMLEventReader;\n-import javax.xml.stream.XMLEventWriter;\n-import javax.xml.stream.XMLStreamException;\n-import javax.xml.stream.XMLStreamReader;\n-import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.stream.*;\n+import javax.xml.transform.stax.StAXSource;\n+import javax.xml.transform.stream.StreamSource;\n \n import com.thoughtworks.xstream.MarshallingStrategy;\n import com.thoughtworks.xstream.XStream;\n@@ -342,6 +340,11 @@ public void setEncoding(String encoding) {\n \t\tthis.encoding = encoding;\n \t}\n \n+\t@Override\n+\tprotected String getDefaultEncoding() {\n+\t\treturn this.encoding;\n+\t}\n+\n \t/**\n \t * Set the classes supported by this marshaller.\n \t * <p>If this property is empty (the default), all classes are supported.\n@@ -700,6 +703,13 @@ private void doMarshal(Object graph, HierarchicalStreamWriter streamWriter, Data\n \n \t// Unmarshalling\n \n+\t@Override\n+\tprotected Object unmarshalStreamSourceNoExternalEntitities(StreamSource streamSource)\n+\t\t\tthrows XmlMappingException, IOException {\n+\n+\t\treturn super.unmarshalStreamSource(streamSource);\n+\t}\n+\n \t@Override\n \tprotected Object unmarshalDomNode(Node node) throws XmlMappingException {\n \t\tHierarchicalStreamReader streamReader;"
        },
        {
            "sha": "5500642125bd2f57b8d44875668ef0a35c912ada",
            "filename": "spring-oxm/src/test/java/org/springframework/oxm/castor/CastorUnmarshallerTests.java",
            "status": "modified",
            "additions": 62,
            "deletions": 1,
            "changes": 63,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/edba32b3093703d5e9ed42b5b8ec23ecc1998398/spring-oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorUnmarshallerTests.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/edba32b3093703d5e9ed42b5b8ec23ecc1998398/spring-oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorUnmarshallerTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorUnmarshallerTests.java?ref=edba32b3093703d5e9ed42b5b8ec23ecc1998398",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2013 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -19,6 +19,8 @@\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.StringReader;\n+import java.util.concurrent.atomic.AtomicReference;\n+import javax.xml.transform.sax.SAXSource;\n import javax.xml.transform.stream.StreamSource;\n \n import org.junit.Ignore;\n@@ -28,9 +30,13 @@\n import org.springframework.oxm.AbstractUnmarshallerTests;\n import org.springframework.oxm.MarshallingException;\n import org.springframework.oxm.Unmarshaller;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.XMLReader;\n \n+import static junit.framework.Assert.assertNotNull;\n import static org.hamcrest.CoreMatchers.*;\n import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n \n /**\n  * @author Arjen Poutsma\n@@ -203,4 +209,59 @@ private Object unmarshal(String xml) throws Exception {\n \t\tStreamSource source = new StreamSource(new StringReader(xml));\n \t\treturn unmarshaller.unmarshal(source);\n \t}\n+\n+\t@Test\n+\tpublic void unmarshalStreamSourceExternalEntities() throws Exception {\n+\n+\t\tfinal AtomicReference<XMLReader> result = new AtomicReference<XMLReader>();\n+\t\tCastorMarshaller marshaller = new CastorMarshaller() {\n+\t\t\t@Override\n+\t\t\tprotected Object unmarshalSaxReader(XMLReader xmlReader, InputSource inputSource) {\n+\t\t\t\tresult.set(xmlReader);\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t};\n+\n+\t\t// 1. external-general-entities disabled (default)\n+\n+\t\tmarshaller.unmarshal(new StreamSource(\"1\"));\n+\t\tassertNotNull(result.get());\n+\t\tassertEquals(false, result.get().getFeature(\"http://xml.org/sax/features/external-general-entities\"));\n+\n+\t\t// 2. external-general-entities disabled (default)\n+\n+\t\tresult.set(null);\n+\t\tmarshaller.setProcessExternalEntities(true);\n+\t\tmarshaller.unmarshal(new StreamSource(\"1\"));\n+\t\tassertNotNull(result.get());\n+\t\tassertEquals(true, result.get().getFeature(\"http://xml.org/sax/features/external-general-entities\"));\n+\t}\n+\n+\t@Test\n+\tpublic void unmarshalSaxSourceExternalEntities() throws Exception {\n+\n+\t\tfinal AtomicReference<XMLReader> result = new AtomicReference<XMLReader>();\n+\t\tCastorMarshaller marshaller = new CastorMarshaller() {\n+\t\t\t@Override\n+\t\t\tprotected Object unmarshalSaxReader(XMLReader xmlReader, InputSource inputSource) {\n+\t\t\t\tresult.set(xmlReader);\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t};\n+\n+\t\t// 1. external-general-entities disabled (default)\n+\n+\t\tmarshaller.unmarshal(new SAXSource(new InputSource(\"1\")));\n+\t\tassertNotNull(result.get());\n+\t\tassertEquals(false, result.get().getFeature(\"http://xml.org/sax/features/external-general-entities\"));\n+\n+\t\t// 2. external-general-entities disabled (default)\n+\n+\t\tresult.set(null);\n+\t\tmarshaller.setProcessExternalEntities(true);\n+\t\tmarshaller.unmarshal(new SAXSource(new InputSource(\"1\")));\n+\t\tassertNotNull(result.get());\n+\t\tassertEquals(true, result.get().getFeature(\"http://xml.org/sax/features/external-general-entities\"));\n+\t}\n+\n }"
        },
        {
            "sha": "921a4b21e62d4d2bf0eeefd32e6d802b83d6334d",
            "filename": "spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java",
            "status": "modified",
            "additions": 75,
            "deletions": 5,
            "changes": 80,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/edba32b3093703d5e9ed42b5b8ec23ecc1998398/spring-oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxb2MarshallerTests.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/edba32b3093703d5e9ed42b5b8ec23ecc1998398/spring-oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxb2MarshallerTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxb2MarshallerTests.java?ref=edba32b3093703d5e9ed42b5b8ec23ecc1998398",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2013 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -31,9 +31,12 @@\n import javax.xml.namespace.QName;\n import javax.xml.transform.Result;\n import javax.xml.transform.sax.SAXResult;\n+import javax.xml.transform.sax.SAXSource;\n import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n \n import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n import org.mockito.InOrder;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n@@ -47,9 +50,7 @@\n import org.springframework.oxm.mime.MimeContainer;\n import org.springframework.util.FileCopyUtils;\n import org.springframework.util.ReflectionUtils;\n-import org.xml.sax.Attributes;\n-import org.xml.sax.ContentHandler;\n-import org.xml.sax.Locator;\n+import org.xml.sax.*;\n \n import static org.junit.Assert.*;\n import static org.custommonkey.xmlunit.XMLAssert.assertXMLEqual;\n@@ -289,7 +290,7 @@ public void marshalAttachments() throws Exception {\n \tpublic void marshalAWrappedObjectHoldingAnXmlElementDeclElement() throws Exception {\n \t\t// SPR-10714\n \t\tmarshaller = new Jaxb2Marshaller();\n-\t\tmarshaller.setPackagesToScan(new String[] { \"org.springframework.oxm.jaxb\" });\n+\t\tmarshaller.setPackagesToScan(new String[]{\"org.springframework.oxm.jaxb\"});\n \t\tmarshaller.afterPropertiesSet();\n \t\tAirplane airplane = new Airplane();\n \t\tairplane.setName(\"test\");\n@@ -300,6 +301,75 @@ public void marshalAWrappedObjectHoldingAnXmlElementDeclElement() throws Excepti\n \t\t\t\twriter.toString(), \"<airplane><name>test</name></airplane>\");\n \t}\n \n+\t// SPR-10806\n+\n+\t@Test\n+\tpublic void unmarshalStreamSourceExternalEntities() throws Exception {\n+\n+\t\tfinal javax.xml.bind.Unmarshaller unmarshaller = mock(javax.xml.bind.Unmarshaller.class);\n+\t\tJaxb2Marshaller marshaller = new Jaxb2Marshaller() {\n+\t\t\t@Override\n+\t\t\tprotected javax.xml.bind.Unmarshaller createUnmarshaller() {\n+\t\t\t\treturn unmarshaller;\n+\t\t\t}\n+\t\t};\n+\n+\t\t// 1. external-general-entities disabled (default)\n+\n+\t\tmarshaller.unmarshal(new StreamSource(\"1\"));\n+\t\tArgumentCaptor<SAXSource> sourceCaptor = ArgumentCaptor.forClass(SAXSource.class);\n+\t\tverify(unmarshaller).unmarshal(sourceCaptor.capture());\n+\n+\t\tSAXSource result = sourceCaptor.getValue();\n+\t\tassertEquals(false, result.getXMLReader().getFeature(\"http://xml.org/sax/features/external-general-entities\"));\n+\n+\t\t// 2. external-general-entities enabled\n+\n+\t\treset(unmarshaller);\n+\t\tmarshaller.setProcessExternalEntities(true);\n+\n+\t\tmarshaller.unmarshal(new StreamSource(\"1\"));\n+\t\tverify(unmarshaller).unmarshal(sourceCaptor.capture());\n+\n+\t\tresult = sourceCaptor.getValue();\n+\t\tassertEquals(true, result.getXMLReader().getFeature(\"http://xml.org/sax/features/external-general-entities\"));\n+\t}\n+\n+\t// SPR-10806\n+\n+\t@Test\n+\tpublic void unmarshalSaxSourceExternalEntities() throws Exception {\n+\n+\t\tfinal javax.xml.bind.Unmarshaller unmarshaller = mock(javax.xml.bind.Unmarshaller.class);\n+\t\tJaxb2Marshaller marshaller = new Jaxb2Marshaller() {\n+\t\t\t@Override\n+\t\t\tprotected javax.xml.bind.Unmarshaller createUnmarshaller() {\n+\t\t\t\treturn unmarshaller;\n+\t\t\t}\n+\t\t};\n+\n+\t\t// 1. external-general-entities disabled (default)\n+\n+\t\tmarshaller.unmarshal(new SAXSource(new InputSource(\"1\")));\n+\t\tArgumentCaptor<SAXSource> sourceCaptor = ArgumentCaptor.forClass(SAXSource.class);\n+\t\tverify(unmarshaller).unmarshal(sourceCaptor.capture());\n+\n+\t\tSAXSource result = sourceCaptor.getValue();\n+\t\tassertEquals(false, result.getXMLReader().getFeature(\"http://xml.org/sax/features/external-general-entities\"));\n+\n+\t\t// 2. external-general-entities enabled\n+\n+\t\treset(unmarshaller);\n+\t\tmarshaller.setProcessExternalEntities(true);\n+\n+\t\tmarshaller.unmarshal(new SAXSource(new InputSource(\"1\")));\n+\t\tverify(unmarshaller).unmarshal(sourceCaptor.capture());\n+\n+\t\tresult = sourceCaptor.getValue();\n+\t\tassertEquals(true, result.getXMLReader().getFeature(\"http://xml.org/sax/features/external-general-entities\"));\n+\t}\n+\n+\n \t@XmlRootElement\n \t@SuppressWarnings(\"unused\")\n \tpublic static class DummyRootElement {"
        },
        {
            "sha": "f7d26afb31f37910ec75a0b01866a5ccab6c0dda",
            "filename": "spring-oxm/src/test/java/org/springframework/oxm/jibx/JibxMarshallerTests.java",
            "status": "modified",
            "additions": 13,
            "deletions": 1,
            "changes": 14,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/edba32b3093703d5e9ed42b5b8ec23ecc1998398/spring-oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxMarshallerTests.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/edba32b3093703d5e9ed42b5b8ec23ecc1998398/spring-oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxMarshallerTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxMarshallerTests.java?ref=edba32b3093703d5e9ed42b5b8ec23ecc1998398",
            "patch": "@@ -16,21 +16,34 @@\n \n package org.springframework.oxm.jibx;\n \n+import java.io.IOException;\n import java.io.StringWriter;\n+import java.util.concurrent.atomic.AtomicReference;\n+import javax.xml.transform.sax.SAXSource;\n import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n \n import org.custommonkey.xmlunit.XMLUnit;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n+import org.mockito.ArgumentCaptor;\n import org.springframework.oxm.AbstractMarshallerTests;\n import org.springframework.oxm.Marshaller;\n+import org.springframework.oxm.XmlMappingException;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n import org.springframework.tests.Assume;\n import org.springframework.tests.TestGroup;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.XMLReader;\n \n import static org.custommonkey.xmlunit.XMLAssert.*;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.verify;\n \n /**\n  * @author Arjen Poutsma\n@@ -107,5 +120,4 @@ public void testSupports() throws Exception {\n \t\tassertFalse(\"JibxMarshaller supports illegal type\", marshaller.supports(getClass()));\n \t}\n \n-\n }"
        },
        {
            "sha": "5ceeab22acee5347084235e85a06eee25b39adac",
            "filename": "spring-oxm/src/test/java/org/springframework/oxm/jibx/JibxUnmarshallerTests.java",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/edba32b3093703d5e9ed42b5b8ec23ecc1998398/spring-oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxUnmarshallerTests.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/edba32b3093703d5e9ed42b5b8ec23ecc1998398/spring-oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxUnmarshallerTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxUnmarshallerTests.java?ref=edba32b3093703d5e9ed42b5b8ec23ecc1998398",
            "patch": "@@ -28,7 +28,9 @@\n import org.springframework.tests.Assume;\n import org.springframework.tests.TestGroup;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n \n /**\n  * @author Arjen Poutsma"
        },
        {
            "sha": "ad8d7d90b10529f8f340ceaefa838951b5e9b5fc",
            "filename": "spring-web/src/main/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverter.java",
            "status": "modified",
            "additions": 41,
            "deletions": 1,
            "changes": 42,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/edba32b3093703d5e9ed42b5b8ec23ecc1998398/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fconverter%2Fxml%2FJaxb2RootElementHttpMessageConverter.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/edba32b3093703d5e9ed42b5b8ec23ecc1998398/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fconverter%2Fxml%2FJaxb2RootElementHttpMessageConverter.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fconverter%2Fxml%2FJaxb2RootElementHttpMessageConverter.java?ref=edba32b3093703d5e9ed42b5b8ec23ecc1998398",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2010 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -28,6 +28,9 @@\n import javax.xml.bind.annotation.XmlType;\n import javax.xml.transform.Result;\n import javax.xml.transform.Source;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.sax.SAXSource;\n+import javax.xml.transform.stream.StreamSource;\n \n import org.springframework.core.annotation.AnnotationUtils;\n import org.springframework.http.HttpHeaders;\n@@ -36,6 +39,11 @@\n import org.springframework.http.converter.HttpMessageNotReadableException;\n import org.springframework.http.converter.HttpMessageNotWritableException;\n import org.springframework.util.ClassUtils;\n+import org.springframework.util.xml.StaxUtils;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.XMLReaderFactory;\n \n /**\n  * Implementation of {@link org.springframework.http.converter.HttpMessageConverter HttpMessageConverter} that can read\n@@ -49,6 +57,17 @@\n  */\n public class Jaxb2RootElementHttpMessageConverter extends AbstractJaxb2HttpMessageConverter<Object> {\n \n+\tprivate boolean processExternalEntities = false;\n+\n+\n+\t/**\n+\t * Indicates whether external XML entities are processed when converting to a Source.\n+\t * <p>Default is {@code false}, meaning that external entities are not resolved.\n+\t */\n+\tpublic void setProcessExternalEntities(boolean processExternalEntities) {\n+\t\tthis.processExternalEntities = processExternalEntities;\n+\t}\n+\n \t@Override\n \tpublic boolean canRead(Class<?> clazz, MediaType mediaType) {\n \t\treturn (clazz.isAnnotationPresent(XmlRootElement.class) || clazz.isAnnotationPresent(XmlType.class)) &&\n@@ -69,6 +88,7 @@ protected boolean supports(Class<?> clazz) {\n \t@Override\n \tprotected Object readFromSource(Class<?> clazz, HttpHeaders headers, Source source) throws IOException {\n \t\ttry {\n+\t\t\tsource = processSource(source);\n \t\t\tUnmarshaller unmarshaller = createUnmarshaller(clazz);\n \t\t\tif (clazz.isAnnotationPresent(XmlRootElement.class)) {\n \t\t\t\treturn unmarshaller.unmarshal(source);\n@@ -87,6 +107,26 @@ protected Object readFromSource(Class<?> clazz, HttpHeaders headers, Source sour\n \t\t}\n \t}\n \n+\tprotected Source processSource(Source source) {\n+\t\tif (source instanceof StreamSource) {\n+\t\t\tStreamSource streamSource = (StreamSource) source;\n+\t\t\tInputSource inputSource = new InputSource(streamSource.getInputStream());\n+\t\t\ttry {\n+\t\t\t\tXMLReader xmlReader = XMLReaderFactory.createXMLReader();\n+\t\t\t\tString featureName = \"http://xml.org/sax/features/external-general-entities\";\n+\t\t\t\txmlReader.setFeature(featureName, this.processExternalEntities);\n+\t\t\t\treturn new SAXSource(xmlReader, inputSource);\n+\t\t\t}\n+\t\t\tcatch (SAXException ex) {\n+\t\t\t\tlogger.warn(\"Processing of external entities could not be disabled\", ex);\n+\t\t\t\treturn source;\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\treturn source;\n+\t\t}\n+\t}\n+\n \t@Override\n \tprotected void writeToResult(Object o, HttpHeaders headers, Result result) throws IOException {\n \t\ttry {"
        },
        {
            "sha": "ec7daec5fc229d7adc8e5ebd57936156be776444",
            "filename": "spring-web/src/main/java/org/springframework/http/converter/xml/SourceHttpMessageConverter.java",
            "status": "modified",
            "additions": 7,
            "deletions": 2,
            "changes": 9,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/edba32b3093703d5e9ed42b5b8ec23ecc1998398/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fconverter%2Fxml%2FSourceHttpMessageConverter.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/edba32b3093703d5e9ed42b5b8ec23ecc1998398/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fconverter%2Fxml%2FSourceHttpMessageConverter.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fconverter%2Fxml%2FSourceHttpMessageConverter.java?ref=edba32b3093703d5e9ed42b5b8ec23ecc1998398",
            "patch": "@@ -95,6 +95,12 @@ public void setProcessExternalEntities(boolean processExternalEntities) {\n \t\tthis.processExternalEntities = processExternalEntities;\n \t}\n \n+\t/**\n+\t * @return the configured value for whether XML external entities are allowed.\n+\t */\n+\tpublic boolean isProcessExternalEntities() {\n+\t\treturn this.processExternalEntities;\n+\t}\n \n \t@Override\n \tpublic boolean supports(Class<?> clazz) {\n@@ -159,8 +165,7 @@ private SAXSource readSAXSource(InputStream body) throws IOException {\n \tprivate Source readStAXSource(InputStream body) {\n \t\ttry {\n \t\t\tXMLInputFactory inputFactory = XMLInputFactory.newFactory();\n-\t\t\tinputFactory.setProperty(\n-\t\t\t\t\t\"javax.xml.stream.isSupportingExternalEntities\", this.processExternalEntities);\n+\t\t\tinputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, this.processExternalEntities);\n \t\t\tXMLStreamReader streamReader = inputFactory.createXMLStreamReader(body);\n \t\t\treturn new StAXSource(streamReader);\n \t\t}"
        },
        {
            "sha": "fe1e39283deee594ef3809f75b2ffec58eac388c",
            "filename": "spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverterTests.java",
            "status": "modified",
            "additions": 34,
            "deletions": 0,
            "changes": 34,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/edba32b3093703d5e9ed42b5b8ec23ecc1998398/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fconverter%2Fxml%2FJaxb2RootElementHttpMessageConverterTests.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/edba32b3093703d5e9ed42b5b8ec23ecc1998398/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fconverter%2Fxml%2FJaxb2RootElementHttpMessageConverterTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fconverter%2Fxml%2FJaxb2RootElementHttpMessageConverterTests.java?ref=edba32b3093703d5e9ed42b5b8ec23ecc1998398",
            "patch": "@@ -32,9 +32,13 @@\n import org.springframework.aop.framework.AdvisedSupport;\n import org.springframework.aop.framework.AopProxy;\n import org.springframework.aop.framework.DefaultAopProxyFactory;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n import org.springframework.http.MediaType;\n import org.springframework.http.MockHttpInputMessage;\n import org.springframework.http.MockHttpOutputMessage;\n+import org.springframework.http.converter.HttpMessageNotReadableException;\n+import org.xml.sax.SAXParseException;\n \n /** @author Arjen Poutsma */\n public class Jaxb2RootElementHttpMessageConverterTests {\n@@ -95,6 +99,33 @@ public void readXmlType() throws Exception {\n \t\tassertEquals(\"Invalid result\", \"Hello World\", result.s);\n \t}\n \n+\t@Test\n+\tpublic void readXmlRootElementExternalEntityDisabled() throws Exception {\n+\t\tResource external = new ClassPathResource(\"external.txt\", getClass());\n+\t\tString content =  \"<!DOCTYPE root [\" +\n+\t\t\t\t\"  <!ELEMENT external ANY >\\n\" +\n+\t\t\t\t\"  <!ENTITY ext SYSTEM \\\"\" + external.getURI() + \"\\\" >]>\" +\n+\t\t\t\t\"  <rootElement><external>&ext;</external></rootElement>\";\n+\t\tMockHttpInputMessage inputMessage = new MockHttpInputMessage(content.getBytes(\"UTF-8\"));\n+\t\tRootElement rootElement = (RootElement) converter.read(RootElement.class, inputMessage);\n+\n+\t\tassertEquals(\"\", rootElement.external);\n+\t}\n+\n+\t@Test\n+\tpublic void readXmlRootElementExternalEntityEnabled() throws Exception {\n+\t\tResource external = new ClassPathResource(\"external.txt\", getClass());\n+\t\tString content =  \"<!DOCTYPE root [\" +\n+\t\t\t\t\"  <!ELEMENT external ANY >\\n\" +\n+\t\t\t\t\"  <!ENTITY ext SYSTEM \\\"\" + external.getURI() + \"\\\" >]>\" +\n+\t\t\t\t\"  <rootElement><external>&ext;</external></rootElement>\";\n+\t\tMockHttpInputMessage inputMessage = new MockHttpInputMessage(content.getBytes(\"UTF-8\"));\n+\t\tthis.converter.setProcessExternalEntities(true);\n+\t\tRootElement rootElement = (RootElement) converter.read(RootElement.class, inputMessage);\n+\n+\t\tassertEquals(\"Foo Bar\", rootElement.external);\n+\t}\n+\n \t@Test\n \tpublic void writeXmlRootElement() throws Exception {\n \t\tMockHttpOutputMessage outputMessage = new MockHttpOutputMessage();\n@@ -120,6 +151,9 @@ public static class RootElement {\n \n \t\tprivate Type type = new Type();\n \n+\t\t@XmlElement(required=false)\n+\t\tpublic String external;\n+\n \t\tpublic Type getType() {\n \t\t\treturn this.type;\n \t\t}"
        }
    ]
}