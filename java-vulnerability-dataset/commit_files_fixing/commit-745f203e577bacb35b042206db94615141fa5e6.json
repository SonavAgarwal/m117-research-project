{
    "sha": "745f203e577bacb35b042206db94615141fa5e6f",
    "node_id": "MDY6Q29tbWl0MjM0MTg1MTc6NzQ1ZjIwM2U1NzdiYWNiMzViMDQyMjA2ZGI5NDYxNTE0MWZhNWU2Zg==",
    "commit": {
        "author": {
            "name": "Akira Ajisaka",
            "email": "aajisaka@apache.org",
            "date": "2018-05-23T08:15:57Z"
        },
        "committer": {
            "name": "Akira Ajisaka",
            "email": "aajisaka@apache.org",
            "date": "2018-05-23T08:16:23Z"
        },
        "message": "Additional check when unpacking archives. Contributed by Jason Lowe and Akira Ajisaka.",
        "tree": {
            "sha": "2ee477651c4ed4de7ed6713fabab586fc80e4a9e",
            "url": "https://api.github.com/repos/apache/hadoop/git/trees/2ee477651c4ed4de7ed6713fabab586fc80e4a9e"
        },
        "url": "https://api.github.com/repos/apache/hadoop/git/commits/745f203e577bacb35b042206db94615141fa5e6f",
        "comment_count": 0,
        "verification": {
            "verified": true,
            "reason": "valid",
            "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJIBAABCgAyFiEE8F32UAoCGSJ7VmmQwe27nKQA/VAFAlsFI18UHGFhamlzYWth\nQGFwYWNoZS5vcmcACgkQwe27nKQA/VD69RAAkh0nRaKFeB4FewxfF5TTGua9A/PC\n1+0EZ8DVrZrityEyqsLW1zOvC4Szy3zgEVKqc6vX/JA79g7WYULve+On1CcuzoE9\nVlBDnl/gJQx2z7HXEIUtZIp4RC6uoCMjkWy7YlMsPPXr8dRiiiOdr7aJmTxT4oWr\nxS3beVDeep7WxAJAoIdnKYorzaQu1xEp9KNgtrVoZFeVtd1Qp5wTPF6V9HQrJDTQ\ns6GpxV5GB+GZBXF6U27RsGZj/jYZFXDif5auPgLkgaglk2uThQRcZNB0TnP2p1tM\n42pkGlSE1bTtdtwxCDh9QQvqowBZnQ7sosos1FnGTNaAiuPdNnnjqw3nnAxy4qgx\n9D36FiO79iTP/rdl7a2AZ8bwZ0mhlSsh/2JueBll+Q5+FZyM50fVARw4Jq1cpnA0\nqZXmHFDKvtmV1Osh1j3dE9bj2dX8bp7tx1PHs2nLhL3OsJsvDz9+eYifFqvDdlyw\nNFesPpAyiIQ3Cc4NCZ4bgSzr87cG59QBlzhRJWpScIgPh8ROBLb4F32Wu3kidlSs\nsj/Z8YA5CG0yVsue+/MAVlF8cUPPRqu/1DqsGhR3tredON8pNjVYA71YNmYsNKPw\noU7A1okBSD4UrUklGmMKWXT14EEmzBqHuCfkz/R8gTdM+0XQzgcA961oVFAF3+Yf\nfeaY4CIDrA2RTbo=\n=RDiu\n-----END PGP SIGNATURE-----",
            "payload": "tree 2ee477651c4ed4de7ed6713fabab586fc80e4a9e\nparent 1d2640b6132e8308c07476badd2d1482be68a298\nauthor Akira Ajisaka <aajisaka@apache.org> 1527063357 +0900\ncommitter Akira Ajisaka <aajisaka@apache.org> 1527063383 +0900\n\nAdditional check when unpacking archives. Contributed by Jason Lowe and Akira Ajisaka.\n",
            "verified_at": "2024-11-07T02:53:59Z"
        }
    },
    "url": "https://api.github.com/repos/apache/hadoop/commits/745f203e577bacb35b042206db94615141fa5e6f",
    "html_url": "https://github.com/apache/hadoop/commit/745f203e577bacb35b042206db94615141fa5e6f",
    "comments_url": "https://api.github.com/repos/apache/hadoop/commits/745f203e577bacb35b042206db94615141fa5e6f/comments",
    "author": {
        "login": "aajisaka",
        "id": 3403122,
        "node_id": "MDQ6VXNlcjM0MDMxMjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3403122?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aajisaka",
        "html_url": "https://github.com/aajisaka",
        "followers_url": "https://api.github.com/users/aajisaka/followers",
        "following_url": "https://api.github.com/users/aajisaka/following{/other_user}",
        "gists_url": "https://api.github.com/users/aajisaka/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aajisaka/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aajisaka/subscriptions",
        "organizations_url": "https://api.github.com/users/aajisaka/orgs",
        "repos_url": "https://api.github.com/users/aajisaka/repos",
        "events_url": "https://api.github.com/users/aajisaka/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aajisaka/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "aajisaka",
        "id": 3403122,
        "node_id": "MDQ6VXNlcjM0MDMxMjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3403122?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aajisaka",
        "html_url": "https://github.com/aajisaka",
        "followers_url": "https://api.github.com/users/aajisaka/followers",
        "following_url": "https://api.github.com/users/aajisaka/following{/other_user}",
        "gists_url": "https://api.github.com/users/aajisaka/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aajisaka/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aajisaka/subscriptions",
        "organizations_url": "https://api.github.com/users/aajisaka/orgs",
        "repos_url": "https://api.github.com/users/aajisaka/repos",
        "events_url": "https://api.github.com/users/aajisaka/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aajisaka/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "1d2640b6132e8308c07476badd2d1482be68a298",
            "url": "https://api.github.com/repos/apache/hadoop/commits/1d2640b6132e8308c07476badd2d1482be68a298",
            "html_url": "https://github.com/apache/hadoop/commit/1d2640b6132e8308c07476badd2d1482be68a298"
        }
    ],
    "stats": {
        "total": 58,
        "additions": 51,
        "deletions": 7
    },
    "files": [
        {
            "sha": "5ef78f2f6a091b231d52f0c64385e7546272e516",
            "filename": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
            "status": "modified",
            "additions": 17,
            "deletions": 1,
            "changes": 18,
            "blob_url": "https://github.com/apache/hadoop/blob/745f203e577bacb35b042206db94615141fa5e6f/hadoop-common-project%2Fhadoop-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fhadoop%2Ffs%2FFileUtil.java",
            "raw_url": "https://github.com/apache/hadoop/raw/745f203e577bacb35b042206db94615141fa5e6f/hadoop-common-project%2Fhadoop-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fhadoop%2Ffs%2FFileUtil.java",
            "contents_url": "https://api.github.com/repos/apache/hadoop/contents/hadoop-common-project%2Fhadoop-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fhadoop%2Ffs%2FFileUtil.java?ref=745f203e577bacb35b042206db94615141fa5e6f",
            "patch": "@@ -617,11 +617,16 @@ public static void unZip(InputStream inputStream, File toDir)\n       throws IOException {\n     try (ZipInputStream zip = new ZipInputStream(inputStream)) {\n       int numOfFailedLastModifiedSet = 0;\n+      String targetDirPath = toDir.getCanonicalPath() + File.separator;\n       for(ZipEntry entry = zip.getNextEntry();\n           entry != null;\n           entry = zip.getNextEntry()) {\n         if (!entry.isDirectory()) {\n           File file = new File(toDir, entry.getName());\n+          if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n+            throw new IOException(\"expanding \" + entry.getName()\n+                + \" would create file outside of \" + toDir);\n+          }\n           File parent = file.getParentFile();\n           if (!parent.mkdirs() &&\n               !parent.isDirectory()) {\n@@ -656,12 +661,17 @@ public static void unZip(File inFile, File unzipDir) throws IOException {\n \n     try {\n       entries = zipFile.entries();\n+      String targetDirPath = unzipDir.getCanonicalPath() + File.separator;\n       while (entries.hasMoreElements()) {\n         ZipEntry entry = entries.nextElement();\n         if (!entry.isDirectory()) {\n           InputStream in = zipFile.getInputStream(entry);\n           try {\n             File file = new File(unzipDir, entry.getName());\n+            if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n+              throw new IOException(\"expanding \" + entry.getName()\n+                  + \" would create file outside of \" + unzipDir);\n+            }\n             if (!file.getParentFile().mkdirs()) {\n               if (!file.getParentFile().isDirectory()) {\n                 throw new IOException(\"Mkdirs failed to create \" +\n@@ -944,6 +954,13 @@ private static void unTarUsingJava(InputStream inputStream, File untarDir,\n \n   private static void unpackEntries(TarArchiveInputStream tis,\n       TarArchiveEntry entry, File outputDir) throws IOException {\n+    String targetDirPath = outputDir.getCanonicalPath() + File.separator;\n+    File outputFile = new File(outputDir, entry.getName());\n+    if (!outputFile.getCanonicalPath().startsWith(targetDirPath)) {\n+      throw new IOException(\"expanding \" + entry.getName()\n+          + \" would create entry outside of \" + outputDir);\n+    }\n+\n     if (entry.isDirectory()) {\n       File subDir = new File(outputDir, entry.getName());\n       if (!subDir.mkdirs() && !subDir.isDirectory()) {\n@@ -966,7 +983,6 @@ private static void unpackEntries(TarArchiveInputStream tis,\n       return;\n     }\n \n-    File outputFile = new File(outputDir, entry.getName());\n     if (!outputFile.getParentFile().exists()) {\n       if (!outputFile.getParentFile().mkdirs()) {\n         throw new IOException(\"Mkdirs failed to create tar internal dir \""
        },
        {
            "sha": "7218a1bd221021debb49aa3bebffc7825b6e843e",
            "filename": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java",
            "status": "modified",
            "additions": 34,
            "deletions": 6,
            "changes": 40,
            "blob_url": "https://github.com/apache/hadoop/blob/745f203e577bacb35b042206db94615141fa5e6f/hadoop-common-project%2Fhadoop-common%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fhadoop%2Ffs%2FTestFileUtil.java",
            "raw_url": "https://github.com/apache/hadoop/raw/745f203e577bacb35b042206db94615141fa5e6f/hadoop-common-project%2Fhadoop-common%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fhadoop%2Ffs%2FTestFileUtil.java",
            "contents_url": "https://api.github.com/repos/apache/hadoop/contents/hadoop-common-project%2Fhadoop-common%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fhadoop%2Ffs%2FTestFileUtil.java?ref=745f203e577bacb35b042206db94615141fa5e6f",
            "patch": "@@ -23,6 +23,7 @@\n import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n@@ -38,6 +39,7 @@\n import java.net.URISyntaxException;\n import java.net.URL;\n import java.net.UnknownHostException;\n+import java.nio.charset.StandardCharsets;\n import java.nio.file.FileSystems;\n import java.nio.file.Files;\n import java.util.ArrayList;\n@@ -685,10 +687,8 @@ public void testCreateLocalTempFile() throws IOException {\n   \n   @Test (timeout = 30000)\n   public void testUnZip() throws IOException {\n-    // make sa simple zip\n     setupDirs();\n-    \n-    // make a simple tar:\n+    // make a simple zip\n     final File simpleZip = new File(del, FILE);\n     OutputStream os = new FileOutputStream(simpleZip); \n     ZipOutputStream tos = new ZipOutputStream(os);\n@@ -705,7 +705,7 @@ public void testUnZip() throws IOException {\n       tos.close();\n     }\n     \n-    // successfully untar it into an existing dir:\n+    // successfully unzip it into an existing dir:\n     FileUtil.unZip(simpleZip, tmp);\n     // check result:\n     assertTrue(new File(tmp, \"foo\").exists());\n@@ -720,8 +720,36 @@ public void testUnZip() throws IOException {\n     } catch (IOException ioe) {\n       // okay\n     }\n-  }  \n-  \n+  }\n+\n+  @Test (timeout = 30000)\n+  public void testUnZip2() throws IOException {\n+    setupDirs();\n+    // make a simple zip\n+    final File simpleZip = new File(del, FILE);\n+    OutputStream os = new FileOutputStream(simpleZip);\n+    try (ZipOutputStream tos = new ZipOutputStream(os)) {\n+      // Add an entry that contains invalid filename\n+      ZipEntry ze = new ZipEntry(\"../foo\");\n+      byte[] data = \"some-content\".getBytes(StandardCharsets.UTF_8);\n+      ze.setSize(data.length);\n+      tos.putNextEntry(ze);\n+      tos.write(data);\n+      tos.closeEntry();\n+      tos.flush();\n+      tos.finish();\n+    }\n+\n+    // Unzip it into an existing dir\n+    try {\n+      FileUtil.unZip(simpleZip, tmp);\n+      fail(\"unZip should throw IOException.\");\n+    } catch (IOException e) {\n+      GenericTestUtils.assertExceptionContains(\n+          \"would create file outside of\", e);\n+    }\n+  }\n+\n   @Test (timeout = 30000)\n   /*\n    * Test method copy(FileSystem srcFS, Path src, File dst, boolean deleteSource, Configuration conf)"
        }
    ]
}