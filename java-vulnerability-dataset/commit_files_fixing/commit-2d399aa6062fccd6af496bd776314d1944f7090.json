{
    "sha": "2d399aa6062fccd6af496bd776314d1944f7090f",
    "node_id": "MDY6Q29tbWl0MjA2MzE3OjJkMzk5YWE2MDYyZmNjZDZhZjQ5NmJkNzc2MzE0ZDE5NDRmNzA5MGY=",
    "commit": {
        "author": {
            "name": "Claus Ibsen",
            "email": "claus.ibsen@gmail.com",
            "date": "2019-01-09T09:37:33Z"
        },
        "committer": {
            "name": "Claus Ibsen",
            "email": "claus.ibsen@gmail.com",
            "date": "2019-01-11T10:26:23Z"
        },
        "message": "CAMEL-13042: File producer should by default only allow to write file\u2026 (#2700)\n\n* CAMEL-13042: File producer should by default only allow to write files in the starting directory (or subs). Added new option to turn this on|off.\n\n* CAMEL-13042: Regen docs\n\n* CAMEL-13042: Polished",
        "tree": {
            "sha": "60676e7ed5f1eb059824f9cf0c798471b994b958",
            "url": "https://api.github.com/repos/apache/camel/git/trees/60676e7ed5f1eb059824f9cf0c798471b994b958"
        },
        "url": "https://api.github.com/repos/apache/camel/git/commits/2d399aa6062fccd6af496bd776314d1944f7090f",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/camel/commits/2d399aa6062fccd6af496bd776314d1944f7090f",
    "html_url": "https://github.com/apache/camel/commit/2d399aa6062fccd6af496bd776314d1944f7090f",
    "comments_url": "https://api.github.com/repos/apache/camel/commits/2d399aa6062fccd6af496bd776314d1944f7090f/comments",
    "author": {
        "login": "davsclaus",
        "id": 477100,
        "node_id": "MDQ6VXNlcjQ3NzEwMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/477100?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davsclaus",
        "html_url": "https://github.com/davsclaus",
        "followers_url": "https://api.github.com/users/davsclaus/followers",
        "following_url": "https://api.github.com/users/davsclaus/following{/other_user}",
        "gists_url": "https://api.github.com/users/davsclaus/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/davsclaus/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/davsclaus/subscriptions",
        "organizations_url": "https://api.github.com/users/davsclaus/orgs",
        "repos_url": "https://api.github.com/users/davsclaus/repos",
        "events_url": "https://api.github.com/users/davsclaus/events{/privacy}",
        "received_events_url": "https://api.github.com/users/davsclaus/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "davsclaus",
        "id": 477100,
        "node_id": "MDQ6VXNlcjQ3NzEwMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/477100?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davsclaus",
        "html_url": "https://github.com/davsclaus",
        "followers_url": "https://api.github.com/users/davsclaus/followers",
        "following_url": "https://api.github.com/users/davsclaus/following{/other_user}",
        "gists_url": "https://api.github.com/users/davsclaus/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/davsclaus/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/davsclaus/subscriptions",
        "organizations_url": "https://api.github.com/users/davsclaus/orgs",
        "repos_url": "https://api.github.com/users/davsclaus/repos",
        "events_url": "https://api.github.com/users/davsclaus/events{/privacy}",
        "received_events_url": "https://api.github.com/users/davsclaus/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "57b28652687305ce12e93c89d107926b61cba3ca",
            "url": "https://api.github.com/repos/apache/camel/commits/57b28652687305ce12e93c89d107926b61cba3ca",
            "html_url": "https://github.com/apache/camel/commit/57b28652687305ce12e93c89d107926b61cba3ca"
        }
    ],
    "stats": {
        "total": 172,
        "additions": 169,
        "deletions": 3
    },
    "files": [
        {
            "sha": "defd47400d97f91fe608b8dc90b04ff5ffac898c",
            "filename": "camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java",
            "status": "modified",
            "additions": 15,
            "deletions": 0,
            "changes": 15,
            "blob_url": "https://github.com/apache/camel/blob/2d399aa6062fccd6af496bd776314d1944f7090f/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FGenericFileEndpoint.java",
            "raw_url": "https://github.com/apache/camel/raw/2d399aa6062fccd6af496bd776314d1944f7090f/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FGenericFileEndpoint.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FGenericFileEndpoint.java?ref=2d399aa6062fccd6af496bd776314d1944f7090f",
            "patch": "@@ -92,6 +92,8 @@ public abstract class GenericFileEndpoint<T> extends ScheduledPollEndpoint imple\n     protected boolean keepLastModified;\n     @UriParam(label = \"producer,advanced\")\n     protected boolean allowNullBody;\n+    @UriParam(label = \"producer\", defaultValue = \"true\")\n+    protected boolean jailStartingDirectory = true;\n \n     // consumer options\n \n@@ -1235,6 +1237,19 @@ public void setAllowNullBody(boolean allowNullBody) {\n         this.allowNullBody = allowNullBody;\n     }\n \n+    public boolean isJailStartingDirectory() {\n+        return jailStartingDirectory;\n+    }\n+\n+    /**\n+     * Used for jailing (restricting) writing files to the starting directory (and sub) only.\n+     * This is enabled by default to not allow Camel to write files to outside directories (to be more secured out of the box).\n+     * You can turn this off to allow writing files to directories outside the starting directory, such as parent or root folders.\n+     */\n+    public void setJailStartingDirectory(boolean jailStartingDirectory) {\n+        this.jailStartingDirectory = jailStartingDirectory;\n+    }\n+\n     public ExceptionHandler getOnCompletionExceptionHandler() {\n         return onCompletionExceptionHandler;\n     }"
        },
        {
            "sha": "7cd2b6675fbda7496fb93874b86eb38ce7bca5c0",
            "filename": "camel-core/src/main/java/org/apache/camel/component/file/GenericFileProducer.java",
            "status": "modified",
            "additions": 11,
            "deletions": 1,
            "changes": 12,
            "blob_url": "https://github.com/apache/camel/blob/2d399aa6062fccd6af496bd776314d1944f7090f/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FGenericFileProducer.java",
            "raw_url": "https://github.com/apache/camel/raw/2d399aa6062fccd6af496bd776314d1944f7090f/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FGenericFileProducer.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FGenericFileProducer.java?ref=2d399aa6062fccd6af496bd776314d1944f7090f",
            "patch": "@@ -20,6 +20,7 @@\n import java.util.concurrent.locks.Lock;\n import java.util.concurrent.locks.ReentrantLock;\n \n+import org.apache.camel.CamelExchangeException;\n import org.apache.camel.Exchange;\n import org.apache.camel.Expression;\n import org.apache.camel.impl.DefaultExchange;\n@@ -331,7 +332,7 @@ public String createFileName(Exchange exchange) {\n             exchange.getIn().setHeader(Exchange.FILE_NAME, value);\n         }\n \n-        if (value != null && value instanceof String && StringHelper.hasStartToken((String) value, \"simple\")) {\n+        if (value instanceof String && StringHelper.hasStartToken((String) value, \"simple\")) {\n             log.warn(\"Simple expression: {} detected in header: {} of type String. This feature has been removed (see CAMEL-6748).\", value, Exchange.FILE_NAME);\n         }\n \n@@ -378,6 +379,15 @@ public String createFileName(Exchange exchange) {\n             answer = baseDir + endpoint.getGeneratedFileName(exchange.getIn());\n         }\n \n+        if (endpoint.isJailStartingDirectory()) {\n+            // check for file must be within starting directory (need to compact first as the name can be using relative paths via ../ etc)\n+            String compatchAnswer = FileUtil.compactPath(answer);\n+            String compatchBaseDir = FileUtil.compactPath(baseDir);\n+            if (!compatchAnswer.startsWith(compatchBaseDir)) {\n+                throw new IllegalArgumentException(\"Cannot write file with name: \" + compatchAnswer + \" as the filename is jailed to the starting directory: \" + compatchBaseDir);\n+            }\n+        }\n+\n         if (endpoint.getConfiguration().needToNormalize()) {\n             // must normalize path to cater for Windows and other OS\n             answer = normalizePath(answer);"
        },
        {
            "sha": "b56f4199db62e4ac406cb44cca7bacbfb1cd8861",
            "filename": "camel-core/src/test/java/org/apache/camel/component/file/FileProducerExpressionTest.java",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/apache/camel/blob/2d399aa6062fccd6af496bd776314d1944f7090f/camel-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FFileProducerExpressionTest.java",
            "raw_url": "https://github.com/apache/camel/raw/2d399aa6062fccd6af496bd776314d1944f7090f/camel-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FFileProducerExpressionTest.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FFileProducerExpressionTest.java?ref=2d399aa6062fccd6af496bd776314d1944f7090f",
            "patch": "@@ -74,7 +74,7 @@ public void testProducerDateByExpression() throws Exception {\n \n     public void testProducerComplexByExpression() throws Exception {\n         String expression = \"../filelanguageinbox/myfile-${bean:myguidgenerator.guid}-${date:now:yyyyMMdd}.txt\";\n-        template.sendBody(\"file://target/filelanguage?fileName=\" + expression, \"Hello World\");\n+        template.sendBody(\"file://target/filelanguage?jailStartingDirectory=false&fileName=\" + expression, \"Hello World\");\n \n         String date = new SimpleDateFormat(\"yyyyMMdd\").format(new Date());\n         assertFileExists(\"target/filelanguageinbox/myfile-123-\" + date + \".txt\");"
        },
        {
            "sha": "becbf18579659f763e954fc4abd8d42b2e1fb445",
            "filename": "camel-core/src/test/java/org/apache/camel/component/file/FileProducerJailStartingDirectoryTest.java",
            "status": "added",
            "additions": 73,
            "deletions": 0,
            "changes": 73,
            "blob_url": "https://github.com/apache/camel/blob/2d399aa6062fccd6af496bd776314d1944f7090f/camel-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FFileProducerJailStartingDirectoryTest.java",
            "raw_url": "https://github.com/apache/camel/raw/2d399aa6062fccd6af496bd776314d1944f7090f/camel-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FFileProducerJailStartingDirectoryTest.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FFileProducerJailStartingDirectoryTest.java?ref=2d399aa6062fccd6af496bd776314d1944f7090f",
            "patch": "@@ -0,0 +1,73 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.file;\n+\n+import org.apache.camel.ContextTestSupport;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class FileProducerJailStartingDirectoryTest extends ContextTestSupport {\n+\n+    @Override\n+    @Before\n+    public void setUp() throws Exception {\n+        deleteDirectory(\"target/jail\");\n+        super.setUp();\n+    }\n+\n+    @Test\n+    public void testWriteOutsideStartingDirectory() throws Exception {\n+        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n+        mock.expectedMessageCount(0);\n+\n+        try {\n+            template.sendBodyAndHeader(\"direct:start\", \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n+            fail(\"Should have thrown exception\");\n+        } catch (Exception e) {\n+            IllegalArgumentException iae = assertIsInstanceOf(IllegalArgumentException.class, e.getCause());\n+            assertTrue(iae.getMessage().contains(\"as the filename is jailed to the starting directory\"));\n+        }\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testWriteInsideStartingDirectory() throws Exception {\n+        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n+        mock.expectedMessageCount(1);\n+\n+        template.sendBodyAndHeader(\"direct:start\", \"Bye World\", Exchange.FILE_NAME, \"outbox/bye.txt\");\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"direct:start\")\n+                    .setHeader(Exchange.FILE_NAME, simple(\"../${file:name}\"))\n+                    .to(\"file:target/jail/outbox\")\n+                    .to(\"mock:result\");\n+            }\n+        };\n+    }\n+}"
        },
        {
            "sha": "06b8b38e15b5987428e1c19e317831ceaf46fed3",
            "filename": "components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpProducerExpressionTest.java",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/apache/camel/blob/2d399aa6062fccd6af496bd776314d1944f7090f/components%2Fcamel-ftp%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2Fremote%2FFtpProducerExpressionTest.java",
            "raw_url": "https://github.com/apache/camel/raw/2d399aa6062fccd6af496bd776314d1944f7090f/components%2Fcamel-ftp%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2Fremote%2FFtpProducerExpressionTest.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/components%2Fcamel-ftp%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2Fremote%2FFtpProducerExpressionTest.java?ref=2d399aa6062fccd6af496bd776314d1944f7090f",
            "patch": "@@ -85,7 +85,7 @@ public void testProducerDateByExpression() throws Exception {\n     @Test\n     public void testProducerComplexByExpression() throws Exception {\n         // need one extra subdirectory (=foo) to be able to start with .. in the fileName option\n-        String url = \"ftp://admin@localhost:\" + getPort() + \"/filelanguage/foo?password=admin\";\n+        String url = \"ftp://admin@localhost:\" + getPort() + \"/filelanguage/foo?password=admin&jailStartingDirectory=false\";\n         \n         String expression = \"../filelanguageinbox/myfile-${bean:myguidgenerator.guid}-${date:now:yyyyMMdd}.txt\";\n         template.sendBody(url + \"&fileName=\" + expression, \"Hello World\");"
        },
        {
            "sha": "7cb677a6a581c7cf53ffc02b83e5b0e76a8993f2",
            "filename": "components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpProducerJailStartingDirectoryTest.java",
            "status": "added",
            "additions": 68,
            "deletions": 0,
            "changes": 68,
            "blob_url": "https://github.com/apache/camel/blob/2d399aa6062fccd6af496bd776314d1944f7090f/components%2Fcamel-ftp%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2Fremote%2FFtpProducerJailStartingDirectoryTest.java",
            "raw_url": "https://github.com/apache/camel/raw/2d399aa6062fccd6af496bd776314d1944f7090f/components%2Fcamel-ftp%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2Fremote%2FFtpProducerJailStartingDirectoryTest.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/components%2Fcamel-ftp%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2Fremote%2FFtpProducerJailStartingDirectoryTest.java?ref=2d399aa6062fccd6af496bd776314d1944f7090f",
            "patch": "@@ -0,0 +1,68 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.file.remote;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.junit.Test;\n+\n+public class FtpProducerJailStartingDirectoryTest extends FtpServerTestSupport {\n+\n+    private String getFtpUrl() {\n+        return \"ftp://admin@localhost:\" + getPort() + \"/upload/jail?binary=false&password=admin&tempPrefix=.uploading\";\n+    }\n+\n+    @Test\n+    public void testWriteOutsideStartingDirectory() throws Exception {\n+        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n+        mock.expectedMessageCount(0);\n+\n+        try {\n+            template.sendBodyAndHeader(\"direct:start\", \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n+            fail(\"Should have thrown exception\");\n+        } catch (Exception e) {\n+            IllegalArgumentException iae = assertIsInstanceOf(IllegalArgumentException.class, e.getCause());\n+            assertTrue(iae.getMessage().contains(\"as the filename is jailed to the starting directory\"));\n+        }\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testWriteInsideStartingDirectory() throws Exception {\n+        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n+        mock.expectedMessageCount(1);\n+\n+        template.sendBodyAndHeader(\"direct:start\", \"Bye World\", Exchange.FILE_NAME, \"jail/bye.txt\");\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"direct:start\")\n+                    .setHeader(Exchange.FILE_NAME, simple(\"../${file:name}\"))\n+                    .to(getFtpUrl())\n+                    .to(\"mock:result\");\n+            }\n+        };\n+    }\n+}\n\\ No newline at end of file"
        }
    ]
}