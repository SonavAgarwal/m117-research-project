{
    "sha": "157febfdebfd63708233b492f3271ceb1bd1eafc",
    "node_id": "MDY6Q29tbWl0MzM4MjE5NToxNTdmZWJmZGViZmQ2MzcwODIzM2I0OTJmMzI3MWNlYjFiZDFlYWZj",
    "commit": {
        "author": {
            "name": "Jeremy Morony",
            "email": "jmorony@pivotal.io",
            "date": "2019-10-03T19:45:12Z"
        },
        "committer": {
            "name": "Jeremy Morony",
            "email": "jmorony@pivotal.io",
            "date": "2019-10-03T19:45:12Z"
        },
        "message": "Improve user validation and lookup.\n\n[#168742757]",
        "tree": {
            "sha": "361760f78af71cb6e1242b2bcfb35b18e6f5a157",
            "url": "https://api.github.com/repos/cloudfoundry/uaa/git/trees/361760f78af71cb6e1242b2bcfb35b18e6f5a157"
        },
        "url": "https://api.github.com/repos/cloudfoundry/uaa/git/commits/157febfdebfd63708233b492f3271ceb1bd1eafc",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/cloudfoundry/uaa/commits/157febfdebfd63708233b492f3271ceb1bd1eafc",
    "html_url": "https://github.com/cloudfoundry/uaa/commit/157febfdebfd63708233b492f3271ceb1bd1eafc",
    "comments_url": "https://api.github.com/repos/cloudfoundry/uaa/commits/157febfdebfd63708233b492f3271ceb1bd1eafc/comments",
    "author": null,
    "committer": null,
    "parents": [
        {
            "sha": "434586b1a09438a92494031117ee59c4c1e5d215",
            "url": "https://api.github.com/repos/cloudfoundry/uaa/commits/434586b1a09438a92494031117ee59c4c1e5d215",
            "html_url": "https://github.com/cloudfoundry/uaa/commit/434586b1a09438a92494031117ee59c4c1e5d215"
        }
    ],
    "stats": {
        "total": 66,
        "additions": 59,
        "deletions": 7
    },
    "files": [
        {
            "sha": "1de33c74f7e7b7dafa04b332f3f97f74fdc566e5",
            "filename": "server/src/main/java/org/cloudfoundry/identity/uaa/invitations/InvitationsEndpoint.java",
            "status": "modified",
            "additions": 14,
            "deletions": 4,
            "changes": 18,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/157febfdebfd63708233b492f3271ceb1bd1eafc/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Finvitations%2FInvitationsEndpoint.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/157febfdebfd63708233b492f3271ceb1bd1eafc/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Finvitations%2FInvitationsEndpoint.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Finvitations%2FInvitationsEndpoint.java?ref=157febfdebfd63708233b492f3271ceb1bd1eafc",
            "patch": "@@ -27,14 +27,15 @@\n import org.springframework.web.context.request.RequestContextHolder;\n import org.springframework.web.context.request.ServletRequestAttributes;\n \n+import javax.mail.internet.AddressException;\n+import javax.mail.internet.InternetAddress;\n import javax.servlet.http.HttpServletRequest;\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.sql.Timestamp;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.regex.Pattern;\n \n import static org.cloudfoundry.identity.uaa.codestore.ExpiringCodeType.INVITATION;\n import static org.cloudfoundry.identity.uaa.constants.OriginKeys.ORIGIN;\n@@ -51,7 +52,6 @@ public class InvitationsEndpoint {\n     private static final int INVITATION_EXPIRY_DAYS = 7;\n     public static final String USER_ID = \"user_id\";\n     public static final String EMAIL = \"email\";\n-    private static final Pattern emailPattern = Pattern.compile(\"^(.+)@(.+)\\\\.(.+)$\");\n \n     private final ScimUserProvisioning scimUserProvisioning;\n     private final IdentityProviderProvisioning identityProviderProvisioning;\n@@ -98,7 +98,7 @@ public ResponseEntity<InvitationsResponse> inviteUsers(@RequestBody InvitationsR\n \n         for (String email : invitations.getEmails()) {\n             try {\n-                if (email != null && emailPattern.matcher(email).matches()) {\n+                if (email != null && validateEmail(email)) {\n                     List<IdentityProvider> providers = filter(activeProviders, client, email);\n                     if (providers.size() == 1) {\n                         ScimUser user = findOrCreateUser(email, providers.get(0).getOriginKey());\n@@ -140,7 +140,7 @@ public ResponseEntity<InvitationsResponse> inviteUsers(@RequestBody InvitationsR\n \n     private ScimUser findOrCreateUser(String email, String origin) {\n         email = email.trim().toLowerCase();\n-        List<ScimUser> results = scimUserProvisioning.query(String.format(\"email eq \\\"%s\\\" and origin eq \\\"%s\\\"\", email, origin), IdentityZoneHolder.get().getId());\n+        List<ScimUser> results = scimUserProvisioning.retrieveByEmailAndZone(email, origin, IdentityZoneHolder.get().getId());\n         if (results == null || results.size() == 0) {\n             ScimUser user = new ScimUser(null, email, \"\", \"\");\n             user.setPrimaryEmail(email.toLowerCase());\n@@ -155,4 +155,14 @@ private ScimUser findOrCreateUser(String email, String origin) {\n         }\n     }\n \n+    private boolean validateEmail(String email) {\n+        boolean valid = true;\n+        try {\n+            InternetAddress emailAddr = new InternetAddress(email);\n+            emailAddr.validate();\n+        } catch (AddressException e) {\n+            valid = false;\n+        }\n+        return valid;\n+    }\n }"
        },
        {
            "sha": "d1f8bec403fbc59e0dff4990609d46c21be27960",
            "filename": "server/src/main/java/org/cloudfoundry/identity/uaa/scim/ScimUserProvisioning.java",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/157febfdebfd63708233b492f3271ceb1bd1eafc/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2FScimUserProvisioning.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/157febfdebfd63708233b492f3271ceb1bd1eafc/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2FScimUserProvisioning.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2FScimUserProvisioning.java?ref=157febfdebfd63708233b492f3271ceb1bd1eafc",
            "patch": "@@ -18,10 +18,13 @@\n import org.cloudfoundry.identity.uaa.scim.exception.InvalidScimResourceException;\n import org.cloudfoundry.identity.uaa.scim.exception.ScimResourceNotFoundException;\n \n+import java.util.List;\n+\n \n public interface ScimUserProvisioning extends ResourceManager<ScimUser>, Queryable<ScimUser> {\n \n     ScimUser createUser(ScimUser user, String password, String zoneId) throws InvalidPasswordException, InvalidScimResourceException;\n+    List<ScimUser> retrieveByEmailAndZone(String email, String origin, String zoneId);\n \n     void changePassword(String id, String oldPassword, String newPassword, String zoneId) throws ScimResourceNotFoundException;\n "
        },
        {
            "sha": "53bf1cf9b1fef840524413eb8d1a765fcf9e26d0",
            "filename": "server/src/main/java/org/cloudfoundry/identity/uaa/scim/jdbc/JdbcScimUserProvisioning.java",
            "status": "modified",
            "additions": 10,
            "deletions": 0,
            "changes": 10,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/157febfdebfd63708233b492f3271ceb1bd1eafc/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fjdbc%2FJdbcScimUserProvisioning.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/157febfdebfd63708233b492f3271ceb1bd1eafc/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fjdbc%2FJdbcScimUserProvisioning.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fjdbc%2FJdbcScimUserProvisioning.java?ref=157febfdebfd63708233b492f3271ceb1bd1eafc",
            "patch": "@@ -93,6 +93,7 @@ public Logger getLogger() {\n     public static final String READ_PASSWORD_CHANGE_REQUIRED_SQL = \"select passwd_change_required from users where id=? and identity_zone_id=?\";\n \n     public static final String USER_BY_ID_QUERY = \"select \" + USER_FIELDS + \" from users \" + \"where id=? and identity_zone_id=?\";\n+    public static final String USER_BY_EMAIL_QUERY = \"select \" + USER_FIELDS + \" from users \" + \"where email=? and origin=? and identity_zone_id=?\";\n \n     public static final String ALL_USERS = \"select \" + USER_FIELDS + \" from users\";\n \n@@ -140,6 +141,15 @@ public ScimUser retrieve(String id, String zoneId) {\n         }\n     }\n \n+    @Override\n+    public List<ScimUser> retrieveByEmailAndZone(String email, String origin, String zoneId) {\n+        try {\n+            return jdbcTemplate.query(USER_BY_EMAIL_QUERY, mapper, email, origin, zoneId);\n+        } catch (EmptyResultDataAccessException e) {\n+            throw new ScimResourceNotFoundException(\"User with email \" + email + \" does not exist\");\n+        }\n+    }\n+\n     @Override\n     protected String getBaseSqlQuery() {\n         return ALL_USERS;"
        },
        {
            "sha": "be553f298e8165d4e132e14f349d86d7c199fb7a",
            "filename": "server/src/test/java/org/cloudfoundry/identity/uaa/scim/jdbc/JdbcScimUserProvisioningTests.java",
            "status": "modified",
            "additions": 30,
            "deletions": 1,
            "changes": 31,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/157febfdebfd63708233b492f3271ceb1bd1eafc/server%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fjdbc%2FJdbcScimUserProvisioningTests.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/157febfdebfd63708233b492f3271ceb1bd1eafc/server%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fjdbc%2FJdbcScimUserProvisioningTests.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/server%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fjdbc%2FJdbcScimUserProvisioningTests.java?ref=157febfdebfd63708233b492f3271ceb1bd1eafc",
            "patch": "@@ -74,11 +74,13 @@ class JdbcScimUserProvisioningTests {\n \n     @Autowired\n     private JdbcTemplate jdbcTemplate;\n+    private String joeEmail;\n \n     @BeforeEach\n     void setUp(@Autowired LimitSqlAdapter limitSqlAdapter) {\n         generator = new RandomValueStringGenerator();\n         joeId = \"joeId-\" + UUID.randomUUID().toString().substring(\"joeId-\".length());\n+        joeEmail = \"joe@joe.com\";\n         String mabelId = \"mabelId-\" + UUID.randomUUID().toString().substring(\"mabelId-\".length());\n         pagingListFactory = new JdbcPagingListFactory(jdbcTemplate, limitSqlAdapter);\n \n@@ -94,7 +96,7 @@ void setUp(@Autowired LimitSqlAdapter limitSqlAdapter) {\n         filterConverter.setAttributeNameMapper(new SimpleAttributeNameMapper(replaceWith));\n         jdbcScimUserProvisioning.setQueryConverter(filterConverter);\n \n-        addUser(jdbcTemplate, joeId, \"joe\", passwordEncoder.encode(\"joespassword\"), \"joe@joe.com\", \"Joe\", \"User\", \"+1-222-1234567\", currentIdentityZoneId);\n+        addUser(jdbcTemplate, joeId, \"joe\", passwordEncoder.encode(\"joespassword\"), joeEmail, \"Joe\", \"User\", \"+1-222-1234567\", currentIdentityZoneId);\n         addUser(jdbcTemplate, mabelId, \"mabel\", passwordEncoder.encode(\"mabelspassword\"), \"mabel@mabel.com\", \"Mabel\", \"User\", \"\", currentIdentityZoneId);\n     }\n \n@@ -103,6 +105,33 @@ void tearDown() {\n         jdbcTemplate.execute(\"delete from users\");\n     }\n \n+\n+    @WithDatabaseContext\n+    @Nested\n+    class WhenFindingByEmailAndZone {\n+        @Test\n+        void canRetrieveExistingUser() {\n+            List<ScimUser> found = jdbcScimUserProvisioning.retrieveByEmailAndZone(joeEmail, UAA, currentIdentityZoneId);\n+            assertEquals(1, found.size());\n+\n+            ScimUser joe = found.get(0);\n+            assertNotNull(joe);\n+            assertEquals(joeId, joe.getId());\n+            assertEquals(\"Joe\", joe.getGivenName());\n+            assertEquals(\"User\", joe.getFamilyName());\n+            assertEquals(\"joe@joe.com\", joe.getPrimaryEmail());\n+            assertEquals(\"joe\", joe.getUserName());\n+            assertEquals(\"+1-222-1234567\", joe.getPhoneNumbers().get(0).getValue());\n+            assertNull(joe.getGroups());\n+        }\n+\n+        @Test\n+        void cannotRetrieveNonexistentUser() {\n+            List<ScimUser> found = jdbcScimUserProvisioning.retrieveByEmailAndZone(\"unknown@example.com\", UAA, currentIdentityZoneId);\n+            assertEquals(0, found.size());\n+        }\n+    }\n+\n     @Test\n     void canCreateUserWithExclamationMarkInUsername() {\n         String userName = \"jo!!@foo.com\";"
        },
        {
            "sha": "3c4efae704dc989772d29a1dea508513deb5d8ff",
            "filename": "uaa/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsEndpointMockMvcTests.java",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/157febfdebfd63708233b492f3271ceb1bd1eafc/uaa%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Finvitations%2FInvitationsEndpointMockMvcTests.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/157febfdebfd63708233b492f3271ceb1bd1eafc/uaa%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Finvitations%2FInvitationsEndpointMockMvcTests.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Finvitations%2FInvitationsEndpointMockMvcTests.java?ref=157febfdebfd63708233b492f3271ceb1bd1eafc",
            "patch": "@@ -378,10 +378,10 @@ void inviteUserWithInvalidEmails() throws Exception {\n \n         assertEquals(\"email.invalid\", response.getFailedInvites().get(0).getErrorCode());\n         assertEquals(\"email.invalid\", response.getFailedInvites().get(1).getErrorCode());\n-        assertEquals(\"email.invalid\", response.getFailedInvites().get(2).getErrorCode());\n+        assertEquals(\"provider.non-existent\", response.getFailedInvites().get(2).getErrorCode());\n         assertEquals(invalidEmail1 + \" is invalid email.\", response.getFailedInvites().get(0).getErrorMessage());\n         assertEquals(invalidEmail2 + \" is invalid email.\", response.getFailedInvites().get(1).getErrorMessage());\n-        assertEquals(invalidEmail3 + \" is invalid email.\", response.getFailedInvites().get(2).getErrorMessage());\n+        assertEquals(\"No authentication provider found.\", response.getFailedInvites().get(2).getErrorMessage());\n     }\n \n     @Test"
        }
    ]
}