{
    "sha": "97b565469058cacac6d2559b2cff37effcca2cfd",
    "node_id": "MDY6Q29tbWl0MTExMjU1ODk6OTdiNTY1NDY5MDU4Y2FjYWM2ZDI1NTliMmNmZjM3ZWZmY2NhMmNmZA==",
    "commit": {
        "author": {
            "name": "stianst",
            "email": "stianst@gmail.com",
            "date": "2020-03-11T08:48:08Z"
        },
        "committer": {
            "name": "Stian Thorgersen",
            "email": "stian@redhat.com",
            "date": "2020-04-14T17:22:57Z"
        },
        "message": "KEYCLOAK-13285 Enable check identity for email",
        "tree": {
            "sha": "827c0ba22ed4ae84c32be2bee4f32dc0197441b9",
            "url": "https://api.github.com/repos/keycloak/keycloak/git/trees/827c0ba22ed4ae84c32be2bee4f32dc0197441b9"
        },
        "url": "https://api.github.com/repos/keycloak/keycloak/git/commits/97b565469058cacac6d2559b2cff37effcca2cfd",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/keycloak/keycloak/commits/97b565469058cacac6d2559b2cff37effcca2cfd",
    "html_url": "https://github.com/keycloak/keycloak/commit/97b565469058cacac6d2559b2cff37effcca2cfd",
    "comments_url": "https://api.github.com/repos/keycloak/keycloak/commits/97b565469058cacac6d2559b2cff37effcca2cfd/comments",
    "author": {
        "login": "stianst",
        "id": 2271511,
        "node_id": "MDQ6VXNlcjIyNzE1MTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2271511?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stianst",
        "html_url": "https://github.com/stianst",
        "followers_url": "https://api.github.com/users/stianst/followers",
        "following_url": "https://api.github.com/users/stianst/following{/other_user}",
        "gists_url": "https://api.github.com/users/stianst/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/stianst/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/stianst/subscriptions",
        "organizations_url": "https://api.github.com/users/stianst/orgs",
        "repos_url": "https://api.github.com/users/stianst/repos",
        "events_url": "https://api.github.com/users/stianst/events{/privacy}",
        "received_events_url": "https://api.github.com/users/stianst/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "stianst",
        "id": 2271511,
        "node_id": "MDQ6VXNlcjIyNzE1MTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2271511?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stianst",
        "html_url": "https://github.com/stianst",
        "followers_url": "https://api.github.com/users/stianst/followers",
        "following_url": "https://api.github.com/users/stianst/following{/other_user}",
        "gists_url": "https://api.github.com/users/stianst/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/stianst/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/stianst/subscriptions",
        "organizations_url": "https://api.github.com/users/stianst/orgs",
        "repos_url": "https://api.github.com/users/stianst/repos",
        "events_url": "https://api.github.com/users/stianst/events{/privacy}",
        "received_events_url": "https://api.github.com/users/stianst/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "d3a4bef9a4e92861a1cbee3c0477e361d7cc760d",
            "url": "https://api.github.com/repos/keycloak/keycloak/commits/d3a4bef9a4e92861a1cbee3c0477e361d7cc760d",
            "html_url": "https://github.com/keycloak/keycloak/commit/d3a4bef9a4e92861a1cbee3c0477e361d7cc760d"
        }
    ],
    "stats": {
        "total": 63,
        "additions": 62,
        "deletions": 1
    },
    "files": [
        {
            "sha": "c4680f3f7ca815c20eaa5bbcbf27162190974e20",
            "filename": "services/src/main/java/org/keycloak/email/DefaultEmailSenderProvider.java",
            "status": "modified",
            "additions": 25,
            "deletions": 1,
            "changes": 26,
            "blob_url": "https://github.com/keycloak/keycloak/blob/97b565469058cacac6d2559b2cff37effcca2cfd/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Femail%2FDefaultEmailSenderProvider.java",
            "raw_url": "https://github.com/keycloak/keycloak/raw/97b565469058cacac6d2559b2cff37effcca2cfd/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Femail%2FDefaultEmailSenderProvider.java",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Femail%2FDefaultEmailSenderProvider.java?ref=97b565469058cacac6d2559b2cff37effcca2cfd",
            "patch": "@@ -35,6 +35,7 @@\n import javax.mail.internet.InternetAddress;\n import javax.mail.internet.MimeBodyPart;\n import javax.mail.internet.MimeMultipart;\n+import javax.net.ssl.SSLContext;\n import javax.net.ssl.SSLSocketFactory;\n import java.io.UnsupportedEncodingException;\n import java.security.KeyManagementException;\n@@ -48,6 +49,8 @@\n  */\n public class DefaultEmailSenderProvider implements EmailSenderProvider {\n \n+    private static final String SUPPORTED_SSL_PROTOCOLS = getSupportedSslProtocols();\n+\n     private static final Logger logger = Logger.getLogger(DefaultEmailSenderProvider.class);\n \n     private final KeycloakSession session;\n@@ -89,6 +92,8 @@ public void send(Map<String, String> config, UserModel user, String subject, Str\n             }\n \n             if (ssl || starttls) {\n+                props.put(\"mail.smtp.ssl.protocols\", SUPPORTED_SSL_PROTOCOLS);\n+\n                 setupTruststore(props);\n             }\n \n@@ -171,7 +176,8 @@ protected String retrieveEmailAddress(UserModel user) {\n         return user.getEmail();\n     }\n \n-    private void setupTruststore(Properties props) throws NoSuchAlgorithmException, KeyManagementException {\n+    private void setupTruststore(Properties props) {\n+        boolean checkServerIdentity = true;\n \n         JSSETruststoreConfigurator configurator = new JSSETruststoreConfigurator(session);\n \n@@ -180,12 +186,30 @@ private void setupTruststore(Properties props) throws NoSuchAlgorithmException,\n             props.put(\"mail.smtp.ssl.socketFactory\", factory);\n             if (configurator.getProvider().getPolicy() == HostnameVerificationPolicy.ANY) {\n                 props.setProperty(\"mail.smtp.ssl.trust\", \"*\");\n+                checkServerIdentity = false;\n             }\n         }\n+\n+        if (checkServerIdentity) {\n+            props.put(\"mail.smtp.ssl.checkserveridentity\", \"true\");\n+        }\n     }\n \n     @Override\n     public void close() {\n \n     }\n+\n+    private static String getSupportedSslProtocols() {\n+        try {\n+            String[] protocols = SSLContext.getDefault().getSupportedSSLParameters().getProtocols();\n+            if (protocols != null) {\n+                return String.join(\" \", protocols);\n+            }\n+        } catch (Exception e) {\n+            logger.warn(\"Failed to get list of supported SSL protocols\", e);\n+        }\n+        return null;\n+    }\n+\n }"
        },
        {
            "sha": "f5c2b0085ec991b4d257b70b9f69344bd73e43e4",
            "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/ssl/TrustStoreEmailTest.java",
            "status": "modified",
            "additions": 37,
            "deletions": 0,
            "changes": 37,
            "blob_url": "https://github.com/keycloak/keycloak/blob/97b565469058cacac6d2559b2cff37effcca2cfd/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fssl%2FTrustStoreEmailTest.java",
            "raw_url": "https://github.com/keycloak/keycloak/raw/97b565469058cacac6d2559b2cff37effcca2cfd/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fssl%2FTrustStoreEmailTest.java",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fssl%2FTrustStoreEmailTest.java?ref=97b565469058cacac6d2559b2cff37effcca2cfd",
            "patch": "@@ -40,6 +40,9 @@\n \n import static org.junit.Assert.assertEquals;\n import org.keycloak.testsuite.arquillian.annotation.AuthServerContainerExclude.AuthServer;\n+\n+import java.util.Map;\n+\n import static org.keycloak.testsuite.util.MailAssert.assertEmailAndGetUrl;\n import static org.keycloak.testsuite.util.URLAssert.assertCurrentUrlStartsWith;\n \n@@ -164,4 +167,38 @@ public void verifyEmailWithSslWrongCertificate() throws Exception {\n         assertEquals(\"You need to verify your email address to activate your account.\",\n                 testRealmVerifyEmailPage.feedbackMessage().getText());\n     }\n+\n+    @Test\n+    public void verifyEmailWithSslWrongHostname() throws Exception {\n+        UserRepresentation user = ApiUtil.findUserByUsername(testRealm(), \"test-user@localhost\");\n+\n+        RealmRepresentation realmRep = testRealm().toRepresentation();\n+        realmRep.getSmtpServer().put(\"host\", \"localhost.localdomain\");\n+        testRealm().update(realmRep);\n+\n+        try {\n+            SslMailServer.startWithSsl(this.getClass().getClassLoader().getResource(SslMailServer.PRIVATE_KEY).getFile());\n+            accountManagement.navigateTo();\n+            loginPage.form().login(user.getUsername(), \"password\");\n+\n+            events.expectRequiredAction(EventType.SEND_VERIFY_EMAIL_ERROR)\n+                    .error(Errors.EMAIL_SEND_FAILED)\n+                    .user(user.getId())\n+                    .client(\"account\")\n+                    .detail(Details.USERNAME, \"test-user@localhost\")\n+                    .detail(Details.EMAIL, \"test-user@localhost\")\n+                    .removeDetail(Details.REDIRECT_URI)\n+                    .assertEvent();\n+\n+            // Email wasn't send\n+            Assert.assertNull(SslMailServer.getLastReceivedMessage());\n+\n+            // Email wasn't send, but we won't notify end user about that. Admin is aware due to the error in the logs and the SEND_VERIFY_EMAIL_ERROR event.\n+            assertEquals(\"You need to verify your email address to activate your account.\",\n+                    testRealmVerifyEmailPage.feedbackMessage().getText());\n+        } finally {\n+            realmRep.getSmtpServer().put(\"host\", \"localhost\");\n+            testRealm().update(realmRep);\n+        }\n+    }\n }"
        }
    ]
}