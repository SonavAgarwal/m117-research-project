{
    "sha": "5b64969d37cf2906efd4623cfd473041ce5132fd",
    "node_id": "MDY6Q29tbWl0MjA2MzE3OjViNjQ5NjlkMzdjZjI5MDZlZmQ0NjIzY2ZkNDczMDQxY2U1MTMyZmQ=",
    "commit": {
        "author": {
            "name": "Claus Ibsen",
            "email": "claus.ibsen@gmail.com",
            "date": "2019-01-09T09:37:33Z"
        },
        "committer": {
            "name": "GitHub",
            "email": "noreply@github.com",
            "date": "2019-01-09T09:37:33Z"
        },
        "message": "CAMEL-13042: File producer should by default only allow to write file\u2026 (#2700)\n\n* CAMEL-13042: File producer should by default only allow to write files in the starting directory (or subs). Added new option to turn this on|off.\r\n\r\n* CAMEL-13042: Regen docs\r\n\r\n* CAMEL-13042: Polished",
        "tree": {
            "sha": "65d1aca3ed02c6ba9c9d0fd5a873ebabd2e2d36e",
            "url": "https://api.github.com/repos/apache/camel/git/trees/65d1aca3ed02c6ba9c9d0fd5a873ebabd2e2d36e"
        },
        "url": "https://api.github.com/repos/apache/camel/git/commits/5b64969d37cf2906efd4623cfd473041ce5132fd",
        "comment_count": 0,
        "verification": {
            "verified": true,
            "reason": "valid",
            "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcNcDeCRBK7hj4Ov3rIwAAdHIIAJYRqVHBHRR5UWzanErquwHQ\npi37GrNzlIZID1JeHUiUvWOsyE7ly/DQX57DQfNBc0TwukUesEheoXr4d98ANk5l\ndZW+jUeJbPIZB68HL1dosQGi7h4QJWlxaCGK9/SfkDhbHLuKpmdRaVD6xvOcAU0Z\nFmJUCnAXHX25H8KOIDSom+p8cUo3K35tFD4bPdPs6eWTDJ9eNbc5M0wPDtzrlQts\n9EMLYgEfUH8cWn5r+maL8/FXqDRRWOFoZtdTwXNF7CVo1XKud9U47nUAaBrDEXmD\neMhYfzxcSKPkQpQh0KoCnsdeVjRya7D4ojOaYVtr8HEDxQ7ioHpMmGvACC1yFUQ=\n=dAWn\n-----END PGP SIGNATURE-----\n",
            "payload": "tree 65d1aca3ed02c6ba9c9d0fd5a873ebabd2e2d36e\nparent 2b0be4194ebc878641f7286b5381eb21511ca42f\nauthor Claus Ibsen <claus.ibsen@gmail.com> 1547026653 +0100\ncommitter GitHub <noreply@github.com> 1547026653 +0100\n\nCAMEL-13042: File producer should by default only allow to write file\u2026 (#2700)\n\n* CAMEL-13042: File producer should by default only allow to write files in the starting directory (or subs). Added new option to turn this on|off.\r\n\r\n* CAMEL-13042: Regen docs\r\n\r\n* CAMEL-13042: Polished\r\n",
            "verified_at": "2024-01-16T19:59:59Z"
        }
    },
    "url": "https://api.github.com/repos/apache/camel/commits/5b64969d37cf2906efd4623cfd473041ce5132fd",
    "html_url": "https://github.com/apache/camel/commit/5b64969d37cf2906efd4623cfd473041ce5132fd",
    "comments_url": "https://api.github.com/repos/apache/camel/commits/5b64969d37cf2906efd4623cfd473041ce5132fd/comments",
    "author": {
        "login": "davsclaus",
        "id": 477100,
        "node_id": "MDQ6VXNlcjQ3NzEwMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/477100?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davsclaus",
        "html_url": "https://github.com/davsclaus",
        "followers_url": "https://api.github.com/users/davsclaus/followers",
        "following_url": "https://api.github.com/users/davsclaus/following{/other_user}",
        "gists_url": "https://api.github.com/users/davsclaus/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/davsclaus/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/davsclaus/subscriptions",
        "organizations_url": "https://api.github.com/users/davsclaus/orgs",
        "repos_url": "https://api.github.com/users/davsclaus/repos",
        "events_url": "https://api.github.com/users/davsclaus/events{/privacy}",
        "received_events_url": "https://api.github.com/users/davsclaus/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "2b0be4194ebc878641f7286b5381eb21511ca42f",
            "url": "https://api.github.com/repos/apache/camel/commits/2b0be4194ebc878641f7286b5381eb21511ca42f",
            "html_url": "https://github.com/apache/camel/commit/2b0be4194ebc878641f7286b5381eb21511ca42f"
        }
    ],
    "stats": {
        "total": 199,
        "additions": 187,
        "deletions": 12
    },
    "files": [
        {
            "sha": "25a5c499941666bccdda5b5e5eae2dbd1524fa97",
            "filename": "camel-core/src/main/docs/file-component.adoc",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/apache/camel/blob/5b64969d37cf2906efd4623cfd473041ce5132fd/camel-core%2Fsrc%2Fmain%2Fdocs%2Ffile-component.adoc",
            "raw_url": "https://github.com/apache/camel/raw/5b64969d37cf2906efd4623cfd473041ce5132fd/camel-core%2Fsrc%2Fmain%2Fdocs%2Ffile-component.adoc",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core%2Fsrc%2Fmain%2Fdocs%2Ffile-component.adoc?ref=5b64969d37cf2906efd4623cfd473041ce5132fd",
            "patch": "@@ -72,7 +72,7 @@ with the following path and query parameters:\n |===\n \n \n-==== Query Parameters (86 parameters):\n+==== Query Parameters (87 parameters):\n \n \n [width=\"100%\",cols=\"2,5,^1,2\",options=\"header\"]\n@@ -102,6 +102,7 @@ with the following path and query parameters:\n | *startingDirectoryMustExist* (consumer) | Whether the starting directory must exist. Mind that the autoCreate option is default enabled, which means the starting directory is normally auto created if it doesn't exist. You can disable autoCreate and enable this to ensure the starting directory must exist. Will thrown an exception if the directory doesn't exist. | false | boolean\n | *fileExist* (producer) | What to do if a file already exists with the same name. Override, which is the default, replaces the existing file. Append - adds content to the existing file. Fail - throws a GenericFileOperationException, indicating that there is already an existing file. Ignore - silently ignores the problem and does not override the existing file, but assumes everything is okay. Move - option requires to use the moveExisting option to be configured as well. The option eagerDeleteTargetFile can be used to control what to do if an moving the file, and there exists already an existing file, otherwise causing the move operation to fail. The Move option will move any existing files, before writing the target file. TryRename is only applicable if tempFileName option is in use. This allows to try renaming the file from the temporary name to the actual name, without doing any exists check. This check may be faster on some file systems and especially FTP servers. | Override | GenericFileExist\n | *flatten* (producer) | Flatten is used to flatten the file name path to strip any leading paths, so it's just the file name. This allows you to consume recursively into sub-directories, but when you eg write the files to another directory they will be written in a single directory. Setting this to true on the producer enforces that any file name in CamelFileName header will be stripped for any leading paths. | false | boolean\n+| *jailStartingDirectory* (producer) | Used for jailing (restricting) writing files to the starting directory (and sub) only. This is enabled by default to not allow Camel to write files to outside directories (to be more secured out of the box). You can turn this off to allow writing files to directories outside the starting directory, such as parent or root folders. | true | boolean\n | *moveExisting* (producer) | Expression (such as File Language) used to compute file name to use when fileExist=Move is configured. To move files into a backup subdirectory just enter backup. This option only supports the following File Language tokens: file:name, file:name.ext, file:name.noext, file:onlyname, file:onlyname.noext, file:ext, and file:parent. Notice the file:parent is not supported by the FTP component, as the FTP component can only move any existing files to a relative directory based on current dir as base. |  | String\n | *tempFileName* (producer) | The same as tempPrefix option but offering a more fine grained control on the naming of the temporary filename as it uses the File Language. |  | String\n | *tempPrefix* (producer) | This option is used to write the file using a temporary name and then, after the write is complete, rename it to the real name. Can be used to identify files being written and also avoid consumers (not using exclusive read locks) reading in progress files. Is often used by FTP when uploading big files. |  | String"
        },
        {
            "sha": "642f4c0eb046d0e3e62773df2d60a9dd07d16761",
            "filename": "camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java",
            "status": "modified",
            "additions": 15,
            "deletions": 0,
            "changes": 15,
            "blob_url": "https://github.com/apache/camel/blob/5b64969d37cf2906efd4623cfd473041ce5132fd/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FGenericFileEndpoint.java",
            "raw_url": "https://github.com/apache/camel/raw/5b64969d37cf2906efd4623cfd473041ce5132fd/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FGenericFileEndpoint.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FGenericFileEndpoint.java?ref=5b64969d37cf2906efd4623cfd473041ce5132fd",
            "patch": "@@ -94,6 +94,8 @@ public abstract class GenericFileEndpoint<T> extends ScheduledPollEndpoint imple\n     protected boolean keepLastModified;\n     @UriParam(label = \"producer,advanced\")\n     protected boolean allowNullBody;\n+    @UriParam(label = \"producer\", defaultValue = \"true\")\n+    protected boolean jailStartingDirectory = true;\n \n     // consumer options\n \n@@ -1251,6 +1253,19 @@ public void setAllowNullBody(boolean allowNullBody) {\n         this.allowNullBody = allowNullBody;\n     }\n \n+    public boolean isJailStartingDirectory() {\n+        return jailStartingDirectory;\n+    }\n+\n+    /**\n+     * Used for jailing (restricting) writing files to the starting directory (and sub) only.\n+     * This is enabled by default to not allow Camel to write files to outside directories (to be more secured out of the box).\n+     * You can turn this off to allow writing files to directories outside the starting directory, such as parent or root folders.\n+     */\n+    public void setJailStartingDirectory(boolean jailStartingDirectory) {\n+        this.jailStartingDirectory = jailStartingDirectory;\n+    }\n+\n     public ExceptionHandler getOnCompletionExceptionHandler() {\n         return onCompletionExceptionHandler;\n     }"
        },
        {
            "sha": "5182f605bd3c0a72c5fe2de7c6732184cdd8d910",
            "filename": "camel-core/src/main/java/org/apache/camel/component/file/GenericFileProducer.java",
            "status": "modified",
            "additions": 11,
            "deletions": 1,
            "changes": 12,
            "blob_url": "https://github.com/apache/camel/blob/5b64969d37cf2906efd4623cfd473041ce5132fd/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FGenericFileProducer.java",
            "raw_url": "https://github.com/apache/camel/raw/5b64969d37cf2906efd4623cfd473041ce5132fd/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FGenericFileProducer.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FGenericFileProducer.java?ref=5b64969d37cf2906efd4623cfd473041ce5132fd",
            "patch": "@@ -22,6 +22,7 @@\n import java.util.concurrent.locks.Lock;\n import java.util.concurrent.locks.ReentrantLock;\n \n+import org.apache.camel.CamelExchangeException;\n import org.apache.camel.Exchange;\n import org.apache.camel.Expression;\n import org.apache.camel.support.DefaultExchange;\n@@ -325,7 +326,7 @@ public String createFileName(Exchange exchange) {\n             exchange.getIn().setHeader(Exchange.FILE_NAME, value);\n         }\n \n-        if (value != null && value instanceof String && StringHelper.hasStartToken((String) value, \"simple\")) {\n+        if (value instanceof String && StringHelper.hasStartToken((String) value, \"simple\")) {\n             log.warn(\"Simple expression: {} detected in header: {} of type String. This feature has been removed (see CAMEL-6748).\", value, Exchange.FILE_NAME);\n         }\n \n@@ -372,6 +373,15 @@ public String createFileName(Exchange exchange) {\n             answer = baseDir + endpoint.getGeneratedFileName(exchange.getIn());\n         }\n \n+        if (endpoint.isJailStartingDirectory()) {\n+            // check for file must be within starting directory (need to compact first as the name can be using relative paths via ../ etc)\n+            String compatchAnswer = FileUtil.compactPath(answer);\n+            String compatchBaseDir = FileUtil.compactPath(baseDir);\n+            if (!compatchAnswer.startsWith(compatchBaseDir)) {\n+                throw new IllegalArgumentException(\"Cannot write file with name: \" + compatchAnswer + \" as the filename is jailed to the starting directory: \" + compatchBaseDir);\n+            }\n+        }\n+\n         if (endpoint.getConfiguration().needToNormalize()) {\n             // must normalize path to cater for Windows and other OS\n             answer = normalizePath(answer);"
        },
        {
            "sha": "788a6aa7650130a5308581ea2ebd54920a61b744",
            "filename": "camel-core/src/test/java/org/apache/camel/component/file/FileProducerExpressionTest.java",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/apache/camel/blob/5b64969d37cf2906efd4623cfd473041ce5132fd/camel-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FFileProducerExpressionTest.java",
            "raw_url": "https://github.com/apache/camel/raw/5b64969d37cf2906efd4623cfd473041ce5132fd/camel-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FFileProducerExpressionTest.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FFileProducerExpressionTest.java?ref=5b64969d37cf2906efd4623cfd473041ce5132fd",
            "patch": "@@ -81,7 +81,7 @@ public void testProducerDateByExpression() throws Exception {\n     @Test\n     public void testProducerComplexByExpression() throws Exception {\n         String expression = \"../filelanguageinbox/myfile-${bean:myguidgenerator.guid}-${date:now:yyyyMMdd}.txt\";\n-        template.sendBody(\"file://target/filelanguage?fileName=\" + expression, \"Hello World\");\n+        template.sendBody(\"file://target/filelanguage?jailStartingDirectory=false&fileName=\" + expression, \"Hello World\");\n \n         String date = new SimpleDateFormat(\"yyyyMMdd\").format(new Date());\n         assertFileExists(\"target/filelanguageinbox/myfile-123-\" + date + \".txt\");"
        },
        {
            "sha": "becbf18579659f763e954fc4abd8d42b2e1fb445",
            "filename": "camel-core/src/test/java/org/apache/camel/component/file/FileProducerJailStartingDirectoryTest.java",
            "status": "added",
            "additions": 73,
            "deletions": 0,
            "changes": 73,
            "blob_url": "https://github.com/apache/camel/blob/5b64969d37cf2906efd4623cfd473041ce5132fd/camel-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FFileProducerJailStartingDirectoryTest.java",
            "raw_url": "https://github.com/apache/camel/raw/5b64969d37cf2906efd4623cfd473041ce5132fd/camel-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FFileProducerJailStartingDirectoryTest.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FFileProducerJailStartingDirectoryTest.java?ref=5b64969d37cf2906efd4623cfd473041ce5132fd",
            "patch": "@@ -0,0 +1,73 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.file;\n+\n+import org.apache.camel.ContextTestSupport;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class FileProducerJailStartingDirectoryTest extends ContextTestSupport {\n+\n+    @Override\n+    @Before\n+    public void setUp() throws Exception {\n+        deleteDirectory(\"target/jail\");\n+        super.setUp();\n+    }\n+\n+    @Test\n+    public void testWriteOutsideStartingDirectory() throws Exception {\n+        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n+        mock.expectedMessageCount(0);\n+\n+        try {\n+            template.sendBodyAndHeader(\"direct:start\", \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n+            fail(\"Should have thrown exception\");\n+        } catch (Exception e) {\n+            IllegalArgumentException iae = assertIsInstanceOf(IllegalArgumentException.class, e.getCause());\n+            assertTrue(iae.getMessage().contains(\"as the filename is jailed to the starting directory\"));\n+        }\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testWriteInsideStartingDirectory() throws Exception {\n+        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n+        mock.expectedMessageCount(1);\n+\n+        template.sendBodyAndHeader(\"direct:start\", \"Bye World\", Exchange.FILE_NAME, \"outbox/bye.txt\");\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"direct:start\")\n+                    .setHeader(Exchange.FILE_NAME, simple(\"../${file:name}\"))\n+                    .to(\"file:target/jail/outbox\")\n+                    .to(\"mock:result\");\n+            }\n+        };\n+    }\n+}"
        },
        {
            "sha": "b002b519d35fccc03e9e018ec1d3973158519c20",
            "filename": "components/camel-ftp/src/main/docs/ftp-component.adoc",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/apache/camel/blob/5b64969d37cf2906efd4623cfd473041ce5132fd/components%2Fcamel-ftp%2Fsrc%2Fmain%2Fdocs%2Fftp-component.adoc",
            "raw_url": "https://github.com/apache/camel/raw/5b64969d37cf2906efd4623cfd473041ce5132fd/components%2Fcamel-ftp%2Fsrc%2Fmain%2Fdocs%2Fftp-component.adoc",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/components%2Fcamel-ftp%2Fsrc%2Fmain%2Fdocs%2Fftp-component.adoc?ref=5b64969d37cf2906efd4623cfd473041ce5132fd",
            "patch": "@@ -100,7 +100,7 @@ with the following path and query parameters:\n |===\n \n \n-==== Query Parameters (109 parameters):\n+==== Query Parameters (110 parameters):\n \n \n [width=\"100%\",cols=\"2,5,^1,2\",options=\"header\"]\n@@ -143,6 +143,7 @@ with the following path and query parameters:\n | *useList* (consumer) | Whether to allow using LIST command when downloading a file. Default is true. In some use cases you may want to download a specific file and are not allowed to use the LIST command, and therefore you can set this option to false. Notice when using this option, then the specific file to download does not include meta-data information such as file size, timestamp, permissions etc, because those information is only possible to retrieve when LIST command is in use. | true | boolean\n | *fileExist* (producer) | What to do if a file already exists with the same name. Override, which is the default, replaces the existing file. Append - adds content to the existing file. Fail - throws a GenericFileOperationException, indicating that there is already an existing file. Ignore - silently ignores the problem and does not override the existing file, but assumes everything is okay. Move - option requires to use the moveExisting option to be configured as well. The option eagerDeleteTargetFile can be used to control what to do if an moving the file, and there exists already an existing file, otherwise causing the move operation to fail. The Move option will move any existing files, before writing the target file. TryRename is only applicable if tempFileName option is in use. This allows to try renaming the file from the temporary name to the actual name, without doing any exists check. This check may be faster on some file systems and especially FTP servers. | Override | GenericFileExist\n | *flatten* (producer) | Flatten is used to flatten the file name path to strip any leading paths, so it's just the file name. This allows you to consume recursively into sub-directories, but when you eg write the files to another directory they will be written in a single directory. Setting this to true on the producer enforces that any file name in CamelFileName header will be stripped for any leading paths. | false | boolean\n+| *jailStartingDirectory* (producer) | Used for jailing (restricting) writing files to the starting directory (and sub) only. This is enabled by default to not allow Camel to write files to outside directories (to be more secured out of the box). You can turn this off to allow writing files to directories outside the starting directory, such as parent or root folders. | true | boolean\n | *moveExisting* (producer) | Expression (such as File Language) used to compute file name to use when fileExist=Move is configured. To move files into a backup subdirectory just enter backup. This option only supports the following File Language tokens: file:name, file:name.ext, file:name.noext, file:onlyname, file:onlyname.noext, file:ext, and file:parent. Notice the file:parent is not supported by the FTP component, as the FTP component can only move any existing files to a relative directory based on current dir as base. |  | String\n | *tempFileName* (producer) | The same as tempPrefix option but offering a more fine grained control on the naming of the temporary filename as it uses the File Language. |  | String\n | *tempPrefix* (producer) | This option is used to write the file using a temporary name and then, after the write is complete, rename it to the real name. Can be used to identify files being written and also avoid consumers (not using exclusive read locks) reading in progress files. Is often used by FTP when uploading big files. |  | String"
        },
        {
            "sha": "cc93937782b94adc748295141626c5bef817d98a",
            "filename": "components/camel-ftp/src/main/docs/ftps-component.adoc",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/apache/camel/blob/5b64969d37cf2906efd4623cfd473041ce5132fd/components%2Fcamel-ftp%2Fsrc%2Fmain%2Fdocs%2Fftps-component.adoc",
            "raw_url": "https://github.com/apache/camel/raw/5b64969d37cf2906efd4623cfd473041ce5132fd/components%2Fcamel-ftp%2Fsrc%2Fmain%2Fdocs%2Fftps-component.adoc",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/components%2Fcamel-ftp%2Fsrc%2Fmain%2Fdocs%2Fftps-component.adoc?ref=5b64969d37cf2906efd4623cfd473041ce5132fd",
            "patch": "@@ -60,7 +60,7 @@ with the following path and query parameters:\n |===\n \n \n-==== Query Parameters (121 parameters):\n+==== Query Parameters (122 parameters):\n \n \n [width=\"100%\",cols=\"2,5,^1,2\",options=\"header\"]\n@@ -103,6 +103,7 @@ with the following path and query parameters:\n | *useList* (consumer) | Whether to allow using LIST command when downloading a file. Default is true. In some use cases you may want to download a specific file and are not allowed to use the LIST command, and therefore you can set this option to false. Notice when using this option, then the specific file to download does not include meta-data information such as file size, timestamp, permissions etc, because those information is only possible to retrieve when LIST command is in use. | true | boolean\n | *fileExist* (producer) | What to do if a file already exists with the same name. Override, which is the default, replaces the existing file. Append - adds content to the existing file. Fail - throws a GenericFileOperationException, indicating that there is already an existing file. Ignore - silently ignores the problem and does not override the existing file, but assumes everything is okay. Move - option requires to use the moveExisting option to be configured as well. The option eagerDeleteTargetFile can be used to control what to do if an moving the file, and there exists already an existing file, otherwise causing the move operation to fail. The Move option will move any existing files, before writing the target file. TryRename is only applicable if tempFileName option is in use. This allows to try renaming the file from the temporary name to the actual name, without doing any exists check. This check may be faster on some file systems and especially FTP servers. | Override | GenericFileExist\n | *flatten* (producer) | Flatten is used to flatten the file name path to strip any leading paths, so it's just the file name. This allows you to consume recursively into sub-directories, but when you eg write the files to another directory they will be written in a single directory. Setting this to true on the producer enforces that any file name in CamelFileName header will be stripped for any leading paths. | false | boolean\n+| *jailStartingDirectory* (producer) | Used for jailing (restricting) writing files to the starting directory (and sub) only. This is enabled by default to not allow Camel to write files to outside directories (to be more secured out of the box). You can turn this off to allow writing files to directories outside the starting directory, such as parent or root folders. | true | boolean\n | *moveExisting* (producer) | Expression (such as File Language) used to compute file name to use when fileExist=Move is configured. To move files into a backup subdirectory just enter backup. This option only supports the following File Language tokens: file:name, file:name.ext, file:name.noext, file:onlyname, file:onlyname.noext, file:ext, and file:parent. Notice the file:parent is not supported by the FTP component, as the FTP component can only move any existing files to a relative directory based on current dir as base. |  | String\n | *tempFileName* (producer) | The same as tempPrefix option but offering a more fine grained control on the naming of the temporary filename as it uses the File Language. |  | String\n | *tempPrefix* (producer) | This option is used to write the file using a temporary name and then, after the write is complete, rename it to the real name. Can be used to identify files being written and also avoid consumers (not using exclusive read locks) reading in progress files. Is often used by FTP when uploading big files. |  | String"
        },
        {
            "sha": "559b8c4c611a87aa8f7139d124a79d12fe66ef1b",
            "filename": "components/camel-ftp/src/main/docs/sftp-component.adoc",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/apache/camel/blob/5b64969d37cf2906efd4623cfd473041ce5132fd/components%2Fcamel-ftp%2Fsrc%2Fmain%2Fdocs%2Fsftp-component.adoc",
            "raw_url": "https://github.com/apache/camel/raw/5b64969d37cf2906efd4623cfd473041ce5132fd/components%2Fcamel-ftp%2Fsrc%2Fmain%2Fdocs%2Fsftp-component.adoc",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/components%2Fcamel-ftp%2Fsrc%2Fmain%2Fdocs%2Fsftp-component.adoc?ref=5b64969d37cf2906efd4623cfd473041ce5132fd",
            "patch": "@@ -51,7 +51,7 @@ with the following path and query parameters:\n |===\n \n \n-==== Query Parameters (117 parameters):\n+==== Query Parameters (118 parameters):\n \n \n [width=\"100%\",cols=\"2,5,^1,2\",options=\"header\"]\n@@ -87,6 +87,7 @@ with the following path and query parameters:\n | *useList* (consumer) | Whether to allow using LIST command when downloading a file. Default is true. In some use cases you may want to download a specific file and are not allowed to use the LIST command, and therefore you can set this option to false. Notice when using this option, then the specific file to download does not include meta-data information such as file size, timestamp, permissions etc, because those information is only possible to retrieve when LIST command is in use. | true | boolean\n | *fileExist* (producer) | What to do if a file already exists with the same name. Override, which is the default, replaces the existing file. Append - adds content to the existing file. Fail - throws a GenericFileOperationException, indicating that there is already an existing file. Ignore - silently ignores the problem and does not override the existing file, but assumes everything is okay. Move - option requires to use the moveExisting option to be configured as well. The option eagerDeleteTargetFile can be used to control what to do if an moving the file, and there exists already an existing file, otherwise causing the move operation to fail. The Move option will move any existing files, before writing the target file. TryRename is only applicable if tempFileName option is in use. This allows to try renaming the file from the temporary name to the actual name, without doing any exists check. This check may be faster on some file systems and especially FTP servers. | Override | GenericFileExist\n | *flatten* (producer) | Flatten is used to flatten the file name path to strip any leading paths, so it's just the file name. This allows you to consume recursively into sub-directories, but when you eg write the files to another directory they will be written in a single directory. Setting this to true on the producer enforces that any file name in CamelFileName header will be stripped for any leading paths. | false | boolean\n+| *jailStartingDirectory* (producer) | Used for jailing (restricting) writing files to the starting directory (and sub) only. This is enabled by default to not allow Camel to write files to outside directories (to be more secured out of the box). You can turn this off to allow writing files to directories outside the starting directory, such as parent or root folders. | true | boolean\n | *moveExisting* (producer) | Expression (such as File Language) used to compute file name to use when fileExist=Move is configured. To move files into a backup subdirectory just enter backup. This option only supports the following File Language tokens: file:name, file:name.ext, file:name.noext, file:onlyname, file:onlyname.noext, file:ext, and file:parent. Notice the file:parent is not supported by the FTP component, as the FTP component can only move any existing files to a relative directory based on current dir as base. |  | String\n | *tempFileName* (producer) | The same as tempPrefix option but offering a more fine grained control on the naming of the temporary filename as it uses the File Language. |  | String\n | *tempPrefix* (producer) | This option is used to write the file using a temporary name and then, after the write is complete, rename it to the real name. Can be used to identify files being written and also avoid consumers (not using exclusive read locks) reading in progress files. Is often used by FTP when uploading big files. |  | String"
        },
        {
            "sha": "06b8b38e15b5987428e1c19e317831ceaf46fed3",
            "filename": "components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpProducerExpressionTest.java",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/apache/camel/blob/5b64969d37cf2906efd4623cfd473041ce5132fd/components%2Fcamel-ftp%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2Fremote%2FFtpProducerExpressionTest.java",
            "raw_url": "https://github.com/apache/camel/raw/5b64969d37cf2906efd4623cfd473041ce5132fd/components%2Fcamel-ftp%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2Fremote%2FFtpProducerExpressionTest.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/components%2Fcamel-ftp%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2Fremote%2FFtpProducerExpressionTest.java?ref=5b64969d37cf2906efd4623cfd473041ce5132fd",
            "patch": "@@ -85,7 +85,7 @@ public void testProducerDateByExpression() throws Exception {\n     @Test\n     public void testProducerComplexByExpression() throws Exception {\n         // need one extra subdirectory (=foo) to be able to start with .. in the fileName option\n-        String url = \"ftp://admin@localhost:\" + getPort() + \"/filelanguage/foo?password=admin\";\n+        String url = \"ftp://admin@localhost:\" + getPort() + \"/filelanguage/foo?password=admin&jailStartingDirectory=false\";\n         \n         String expression = \"../filelanguageinbox/myfile-${bean:myguidgenerator.guid}-${date:now:yyyyMMdd}.txt\";\n         template.sendBody(url + \"&fileName=\" + expression, \"Hello World\");"
        },
        {
            "sha": "7cb677a6a581c7cf53ffc02b83e5b0e76a8993f2",
            "filename": "components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpProducerJailStartingDirectoryTest.java",
            "status": "added",
            "additions": 68,
            "deletions": 0,
            "changes": 68,
            "blob_url": "https://github.com/apache/camel/blob/5b64969d37cf2906efd4623cfd473041ce5132fd/components%2Fcamel-ftp%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2Fremote%2FFtpProducerJailStartingDirectoryTest.java",
            "raw_url": "https://github.com/apache/camel/raw/5b64969d37cf2906efd4623cfd473041ce5132fd/components%2Fcamel-ftp%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2Fremote%2FFtpProducerJailStartingDirectoryTest.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/components%2Fcamel-ftp%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2Fremote%2FFtpProducerJailStartingDirectoryTest.java?ref=5b64969d37cf2906efd4623cfd473041ce5132fd",
            "patch": "@@ -0,0 +1,68 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.file.remote;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.junit.Test;\n+\n+public class FtpProducerJailStartingDirectoryTest extends FtpServerTestSupport {\n+\n+    private String getFtpUrl() {\n+        return \"ftp://admin@localhost:\" + getPort() + \"/upload/jail?binary=false&password=admin&tempPrefix=.uploading\";\n+    }\n+\n+    @Test\n+    public void testWriteOutsideStartingDirectory() throws Exception {\n+        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n+        mock.expectedMessageCount(0);\n+\n+        try {\n+            template.sendBodyAndHeader(\"direct:start\", \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n+            fail(\"Should have thrown exception\");\n+        } catch (Exception e) {\n+            IllegalArgumentException iae = assertIsInstanceOf(IllegalArgumentException.class, e.getCause());\n+            assertTrue(iae.getMessage().contains(\"as the filename is jailed to the starting directory\"));\n+        }\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testWriteInsideStartingDirectory() throws Exception {\n+        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n+        mock.expectedMessageCount(1);\n+\n+        template.sendBodyAndHeader(\"direct:start\", \"Bye World\", Exchange.FILE_NAME, \"jail/bye.txt\");\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"direct:start\")\n+                    .setHeader(Exchange.FILE_NAME, simple(\"../${file:name}\"))\n+                    .to(getFtpUrl())\n+                    .to(\"mock:result\");\n+            }\n+        };\n+    }\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "4766037c6413dfafb09cf1d3480289d812aae0f3",
            "filename": "components/camel-jsch/src/main/docs/scp-component.adoc",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/apache/camel/blob/5b64969d37cf2906efd4623cfd473041ce5132fd/components%2Fcamel-jsch%2Fsrc%2Fmain%2Fdocs%2Fscp-component.adoc",
            "raw_url": "https://github.com/apache/camel/raw/5b64969d37cf2906efd4623cfd473041ce5132fd/components%2Fcamel-jsch%2Fsrc%2Fmain%2Fdocs%2Fscp-component.adoc",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/components%2Fcamel-jsch%2Fsrc%2Fmain%2Fdocs%2Fscp-component.adoc?ref=5b64969d37cf2906efd4623cfd473041ce5132fd",
            "patch": "@@ -83,7 +83,7 @@ with the following path and query parameters:\n |===\n \n \n-==== Query Parameters (21 parameters):\n+==== Query Parameters (22 parameters):\n \n \n [width=\"100%\",cols=\"2,5,^1,2\",options=\"header\"]\n@@ -93,6 +93,7 @@ with the following path and query parameters:\n | *chmod* (producer) | Allows you to set chmod on the stored file. For example chmod=664. | 664 | String\n | *fileName* (producer) | Use Expression such as File Language to dynamically set the filename. For consumers, it's used as a filename filter. For producers, it's used to evaluate the filename to write. If an expression is set, it take precedence over the CamelFileName header. (Note: The header itself can also be an Expression). The expression options support both String and Expression types. If the expression is a String type, it is always evaluated using the File Language. If the expression is an Expression type, the specified Expression type is used - this allows you, for instance, to use OGNL expressions. For the consumer, you can use it to filter filenames, so you can for instance consume today's file using the File Language syntax: mydata-$date:now:yyyyMMdd.txt. The producers support the CamelOverruleFileName header which takes precedence over any existing CamelFileName header; the CamelOverruleFileName is a header that is used only once, and makes it easier as this avoids to temporary store CamelFileName and have to restore it afterwards. |  | String\n | *flatten* (producer) | Flatten is used to flatten the file name path to strip any leading paths, so it's just the file name. This allows you to consume recursively into sub-directories, but when you eg write the files to another directory they will be written in a single directory. Setting this to true on the producer enforces that any file name in CamelFileName header will be stripped for any leading paths. | false | boolean\n+| *jailStartingDirectory* (producer) | Used for jailing (restricting) writing files to the starting directory (and sub) only. This is enabled by default to not allow Camel to write files to outside directories (to be more secured out of the box). You can turn this off to allow writing files to directories outside the starting directory, such as parent or root folders. | true | boolean\n | *strictHostKeyChecking* (producer) | Sets whether to use strict host key checking. Possible values are: no, yes | no | String\n | *allowNullBody* (producer) | Used to specify if a null body is allowed during file writing. If set to true then an empty file will be created, when set to false, and attempting to send a null body to the file component, a GenericFileWriteException of 'Cannot write null body to file.' will be thrown. If the fileExist option is set to 'Override', then the file will be truncated, and if set to append the file will remain unchanged. | false | boolean\n | *disconnectOnBatchComplete* (producer) | Whether or not to disconnect from remote FTP server right after a Batch upload is complete. disconnectOnBatchComplete will only disconnect the current connection to the FTP server. | false | boolean"
        },
        {
            "sha": "b002b519d35fccc03e9e018ec1d3973158519c20",
            "filename": "docs/components/modules/ROOT/pages/ftp-component.adoc",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/apache/camel/blob/5b64969d37cf2906efd4623cfd473041ce5132fd/docs%2Fcomponents%2Fmodules%2FROOT%2Fpages%2Fftp-component.adoc",
            "raw_url": "https://github.com/apache/camel/raw/5b64969d37cf2906efd4623cfd473041ce5132fd/docs%2Fcomponents%2Fmodules%2FROOT%2Fpages%2Fftp-component.adoc",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/docs%2Fcomponents%2Fmodules%2FROOT%2Fpages%2Fftp-component.adoc?ref=5b64969d37cf2906efd4623cfd473041ce5132fd",
            "patch": "@@ -100,7 +100,7 @@ with the following path and query parameters:\n |===\n \n \n-==== Query Parameters (109 parameters):\n+==== Query Parameters (110 parameters):\n \n \n [width=\"100%\",cols=\"2,5,^1,2\",options=\"header\"]\n@@ -143,6 +143,7 @@ with the following path and query parameters:\n | *useList* (consumer) | Whether to allow using LIST command when downloading a file. Default is true. In some use cases you may want to download a specific file and are not allowed to use the LIST command, and therefore you can set this option to false. Notice when using this option, then the specific file to download does not include meta-data information such as file size, timestamp, permissions etc, because those information is only possible to retrieve when LIST command is in use. | true | boolean\n | *fileExist* (producer) | What to do if a file already exists with the same name. Override, which is the default, replaces the existing file. Append - adds content to the existing file. Fail - throws a GenericFileOperationException, indicating that there is already an existing file. Ignore - silently ignores the problem and does not override the existing file, but assumes everything is okay. Move - option requires to use the moveExisting option to be configured as well. The option eagerDeleteTargetFile can be used to control what to do if an moving the file, and there exists already an existing file, otherwise causing the move operation to fail. The Move option will move any existing files, before writing the target file. TryRename is only applicable if tempFileName option is in use. This allows to try renaming the file from the temporary name to the actual name, without doing any exists check. This check may be faster on some file systems and especially FTP servers. | Override | GenericFileExist\n | *flatten* (producer) | Flatten is used to flatten the file name path to strip any leading paths, so it's just the file name. This allows you to consume recursively into sub-directories, but when you eg write the files to another directory they will be written in a single directory. Setting this to true on the producer enforces that any file name in CamelFileName header will be stripped for any leading paths. | false | boolean\n+| *jailStartingDirectory* (producer) | Used for jailing (restricting) writing files to the starting directory (and sub) only. This is enabled by default to not allow Camel to write files to outside directories (to be more secured out of the box). You can turn this off to allow writing files to directories outside the starting directory, such as parent or root folders. | true | boolean\n | *moveExisting* (producer) | Expression (such as File Language) used to compute file name to use when fileExist=Move is configured. To move files into a backup subdirectory just enter backup. This option only supports the following File Language tokens: file:name, file:name.ext, file:name.noext, file:onlyname, file:onlyname.noext, file:ext, and file:parent. Notice the file:parent is not supported by the FTP component, as the FTP component can only move any existing files to a relative directory based on current dir as base. |  | String\n | *tempFileName* (producer) | The same as tempPrefix option but offering a more fine grained control on the naming of the temporary filename as it uses the File Language. |  | String\n | *tempPrefix* (producer) | This option is used to write the file using a temporary name and then, after the write is complete, rename it to the real name. Can be used to identify files being written and also avoid consumers (not using exclusive read locks) reading in progress files. Is often used by FTP when uploading big files. |  | String"
        },
        {
            "sha": "cc93937782b94adc748295141626c5bef817d98a",
            "filename": "docs/components/modules/ROOT/pages/ftps-component.adoc",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/apache/camel/blob/5b64969d37cf2906efd4623cfd473041ce5132fd/docs%2Fcomponents%2Fmodules%2FROOT%2Fpages%2Fftps-component.adoc",
            "raw_url": "https://github.com/apache/camel/raw/5b64969d37cf2906efd4623cfd473041ce5132fd/docs%2Fcomponents%2Fmodules%2FROOT%2Fpages%2Fftps-component.adoc",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/docs%2Fcomponents%2Fmodules%2FROOT%2Fpages%2Fftps-component.adoc?ref=5b64969d37cf2906efd4623cfd473041ce5132fd",
            "patch": "@@ -60,7 +60,7 @@ with the following path and query parameters:\n |===\n \n \n-==== Query Parameters (121 parameters):\n+==== Query Parameters (122 parameters):\n \n \n [width=\"100%\",cols=\"2,5,^1,2\",options=\"header\"]\n@@ -103,6 +103,7 @@ with the following path and query parameters:\n | *useList* (consumer) | Whether to allow using LIST command when downloading a file. Default is true. In some use cases you may want to download a specific file and are not allowed to use the LIST command, and therefore you can set this option to false. Notice when using this option, then the specific file to download does not include meta-data information such as file size, timestamp, permissions etc, because those information is only possible to retrieve when LIST command is in use. | true | boolean\n | *fileExist* (producer) | What to do if a file already exists with the same name. Override, which is the default, replaces the existing file. Append - adds content to the existing file. Fail - throws a GenericFileOperationException, indicating that there is already an existing file. Ignore - silently ignores the problem and does not override the existing file, but assumes everything is okay. Move - option requires to use the moveExisting option to be configured as well. The option eagerDeleteTargetFile can be used to control what to do if an moving the file, and there exists already an existing file, otherwise causing the move operation to fail. The Move option will move any existing files, before writing the target file. TryRename is only applicable if tempFileName option is in use. This allows to try renaming the file from the temporary name to the actual name, without doing any exists check. This check may be faster on some file systems and especially FTP servers. | Override | GenericFileExist\n | *flatten* (producer) | Flatten is used to flatten the file name path to strip any leading paths, so it's just the file name. This allows you to consume recursively into sub-directories, but when you eg write the files to another directory they will be written in a single directory. Setting this to true on the producer enforces that any file name in CamelFileName header will be stripped for any leading paths. | false | boolean\n+| *jailStartingDirectory* (producer) | Used for jailing (restricting) writing files to the starting directory (and sub) only. This is enabled by default to not allow Camel to write files to outside directories (to be more secured out of the box). You can turn this off to allow writing files to directories outside the starting directory, such as parent or root folders. | true | boolean\n | *moveExisting* (producer) | Expression (such as File Language) used to compute file name to use when fileExist=Move is configured. To move files into a backup subdirectory just enter backup. This option only supports the following File Language tokens: file:name, file:name.ext, file:name.noext, file:onlyname, file:onlyname.noext, file:ext, and file:parent. Notice the file:parent is not supported by the FTP component, as the FTP component can only move any existing files to a relative directory based on current dir as base. |  | String\n | *tempFileName* (producer) | The same as tempPrefix option but offering a more fine grained control on the naming of the temporary filename as it uses the File Language. |  | String\n | *tempPrefix* (producer) | This option is used to write the file using a temporary name and then, after the write is complete, rename it to the real name. Can be used to identify files being written and also avoid consumers (not using exclusive read locks) reading in progress files. Is often used by FTP when uploading big files. |  | String"
        },
        {
            "sha": "4766037c6413dfafb09cf1d3480289d812aae0f3",
            "filename": "docs/components/modules/ROOT/pages/scp-component.adoc",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/apache/camel/blob/5b64969d37cf2906efd4623cfd473041ce5132fd/docs%2Fcomponents%2Fmodules%2FROOT%2Fpages%2Fscp-component.adoc",
            "raw_url": "https://github.com/apache/camel/raw/5b64969d37cf2906efd4623cfd473041ce5132fd/docs%2Fcomponents%2Fmodules%2FROOT%2Fpages%2Fscp-component.adoc",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/docs%2Fcomponents%2Fmodules%2FROOT%2Fpages%2Fscp-component.adoc?ref=5b64969d37cf2906efd4623cfd473041ce5132fd",
            "patch": "@@ -83,7 +83,7 @@ with the following path and query parameters:\n |===\n \n \n-==== Query Parameters (21 parameters):\n+==== Query Parameters (22 parameters):\n \n \n [width=\"100%\",cols=\"2,5,^1,2\",options=\"header\"]\n@@ -93,6 +93,7 @@ with the following path and query parameters:\n | *chmod* (producer) | Allows you to set chmod on the stored file. For example chmod=664. | 664 | String\n | *fileName* (producer) | Use Expression such as File Language to dynamically set the filename. For consumers, it's used as a filename filter. For producers, it's used to evaluate the filename to write. If an expression is set, it take precedence over the CamelFileName header. (Note: The header itself can also be an Expression). The expression options support both String and Expression types. If the expression is a String type, it is always evaluated using the File Language. If the expression is an Expression type, the specified Expression type is used - this allows you, for instance, to use OGNL expressions. For the consumer, you can use it to filter filenames, so you can for instance consume today's file using the File Language syntax: mydata-$date:now:yyyyMMdd.txt. The producers support the CamelOverruleFileName header which takes precedence over any existing CamelFileName header; the CamelOverruleFileName is a header that is used only once, and makes it easier as this avoids to temporary store CamelFileName and have to restore it afterwards. |  | String\n | *flatten* (producer) | Flatten is used to flatten the file name path to strip any leading paths, so it's just the file name. This allows you to consume recursively into sub-directories, but when you eg write the files to another directory they will be written in a single directory. Setting this to true on the producer enforces that any file name in CamelFileName header will be stripped for any leading paths. | false | boolean\n+| *jailStartingDirectory* (producer) | Used for jailing (restricting) writing files to the starting directory (and sub) only. This is enabled by default to not allow Camel to write files to outside directories (to be more secured out of the box). You can turn this off to allow writing files to directories outside the starting directory, such as parent or root folders. | true | boolean\n | *strictHostKeyChecking* (producer) | Sets whether to use strict host key checking. Possible values are: no, yes | no | String\n | *allowNullBody* (producer) | Used to specify if a null body is allowed during file writing. If set to true then an empty file will be created, when set to false, and attempting to send a null body to the file component, a GenericFileWriteException of 'Cannot write null body to file.' will be thrown. If the fileExist option is set to 'Override', then the file will be truncated, and if set to append the file will remain unchanged. | false | boolean\n | *disconnectOnBatchComplete* (producer) | Whether or not to disconnect from remote FTP server right after a Batch upload is complete. disconnectOnBatchComplete will only disconnect the current connection to the FTP server. | false | boolean"
        },
        {
            "sha": "559b8c4c611a87aa8f7139d124a79d12fe66ef1b",
            "filename": "docs/components/modules/ROOT/pages/sftp-component.adoc",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/apache/camel/blob/5b64969d37cf2906efd4623cfd473041ce5132fd/docs%2Fcomponents%2Fmodules%2FROOT%2Fpages%2Fsftp-component.adoc",
            "raw_url": "https://github.com/apache/camel/raw/5b64969d37cf2906efd4623cfd473041ce5132fd/docs%2Fcomponents%2Fmodules%2FROOT%2Fpages%2Fsftp-component.adoc",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/docs%2Fcomponents%2Fmodules%2FROOT%2Fpages%2Fsftp-component.adoc?ref=5b64969d37cf2906efd4623cfd473041ce5132fd",
            "patch": "@@ -51,7 +51,7 @@ with the following path and query parameters:\n |===\n \n \n-==== Query Parameters (117 parameters):\n+==== Query Parameters (118 parameters):\n \n \n [width=\"100%\",cols=\"2,5,^1,2\",options=\"header\"]\n@@ -87,6 +87,7 @@ with the following path and query parameters:\n | *useList* (consumer) | Whether to allow using LIST command when downloading a file. Default is true. In some use cases you may want to download a specific file and are not allowed to use the LIST command, and therefore you can set this option to false. Notice when using this option, then the specific file to download does not include meta-data information such as file size, timestamp, permissions etc, because those information is only possible to retrieve when LIST command is in use. | true | boolean\n | *fileExist* (producer) | What to do if a file already exists with the same name. Override, which is the default, replaces the existing file. Append - adds content to the existing file. Fail - throws a GenericFileOperationException, indicating that there is already an existing file. Ignore - silently ignores the problem and does not override the existing file, but assumes everything is okay. Move - option requires to use the moveExisting option to be configured as well. The option eagerDeleteTargetFile can be used to control what to do if an moving the file, and there exists already an existing file, otherwise causing the move operation to fail. The Move option will move any existing files, before writing the target file. TryRename is only applicable if tempFileName option is in use. This allows to try renaming the file from the temporary name to the actual name, without doing any exists check. This check may be faster on some file systems and especially FTP servers. | Override | GenericFileExist\n | *flatten* (producer) | Flatten is used to flatten the file name path to strip any leading paths, so it's just the file name. This allows you to consume recursively into sub-directories, but when you eg write the files to another directory they will be written in a single directory. Setting this to true on the producer enforces that any file name in CamelFileName header will be stripped for any leading paths. | false | boolean\n+| *jailStartingDirectory* (producer) | Used for jailing (restricting) writing files to the starting directory (and sub) only. This is enabled by default to not allow Camel to write files to outside directories (to be more secured out of the box). You can turn this off to allow writing files to directories outside the starting directory, such as parent or root folders. | true | boolean\n | *moveExisting* (producer) | Expression (such as File Language) used to compute file name to use when fileExist=Move is configured. To move files into a backup subdirectory just enter backup. This option only supports the following File Language tokens: file:name, file:name.ext, file:name.noext, file:onlyname, file:onlyname.noext, file:ext, and file:parent. Notice the file:parent is not supported by the FTP component, as the FTP component can only move any existing files to a relative directory based on current dir as base. |  | String\n | *tempFileName* (producer) | The same as tempPrefix option but offering a more fine grained control on the naming of the temporary filename as it uses the File Language. |  | String\n | *tempPrefix* (producer) | This option is used to write the file using a temporary name and then, after the write is complete, rename it to the real name. Can be used to identify files being written and also avoid consumers (not using exclusive read locks) reading in progress files. Is often used by FTP when uploading big files. |  | String"
        }
    ]
}