{
    "sha": "cac0e710bf2b8bed9c602fc597e9de1d8903abed",
    "node_id": "MDY6Q29tbWl0NTgyMDg2OTM6Y2FjMGU3MTBiZjJiOGJlZDljNjAyZmM1OTdlOWRlMWQ4OTAzYWJlZA==",
    "commit": {
        "author": {
            "name": "Eclipse Webmaster team",
            "email": "webmaster@eclipse.org",
            "date": "2019-11-12T13:23:30Z"
        },
        "committer": {
            "name": "GitHub",
            "email": "noreply@github.com",
            "date": "2019-11-12T13:23:30Z"
        },
        "message": "Merge pull request from GHSA-pq4w-qm9g-qx68\n\nValidate nonce length and content on receipt and before being used",
        "tree": {
            "sha": "49578dd898f5c83a161c4fb9f4ddb4b08f367761",
            "url": "https://api.github.com/repos/eclipse-milo/milo/git/trees/49578dd898f5c83a161c4fb9f4ddb4b08f367761"
        },
        "url": "https://api.github.com/repos/eclipse-milo/milo/git/commits/cac0e710bf2b8bed9c602fc597e9de1d8903abed",
        "comment_count": 0,
        "verification": {
            "verified": true,
            "reason": "valid",
            "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdyrJSCRBK7hj4Ov3rIwAAdHIIAKMTGEYB7u/AisBaL1sHDXN1\nZhqtygBw6Xx/PovX4Kh9iYnq4ikZaGl3nmMB3sHl70hOYgNdERFiEQIPjRfIVMxi\n/R8gkgWBo7DnSIGDlDjpkix3oFB8S7jWWj2SjP4r180QTx00eszjpRoeYxg6ghjG\nUgpSi76SnPtDUX68aUUC3beX9Hi03th7vLf69C67wlbp/I/GAK/rYdnOzekIvVPk\nh/qrk3rWjaMKQtR0CkkD5LCRMXCcNN5/3oCJ5nqdB2guXLZX7rJn/X1raduOCGUd\nJNSQ8dnstZikBKSXO4k2nFqOz00nFA8GSM2eUS2EptwJHA/4ZBcQ41/QCYRGeDI=\n=6HTA\n-----END PGP SIGNATURE-----\n",
            "payload": "tree 49578dd898f5c83a161c4fb9f4ddb4b08f367761\nparent d9d89aaba7b8ae1374a64abf93e4a44c8f53c116\nparent cc5403d4680bffe36924394cd3bea7d897197d09\nauthor Eclipse Webmaster team <webmaster@eclipse.org> 1573565010 -0500\ncommitter GitHub <noreply@github.com> 1573565010 -0500\n\nMerge pull request from GHSA-pq4w-qm9g-qx68\n\nValidate nonce length and content on receipt and before being used",
            "verified_at": "2024-11-10T15:47:45Z"
        }
    },
    "url": "https://api.github.com/repos/eclipse-milo/milo/commits/cac0e710bf2b8bed9c602fc597e9de1d8903abed",
    "html_url": "https://github.com/eclipse-milo/milo/commit/cac0e710bf2b8bed9c602fc597e9de1d8903abed",
    "comments_url": "https://api.github.com/repos/eclipse-milo/milo/commits/cac0e710bf2b8bed9c602fc597e9de1d8903abed/comments",
    "author": {
        "login": "eclipsewebmaster",
        "id": 4520186,
        "node_id": "MDQ6VXNlcjQ1MjAxODY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4520186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eclipsewebmaster",
        "html_url": "https://github.com/eclipsewebmaster",
        "followers_url": "https://api.github.com/users/eclipsewebmaster/followers",
        "following_url": "https://api.github.com/users/eclipsewebmaster/following{/other_user}",
        "gists_url": "https://api.github.com/users/eclipsewebmaster/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/eclipsewebmaster/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/eclipsewebmaster/subscriptions",
        "organizations_url": "https://api.github.com/users/eclipsewebmaster/orgs",
        "repos_url": "https://api.github.com/users/eclipsewebmaster/repos",
        "events_url": "https://api.github.com/users/eclipsewebmaster/events{/privacy}",
        "received_events_url": "https://api.github.com/users/eclipsewebmaster/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "d9d89aaba7b8ae1374a64abf93e4a44c8f53c116",
            "url": "https://api.github.com/repos/eclipse-milo/milo/commits/d9d89aaba7b8ae1374a64abf93e4a44c8f53c116",
            "html_url": "https://github.com/eclipse-milo/milo/commit/d9d89aaba7b8ae1374a64abf93e4a44c8f53c116"
        },
        {
            "sha": "cc5403d4680bffe36924394cd3bea7d897197d09",
            "url": "https://api.github.com/repos/eclipse-milo/milo/commits/cc5403d4680bffe36924394cd3bea7d897197d09",
            "html_url": "https://github.com/eclipse-milo/milo/commit/cc5403d4680bffe36924394cd3bea7d897197d09"
        }
    ],
    "stats": {
        "total": 202,
        "additions": 170,
        "deletions": 32
    },
    "files": [
        {
            "sha": "b0d4f4df05ead7c64ad15b657b384c486503ad0e",
            "filename": "opc-ua-sdk/sdk-client/src/main/java/org/eclipse/milo/opcua/sdk/client/api/identity/UsernameProvider.java",
            "status": "modified",
            "additions": 4,
            "deletions": 2,
            "changes": 6,
            "blob_url": "https://github.com/eclipse-milo/milo/blob/cac0e710bf2b8bed9c602fc597e9de1d8903abed/opc-ua-sdk%2Fsdk-client%2Fsrc%2Fmain%2Fjava%2Forg%2Feclipse%2Fmilo%2Fopcua%2Fsdk%2Fclient%2Fapi%2Fidentity%2FUsernameProvider.java",
            "raw_url": "https://github.com/eclipse-milo/milo/raw/cac0e710bf2b8bed9c602fc597e9de1d8903abed/opc-ua-sdk%2Fsdk-client%2Fsrc%2Fmain%2Fjava%2Forg%2Feclipse%2Fmilo%2Fopcua%2Fsdk%2Fclient%2Fapi%2Fidentity%2FUsernameProvider.java",
            "contents_url": "https://api.github.com/repos/eclipse-milo/milo/contents/opc-ua-sdk%2Fsdk-client%2Fsrc%2Fmain%2Fjava%2Forg%2Feclipse%2Fmilo%2Fopcua%2Fsdk%2Fclient%2Fapi%2Fidentity%2FUsernameProvider.java?ref=cac0e710bf2b8bed9c602fc597e9de1d8903abed",
            "patch": "@@ -16,7 +16,6 @@\n import java.security.GeneralSecurityException;\n import java.security.cert.X509Certificate;\n import java.util.List;\n-import java.util.Optional;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n import javax.crypto.Cipher;\n@@ -37,6 +36,7 @@\n import org.eclipse.milo.opcua.stack.core.types.structured.UserNameIdentityToken;\n import org.eclipse.milo.opcua.stack.core.types.structured.UserTokenPolicy;\n import org.eclipse.milo.opcua.stack.core.util.CertificateUtil;\n+import org.eclipse.milo.opcua.stack.core.util.NonceUtil;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -134,8 +134,10 @@ public SignedIdentityToken getIdentityToken(EndpointDescription endpoint,\n             logger.warn(\"Error parsing SecurityPolicy for uri={}, falling back to no security.\", securityPolicyUri);\n         }\n \n+        NonceUtil.validateNonce(serverNonce);\n+\n         byte[] passwordBytes = password.getBytes(StandardCharsets.UTF_8);\n-        byte[] nonceBytes = Optional.ofNullable(serverNonce.bytes()).orElse(new byte[0]);\n+        byte[] nonceBytes = serverNonce.bytesOrEmpty();\n \n         ByteBuf buffer = Unpooled.buffer();\n "
        },
        {
            "sha": "c74d381657f037f6d824586e1ea365ab51a0cc2b",
            "filename": "opc-ua-sdk/sdk-client/src/main/java/org/eclipse/milo/opcua/sdk/client/api/identity/X509IdentityProvider.java",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/eclipse-milo/milo/blob/cac0e710bf2b8bed9c602fc597e9de1d8903abed/opc-ua-sdk%2Fsdk-client%2Fsrc%2Fmain%2Fjava%2Forg%2Feclipse%2Fmilo%2Fopcua%2Fsdk%2Fclient%2Fapi%2Fidentity%2FX509IdentityProvider.java",
            "raw_url": "https://github.com/eclipse-milo/milo/raw/cac0e710bf2b8bed9c602fc597e9de1d8903abed/opc-ua-sdk%2Fsdk-client%2Fsrc%2Fmain%2Fjava%2Forg%2Feclipse%2Fmilo%2Fopcua%2Fsdk%2Fclient%2Fapi%2Fidentity%2FX509IdentityProvider.java",
            "contents_url": "https://api.github.com/repos/eclipse-milo/milo/contents/opc-ua-sdk%2Fsdk-client%2Fsrc%2Fmain%2Fjava%2Forg%2Feclipse%2Fmilo%2Fopcua%2Fsdk%2Fclient%2Fapi%2Fidentity%2FX509IdentityProvider.java?ref=cac0e710bf2b8bed9c602fc597e9de1d8903abed",
            "patch": "@@ -22,6 +22,7 @@\n import org.eclipse.milo.opcua.stack.core.types.structured.SignatureData;\n import org.eclipse.milo.opcua.stack.core.types.structured.UserTokenPolicy;\n import org.eclipse.milo.opcua.stack.core.types.structured.X509IdentityToken;\n+import org.eclipse.milo.opcua.stack.core.util.NonceUtil;\n import org.eclipse.milo.opcua.stack.core.util.SignatureUtil;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -67,6 +68,8 @@ public SignedIdentityToken getIdentityToken(EndpointDescription endpoint,\n             logger.warn(\"Error parsing SecurityPolicy for uri={}\", securityPolicyUri);\n         }\n \n+        NonceUtil.validateNonce(serverNonce);\n+\n         X509IdentityToken token = new X509IdentityToken(\n             policyId,\n             ByteString.of(certificate.getEncoded())"
        },
        {
            "sha": "3741ec7af0f995c840596a2c125f007e7f30329b",
            "filename": "opc-ua-sdk/sdk-client/src/main/java/org/eclipse/milo/opcua/sdk/client/session/SessionFsmFactory.java",
            "status": "modified",
            "additions": 24,
            "deletions": 14,
            "changes": 38,
            "blob_url": "https://github.com/eclipse-milo/milo/blob/cac0e710bf2b8bed9c602fc597e9de1d8903abed/opc-ua-sdk%2Fsdk-client%2Fsrc%2Fmain%2Fjava%2Forg%2Feclipse%2Fmilo%2Fopcua%2Fsdk%2Fclient%2Fsession%2FSessionFsmFactory.java",
            "raw_url": "https://github.com/eclipse-milo/milo/raw/cac0e710bf2b8bed9c602fc597e9de1d8903abed/opc-ua-sdk%2Fsdk-client%2Fsrc%2Fmain%2Fjava%2Forg%2Feclipse%2Fmilo%2Fopcua%2Fsdk%2Fclient%2Fsession%2FSessionFsmFactory.java",
            "contents_url": "https://api.github.com/repos/eclipse-milo/milo/contents/opc-ua-sdk%2Fsdk-client%2Fsrc%2Fmain%2Fjava%2Forg%2Feclipse%2Fmilo%2Fopcua%2Fsdk%2Fclient%2Fsession%2FSessionFsmFactory.java?ref=cac0e710bf2b8bed9c602fc597e9de1d8903abed",
            "patch": "@@ -873,18 +873,20 @@ private static CompletableFuture<OpcUaSession> activateSession(\n         try {\n             EndpointDescription endpoint = client.getConfig().getEndpoint();\n \n-            ByteString serverNonce = csr.getServerNonce();\n+            ByteString csrNonce = csr.getServerNonce();\n+\n+            NonceUtil.validateNonce(csrNonce);\n \n             SignedIdentityToken signedIdentityToken =\n                 client.getConfig().getIdentityProvider()\n-                    .getIdentityToken(endpoint, serverNonce);\n+                    .getIdentityToken(endpoint, csrNonce);\n \n             UserIdentityToken userIdentityToken = signedIdentityToken.getToken();\n             SignatureData userTokenSignature = signedIdentityToken.getSignature();\n \n             ActivateSessionRequest request = new ActivateSessionRequest(\n                 client.newRequestHeader(csr.getAuthenticationToken()),\n-                buildClientSignature(client.getConfig(), serverNonce),\n+                buildClientSignature(client.getConfig(), csrNonce),\n                 new SignedSoftwareCertificate[0],\n                 new String[0],\n                 ExtensionObject.encode(client.getSerializationContext(), userIdentityToken),\n@@ -896,19 +898,27 @@ private static CompletableFuture<OpcUaSession> activateSession(\n             return stackClient.sendRequest(request)\n                 .thenApply(ActivateSessionResponse.class::cast)\n                 .thenCompose(asr -> {\n-                    OpcUaSession session = new OpcUaSession(\n-                        csr.getAuthenticationToken(),\n-                        csr.getSessionId(),\n-                        client.getConfig().getSessionName().get(),\n-                        csr.getRevisedSessionTimeout(),\n-                        csr.getMaxRequestMessageSize(),\n-                        csr.getServerCertificate(),\n-                        csr.getServerSoftwareCertificates()\n-                    );\n+                    try {\n+                        ByteString asrNonce = asr.getServerNonce();\n+\n+                        NonceUtil.validateNonce(asrNonce);\n+\n+                        OpcUaSession session = new OpcUaSession(\n+                            csr.getAuthenticationToken(),\n+                            csr.getSessionId(),\n+                            client.getConfig().getSessionName().get(),\n+                            csr.getRevisedSessionTimeout(),\n+                            csr.getMaxRequestMessageSize(),\n+                            csr.getServerCertificate(),\n+                            csr.getServerSoftwareCertificates()\n+                        );\n \n-                    session.setServerNonce(asr.getServerNonce());\n+                        session.setServerNonce(asrNonce);\n \n-                    return completedFuture(session);\n+                        return completedFuture(session);\n+                    } catch (UaException e) {\n+                        return failedFuture(e);\n+                    }\n                 });\n         } catch (Exception ex) {\n             return failedFuture(ex);"
        },
        {
            "sha": "779c69014d3b915ab65e182bcbb55cd4098c37fc",
            "filename": "opc-ua-sdk/sdk-server/src/main/java/org/eclipse/milo/opcua/sdk/server/SessionManager.java",
            "status": "modified",
            "additions": 1,
            "deletions": 3,
            "changes": 4,
            "blob_url": "https://github.com/eclipse-milo/milo/blob/cac0e710bf2b8bed9c602fc597e9de1d8903abed/opc-ua-sdk%2Fsdk-server%2Fsrc%2Fmain%2Fjava%2Forg%2Feclipse%2Fmilo%2Fopcua%2Fsdk%2Fserver%2FSessionManager.java",
            "raw_url": "https://github.com/eclipse-milo/milo/raw/cac0e710bf2b8bed9c602fc597e9de1d8903abed/opc-ua-sdk%2Fsdk-server%2Fsrc%2Fmain%2Fjava%2Forg%2Feclipse%2Fmilo%2Fopcua%2Fsdk%2Fserver%2FSessionManager.java",
            "contents_url": "https://api.github.com/repos/eclipse-milo/milo/contents/opc-ua-sdk%2Fsdk-server%2Fsrc%2Fmain%2Fjava%2Forg%2Feclipse%2Fmilo%2Fopcua%2Fsdk%2Fserver%2FSessionManager.java?ref=cac0e710bf2b8bed9c602fc597e9de1d8903abed",
            "patch": "@@ -187,9 +187,7 @@ public void onCreateSession(ServiceRequest serviceRequest) throws UaException {\n \n         ByteString clientNonce = request.getClientNonce();\n \n-        if (clientNonce.isNotNull() && (clientNonce.length() < 32)) {\n-            throw new UaException(StatusCodes.Bad_NonceInvalid);\n-        }\n+        NonceUtil.validateNonce(clientNonce);\n \n         if (securityPolicy != SecurityPolicy.None && clientNonces.contains(clientNonce)) {\n             throw new UaException(StatusCodes.Bad_NonceInvalid);"
        },
        {
            "sha": "52cfe5113e4136858e6dbf933f8d83774a2a2a49",
            "filename": "opc-ua-stack/stack-client/src/main/java/org/eclipse/milo/opcua/stack/client/transport/uasc/UascClientMessageHandler.java",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/eclipse-milo/milo/blob/cac0e710bf2b8bed9c602fc597e9de1d8903abed/opc-ua-stack%2Fstack-client%2Fsrc%2Fmain%2Fjava%2Forg%2Feclipse%2Fmilo%2Fopcua%2Fstack%2Fclient%2Ftransport%2Fuasc%2FUascClientMessageHandler.java",
            "raw_url": "https://github.com/eclipse-milo/milo/raw/cac0e710bf2b8bed9c602fc597e9de1d8903abed/opc-ua-stack%2Fstack-client%2Fsrc%2Fmain%2Fjava%2Forg%2Feclipse%2Fmilo%2Fopcua%2Fstack%2Fclient%2Ftransport%2Fuasc%2FUascClientMessageHandler.java",
            "contents_url": "https://api.github.com/repos/eclipse-milo/milo/contents/opc-ua-stack%2Fstack-client%2Fsrc%2Fmain%2Fjava%2Forg%2Feclipse%2Fmilo%2Fopcua%2Fstack%2Fclient%2Ftransport%2Fuasc%2FUascClientMessageHandler.java?ref=cac0e710bf2b8bed9c602fc597e9de1d8903abed",
            "patch": "@@ -532,6 +532,8 @@ public void onMessageDecoded(ByteBuf message, long requestId) {\n                                 secureChannel.setChannelId(oscr.getSecurityToken().getChannelId().longValue());\n                                 logger.debug(\"Received OpenSecureChannelResponse.\");\n \n+                                NonceUtil.validateNonce(oscr.getServerNonce(), secureChannel.getSecurityPolicy());\n+\n                                 installSecurityToken(ctx, oscr);\n \n                                 handshakeFuture.complete(secureChannel);"
        },
        {
            "sha": "b5099857bf7d630b90f1679c1ef907a8e1694de6",
            "filename": "opc-ua-stack/stack-core/src/main/java/org/eclipse/milo/opcua/stack/core/util/NonceUtil.java",
            "status": "modified",
            "additions": 60,
            "deletions": 1,
            "changes": 61,
            "blob_url": "https://github.com/eclipse-milo/milo/blob/cac0e710bf2b8bed9c602fc597e9de1d8903abed/opc-ua-stack%2Fstack-core%2Fsrc%2Fmain%2Fjava%2Forg%2Feclipse%2Fmilo%2Fopcua%2Fstack%2Fcore%2Futil%2FNonceUtil.java",
            "raw_url": "https://github.com/eclipse-milo/milo/raw/cac0e710bf2b8bed9c602fc597e9de1d8903abed/opc-ua-stack%2Fstack-core%2Fsrc%2Fmain%2Fjava%2Forg%2Feclipse%2Fmilo%2Fopcua%2Fstack%2Fcore%2Futil%2FNonceUtil.java",
            "contents_url": "https://api.github.com/repos/eclipse-milo/milo/contents/opc-ua-stack%2Fstack-core%2Fsrc%2Fmain%2Fjava%2Forg%2Feclipse%2Fmilo%2Fopcua%2Fstack%2Fcore%2Futil%2FNonceUtil.java?ref=cac0e710bf2b8bed9c602fc597e9de1d8903abed",
            "patch": "@@ -16,12 +16,22 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import org.bouncycastle.util.Arrays;\n+import org.eclipse.milo.opcua.stack.core.StatusCodes;\n+import org.eclipse.milo.opcua.stack.core.UaException;\n import org.eclipse.milo.opcua.stack.core.security.SecurityPolicy;\n import org.eclipse.milo.opcua.stack.core.types.builtin.ByteString;\n import org.slf4j.LoggerFactory;\n \n public class NonceUtil {\n \n+    /**\n+     * The minimum required nonce length for validation by {@link NonceUtil#validateNonce(ByteString)}.\n+     * <p>\n+     * This is specified by OPC UA Part 4 to be least 32 bytes in the CreateSession and ActivateSession services.\n+     */\n+    public static final int MINIMUM_NONCE_LENGTH = 32;\n+\n     private static volatile boolean SECURE_RANDOM_ENABLED = true;\n \n     private static final AtomicReference<SecureRandom> SECURE_RANDOM = new AtomicReference<>();\n@@ -94,6 +104,9 @@ public static ByteString generateNonce(int length) {\n      * <p>\n      * The length is determined by the policy: see {@link #getNonceLength(SecurityPolicy)}.\n      *\n+     * <b>Important</b>: this should only be used to generate a nonce exchanged when establishing a secure channel.\n+     * The nonce used by sessions has different length requirements.\n+     *\n      * @param securityPolicy the {@link SecurityPolicy} to use when determining the nonce length.\n      * @return a nonce of the appropriate length for the given security policy.\n      */\n@@ -111,7 +124,7 @@ public static ByteString generateNonce(SecurityPolicy securityPolicy) {\n      * @param securityPolicy the {@link SecurityPolicy} in use.\n      * @return the minimum nonce length for use with {@code securityPolicy}.\n      */\n-    public static int getNonceLength(SecurityPolicy securityPolicy) {\n+    private static int getNonceLength(SecurityPolicy securityPolicy) {\n         switch (securityPolicy) {\n             case Basic128Rsa15:\n                 return 16;\n@@ -126,4 +139,50 @@ public static int getNonceLength(SecurityPolicy securityPolicy) {\n         }\n     }\n \n+    /**\n+     * Validate that {@code nonce} meets the minimum length requirement for {@code securityPolicy} and is non-zeroes.\n+     * <p>\n+     * <b>Important</b>: this should only be used to validate the nonce exchanged when establishing a secure channel.\n+     * The nonce used by sessions has different length requirements.\n+     *\n+     * @param nonce          the nonce to validate.\n+     * @param securityPolicy the {@link SecurityPolicy} dictating the minimum nonce length.\n+     * @throws UaException if nonce validation failed.\n+     */\n+    public static void validateNonce(ByteString nonce, SecurityPolicy securityPolicy) throws UaException {\n+        validateNonce(nonce, getNonceLength(securityPolicy));\n+    }\n+\n+    /**\n+     * Validate that {@code nonce} is at least {@link NonceUtil#MINIMUM_NONCE_LENGTH} and is non-zeroes.\n+     *\n+     * @param nonce the nonce to validate.\n+     * @throws UaException if nonce validation failed.\n+     */\n+    public static void validateNonce(ByteString nonce) throws UaException {\n+        validateNonce(nonce, MINIMUM_NONCE_LENGTH);\n+    }\n+\n+    /**\n+     * Validate that {@code nonce} is at least {@code minimumLength} and is non-zeroes.\n+     *\n+     * @param nonce         the nonce to validate.\n+     * @param minimumLength the minimum required nonce length\n+     * @throws UaException if nonce validation failed.\n+     */\n+    public static void validateNonce(ByteString nonce, int minimumLength) throws UaException {\n+        byte[] bs = nonce.bytesOrEmpty();\n+\n+        if (bs.length < minimumLength) {\n+            throw new UaException(\n+                StatusCodes.Bad_NonceInvalid,\n+                \"nonce must be at least \" + minimumLength + \" bytes\"\n+            );\n+        }\n+\n+        if (bs.length > 0 && Arrays.areAllZeroes(bs, 0, bs.length)) {\n+            throw new UaException(StatusCodes.Bad_NonceInvalid, \"nonce must be non-zero\");\n+        }\n+    }\n+\n }"
        },
        {
            "sha": "62e60cd341d3fbe4686f8926c2a1ce11c9cb839d",
            "filename": "opc-ua-stack/stack-core/src/test/java/org/eclipse/milo/opcua/stack/core/util/NonceUtilTest.java",
            "status": "added",
            "additions": 74,
            "deletions": 0,
            "changes": 74,
            "blob_url": "https://github.com/eclipse-milo/milo/blob/cac0e710bf2b8bed9c602fc597e9de1d8903abed/opc-ua-stack%2Fstack-core%2Fsrc%2Ftest%2Fjava%2Forg%2Feclipse%2Fmilo%2Fopcua%2Fstack%2Fcore%2Futil%2FNonceUtilTest.java",
            "raw_url": "https://github.com/eclipse-milo/milo/raw/cac0e710bf2b8bed9c602fc597e9de1d8903abed/opc-ua-stack%2Fstack-core%2Fsrc%2Ftest%2Fjava%2Forg%2Feclipse%2Fmilo%2Fopcua%2Fstack%2Fcore%2Futil%2FNonceUtilTest.java",
            "contents_url": "https://api.github.com/repos/eclipse-milo/milo/contents/opc-ua-stack%2Fstack-core%2Fsrc%2Ftest%2Fjava%2Forg%2Feclipse%2Fmilo%2Fopcua%2Fstack%2Fcore%2Futil%2FNonceUtilTest.java?ref=cac0e710bf2b8bed9c602fc597e9de1d8903abed",
            "patch": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright (c) 2019 the Eclipse Milo Authors\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.eclipse.milo.opcua.stack.core.util;\n+\n+import java.util.Arrays;\n+\n+import org.eclipse.milo.opcua.stack.core.UaException;\n+import org.eclipse.milo.opcua.stack.core.security.SecurityPolicy;\n+import org.eclipse.milo.opcua.stack.core.types.builtin.ByteString;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertThrows;\n+\n+public class NonceUtilTest {\n+\n+    @Test\n+    public void testSecureChannelNonceGeneration() {\n+        for (SecurityPolicy securityPolicy : SecurityPolicy.values()) {\n+            ByteString nonce = NonceUtil.generateNonce(securityPolicy);\n+\n+            switch (securityPolicy) {\n+                case None:\n+                    assertEquals(nonce.length(), 0);\n+                    break;\n+                case Basic128Rsa15:\n+                    assertEquals(nonce.length(), 16);\n+                    break;\n+                default:\n+                    assertEquals(nonce.length(), 32);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testNonceGeneration() throws UaException {\n+        for (int i = 32; i < 256; i++) {\n+            ByteString nonce = NonceUtil.generateNonce(i);\n+            assertEquals(nonce.length(), i);\n+            NonceUtil.validateNonce(nonce);\n+        }\n+    }\n+\n+    @Test\n+    public void testShortNonceThrows() {\n+        ByteString nonce = NonceUtil.generateNonce(NonceUtil.MINIMUM_NONCE_LENGTH - 1);\n+\n+        assertThrows(() -> NonceUtil.validateNonce(nonce));\n+    }\n+\n+    @Test\n+    public void testNonceOfZeroesThrows() {\n+        byte[] bs = new byte[NonceUtil.MINIMUM_NONCE_LENGTH];\n+        Arrays.fill(bs, (byte) 0);\n+        ByteString nonce = ByteString.of(bs);\n+\n+        assertThrows(() -> NonceUtil.validateNonce(nonce));\n+    }\n+\n+    @Test\n+    public void testZeroLengthNonceValidation() throws UaException {\n+        // an empty nonce is valid in the secure channel layer when no security is used.\n+        NonceUtil.validateNonce(ByteString.of(new byte[0]), 0);\n+    }\n+\n+}"
        },
        {
            "sha": "23ebf2719e8fd233c68df53e7dfe4a6b83665532",
            "filename": "opc-ua-stack/stack-server/src/main/java/org/eclipse/milo/opcua/stack/server/transport/uasc/UascServerAsymmetricHandler.java",
            "status": "modified",
            "additions": 2,
            "deletions": 12,
            "changes": 14,
            "blob_url": "https://github.com/eclipse-milo/milo/blob/cac0e710bf2b8bed9c602fc597e9de1d8903abed/opc-ua-stack%2Fstack-server%2Fsrc%2Fmain%2Fjava%2Forg%2Feclipse%2Fmilo%2Fopcua%2Fstack%2Fserver%2Ftransport%2Fuasc%2FUascServerAsymmetricHandler.java",
            "raw_url": "https://github.com/eclipse-milo/milo/raw/cac0e710bf2b8bed9c602fc597e9de1d8903abed/opc-ua-stack%2Fstack-server%2Fsrc%2Fmain%2Fjava%2Forg%2Feclipse%2Fmilo%2Fopcua%2Fstack%2Fserver%2Ftransport%2Fuasc%2FUascServerAsymmetricHandler.java",
            "contents_url": "https://api.github.com/repos/eclipse-milo/milo/contents/opc-ua-stack%2Fstack-server%2Fsrc%2Fmain%2Fjava%2Forg%2Feclipse%2Fmilo%2Fopcua%2Fstack%2Fserver%2Ftransport%2Fuasc%2FUascServerAsymmetricHandler.java?ref=cac0e710bf2b8bed9c602fc597e9de1d8903abed",
            "patch": "@@ -58,13 +58,13 @@\n import org.eclipse.milo.opcua.stack.core.types.structured.ResponseHeader;\n import org.eclipse.milo.opcua.stack.core.util.BufferUtil;\n import org.eclipse.milo.opcua.stack.core.util.EndpointUtil;\n+import org.eclipse.milo.opcua.stack.core.util.NonceUtil;\n import org.eclipse.milo.opcua.stack.server.UaStackServer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import static org.eclipse.milo.opcua.stack.core.types.builtin.unsigned.Unsigned.uint;\n import static org.eclipse.milo.opcua.stack.core.util.NonceUtil.generateNonce;\n-import static org.eclipse.milo.opcua.stack.core.util.NonceUtil.getNonceLength;\n \n public class UascServerAsymmetricHandler extends ByteToMessageDecoder implements HeaderDecoder {\n \n@@ -434,17 +434,7 @@ private OpenSecureChannelResponse openSecureChannel(\n             // Validate the remote nonce; it must be non-null and the correct length for the security algorithm.\n             ByteString remoteNonce = request.getClientNonce();\n \n-            if (remoteNonce == null || remoteNonce.isNull()) {\n-                throw new UaException(StatusCodes.Bad_SecurityChecksFailed, \"remote nonce must be non-null\");\n-            }\n-\n-            if (remoteNonce.length() < getNonceLength(secureChannel.getSecurityPolicy())) {\n-                String message = String.format(\n-                    \"remote nonce length must be at least %d bytes\",\n-                    getNonceLength(secureChannel.getSecurityPolicy()));\n-\n-                throw new UaException(StatusCodes.Bad_SecurityChecksFailed, message);\n-            }\n+            NonceUtil.validateNonce(remoteNonce, secureChannel.getSecurityPolicy());\n \n             ByteString localNonce = generateNonce(secureChannel.getSecurityPolicy());\n "
        }
    ]
}