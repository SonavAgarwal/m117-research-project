{
    "sha": "4e410e068b8d367c53766a7da712b1b6f3fd8101",
    "node_id": "MDY6Q29tbWl0MTA2Mzc4OTI6NGU0MTBlMDY4YjhkMzY3YzUzNzY2YTdkYTcxMmIxYjZmM2ZkODEwMQ==",
    "commit": {
        "author": {
            "name": "Oliver Heger",
            "email": "oheger@apache.org",
            "date": "2014-05-24T20:09:43Z"
        },
        "committer": {
            "name": "Oliver Heger",
            "email": "oheger@apache.org",
            "date": "2014-05-24T20:09:43Z"
        },
        "message": "[BEANUTILS-463] Added a specialized BeanIntrospector for suppressing properties.\n\nThis class can remove properties which have been detected by another\nBeanIntrospector object.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/beanutils/trunk@1597343 13f79535-47bb-0310-9956-ffa450edef68",
        "tree": {
            "sha": "33a6bc824c5673bfaf7d74f1e97ba0579adacaf6",
            "url": "https://api.github.com/repos/apache/commons-beanutils/git/trees/33a6bc824c5673bfaf7d74f1e97ba0579adacaf6"
        },
        "url": "https://api.github.com/repos/apache/commons-beanutils/git/commits/4e410e068b8d367c53766a7da712b1b6f3fd8101",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/commons-beanutils/commits/4e410e068b8d367c53766a7da712b1b6f3fd8101",
    "html_url": "https://github.com/apache/commons-beanutils/commit/4e410e068b8d367c53766a7da712b1b6f3fd8101",
    "comments_url": "https://api.github.com/repos/apache/commons-beanutils/commits/4e410e068b8d367c53766a7da712b1b6f3fd8101/comments",
    "author": null,
    "committer": null,
    "parents": [
        {
            "sha": "5380d2d07891a8b84ee85cf7bca3f739402fb218",
            "url": "https://api.github.com/repos/apache/commons-beanutils/commits/5380d2d07891a8b84ee85cf7bca3f739402fb218",
            "html_url": "https://github.com/apache/commons-beanutils/commit/5380d2d07891a8b84ee85cf7bca3f739402fb218"
        }
    ],
    "stats": {
        "total": 191,
        "additions": 191,
        "deletions": 0
    },
    "files": [
        {
            "sha": "450c1e08c4cd0bc84805306db379a80ca9a5f1c6",
            "filename": "src/main/java/org/apache/commons/beanutils/SuppressPropertiesBeanIntrospector.java",
            "status": "added",
            "additions": 64,
            "deletions": 0,
            "changes": 64,
            "blob_url": "https://github.com/apache/commons-beanutils/blob/4e410e068b8d367c53766a7da712b1b6f3fd8101/src%2Fmain%2Fjava%2Forg%2Fapache%2Fcommons%2Fbeanutils%2FSuppressPropertiesBeanIntrospector.java",
            "raw_url": "https://github.com/apache/commons-beanutils/raw/4e410e068b8d367c53766a7da712b1b6f3fd8101/src%2Fmain%2Fjava%2Forg%2Fapache%2Fcommons%2Fbeanutils%2FSuppressPropertiesBeanIntrospector.java",
            "contents_url": "https://api.github.com/repos/apache/commons-beanutils/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fcommons%2Fbeanutils%2FSuppressPropertiesBeanIntrospector.java?ref=4e410e068b8d367c53766a7da712b1b6f3fd8101",
            "patch": "@@ -0,0 +1,64 @@\n+package org.apache.commons.beanutils;\n+\n+import java.beans.IntrospectionException;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * <p>\n+ * A specialized {@code BeanIntrospector} implementation which suppresses some properties.\n+ * </p>\n+ * <p>\n+ * An instance of this class is passed a set with the names of the properties it should\n+ * process. During introspection of a bean class it removes all these properties from the\n+ * {@link IntrospectionContext}. So effectively, properties added by a different\n+ * {@code BeanIntrospector} are removed again.\n+ * </p>\n+ *\n+ * @version $Id$\n+ * @since 1.9.2\n+ */\n+public class SuppressPropertiesBeanIntrospector implements BeanIntrospector {\n+    /** A set with the names of the properties to be suppressed. */\n+    private final Set<String> propertyNames;\n+\n+    /**\n+     * Creates a new instance of {@code SuppressPropertiesBeanIntrospector} and sets the\n+     * names of the properties to be suppressed.\n+     *\n+     * @param propertiesToSuppress the names of the properties to be suppressed (must not\n+     * be <b>null</b>)\n+     * @throws IllegalArgumentException if the collection with property names is\n+     * <b>null</b>\n+     */\n+    public SuppressPropertiesBeanIntrospector(Collection<String> propertiesToSuppress) {\n+        if (propertiesToSuppress == null) {\n+            throw new IllegalArgumentException(\"Property names must not be null!\");\n+        }\n+\n+        propertyNames = Collections.unmodifiableSet(new HashSet<String>(\n+                propertiesToSuppress));\n+    }\n+\n+    /**\n+     * Returns a (unmodifiable) set with the names of the properties which are suppressed\n+     * by this {@code BeanIntrospector}.\n+     *\n+     * @return a set with the names of the suppressed properties\n+     */\n+    public Set<String> getSuppressedProperties() {\n+        return propertyNames;\n+    }\n+\n+    /**\n+     * {@inheritDoc} This implementation removes all properties from the given context it\n+     * is configured for.\n+     */\n+    public void introspect(IntrospectionContext icontext) throws IntrospectionException {\n+        for (String property : getSuppressedProperties()) {\n+            icontext.removePropertyDescriptor(property);\n+        }\n+    }\n+}"
        },
        {
            "sha": "ed93e70430b31a028f833181baeee1d2bb2dc19f",
            "filename": "src/test/java/org/apache/commons/beanutils/SuppressPropertiesBeanIntrospectorTestCase.java",
            "status": "added",
            "additions": 127,
            "deletions": 0,
            "changes": 127,
            "blob_url": "https://github.com/apache/commons-beanutils/blob/4e410e068b8d367c53766a7da712b1b6f3fd8101/src%2Ftest%2Fjava%2Forg%2Fapache%2Fcommons%2Fbeanutils%2FSuppressPropertiesBeanIntrospectorTestCase.java",
            "raw_url": "https://github.com/apache/commons-beanutils/raw/4e410e068b8d367c53766a7da712b1b6f3fd8101/src%2Ftest%2Fjava%2Forg%2Fapache%2Fcommons%2Fbeanutils%2FSuppressPropertiesBeanIntrospectorTestCase.java",
            "contents_url": "https://api.github.com/repos/apache/commons-beanutils/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fcommons%2Fbeanutils%2FSuppressPropertiesBeanIntrospectorTestCase.java?ref=4e410e068b8d367c53766a7da712b1b6f3fd8101",
            "patch": "@@ -0,0 +1,127 @@\n+package org.apache.commons.beanutils;\n+\n+import java.beans.IntrospectionException;\n+import java.beans.PropertyDescriptor;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test class for {@code SuppressPropertiesBeanIntrospector}.\n+ *\n+ * @version $Id$\n+ */\n+public class SuppressPropertiesBeanIntrospectorTestCase extends TestCase {\n+    /**\n+     * Tries to create an instance without properties.\n+     */\n+    public void testInitNoPropertyNames() {\n+        try {\n+            new SuppressPropertiesBeanIntrospector(null);\n+            fail(\"Missing properties not detected!\");\n+        } catch (IllegalArgumentException iaex) {\n+            // ok\n+        }\n+    }\n+\n+    /**\n+     * Tests whether the expected properties have been removed during introspection.\n+     */\n+    public void testRemovePropertiesDuringIntrospection() throws IntrospectionException {\n+        String[] properties = { \"test\", \"other\", \"oneMore\" };\n+        SuppressPropertiesBeanIntrospector introspector = new SuppressPropertiesBeanIntrospector(\n+                Arrays.asList(properties));\n+        IntrospectionContextTestImpl context = new IntrospectionContextTestImpl();\n+\n+        introspector.introspect(context);\n+        assertEquals(\"Wrong number of removed properties\", properties.length, context\n+                .getRemovedProperties().size());\n+        for (String property : properties) {\n+            assertTrue(\"Property not removed: \" + property, context\n+                    .getRemovedProperties().contains(property));\n+        }\n+    }\n+\n+    /**\n+     * Tests that a defensive copy is created from the collection with properties to be\n+     * removed.\n+     */\n+    public void testPropertyNamesDefensiveCopy() throws IntrospectionException {\n+        Collection<String> properties = new HashSet<String>();\n+        properties.add(\"prop1\");\n+        SuppressPropertiesBeanIntrospector introspector = new SuppressPropertiesBeanIntrospector(\n+                properties);\n+        properties.add(\"prop2\");\n+        IntrospectionContextTestImpl context = new IntrospectionContextTestImpl();\n+\n+        introspector.introspect(context);\n+        assertEquals(\"Wrong number of removed properties\", 1, context\n+                .getRemovedProperties().size());\n+        assertTrue(\"Wrong removed property\",\n+                context.getRemovedProperties().contains(\"prop1\"));\n+    }\n+\n+    /**\n+     * Tests that the set with properties to be removed cannot be modified.\n+     */\n+    public void testGetSuppressedPropertiesModify() {\n+        SuppressPropertiesBeanIntrospector introspector = new SuppressPropertiesBeanIntrospector(\n+                Arrays.asList(\"p1\", \"p2\"));\n+        Set<String> properties = introspector.getSuppressedProperties();\n+        try {\n+            properties.add(\"anotherProperty\");\n+            fail(\"Could modify properties\");\n+        } catch (UnsupportedOperationException uoex) {\n+            // ok\n+        }\n+    }\n+\n+    /**\n+     * A test implementation of IntrospectionContext which collects the properties which\n+     * have been removed.\n+     */\n+    private static class IntrospectionContextTestImpl implements IntrospectionContext {\n+        /** Stores the names of properties which have been removed. */\n+        private final Set<String> removedProperties = new HashSet<String>();\n+\n+        /**\n+         * Returns the names of properties which have been removed.\n+         *\n+         * @return the set with removed properties\n+         */\n+        public Set<String> getRemovedProperties() {\n+            return removedProperties;\n+        }\n+\n+        public Class<?> getTargetClass() {\n+            throw new UnsupportedOperationException(\"Unexpected method call!\");\n+        }\n+\n+        public void addPropertyDescriptor(PropertyDescriptor desc) {\n+            throw new UnsupportedOperationException(\"Unexpected method call!\");\n+        }\n+\n+        public void addPropertyDescriptors(PropertyDescriptor[] descriptors) {\n+            throw new UnsupportedOperationException(\"Unexpected method call!\");\n+        }\n+\n+        public boolean hasProperty(String name) {\n+            throw new UnsupportedOperationException(\"Unexpected method call!\");\n+        }\n+\n+        public PropertyDescriptor getPropertyDescriptor(String name) {\n+            throw new UnsupportedOperationException(\"Unexpected method call!\");\n+        }\n+\n+        public void removePropertyDescriptor(String name) {\n+            removedProperties.add(name);\n+        }\n+\n+        public Set<String> propertyNames() {\n+            throw new UnsupportedOperationException(\"Unexpected method call!\");\n+        }\n+    }\n+}"
        }
    ]
}