{
    "sha": "b52bf267c7aa528b282d09c637344650f9034956",
    "node_id": "MDY6Q29tbWl0NTAyMjk0ODc6YjUyYmYyNjdjN2FhNTI4YjI4MmQwOWM2MzczNDQ2NTBmOTAzNDk1Ng==",
    "commit": {
        "author": {
            "name": "Jan H\u00f8ydahl",
            "email": "janhoy@apache.org",
            "date": "2020-06-29T11:18:24Z"
        },
        "committer": {
            "name": "Jan H\u00f8ydahl",
            "email": "janhoy@apache.org",
            "date": "2020-06-29T19:31:21Z"
        },
        "message": "SOLR-14561 Followup - validate params for more core operations  (#1629)\n\nAdd template to solr.in scripts\nAlso testes Windows paths\nAdded RefGuide documentation to some params\n\n(cherry picked from commit 49a3f0a11d41f7124b893a08dc9e67594c32e2ee and adapted to Java8)",
        "tree": {
            "sha": "4bdd90f8fc6ba79b20ee4a673092176c9ed143e4",
            "url": "https://api.github.com/repos/apache/lucene-solr/git/trees/4bdd90f8fc6ba79b20ee4a673092176c9ed143e4"
        },
        "url": "https://api.github.com/repos/apache/lucene-solr/git/commits/b52bf267c7aa528b282d09c637344650f9034956",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/lucene-solr/commits/b52bf267c7aa528b282d09c637344650f9034956",
    "html_url": "https://github.com/apache/lucene-solr/commit/b52bf267c7aa528b282d09c637344650f9034956",
    "comments_url": "https://api.github.com/repos/apache/lucene-solr/commits/b52bf267c7aa528b282d09c637344650f9034956/comments",
    "author": {
        "login": "janhoy",
        "id": 409128,
        "node_id": "MDQ6VXNlcjQwOTEyOA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/409128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/janhoy",
        "html_url": "https://github.com/janhoy",
        "followers_url": "https://api.github.com/users/janhoy/followers",
        "following_url": "https://api.github.com/users/janhoy/following{/other_user}",
        "gists_url": "https://api.github.com/users/janhoy/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/janhoy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/janhoy/subscriptions",
        "organizations_url": "https://api.github.com/users/janhoy/orgs",
        "repos_url": "https://api.github.com/users/janhoy/repos",
        "events_url": "https://api.github.com/users/janhoy/events{/privacy}",
        "received_events_url": "https://api.github.com/users/janhoy/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "janhoy",
        "id": 409128,
        "node_id": "MDQ6VXNlcjQwOTEyOA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/409128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/janhoy",
        "html_url": "https://github.com/janhoy",
        "followers_url": "https://api.github.com/users/janhoy/followers",
        "following_url": "https://api.github.com/users/janhoy/following{/other_user}",
        "gists_url": "https://api.github.com/users/janhoy/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/janhoy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/janhoy/subscriptions",
        "organizations_url": "https://api.github.com/users/janhoy/orgs",
        "repos_url": "https://api.github.com/users/janhoy/repos",
        "events_url": "https://api.github.com/users/janhoy/events{/privacy}",
        "received_events_url": "https://api.github.com/users/janhoy/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "78152876fda92c61d1c6bcdf5e8953042a592b4f",
            "url": "https://api.github.com/repos/apache/lucene-solr/commits/78152876fda92c61d1c6bcdf5e8953042a592b4f",
            "html_url": "https://github.com/apache/lucene-solr/commit/78152876fda92c61d1c6bcdf5e8953042a592b4f"
        }
    ],
    "stats": {
        "total": 128,
        "additions": 96,
        "deletions": 32
    },
    "files": [
        {
            "sha": "0d5d3586c7cae1f1613be6514bf11519d9a6c445",
            "filename": "solr/core/src/java/org/apache/solr/core/SolrPaths.java",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/apache/lucene-solr/blob/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fcore%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Fcore%2FSolrPaths.java",
            "raw_url": "https://github.com/apache/lucene-solr/raw/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fcore%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Fcore%2FSolrPaths.java",
            "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr%2Fcore%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Fcore%2FSolrPaths.java?ref=b52bf267c7aa528b282d09c637344650f9034956",
            "patch": "@@ -119,6 +119,7 @@ private static void logOnceInfo(String key, String msg) {\n    * @throws SolrException if path is outside allowed paths\n    */\n   public static void assertPathAllowed(Path pathToAssert, Set<Path> allowPaths) throws SolrException {\n+    if (pathToAssert == null) return;\n     if (OS.isFamilyWindows() && pathToAssert.toString().startsWith(\"\\\\\\\\\")) {\n       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n           \"Path \" + pathToAssert + \" disallowed. UNC paths not supported. Please use drive letter instead.\");"
        },
        {
            "sha": "d6b779e98ad79f01c9b1ccc2c99016742612711b",
            "filename": "solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java",
            "status": "modified",
            "additions": 15,
            "deletions": 8,
            "changes": 23,
            "blob_url": "https://github.com/apache/lucene-solr/blob/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fcore%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Fhandler%2FReplicationHandler.java",
            "raw_url": "https://github.com/apache/lucene-solr/raw/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fcore%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Fhandler%2FReplicationHandler.java",
            "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr%2Fcore%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Fhandler%2FReplicationHandler.java?ref=b52bf267c7aa528b282d09c637344650f9034956",
            "patch": "@@ -326,10 +326,13 @@ public boolean abortFetch() {\n     }\n   }\n \n+  @SuppressWarnings(\"deprecation\")\n   private void deleteSnapshot(ModifiableSolrParams params, SolrQueryResponse rsp) {\n-    String name = params.required().get(NAME);\n+    params.required().get(NAME);\n \n-    SnapShooter snapShooter = new SnapShooter(core, params.get(CoreAdminParams.BACKUP_LOCATION), params.get(NAME));\n+    String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n+    core.getCoreContainer().assertPathAllowed(location == null ? null : Paths.get(location));\n+    SnapShooter snapShooter = new SnapShooter(core, location, params.get(NAME));\n     snapShooter.validateDeleteSnapshot();\n     snapShooter.deleteSnapAsync(this);\n     rsp.add(STATUS, OK_STATUS);\n@@ -450,7 +453,6 @@ private void restore(SolrParams params, SolrQueryResponse rsp, SolrQueryRequest\n     }\n     String name = params.get(NAME);\n     String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n-\n     String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n     CoreContainer cc = core.getCoreContainer();\n     BackupRepository repo = null;\n@@ -462,11 +464,13 @@ private void restore(SolrParams params, SolrQueryResponse rsp, SolrQueryRequest\n       }\n     } else {\n       repo = new LocalFileSystemRepository();\n+      //If location is not provided then assume that the restore index is present inside the data directory.\n+      if (location == null) {\n+        location = core.getDataDir();\n+      }\n     }\n-\n-    //If location is not provided then assume that the restore index is present inside the data directory.\n-    if (location == null) {\n-      location = core.getDataDir();\n+    if (\"file\".equals(repo.createURI(\"x\").getScheme())) {\n+      core.getCoreContainer().assertPathAllowed(Paths.get(location));\n     }\n \n     URI locationUri = repo.createURI(location);\n@@ -575,8 +579,11 @@ private void doSnapShoot(SolrParams params, SolrQueryResponse rsp, SolrQueryRequ\n           location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n         }\n       }\n+      if (\"file\".equals(repo.createURI(\"x\").getScheme())) {\n+        core.getCoreContainer().assertPathAllowed(Paths.get(location));\n+      }\n \n-      // small race here before the commit point is saved\n+        // small race here before the commit point is saved\n       URI locationUri = repo.createURI(location);\n       String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n       SnapShooter snapShooter = new SnapShooter(repo, core, locationUri, params.get(NAME), commitName);"
        },
        {
            "sha": "10c0c8a3d8c58f10ce78d5542e27ff9d162c2d5d",
            "filename": "solr/core/src/java/org/apache/solr/handler/SnapShooter.java",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/apache/lucene-solr/blob/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fcore%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Fhandler%2FSnapShooter.java",
            "raw_url": "https://github.com/apache/lucene-solr/raw/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fcore%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Fhandler%2FSnapShooter.java",
            "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr%2Fcore%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Fhandler%2FSnapShooter.java?ref=b52bf267c7aa528b282d09c637344650f9034956",
            "patch": "@@ -86,6 +86,9 @@ private void initialize(BackupRepository backupRepo, SolrCore core, URI location\n     this.backupRepo = Objects.requireNonNull(backupRepo);\n     this.baseSnapDirPath = location;\n     this.snapshotName = snapshotName;\n+    if (\"file\".equals(location.getScheme())) {\n+      solrCore.getCoreContainer().assertPathAllowed(Paths.get(location));\n+    }\n     if (snapshotName != null) {\n       directoryName = \"snapshot.\" + snapshotName;\n     } else {"
        },
        {
            "sha": "d9f5de3b76f110ee05a6d58694a4ddfd4e6a9433",
            "filename": "solr/core/src/java/org/apache/solr/handler/admin/MergeIndexesOp.java",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/apache/lucene-solr/blob/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fcore%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Fhandler%2Fadmin%2FMergeIndexesOp.java",
            "raw_url": "https://github.com/apache/lucene-solr/raw/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fcore%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Fhandler%2Fadmin%2FMergeIndexesOp.java",
            "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr%2Fcore%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Fhandler%2Fadmin%2FMergeIndexesOp.java?ref=b52bf267c7aa528b282d09c637344650f9034956",
            "patch": "@@ -18,10 +18,8 @@\n package org.apache.solr.handler.admin;\n \n import java.lang.invoke.MethodHandles;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.nio.file.Paths;\n+import java.util.*;\n \n import com.google.common.collect.Lists;\n import org.apache.lucene.index.DirectoryReader;\n@@ -79,6 +77,8 @@ public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n           sourceCores.add(srcCore);\n         }\n       } else {\n+        // Validate each 'indexDir' input as valid\n+        Arrays.stream(dirNames).forEach(indexDir -> core.getCoreContainer().assertPathAllowed(Paths.get(indexDir)));\n         DirectoryFactory dirFactory = core.getDirectoryFactory();\n         for (int i = 0; i < dirNames.length; i++) {\n           boolean markAsDone = false;"
        },
        {
            "sha": "dc2e9a758f570548d30945e9f585e4c7d254a82a",
            "filename": "solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test.java",
            "status": "modified",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/apache/lucene-solr/blob/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fcloud%2FBasicDistributedZk2Test.java",
            "raw_url": "https://github.com/apache/lucene-solr/raw/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fcloud%2FBasicDistributedZk2Test.java",
            "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fcloud%2FBasicDistributedZk2Test.java?ref=b52bf267c7aa528b282d09c637344650f9034956",
            "patch": "@@ -403,8 +403,9 @@ private void brindDownShardIndexSomeDocsAndRecover() throws Exception {\n       params.set(\"qt\", ReplicationHandler.PATH);\n       params.set(\"command\", \"backup\");\n       params.set(\"name\", backupName);\n-      Path location = createTempDir();\n-      location = FilterPath.unwrap(location).toRealPath();\n+      final Path location = FilterPath.unwrap(createTempDir()).toRealPath();\n+      // Allow non-standard location outside SOLR_HOME\n+      jettys.forEach(j -> j.getCoreContainer().getAllowPaths().add(location));\n       params.set(\"location\", location.toString());\n \n       QueryRequest request = new QueryRequest(params);"
        },
        {
            "sha": "c59b90637ea45699e2abef2ce9b1656f528fa980",
            "filename": "solr/core/src/test/org/apache/solr/cloud/api/collections/AbstractCloudBackupRestoreTestCase.java",
            "status": "modified",
            "additions": 7,
            "deletions": 0,
            "changes": 7,
            "blob_url": "https://github.com/apache/lucene-solr/blob/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fcloud%2Fapi%2Fcollections%2FAbstractCloudBackupRestoreTestCase.java",
            "raw_url": "https://github.com/apache/lucene-solr/raw/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fcloud%2Fapi%2Fcollections%2FAbstractCloudBackupRestoreTestCase.java",
            "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fcloud%2Fapi%2Fcollections%2FAbstractCloudBackupRestoreTestCase.java?ref=b52bf267c7aa528b282d09c637344650f9034956",
            "patch": "@@ -47,6 +47,7 @@\n import org.apache.solr.common.cloud.Slice;\n import org.apache.solr.common.params.CollectionAdminParams;\n import org.apache.solr.common.params.CoreAdminParams;\n+import org.junit.AfterClass;\n import org.junit.BeforeClass;\n import org.junit.Test;\n import org.slf4j.Logger;\n@@ -72,6 +73,12 @@ public abstract class AbstractCloudBackupRestoreTestCase extends SolrCloudTestCa\n   @BeforeClass\n   public static void createCluster() throws Exception {\n     docsSeed = random().nextLong();\n+    System.setProperty(\"solr.allowPaths\", \"*\");\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() throws Exception {\n+    System.clearProperty(\"solr.allowPaths\");\n   }\n \n   /**"
        },
        {
            "sha": "4a3678b06326bb5bc7b77359cef5ddca51276d67",
            "filename": "solr/core/src/test/org/apache/solr/core/snapshots/TestSolrCloudSnapshots.java",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/apache/lucene-solr/blob/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fcore%2Fsnapshots%2FTestSolrCloudSnapshots.java",
            "raw_url": "https://github.com/apache/lucene-solr/raw/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fcore%2Fsnapshots%2FTestSolrCloudSnapshots.java",
            "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fcore%2Fsnapshots%2FTestSolrCloudSnapshots.java?ref=b52bf267c7aa528b282d09c637344650f9034956",
            "patch": "@@ -65,6 +65,7 @@ public class TestSolrCloudSnapshots extends SolrCloudTestCase {\n   @BeforeClass\n   public static void setupClass() throws Exception {\n     useFactory(\"solr.StandardDirectoryFactory\");\n+    System.setProperty(\"solr.allowPaths\", \"*\");\n     configureCluster(NUM_NODES)// nodes\n         .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n         .configure();\n@@ -76,6 +77,7 @@ public static void setupClass() throws Exception {\n   public static void teardownClass() throws Exception {\n     System.clearProperty(\"test.build.data\");\n     System.clearProperty(\"test.cache.data\");\n+    System.clearProperty(\"solr.allowPaths\");\n   }\n \n   @Test"
        },
        {
            "sha": "751d61e3bba02eac51c40646225a6e6f7b72a3c3",
            "filename": "solr/core/src/test/org/apache/solr/core/snapshots/TestSolrCoreSnapshots.java",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/apache/lucene-solr/blob/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fcore%2Fsnapshots%2FTestSolrCoreSnapshots.java",
            "raw_url": "https://github.com/apache/lucene-solr/raw/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fcore%2Fsnapshots%2FTestSolrCoreSnapshots.java",
            "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fcore%2Fsnapshots%2FTestSolrCoreSnapshots.java?ref=b52bf267c7aa528b282d09c637344650f9034956",
            "patch": "@@ -65,6 +65,7 @@ public class TestSolrCoreSnapshots extends SolrCloudTestCase {\n \n   @BeforeClass\n   public static void setupClass() throws Exception {\n+    System.setProperty(\"solr.allowPaths\", \"*\");\n     useFactory(\"solr.StandardDirectoryFactory\");\n     configureCluster(1)// nodes\n         .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n@@ -76,6 +77,7 @@ public static void setupClass() throws Exception {\n   public static void teardownClass() throws Exception {\n     System.clearProperty(\"test.build.data\");\n     System.clearProperty(\"test.cache.data\");\n+    System.clearProperty(\"solr.allowPaths\");\n   }\n \n   @Test"
        },
        {
            "sha": "858b8072e033350a31f938d723d5c00429001cc2",
            "filename": "solr/core/src/test/org/apache/solr/handler/TestCoreBackup.java",
            "status": "modified",
            "additions": 12,
            "deletions": 10,
            "changes": 22,
            "blob_url": "https://github.com/apache/lucene-solr/blob/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fhandler%2FTestCoreBackup.java",
            "raw_url": "https://github.com/apache/lucene-solr/raw/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fhandler%2FTestCoreBackup.java",
            "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fhandler%2FTestCoreBackup.java?ref=b52bf267c7aa528b282d09c637344650f9034956",
            "patch": "@@ -16,16 +16,11 @@\n  */\n package org.apache.solr.handler;\n \n-import java.io.File;\n-import java.io.IOException;\n-import java.util.Arrays;\n-\n-import org.apache.lucene.index.IndexCommit;\n import org.apache.lucene.index.DirectoryReader;\n+import org.apache.lucene.index.IndexCommit;\n import org.apache.lucene.store.Directory;\n import org.apache.lucene.store.FSDirectory;\n import org.apache.lucene.util.TestUtil;\n-\n import org.apache.solr.SolrTestCaseJ4;\n import org.apache.solr.common.params.CoreAdminParams;\n import org.apache.solr.core.CoreContainer;\n@@ -34,8 +29,12 @@\n import org.junit.After;\n import org.junit.Before;\n \n-public class TestCoreBackup extends SolrTestCaseJ4 {\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n \n+public class TestCoreBackup extends SolrTestCaseJ4 {\n   @Before // unique core per test\n   public void coreInit() throws Exception {\n     initCore(\"solrconfig.xml\", \"schema.xml\");\n@@ -63,6 +62,7 @@ public void testBackupWithDocsNotSearchable() throws Exception {\n     String snapshotName = TestUtil.randomSimpleString(random(), 1, 5);\n \n     final CoreContainer cores = h.getCoreContainer();\n+    cores.getAllowPaths().add(Paths.get(location));\n     try (final CoreAdminHandler admin = new CoreAdminHandler(cores)) {\n       SolrQueryResponse resp = new SolrQueryResponse();\n       admin.handleRequestBody\n@@ -96,7 +96,8 @@ public void testBackupBeforeFirstCommit() throws Exception {\n     final CoreAdminHandler admin = new CoreAdminHandler(cores);\n \n     final File backupDir = createTempDir().toFile();\n-    \n+    cores.getAllowPaths().add(backupDir.toPath());\n+\n     { // first a backup before we've ever done *anything*...\n       SolrQueryResponse resp = new SolrQueryResponse();\n       admin.handleRequestBody\n@@ -197,8 +198,9 @@ public void testBackupAfterSoftCommit() throws Exception {\n     final CoreAdminHandler admin = new CoreAdminHandler(cores);\n     \n     final File backupDir = createTempDir().toFile();\n-    \n-    \n+    cores.getAllowPaths().add(backupDir.toPath());\n+\n+\n     { // take an initial 'backup1a' containing our 1 document\n       final SolrQueryResponse resp = new SolrQueryResponse();\n       admin.handleRequestBody"
        },
        {
            "sha": "2c91e3a1cba8b005c7e72a6ca16140f5fcfed761",
            "filename": "solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/apache/lucene-solr/blob/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fhandler%2FTestReplicationHandler.java",
            "raw_url": "https://github.com/apache/lucene-solr/raw/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fhandler%2FTestReplicationHandler.java",
            "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fhandler%2FTestReplicationHandler.java?ref=b52bf267c7aa528b282d09c637344650f9034956",
            "patch": "@@ -1618,7 +1618,9 @@ public void testShouldReportErrorWhenDeletingBackupButNameMissing() {\n   public void testEmptyBackups() throws Exception {\n     final File backupDir = createTempDir().toFile();\n     final BackupStatusChecker backupStatus = new BackupStatusChecker(masterClient);\n-    \n+\n+    masterJetty.getCoreContainer().getAllowPaths().add(backupDir.toPath());\n+\n     { // initial request w/o any committed docs\n       final String backupName = \"empty_backup1\";\n       final GenericSolrRequest req = new GenericSolrRequest"
        },
        {
            "sha": "77e43cbb551128b31e54f8ab3c845544fd670547",
            "filename": "solr/core/src/test/org/apache/solr/handler/TestRestoreCore.java",
            "status": "modified",
            "additions": 11,
            "deletions": 0,
            "changes": 11,
            "blob_url": "https://github.com/apache/lucene-solr/blob/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fhandler%2FTestRestoreCore.java",
            "raw_url": "https://github.com/apache/lucene-solr/raw/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fhandler%2FTestRestoreCore.java",
            "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fhandler%2FTestRestoreCore.java?ref=b52bf267c7aa528b282d09c637344650f9034956",
            "patch": "@@ -125,6 +125,7 @@ public void testSimpleRestore() throws Exception {\n     //Use the default backup location or an externally provided location.\n     if (random().nextBoolean()) {\n       location = createTempDir().toFile().getAbsolutePath();\n+      masterJetty.getCoreContainer().getAllowPaths().add(Paths.get(location)); // Allow core to be created outside SOLR_HOME\n       params += \"&location=\" + URLEncoder.encode(location, \"UTF-8\");\n     }\n \n@@ -181,11 +182,21 @@ public void testSimpleRestore() throws Exception {\n \n   }\n \n+  public void testBackupFailsMissingAllowPaths() throws Exception {\n+    final String params = \"&location=\" + URLEncoder.encode(createTempDir().toFile().getAbsolutePath(), \"UTF-8\");\n+    Throwable t = expectThrows(IOException.class, () -> {\n+      TestReplicationHandlerBackup.runBackupCommand(masterJetty, ReplicationHandler.CMD_BACKUP, params);\n+    });\n+    // The backup command will fail since the tmp dir is outside allowPaths\n+    assertTrue(t.getMessage().contains(\"Server returned HTTP response code: 400\"));\n+  }\n+\n   @Test\n   public void testFailedRestore() throws Exception {\n     int nDocs = BackupRestoreUtils.indexDocs(masterClient, \"collection1\", docsSeed);\n \n     String location = createTempDir().toFile().getAbsolutePath();\n+    masterJetty.getCoreContainer().getAllowPaths().add(Paths.get(location));\n     String snapshotName = TestUtil.randomSimpleString(random(), 1, 5);\n     String params = \"&name=\" + snapshotName + \"&location=\" + URLEncoder.encode(location, \"UTF-8\");\n     String baseUrl = masterJetty.getBaseUrl().toString();"
        },
        {
            "sha": "5db5883f7b88ed45d625567e8ce00784bce566a2",
            "filename": "solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest.java",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/apache/lucene-solr/blob/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fhandler%2FV2ApiIntegrationTest.java",
            "raw_url": "https://github.com/apache/lucene-solr/raw/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fhandler%2FV2ApiIntegrationTest.java",
            "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fhandler%2FV2ApiIntegrationTest.java?ref=b52bf267c7aa528b282d09c637344650f9034956",
            "patch": "@@ -17,8 +17,8 @@\n \n package org.apache.solr.handler;\n \n-\n import java.io.IOException;\n+import java.nio.file.Paths;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -176,6 +176,7 @@ public void testCollectionsApi() throws Exception {\n     backupParams.put(\"name\", \"backup_test\");\n     backupParams.put(\"collection\", COLL_NAME);\n     backupParams.put(\"location\", tempDir);\n+    cluster.getJettySolrRunners().forEach(j -> j.getCoreContainer().getAllowPaths().add(Paths.get(tempDir)));\n     client.request(new V2Request.Builder(\"/c\")\n         .withMethod(SolrRequest.METHOD.POST)\n         .withPayload(Utils.toJSONString(backupPayload))"
        },
        {
            "sha": "9ceaa8a57d439d79a27862616edc62326c47ae19",
            "filename": "solr/core/src/test/org/apache/solr/handler/admin/CoreMergeIndexesAdminHandlerTest.java",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/apache/lucene-solr/blob/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fhandler%2Fadmin%2FCoreMergeIndexesAdminHandlerTest.java",
            "raw_url": "https://github.com/apache/lucene-solr/raw/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fhandler%2Fadmin%2FCoreMergeIndexesAdminHandlerTest.java",
            "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr%2Fcore%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fhandler%2Fadmin%2FCoreMergeIndexesAdminHandlerTest.java?ref=b52bf267c7aa528b282d09c637344650f9034956",
            "patch": "@@ -16,9 +16,7 @@\n  */\n package org.apache.solr.handler.admin;\n \n-import java.io.File;\n-import java.io.IOException;\n-\n+import com.carrotsearch.randomizedtesting.rules.SystemPropertiesRestoreRule;\n import org.apache.lucene.store.Directory;\n import org.apache.lucene.store.LockFactory;\n import org.apache.solr.SolrTestCaseJ4;\n@@ -35,7 +33,8 @@\n import org.junit.rules.RuleChain;\n import org.junit.rules.TestRule;\n \n-import com.carrotsearch.randomizedtesting.rules.SystemPropertiesRestoreRule;\n+import java.io.File;\n+import java.io.IOException;\n \n public class CoreMergeIndexesAdminHandlerTest extends SolrTestCaseJ4 {\n   \n@@ -74,6 +73,7 @@ public void testMergeIndexesCoreAdminHandler() throws Exception {\n     final File workDir = createTempDir().toFile();\n \n     final CoreContainer cores = h.getCoreContainer();\n+    cores.getAllowPaths().add(workDir.toPath());\n \n     try (final CoreAdminHandler admin = new CoreAdminHandler(cores);\n          SolrCore core = cores.getCore(\"collection1\")) {"
        },
        {
            "sha": "ce7d66e03da0c8142bb23a6edf0b011d7ea1c823",
            "filename": "solr/solr-ref-guide/src/index-replication.adoc",
            "status": "modified",
            "additions": 24,
            "deletions": 1,
            "changes": 25,
            "blob_url": "https://github.com/apache/lucene-solr/blob/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fsolr-ref-guide%2Fsrc%2Findex-replication.adoc",
            "raw_url": "https://github.com/apache/lucene-solr/raw/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fsolr-ref-guide%2Fsrc%2Findex-replication.adoc",
            "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr%2Fsolr-ref-guide%2Fsrc%2Findex-replication.adoc?ref=b52bf267c7aa528b282d09c637344650f9034956",
            "patch": "@@ -328,7 +328,30 @@ This command is useful for making periodic backups. There are several supported\n +\n * `numberToKeep:`: This can be used with the backup command unless the `maxNumberOfBackups` initialization parameter has been specified on the handler \u2013 in which case `maxNumberOfBackups` is always used and attempts to use the `numberToKeep` request parameter will cause an error.\n * `name`: (optional) Backup name. The snapshot will be created in a directory called `snapshot.<name>` within the data directory of the core. By default the name is generated using date in `yyyyMMddHHmmssSSS` format. If `location` parameter is passed, that would be used instead of the data directory\n-* `location`: Backup location.\n+* `repository`: The name of the backup repository to use. When not specified, it defaults to local file system.\n+* `location`: Backup location. Value depends on the repository in use. For file system repository, location defaults to core's dataDir, and if specified, it needs to be within `SOLR_HOME`, `SOLR_DATA_HOME` or the paths specified by solr.xml `allowPaths`.\n+\n+`restore`::\n+Restore a backup from a backup repository.\n++\n+[source,bash]\n+http://_master_host:port_/solr/_core_name_/replication?command=restore\n++\n+This command is used to restore a backup. There are several supported request parameters:\n++\n+* `name`: (optional) Backup name. The name of the backed up index snapshot to be restored. If the name is not provided, it looks for backups with snapshot.<timestamp> format in the location directory. It picks the latest timestamp backup in that case.\n+* `repository`: The name of the backup repository where the backup resides. When not specified, it defaults to local file system.\n+* `location`: Backup location. Value depends on the repository in use. For file system repository, location defaults to core's dataDir, and if specified, it needs to be within `SOLR_HOME`, `SOLR_DATA_HOME` or the paths specified by solr.xml `allowPaths`.\n+\n+`restorestatus`::\n+Check the status of a running restore operation.\n++\n+[source,bash]\n+http://_master_host:port_/solr/_core_name_/replication?command=restorestatus\n++\n+This command is used to check the status of a restore operation. This command takes no parameters.\n++\n+The status value can be \"In Progress\" , \"success\" or \"failed\". If it failed then an \"exception\" will also be sent in the response.\n \n `deletebackup`::\n Delete any backup created using the `backup` command."
        },
        {
            "sha": "23a70ce1bf4bf1e8319c6560f3b2823648362898",
            "filename": "solr/solrj/src/test/org/apache/solr/client/solrj/MergeIndexesExampleTestBase.java",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/apache/lucene-solr/blob/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fsolrj%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fclient%2Fsolrj%2FMergeIndexesExampleTestBase.java",
            "raw_url": "https://github.com/apache/lucene-solr/raw/b52bf267c7aa528b282d09c637344650f9034956/solr%2Fsolrj%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fclient%2Fsolrj%2FMergeIndexesExampleTestBase.java",
            "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr%2Fsolrj%2Fsrc%2Ftest%2Forg%2Fapache%2Fsolr%2Fclient%2Fsolrj%2FMergeIndexesExampleTestBase.java?ref=b52bf267c7aa528b282d09c637344650f9034956",
            "patch": "@@ -77,7 +77,8 @@ public void setUp() throws Exception {\n     if (log.isInfoEnabled()) {\n       log.info(\"CORES={} : {}\", cores, cores.getLoadedCoreNames());\n     }\n-\n+    cores.getAllowPaths().add(dataDir1.toPath());\n+    cores.getAllowPaths().add(dataDir2.toPath());\n   }\n \n   @Override"
        },
        {
            "sha": "d552e6d5dd737a498d06bce8e2195583e05cfb27",
            "filename": "solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster.java",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/apache/lucene-solr/blob/b52bf267c7aa528b282d09c637344650f9034956/solr%2Ftest-framework%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Fcloud%2FMiniSolrCloudCluster.java",
            "raw_url": "https://github.com/apache/lucene-solr/raw/b52bf267c7aa528b282d09c637344650f9034956/solr%2Ftest-framework%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Fcloud%2FMiniSolrCloudCluster.java",
            "contents_url": "https://api.github.com/repos/apache/lucene-solr/contents/solr%2Ftest-framework%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Fcloud%2FMiniSolrCloudCluster.java?ref=b52bf267c7aa528b282d09c637344650f9034956",
            "patch": "@@ -91,6 +91,7 @@ public class MiniSolrCloudCluster {\n   public static final String DEFAULT_CLOUD_SOLR_XML = \"<solr>\\n\" +\n       \"\\n\" +\n       \"  <str name=\\\"shareSchema\\\">${shareSchema:false}</str>\\n\" +\n+      \"  <str name=\\\"allowPaths\\\">${solr.allowPaths:}</str>\\n\" +\n       \"  <str name=\\\"configSetBaseDir\\\">${configSetBaseDir:configsets}</str>\\n\" +\n       \"  <str name=\\\"coreRootDirectory\\\">${coreRootDirectory:.}</str>\\n\" +\n       \"  <str name=\\\"collectionsHandler\\\">${collectionsHandler:solr.CollectionsHandler}</str>\\n\" +"
        }
    ]
}