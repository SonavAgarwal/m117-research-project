{
    "sha": "630e1ba065a8215c4e9ac03bfb09be9d655c2b6e",
    "node_id": "MDY6Q29tbWl0MTU5Mjg2NTA6NjMwZTFiYTA2NWE4MjE1YzRlOWFjMDNiZmIwOWJlOWQ2NTVjMmI2ZQ==",
    "commit": {
        "author": {
            "name": "Ren\u00e9 Gielen",
            "email": "rgielen@apache.org",
            "date": "2013-07-15T08:02:23Z"
        },
        "committer": {
            "name": "Ren\u00e9 Gielen",
            "email": "rgielen@apache.org",
            "date": "2013-07-15T08:02:23Z"
        },
        "message": "Merged from STRUTS_2_3_15_X\nWW-4140\n- Lukasz' patch applied [from revision 1502979]\n\ngit-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@1503127 13f79535-47bb-0310-9956-ffa450edef68",
        "tree": {
            "sha": "e9c4d142fba7572c768e2ad820eacf7e5ddc9f97",
            "url": "https://api.github.com/repos/apache/struts/git/trees/e9c4d142fba7572c768e2ad820eacf7e5ddc9f97"
        },
        "url": "https://api.github.com/repos/apache/struts/git/commits/630e1ba065a8215c4e9ac03bfb09be9d655c2b6e",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/struts/commits/630e1ba065a8215c4e9ac03bfb09be9d655c2b6e",
    "html_url": "https://github.com/apache/struts/commit/630e1ba065a8215c4e9ac03bfb09be9d655c2b6e",
    "comments_url": "https://api.github.com/repos/apache/struts/commits/630e1ba065a8215c4e9ac03bfb09be9d655c2b6e/comments",
    "author": {
        "login": "rgielen",
        "id": 64990,
        "node_id": "MDQ6VXNlcjY0OTkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/64990?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rgielen",
        "html_url": "https://github.com/rgielen",
        "followers_url": "https://api.github.com/users/rgielen/followers",
        "following_url": "https://api.github.com/users/rgielen/following{/other_user}",
        "gists_url": "https://api.github.com/users/rgielen/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rgielen/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rgielen/subscriptions",
        "organizations_url": "https://api.github.com/users/rgielen/orgs",
        "repos_url": "https://api.github.com/users/rgielen/repos",
        "events_url": "https://api.github.com/users/rgielen/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rgielen/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "rgielen",
        "id": 64990,
        "node_id": "MDQ6VXNlcjY0OTkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/64990?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rgielen",
        "html_url": "https://github.com/rgielen",
        "followers_url": "https://api.github.com/users/rgielen/followers",
        "following_url": "https://api.github.com/users/rgielen/following{/other_user}",
        "gists_url": "https://api.github.com/users/rgielen/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rgielen/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rgielen/subscriptions",
        "organizations_url": "https://api.github.com/users/rgielen/orgs",
        "repos_url": "https://api.github.com/users/rgielen/repos",
        "events_url": "https://api.github.com/users/rgielen/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rgielen/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "4e3b0d9e9d86cc116441ca53670983fcf983cc18",
            "url": "https://api.github.com/repos/apache/struts/commits/4e3b0d9e9d86cc116441ca53670983fcf983cc18",
            "html_url": "https://github.com/apache/struts/commit/4e3b0d9e9d86cc116441ca53670983fcf983cc18"
        }
    ],
    "stats": {
        "total": 117,
        "additions": 48,
        "deletions": 69
    },
    "files": [
        {
            "sha": "84d477fe695af375f79838c42efde6578ec1ff21",
            "filename": "apps/showcase/src/main/webapp/tags/non-ui/actionPrefix/actionPrefixExample.ftl",
            "status": "modified",
            "additions": 3,
            "deletions": 7,
            "changes": 10,
            "blob_url": "https://github.com/apache/struts/blob/630e1ba065a8215c4e9ac03bfb09be9d655c2b6e/apps%2Fshowcase%2Fsrc%2Fmain%2Fwebapp%2Ftags%2Fnon-ui%2FactionPrefix%2FactionPrefixExample.ftl",
            "raw_url": "https://github.com/apache/struts/raw/630e1ba065a8215c4e9ac03bfb09be9d655c2b6e/apps%2Fshowcase%2Fsrc%2Fmain%2Fwebapp%2Ftags%2Fnon-ui%2FactionPrefix%2FactionPrefixExample.ftl",
            "contents_url": "https://api.github.com/repos/apache/struts/contents/apps%2Fshowcase%2Fsrc%2Fmain%2Fwebapp%2Ftags%2Fnon-ui%2FactionPrefix%2FactionPrefixExample.ftl?ref=630e1ba065a8215c4e9ac03bfb09be9d655c2b6e",
            "patch": "@@ -37,17 +37,13 @@\n \n \t\t\t\t<@s.textfield label=\"Enter Some Text\" name=\"text\" />\n \n-\t\t\t\t<@s.submit name=\"action:actionPrefix\" value=\"%{'action prefix'}\" cssClass=\"btn\" />\n+\t\t\t\t<@s.submit action=\"actionPrefix\" value=\"%{'action prefix'}\" cssClass=\"btn\" />\n \n-\t\t\t\t<@s.submit name=\"method:alternateMethod\" value=\"%{'method prefix'}\" cssClass=\"btn\" />\n-\n-\t\t\t\t<@s.submit name=\"redirect:http://www.google.com\" value=\"%{'redirect prefix'}\" cssClass=\"btn\" />\n-\n-\t\t\t\t<@s.submit name=\"redirect-action:redirectActionPrefix\" value=\"%{'redirect-action prefix'}\" cssClass=\"btn\" />\n+\t\t\t\t<@s.submit method=\"alternateMethod\" value=\"%{'method prefix'}\" cssClass=\"btn\" />\n \n \t\t\t\t<@s.submit value=\"Normal Submit\" cssClass=\"btn\" />\n \n-\t            <@s.submit name=\"action:redirectActionPrefixAction\" value=\"%{'redirect-action without prefix'}\" cssClass=\"btn\" />\n+\t            <@s.submit action=\"redirectActionPrefixAction\" value=\"%{'redirectAction without prefix'}\" cssClass=\"btn\" />\n \n \t        </@s.form>\n \t\t</div>"
        },
        {
            "sha": "2bc9672d428f0401fae7d2ee17ee8d039ea92947",
            "filename": "core/src/main/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapper.java",
            "status": "modified",
            "additions": 8,
            "deletions": 31,
            "changes": 39,
            "blob_url": "https://github.com/apache/struts/blob/630e1ba065a8215c4e9ac03bfb09be9d655c2b6e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fdispatcher%2Fmapper%2FDefaultActionMapper.java",
            "raw_url": "https://github.com/apache/struts/raw/630e1ba065a8215c4e9ac03bfb09be9d655c2b6e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fdispatcher%2Fmapper%2FDefaultActionMapper.java",
            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fdispatcher%2Fmapper%2FDefaultActionMapper.java?ref=630e1ba065a8215c4e9ac03bfb09be9d655c2b6e",
            "patch": "@@ -33,11 +33,15 @@\n import org.apache.struts2.RequestUtils;\n import org.apache.struts2.ServletActionContext;\n import org.apache.struts2.StrutsConstants;\n-import org.apache.struts2.dispatcher.ServletRedirectResult;\n import org.apache.struts2.util.PrefixTrie;\n \n import javax.servlet.http.HttpServletRequest;\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n import java.util.regex.Pattern;\n \n /**\n@@ -164,8 +168,6 @@ public class DefaultActionMapper implements ActionMapper {\n \n     protected static final String METHOD_PREFIX = \"method:\";\n     protected static final String ACTION_PREFIX = \"action:\";\n-    protected static final String REDIRECT_PREFIX = \"redirect:\";\n-    protected static final String REDIRECT_ACTION_PREFIX = \"redirectAction:\";\n \n     protected boolean allowDynamicMethodCalls = true;\n     protected boolean allowSlashesInActionNames = false;\n@@ -186,8 +188,7 @@ public DefaultActionMapper() {\n                 put(METHOD_PREFIX, new ParameterAction() {\n                     public void execute(String key, ActionMapping mapping) {\n                         if (allowDynamicMethodCalls) {\n-                            mapping.setMethod(key.substring(\n-                                    METHOD_PREFIX.length()));\n+                            mapping.setMethod(key.substring(METHOD_PREFIX.length()));\n                         }\n                     }\n                 });\n@@ -203,34 +204,10 @@ public void execute(String key, ActionMapping mapping) {\n                                 name = name.substring(0, bang);\n                             }\n                         }\n-                        mapping.setName(name);\n+                        mapping.setName(cleanupActionName(name));\n                     }\n                 });\n \n-                put(REDIRECT_PREFIX, new ParameterAction() {\n-                    public void execute(String key, ActionMapping mapping) {\n-                        ServletRedirectResult redirect = new ServletRedirectResult();\n-                        container.inject(redirect);\n-                        redirect.setLocation(key.substring(REDIRECT_PREFIX\n-                                .length()));\n-                        mapping.setResult(redirect);\n-                    }\n-                });\n-\n-                put(REDIRECT_ACTION_PREFIX, new ParameterAction() {\n-                    public void execute(String key, ActionMapping mapping) {\n-                        String location = key.substring(REDIRECT_ACTION_PREFIX\n-                                .length());\n-                        ServletRedirectResult redirect = new ServletRedirectResult();\n-                        container.inject(redirect);\n-                        String extension = getDefaultExtension();\n-                        if (extension != null && extension.length() > 0) {\n-                            location += \".\" + extension;\n-                        }\n-                        redirect.setLocation(location);\n-                        mapping.setResult(redirect);\n-                    }\n-                });\n             }\n         };\n     }"
        },
        {
            "sha": "a1270ee24c42a760ef84ab0f7838d19b86ef3230",
            "filename": "core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java",
            "status": "modified",
            "additions": 37,
            "deletions": 31,
            "changes": 68,
            "blob_url": "https://github.com/apache/struts/blob/630e1ba065a8215c4e9ac03bfb09be9d655c2b6e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Fdispatcher%2Fmapper%2FDefaultActionMapperTest.java",
            "raw_url": "https://github.com/apache/struts/raw/630e1ba065a8215c4e9ac03bfb09be9d655c2b6e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Fdispatcher%2Fmapper%2FDefaultActionMapperTest.java",
            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Fdispatcher%2Fmapper%2FDefaultActionMapperTest.java?ref=630e1ba065a8215c4e9ac03bfb09be9d655c2b6e",
            "patch": "@@ -21,21 +21,17 @@\n \n package org.apache.struts2.dispatcher.mapper;\n \n-import com.mockobjects.dynamic.Mock;\n import com.mockobjects.servlet.MockHttpServletRequest;\n import com.opensymphony.xwork2.ActionContext;\n-import com.opensymphony.xwork2.ActionInvocation;\n import com.opensymphony.xwork2.Result;\n import com.opensymphony.xwork2.config.Configuration;\n import com.opensymphony.xwork2.config.ConfigurationManager;\n import com.opensymphony.xwork2.config.entities.PackageConfig;\n import com.opensymphony.xwork2.config.impl.DefaultConfiguration;\n import org.apache.struts2.ServletActionContext;\n import org.apache.struts2.StrutsTestCase;\n-import org.apache.struts2.dispatcher.ServletRedirectResult;\n import org.apache.struts2.dispatcher.StrutsResultSupport;\n import org.apache.struts2.views.jsp.StrutsMockHttpServletRequest;\n-import org.apache.struts2.views.jsp.StrutsMockHttpServletResponse;\n \n import java.util.Arrays;\n import java.util.HashMap;\n@@ -447,7 +443,7 @@ public void testActionPrefix_fromIEImageButton() throws Exception {\n \n     public void testRedirectPrefix() throws Exception {\n         Map parameterMap = new HashMap();\n-        parameterMap.put(DefaultActionMapper.REDIRECT_PREFIX + \"http://www.google.com\", \"\");\n+        parameterMap.put(\"redirect:\" + \"http://www.google.com\", \"\");\n \n         StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();\n         request.setupGetServletPath(\"/someServletPath.action\");\n@@ -458,25 +454,28 @@ public void testRedirectPrefix() throws Exception {\n         ActionMapping actionMapping = defaultActionMapper.getMapping(request, configManager);\n \n         Result result = actionMapping.getResult();\n-        assertNotNull(result);\n-        assertTrue(result instanceof ServletRedirectResult);\n-\n-        Mock invMock = new Mock(ActionInvocation.class);\n-        ActionInvocation inv = (ActionInvocation) invMock.proxy();\n-        ActionContext ctx = ActionContext.getContext();\n-        ctx.put(ServletActionContext.HTTP_REQUEST, request);\n-        StrutsMockHttpServletResponse response = new StrutsMockHttpServletResponse();\n-        ctx.put(ServletActionContext.HTTP_RESPONSE, response);\n-        invMock.expectAndReturn(\"getInvocationContext\", ctx);\n-        invMock.expectAndReturn(\"getStack\", ctx.getValueStack());\n-        result.execute(inv);\n-        assertEquals(\"http://www.google.com\", response.getRedirectURL());\n-        //TODO: need to test location but there's noaccess to the property/method, unless we use reflection\n+        assertNull(result);\n+    }\n+\n+    public void testUnsafeRedirectPrefix() throws Exception {\n+        Map parameterMap = new HashMap();\n+        parameterMap.put(\"redirect:\" + \"http://%{3*4}\", \"\");\n+\n+        StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();\n+        request.setupGetServletPath(\"/someServletPath.action\");\n+        request.setParameterMap(parameterMap);\n+\n+        DefaultActionMapper defaultActionMapper = new DefaultActionMapper();\n+        defaultActionMapper.setContainer(container);\n+        ActionMapping actionMapping = defaultActionMapper.getMapping(request, configManager);\n+\n+        Result result = actionMapping.getResult();\n+        assertNull(result);\n     }\n \n     public void testRedirectActionPrefix() throws Exception {\n         Map parameterMap = new HashMap();\n-        parameterMap.put(DefaultActionMapper.REDIRECT_ACTION_PREFIX + \"myAction\", \"\");\n+        parameterMap.put(\"redirectAction:\" + \"myAction\", \"\");\n \n         StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();\n         request.setupGetServletPath(\"/someServletPath.action\");\n@@ -488,17 +487,29 @@ public void testRedirectActionPrefix() throws Exception {\n \n \n         StrutsResultSupport result = (StrutsResultSupport) actionMapping.getResult();\n-        assertNotNull(result);\n-        assertTrue(result instanceof ServletRedirectResult);\n+        assertNull(result);\n+    }\n \n-        assertEquals(\"myAction.action\", result.getLocation());\n+    public void testUnsafeRedirectActionPrefix() throws Exception {\n+        Map parameterMap = new HashMap();\n+        parameterMap.put(\"redirectAction:\" + \"%{3*4}\", \"\");\n \n-        // TODO: need to test location but there's noaccess to the property/method, unless we use reflection\n+        StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();\n+        request.setupGetServletPath(\"/someServletPath.action\");\n+        request.setParameterMap(parameterMap);\n+\n+        DefaultActionMapper defaultActionMapper = new DefaultActionMapper();\n+        defaultActionMapper.setContainer(container);\n+        ActionMapping actionMapping = defaultActionMapper.getMapping(request, configManager);\n+\n+\n+        StrutsResultSupport result = (StrutsResultSupport) actionMapping.getResult();\n+        assertNull(result);\n     }\n \n     public void testRedirectActionPrefixWithEmptyExtension() throws Exception {\n         Map parameterMap = new HashMap();\n-        parameterMap.put(DefaultActionMapper.REDIRECT_ACTION_PREFIX + \"myAction\", \"\");\n+        parameterMap.put(\"redirectAction:\" + \"myAction\", \"\");\n \n         StrutsMockHttpServletRequest request = new StrutsMockHttpServletRequest();\n         request.setupGetServletPath(\"/someServletPath\");\n@@ -511,12 +522,7 @@ public void testRedirectActionPrefixWithEmptyExtension() throws Exception {\n \n \n         StrutsResultSupport result = (StrutsResultSupport) actionMapping.getResult();\n-        assertNotNull(result);\n-        assertTrue(result instanceof ServletRedirectResult);\n-\n-        assertEquals(\"myAction\", result.getLocation());\n-\n-        // TODO: need to test location but there's noaccess to the property/method, unless we use reflection\n+        assertNull(result);\n     }\n \n     public void testCustomActionPrefix() throws Exception {"
        }
    ]
}