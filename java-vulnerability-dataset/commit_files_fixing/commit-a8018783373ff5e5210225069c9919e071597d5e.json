{
    "sha": "a8018783373ff5e5210225069c9919e071597d5e",
    "node_id": "MDY6Q29tbWl0MjkxNTcwOmE4MDE4NzgzMzczZmY1ZTUyMTAyMjUwNjljOTkxOWUwNzE1OTdkNWU=",
    "commit": {
        "author": {
            "name": "Brian Demers",
            "email": "bdemers@apache.org",
            "date": "2019-11-06T20:31:09Z"
        },
        "committer": {
            "name": "Brian Demers",
            "email": "bdemers@apache.org",
            "date": "2019-11-06T20:31:09Z"
        },
        "message": "Updates the default Cipher mode to GCM in AesCipherService\n\nAdds tests for each mode\nFix issue where GCM needs a different AlgorithmParameterSpec implementation (previously IvParameterSpec was used)",
        "tree": {
            "sha": "d3b10e71137271e0bbf83b397640924bfed70f85",
            "url": "https://api.github.com/repos/apache/shiro/git/trees/d3b10e71137271e0bbf83b397640924bfed70f85"
        },
        "url": "https://api.github.com/repos/apache/shiro/git/commits/a8018783373ff5e5210225069c9919e071597d5e",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/shiro/commits/a8018783373ff5e5210225069c9919e071597d5e",
    "html_url": "https://github.com/apache/shiro/commit/a8018783373ff5e5210225069c9919e071597d5e",
    "comments_url": "https://api.github.com/repos/apache/shiro/commits/a8018783373ff5e5210225069c9919e071597d5e/comments",
    "author": {
        "login": "bdemers",
        "id": 99954,
        "node_id": "MDQ6VXNlcjk5OTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/99954?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bdemers",
        "html_url": "https://github.com/bdemers",
        "followers_url": "https://api.github.com/users/bdemers/followers",
        "following_url": "https://api.github.com/users/bdemers/following{/other_user}",
        "gists_url": "https://api.github.com/users/bdemers/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bdemers/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bdemers/subscriptions",
        "organizations_url": "https://api.github.com/users/bdemers/orgs",
        "repos_url": "https://api.github.com/users/bdemers/repos",
        "events_url": "https://api.github.com/users/bdemers/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bdemers/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "bdemers",
        "id": 99954,
        "node_id": "MDQ6VXNlcjk5OTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/99954?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bdemers",
        "html_url": "https://github.com/bdemers",
        "followers_url": "https://api.github.com/users/bdemers/followers",
        "following_url": "https://api.github.com/users/bdemers/following{/other_user}",
        "gists_url": "https://api.github.com/users/bdemers/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bdemers/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bdemers/subscriptions",
        "organizations_url": "https://api.github.com/users/bdemers/orgs",
        "repos_url": "https://api.github.com/users/bdemers/repos",
        "events_url": "https://api.github.com/users/bdemers/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bdemers/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "92bfac6f83eb4b0e16ef065094e867b0a6556f5b",
            "url": "https://api.github.com/repos/apache/shiro/commits/92bfac6f83eb4b0e16ef065094e867b0a6556f5b",
            "html_url": "https://github.com/apache/shiro/commit/92bfac6f83eb4b0e16ef065094e867b0a6556f5b"
        }
    ],
    "stats": {
        "total": 225,
        "additions": 179,
        "deletions": 46
    },
    "files": [
        {
            "sha": "f88d899c9092f1ee694591fcf7c4747baebd7c50",
            "filename": "crypto/cipher/pom.xml",
            "status": "modified",
            "additions": 7,
            "deletions": 0,
            "changes": 7,
            "blob_url": "https://github.com/apache/shiro/blob/a8018783373ff5e5210225069c9919e071597d5e/crypto%2Fcipher%2Fpom.xml",
            "raw_url": "https://github.com/apache/shiro/raw/a8018783373ff5e5210225069c9919e071597d5e/crypto%2Fcipher%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/shiro/contents/crypto%2Fcipher%2Fpom.xml?ref=a8018783373ff5e5210225069c9919e071597d5e",
            "patch": "@@ -60,6 +60,13 @@\n             <groupId>org.apache.shiro</groupId>\n             <artifactId>shiro-crypto-core</artifactId>\n         </dependency>\n+\n+        <dependency>\n+            <groupId>org.bouncycastle</groupId>\n+            <artifactId>bcprov-jdk15on</artifactId>\n+            <version>1.64</version>\n+            <scope>test</scope>\n+        </dependency>\n     </dependencies>\n \n </project>"
        },
        {
            "sha": "13863ecbb7afda7f72afcc023eb6ce6d7af9a829",
            "filename": "crypto/cipher/src/main/java/org/apache/shiro/crypto/AesCipherService.java",
            "status": "modified",
            "additions": 19,
            "deletions": 4,
            "changes": 23,
            "blob_url": "https://github.com/apache/shiro/blob/a8018783373ff5e5210225069c9919e071597d5e/crypto%2Fcipher%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshiro%2Fcrypto%2FAesCipherService.java",
            "raw_url": "https://github.com/apache/shiro/raw/a8018783373ff5e5210225069c9919e071597d5e/crypto%2Fcipher%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshiro%2Fcrypto%2FAesCipherService.java",
            "contents_url": "https://api.github.com/repos/apache/shiro/contents/crypto%2Fcipher%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshiro%2Fcrypto%2FAesCipherService.java?ref=a8018783373ff5e5210225069c9919e071597d5e",
            "patch": "@@ -18,13 +18,16 @@\n  */\n package org.apache.shiro.crypto;\n \n+import javax.crypto.spec.GCMParameterSpec;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n /**\n  * {@code CipherService} using the {@code AES} cipher algorithm for all encryption, decryption, and key operations.\n  * <p/>\n  * The AES algorithm can support key sizes of {@code 128}, {@code 192} and {@code 256} bits<b>*</b>.  This implementation\n  * defaults to 128 bits.\n  * <p/>\n- * Note that this class retains the parent class's default {@link OperationMode#CBC CBC} mode of operation\n+ * Note that this class retains changes the parent class's default {@link OperationMode#CBC CBC} mode to {@link OperationMode#GCM GCM} of operation\n  * instead of the typical JDK default of {@link OperationMode#ECB ECB}.  {@code ECB} should not be used in\n  * security-sensitive environments because {@code ECB} does not allow for initialization vectors, which are\n  * considered necessary for strong encryption.  See the {@link DefaultBlockCipherService parent class}'s JavaDoc and the\n@@ -59,7 +62,7 @@ public class AesCipherService extends DefaultBlockCipherService {\n      * </tr>\n      * <tr>\n      * <td>{@link #setMode mode}</td>\n-     * <td>{@link OperationMode#CBC CBC}<b>*</b></td>\n+     * <td>{@link OperationMode#GCM GCM}<b>*</b></td>\n      * </tr>\n      * <tr>\n      * <td>{@link #setPaddingScheme paddingScheme}</td>\n@@ -75,16 +78,28 @@ public class AesCipherService extends DefaultBlockCipherService {\n      * </tr>\n      * </table>\n      * <p/>\n-     * <b>*</b> The {@link OperationMode#CBC CBC} operation mode is used instead of the JDK default {@code ECB} to\n+     * <b>*</b> The {@link OperationMode#GCM GCM} operation mode is used instead of the JDK default {@code ECB} to\n      * ensure strong encryption.  {@code ECB} should not be used in security-sensitive environments - see the\n      * {@link DefaultBlockCipherService DefaultBlockCipherService} class JavaDoc's &quot;Operation Mode&quot; section\n      * for more.\n      * <p/>\n-     * <b>**</b>In conjunction with the default {@code CBC} operation mode, initialization vectors are generated by\n+     * <b>**</b>In conjunction with the default {@code GCM} operation mode, initialization vectors are generated by\n      * default to ensure strong encryption.  See the {@link JcaCipherService JcaCipherService} class JavaDoc for more.\n      */\n     public AesCipherService() {\n         super(ALGORITHM_NAME);\n+        setMode(OperationMode.GCM);\n+        setStreamingMode(OperationMode.GCM);\n     }\n \n+    @Override\n+    protected AlgorithmParameterSpec createParameterSpec(byte[] iv, boolean streaming) {\n+\n+        if ((streaming && OperationMode.GCM.name().equals(getStreamingModeName()))\n+        || (!streaming && OperationMode.GCM.name().equals(getModeName()))) {\n+            return new GCMParameterSpec(getKeySize(), iv);\n+        }\n+\n+        return super.createParameterSpec(iv, streaming);\n+    }\n }"
        },
        {
            "sha": "b305b02383294782231fcccc6ba3e454e84287af",
            "filename": "crypto/cipher/src/main/java/org/apache/shiro/crypto/JcaCipherService.java",
            "status": "modified",
            "additions": 7,
            "deletions": 2,
            "changes": 9,
            "blob_url": "https://github.com/apache/shiro/blob/a8018783373ff5e5210225069c9919e071597d5e/crypto%2Fcipher%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshiro%2Fcrypto%2FJcaCipherService.java",
            "raw_url": "https://github.com/apache/shiro/raw/a8018783373ff5e5210225069c9919e071597d5e/crypto%2Fcipher%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshiro%2Fcrypto%2FJcaCipherService.java",
            "contents_url": "https://api.github.com/repos/apache/shiro/contents/crypto%2Fcipher%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshiro%2Fcrypto%2FJcaCipherService.java?ref=a8018783373ff5e5210225069c9919e071597d5e",
            "patch": "@@ -590,13 +590,18 @@ private javax.crypto.Cipher initNewCipher(int jcaCipherMode, byte[] key, byte[]\n \n         javax.crypto.Cipher cipher = newCipherInstance(streaming);\n         java.security.Key jdkKey = new SecretKeySpec(key, getAlgorithmName());\n-        IvParameterSpec ivSpec = null;\n+        AlgorithmParameterSpec ivSpec = null;\n+\n         if (iv != null && iv.length > 0) {\n-            ivSpec = new IvParameterSpec(iv);\n+            ivSpec = createParameterSpec(iv, streaming);\n         }\n \n         init(cipher, jcaCipherMode, jdkKey, ivSpec, getSecureRandom());\n \n         return cipher;\n     }\n+\n+    protected AlgorithmParameterSpec createParameterSpec(byte[] iv, boolean streaming) {\n+        return new IvParameterSpec(iv);\n+    }\n }"
        },
        {
            "sha": "0385420b054905db418f83ee5137960b5d2dd68e",
            "filename": "crypto/cipher/src/test/groovy/org/apache/shiro/crypto/AesCipherServiceTest.groovy",
            "status": "modified",
            "additions": 132,
            "deletions": 26,
            "changes": 158,
            "blob_url": "https://github.com/apache/shiro/blob/a8018783373ff5e5210225069c9919e071597d5e/crypto%2Fcipher%2Fsrc%2Ftest%2Fgroovy%2Forg%2Fapache%2Fshiro%2Fcrypto%2FAesCipherServiceTest.groovy",
            "raw_url": "https://github.com/apache/shiro/raw/a8018783373ff5e5210225069c9919e071597d5e/crypto%2Fcipher%2Fsrc%2Ftest%2Fgroovy%2Forg%2Fapache%2Fshiro%2Fcrypto%2FAesCipherServiceTest.groovy",
            "contents_url": "https://api.github.com/repos/apache/shiro/contents/crypto%2Fcipher%2Fsrc%2Ftest%2Fgroovy%2Forg%2Fapache%2Fshiro%2Fcrypto%2FAesCipherServiceTest.groovy?ref=a8018783373ff5e5210225069c9919e071597d5e",
            "patch": "@@ -18,6 +18,12 @@\n  */\n package org.apache.shiro.crypto\n \n+import org.bouncycastle.jce.provider.BouncyCastleProvider\n+\n+import java.security.Security\n+\n+import static org.junit.Assert.*;\n+\n import org.apache.shiro.codec.CodecSupport\n import org.apache.shiro.util.ByteSource\n import org.junit.Test\n@@ -29,46 +35,146 @@ import static junit.framework.Assert.*\n  *\n  * @since 1.0\n  */\n-public class AesCipherServiceTest {\n+class AesCipherServiceTest {\n \n     private static final String[] PLAINTEXTS = [\n         \"Hello, this is a test.\",\n         \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\n-    ];\n+    ]\n+\n+    AesCipherServiceTest() {\n+        Security.addProvider(new BouncyCastleProvider())\n+    }\n \n     @Test\n-    public void testBlockOperations() {\n-        AesCipherService aes = new AesCipherService();\n+    void testBlockOperations() {\n+        AesCipherService cipher = new AesCipherService()\n+        assertBlock(cipher)\n+    }\n \n-        byte[] key = aes.generateNewKey().getEncoded();\n+    @Test\n+    void testStreamingOperations() {\n+        AesCipherService cipher = new AesCipherService()\n+        assertStreaming(cipher)\n+    }\n \n-        for (String plain : PLAINTEXTS) {\n-            byte[] plaintext = CodecSupport.toBytes(plain);\n-            ByteSource ciphertext = aes.encrypt(plaintext, key);\n-            ByteSource decrypted = aes.decrypt(ciphertext.getBytes(), key);\n-            assertTrue(Arrays.equals(plaintext, decrypted.getBytes()));\n-        }\n+    @Test\n+    void testAesGcm() {\n+        assertBlock(OperationMode.GCM)\n+        assertStreaming(OperationMode.GCM)\n     }\n \n     @Test\n-    public void testStreamingOperations() {\n+    void testCcm() {\n+        assertBlock(OperationMode.CCM, PaddingScheme.NONE, 13 * 8) // 13 bytes\n+        assertStreaming(OperationMode.CCM)\n+    }\n \n-        AesCipherService cipher = new AesCipherService();\n-        byte[] key = cipher.generateNewKey().getEncoded();\n+    @Test\n+    void testCfb() {\n+        assertBlock(OperationMode.CFB)\n+        assertStreaming(OperationMode.CFB)\n+    }\n \n+    @Test\n+    void testCtr() {\n+        assertBlock(OperationMode.CTR)\n+        assertStreaming(OperationMode.CTR)\n+    }\n+\n+    @Test\n+    void testEax() {\n+        assertBlock(OperationMode.EAX)\n+        assertStreaming(OperationMode.EAX)\n+    }\n+\n+    @Test\n+    void testEcb() {\n+        assertBlock(OperationMode.ECB, PaddingScheme.PKCS5)\n+    }\n+\n+    @Test\n+    void testNone() {\n+        assertBlock((OperationMode) null, null)\n+    }\n+\n+    @Test\n+    void testOcb() {\n+        assertBlock(OperationMode.OCB, PaddingScheme.NONE, 15 * 8) // 15 bytes\n+        assertStreaming(OperationMode.OCB, PaddingScheme.NONE, 16 * 8) // 16 bytes\n+    }\n+\n+    @Test\n+    void testOfb() {\n+        assertBlock(OperationMode.OFB)\n+        assertStreaming(OperationMode.OFB)\n+    }\n+\n+    @Test\n+    void testPcbc() {\n+        assertBlock(OperationMode.PCBC, PaddingScheme.PKCS5)\n+        assertStreaming(OperationMode.PCBC, PaddingScheme.PKCS5)\n+    }\n+\n+    private static assertBlock(OperationMode mode, PaddingScheme scheme = PaddingScheme.NONE, int ivSize = JcaCipherService.DEFAULT_KEY_SIZE) {\n+        AesCipherService cipher = new AesCipherService()\n+        cipher.setInitializationVectorSize(ivSize)\n+\n+        if (mode == null) {\n+            cipher.setModeName(null)\n+        } else {\n+            cipher.setMode(mode)\n+        }\n+\n+        if (scheme == null) {\n+            cipher.setPaddingSchemeName(null)\n+        } else {\n+            cipher.setPaddingScheme(scheme)\n+        }\n+        assertBlock(cipher)\n+    }\n+\n+    private static assertStreaming(OperationMode mode, PaddingScheme scheme = PaddingScheme.NONE, int ivSize = JcaCipherService.DEFAULT_KEY_SIZE) {\n+        AesCipherService cipher = new AesCipherService()\n+        cipher.setInitializationVectorSize(ivSize)\n+\n+        if (mode == null) {\n+            cipher.setStreamingModeName(null)\n+        } else {\n+            cipher.setStreamingMode(mode)\n+        }\n+\n+        if (scheme == null) {\n+            cipher.setStreamingPaddingScheme(null)\n+        } else {\n+            cipher.setStreamingPaddingScheme(scheme)\n+        }\n+        assertBlock(cipher)\n+    }\n+\n+    private static assertBlock(AesCipherService cipher, byte[] key = cipher.generateNewKey().getEncoded()) {\n         for (String plain : PLAINTEXTS) {\n-            byte[] plaintext = CodecSupport.toBytes(plain);\n-            InputStream plainIn = new ByteArrayInputStream(plaintext);\n-            ByteArrayOutputStream cipherOut = new ByteArrayOutputStream();\n-            cipher.encrypt(plainIn, cipherOut, key);\n-\n-            byte[] ciphertext = cipherOut.toByteArray();\n-            InputStream cipherIn = new ByteArrayInputStream(ciphertext);\n-            ByteArrayOutputStream plainOut = new ByteArrayOutputStream();\n-            cipher.decrypt(cipherIn, plainOut, key);\n-\n-            byte[] decrypted = plainOut.toByteArray();\n-            assertTrue(Arrays.equals(plaintext, decrypted));\n+            byte[] plaintext = CodecSupport.toBytes(plain)\n+            ByteSource ciphertext = cipher.encrypt(plaintext, key)\n+            ByteSource decrypted = cipher.decrypt(ciphertext.getBytes(), key)\n+            assertTrue(Arrays.equals(plaintext, decrypted.getBytes()))\n+        }\n+    }\n+\n+    private static assertStreaming(AesCipherService cipher, byte[] key = cipher.generateNewKey().getEncoded()) {\n+        for (String plain : PLAINTEXTS) {\n+            byte[] plaintext = CodecSupport.toBytes(plain)\n+            InputStream plainIn = new ByteArrayInputStream(plaintext)\n+            ByteArrayOutputStream cipherOut = new ByteArrayOutputStream()\n+            cipher.encrypt(plainIn, cipherOut, key)\n+\n+            byte[] ciphertext = cipherOut.toByteArray()\n+            InputStream cipherIn = new ByteArrayInputStream(ciphertext)\n+            ByteArrayOutputStream plainOut = new ByteArrayOutputStream()\n+            cipher.decrypt(cipherIn, plainOut, key)\n+\n+            byte[] decrypted = plainOut.toByteArray()\n+            assertTrue(Arrays.equals(plaintext, decrypted))\n         }\n     }\n }"
        },
        {
            "sha": "6eeb2785b34358022dc3825ec5c657c193826b53",
            "filename": "web/src/test/java/org/apache/shiro/web/mgt/CookieRememberMeManagerTest.java",
            "status": "modified",
            "additions": 14,
            "deletions": 14,
            "changes": 28,
            "blob_url": "https://github.com/apache/shiro/blob/a8018783373ff5e5210225069c9919e071597d5e/web%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshiro%2Fweb%2Fmgt%2FCookieRememberMeManagerTest.java",
            "raw_url": "https://github.com/apache/shiro/raw/a8018783373ff5e5210225069c9919e071597d5e/web%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshiro%2Fweb%2Fmgt%2FCookieRememberMeManagerTest.java",
            "contents_url": "https://api.github.com/repos/apache/shiro/contents/web%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshiro%2Fweb%2Fmgt%2FCookieRememberMeManagerTest.java?ref=a8018783373ff5e5210225069c9919e071597d5e",
            "patch": "@@ -125,13 +125,13 @@ public void getRememberedPrincipals() {\n \n         //The following base64 string was determined from the log output of the above 'onSuccessfulLogin' test.\n         //This will have to change any time the PrincipalCollection implementation changes:\n-        final String userPCAesBase64 = \"WlD5MLzzZznN3dQ1lPJO/eScSuY245k29aECNmjUs31o7Yu478hWhaM5Sj\" +\n-                \"jmoe900/72JNu3hcJaPG6Q17Vuz4F8x0kBjbFnPVx4PqzsZYT6yreeS2jwO6OwfI+efqXOKyB2a5KPtnr\" +\n-                \"7jt5kZsyH38XJISb81cf6xqTGUru8zC+kNqJFz7E5RpO0kraBofS5jhMm45gDVjDRkjgPJAzocVWMtrza\" +\n-                \"zy67P8eb+kMSBCqGI251JTNAGboVgQ28KjfaAJ/6LXRJUj7kB7CGia7mgRk+hxzEJGDs81at5VOPqODJr\" +\n-                \"xb8tcIdemFUFIkiYVP9bGs4dP3ECtmw7aNrCzv+84sx3vRFUrd5DbDYpEuE12hF2Y9owDK9sxStbXoF0y\" +\n-                \"A32dhfGDIqS+agsass0sWn8WX2TM9i8SxrUjiFbxqyIG49HbqGrZp5QLM9IuIwO+TzGfF1FzumQGdwmWT\" +\n-                \"xkVapw5UESl34YvA615cb+82ue1I=\";\n+        final String userPCAesBase64 = \"0o6DCfePYTjK4q579qzUFEfkeGRvbBOdKHp2y8/nGAltt1Vz8uW0Z8igeO\" +\n+                \"Tq/yBmcw25f3Q0ui/Leg3x0iQZWhw9Bbu0mFHmHsGxEd6mPwtUpSegIjyX5c/kZpqnb7QLdajPWiczX8P\" +\n+                \"Oc2Eku5+8ye1u38Y8uKlklHxcYCPh0pRiDSBxfjPsLaDfOpGbmPjZd4SVg68i/++TvUjqBNJyb+pDix3f\" +\n+                \"PeuPvReWGcE50iovezVZrEfDOAQ0cZYW35ShypMWOmE9yZnb+p8++StDyAUegryyuIa4pjuRzfMh9D+sN\" +\n+                \"F9tm/EnDC1VCer2S/a0AGlWAQiM7jrWt1sNinZcKIrvShaWI21tONJt8WhozNS2H72lk4p92rfLNHeglT\" +\n+                \"xObxIYxLfTI9KiToSe1nYmpQmbBO8x1wWDkWBG//EqRvhgbIfQVqJp12T0fJC1nFuZuVhw/ZanaAZGDk8\" +\n+                \"7aLMiw3T6FBZtWaspgvfH+0TJrTD8Ra386ekNXNN8JW8=\";\n \n         Cookie[] cookies = new Cookie[]{\n                 new Cookie(CookieRememberMeManager.DEFAULT_REMEMBER_ME_COOKIE_NAME, userPCAesBase64)\n@@ -165,13 +165,13 @@ public void getRememberedPrincipalsNoMoreDefaultCipher() {\n \n         //The following base64 string was determined from the log output of the above 'onSuccessfulLogin' test.\n         //This will have to change any time the PrincipalCollection implementation changes:\n-        final String userPCAesBase64 = \"WlD5MLzzZznN3dQ1lPJO/eScSuY245k29aECNmjUs31o7Yu478hWhaM5Sj\" +\n-            \"jmoe900/72JNu3hcJaPG6Q17Vuz4F8x0kBjbFnPVx4PqzsZYT6yreeS2jwO6OwfI+efqXOKyB2a5KPtnr\" +\n-            \"7jt5kZsyH38XJISb81cf6xqTGUru8zC+kNqJFz7E5RpO0kraBofS5jhMm45gDVjDRkjgPJAzocVWMtrza\" +\n-            \"zy67P8eb+kMSBCqGI251JTNAGboVgQ28KjfaAJ/6LXRJUj7kB7CGia7mgRk+hxzEJGDs81at5VOPqODJr\" +\n-            \"xb8tcIdemFUFIkiYVP9bGs4dP3ECtmw7aNrCzv+84sx3vRFUrd5DbDYpEuE12hF2Y9owDK9sxStbXoF0y\" +\n-            \"A32dhfGDIqS+agsass0sWn8WX2TM9i8SxrUjiFbxqyIG49HbqGrZp5QLM9IuIwO+TzGfF1FzumQGdwmWT\" +\n-            \"xkVapw5UESl34YvA615cb+82ue1I=\";\n+        final String userPCAesBase64 = \"0o6DCfePYTjK4q579qzUFEfkeGRvbBOdKHp2y8/nGAltt1Vz8uW0Z8igeO\" +\n+                \"Tq/yBmcw25f3Q0ui/Leg3x0iQZWhw9Bbu0mFHmHsGxEd6mPwtUpSegIjyX5c/kZpqnb7QLdajPWiczX8P\" +\n+                \"Oc2Eku5+8ye1u38Y8uKlklHxcYCPh0pRiDSBxfjPsLaDfOpGbmPjZd4SVg68i/++TvUjqBNJyb+pDix3f\" +\n+                \"PeuPvReWGcE50iovezVZrEfDOAQ0cZYW35ShypMWOmE9yZnb+p8++StDyAUegryyuIa4pjuRzfMh9D+sN\" +\n+                \"F9tm/EnDC1VCer2S/a0AGlWAQiM7jrWt1sNinZcKIrvShaWI21tONJt8WhozNS2H72lk4p92rfLNHeglT\" +\n+                \"xObxIYxLfTI9KiToSe1nYmpQmbBO8x1wWDkWBG//EqRvhgbIfQVqJp12T0fJC1nFuZuVhw/ZanaAZGDk8\" +\n+                \"7aLMiw3T6FBZtWaspgvfH+0TJrTD8Ra386ekNXNN8JW8=\";\n \n         Cookie[] cookies = new Cookie[]{\n             new Cookie(CookieRememberMeManager.DEFAULT_REMEMBER_ME_COOKIE_NAME, userPCAesBase64)"
        }
    ]
}