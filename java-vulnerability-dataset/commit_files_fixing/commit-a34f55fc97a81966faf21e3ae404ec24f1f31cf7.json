{
    "sha": "a34f55fc97a81966faf21e3ae404ec24f1f31cf7",
    "node_id": "MDY6Q29tbWl0MzM4MjE5NTphMzRmNTVmYzk3YTgxOTY2ZmFmMjFlM2FlNDA0ZWMyNGYxZjMxY2Y3",
    "commit": {
        "author": {
            "name": "Andrew Wittrock",
            "email": "awittrock@pivotal.io",
            "date": "2019-07-24T23:02:24Z"
        },
        "committer": {
            "name": "Andrew Wittrock",
            "email": "awittrock@pivotal.io",
            "date": "2019-07-24T23:03:56Z"
        },
        "message": "Escape error values in SCIM filters\n\n[#166890338]\n\nSigned-off-by: Andrew Edstrom <aedstrom@pivotal.io>",
        "tree": {
            "sha": "3ef12f0102e24eae26b4bc26c19d74ab816684f7",
            "url": "https://api.github.com/repos/cloudfoundry/uaa/git/trees/3ef12f0102e24eae26b4bc26c19d74ab816684f7"
        },
        "url": "https://api.github.com/repos/cloudfoundry/uaa/git/commits/a34f55fc97a81966faf21e3ae404ec24f1f31cf7",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/cloudfoundry/uaa/commits/a34f55fc97a81966faf21e3ae404ec24f1f31cf7",
    "html_url": "https://github.com/cloudfoundry/uaa/commit/a34f55fc97a81966faf21e3ae404ec24f1f31cf7",
    "comments_url": "https://api.github.com/repos/cloudfoundry/uaa/commits/a34f55fc97a81966faf21e3ae404ec24f1f31cf7/comments",
    "author": {
        "login": "Birdrock",
        "id": 5986929,
        "node_id": "MDQ6VXNlcjU5ODY5Mjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5986929?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Birdrock",
        "html_url": "https://github.com/Birdrock",
        "followers_url": "https://api.github.com/users/Birdrock/followers",
        "following_url": "https://api.github.com/users/Birdrock/following{/other_user}",
        "gists_url": "https://api.github.com/users/Birdrock/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Birdrock/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Birdrock/subscriptions",
        "organizations_url": "https://api.github.com/users/Birdrock/orgs",
        "repos_url": "https://api.github.com/users/Birdrock/repos",
        "events_url": "https://api.github.com/users/Birdrock/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Birdrock/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "Birdrock",
        "id": 5986929,
        "node_id": "MDQ6VXNlcjU5ODY5Mjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5986929?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Birdrock",
        "html_url": "https://github.com/Birdrock",
        "followers_url": "https://api.github.com/users/Birdrock/followers",
        "following_url": "https://api.github.com/users/Birdrock/following{/other_user}",
        "gists_url": "https://api.github.com/users/Birdrock/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Birdrock/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Birdrock/subscriptions",
        "organizations_url": "https://api.github.com/users/Birdrock/orgs",
        "repos_url": "https://api.github.com/users/Birdrock/repos",
        "events_url": "https://api.github.com/users/Birdrock/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Birdrock/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "f0dd9868fea0f7c6feab342b219cf72155d8b8b3",
            "url": "https://api.github.com/repos/cloudfoundry/uaa/commits/f0dd9868fea0f7c6feab342b219cf72155d8b8b3",
            "html_url": "https://github.com/cloudfoundry/uaa/commit/f0dd9868fea0f7c6feab342b219cf72155d8b8b3"
        }
    ],
    "stats": {
        "total": 85,
        "additions": 68,
        "deletions": 17
    },
    "files": [
        {
            "sha": "b192e48e8323eab983db1751d24f306f0b641ad2",
            "filename": "server/src/main/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimGroupEndpoints.java",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/a34f55fc97a81966faf21e3ae404ec24f1f31cf7/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fendpoints%2FScimGroupEndpoints.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/a34f55fc97a81966faf21e3ae404ec24f1f31cf7/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fendpoints%2FScimGroupEndpoints.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fendpoints%2FScimGroupEndpoints.java?ref=a34f55fc97a81966faf21e3ae404ec24f1f31cf7",
            "patch": "@@ -53,6 +53,7 @@\n import org.springframework.web.bind.annotation.ResponseStatus;\n import org.springframework.web.client.RestTemplate;\n import org.springframework.web.servlet.View;\n+import org.springframework.web.util.HtmlUtils;\n \n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n@@ -164,7 +165,7 @@ public SearchResults<?> listGroups(\n         try {\n             result = dao.query(filter, sortBy, \"ascending\".equalsIgnoreCase(sortOrder), identityZoneManager.getCurrentIdentityZoneId());\n         } catch (IllegalArgumentException e) {\n-            throw new ScimException(\"Invalid filter expression: [\" + filter + \"]\", HttpStatus.BAD_REQUEST);\n+            throw new ScimException(\"Invalid filter expression: [\" + HtmlUtils.htmlEscape(filter) + \"]\", HttpStatus.BAD_REQUEST);\n         }\n \n         List<ScimGroup> input;"
        },
        {
            "sha": "ce54f8142c06477c15e64ca59380df0aa3f27c37",
            "filename": "server/src/main/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimUserEndpoints.java",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/a34f55fc97a81966faf21e3ae404ec24f1f31cf7/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fendpoints%2FScimUserEndpoints.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/a34f55fc97a81966faf21e3ae404ec24f1f31cf7/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fendpoints%2FScimUserEndpoints.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fendpoints%2FScimUserEndpoints.java?ref=a34f55fc97a81966faf21e3ae404ec24f1f31cf7",
            "patch": "@@ -52,6 +52,7 @@\n import org.springframework.web.bind.annotation.*;\n import org.springframework.web.client.RestTemplate;\n import org.springframework.web.servlet.View;\n+import org.springframework.web.util.HtmlUtils;\n \n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n@@ -370,7 +371,7 @@ public SearchResults<?> findUsers(\n             if (StringUtils.hasText(sortBy)) {\n                 msg += \" [\" +sortBy+\"]\";\n             }\n-            throw new ScimException(msg, HttpStatus.BAD_REQUEST);\n+            throw new ScimException(HtmlUtils.htmlEscape(msg), HttpStatus.BAD_REQUEST);\n         }\n \n         if (!StringUtils.hasLength(attributesCommaSeparated)) {"
        },
        {
            "sha": "a86e13a590fd72199203c8f2b388320a5f84df00",
            "filename": "server/src/main/java/org/cloudfoundry/identity/uaa/scim/endpoints/UserIdConversionEndpoints.java",
            "status": "modified",
            "additions": 7,
            "deletions": 7,
            "changes": 14,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/a34f55fc97a81966faf21e3ae404ec24f1f31cf7/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fendpoints%2FUserIdConversionEndpoints.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/a34f55fc97a81966faf21e3ae404ec24f1f31cf7/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fendpoints%2FUserIdConversionEndpoints.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fendpoints%2FUserIdConversionEndpoints.java?ref=a34f55fc97a81966faf21e3ae404ec24f1f31cf7",
            "patch": "@@ -15,17 +15,16 @@\n \n import com.unboundid.scim.sdk.SCIMException;\n import com.unboundid.scim.sdk.SCIMFilter;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.cloudfoundry.identity.uaa.constants.OriginKeys;\n+import org.cloudfoundry.identity.uaa.provider.IdentityProvider;\n+import org.cloudfoundry.identity.uaa.provider.IdentityProviderProvisioning;\n import org.cloudfoundry.identity.uaa.resources.SearchResults;\n import org.cloudfoundry.identity.uaa.scim.ScimCore;\n import org.cloudfoundry.identity.uaa.scim.exception.ScimException;\n-import org.cloudfoundry.identity.uaa.security.beans.DefaultSecurityContextAccessor;\n import org.cloudfoundry.identity.uaa.security.beans.SecurityContextAccessor;\n-import org.cloudfoundry.identity.uaa.provider.IdentityProvider;\n-import org.cloudfoundry.identity.uaa.provider.IdentityProviderProvisioning;\n import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Controller;\n@@ -36,6 +35,7 @@\n import org.springframework.web.bind.annotation.ResponseBody;\n import org.springframework.web.bind.annotation.ResponseStatus;\n import org.springframework.web.servlet.View;\n+import org.springframework.web.util.HtmlUtils;\n \n import javax.servlet.http.HttpServletRequest;\n import java.util.ArrayList;\n@@ -46,7 +46,6 @@\n /**\n  * @author Dave Syer\n  * @author Luke Taylor\n- *\n  */\n @Controller\n public class UserIdConversionEndpoints implements InitializingBean {\n@@ -137,12 +136,13 @@ private void checkFilter(String filter) {\n             }\n         } catch (SCIMException e) {\n             logger.debug(\"/ids/Users received an invalid filter [\" + filter + \"]\", e);\n-            throw new ScimException(\"Invalid filter '\"+filter+\"'\", HttpStatus.BAD_REQUEST);\n+            throw new ScimException(\"Invalid filter '\" + HtmlUtils.htmlEscape(filter) + \"'\", HttpStatus.BAD_REQUEST);\n         }\n     }\n \n     /**\n      * Returns true if the field 'id' or 'userName' are present in the query.\n+     *\n      * @param filter\n      * @return\n      */"
        },
        {
            "sha": "a6e1d106f3d8abaa279f81581c4f6e351fdd7958",
            "filename": "server/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimGroupEndpointsTests.java",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/a34f55fc97a81966faf21e3ae404ec24f1f31cf7/server%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fendpoints%2FScimGroupEndpointsTests.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/a34f55fc97a81966faf21e3ae404ec24f1f31cf7/server%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fendpoints%2FScimGroupEndpointsTests.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/server%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fendpoints%2FScimGroupEndpointsTests.java?ref=a34f55fc97a81966faf21e3ae404ec24f1f31cf7",
            "patch": "@@ -325,7 +325,7 @@ void testListGroupsWithNameCoFilter() {\n     void testListGroupsWithInvalidFilterFails() {\n         assertThrowsWithMessageThat(ScimException.class,\n                 () -> scimGroupEndpoints.listGroups(\"id,displayName\", \"displayName cr \\\"admin\\\"\", \"created\", \"ascending\", 1, 100),\n-                is(\"Invalid filter expression: [displayName cr \\\"admin\\\"]\"));\n+                is(\"Invalid filter expression: [displayName cr &quot;admin&quot;]\"));\n     }\n \n     @Test"
        },
        {
            "sha": "e8674648665b75e642176672f6d02dcd2fcbbaf2",
            "filename": "server/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimUserEndpointsTests.java",
            "status": "modified",
            "additions": 47,
            "deletions": 7,
            "changes": 54,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/a34f55fc97a81966faf21e3ae404ec24f1f31cf7/server%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fendpoints%2FScimUserEndpointsTests.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/a34f55fc97a81966faf21e3ae404ec24f1f31cf7/server%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fendpoints%2FScimUserEndpointsTests.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/server%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fendpoints%2FScimUserEndpointsTests.java?ref=a34f55fc97a81966faf21e3ae404ec24f1f31cf7",
            "patch": "@@ -9,12 +9,27 @@\n import org.cloudfoundry.identity.uaa.approval.JdbcApprovalStore;\n import org.cloudfoundry.identity.uaa.constants.OriginKeys;\n import org.cloudfoundry.identity.uaa.mfa.JdbcUserGoogleMfaCredentialsProvisioning;\n-import org.cloudfoundry.identity.uaa.provider.*;\n+import org.cloudfoundry.identity.uaa.provider.IdentityProvider;\n+import org.cloudfoundry.identity.uaa.provider.JdbcIdentityProviderProvisioning;\n+import org.cloudfoundry.identity.uaa.provider.LdapIdentityProviderDefinition;\n+import org.cloudfoundry.identity.uaa.provider.OIDCIdentityProviderDefinition;\n+import org.cloudfoundry.identity.uaa.provider.UaaIdentityProviderDefinition;\n import org.cloudfoundry.identity.uaa.resources.SearchResults;\n import org.cloudfoundry.identity.uaa.resources.SimpleAttributeNameMapper;\n import org.cloudfoundry.identity.uaa.resources.jdbc.SimpleSearchQueryConverter;\n-import org.cloudfoundry.identity.uaa.scim.*;\n-import org.cloudfoundry.identity.uaa.scim.exception.*;\n+import org.cloudfoundry.identity.uaa.scim.DisableInternalUserManagementFilter;\n+import org.cloudfoundry.identity.uaa.scim.InternalUserManagementDisabledException;\n+import org.cloudfoundry.identity.uaa.scim.ScimGroup;\n+import org.cloudfoundry.identity.uaa.scim.ScimGroupMember;\n+import org.cloudfoundry.identity.uaa.scim.ScimGroupMembershipManager;\n+import org.cloudfoundry.identity.uaa.scim.ScimMeta;\n+import org.cloudfoundry.identity.uaa.scim.ScimUser;\n+import org.cloudfoundry.identity.uaa.scim.ScimUserProvisioning;\n+import org.cloudfoundry.identity.uaa.scim.exception.InvalidPasswordException;\n+import org.cloudfoundry.identity.uaa.scim.exception.InvalidScimResourceException;\n+import org.cloudfoundry.identity.uaa.scim.exception.ScimException;\n+import org.cloudfoundry.identity.uaa.scim.exception.ScimResourceConflictException;\n+import org.cloudfoundry.identity.uaa.scim.exception.ScimResourceNotFoundException;\n import org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupMembershipManager;\n import org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupProvisioning;\n import org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimUserProvisioning;\n@@ -53,19 +68,41 @@\n import org.springframework.web.HttpMediaTypeException;\n import org.springframework.web.servlet.View;\n \n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n \n import static java.util.Arrays.asList;\n import static org.cloudfoundry.identity.uaa.util.AssertThrowsWithMessage.assertThrowsWithMessageThat;\n import static org.hamcrest.Matchers.containsString;\n import static org.hamcrest.Matchers.hasSize;\n-import static org.junit.Assert.*;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.anyBoolean;\n import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.ArgumentMatchers.eq;\n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyZeroInteractions;\n+import static org.mockito.Mockito.when;\n \n @WithSpring\n @ExtendWith(PollutionPreventionExtension.class)\n@@ -679,7 +716,10 @@ void whenSettingANegativeValueUserMaxCount_ScimUsersEndpointShouldThrowAnExcepti\n \n     @Test\n     void invalidFilterExpression() {\n-        assertThrowsWithMessageThat(ScimException.class, () -> scimUserEndpoints.findUsers(\"id\", \"userName qq 'd'\", null, \"ascending\", 1, 100), containsString(\"Invalid filter\"));\n+        assertThrowsWithMessageThat(\n+                ScimException.class,\n+                () -> scimUserEndpoints.findUsers(\"id\", \"<svg onload=alert(document.domain)>\", null, \"ascending\", 1, 100),\n+                is(\"Invalid filter expression: [&lt;svg onload=alert(document.domain)&gt;]\"));\n     }\n \n     @Test"
        },
        {
            "sha": "79f9e6af6fcc627dbd514d2838b042505de0e850",
            "filename": "server/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/UserIdConversionEndpointsTests.java",
            "status": "modified",
            "additions": 9,
            "deletions": 0,
            "changes": 9,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/a34f55fc97a81966faf21e3ae404ec24f1f31cf7/server%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fendpoints%2FUserIdConversionEndpointsTests.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/a34f55fc97a81966faf21e3ae404ec24f1f31cf7/server%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fendpoints%2FUserIdConversionEndpointsTests.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/server%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fendpoints%2FUserIdConversionEndpointsTests.java?ref=a34f55fc97a81966faf21e3ae404ec24f1f31cf7",
            "patch": "@@ -13,6 +13,7 @@\n \n package org.cloudfoundry.identity.uaa.scim.endpoints;\n \n+import org.cloudfoundry.identity.uaa.impl.config.UaaConfiguration;\n import org.cloudfoundry.identity.uaa.provider.IdentityProviderProvisioning;\n import org.cloudfoundry.identity.uaa.resources.SearchResults;\n import org.cloudfoundry.identity.uaa.scim.exception.ScimException;\n@@ -30,6 +31,7 @@\n \n import static junit.framework.Assert.assertTrue;\n import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.when;\n \n@@ -72,6 +74,13 @@ public void testHappyDay() {\n         endpoints.findUsers(\"userName eq \\\"marissa\\\"\", \"ascending\", 0, 100, false);\n     }\n \n+    @Test\n+    public void testSanitizeExceptionInFilter() {\n+        expected.expect(ScimException.class);\n+        expected.expectMessage(is(\"Invalid filter '&lt;svg onload=alert(document.domain)&gt;'\"));\n+        endpoints.findUsers(\"<svg onload=alert(document.domain)>\", \"ascending\", 0, 100, false);\n+    }\n+\n     @Test\n     public void testBadFieldInFilter() {\n         expected.expect(ScimException.class);"
        }
    ]
}