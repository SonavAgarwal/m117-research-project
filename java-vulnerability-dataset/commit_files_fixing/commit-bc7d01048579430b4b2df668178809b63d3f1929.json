{
    "sha": "bc7d01048579430b4b2df668178809b63d3f1929",
    "node_id": "MDY6Q29tbWl0MTE0ODc1MzpiYzdkMDEwNDg1Nzk0MzBiNGIyZGY2NjgxNzg4MDliNjNkM2YxOTI5",
    "commit": {
        "author": {
            "name": "S\u00e9bastien Deleuze",
            "email": "sdeleuze@pivotal.io",
            "date": "2020-01-10T13:51:55Z"
        },
        "committer": {
            "name": "S\u00e9bastien Deleuze",
            "email": "sdeleuze@pivotal.io",
            "date": "2020-01-13T07:33:14Z"
        },
        "message": "Update CORS support\n\nThis commit updates CORS support in order to check Origin header\nin CorsUtils#isPreFlightRequest which does not change how Spring\nMVC or WebFlux process CORS request but is more correct in term\nof behavior since it is a public API potentially used in another\ncontexts.\n\nIt also removes an unnecessary check in\nAbstractHandlerMethodMapping#hasCorsConfigurationSource and processes\nevery preflight request with PreFlightHandler.\n\nCloses gh-24327",
        "tree": {
            "sha": "e3b7362cc824af78ed0613cfa2d1248177d434b7",
            "url": "https://api.github.com/repos/spring-projects/spring-framework/git/trees/e3b7362cc824af78ed0613cfa2d1248177d434b7"
        },
        "url": "https://api.github.com/repos/spring-projects/spring-framework/git/commits/bc7d01048579430b4b2df668178809b63d3f1929",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bc7d01048579430b4b2df668178809b63d3f1929",
    "html_url": "https://github.com/spring-projects/spring-framework/commit/bc7d01048579430b4b2df668178809b63d3f1929",
    "comments_url": "https://api.github.com/repos/spring-projects/spring-framework/commits/bc7d01048579430b4b2df668178809b63d3f1929/comments",
    "author": {
        "login": "sdeleuze",
        "id": 141109,
        "node_id": "MDQ6VXNlcjE0MTEwOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/141109?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdeleuze",
        "html_url": "https://github.com/sdeleuze",
        "followers_url": "https://api.github.com/users/sdeleuze/followers",
        "following_url": "https://api.github.com/users/sdeleuze/following{/other_user}",
        "gists_url": "https://api.github.com/users/sdeleuze/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sdeleuze/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sdeleuze/subscriptions",
        "organizations_url": "https://api.github.com/users/sdeleuze/orgs",
        "repos_url": "https://api.github.com/users/sdeleuze/repos",
        "events_url": "https://api.github.com/users/sdeleuze/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sdeleuze/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "sdeleuze",
        "id": 141109,
        "node_id": "MDQ6VXNlcjE0MTEwOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/141109?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdeleuze",
        "html_url": "https://github.com/sdeleuze",
        "followers_url": "https://api.github.com/users/sdeleuze/followers",
        "following_url": "https://api.github.com/users/sdeleuze/following{/other_user}",
        "gists_url": "https://api.github.com/users/sdeleuze/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sdeleuze/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sdeleuze/subscriptions",
        "organizations_url": "https://api.github.com/users/sdeleuze/orgs",
        "repos_url": "https://api.github.com/users/sdeleuze/repos",
        "events_url": "https://api.github.com/users/sdeleuze/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sdeleuze/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "8396e6bdd1c03b2fb32e5cf468f7f04b192d8474",
            "url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8396e6bdd1c03b2fb32e5cf468f7f04b192d8474",
            "html_url": "https://github.com/spring-projects/spring-framework/commit/8396e6bdd1c03b2fb32e5cf468f7f04b192d8474"
        }
    ],
    "stats": {
        "total": 100,
        "additions": 74,
        "deletions": 26
    },
    "files": [
        {
            "sha": "eec489d6cc27c1d0b6a5102aaa886e027a6929e2",
            "filename": "spring-web/src/main/java/org/springframework/web/cors/CorsUtils.java",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/bc7d01048579430b4b2df668178809b63d3f1929/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2FCorsUtils.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/bc7d01048579430b4b2df668178809b63d3f1929/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2FCorsUtils.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2FCorsUtils.java?ref=bc7d01048579430b4b2df668178809b63d3f1929",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -66,12 +66,12 @@ else if (\"https\".equals(scheme) || \"wss\".equals(scheme)) {\n \t}\n \n \t/**\n-\t * Returns {@code true} if the request is a valid CORS pre-flight one.\n-\t * To be used in combination with {@link #isCorsRequest(HttpServletRequest)} since\n-\t * regular CORS checks are not invoked here for performance reasons.\n+\t * Returns {@code true} if the request is a valid CORS pre-flight one by checking {code OPTIONS} method with\n+\t * {@code Origin} and {@code Access-Control-Request-Method} headers presence.\n \t */\n \tpublic static boolean isPreFlightRequest(HttpServletRequest request) {\n \t\treturn (HttpMethod.OPTIONS.matches(request.getMethod()) &&\n+\t\t\t\trequest.getHeader(HttpHeaders.ORIGIN) != null &&\n \t\t\t\trequest.getHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD) != null);\n \t}\n "
        },
        {
            "sha": "a9f52082a5fe46d9f0d334f8c9540114f173f328",
            "filename": "spring-web/src/main/java/org/springframework/web/cors/reactive/CorsUtils.java",
            "status": "modified",
            "additions": 7,
            "deletions": 5,
            "changes": 12,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/bc7d01048579430b4b2df668178809b63d3f1929/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2Freactive%2FCorsUtils.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/bc7d01048579430b4b2df668178809b63d3f1929/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2Freactive%2FCorsUtils.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2Freactive%2FCorsUtils.java?ref=bc7d01048579430b4b2df668178809b63d3f1929",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -45,12 +45,14 @@ public static boolean isCorsRequest(ServerHttpRequest request) {\n \t}\n \n \t/**\n-\t * Returns {@code true} if the request is a valid CORS pre-flight one.\n-\t * To be used in combination with {@link #isCorsRequest(ServerHttpRequest)} since\n-\t * regular CORS checks are not invoked here for performance reasons.\n+\t * Returns {@code true} if the request is a valid CORS pre-flight one by checking {code OPTIONS} method with\n+\t * {@code Origin} and {@code Access-Control-Request-Method} headers presence.\n \t */\n \tpublic static boolean isPreFlightRequest(ServerHttpRequest request) {\n-\t\treturn (request.getMethod() == HttpMethod.OPTIONS && request.getHeaders().containsKey(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD));\n+\t\tHttpHeaders headers = request.getHeaders();\n+\t\treturn (request.getMethod() == HttpMethod.OPTIONS\n+\t\t\t\t&& headers.containsKey(HttpHeaders.ORIGIN)\n+\t\t\t\t&& headers.containsKey(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD));\n \t}\n \n \t/**"
        },
        {
            "sha": "b3311348a67f01c821d850f807f0b096da145d6c",
            "filename": "spring-webflux/src/main/java/org/springframework/web/reactive/handler/AbstractHandlerMapping.java",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/bc7d01048579430b4b2df668178809b63d3f1929/spring-webflux%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fhandler%2FAbstractHandlerMapping.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/bc7d01048579430b4b2df668178809b63d3f1929/spring-webflux%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fhandler%2FAbstractHandlerMapping.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-webflux%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fhandler%2FAbstractHandlerMapping.java?ref=bc7d01048579430b4b2df668178809b63d3f1929",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -182,8 +182,8 @@ public Mono<Object> getHandler(ServerWebExchange exchange) {\n \t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\tlogger.debug(exchange.getLogPrefix() + \"Mapped to \" + handler);\n \t\t\t}\n-\t\t\tif (hasCorsConfigurationSource(handler)) {\n-\t\t\t\tServerHttpRequest request = exchange.getRequest();\n+\t\t\tServerHttpRequest request = exchange.getRequest();\n+\t\t\tif (hasCorsConfigurationSource(handler) || CorsUtils.isPreFlightRequest(request)) {\n \t\t\t\tCorsConfiguration config = (this.corsConfigurationSource != null ? this.corsConfigurationSource.getCorsConfiguration(exchange) : null);\n \t\t\t\tCorsConfiguration handlerConfig = getCorsConfiguration(handler, exchange);\n \t\t\t\tconfig = (config != null ? config.combine(handlerConfig) : handlerConfig);"
        },
        {
            "sha": "c7a65fc6236dac8c81e75b56692377d4a92c129b",
            "filename": "spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java",
            "status": "modified",
            "additions": 2,
            "deletions": 3,
            "changes": 5,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/bc7d01048579430b4b2df668178809b63d3f1929/spring-webflux%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fresult%2Fmethod%2FAbstractHandlerMethodMapping.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/bc7d01048579430b4b2df668178809b63d3f1929/spring-webflux%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fresult%2Fmethod%2FAbstractHandlerMethodMapping.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-webflux%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fresult%2Fmethod%2FAbstractHandlerMethodMapping.java?ref=bc7d01048579430b4b2df668178809b63d3f1929",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -374,8 +374,7 @@ protected HandlerMethod handleNoMatch(Set<T> mappings, ServerWebExchange exchang\n \t@Override\n \tprotected boolean hasCorsConfigurationSource(Object handler) {\n \t\treturn super.hasCorsConfigurationSource(handler) ||\n-\t\t\t\t(handler instanceof HandlerMethod && this.mappingRegistry.getCorsConfiguration((HandlerMethod) handler) != null) ||\n-\t\t\t\thandler.equals(PREFLIGHT_AMBIGUOUS_MATCH);\n+\t\t\t\t(handler instanceof HandlerMethod && this.mappingRegistry.getCorsConfiguration((HandlerMethod) handler) != null);\n \t}\n \n \t@Override"
        },
        {
            "sha": "634233264552b12df052e12fe1ff1e0fdc63f83a",
            "filename": "spring-webflux/src/test/java/org/springframework/web/reactive/handler/CorsUrlHandlerMappingTests.java",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/bc7d01048579430b4b2df668178809b63d3f1929/spring-webflux%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fhandler%2FCorsUrlHandlerMappingTests.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/bc7d01048579430b4b2df668178809b63d3f1929/spring-webflux%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fhandler%2FCorsUrlHandlerMappingTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-webflux%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fhandler%2FCorsUrlHandlerMappingTests.java?ref=bc7d01048579430b4b2df668178809b63d3f1929",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -70,7 +70,7 @@ public void preflightRequestWithoutCorsConfigurationProvider() throws Exception\n \t\tObject actual = this.handlerMapping.getHandler(exchange).block();\n \n \t\tassertThat(actual).isNotNull();\n-\t\tassertThat(actual).isSameAs(this.welcomeController);\n+\t\tassertThat(actual).isNotSameAs(this.welcomeController);\n \t}\n \n \t@Test"
        },
        {
            "sha": "93d08ce936c0a5be864a0f82f5e6cf5e337fe26f",
            "filename": "spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/CrossOriginAnnotationIntegrationTests.java",
            "status": "modified",
            "additions": 25,
            "deletions": 1,
            "changes": 26,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/bc7d01048579430b4b2df668178809b63d3f1929/spring-webflux%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fresult%2Fmethod%2Fannotation%2FCrossOriginAnnotationIntegrationTests.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/bc7d01048579430b4b2df668178809b63d3f1929/spring-webflux%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fresult%2Fmethod%2Fannotation%2FCrossOriginAnnotationIntegrationTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-webflux%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fresult%2Fmethod%2Fannotation%2FCrossOriginAnnotationIntegrationTests.java?ref=bc7d01048579430b4b2df668178809b63d3f1929",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -35,11 +35,13 @@\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.HttpClientErrorException;\n import org.springframework.web.client.RestTemplate;\n import org.springframework.web.reactive.config.EnableWebFlux;\n import org.springframework.web.testfixture.http.server.reactive.bootstrap.HttpServer;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n \n /**\n  * Integration tests with {@code @CrossOrigin} and {@code @RequestMapping}\n@@ -89,6 +91,28 @@ void actualGetRequestWithoutAnnotation(HttpServer httpServer) throws Exception {\n \t\tassertThat(entity.getBody()).isEqualTo(\"no\");\n \t}\n \n+\t@ParameterizedHttpServerTest\n+\tvoid optionsRequestWithAccessControlRequestMethod(HttpServer httpServer) throws Exception {\n+\t\tstartServer(httpServer);\n+\t\tthis.headers.clear();\n+\t\tthis.headers.add(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, \"GET\");\n+\t\tResponseEntity<String> entity = performOptions(\"/no\", this.headers, String.class);\n+\t\tassertThat(entity.getBody()).isNull();\n+\t}\n+\n+\t@ParameterizedHttpServerTest\n+\tvoid preflightRequestWithoutAnnotation(HttpServer httpServer) throws Exception {\n+\t\tstartServer(httpServer);\n+\t\tthis.headers.add(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, \"GET\");\n+\t\ttry {\n+\t\t\tperformOptions(\"/no\", this.headers, Void.class);\n+\t\t\tfail(\"Preflight request without CORS configuration should fail\");\n+\t\t}\n+\t\tcatch (HttpClientErrorException ex) {\n+\t\t\tassertThat(ex.getStatusCode()).isEqualTo(HttpStatus.FORBIDDEN);\n+\t\t}\n+\t}\n+\n \t@ParameterizedHttpServerTest\n \tvoid actualPostRequestWithoutAnnotation(HttpServer httpServer) throws Exception {\n \t\tstartServer(httpServer);"
        },
        {
            "sha": "beee0ce55d3bc825abe139589d93c4c89897ed2c",
            "filename": "spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/bc7d01048579430b4b2df668178809b63d3f1929/spring-webmvc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fhandler%2FAbstractHandlerMapping.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/bc7d01048579430b4b2df668178809b63d3f1929/spring-webmvc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fhandler%2FAbstractHandlerMapping.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-webmvc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fhandler%2FAbstractHandlerMapping.java?ref=bc7d01048579430b4b2df668178809b63d3f1929",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -414,7 +414,7 @@ else if (logger.isDebugEnabled() && !request.getDispatcherType().equals(Dispatch\n \t\t\tlogger.debug(\"Mapped to \" + executionChain.getHandler());\n \t\t}\n \n-\t\tif (hasCorsConfigurationSource(handler)) {\n+\t\tif (hasCorsConfigurationSource(handler) || CorsUtils.isPreFlightRequest(request)) {\n \t\t\tCorsConfiguration config = (this.corsConfigurationSource != null ? this.corsConfigurationSource.getCorsConfiguration(request) : null);\n \t\t\tCorsConfiguration handlerConfig = getCorsConfiguration(handler, request);\n \t\t\tconfig = (config != null ? config.combine(handlerConfig) : handlerConfig);"
        },
        {
            "sha": "0fbfc988c1bec280a2f98b1fcba2122104c69653",
            "filename": "spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java",
            "status": "modified",
            "additions": 2,
            "deletions": 3,
            "changes": 5,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/bc7d01048579430b4b2df668178809b63d3f1929/spring-webmvc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fhandler%2FAbstractHandlerMethodMapping.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/bc7d01048579430b4b2df668178809b63d3f1929/spring-webmvc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fhandler%2FAbstractHandlerMethodMapping.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-webmvc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fhandler%2FAbstractHandlerMethodMapping.java?ref=bc7d01048579430b4b2df668178809b63d3f1929",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -458,8 +458,7 @@ protected HandlerMethod handleNoMatch(Set<T> mappings, String lookupPath, HttpSe\n \t@Override\n \tprotected boolean hasCorsConfigurationSource(Object handler) {\n \t\treturn super.hasCorsConfigurationSource(handler) ||\n-\t\t\t\t(handler instanceof HandlerMethod && this.mappingRegistry.getCorsConfiguration((HandlerMethod) handler) != null) ||\n-\t\t\t\thandler.equals(PREFLIGHT_AMBIGUOUS_MATCH);\n+\t\t\t\t(handler instanceof HandlerMethod && this.mappingRegistry.getCorsConfiguration((HandlerMethod) handler) != null);\n \t}\n \n \t@Override"
        },
        {
            "sha": "5a37e119c9d868b59d6104ffb7ea23d1512ad875",
            "filename": "spring-webmvc/src/test/java/org/springframework/web/servlet/handler/CorsAbstractHandlerMappingTests.java",
            "status": "modified",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/bc7d01048579430b4b2df668178809b63d3f1929/spring-webmvc%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fhandler%2FCorsAbstractHandlerMappingTests.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/bc7d01048579430b4b2df668178809b63d3f1929/spring-webmvc%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fhandler%2FCorsAbstractHandlerMappingTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-webmvc%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fhandler%2FCorsAbstractHandlerMappingTests.java?ref=bc7d01048579430b4b2df668178809b63d3f1929",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -86,7 +86,8 @@ void preflightRequestWithoutCorsConfigurationProvider() throws Exception {\n \t\tHandlerExecutionChain chain = this.handlerMapping.getHandler(this.request);\n \n \t\tassertThat(chain).isNotNull();\n-\t\tassertThat(chain.getHandler()).isInstanceOf(SimpleHandler.class);\n+\t\tassertThat(chain.getHandler()).isNotNull();\n+\t\tassertThat(chain.getHandler().getClass().getSimpleName()).isEqualTo(\"PreFlightHandler\");\n \t}\n \n \t@Test"
        },
        {
            "sha": "e135d7f76f92f313e5c0ba251c789a472067ac5e",
            "filename": "spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/CrossOriginTests.java",
            "status": "modified",
            "additions": 24,
            "deletions": 1,
            "changes": 25,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/bc7d01048579430b4b2df668178809b63d3f1929/spring-webmvc%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fmvc%2Fmethod%2Fannotation%2FCrossOriginTests.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/bc7d01048579430b4b2df668178809b63d3f1929/spring-webmvc%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fmvc%2Fmethod%2Fannotation%2FCrossOriginTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-webmvc%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fmvc%2Fmethod%2Fannotation%2FCrossOriginTests.java?ref=bc7d01048579430b4b2df668178809b63d3f1929",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -69,6 +69,10 @@ public class CrossOriginTests {\n \n \tprivate final MockHttpServletRequest request = new MockHttpServletRequest();\n \n+\tprivate final String optionsHandler = \"org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping$HttpOptionsHandler#handle()\";\n+\n+\tprivate final String corsPreflightHandler = \"org.springframework.web.servlet.handler.AbstractHandlerMapping$PreFlightHandler\";\n+\n \n \t@BeforeEach\n \t@SuppressWarnings(\"resource\")\n@@ -96,6 +100,25 @@ public void noAnnotationWithoutOrigin() throws Exception {\n \t\tassertThat(getCorsConfiguration(chain, false)).isNull();\n \t}\n \n+\t@Test\n+\tpublic void noAnnotationWithAccessControlRequestMethod() throws Exception {\n+\t\tthis.handlerMapping.registerHandler(new MethodLevelController());\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest(\"OPTIONS\", \"/no\");\n+\t\trequest.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, \"GET\");\n+\t\tHandlerExecutionChain chain = this.handlerMapping.getHandler(request);\n+\t\tassertThat(chain.getHandler().toString()).isEqualTo(optionsHandler);\n+\t}\n+\n+\t@Test\n+\tpublic void noAnnotationWithPreflightRequest() throws Exception {\n+\t\tthis.handlerMapping.registerHandler(new MethodLevelController());\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest(\"OPTIONS\", \"/no\");\n+\t\trequest.addHeader(HttpHeaders.ORIGIN, \"https://domain.com/\");\n+\t\trequest.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, \"GET\");\n+\t\tHandlerExecutionChain chain = this.handlerMapping.getHandler(request);\n+\t\tassertThat(chain.getHandler().getClass().getName()).isEqualTo(corsPreflightHandler);\n+\t}\n+\n \t@Test  // SPR-12931\n \tpublic void noAnnotationWithOrigin() throws Exception {\n \t\tthis.handlerMapping.registerHandler(new MethodLevelController());"
        }
    ]
}