{
    "sha": "6d7d2927ddcd8c7ddd902fa1196b1e780c0d70ea",
    "node_id": "MDY6Q29tbWl0MTA4OTE0OTo2ZDdkMjkyN2RkY2Q4YzdkZGQ5MDJmYTExOTZiMWU3ODBjMGQ3MGVh",
    "commit": {
        "author": {
            "name": "Mahmoud Ben Hassine",
            "email": "mbenhassine@vmware.com",
            "date": "2020-06-10T18:11:08Z"
        },
        "committer": {
            "name": "Mahmoud Ben Hassine",
            "email": "mbenhassine@vmware.com",
            "date": "2020-06-10T18:11:50Z"
        },
        "message": "Update Jackson2ExecutionContextStringSerializer",
        "tree": {
            "sha": "b49d58bc0d90dcb00b7d0d68beacf19151bd9167",
            "url": "https://api.github.com/repos/spring-projects/spring-batch/git/trees/b49d58bc0d90dcb00b7d0d68beacf19151bd9167"
        },
        "url": "https://api.github.com/repos/spring-projects/spring-batch/git/commits/6d7d2927ddcd8c7ddd902fa1196b1e780c0d70ea",
        "comment_count": 0,
        "verification": {
            "verified": true,
            "reason": "valid",
            "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJLBAABCAA1FiEEtGRdFioUUBSyBeTCHi3lDT+ftR0FAl7hImYXHG1iZW5oYXNz\naW5lQHZtd2FyZS5jb20ACgkQHi3lDT+ftR3Xxw//SJsvMQ42sq/XY74ydvC5e6HH\nIWZS16Dk3hKK/RI7caUlSGI+E41UOZcUTq/5FTBbawMIo3+fek9DQMImQwzxpu+E\nFeDJykp5KxNkn1FplWjGDjYkt+0Q6Mj/A616VbcCdSpfCvyfWziVgtSPV4KHsVqp\nVKO+BT6LCKZvEXof+2J7GQae4ApM0GFVGvPU2BrwiiaGJHzZ8vFVEF7t/5qPkLmT\neYPLH/fG5pA6fa3QcLte9URh2SfvgX8b/64D+BDp+s51Tois3FDJ2r2MCQQ8vyE4\nQ8B1dEPzwSofYDkuB0Bha7PLy8xQ1vrlJI+7asGQBVPZBx5IW+4C+oCXk4eCSUwV\n5b5e+qKtk7FZNp4gyyfx9Io+4VGRjjrP73fNLCW+erOtwsOqg4B5njQlJCrkQ9T6\nEPQZSkUy/XirSxnNuq20CVNOibvys5wv+DGCiZIxyDVLrX/r3iJdxwVf97LdUMEr\nwMtd2FfSpnaP/t5IqEc6I7yFvllXPUf/YbxW6lnCeaR5iaj+L2fC2uNscFkG9Pui\n9bRWfTUPNQvNLixsQt2r//QC3lf6gJhXwt+gc0cLWtE+hdCfnFOSanYKOjB1dOWn\n5PU657YrNLppsBSy3PfB5bh7w0OZeB9/lgxmAgQm3bRugKgGtRxm/+d7UJOSVyDR\niNptlh8KX2O1m8+Cmm8=\n=NYLP\n-----END PGP SIGNATURE-----",
            "payload": "tree b49d58bc0d90dcb00b7d0d68beacf19151bd9167\nparent 6052852db6f3e7b6f1606d57fd5a90f0b0acc74e\nauthor Mahmoud Ben Hassine <mbenhassine@vmware.com> 1591812668 +0200\ncommitter Mahmoud Ben Hassine <mbenhassine@vmware.com> 1591812710 +0200\n\nUpdate Jackson2ExecutionContextStringSerializer\n",
            "verified_at": "2024-11-13T10:21:17Z"
        }
    },
    "url": "https://api.github.com/repos/spring-projects/spring-batch/commits/6d7d2927ddcd8c7ddd902fa1196b1e780c0d70ea",
    "html_url": "https://github.com/spring-projects/spring-batch/commit/6d7d2927ddcd8c7ddd902fa1196b1e780c0d70ea",
    "comments_url": "https://api.github.com/repos/spring-projects/spring-batch/commits/6d7d2927ddcd8c7ddd902fa1196b1e780c0d70ea/comments",
    "author": {
        "login": "fmbenhassine",
        "id": 1210553,
        "node_id": "MDQ6VXNlcjEyMTA1NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1210553?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fmbenhassine",
        "html_url": "https://github.com/fmbenhassine",
        "followers_url": "https://api.github.com/users/fmbenhassine/followers",
        "following_url": "https://api.github.com/users/fmbenhassine/following{/other_user}",
        "gists_url": "https://api.github.com/users/fmbenhassine/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fmbenhassine/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fmbenhassine/subscriptions",
        "organizations_url": "https://api.github.com/users/fmbenhassine/orgs",
        "repos_url": "https://api.github.com/users/fmbenhassine/repos",
        "events_url": "https://api.github.com/users/fmbenhassine/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fmbenhassine/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "fmbenhassine",
        "id": 1210553,
        "node_id": "MDQ6VXNlcjEyMTA1NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1210553?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fmbenhassine",
        "html_url": "https://github.com/fmbenhassine",
        "followers_url": "https://api.github.com/users/fmbenhassine/followers",
        "following_url": "https://api.github.com/users/fmbenhassine/following{/other_user}",
        "gists_url": "https://api.github.com/users/fmbenhassine/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fmbenhassine/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fmbenhassine/subscriptions",
        "organizations_url": "https://api.github.com/users/fmbenhassine/orgs",
        "repos_url": "https://api.github.com/users/fmbenhassine/repos",
        "events_url": "https://api.github.com/users/fmbenhassine/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fmbenhassine/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "6052852db6f3e7b6f1606d57fd5a90f0b0acc74e",
            "url": "https://api.github.com/repos/spring-projects/spring-batch/commits/6052852db6f3e7b6f1606d57fd5a90f0b0acc74e",
            "html_url": "https://github.com/spring-projects/spring-batch/commit/6052852db6f3e7b6f1606d57fd5a90f0b0acc74e"
        }
    ],
    "stats": {
        "total": 325,
        "additions": 319,
        "deletions": 6
    },
    "files": [
        {
            "sha": "1c8858c82e1c46c7a037e3c180dd87c8cf2f2410",
            "filename": "spring-batch-core/src/main/java/org/springframework/batch/core/repository/dao/Jackson2ExecutionContextStringSerializer.java",
            "status": "modified",
            "additions": 211,
            "deletions": 4,
            "changes": 215,
            "blob_url": "https://github.com/spring-projects/spring-batch/blob/6d7d2927ddcd8c7ddd902fa1196b1e780c0d70ea/spring-batch-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fbatch%2Fcore%2Frepository%2Fdao%2FJackson2ExecutionContextStringSerializer.java",
            "raw_url": "https://github.com/spring-projects/spring-batch/raw/6d7d2927ddcd8c7ddd902fa1196b1e780c0d70ea/spring-batch-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fbatch%2Fcore%2Frepository%2Fdao%2FJackson2ExecutionContextStringSerializer.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-batch/contents/spring-batch-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fbatch%2Fcore%2Frepository%2Fdao%2FJackson2ExecutionContextStringSerializer.java?ref=6d7d2927ddcd8c7ddd902fa1196b1e780c0d70ea",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2008-2019 the original author or authors.\n+ * Copyright 2008-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -18,28 +18,80 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Set;\n \n+import com.fasterxml.jackson.annotation.JacksonAnnotation;\n import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.DatabindContext;\n+import com.fasterxml.jackson.databind.DeserializationConfig;\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.MapperFeature;\n import com.fasterxml.jackson.databind.ObjectMapper;\n-\n+import com.fasterxml.jackson.databind.cfg.MapperConfig;\n import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator;\n+import com.fasterxml.jackson.databind.jsontype.NamedType;\n+import com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;\n+import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n+import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n import org.springframework.batch.core.JobParameter;\n import org.springframework.batch.core.JobParameters;\n import org.springframework.batch.core.repository.ExecutionContextSerializer;\n+import org.springframework.core.annotation.AnnotationUtils;\n import org.springframework.util.Assert;\n \n /**\n- * Implementation that uses Jackson2 to provide (de)serialization.\n+ * Implementation that uses Jackson2 to provide (de)serialization. \n+ * \n+ * By default, this implementation trusts a limited set of classes to be\n+ * deserialized from the execution context. If a class is not trusted by default\n+ * and is safe to deserialize, you can provide an explicit mapping using Jackson\n+ * annotations, as shown in the following example:\n+ * \n+ * <pre class=\"code\">\n+ *     &#064;JsonTypeInfo(use = JsonTypeInfo.Id.CLASS)\n+ *     public class MyTrustedType implements Serializable {\n+ *        \n+ *     }\n+ * </pre>\n+ * \n+ * It is also possible to provide a custom {@link ObjectMapper} with a mixin for\n+ * the trusted type:\n+ *\n+ * <pre class=\"code\">\n+ *     ObjectMapper objectMapper = new ObjectMapper();\n+ *     objectMapper.addMixIn(MyTrustedType.class, Object.class);\n+ *     Jackson2ExecutionContextStringSerializer serializer = new Jackson2ExecutionContextStringSerializer();\n+ *     serializer.setObjectMapper(objectMapper);\n+ *     // register serializer in JobRepositoryFactoryBean\n+ * </pre>\n+ * \n+ * If the (de)serialization is only done by a trusted source, you can also enable\n+ * default typing:\n+ *\n+ * <pre class=\"code\">\n+ *     PolymorphicTypeValidator polymorphicTypeValidator = .. // configure your trusted PolymorphicTypeValidator\n+ *     ObjectMapper objectMapper = new ObjectMapper();\n+ *     objectMapper.activateDefaultTyping(polymorphicTypeValidator); \n+ *     Jackson2ExecutionContextStringSerializer serializer = new Jackson2ExecutionContextStringSerializer();\n+ *     serializer.setObjectMapper(objectMapper);\n+ *     // register serializer in JobRepositoryFactoryBean\n+ * </pre>\n  *\n  * @author Marten Deinum\n  * @author Mahmoud Ben Hassine\n@@ -55,7 +107,8 @@ public Jackson2ExecutionContextStringSerializer() {\n         this.objectMapper = new ObjectMapper();\n         this.objectMapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false);\n         this.objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true);\n-        this.objectMapper.enableDefaultTyping();\n+        this.objectMapper.configure(MapperFeature.BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES, true);\n+        this.objectMapper.setDefaultTyping(createTrustedDefaultTyping());\n         this.objectMapper.registerModule(new JobParametersModule());\n     }\n \n@@ -141,4 +194,158 @@ public JobParameter deserialize(JsonParser parser, DeserializationContext contex\n \n     }\n \n+    /**\n+     * Creates a TypeResolverBuilder that checks if a type is trusted.\n+     * @return a TypeResolverBuilder that checks if a type is trusted.\n+     */\n+    private static TypeResolverBuilder<? extends TypeResolverBuilder> createTrustedDefaultTyping() {\n+        TypeResolverBuilder<? extends TypeResolverBuilder>  result = new TrustedTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL);\n+        result = result.init(JsonTypeInfo.Id.CLASS, null);\n+        result = result.inclusion(JsonTypeInfo.As.PROPERTY);\n+        return result;\n+    }\n+\n+    /**\n+     * An implementation of {@link ObjectMapper.DefaultTypeResolverBuilder}\n+     * that inserts an {@code allow all} {@link PolymorphicTypeValidator}\n+     * and overrides the {@code TypeIdResolver}\n+     * @author Rob Winch\n+     */\n+    static class TrustedTypeResolverBuilder extends ObjectMapper.DefaultTypeResolverBuilder {\n+\n+        TrustedTypeResolverBuilder(ObjectMapper.DefaultTyping defaultTyping) {\n+            super(\n+                    defaultTyping,\n+                    //we do explicit validation in the TypeIdResolver\n+                    BasicPolymorphicTypeValidator.builder()\n+                            .allowIfSubType(Object.class)\n+                            .build()\n+            );\n+        }\n+\n+        @Override\n+        protected TypeIdResolver idResolver(MapperConfig<?> config,\n+                                            JavaType baseType,\n+                                            PolymorphicTypeValidator subtypeValidator,\n+                                            Collection<NamedType> subtypes, boolean forSer, boolean forDeser) {\n+            TypeIdResolver result = super.idResolver(config, baseType, subtypeValidator, subtypes, forSer, forDeser);\n+            return new TrustedTypeIdResolver(result);\n+        }\n+    }\n+\n+    /**\n+     * A {@link TypeIdResolver} that delegates to an existing implementation and throws an IllegalStateException if the\n+     * class being looked up is not trusted, does not provide an explicit mixin, and is not annotated with Jackson\n+     * mappings.\n+     */\n+    static class TrustedTypeIdResolver implements TypeIdResolver {\n+        private static final Set<String> TRUSTED_CLASS_NAMES = Collections.unmodifiableSet(new HashSet(Arrays.asList(\n+                \"java.util.ArrayList\",\n+                \"java.util.LinkedList\",\n+                \"java.util.Collections$EmptyList\",\n+                \"java.util.Collections$EmptyMap\",\n+                \"java.util.Collections$EmptySet\",\n+                \"java.util.Collections$UnmodifiableRandomAccessList\",\n+                \"java.util.Collections$UnmodifiableList\",\n+                \"java.util.Collections$UnmodifiableMap\",\n+                \"java.util.Collections$UnmodifiableSet\",\n+                \"java.util.Collections$SingletonList\",\n+                \"java.util.Collections$SingletonMap\",\n+                \"java.util.Collections$SingletonSet\",\n+                \"java.util.Date\",\n+                \"java.time.Instant\",\n+                \"java.time.Duration\",\n+                \"java.time.LocalDate\",\n+                \"java.time.LocalTime\",\n+                \"java.time.LocalDateTime\",\n+                \"java.net.URL\",\n+                \"java.util.TreeMap\",\n+                \"java.util.HashMap\",\n+                \"java.util.LinkedHashMap\",\n+                \"java.util.TreeSet\",\n+                \"java.util.HashSet\",\n+                \"java.util.LinkedHashSet\",\n+                \"java.lang.Boolean\",\n+                \"java.lang.Byte\",\n+                \"java.lang.Short\",\n+                \"java.lang.Integer\",\n+                \"java.lang.Long\",\n+                \"java.lang.Double\",\n+                \"java.lang.Float\",\n+                \"java.math.BigDecimal\",\n+                \"java.math.BigInteger\",\n+                \"java.lang.String\",\n+                \"java.lang.Character\",\n+                \"java.lang.CharSequence\",\n+                \"java.util.Properties\",\n+                \"[Ljava.util.Properties;\",\n+                \"org.springframework.batch.core.JobParameter\",\n+                \"org.springframework.batch.core.JobParameters\",\n+                \"org.springframework.batch.core.jsr.partition.JsrPartitionHandler$PartitionPlanState\"\n+        )));\n+\n+        private final TypeIdResolver delegate;\n+\n+        TrustedTypeIdResolver(TypeIdResolver delegate) {\n+            this.delegate = delegate;\n+        }\n+\n+        @Override\n+        public void init(JavaType baseType) {\n+            delegate.init(baseType);\n+        }\n+\n+        @Override\n+        public String idFromValue(Object value) {\n+            return delegate.idFromValue(value);\n+        }\n+\n+        @Override\n+        public String idFromValueAndType(Object value, Class<?> suggestedType) {\n+            return delegate.idFromValueAndType(value, suggestedType);\n+        }\n+\n+        @Override\n+        public String idFromBaseType() {\n+            return delegate.idFromBaseType();\n+        }\n+\n+        @Override\n+        public JavaType typeFromId(DatabindContext context, String id) throws IOException {\n+            DeserializationConfig config = (DeserializationConfig) context.getConfig();\n+            JavaType result = delegate.typeFromId(context, id);\n+            String className = result.getRawClass().getName();\n+            if (isTrusted(className)) {\n+                return result;\n+            }\n+            boolean isExplicitMixin = config.findMixInClassFor(result.getRawClass()) != null;\n+            if (isExplicitMixin) {\n+                return result;\n+            }\n+            Class<?> rawClass = result.getRawClass();\n+            JacksonAnnotation jacksonAnnotation = AnnotationUtils.findAnnotation(rawClass, JacksonAnnotation.class);\n+            if (jacksonAnnotation != null) {\n+                return result;\n+            }\n+            throw new IllegalArgumentException(\"The class with \" + id + \" and name of \" + className + \" is not trusted. \" +\n+                    \"If you believe this class is safe to deserialize, please provide an explicit mapping using Jackson annotations or a custom ObjectMapper. \" +\n+                    \"If the serialization is only done by a trusted source, you can also enable default typing.\");\n+        }\n+\n+        private boolean isTrusted(String id) {\n+            return TRUSTED_CLASS_NAMES.contains(id);\n+        }\n+\n+        @Override\n+        public String getDescForKnownTypeIds() {\n+            return delegate.getDescForKnownTypeIds();\n+        }\n+\n+        @Override\n+        public JsonTypeInfo.Id getMechanism() {\n+            return delegate.getMechanism();\n+        }\n+\n+    }\n+\n }"
        },
        {
            "sha": "5d2a8b61bc0d8e2676c61bdb4a2ecab4d3d9202b",
            "filename": "spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/AbstractExecutionContextSerializerTests.java",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/spring-projects/spring-batch/blob/6d7d2927ddcd8c7ddd902fa1196b1e780c0d70ea/spring-batch-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fbatch%2Fcore%2Frepository%2Fdao%2FAbstractExecutionContextSerializerTests.java",
            "raw_url": "https://github.com/spring-projects/spring-batch/raw/6d7d2927ddcd8c7ddd902fa1196b1e780c0d70ea/spring-batch-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fbatch%2Fcore%2Frepository%2Fdao%2FAbstractExecutionContextSerializerTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-batch/contents/spring-batch-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fbatch%2Fcore%2Frepository%2Fdao%2FAbstractExecutionContextSerializerTests.java?ref=6d7d2927ddcd8c7ddd902fa1196b1e780c0d70ea",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -15,6 +15,7 @@\n  */\n package org.springframework.batch.core.repository.dao;\n \n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import org.junit.Test;\n import org.springframework.batch.core.JobParameter;\n import org.springframework.batch.core.JobParameters;\n@@ -175,6 +176,7 @@ protected Map<String, Object> serializationRoundTrip(Map<String, Object> m1) thr\n \n     protected abstract ExecutionContextSerializer getSerializer();\n \n+    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS)\n     public static class ComplexObject implements Serializable {\n         private static final long serialVersionUID = 1L;\n         private String name;"
        },
        {
            "sha": "9870f11803a78dd3f54d596f963f6389e9d0ad7f",
            "filename": "spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/Jackson2ExecutionContextStringSerializerTests.java",
            "status": "modified",
            "additions": 105,
            "deletions": 1,
            "changes": 106,
            "blob_url": "https://github.com/spring-projects/spring-batch/blob/6d7d2927ddcd8c7ddd902fa1196b1e780c0d70ea/spring-batch-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fbatch%2Fcore%2Frepository%2Fdao%2FJackson2ExecutionContextStringSerializerTests.java",
            "raw_url": "https://github.com/spring-projects/spring-batch/raw/6d7d2927ddcd8c7ddd902fa1196b1e780c0d70ea/spring-batch-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fbatch%2Fcore%2Frepository%2Fdao%2FJackson2ExecutionContextStringSerializerTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-batch/contents/spring-batch-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fbatch%2Fcore%2Frepository%2Fdao%2FJackson2ExecutionContextStringSerializerTests.java?ref=6d7d2927ddcd8c7ddd902fa1196b1e780c0d70ea",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2008-2016 the original author or authors.\n+ * Copyright 2008-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -15,11 +15,24 @@\n  */\n package org.springframework.batch.core.repository.dao;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import org.junit.Before;\n+import org.junit.Test;\n+\n import org.springframework.batch.core.repository.ExecutionContextSerializer;\n \n+import static org.junit.Assert.fail;\n+\n /**\n  * @author Marten Deinum\n+ * @author Michael Minella\n  */\n public class Jackson2ExecutionContextStringSerializerTests extends AbstractExecutionContextSerializerTests {\n \n@@ -32,8 +45,99 @@ public void onSetUp() throws Exception {\n \t\tserializer = serializerDeserializer;\n \t}\n \n+\t@Test\n+\tpublic void mappedTypeTest() throws IOException {\n+\n+\t\tPerson person = new Person();\n+\t\tperson.age = 28;\n+\t\tperson.name = \"Bob\";\n+\t\tperson.phone = new DomesticNumber();\n+\t\tperson.phone.areaCode = 555;\n+\t\tperson.phone.local = 1234567;\n+\n+\t\tJackson2ExecutionContextStringSerializer j = new Jackson2ExecutionContextStringSerializer();\n+\n+\t\tMap<String, Object> context = new HashMap<>(1);\n+\t\tcontext.put(\"person\", person);\n+\n+\t\tByteArrayOutputStream os = new ByteArrayOutputStream();\n+\t\tj.serialize(context, os);\n+\n+\t\tInputStream in = new ByteArrayInputStream(os.toByteArray());\n+\n+\t\ttry {\n+\t\t\tj.deserialize(in);\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\tfail(String.format(\"An exception was thrown but should not have been: %s\", e.getMessage()));\n+\t\t}\n+\t}\n+\n \t@Override\n \tprotected ExecutionContextSerializer getSerializer() {\n \t\treturn this.serializer;\n \t}\n+\n+\t@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS)\n+\tpublic static class Person {\n+\t\tpublic String name;\n+\t\tpublic int age;\n+\t\t@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS)\n+\t\tpublic PhoneNumber phone;\n+\t}\n+\n+\tpublic static abstract class PhoneNumber {\n+\t\tpublic int areaCode, local;\n+\t}\n+\n+\tpublic static class InternationalNumber extends PhoneNumber {\n+\t\tpublic int countryCode;\n+\t}\n+\n+\tpublic static class DomesticNumber extends PhoneNumber{}\n+\n+\t@Test\n+\tpublic void unmappedTypeTest() throws IOException {\n+\n+\t\tUnmappedPerson person = new UnmappedPerson();\n+\t\tperson.age = 28;\n+\t\tperson.name = \"Bob\";\n+\t\tperson.phone = new UnmappedDomesticNumber();\n+\t\tperson.phone.areaCode = 555;\n+\t\tperson.phone.local = 1234567;\n+\n+\t\tJackson2ExecutionContextStringSerializer j = new Jackson2ExecutionContextStringSerializer();\n+\n+\t\tMap<String, Object> context = new HashMap<>(1);\n+\t\tcontext.put(\"person\", person);\n+\n+\t\tByteArrayOutputStream os = new ByteArrayOutputStream();\n+\t\tj.serialize(context, os);\n+\n+\t\tInputStream in = new ByteArrayInputStream(os.toByteArray());\n+\n+\t\ttry {\n+\t\t\tj.deserialize(in);\n+\t\t\tfail(\"An exception should have been thrown but wasn't\");\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\treturn;\n+\t\t}\n+\t}\n+\n+\tpublic static class UnmappedPerson {\n+\t\tpublic String name;\n+\t\tpublic int age;\n+\t\tpublic UnmappedPhoneNumber phone;\n+\t}\n+\n+\tpublic static abstract class UnmappedPhoneNumber {\n+\t\tpublic int areaCode, local;\n+\t}\n+\n+\tpublic static class UnmappedInternationalNumber extends UnmappedPhoneNumber {\n+\t\tpublic int countryCode;\n+\t}\n+\n+\tpublic static class UnmappedDomesticNumber extends UnmappedPhoneNumber{}\n }"
        }
    ]
}