{
    "sha": "784fabac7d1586a5614bd4bc8854fd62850dbe26",
    "node_id": "MDY6Q29tbWl0NTE1MjI4NTo3ODRmYWJhYzdkMTU4NmE1NjE0YmQ0YmM4ODU0ZmQ2Mjg1MGRiZTI2",
    "commit": {
        "author": {
            "name": "jwilson",
            "email": "jwilson@squareup.com",
            "date": "2016-02-07T16:09:38Z"
        },
        "committer": {
            "name": "jwilson",
            "email": "jwilson@squareup.com",
            "date": "2016-02-07T16:21:22Z"
        },
        "message": "Don't build a trust root index on Android.\n\nWe can just cheat and use reflection to use Conscrypt's trust root index\ndirectly. This results in a substantial savings in app startup - 500\nmilliseconds or more.\n\nCloses: https://github.com/square/okhttp/issues/2321",
        "tree": {
            "sha": "9c5b015150bd2f59e4458f1a3cae9064dfd97ea1",
            "url": "https://api.github.com/repos/square/okhttp/git/trees/9c5b015150bd2f59e4458f1a3cae9064dfd97ea1"
        },
        "url": "https://api.github.com/repos/square/okhttp/git/commits/784fabac7d1586a5614bd4bc8854fd62850dbe26",
        "comment_count": 16,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/square/okhttp/commits/784fabac7d1586a5614bd4bc8854fd62850dbe26",
    "html_url": "https://github.com/square/okhttp/commit/784fabac7d1586a5614bd4bc8854fd62850dbe26",
    "comments_url": "https://api.github.com/repos/square/okhttp/commits/784fabac7d1586a5614bd4bc8854fd62850dbe26/comments",
    "author": {
        "login": "squarejesse",
        "id": 183887076,
        "node_id": "U_kgDOCvXk5A",
        "avatar_url": "https://avatars.githubusercontent.com/u/183887076?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/squarejesse",
        "html_url": "https://github.com/squarejesse",
        "followers_url": "https://api.github.com/users/squarejesse/followers",
        "following_url": "https://api.github.com/users/squarejesse/following{/other_user}",
        "gists_url": "https://api.github.com/users/squarejesse/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/squarejesse/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/squarejesse/subscriptions",
        "organizations_url": "https://api.github.com/users/squarejesse/orgs",
        "repos_url": "https://api.github.com/users/squarejesse/repos",
        "events_url": "https://api.github.com/users/squarejesse/events{/privacy}",
        "received_events_url": "https://api.github.com/users/squarejesse/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "squarejesse",
        "id": 183887076,
        "node_id": "U_kgDOCvXk5A",
        "avatar_url": "https://avatars.githubusercontent.com/u/183887076?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/squarejesse",
        "html_url": "https://github.com/squarejesse",
        "followers_url": "https://api.github.com/users/squarejesse/followers",
        "following_url": "https://api.github.com/users/squarejesse/following{/other_user}",
        "gists_url": "https://api.github.com/users/squarejesse/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/squarejesse/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/squarejesse/subscriptions",
        "organizations_url": "https://api.github.com/users/squarejesse/orgs",
        "repos_url": "https://api.github.com/users/squarejesse/repos",
        "events_url": "https://api.github.com/users/squarejesse/events{/privacy}",
        "received_events_url": "https://api.github.com/users/squarejesse/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "61b05581188ac5cc531af2f6b0cb628b011b3588",
            "url": "https://api.github.com/repos/square/okhttp/commits/61b05581188ac5cc531af2f6b0cb628b011b3588",
            "html_url": "https://github.com/square/okhttp/commit/61b05581188ac5cc531af2f6b0cb628b011b3588"
        }
    ],
    "stats": {
        "total": 312,
        "additions": 220,
        "deletions": 92
    },
    "files": [
        {
            "sha": "6959f86b3101cbf35f1df9fcd0f023e096e7b20d",
            "filename": "okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java",
            "status": "renamed",
            "additions": 26,
            "deletions": 24,
            "changes": 50,
            "blob_url": "https://github.com/square/okhttp/blob/784fabac7d1586a5614bd4bc8854fd62850dbe26/okhttp-tests%2Fsrc%2Ftest%2Fjava%2Fokhttp3%2FCertificateChainCleanerTest.java",
            "raw_url": "https://github.com/square/okhttp/raw/784fabac7d1586a5614bd4bc8854fd62850dbe26/okhttp-tests%2Fsrc%2Ftest%2Fjava%2Fokhttp3%2FCertificateChainCleanerTest.java",
            "contents_url": "https://api.github.com/repos/square/okhttp/contents/okhttp-tests%2Fsrc%2Ftest%2Fjava%2Fokhttp3%2FCertificateChainCleanerTest.java?ref=784fabac7d1586a5614bd4bc8854fd62850dbe26",
            "patch": "@@ -20,29 +20,31 @@\n import java.util.List;\n import javax.net.ssl.SSLPeerUnverifiedException;\n import okhttp3.internal.HeldCertificate;\n-import okhttp3.internal.tls.CertificateAuthorityCouncil;\n+import okhttp3.internal.tls.CertificateChainCleaner;\n+import okhttp3.internal.tls.RealTrustRootIndex;\n import org.junit.Test;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.fail;\n \n-public final class CertificateAuthorityCouncilTest {\n+public final class CertificateChainCleanerTest {\n   @Test public void normalizeSingleSelfSignedCertificate() throws Exception {\n     HeldCertificate root = new HeldCertificate.Builder()\n         .serialNumber(\"1\")\n         .build();\n-    CertificateAuthorityCouncil council = new CertificateAuthorityCouncil(root.certificate);\n-    assertEquals(list(root), council.normalizeCertificateChain(list(root)));\n+    CertificateChainCleaner council = new CertificateChainCleaner(\n+        new RealTrustRootIndex(root.certificate));\n+    assertEquals(list(root), council.clean(list(root)));\n   }\n \n   @Test public void normalizeUnknownSelfSignedCertificate() throws Exception {\n     HeldCertificate root = new HeldCertificate.Builder()\n         .serialNumber(\"1\")\n         .build();\n-    CertificateAuthorityCouncil council = new CertificateAuthorityCouncil();\n+    CertificateChainCleaner council = new CertificateChainCleaner(new RealTrustRootIndex());\n \n     try {\n-      council.normalizeCertificateChain(list(root));\n+      council.clean(list(root));\n       fail();\n     } catch (SSLPeerUnverifiedException expected) {\n     }\n@@ -61,9 +63,9 @@ public final class CertificateAuthorityCouncilTest {\n         .issuedBy(certA)\n         .build();\n \n-    CertificateAuthorityCouncil council = new CertificateAuthorityCouncil(root.certificate);\n-    assertEquals(list(certB, certA, root),\n-        council.normalizeCertificateChain(list(certB, certA, root)));\n+    CertificateChainCleaner council = new CertificateChainCleaner(\n+        new RealTrustRootIndex(root.certificate));\n+    assertEquals(list(certB, certA, root), council.clean(list(certB, certA, root)));\n   }\n \n   @Test public void orderedChainOfCertificatesWithoutRoot() throws Exception {\n@@ -79,9 +81,9 @@ public final class CertificateAuthorityCouncilTest {\n         .issuedBy(certA)\n         .build();\n \n-    CertificateAuthorityCouncil council = new CertificateAuthorityCouncil(root.certificate);\n-    assertEquals(list(certB, certA, root),\n-        council.normalizeCertificateChain(list(certB, certA))); // Root is added!\n+    CertificateChainCleaner council = new CertificateChainCleaner(\n+        new RealTrustRootIndex(root.certificate));\n+    assertEquals(list(certB, certA, root), council.clean(list(certB, certA))); // Root is added!\n   }\n \n   @Test public void unorderedChainOfCertificatesWithRoot() throws Exception {\n@@ -101,9 +103,9 @@ public final class CertificateAuthorityCouncilTest {\n         .issuedBy(certB)\n         .build();\n \n-    CertificateAuthorityCouncil council = new CertificateAuthorityCouncil(root.certificate);\n-    assertEquals(list(certC, certB, certA, root),\n-        council.normalizeCertificateChain(list(certC, certA, root, certB)));\n+    CertificateChainCleaner council = new CertificateChainCleaner(\n+        new RealTrustRootIndex(root.certificate));\n+    assertEquals(list(certC, certB, certA, root), council.clean(list(certC, certA, root, certB)));\n   }\n \n   @Test public void unorderedChainOfCertificatesWithoutRoot() throws Exception {\n@@ -123,9 +125,9 @@ public final class CertificateAuthorityCouncilTest {\n         .issuedBy(certB)\n         .build();\n \n-    CertificateAuthorityCouncil council = new CertificateAuthorityCouncil(root.certificate);\n-    assertEquals(list(certC, certB, certA, root),\n-        council.normalizeCertificateChain(list(certC, certA, certB)));\n+    CertificateChainCleaner council = new CertificateChainCleaner(\n+        new RealTrustRootIndex(root.certificate));\n+    assertEquals(list(certC, certB, certA, root), council.clean(list(certC, certA, certB)));\n   }\n \n   @Test public void unrelatedCertificatesAreOmitted() throws Exception {\n@@ -144,9 +146,10 @@ public final class CertificateAuthorityCouncilTest {\n         .serialNumber(\"4\")\n         .build();\n \n-    CertificateAuthorityCouncil council = new CertificateAuthorityCouncil(root.certificate);\n+    CertificateChainCleaner council = new CertificateChainCleaner(\n+        new RealTrustRootIndex(root.certificate));\n     assertEquals(list(certB, certA, root),\n-        council.normalizeCertificateChain(list(certB, certUnnecessary, certA, root)));\n+        council.clean(list(certB, certUnnecessary, certA, root)));\n   }\n \n   @Test public void unnecessaryTrustedCertificatesAreOmitted() throws Exception {\n@@ -166,10 +169,9 @@ public final class CertificateAuthorityCouncilTest {\n         .issuedBy(certA)\n         .build();\n \n-    CertificateAuthorityCouncil council = new CertificateAuthorityCouncil(\n-        superRoot.certificate, root.certificate);\n-    assertEquals(list(certB, certA, root),\n-        council.normalizeCertificateChain(list(certB, certA, root, superRoot)));\n+    CertificateChainCleaner council = new CertificateChainCleaner(\n+        new RealTrustRootIndex(superRoot.certificate, root.certificate));\n+    assertEquals(list(certB, certA, root), council.clean(list(certB, certA, root, superRoot)));\n   }\n \n   private List<Certificate> list(HeldCertificate... heldCertificates) {",
            "previous_filename": "okhttp-tests/src/test/java/okhttp3/CertificateAuthorityCouncilTest.java"
        },
        {
            "sha": "ec5b98c2e7c18eeb22933852cf6eadb6a9842bfa",
            "filename": "okhttp/src/main/java/okhttp3/CertificatePinner.java",
            "status": "modified",
            "additions": 10,
            "deletions": 9,
            "changes": 19,
            "blob_url": "https://github.com/square/okhttp/blob/784fabac7d1586a5614bd4bc8854fd62850dbe26/okhttp%2Fsrc%2Fmain%2Fjava%2Fokhttp3%2FCertificatePinner.java",
            "raw_url": "https://github.com/square/okhttp/raw/784fabac7d1586a5614bd4bc8854fd62850dbe26/okhttp%2Fsrc%2Fmain%2Fjava%2Fokhttp3%2FCertificatePinner.java",
            "contents_url": "https://api.github.com/repos/square/okhttp/contents/okhttp%2Fsrc%2Fmain%2Fjava%2Fokhttp3%2FCertificatePinner.java?ref=784fabac7d1586a5614bd4bc8854fd62850dbe26",
            "patch": "@@ -25,7 +25,8 @@\n import java.util.Set;\n import javax.net.ssl.SSLPeerUnverifiedException;\n import okhttp3.internal.Util;\n-import okhttp3.internal.tls.CertificateAuthorityCouncil;\n+import okhttp3.internal.tls.CertificateChainCleaner;\n+import okhttp3.internal.tls.TrustRootIndex;\n import okio.ByteString;\n \n import static java.util.Collections.unmodifiableSet;\n@@ -129,11 +130,11 @@ public final class CertificatePinner {\n   public static final CertificatePinner DEFAULT = new Builder().build();\n \n   private final Map<String, Set<ByteString>> hostnameToPins;\n-  private final CertificateAuthorityCouncil certificateAuthorityCouncil;\n+  private final TrustRootIndex trustRootIndex;\n \n   private CertificatePinner(Builder builder) {\n     this.hostnameToPins = Util.immutableMap(builder.hostnameToPins);\n-    this.certificateAuthorityCouncil = builder.certificateAuthorityCouncil;\n+    this.trustRootIndex = builder.trustRootIndex;\n   }\n \n   /**\n@@ -146,8 +147,8 @@ private CertificatePinner(Builder builder) {\n    */\n   public void check(String hostname, List<Certificate> peerCertificates)\n       throws SSLPeerUnverifiedException {\n-    if (certificateAuthorityCouncil != null) {\n-      peerCertificates = certificateAuthorityCouncil.normalizeCertificateChain(peerCertificates);\n+    if (trustRootIndex != null) {\n+      peerCertificates = new CertificateChainCleaner(trustRootIndex).clean(peerCertificates);\n     }\n \n     Set<ByteString> pins = findMatchingPins(hostname);\n@@ -237,18 +238,18 @@ private static ByteString sha1(X509Certificate x509Certificate) {\n   /** Builds a configured certificate pinner. */\n   public static final class Builder {\n     private final Map<String, Set<ByteString>> hostnameToPins = new LinkedHashMap<>();\n-    private CertificateAuthorityCouncil certificateAuthorityCouncil;\n+    private TrustRootIndex trustRootIndex;\n \n     public Builder() {\n     }\n \n     Builder(CertificatePinner certificatePinner) {\n       this.hostnameToPins.putAll(certificatePinner.hostnameToPins);\n-      this.certificateAuthorityCouncil = certificatePinner.certificateAuthorityCouncil;\n+      this.trustRootIndex = certificatePinner.trustRootIndex;\n     }\n \n-    Builder certificateAuthorityCouncil(CertificateAuthorityCouncil certificateAuthorityCouncil) {\n-      this.certificateAuthorityCouncil = certificateAuthorityCouncil;\n+    public Builder trustRootIndex(TrustRootIndex trustRootIndex) {\n+      this.trustRootIndex = trustRootIndex;\n       return this;\n     }\n "
        },
        {
            "sha": "4d5cbce1877ba55c7eaba10c2372482906cea24a",
            "filename": "okhttp/src/main/java/okhttp3/OkHttpClient.java",
            "status": "modified",
            "additions": 9,
            "deletions": 10,
            "changes": 19,
            "blob_url": "https://github.com/square/okhttp/blob/784fabac7d1586a5614bd4bc8854fd62850dbe26/okhttp%2Fsrc%2Fmain%2Fjava%2Fokhttp3%2FOkHttpClient.java",
            "raw_url": "https://github.com/square/okhttp/raw/784fabac7d1586a5614bd4bc8854fd62850dbe26/okhttp%2Fsrc%2Fmain%2Fjava%2Fokhttp3%2FOkHttpClient.java",
            "contents_url": "https://api.github.com/repos/square/okhttp/contents/okhttp%2Fsrc%2Fmain%2Fjava%2Fokhttp3%2FOkHttpClient.java?ref=784fabac7d1586a5614bd4bc8854fd62850dbe26",
            "patch": "@@ -36,8 +36,8 @@\n import okhttp3.internal.Util;\n import okhttp3.internal.http.StreamAllocation;\n import okhttp3.internal.io.RealConnection;\n-import okhttp3.internal.tls.CertificateAuthorityCouncil;\n import okhttp3.internal.tls.OkHostnameVerifier;\n+import okhttp3.internal.tls.TrustRootIndex;\n \n /**\n  * Factory for {@linkplain Call calls}, which can be used to send HTTP requests and read their\n@@ -133,7 +133,7 @@ public void apply(ConnectionSpec tlsConfiguration, SSLSocket sslSocket, boolean\n   final InternalCache internalCache;\n   final SocketFactory socketFactory;\n   final SSLSocketFactory sslSocketFactory;\n-  final CertificateAuthorityCouncil certificateAuthorityCouncil;\n+  final TrustRootIndex trustRootIndex;\n   final HostnameVerifier hostnameVerifier;\n   final CertificatePinner certificatePinner;\n   final Authenticator proxyAuthenticator;\n@@ -180,19 +180,18 @@ private OkHttpClient(Builder builder) {\n         throw new AssertionError(); // The system has no TLS. Just give up.\n       }\n     }\n-    if (sslSocketFactory != null && builder.certificateAuthorityCouncil == null) {\n+    if (sslSocketFactory != null && builder.trustRootIndex == null) {\n       X509TrustManager trustManager = Platform.get().trustManager(sslSocketFactory);\n       if (trustManager == null) {\n         throw new IllegalStateException(\"Unable to extract the trust manager on \" + Platform.get()\n             + \", sslSocketFactory is \" + sslSocketFactory.getClass());\n       }\n-      this.certificateAuthorityCouncil\n-          = new CertificateAuthorityCouncil(trustManager.getAcceptedIssuers());\n+      this.trustRootIndex = Platform.get().trustRootIndex(trustManager);\n       this.certificatePinner = builder.certificatePinner.newBuilder()\n-          .certificateAuthorityCouncil(certificateAuthorityCouncil)\n+          .trustRootIndex(trustRootIndex)\n           .build();\n     } else {\n-      this.certificateAuthorityCouncil = builder.certificateAuthorityCouncil;\n+      this.trustRootIndex = builder.trustRootIndex;\n       this.certificatePinner = builder.certificatePinner;\n     }\n     this.hostnameVerifier = builder.hostnameVerifier;\n@@ -341,7 +340,7 @@ public static final class Builder {\n     InternalCache internalCache;\n     SocketFactory socketFactory;\n     SSLSocketFactory sslSocketFactory;\n-    CertificateAuthorityCouncil certificateAuthorityCouncil;\n+    TrustRootIndex trustRootIndex;\n     HostnameVerifier hostnameVerifier;\n     CertificatePinner certificatePinner;\n     Authenticator proxyAuthenticator;\n@@ -389,7 +388,7 @@ public Builder() {\n       this.cache = okHttpClient.cache;\n       this.socketFactory = okHttpClient.socketFactory;\n       this.sslSocketFactory = okHttpClient.sslSocketFactory;\n-      this.certificateAuthorityCouncil = okHttpClient.certificateAuthorityCouncil;\n+      this.trustRootIndex = okHttpClient.trustRootIndex;\n       this.hostnameVerifier = okHttpClient.hostnameVerifier;\n       this.certificatePinner = okHttpClient.certificatePinner;\n       this.proxyAuthenticator = okHttpClient.proxyAuthenticator;\n@@ -527,7 +526,7 @@ public Builder socketFactory(SocketFactory socketFactory) {\n     public Builder sslSocketFactory(SSLSocketFactory sslSocketFactory) {\n       if (sslSocketFactory == null) throw new NullPointerException(\"sslSocketFactory == null\");\n       this.sslSocketFactory = sslSocketFactory;\n-      this.certificateAuthorityCouncil = null;\n+      this.trustRootIndex = null;\n       return this;\n     }\n "
        },
        {
            "sha": "27a83aecd8610900360847f6dad24c482e88d6bc",
            "filename": "okhttp/src/main/java/okhttp3/internal/Platform.java",
            "status": "modified",
            "additions": 13,
            "deletions": 0,
            "changes": 13,
            "blob_url": "https://github.com/square/okhttp/blob/784fabac7d1586a5614bd4bc8854fd62850dbe26/okhttp%2Fsrc%2Fmain%2Fjava%2Fokhttp3%2Finternal%2FPlatform.java",
            "raw_url": "https://github.com/square/okhttp/raw/784fabac7d1586a5614bd4bc8854fd62850dbe26/okhttp%2Fsrc%2Fmain%2Fjava%2Fokhttp3%2Finternal%2FPlatform.java",
            "contents_url": "https://api.github.com/repos/square/okhttp/contents/okhttp%2Fsrc%2Fmain%2Fjava%2Fokhttp3%2Finternal%2FPlatform.java?ref=784fabac7d1586a5614bd4bc8854fd62850dbe26",
            "patch": "@@ -33,6 +33,9 @@\n import javax.net.ssl.SSLSocketFactory;\n import javax.net.ssl.X509TrustManager;\n import okhttp3.Protocol;\n+import okhttp3.internal.tls.AndroidTrustRootIndex;\n+import okhttp3.internal.tls.RealTrustRootIndex;\n+import okhttp3.internal.tls.TrustRootIndex;\n import okio.Buffer;\n \n import static okhttp3.internal.Internal.logger;\n@@ -90,6 +93,10 @@ public X509TrustManager trustManager(SSLSocketFactory sslSocketFactory) {\n     return null;\n   }\n \n+  public TrustRootIndex trustRootIndex(X509TrustManager trustManager) {\n+    return new RealTrustRootIndex(trustManager.getAcceptedIssuers());\n+  }\n+\n   /**\n    * Configure TLS extensions on {@code sslSocket} for {@code route}.\n    *\n@@ -247,6 +254,12 @@ public Android(Class<?> sslParametersClass, OptionalMethod<Socket> setUseSession\n       return readFieldOrNull(context, X509TrustManager.class, \"trustManager\");\n     }\n \n+    @Override public TrustRootIndex trustRootIndex(X509TrustManager trustManager) {\n+      TrustRootIndex result = AndroidTrustRootIndex.get(trustManager);\n+      if (result != null) return result;\n+      return super.trustRootIndex(trustManager);\n+    }\n+\n     @Override public void configureTlsExtensions(\n         SSLSocket sslSocket, String hostname, List<Protocol> protocols) {\n       // Enable SNI and session tickets."
        },
        {
            "sha": "3805939c1c66f2144d337a0e1fec12b6f93c3615",
            "filename": "okhttp/src/main/java/okhttp3/internal/tls/AndroidTrustRootIndex.java",
            "status": "added",
            "additions": 63,
            "deletions": 0,
            "changes": 63,
            "blob_url": "https://github.com/square/okhttp/blob/784fabac7d1586a5614bd4bc8854fd62850dbe26/okhttp%2Fsrc%2Fmain%2Fjava%2Fokhttp3%2Finternal%2Ftls%2FAndroidTrustRootIndex.java",
            "raw_url": "https://github.com/square/okhttp/raw/784fabac7d1586a5614bd4bc8854fd62850dbe26/okhttp%2Fsrc%2Fmain%2Fjava%2Fokhttp3%2Finternal%2Ftls%2FAndroidTrustRootIndex.java",
            "contents_url": "https://api.github.com/repos/square/okhttp/contents/okhttp%2Fsrc%2Fmain%2Fjava%2Fokhttp3%2Finternal%2Ftls%2FAndroidTrustRootIndex.java?ref=784fabac7d1586a5614bd4bc8854fd62850dbe26",
            "patch": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright (C) 2016 Square, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package okhttp3.internal.tls;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.security.cert.TrustAnchor;\n+import java.security.cert.X509Certificate;\n+import javax.net.ssl.X509TrustManager;\n+\n+/**\n+ * A index of trusted root certificates that exploits knowledge of Android implementation details.\n+ * This class is potentially much faster to initialize than {@link RealTrustRootIndex} because\n+ * it doesn't need to load and index trusted CA certificates.\n+ */\n+public final class AndroidTrustRootIndex implements TrustRootIndex {\n+  private final X509TrustManager trustManager;\n+  private final Method findByIssuerAndSignatureMethod;\n+\n+  public AndroidTrustRootIndex(\n+      X509TrustManager trustManager, Method findByIssuerAndSignatureMethod) {\n+    this.findByIssuerAndSignatureMethod = findByIssuerAndSignatureMethod;\n+    this.trustManager = trustManager;\n+  }\n+\n+  @Override public X509Certificate findByIssuerAndSignature(X509Certificate cert) {\n+    try {\n+      TrustAnchor trustAnchor = (TrustAnchor) findByIssuerAndSignatureMethod.invoke(\n+          trustManager, cert);\n+      return trustAnchor.getTrustedCert();\n+    } catch (IllegalAccessException e) {\n+      throw new AssertionError();\n+    } catch (InvocationTargetException e) {\n+      return null;\n+    }\n+  }\n+\n+  public static TrustRootIndex get(X509TrustManager trustManager) {\n+    // From org.conscrypt.TrustManagerImpl, we want the method with this signature:\n+    // private TrustAnchor findTrustAnchorByIssuerAndSignature(X509Certificate lastCert);\n+    try {\n+      Method method = trustManager.getClass().getDeclaredMethod(\n+          \"findTrustAnchorByIssuerAndSignature\", X509Certificate.class);\n+      method.setAccessible(true);\n+      return new AndroidTrustRootIndex(trustManager, method);\n+    } catch (NoSuchMethodException e) {\n+      return null;\n+    }\n+  }\n+}"
        },
        {
            "sha": "0121aba30cd8677000102fd616fcbd1ab223f361",
            "filename": "okhttp/src/main/java/okhttp3/internal/tls/CertificateChainCleaner.java",
            "status": "renamed",
            "additions": 18,
            "deletions": 49,
            "changes": 67,
            "blob_url": "https://github.com/square/okhttp/blob/784fabac7d1586a5614bd4bc8854fd62850dbe26/okhttp%2Fsrc%2Fmain%2Fjava%2Fokhttp3%2Finternal%2Ftls%2FCertificateChainCleaner.java",
            "raw_url": "https://github.com/square/okhttp/raw/784fabac7d1586a5614bd4bc8854fd62850dbe26/okhttp%2Fsrc%2Fmain%2Fjava%2Fokhttp3%2Finternal%2Ftls%2FCertificateChainCleaner.java",
            "contents_url": "https://api.github.com/repos/square/okhttp/contents/okhttp%2Fsrc%2Fmain%2Fjava%2Fokhttp3%2Finternal%2Ftls%2FCertificateChainCleaner.java?ref=784fabac7d1586a5614bd4bc8854fd62850dbe26",
            "patch": "@@ -17,56 +17,43 @@\n package okhttp3.internal.tls;\n \n import java.security.GeneralSecurityException;\n-import java.security.PublicKey;\n import java.security.cert.Certificate;\n import java.security.cert.X509Certificate;\n import java.util.ArrayDeque;\n import java.util.ArrayList;\n import java.util.Deque;\n import java.util.Iterator;\n-import java.util.LinkedHashMap;\n import java.util.List;\n-import java.util.Map;\n import javax.net.ssl.SSLPeerUnverifiedException;\n-import javax.security.auth.x500.X500Principal;\n \n /**\n- * A set of trusted Certificate Authority (CA) certificates that are trusted to verify the TLS\n- * certificates offered by remote web servers.\n+ * Computes the effective certificate chain from the raw array returned by Java's built in TLS APIs.\n+ * Cleaning a chain returns a list of certificates where the first element is {@code chain[0]}, each\n+ * certificate is signed by the certificate that follows, and the last certificate is a trusted CA\n+ * certificate.\n+ *\n+ * <p>Use of the chain cleaner is necessary to omit unexpected certificates that aren't relevant to\n+ * the TLS handshake and to extract the trusted CA certificate for the benefit of certificate\n+ * pinning.\n  *\n  * <p>This class includes code from <a href=\"https://conscrypt.org/\">Conscrypt's</a> {@code\n  * TrustManagerImpl} and {@code TrustedCertificateIndex}.\n  */\n-public final class CertificateAuthorityCouncil {\n-  private final Map<X500Principal, List<X509Certificate>> subjectToCaCerts = new LinkedHashMap<>();\n+public final class CertificateChainCleaner {\n+  private final TrustRootIndex trustRootIndex;\n \n-  public CertificateAuthorityCouncil(X509Certificate... caCerts) {\n-    for (X509Certificate caCert : caCerts) {\n-      X500Principal subject = caCert.getSubjectX500Principal();\n-      List<X509Certificate> subjectCaCerts = subjectToCaCerts.get(subject);\n-      if (subjectCaCerts == null) {\n-        subjectCaCerts = new ArrayList<>(1);\n-        subjectToCaCerts.put(subject, subjectCaCerts);\n-      }\n-      subjectCaCerts.add(caCert);\n-    }\n+  public CertificateChainCleaner(TrustRootIndex trustRootIndex) {\n+    this.trustRootIndex = trustRootIndex;\n   }\n \n   /**\n-   * Computes the effective certificate chain from the raw array returned by Java's built in TLS\n-   * APIs. This method returns a list of certificates where the first element is {@code chain[0]},\n-   * each certificate is signed by the certificate that follows, and the last certificate is a\n-   * trusted CA certificate.\n-   *\n-   * <p>Use of this method is necessary to omit unexpected certificates that aren't relevant to the\n-   * TLS handshake and to extract the trusted CA certificate for the benefit of certificate pinning.\n+   * Returns a cleaned chain for {@code chain}.\n    *\n    * <p>This method throws if the complete chain to a trusted CA certificate cannot be constructed.\n-   * This is unexpected unless the X509 trust manager in this class is different from the trust\n-   * manager that was used to establish {@code chain}.\n+   * This is unexpected unless the trust root index in this class has a different trust manager than\n+   * what was used to establish {@code chain}.\n    */\n-  public List<Certificate> normalizeCertificateChain(List<Certificate> chain)\n-      throws SSLPeerUnverifiedException {\n+  public List<Certificate> clean(List<Certificate> chain) throws SSLPeerUnverifiedException {\n     Deque<Certificate> queue = new ArrayDeque<>(chain);\n     List<Certificate> result = new ArrayList<>();\n     result.add(queue.removeFirst());\n@@ -78,8 +65,8 @@ public List<Certificate> normalizeCertificateChain(List<Certificate> chain)\n       // If this cert has been signed by a trusted CA cert, we're done. Add the trusted CA\n       // certificate to the end of the chain, unless it's already present. (That would happen if the\n       // first certificate in the chain is itself a self-signed and trusted CA certificate.)\n-      X509Certificate caCert = findByIssuerAndSignature(toVerify);\n-      if (caCert != null && verifySignature(toVerify, caCert)) {\n+      X509Certificate caCert = trustRootIndex.findByIssuerAndSignature(toVerify);\n+      if (caCert != null) {\n         if (result.size() > 1 || !toVerify.equals(caCert)) {\n           result.add(caCert);\n         }\n@@ -111,22 +98,4 @@ private boolean verifySignature(X509Certificate toVerify, X509Certificate signin\n       return false;\n     }\n   }\n-\n-  /** Returns the trusted CA certificate that signed {@code cert}. */\n-  private X509Certificate findByIssuerAndSignature(X509Certificate cert) {\n-    X500Principal issuer = cert.getIssuerX500Principal();\n-    List<X509Certificate> subjectCaCerts = subjectToCaCerts.get(issuer);\n-    if (subjectCaCerts == null) return null;\n-\n-    for (X509Certificate caCert : subjectCaCerts) {\n-      PublicKey publicKey = caCert.getPublicKey();\n-      try {\n-        cert.verify(publicKey);\n-        return caCert;\n-      } catch (Exception ignored) {\n-      }\n-    }\n-\n-    return null;\n-  }\n }",
            "previous_filename": "okhttp/src/main/java/okhttp3/internal/tls/CertificateAuthorityCouncil.java"
        },
        {
            "sha": "fb688328f5034c96a3be65c1970b3e3965bef14d",
            "filename": "okhttp/src/main/java/okhttp3/internal/tls/RealTrustRootIndex.java",
            "status": "added",
            "additions": 58,
            "deletions": 0,
            "changes": 58,
            "blob_url": "https://github.com/square/okhttp/blob/784fabac7d1586a5614bd4bc8854fd62850dbe26/okhttp%2Fsrc%2Fmain%2Fjava%2Fokhttp3%2Finternal%2Ftls%2FRealTrustRootIndex.java",
            "raw_url": "https://github.com/square/okhttp/raw/784fabac7d1586a5614bd4bc8854fd62850dbe26/okhttp%2Fsrc%2Fmain%2Fjava%2Fokhttp3%2Finternal%2Ftls%2FRealTrustRootIndex.java",
            "contents_url": "https://api.github.com/repos/square/okhttp/contents/okhttp%2Fsrc%2Fmain%2Fjava%2Fokhttp3%2Finternal%2Ftls%2FRealTrustRootIndex.java?ref=784fabac7d1586a5614bd4bc8854fd62850dbe26",
            "patch": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright (C) 2016 Square, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package okhttp3.internal.tls;\n+\n+import java.security.PublicKey;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.security.auth.x500.X500Principal;\n+\n+public final class RealTrustRootIndex implements TrustRootIndex {\n+  private final Map<X500Principal, List<X509Certificate>> subjectToCaCerts;\n+\n+  public RealTrustRootIndex(X509Certificate... caCerts) {\n+    subjectToCaCerts = new LinkedHashMap<>();\n+    for (X509Certificate caCert : caCerts) {\n+      X500Principal subject = caCert.getSubjectX500Principal();\n+      List<X509Certificate> subjectCaCerts = subjectToCaCerts.get(subject);\n+      if (subjectCaCerts == null) {\n+        subjectCaCerts = new ArrayList<>(1);\n+        subjectToCaCerts.put(subject, subjectCaCerts);\n+      }\n+      subjectCaCerts.add(caCert);\n+    }\n+  }\n+\n+  @Override public X509Certificate findByIssuerAndSignature(X509Certificate cert) {\n+    X500Principal issuer = cert.getIssuerX500Principal();\n+    List<X509Certificate> subjectCaCerts = subjectToCaCerts.get(issuer);\n+    if (subjectCaCerts == null) return null;\n+\n+    for (X509Certificate caCert : subjectCaCerts) {\n+      PublicKey publicKey = caCert.getPublicKey();\n+      try {\n+        cert.verify(publicKey);\n+        return caCert;\n+      } catch (Exception ignored) {\n+      }\n+    }\n+\n+    return null;\n+  }\n+}"
        },
        {
            "sha": "499f120e333722cab138d8959b58712f2f9389af",
            "filename": "okhttp/src/main/java/okhttp3/internal/tls/TrustRootIndex.java",
            "status": "added",
            "additions": 23,
            "deletions": 0,
            "changes": 23,
            "blob_url": "https://github.com/square/okhttp/blob/784fabac7d1586a5614bd4bc8854fd62850dbe26/okhttp%2Fsrc%2Fmain%2Fjava%2Fokhttp3%2Finternal%2Ftls%2FTrustRootIndex.java",
            "raw_url": "https://github.com/square/okhttp/raw/784fabac7d1586a5614bd4bc8854fd62850dbe26/okhttp%2Fsrc%2Fmain%2Fjava%2Fokhttp3%2Finternal%2Ftls%2FTrustRootIndex.java",
            "contents_url": "https://api.github.com/repos/square/okhttp/contents/okhttp%2Fsrc%2Fmain%2Fjava%2Fokhttp3%2Finternal%2Ftls%2FTrustRootIndex.java?ref=784fabac7d1586a5614bd4bc8854fd62850dbe26",
            "patch": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright (C) 2016 Square, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package okhttp3.internal.tls;\n+\n+import java.security.cert.X509Certificate;\n+\n+public interface TrustRootIndex {\n+  /** Returns the trusted CA certificate that signed {@code cert}. */\n+  X509Certificate findByIssuerAndSignature(X509Certificate cert);\n+}"
        }
    ]
}