{
    "sha": "8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146",
    "node_id": "MDY6Q29tbWl0MTA3Mjg0NTo4YTU3NDNjNzRiN2FiMWRhZjdjYjQyOGZlZTBkOWIzZjAzZmI5MTQ2",
    "commit": {
        "author": {
            "name": "Jens Schauder",
            "email": "jschauder@pivotal.io",
            "date": "2019-03-21T10:39:28Z"
        },
        "committer": {
            "name": "Oliver Drotbohm",
            "email": "ogierke@pivotal.io",
            "date": "2019-04-01T09:24:56Z"
        },
        "message": "DATAJPA-1519 - Wildcard escaping in LIKE-queries.\n\nDerived queries with `contains`, `startWith` or `endsWith` predicates now use wildcard escaping in order to avoid selecting more then requested. A function `escape(String, String)` is made available in SpEL expressions as well for the same purpose.\n\nNote that annotated queries and derived queries with LIKE conditions don't get escaped because it is not clear if the use of wildcards in the argument is intended or not. Improved reference documentation accordingly.",
        "tree": {
            "sha": "50f122254d2c142c8366714015bbbad5fe60afbd",
            "url": "https://api.github.com/repos/spring-projects/spring-data-jpa/git/trees/50f122254d2c142c8366714015bbbad5fe60afbd"
        },
        "url": "https://api.github.com/repos/spring-projects/spring-data-jpa/git/commits/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146",
        "comment_count": 0,
        "verification": {
            "verified": true,
            "reason": "valid",
            "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3SOwfGzOVQk6tElQbkK1eHVD9pAFAlyh2OkACgkQbkK1eHVD\n9pDighAAt8IK4bBzK44OB3NvvwHx8vOjghX7ttY5S3ITtTkXLU/yC0Ew/GpS2/0a\nDBuawehiA/x3lMjr+iAT616jQP9sEbHHAZlO4EijjF5r+pDNTsgkm6pKYddAzKtW\nK/eG6NWMehkcuUP+usiCSVg2LSCbPPS3APYIu6WmAVDWTAzn/2epHXNy9YE/AY8Y\nFw/OHfK3FnPPSyaMoPau4lMj8Tndw9dqa4taH37+Gn/fe5+VtKR756sV2Aub39xs\nAoV1Zf8Vbh+gjhl+W6bAEeXTj2StB/TiZWIufbHuWxg7cjDG9+AxWVuNrhPebsrm\nJstnHTsLcUM9q6EMjrKSTV5vWMiLF9pyxC2BWT7RfQJnlLptuF+pMhyHO5kZXOs+\nsny0FRylZL/uTdZn7YBkhnZdaa1gYPfw4kRo52/YzB3x4K2dd5Gvb75/H9VO8TkL\nOgM1FphUOqQAXFUADmJmQIvzGyt+lNmlKfUGzyTbCWNFIqb6lFLfUBTSHWdC1B2N\njcBof3gegI4us2ebVk4g64M7U3tB//6qozxNtSXSMN3y56yOxuj9cAOBekmH+OIb\n8HkcZyQTfELQbZIBYlGx6UyRjY2WEAdouZ8YLqLqnKdX/rGKY4DZ/SC2ZH4PHDCC\n2nbRPAFx7CouAwQkNINMzS2uDbXKNukvZmkW3XjVm0Sc9+y68Ok=\n=iMQV\n-----END PGP SIGNATURE-----",
            "payload": "tree 50f122254d2c142c8366714015bbbad5fe60afbd\nparent 899d7e897675e88db9b374cb656aace9f8da705a\nauthor Jens Schauder <jschauder@pivotal.io> 1553164768 +0100\ncommitter Oliver Drotbohm <ogierke@pivotal.io> 1554110696 +0200\n\nDATAJPA-1519 - Wildcard escaping in LIKE-queries.\n\nDerived queries with `contains`, `startWith` or `endsWith` predicates now use wildcard escaping in order to avoid selecting more then requested. A function `escape(String, String)` is made available in SpEL expressions as well for the same purpose.\n\nNote that annotated queries and derived queries with LIKE conditions don't get escaped because it is not clear if the use of wildcards in the argument is intended or not. Improved reference documentation accordingly.\n",
            "verified_at": "2024-11-20T22:38:23Z"
        }
    },
    "url": "https://api.github.com/repos/spring-projects/spring-data-jpa/commits/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146",
    "html_url": "https://github.com/spring-projects/spring-data-jpa/commit/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146",
    "comments_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/commits/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/comments",
    "author": {
        "login": "schauder",
        "id": 136683,
        "node_id": "MDQ6VXNlcjEzNjY4Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/136683?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/schauder",
        "html_url": "https://github.com/schauder",
        "followers_url": "https://api.github.com/users/schauder/followers",
        "following_url": "https://api.github.com/users/schauder/following{/other_user}",
        "gists_url": "https://api.github.com/users/schauder/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/schauder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/schauder/subscriptions",
        "organizations_url": "https://api.github.com/users/schauder/orgs",
        "repos_url": "https://api.github.com/users/schauder/repos",
        "events_url": "https://api.github.com/users/schauder/events{/privacy}",
        "received_events_url": "https://api.github.com/users/schauder/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "odrotbohm",
        "id": 128577,
        "node_id": "MDQ6VXNlcjEyODU3Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/128577?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/odrotbohm",
        "html_url": "https://github.com/odrotbohm",
        "followers_url": "https://api.github.com/users/odrotbohm/followers",
        "following_url": "https://api.github.com/users/odrotbohm/following{/other_user}",
        "gists_url": "https://api.github.com/users/odrotbohm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/odrotbohm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/odrotbohm/subscriptions",
        "organizations_url": "https://api.github.com/users/odrotbohm/orgs",
        "repos_url": "https://api.github.com/users/odrotbohm/repos",
        "events_url": "https://api.github.com/users/odrotbohm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/odrotbohm/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "899d7e897675e88db9b374cb656aace9f8da705a",
            "url": "https://api.github.com/repos/spring-projects/spring-data-jpa/commits/899d7e897675e88db9b374cb656aace9f8da705a",
            "html_url": "https://github.com/spring-projects/spring-data-jpa/commit/899d7e897675e88db9b374cb656aace9f8da705a"
        }
    ],
    "stats": {
        "total": 334,
        "additions": 266,
        "deletions": 68
    },
    "files": [
        {
            "sha": "ed73d60271be9f3188602536a6a27bf16c5ffe66",
            "filename": "pom.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/pom.xml",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/pom.xml",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/pom.xml?ref=8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146",
            "patch": "@@ -303,7 +303,7 @@\n \t\t<dependency>\n \t\t\t<groupId>org.hsqldb</groupId>\n \t\t\t<artifactId>hsqldb</artifactId>\n-\t\t\t<version>2.2.8</version>\n+\t\t\t<version>2.4.1</version>\n \t\t\t<scope>test</scope>\n \t\t</dependency>\n "
        },
        {
            "sha": "7a3eac5c301a1bd8523598e13923e5170520e477",
            "filename": "src/main/asciidoc/jpa.adoc",
            "status": "modified",
            "additions": 50,
            "deletions": 0,
            "changes": 50,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Fmain%2Fasciidoc%2Fjpa.adoc",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Fmain%2Fasciidoc%2Fjpa.adoc",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Fmain%2Fasciidoc%2Fjpa.adoc?ref=8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146",
            "patch": "@@ -123,6 +123,11 @@ This section describes the various ways to create a query with Spring Data JPA.\n \n The JPA module supports defining a query manually as a String or having it being derived from the method name.\n \n+Derived queries with the predicates `IsStartingWith`, `StartingWith`, `StartsWith`, IsEndingWith\", `EndingWith`, `EndsWith`,\n+`IsNotContaining`, `NotContaining`, `NotContains`, `IsContaining`, `Containing`, `Contains` the respective arguments for these queries will get sanitized.\n+This means if the arguments actually contain characters recognized by `LIKE` as wildcards these will get escaped so they match only as literals.\n+Compare with <<jpa.query.spel-expressions>>.\n+\n ==== Declared Queries\n Although getting a query derived from the method name is quite convenient, one might face the situation in which either the method name parser does not support the keyword one wants to use or the method name would get unnecessarily ugly. So you can either use JPA named queries through a naming convention (see <<jpa.query-methods.named-queries>> for more information) or rather annotate your query method with `@Query` (see <<jpa.query-methods.at-query>> for details).\n \n@@ -427,6 +432,51 @@ public interface ConcreteRepository\n \n In the preceding example, the `MappedTypeRepository` interface is the common parent interface for a few domain types extending `AbstractMappedType`. It also defines the generic `findAllByAttribute(\u2026)` method, which can be used on instances of the specialized repository interfaces. If you now invoke `findByAllAttribute(\u2026)` on `ConcreteRepository`, the query becomes `select t from ConcreteType t where t.attribute = ?1`.\n \n+SpEL expressions to manipulate arguments may also be used to manipulate method arguments.\n+In these SpEL expressions the entity name is not available, but the arguments are.\n+They can be accessed by name or index as demonstrated in the following example.\n+\n+.Using SpEL expressions in repository query methods - accessing arguments.\n+====\n+[source, java]\n+----\n+@Query(\"select u from User u where u.firstname = ?1 and u.firstname=?#{[0]} and u.emailAddress = ?#{principal.emailAddress}\")\n+List<User> findByFirstnameAndCurrentUserWithCustomQuery(String firstname);\n+----\n+====\n+\n+For `like`-conditions one often wants to appen `%` to the beginning or the end of a String valued parameter.\n+This can be done by appending or prefixing a bind parameter marker or a SpEL expression with `%`.\n+Again the following example demonstrates this.\n+\n+.Using SpEL expressions in repository query methods - wildcard shortcut.\n+====\n+[source, java]\n+----\n+@Query(\"select u from User u where u.lastname like %:#{[0]}% and u.lastname like %:lastname%\")\n+List<User> findByLastnameWithSpelExpression(@Param(\"lastname\") String lastname);\n+----\n+====\n+\n+When using `like`-conditions with values that are coming from a not secure source the values should be sanitized so they can't contain any wildcards and thereby allow attackers to select more data than they should be able to.\n+For this purpose the the `escape(String, String)` method is made available in the SpEL context.\n+It prefixes all instances of `_` and `%` in the first argument with the single character from the second argument.\n+In combination with the `escape` clause of the `like` expression available in JPQL and standard SQL this allows easy cleaning of bind parameters.\n+\n+\n+.Using SpEL expressions in repository query methods - sanitizing input values.\n+====\n+[source, java]\n+----\n+@Query(\"select u from User u where u.firstname like %?#{#escape([0],'#')}% escape '#'\")\n+List<User> findContainingEscaped(String namePart);\n+----\n+====\n+\n+Given this method declaration in an repository interface `findContainingEscaped(\"Peter_\")\" will find `Peter_Parker` but not `Peter Parker`.\n+Note that the method `escape(String, String)` available in the SpEL context will only escape the SQL and JPQL standard wildcards `_` and `%`.\n+If the underlying database or the JPA implementation supports additional wildcards these will not get escaped.\n+\n [[jpa.modifying-queries]]\n === Modifying Queries\n "
        },
        {
            "sha": "06c82afc409bd47857a6d85ea0963b0856f52f91",
            "filename": "src/main/java/org/springframework/data/jpa/repository/config/EnableJpaRepositories.java",
            "status": "modified",
            "additions": 8,
            "deletions": 0,
            "changes": 8,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fconfig%2FEnableJpaRepositories.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fconfig%2FEnableJpaRepositories.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fconfig%2FEnableJpaRepositories.java?ref=8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146",
            "patch": "@@ -150,4 +150,12 @@\n \t * @return whether to enable default transactions, defaults to {@literal true}.\n \t */\n \tboolean enableDefaultTransactions() default true;\n+\n+\t/**\n+\t * Configures what character is used to escape the wildcards {@literal _} and {@literal %} in derived queries with\n+\t * {@literal contains}, {@literal startsWith} or {@literal endsWith} clauses.\n+\t * \n+\t * @return a single character used for escaping.\n+\t */\n+\tchar escapeCharacter() default '\\\\';\n }"
        },
        {
            "sha": "feafaa7b9f92e89a27d115c0dd488ba121dbe95f",
            "filename": "src/main/java/org/springframework/data/jpa/repository/config/JpaRepositoryConfigExtension.java",
            "status": "modified",
            "additions": 32,
            "deletions": 11,
            "changes": 43,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fconfig%2FJpaRepositoryConfigExtension.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fconfig%2FJpaRepositoryConfigExtension.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fconfig%2FJpaRepositoryConfigExtension.java?ref=8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146",
            "patch": "@@ -54,7 +54,7 @@\n  * {@link PersistenceUnit} annotated properties and methods) as well as\n  * {@link PersistenceExceptionTranslationPostProcessor} to enable exception translation of persistence specific\n  * exceptions into Spring's {@link DataAccessException} hierarchy.\n- * \n+ *\n  * @author Oliver Gierke\n  * @author Eberhard Wolff\n  * @author Gil Markham\n@@ -66,7 +66,7 @@ public class JpaRepositoryConfigExtension extends RepositoryConfigurationExtensi\n \tprivate static final String DEFAULT_TRANSACTION_MANAGER_BEAN_NAME = \"transactionManager\";\n \tprivate static final String ENABLE_DEFAULT_TRANSACTIONS_ATTRIBUTE = \"enableDefaultTransactions\";\n \n-\t/* \n+\t/*\n \t * (non-Javadoc)\n \t * @see org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport#getModuleName()\n \t */\n@@ -75,15 +75,15 @@ public String getModuleName() {\n \t\treturn \"JPA\";\n \t}\n \n-\t/* \n+\t/*\n \t * (non-Javadoc)\n \t * @see org.springframework.data.repository.config14.RepositoryConfigurationExtension#getRepositoryInterface()\n \t */\n \tpublic String getRepositoryFactoryClassName() {\n \t\treturn JpaRepositoryFactoryBean.class.getName();\n \t}\n \n-\t/* \n+\t/*\n \t * (non-Javadoc)\n \t * @see org.springframework.data.repository.config14.RepositoryConfigurationExtensionSupport#getModulePrefix()\n \t */\n@@ -92,7 +92,7 @@ protected String getModulePrefix() {\n \t\treturn getModuleName().toLowerCase(Locale.US);\n \t}\n \n-\t/* \n+\t/*\n \t * (non-Javadoc)\n \t * @see org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport#getIdentifyingAnnotations()\n \t */\n@@ -102,7 +102,7 @@ protected Collection<Class<? extends Annotation>> getIdentifyingAnnotations() {\n \t\treturn Arrays.asList(Entity.class, MappedSuperclass.class);\n \t}\n \n-\t/* \n+\t/*\n \t * (non-Javadoc)\n \t * @see org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport#getIdentifyingTypes()\n \t */\n@@ -111,21 +111,42 @@ protected Collection<Class<?>> getIdentifyingTypes() {\n \t\treturn Collections.<Class<?>> singleton(JpaRepository.class);\n \t}\n \n-\t/* \n+\t/*\n \t * (non-Javadoc)\n \t * @see org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport#postProcess(org.springframework.beans.factory.support.BeanDefinitionBuilder, org.springframework.data.repository.config.RepositoryConfigurationSource)\n \t */\n \t@Override\n \tpublic void postProcess(BeanDefinitionBuilder builder, RepositoryConfigurationSource source) {\n \n+\t\tCharacter escapeCharacter = getEscapeCharacter(source);\n+\n \t\tString transactionManagerRef = source.getAttribute(\"transactionManagerRef\");\n \t\tbuilder.addPropertyValue(\"transactionManager\",\n \t\t\t\ttransactionManagerRef == null ? DEFAULT_TRANSACTION_MANAGER_BEAN_NAME : transactionManagerRef);\n \t\tbuilder.addPropertyValue(\"entityManager\", getEntityManagerBeanDefinitionFor(source, source.getSource()));\n+\t\tbuilder.addPropertyValue(\"escapeCharacter\", escapeCharacter == null ? '\\\\' : escapeCharacter);\n \t\tbuilder.addPropertyReference(\"mappingContext\", JPA_MAPPING_CONTEXT_BEAN_NAME);\n \t}\n \n-\t/* \n+\t/**\n+\t * XML configurations do not support {@link Character} values. This method catches the exception thrown and returns an\n+\t * {@link Optional#empty()} instead.\n+\t */\n+\tprivate static Character getEscapeCharacter(RepositoryConfigurationSource source) {\n+\n+\t\ttry {\n+\n+\t\t\treturn AnnotationRepositoryConfigurationSource.class.isInstance(source) //\n+\t\t\t\t\t? (Character) AnnotationRepositoryConfigurationSource.class.cast(source).getAttributes()\n+\t\t\t\t\t\t\t.get(\"escapeCharacter\") //\n+\t\t\t\t\t: source.getAttribute(\"escapeCharacter\").toCharArray()[0];\n+\n+\t\t} catch (IllegalArgumentException ___) {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\t/*\n \t * (non-Javadoc)\n \t * @see org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport#postProcess(org.springframework.beans.factory.support.BeanDefinitionBuilder, org.springframework.data.repository.config.AnnotationRepositoryConfigurationSource)\n \t */\n@@ -138,7 +159,7 @@ public void postProcess(BeanDefinitionBuilder builder, AnnotationRepositoryConfi\n \t\t\t\tattributes.getBoolean(ENABLE_DEFAULT_TRANSACTIONS_ATTRIBUTE));\n \t}\n \n-\t/* \n+\t/*\n \t * (non-Javadoc)\n \t * @see org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport#postProcess(org.springframework.beans.factory.support.BeanDefinitionBuilder, org.springframework.data.repository.config.XmlRepositoryConfigurationSource)\n \t */\n@@ -152,7 +173,7 @@ public void postProcess(BeanDefinitionBuilder builder, XmlRepositoryConfiguratio\n \t\t}\n \t}\n \n-\t/* \n+\t/*\n \t * (non-Javadoc)\n \t * @see org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport#registerBeansForRoot(org.springframework.beans.factory.support.BeanDefinitionRegistry, org.springframework.data.repository.config.RepositoryConfigurationSource)\n \t */\n@@ -183,7 +204,7 @@ public void registerBeansForRoot(BeanDefinitionRegistry registry, RepositoryConf\n \t/**\n \t * Creates an anonymous factory to extract the actual {@link javax.persistence.EntityManager} from the\n \t * {@link javax.persistence.EntityManagerFactory} bean name reference.\n-\t * \n+\t *\n \t * @param entityManagerFactoryBeanName\n \t * @param source\n \t * @return"
        },
        {
            "sha": "a3b86443aec9488006d7f21fd06cccfbf48ab28b",
            "filename": "src/main/java/org/springframework/data/jpa/repository/query/JpaQueryCreator.java",
            "status": "modified",
            "additions": 5,
            "deletions": 2,
            "changes": 7,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FJpaQueryCreator.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FJpaQueryCreator.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FJpaQueryCreator.java?ref=8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146",
            "patch": "@@ -35,6 +35,7 @@\n \n import org.springframework.data.domain.Sort;\n import org.springframework.data.jpa.repository.query.ParameterMetadataProvider.ParameterMetadata;\n+import org.springframework.data.jpa.repository.support.EscapeCharacter;\n import org.springframework.data.mapping.PropertyPath;\n import org.springframework.data.repository.query.ReturnedType;\n import org.springframework.data.repository.query.parser.AbstractQueryCreator;\n@@ -57,6 +58,7 @@ public class JpaQueryCreator extends AbstractQueryCreator<CriteriaQuery<? extend\n \tprivate final ParameterMetadataProvider provider;\n \tprivate final ReturnedType returnedType;\n \tprivate final PartTree tree;\n+\tprivate final EscapeCharacter escape;\n \n \t/**\n \t * Create a new {@link JpaQueryCreator}.\n@@ -72,13 +74,14 @@ public JpaQueryCreator(PartTree tree, ReturnedType type, CriteriaBuilder builder\n \t\tsuper(tree);\n \t\tthis.tree = tree;\n \n-\t\tCriteriaQuery<? extends Object> criteriaQuery = createCriteriaQuery(builder, type);\n+\t\tCriteriaQuery<?> criteriaQuery = createCriteriaQuery(builder, type);\n \n \t\tthis.builder = builder;\n \t\tthis.query = criteriaQuery.distinct(tree.isDistinct());\n \t\tthis.root = query.from(type.getDomainType());\n \t\tthis.provider = provider;\n \t\tthis.returnedType = type;\n+\t\tthis.escape = provider.getEscape();\n \t}\n \n \t/**\n@@ -289,7 +292,7 @@ public Predicate build() {\n \t\t\t\t\tExpression<String> stringPath = getTypedPath(root, part);\n \t\t\t\t\tExpression<String> propertyExpression = upperIfIgnoreCase(stringPath);\n \t\t\t\t\tExpression<String> parameterExpression = upperIfIgnoreCase(provider.next(part, String.class).getExpression());\n-\t\t\t\t\tPredicate like = builder.like(propertyExpression, parameterExpression);\n+\t\t\t\t\tPredicate like = builder.like(propertyExpression, parameterExpression, escape.getValue());\n \t\t\t\t\treturn type.equals(NOT_LIKE) || type.equals(NOT_CONTAINING) ? like.not() : like;\n \t\t\t\tcase TRUE:\n \t\t\t\t\tExpression<Boolean> truePath = getTypedPath(root, part);"
        },
        {
            "sha": "2748eff4a7f2ef3fab321684ee76672aec773295",
            "filename": "src/main/java/org/springframework/data/jpa/repository/query/JpaQueryLookupStrategy.java",
            "status": "modified",
            "additions": 11,
            "deletions": 5,
            "changes": 16,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FJpaQueryLookupStrategy.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FJpaQueryLookupStrategy.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FJpaQueryLookupStrategy.java?ref=8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146",
            "patch": "@@ -22,6 +22,7 @@\n import org.springframework.data.jpa.provider.PersistenceProvider;\n import org.springframework.data.jpa.provider.QueryExtractor;\n import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.jpa.repository.support.EscapeCharacter;\n import org.springframework.data.projection.ProjectionFactory;\n import org.springframework.data.repository.core.NamedQueries;\n import org.springframework.data.repository.core.RepositoryMetadata;\n@@ -89,16 +90,19 @@ public final RepositoryQuery resolveQuery(Method method, RepositoryMetadata meta\n \tprivate static class CreateQueryLookupStrategy extends AbstractQueryLookupStrategy {\n \n \t\tprivate final PersistenceProvider persistenceProvider;\n+\t\tprivate final EscapeCharacter escape;\n \n-\t\tpublic CreateQueryLookupStrategy(EntityManager em, QueryExtractor extractor) {\n+\t\tpublic CreateQueryLookupStrategy(EntityManager em, QueryExtractor extractor, EscapeCharacter escape) {\n \n \t\t\tsuper(em, extractor);\n+\n \t\t\tthis.persistenceProvider = PersistenceProvider.fromEntityManager(em);\n+\t\t\tthis.escape = escape;\n \t\t}\n \n \t\t@Override\n \t\tprotected RepositoryQuery resolveQuery(JpaQueryMethod method, EntityManager em, NamedQueries namedQueries) {\n-\t\t\treturn new PartTreeJpaQuery(method, em, persistenceProvider);\n+\t\t\treturn new PartTreeJpaQuery(method, em, persistenceProvider, escape);\n \t\t}\n \n \t}\n@@ -216,22 +220,24 @@ protected RepositoryQuery resolveQuery(JpaQueryMethod method, EntityManager em,\n \t * @param key may be {@literal null}.\n \t * @param extractor must not be {@literal null}.\n \t * @param evaluationContextProvider must not be {@literal null}.\n+\t * @param escape\n \t * @return\n \t */\n \tpublic static QueryLookupStrategy create(EntityManager em, Key key, QueryExtractor extractor,\n-\t\t\tEvaluationContextProvider evaluationContextProvider) {\n+\t\t\tEvaluationContextProvider evaluationContextProvider, EscapeCharacter escape) {\n \n \t\tAssert.notNull(em, \"EntityManager must not be null!\");\n \t\tAssert.notNull(extractor, \"QueryExtractor must not be null!\");\n \t\tAssert.notNull(evaluationContextProvider, \"EvaluationContextProvider must not be null!\");\n \n \t\tswitch (key != null ? key : Key.CREATE_IF_NOT_FOUND) {\n \t\t\tcase CREATE:\n-\t\t\t\treturn new CreateQueryLookupStrategy(em, extractor);\n+\t\t\t\treturn new CreateQueryLookupStrategy(em, extractor, escape);\n \t\t\tcase USE_DECLARED_QUERY:\n \t\t\t\treturn new DeclaredQueryLookupStrategy(em, extractor, evaluationContextProvider);\n \t\t\tcase CREATE_IF_NOT_FOUND:\n-\t\t\t\treturn new CreateIfNotFoundQueryLookupStrategy(em, extractor, new CreateQueryLookupStrategy(em, extractor),\n+\t\t\t\treturn new CreateIfNotFoundQueryLookupStrategy(em, extractor,\n+\t\t\t\t\t\tnew CreateQueryLookupStrategy(em, extractor, escape),\n \t\t\t\t\t\tnew DeclaredQueryLookupStrategy(em, extractor, evaluationContextProvider));\n \t\t\tdefault:\n \t\t\t\tthrow new IllegalArgumentException(String.format(\"Unsupported query lookup strategy %s!\", key));"
        },
        {
            "sha": "750f3fe0fd3a062b04204785fbdaab9c7f3d41d0",
            "filename": "src/main/java/org/springframework/data/jpa/repository/query/ParameterMetadataProvider.java",
            "status": "modified",
            "additions": 24,
            "deletions": 11,
            "changes": 35,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FParameterMetadataProvider.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FParameterMetadataProvider.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FParameterMetadataProvider.java?ref=8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146",
            "patch": "@@ -26,6 +26,7 @@\n import javax.persistence.criteria.ParameterExpression;\n \n import org.springframework.data.jpa.provider.PersistenceProvider;\n+import org.springframework.data.jpa.repository.support.EscapeCharacter;\n import org.springframework.data.repository.query.Parameter;\n import org.springframework.data.repository.query.Parameters;\n import org.springframework.data.repository.query.ParametersParameterAccessor;\n@@ -50,6 +51,7 @@ class ParameterMetadataProvider {\n \tprivate final List<ParameterMetadata<?>> expressions;\n \tprivate final Iterator<Object> bindableParameterValues;\n \tprivate final PersistenceProvider persistenceProvider;\n+\tprivate final EscapeCharacter escape;\n \n \t/**\n \t * Creates a new {@link ParameterMetadataProvider} from the given {@link CriteriaBuilder} and\n@@ -59,22 +61,24 @@ class ParameterMetadataProvider {\n \t * @param builder must not be {@literal null}.\n \t * @param accessor must not be {@literal null}.\n \t * @param provider must not be {@literal null}.\n+\t * @param escape\n \t */\n \tpublic ParameterMetadataProvider(CriteriaBuilder builder, ParametersParameterAccessor accessor,\n-\t\t\tPersistenceProvider provider) {\n-\t\tthis(builder, accessor.iterator(), accessor.getParameters(), provider);\n+\t\t\t\t\t\t\t\t\t PersistenceProvider provider, EscapeCharacter escape) {\n+\t\tthis(builder, accessor.iterator(), accessor.getParameters(), provider, escape);\n \t}\n \n \t/**\n \t * Creates a new {@link ParameterMetadataProvider} from the given {@link CriteriaBuilder} and {@link Parameters} with\n \t * support for parameter value customizations via {@link PersistenceProvider}.\n \t * \n-\t * @param builder must not be {@literal null}.\n+\t *  @param builder must not be {@literal null}.\n \t * @param parameters must not be {@literal null}.\n \t * @param provider must not be {@literal null}.\n+\t * @param escape\n \t */\n-\tpublic ParameterMetadataProvider(CriteriaBuilder builder, Parameters<?, ?> parameters, PersistenceProvider provider) {\n-\t\tthis(builder, null, parameters, provider);\n+\tpublic ParameterMetadataProvider(CriteriaBuilder builder, Parameters<?, ?> parameters, PersistenceProvider provider, EscapeCharacter escape) {\n+\t\tthis(builder, null, parameters, provider, escape);\n \t}\n \n \t/**\n@@ -86,9 +90,10 @@ public ParameterMetadataProvider(CriteriaBuilder builder, Parameters<?, ?> param\n \t * @param bindableParameterValues may be {@literal null}.\n \t * @param parameters must not be {@literal null}.\n \t * @param provider must not be {@literal null}.\n+\t * @param escape\n \t */\n \tprivate ParameterMetadataProvider(CriteriaBuilder builder, Iterator<Object> bindableParameterValues,\n-\t\t\tParameters<?, ?> parameters, PersistenceProvider provider) {\n+\t\t\t\t\t\t\t\t\t  Parameters<?, ?> parameters, PersistenceProvider provider, EscapeCharacter escape) {\n \n \t\tAssert.notNull(builder, \"CriteriaBuilder must not be null!\");\n \t\tAssert.notNull(parameters, \"Parameters must not be null!\");\n@@ -99,6 +104,7 @@ private ParameterMetadataProvider(CriteriaBuilder builder, Iterator<Object> bind\n \t\tthis.expressions = new ArrayList<ParameterMetadata<?>>();\n \t\tthis.bindableParameterValues = bindableParameterValues;\n \t\tthis.persistenceProvider = provider;\n+\t\tthis.escape = escape;\n \t}\n \n \t/**\n@@ -165,12 +171,16 @@ private <T> ParameterMetadata<T> next(Part part, Class<T> type, Parameter parame\n \t\t\t\t: builder.parameter(reifiedType);\n \t\tParameterMetadata<T> value = new ParameterMetadata<T>(expression, part.getType(),\n \t\t\t\tbindableParameterValues == null ? ParameterMetadata.PLACEHOLDER : bindableParameterValues.next(),\n-\t\t\t\tthis.persistenceProvider);\n+\t\t\t\tthis.persistenceProvider, escape);\n \t\texpressions.add(value);\n \n \t\treturn value;\n \t}\n \n+\tEscapeCharacter getEscape() {\n+\t\treturn escape;\n+\t}\n+\n \t/**\n \t * @author Oliver Gierke\n \t * @author Thomas Darimont\n@@ -183,6 +193,7 @@ static class ParameterMetadata<T> {\n \t\tprivate final Type type;\n \t\tprivate final ParameterExpression<T> expression;\n \t\tprivate final PersistenceProvider persistenceProvider;\n+\t\tprivate final EscapeCharacter escape;\n \n \t\t/**\n \t\t * Creates a new {@link ParameterMetadata}.\n@@ -191,12 +202,14 @@ static class ParameterMetadata<T> {\n \t\t * @param type\n \t\t * @param value\n \t\t * @param provider\n+\t\t * @param escape\n \t\t */\n-\t\tpublic ParameterMetadata(ParameterExpression<T> expression, Type type, Object value, PersistenceProvider provider) {\n+\t\tpublic ParameterMetadata(ParameterExpression<T> expression, Type type, Object value, PersistenceProvider provider, EscapeCharacter escape) {\n \n \t\t\tthis.expression = expression;\n \t\t\tthis.persistenceProvider = provider;\n \t\t\tthis.type = value == null && Type.SIMPLE_PROPERTY.equals(type) ? Type.IS_NULL : type;\n+\t\t\tthis.escape = escape;\n \t\t}\n \n \t\t/**\n@@ -233,12 +246,12 @@ public Object prepare(Object value) {\n \n \t\t\t\tswitch (type) {\n \t\t\t\t\tcase STARTING_WITH:\n-\t\t\t\t\t\treturn String.format(\"%s%%\", value.toString());\n+\t\t\t\t\t\treturn String.format(\"%s%%\", escape.escape(value.toString()));\n \t\t\t\t\tcase ENDING_WITH:\n-\t\t\t\t\t\treturn String.format(\"%%%s\", value.toString());\n+\t\t\t\t\t\treturn String.format(\"%%%s\", escape.escape(value.toString()));\n \t\t\t\t\tcase CONTAINING:\n \t\t\t\t\tcase NOT_CONTAINING:\n-\t\t\t\t\t\treturn String.format(\"%%%s%%\", value.toString());\n+\t\t\t\t\t\treturn String.format(\"%%%s%%\", escape.escape(value.toString()));\n \t\t\t\t\tdefault:\n \t\t\t\t\t\treturn value;\n \t\t\t\t}"
        },
        {
            "sha": "1e900c2c2b60e6b4a8a707c06aeb69408da30a03",
            "filename": "src/main/java/org/springframework/data/jpa/repository/query/PartTreeJpaQuery.java",
            "status": "modified",
            "additions": 10,
            "deletions": 5,
            "changes": 15,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FPartTreeJpaQuery.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FPartTreeJpaQuery.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FPartTreeJpaQuery.java?ref=8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146",
            "patch": "@@ -28,6 +28,7 @@\n import org.springframework.data.jpa.repository.query.JpaQueryExecution.DeleteExecution;\n import org.springframework.data.jpa.repository.query.JpaQueryExecution.ExistsExecution;\n import org.springframework.data.jpa.repository.query.ParameterMetadataProvider.ParameterMetadata;\n+import org.springframework.data.jpa.repository.support.EscapeCharacter;\n import org.springframework.data.repository.query.ParametersParameterAccessor;\n import org.springframework.data.repository.query.ResultProcessor;\n import org.springframework.data.repository.query.parser.PartTree;\n@@ -47,19 +48,23 @@ public class PartTreeJpaQuery extends AbstractJpaQuery {\n \tprivate final QueryPreparer query;\n \tprivate final QueryPreparer countQuery;\n \tprivate final EntityManager em;\n+\tprivate final EscapeCharacter escape;\n \n \t/**\n \t * Creates a new {@link PartTreeJpaQuery}.\n \t * \n \t * @param method must not be {@literal null}.\n \t * @param factory must not be {@literal null}.\n \t * @param em must not be {@literal null}.\n+\t * @param persistenceProvider must not be {@literal null}.\n+\t * @param escape\n \t */\n-\tpublic PartTreeJpaQuery(JpaQueryMethod method, EntityManager em, PersistenceProvider persistenceProvider) {\n+\tpublic PartTreeJpaQuery(JpaQueryMethod method, EntityManager em, PersistenceProvider persistenceProvider, EscapeCharacter escape) {\n \n \t\tsuper(method, em);\n \n \t\tthis.em = em;\n+\t\tthis.escape = escape;\n \t\tthis.domainClass = method.getEntityInformation().getJavaType();\n \t\tthis.parameters = method.getParameters();\n \n@@ -216,8 +221,8 @@ protected JpaQueryCreator createCreator(ParametersParameterAccessor accessor,\n \t\t\tCriteriaBuilder builder = entityManager.getCriteriaBuilder();\n \n \t\t\tParameterMetadataProvider provider = accessor == null\n-\t\t\t\t\t? new ParameterMetadataProvider(builder, parameters, persistenceProvider)\n-\t\t\t\t\t: new ParameterMetadataProvider(builder, accessor, persistenceProvider);\n+\t\t\t\t\t? new ParameterMetadataProvider(builder, parameters, persistenceProvider, escape)\n+\t\t\t\t\t: new ParameterMetadataProvider(builder, accessor, persistenceProvider, escape);\n \n \t\t\tResultProcessor resultFactory = getQueryMethod().getResultProcessor().withDynamicProjection(accessor);\n \n@@ -271,8 +276,8 @@ protected JpaQueryCreator createCreator(ParametersParameterAccessor accessor,\n \t\t\tCriteriaBuilder builder = entityManager.getCriteriaBuilder();\n \n \t\t\tParameterMetadataProvider provider = accessor == null\n-\t\t\t\t\t? new ParameterMetadataProvider(builder, parameters, persistenceProvider)\n-\t\t\t\t\t: new ParameterMetadataProvider(builder, accessor, persistenceProvider);\n+\t\t\t\t\t? new ParameterMetadataProvider(builder, parameters, persistenceProvider, escape)\n+\t\t\t\t\t: new ParameterMetadataProvider(builder, accessor, persistenceProvider, escape);\n \n \t\t\treturn new JpaCountQueryCreator(tree, getQueryMethod().getResultProcessor().getReturnedType(), builder, provider);\n \t\t}"
        },
        {
            "sha": "21d9b107dd99d9e3dc4a9faef12bc7b9383689fb",
            "filename": "src/main/java/org/springframework/data/jpa/repository/support/EscapeCharacter.java",
            "status": "added",
            "additions": 47,
            "deletions": 0,
            "changes": 47,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsupport%2FEscapeCharacter.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsupport%2FEscapeCharacter.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsupport%2FEscapeCharacter.java?ref=8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146",
            "patch": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.data.jpa.repository.support;\n+\n+import lombok.Value;\n+\n+import org.springframework.util.Assert;\n+\n+/**\n+ * A Value-class encapsulating an escape character for LIKE queries and the actually usage of it in escaping Strings.\n+ *\n+ * @author Jens Schauder\n+ */\n+@Value(staticConstructor = \"of\")\n+public class EscapeCharacter {\n+\tchar value;\n+\n+\tpublic String escape(String value) {\n+\n+\t\tAssert.notNull(value, \"Value must be not null.\");\n+\n+\t\treturn value.replace(\"_\", value + \"_\").replace(\"%\", value + \"%\");\n+\t}\n+\n+\t// used for SpEL expressions\n+\tstatic String escape(String value, String escape) {\n+\n+\t\tAssert.hasText(escape, \"escape must be a sinlge character String.\");\n+\t\tchar[] chars = escape.toCharArray();\n+\t\tAssert.isTrue(chars.length == 1, \"escape must be a single character String.\");\n+\n+\t\treturn EscapeCharacter.of(chars[0]).escape(value);\n+\t}\n+}"
        },
        {
            "sha": "af4c07b4ee6ca28b79021407c46dcf5e51621590",
            "filename": "src/main/java/org/springframework/data/jpa/repository/support/JpaRepositoryFactory.java",
            "status": "modified",
            "additions": 22,
            "deletions": 11,
            "changes": 33,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsupport%2FJpaRepositoryFactory.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsupport%2FJpaRepositoryFactory.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsupport%2FJpaRepositoryFactory.java?ref=8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146",
            "patch": "@@ -47,7 +47,7 @@\n \n /**\n  * JPA specific generic repository factory.\n- * \n+ *\n  * @author Oliver Gierke\n  * @author Mark Paluch\n  * @author Jens Schauder\n@@ -58,9 +58,11 @@ public class JpaRepositoryFactory extends RepositoryFactorySupport {\n \tprivate final QueryExtractor extractor;\n \tprivate final CrudMethodMetadataPostProcessor crudMethodMetadataPostProcessor;\n \n+\tprivate EscapeCharacter escapeCharacter = EscapeCharacter.of('\\\\');\n+\n \t/**\n \t * Creates a new {@link JpaRepositoryFactory}.\n-\t * \n+\t *\n \t * @param entityManager must not be {@literal null}\n \t */\n \tpublic JpaRepositoryFactory(EntityManager entityManager) {\n@@ -78,7 +80,7 @@ public JpaRepositoryFactory(EntityManager entityManager) {\n \t\t}\n \t}\n \n-\t/* \n+\t/*\n \t * (non-Javadoc)\n \t * @see org.springframework.data.repository.core.support.RepositoryFactorySupport#setBeanClassLoader(java.lang.ClassLoader)\n \t */\n@@ -89,6 +91,15 @@ public void setBeanClassLoader(ClassLoader classLoader) {\n \t\tthis.crudMethodMetadataPostProcessor.setBeanClassLoader(classLoader);\n \t}\n \n+\t/**\n+\t * Configures the escape character to be used for like-expressions created for derived queries.\n+\t *\n+\t * @param escapeCharacter a character used for escaping in certain like expressions.\n+\t */\n+\tpublic void setEscapeCharacter(EscapeCharacter escapeCharacter) {\n+\t\tthis.escapeCharacter = escapeCharacter;\n+\t}\n+\n \t/*\n \t * (non-Javadoc)\n \t * @see org.springframework.data.repository.core.support.RepositoryFactorySupport#getTargetRepository(org.springframework.data.repository.core.RepositoryMetadata)\n@@ -104,7 +115,7 @@ protected Object getTargetRepository(RepositoryInformation information) {\n \n \t/**\n \t * Callback to create a {@link JpaRepository} instance with the given {@link EntityManager}\n-\t * \n+\t *\n \t * @param <T>\n \t * @param <ID>\n \t * @param entityManager\n@@ -121,7 +132,7 @@ protected Object getTargetRepository(RepositoryInformation information) {\n \n \t/*\n \t * (non-Javadoc)\n-\t * \n+\t *\n \t * @see\n \t * org.springframework.data.repository.support.RepositoryFactorySupport#\n \t * getRepositoryBaseClass()\n@@ -152,7 +163,7 @@ protected ProjectionFactory getProjectionFactory(ClassLoader classLoader, BeanFa\n \n \t/**\n \t * Returns whether the given repository interface requires a QueryDsl specific implementation to be chosen.\n-\t * \n+\t *\n \t * @param repositoryInterface\n \t * @return\n \t */\n@@ -161,18 +172,18 @@ private boolean isQueryDslExecutor(Class<?> repositoryInterface) {\n \t\treturn QUERY_DSL_PRESENT && QueryDslPredicateExecutor.class.isAssignableFrom(repositoryInterface);\n \t}\n \n-\t/* \n+\t/*\n \t * (non-Javadoc)\n \t * @see org.springframework.data.repository.core.support.RepositoryFactorySupport#getQueryLookupStrategy(org.springframework.data.repository.query.QueryLookupStrategy.Key, org.springframework.data.repository.query.EvaluationContextProvider)\n \t */\n \t@Override\n \tprotected QueryLookupStrategy getQueryLookupStrategy(Key key, EvaluationContextProvider evaluationContextProvider) {\n-\t\treturn JpaQueryLookupStrategy.create(entityManager, key, extractor, evaluationContextProvider);\n+\t\treturn JpaQueryLookupStrategy.create(entityManager, key, extractor, evaluationContextProvider, escapeCharacter);\n \t}\n \n \t/*\n \t * (non-Javadoc)\n-\t * \n+\t *\n \t * @see\n \t * org.springframework.data.repository.support.RepositoryFactorySupport#\n \t * getEntityInformation(java.lang.Class)\n@@ -205,7 +216,7 @@ private static class EclipseLinkProjectionQueryCreationListener implements Query\n \n \t\t/**\n \t\t * Creates a new {@link EclipseLinkProjectionQueryCreationListener} for the given {@link EntityManager}.\n-\t\t * \n+\t\t *\n \t\t * @param em must not be {@literal null}.\n \t\t */\n \t\tpublic EclipseLinkProjectionQueryCreationListener(EntityManager em) {\n@@ -215,7 +226,7 @@ public EclipseLinkProjectionQueryCreationListener(EntityManager em) {\n \t\t\tthis.metamodel = new JpaMetamodel(em.getMetamodel());\n \t\t}\n \n-\t\t/* \n+\t\t/*\n \t\t * (non-Javadoc)\n \t\t * @see org.springframework.data.repository.core.support.QueryCreationListener#onCreation(org.springframework.data.repository.query.RepositoryQuery)\n \t\t */"
        },
        {
            "sha": "269637986434fc726c1c4deb12d9f64655bcab99",
            "filename": "src/main/java/org/springframework/data/jpa/repository/support/JpaRepositoryFactoryBean.java",
            "status": "modified",
            "additions": 22,
            "deletions": 8,
            "changes": 30,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsupport%2FJpaRepositoryFactoryBean.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsupport%2FJpaRepositoryFactoryBean.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsupport%2FJpaRepositoryFactoryBean.java?ref=8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146",
            "patch": "@@ -29,7 +29,7 @@\n /**\n  * Special adapter for Springs {@link org.springframework.beans.factory.FactoryBean} interface to allow easy setup of\n  * repository factories via Spring configuration.\n- * \n+ *\n  * @author Oliver Gierke\n  * @author Eberhard Wolff\n  * @param <T> the type of the repository\n@@ -38,27 +38,37 @@ public class JpaRepositoryFactoryBean<T extends Repository<S, ID>, S, ID extends\n \t\textends TransactionalRepositoryFactoryBeanSupport<T, S, ID> {\n \n \tprivate EntityManager entityManager;\n+\tprivate EscapeCharacter escapeCharacter = EscapeCharacter.of('\\\\');\n \n \t/**\n \t * Creates a new {@link JpaRepositoryFactoryBean} for the given repository interface.\n-\t * \n+\t *\n \t * @param repositoryInterface must not be {@literal null}.\n \t */\n \tpublic JpaRepositoryFactoryBean(Class<? extends T> repositoryInterface) {\n \t\tsuper(repositoryInterface);\n \t}\n \n+\t/**\n+\t * Configures the escape character to be used to escape reserved characters for LIKE expressions.\n+\t *\n+\t * @param escapeCharacter\n+\t */\n+\tpublic void setEscapeCharacter(char escapeCharacter) {\n+\t\tthis.escapeCharacter = EscapeCharacter.of(escapeCharacter);\n+\t}\n+\n \t/**\n \t * The {@link EntityManager} to be used.\n-\t * \n+\t *\n \t * @param entityManager the entityManager to set\n \t */\n \t@PersistenceContext\n \tpublic void setEntityManager(EntityManager entityManager) {\n \t\tthis.entityManager = entityManager;\n \t}\n \n-\t/* \n+\t/*\n \t * (non-Javadoc)\n \t * @see org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport#setMappingContext(org.springframework.data.mapping.context.MappingContext)\n \t */\n@@ -69,7 +79,7 @@ public void setMappingContext(MappingContext<?, ?> mappingContext) {\n \n \t/*\n \t * (non-Javadoc)\n-\t * \n+\t *\n \t * @see org.springframework.data.repository.support.\n \t * TransactionalRepositoryFactoryBeanSupport#doCreateRepositoryFactory()\n \t */\n@@ -80,17 +90,21 @@ protected RepositoryFactorySupport doCreateRepositoryFactory() {\n \n \t/**\n \t * Returns a {@link RepositoryFactorySupport}.\n-\t * \n+\t *\n \t * @param entityManager\n \t * @return\n \t */\n \tprotected RepositoryFactorySupport createRepositoryFactory(EntityManager entityManager) {\n-\t\treturn new JpaRepositoryFactory(entityManager);\n+\n+\t\tJpaRepositoryFactory jpaRepositoryFactory = new JpaRepositoryFactory(entityManager);\n+\t\tjpaRepositoryFactory.setEscapeCharacter(escapeCharacter);\n+\n+\t\treturn jpaRepositoryFactory;\n \t}\n \n \t/*\n \t * (non-Javadoc)\n-\t * \n+\t *\n \t * @see\n \t * org.springframework.beans.factory.InitializingBean#afterPropertiesSet()\n \t */"
        },
        {
            "sha": "79d82cebb96304f41a9eee905ea5f13179eb108c",
            "filename": "src/test/java/org/springframework/data/jpa/repository/UserRepositoryFinderTests.java",
            "status": "modified",
            "additions": 11,
            "deletions": 1,
            "changes": 12,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2FUserRepositoryFinderTests.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2FUserRepositoryFinderTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2FUserRepositoryFinderTests.java?ref=8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146",
            "patch": "@@ -44,7 +44,7 @@\n \n /**\n  * Integration test for executing finders, thus testing various query lookup strategies.\n- * \n+ *\n  * @see QueryLookupStrategy\n  * @author Oliver Gierke\n  */\n@@ -198,6 +198,16 @@ public void executesMethodWithNotContainingOnStringCorrectly() {\n \t\tassertThat(userRepository.findByLastnameNotContaining(\"u\"), containsInAnyOrder(dave, oliver));\n \t}\n \n+\t@Test // DATAJPA-1519\n+\tpublic void parametersForContainsGetProperlyEscaped() {\n+\t\tassertThat(userRepository.findByFirstnameContaining(\"liv%\"), hasSize(0));\n+\t}\n+\n+\t@Test // DATAJPA-1519\n+\tpublic void escapingInLikeSpels() {\n+\t\tassertThat(userRepository.findContainingEscaped(\"att_\"), hasSize(0));\n+\t}\n+\n \t@Test // DATAJPA-829\n \tpublic void translatesContainsToMemberOf() {\n "
        },
        {
            "sha": "86fe1219081d4bd87f7ee8916392803b8ba3d6de",
            "filename": "src/test/java/org/springframework/data/jpa/repository/query/JpaCountQueryCreatorIntegrationTests.java",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FJpaCountQueryCreatorIntegrationTests.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FJpaCountQueryCreatorIntegrationTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FJpaCountQueryCreatorIntegrationTests.java?ref=8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146",
            "patch": "@@ -31,6 +31,7 @@\n import org.springframework.data.jpa.domain.sample.User;\n import org.springframework.data.jpa.provider.HibernateUtils;\n import org.springframework.data.jpa.provider.PersistenceProvider;\n+import org.springframework.data.jpa.repository.support.EscapeCharacter;\n import org.springframework.data.projection.SpelAwareProxyProjectionFactory;\n import org.springframework.data.repository.Repository;\n import org.springframework.data.repository.core.support.AbstractRepositoryMetadata;\n@@ -60,7 +61,7 @@ public void distinctFlagOnCountQueryIssuesCountDistinct() throws Exception {\n \n \t\tPartTree tree = new PartTree(\"findDistinctByRolesIn\", User.class);\n \t\tParameterMetadataProvider metadataProvider = new ParameterMetadataProvider(entityManager.getCriteriaBuilder(),\n-\t\t\t\tqueryMethod.getParameters(), provider);\n+\t\t\t\tqueryMethod.getParameters(), provider, EscapeCharacter.of('\\\\'));\n \n \t\tJpaCountQueryCreator creator = new JpaCountQueryCreator(tree, queryMethod.getResultProcessor().getReturnedType(),\n \t\t\t\tentityManager.getCriteriaBuilder(), metadataProvider);"
        },
        {
            "sha": "934948637a2428dd560a1f37193bd9d179b07f63",
            "filename": "src/test/java/org/springframework/data/jpa/repository/query/JpaQueryLookupStrategyUnitTests.java",
            "status": "modified",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FJpaQueryLookupStrategyUnitTests.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FJpaQueryLookupStrategyUnitTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FJpaQueryLookupStrategyUnitTests.java?ref=8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146",
            "patch": "@@ -38,6 +38,7 @@\n import org.springframework.data.jpa.domain.sample.User;\n import org.springframework.data.jpa.provider.QueryExtractor;\n import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.jpa.repository.support.EscapeCharacter;\n import org.springframework.data.projection.ProjectionFactory;\n import org.springframework.data.repository.Repository;\n import org.springframework.data.repository.core.NamedQueries;\n@@ -80,7 +81,7 @@ public void setUp() {\n \tpublic void invalidAnnotatedQueryCausesException() throws Exception {\n \n \t\tQueryLookupStrategy strategy = JpaQueryLookupStrategy.create(em, Key.CREATE_IF_NOT_FOUND, extractor,\n-\t\t\t\tEVALUATION_CONTEXT_PROVIDER);\n+\t\t\t\tEVALUATION_CONTEXT_PROVIDER, EscapeCharacter.of('\\\\'));\n \t\tMethod method = UserRepository.class.getMethod(\"findByFoo\", String.class);\n \t\tRepositoryMetadata metadata = new DefaultRepositoryMetadata(UserRepository.class);\n \n@@ -99,7 +100,7 @@ public void invalidAnnotatedQueryCausesException() throws Exception {\n \tpublic void sholdThrowMorePreciseExceptionIfTryingToUsePaginationInNativeQueries() throws Exception {\n \n \t\tQueryLookupStrategy strategy = JpaQueryLookupStrategy.create(em, Key.CREATE_IF_NOT_FOUND, extractor,\n-\t\t\t\tEVALUATION_CONTEXT_PROVIDER);\n+\t\t\t\tEVALUATION_CONTEXT_PROVIDER, EscapeCharacter.of('\\\\'));\n \t\tMethod method = UserRepository.class.getMethod(\"findByInvalidNativeQuery\", String.class, Pageable.class);\n \t\tRepositoryMetadata metadata = new DefaultRepositoryMetadata(UserRepository.class);\n "
        },
        {
            "sha": "58d887a6c9292a29ae25e1486582555c7c425b79",
            "filename": "src/test/java/org/springframework/data/jpa/repository/query/ParameterExpressionProviderTests.java",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FParameterExpressionProviderTests.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FParameterExpressionProviderTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FParameterExpressionProviderTests.java?ref=8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146",
            "patch": "@@ -29,6 +29,7 @@\n import org.junit.runner.RunWith;\n import org.springframework.data.jpa.domain.sample.User;\n import org.springframework.data.jpa.provider.PersistenceProvider;\n+import org.springframework.data.jpa.repository.support.EscapeCharacter;\n import org.springframework.data.repository.query.DefaultParameters;\n import org.springframework.data.repository.query.Parameters;\n import org.springframework.data.repository.query.ParametersParameterAccessor;\n@@ -58,7 +59,7 @@ public void createsParameterExpressionWithMostConcreteType() throws Exception {\n \n \t\tCriteriaBuilder builder = em.getCriteriaBuilder();\n \t\tPersistenceProvider persistenceProvider = PersistenceProvider.fromEntityManager(em);\n-\t\tParameterMetadataProvider provider = new ParameterMetadataProvider(builder, accessor, persistenceProvider);\n+\t\tParameterMetadataProvider provider = new ParameterMetadataProvider(builder, accessor, persistenceProvider, EscapeCharacter.of('\\\\'));\n \t\tParameterExpression<? extends Comparable> expression = provider.next(part, Comparable.class).getExpression();\n \t\tassertThat(expression.getParameterType(), is(typeCompatibleWith(int.class)));\n \t}"
        },
        {
            "sha": "4a408a05e2ac8a184501393a3005bd35d30dcf7a",
            "filename": "src/test/java/org/springframework/data/jpa/repository/query/ParameterMetadataProviderIntegrationTests.java",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FParameterMetadataProviderIntegrationTests.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FParameterMetadataProviderIntegrationTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FParameterMetadataProviderIntegrationTests.java?ref=8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146",
            "patch": "@@ -29,6 +29,7 @@\n import org.springframework.data.jpa.domain.sample.User;\n import org.springframework.data.jpa.provider.PersistenceProvider;\n import org.springframework.data.jpa.repository.query.ParameterMetadataProvider.ParameterMetadata;\n+import org.springframework.data.jpa.repository.support.EscapeCharacter;\n import org.springframework.data.repository.query.Param;\n import org.springframework.data.repository.query.Parameters;\n import org.springframework.data.repository.query.parser.Part;\n@@ -81,7 +82,7 @@ private ParameterMetadataProvider createProvider(Method method) {\n \t\tsimulateDiscoveredParametername(parameters, 0, \"name\");\n \n \t\treturn new ParameterMetadataProvider(em.getCriteriaBuilder(), parameters,\n-\t\t\t\tPersistenceProvider.fromEntityManager(em));\n+\t\t\t\tPersistenceProvider.fromEntityManager(em), EscapeCharacter.of('\\\\'));\n \t}\n \n \t@SuppressWarnings(\"unchecked\")"
        },
        {
            "sha": "b89f5a8a543b48593a352815862f90bfd8ef41f6",
            "filename": "src/test/java/org/springframework/data/jpa/repository/query/ParameterMetadataProviderUnitTests.java",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FParameterMetadataProviderUnitTests.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FParameterMetadataProviderUnitTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FParameterMetadataProviderUnitTests.java?ref=8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146",
            "patch": "@@ -23,6 +23,7 @@\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n import org.springframework.data.jpa.provider.PersistenceProvider;\n+import org.springframework.data.jpa.repository.support.EscapeCharacter;\n import org.springframework.data.repository.query.Parameters;\n import org.springframework.data.repository.query.parser.Part;\n \n@@ -44,7 +45,7 @@ public void errorMessageMentionesParametersWhenParametersAreExhausted() {\n \n \t\tParameters<?, ?> parameters = mock(Parameters.class, RETURNS_DEEP_STUBS);\n \t\tParameterMetadataProvider metadataProvider = new ParameterMetadataProvider(builder, parameters,\n-\t\t\t\tpersistenceProvider);\n+\t\t\t\tpersistenceProvider, EscapeCharacter.of('\\\\'));\n \n \t\texception.expect(IllegalArgumentException.class);\n \t\texception.expectMessage(\"parameter\");"
        },
        {
            "sha": "c000b0d20ccabd322fcb0baf89b467f02b16bdd6",
            "filename": "src/test/java/org/springframework/data/jpa/repository/query/PartTreeJpaQueryIntegrationTests.java",
            "status": "modified",
            "additions": 8,
            "deletions": 7,
            "changes": 15,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FPartTreeJpaQueryIntegrationTests.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FPartTreeJpaQueryIntegrationTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FPartTreeJpaQueryIntegrationTests.java?ref=8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146",
            "patch": "@@ -45,6 +45,7 @@\n import org.springframework.data.jpa.provider.HibernateUtils;\n import org.springframework.data.jpa.provider.PersistenceProvider;\n import org.springframework.data.jpa.repository.Temporal;\n+import org.springframework.data.jpa.repository.support.EscapeCharacter;\n import org.springframework.data.projection.SpelAwareProxyProjectionFactory;\n import org.springframework.data.repository.Repository;\n import org.springframework.data.repository.core.support.DefaultRepositoryMetadata;\n@@ -79,7 +80,7 @@ public void setUp() {\n \tpublic void test() throws Exception {\n \n \t\tJpaQueryMethod queryMethod = getQueryMethod(\"findByFirstname\", String.class, Pageable.class);\n-\t\tPartTreeJpaQuery jpaQuery = new PartTreeJpaQuery(queryMethod, entityManager, provider);\n+\t\tPartTreeJpaQuery jpaQuery = new PartTreeJpaQuery(queryMethod, entityManager, provider, EscapeCharacter.of('\\\\'));\n \n \t\tjpaQuery.createQuery(new Object[] { \"Matthews\", new PageRequest(0, 1) });\n \t\tjpaQuery.createQuery(new Object[] { \"Matthews\", new PageRequest(0, 1) });\n@@ -103,7 +104,7 @@ public void cannotIgnoreCaseIfNotStringUnlessIgnoringAll() throws Exception {\n \tpublic void recreatesQueryIfNullValueIsGiven() throws Exception {\n \n \t\tJpaQueryMethod queryMethod = getQueryMethod(\"findByFirstname\", String.class, Pageable.class);\n-\t\tPartTreeJpaQuery jpaQuery = new PartTreeJpaQuery(queryMethod, entityManager, provider);\n+\t\tPartTreeJpaQuery jpaQuery = new PartTreeJpaQuery(queryMethod, entityManager, provider, EscapeCharacter.of('\\\\'));\n \n \t\tQuery query = jpaQuery.createQuery(new Object[] { \"Matthews\", new PageRequest(0, 1) });\n \n@@ -118,7 +119,7 @@ public void recreatesQueryIfNullValueIsGiven() throws Exception {\n \tpublic void shouldLimitExistsProjectionQueries() throws Exception {\n \n \t\tJpaQueryMethod queryMethod = getQueryMethod(\"existsByFirstname\", String.class);\n-\t\tPartTreeJpaQuery jpaQuery = new PartTreeJpaQuery(queryMethod, entityManager, provider);\n+\t\tPartTreeJpaQuery jpaQuery = new PartTreeJpaQuery(queryMethod, entityManager, provider, EscapeCharacter.of('\\\\'));\n \n \t\tQuery query = jpaQuery.createQuery(new Object[] { \"Matthews\" });\n \n@@ -129,7 +130,7 @@ public void shouldLimitExistsProjectionQueries() throws Exception {\n \tpublic void shouldSelectAliasedIdForExistsProjectionQueries() throws Exception {\n \n \t\tJpaQueryMethod queryMethod = getQueryMethod(\"existsByFirstname\", String.class);\n-\t\tPartTreeJpaQuery jpaQuery = new PartTreeJpaQuery(queryMethod, entityManager, provider);\n+\t\tPartTreeJpaQuery jpaQuery = new PartTreeJpaQuery(queryMethod, entityManager, provider, EscapeCharacter.of('\\\\'));\n \n \t\tQuery query = jpaQuery.createQuery(new Object[] { \"Matthews\" });\n \n@@ -146,7 +147,7 @@ public void errorsDueToMismatchOfParametersContainNameOfMethodAndInterface() thr\n \t\tthrown.expectMessage(\"findByFirstname\"); // the method being analyzed\n \t\tthrown.expectMessage(\" firstname \"); // the property we are looking for\n \n-\t\tnew PartTreeJpaQuery(method, entityManager, provider);\n+\t\tnew PartTreeJpaQuery(method, entityManager, provider, EscapeCharacter.of('\\\\'));\n \t}\n \n \t@Test // DATAJPA-863\n@@ -159,7 +160,7 @@ public void errorsDueToMissingPropertyContainNameOfMethodAndInterface() throws E\n \t\tthrown.expectMessage(\"findByNoSuchProperty\"); // the method being analyzed\n \t\tthrown.expectMessage(\" noSuchProperty \"); // the property we are looking for\n \n-\t\tnew PartTreeJpaQuery(method, entityManager, provider);\n+\t\tnew PartTreeJpaQuery(method, entityManager, provider, EscapeCharacter.of('\\\\'));\n \t}\n \n \tprivate void testIgnoreCase(String methodName, Object... values) throws Exception {\n@@ -172,7 +173,7 @@ private void testIgnoreCase(String methodName, Object... values) throws Exceptio\n \n \t\tJpaQueryMethod queryMethod = getQueryMethod(methodName, parameterTypes);\n \t\tPartTreeJpaQuery jpaQuery = new PartTreeJpaQuery(queryMethod, entityManager,\n-\t\t\t\tPersistenceProvider.fromEntityManager(entityManager));\n+\t\t\t\tPersistenceProvider.fromEntityManager(entityManager), EscapeCharacter.of('\\\\'));\n \t\tjpaQuery.createQuery(values);\n \t}\n "
        },
        {
            "sha": "35b45b6632eadabd056d8f1f284521fedf1dc3df",
            "filename": "src/test/java/org/springframework/data/jpa/repository/sample/UserRepository.java",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsample%2FUserRepository.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsample%2FUserRepository.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsample%2FUserRepository.java?ref=8a5743c74b7ab1daf7cb428fee0d9b3f03fb9146",
            "patch": "@@ -497,6 +497,10 @@ List<User> findUsersByFirstnameForSpELExpressionWithParameterIndexOnlyWithEntity\n \t// DATAJPA-1334\n \tList<NameOnlyDto> findByNamedQueryWithConstructorExpression();\n \n+\t// DATAJPA-1519\n+\t@Query(\"select u from User u where u.firstname like %?#{#escape([0],'#')}% escape '#'\")\n+\tList<User> findContainingEscaped(String namePart);\n+\n \tinterface RolesAndFirstname {\n \n \t\tString getFirstname();"
        }
    ]
}