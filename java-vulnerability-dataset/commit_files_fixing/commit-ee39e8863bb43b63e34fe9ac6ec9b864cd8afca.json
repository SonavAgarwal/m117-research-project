{
    "sha": "ee39e8863bb43b63e34fe9ac6ec9b864cd8afca9",
    "node_id": "MDY6Q29tbWl0MTA3Mjg0NTplZTM5ZTg4NjNiYjQzYjYzZTM0ZmU5YWM2ZWM5Yjg2NGNkOGFmY2E5",
    "commit": {
        "author": {
            "name": "Jens Schauder",
            "email": "jschauder@pivotal.io",
            "date": "2019-03-28T16:27:11Z"
        },
        "committer": {
            "name": "Oliver Drotbohm",
            "email": "ogierke@pivotal.io",
            "date": "2019-04-01T08:12:39Z"
        },
        "message": "DATAJPA-1519 - Made the escapeCharacter itself available in SpEL expression.\n\nAdapted documentation to reflect the changed API for escaping.",
        "tree": {
            "sha": "23172f0ad6bc65e0ded70148d803709418e24fa6",
            "url": "https://api.github.com/repos/spring-projects/spring-data-jpa/git/trees/23172f0ad6bc65e0ded70148d803709418e24fa6"
        },
        "url": "https://api.github.com/repos/spring-projects/spring-data-jpa/git/commits/ee39e8863bb43b63e34fe9ac6ec9b864cd8afca9",
        "comment_count": 0,
        "verification": {
            "verified": true,
            "reason": "valid",
            "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3SOwfGzOVQk6tElQbkK1eHVD9pAFAlyhx/cACgkQbkK1eHVD\n9pB81Q//W8HjhdGbLwL7ANap3kHMKYAJ4oE5Y9m5d9YesntgrfwTtUnHQ575fv7/\n3GGql5/XFWPM9Q1kBTjTWAdAJjocWJJJP7JEa4OFlk3IKtfF52rDL3tpFJKngyA7\nQjZpfTKfxqJFEo0zDK+MHbC4xRGWyriCv51z+n3/aIHb1F55zRHPRIUzTAi4NlyJ\nrkrK6R+lvDF7/SXQgy0J9y9mXi00ewMmZ2So2hp+z3/h1mcOOyogIkbwMlnbcaX4\n4zdBLQbQNCFKmrFlU7kyCTC20UILooO0ZEOs5OtlkZ84GMzgI0hKBCxbW8mWvdBm\n1elNNgCAkgNezOC2ooJUDvBRMG/ilFaEmTnccj5pvBaDUxdJu46fuAgyfoOXvtiI\nxXItI7khw8Xw03YlVcrHFSkZxOk4396AzHbr5i/EeBv96uIWZ9Fsx3ftFebOhQDq\nEvcmH6ALAI4QEnI4RjE+mExJipiLNOUALta3XvJ5o1CLeaqohpfP5zAFJcelSMmK\nDEDqgsx+g89YYkqytr3yXYBgHVz5RGlFbarYWvsHhpqoki49taCQcFDRd/XaAmPs\n9c99YtRk/8XVPweE//iOMW1oT3duyzxwWZncXcKYAL4ufnek7tr8thKVE/JL1Fvq\n0BA/wM2ZbzYCvCDM9wsGoUXSF97vfVh8L3eIw/GgI0kWXNAW2Lo=\n=Kylp\n-----END PGP SIGNATURE-----",
            "payload": "tree 23172f0ad6bc65e0ded70148d803709418e24fa6\nparent 16661f7e7e28f8ea8585a0402bd91eb6721ce55b\nauthor Jens Schauder <jschauder@pivotal.io> 1553790431 +0100\ncommitter Oliver Drotbohm <ogierke@pivotal.io> 1554106359 +0200\n\nDATAJPA-1519 - Made the escapeCharacter itself available in SpEL expression.\n\nAdapted documentation to reflect the changed API for escaping.\n",
            "verified_at": "2024-11-10T20:38:30Z"
        }
    },
    "url": "https://api.github.com/repos/spring-projects/spring-data-jpa/commits/ee39e8863bb43b63e34fe9ac6ec9b864cd8afca9",
    "html_url": "https://github.com/spring-projects/spring-data-jpa/commit/ee39e8863bb43b63e34fe9ac6ec9b864cd8afca9",
    "comments_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/commits/ee39e8863bb43b63e34fe9ac6ec9b864cd8afca9/comments",
    "author": {
        "login": "schauder",
        "id": 136683,
        "node_id": "MDQ6VXNlcjEzNjY4Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/136683?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/schauder",
        "html_url": "https://github.com/schauder",
        "followers_url": "https://api.github.com/users/schauder/followers",
        "following_url": "https://api.github.com/users/schauder/following{/other_user}",
        "gists_url": "https://api.github.com/users/schauder/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/schauder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/schauder/subscriptions",
        "organizations_url": "https://api.github.com/users/schauder/orgs",
        "repos_url": "https://api.github.com/users/schauder/repos",
        "events_url": "https://api.github.com/users/schauder/events{/privacy}",
        "received_events_url": "https://api.github.com/users/schauder/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "odrotbohm",
        "id": 128577,
        "node_id": "MDQ6VXNlcjEyODU3Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/128577?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/odrotbohm",
        "html_url": "https://github.com/odrotbohm",
        "followers_url": "https://api.github.com/users/odrotbohm/followers",
        "following_url": "https://api.github.com/users/odrotbohm/following{/other_user}",
        "gists_url": "https://api.github.com/users/odrotbohm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/odrotbohm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/odrotbohm/subscriptions",
        "organizations_url": "https://api.github.com/users/odrotbohm/orgs",
        "repos_url": "https://api.github.com/users/odrotbohm/repos",
        "events_url": "https://api.github.com/users/odrotbohm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/odrotbohm/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "16661f7e7e28f8ea8585a0402bd91eb6721ce55b",
            "url": "https://api.github.com/repos/spring-projects/spring-data-jpa/commits/16661f7e7e28f8ea8585a0402bd91eb6721ce55b",
            "html_url": "https://github.com/spring-projects/spring-data-jpa/commit/16661f7e7e28f8ea8585a0402bd91eb6721ce55b"
        }
    ],
    "stats": {
        "total": 29,
        "additions": 21,
        "deletions": 8
    },
    "files": [
        {
            "sha": "9ed7ef39c82edec6ab174816b14a59198d3d63e1",
            "filename": "src/main/asciidoc/jpa.adoc",
            "status": "modified",
            "additions": 5,
            "deletions": 3,
            "changes": 8,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/ee39e8863bb43b63e34fe9ac6ec9b864cd8afca9/src%2Fmain%2Fasciidoc%2Fjpa.adoc",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/ee39e8863bb43b63e34fe9ac6ec9b864cd8afca9/src%2Fmain%2Fasciidoc%2Fjpa.adoc",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Fmain%2Fasciidoc%2Fjpa.adoc?ref=ee39e8863bb43b63e34fe9ac6ec9b864cd8afca9",
            "patch": "@@ -160,6 +160,7 @@ The JPA module supports defining a query manually as a String or having it being\n Derived queries with the predicates `IsStartingWith`, `StartingWith`, `StartsWith`, IsEndingWith\", `EndingWith`, `EndsWith`,\n `IsNotContaining`, `NotContaining`, `NotContains`, `IsContaining`, `Containing`, `Contains` the respective arguments for these queries will get sanitized.\n This means if the arguments actually contain characters recognized by `LIKE` as wildcards these will get escaped so they match only as literals.\n+The escape character used can be configured by setting the `escapeCharacter` of the `@EnableJpaRepositories` annotation.\n Compare with <<jpa.query.spel-expressions>>.\n \n ==== Declared Queries\n@@ -493,7 +494,7 @@ List<User> findByLastnameWithSpelExpression(@Param(\"lastname\") String lastname);\n ====\n \n When using `like`-conditions with values that are coming from a not secure source the values should be sanitized so they can't contain any wildcards and thereby allow attackers to select more data than they should be able to.\n-For this purpose the the `escape(String, String)` method is made available in the SpEL context.\n+For this purpose the the `escape(String)` method is made available in the SpEL context.\n It prefixes all instances of `_` and `%` in the first argument with the single character from the second argument.\n In combination with the `escape` clause of the `like` expression available in JPQL and standard SQL this allows easy cleaning of bind parameters.\n \n@@ -502,13 +503,14 @@ In combination with the `escape` clause of the `like` expression available in JP\n ====\n [source, java]\n ----\n-@Query(\"select u from User u where u.firstname like %?#{#escape([0],'#')}% escape '#'\")\n+@Query(\"select u from User u where u.firstname like %?#{escape([0])}% escape ?#{escapeCharacter()}\")\n List<User> findContainingEscaped(String namePart);\n ----\n ====\n \n Given this method declaration in an repository interface `findContainingEscaped(\"Peter_\")\" will find `Peter_Parker` but not `Peter Parker`.\n-Note that the method `escape(String, String)` available in the SpEL context will only escape the SQL and JPQL standard wildcards `_` and `%`.\n+The escape character used can be configured by setting the `escapeCharacter` of the `@EnableJpaRepositories` annotation.\n+Note that the method `escape(String)` available in the SpEL context will only escape the SQL and JPQL standard wildcards `_` and `%`.\n If the underlying database or the JPA implementation supports additional wildcards these will not get escaped.\n \n [[jpa.modifying-queries]]"
        },
        {
            "sha": "7d382a4d038a9f575f25ba4cc9334d7e789556b1",
            "filename": "src/main/java/org/springframework/data/jpa/repository/query/EscapeCharacter.java",
            "status": "modified",
            "additions": 15,
            "deletions": 4,
            "changes": 19,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/ee39e8863bb43b63e34fe9ac6ec9b864cd8afca9/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FEscapeCharacter.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/ee39e8863bb43b63e34fe9ac6ec9b864cd8afca9/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FEscapeCharacter.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FEscapeCharacter.java?ref=ee39e8863bb43b63e34fe9ac6ec9b864cd8afca9",
            "patch": "@@ -20,7 +20,7 @@\n import java.util.Arrays;\n import java.util.List;\n \n-import org.springframework.util.Assert;\n+import org.springframework.lang.Nullable;\n \n /**\n  * A value type encapsulating an escape character for LIKE queries and the actually usage of it in escaping\n@@ -39,14 +39,25 @@ public class EscapeCharacter {\n \t/**\n \t * Escapes all special like characters ({@code _}, {@code %}) using the configured escape character.\n \t *\n-\t * @param value must not be {@literal null}.\n+\t * @param value May be {@literal null}.\n \t * @return\n \t */\n+\t@Nullable\n \tpublic String escape(String value) {\n \n-\t\tAssert.notNull(value, \"Value must be not null.\");\n-\n+\t\tif (value == null) {\n+\t\t\treturn null;\n+\t\t}\n \t\treturn TO_REPLACE.stream() //\n \t\t\t\t.reduce(value, (it, character) -> it.replace(character, this.value + character));\n \t}\n+\n+\t/**\n+\t * Makes the underlying character available.\n+\t *\n+\t * @return the value\n+\t */\n+\tpublic char escapeCharacter() {\n+\t\treturn value;\n+\t}\n }"
        },
        {
            "sha": "09027bfc4e34d779f684c750a3c8b94f4a9d25dd",
            "filename": "src/test/java/org/springframework/data/jpa/repository/sample/UserRepository.java",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/ee39e8863bb43b63e34fe9ac6ec9b864cd8afca9/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsample%2FUserRepository.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/ee39e8863bb43b63e34fe9ac6ec9b864cd8afca9/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsample%2FUserRepository.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsample%2FUserRepository.java?ref=ee39e8863bb43b63e34fe9ac6ec9b864cd8afca9",
            "patch": "@@ -559,7 +559,7 @@ List<User> findUsersByFirstnameForSpELExpressionWithParameterIndexOnlyWithEntity\n \tList<NameOnlyDto> findByNamedQueryWithConstructorExpression();\n \n \t// DATAJPA-1519\n-\t@Query(\"select u from User u where u.firstname like %?#{escape([0])}% escape '\\\\'\")\n+\t@Query(\"select u from User u where u.firstname like %?#{escape([0])}% escape ?#{escapeCharacter()}\")\n \tList<User> findContainingEscaped(String namePart);\n \n \tinterface RolesAndFirstname {"
        }
    ]
}