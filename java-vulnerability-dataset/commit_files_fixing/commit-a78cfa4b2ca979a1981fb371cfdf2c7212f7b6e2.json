{
    "sha": "a78cfa4b2ca979a1981fb371cfdf2c7212f7b6e2",
    "node_id": "MDY6Q29tbWl0MTExMjU1ODk6YTc4Y2ZhNGIyY2E5NzlhMTk4MWZiMzcxY2ZkZjJjNzIxMmY3YjZlMg==",
    "commit": {
        "author": {
            "name": "Stian Thorgersen",
            "email": "stian@redhat.com",
            "date": "2016-10-28T08:13:06Z"
        },
        "committer": {
            "name": "GitHub",
            "email": "noreply@github.com",
            "date": "2016-10-28T08:13:06Z"
        },
        "message": "Merge pull request #3440 from stianst/KEYCLOAK-3667\n\nKEYCLOAK-3667",
        "tree": {
            "sha": "0c92e26daced3955e9b9e185a118cf71257b6dcb",
            "url": "https://api.github.com/repos/keycloak/keycloak/git/trees/0c92e26daced3955e9b9e185a118cf71257b6dcb"
        },
        "url": "https://api.github.com/repos/keycloak/keycloak/git/commits/a78cfa4b2ca979a1981fb371cfdf2c7212f7b6e2",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/keycloak/keycloak/commits/a78cfa4b2ca979a1981fb371cfdf2c7212f7b6e2",
    "html_url": "https://github.com/keycloak/keycloak/commit/a78cfa4b2ca979a1981fb371cfdf2c7212f7b6e2",
    "comments_url": "https://api.github.com/repos/keycloak/keycloak/commits/a78cfa4b2ca979a1981fb371cfdf2c7212f7b6e2/comments",
    "author": {
        "login": "stianst",
        "id": 2271511,
        "node_id": "MDQ6VXNlcjIyNzE1MTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2271511?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stianst",
        "html_url": "https://github.com/stianst",
        "followers_url": "https://api.github.com/users/stianst/followers",
        "following_url": "https://api.github.com/users/stianst/following{/other_user}",
        "gists_url": "https://api.github.com/users/stianst/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/stianst/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/stianst/subscriptions",
        "organizations_url": "https://api.github.com/users/stianst/orgs",
        "repos_url": "https://api.github.com/users/stianst/repos",
        "events_url": "https://api.github.com/users/stianst/events{/privacy}",
        "received_events_url": "https://api.github.com/users/stianst/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "c6caeb3bec809177e8695c5bf7de2100aa44ac41",
            "url": "https://api.github.com/repos/keycloak/keycloak/commits/c6caeb3bec809177e8695c5bf7de2100aa44ac41",
            "html_url": "https://github.com/keycloak/keycloak/commit/c6caeb3bec809177e8695c5bf7de2100aa44ac41"
        },
        {
            "sha": "3d46b4c425d39b004566cc78164e1ffbe37d647c",
            "url": "https://api.github.com/repos/keycloak/keycloak/commits/3d46b4c425d39b004566cc78164e1ffbe37d647c",
            "html_url": "https://github.com/keycloak/keycloak/commit/3d46b4c425d39b004566cc78164e1ffbe37d647c"
        }
    ],
    "stats": {
        "total": 163,
        "additions": 161,
        "deletions": 2
    },
    "files": [
        {
            "sha": "0bb71c0b1b820f8004292646c2a92216a4891958",
            "filename": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/keycloak/keycloak/blob/a78cfa4b2ca979a1981fb371cfdf2c7212f7b6e2/model%2Finfinispan%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fcache%2Finfinispan%2FUserCacheSession.java",
            "raw_url": "https://github.com/keycloak/keycloak/raw/a78cfa4b2ca979a1981fb371cfdf2c7212f7b6e2/model%2Finfinispan%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fcache%2Finfinispan%2FUserCacheSession.java",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/model%2Finfinispan%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fcache%2Finfinispan%2FUserCacheSession.java?ref=a78cfa4b2ca979a1981fb371cfdf2c7212f7b6e2",
            "patch": "@@ -274,6 +274,10 @@ protected UserModel getUserAdapter(RealmModel realm, String userId, Long loaded,\n     }\n \n     protected UserModel validateCache(RealmModel realm, CachedUser cached) {\n+        if (!realm.getId().equals(cached.getRealm())) {\n+            return null;\n+        }\n+\n         StorageId storageId = new StorageId(cached.getId());\n         if (!storageId.isLocal()) {\n             ComponentModel component = realm.getComponent(storageId.getProviderId());"
        },
        {
            "sha": "8ab450e5d310079a4584dc0f57a0d22b0825f04a",
            "filename": "services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/keycloak/keycloak/blob/a78cfa4b2ca979a1981fb371cfdf2c7212f7b6e2/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2Fadmin%2FUsersResource.java",
            "raw_url": "https://github.com/keycloak/keycloak/raw/a78cfa4b2ca979a1981fb371cfdf2c7212f7b6e2/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2Fadmin%2FUsersResource.java",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2Fadmin%2FUsersResource.java?ref=a78cfa4b2ca979a1981fb371cfdf2c7212f7b6e2",
            "patch": "@@ -152,10 +152,10 @@ public Response updateUser(final @PathParam(\"id\") String id, final UserRepresent\n         try {\n             UserModel user = session.users().getUserById(id, realm);\n             if (user == null) {\n-                throw new NotFoundException(\"User not found\");\n+                return Response.status(Status.NOT_FOUND).build();\n             }\n \n-             Set<String> attrsToRemove;\n+            Set<String> attrsToRemove;\n             if (rep.getAttributes() != null) {\n                 attrsToRemove = new HashSet<>(user.getAttributes().keySet());\n                 attrsToRemove.removeAll(rep.getAttributes().keySet());"
        },
        {
            "sha": "100e45232060c467a02ffc2d4a6dcdc716dd8220",
            "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/CrossRealmPermissionsTest.java",
            "status": "added",
            "additions": 155,
            "deletions": 0,
            "changes": 155,
            "blob_url": "https://github.com/keycloak/keycloak/blob/a78cfa4b2ca979a1981fb371cfdf2c7212f7b6e2/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fadmin%2FCrossRealmPermissionsTest.java",
            "raw_url": "https://github.com/keycloak/keycloak/raw/a78cfa4b2ca979a1981fb371cfdf2c7212f7b6e2/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fadmin%2FCrossRealmPermissionsTest.java",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fadmin%2FCrossRealmPermissionsTest.java?ref=a78cfa4b2ca979a1981fb371cfdf2c7212f7b6e2",
            "patch": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2016 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.testsuite.admin;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.keycloak.admin.client.Keycloak;\n+import org.keycloak.admin.client.resource.RealmResource;\n+import org.keycloak.common.util.Time;\n+import org.keycloak.models.AdminRoles;\n+import org.keycloak.models.Constants;\n+import org.keycloak.representations.idm.ClientRepresentation;\n+import org.keycloak.representations.idm.RealmRepresentation;\n+import org.keycloak.representations.idm.RoleRepresentation;\n+import org.keycloak.representations.idm.UserRepresentation;\n+import org.keycloak.services.resources.admin.RealmAuth.Resource;\n+import org.keycloak.testsuite.AbstractKeycloakTest;\n+import org.keycloak.testsuite.arquillian.AuthServerTestEnricher;\n+import org.keycloak.testsuite.util.ClientBuilder;\n+import org.keycloak.testsuite.util.CredentialBuilder;\n+import org.keycloak.testsuite.util.GreenMailRule;\n+import org.keycloak.testsuite.util.RealmBuilder;\n+import org.keycloak.testsuite.util.UserBuilder;\n+\n+import javax.ws.rs.ClientErrorException;\n+import javax.ws.rs.core.Response;\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * @author <a href=\"mailto:sthorger@redhat.com\">Stian Thorgersen</a>\n+ */\n+public class CrossRealmPermissionsTest extends AbstractKeycloakTest {\n+\n+    private static final String REALM_NAME = \"crossrealm-test\";\n+    private static final String REALM2_NAME = \"crossrealm2-test\";\n+\n+    private RealmResource realm1;\n+    private RealmResource realm2;\n+\n+    @Rule public GreenMailRule greenMailRule = new GreenMailRule();\n+\n+    @Override\n+    public void addTestRealms(List<RealmRepresentation> testRealms) {\n+        RealmBuilder builder = RealmBuilder.create().name(REALM_NAME).testMail();\n+        builder.client(ClientBuilder.create().clientId(\"test-client\").publicClient().directAccessGrants());\n+\n+        builder.user(UserBuilder.create()\n+                .username(AdminRoles.REALM_ADMIN)\n+                .role(Constants.REALM_MANAGEMENT_CLIENT_ID, AdminRoles.REALM_ADMIN)\n+                .addPassword(\"password\"));\n+        testRealms.add(builder.build());\n+\n+        realm1 = Keycloak.getInstance(AuthServerTestEnricher.getAuthServerContextRoot() + \"/auth\", REALM_NAME, AdminRoles.REALM_ADMIN, \"password\", \"test-client\", \"secret\").realm(REALM_NAME);\n+\n+        builder = RealmBuilder.create().name(REALM2_NAME).testMail();\n+        builder.client(ClientBuilder.create().clientId(\"test-client\").publicClient().directAccessGrants());\n+\n+        builder.user(UserBuilder.create()\n+                .username(AdminRoles.REALM_ADMIN)\n+                .role(Constants.REALM_MANAGEMENT_CLIENT_ID, AdminRoles.REALM_ADMIN)\n+                .addPassword(\"password\"));\n+\n+        testRealms.add(builder.build());\n+\n+        realm2 = Keycloak.getInstance(AuthServerTestEnricher.getAuthServerContextRoot() + \"/auth\", REALM2_NAME, AdminRoles.REALM_ADMIN, \"password\", \"test-client\", \"secret\").realm(REALM2_NAME);\n+    }\n+\n+    @Test\n+    public void users() {\n+        UserRepresentation user = UserBuilder.create().username(\"randomuser-\" + Time.currentTimeMillis()).build();\n+        Response response = realm1.users().create(user);\n+        String userId = ApiUtil.getCreatedId(response);\n+        response.close();\n+\n+        realm1.users().get(userId).toRepresentation();\n+\n+        expectNotFound(new PermissionsTest.Invocation() {\n+            @Override\n+            public void invoke(RealmResource realm) {\n+                realm.users().get(userId).toRepresentation();\n+            }\n+        }, realm2);\n+\n+        expectNotFound(new PermissionsTest.Invocation() {\n+            @Override\n+            public void invoke(RealmResource realm) {\n+                realm.users().get(userId).update(new UserRepresentation());\n+            }\n+        }, realm2);\n+\n+        expectNotFound(new PermissionsTest.Invocation() {\n+            @Override\n+            public void invoke(RealmResource realm) {\n+                realm.users().get(userId).remove();\n+            }\n+        }, realm2);\n+\n+        expectNotFound(new PermissionsTest.Invocation() {\n+            @Override\n+            public void invoke(RealmResource realm) {\n+                realm.users().get(userId).getUserSessions();\n+            }\n+        }, realm2);\n+    }\n+\n+    private void expectNotFound(final PermissionsTest.Invocation invocation, RealmResource realm) {\n+        expectNotFound(new PermissionsTest.InvocationWithResponse() {\n+            public void invoke(RealmResource realm, AtomicReference<Response> response) {\n+                invocation.invoke(realm);\n+            }\n+        }, realm);\n+    }\n+\n+    private void expectNotFound(PermissionsTest.InvocationWithResponse invocation, RealmResource realm) {\n+        int statusCode = 0;\n+        try {\n+            AtomicReference<Response> responseReference = new AtomicReference<>();\n+            invocation.invoke(realm, responseReference);\n+            Response response = responseReference.get();\n+            if (response != null) {\n+                statusCode = response.getStatus();\n+            } else {\n+                fail(\"Expected failure\");\n+            }\n+        } catch (ClientErrorException e) {\n+            statusCode = e.getResponse().getStatus();\n+        }\n+\n+        assertEquals(404, statusCode);\n+    }\n+\n+}"
        }
    ]
}