{
    "sha": "a41ce6892cb0590b2e658704434ac0dbcb6834c8",
    "node_id": "MDY6Q29tbWl0MjU4MDc2OTphNDFjZTY4OTJjYjA1OTBiMmU2NTg3MDQ0MzRhYzBkYmNiNjgzNGM4",
    "commit": {
        "author": {
            "name": "Stefan Bodewig",
            "email": "bodewig@apache.org",
            "date": "2018-08-09T18:39:23Z"
        },
        "committer": {
            "name": "Stefan Bodewig",
            "email": "bodewig@apache.org",
            "date": "2018-08-09T18:39:23Z"
        },
        "message": "COMPRESS-463 throw exception when detecting a truncated stored entry",
        "tree": {
            "sha": "2ed04fd6f6172838d628927a35ee08bd609fdb5b",
            "url": "https://api.github.com/repos/apache/commons-compress/git/trees/2ed04fd6f6172838d628927a35ee08bd609fdb5b"
        },
        "url": "https://api.github.com/repos/apache/commons-compress/git/commits/a41ce6892cb0590b2e658704434ac0dbcb6834c8",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/commons-compress/commits/a41ce6892cb0590b2e658704434ac0dbcb6834c8",
    "html_url": "https://github.com/apache/commons-compress/commit/a41ce6892cb0590b2e658704434ac0dbcb6834c8",
    "comments_url": "https://api.github.com/repos/apache/commons-compress/commits/a41ce6892cb0590b2e658704434ac0dbcb6834c8/comments",
    "author": {
        "login": "bodewig",
        "id": 1318573,
        "node_id": "MDQ6VXNlcjEzMTg1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1318573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bodewig",
        "html_url": "https://github.com/bodewig",
        "followers_url": "https://api.github.com/users/bodewig/followers",
        "following_url": "https://api.github.com/users/bodewig/following{/other_user}",
        "gists_url": "https://api.github.com/users/bodewig/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bodewig/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bodewig/subscriptions",
        "organizations_url": "https://api.github.com/users/bodewig/orgs",
        "repos_url": "https://api.github.com/users/bodewig/repos",
        "events_url": "https://api.github.com/users/bodewig/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bodewig/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "bodewig",
        "id": 1318573,
        "node_id": "MDQ6VXNlcjEzMTg1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1318573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bodewig",
        "html_url": "https://github.com/bodewig",
        "followers_url": "https://api.github.com/users/bodewig/followers",
        "following_url": "https://api.github.com/users/bodewig/following{/other_user}",
        "gists_url": "https://api.github.com/users/bodewig/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bodewig/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bodewig/subscriptions",
        "organizations_url": "https://api.github.com/users/bodewig/orgs",
        "repos_url": "https://api.github.com/users/bodewig/repos",
        "events_url": "https://api.github.com/users/bodewig/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bodewig/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "64ed6dde03afbef6715fdfdeab5fc04be6192899",
            "url": "https://api.github.com/repos/apache/commons-compress/commits/64ed6dde03afbef6715fdfdeab5fc04be6192899",
            "html_url": "https://github.com/apache/commons-compress/commit/64ed6dde03afbef6715fdfdeab5fc04be6192899"
        }
    ],
    "stats": {
        "total": 84,
        "additions": 83,
        "deletions": 1
    },
    "files": [
        {
            "sha": "7546871d37cb1f85f4bc326561eacfd2234aac88",
            "filename": "src/changes/changes.xml",
            "status": "modified",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/apache/commons-compress/blob/a41ce6892cb0590b2e658704434ac0dbcb6834c8/src%2Fchanges%2Fchanges.xml",
            "raw_url": "https://github.com/apache/commons-compress/raw/a41ce6892cb0590b2e658704434ac0dbcb6834c8/src%2Fchanges%2Fchanges.xml",
            "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src%2Fchanges%2Fchanges.xml?ref=a41ce6892cb0590b2e658704434ac0dbcb6834c8",
            "patch": "@@ -74,6 +74,11 @@ The <action> type attribute can be add,update,fix,remove.\n         It is now possible to specify the arguments of zstd-jni's\n         ZstdOutputStream constructors via Commons Compress as well.\n       </action>\n+      <action issue=\"COMPRESS-463\" type=\"fix\" date=\"2018-08-09\">\n+        ZipArchiveInputStream#read would silently return -1 on a\n+        corrupted stored entry and even return > 0 after hitting the\n+        end of the archive.\n+      </action>\n     </release>\n     <release version=\"1.17\" date=\"2018-06-03\"\n              description=\"Release 1.17\">"
        },
        {
            "sha": "e1995d7aa51dfac6ae933987fb0b7760c607582b",
            "filename": "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/apache/commons-compress/blob/a41ce6892cb0590b2e658704434ac0dbcb6834c8/src%2Fmain%2Fjava%2Forg%2Fapache%2Fcommons%2Fcompress%2Farchivers%2Fzip%2FZipArchiveInputStream.java",
            "raw_url": "https://github.com/apache/commons-compress/raw/a41ce6892cb0590b2e658704434ac0dbcb6834c8/src%2Fmain%2Fjava%2Forg%2Fapache%2Fcommons%2Fcompress%2Farchivers%2Fzip%2FZipArchiveInputStream.java",
            "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fcommons%2Fcompress%2Farchivers%2Fzip%2FZipArchiveInputStream.java?ref=a41ce6892cb0590b2e658704434ac0dbcb6834c8",
            "patch": "@@ -525,7 +525,8 @@ private int readStored(final byte[] buffer, final int offset, final int length)\n             buf.position(0);\n             final int l = in.read(buf.array());\n             if (l == -1) {\n-                return -1;\n+                buf.limit(0);\n+                throw new IOException(\"Truncated ZIP file\");\n             }\n             buf.limit(l);\n "
        },
        {
            "sha": "0a905e3ab2f7d4bedf4825a8aea9e794af114e03",
            "filename": "src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java",
            "status": "modified",
            "additions": 7,
            "deletions": 0,
            "changes": 7,
            "blob_url": "https://github.com/apache/commons-compress/blob/a41ce6892cb0590b2e658704434ac0dbcb6834c8/src%2Ftest%2Fjava%2Forg%2Fapache%2Fcommons%2Fcompress%2Farchivers%2Fzip%2FMaven221MultiVolumeTest.java",
            "raw_url": "https://github.com/apache/commons-compress/raw/a41ce6892cb0590b2e658704434ac0dbcb6834c8/src%2Ftest%2Fjava%2Forg%2Fapache%2Fcommons%2Fcompress%2Farchivers%2Fzip%2FMaven221MultiVolumeTest.java",
            "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fcommons%2Fcompress%2Farchivers%2Fzip%2FMaven221MultiVolumeTest.java?ref=a41ce6892cb0590b2e658704434ac0dbcb6834c8",
            "patch": "@@ -96,6 +96,13 @@ public void testRead7ZipMultiVolumeArchiveForStream() throws IOException {\n                 assertEquals(\"Truncated ZIP file\", e.getMessage());\n             }\n \n+            try {\n+                zi.read(buffer);\n+                fail(\"shouldn't be able to read from truncated entry after exception\");\n+            } catch (final IOException e) {\n+                assertEquals(\"Truncated ZIP file\", e.getMessage());\n+            }\n+\n             // and now we get another entry, which should also yield\n             // an exception\n             try {"
        },
        {
            "sha": "b9395fbfd336625dd824c064e9f4c2f61365f257",
            "filename": "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java",
            "status": "modified",
            "additions": 69,
            "deletions": 0,
            "changes": 69,
            "blob_url": "https://github.com/apache/commons-compress/blob/a41ce6892cb0590b2e658704434ac0dbcb6834c8/src%2Ftest%2Fjava%2Forg%2Fapache%2Fcommons%2Fcompress%2Farchivers%2Fzip%2FZipArchiveInputStreamTest.java",
            "raw_url": "https://github.com/apache/commons-compress/raw/a41ce6892cb0590b2e658704434ac0dbcb6834c8/src%2Ftest%2Fjava%2Forg%2Fapache%2Fcommons%2Fcompress%2Farchivers%2Fzip%2FZipArchiveInputStreamTest.java",
            "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fcommons%2Fcompress%2Farchivers%2Fzip%2FZipArchiveInputStreamTest.java?ref=a41ce6892cb0590b2e658704434ac0dbcb6834c8",
            "patch": "@@ -421,6 +421,75 @@ private void multiByteReadConsistentlyReturnsMinusOneAtEof(File file) throws Exc\n         }\n     }\n \n+    @Test\n+    public void singleByteReadThrowsAtEofForCorruptedStoredEntry() throws Exception {\n+        byte[] content;\n+        try (FileInputStream fs = new FileInputStream(getFile(\"COMPRESS-264.zip\"))) {\n+            content = IOUtils.toByteArray(fs);\n+        }\n+        // make size much bigger than entry's real size\n+        for (int i = 17; i < 26; i++) {\n+            content[i] = (byte) 0xff;\n+        }\n+        try (ByteArrayInputStream in = new ByteArrayInputStream(content);\n+             ZipArchiveInputStream archive = new ZipArchiveInputStream(in)) {\n+            ArchiveEntry e = archive.getNextEntry();\n+            try {\n+                IOUtils.toByteArray(archive);\n+                fail(\"expected exception\");\n+            } catch (IOException ex) {\n+                assertEquals(\"Truncated ZIP file\", ex.getMessage());\n+            }\n+            try {\n+                archive.read();\n+                fail(\"expected exception\");\n+            } catch (IOException ex) {\n+                assertEquals(\"Truncated ZIP file\", ex.getMessage());\n+            }\n+            try {\n+                archive.read();\n+                fail(\"expected exception\");\n+            } catch (IOException ex) {\n+                assertEquals(\"Truncated ZIP file\", ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void multiByteReadThrowsAtEofForCorruptedStoredEntry() throws Exception {\n+        byte[] content;\n+        try (FileInputStream fs = new FileInputStream(getFile(\"COMPRESS-264.zip\"))) {\n+            content = IOUtils.toByteArray(fs);\n+        }\n+        // make size much bigger than entry's real size\n+        for (int i = 17; i < 26; i++) {\n+            content[i] = (byte) 0xff;\n+        }\n+        byte[] buf = new byte[2];\n+        try (ByteArrayInputStream in = new ByteArrayInputStream(content);\n+             ZipArchiveInputStream archive = new ZipArchiveInputStream(in)) {\n+            ArchiveEntry e = archive.getNextEntry();\n+            try {\n+                IOUtils.toByteArray(archive);\n+                fail(\"expected exception\");\n+            } catch (IOException ex) {\n+                assertEquals(\"Truncated ZIP file\", ex.getMessage());\n+            }\n+            try {\n+                archive.read(buf);\n+                fail(\"expected exception\");\n+            } catch (IOException ex) {\n+                assertEquals(\"Truncated ZIP file\", ex.getMessage());\n+            }\n+            try {\n+                archive.read(buf);\n+                fail(\"expected exception\");\n+            } catch (IOException ex) {\n+                assertEquals(\"Truncated ZIP file\", ex.getMessage());\n+            }\n+        }\n+    }\n+\n     private static byte[] readEntry(ZipArchiveInputStream zip, ZipArchiveEntry zae) throws IOException {\n         final int len = (int)zae.getSize();\n         final byte[] buff = new byte[len];"
        }
    ]
}