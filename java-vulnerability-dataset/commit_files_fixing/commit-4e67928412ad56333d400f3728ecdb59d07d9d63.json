{
    "sha": "4e67928412ad56333d400f3728ecdb59d07d9d63",
    "node_id": "MDY6Q29tbWl0MjA2NDI3OjRlNjc5Mjg0MTJhZDU2MzMzZDQwMGYzNzI4ZWNkYjU5ZDA3ZDlkNjM=",
    "commit": {
        "author": {
            "name": "TALLISON",
            "email": "tallison@apache.org",
            "date": "2018-09-06T12:57:47Z"
        },
        "committer": {
            "name": "TALLISON",
            "email": "tallison@apache.org",
            "date": "2018-09-06T12:57:47Z"
        },
        "message": "improve xml parsing",
        "tree": {
            "sha": "8f2be768c6877efec01d09419b80874e9455f211",
            "url": "https://api.github.com/repos/apache/tika/git/trees/8f2be768c6877efec01d09419b80874e9455f211"
        },
        "url": "https://api.github.com/repos/apache/tika/git/commits/4e67928412ad56333d400f3728ecdb59d07d9d63",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/tika/commits/4e67928412ad56333d400f3728ecdb59d07d9d63",
    "html_url": "https://github.com/apache/tika/commit/4e67928412ad56333d400f3728ecdb59d07d9d63",
    "comments_url": "https://api.github.com/repos/apache/tika/commits/4e67928412ad56333d400f3728ecdb59d07d9d63/comments",
    "author": {
        "login": "tballison",
        "id": 6739646,
        "node_id": "MDQ6VXNlcjY3Mzk2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6739646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tballison",
        "html_url": "https://github.com/tballison",
        "followers_url": "https://api.github.com/users/tballison/followers",
        "following_url": "https://api.github.com/users/tballison/following{/other_user}",
        "gists_url": "https://api.github.com/users/tballison/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tballison/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tballison/subscriptions",
        "organizations_url": "https://api.github.com/users/tballison/orgs",
        "repos_url": "https://api.github.com/users/tballison/repos",
        "events_url": "https://api.github.com/users/tballison/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tballison/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "tballison",
        "id": 6739646,
        "node_id": "MDQ6VXNlcjY3Mzk2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6739646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tballison",
        "html_url": "https://github.com/tballison",
        "followers_url": "https://api.github.com/users/tballison/followers",
        "following_url": "https://api.github.com/users/tballison/following{/other_user}",
        "gists_url": "https://api.github.com/users/tballison/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tballison/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tballison/subscriptions",
        "organizations_url": "https://api.github.com/users/tballison/orgs",
        "repos_url": "https://api.github.com/users/tballison/repos",
        "events_url": "https://api.github.com/users/tballison/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tballison/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "705b79ccb6c0ad0f92a3a185bf7e66cacf899931",
            "url": "https://api.github.com/repos/apache/tika/commits/705b79ccb6c0ad0f92a3a185bf7e66cacf899931",
            "html_url": "https://github.com/apache/tika/commit/705b79ccb6c0ad0f92a3a185bf7e66cacf899931"
        }
    ],
    "stats": {
        "total": 71,
        "additions": 58,
        "deletions": 13
    },
    "files": [
        {
            "sha": "0069a9a226712db82c49e003c09447b01b9436e0",
            "filename": "tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
            "status": "modified",
            "additions": 38,
            "deletions": 5,
            "changes": 43,
            "blob_url": "https://github.com/apache/tika/blob/4e67928412ad56333d400f3728ecdb59d07d9d63/tika-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Futils%2FXMLReaderUtils.java",
            "raw_url": "https://github.com/apache/tika/raw/4e67928412ad56333d400f3728ecdb59d07d9d63/tika-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Futils%2FXMLReaderUtils.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Futils%2FXMLReaderUtils.java?ref=4e67928412ad56333d400f3728ecdb59d07d9d63",
            "patch": "@@ -46,6 +46,7 @@\n import java.io.Serializable;\n import java.io.StringReader;\n import java.lang.reflect.Method;\n+import java.util.Properties;\n import java.util.concurrent.ArrayBlockingQueue;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n@@ -73,6 +74,25 @@ public class XMLReaderUtils implements Serializable {\n \n     private static long LAST_LOG = -1;\n \n+    private static final String JAXP_ENTITY_EXPANSION_LIMIT_KEY = \"jdk.xml.entityExpansionLimit\";\n+    private static final int DEFAULT_MAX_ENTITY_EXPANSIONS = 20;\n+\n+    private static int MAX_ENTITY_EXPANSIONS = determineMaxEntityExpansions();\n+\n+    private static int determineMaxEntityExpansions() {\n+        Properties properties = System.getProperties();\n+        if (properties != null && properties.containsKey(JAXP_ENTITY_EXPANSION_LIMIT_KEY)) {\n+            try {\n+                return Integer.parseInt(properties.getProperty(JAXP_ENTITY_EXPANSION_LIMIT_KEY));\n+            } catch (NumberFormatException e) {\n+                LOG.log(Level.WARNING, \"Couldn't parse an integer for the entity expansion limit:\"+\n+                        properties.getProperty(JAXP_ENTITY_EXPANSION_LIMIT_KEY)+\n+                        \"; backing off to default: \"+DEFAULT_MAX_ENTITY_EXPANSIONS);\n+            }\n+        }\n+        return DEFAULT_MAX_ENTITY_EXPANSIONS;\n+    }\n+\n     //TODO: figure out if the rw lock is any better than a simple lock\n     private static final ReentrantReadWriteLock SAX_READ_WRITE_LOCK = new ReentrantReadWriteLock();\n     private static final ReentrantReadWriteLock DOM_READ_WRITE_LOCK = new ReentrantReadWriteLock();\n@@ -104,6 +124,19 @@ public Object resolveEntity(String publicID, String systemID, String baseURI, St\n                 }\n             };\n \n+    /**\n+     * Set the maximum number of entity expansions allowable in SAX/DOM/StAX parsing.\n+     * <b>NOTE:</b>A value less than or equal to zero indicates no limit.\n+     * This will override the system property {@link #JAXP_ENTITY_EXPANSION_LIMIT_KEY}\n+     * and the {@link #DEFAULT_MAX_ENTITY_EXPANSIONS} value for pa\n+     *\n+     * @param maxEntityExpansions -- maximum number of allowable entity expansions\n+     * @since Apache Tika 1.19\n+     */\n+    public static void setMaxEntityExpansions(int maxEntityExpansions) {\n+        MAX_ENTITY_EXPANSIONS = maxEntityExpansions;\n+    }\n+\n     /**\n      * Returns the XMLReader specified in this parsing context. If a reader\n      * is not explicitly specified, then one is created using the specified\n@@ -517,7 +550,7 @@ private static void trySetXercesSecurityManager(DocumentBuilderFactory factory)\n             try {\n                 Object mgr = Class.forName(securityManagerClassName).newInstance();\n                 Method setLimit = mgr.getClass().getMethod(\"setEntityExpansionLimit\", Integer.TYPE);\n-                setLimit.invoke(mgr, 4096);\n+                setLimit.invoke(mgr, MAX_ENTITY_EXPANSIONS);\n                 factory.setAttribute(\"http://apache.org/xml/properties/security-manager\", mgr);\n                 // Stop once one can be setup without error\n                 return;\n@@ -534,7 +567,7 @@ private static void trySetXercesSecurityManager(DocumentBuilderFactory factory)\n \n         // separate old version of Xerces not found => use the builtin way of setting the property\n         try {\n-            factory.setAttribute(\"http://www.oracle.com/xml/jaxp/properties/entityExpansionLimit\", 4096);\n+            factory.setAttribute(\"http://www.oracle.com/xml/jaxp/properties/entityExpansionLimit\", MAX_ENTITY_EXPANSIONS);\n         } catch (IllegalArgumentException e) {     // NOSONAR - also catch things like NoClassDefError here\n             // throttle the log somewhat as it can spam the log otherwise\n             if(System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n@@ -554,7 +587,7 @@ private static void trySetXercesSecurityManager(SAXParser parser) {\n             try {\n                 Object mgr = Class.forName(securityManagerClassName).newInstance();\n                 Method setLimit = mgr.getClass().getMethod(\"setEntityExpansionLimit\", Integer.TYPE);\n-                setLimit.invoke(mgr, 4096);\n+                setLimit.invoke(mgr, MAX_ENTITY_EXPANSIONS);\n                 parser.setProperty(\"http://apache.org/xml/properties/security-manager\", mgr);\n                 // Stop once one can be setup without error\n                 return;\n@@ -571,7 +604,7 @@ private static void trySetXercesSecurityManager(SAXParser parser) {\n \n         // separate old version of Xerces not found => use the builtin way of setting the property\n         try {\n-            parser.setProperty(\"http://www.oracle.com/xml/jaxp/properties/entityExpansionLimit\", 4096);\n+            parser.setProperty(\"http://www.oracle.com/xml/jaxp/properties/entityExpansionLimit\", MAX_ENTITY_EXPANSIONS);\n         } catch (SAXException e) {     // NOSONAR - also catch things like NoClassDefError here\n             // throttle the log somewhat as it can spam the log otherwise\n             if(System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n@@ -583,7 +616,7 @@ private static void trySetXercesSecurityManager(SAXParser parser) {\n \n     private static void trySetStaxSecurityManager(XMLInputFactory inputFactory) {\n         try {\n-            inputFactory.setProperty(\"com.ctc.wstx.maxEntityCount\", 4096);\n+            inputFactory.setProperty(\"com.ctc.wstx.maxEntityCount\", MAX_ENTITY_EXPANSIONS);\n         } catch (IllegalArgumentException e) {\n             // throttle the log somewhat as it can spam the log otherwise\n             if(System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {"
        },
        {
            "sha": "54e3a7cc9db6614831ad608f75f410c6c39cb229",
            "filename": "tika-parsers/src/test/java/org/apache/tika/TestXMLEntityExpansion.java",
            "status": "modified",
            "additions": 20,
            "deletions": 8,
            "changes": 28,
            "blob_url": "https://github.com/apache/tika/blob/4e67928412ad56333d400f3728ecdb59d07d9d63/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2FTestXMLEntityExpansion.java",
            "raw_url": "https://github.com/apache/tika/raw/4e67928412ad56333d400f3728ecdb59d07d9d63/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2FTestXMLEntityExpansion.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2FTestXMLEntityExpansion.java?ref=4e67928412ad56333d400f3728ecdb59d07d9d63",
            "patch": "@@ -26,17 +26,14 @@\n import java.io.ByteArrayInputStream;\n import java.nio.charset.StandardCharsets;\n \n-import static org.apache.tika.XMLTestBase.injectXML;\n-import static org.apache.tika.XMLTestBase.parse;\n import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n \n /**\n  * Tests to confirm defenses against entity expansion attacks.\n  */\n @Ignore(\"initial draft, needs more work\")\n-public class TestXMLEntityExpansion\n-{\n+public class TestXMLEntityExpansion extends XMLTestBase {\n+\n     private static final byte[] ENTITY_EXPANSION_BOMB = new String(\n             \"<!DOCTYPE kaboom [ \" +\n                     \"<!ENTITY a \\\"1234567890\\\" > \" +\n@@ -61,13 +58,28 @@ public class TestXMLEntityExpansion\n                     \"]> \" +\n                     \"<kaboom>&s;</kaboom>\").getBytes(StandardCharsets.UTF_8);\n \n-    //a truly vulnerable parser, say xerces2, doesn't oom, it thrashes with gc.\n     //Set a reasonable amount of time as the timeout\n+    //Make sure that the test apparatus actually works.\n     @Test(timeout = 20000)\n-    public void testInjectedXML() throws Exception {\n+    public void testVulnerableParser() throws Exception {\n         byte[] bytes = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><document>blah</document>\".getBytes(StandardCharsets.UTF_8);\n         byte[] injected = injectXML(bytes, ENTITY_EXPANSION_BOMB);\n-        parse(\"injected\", new ByteArrayInputStream(injected), new XMLTestBase.VulnerableSAXParser());\n+\n+        Thread thread = new Thread() {\n+            @Override\n+            public void run() {\n+                try {\n+                    parse(\"injected\", new ByteArrayInputStream(injected), new XMLTestBase.VulnerableSAXParser());\n+                } catch (Exception e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+        };\n+        thread.start();\n+        Thread.sleep(10000);\n+        assertTrue(thread.isAlive());\n+        thread.interrupt();\n+\n     }\n \n     @Test(timeout = 20000)//"
        }
    ]
}