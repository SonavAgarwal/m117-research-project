{
    "sha": "cd31cc397fe17389d95b83d6a9caa46eebc54faf",
    "node_id": "MDY6Q29tbWl0MzM4MjE5NTpjZDMxY2MzOTdmZTE3Mzg5ZDk1YjgzZDZhOWNhYTQ2ZWViYzU0ZmFm",
    "commit": {
        "author": {
            "name": "Filip Hanik",
            "email": "fhanik@pivotal.io",
            "date": "2015-08-06T14:13:25Z"
        },
        "committer": {
            "name": "Filip Hanik",
            "email": "fhanik@pivotal.io",
            "date": "2015-08-06T14:13:25Z"
        },
        "message": "When the link is clicked for reset password, the code is exchanged so\nthat the link can not be used again",
        "tree": {
            "sha": "7bc16eceb613108439ad81f04a245c6b99ffbccd",
            "url": "https://api.github.com/repos/cloudfoundry/uaa/git/trees/7bc16eceb613108439ad81f04a245c6b99ffbccd"
        },
        "url": "https://api.github.com/repos/cloudfoundry/uaa/git/commits/cd31cc397fe17389d95b83d6a9caa46eebc54faf",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/cloudfoundry/uaa/commits/cd31cc397fe17389d95b83d6a9caa46eebc54faf",
    "html_url": "https://github.com/cloudfoundry/uaa/commit/cd31cc397fe17389d95b83d6a9caa46eebc54faf",
    "comments_url": "https://api.github.com/repos/cloudfoundry/uaa/commits/cd31cc397fe17389d95b83d6a9caa46eebc54faf/comments",
    "author": {
        "login": "fhanik",
        "id": 607429,
        "node_id": "MDQ6VXNlcjYwNzQyOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/607429?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fhanik",
        "html_url": "https://github.com/fhanik",
        "followers_url": "https://api.github.com/users/fhanik/followers",
        "following_url": "https://api.github.com/users/fhanik/following{/other_user}",
        "gists_url": "https://api.github.com/users/fhanik/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fhanik/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fhanik/subscriptions",
        "organizations_url": "https://api.github.com/users/fhanik/orgs",
        "repos_url": "https://api.github.com/users/fhanik/repos",
        "events_url": "https://api.github.com/users/fhanik/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fhanik/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "fhanik",
        "id": 607429,
        "node_id": "MDQ6VXNlcjYwNzQyOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/607429?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fhanik",
        "html_url": "https://github.com/fhanik",
        "followers_url": "https://api.github.com/users/fhanik/followers",
        "following_url": "https://api.github.com/users/fhanik/following{/other_user}",
        "gists_url": "https://api.github.com/users/fhanik/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fhanik/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fhanik/subscriptions",
        "organizations_url": "https://api.github.com/users/fhanik/orgs",
        "repos_url": "https://api.github.com/users/fhanik/repos",
        "events_url": "https://api.github.com/users/fhanik/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fhanik/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "7c70a85f4c7b5a9b1603bc57cab14a7ffef2168b",
            "url": "https://api.github.com/repos/cloudfoundry/uaa/commits/7c70a85f4c7b5a9b1603bc57cab14a7ffef2168b",
            "html_url": "https://github.com/cloudfoundry/uaa/commit/7c70a85f4c7b5a9b1603bc57cab14a7ffef2168b"
        }
    ],
    "stats": {
        "total": 224,
        "additions": 155,
        "deletions": 69
    },
    "files": [
        {
            "sha": "483a9899089482230a928125d2b373bd9999ac85",
            "filename": "common/src/main/java/org/cloudfoundry/identity/uaa/codestore/ExpiringCodeStore.java",
            "status": "modified",
            "additions": 5,
            "deletions": 5,
            "changes": 10,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/cd31cc397fe17389d95b83d6a9caa46eebc54faf/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fcodestore%2FExpiringCodeStore.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/cd31cc397fe17389d95b83d6a9caa46eebc54faf/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fcodestore%2FExpiringCodeStore.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fcodestore%2FExpiringCodeStore.java?ref=cd31cc397fe17389d95b83d6a9caa46eebc54faf",
            "patch": "@@ -12,10 +12,10 @@\n  *******************************************************************************/\n package org.cloudfoundry.identity.uaa.codestore;\n \n-import java.sql.Timestamp;\n-\n import org.springframework.security.oauth2.common.util.RandomValueStringGenerator;\n \n+import java.sql.Timestamp;\n+\n public interface ExpiringCodeStore {\n \n     /**\n@@ -26,7 +26,7 @@ public interface ExpiringCodeStore {\n      * @throws java.lang.NullPointerException if data or expiresAt is null\n      * @throws java.lang.IllegalArgumentException if expiresAt is in the past\n      */\n-    public ExpiringCode generateCode(String data, Timestamp expiresAt);\n+    ExpiringCode generateCode(String data, Timestamp expiresAt);\n \n     /**\n      * Retrieve a code and delete it if it exists.\n@@ -35,12 +35,12 @@ public interface ExpiringCodeStore {\n      * @return code or null if the code is not found\n      * @throws java.lang.NullPointerException if the code is null\n      */\n-    public ExpiringCode retrieveCode(String code);\n+    ExpiringCode retrieveCode(String code);\n \n     /**\n      * Set the code generator for this store.\n      * \n      * @param generator Code generator\n      */\n-    public void setGenerator(RandomValueStringGenerator generator);\n+    void setGenerator(RandomValueStringGenerator generator);\n }"
        },
        {
            "sha": "db9df9ddb057e75d1202cd7b97b298ff0695c153",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/ResetPasswordController.java",
            "status": "modified",
            "additions": 27,
            "deletions": 8,
            "changes": 35,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/cd31cc397fe17389d95b83d6a9caa46eebc54faf/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FResetPasswordController.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/cd31cc397fe17389d95b83d6a9caa46eebc54faf/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FResetPasswordController.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FResetPasswordController.java?ref=cd31cc397fe17389d95b83d6a9caa46eebc54faf",
            "patch": "@@ -16,6 +16,8 @@\n import org.apache.commons.logging.LogFactory;\n import org.cloudfoundry.identity.uaa.authentication.Origin;\n import org.cloudfoundry.identity.uaa.authentication.UaaPrincipal;\n+import org.cloudfoundry.identity.uaa.codestore.ExpiringCode;\n+import org.cloudfoundry.identity.uaa.codestore.ExpiringCodeStore;\n import org.cloudfoundry.identity.uaa.error.UaaException;\n import org.cloudfoundry.identity.uaa.scim.ScimUser;\n import org.cloudfoundry.identity.uaa.scim.exception.InvalidPasswordException;\n@@ -36,9 +38,9 @@\n import org.thymeleaf.TemplateEngine;\n import org.thymeleaf.context.Context;\n \n-import java.util.Map;\n-import java.util.regex.Pattern;\n import javax.servlet.http.HttpServletResponse;\n+import java.sql.Timestamp;\n+import java.util.regex.Pattern;\n \n @Controller\n public class ResetPasswordController {\n@@ -50,14 +52,21 @@ public class ResetPasswordController {\n     private final UaaUrlUtils uaaUrlUtils;\n     private final String brand;\n     private final Pattern emailPattern;\n-\n-    public ResetPasswordController(ResetPasswordService resetPasswordService, MessageService messageService, TemplateEngine templateEngine, UaaUrlUtils uaaUrlUtils, String brand) {\n+    private final ExpiringCodeStore codeStore;\n+\n+    public ResetPasswordController(ResetPasswordService resetPasswordService,\n+                                   MessageService messageService,\n+                                   TemplateEngine templateEngine,\n+                                   UaaUrlUtils uaaUrlUtils,\n+                                   String brand,\n+                                   ExpiringCodeStore codeStore) {\n         this.resetPasswordService = resetPasswordService;\n         this.messageService = messageService;\n         this.templateEngine = templateEngine;\n         this.uaaUrlUtils = uaaUrlUtils;\n         this.brand = brand;\n         emailPattern = Pattern.compile(\"^\\\\S+@\\\\S+\\\\.\\\\S+$\");\n+        this.codeStore = codeStore;\n     }\n \n     @RequestMapping(value = \"/forgot_password\", method = RequestMethod.GET)\n@@ -139,8 +148,20 @@ public String emailSentPage(@ModelAttribute(\"code\") String code) {\n     }\n \n     @RequestMapping(value = \"/reset_password\", method = RequestMethod.GET, params = { \"email\", \"code\" })\n-    public String resetPasswordPage() {\n-        return \"reset_password\";\n+    public String resetPasswordPage(Model model,\n+                                    HttpServletResponse response,\n+                                    @RequestParam(\"code\") String code,\n+                                    @RequestParam(\"email\") String email) {\n+\n+        ExpiringCode expiringCode = codeStore.retrieveCode(code);\n+        if (expiringCode==null) {\n+            return handleUnprocessableEntity(model, response, \"message_code\", \"bad_code\");\n+        } else {\n+            Timestamp fiveMinutes = new Timestamp(System.currentTimeMillis()+(1000*60*5));\n+            model.addAttribute(\"code\", codeStore.generateCode(expiringCode.getData(), fiveMinutes).getCode());\n+            model.addAttribute(\"email\", email);\n+            return \"reset_password\";\n+        }\n     }\n \n     @RequestMapping(value = \"/reset_password.do\", method = RequestMethod.POST)\n@@ -162,11 +183,9 @@ public String resetPassword(Model model,\n \n         try {\n             ScimUser user = resetPasswordService.resetPassword(code, password);\n-\n             UaaPrincipal uaaPrincipal = new UaaPrincipal(user.getId(), user.getUserName(), user.getPrimaryEmail(), Origin.UAA, null, IdentityZoneHolder.get().getId());\n             UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(uaaPrincipal, null, UaaAuthority.USER_AUTHORITIES);\n             SecurityContextHolder.getContext().setAuthentication(token);\n-\n             return \"redirect:home\";\n         } catch (UaaException e) {\n             return handleUnprocessableEntity(model, response, \"message_code\", \"bad_code\");"
        },
        {
            "sha": "ec61839a6492d56f21efe4693d249792a383642a",
            "filename": "login/src/main/resources/login-ui.xml",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/cd31cc397fe17389d95b83d6a9caa46eebc54faf/login%2Fsrc%2Fmain%2Fresources%2Flogin-ui.xml",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/cd31cc397fe17389d95b83d6a9caa46eebc54faf/login%2Fsrc%2Fmain%2Fresources%2Flogin-ui.xml",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Flogin-ui.xml?ref=cd31cc397fe17389d95b83d6a9caa46eebc54faf",
            "patch": "@@ -470,14 +470,15 @@\n         <constructor-arg ref=\"mailTemplateEngine\"/>\n         <constructor-arg ref=\"uaaUrlUtils\"/>\n         <constructor-arg value=\"${login.brand:oss}\"/>\n+        <constructor-arg ref=\"codeStore\"/>\n     </bean>\n \n     <bean id=\"changeEmailController\" class=\"org.cloudfoundry.identity.uaa.login.ChangeEmailController\">\n         <constructor-arg ref=\"changeEmailService\"/>\n         <property name=\"uaaUserDatabase\" ref=\"userDatabase\"/>\n     </bean>\n \n-    <bean class=\"org.cloudfoundry.identity.uaa.login.UaaExpiringCodeService\">\n+    <bean class=\"org.cloudfoundry.identity.uaa.login.UaaExpiringCodeService\" id=\"uaaExpiringCodeService\">\n         <constructor-arg ref=\"codeStore\"/>\n     </bean>\n "
        },
        {
            "sha": "4b5c4eb7cb46c788e2fe54c9a185828643406d8d",
            "filename": "login/src/main/resources/templates/web/reset_password.html",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/cd31cc397fe17389d95b83d6a9caa46eebc54faf/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Freset_password.html",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/cd31cc397fe17389d95b83d6a9caa46eebc54faf/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Freset_password.html",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Freset_password.html?ref=cd31cc397fe17389d95b83d6a9caa46eebc54faf",
            "patch": "@@ -8,10 +8,10 @@\n <div class=\"island\" layout:fragment=\"page-content\">\n     <h1>Reset Password</h1>\n     <div class=\"island-content\">\n-        <div th:text=\"|Email: ${param.email[0]}|\" class=\"email-display\">Email: user@example.com</div>\n+        <div th:text=\"|Email: ${email}|\" class=\"email-display\">Email: user@example.com</div>\n         <form th:action=\"@{/reset_password.do}\" method=\"post\" novalidate=\"novalidate\">\n-            <input type=\"hidden\" name=\"code\" th:value=\"${param.code[0]}\"/>\n-            <input type=\"hidden\" name=\"email\" th:value=\"${param.email[0]}\"/>\n+            <input type=\"hidden\" name=\"code\" th:value=\"${code}\"/>\n+            <input type=\"hidden\" name=\"email\" th:value=\"${email}\"/>\n             <div th:if=\"${message_code}\" th:text=\"#{'reset_password.' + ${message_code}}\" class=\"error-message\"></div>\n             <input name=\"password\" type=\"password\" placeholder=\"New Password\" autocomplete=\"off\" class=\"form-control\"/>\n             <input name=\"password_confirmation\" type=\"password\" placeholder=\"Confirm\" autocomplete=\"off\" class=\"form-control\"/>"
        },
        {
            "sha": "fcfe1ef58aa00c17ce87d2ae0a8b7e96033805c1",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/ResetPasswordControllerTest.java",
            "status": "modified",
            "additions": 9,
            "deletions": 1,
            "changes": 10,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/cd31cc397fe17389d95b83d6a9caa46eebc54faf/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FResetPasswordControllerTest.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/cd31cc397fe17389d95b83d6a9caa46eebc54faf/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FResetPasswordControllerTest.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FResetPasswordControllerTest.java?ref=cd31cc397fe17389d95b83d6a9caa46eebc54faf",
            "patch": "@@ -14,6 +14,7 @@\n \n import org.cloudfoundry.identity.uaa.TestClassNullifier;\n import org.cloudfoundry.identity.uaa.codestore.ExpiringCode;\n+import org.cloudfoundry.identity.uaa.codestore.ExpiringCodeStore;\n import org.cloudfoundry.identity.uaa.error.UaaException;\n import org.cloudfoundry.identity.uaa.login.test.ThymeleafConfig;\n import org.cloudfoundry.identity.uaa.scim.ScimMeta;\n@@ -47,6 +48,8 @@\n import static com.google.common.collect.Lists.newArrayList;\n import static org.hamcrest.Matchers.containsString;\n import static org.junit.Assert.assertThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyString;\n import static org.mockito.Matchers.contains;\n import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.mock;\n@@ -67,6 +70,7 @@ public class ResetPasswordControllerTest extends TestClassNullifier {\n     private MockMvc mockMvc;\n     private ResetPasswordService resetPasswordService;\n     private MessageService messageService;\n+    private ExpiringCodeStore codeStore;\n \n     @Autowired\n     @Qualifier(\"mailTemplateEngine\")\n@@ -78,7 +82,8 @@ public void setUp() throws Exception {\n         IdentityZoneHolder.set(IdentityZone.getUaa());\n         resetPasswordService = mock(ResetPasswordService.class);\n         messageService = mock(MessageService.class);\n-        ResetPasswordController controller = new ResetPasswordController(resetPasswordService, messageService, templateEngine, new UaaUrlUtils(\"http://foo/uaa\"), \"pivotal\");\n+        codeStore = mock(ExpiringCodeStore.class);\n+        ResetPasswordController controller = new ResetPasswordController(resetPasswordService, messageService, templateEngine, new UaaUrlUtils(\"http://foo/uaa\"), \"pivotal\", codeStore);\n \n         InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();\n         viewResolver.setPrefix(\"/WEB-INF/jsp\");\n@@ -200,6 +205,9 @@ public void testInstructions() throws Exception {\n \n     @Test\n     public void testResetPasswordPage() throws Exception {\n+        ExpiringCode code = new ExpiringCode(\"code1\", new Timestamp(System.currentTimeMillis()), \"someData\");\n+        when(codeStore.generateCode(anyString(), any(Timestamp.class))).thenReturn(code);\n+        when(codeStore.retrieveCode(anyString())).thenReturn(code);\n         mockMvc.perform(get(\"/reset_password\").param(\"email\", \"user@example.com\").param(\"code\", \"secret_code\"))\n                 .andExpect(status().isOk())\n                 .andExpect(view().name(\"reset_password\"));"
        },
        {
            "sha": "09577ec19c89ecc528851742afc99b487f73cc71",
            "filename": "scim/src/main/java/org/cloudfoundry/identity/uaa/login/UaaResetPasswordService.java",
            "status": "modified",
            "additions": 11,
            "deletions": 10,
            "changes": 21,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/cd31cc397fe17389d95b83d6a9caa46eebc54faf/scim%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FUaaResetPasswordService.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/cd31cc397fe17389d95b83d6a9caa46eebc54faf/scim%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FUaaResetPasswordService.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/scim%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FUaaResetPasswordService.java?ref=cd31cc397fe17389d95b83d6a9caa46eebc54faf",
            "patch": "@@ -70,16 +70,18 @@ private ScimUser changePasswordCodeAuthenticated(String code, String newPassword\n         }\n         String userId;\n         String userName = null;\n+        Date passwordLastModified = null;\n         try {\n             PasswordChange change = JsonUtils.readValue(expiringCode.getData(), PasswordChange.class);\n             userId = change.getUserId();\n             userName = change.getUsername();\n+            passwordLastModified = change.getPasswordModifiedTime();\n         } catch (JsonUtils.JsonUtilException x) {\n             userId = expiringCode.getData();\n         }\n         ScimUser user = scimUserProvisioning.retrieve(userId);\n         try {\n-            if (isUserModified(user, expiringCode.getExpiresAt(), userName)) {\n+            if (isUserModified(user, expiringCode.getExpiresAt(), userName, passwordLastModified)) {\n                 throw new UaaException(\"Invalid password reset request.\");\n             }\n             if (!user.isVerified()) {\n@@ -110,22 +112,21 @@ public ForgotPasswordInfo forgotPassword(String email) {\n             }\n         }\n         ScimUser scimUser = results.get(0);\n-        PasswordChange change = new PasswordChange(scimUser.getId(), scimUser.getUserName());\n+        PasswordChange change = new PasswordChange(scimUser.getId(), scimUser.getUserName(), scimUser.getPasswordLastModified());\n         ExpiringCode code = expiringCodeStore.generateCode(JsonUtils.writeValueAsString(change), new Timestamp(System.currentTimeMillis() + PASSWORD_RESET_LIFETIME));\n         publish(new ResetPasswordRequestEvent(email, code.getCode(), SecurityContextHolder.getContext().getAuthentication()));\n         return new ForgotPasswordInfo(scimUser.getId(), code);\n     }\n \n-    private boolean isUserModified(ScimUser user, Timestamp expiresAt, String userName) {\n+    private boolean isUserModified(ScimUser user, Timestamp expiresAt, String userName, Date passwordLastModified) {\n+        boolean modified = false;\n         if (userName!=null) {\n-            return ! userName.equals(user.getUserName());\n+            modified = ! (userName.equals(user.getUserName()));\n         }\n-        //left over from when all we stored in the code was the user ID\n-        //here we will check the timestamp\n-        //TODO - REMOVE THIS IN FUTURE RELEASE, ALL LINKS HAVE BEEN EXPIRED (except test created ones)\n-        long codeCreated = expiresAt.getTime() - PASSWORD_RESET_LIFETIME;\n-        long userModified = user.getMeta().getLastModified().getTime();\n-        return (userModified > codeCreated);\n+        if (passwordLastModified != null && (!modified)) {\n+            modified = user.getPasswordLastModified().getTime() != passwordLastModified.getTime();\n+        }\n+        return modified;\n     }\n \n     private UaaUser getUaaUser(ScimUser scimUser) {"
        },
        {
            "sha": "7cbf4bae2c60b1d2b9cfd8786567f32bbda5828a",
            "filename": "scim/src/main/java/org/cloudfoundry/identity/uaa/scim/endpoints/PasswordChange.java",
            "status": "modified",
            "additions": 15,
            "deletions": 1,
            "changes": 16,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/cd31cc397fe17389d95b83d6a9caa46eebc54faf/scim%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fendpoints%2FPasswordChange.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/cd31cc397fe17389d95b83d6a9caa46eebc54faf/scim%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fendpoints%2FPasswordChange.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/scim%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fendpoints%2FPasswordChange.java?ref=cd31cc397fe17389d95b83d6a9caa46eebc54faf",
            "patch": "@@ -3,13 +3,16 @@\n import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n import com.fasterxml.jackson.annotation.JsonProperty;\n \n+import java.util.Date;\n+\n @JsonIgnoreProperties(ignoreUnknown = true)\n public class PasswordChange {\n     public PasswordChange() {}\n \n-    public PasswordChange(String userId, String username) {\n+    public PasswordChange(String userId, String username, Date passwordModifiedTime) {\n         this.userId = userId;\n         this.username = username;\n+        this.passwordModifiedTime = passwordModifiedTime;\n     }\n \n     @JsonProperty(\"user_id\")\n@@ -18,6 +21,9 @@ public PasswordChange(String userId, String username) {\n     @JsonProperty(\"username\")\n     private String username;\n \n+    @JsonProperty(\"passwordModifiedTime\")\n+    private Date passwordModifiedTime;\n+\n     public String getUsername() {\n         return username;\n     }\n@@ -33,4 +39,12 @@ public String getUserId() {\n     public void setUserId(String userId) {\n         this.userId = userId;\n     }\n+\n+    public Date getPasswordModifiedTime() {\n+        return passwordModifiedTime;\n+    }\n+\n+    public void setPasswordModifiedTime(Date passwordModifiedTime) {\n+        this.passwordModifiedTime = passwordModifiedTime;\n+    }\n }"
        },
        {
            "sha": "c53260fef89979736edc371c5d5b7a53c0a29e84",
            "filename": "scim/src/main/java/org/cloudfoundry/identity/uaa/scim/jdbc/JdbcScimUserProvisioning.java",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/cd31cc397fe17389d95b83d6a9caa46eebc54faf/scim%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fjdbc%2FJdbcScimUserProvisioning.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/cd31cc397fe17389d95b83d6a9caa46eebc54faf/scim%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fjdbc%2FJdbcScimUserProvisioning.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/scim%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fjdbc%2FJdbcScimUserProvisioning.java?ref=cd31cc397fe17389d95b83d6a9caa46eebc54faf",
            "patch": "@@ -269,7 +269,7 @@ public void changePassword(final String id, String oldPassword, final String new\n         int updated = jdbcTemplate.update(CHANGE_PASSWORD_SQL, new PreparedStatementSetter() {\n             @Override\n             public void setValues(PreparedStatement ps) throws SQLException {\n-                Timestamp t = new Timestamp(new Date().getTime());\n+                Timestamp t = new Timestamp(System.currentTimeMillis());\n                 ps.setTimestamp(1, t);\n                 ps.setString(2, encNewPassword);\n                 ps.setTimestamp(3, getPasswordLastModifiedTimestamp(t));"
        },
        {
            "sha": "e028f8985895d0b451de8e8a4b902f91cc3d822f",
            "filename": "scim/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/PasswordResetEndpointTest.java",
            "status": "modified",
            "additions": 12,
            "deletions": 7,
            "changes": 19,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/cd31cc397fe17389d95b83d6a9caa46eebc54faf/scim%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fendpoints%2FPasswordResetEndpointTest.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/cd31cc397fe17389d95b83d6a9caa46eebc54faf/scim%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fendpoints%2FPasswordResetEndpointTest.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/scim%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fendpoints%2FPasswordResetEndpointTest.java?ref=cd31cc397fe17389d95b83d6a9caa46eebc54faf",
            "patch": "@@ -17,8 +17,8 @@\n import org.cloudfoundry.identity.uaa.codestore.ExpiringCode;\n import org.cloudfoundry.identity.uaa.codestore.ExpiringCodeStore;\n import org.cloudfoundry.identity.uaa.error.ExceptionReportHttpMessageConverter;\n-import org.cloudfoundry.identity.uaa.login.UaaResetPasswordService;\n import org.cloudfoundry.identity.uaa.login.ResetPasswordService;\n+import org.cloudfoundry.identity.uaa.login.UaaResetPasswordService;\n import org.cloudfoundry.identity.uaa.scim.ScimMeta;\n import org.cloudfoundry.identity.uaa.scim.ScimUser;\n import org.cloudfoundry.identity.uaa.scim.ScimUserProvisioning;\n@@ -67,6 +67,7 @@ public class PasswordResetEndpointTest extends TestClassNullifier {\n     private ExpiringCodeStore expiringCodeStore;\n     private PasswordValidator passwordValidator;\n     private ResetPasswordService resetPasswordService;\n+    Date yesterday = new Date(System.currentTimeMillis()-(1000*60*60*24));\n \n     @Before\n     public void setUp() throws Exception {\n@@ -78,23 +79,26 @@ public void setUp() throws Exception {\n         controller.setMessageConverters(new HttpMessageConverter[] { new ExceptionReportHttpMessageConverter() });\n         mockMvc = MockMvcBuilders.standaloneSetup(controller).build();\n \n+        PasswordChange change = new PasswordChange(\"id001\", \"user@example.com\", yesterday);\n+\n         when(expiringCodeStore.generateCode(eq(\"id001\"), any(Timestamp.class)))\n                 .thenReturn(new ExpiringCode(\"secret_code\", new Timestamp(System.currentTimeMillis() + UaaResetPasswordService.PASSWORD_RESET_LIFETIME), \"id001\"));\n \n-        PasswordChange change = new PasswordChange(\"id001\", \"user@example.com\");\n+\n         when(expiringCodeStore.generateCode(eq(JsonUtils.writeValueAsString(change)), any(Timestamp.class)))\n-            .thenReturn(new ExpiringCode(\"secret_code\", new Timestamp(System.currentTimeMillis() + UaaResetPasswordService.PASSWORD_RESET_LIFETIME), \"id001\"));\n+            .thenReturn(new ExpiringCode(\"secret_code\", new Timestamp(System.currentTimeMillis() + UaaResetPasswordService.PASSWORD_RESET_LIFETIME), JsonUtils.writeValueAsString(change)));\n \n-        change = new PasswordChange(\"id001\", \"user\\\"'@example.com\");\n+        change = new PasswordChange(\"id001\", \"user\\\"'@example.com\", yesterday);\n         when(expiringCodeStore.generateCode(eq(JsonUtils.writeValueAsString(change)), any(Timestamp.class)))\n-            .thenReturn(new ExpiringCode(\"secret_code\", new Timestamp(System.currentTimeMillis() + UaaResetPasswordService.PASSWORD_RESET_LIFETIME), \"id001\"));\n+            .thenReturn(new ExpiringCode(\"secret_code\", new Timestamp(System.currentTimeMillis() + UaaResetPasswordService.PASSWORD_RESET_LIFETIME), JsonUtils.writeValueAsString(change)));\n     }\n \n     @Test\n     public void testCreatingAPasswordResetWhenTheUsernameExists() throws Exception {\n         ScimUser user = new ScimUser(\"id001\", \"user@example.com\", null, null);\n-        user.setMeta(new ScimMeta(new Date(System.currentTimeMillis()-(1000*60*60*24)), new Date(System.currentTimeMillis()-(1000*60*60*24)), 0));\n+        user.setMeta(new ScimMeta(yesterday, yesterday, 0));\n         user.addEmail(\"user@example.com\");\n+        user.setPasswordLastModified(yesterday);\n         when(scimUserProvisioning.query(\"userName eq \\\"user@example.com\\\" and origin eq \\\"\" + Origin.UAA + \"\\\"\"))\n                 .thenReturn(Arrays.asList(user));\n \n@@ -148,7 +152,8 @@ public void testCreatingAPasswordResetWhenTheUserHasNonUaaOrigin() throws Except\n     @Test\n     public void testCreatingAPasswordResetWithAUsernameContainingSpecialCharacters() throws Exception {\n         ScimUser user = new ScimUser(\"id001\", \"user\\\"'@example.com\", null, null);\n-        user.setMeta(new ScimMeta(new Date(System.currentTimeMillis()-(1000*60*60*24)), new Date(System.currentTimeMillis()-(1000*60*60*24)), 0));\n+        user.setMeta(new ScimMeta(yesterday, yesterday, 0));\n+        user.setPasswordLastModified(yesterday);\n         user.addEmail(\"user\\\"'@example.com\");\n         when(scimUserProvisioning.query(\"userName eq \\\"user\\\\\\\"'@example.com\\\" and origin eq \\\"\" + Origin.UAA + \"\\\"\"))\n             .thenReturn(Arrays.asList(user));"
        },
        {
            "sha": "85ea43a985a4f60c420160d9863258e04c742252",
            "filename": "uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/ResetPasswordIT.java",
            "status": "modified",
            "additions": 0,
            "deletions": 4,
            "changes": 4,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/cd31cc397fe17389d95b83d6a9caa46eebc54faf/uaa%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fintegration%2Ffeature%2FResetPasswordIT.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/cd31cc397fe17389d95b83d6a9caa46eebc54faf/uaa%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fintegration%2Ffeature%2FResetPasswordIT.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fintegration%2Ffeature%2FResetPasswordIT.java?ref=cd31cc397fe17389d95b83d6a9caa46eebc54faf",
            "patch": "@@ -120,10 +120,6 @@ public void resettingAPassword() throws Exception {\n \n         webDriver.get(link);\n \n-        webDriver.findElement(By.name(\"password\")).sendKeys(\"newsecr3T\");\n-        webDriver.findElement(By.name(\"password_confirmation\")).sendKeys(\"newsecr3T\");\n-        webDriver.findElement(By.xpath(\"//input[@value='Create new password']\")).click();\n-\n         assertThat(webDriver.findElement(By.cssSelector(\".error-message\")).getText(), containsString(\"Sorry, your reset password link is no longer valid. You can request another one below.\"));\n     }\n "
        },
        {
            "sha": "3bafe3495d04d90cf7d653891eeaabdd26ded933",
            "filename": "uaa/src/test/java/org/cloudfoundry/identity/uaa/login/ResetPasswordControllerMockMvcTests.java",
            "status": "modified",
            "additions": 70,
            "deletions": 28,
            "changes": 98,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/cd31cc397fe17389d95b83d6a9caa46eebc54faf/uaa%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FResetPasswordControllerMockMvcTests.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/cd31cc397fe17389d95b83d6a9caa46eebc54faf/uaa%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FResetPasswordControllerMockMvcTests.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FResetPasswordControllerMockMvcTests.java?ref=cd31cc397fe17389d95b83d6a9caa46eebc54faf",
            "patch": "@@ -17,28 +17,35 @@\n import org.cloudfoundry.identity.uaa.codestore.ExpiringCode;\n import org.cloudfoundry.identity.uaa.codestore.ExpiringCodeStore;\n import org.cloudfoundry.identity.uaa.mock.InjectedMockContextTest;\n+import org.cloudfoundry.identity.uaa.mock.util.MockMvcUtils;\n import org.cloudfoundry.identity.uaa.scim.ScimUser;\n import org.cloudfoundry.identity.uaa.scim.ScimUserProvisioning;\n import org.cloudfoundry.identity.uaa.scim.endpoints.PasswordChange;\n import org.cloudfoundry.identity.uaa.util.JsonUtils;\n import org.junit.Before;\n import org.junit.Test;\n+import org.springframework.http.MediaType;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.context.SecurityContext;\n+import org.springframework.security.oauth2.common.util.RandomValueStringGenerator;\n import org.springframework.security.web.context.HttpSessionSecurityContextRepository;\n import org.springframework.test.web.servlet.MvcResult;\n import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;\n \n import java.sql.Timestamp;\n-import java.util.Arrays;\n import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.instanceOf;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl;\n@@ -60,7 +67,7 @@ public void testResettingAPasswordUsingUsernameToEnsureNoModification() throws E\n         List<ScimUser> users = getWebApplicationContext().getBean(ScimUserProvisioning.class).query(\"username eq \\\"marissa\\\"\");\n         assertNotNull(users);\n         assertEquals(1, users.size());\n-        PasswordChange change = new PasswordChange(users.get(0).getId(), users.get(0).getUserName());\n+        PasswordChange change = new PasswordChange(users.get(0).getId(), users.get(0).getUserName(), users.get(0).getPasswordLastModified());\n \n         ExpiringCode code = codeStore.generateCode(JsonUtils.writeValueAsString(change), new Timestamp(System.currentTimeMillis() + UaaResetPasswordService.PASSWORD_RESET_LIFETIME));\n \n@@ -87,9 +94,9 @@ public void testResettingAPasswordFailsWhenUsernameChanged() throws Exception {\n         assertNotNull(users);\n         assertEquals(1, users.size());\n         ScimUser user = users.get(0);\n-        PasswordChange change = new PasswordChange(user.getId(), user.getUserName());\n+        PasswordChange change = new PasswordChange(user.getId(), user.getUserName(), user.getPasswordLastModified());\n \n-        ExpiringCode code = codeStore.generateCode(JsonUtils.writeValueAsString(change), new Timestamp(System.currentTimeMillis()+50000));\n+        ExpiringCode code = codeStore.generateCode(JsonUtils.writeValueAsString(change), new Timestamp(System.currentTimeMillis() + 50000));\n \n         String formerUsername = user.getUserName();\n         user.setUserName(\"newusername\");\n@@ -103,6 +110,60 @@ public void testResettingAPasswordFailsWhenUsernameChanged() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testResettingAPasswordChangesCodeInForm() throws Exception {\n+\n+        String username = new RandomValueStringGenerator().generate() + \"@test.org\";\n+        ScimUser user = new ScimUser(null, username, \"givenname\",\"familyname\");\n+        user.setPrimaryEmail(username);\n+        user.setPassword(\"secret\");\n+        String token = MockMvcUtils.utils().getClientCredentialsOAuthAccessToken(getMockMvc(), \"admin\", \"adminsecret\", null, null);\n+        user = MockMvcUtils.utils().createUser(getMockMvc(), token, user);\n+\n+        PasswordChange change = new PasswordChange(user.getId(), user.getUserName(), user.getPasswordLastModified());\n+\n+        ExpiringCode code = codeStore.generateCode(JsonUtils.writeValueAsString(change), new Timestamp(System.currentTimeMillis() + 50000));\n+\n+        MockHttpServletRequestBuilder get = get(\"/reset_password?code={code}&email={email}\", code.getCode(), user.getPrimaryEmail())\n+            .accept(MediaType.TEXT_HTML);\n+\n+        String content = getMockMvc().perform(get)\n+            .andExpect(status().isOk())\n+            .andReturn().getResponse().getContentAsString();\n+\n+        String pattern = \"\\\\<input type=\\\\\\\"hidden\\\\\\\" name=\\\\\\\"code\\\\\\\" value=\\\\\\\"(.*?)\\\\\\\" \\\\/\\\\>\";\n+        Pattern regexpattern = Pattern.compile(pattern);\n+        Matcher matcher = regexpattern.matcher(content);\n+\n+        assertTrue(matcher.find());\n+        String newCode = matcher.group(1);\n+\n+        assertNotEquals(code.getCode(), newCode);\n+        getMockMvc().perform(createChangePasswordRequest(user, newCode, true, \"secret1\", \"secret1\"))\n+            .andExpect(status().isFound())\n+            .andExpect(redirectedUrl(\"home\"));\n+\n+    }\n+\n+\n+    @Test\n+    public void testResettingAPasswordFailsWhenPasswordChanged() throws Exception {\n+        String username = new RandomValueStringGenerator().generate() + \"@test.org\";\n+        ScimUser user = new ScimUser(null, username, \"givenname\",\"familyname\");\n+        user.setPrimaryEmail(username);\n+        user.setPassword(\"secret\");\n+        String token = MockMvcUtils.utils().getClientCredentialsOAuthAccessToken(getMockMvc(), \"admin\", \"adminsecret\", null, null);\n+        user = MockMvcUtils.utils().createUser(getMockMvc(), token, user);\n+        ScimUserProvisioning userProvisioning = getWebApplicationContext().getBean(ScimUserProvisioning.class);\n+        Thread.sleep(1000 - (System.currentTimeMillis() % 1000) + 10); //because password last modified is second only\n+        PasswordChange change = new PasswordChange(user.getId(), user.getUserName(), user.getPasswordLastModified());\n+        ExpiringCode code = codeStore.generateCode(JsonUtils.writeValueAsString(change), new Timestamp(System.currentTimeMillis() + 50000));\n+\n+        userProvisioning.changePassword(user.getId(), \"secret\", \"secr3t\");\n+        getMockMvc().perform(createChangePasswordRequest(user, code, true))\n+            .andExpect(status().isUnprocessableEntity());\n+    }\n+\n     @Test\n     public void testResettingAPasswordNoCsrfParameter() throws Exception {\n         List<ScimUser> users = getWebApplicationContext().getBean(ScimUserProvisioning.class).query(\"username eq \\\"marissa\\\"\");\n@@ -140,29 +201,6 @@ public void testResettingAPasswordUsingTimestampForUserModification() throws Exc\n         assertThat(principal.getOrigin(), equalTo(Origin.UAA));\n     }\n \n-    @Test\n-    public void testResettingAPasswordUsingTimestampUserModified() throws Exception {\n-        ScimUserProvisioning userProvisioning = getWebApplicationContext().getBean(ScimUserProvisioning.class);\n-        List<ScimUser> users = userProvisioning.query(\"username eq \\\"marissa\\\"\");\n-        assertNotNull(users);\n-        assertEquals(1, users.size());\n-        ScimUser user = users.get(0);\n-        ExpiringCode code = codeStore.generateCode(user.getId(), new Timestamp(System.currentTimeMillis() + UaaResetPasswordService.PASSWORD_RESET_LIFETIME));\n-\n-        MockHttpServletRequestBuilder post = createChangePasswordRequest(user, code, true);\n-\n-        if (Arrays.asList(getWebApplicationContext().getEnvironment().getActiveProfiles()).contains(\"mysql\")) {\n-            Thread.sleep(1050);\n-        } else {\n-            Thread.sleep(50);\n-        }\n-\n-        userProvisioning.update(user.getId(), user);\n-\n-        getMockMvc().perform(post)\n-            .andExpect(status().isUnprocessableEntity());\n-    }\n-\n     @Test\n     public void resetPassword_ReturnsUnprocessableEntity_NewPasswordSameAsOld() throws Exception {\n         ScimUserProvisioning userProvisioning = getWebApplicationContext().getBean(ScimUserProvisioning.class);\n@@ -186,11 +224,15 @@ private MockHttpServletRequestBuilder createChangePasswordRequest(ScimUser user,\n     }\n \n     private MockHttpServletRequestBuilder createChangePasswordRequest(ScimUser user, ExpiringCode code, boolean useCSRF, String password, String passwordConfirmation) throws Exception {\n+        return createChangePasswordRequest(user,code.getCode(),useCSRF, password,passwordConfirmation);\n+    }\n+\n+    private MockHttpServletRequestBuilder createChangePasswordRequest(ScimUser user, String code, boolean useCSRF, String password, String passwordConfirmation) throws Exception {\n         MockHttpServletRequestBuilder post = post(\"/reset_password.do\");\n         if (useCSRF) {\n             post.with(csrf());\n         }\n-        post.param(\"code\", code.getCode())\n+        post.param(\"code\", code)\n             .param(\"email\", user.getPrimaryEmail())\n             .param(\"password\", password)\n             .param(\"password_confirmation\", passwordConfirmation);"
        }
    ]
}