{
    "sha": "5dcc19215827db29c993d0305ee2b0d8dd05939d",
    "node_id": "MDY6Q29tbWl0MTA2Mzc4OTY6NWRjYzE5MjE1ODI3ZGIyOWM5OTNkMDMwNWVlMmIwZDhkZDA1OTM5ZA==",
    "commit": {
        "author": {
            "name": "Matt Sicker",
            "email": "boards@gmail.com",
            "date": "2017-03-11T22:01:46Z"
        },
        "committer": {
            "name": "Matt Sicker",
            "email": "boards@gmail.com",
            "date": "2017-04-02T17:41:20Z"
        },
        "message": "[LOG4J2-1863] Add class filtering to AbstractSocketServer\n\nThis allows a whitelist of class names to be specified to configure\nwhich classes are allowed to be deserialized in both TcpSocketServer and\nUdpSocketServer.",
        "tree": {
            "sha": "49d64e5298d9833120b645a0412cda52c0ab5825",
            "url": "https://api.github.com/repos/apache/logging-log4j2/git/trees/49d64e5298d9833120b645a0412cda52c0ab5825"
        },
        "url": "https://api.github.com/repos/apache/logging-log4j2/git/commits/5dcc19215827db29c993d0305ee2b0d8dd05939d",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/logging-log4j2/commits/5dcc19215827db29c993d0305ee2b0d8dd05939d",
    "html_url": "https://github.com/apache/logging-log4j2/commit/5dcc19215827db29c993d0305ee2b0d8dd05939d",
    "comments_url": "https://api.github.com/repos/apache/logging-log4j2/commits/5dcc19215827db29c993d0305ee2b0d8dd05939d/comments",
    "author": {
        "login": "jvz",
        "id": 791275,
        "node_id": "MDQ6VXNlcjc5MTI3NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/791275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jvz",
        "html_url": "https://github.com/jvz",
        "followers_url": "https://api.github.com/users/jvz/followers",
        "following_url": "https://api.github.com/users/jvz/following{/other_user}",
        "gists_url": "https://api.github.com/users/jvz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jvz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jvz/subscriptions",
        "organizations_url": "https://api.github.com/users/jvz/orgs",
        "repos_url": "https://api.github.com/users/jvz/repos",
        "events_url": "https://api.github.com/users/jvz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jvz/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "jvz",
        "id": 791275,
        "node_id": "MDQ6VXNlcjc5MTI3NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/791275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jvz",
        "html_url": "https://github.com/jvz",
        "followers_url": "https://api.github.com/users/jvz/followers",
        "following_url": "https://api.github.com/users/jvz/following{/other_user}",
        "gists_url": "https://api.github.com/users/jvz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jvz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jvz/subscriptions",
        "organizations_url": "https://api.github.com/users/jvz/orgs",
        "repos_url": "https://api.github.com/users/jvz/repos",
        "events_url": "https://api.github.com/users/jvz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jvz/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "5aff929bb44e63c0dbf0cdc7cfb5d5fbd50660ef",
            "url": "https://api.github.com/repos/apache/logging-log4j2/commits/5aff929bb44e63c0dbf0cdc7cfb5d5fbd50660ef",
            "html_url": "https://github.com/apache/logging-log4j2/commit/5aff929bb44e63c0dbf0cdc7cfb5d5fbd50660ef"
        }
    ],
    "stats": {
        "total": 146,
        "additions": 140,
        "deletions": 6
    },
    "files": [
        {
            "sha": "923d3f4548448f379f153dff936245d8cdcd044d",
            "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/net/server/AbstractSocketServer.java",
            "status": "modified",
            "additions": 13,
            "deletions": 0,
            "changes": 13,
            "blob_url": "https://github.com/apache/logging-log4j2/blob/5dcc19215827db29c993d0305ee2b0d8dd05939d/log4j-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Flogging%2Flog4j%2Fcore%2Fnet%2Fserver%2FAbstractSocketServer.java",
            "raw_url": "https://github.com/apache/logging-log4j2/raw/5dcc19215827db29c993d0305ee2b0d8dd05939d/log4j-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Flogging%2Flog4j%2Fcore%2Fnet%2Fserver%2FAbstractSocketServer.java",
            "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Flogging%2Flog4j%2Fcore%2Fnet%2Fserver%2FAbstractSocketServer.java?ref=5dcc19215827db29c993d0305ee2b0d8dd05939d",
            "patch": "@@ -26,6 +26,8 @@\n import java.net.InetAddress;\n import java.net.URI;\n import java.net.URL;\n+import java.util.Collections;\n+import java.util.List;\n import java.util.Objects;\n \n import com.beust.jcommander.Parameter;\n@@ -70,6 +72,9 @@ protected static class CommandLineArguments extends BasicCommandLineArguments {\n                 \"-a\" }, converter = InetAddressConverter.class, description = \"Server socket local bind address.\")\n         private InetAddress localBindAddress;\n \n+        @Parameter(names = {\"--classes\", \"-C\"}, description = \"Additional classes to allow deserialization\")\n+        private List<String> allowedClasses;\n+\n         String getConfigLocation() {\n             return configLocation;\n         }\n@@ -101,6 +106,14 @@ InetAddress getLocalBindAddress() {\n         void setLocalBindAddress(final InetAddress localBindAddress) {\n             this.localBindAddress = localBindAddress;\n         }\n+\n+        List<String> getAllowedClasses() {\n+            return allowedClasses == null ? Collections.<String>emptyList() : allowedClasses;\n+        }\n+\n+        void setAllowedClasses(final List<String> allowedClasses) {\n+            this.allowedClasses = allowedClasses;\n+        }\n     }\n \n     /**"
        },
        {
            "sha": "a27b1cb4e1db7f938e4b6cfcdb7754e768b07cf1",
            "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/net/server/ObjectInputStreamLogEventBridge.java",
            "status": "modified",
            "additions": 21,
            "deletions": 2,
            "changes": 23,
            "blob_url": "https://github.com/apache/logging-log4j2/blob/5dcc19215827db29c993d0305ee2b0d8dd05939d/log4j-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Flogging%2Flog4j%2Fcore%2Fnet%2Fserver%2FObjectInputStreamLogEventBridge.java",
            "raw_url": "https://github.com/apache/logging-log4j2/raw/5dcc19215827db29c993d0305ee2b0d8dd05939d/log4j-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Flogging%2Flog4j%2Fcore%2Fnet%2Fserver%2FObjectInputStreamLogEventBridge.java",
            "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Flogging%2Flog4j%2Fcore%2Fnet%2Fserver%2FObjectInputStreamLogEventBridge.java?ref=5dcc19215827db29c993d0305ee2b0d8dd05939d",
            "patch": "@@ -19,18 +19,37 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.ObjectInputStream;\n+import java.util.Collections;\n+import java.util.List;\n \n import org.apache.logging.log4j.core.LogEvent;\n import org.apache.logging.log4j.core.LogEventListener;\n+import org.apache.logging.log4j.core.util.FilteredObjectInputStream;\n \n /**\n  * Reads and logs serialized {@link LogEvent} objects from an {@link ObjectInputStream}.\n  */\n public class ObjectInputStreamLogEventBridge extends AbstractLogEventBridge<ObjectInputStream> {\n \n+    private final List<String> allowedClasses;\n+\n+    public ObjectInputStreamLogEventBridge() {\n+        this(Collections.<String>emptyList());\n+    }\n+\n+    /**\n+     * Constructs an ObjectInputStreamLogEventBridge with additional allowed classes to deserialize.\n+     *\n+     * @param allowedClasses class names to also allow for deserialization\n+     * @since 2.8.2\n+     */\n+    public ObjectInputStreamLogEventBridge(final List<String> allowedClasses) {\n+        this.allowedClasses = allowedClasses;\n+    }\n+\n     @Override\n     public void logEvents(final ObjectInputStream inputStream, final LogEventListener logEventListener)\n-            throws IOException {\n+        throws IOException {\n         try {\n             logEventListener.log((LogEvent) inputStream.readObject());\n         } catch (final ClassNotFoundException e) {\n@@ -40,6 +59,6 @@ public void logEvents(final ObjectInputStream inputStream, final LogEventListene\n \n     @Override\n     public ObjectInputStream wrapStream(final InputStream inputStream) throws IOException {\n-        return new ObjectInputStream(inputStream);\n+        return new FilteredObjectInputStream(inputStream, allowedClasses);\n     }\n }"
        },
        {
            "sha": "b5ce211b626a77acab6a654bc1e7d2dda8427539",
            "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/net/server/TcpSocketServer.java",
            "status": "modified",
            "additions": 22,
            "deletions": 3,
            "changes": 25,
            "blob_url": "https://github.com/apache/logging-log4j2/blob/5dcc19215827db29c993d0305ee2b0d8dd05939d/log4j-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Flogging%2Flog4j%2Fcore%2Fnet%2Fserver%2FTcpSocketServer.java",
            "raw_url": "https://github.com/apache/logging-log4j2/raw/5dcc19215827db29c993d0305ee2b0d8dd05939d/log4j-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Flogging%2Flog4j%2Fcore%2Fnet%2Fserver%2FTcpSocketServer.java",
            "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Flogging%2Flog4j%2Fcore%2Fnet%2Fserver%2FTcpSocketServer.java?ref=5dcc19215827db29c993d0305ee2b0d8dd05939d",
            "patch": "@@ -24,6 +24,8 @@\n import java.net.InetAddress;\n import java.net.ServerSocket;\n import java.net.Socket;\n+import java.util.Collections;\n+import java.util.List;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n@@ -148,9 +150,26 @@ public static TcpSocketServer<ObjectInputStream> createSerializedSocketServer(fi\n      */\n     public static TcpSocketServer<ObjectInputStream> createSerializedSocketServer(final int port, final int backlog,\n             final InetAddress localBindAddress) throws IOException {\n+        return createSerializedSocketServer(port, backlog, localBindAddress, Collections.<String>emptyList());\n+    }\n+\n+    /**\n+     * Creates a socket server that reads serialized log events.\n+     *\n+     * @param port the port to listen\n+     * @param localBindAddress The server socket's local bin address\n+     * @param allowedClasses additional class names to allow for deserialization\n+     * @return a new a socket server\n+     * @throws IOException\n+     *         if an I/O error occurs when opening the socket.\n+     * @since 2.8.2\n+     */\n+    public static TcpSocketServer<ObjectInputStream> createSerializedSocketServer(\n+        final int port, final int backlog, final InetAddress localBindAddress, final List<String> allowedClasses\n+    ) throws IOException {\n         LOGGER.entry(port);\n         final TcpSocketServer<ObjectInputStream> socketServer = new TcpSocketServer<>(port, backlog, localBindAddress,\n-                new ObjectInputStreamLogEventBridge());\n+                new ObjectInputStreamLogEventBridge(allowedClasses));\n         return LOGGER.exit(socketServer);\n     }\n \n@@ -185,8 +204,8 @@ public static void main(final String[] args) throws Exception {\n         if (cla.getConfigLocation() != null) {\n             ConfigurationFactory.setConfigurationFactory(new ServerConfigurationFactory(cla.getConfigLocation()));\n         }\n-        final TcpSocketServer<ObjectInputStream> socketServer = TcpSocketServer\n-                .createSerializedSocketServer(cla.getPort(), cla.getBacklog(), cla.getLocalBindAddress());\n+        final TcpSocketServer<ObjectInputStream> socketServer = TcpSocketServer.createSerializedSocketServer(\n+            cla.getPort(), cla.getBacklog(), cla.getLocalBindAddress(), cla.getAllowedClasses());\n         final Thread serverThread = socketServer.startNewThread();\n         if (cla.isInteractive()) {\n             socketServer.awaitTermination(serverThread);"
        },
        {
            "sha": "e761c3bd57baa6c087e80ed1a61ccd59f8594994",
            "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/net/server/UdpSocketServer.java",
            "status": "modified",
            "additions": 17,
            "deletions": 1,
            "changes": 18,
            "blob_url": "https://github.com/apache/logging-log4j2/blob/5dcc19215827db29c993d0305ee2b0d8dd05939d/log4j-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Flogging%2Flog4j%2Fcore%2Fnet%2Fserver%2FUdpSocketServer.java",
            "raw_url": "https://github.com/apache/logging-log4j2/raw/5dcc19215827db29c993d0305ee2b0d8dd05939d/log4j-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Flogging%2Flog4j%2Fcore%2Fnet%2Fserver%2FUdpSocketServer.java",
            "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Flogging%2Flog4j%2Fcore%2Fnet%2Fserver%2FUdpSocketServer.java?ref=5dcc19215827db29c993d0305ee2b0d8dd05939d",
            "patch": "@@ -24,6 +24,7 @@\n import java.io.OptionalDataException;\n import java.net.DatagramPacket;\n import java.net.DatagramSocket;\n+import java.util.List;\n \n import org.apache.logging.log4j.core.config.ConfigurationFactory;\n import org.apache.logging.log4j.core.util.BasicCommandLineArguments;\n@@ -63,6 +64,21 @@ public static UdpSocketServer<ObjectInputStream> createSerializedSocketServer(fi\n         return new UdpSocketServer<>(port, new ObjectInputStreamLogEventBridge());\n     }\n \n+    /**\n+     * Creates a socket server that reads serialized log events.\n+     *\n+     * @param port the port to listen\n+     * @param allowedClasses additional classes to allow for deserialization\n+     * @return a new a socket server\n+     * @throws IOException if an I/O error occurs when opening the socket.\n+     * @since 2.8.2\n+     */\n+    public static UdpSocketServer<ObjectInputStream> createSerializedSocketServer(final int port,\n+                                                                                  final List<String> allowedClasses)\n+        throws IOException {\n+        return new UdpSocketServer<>(port, new ObjectInputStreamLogEventBridge(allowedClasses));\n+    }\n+\n     /**\n      * Creates a socket server that reads XML log events.\n      * \n@@ -93,7 +109,7 @@ public static void main(final String[] args) throws Exception {\n             ConfigurationFactory.setConfigurationFactory(new ServerConfigurationFactory(cla.getConfigLocation()));\n         }\n         final UdpSocketServer<ObjectInputStream> socketServer = UdpSocketServer\n-                .createSerializedSocketServer(cla.getPort());\n+                .createSerializedSocketServer(cla.getPort(), cla.getAllowedClasses());\n         final Thread serverThread = socketServer.startNewThread();\n         if (cla.isInteractive()) {\n             socketServer.awaitTermination(serverThread);"
        },
        {
            "sha": "57cc31cb95f9ba078d5e00df694b0168e564e27e",
            "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/util/FilteredObjectInputStream.java",
            "status": "added",
            "additions": 67,
            "deletions": 0,
            "changes": 67,
            "blob_url": "https://github.com/apache/logging-log4j2/blob/5dcc19215827db29c993d0305ee2b0d8dd05939d/log4j-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Flogging%2Flog4j%2Fcore%2Futil%2FFilteredObjectInputStream.java",
            "raw_url": "https://github.com/apache/logging-log4j2/raw/5dcc19215827db29c993d0305ee2b0d8dd05939d/log4j-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Flogging%2Flog4j%2Fcore%2Futil%2FFilteredObjectInputStream.java",
            "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Flogging%2Flog4j%2Fcore%2Futil%2FFilteredObjectInputStream.java?ref=5dcc19215827db29c993d0305ee2b0d8dd05939d",
            "patch": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j.core.util;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InvalidObjectException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectStreamClass;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Extended ObjectInputStream that only allows certain classes to be deserialized.\n+ *\n+ * @since 2.8.2\n+ */\n+public class FilteredObjectInputStream extends ObjectInputStream {\n+\n+    private static final List<String> REQUIRED_JAVA_CLASSES = Arrays.asList(\n+        // for StandardLevel\n+        \"java.lang.Enum\",\n+        // for location information\n+        \"java.lang.StackTraceElement\",\n+        // for Message delegate\n+        \"java.rmi.MarshalledObject\",\n+        \"[B\"\n+    );\n+\n+    private final Collection<String> allowedClasses;\n+\n+    public FilteredObjectInputStream(final InputStream in, final Collection<String> allowedClasses) throws IOException {\n+        super(in);\n+        this.allowedClasses = allowedClasses;\n+    }\n+\n+    @Override\n+    protected Class<?> resolveClass(final ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n+        String name = desc.getName();\n+        if (!(isAllowedByDefault(name) || allowedClasses.contains(name))) {\n+            throw new InvalidObjectException(\"Class is not allowed for deserialization: \" + name);\n+        }\n+        return super.resolveClass(desc);\n+    }\n+\n+    private static boolean isAllowedByDefault(final String name) {\n+        return name.startsWith(\"org.apache.logging.log4j.\") ||\n+            name.startsWith(\"[Lorg.apache.logging.log4j.\") ||\n+            REQUIRED_JAVA_CLASSES.contains(name);\n+    }\n+\n+}"
        }
    ]
}