{
    "sha": "f2694a8ed93f1f63f87ce45d0bb638478b426acd",
    "node_id": "MDY6Q29tbWl0MTE0ODc1MzpmMjY5NGE4ZWQ5M2YxZjYzZjg3Y2U0NWQwYmI2Mzg0NzhiNDI2YWNk",
    "commit": {
        "author": {
            "name": "Brian Clozel",
            "email": "bclozel@pivotal.io",
            "date": "2018-05-18T08:56:50Z"
        },
        "committer": {
            "name": "Brian Clozel",
            "email": "bclozel@pivotal.io",
            "date": "2018-06-11T17:16:44Z"
        },
        "message": "Restrict HTTP methods on Servlet HiddenHttpMethodFilter\n\nThis commit restricts the allowed HTTP methods on HiddenHttpMethodFilter\n(Servlet variant) to the following: PUT, DELETE, PATCH.\n\nThis filter is meant to be used to simulate those methods from HTML\nforms sent by browsers, so no other methods are allowed.\n\nIssue: SPR-16836\n(Cherry-picked from f64fa3dea1)",
        "tree": {
            "sha": "3dcb281ad7506c84eb28f7f9724dece3e51e7b3f",
            "url": "https://api.github.com/repos/spring-projects/spring-framework/git/trees/3dcb281ad7506c84eb28f7f9724dece3e51e7b3f"
        },
        "url": "https://api.github.com/repos/spring-projects/spring-framework/git/commits/f2694a8ed93f1f63f87ce45d0bb638478b426acd",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f2694a8ed93f1f63f87ce45d0bb638478b426acd",
    "html_url": "https://github.com/spring-projects/spring-framework/commit/f2694a8ed93f1f63f87ce45d0bb638478b426acd",
    "comments_url": "https://api.github.com/repos/spring-projects/spring-framework/commits/f2694a8ed93f1f63f87ce45d0bb638478b426acd/comments",
    "author": {
        "login": "bclozel",
        "id": 103264,
        "node_id": "MDQ6VXNlcjEwMzI2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/103264?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bclozel",
        "html_url": "https://github.com/bclozel",
        "followers_url": "https://api.github.com/users/bclozel/followers",
        "following_url": "https://api.github.com/users/bclozel/following{/other_user}",
        "gists_url": "https://api.github.com/users/bclozel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bclozel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bclozel/subscriptions",
        "organizations_url": "https://api.github.com/users/bclozel/orgs",
        "repos_url": "https://api.github.com/users/bclozel/repos",
        "events_url": "https://api.github.com/users/bclozel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bclozel/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "bclozel",
        "id": 103264,
        "node_id": "MDQ6VXNlcjEwMzI2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/103264?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bclozel",
        "html_url": "https://github.com/bclozel",
        "followers_url": "https://api.github.com/users/bclozel/followers",
        "following_url": "https://api.github.com/users/bclozel/following{/other_user}",
        "gists_url": "https://api.github.com/users/bclozel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bclozel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bclozel/subscriptions",
        "organizations_url": "https://api.github.com/users/bclozel/orgs",
        "repos_url": "https://api.github.com/users/bclozel/repos",
        "events_url": "https://api.github.com/users/bclozel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bclozel/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "82f421bff80535457816bd5cc0c93134e8ed9ed2",
            "url": "https://api.github.com/repos/spring-projects/spring-framework/commits/82f421bff80535457816bd5cc0c93134e8ed9ed2",
            "html_url": "https://github.com/spring-projects/spring-framework/commit/82f421bff80535457816bd5cc0c93134e8ed9ed2"
        }
    ],
    "stats": {
        "total": 57,
        "additions": 38,
        "deletions": 19
    },
    "files": [
        {
            "sha": "6e2834288ad38f85500dbbe28cdaeb548df32ff8",
            "filename": "spring-web/src/main/java/org/springframework/web/filter/HiddenHttpMethodFilter.java",
            "status": "modified",
            "additions": 15,
            "deletions": 3,
            "changes": 18,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/f2694a8ed93f1f63f87ce45d0bb638478b426acd/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Ffilter%2FHiddenHttpMethodFilter.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/f2694a8ed93f1f63f87ce45d0bb638478b426acd/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Ffilter%2FHiddenHttpMethodFilter.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Ffilter%2FHiddenHttpMethodFilter.java?ref=f2694a8ed93f1f63f87ce45d0bb638478b426acd",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -17,13 +17,17 @@\n package org.springframework.web.filter;\n \n import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n import java.util.Locale;\n import javax.servlet.FilterChain;\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletRequestWrapper;\n import javax.servlet.http.HttpServletResponse;\n \n+import org.springframework.http.HttpMethod;\n import org.springframework.util.Assert;\n import org.springframework.util.StringUtils;\n import org.springframework.web.util.WebUtils;\n@@ -35,6 +39,7 @@\n  * is to use a normal POST with an additional hidden form field ({@code _method})\n  * to pass the \"real\" HTTP method along. This filter reads that parameter and changes\n  * the {@link HttpServletRequestWrapper#getMethod()} return value accordingly.\n+ * Only {@code \"PUT\"}, {@code \"DELETE\"} and {@code \"PATCH\"} HTTP methods are allowed.\n  *\n  * <p>The name of the request parameter defaults to {@code _method}, but can be\n  * adapted via the {@link #setMethodParam(String) methodParam} property.\n@@ -50,6 +55,10 @@\n  */\n public class HiddenHttpMethodFilter extends OncePerRequestFilter {\n \n+\tprivate static final List<String> ALLOWED_METHODS =\n+\t\t\tCollections.unmodifiableList(Arrays.asList(HttpMethod.PUT.name(),\n+\t\t\t\t\tHttpMethod.DELETE.name(), HttpMethod.PATCH.name()));\n+\n \t/** Default method parameter: {@code _method} */\n \tpublic static final String DEFAULT_METHOD_PARAM = \"_method\";\n \n@@ -74,7 +83,10 @@ protected void doFilterInternal(HttpServletRequest request, HttpServletResponse\n \t\tif (\"POST\".equals(request.getMethod()) && request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) == null) {\n \t\t\tString paramValue = request.getParameter(this.methodParam);\n \t\t\tif (StringUtils.hasLength(paramValue)) {\n-\t\t\t\trequestToUse = new HttpMethodRequestWrapper(request, paramValue);\n+\t\t\t\tString method = paramValue.toUpperCase(Locale.ENGLISH);\n+\t\t\t\tif (ALLOWED_METHODS.contains(method)) {\n+\t\t\t\t\trequestToUse = new HttpMethodRequestWrapper(request, method);\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \n@@ -92,7 +104,7 @@ private static class HttpMethodRequestWrapper extends HttpServletRequestWrapper\n \n \t\tpublic HttpMethodRequestWrapper(HttpServletRequest request, String method) {\n \t\t\tsuper(request);\n-\t\t\tthis.method = method.toUpperCase(Locale.ENGLISH);\n+\t\t\tthis.method = method;\n \t\t}\n \n \t\t@Override"
        },
        {
            "sha": "d97f291b326d48b38311bc433409215ae3f2bf75",
            "filename": "spring-web/src/test/java/org/springframework/web/filter/HiddenHttpMethodFilterTests.java",
            "status": "modified",
            "additions": 23,
            "deletions": 16,
            "changes": 39,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/f2694a8ed93f1f63f87ce45d0bb638478b426acd/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Ffilter%2FHiddenHttpMethodFilterTests.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/f2694a8ed93f1f63f87ce45d0bb638478b426acd/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Ffilter%2FHiddenHttpMethodFilterTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Ffilter%2FHiddenHttpMethodFilterTests.java?ref=f2694a8ed93f1f63f87ce45d0bb638478b426acd",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2014 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -31,45 +31,52 @@\n import static org.junit.Assert.*;\n \n /**\n+ * Tests for {@link HiddenHttpMethodFilter}.\n+ * \n  * @author Arjen Poutsma\n+ * @author Brian Clozel\n  */\n public class HiddenHttpMethodFilterTests {\n \n \tprivate final HiddenHttpMethodFilter filter = new HiddenHttpMethodFilter();\n \n \t@Test\n \tpublic void filterWithParameter() throws IOException, ServletException {\n-\t\tMockHttpServletRequest request = new MockHttpServletRequest(\"POST\", \"/hotels\");\n-\t\trequest.addParameter(\"_method\", \"delete\");\n-\t\tMockHttpServletResponse response = new MockHttpServletResponse();\n-\n-\t\tFilterChain filterChain = new FilterChain() {\n+\t\tfilterWithParameterForMethod(\"delete\", \"DELETE\");\n+\t\tfilterWithParameterForMethod(\"put\", \"PUT\");\n+\t\tfilterWithParameterForMethod(\"patch\", \"PATCH\");\n+\t}\n \n-\t\t\t@Override\n-\t\t\tpublic void doFilter(ServletRequest filterRequest,\n-\t\t\t\t\tServletResponse filterResponse) throws IOException, ServletException {\n-\t\t\t\tassertEquals(\"Invalid method\", \"DELETE\",\n-\t\t\t\t\t\t((HttpServletRequest) filterRequest).getMethod());\n-\t\t\t}\n-\t\t};\n-\t\tfilter.doFilter(request, response, filterChain);\n+\t@Test\n+\tpublic void filterWithParameterDisallowedMethods() throws IOException, ServletException {\n+\t\tfilterWithParameterForMethod(\"trace\", \"POST\");\n+\t\tfilterWithParameterForMethod(\"head\", \"POST\");\n+\t\tfilterWithParameterForMethod(\"options\", \"POST\");\n \t}\n \n \t@Test\n \tpublic void filterWithNoParameter() throws IOException, ServletException {\n+\t\tfilterWithParameterForMethod(null, \"POST\");\n+\t}\n+\n+\tprivate void filterWithParameterForMethod(String methodParam, String expectedMethod)\n+\t\t\tthrows IOException, ServletException {\n \t\tMockHttpServletRequest request = new MockHttpServletRequest(\"POST\", \"/hotels\");\n+\t\tif(methodParam != null) {\n+\t\t\trequest.addParameter(\"_method\", methodParam);\n+\t\t}\n \t\tMockHttpServletResponse response = new MockHttpServletResponse();\n \n \t\tFilterChain filterChain = new FilterChain() {\n \n \t\t\t@Override\n \t\t\tpublic void doFilter(ServletRequest filterRequest,\n \t\t\t\t\tServletResponse filterResponse) throws IOException, ServletException {\n-\t\t\t\tassertEquals(\"Invalid method\", \"POST\",\n+\t\t\t\tassertEquals(\"Invalid method\", expectedMethod,\n \t\t\t\t\t\t((HttpServletRequest) filterRequest).getMethod());\n \t\t\t}\n \t\t};\n-\t\tfilter.doFilter(request, response, filterChain);\n+\t\tthis.filter.doFilter(request, response, filterChain);\n \t}\n \n }\n\\ No newline at end of file"
        }
    ]
}