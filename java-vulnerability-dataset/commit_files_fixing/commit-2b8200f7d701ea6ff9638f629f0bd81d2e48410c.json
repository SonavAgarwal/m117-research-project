{
    "sha": "2b8200f7d701ea6ff9638f629f0bd81d2e48410c",
    "node_id": "MDY6Q29tbWl0MjA2MzY4OjJiODIwMGY3ZDcwMWVhNmZmOTYzOGY2MjlmMGJkODFkMmU0ODQxMGM=",
    "commit": {
        "author": {
            "name": "Dominik Stadler",
            "email": "centic@apache.org",
            "date": "2018-12-28T19:53:03Z"
        },
        "committer": {
            "name": "Dominik Stadler",
            "email": "centic@apache.org",
            "date": "2018-12-28T19:53:03Z"
        },
        "message": "Bug 61532: Fix setting values/types during formula evaluation for SXSSF\n\ngit-svn-id: https://svn.apache.org/repos/asf/poi/trunk@1849880 13f79535-47bb-0310-9956-ffa450edef68",
        "tree": {
            "sha": "463c123a14691d5f2b5985c38fd267531d749661",
            "url": "https://api.github.com/repos/apache/poi/git/trees/463c123a14691d5f2b5985c38fd267531d749661"
        },
        "url": "https://api.github.com/repos/apache/poi/git/commits/2b8200f7d701ea6ff9638f629f0bd81d2e48410c",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/poi/commits/2b8200f7d701ea6ff9638f629f0bd81d2e48410c",
    "html_url": "https://github.com/apache/poi/commit/2b8200f7d701ea6ff9638f629f0bd81d2e48410c",
    "comments_url": "https://api.github.com/repos/apache/poi/commits/2b8200f7d701ea6ff9638f629f0bd81d2e48410c/comments",
    "author": {
        "login": "centic9",
        "id": 548322,
        "node_id": "MDQ6VXNlcjU0ODMyMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548322?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/centic9",
        "html_url": "https://github.com/centic9",
        "followers_url": "https://api.github.com/users/centic9/followers",
        "following_url": "https://api.github.com/users/centic9/following{/other_user}",
        "gists_url": "https://api.github.com/users/centic9/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/centic9/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/centic9/subscriptions",
        "organizations_url": "https://api.github.com/users/centic9/orgs",
        "repos_url": "https://api.github.com/users/centic9/repos",
        "events_url": "https://api.github.com/users/centic9/events{/privacy}",
        "received_events_url": "https://api.github.com/users/centic9/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "centic9",
        "id": 548322,
        "node_id": "MDQ6VXNlcjU0ODMyMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548322?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/centic9",
        "html_url": "https://github.com/centic9",
        "followers_url": "https://api.github.com/users/centic9/followers",
        "following_url": "https://api.github.com/users/centic9/following{/other_user}",
        "gists_url": "https://api.github.com/users/centic9/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/centic9/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/centic9/subscriptions",
        "organizations_url": "https://api.github.com/users/centic9/orgs",
        "repos_url": "https://api.github.com/users/centic9/repos",
        "events_url": "https://api.github.com/users/centic9/events{/privacy}",
        "received_events_url": "https://api.github.com/users/centic9/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "24b07f12f95926613b7e36d387332ee3ee7bc008",
            "url": "https://api.github.com/repos/apache/poi/commits/24b07f12f95926613b7e36d387332ee3ee7bc008",
            "html_url": "https://github.com/apache/poi/commit/24b07f12f95926613b7e36d387332ee3ee7bc008"
        }
    ],
    "stats": {
        "total": 296,
        "additions": 242,
        "deletions": 54
    },
    "files": [
        {
            "sha": "ed95d88b2146262311789a5fe5805e55ec634a58",
            "filename": "src/ooxml/java/org/apache/poi/xssf/streaming/SXSSFCell.java",
            "status": "modified",
            "additions": 39,
            "deletions": 8,
            "changes": 47,
            "blob_url": "https://github.com/apache/poi/blob/2b8200f7d701ea6ff9638f629f0bd81d2e48410c/src%2Fooxml%2Fjava%2Forg%2Fapache%2Fpoi%2Fxssf%2Fstreaming%2FSXSSFCell.java",
            "raw_url": "https://github.com/apache/poi/raw/2b8200f7d701ea6ff9638f629f0bd81d2e48410c/src%2Fooxml%2Fjava%2Forg%2Fapache%2Fpoi%2Fxssf%2Fstreaming%2FSXSSFCell.java",
            "contents_url": "https://api.github.com/repos/apache/poi/contents/src%2Fooxml%2Fjava%2Forg%2Fapache%2Fpoi%2Fxssf%2Fstreaming%2FSXSSFCell.java?ref=2b8200f7d701ea6ff9638f629f0bd81d2e48410c",
            "patch": "@@ -46,8 +46,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n  * Streaming version of XSSFCell implementing the \"BigGridDemo\" strategy.\n  */\n public class SXSSFCell implements Cell {\n-    private static final POILogger logger = POILogFactory.getLogger(SXSSFCell.class);\n-\n     private final SXSSFRow _row;\n     private Value _value;\n     private CellStyle _style;\n@@ -277,15 +275,19 @@ public void setCellValue(Calendar value) {\n     public void setCellValue(RichTextString value)\n     {\n         XSSFRichTextString xvalue = (XSSFRichTextString)value;\n-        \n+\n         if (xvalue != null && xvalue.getString() != null) {\n             ensureRichTextStringType();\n-            \n+\n             if (xvalue.length() > SpreadsheetVersion.EXCEL2007.getMaxTextLength()) {\n                 throw new IllegalArgumentException(\"The maximum length of cell contents (text) is 32,767 characters\");\n             }\n \n-            ((RichTextValue)_value).setValue(xvalue);\n+            if(_value instanceof RichTextStringFormulaValue) {\n+                ((RichTextStringFormulaValue) _value).setPreEvaluatedValue(xvalue);\n+            } else {\n+                ((RichTextValue) _value).setValue(xvalue);\n+            }\n         } else {\n             setCellType(CellType.BLANK);\n         }\n@@ -312,6 +314,8 @@ public void setCellValue(String value)\n             if(_value.getType()==CellType.FORMULA)\n                 if(_value instanceof NumericFormulaValue) {\n                     ((NumericFormulaValue) _value).setPreEvaluatedValue(Double.parseDouble(value));\n+                } else if(_value instanceof RichTextStringFormulaValue) {\n+                    ((RichTextStringFormulaValue) _value).setPreEvaluatedValue(new XSSFRichTextString(value));\n                 } else {\n                     ((StringFormulaValue) _value).setPreEvaluatedValue(value);\n                 }\n@@ -461,7 +465,11 @@ public String getStringCellValue()\n                 FormulaValue fv=(FormulaValue)_value;\n                 if(fv.getFormulaType()!=CellType.STRING)\n                       throw typeMismatch(CellType.STRING, CellType.FORMULA, false);\n-                return ((StringFormulaValue)_value).getPreEvaluatedValue();\n+                if(_value instanceof RichTextStringFormulaValue) {\n+                    return ((RichTextStringFormulaValue) _value).getPreEvaluatedValue().getString();\n+                } else {\n+                    return ((StringFormulaValue) _value).getPreEvaluatedValue();\n+                }\n             }\n             case STRING:\n             {\n@@ -841,9 +849,15 @@ public String toString() {\n     }\n     /*package*/ void ensureRichTextStringType()\n     {\n-        if(_value.getType()!=CellType.STRING\n-           ||!((StringValue)_value).isRichText())\n+        // don't change cell type for formulas\n+        if(_value.getType() == CellType.FORMULA) {\n+            String formula = ((FormulaValue)_value).getValue();\n+            _value = new RichTextStringFormulaValue();\n+            ((RichTextStringFormulaValue) _value).setValue(formula);\n+        } else if(_value.getType()!=CellType.STRING ||\n+                !((StringValue)_value).isRichText()) {\n             _value = new RichTextValue();\n+        }\n     }\n     /*package*/ void ensureType(CellType type)\n     {\n@@ -1206,6 +1220,23 @@ String getPreEvaluatedValue()\n             return _preEvaluatedValue;\n         }\n     }\n+    static class RichTextStringFormulaValue extends FormulaValue\n+    {\n+        RichTextString _preEvaluatedValue;\n+        @Override\n+        CellType getFormulaType()\n+        {\n+            return CellType.STRING;\n+        }\n+        void setPreEvaluatedValue(RichTextString value)\n+        {\n+            _preEvaluatedValue=value;\n+        }\n+        RichTextString getPreEvaluatedValue()\n+        {\n+            return _preEvaluatedValue;\n+        }\n+    }\n     static class BooleanFormulaValue extends FormulaValue\n     {\n         boolean _preEvaluatedValue;"
        },
        {
            "sha": "30a9c4ec628c02b9ac07781964da703e7ee2a571",
            "filename": "src/ooxml/java/org/apache/poi/xssf/streaming/SheetDataWriter.java",
            "status": "modified",
            "additions": 34,
            "deletions": 1,
            "changes": 35,
            "blob_url": "https://github.com/apache/poi/blob/2b8200f7d701ea6ff9638f629f0bd81d2e48410c/src%2Fooxml%2Fjava%2Forg%2Fapache%2Fpoi%2Fxssf%2Fstreaming%2FSheetDataWriter.java",
            "raw_url": "https://github.com/apache/poi/raw/2b8200f7d701ea6ff9638f629f0bd81d2e48410c/src%2Fooxml%2Fjava%2Forg%2Fapache%2Fpoi%2Fxssf%2Fstreaming%2FSheetDataWriter.java",
            "contents_url": "https://api.github.com/repos/apache/poi/contents/src%2Fooxml%2Fjava%2Forg%2Fapache%2Fpoi%2Fxssf%2Fstreaming%2FSheetDataWriter.java?ref=2b8200f7d701ea6ff9638f629f0bd81d2e48410c",
            "patch": "@@ -262,6 +262,20 @@ public void writeCell(int columnIndex, Cell cell) throws IOException {\n                 break;\n             }\n             case FORMULA: {\n+                switch(cell.getCachedFormulaResultType()) {\n+                    case NUMERIC:\n+                        writeAttribute(\"t\", \"n\");\n+                        break;\n+                    case STRING:\n+                        writeAttribute(\"t\", STCellType.S.toString());\n+                        break;\n+                    case BOOLEAN:\n+                        writeAttribute(\"t\", \"b\");\n+                        break;\n+                    case ERROR:\n+                        writeAttribute(\"t\", \"e\");\n+                        break;\n+                }\n                 _out.write(\"><f>\");\n                 outputQuotedString(cell.getCellFormula());\n                 _out.write(\"</f>\");\n@@ -274,8 +288,27 @@ public void writeCell(int columnIndex, Cell cell) throws IOException {\n                             _out.write(\"</v>\");\n                         }\n                         break;\n-                    default:\n+                    case STRING:\n+                        String value = cell.getStringCellValue();\n+                        if(value != null && !value.isEmpty()) {\n+                            _out.write(\"<v>\");\n+                            _out.write(value);\n+                            _out.write(\"</v>\");\n+                        }\n+                        break;\n+                    case BOOLEAN:\n+                        _out.write(\"><v>\");\n+                        _out.write(cell.getBooleanCellValue() ? \"1\" : \"0\");\n+                        _out.write(\"</v>\");\n                         break;\n+                    case ERROR: {\n+                        FormulaError error = FormulaError.forInt(cell.getErrorCellValue());\n+\n+                        _out.write(\"><v>\");\n+                        _out.write(error.getString());\n+                        _out.write(\"</v>\");\n+                        break;\n+                    }\n                 }\n                 break;\n             }"
        },
        {
            "sha": "e8f05ccd499144c33ce7a2cf3c128125e068e071",
            "filename": "src/ooxml/testcases/org/apache/poi/xssf/streaming/TestSXSSFFormulaEvaluation.java",
            "status": "modified",
            "additions": 7,
            "deletions": 4,
            "changes": 11,
            "blob_url": "https://github.com/apache/poi/blob/2b8200f7d701ea6ff9638f629f0bd81d2e48410c/src%2Fooxml%2Ftestcases%2Forg%2Fapache%2Fpoi%2Fxssf%2Fstreaming%2FTestSXSSFFormulaEvaluation.java",
            "raw_url": "https://github.com/apache/poi/raw/2b8200f7d701ea6ff9638f629f0bd81d2e48410c/src%2Fooxml%2Ftestcases%2Forg%2Fapache%2Fpoi%2Fxssf%2Fstreaming%2FTestSXSSFFormulaEvaluation.java",
            "contents_url": "https://api.github.com/repos/apache/poi/contents/src%2Fooxml%2Ftestcases%2Forg%2Fapache%2Fpoi%2Fxssf%2Fstreaming%2FTestSXSSFFormulaEvaluation.java?ref=2b8200f7d701ea6ff9638f629f0bd81d2e48410c",
            "patch": "@@ -20,6 +20,7 @@\n package org.apache.poi.xssf.streaming;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.fail;\n \n import java.io.IOException;\n@@ -101,14 +102,14 @@ public void testEvaluateRefOutsideWindowFails() throws IOException {\n         SXSSFSheet s = wb.createSheet();\n         \n         s.createRow(0).createCell(0).setCellFormula(\"1+2\");\n-        assertEquals(false, s.areAllRowsFlushed());\n+        assertFalse(s.areAllRowsFlushed());\n         assertEquals(-1, s.getLastFlushedRowNum());\n         \n         for (int i=1; i<=19; i++) { s.createRow(i); }\n         Cell c = s.createRow(20).createCell(0);\n         c.setCellFormula(\"A1+100\");\n-        \n-        assertEquals(false, s.areAllRowsFlushed());\n+\n+        assertFalse(s.areAllRowsFlushed());\n         assertEquals(15, s.getLastFlushedRowNum());\n         \n         FormulaEvaluator eval = wb.getCreationHelper().createFormulaEvaluator();\n@@ -184,8 +185,10 @@ public void testEvaluateSimple() throws IOException {\n         \n         wb.close();\n     }\n+\n     @Test\n-    public void testUpdateCachedFormulaResultFromErrorToNumber_bug46479() throws IOException {\n+    public void testUpdateCachedFormulaResultFromErrorToNumber_bug46479() {\n+        //noinspection ConstantConditions\n         Assume.assumeTrue(\"This test is disabled because it fails for SXSSF because \" +\n                         \"handling of errors in formulas is slightly different than in XSSF, \" +\n                         \"but this proved to be non-trivial to solve...\","
        },
        {
            "sha": "77e3ef80b5334cd739029b222e7da1840353ccf5",
            "filename": "src/testcases/org/apache/poi/ss/usermodel/BaseTestBugzillaIssues.java",
            "status": "modified",
            "additions": 37,
            "deletions": 26,
            "changes": 63,
            "blob_url": "https://github.com/apache/poi/blob/2b8200f7d701ea6ff9638f629f0bd81d2e48410c/src%2Ftestcases%2Forg%2Fapache%2Fpoi%2Fss%2Fusermodel%2FBaseTestBugzillaIssues.java",
            "raw_url": "https://github.com/apache/poi/raw/2b8200f7d701ea6ff9638f629f0bd81d2e48410c/src%2Ftestcases%2Forg%2Fapache%2Fpoi%2Fss%2Fusermodel%2FBaseTestBugzillaIssues.java",
            "contents_url": "https://api.github.com/repos/apache/poi/contents/src%2Ftestcases%2Forg%2Fapache%2Fpoi%2Fss%2Fusermodel%2FBaseTestBugzillaIssues.java?ref=2b8200f7d701ea6ff9638f629f0bd81d2e48410c",
            "patch": "@@ -393,7 +393,7 @@ public final void bug50681_testAutoSize() throws IOException {\n         cell0.setCellValue(longValue);\n \n         // autoSize will fail if required fonts are not installed, skip this test then\n-        Font font = wb.getFontAt(cell0.getCellStyle().getFontIndex());\n+        Font font = wb.getFontAt(cell0.getCellStyle().getFontIndexAsInt());\n         Assume.assumeTrue(\"Cannot verify autoSizeColumn() because the necessary Fonts are not installed on this machine: \" + font,\n                 SheetUtil.canComputeColumnWidth(font));\n \n@@ -745,79 +745,79 @@ public void stackoverflow26437323() throws IOException {\n         // First up, check that TRUE and ISLOGICAL both behave\n         cf.setCellFormula(\"TRUE()\");\n         cf = evaluateCell(wb, cf);\n-        assertEquals(true, cf.getBooleanCellValue());\n+        assertTrue(cf.getBooleanCellValue());\n \n         cf.setCellFormula(\"ISLOGICAL(TRUE())\");\n         cf = evaluateCell(wb, cf);\n-        assertEquals(true, cf.getBooleanCellValue());\n+        assertTrue(cf.getBooleanCellValue());\n \n         cf.setCellFormula(\"ISLOGICAL(4)\");\n         cf = evaluateCell(wb, cf);\n-        assertEquals(false, cf.getBooleanCellValue());\n+        assertFalse(cf.getBooleanCellValue());\n \n \n         // Now, check ISNUMBER / ISTEXT / ISNONTEXT\n         cf.setCellFormula(\"ISNUMBER(A1)\");\n         cf = evaluateCell(wb, cf);\n-        assertEquals(true, cf.getBooleanCellValue());\n+        assertTrue(cf.getBooleanCellValue());\n \n         cf.setCellFormula(\"ISNUMBER(B1)\");\n         cf = evaluateCell(wb, cf);\n-        assertEquals(false, cf.getBooleanCellValue());\n+        assertFalse(cf.getBooleanCellValue());\n \n         cf.setCellFormula(\"ISNUMBER(C1)\");\n         cf = evaluateCell(wb, cf);\n-        assertEquals(false, cf.getBooleanCellValue());\n+        assertFalse(cf.getBooleanCellValue());\n \n         cf.setCellFormula(\"ISNUMBER(D1)\");\n         cf = evaluateCell(wb, cf);\n-        assertEquals(false, cf.getBooleanCellValue());\n+        assertFalse(cf.getBooleanCellValue());\n \n         cf.setCellFormula(\"ISNUMBER(E1)\");\n         cf = evaluateCell(wb, cf);\n-        assertEquals(false, cf.getBooleanCellValue());\n+        assertFalse(cf.getBooleanCellValue());\n \n \n         cf.setCellFormula(\"ISTEXT(A1)\");\n         cf = evaluateCell(wb, cf);\n-        assertEquals(false, cf.getBooleanCellValue());\n+        assertFalse(cf.getBooleanCellValue());\n \n         cf.setCellFormula(\"ISTEXT(B1)\");\n         cf = evaluateCell(wb, cf);\n-        assertEquals(true, cf.getBooleanCellValue());\n+        assertTrue(cf.getBooleanCellValue());\n \n         cf.setCellFormula(\"ISTEXT(C1)\");\n         cf = evaluateCell(wb, cf);\n-        assertEquals(true, cf.getBooleanCellValue());\n+        assertTrue(cf.getBooleanCellValue());\n \n         cf.setCellFormula(\"ISTEXT(D1)\");\n         cf = evaluateCell(wb, cf);\n-        assertEquals(false, cf.getBooleanCellValue());\n+        assertFalse(cf.getBooleanCellValue());\n \n         cf.setCellFormula(\"ISTEXT(E1)\");\n         cf = evaluateCell(wb, cf);\n-        assertEquals(false, cf.getBooleanCellValue());\n+        assertFalse(cf.getBooleanCellValue());\n \n \n         cf.setCellFormula(\"ISNONTEXT(A1)\");\n         cf = evaluateCell(wb, cf);\n-        assertEquals(true, cf.getBooleanCellValue());\n+        assertTrue(cf.getBooleanCellValue());\n \n         cf.setCellFormula(\"ISNONTEXT(B1)\");\n         cf = evaluateCell(wb, cf);\n-        assertEquals(false, cf.getBooleanCellValue());\n+        assertFalse(cf.getBooleanCellValue());\n \n         cf.setCellFormula(\"ISNONTEXT(C1)\");\n         cf = evaluateCell(wb, cf);\n-        assertEquals(false, cf.getBooleanCellValue());\n+        assertFalse(cf.getBooleanCellValue());\n \n         cf.setCellFormula(\"ISNONTEXT(D1)\");\n         cf = evaluateCell(wb, cf);\n-        assertEquals(true, cf.getBooleanCellValue());\n+        assertTrue(cf.getBooleanCellValue());\n \n         cf.setCellFormula(\"ISNONTEXT(E1)\");\n         cf = evaluateCell(wb, cf);\n-        assertEquals(true, cf.getBooleanCellValue()); // Blank and Null the same\n+        assertTrue(cf.getBooleanCellValue()); // Blank and Null the same\n \n \n         // Next up, SEARCH on its own\n@@ -841,23 +841,23 @@ public void stackoverflow26437323() throws IOException {\n         // Finally, bring it all together\n         cf.setCellFormula(\"ISNUMBER(SEARCH(\\\"am\\\", A1))\");\n         cf = evaluateCell(wb, cf);\n-        assertEquals(false, cf.getBooleanCellValue());\n+        assertFalse(cf.getBooleanCellValue());\n \n         cf.setCellFormula(\"ISNUMBER(SEARCH(\\\"am\\\", B1))\");\n         cf = evaluateCell(wb, cf);\n-        assertEquals(true, cf.getBooleanCellValue());\n+        assertTrue(cf.getBooleanCellValue());\n \n         cf.setCellFormula(\"ISNUMBER(SEARCH(\\\"am\\\", C1))\");\n         cf = evaluateCell(wb, cf);\n-        assertEquals(false, cf.getBooleanCellValue());\n+        assertFalse(cf.getBooleanCellValue());\n \n         cf.setCellFormula(\"ISNUMBER(SEARCH(\\\"am\\\", D1))\");\n         cf = evaluateCell(wb, cf);\n-        assertEquals(false, cf.getBooleanCellValue());\n+        assertFalse(cf.getBooleanCellValue());\n \n         cf.setCellFormula(\"ISNUMBER(SEARCH(\\\"am\\\", E1))\");\n         cf = evaluateCell(wb, cf);\n-        assertEquals(false, cf.getBooleanCellValue());\n+        assertFalse(cf.getBooleanCellValue());\n \n         wb.close();\n     }\n@@ -1230,8 +1230,7 @@ public void test58113() throws IOException {\n         cell.setCellValue(\"somevalue\");\n \n         value = cell.getStringCellValue();\n-        assertTrue(\"can set value afterwards: \" + value,\n-                value.equals(\"somevalue\"));\n+        assertEquals(\"can set value afterwards: \" + value, \"somevalue\", value);\n \n         // verify that the null-value is actually set even if there was some value in the cell before\n         cell.setCellValue((String)null);\n@@ -1282,18 +1281,30 @@ public void bug55747() throws IOException {\n         // Check read ok, and re-evaluate fine\n         cell = row.getCell(5);\n         assertEquals(\"ab\", cell.getStringCellValue());\n+        assertEquals(CellType.FORMULA, cell.getCellType());\n+        assertEquals(\"IF(A1<>\\\"\\\",MID(A1,1,2),\\\" \\\")\", cell.getCellFormula());\n         ev.evaluateFormulaCell(cell);\n         assertEquals(\"ab\", cell.getStringCellValue());\n+        assertEquals(CellType.FORMULA, cell.getCellType());\n+        assertEquals(\"IF(A1<>\\\"\\\",MID(A1,1,2),\\\" \\\")\", cell.getCellFormula());\n \n         cell = row.getCell(6);\n         assertEquals(\"empty\", cell.getStringCellValue());\n+        assertEquals(CellType.FORMULA, cell.getCellType());\n+        assertEquals(\"IF(B1<>\\\"\\\",MID(A1,1,2),\\\"empty\\\")\", cell.getCellFormula());\n         ev.evaluateFormulaCell(cell);\n         assertEquals(\"empty\", cell.getStringCellValue());\n+        assertEquals(CellType.FORMULA, cell.getCellType());\n+        assertEquals(\"IF(B1<>\\\"\\\",MID(A1,1,2),\\\"empty\\\")\", cell.getCellFormula());\n \n         cell = row.getCell(7);\n         assertEquals(\"ab\", cell.getStringCellValue());\n+        assertEquals(CellType.FORMULA, cell.getCellType());\n+        assertEquals(\"IF(A1<>\\\"\\\",IF(C1<>\\\"\\\",MID(A1,1,2),\\\"c1\\\"),\\\"c2\\\")\", cell.getCellFormula());\n         ev.evaluateFormulaCell(cell);\n         assertEquals(\"ab\", cell.getStringCellValue());\n+        assertEquals(CellType.FORMULA, cell.getCellType());\n+        assertEquals(\"IF(A1<>\\\"\\\",IF(C1<>\\\"\\\",MID(A1,1,2),\\\"c1\\\"),\\\"c2\\\")\", cell.getCellFormula());\n         wb2.close();\n     }\n "
        },
        {
            "sha": "3228bbd0a199c3be977eafd194fc7d94cf4b1b64",
            "filename": "src/testcases/org/apache/poi/ss/usermodel/BaseTestCell.java",
            "status": "modified",
            "additions": 51,
            "deletions": 15,
            "changes": 66,
            "blob_url": "https://github.com/apache/poi/blob/2b8200f7d701ea6ff9638f629f0bd81d2e48410c/src%2Ftestcases%2Forg%2Fapache%2Fpoi%2Fss%2Fusermodel%2FBaseTestCell.java",
            "raw_url": "https://github.com/apache/poi/raw/2b8200f7d701ea6ff9638f629f0bd81d2e48410c/src%2Ftestcases%2Forg%2Fapache%2Fpoi%2Fss%2Fusermodel%2FBaseTestCell.java",
            "contents_url": "https://api.github.com/repos/apache/poi/contents/src%2Ftestcases%2Forg%2Fapache%2Fpoi%2Fss%2Fusermodel%2FBaseTestCell.java?ref=2b8200f7d701ea6ff9638f629f0bd81d2e48410c",
            "patch": "@@ -27,6 +27,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n \n import java.io.IOException;\n import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.Locale;\n+import java.util.TimeZone;\n \n import org.apache.poi.common.usermodel.HyperlinkType;\n import org.apache.poi.hssf.usermodel.HSSFWorkbook;\n@@ -66,10 +70,10 @@ public void testSetValues() throws Exception {\n                 CellType.FORMULA, CellType.ERROR);\n \n         cell.setCellValue(false);\n-        assertEquals(false, cell.getBooleanCellValue());\n+        assertFalse(cell.getBooleanCellValue());\n         assertEquals(CellType.BOOLEAN, cell.getCellType());\n         cell.setCellValue(true);\n-        assertEquals(true, cell.getBooleanCellValue());\n+        assertTrue(cell.getBooleanCellValue());\n         assertProhibitedValueAccess(cell, CellType.NUMERIC, CellType.STRING,\n                 CellType.FORMULA, CellType.ERROR);\n \n@@ -156,14 +160,14 @@ public void testBool() throws IOException {\n         assertEquals(0, c.getRowIndex());\n         assertEquals(1, c.getColumnIndex());\n         c.setCellValue(true);\n-        assertEquals(\"B1 value\", true, c.getBooleanCellValue());\n+        assertTrue(\"B1 value\", c.getBooleanCellValue());\n \n         // C1\n         c=r.createCell(2);\n         assertEquals(0, c.getRowIndex());\n         assertEquals(2, c.getColumnIndex());\n         c.setCellValue(false);\n-        assertEquals(\"C1 value\", false, c.getBooleanCellValue());\n+        assertFalse(\"C1 value\", c.getBooleanCellValue());\n \n         // Make sure values are saved and re-read correctly.\n         Workbook wb2 = _testDataProvider.writeOutAndReadBack(wb1);\n@@ -177,13 +181,13 @@ public void testBool() throws IOException {\n         assertEquals(0, c.getRowIndex());\n         assertEquals(1, c.getColumnIndex());\n         assertEquals(CellType.BOOLEAN, c.getCellType());\n-        assertEquals(\"B1 value\", true, c.getBooleanCellValue());\n+        assertTrue(\"B1 value\", c.getBooleanCellValue());\n         \n         c = r.getCell(2);\n         assertEquals(0, c.getRowIndex());\n         assertEquals(2, c.getColumnIndex());\n         assertEquals(CellType.BOOLEAN, c.getCellType());\n-        assertEquals(\"C1 value\", false, c.getBooleanCellValue());\n+        assertFalse(\"C1 value\", c.getBooleanCellValue());\n         \n         wb2.close();\n     }\n@@ -276,7 +280,7 @@ public void testFormulaStyle() throws Exception {\n         cs = c.getCellStyle();\n \n         assertNotNull(\"Formula Cell Style\", cs);\n-        assertEquals(\"Font Index Matches\", f.getIndexAsInt(), cs.getFontIndex());\n+        assertEquals(\"Font Index Matches\", f.getIndexAsInt(), cs.getFontIndexAsInt());\n         assertEquals(\"Top Border\", BorderStyle.THIN, cs.getBorderTop());\n         assertEquals(\"Left Border\", BorderStyle.THIN, cs.getBorderLeft());\n         assertEquals(\"Right Border\", BorderStyle.THIN, cs.getBorderRight());\n@@ -301,7 +305,7 @@ public void testToString() throws Exception {\n \n         // create date-formatted cell\n         Calendar c = LocaleUtil.getLocaleCalendar();\n-        c.set(2010, 01, 02, 00, 00, 00);\n+        c.set(2010, Calendar.FEBRUARY, 2, 0, 0, 0);\n         r.createCell(7).setCellValue(c);\n         CellStyle dateStyle = wb1.createCellStyle();\n         short formatId = wb1.getCreationHelper().createDataFormat().getFormat(\"m/d/yy h:mm\"); // any date format will do\n@@ -426,15 +430,15 @@ public void testChangeTypeStringToBool() throws IOException {\n         cell.setCellType(CellType.BOOLEAN);\n \n         assertEquals(CellType.BOOLEAN, cell.getCellType());\n-        assertEquals(true, cell.getBooleanCellValue());\n+        assertTrue(cell.getBooleanCellValue());\n         cell.setCellType(CellType.STRING);\n         assertEquals(\"TRUE\", cell.getRichStringCellValue().getString());\n \n         // 'false' text to bool and back\n         cell.setCellValue(\"FALSE\");\n         cell.setCellType(CellType.BOOLEAN);\n         assertEquals(CellType.BOOLEAN, cell.getCellType());\n-        assertEquals(false, cell.getBooleanCellValue());\n+        assertFalse(cell.getBooleanCellValue());\n         cell.setCellType(CellType.STRING);\n         assertEquals(\"FALSE\", cell.getRichStringCellValue().getString());\n         \n@@ -479,7 +483,7 @@ public void testChangeTypeErrorToBoolean() throws IOException {\n         cell.setCellErrorValue(FormulaError.NAME.getCode());\n         cell.setCellValue(true);\n         // Identify bug 46479c\n-        assertEquals(true, cell.getBooleanCellValue());\n+        assertTrue(cell.getBooleanCellValue());\n         \n         wb.close();\n     }\n@@ -541,7 +545,7 @@ public void testSetTypeStringOnFormulaCell() throws IOException {\n         fe.clearAllCachedResultValues();\n         fe.evaluateFormulaCell(cellA1);\n         confirmCannotReadString(cellA1);\n-        assertEquals(true, cellA1.getBooleanCellValue());\n+        assertTrue(cellA1.getBooleanCellValue());\n         cellA1.setCellType(CellType.STRING);\n         assertEquals(\"TRUE\", cellA1.getStringCellValue());\n \n@@ -572,7 +576,7 @@ public void testChangeTypeFormulaToBoolean() throws IOException {\n         cell.setCellValue(true);\n         cell.setCellType(CellType.BOOLEAN);\n         assertTrue(\"Identified bug 46479d\", cell.getBooleanCellValue());\n-        assertEquals(true, cell.getBooleanCellValue());\n+        assertTrue(cell.getBooleanCellValue());\n         \n         wb.close();\n     }\n@@ -626,7 +630,9 @@ public void testSetStringInFormulaCell_bug44606() throws Exception {\n         Workbook wb = _testDataProvider.createWorkbook();\n         Cell cell = wb.createSheet(\"Sheet1\").createRow(0).createCell(0);\n         cell.setCellFormula(\"B1&C1\");\n+        assertEquals(CellType.FORMULA, cell.getCellType());\n         cell.setCellValue(wb.getCreationHelper().createRichTextString(\"hello\"));\n+        assertEquals(CellType.FORMULA, cell.getCellType());\n         wb.close();\n     }\n \n@@ -714,10 +720,10 @@ public void testDefaultStyleProperties() throws Exception {\n         assertTrue(style.getLocked());\n         assertFalse(style.getHidden());\n         assertEquals(0, style.getIndention());\n-        assertEquals(0, style.getFontIndex());\n+        assertEquals(0, style.getFontIndexAsInt());\n         assertEquals(HorizontalAlignment.GENERAL, style.getAlignment());\n         assertEquals(0, style.getDataFormat());\n-        assertEquals(false, style.getWrapText());\n+        assertFalse(style.getWrapText());\n \n         CellStyle style2 = wb1.createCellStyle();\n         assertTrue(style2.getLocked());\n@@ -1054,4 +1060,34 @@ public void testSetErrorValue() throws Exception {\n             assertNull(cell.getHyperlink());\n         }\n     }\n+\n+    @Test\n+    public void testFormulaSetValueDoesNotChangeType() throws IOException {\n+        try (Workbook wb = _testDataProvider.createWorkbook()) {\n+            Sheet sheet = wb.createSheet();\n+            Row row = sheet.createRow(0);\n+            Cell cell = row.createCell(0);\n+            cell.setCellFormula(\"SQRT(-1)\");\n+\n+            assertEquals(CellType.FORMULA, cell.getCellType());\n+\n+            cell.setCellValue(new Date());\n+            assertEquals(CellType.FORMULA, cell.getCellType());\n+\n+            cell.setCellValue(GregorianCalendar.getInstance(TimeZone.getTimeZone(\"UTC\"), Locale.ROOT));\n+            assertEquals(CellType.FORMULA, cell.getCellType());\n+\n+            cell.setCellValue(1.0);\n+            assertEquals(CellType.FORMULA, cell.getCellType());\n+\n+            cell.setCellValue(\"test\");\n+            assertEquals(CellType.FORMULA, cell.getCellType());\n+\n+            cell.setCellValue(wb.getCreationHelper().createRichTextString(\"test\"));\n+            assertEquals(CellType.FORMULA, cell.getCellType());\n+\n+            cell.setCellValue(false);\n+            assertEquals(CellType.FORMULA, cell.getCellType());\n+        }\n+    }\n }"
        },
        {
            "sha": "309da9472ce810b42fa951e752f07a951faa72b7",
            "filename": "src/testcases/org/apache/poi/ss/usermodel/BaseTestFormulaEvaluator.java",
            "status": "modified",
            "additions": 74,
            "deletions": 0,
            "changes": 74,
            "blob_url": "https://github.com/apache/poi/blob/2b8200f7d701ea6ff9638f629f0bd81d2e48410c/src%2Ftestcases%2Forg%2Fapache%2Fpoi%2Fss%2Fusermodel%2FBaseTestFormulaEvaluator.java",
            "raw_url": "https://github.com/apache/poi/raw/2b8200f7d701ea6ff9638f629f0bd81d2e48410c/src%2Ftestcases%2Forg%2Fapache%2Fpoi%2Fss%2Fusermodel%2FBaseTestFormulaEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/poi/contents/src%2Ftestcases%2Forg%2Fapache%2Fpoi%2Fss%2Fusermodel%2FBaseTestFormulaEvaluator.java?ref=2b8200f7d701ea6ff9638f629f0bd81d2e48410c",
            "patch": "@@ -18,8 +18,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n package org.apache.poi.ss.usermodel;\n \n import java.io.IOException;\n+import java.util.Locale;\n \n import org.apache.poi.ss.ITestDataProvider;\n+import org.apache.poi.ss.SpreadsheetVersion;\n+import org.apache.poi.ss.util.CellRangeAddressList;\n import org.junit.Test;\n \n import static org.junit.Assert.*;\n@@ -624,4 +627,75 @@ public void testBug61532() throws IOException {\n             assertEquals(3.0, cell.getNumericCellValue(), 0.01);\n         }\n     }\n+\n+    @Test\n+    public void testFormulaEvaluatorEvaluateSimpleFormulaCell() throws Exception {\n+        try (Workbook wb = _testDataProvider.createWorkbook()) {\n+            final Row row = wb.createSheet().createRow(0);\n+            final Cell a1 = row.createCell(0, CellType.NUMERIC);\n+            a1.setCellValue(1.0);\n+            final Cell a2 = row.createCell(1, CellType.NUMERIC);\n+            a2.setCellValue(2.0);\n+            final Cell a3 = row.createCell(2, CellType.FORMULA);\n+            final String formula = \"SUM(A1:B1)\";\n+            a3.setCellFormula(formula);\n+            FormulaEvaluator evaluator = wb.getCreationHelper().createFormulaEvaluator();\n+            CellType resultType = evaluator.evaluateFormulaCell(a3);\n+            assertEquals(CellType.NUMERIC, resultType);\n+\n+            double result = a3.getNumericCellValue();\n+            // result is correct\n+            assertTrue(String.format(Locale.ROOT, \"Expected %f to be greater than %f\", result, 2.0), result > 2.0);\n+            assertTrue(String.format(Locale.ROOT, \"Expected %f to be less than %f\", result, 4.0), result < 4.0);\n+\n+            // ensure that this works for SUM\n+            assertEquals(CellType.FORMULA, a3.getCellType());\n+            assertEquals(formula, a3.getCellFormula());\n+        }\n+    }\n+\n+    @Test\n+    public void testFormulaEvaluatorEvaluateVlookupFormulaCell() throws Exception {\n+        try (Workbook wb = _testDataProvider.createWorkbook()) {\n+            final Sheet mainSheet = wb.createSheet(\"main\");\n+            final Sheet otherSheet = wb.createSheet(\"other\");\n+            final Row otherRow1 = otherSheet.createRow(0);\n+            final Cell label1 = otherRow1.createCell(0, CellType.STRING);\n+            label1.setCellValue(\"Thing One\");\n+            final Cell id1 = otherRow1.createCell(1, CellType.STRING);\n+            id1.setCellValue(\"1\");\n+            final Row otherRow2 = otherSheet.createRow(1);\n+            final Cell label2 = otherRow2.createCell(0, CellType.STRING);\n+            label2.setCellValue(\"Thing Two\");\n+            final Cell id2 = otherRow2.createCell(1, CellType.STRING);\n+            id2.setCellValue(\"2\");\n+            final DataValidationHelper dvHelper = mainSheet.getDataValidationHelper();\n+            final int maxRows = SpreadsheetVersion.EXCEL2007.getMaxRows() - 1;\n+            final CellRangeAddressList addressList = new CellRangeAddressList(0, maxRows, 0, 0);\n+            final String constraint = \"'other'!$A:$A\";\n+            final DataValidationConstraint dvConstraint = dvHelper.createFormulaListConstraint(constraint);\n+            final DataValidation dataValidation = dvHelper.createValidation(dvConstraint, addressList);\n+            dataValidation.setShowErrorBox(true);\n+            mainSheet.addValidationData(dataValidation);\n+            wb.setSheetHidden(wb.getSheetIndex(otherSheet), true);\n+            final Row row = mainSheet.createRow(0);\n+            final Cell a1 = row.createCell(0, CellType.STRING);\n+            a1.setCellValue(\"Thing Two\");\n+            final Cell a2 = row.createCell(1, CellType.FORMULA);\n+            final String formula = \"VLOOKUP(A1,other!A:B,2,FALSE)\";\n+            a2.setCellFormula(formula);\n+\n+            FormulaEvaluator evaluator = wb.getCreationHelper().createFormulaEvaluator();\n+            CellType resultType = evaluator.evaluateFormulaCell(a2);\n+            assertEquals(CellType.STRING, resultType);\n+\n+            // result is correct\n+            String result = a2.getStringCellValue();\n+            assertEquals(\"2\", result);\n+\n+            // ensure that this works for vlookup as well\n+            assertEquals(CellType.FORMULA, a2.getCellType());\n+            assertEquals(formula, a2.getCellFormula());\n+        }\n+    }\n }"
        }
    ]
}