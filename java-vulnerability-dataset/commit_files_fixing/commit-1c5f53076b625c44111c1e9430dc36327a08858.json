{
    "sha": "1c5f53076b625c44111c1e9430dc36327a088583",
    "node_id": "MDY6Q29tbWl0NTA3Nzc1OjFjNWY1MzA3NmI2MjVjNDQxMTFjMWU5NDMwZGMzNjMyN2EwODg1ODM=",
    "commit": {
        "author": {
            "name": "Yang Wang",
            "email": "yang.wang@elastic.co",
            "date": "2020-03-17T22:48:44Z"
        },
        "committer": {
            "name": "GitHub",
            "email": "noreply@github.com",
            "date": "2020-03-17T22:48:44Z"
        },
        "message": "Explicitly require that derived API keys have no privileges (#53647) (#53650)\n\n* Explicitly require that derived API keys have no privileges (#53647)\r\n\r\nThe current implicit behaviour is that when an API keys is used to create another API key,\r\nthe child key is created without any privilege. This implicit behaviour is surprising and is\r\na source of confusion for users.\r\n\r\nThis change makes that behaviour explicit.",
        "tree": {
            "sha": "d11bb70bec5c34bb008565ba8111946e9274bfb3",
            "url": "https://api.github.com/repos/elastic/elasticsearch/git/trees/d11bb70bec5c34bb008565ba8111946e9274bfb3"
        },
        "url": "https://api.github.com/repos/elastic/elasticsearch/git/commits/1c5f53076b625c44111c1e9430dc36327a088583",
        "comment_count": 0,
        "verification": {
            "verified": true,
            "reason": "valid",
            "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJecVPMCRBK7hj4Ov3rIwAAdHIIAF1op5qz8JfdC7QTitzZtEVc\n/lYvnetcDzOZ/iFIBF31UMrnOywr+beDqOFsbRZYfiPqLWSJvRdwMvAoF5IKhedI\nB+0lsp9ObSqCFbD6xZh0+Twz3ip0nclExBG0WJLp76of2pLYsijcUL5xlgjPlR+y\n7cHZtI2mtqkPkTcScC7HDqN4cM1zP7XV2xPune4mg8lsnzPxbEytrU+4gSc4sVhQ\nyEMAXGDARrCxB4hXgsNVmZ+znb3TivmeRn3IR4pbvgWhiOCYiANGqwzAP9U5Dy99\n335cQXJc2NAxt7/EJmDJIp3MaHYyTZMQ+gqEjrrHjGEPvseie8+N+t9rQWN6dv0=\n=+xaS\n-----END PGP SIGNATURE-----\n",
            "payload": "tree d11bb70bec5c34bb008565ba8111946e9274bfb3\nparent 17d968dc3b8e0b47e1cf032334e9758fc0987b68\nauthor Yang Wang <yang.wang@elastic.co> 1584485324 +1100\ncommitter GitHub <noreply@github.com> 1584485324 +1100\n\nExplicitly require that derived API keys have no privileges (#53647) (#53650)\n\n* Explicitly require that derived API keys have no privileges (#53647)\r\n\r\nThe current implicit behaviour is that when an API keys is used to create another API key,\r\nthe child key is created without any privilege. This implicit behaviour is surprising and is\r\na source of confusion for users.\r\n\r\nThis change makes that behaviour explicit.",
            "verified_at": "2024-01-16T19:59:59Z"
        }
    },
    "url": "https://api.github.com/repos/elastic/elasticsearch/commits/1c5f53076b625c44111c1e9430dc36327a088583",
    "html_url": "https://github.com/elastic/elasticsearch/commit/1c5f53076b625c44111c1e9430dc36327a088583",
    "comments_url": "https://api.github.com/repos/elastic/elasticsearch/commits/1c5f53076b625c44111c1e9430dc36327a088583/comments",
    "author": {
        "login": "ywangd",
        "id": 2344308,
        "node_id": "MDQ6VXNlcjIzNDQzMDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2344308?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ywangd",
        "html_url": "https://github.com/ywangd",
        "followers_url": "https://api.github.com/users/ywangd/followers",
        "following_url": "https://api.github.com/users/ywangd/following{/other_user}",
        "gists_url": "https://api.github.com/users/ywangd/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ywangd/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ywangd/subscriptions",
        "organizations_url": "https://api.github.com/users/ywangd/orgs",
        "repos_url": "https://api.github.com/users/ywangd/repos",
        "events_url": "https://api.github.com/users/ywangd/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ywangd/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "17d968dc3b8e0b47e1cf032334e9758fc0987b68",
            "url": "https://api.github.com/repos/elastic/elasticsearch/commits/17d968dc3b8e0b47e1cf032334e9758fc0987b68",
            "html_url": "https://github.com/elastic/elasticsearch/commit/17d968dc3b8e0b47e1cf032334e9758fc0987b68"
        }
    ],
    "stats": {
        "total": 153,
        "additions": 153,
        "deletions": 0
    },
    "files": [
        {
            "sha": "f852560c561a389d557e52f770dc8d7a3316c2a2",
            "filename": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/RoleDescriptor.java",
            "status": "modified",
            "additions": 9,
            "deletions": 0,
            "changes": 9,
            "blob_url": "https://github.com/elastic/elasticsearch/blob/1c5f53076b625c44111c1e9430dc36327a088583/x-pack%2Fplugin%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fcore%2Fsecurity%2Fauthz%2FRoleDescriptor.java",
            "raw_url": "https://github.com/elastic/elasticsearch/raw/1c5f53076b625c44111c1e9430dc36327a088583/x-pack%2Fplugin%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fcore%2Fsecurity%2Fauthz%2FRoleDescriptor.java",
            "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fplugin%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fcore%2Fsecurity%2Fauthz%2FRoleDescriptor.java?ref=1c5f53076b625c44111c1e9430dc36327a088583",
            "patch": "@@ -216,6 +216,15 @@ public int hashCode() {\n         return result;\n     }\n \n+    public boolean isEmpty() {\n+        return clusterPrivileges.length == 0\n+            && conditionalClusterPrivileges.length == 0\n+            && indicesPrivileges.length == 0\n+            && applicationPrivileges.length == 0\n+            && runAs.length == 0\n+            && metadata.size() == 0;\n+    }\n+\n     @Override\n     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n         return toXContent(builder, params, false);"
        },
        {
            "sha": "643f35de209bc9620b92221134d7d38eb5d14795",
            "filename": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/TransportCreateApiKeyAction.java",
            "status": "modified",
            "additions": 12,
            "deletions": 0,
            "changes": 12,
            "blob_url": "https://github.com/elastic/elasticsearch/blob/1c5f53076b625c44111c1e9430dc36327a088583/x-pack%2Fplugin%2Fsecurity%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Faction%2FTransportCreateApiKeyAction.java",
            "raw_url": "https://github.com/elastic/elasticsearch/raw/1c5f53076b625c44111c1e9430dc36327a088583/x-pack%2Fplugin%2Fsecurity%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Faction%2FTransportCreateApiKeyAction.java",
            "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fplugin%2Fsecurity%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Faction%2FTransportCreateApiKeyAction.java?ref=1c5f53076b625c44111c1e9430dc36327a088583",
            "patch": "@@ -19,6 +19,7 @@\n import org.elasticsearch.xpack.core.security.action.CreateApiKeyRequest;\n import org.elasticsearch.xpack.core.security.action.CreateApiKeyResponse;\n import org.elasticsearch.xpack.core.security.authc.Authentication;\n+import org.elasticsearch.xpack.core.security.authz.RoleDescriptor;\n import org.elasticsearch.xpack.security.authc.ApiKeyService;\n import org.elasticsearch.xpack.security.authz.store.CompositeRolesStore;\n \n@@ -51,9 +52,20 @@ protected void doExecute(CreateApiKeyRequest request, ActionListener<CreateApiKe\n         if (authentication == null) {\n             listener.onFailure(new IllegalStateException(\"authentication is required\"));\n         } else {\n+            if (Authentication.AuthenticationType.API_KEY == authentication.getAuthenticationType() && grantsAnyPrivileges(request)) {\n+                listener.onFailure(new IllegalArgumentException(\n+                    \"creating derived api keys requires an explicit role descriptor that is empty (has no privileges)\"));\n+                return;\n+            }\n             rolesStore.getRoleDescriptors(new HashSet<>(Arrays.asList(authentication.getUser().roles())),\n                 ActionListener.wrap(roleDescriptors -> apiKeyService.createApiKey(authentication, request, roleDescriptors, listener),\n                     listener::onFailure));\n         }\n     }\n+\n+    private boolean grantsAnyPrivileges(CreateApiKeyRequest request) {\n+        return request.getRoleDescriptors() == null\n+            || request.getRoleDescriptors().isEmpty()\n+            || false == request.getRoleDescriptors().stream().allMatch(RoleDescriptor::isEmpty);\n+    }\n }"
        },
        {
            "sha": "112f3faea4af2b52d3f26a533643eccbac5d5d84",
            "filename": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java",
            "status": "modified",
            "additions": 79,
            "deletions": 0,
            "changes": 79,
            "blob_url": "https://github.com/elastic/elasticsearch/blob/1c5f53076b625c44111c1e9430dc36327a088583/x-pack%2Fplugin%2Fsecurity%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Fauthc%2FApiKeyIntegTests.java",
            "raw_url": "https://github.com/elastic/elasticsearch/raw/1c5f53076b625c44111c1e9430dc36327a088583/x-pack%2Fplugin%2Fsecurity%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Fauthc%2FApiKeyIntegTests.java",
            "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fplugin%2Fsecurity%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Fauthc%2FApiKeyIntegTests.java?ref=1c5f53076b625c44111c1e9430dc36327a088583",
            "patch": "@@ -11,6 +11,8 @@\n import org.elasticsearch.ElasticsearchSecurityException;\n import org.elasticsearch.action.DocWriteResponse;\n import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;\n+import org.elasticsearch.action.admin.indices.refresh.RefreshAction;\n+import org.elasticsearch.action.admin.indices.refresh.RefreshRequestBuilder;\n import org.elasticsearch.action.admin.indices.refresh.RefreshResponse;\n import org.elasticsearch.action.support.PlainActionFuture;\n import org.elasticsearch.action.support.WriteRequest;\n@@ -52,6 +54,7 @@\n import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n \n+import static org.elasticsearch.xpack.core.security.index.RestrictedIndicesNames.SECURITY_INDEX_NAME;\n import static org.hamcrest.Matchers.containsInAnyOrder;\n import static org.hamcrest.Matchers.containsString;\n import static org.hamcrest.Matchers.equalTo;\n@@ -518,6 +521,82 @@ public void testGetApiKeysForApiKeyName() throws InterruptedException, Execution\n         verifyGetResponse(1, responses, response, Collections.singleton(responses.get(0).getId()), null);\n     }\n \n+    public void testDerivedKeys() throws ExecutionException, InterruptedException {\n+        final Client client = client().filterWithHeader(Collections.singletonMap(\"Authorization\",\n+            UsernamePasswordToken.basicAuthHeaderValue(SecuritySettingsSource.TEST_SUPERUSER,\n+                SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING)));\n+\n+        final CreateApiKeyResponse response = new SecurityClient(client)\n+            .prepareCreateApiKey()\n+            .setName(\"key-1\")\n+            .setRoleDescriptors(Collections.singletonList(\n+                new RoleDescriptor(\"role\", new String[] { \"manage_security\" }, null, null)))\n+            .get();\n+\n+        assertEquals(\"key-1\", response.getName());\n+        assertNotNull(response.getId());\n+        assertNotNull(response.getKey());\n+\n+        // use the first ApiKey for authorized action\n+        final String base64ApiKeyKeyValue = Base64.getEncoder().encodeToString(\n+            (response.getId() + \":\" + response.getKey().toString()).getBytes(StandardCharsets.UTF_8));\n+        final SecurityClient clientKey1 = new SecurityClient(\n+            client().filterWithHeader(Collections.singletonMap(\"Authorization\", \"ApiKey \" + base64ApiKeyKeyValue)));\n+\n+        final String expectedMessage = \"creating derived api keys requires an explicit role descriptor that is empty\";\n+\n+        final IllegalArgumentException e1 = expectThrows(IllegalArgumentException.class,\n+            () -> clientKey1.prepareCreateApiKey().setName(\"key-2\").get());\n+        assertThat(e1.getMessage(), containsString(expectedMessage));\n+\n+        final IllegalArgumentException e2 = expectThrows(IllegalArgumentException.class,\n+            () -> clientKey1.prepareCreateApiKey().setName(\"key-3\")\n+                .setRoleDescriptors(Collections.emptyList()).get());\n+        assertThat(e2.getMessage(), containsString(expectedMessage));\n+\n+        final IllegalArgumentException e3 = expectThrows(IllegalArgumentException.class,\n+            () -> clientKey1.prepareCreateApiKey().setName(\"key-4\")\n+                .setRoleDescriptors(Collections.singletonList(\n+                    new RoleDescriptor(\"role\", new String[] {\"manage_security\"}, null, null)\n+                )).get());\n+        assertThat(e3.getMessage(), containsString(expectedMessage));\n+\n+        final List<RoleDescriptor> roleDescriptors = new ArrayList<>();\n+        for (int i = 0; i < randomIntBetween(2, 10); i++) {\n+            roleDescriptors.add(new RoleDescriptor(\"role\", null, null, null));\n+        }\n+        roleDescriptors.set(randomInt(roleDescriptors.size() - 1),\n+            new RoleDescriptor(\"role\", new String[] {\"manage_security\"}, null, null));\n+\n+        final IllegalArgumentException e4 = expectThrows(IllegalArgumentException.class,\n+            () -> clientKey1.prepareCreateApiKey().setName(\"key-5\")\n+                .setRoleDescriptors(roleDescriptors).get());\n+        assertThat(e4.getMessage(), containsString(expectedMessage));\n+\n+        final CreateApiKeyResponse key100Response = clientKey1.prepareCreateApiKey().setName(\"key-100\")\n+            .setRoleDescriptors(Collections.singletonList(\n+                new RoleDescriptor(\"role\", null, null, null)\n+            )).get();\n+        assertEquals(\"key-100\", key100Response.getName());\n+        assertNotNull(key100Response.getId());\n+        assertNotNull(key100Response.getKey());\n+\n+        // Check at the end to allow sometime for the operation to happen. Since an erroneous creation is\n+        // asynchronous so that the document is not available immediately.\n+        assertApiKeyNotCreated(client,\"key-2\");\n+        assertApiKeyNotCreated(client,\"key-3\");\n+        assertApiKeyNotCreated(client,\"key-4\");\n+        assertApiKeyNotCreated(client,\"key-5\");\n+    }\n+\n+    private void assertApiKeyNotCreated(Client client, String keyName) throws ExecutionException, InterruptedException {\n+        new RefreshRequestBuilder(client, RefreshAction.INSTANCE).setIndices(SECURITY_INDEX_NAME).execute().get();\n+        PlainActionFuture<GetApiKeyResponse> getApiKeyResponseListener = new PlainActionFuture<>();\n+        new SecurityClient(client).getApiKey(\n+            GetApiKeyRequest.usingApiKeyName(keyName), getApiKeyResponseListener);\n+        assertEquals(0, getApiKeyResponseListener.get().getApiKeyInfos().length);\n+    }\n+\n     private void verifyGetResponse(int noOfApiKeys, List<CreateApiKeyResponse> responses, GetApiKeyResponse response,\n                                    Set<String> validApiKeyIds,\n                                    List<String> invalidatedApiKeyIds) {"
        },
        {
            "sha": "27ffdca6f937aa14a3ae47bf51f128635655a2c9",
            "filename": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authz/RoleDescriptorTests.java",
            "status": "modified",
            "additions": 53,
            "deletions": 0,
            "changes": 53,
            "blob_url": "https://github.com/elastic/elasticsearch/blob/1c5f53076b625c44111c1e9430dc36327a088583/x-pack%2Fplugin%2Fsecurity%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Fauthz%2FRoleDescriptorTests.java",
            "raw_url": "https://github.com/elastic/elasticsearch/raw/1c5f53076b625c44111c1e9430dc36327a088583/x-pack%2Fplugin%2Fsecurity%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Fauthz%2FRoleDescriptorTests.java",
            "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fplugin%2Fsecurity%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Fauthz%2FRoleDescriptorTests.java?ref=1c5f53076b625c44111c1e9430dc36327a088583",
            "patch": "@@ -27,7 +27,9 @@\n \n import java.util.Arrays;\n import java.util.Collections;\n+import java.util.HashMap;\n import java.util.LinkedHashSet;\n+import java.util.List;\n import java.util.Map;\n \n import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;\n@@ -277,4 +279,55 @@ public void testParseIgnoresTransientMetadata() throws Exception {\n         assertEquals(1, parsed.getTransientMetadata().size());\n         assertEquals(true, parsed.getTransientMetadata().get(\"enabled\"));\n     }\n+\n+    public void testIsEmpty() {\n+        assertTrue(new RoleDescriptor(\n+            randomAlphaOfLengthBetween(1, 10), null, null, null, null, null, null, null)\n+            .isEmpty());\n+\n+        assertTrue(new RoleDescriptor(\n+            randomAlphaOfLengthBetween(1, 10),\n+            new String[0],\n+            new RoleDescriptor.IndicesPrivileges[0],\n+            new RoleDescriptor.ApplicationResourcePrivileges[0],\n+            new ConditionalClusterPrivileges.ManageApplicationPrivileges[0],\n+            new String[0],\n+            new HashMap<>(),\n+            new HashMap<>())\n+            .isEmpty());\n+\n+        final List<Boolean> booleans = Arrays.asList(\n+            randomBoolean(),\n+            randomBoolean(),\n+            randomBoolean(),\n+            randomBoolean(),\n+            randomBoolean(),\n+            randomBoolean());\n+\n+        final RoleDescriptor roleDescriptor = new RoleDescriptor(\n+            randomAlphaOfLengthBetween(1, 10),\n+            booleans.get(0) ? new String[0] : new String[] { \"foo\" },\n+            booleans.get(1) ?\n+                new RoleDescriptor.IndicesPrivileges[0] :\n+                new RoleDescriptor.IndicesPrivileges[] {\n+                    RoleDescriptor.IndicesPrivileges.builder().indices(\"idx\").privileges(\"foo\").build() },\n+            booleans.get(2) ?\n+                new RoleDescriptor.ApplicationResourcePrivileges[0] :\n+                new RoleDescriptor.ApplicationResourcePrivileges[] {\n+                    RoleDescriptor.ApplicationResourcePrivileges.builder()\n+                        .application(\"app\").privileges(\"foo\").resources(\"res\").build() },\n+            booleans.get(3) ?\n+                new ConditionalClusterPrivileges.ManageApplicationPrivileges[0] :\n+                new ConditionalClusterPrivileges.ManageApplicationPrivileges[] {\n+                    new ConditionalClusterPrivileges.ManageApplicationPrivileges(Collections.singleton(\"foo\")) },\n+            booleans.get(4) ? new String[0] : new String[] { \"foo\" },\n+            booleans.get(5) ? new HashMap<>() : Collections.singletonMap(\"foo\", \"bar\"),\n+            Collections.singletonMap(\"foo\", \"bar\"));\n+\n+        if (booleans.stream().anyMatch(e -> e.equals(false))) {\n+            assertFalse(roleDescriptor.isEmpty());\n+        } else {\n+            assertTrue(roleDescriptor.isEmpty());\n+        }\n+    }\n }"
        }
    ]
}