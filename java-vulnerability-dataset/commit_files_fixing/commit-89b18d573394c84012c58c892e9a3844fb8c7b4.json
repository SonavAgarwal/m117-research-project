{
    "sha": "89b18d573394c84012c58c892e9a3844fb8c7b40",
    "node_id": "MDY6Q29tbWl0MTA3Mjg0NTo4OWIxOGQ1NzMzOTRjODQwMTJjNThjODkyZTlhMzg0NGZiOGM3YjQw",
    "commit": {
        "author": {
            "name": "Jens Schauder",
            "email": "jschauder@pivotal.io",
            "date": "2019-03-28T16:27:11Z"
        },
        "committer": {
            "name": "Oliver Drotbohm",
            "email": "ogierke@pivotal.io",
            "date": "2019-04-01T09:40:29Z"
        },
        "message": "DATAJPA-1519 - Made the escapeCharacter itself available in SpEL expression.\n\nAdapted documentation to reflect the changed API for escaping.",
        "tree": {
            "sha": "e1b37e043511b125cf9f7f550c5d29d61baa5332",
            "url": "https://api.github.com/repos/spring-projects/spring-data-jpa/git/trees/e1b37e043511b125cf9f7f550c5d29d61baa5332"
        },
        "url": "https://api.github.com/repos/spring-projects/spring-data-jpa/git/commits/89b18d573394c84012c58c892e9a3844fb8c7b40",
        "comment_count": 0,
        "verification": {
            "verified": true,
            "reason": "valid",
            "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3SOwfGzOVQk6tElQbkK1eHVD9pAFAlyh3I0ACgkQbkK1eHVD\n9pC6BQ//QEcNqGpJ7YAh9o1apI8UBmt3mjNciIyBG+CsTn6Hy7Kfp1CFJM+hgacN\njZ+sctxyLgabklXIUZBRJavLBqb2uqDf0x3OfoOzeRvO8MZ4QlmGUZkKXrWXK8IQ\ntqWWcJG/pf/uwY4foOPPVJhIPiLlr2TdwsRQivMhvrPHClssdS9eVyHTYBCXam2O\nLbBnLY6dTPJdBRouKS2X+cqflIrVPJb9uFwKFtNxIYoYVsJcDE6p2dZ5c2VR+77L\n+I8BMpCF+lyZGL/eQ/ADpw6/nAziU2suEkzvuKuMQIZGAoEz+JeOxZ9z/UM2LJDq\n/wjIO9rDZ6AkqnXgRZ+jA8gAi2MBOpAniKHtOnxH/1XnRHi0pRah7+i+ywXsFEMb\nGI2W25eFhMedFtNisZfzW46FjAIxtK5CJxYPrjaQ/d5FINtpdiPAPUJpCkiUg4Ba\nCJKvKHqJQKuq1Evenawk/PbHjwVR/5yRdKP0yEHyH1zHblWDLstgC9wnY6upKITI\nxelnaVnGksWn/M4AnJ9ZW5uW1m0dSuG3qOVBxcs6mgeac3kW1xwnXqtCzqaZbNjV\nMUH9mYANrPjTAozsSg6xIZelYBrg6zA59ARU816h4TNECGWrQdJ08uXCvy85TzMc\nNuLuHEZG+45fMqSdrkvP539CXZyTyXWUzmoi8PvrlG4bJdBbnKg=\n=dP0x\n-----END PGP SIGNATURE-----",
            "payload": "tree e1b37e043511b125cf9f7f550c5d29d61baa5332\nparent c47a5d09a1123ca8e77f832f8335e227b820b3fc\nauthor Jens Schauder <jschauder@pivotal.io> 1553790431 +0100\ncommitter Oliver Drotbohm <ogierke@pivotal.io> 1554111629 +0200\n\nDATAJPA-1519 - Made the escapeCharacter itself available in SpEL expression.\n\nAdapted documentation to reflect the changed API for escaping.\n",
            "verified_at": "2024-11-20T21:34:45Z"
        }
    },
    "url": "https://api.github.com/repos/spring-projects/spring-data-jpa/commits/89b18d573394c84012c58c892e9a3844fb8c7b40",
    "html_url": "https://github.com/spring-projects/spring-data-jpa/commit/89b18d573394c84012c58c892e9a3844fb8c7b40",
    "comments_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/commits/89b18d573394c84012c58c892e9a3844fb8c7b40/comments",
    "author": {
        "login": "schauder",
        "id": 136683,
        "node_id": "MDQ6VXNlcjEzNjY4Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/136683?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/schauder",
        "html_url": "https://github.com/schauder",
        "followers_url": "https://api.github.com/users/schauder/followers",
        "following_url": "https://api.github.com/users/schauder/following{/other_user}",
        "gists_url": "https://api.github.com/users/schauder/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/schauder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/schauder/subscriptions",
        "organizations_url": "https://api.github.com/users/schauder/orgs",
        "repos_url": "https://api.github.com/users/schauder/repos",
        "events_url": "https://api.github.com/users/schauder/events{/privacy}",
        "received_events_url": "https://api.github.com/users/schauder/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "odrotbohm",
        "id": 128577,
        "node_id": "MDQ6VXNlcjEyODU3Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/128577?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/odrotbohm",
        "html_url": "https://github.com/odrotbohm",
        "followers_url": "https://api.github.com/users/odrotbohm/followers",
        "following_url": "https://api.github.com/users/odrotbohm/following{/other_user}",
        "gists_url": "https://api.github.com/users/odrotbohm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/odrotbohm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/odrotbohm/subscriptions",
        "organizations_url": "https://api.github.com/users/odrotbohm/orgs",
        "repos_url": "https://api.github.com/users/odrotbohm/repos",
        "events_url": "https://api.github.com/users/odrotbohm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/odrotbohm/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "c47a5d09a1123ca8e77f832f8335e227b820b3fc",
            "url": "https://api.github.com/repos/spring-projects/spring-data-jpa/commits/c47a5d09a1123ca8e77f832f8335e227b820b3fc",
            "html_url": "https://github.com/spring-projects/spring-data-jpa/commit/c47a5d09a1123ca8e77f832f8335e227b820b3fc"
        }
    ],
    "stats": {
        "total": 48,
        "additions": 29,
        "deletions": 19
    },
    "files": [
        {
            "sha": "225fb165ae4733b4036ae444612e23db0a6b557b",
            "filename": "src/main/asciidoc/jpa.adoc",
            "status": "modified",
            "additions": 5,
            "deletions": 3,
            "changes": 8,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/89b18d573394c84012c58c892e9a3844fb8c7b40/src%2Fmain%2Fasciidoc%2Fjpa.adoc",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/89b18d573394c84012c58c892e9a3844fb8c7b40/src%2Fmain%2Fasciidoc%2Fjpa.adoc",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Fmain%2Fasciidoc%2Fjpa.adoc?ref=89b18d573394c84012c58c892e9a3844fb8c7b40",
            "patch": "@@ -126,6 +126,7 @@ The JPA module supports defining a query manually as a String or having it being\n Derived queries with the predicates `IsStartingWith`, `StartingWith`, `StartsWith`, IsEndingWith\", `EndingWith`, `EndsWith`,\n `IsNotContaining`, `NotContaining`, `NotContains`, `IsContaining`, `Containing`, `Contains` the respective arguments for these queries will get sanitized.\n This means if the arguments actually contain characters recognized by `LIKE` as wildcards these will get escaped so they match only as literals.\n+The escape character used can be configured by setting the `escapeCharacter` of the `@EnableJpaRepositories` annotation.\n Compare with <<jpa.query.spel-expressions>>.\n \n ==== Declared Queries\n@@ -459,7 +460,7 @@ List<User> findByLastnameWithSpelExpression(@Param(\"lastname\") String lastname);\n ====\n \n When using `like`-conditions with values that are coming from a not secure source the values should be sanitized so they can't contain any wildcards and thereby allow attackers to select more data than they should be able to.\n-For this purpose the the `escape(String, String)` method is made available in the SpEL context.\n+For this purpose the the `escape(String)` method is made available in the SpEL context.\n It prefixes all instances of `_` and `%` in the first argument with the single character from the second argument.\n In combination with the `escape` clause of the `like` expression available in JPQL and standard SQL this allows easy cleaning of bind parameters.\n \n@@ -468,13 +469,14 @@ In combination with the `escape` clause of the `like` expression available in JP\n ====\n [source, java]\n ----\n-@Query(\"select u from User u where u.firstname like %?#{#escape([0],'#')}% escape '#'\")\n+@Query(\"select u from User u where u.firstname like %?#{escape([0])}% escape ?#{escapeCharacter()}\")\n List<User> findContainingEscaped(String namePart);\n ----\n ====\n \n Given this method declaration in an repository interface `findContainingEscaped(\"Peter_\")\" will find `Peter_Parker` but not `Peter Parker`.\n-Note that the method `escape(String, String)` available in the SpEL context will only escape the SQL and JPQL standard wildcards `_` and `%`.\n+The escape character used can be configured by setting the `escapeCharacter` of the `@EnableJpaRepositories` annotation.\n+Note that the method `escape(String)` available in the SpEL context will only escape the SQL and JPQL standard wildcards `_` and `%`.\n If the underlying database or the JPA implementation supports additional wildcards these will not get escaped.\n \n [[jpa.modifying-queries]]"
        },
        {
            "sha": "752a94679926698b928123938bce8073dcdd3b81",
            "filename": "src/main/java/org/springframework/data/jpa/repository/query/EscapeCharacter.java",
            "status": "modified",
            "additions": 13,
            "deletions": 4,
            "changes": 17,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/89b18d573394c84012c58c892e9a3844fb8c7b40/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FEscapeCharacter.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/89b18d573394c84012c58c892e9a3844fb8c7b40/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FEscapeCharacter.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FEscapeCharacter.java?ref=89b18d573394c84012c58c892e9a3844fb8c7b40",
            "patch": "@@ -20,8 +20,6 @@\n import java.util.Arrays;\n import java.util.List;\n \n-import org.springframework.util.Assert;\n-\n /**\n  * A value type encapsulating an escape character for LIKE queries and the actually usage of it in escaping\n  * {@link String}s.\n@@ -39,12 +37,14 @@ public class EscapeCharacter {\n \t/**\n \t * Escapes all special like characters ({@code _}, {@code %}) using the configured escape character.\n \t *\n-\t * @param value must not be {@literal null}.\n+\t * @param value May be {@literal null}.\n \t * @return\n \t */\n \tpublic String escape(String value) {\n \n-\t\tAssert.notNull(value, \"Value must be not null.\");\n+\t\tif (value == null) {\n+\t\t\treturn null;\n+\t\t}\n \n \t\tString result = value;\n \n@@ -54,4 +54,13 @@ public String escape(String value) {\n \n \t\treturn result;\n \t}\n+\n+\t/**\n+\t * Makes the underlying character available.\n+\t *\n+\t * @return the value\n+\t */\n+\tpublic char escapeCharacter() {\n+\t\treturn value;\n+\t}\n }"
        },
        {
            "sha": "e45119e98e9f0bc28456aa7892db769b0b2a68d3",
            "filename": "src/test/java/org/springframework/data/jpa/repository/sample/UserRepository.java",
            "status": "modified",
            "additions": 11,
            "deletions": 12,
            "changes": 23,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/89b18d573394c84012c58c892e9a3844fb8c7b40/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsample%2FUserRepository.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/89b18d573394c84012c58c892e9a3844fb8c7b40/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsample%2FUserRepository.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsample%2FUserRepository.java?ref=89b18d573394c84012c58c892e9a3844fb8c7b40",
            "patch": "@@ -46,7 +46,7 @@\n \n /**\n  * Repository interface for {@code User}s.\n- * \n+ *\n  * @author Oliver Gierke\n  * @author Thomas Darimont\n  */\n@@ -56,7 +56,7 @@ public interface UserRepository\n \t/**\n \t * Retrieve users by their lastname. The finder {@literal User.findByLastname} is declared in\n \t * {@literal META-INF/orm.xml} .\n-\t * \n+\t *\n \t * @param lastname\n \t * @return all users with the given lastname\n \t */\n@@ -78,7 +78,7 @@ public interface UserRepository\n \t/**\n \t * Retrieve users by their email address. The finder {@literal User.findByEmailAddress} is declared as annotation at\n \t * {@code User}.\n-\t * \n+\t *\n \t * @param emailAddress\n \t * @return the user with the given email address\n \t */\n@@ -89,7 +89,7 @@ public interface UserRepository\n \n \t/**\n \t * Retrieves users by the given email and lastname. Acts as a dummy method declaration to test finder query creation.\n-\t * \n+\t *\n \t * @param emailAddress\n \t * @param lastname\n \t * @return the user with the given email address and lastname\n@@ -99,7 +99,7 @@ public interface UserRepository\n \t/**\n \t * Retrieves users by email address and lastname or firstname. Acts as a dummy method declaration to test finder query\n \t * creation.\n-\t * \n+\t *\n \t * @param emailAddress\n \t * @param lastname\n \t * @param username\n@@ -109,7 +109,7 @@ public interface UserRepository\n \n \t/**\n \t * Retrieves a user by its username using the query annotated to the method.\n-\t * \n+\t *\n \t * @param emailAddress\n \t * @return\n \t */\n@@ -119,7 +119,7 @@ public interface UserRepository\n \n \t/**\n \t * Method to directly create query from and adding a {@link Pageable} parameter to be regarded on query execution.\n-\t * \n+\t *\n \t * @param pageable\n \t * @param lastname\n \t * @return\n@@ -129,7 +129,7 @@ public interface UserRepository\n \t/**\n \t * Method to directly create query from and adding a {@link Pageable} parameter to be regarded on query execution.\n \t * Just returns the queried {@link Page}'s contents.\n-\t * \n+\t *\n \t * @param firstname\n \t * @param pageable\n \t * @return\n@@ -150,7 +150,7 @@ public interface UserRepository\n \n \t/**\n \t * Manipulating query to set all {@link User}'s names to the given one.\n-\t * \n+\t *\n \t * @param lastname\n \t */\n \t@Modifying\n@@ -162,7 +162,7 @@ public interface UserRepository\n \n \t/**\n \t * Method where parameters will be applied by name. Note that the order of the parameters is then not crucial anymore.\n-\t * \n+\t *\n \t * @param foo\n \t * @param bar\n \t * @return\n@@ -175,7 +175,7 @@ public interface UserRepository\n \n \t/**\n \t * Method to check query creation and named parameter usage go well hand in hand.\n-\t * \n+\t *\n \t * @param lastname\n \t * @param firstname\n \t * @return\n@@ -486,7 +486,6 @@ List<User> findUsersByFirstnameForSpELExpressionWithParameterIndexOnlyWithEntity\n \t@Query(value = \"SELECT emailaddress FROM SD_User WHERE id = ?1\", nativeQuery = true)\n \tEmailOnly findEmailOnlyByNativeQuery(Integer id);\n \n-\n \t// DATAJPA-1273\n \tList<NameOnly> findByNamedQueryWithAliasInInvertedOrder();\n "
        }
    ]
}