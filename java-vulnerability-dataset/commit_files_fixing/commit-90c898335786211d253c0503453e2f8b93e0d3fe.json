{
    "sha": "90c898335786211d253c0503453e2f8b93e0d3fe",
    "node_id": "MDY6Q29tbWl0MTc1Mzc4Mzg6OTBjODk4MzM1Nzg2MjExZDI1M2MwNTAzNDUzZTJmOGI5M2UwZDNmZQ==",
    "commit": {
        "author": {
            "name": "Colm O hEigeartaigh",
            "email": "coheigea@apache.org",
            "date": "2015-07-02T16:07:04Z"
        },
        "committer": {
            "name": "Colm O hEigeartaigh",
            "email": "coheigea@apache.org",
            "date": "2015-07-02T16:21:55Z"
        },
        "message": "Refactor of DOM parsing\n\nConflicts:\n\tplugins/core/src/main/java/org/apache/cxf/fediz/core/metadata/MetadataWriter.java\n\tservices/idp/src/main/java/org/apache/cxf/fediz/service/idp/metadata/IdpMetadataWriter.java",
        "tree": {
            "sha": "f374e8258ea239f9992ff5f1c0267dc76ef3d18d",
            "url": "https://api.github.com/repos/apache/cxf-fediz/git/trees/f374e8258ea239f9992ff5f1c0267dc76ef3d18d"
        },
        "url": "https://api.github.com/repos/apache/cxf-fediz/git/commits/90c898335786211d253c0503453e2f8b93e0d3fe",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/cxf-fediz/commits/90c898335786211d253c0503453e2f8b93e0d3fe",
    "html_url": "https://github.com/apache/cxf-fediz/commit/90c898335786211d253c0503453e2f8b93e0d3fe",
    "comments_url": "https://api.github.com/repos/apache/cxf-fediz/commits/90c898335786211d253c0503453e2f8b93e0d3fe/comments",
    "author": {
        "login": "coheigea",
        "id": 472162,
        "node_id": "MDQ6VXNlcjQ3MjE2Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/472162?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/coheigea",
        "html_url": "https://github.com/coheigea",
        "followers_url": "https://api.github.com/users/coheigea/followers",
        "following_url": "https://api.github.com/users/coheigea/following{/other_user}",
        "gists_url": "https://api.github.com/users/coheigea/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/coheigea/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/coheigea/subscriptions",
        "organizations_url": "https://api.github.com/users/coheigea/orgs",
        "repos_url": "https://api.github.com/users/coheigea/repos",
        "events_url": "https://api.github.com/users/coheigea/events{/privacy}",
        "received_events_url": "https://api.github.com/users/coheigea/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "coheigea",
        "id": 472162,
        "node_id": "MDQ6VXNlcjQ3MjE2Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/472162?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/coheigea",
        "html_url": "https://github.com/coheigea",
        "followers_url": "https://api.github.com/users/coheigea/followers",
        "following_url": "https://api.github.com/users/coheigea/following{/other_user}",
        "gists_url": "https://api.github.com/users/coheigea/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/coheigea/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/coheigea/subscriptions",
        "organizations_url": "https://api.github.com/users/coheigea/orgs",
        "repos_url": "https://api.github.com/users/coheigea/repos",
        "events_url": "https://api.github.com/users/coheigea/events{/privacy}",
        "received_events_url": "https://api.github.com/users/coheigea/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "a6a1fde66899726029f7ce6aa3600a57fad2d06a",
            "url": "https://api.github.com/repos/apache/cxf-fediz/commits/a6a1fde66899726029f7ce6aa3600a57fad2d06a",
            "html_url": "https://github.com/apache/cxf-fediz/commit/a6a1fde66899726029f7ce6aa3600a57fad2d06a"
        }
    ],
    "stats": {
        "total": 647,
        "additions": 44,
        "deletions": 603
    },
    "files": [
        {
            "sha": "c6621247abded0523fd13792f1ec85c0cd28b6e1",
            "filename": "plugins/core/src/main/java/org/apache/cxf/fediz/core/metadata/MetadataWriter.java",
            "status": "modified",
            "additions": 2,
            "deletions": 7,
            "changes": 9,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/90c898335786211d253c0503453e2f8b93e0d3fe/plugins%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2Fmetadata%2FMetadataWriter.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/90c898335786211d253c0503453e2f8b93e0d3fe/plugins%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2Fmetadata%2FMetadataWriter.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/plugins%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2Fmetadata%2FMetadataWriter.java?ref=90c898335786211d253c0503453e2f8b93e0d3fe",
            "patch": "@@ -30,7 +30,6 @@\n import java.util.List;\n \n import javax.servlet.http.HttpServletRequest;\n-import javax.xml.parsers.DocumentBuilderFactory;\n import javax.xml.stream.XMLOutputFactory;\n import javax.xml.stream.XMLStreamException;\n import javax.xml.stream.XMLStreamWriter;\n@@ -61,11 +60,6 @@ public class MetadataWriter {\n     private static final Logger LOG = LoggerFactory.getLogger(MetadataWriter.class);\n     \n     private static final XMLOutputFactory XML_OUTPUT_FACTORY = XMLOutputFactory.newInstance();\n-    private static final DocumentBuilderFactory DOC_BUILDER_FACTORY = DocumentBuilderFactory.newInstance();\n-    \n-    static {\n-        DOC_BUILDER_FACTORY.setNamespaceAware(true);\n-    }\n \n     //CHECKSTYLE:OFF\n     public Document getMetaData(\n@@ -130,8 +124,9 @@ public Document getMetaData(\n                 LOG.info(\"No signingKey element found in config: \" + ex.getMessage());\n             }\n             if (hasSigningKey) {\n+                Document doc = DOMUtils.readXml(is);\n                 Document result = SignatureUtils.signMetaInfo(\n-                    config.getSigningKey().getCrypto(), config.getSigningKey().getKeyAlias(), config.getSigningKey().getKeyPassword(), is, referenceID);\n+                    config.getSigningKey().getCrypto(), config.getSigningKey().getKeyAlias(), config.getSigningKey().getKeyPassword(), doc, referenceID);\n                 if (result != null) {\n                     return result;\n                 } else {"
        },
        {
            "sha": "acfa972665e2eecd5fe2d2352302ecf279f831b9",
            "filename": "plugins/core/src/main/java/org/apache/cxf/fediz/core/util/DOMUtils.java",
            "status": "modified",
            "additions": 19,
            "deletions": 43,
            "changes": 62,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/90c898335786211d253c0503453e2f8b93e0d3fe/plugins%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2Futil%2FDOMUtils.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/90c898335786211d253c0503453e2f8b93e0d3fe/plugins%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2Futil%2FDOMUtils.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/plugins%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2Futil%2FDOMUtils.java?ref=90c898335786211d253c0503453e2f8b93e0d3fe",
            "patch": "@@ -75,11 +75,13 @@ private static DocumentBuilder getBuilder() throws ParserConfigurationException\n             loader = DOMUtils.class.getClassLoader();\n         }\n         if (loader == null) {\n-            return XMLUtils.getParser();\n+            DocumentBuilderFactory dbf = createDocumentBuilderFactory();\n+            return dbf.newDocumentBuilder();\n         }\n         DocumentBuilder builder = DOCUMENT_BUILDERS.get(loader);\n         if (builder == null) {\n-            builder = XMLUtils.getParser();\n+            DocumentBuilderFactory dbf = createDocumentBuilderFactory();\n+            builder = dbf.newDocumentBuilder();\n             DOCUMENT_BUILDERS.put(loader, builder);\n         }\n         return builder;\n@@ -421,76 +423,50 @@ public InputSource resolveEntity(String publicId, String systemId) throws SAXExc\n             return new InputSource(new StringReader(\"\"));\n         }\n     }\n-\n-    /**\n-     * Read XML as DOM.\n-     */\n-    public static Document readXml(InputStream is) throws SAXException, IOException,\n-        ParserConfigurationException {\n+    \n+    private static DocumentBuilderFactory createDocumentBuilderFactory() throws ParserConfigurationException {\n         DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+        dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING , true);\n \n         dbf.setValidating(false);\n         dbf.setIgnoringComments(false);\n         dbf.setIgnoringElementContentWhitespace(true);\n         dbf.setNamespaceAware(true);\n         // dbf.setCoalescing(true);\n         // dbf.setExpandEntityReferences(true);\n+        \n+        return dbf;\n+    }\n \n-        DocumentBuilder db = null;\n-        db = dbf.newDocumentBuilder();\n-        db.setEntityResolver(new NullResolver());\n-\n-        // db.setErrorHandler( new MyErrorHandler());\n-\n+    /**\n+     * Read XML as DOM.\n+     */\n+    public static Document readXml(InputStream is) throws SAXException, IOException,\n+        ParserConfigurationException {\n+        DocumentBuilder db = getBuilder();\n         return db.parse(is);\n     }\n \n     public static Document readXml(Reader is) throws SAXException, IOException, ParserConfigurationException {\n-        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n-\n-        dbf.setValidating(false);\n-        dbf.setIgnoringComments(false);\n-        dbf.setIgnoringElementContentWhitespace(true);\n-        dbf.setNamespaceAware(true);\n-        // dbf.setCoalescing(true);\n-        // dbf.setExpandEntityReferences(true);\n-\n-        DocumentBuilder db = null;\n-        db = dbf.newDocumentBuilder();\n-        db.setEntityResolver(new NullResolver());\n-\n-        // db.setErrorHandler( new MyErrorHandler());\n         InputSource ips = new InputSource(is);\n+        DocumentBuilder db = getBuilder();\n         return db.parse(ips);\n     }\n \n     public static Document readXml(StreamSource is) throws SAXException, IOException,\n         ParserConfigurationException {\n-\n-        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n-\n-        dbf.setValidating(false);\n-        dbf.setIgnoringComments(false);\n-        dbf.setIgnoringElementContentWhitespace(true);\n-        dbf.setNamespaceAware(true);\n-        // dbf.setCoalescing(true);\n-        // dbf.setExpandEntityReferences(true);\n-\n-        DocumentBuilder db = null;\n-        db = dbf.newDocumentBuilder();\n-        db.setEntityResolver(new NullResolver());\n-\n-        // db.setErrorHandler( new MyErrorHandler());\n         InputSource is2 = new InputSource();\n         is2.setSystemId(is.getSystemId());\n         is2.setByteStream(is.getInputStream());\n         is2.setCharacterStream(is.getReader());\n \n+        DocumentBuilder db = getBuilder();\n         return db.parse(is2);\n     }\n \n     public static void writeXml(Node n, OutputStream os) throws TransformerException {\n         TransformerFactory tf = TransformerFactory.newInstance();\n+        tf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING , true);\n         // identity\n         Transformer t = tf.newTransformer();\n         t.setOutputProperty(OutputKeys.INDENT, \"yes\");"
        },
        {
            "sha": "ddd4793a9fbf0c8ae6ac1b6085201bc359863886",
            "filename": "plugins/core/src/main/java/org/apache/cxf/fediz/core/util/SignatureUtils.java",
            "status": "modified",
            "additions": 1,
            "deletions": 11,
            "changes": 12,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/90c898335786211d253c0503453e2f8b93e0d3fe/plugins%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2Futil%2FSignatureUtils.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/90c898335786211d253c0503453e2f8b93e0d3fe/plugins%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2Futil%2FSignatureUtils.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/plugins%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2Futil%2FSignatureUtils.java?ref=90c898335786211d253c0503453e2f8b93e0d3fe",
            "patch": "@@ -19,7 +19,6 @@\n \n package org.apache.cxf.fediz.core.util;\n \n-import java.io.InputStream;\n import java.security.PrivateKey;\n import java.security.cert.X509Certificate;\n import java.util.ArrayList;\n@@ -40,7 +39,6 @@\n import javax.xml.crypto.dsig.keyinfo.X509Data;\n import javax.xml.crypto.dsig.spec.C14NMethodParameterSpec;\n import javax.xml.crypto.dsig.spec.TransformParameterSpec;\n-import javax.xml.parsers.DocumentBuilderFactory;\n \n import org.w3c.dom.Document;\n \n@@ -53,18 +51,12 @@ public final class SignatureUtils {\n     private static final Logger LOG = LoggerFactory.getLogger(SignatureUtils.class);\n     \n     private static final XMLSignatureFactory XML_SIGNATURE_FACTORY = XMLSignatureFactory.getInstance(\"DOM\");\n-    private static final DocumentBuilderFactory DOC_BUILDER_FACTORY = DocumentBuilderFactory.newInstance();\n-    \n-    static {\n-        DOC_BUILDER_FACTORY.setNamespaceAware(true);\n-    }\n     \n     private SignatureUtils() {\n     }\n     \n-    \n     public static Document signMetaInfo(Crypto crypto, String keyAlias, String keyPassword,\n-                                              InputStream metaInfo, String referenceID) throws Exception {\n+                                              Document doc, String referenceID) throws Exception {\n         if (keyAlias == null || \"\".equals(keyAlias)) {\n             keyAlias = crypto.getDefaultX509Identifier();\n         }\n@@ -143,8 +135,6 @@ public static Document signMetaInfo(Crypto crypto, String keyAlias, String keyPa\n         KeyInfo ki = kif.newKeyInfo(Collections.singletonList(xd));\n \n         // step3\n-        // Instantiate the document to be signed.\n-        Document doc = DOC_BUILDER_FACTORY.newDocumentBuilder().parse(metaInfo);\n \n         // Create a DOMSignContext and specify the RSA PrivateKey and\n         // location of the resulting XMLSignature's parent element."
        },
        {
            "sha": "9b0dbf5b3525801a4ac952dad7e7e465730923ff",
            "filename": "plugins/core/src/main/java/org/apache/cxf/fediz/core/util/XMLUtils.java",
            "status": "removed",
            "additions": 0,
            "deletions": 485,
            "changes": 485,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/a6a1fde66899726029f7ce6aa3600a57fad2d06a/plugins%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2Futil%2FXMLUtils.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/a6a1fde66899726029f7ce6aa3600a57fad2d06a/plugins%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2Futil%2FXMLUtils.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/plugins%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2Futil%2FXMLUtils.java?ref=a6a1fde66899726029f7ce6aa3600a57fad2d06a",
            "patch": "@@ -1,485 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements. See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership. The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package org.apache.cxf.fediz.core.util;\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.io.StringWriter;\n-import java.io.Writer;\n-import java.util.Collections;\n-import java.util.LinkedHashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n-import java.util.Set;\n-import java.util.StringTokenizer;\n-import java.util.WeakHashMap;\n-import javax.xml.namespace.QName;\n-import javax.xml.parsers.DocumentBuilder;\n-import javax.xml.parsers.DocumentBuilderFactory;\n-import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.transform.OutputKeys;\n-import javax.xml.transform.Source;\n-import javax.xml.transform.Transformer;\n-import javax.xml.transform.TransformerConfigurationException;\n-import javax.xml.transform.TransformerException;\n-import javax.xml.transform.TransformerFactory;\n-import javax.xml.transform.dom.DOMResult;\n-import javax.xml.transform.dom.DOMSource;\n-import javax.xml.transform.stream.StreamResult;\n-\n-import org.w3c.dom.Attr;\n-import org.w3c.dom.DOMImplementation;\n-import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n-import org.w3c.dom.NamedNodeMap;\n-import org.w3c.dom.Node;\n-import org.w3c.dom.Text;\n-import org.w3c.dom.bootstrap.DOMImplementationRegistry;\n-import org.w3c.dom.ls.DOMImplementationLS;\n-import org.w3c.dom.ls.LSOutput;\n-import org.w3c.dom.ls.LSSerializer;\n-import org.xml.sax.InputSource;\n-import org.xml.sax.SAXException;\n-\n-/**\n- * Few simple utils. This is originally from the CXF project.\n- */\n-@SuppressWarnings(\"PMD\")\n-public final class XMLUtils {\n-\n-    // private static final Logger LOG = LogUtils.getL7dLogger(XMLUtils.class);\n-\n-    private static final Map<ClassLoader, DocumentBuilderFactory> DOCUMENT_BUILDER_FACTORIES = Collections\n-        .synchronizedMap(new WeakHashMap<ClassLoader, DocumentBuilderFactory>());\n-\n-    private static final Map<ClassLoader, TransformerFactory> TRANSFORMER_FACTORIES = Collections\n-        .synchronizedMap(new WeakHashMap<ClassLoader, TransformerFactory>());\n-\n-    private XMLUtils() {\n-    }\n-\n-    private static TransformerFactory getTransformerFactory() {\n-        ClassLoader loader = Thread.currentThread().getContextClassLoader();\n-        if (loader == null) {\n-            loader = XMLUtils.class.getClassLoader();\n-        }\n-        if (loader == null) {\n-            return TransformerFactory.newInstance();\n-        }\n-        TransformerFactory factory = TRANSFORMER_FACTORIES.get(loader);\n-        if (factory == null) {\n-            factory = TransformerFactory.newInstance();\n-            TRANSFORMER_FACTORIES.put(loader, factory);\n-        }\n-        return factory;\n-    }\n-\n-    private static DocumentBuilderFactory getDocumentBuilderFactory() {\n-        ClassLoader loader = Thread.currentThread().getContextClassLoader();\n-        if (loader == null) {\n-            loader = XMLUtils.class.getClassLoader();\n-        }\n-        if (loader == null) {\n-            return DocumentBuilderFactory.newInstance();\n-        }\n-        DocumentBuilderFactory factory = DOCUMENT_BUILDER_FACTORIES.get(loader);\n-        if (factory == null) {\n-            factory = DocumentBuilderFactory.newInstance();\n-            factory.setNamespaceAware(true);\n-            DOCUMENT_BUILDER_FACTORIES.put(loader, factory);\n-        }\n-        return factory;\n-    }\n-\n-    public static Transformer newTransformer() throws TransformerConfigurationException {\n-        return getTransformerFactory().newTransformer();\n-    }\n-\n-    public static Transformer newTransformer(int indent) throws TransformerConfigurationException {\n-        if (indent > 0) {\n-            TransformerFactory f = TransformerFactory.newInstance();\n-            try {\n-                // sun way of setting indent\n-                f.setAttribute(\"indent-number\", Integer.toString(indent));\n-            } catch (Throwable t) {\n-                // ignore\n-            }\n-            return f.newTransformer();\n-        }\n-        return getTransformerFactory().newTransformer();\n-    }\n-\n-    public static DocumentBuilder getParser() throws ParserConfigurationException {\n-        return getDocumentBuilderFactory().newDocumentBuilder();\n-    }\n-\n-    public static Document parse(InputSource is) throws ParserConfigurationException, SAXException,\n-        IOException {\n-        return getParser().parse(is);\n-    }\n-\n-    public static Document parse(File is) throws ParserConfigurationException, SAXException, IOException {\n-        return getParser().parse(is);\n-    }\n-\n-    public static Document parse(InputStream in) throws ParserConfigurationException, SAXException,\n-        IOException {\n-        return getParser().parse(in);\n-    }\n-\n-    public static Document parse(String in) throws ParserConfigurationException, SAXException, IOException {\n-        return parse(in.getBytes());\n-    }\n-\n-    public static Document parse(byte[] in) throws ParserConfigurationException, SAXException, IOException {\n-        if (in == null) {\n-            return null;\n-        }\n-        return getParser().parse(new ByteArrayInputStream(in));\n-    }\n-\n-    public static Document newDocument() throws ParserConfigurationException {\n-        return getParser().newDocument();\n-    }\n-\n-    public static void writeTo(Node node, OutputStream os) {\n-        writeTo(new DOMSource(node), os);\n-    }\n-\n-    public static void writeTo(Node node, OutputStream os, int indent) {\n-        writeTo(new DOMSource(node), os, indent);\n-    }\n-\n-    public static void writeTo(Source src, OutputStream os) {\n-        writeTo(src, os, -1);\n-    }\n-\n-    public static void writeTo(Node node, Writer os) {\n-        writeTo(new DOMSource(node), os);\n-    }\n-\n-    public static void writeTo(Node node, Writer os, int indent) {\n-        writeTo(new DOMSource(node), os, indent);\n-    }\n-\n-    public static void writeTo(Source src, Writer os) {\n-        writeTo(src, os, -1);\n-    }\n-\n-    public static void writeTo(Source src, OutputStream os, int indent) {\n-        String enc = null;\n-        if (src instanceof DOMSource && ((DOMSource)src).getNode() instanceof Document) {\n-            try {\n-                enc = ((Document)((DOMSource)src).getNode()).getXmlEncoding();\n-            } catch (Exception ex) {\n-                // ignore - not DOM level 3\n-            }\n-        }\n-        writeTo(src, os, indent, enc, \"no\");\n-    }\n-\n-    public static void writeTo(Source src, Writer os, int indent) {\n-        String enc = null;\n-        if (src instanceof DOMSource && ((DOMSource)src).getNode() instanceof Document) {\n-            try {\n-                enc = ((Document)((DOMSource)src).getNode()).getXmlEncoding();\n-            } catch (Exception ex) {\n-                // ignore - not DOM level 3\n-            }\n-        }\n-        writeTo(src, os, indent, enc, \"no\");\n-    }\n-\n-    public static void writeTo(Source src, OutputStream os, int indent, String charset, String omitXmlDecl) {\n-        Transformer it;\n-        try {\n-            if (StringUtils.isEmpty(charset)) {\n-                charset = \"utf-8\";\n-            }\n-\n-            it = newTransformer(indent);\n-            it.setOutputProperty(OutputKeys.METHOD, \"xml\");\n-            if (indent > -1) {\n-                it.setOutputProperty(OutputKeys.INDENT, \"yes\");\n-                it.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", Integer.toString(indent));\n-            }\n-            it.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, omitXmlDecl);\n-            it.setOutputProperty(OutputKeys.ENCODING, charset);\n-            it.transform(src, new StreamResult(os));\n-        } catch (TransformerException e) {\n-            throw new RuntimeException(\"Failed to configure TRaX\", e);\n-        }\n-    }\n-\n-    public static void writeTo(Source src, Writer os, int indent, String charset, String omitXmlDecl) {\n-        Transformer it;\n-        try {\n-            if (StringUtils.isEmpty(charset)) {\n-                charset = \"utf-8\";\n-            }\n-\n-            it = newTransformer(indent);\n-            it.setOutputProperty(OutputKeys.METHOD, \"xml\");\n-            if (indent > -1) {\n-                it.setOutputProperty(OutputKeys.INDENT, \"yes\");\n-                it.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", Integer.toString(indent));\n-            }\n-            it.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, omitXmlDecl);\n-            it.setOutputProperty(OutputKeys.ENCODING, charset);\n-            it.transform(src, new StreamResult(os));\n-        } catch (TransformerException e) {\n-            throw new RuntimeException(\"Failed to configure TRaX\", e);\n-        }\n-    }\n-\n-    public static String toString(Source source) throws TransformerException, IOException {\n-        return toString(source, null);\n-    }\n-\n-    public static String toString(Source source, Properties props) throws TransformerException, IOException {\n-        StringWriter bos = new StringWriter();\n-        StreamResult sr = new StreamResult(bos);\n-        Transformer trans = newTransformer();\n-        if (props == null) {\n-            props = new Properties();\n-            props.put(OutputKeys.OMIT_XML_DECLARATION, \"yes\");\n-        }\n-        trans.setOutputProperties(props);\n-        trans.transform(source, sr);\n-        bos.close();\n-        return bos.toString();\n-    }\n-\n-    public static String toString(Node node, int indent) {\n-        ByteArrayOutputStream out = new ByteArrayOutputStream();\n-        writeTo(node, out, indent);\n-        return out.toString();\n-    }\n-\n-    public static String toString(Node node) {\n-        ByteArrayOutputStream out = new ByteArrayOutputStream();\n-        writeTo(node, out);\n-        return out.toString();\n-    }\n-\n-    public static void printDOM(Node node) {\n-        printDOM(\"\", node);\n-    }\n-\n-    public static void printDOM(String words, Node node) {\n-        System.out.println(words);\n-        System.out.println(toString(node));\n-    }\n-\n-    public static Attr getAttribute(Element el, String attrName) {\n-        return el.getAttributeNode(attrName);\n-    }\n-\n-    public static void replaceAttribute(Element element, String attr, String value) {\n-        if (element.hasAttribute(attr)) {\n-            element.removeAttribute(attr);\n-        }\n-        element.setAttribute(attr, value);\n-    }\n-\n-    public static boolean hasAttribute(Element element, String value) {\n-        NamedNodeMap attributes = element.getAttributes();\n-        for (int i = 0; i < attributes.getLength(); i++) {\n-            Node node = attributes.item(i);\n-            if (value.equals(node.getNodeValue())) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    public static void printAttributes(Element element) {\n-        NamedNodeMap attributes = element.getAttributes();\n-        for (int i = 0; i < attributes.getLength(); i++) {\n-            Node node = attributes.item(i);\n-            System.err.println(\"## prefix=\" + node.getPrefix() + \" localname:\" + node.getLocalName()\n-                               + \" value=\" + node.getNodeValue());\n-        }\n-    }\n-\n-    public static QName getNamespace(Map<String, String> namespaces, String str, String defaultNamespace) {\n-        String prefix = null;\n-        String localName = null;\n-\n-        StringTokenizer tokenizer = new StringTokenizer(str, \":\");\n-        if (tokenizer.countTokens() == 2) {\n-            prefix = tokenizer.nextToken();\n-            localName = tokenizer.nextToken();\n-        } else if (tokenizer.countTokens() == 1) {\n-            localName = tokenizer.nextToken();\n-        }\n-\n-        String namespceURI = defaultNamespace;\n-        if (prefix != null) {\n-            namespceURI = (String)namespaces.get(prefix);\n-        }\n-        return new QName(namespceURI, localName);\n-    }\n-\n-    public static void generateXMLFile(Element element, Writer writer) {\n-        try {\n-            Transformer it = newTransformer();\n-\n-            it.setOutputProperty(OutputKeys.METHOD, \"xml\");\n-            it.setOutputProperty(OutputKeys.INDENT, \"yes\");\n-            it.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"2\");\n-            it.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");\n-            it.transform(new DOMSource(element), new StreamResult(writer));\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    public static Element createElementNS(Node node, QName name) {\n-        return createElementNS(node.getOwnerDocument(), name.getNamespaceURI(), name.getLocalPart());\n-    }\n-\n-    public static Element createElementNS(Document root, QName name) {\n-        return createElementNS(root, name.getNamespaceURI(), name.getLocalPart());\n-    }\n-\n-    public static Element createElementNS(Document root, String namespaceURI, String qualifiedName) {\n-        return root.createElementNS(namespaceURI, qualifiedName);\n-    }\n-\n-    public static Text createTextNode(Document root, String data) {\n-        return root.createTextNode(data);\n-    }\n-\n-    public static Text createTextNode(Node node, String data) {\n-        return createTextNode(node.getOwnerDocument(), data);\n-    }\n-\n-    public static void removeContents(Node parent) {\n-        Node node = parent.getFirstChild();\n-        while (node != null) {\n-            parent.removeChild(node);\n-            node = node.getNextSibling();\n-        }\n-    }\n-\n-    public static InputStream getInputStream(Document doc) throws Exception {\n-        DOMImplementationLS impl = null;\n-        DOMImplementation docImpl = doc.getImplementation();\n-        // Try to get the DOMImplementation from doc first before\n-        // defaulting to the sun implementation.\n-        if (docImpl != null && docImpl.hasFeature(\"LS\", \"3.0\")) {\n-            impl = (DOMImplementationLS)docImpl.getFeature(\"LS\", \"3.0\");\n-        } else {\n-            DOMImplementationRegistry registry = DOMImplementationRegistry.newInstance();\n-            impl = (DOMImplementationLS)registry.getDOMImplementation(\"LS\");\n-            if (impl == null) {\n-                System.setProperty(DOMImplementationRegistry.PROPERTY,\n-                                   \"com.sun.org.apache.xerces.internal.dom.DOMImplementationSourceImpl\");\n-                registry = DOMImplementationRegistry.newInstance();\n-                impl = (DOMImplementationLS)registry.getDOMImplementation(\"LS\");\n-            }\n-        }\n-        LSOutput output = impl.createLSOutput();\n-        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n-        output.setByteStream(byteArrayOutputStream);\n-        LSSerializer writer = impl.createLSSerializer();\n-        writer.write(doc, output);\n-        byte[] buf = byteArrayOutputStream.toByteArray();\n-        return new ByteArrayInputStream(buf);\n-    }\n-\n-    public static Element fetchElementByNameAttribute(Element parent, String targetName, String nameValue) {\n-\n-        List<Element> elemList = DOMUtils.findAllElementsByTagName(parent, targetName);\n-        for (Element elem : elemList) {\n-            if (elem.getAttribute(\"name\").equals(nameValue)) {\n-                return elem;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    public static QName getQName(String value, Node node) {\n-        if (value == null) {\n-            return null;\n-        }\n-\n-        int index = value.indexOf(\":\");\n-\n-        if (index == -1) {\n-            return new QName(value);\n-        }\n-\n-        String prefix = value.substring(0, index);\n-        String localName = value.substring(index + 1);\n-        String ns = node.lookupNamespaceURI(prefix);\n-\n-        if (ns == null || localName == null) {\n-            throw new RuntimeException(\"Invalid QName in mapping: \" + value);\n-        }\n-\n-        return new QName(ns, localName, prefix);\n-    }\n-\n-    public static Node fromSource(Source src) throws Exception {\n-\n-        Transformer trans = TransformerFactory.newInstance().newTransformer();\n-        DOMResult res = new DOMResult();\n-        trans.transform(src, res);\n-        return res.getNode();\n-    }\n-\n-    public static QName convertStringToQName(String expandedQName) {\n-        return convertStringToQName(expandedQName, \"\");\n-    }\n-\n-    public static QName convertStringToQName(String expandedQName, String prefix) {\n-        int ind1 = expandedQName.indexOf('{');\n-        if (ind1 != 0) {\n-            return new QName(expandedQName);\n-        }\n-\n-        int ind2 = expandedQName.indexOf('}');\n-        if (ind2 <= ind1 + 1 || ind2 >= expandedQName.length() - 1) {\n-            return null;\n-        }\n-        String ns = expandedQName.substring(ind1 + 1, ind2);\n-        String localName = expandedQName.substring(ind2 + 1);\n-        return new QName(ns, localName, prefix);\n-    }\n-\n-    public static Set<QName> convertStringsToQNames(List<String> expandedQNames) {\n-        Set<QName> dropElements = Collections.emptySet();\n-        if (expandedQNames != null) {\n-            dropElements = new LinkedHashSet<QName>(expandedQNames.size());\n-            for (String val : expandedQNames) {\n-                dropElements.add(XMLUtils.convertStringToQName(val));\n-            }\n-        }\n-        return dropElements;\n-    }\n-\n-}"
        },
        {
            "sha": "0d9b0b1868bea11e81431c671e8ff5af68aa3a9e",
            "filename": "services/idp/src/main/java/org/apache/cxf/fediz/service/idp/metadata/IdpMetadataWriter.java",
            "status": "modified",
            "additions": 15,
            "deletions": 32,
            "changes": 47,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/90c898335786211d253c0503453e2f8b93e0d3fe/services%2Fidp%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fservice%2Fidp%2Fmetadata%2FIdpMetadataWriter.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/90c898335786211d253c0503453e2f8b93e0d3fe/services%2Fidp%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fservice%2Fidp%2Fmetadata%2FIdpMetadataWriter.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/services%2Fidp%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fservice%2Fidp%2Fmetadata%2FIdpMetadataWriter.java?ref=90c898335786211d253c0503453e2f8b93e0d3fe",
            "patch": "@@ -19,15 +19,8 @@\n \n package org.apache.cxf.fediz.service.idp.metadata;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.InputStream;\n-import java.io.OutputStreamWriter;\n-import java.io.Writer;\n import java.security.cert.X509Certificate;\n \n-import javax.xml.parsers.DocumentBuilderFactory;\n-import javax.xml.stream.XMLOutputFactory;\n import javax.xml.stream.XMLStreamException;\n import javax.xml.stream.XMLStreamWriter;\n \n@@ -36,7 +29,9 @@\n import org.apache.cxf.fediz.core.util.SignatureUtils;\n import org.apache.cxf.fediz.service.idp.domain.Claim;\n import org.apache.cxf.fediz.service.idp.domain.Idp;\n+import org.apache.cxf.staxutils.W3CDOMStreamWriter;\n import org.apache.wss4j.common.crypto.Crypto;\n+import org.apache.wss4j.common.util.DOM2Writer;\n import org.apache.xml.security.stax.impl.util.IDGenerator;\n import org.apache.xml.security.utils.Base64;\n import org.slf4j.Logger;\n@@ -51,67 +46,55 @@ public class IdpMetadataWriter {\n     \n     private static final Logger LOG = LoggerFactory.getLogger(IdpMetadataWriter.class);\n     \n-    private static final XMLOutputFactory XML_OUTPUT_FACTORY = XMLOutputFactory.newInstance();\n-    private static final DocumentBuilderFactory DOC_BUILDER_FACTORY = DocumentBuilderFactory.newInstance();\n-    \n-    static {\n-        DOC_BUILDER_FACTORY.setNamespaceAware(true);\n-    }\n-\n     //CHECKSTYLE:OFF\n     public Document getMetaData(Idp config) throws RuntimeException {\n-        //Return as text/xml\n         try {\n+            //Return as text/xml\n             Crypto crypto = CertsUtils.createCrypto(config.getCertificate());\n-            \n-            ByteArrayOutputStream bout = new ByteArrayOutputStream(4096);\n-            Writer streamWriter = new OutputStreamWriter(bout, \"UTF-8\");\n-            XMLStreamWriter writer = XML_OUTPUT_FACTORY.createXMLStreamWriter(streamWriter);\n+\n+            W3CDOMStreamWriter writer = new W3CDOMStreamWriter();\n \n             writer.writeStartDocument(\"UTF-8\", \"1.0\");\n \n             String referenceID = IDGenerator.generateID(\"_\");\n             writer.writeStartElement(\"md\", \"EntityDescriptor\", SAML2_METADATA_NS);\n             writer.writeAttribute(\"ID\", referenceID);\n-                      \n+\n             writer.writeAttribute(\"entityID\", config.getIdpUrl().toString());\n \n             writer.writeNamespace(\"md\", SAML2_METADATA_NS);\n             writer.writeNamespace(\"fed\", WS_FEDERATION_NS);\n             writer.writeNamespace(\"wsa\", WS_ADDRESSING_NS);\n             writer.writeNamespace(\"auth\", WS_FEDERATION_NS);\n             writer.writeNamespace(\"xsi\", SCHEMA_INSTANCE_NS);\n-            \n+\n             writeFederationMetadata(writer, config, crypto);\n-            \n+\n             writer.writeEndElement(); // EntityDescriptor\n \n             writer.writeEndDocument();\n-            streamWriter.flush();\n-            bout.flush();\n+\n+            writer.close();\n \n             if (LOG.isDebugEnabled()) {\n-                String out = new String(bout.toByteArray());\n+                String out = DOM2Writer.nodeToString(writer.getDocument());\n                 LOG.debug(\"***************** unsigned ****************\");\n                 LOG.debug(out);\n                 LOG.debug(\"***************** unsigned ****************\");\n             }\n-            \n-            InputStream is = new ByteArrayInputStream(bout.toByteArray());\n-            \n-            Document result = SignatureUtils.signMetaInfo(crypto, null, config.getCertificatePassword(), is, referenceID);\n+\n+            Document result = SignatureUtils.signMetaInfo(crypto, null, config.getCertificatePassword(), \n+                                                          writer.getDocument(), referenceID);\n             if (result != null) {\n                 return result;\n             } else {\n                 throw new RuntimeException(\"Failed to sign the metadata document: result=null\");\n             }\n-        } catch (RuntimeException e) {\n-            throw e;\n         } catch (Exception e) {\n             LOG.error(\"Error creating service metadata information \", e);\n             throw new RuntimeException(\"Error creating service metadata information: \" + e.getMessage());\n         }\n-        \n+\n     }\n     \n     private void writeFederationMetadata("
        },
        {
            "sha": "4b138e8a5abbe62f987f5f6be3f569dc7cc4ad87",
            "filename": "services/idp/src/main/java/org/apache/cxf/fediz/service/idp/metadata/ServiceMetadataWriter.java",
            "status": "modified",
            "additions": 7,
            "deletions": 25,
            "changes": 32,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/90c898335786211d253c0503453e2f8b93e0d3fe/services%2Fidp%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fservice%2Fidp%2Fmetadata%2FServiceMetadataWriter.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/90c898335786211d253c0503453e2f8b93e0d3fe/services%2Fidp%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fservice%2Fidp%2Fmetadata%2FServiceMetadataWriter.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/services%2Fidp%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fservice%2Fidp%2Fmetadata%2FServiceMetadataWriter.java?ref=90c898335786211d253c0503453e2f8b93e0d3fe",
            "patch": "@@ -19,28 +19,22 @@\n \n package org.apache.cxf.fediz.service.idp.metadata;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.InputStream;\n-import java.io.OutputStreamWriter;\n-import java.io.Writer;\n import java.security.cert.X509Certificate;\n import java.util.Map;\n \n-import javax.xml.parsers.DocumentBuilderFactory;\n-import javax.xml.stream.XMLOutputFactory;\n import javax.xml.stream.XMLStreamException;\n import javax.xml.stream.XMLStreamWriter;\n \n import org.w3c.dom.Document;\n-\n import org.apache.cxf.fediz.core.exception.ProcessingException;\n import org.apache.cxf.fediz.core.util.CertsUtils;\n import org.apache.cxf.fediz.core.util.SignatureUtils;\n import org.apache.cxf.fediz.service.idp.domain.Idp;\n import org.apache.cxf.fediz.service.idp.domain.TrustedIdp;\n import org.apache.cxf.fediz.service.idp.protocols.TrustedIdpSAMLProtocolHandler;\n+import org.apache.cxf.staxutils.W3CDOMStreamWriter;\n import org.apache.wss4j.common.crypto.Crypto;\n+import org.apache.wss4j.common.util.DOM2Writer;\n import org.apache.xml.security.stax.impl.util.IDGenerator;\n import org.apache.xml.security.utils.Base64;\n import org.slf4j.Logger;\n@@ -54,23 +48,14 @@\n public class ServiceMetadataWriter {\n     \n     private static final Logger LOG = LoggerFactory.getLogger(ServiceMetadataWriter.class);\n-    \n-    private static final XMLOutputFactory XML_OUTPUT_FACTORY = XMLOutputFactory.newInstance();\n-    private static final DocumentBuilderFactory DOC_BUILDER_FACTORY = DocumentBuilderFactory.newInstance();\n-    \n-    static {\n-        DOC_BUILDER_FACTORY.setNamespaceAware(true);\n-    }\n \n     //CHECKSTYLE:OFF\n     public Document getMetaData(Idp config, TrustedIdp serviceConfig) throws ProcessingException {\n \n         try {\n             Crypto crypto = CertsUtils.createCrypto(config.getCertificate());\n             \n-            ByteArrayOutputStream bout = new ByteArrayOutputStream(4096);\n-            Writer streamWriter = new OutputStreamWriter(bout, \"UTF-8\");\n-            XMLStreamWriter writer = XML_OUTPUT_FACTORY.createXMLStreamWriter(streamWriter);\n+            W3CDOMStreamWriter writer = new W3CDOMStreamWriter();\n \n             writer.writeStartDocument(\"UTF-8\", \"1.0\");\n \n@@ -97,20 +82,17 @@ public Document getMetaData(Idp config, TrustedIdp serviceConfig) throws Process\n \n             writer.writeEndDocument();\n             \n-            streamWriter.flush();\n-            bout.flush();\n-            //\n+            writer.close();\n \n             if (LOG.isDebugEnabled()) {\n-                String out = new String(bout.toByteArray());\n+                String out = DOM2Writer.nodeToString(writer.getDocument());\n                 LOG.debug(\"***************** unsigned ****************\");\n                 LOG.debug(out);\n                 LOG.debug(\"***************** unsigned ****************\");\n             }\n \n-            InputStream is = new ByteArrayInputStream(bout.toByteArray());\n-            \n-            Document result = SignatureUtils.signMetaInfo(crypto, null, config.getCertificatePassword(), is, referenceID);\n+            Document result = SignatureUtils.signMetaInfo(crypto, null, config.getCertificatePassword(), \n+                                                          writer.getDocument(), referenceID);\n             if (result != null) {\n                 return result;\n             } else {"
        }
    ]
}