{
    "sha": "eaa2b8035b584dfcf7c79a33484eb2dffd3fdb11",
    "node_id": "MDY6Q29tbWl0MjM0MTg1MTc6ZWFhMmI4MDM1YjU4NGRmY2Y3Yzc5YTMzNDg0ZWIyZGZmZDNmZGIxMQ==",
    "commit": {
        "author": {
            "name": "Kihwal Lee",
            "email": "kihwal@apache.org",
            "date": "2018-05-29T19:47:55Z"
        },
        "committer": {
            "name": "Kihwal Lee",
            "email": "kihwal@apache.org",
            "date": "2018-05-29T19:48:46Z"
        },
        "message": "Additional check when unpacking archives. Contributed by Wilfred Spiegelenburg.",
        "tree": {
            "sha": "f5aae2f7f9d858f0ebd36f22154b2ccc950264c3",
            "url": "https://api.github.com/repos/apache/hadoop/git/trees/f5aae2f7f9d858f0ebd36f22154b2ccc950264c3"
        },
        "url": "https://api.github.com/repos/apache/hadoop/git/commits/eaa2b8035b584dfcf7c79a33484eb2dffd3fdb11",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/hadoop/commits/eaa2b8035b584dfcf7c79a33484eb2dffd3fdb11",
    "html_url": "https://github.com/apache/hadoop/commit/eaa2b8035b584dfcf7c79a33484eb2dffd3fdb11",
    "comments_url": "https://api.github.com/repos/apache/hadoop/commits/eaa2b8035b584dfcf7c79a33484eb2dffd3fdb11/comments",
    "author": {
        "login": "kihwal",
        "id": 340000,
        "node_id": "MDQ6VXNlcjM0MDAwMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/340000?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kihwal",
        "html_url": "https://github.com/kihwal",
        "followers_url": "https://api.github.com/users/kihwal/followers",
        "following_url": "https://api.github.com/users/kihwal/following{/other_user}",
        "gists_url": "https://api.github.com/users/kihwal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kihwal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kihwal/subscriptions",
        "organizations_url": "https://api.github.com/users/kihwal/orgs",
        "repos_url": "https://api.github.com/users/kihwal/repos",
        "events_url": "https://api.github.com/users/kihwal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kihwal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "kihwal",
        "id": 340000,
        "node_id": "MDQ6VXNlcjM0MDAwMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/340000?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kihwal",
        "html_url": "https://github.com/kihwal",
        "followers_url": "https://api.github.com/users/kihwal/followers",
        "following_url": "https://api.github.com/users/kihwal/following{/other_user}",
        "gists_url": "https://api.github.com/users/kihwal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kihwal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kihwal/subscriptions",
        "organizations_url": "https://api.github.com/users/kihwal/orgs",
        "repos_url": "https://api.github.com/users/kihwal/repos",
        "events_url": "https://api.github.com/users/kihwal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kihwal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "5b57f9cae452039385e0c6d4c371fc01539f37d7",
            "url": "https://api.github.com/repos/apache/hadoop/commits/5b57f9cae452039385e0c6d4c371fc01539f37d7",
            "html_url": "https://github.com/apache/hadoop/commit/5b57f9cae452039385e0c6d4c371fc01539f37d7"
        }
    ],
    "stats": {
        "total": 44,
        "additions": 43,
        "deletions": 1
    },
    "files": [
        {
            "sha": "a3b5b0bbd94e3675c4bdd2f3235cc024cce83a7a",
            "filename": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
            "status": "modified",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/apache/hadoop/blob/eaa2b8035b584dfcf7c79a33484eb2dffd3fdb11/hadoop-common-project%2Fhadoop-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fhadoop%2Futil%2FRunJar.java",
            "raw_url": "https://github.com/apache/hadoop/raw/eaa2b8035b584dfcf7c79a33484eb2dffd3fdb11/hadoop-common-project%2Fhadoop-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fhadoop%2Futil%2FRunJar.java",
            "contents_url": "https://api.github.com/repos/apache/hadoop/contents/hadoop-common-project%2Fhadoop-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fhadoop%2Futil%2FRunJar.java?ref=eaa2b8035b584dfcf7c79a33484eb2dffd3fdb11",
            "patch": "@@ -93,6 +93,7 @@ public static void unJar(File jarFile, File toDir, Pattern unpackRegex)\n     throws IOException {\n     JarFile jar = new JarFile(jarFile);\n     try {\n+      String targetDirPath = toDir.getCanonicalPath() + File.separator;\n       Enumeration<JarEntry> entries = jar.entries();\n       while (entries.hasMoreElements()) {\n         final JarEntry entry = entries.nextElement();\n@@ -102,6 +103,10 @@ public static void unJar(File jarFile, File toDir, Pattern unpackRegex)\n           try {\n             File file = new File(toDir, entry.getName());\n             ensureDirectory(file.getParentFile());\n+            if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n+              throw new IOException(\"expanding \" + entry.getName()\n+                  + \" would create file outside of \" + toDir);\n+            }\n             OutputStream out = new FileOutputStream(file);\n             try {\n               IOUtils.copyBytes(in, out, 8192);"
        },
        {
            "sha": "b2a65379edae923fcc7e9b3b3d3d0eb3cbaccf97",
            "filename": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java",
            "status": "modified",
            "additions": 38,
            "deletions": 1,
            "changes": 39,
            "blob_url": "https://github.com/apache/hadoop/blob/eaa2b8035b584dfcf7c79a33484eb2dffd3fdb11/hadoop-common-project%2Fhadoop-common%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fhadoop%2Futil%2FTestRunJar.java",
            "raw_url": "https://github.com/apache/hadoop/raw/eaa2b8035b584dfcf7c79a33484eb2dffd3fdb11/hadoop-common-project%2Fhadoop-common%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fhadoop%2Futil%2FTestRunJar.java",
            "contents_url": "https://api.github.com/repos/apache/hadoop/contents/hadoop-common-project%2Fhadoop-common%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fhadoop%2Futil%2FTestRunJar.java?ref=eaa2b8035b584dfcf7c79a33484eb2dffd3fdb11",
            "patch": "@@ -17,6 +17,7 @@\n  */\n package org.apache.hadoop.util;\n \n+import static org.junit.Assert.fail;\n import static org.mockito.Mockito.spy;\n import static org.mockito.Mockito.when;\n \n@@ -25,13 +26,16 @@\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.jar.JarEntry;\n import java.util.jar.JarOutputStream;\n import java.util.regex.Pattern;\n import java.util.zip.ZipEntry;\n \n import junit.framework.TestCase;\n \n import org.apache.hadoop.fs.FileUtil;\n+import org.apache.hadoop.test.GenericTestUtils;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -169,4 +173,37 @@ private File makeClassLoaderTestJar(String... clsNames) throws IOException {\n \n     return jarFile;\n   }\n-}\n\\ No newline at end of file\n+\n+  @Test\n+  public void testUnJar2() throws IOException {\n+    // make a simple zip\n+    File jarFile = new File(TEST_ROOT_DIR, TEST_JAR_NAME);\n+    JarOutputStream jstream =\n+        new JarOutputStream(new FileOutputStream(jarFile));\n+    JarEntry je = new JarEntry(\"META-INF/MANIFEST.MF\");\n+    byte[] data = \"Manifest-Version: 1.0\\nCreated-By: 1.8.0_1 (Manual)\"\n+        .getBytes(StandardCharsets.UTF_8);\n+    je.setSize(data.length);\n+    jstream.putNextEntry(je);\n+    jstream.write(data);\n+    jstream.closeEntry();\n+    je = new JarEntry(\"../outside.path\");\n+    data = \"any data here\".getBytes(StandardCharsets.UTF_8);\n+    je.setSize(data.length);\n+    jstream.putNextEntry(je);\n+    jstream.write(data);\n+    jstream.closeEntry();\n+    jstream.close();\n+\n+    File unjarDir = new File(TEST_ROOT_DIR, \"unjar-path\");\n+\n+    // Unjar everything\n+    try {\n+      RunJar.unJar(jarFile, unjarDir);\n+      fail(\"unJar should throw IOException.\");\n+    } catch (IOException e) {\n+      GenericTestUtils.assertExceptionContains(\n+          \"would create file outside of\", e);\n+    }\n+  }\n+}"
        }
    ]
}