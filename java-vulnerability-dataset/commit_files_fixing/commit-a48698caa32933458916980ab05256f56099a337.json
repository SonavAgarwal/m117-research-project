{
    "sha": "a48698caa32933458916980ab05256f56099a337",
    "node_id": "MDY6Q29tbWl0MTExMjU1ODk6YTQ4Njk4Y2FhMzI5MzM0NTg5MTY5ODBhYjA1MjU2ZjU2MDk5YTMzNw==",
    "commit": {
        "author": {
            "name": "mposolda",
            "email": "mposolda@gmail.com",
            "date": "2019-03-07T07:22:53Z"
        },
        "committer": {
            "name": "Marek Posolda",
            "email": "mposolda@gmail.com",
            "date": "2019-03-15T22:11:47Z"
        },
        "message": "KEYCLOAK-6056 Map user by Subject Alternative Name (otherName) when authenticating user with X509",
        "tree": {
            "sha": "8bc8c76e7bbaf67fbe28ae6495e986021b48b6f5",
            "url": "https://api.github.com/repos/keycloak/keycloak/git/trees/8bc8c76e7bbaf67fbe28ae6495e986021b48b6f5"
        },
        "url": "https://api.github.com/repos/keycloak/keycloak/git/commits/a48698caa32933458916980ab05256f56099a337",
        "comment_count": 1,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/keycloak/keycloak/commits/a48698caa32933458916980ab05256f56099a337",
    "html_url": "https://github.com/keycloak/keycloak/commit/a48698caa32933458916980ab05256f56099a337",
    "comments_url": "https://api.github.com/repos/keycloak/keycloak/commits/a48698caa32933458916980ab05256f56099a337/comments",
    "author": {
        "login": "mposolda",
        "id": 1223965,
        "node_id": "MDQ6VXNlcjEyMjM5NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1223965?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mposolda",
        "html_url": "https://github.com/mposolda",
        "followers_url": "https://api.github.com/users/mposolda/followers",
        "following_url": "https://api.github.com/users/mposolda/following{/other_user}",
        "gists_url": "https://api.github.com/users/mposolda/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mposolda/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mposolda/subscriptions",
        "organizations_url": "https://api.github.com/users/mposolda/orgs",
        "repos_url": "https://api.github.com/users/mposolda/repos",
        "events_url": "https://api.github.com/users/mposolda/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mposolda/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "mposolda",
        "id": 1223965,
        "node_id": "MDQ6VXNlcjEyMjM5NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1223965?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mposolda",
        "html_url": "https://github.com/mposolda",
        "followers_url": "https://api.github.com/users/mposolda/followers",
        "following_url": "https://api.github.com/users/mposolda/following{/other_user}",
        "gists_url": "https://api.github.com/users/mposolda/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mposolda/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mposolda/subscriptions",
        "organizations_url": "https://api.github.com/users/mposolda/orgs",
        "repos_url": "https://api.github.com/users/mposolda/repos",
        "events_url": "https://api.github.com/users/mposolda/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mposolda/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "cf35a4648bcb93aaf1ac63918ee5c4b0f422d7d5",
            "url": "https://api.github.com/repos/keycloak/keycloak/commits/cf35a4648bcb93aaf1ac63918ee5c4b0f422d7d5",
            "html_url": "https://github.com/keycloak/keycloak/commit/cf35a4648bcb93aaf1ac63918ee5c4b0f422d7d5"
        }
    ],
    "stats": {
        "total": 464,
        "additions": 373,
        "deletions": 91
    },
    "files": [
        {
            "sha": "930cea310a04c409f4423bceb28356dfb908c166",
            "filename": "services/src/main/java/org/keycloak/authentication/authenticators/x509/AbstractX509ClientCertificateAuthenticator.java",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/keycloak/keycloak/blob/a48698caa32933458916980ab05256f56099a337/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Fauthenticators%2Fx509%2FAbstractX509ClientCertificateAuthenticator.java",
            "raw_url": "https://github.com/keycloak/keycloak/raw/a48698caa32933458916980ab05256f56099a337/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Fauthenticators%2Fx509%2FAbstractX509ClientCertificateAuthenticator.java",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Fauthenticators%2Fx509%2FAbstractX509ClientCertificateAuthenticator.java?ref=a48698caa32933458916980ab05256f56099a337",
            "patch": "@@ -59,6 +59,7 @@ public abstract class AbstractX509ClientCertificateAuthenticator implements Auth\n     public static final String MAPPING_SOURCE_CERT_SUBJECTDN = \"Match SubjectDN using regular expression\";\n     public static final String MAPPING_SOURCE_CERT_SUBJECTDN_EMAIL = \"Subject's e-mail\";\n     public static final String MAPPING_SOURCE_CERT_SUBJECTALTNAME_EMAIL = \"Subject's Alternative Name E-mail\";\n+    public static final String MAPPING_SOURCE_CERT_SUBJECTALTNAME_OTHERNAME = \"Subject's Alternative Name otherName (UPN)\";\n     public static final String MAPPING_SOURCE_CERT_SUBJECTDN_CN = \"Subject's Common Name\";\n     public static final String MAPPING_SOURCE_CERT_ISSUERDN = \"Match IssuerDN using regular expression\";\n     public static final String MAPPING_SOURCE_CERT_ISSUERDN_EMAIL = \"Issuer's e-mail\";\n@@ -152,6 +153,9 @@ static UserIdentityExtractor fromConfig(X509AuthenticatorConfigModel config) {\n                 case SUBJECTALTNAME_EMAIL:\n                     extractor = UserIdentityExtractor.getSubjectAltNameExtractor(1);\n                     break;\n+                case SUBJECTALTNAME_OTHERNAME:\n+                    extractor = UserIdentityExtractor.getSubjectAltNameExtractor(0);\n+                    break;\n                 case ISSUERDN_CN:\n                     extractor = UserIdentityExtractor.getX500NameExtractor(BCStyle.CN, issuer);\n                     break;"
        },
        {
            "sha": "ea77149e81ef658f083d7d69143395bfabffb242",
            "filename": "services/src/main/java/org/keycloak/authentication/authenticators/x509/AbstractX509ClientCertificateAuthenticatorFactory.java",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/keycloak/keycloak/blob/a48698caa32933458916980ab05256f56099a337/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Fauthenticators%2Fx509%2FAbstractX509ClientCertificateAuthenticatorFactory.java",
            "raw_url": "https://github.com/keycloak/keycloak/raw/a48698caa32933458916980ab05256f56099a337/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Fauthenticators%2Fx509%2FAbstractX509ClientCertificateAuthenticatorFactory.java",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Fauthenticators%2Fx509%2FAbstractX509ClientCertificateAuthenticatorFactory.java?ref=a48698caa32933458916980ab05256f56099a337",
            "patch": "@@ -44,6 +44,7 @@\n import static org.keycloak.authentication.authenticators.x509.AbstractX509ClientCertificateAuthenticator.MAPPING_SOURCE_CERT_ISSUERDN_EMAIL;\n import static org.keycloak.authentication.authenticators.x509.AbstractX509ClientCertificateAuthenticator.MAPPING_SOURCE_CERT_SERIALNUMBER;\n import static org.keycloak.authentication.authenticators.x509.AbstractX509ClientCertificateAuthenticator.MAPPING_SOURCE_CERT_SUBJECTALTNAME_EMAIL;\n+import static org.keycloak.authentication.authenticators.x509.AbstractX509ClientCertificateAuthenticator.MAPPING_SOURCE_CERT_SUBJECTALTNAME_OTHERNAME;\n import static org.keycloak.authentication.authenticators.x509.AbstractX509ClientCertificateAuthenticator.MAPPING_SOURCE_CERT_SUBJECTDN;\n import static org.keycloak.authentication.authenticators.x509.AbstractX509ClientCertificateAuthenticator.MAPPING_SOURCE_CERT_SUBJECTDN_CN;\n import static org.keycloak.authentication.authenticators.x509.AbstractX509ClientCertificateAuthenticator.MAPPING_SOURCE_CERT_SUBJECTDN_EMAIL;\n@@ -72,6 +73,7 @@ public abstract class AbstractX509ClientCertificateAuthenticatorFactory implemen\n             MAPPING_SOURCE_CERT_SUBJECTDN,\n             MAPPING_SOURCE_CERT_SUBJECTDN_EMAIL,\n             MAPPING_SOURCE_CERT_SUBJECTALTNAME_EMAIL,\n+            MAPPING_SOURCE_CERT_SUBJECTALTNAME_OTHERNAME,\n             MAPPING_SOURCE_CERT_SUBJECTDN_CN,\n             MAPPING_SOURCE_CERT_ISSUERDN,\n             MAPPING_SOURCE_CERT_ISSUERDN_EMAIL,"
        },
        {
            "sha": "e44453b248fdcbca071896b44e0360b2ca331d04",
            "filename": "services/src/main/java/org/keycloak/authentication/authenticators/x509/UserIdentityExtractor.java",
            "status": "modified",
            "additions": 71,
            "deletions": 2,
            "changes": 73,
            "blob_url": "https://github.com/keycloak/keycloak/blob/a48698caa32933458916980ab05256f56099a337/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Fauthenticators%2Fx509%2FUserIdentityExtractor.java",
            "raw_url": "https://github.com/keycloak/keycloak/raw/a48698caa32933458916980ab05256f56099a337/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Fauthenticators%2Fx509%2FUserIdentityExtractor.java",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Fauthenticators%2Fx509%2FUserIdentityExtractor.java?ref=a48698caa32933458916980ab05256f56099a337",
            "patch": "@@ -19,12 +19,18 @@\n package org.keycloak.authentication.authenticators.x509;\n \n import freemarker.template.utility.NullArgumentException;\n+import org.bouncycastle.asn1.ASN1Encodable;\n+import org.bouncycastle.asn1.ASN1InputStream;\n import org.bouncycastle.asn1.ASN1ObjectIdentifier;\n+import org.bouncycastle.asn1.ASN1Sequence;\n+import org.bouncycastle.asn1.ASN1TaggedObject;\n+import org.bouncycastle.asn1.DERUTF8String;\n import org.bouncycastle.asn1.x500.RDN;\n import org.bouncycastle.asn1.x500.X500Name;\n import org.bouncycastle.asn1.x500.style.IETFUtils;\n import org.keycloak.services.ServicesLogger;\n \n+import java.io.ByteArrayInputStream;\n import java.security.cert.CertificateParsingException;\n import java.security.cert.X509Certificate;\n import java.util.Collection;\n@@ -101,6 +107,9 @@ public Object extractUserIdentity(X509Certificate[] certs) {\n      */\n     static class SubjectAltNameExtractor extends UserIdentityExtractor {\n \n+        // User Principal Name. Used typically by Microsoft in certificates for Smart Card Login\n+        private static final String UPN_OID = \"1.3.6.1.4.1.311.20.2.3\";\n+\n         private final int generalName;\n \n         /**\n@@ -127,19 +136,79 @@ public Object extractUserIdentity(X509Certificate[] certs) {\n \n                 Iterator<List<?>> iterator = subjectAlternativeNames.iterator();\n \n-                while (iterator.hasNext()) {\n+                boolean foundUpn = false;\n+                String tempOtherName = null;\n+                String tempOid = null;\n+\n+                while (iterator.hasNext() && !foundUpn) {\n                     List<?> next = iterator.next();\n \n                     if (Integer.class.cast(next.get(0)) == generalName) {\n-                        return next.get(1);\n+\n+                        // We will try to find UPN_OID among the subjectAltNames of type 'otherName' . Just if not found, we will fallback to the other type\n+                        for (int i = 1 ; i<next.size() ; i++) {\n+                            Object obj = next.get(i);\n+\n+                            // We have Subject Alternative Name of other type than 'otherName' . Just return it directly\n+                            if (generalName != 0) {\n+                                logger.tracef(\"Extracted identity '%s' from Subject Alternative Name of type '%d'\", obj, generalName);\n+                                return obj;\n+                            }\n+\n+                            byte[] otherNameBytes = (byte[]) obj;\n+\n+                            try {\n+                                ASN1InputStream asn1Stream = new ASN1InputStream(new ByteArrayInputStream(otherNameBytes));\n+                                ASN1Encodable asn1otherName = asn1Stream.readObject();\n+                                asn1otherName = unwrap(asn1otherName);\n+\n+                                ASN1Sequence asn1Sequence = ASN1Sequence.getInstance(asn1otherName);\n+\n+                                if (asn1Sequence != null) {\n+                                    ASN1Encodable encodedOid = asn1Sequence.getObjectAt(0);\n+                                    ASN1ObjectIdentifier oid = ASN1ObjectIdentifier.getInstance(unwrap(encodedOid));\n+                                    tempOid = oid.getId();\n+\n+                                    ASN1Encodable principalNameEncoded = asn1Sequence.getObjectAt(1);\n+                                    DERUTF8String principalName = DERUTF8String.getInstance(unwrap(principalNameEncoded));\n+\n+                                    tempOtherName = principalName.getString();\n+\n+                                    // We found UPN among the 'otherName' principal. We don't need to look other\n+                                    if (UPN_OID.equals(tempOid)) {\n+                                        foundUpn = true;\n+                                        break;\n+                                    }\n+                                }\n+\n+                            } catch (Exception e) {\n+                                logger.error(\"Failed to parse subjectAltName\", e);\n+                            }\n+                        }\n+\n                     }\n                 }\n+\n+                logger.tracef(\"Parsed otherName from subjectAltName. OID: '%s', Principal: '%s'\", tempOid, tempOtherName);\n+\n+                return tempOtherName;\n+\n             } catch (CertificateParsingException cause) {\n                 logger.errorf(cause, \"Failed to obtain identity from subjectAltName extension\");\n             }\n \n             return null;\n         }\n+\n+\n+        private ASN1Encodable unwrap(ASN1Encodable encodable) {\n+            while (encodable instanceof ASN1TaggedObject) {\n+                ASN1TaggedObject taggedObj = (ASN1TaggedObject) encodable;\n+                encodable = taggedObj.getObject();\n+            }\n+\n+            return encodable;\n+        }\n     }\n \n     static class PatternMatcher extends UserIdentityExtractor {"
        },
        {
            "sha": "ae50667663dd19c91f2d1da5c0d599d0a823e476",
            "filename": "services/src/main/java/org/keycloak/authentication/authenticators/x509/X509AuthenticatorConfigModel.java",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/keycloak/keycloak/blob/a48698caa32933458916980ab05256f56099a337/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Fauthenticators%2Fx509%2FX509AuthenticatorConfigModel.java",
            "raw_url": "https://github.com/keycloak/keycloak/raw/a48698caa32933458916980ab05256f56099a337/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Fauthenticators%2Fx509%2FX509AuthenticatorConfigModel.java",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Fauthenticators%2Fx509%2FX509AuthenticatorConfigModel.java?ref=a48698caa32933458916980ab05256f56099a337",
            "patch": "@@ -61,6 +61,7 @@ public enum MappingSourceType {\n         SUBJECTDN_CN(MAPPING_SOURCE_CERT_SUBJECTDN_CN),\n         SUBJECTDN_EMAIL(MAPPING_SOURCE_CERT_SUBJECTDN_EMAIL),\n         SUBJECTALTNAME_EMAIL(MAPPING_SOURCE_CERT_SUBJECTALTNAME_EMAIL),\n+        SUBJECTALTNAME_OTHERNAME(MAPPING_SOURCE_CERT_SUBJECTALTNAME_OTHERNAME),\n         SUBJECTDN(MAPPING_SOURCE_CERT_SUBJECTDN);\n \n         private String name;"
        },
        {
            "sha": "c03a54d56a82c8b6390352f114dd948f0714ed34",
            "filename": "services/src/test/java/org/keycloak/authentication/authenticators/x509/SubjectAltNameIdentityExtractorTest.java",
            "status": "added",
            "additions": 64,
            "deletions": 0,
            "changes": 64,
            "blob_url": "https://github.com/keycloak/keycloak/blob/a48698caa32933458916980ab05256f56099a337/services%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Fauthenticators%2Fx509%2FSubjectAltNameIdentityExtractorTest.java",
            "raw_url": "https://github.com/keycloak/keycloak/raw/a48698caa32933458916980ab05256f56099a337/services%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Fauthenticators%2Fx509%2FSubjectAltNameIdentityExtractorTest.java",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Fauthenticators%2Fx509%2FSubjectAltNameIdentityExtractorTest.java?ref=a48698caa32933458916980ab05256f56099a337",
            "patch": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.authentication.authenticators.x509;\n+\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.security.cert.X509Certificate;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.keycloak.common.util.PemUtils;\n+import org.keycloak.common.util.StreamUtil;\n+\n+/**\n+ * @author <a href=\"mailto:mposolda@redhat.com\">Marek Posolda</a>\n+ */\n+public class SubjectAltNameIdentityExtractorTest {\n+\n+    @Test\n+    public void testX509SubjectAltName_otherName() throws Exception {\n+        UserIdentityExtractor extractor = UserIdentityExtractor.getSubjectAltNameExtractor(0);\n+\n+        X509Certificate cert = getCertificate();\n+\n+        Object upn = extractor.extractUserIdentity(new X509Certificate[] { cert});\n+        Assert.assertEquals(\"test-user@some-company-domain\", upn);\n+    }\n+\n+\n+    @Test\n+    public void testX509SubjectAltName_email() throws Exception {\n+        UserIdentityExtractor extractor = UserIdentityExtractor.getSubjectAltNameExtractor(1);\n+\n+        X509Certificate cert = getCertificate();\n+\n+        Object upn = extractor.extractUserIdentity(new X509Certificate[] { cert});\n+        Assert.assertEquals(\"test@somecompany.com\", upn);\n+    }\n+\n+\n+    private X509Certificate getCertificate() throws Exception {\n+        InputStream is = getClass().getResourceAsStream(\"/certs/UPN-cert.pem\");\n+\n+        String s = StreamUtil.readString(is, Charset.defaultCharset());\n+\n+        return PemUtils.decodeCertificate(s);\n+    }\n+\n+\n+}"
        },
        {
            "sha": "23f9279429714c329bc115319ab27b8a34e7d06d",
            "filename": "services/src/test/resources/certs/UPN-cert.pem",
            "status": "added",
            "additions": 29,
            "deletions": 0,
            "changes": 29,
            "blob_url": "https://github.com/keycloak/keycloak/blob/a48698caa32933458916980ab05256f56099a337/services%2Fsrc%2Ftest%2Fresources%2Fcerts%2FUPN-cert.pem",
            "raw_url": "https://github.com/keycloak/keycloak/raw/a48698caa32933458916980ab05256f56099a337/services%2Fsrc%2Ftest%2Fresources%2Fcerts%2FUPN-cert.pem",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Ftest%2Fresources%2Fcerts%2FUPN-cert.pem?ref=a48698caa32933458916980ab05256f56099a337",
            "patch": "@@ -0,0 +1,29 @@\n+-----BEGIN CERTIFICATE-----\n+MIIE6DCCA9CgAwIBAgIBADANBgkqhkiG9w0BAQsFADCBpzELMAkGA1UEBhMCVVMx\n+HTAbBgNVBAgMFERpc3RyaWN0IG9mIENvbHVtYmlhMRMwEQYDVQQHDApXYXNoaW5n\n+dG9uMRUwEwYDVQQKDAxTb21lIENvbXBhbnkxGDAWBgNVBAsMD1NvbWUgRGVwYXJ0\n+bWVudDEQMA4GA1UEAwwHVGVzdCBDQTEhMB8GCSqGSIb3DQEJARYSY2FAc29tZWNv\n+bXBhbnkuY29tMB4XDTE0MDYxMjE3MDkxMloXDTI0MDYxMjE3MDkxMlowgZYxCzAJ\n+BgNVBAYTAlVTMR0wGwYDVQQIDBREaXN0cmljdCBvZiBDb2x1bWJpYTEVMBMGA1UE\n+CgwMU29tZSBDb21wYW55MRgwFgYDVQQLDA9Tb21lIERlcGFydG1lbnQxEjAQBgNV\n+BAMMCVRlc3QgVXNlcjEjMCEGCSqGSIb3DQEJARYUdGVzdEBzb21lY29tcGFueS5j\n+b20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQD42s0Q8YXv/rQrk4rF\n+4aHmuz8Tq9jWk3bU/tJoBgZTG2xCYfolT2z4j2Qa6kjXucEJuqOKihxMMZ1We0G4\n+I6tm5QJxqkEoUYmUZHu/QZSrH1gwgS0yjvfq+Kk+yvKqplXDUyxbLRuMBRgFRCy0\n+TUvdJPE4IQZQCcHir0Vqs667vj0UjSpI+y0BDZPY5CRePRSKcjM4ixoR9B8xj5kg\n+RcMxg4EszC2oK7z0IuuYKi0ZOdot1wVKP4OD/9evE2wjUYVeYCAV9y7tMlVsN0N5\n+dRplCSIa/CA5gTMod3C92t83VoPqfb0f71cNQAsx1V3dNtOKnTOoG5jX70RR4Rqk\n+8ItNAgMBAAGjggEsMIIBKDAJBgNVHRMEAjAAMBEGCWCGSAGG+EIBAQQEAwIFoDAL\n+BgNVHQ8EBAMCBeAwKwYJYIZIAYb4QgENBB4WHFNtYXJ0IENhcmQgTG9naW4gQ2Vy\n+dGlmaWNhdGUwHQYDVR0OBBYEFN1P5EBNqZ+MGrJQziiVMhkKAXr9MB8GA1UdIwQY\n+MBaAFCHrFg422S+AWOHXfPIdqxbRhXegME4GA1UdEQRHMEWBFHRlc3RAc29tZWNv\n+bXBhbnkuY29toC0GCisGAQQBgjcUAgOgHwwddGVzdC11c2VyQHNvbWUtY29tcGFu\n+eS1kb21haW4wHQYDVR0SBBYwFIESY2FAc29tZWNvbXBhbnkuY29tMB8GA1UdJQQY\n+MBYGCCsGAQUFBwMCBgorBgEEAYI3FAICMA0GCSqGSIb3DQEBCwUAA4IBAQCPI5Zk\n+DqGHkKfFhRjlzLLajUEveggs74x3roi6S0zlpXpbPA3iZ2N8COf/QZL3twKunbP9\n+XpmW/pcSji3+pil9aHPRn69S4cSuKdN5ZP9oQhkZxdk2UFS8Ts0WA+SUDJ3qTEtA\n+Q0HswBFBzWGOi0zkCtvAaBa8WSnDPtUN5RzmUtkKoMxBzu/MEMWNYXZyk/G2NHMJ\n+jh0N+ICpRNpnXGIZBwFymIRGH/PjtVkArVXy0hILWP/qfYzYMFgUBl0InyQzT0Hw\n+gzGdoeK7fVYrPWLK3ryRqqSR1XvfKFHwlnIg4XTBN4Cj7m5TmpntgVhO2JpNDjLr\n+K/NmtORHe6OhF17I\n+-----END CERTIFICATE-----\n\\ No newline at end of file"
        },
        {
            "sha": "4a00a127c4caf01f58df450997c15a4fb3da43af",
            "filename": "testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/certs/clients/test-user-san-email@localhost.cert.pem",
            "status": "removed",
            "additions": 0,
            "deletions": 38,
            "changes": 38,
            "blob_url": "https://github.com/keycloak/keycloak/blob/cf35a4648bcb93aaf1ac63918ee5c4b0f422d7d5/testsuite%2Fintegration-arquillian%2Fservers%2Fauth-server%2Fjboss%2Fcommon%2Fpki%2Froot%2Fca%2Fcerts%2Fclients%2Ftest-user-san-email%40localhost.cert.pem",
            "raw_url": "https://github.com/keycloak/keycloak/raw/cf35a4648bcb93aaf1ac63918ee5c4b0f422d7d5/testsuite%2Fintegration-arquillian%2Fservers%2Fauth-server%2Fjboss%2Fcommon%2Fpki%2Froot%2Fca%2Fcerts%2Fclients%2Ftest-user-san-email%40localhost.cert.pem",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Fservers%2Fauth-server%2Fjboss%2Fcommon%2Fpki%2Froot%2Fca%2Fcerts%2Fclients%2Ftest-user-san-email%40localhost.cert.pem?ref=cf35a4648bcb93aaf1ac63918ee5c4b0f422d7d5",
            "patch": "@@ -1,38 +0,0 @@\n------BEGIN CERTIFICATE-----\n-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\n------END CERTIFICATE-----"
        },
        {
            "sha": "cf12f0c9cdc21d02bcf92280b4489c2388621baf",
            "filename": "testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/certs/clients/test-user-san@localhost.cert.pem",
            "status": "added",
            "additions": 41,
            "deletions": 0,
            "changes": 41,
            "blob_url": "https://github.com/keycloak/keycloak/blob/a48698caa32933458916980ab05256f56099a337/testsuite%2Fintegration-arquillian%2Fservers%2Fauth-server%2Fjboss%2Fcommon%2Fpki%2Froot%2Fca%2Fcerts%2Fclients%2Ftest-user-san%40localhost.cert.pem",
            "raw_url": "https://github.com/keycloak/keycloak/raw/a48698caa32933458916980ab05256f56099a337/testsuite%2Fintegration-arquillian%2Fservers%2Fauth-server%2Fjboss%2Fcommon%2Fpki%2Froot%2Fca%2Fcerts%2Fclients%2Ftest-user-san%40localhost.cert.pem",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Fservers%2Fauth-server%2Fjboss%2Fcommon%2Fpki%2Froot%2Fca%2Fcerts%2Fclients%2Ftest-user-san%40localhost.cert.pem?ref=a48698caa32933458916980ab05256f56099a337",
            "patch": "@@ -0,0 +1,41 @@\n+-----BEGIN CERTIFICATE-----\n+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\n+-----END CERTIFICATE-----"
        },
        {
            "sha": "4aa422bc2e1a5f4a8c2d7117c597c5213b17dea3",
            "filename": "testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/certs/clients/test-user-san@localhost.p12",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/keycloak/keycloak/blob/a48698caa32933458916980ab05256f56099a337/testsuite%2Fintegration-arquillian%2Fservers%2Fauth-server%2Fjboss%2Fcommon%2Fpki%2Froot%2Fca%2Fcerts%2Fclients%2Ftest-user-san%40localhost.p12",
            "raw_url": "https://github.com/keycloak/keycloak/raw/a48698caa32933458916980ab05256f56099a337/testsuite%2Fintegration-arquillian%2Fservers%2Fauth-server%2Fjboss%2Fcommon%2Fpki%2Froot%2Fca%2Fcerts%2Fclients%2Ftest-user-san%40localhost.p12",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Fservers%2Fauth-server%2Fjboss%2Fcommon%2Fpki%2Froot%2Fca%2Fcerts%2Fclients%2Ftest-user-san%40localhost.p12?ref=a48698caa32933458916980ab05256f56099a337"
        },
        {
            "sha": "2b7c9acd9b26f8a081cb83bbb04af14cf8a3b965",
            "filename": "testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/openssl-san.cnf",
            "status": "modified",
            "additions": 13,
            "deletions": 4,
            "changes": 17,
            "blob_url": "https://github.com/keycloak/keycloak/blob/a48698caa32933458916980ab05256f56099a337/testsuite%2Fintegration-arquillian%2Fservers%2Fauth-server%2Fjboss%2Fcommon%2Fpki%2Froot%2Fca%2Fintermediate%2Fopenssl-san.cnf",
            "raw_url": "https://github.com/keycloak/keycloak/raw/a48698caa32933458916980ab05256f56099a337/testsuite%2Fintegration-arquillian%2Fservers%2Fauth-server%2Fjboss%2Fcommon%2Fpki%2Froot%2Fca%2Fintermediate%2Fopenssl-san.cnf",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Fservers%2Fauth-server%2Fjboss%2Fcommon%2Fpki%2Froot%2Fca%2Fintermediate%2Fopenssl-san.cnf?ref=a48698caa32933458916980ab05256f56099a337",
            "patch": "@@ -84,7 +84,8 @@ stateOrProvinceName_default     = MA\n localityName_default            = Boston\n 0.organizationName_default      = Red Hat\n organizationalUnitName_default  = Keycloak\n-emailAddress_default            = contact@keycloak.org\n+commonName_default              = test-user\n+emailAddress_default            = test-user@localhost\n \n [ v3_ca ]\n # Extensions for a typical CA (`man x509v3_config`).\n@@ -106,13 +107,21 @@ basicConstraints = CA:FALSE\n nsCertType = client, email\n nsComment = \"OpenSSL Generated Client Certificate\"\n subjectKeyIdentifier = hash\n-authorityKeyIdentifier = keyid,issuer\n+#authorityKeyIdentifier = keyid,issuer\n keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment\n extendedKeyUsage = clientAuth, emailProtection\n crlDistributionPoints = URI:http://localhost:8888/crl                                                    \n authorityInfoAccess = OCSP;URI:http://localhost:8888/oscp\n-subjectAltName=email:copy\n-subjectAltName=email:move\n+subjectAltName=@user_subject_alt_names\n+\n+[ user_subject_alt_names ]\n+email = test-user-altmail@localhost\n+IP = 192.168.7.1\n+DNS = www.example-test.com\n+URI = http://www.example-test.com\n+otherName.1 = 1.2.3.4;UTF8:my_test_user\n+otherName.2 = 1.3.6.1.4.1.311.20.2.3;UTF8:test_upn_name@localhost\n+\n \n [ server_cert ]\n # Extensions for server certificates (`man x509v3_config`)."
        },
        {
            "sha": "fb35a14c0271683ad34c62504c4e24680b7a4e34",
            "filename": "testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/serial",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/keycloak/keycloak/blob/a48698caa32933458916980ab05256f56099a337/testsuite%2Fintegration-arquillian%2Fservers%2Fauth-server%2Fjboss%2Fcommon%2Fpki%2Froot%2Fca%2Fintermediate%2Fserial",
            "raw_url": "https://github.com/keycloak/keycloak/raw/a48698caa32933458916980ab05256f56099a337/testsuite%2Fintegration-arquillian%2Fservers%2Fauth-server%2Fjboss%2Fcommon%2Fpki%2Froot%2Fca%2Fintermediate%2Fserial",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Fservers%2Fauth-server%2Fjboss%2Fcommon%2Fpki%2Froot%2Fca%2Fintermediate%2Fserial?ref=a48698caa32933458916980ab05256f56099a337",
            "patch": "@@ -1 +1 @@\n-1001\n+1007"
        },
        {
            "sha": "4270d8e9ff3afc04d8f4fe7801ac00e497aec894",
            "filename": "testsuite/integration-arquillian/servers/auth-server/jboss/pom.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/keycloak/keycloak/blob/a48698caa32933458916980ab05256f56099a337/testsuite%2Fintegration-arquillian%2Fservers%2Fauth-server%2Fjboss%2Fpom.xml",
            "raw_url": "https://github.com/keycloak/keycloak/raw/a48698caa32933458916980ab05256f56099a337/testsuite%2Fintegration-arquillian%2Fservers%2Fauth-server%2Fjboss%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Fservers%2Fauth-server%2Fjboss%2Fpom.xml?ref=a48698caa32933458916980ab05256f56099a337",
            "patch": "@@ -195,7 +195,7 @@\n                                         <resource>\n                                             <directory>${common.resources}/pki/root/ca</directory>\n                                             <includes>\n-                                                <include>certs/clients/test-user-san-email@localhost.cert.pem</include>\n+                                                <include>certs/clients/test-user-san@localhost.cert.pem</include>\n                                                 <include>certs/clients/test-user@localhost.key.pem</include>\n                                             </includes>\n                                         </resource>"
        },
        {
            "sha": "ad2b506391b518d87389b765ec3977154ee356e7",
            "filename": "testsuite/integration-arquillian/servers/auth-server/undertow/pom.xml",
            "status": "modified",
            "additions": 6,
            "deletions": 0,
            "changes": 6,
            "blob_url": "https://github.com/keycloak/keycloak/blob/a48698caa32933458916980ab05256f56099a337/testsuite%2Fintegration-arquillian%2Fservers%2Fauth-server%2Fundertow%2Fpom.xml",
            "raw_url": "https://github.com/keycloak/keycloak/raw/a48698caa32933458916980ab05256f56099a337/testsuite%2Fintegration-arquillian%2Fservers%2Fauth-server%2Fundertow%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Fservers%2Fauth-server%2Fundertow%2Fpom.xml?ref=a48698caa32933458916980ab05256f56099a337",
            "patch": "@@ -88,6 +88,12 @@\n             <resource>\n                 <directory>${common.resources}/keystore</directory>\n             </resource>\n+            <resource>\n+                <directory>${common.resources}/pki/root/ca</directory>\n+                <includes>\n+                    <include>certs/clients/*</include>\n+                </includes>\n+            </resource>\n         </resources>\n     </build>\n "
        },
        {
            "sha": "e73fcee258886e0a936215a4566a360bc4a2668d",
            "filename": "testsuite/integration-arquillian/tests/base/pom.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/keycloak/keycloak/blob/a48698caa32933458916980ab05256f56099a337/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fpom.xml",
            "raw_url": "https://github.com/keycloak/keycloak/raw/a48698caa32933458916980ab05256f56099a337/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fpom.xml?ref=a48698caa32933458916980ab05256f56099a337",
            "patch": "@@ -273,7 +273,7 @@\n                                     <outputDirectory>${containers.home}/auth-server-undertow</outputDirectory>\n                                 </artifactItem>\n                             </artifactItems>\n-                            <includes>*.jks,*.crt,*.truststore</includes>\n+                            <includes>*.jks,*.crt,*.truststore,*.crl,*.key,certs/clients/*</includes>\n                         </configuration>\n                     </execution>\n                 </executions>"
        },
        {
            "sha": "ebc2c5997cb47e2fde98caaf65e911eda24a1d39",
            "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/AbstractX509AuthenticationTest.java",
            "status": "modified",
            "additions": 41,
            "deletions": 15,
            "changes": 56,
            "blob_url": "https://github.com/keycloak/keycloak/blob/a48698caa32933458916980ab05256f56099a337/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fx509%2FAbstractX509AuthenticationTest.java",
            "raw_url": "https://github.com/keycloak/keycloak/raw/a48698caa32933458916980ab05256f56099a337/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fx509%2FAbstractX509AuthenticationTest.java",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fx509%2FAbstractX509AuthenticationTest.java?ref=a48698caa32933458916980ab05256f56099a337",
            "patch": "@@ -49,7 +49,6 @@\n import org.keycloak.testsuite.util.AssertAdminEvents;\n import org.keycloak.testsuite.util.ClientBuilder;\n import org.keycloak.testsuite.util.DroneUtils;\n-import org.keycloak.testsuite.util.PhantomJSBrowser;\n import org.keycloak.testsuite.util.RealmBuilder;\n import org.keycloak.testsuite.util.UserBuilder;\n import org.openqa.selenium.WebDriver;\n@@ -68,6 +67,7 @@\n import static org.keycloak.authentication.authenticators.x509.X509AuthenticatorConfigModel.MappingSourceType.ISSUERDN;\n import static org.keycloak.authentication.authenticators.x509.X509AuthenticatorConfigModel.MappingSourceType.ISSUERDN_CN;\n import static org.keycloak.authentication.authenticators.x509.X509AuthenticatorConfigModel.MappingSourceType.SUBJECTALTNAME_EMAIL;\n+import static org.keycloak.authentication.authenticators.x509.X509AuthenticatorConfigModel.MappingSourceType.SUBJECTALTNAME_OTHERNAME;\n import static org.keycloak.authentication.authenticators.x509.X509AuthenticatorConfigModel.MappingSourceType.SUBJECTDN_CN;\n import static org.keycloak.authentication.authenticators.x509.X509AuthenticatorConfigModel.MappingSourceType.SUBJECTDN_EMAIL;\n \n@@ -117,24 +117,39 @@ public void validateConfiguration() {\n         Assume.assumeTrue(AUTH_SERVER_SSL_REQUIRED);\n     }\n \n+\n     @BeforeClass\n     public static void onBeforeTestClass() {\n-        if (isAuthServerJBoss()) {\n-            String authServerHome = System.getProperty(\"auth.server.home\");\n+        configurePhantomJS(\"/ca.crt\", \"/client.crt\", \"/client.key\", \"secret\");\n+    }\n \n-            if (authServerHome != null && System.getProperty(\"auth.server.ssl.required\") != null) {\n-                authServerHome = authServerHome + \"/standalone/configuration\";\n-                StringBuilder cliArgs = new StringBuilder();\n \n-                cliArgs.append(\"--ignore-ssl-errors=true \");\n-                cliArgs.append(\"--web-security=false \");\n-                cliArgs.append(\"--ssl-certificates-path=\").append(authServerHome).append(\"/ca.crt \");\n-                cliArgs.append(\"--ssl-client-certificate-file=\").append(authServerHome).append(\"/client.crt \");\n-                cliArgs.append(\"--ssl-client-key-file=\").append(authServerHome).append(\"/client.key \");\n-                cliArgs.append(\"--ssl-client-key-passphrase=secret \");\n+    /**\n+     * Setup phantom JS to be used for mutual TLS testing. All file paths are relative to \"authServerHome\"\n+     *\n+     * @param certificatesPath\n+     * @param clientCertificateFile\n+     * @param clientKeyFile\n+     * @param clientKeyPassword\n+     */\n+    protected static void configurePhantomJS(String certificatesPath, String clientCertificateFile, String clientKeyFile, String clientKeyPassword) {\n+        String authServerHome = System.getProperty(\"auth.server.home\");\n \n-                System.setProperty(\"keycloak.phantomjs.cli.args\", cliArgs.toString());\n+        if (authServerHome != null && System.getProperty(\"auth.server.ssl.required\") != null) {\n+            if (isAuthServerJBoss()) {\n+                authServerHome = authServerHome + \"/standalone/configuration\";\n             }\n+\n+            StringBuilder cliArgs = new StringBuilder();\n+\n+            cliArgs.append(\"--ignore-ssl-errors=true \");\n+            cliArgs.append(\"--web-security=false \");\n+            cliArgs.append(\"--ssl-certificates-path=\").append(authServerHome).append(certificatesPath).append(\" \");\n+            cliArgs.append(\"--ssl-client-certificate-file=\").append(authServerHome).append(clientCertificateFile).append(\" \");\n+            cliArgs.append(\"--ssl-client-key-file=\").append(authServerHome).append(clientKeyFile).append(\" \");\n+            cliArgs.append(\"--ssl-client-key-passphrase=\" + clientKeyPassword).append(\" \");\n+\n+            System.setProperty(\"keycloak.phantomjs.cli.args\", cliArgs.toString());\n         }\n     }\n \n@@ -183,6 +198,8 @@ public void configureFlows() {\n         userId = user.getId();\n \n         user.singleAttribute(\"x509_certificate_identity\",\"-\");\n+        user.singleAttribute(\"alternative_email\", \"test-user-altmail@localhost\");\n+        user.singleAttribute(\"upn\", \"test_upn_name@localhost\");\n         updateUser(user);\n     }\n \n@@ -343,11 +360,20 @@ protected static X509AuthenticatorConfigModel createLoginSubjectEmail2UsernameOr\n                 .setUserIdentityMapperType(USERNAME_EMAIL);\n     }\n \n-    protected static X509AuthenticatorConfigModel createLoginSubjectAltNameEmail2UsernameOrEmailConfig() {\n+    protected static X509AuthenticatorConfigModel createLoginSubjectAltNameEmail2UserAttributeConfig() {\n         return new X509AuthenticatorConfigModel()\n                 .setConfirmationPageAllowed(true)\n                 .setMappingSourceType(SUBJECTALTNAME_EMAIL)\n-                .setUserIdentityMapperType(USERNAME_EMAIL);\n+                .setUserIdentityMapperType(USER_ATTRIBUTE)\n+                .setCustomAttributeName(\"alternative_email\");\n+    }\n+\n+    protected static X509AuthenticatorConfigModel createLoginSubjectAltNameOtherName2UserAttributeConfig() {\n+        return new X509AuthenticatorConfigModel()\n+                .setConfirmationPageAllowed(true)\n+                .setMappingSourceType(SUBJECTALTNAME_OTHERNAME)\n+                .setUserIdentityMapperType(USER_ATTRIBUTE)\n+                .setCustomAttributeName(\"upn\");\n     }\n \n     protected static X509AuthenticatorConfigModel createLoginSubjectEmailWithKeyUsage(String keyUsage) {"
        },
        {
            "sha": "86110beb25d47455ff892b861f44b1f4a4f7a925",
            "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/X509BrowserLoginSubjectAltNameTest.java",
            "status": "renamed",
            "additions": 11,
            "deletions": 21,
            "changes": 32,
            "blob_url": "https://github.com/keycloak/keycloak/blob/a48698caa32933458916980ab05256f56099a337/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fx509%2FX509BrowserLoginSubjectAltNameTest.java",
            "raw_url": "https://github.com/keycloak/keycloak/raw/a48698caa32933458916980ab05256f56099a337/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fx509%2FX509BrowserLoginSubjectAltNameTest.java",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fx509%2FX509BrowserLoginSubjectAltNameTest.java?ref=a48698caa32933458916980ab05256f56099a337",
            "patch": "@@ -39,7 +39,7 @@\n  * @date 8/12/2016\n  */\n \n-public class X509BrowserLoginSubjectAltNameEmailTest extends AbstractX509AuthenticationTest {\n+public class X509BrowserLoginSubjectAltNameTest extends AbstractX509AuthenticationTest {\n \n     @Page\n     @PhantomJSBrowser\n@@ -64,23 +64,8 @@ public void replaceTheDefaultDriver() {\n \n     @BeforeClass\n     public static void onBeforeTestClass() {\n-        if (Boolean.parseBoolean(System.getProperty(\"auth.server.jboss\"))) {\n-            String authServerHome = System.getProperty(\"auth.server.home\");\n-\n-            if (authServerHome != null && System.getProperty(\"auth.server.ssl.required\") != null) {\n-                authServerHome = authServerHome + \"/standalone/configuration\";\n-                StringBuilder cliArgs = new StringBuilder();\n-\n-                cliArgs.append(\"--ignore-ssl-errors=true \");\n-                cliArgs.append(\"--web-security=false \");\n-                cliArgs.append(\"--ssl-certificates-path=\" + authServerHome + \"/ca.crt \");\n-                cliArgs.append(\"--ssl-client-certificate-file=\" + authServerHome + \"/certs/clients/test-user-san-email@localhost.cert.pem \");\n-                cliArgs.append(\"--ssl-client-key-file=\" + authServerHome + \"/certs/clients/test-user@localhost.key.pem \");\n-                cliArgs.append(\"--ssl-client-key-passphrase=password\");\n-\n-                System.setProperty(\"keycloak.phantomjs.cli.args\", cliArgs.toString());\n-            }\n-        }\n+        configurePhantomJS(\"/ca.crt\", \"/certs/clients/test-user-san@localhost.cert.pem\",\n+                \"/certs/clients/test-user@localhost.key.pem\", \"password\");\n     }\n \n     private void login(X509AuthenticatorConfigModel config, String userId, String username, String attemptedUsername) {\n@@ -91,7 +76,7 @@ private void login(X509AuthenticatorConfigModel config, String userId, String us\n \n         loginConfirmationPage.open();\n \n-        Assert.assertTrue(loginConfirmationPage.getSubjectDistinguishedNameText().equals(\"CN=test-user, OU=Keycloak, O=Red Hat, L=Boston, ST=MA, C=US\"));\n+        Assert.assertEquals(\"EMAILADDRESS=test-user@localhost, CN=test-user, OU=Keycloak, O=Red Hat, L=Boston, ST=MA, C=US\", loginConfirmationPage.getSubjectDistinguishedNameText());\n         Assert.assertEquals(username, loginConfirmationPage.getUsernameText());\n \n         loginConfirmationPage.confirm();\n@@ -107,7 +92,12 @@ private void login(X509AuthenticatorConfigModel config, String userId, String us\n     }\n \n     @Test\n-    public void loginAsUserFromCertSubjectEmail() {\n-        login(createLoginSubjectAltNameEmail2UsernameOrEmailConfig(), userId, \"test-user@localhost\", \"test-user@localhost\");\n+    public void loginAsUserFromCertSANEmail() {\n+        login(createLoginSubjectAltNameEmail2UserAttributeConfig(), userId, \"test-user@localhost\", \"test-user-altmail@localhost\");\n+    }\n+\n+    @Test\n+    public void loginAsUserFromCertSANUpn() {\n+        login(createLoginSubjectAltNameOtherName2UserAttributeConfig(), userId, \"test-user@localhost\", \"test_upn_name@localhost\");\n     }\n }\n\\ No newline at end of file",
            "previous_filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/X509BrowserLoginSubjectAltNameEmailTest.java"
        },
        {
            "sha": "c78e542272e4face453bf37631aea00a15a6bd6c",
            "filename": "testsuite/utils/src/main/java/org/keycloak/testsuite/KeycloakServer.java",
            "status": "modified",
            "additions": 53,
            "deletions": 8,
            "changes": 61,
            "blob_url": "https://github.com/keycloak/keycloak/blob/a48698caa32933458916980ab05256f56099a337/testsuite%2Futils%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2FKeycloakServer.java",
            "raw_url": "https://github.com/keycloak/keycloak/raw/a48698caa32933458916980ab05256f56099a337/testsuite%2Futils%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2FKeycloakServer.java",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Futils%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2FKeycloakServer.java?ref=a48698caa32933458916980ab05256f56099a337",
            "patch": "@@ -39,9 +39,14 @@\n import org.keycloak.services.resources.KeycloakApplication;\n import org.keycloak.testsuite.util.cli.TestsuiteCLI;\n import org.keycloak.util.JsonSerialization;\n+import org.xnio.Options;\n+import org.xnio.SslClientAuthMode;\n \n+import javax.net.ssl.KeyManager;\n import javax.net.ssl.KeyManagerFactory;\n import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n import javax.servlet.DispatcherType;\n import java.io.File;\n import java.io.FileInputStream;\n@@ -380,7 +385,9 @@ public void start() throws Throwable {\n                 .setIoThreads(config.getWorkerThreads() / 8);\n \n         if (config.getPortHttps() != -1) {\n-            builder = builder.addHttpsListener(config.getPortHttps(), config.getHost(), createSSLContext());\n+            builder = builder\n+                    .addHttpsListener(config.getPortHttps(), config.getHost(), createSSLContext())\n+                    .setSocketOption(Options.SSL_CLIENT_AUTH_MODE, SslClientAuthMode.REQUESTED);\n         }\n \n         server = new UndertowJaxrsServer();\n@@ -476,12 +483,29 @@ private static void detectNodeName(KeycloakServerConfig config) {\n     }\n \n     private SSLContext createSSLContext() throws Exception {\n+        KeyManager[] keyManagers = getKeyManagers();\n+\n+        if (keyManagers == null) {\n+            return SSLContext.getDefault();\n+        }\n+\n+        TrustManager[] trustManagers = getTrustManagers();\n+\n+        SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n+        sslContext.init(keyManagers, trustManagers, null);\n+        return sslContext;\n+    }\n+\n+\n+    private KeyManager[] getKeyManagers() throws Exception {\n         String keyStorePath = System.getProperty(\"keycloak.tls.keystore.path\");\n \n         if (keyStorePath == null) {\n-            return SSLContext.getDefault();\n+            return null;\n         }\n \n+        log.infof(\"Loading keystore from file: %s\", keyStorePath);\n+\n         InputStream stream = Files.newInputStream(Paths.get(keyStorePath));\n \n         if (stream == null) {\n@@ -490,20 +514,41 @@ private SSLContext createSSLContext() throws Exception {\n \n         try (InputStream is = stream) {\n             KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n-\n             char[] keyStorePassword = System.getProperty(\"keycloak.tls.keystore.password\", \"password\").toCharArray();\n-\n             keyStore.load(is, keyStorePassword);\n \n             KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n-\n             keyManagerFactory.init(keyStore, keyStorePassword);\n \n-            SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n+            return keyManagerFactory.getKeyManagers();\n+        }\n+    }\n+\n+\n+    private TrustManager[] getTrustManagers() throws Exception {\n+        String trustStorePath = System.getProperty(\"keycloak.tls.truststore.path\");\n+\n+        if (trustStorePath == null) {\n+            return null;\n+        }\n+\n+        log.infof(\"Loading truststore from file: %s\", trustStorePath);\n+\n+        InputStream stream = Files.newInputStream(Paths.get(trustStorePath));\n+\n+        if (stream == null) {\n+            throw new RuntimeException(\"Could not load truststore\");\n+        }\n+\n+        try (InputStream is = stream) {\n+            KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+            char[] keyStorePassword = System.getProperty(\"keycloak.tls.truststore.password\", \"password\").toCharArray();\n+            keyStore.load(is, keyStorePassword);\n \n-            sslContext.init(keyManagerFactory.getKeyManagers(), null, null);\n+            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+            trustManagerFactory.init(keyStore);\n \n-            return sslContext;\n+            return trustManagerFactory.getTrustManagers();\n         }\n     }\n }"
        },
        {
            "sha": "13f9b5764c8283830e1e6d814a02f2e84454a18e",
            "filename": "testsuite/utils/src/main/resources/META-INF/keycloak-server.json",
            "status": "modified",
            "additions": 34,
            "deletions": 0,
            "changes": 34,
            "blob_url": "https://github.com/keycloak/keycloak/blob/a48698caa32933458916980ab05256f56099a337/testsuite%2Futils%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fkeycloak-server.json",
            "raw_url": "https://github.com/keycloak/keycloak/raw/a48698caa32933458916980ab05256f56099a337/testsuite%2Futils%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fkeycloak-server.json",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Futils%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fkeycloak-server.json?ref=a48698caa32933458916980ab05256f56099a337",
            "patch": "@@ -118,5 +118,39 @@\n             \"enabled\": true\n         }\n \n+    },\n+\n+    \"login-protocol\": {\n+        \"saml\": {\n+            \"knownProtocols\": [\n+                \"http=${auth.server.http.port}\",\n+                \"https=${auth.server.https.port}\"\n+            ]\n+        }\n+    },\n+\n+    \"x509cert-lookup\": {\n+        \"provider\": \"${keycloak.x509cert.lookup.provider:default}\",\n+        \"default\": {\n+            \"enabled\": true\n+        },\n+        \"haproxy\": {\n+            \"enabled\": true,\n+            \"sslClientCert\": \"x-ssl-client-cert\",\n+            \"sslCertChainPrefix\": \"x-ssl-client-cert-chain\",\n+            \"certificateChainLength\": 1\n+        },\n+        \"apache\": {\n+            \"enabled\": true,\n+            \"sslClientCert\": \"x-ssl-client-cert\",\n+            \"sslCertChainPrefix\": \"x-ssl-client-cert-chain\",\n+            \"certificateChainLength\": 1\n+        },\n+        \"nginx\": {\n+            \"enabled\": true,\n+            \"sslClientCert\": \"x-ssl-client-cert\",\n+            \"sslCertChainPrefix\": \"x-ssl-client-cert-chain\",\n+            \"certificateChainLength\": 1\n+        }\n     }\n }"
        }
    ]
}