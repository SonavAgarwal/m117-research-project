{
    "sha": "fc4c20fc3469674cb584a4fb98bac7e3c2277c96",
    "node_id": "MDY6Q29tbWl0MjM0MTg1MTc6ZmM0YzIwZmMzNDY5Njc0Y2I1ODRhNGZiOThiYWM3ZTNjMjI3N2M5Ng==",
    "commit": {
        "author": {
            "name": "Akira Ajisaka",
            "email": "aajisaka@apache.org",
            "date": "2018-05-23T08:15:57Z"
        },
        "committer": {
            "name": "Akira Ajisaka",
            "email": "aajisaka@apache.org",
            "date": "2018-05-23T08:18:19Z"
        },
        "message": "Additional check when unpacking archives. Contributed by Jason Lowe and Akira Ajisaka.\n\n(cherry picked from commit 745f203e577bacb35b042206db94615141fa5e6f)",
        "tree": {
            "sha": "d6f3b61c059a40fed620ca132d2d904b87ec6ba3",
            "url": "https://api.github.com/repos/apache/hadoop/git/trees/d6f3b61c059a40fed620ca132d2d904b87ec6ba3"
        },
        "url": "https://api.github.com/repos/apache/hadoop/git/commits/fc4c20fc3469674cb584a4fb98bac7e3c2277c96",
        "comment_count": 0,
        "verification": {
            "verified": true,
            "reason": "valid",
            "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJIBAABCgAyFiEE8F32UAoCGSJ7VmmQwe27nKQA/VAFAlsFI8wUHGFhamlzYWth\nQGFwYWNoZS5vcmcACgkQwe27nKQA/VDpig//aqdwqN1frFtj3j5gqSUBJs13ADv0\nbEL/+1W+hCJeHApqGtkxBytar00nYnLqbFmRYWk537giWrp6ck64Y1L88drvTKAC\nwn7iF+ykwag+kNRLPjRraeLCgSuWXhf8921kTf3zr0a9Vgp0ERfAdsrJuS0SuQQF\nK49p75KlS1diM+Lkea+s+w4gayJ3DghbewFoCJ/UPWMZvFn23UAjINtd666BCT5q\n4VptvgU3miQadvUyBjBjED9ed/IbSPTHiqt6CCm9bakU/kx+KhNabl4i40qAWKCC\n0wF8msoIizZf0VishwBlJI8nIiFPr6DuD+lkgqpZPuqxwv9kbJ+TYP2RLAZiSUrb\n+r2MfzeL9YsZv7rTTA2LS+X++RyS8DH5234CrSCAEW7NyuX6Wxj4OHYk20H41L00\nnki6HkXKil+OT4UB+FPdrkf5MZJzYYNkXFplVGOLd0acFuT+lao5HKAZn3HtHqxt\n//qJVOf157CEw05NdRcHIub8AOxLLSBj8V/QAve9Bt3sdbyJfcoP0frIpmDgVRPq\nYoU+UfIVC6q4HtCOD177UJwmM78HxmlSj5TdC6mZYtAmMSPn/XGY56nwMiRvdpwa\nDs4x+5bMlvRwGzyzijkf7OCZSuV8nOHd89NdwQ3sMJvgzXYvYGBeyAo2fDGSJ2Q1\nmkkMSPlE8EFSyuY=\n=2L+0\n-----END PGP SIGNATURE-----",
            "payload": "tree d6f3b61c059a40fed620ca132d2d904b87ec6ba3\nparent d47c0fc39a48dace6c7a2332ee041885cc4bb89c\nauthor Akira Ajisaka <aajisaka@apache.org> 1527063357 +0900\ncommitter Akira Ajisaka <aajisaka@apache.org> 1527063499 +0900\n\nAdditional check when unpacking archives. Contributed by Jason Lowe and Akira Ajisaka.\n\n(cherry picked from commit 745f203e577bacb35b042206db94615141fa5e6f)\n",
            "verified_at": "2024-11-08T07:43:59Z"
        }
    },
    "url": "https://api.github.com/repos/apache/hadoop/commits/fc4c20fc3469674cb584a4fb98bac7e3c2277c96",
    "html_url": "https://github.com/apache/hadoop/commit/fc4c20fc3469674cb584a4fb98bac7e3c2277c96",
    "comments_url": "https://api.github.com/repos/apache/hadoop/commits/fc4c20fc3469674cb584a4fb98bac7e3c2277c96/comments",
    "author": {
        "login": "aajisaka",
        "id": 3403122,
        "node_id": "MDQ6VXNlcjM0MDMxMjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3403122?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aajisaka",
        "html_url": "https://github.com/aajisaka",
        "followers_url": "https://api.github.com/users/aajisaka/followers",
        "following_url": "https://api.github.com/users/aajisaka/following{/other_user}",
        "gists_url": "https://api.github.com/users/aajisaka/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aajisaka/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aajisaka/subscriptions",
        "organizations_url": "https://api.github.com/users/aajisaka/orgs",
        "repos_url": "https://api.github.com/users/aajisaka/repos",
        "events_url": "https://api.github.com/users/aajisaka/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aajisaka/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "aajisaka",
        "id": 3403122,
        "node_id": "MDQ6VXNlcjM0MDMxMjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3403122?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aajisaka",
        "html_url": "https://github.com/aajisaka",
        "followers_url": "https://api.github.com/users/aajisaka/followers",
        "following_url": "https://api.github.com/users/aajisaka/following{/other_user}",
        "gists_url": "https://api.github.com/users/aajisaka/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aajisaka/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aajisaka/subscriptions",
        "organizations_url": "https://api.github.com/users/aajisaka/orgs",
        "repos_url": "https://api.github.com/users/aajisaka/repos",
        "events_url": "https://api.github.com/users/aajisaka/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aajisaka/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "d47c0fc39a48dace6c7a2332ee041885cc4bb89c",
            "url": "https://api.github.com/repos/apache/hadoop/commits/d47c0fc39a48dace6c7a2332ee041885cc4bb89c",
            "html_url": "https://github.com/apache/hadoop/commit/d47c0fc39a48dace6c7a2332ee041885cc4bb89c"
        }
    ],
    "stats": {
        "total": 58,
        "additions": 51,
        "deletions": 7
    },
    "files": [
        {
            "sha": "5ef78f2f6a091b231d52f0c64385e7546272e516",
            "filename": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
            "status": "modified",
            "additions": 17,
            "deletions": 1,
            "changes": 18,
            "blob_url": "https://github.com/apache/hadoop/blob/fc4c20fc3469674cb584a4fb98bac7e3c2277c96/hadoop-common-project%2Fhadoop-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fhadoop%2Ffs%2FFileUtil.java",
            "raw_url": "https://github.com/apache/hadoop/raw/fc4c20fc3469674cb584a4fb98bac7e3c2277c96/hadoop-common-project%2Fhadoop-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fhadoop%2Ffs%2FFileUtil.java",
            "contents_url": "https://api.github.com/repos/apache/hadoop/contents/hadoop-common-project%2Fhadoop-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fhadoop%2Ffs%2FFileUtil.java?ref=fc4c20fc3469674cb584a4fb98bac7e3c2277c96",
            "patch": "@@ -617,11 +617,16 @@ public static void unZip(InputStream inputStream, File toDir)\n       throws IOException {\n     try (ZipInputStream zip = new ZipInputStream(inputStream)) {\n       int numOfFailedLastModifiedSet = 0;\n+      String targetDirPath = toDir.getCanonicalPath() + File.separator;\n       for(ZipEntry entry = zip.getNextEntry();\n           entry != null;\n           entry = zip.getNextEntry()) {\n         if (!entry.isDirectory()) {\n           File file = new File(toDir, entry.getName());\n+          if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n+            throw new IOException(\"expanding \" + entry.getName()\n+                + \" would create file outside of \" + toDir);\n+          }\n           File parent = file.getParentFile();\n           if (!parent.mkdirs() &&\n               !parent.isDirectory()) {\n@@ -656,12 +661,17 @@ public static void unZip(File inFile, File unzipDir) throws IOException {\n \n     try {\n       entries = zipFile.entries();\n+      String targetDirPath = unzipDir.getCanonicalPath() + File.separator;\n       while (entries.hasMoreElements()) {\n         ZipEntry entry = entries.nextElement();\n         if (!entry.isDirectory()) {\n           InputStream in = zipFile.getInputStream(entry);\n           try {\n             File file = new File(unzipDir, entry.getName());\n+            if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n+              throw new IOException(\"expanding \" + entry.getName()\n+                  + \" would create file outside of \" + unzipDir);\n+            }\n             if (!file.getParentFile().mkdirs()) {\n               if (!file.getParentFile().isDirectory()) {\n                 throw new IOException(\"Mkdirs failed to create \" +\n@@ -944,6 +954,13 @@ private static void unTarUsingJava(InputStream inputStream, File untarDir,\n \n   private static void unpackEntries(TarArchiveInputStream tis,\n       TarArchiveEntry entry, File outputDir) throws IOException {\n+    String targetDirPath = outputDir.getCanonicalPath() + File.separator;\n+    File outputFile = new File(outputDir, entry.getName());\n+    if (!outputFile.getCanonicalPath().startsWith(targetDirPath)) {\n+      throw new IOException(\"expanding \" + entry.getName()\n+          + \" would create entry outside of \" + outputDir);\n+    }\n+\n     if (entry.isDirectory()) {\n       File subDir = new File(outputDir, entry.getName());\n       if (!subDir.mkdirs() && !subDir.isDirectory()) {\n@@ -966,7 +983,6 @@ private static void unpackEntries(TarArchiveInputStream tis,\n       return;\n     }\n \n-    File outputFile = new File(outputDir, entry.getName());\n     if (!outputFile.getParentFile().exists()) {\n       if (!outputFile.getParentFile().mkdirs()) {\n         throw new IOException(\"Mkdirs failed to create tar internal dir \""
        },
        {
            "sha": "7218a1bd221021debb49aa3bebffc7825b6e843e",
            "filename": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java",
            "status": "modified",
            "additions": 34,
            "deletions": 6,
            "changes": 40,
            "blob_url": "https://github.com/apache/hadoop/blob/fc4c20fc3469674cb584a4fb98bac7e3c2277c96/hadoop-common-project%2Fhadoop-common%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fhadoop%2Ffs%2FTestFileUtil.java",
            "raw_url": "https://github.com/apache/hadoop/raw/fc4c20fc3469674cb584a4fb98bac7e3c2277c96/hadoop-common-project%2Fhadoop-common%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fhadoop%2Ffs%2FTestFileUtil.java",
            "contents_url": "https://api.github.com/repos/apache/hadoop/contents/hadoop-common-project%2Fhadoop-common%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fhadoop%2Ffs%2FTestFileUtil.java?ref=fc4c20fc3469674cb584a4fb98bac7e3c2277c96",
            "patch": "@@ -23,6 +23,7 @@\n import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n@@ -38,6 +39,7 @@\n import java.net.URISyntaxException;\n import java.net.URL;\n import java.net.UnknownHostException;\n+import java.nio.charset.StandardCharsets;\n import java.nio.file.FileSystems;\n import java.nio.file.Files;\n import java.util.ArrayList;\n@@ -685,10 +687,8 @@ public void testCreateLocalTempFile() throws IOException {\n   \n   @Test (timeout = 30000)\n   public void testUnZip() throws IOException {\n-    // make sa simple zip\n     setupDirs();\n-    \n-    // make a simple tar:\n+    // make a simple zip\n     final File simpleZip = new File(del, FILE);\n     OutputStream os = new FileOutputStream(simpleZip); \n     ZipOutputStream tos = new ZipOutputStream(os);\n@@ -705,7 +705,7 @@ public void testUnZip() throws IOException {\n       tos.close();\n     }\n     \n-    // successfully untar it into an existing dir:\n+    // successfully unzip it into an existing dir:\n     FileUtil.unZip(simpleZip, tmp);\n     // check result:\n     assertTrue(new File(tmp, \"foo\").exists());\n@@ -720,8 +720,36 @@ public void testUnZip() throws IOException {\n     } catch (IOException ioe) {\n       // okay\n     }\n-  }  \n-  \n+  }\n+\n+  @Test (timeout = 30000)\n+  public void testUnZip2() throws IOException {\n+    setupDirs();\n+    // make a simple zip\n+    final File simpleZip = new File(del, FILE);\n+    OutputStream os = new FileOutputStream(simpleZip);\n+    try (ZipOutputStream tos = new ZipOutputStream(os)) {\n+      // Add an entry that contains invalid filename\n+      ZipEntry ze = new ZipEntry(\"../foo\");\n+      byte[] data = \"some-content\".getBytes(StandardCharsets.UTF_8);\n+      ze.setSize(data.length);\n+      tos.putNextEntry(ze);\n+      tos.write(data);\n+      tos.closeEntry();\n+      tos.flush();\n+      tos.finish();\n+    }\n+\n+    // Unzip it into an existing dir\n+    try {\n+      FileUtil.unZip(simpleZip, tmp);\n+      fail(\"unZip should throw IOException.\");\n+    } catch (IOException e) {\n+      GenericTestUtils.assertExceptionContains(\n+          \"would create file outside of\", e);\n+    }\n+  }\n+\n   @Test (timeout = 30000)\n   /*\n    * Test method copy(FileSystem srcFS, Path src, File dst, boolean deleteSource, Configuration conf)"
        }
    ]
}