{
    "sha": "8e9792c1963f1aeea81ca618785eb8d71d1cd1d2",
    "node_id": "MDY6Q29tbWl0MjEwODQ4MTo4ZTk3OTJjMTk2M2YxYWVlYTgxY2E2MTg3ODVlYjhkNzFkMWNkMWQy",
    "commit": {
        "author": {
            "name": "Joe Grandja",
            "email": "jgrandja@pivotal.io",
            "date": "2018-04-19T00:05:36Z"
        },
        "committer": {
            "name": "Joe Grandja",
            "email": "jgrandja@pivotal.io",
            "date": "2018-05-07T22:31:30Z"
        },
        "message": "Remove SpelView in WhitelabelApprovalEndpoint\n\nFixes gh-1340",
        "tree": {
            "sha": "2910b436d4e06500f7e37a214f6700c6509ce228",
            "url": "https://api.github.com/repos/spring-attic/spring-security-oauth/git/trees/2910b436d4e06500f7e37a214f6700c6509ce228"
        },
        "url": "https://api.github.com/repos/spring-attic/spring-security-oauth/git/commits/8e9792c1963f1aeea81ca618785eb8d71d1cd1d2",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/spring-attic/spring-security-oauth/commits/8e9792c1963f1aeea81ca618785eb8d71d1cd1d2",
    "html_url": "https://github.com/spring-attic/spring-security-oauth/commit/8e9792c1963f1aeea81ca618785eb8d71d1cd1d2",
    "comments_url": "https://api.github.com/repos/spring-attic/spring-security-oauth/commits/8e9792c1963f1aeea81ca618785eb8d71d1cd1d2/comments",
    "author": {
        "login": "jgrandja",
        "id": 10884212,
        "node_id": "MDQ6VXNlcjEwODg0MjEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/10884212?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jgrandja",
        "html_url": "https://github.com/jgrandja",
        "followers_url": "https://api.github.com/users/jgrandja/followers",
        "following_url": "https://api.github.com/users/jgrandja/following{/other_user}",
        "gists_url": "https://api.github.com/users/jgrandja/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jgrandja/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jgrandja/subscriptions",
        "organizations_url": "https://api.github.com/users/jgrandja/orgs",
        "repos_url": "https://api.github.com/users/jgrandja/repos",
        "events_url": "https://api.github.com/users/jgrandja/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jgrandja/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "jgrandja",
        "id": 10884212,
        "node_id": "MDQ6VXNlcjEwODg0MjEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/10884212?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jgrandja",
        "html_url": "https://github.com/jgrandja",
        "followers_url": "https://api.github.com/users/jgrandja/followers",
        "following_url": "https://api.github.com/users/jgrandja/following{/other_user}",
        "gists_url": "https://api.github.com/users/jgrandja/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jgrandja/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jgrandja/subscriptions",
        "organizations_url": "https://api.github.com/users/jgrandja/orgs",
        "repos_url": "https://api.github.com/users/jgrandja/repos",
        "events_url": "https://api.github.com/users/jgrandja/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jgrandja/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "3cae8a2ba6366dc3c10582dd5a171b79de131a9f",
            "url": "https://api.github.com/repos/spring-attic/spring-security-oauth/commits/3cae8a2ba6366dc3c10582dd5a171b79de131a9f",
            "html_url": "https://github.com/spring-attic/spring-security-oauth/commit/3cae8a2ba6366dc3c10582dd5a171b79de131a9f"
        }
    ],
    "stats": {
        "total": 380,
        "additions": 171,
        "deletions": 209
    },
    "files": [
        {
            "sha": "3a1cc3e20f3abd23dbea8e3829a703d12230ab36",
            "filename": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/SpelView.java",
            "status": "removed",
            "additions": 0,
            "deletions": 80,
            "changes": 80,
            "blob_url": "https://github.com/spring-attic/spring-security-oauth/blob/3cae8a2ba6366dc3c10582dd5a171b79de131a9f/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FSpelView.java",
            "raw_url": "https://github.com/spring-attic/spring-security-oauth/raw/3cae8a2ba6366dc3c10582dd5a171b79de131a9f/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FSpelView.java",
            "contents_url": "https://api.github.com/repos/spring-attic/spring-security-oauth/contents/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FSpelView.java?ref=3cae8a2ba6366dc3c10582dd5a171b79de131a9f",
            "patch": "@@ -1,80 +0,0 @@\n-/*\n- * Copyright 2013-2014 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- */\n-\n-package org.springframework.security.oauth2.provider.endpoint;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-\n-import org.springframework.context.expression.MapAccessor;\n-import org.springframework.expression.Expression;\n-import org.springframework.expression.spel.standard.SpelExpressionParser;\n-import org.springframework.expression.spel.support.StandardEvaluationContext;\n-import org.springframework.security.oauth2.common.util.RandomValueStringGenerator;\n-import org.springframework.util.PropertyPlaceholderHelper;\n-import org.springframework.util.PropertyPlaceholderHelper.PlaceholderResolver;\n-import org.springframework.web.servlet.View;\n-import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n-\n-/**\n- * Simple String template renderer.\n- * \n- */\n-class SpelView implements View {\n-\n-\tprivate final String template;\n-\t\n-\tprivate final String prefix;\n-\n-\tprivate final SpelExpressionParser parser = new SpelExpressionParser();\n-\n-\tprivate final StandardEvaluationContext context = new StandardEvaluationContext();\n-\n-\tprivate PlaceholderResolver resolver;\n-\n-\tpublic SpelView(String template) {\n-\t\tthis.template = template;\n-\t\tthis.prefix = new RandomValueStringGenerator().generate() + \"{\";\n-\t\tthis.context.addPropertyAccessor(new MapAccessor());\n-\t\tthis.resolver = new PlaceholderResolver() {\n-\t\t\tpublic String resolvePlaceholder(String name) {\n-\t\t\t\tExpression expression = parser.parseExpression(name);\n-\t\t\t\tObject value = expression.getValue(context);\n-\t\t\t\treturn value == null ? null : value.toString();\n-\t\t\t}\n-\t\t};\n-\t}\n-\n-\tpublic String getContentType() {\n-\t\treturn \"text/html\";\n-\t}\n-\n-\tpublic void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response)\n-\t\t\tthrows Exception {\n-\t\tMap<String, Object> map = new HashMap<String, Object>(model);\n-\t\tString path = ServletUriComponentsBuilder.fromContextPath(request).build()\n-\t\t\t\t.getPath();\n-\t\tmap.put(\"path\", (Object) path==null ? \"\" : path);\n-\t\tcontext.setRootObject(map);\n-\t\tString maskedTemplate = template.replace(\"${\", prefix);\n-\t\tPropertyPlaceholderHelper helper = new PropertyPlaceholderHelper(prefix, \"}\");\n-\t\tString result = helper.replacePlaceholders(maskedTemplate, resolver);\n-\t\tresult = result.replace(prefix, \"${\");\n-\t\tresponse.setContentType(getContentType());\n-\t\tresponse.getWriter().append(result);\n-\t}\n-\n-}\n\\ No newline at end of file"
        },
        {
            "sha": "836b66b16f978554303a602186cf5f2142dee539",
            "filename": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelApprovalEndpoint.java",
            "status": "modified",
            "additions": 75,
            "deletions": 35,
            "changes": 110,
            "blob_url": "https://github.com/spring-attic/spring-security-oauth/blob/8e9792c1963f1aeea81ca618785eb8d71d1cd1d2/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FWhitelabelApprovalEndpoint.java",
            "raw_url": "https://github.com/spring-attic/spring-security-oauth/raw/8e9792c1963f1aeea81ca618785eb8d71d1cd1d2/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FWhitelabelApprovalEndpoint.java",
            "contents_url": "https://api.github.com/repos/spring-attic/spring-security-oauth/contents/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FWhitelabelApprovalEndpoint.java?ref=8e9792c1963f1aeea81ca618785eb8d71d1cd1d2",
            "patch": "@@ -1,12 +1,17 @@\n package org.springframework.security.oauth2.provider.endpoint;\n \n-import java.util.Map;\n-\n-import javax.servlet.http.HttpServletRequest;\n-\n+import org.springframework.security.oauth2.provider.AuthorizationRequest;\n+import org.springframework.security.web.csrf.CsrfToken;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.SessionAttributes;\n import org.springframework.web.servlet.ModelAndView;\n+import org.springframework.web.servlet.View;\n+import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n+import org.springframework.web.util.HtmlUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.Map;\n \n /**\n  * Controller for displaying the approval page for the authorization server.\n@@ -19,56 +24,91 @@ public class WhitelabelApprovalEndpoint {\n \n \t@RequestMapping(\"/oauth/confirm_access\")\n \tpublic ModelAndView getAccessConfirmation(Map<String, Object> model, HttpServletRequest request) throws Exception {\n-\t\tString template = createTemplate(model, request);\n+\t\tfinal String approvalContent = createTemplate(model, request);\n \t\tif (request.getAttribute(\"_csrf\") != null) {\n \t\t\tmodel.put(\"_csrf\", request.getAttribute(\"_csrf\"));\n \t\t}\n-\t\treturn new ModelAndView(new SpelView(template), model);\n+\t\tView approvalView = new View() {\n+\t\t\t@Override\n+\t\t\tpublic String getContentType() {\n+\t\t\t\treturn \"text/html\";\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n+\t\t\t\tresponse.setContentType(getContentType());\n+\t\t\t\tresponse.getWriter().append(approvalContent);\n+\t\t\t}\n+\t\t};\n+\t\treturn new ModelAndView(approvalView, model);\n \t}\n \n \tprotected String createTemplate(Map<String, Object> model, HttpServletRequest request) {\n-\t\tString template = TEMPLATE;\n-\t\tif (model.containsKey(\"scopes\") || request.getAttribute(\"scopes\") != null) {\n-\t\t\ttemplate = template.replace(\"%scopes%\", createScopes(model, request)).replace(\"%denial%\", \"\");\n+\t\tAuthorizationRequest authorizationRequest = (AuthorizationRequest) model.get(\"authorizationRequest\");\n+\t\tString clientId = authorizationRequest.getClientId();\n+\n+\t\tStringBuilder builder = new StringBuilder();\n+\t\tbuilder.append(\"<html><body><h1>OAuth Approval</h1>\");\n+\t\tbuilder.append(\"<p>Do you authorize \\\"\").append(HtmlUtils.htmlEscape(clientId));\n+\t\tbuilder.append(\"\\\" to access your protected resources?</p>\");\n+\t\tbuilder.append(\"<form id=\\\"confirmationForm\\\" name=\\\"confirmationForm\\\" action=\\\"\");\n+\n+\t\tString requestPath = ServletUriComponentsBuilder.fromContextPath(request).build().getPath();\n+\t\tif (requestPath == null) {\n+\t\t\trequestPath = \"\";\n \t\t}\n-\t\telse {\n-\t\t\ttemplate = template.replace(\"%scopes%\", \"\").replace(\"%denial%\", DENIAL);\n+\n+\t\tbuilder.append(requestPath).append(\"/oauth/authorize\\\" method=\\\"post\\\">\");\n+\t\tbuilder.append(\"<input name=\\\"user_oauth_approval\\\" value=\\\"true\\\" type=\\\"hidden\\\"/>\");\n+\n+\t\tString csrfTemplate = null;\n+\t\tCsrfToken csrfToken = (CsrfToken) (model.containsKey(\"_csrf\") ? model.get(\"_csrf\") : request.getAttribute(\"_csrf\"));\n+\t\tif (csrfToken != null) {\n+\t\t\tcsrfTemplate = \"<input type=\\\"hidden\\\" name=\\\"\" + HtmlUtils.htmlEscape(csrfToken.getParameterName()) +\n+\t\t\t\t\t\"\\\" value=\\\"\" + HtmlUtils.htmlEscape(csrfToken.getToken()) + \"\\\" />\";\n \t\t}\n-\t\tif (model.containsKey(\"_csrf\") || request.getAttribute(\"_csrf\") != null) {\n-\t\t\ttemplate = template.replace(\"%csrf%\", CSRF);\n+\t\tif (csrfTemplate != null) {\n+\t\t\tbuilder.append(csrfTemplate);\n \t\t}\n-\t\telse {\n-\t\t\ttemplate = template.replace(\"%csrf%\", \"\");\n+\n+\t\tString authorizeInputTemplate = \"<label><input name=\\\"authorize\\\" value=\\\"Authorize\\\" type=\\\"submit\\\"/></label></form>\";\n+\n+\t\tif (model.containsKey(\"scopes\") || request.getAttribute(\"scopes\") != null) {\n+\t\t\tbuilder.append(createScopes(model, request));\n+\t\t\tbuilder.append(authorizeInputTemplate);\n+\t\t} else {\n+\t\t\tbuilder.append(authorizeInputTemplate);\n+\t\t\tbuilder.append(\"<form id=\\\"denialForm\\\" name=\\\"denialForm\\\" action=\\\"\");\n+\t\t\tbuilder.append(requestPath).append(\"/oauth/authorize\\\" method=\\\"post\\\">\");\n+\t\t\tbuilder.append(\"<input name=\\\"user_oauth_approval\\\" value=\\\"false\\\" type=\\\"hidden\\\"/>\");\n+\t\t\tif (csrfTemplate != null) {\n+\t\t\t\tbuilder.append(csrfTemplate);\n+\t\t\t}\n+\t\t\tbuilder.append(\"<label><input name=\\\"deny\\\" value=\\\"Deny\\\" type=\\\"submit\\\"/></label></form>\");\n \t\t}\n-\t\treturn template;\n+\n+\t\tbuilder.append(\"</body></html>\");\n+\n+\t\treturn builder.toString();\n \t}\n \n \tprivate CharSequence createScopes(Map<String, Object> model, HttpServletRequest request) {\n \t\tStringBuilder builder = new StringBuilder(\"<ul>\");\n \t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, String> scopes = (Map<String, String>) (model.containsKey(\"scopes\") ? model.get(\"scopes\") : request\n-\t\t\t\t.getAttribute(\"scopes\"));\n+\t\tMap<String, String> scopes = (Map<String, String>) (model.containsKey(\"scopes\") ?\n+\t\t\t\tmodel.get(\"scopes\") : request.getAttribute(\"scopes\"));\n \t\tfor (String scope : scopes.keySet()) {\n \t\t\tString approved = \"true\".equals(scopes.get(scope)) ? \" checked\" : \"\";\n \t\t\tString denied = !\"true\".equals(scopes.get(scope)) ? \" checked\" : \"\";\n-\t\t\tString value = SCOPE.replace(\"%scope%\", scope).replace(\"%key%\", scope).replace(\"%approved%\", approved)\n-\t\t\t\t\t.replace(\"%denied%\", denied);\n-\t\t\tbuilder.append(value);\n+\t\t\tscope = HtmlUtils.htmlEscape(scope);\n+\n+\t\t\tbuilder.append(\"<li><div class=\\\"form-group\\\">\");\n+\t\t\tbuilder.append(scope).append(\": <input type=\\\"radio\\\" name=\\\"\");\n+\t\t\tbuilder.append(scope).append(\"\\\" value=\\\"true\\\"\").append(approved).append(\">Approve</input> \");\n+\t\t\tbuilder.append(\"<input type=\\\"radio\\\" name=\\\"\").append(scope).append(\"\\\" value=\\\"false\\\"\");\n+\t\t\tbuilder.append(denied).append(\">Deny</input></div></li>\");\n \t\t}\n \t\tbuilder.append(\"</ul>\");\n \t\treturn builder.toString();\n \t}\n-\n-\tprivate static String CSRF = \"<input type='hidden' name='${_csrf.parameterName}' value='${_csrf.token}' />\";\n-\n-\tprivate static String DENIAL = \"<form id='denialForm' name='denialForm' action='${path}/oauth/authorize' method='post'><input name='user_oauth_approval' value='false' type='hidden'/>%csrf%<label><input name='deny' value='Deny' type='submit'/></label></form>\";\n-\n-\tprivate static String TEMPLATE = \"<html><body><h1>OAuth Approval</h1>\"\n-\t\t\t+ \"<p>Do you authorize '${authorizationRequest.clientId}' to access your protected resources?</p>\"\n-\t\t\t+ \"<form id='confirmationForm' name='confirmationForm' action='${path}/oauth/authorize' method='post'><input name='user_oauth_approval' value='true' type='hidden'/>%csrf%%scopes%<label><input name='authorize' value='Authorize' type='submit'/></label></form>\"\n-\t\t\t+ \"%denial%</body></html>\";\n-\n-\tprivate static String SCOPE = \"<li><div class='form-group'>%scope%: <input type='radio' name='%key%'\"\n-\t\t\t+ \" value='true'%approved%>Approve</input> <input type='radio' name='%key%' value='false'%denied%>Deny</input></div></li>\";\n-\n-}\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "83f626cd4f3a05001cab1e7d60a6b323014dae2d",
            "filename": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelErrorEndpoint.java",
            "status": "modified",
            "additions": 21,
            "deletions": 8,
            "changes": 29,
            "blob_url": "https://github.com/spring-attic/spring-security-oauth/blob/8e9792c1963f1aeea81ca618785eb8d71d1cd1d2/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FWhitelabelErrorEndpoint.java",
            "raw_url": "https://github.com/spring-attic/spring-security-oauth/raw/8e9792c1963f1aeea81ca618785eb8d71d1cd1d2/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FWhitelabelErrorEndpoint.java",
            "contents_url": "https://api.github.com/repos/spring-attic/spring-security-oauth/contents/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FWhitelabelErrorEndpoint.java?ref=8e9792c1963f1aeea81ca618785eb8d71d1cd1d2",
            "patch": "@@ -1,15 +1,16 @@\n package org.springframework.security.oauth2.provider.endpoint;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import javax.servlet.http.HttpServletRequest;\n-\n import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.servlet.ModelAndView;\n+import org.springframework.web.servlet.View;\n import org.springframework.web.util.HtmlUtils;\n \n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n /**\n  * Controller for displaying the error page for the authorization server.\n  *\n@@ -18,7 +19,7 @@\n @FrameworkEndpoint\n public class WhitelabelErrorEndpoint {\n \n-\tprivate static final String ERROR = \"<html><body><h1>OAuth Error</h1><p>${errorSummary}</p></body></html>\";\n+\tprivate static final String ERROR = \"<html><body><h1>OAuth Error</h1><p>%errorSummary%</p></body></html>\";\n \n \t@RequestMapping(\"/oauth/error\")\n \tpublic ModelAndView handleError(HttpServletRequest request) {\n@@ -34,7 +35,19 @@ public ModelAndView handleError(HttpServletRequest request) {\n \t\telse {\n \t\t\terrorSummary = \"Unknown error\";\n \t\t}\n-\t\tmodel.put(\"errorSummary\", errorSummary);\n-\t\treturn new ModelAndView(new SpelView(ERROR), model);\n+\t\tfinal String errorContent = ERROR.replace(\"%errorSummary%\", errorSummary);\n+\t\tView errorView = new View() {\n+\t\t\t@Override\n+\t\t\tpublic String getContentType() {\n+\t\t\t\treturn \"text/html\";\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n+\t\t\t\tresponse.setContentType(getContentType());\n+\t\t\t\tresponse.getWriter().append(errorContent);\n+\t\t\t}\n+\t\t};\n+\t\treturn new ModelAndView(errorView, model);\n \t}\n }"
        },
        {
            "sha": "c7b29f517884dcdccd898debf15220b106e4a5f2",
            "filename": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/SpelViewTests.java",
            "status": "removed",
            "additions": 0,
            "deletions": 67,
            "changes": 67,
            "blob_url": "https://github.com/spring-attic/spring-security-oauth/blob/3cae8a2ba6366dc3c10582dd5a171b79de131a9f/spring-security-oauth2%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FSpelViewTests.java",
            "raw_url": "https://github.com/spring-attic/spring-security-oauth/raw/3cae8a2ba6366dc3c10582dd5a171b79de131a9f/spring-security-oauth2%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FSpelViewTests.java",
            "contents_url": "https://api.github.com/repos/spring-attic/spring-security-oauth/contents/spring-security-oauth2%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FSpelViewTests.java?ref=3cae8a2ba6366dc3c10582dd5a171b79de131a9f",
            "patch": "@@ -1,67 +0,0 @@\n-/*\n- * Copyright 2012-2015 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.security.oauth2.provider.endpoint;\n-\n-import static org.junit.Assert.assertEquals;\n-\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import org.junit.Test;\n-import org.springframework.mock.web.MockHttpServletRequest;\n-import org.springframework.mock.web.MockHttpServletResponse;\n-\n-/**\n- * @author Dave Syer\n- *\n- */\n-public class SpelViewTests {\n-\n-\tprivate SpelView view;\n-\n-\tprivate MockHttpServletResponse response = new MockHttpServletResponse();\n-\tprivate MockHttpServletRequest request = new MockHttpServletRequest();\n-\n-\t@Test\n-\tpublic void sunnyDay() throws Exception {\n-\t\tview = new SpelView(\"${hit}\");\n-\t\tview.render(Collections.singletonMap(\"hit\", \"Ouch\"), request, response);\n-\t\tassertEquals(\"Ouch\", response.getContentAsString());\n-\t}\n-\n-\t@Test\n-\tpublic void nonRecursive() throws Exception {\n-\t\tview = new SpelView(\"${hit}\");\n-\t\tview.render(Collections.singletonMap(\"hit\", \"${ouch}\"), request, response);\n-\t\t// Expressions embedded in resolved values do not resolve recursively\n-\t\tassertEquals(\"${ouch}\", response.getContentAsString());\n-\t}\n-\n-\t@Test\n-\tpublic void recursive() throws Exception {\n-\t\t// Recursive expressions in the template resolve\n-\t\tview = new SpelView(\"${${hit}}\");\n-\t\tMap<String,Object> map = new HashMap<String, Object>();\n-\t\tmap.put(\"hit\", \"me\");\n-\t\tmap.put(\"me\", \"${ouch}\");\n-\t\tview.render(map, request, response);\n-\t\t// But expressions embedded in resolved values do not\n-\t\tassertEquals(\"${ouch}\", response.getContentAsString());\n-\t}\n-\n-}"
        },
        {
            "sha": "b37b75306664c3a2f7fcfedc12ced329d2257d1e",
            "filename": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelApprovalEndpointTests.java",
            "status": "modified",
            "additions": 63,
            "deletions": 7,
            "changes": 70,
            "blob_url": "https://github.com/spring-attic/spring-security-oauth/blob/8e9792c1963f1aeea81ca618785eb8d71d1cd1d2/spring-security-oauth2%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FWhitelabelApprovalEndpointTests.java",
            "raw_url": "https://github.com/spring-attic/spring-security-oauth/raw/8e9792c1963f1aeea81ca618785eb8d71d1cd1d2/spring-security-oauth2%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FWhitelabelApprovalEndpointTests.java",
            "contents_url": "https://api.github.com/repos/spring-attic/spring-security-oauth/contents/spring-security-oauth2%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FWhitelabelApprovalEndpointTests.java?ref=8e9792c1963f1aeea81ca618785eb8d71d1cd1d2",
            "patch": "@@ -14,12 +14,6 @@\n \n package org.springframework.security.oauth2.provider.endpoint;\n \n-import static org.junit.Assert.assertTrue;\n-\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n import org.junit.Test;\n import org.springframework.mock.web.MockHttpServletRequest;\n import org.springframework.mock.web.MockHttpServletResponse;\n@@ -28,6 +22,12 @@\n import org.springframework.security.web.csrf.DefaultCsrfToken;\n import org.springframework.web.servlet.ModelAndView;\n \n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertTrue;\n+\n /**\n  * @author Dave Syer\n  *\n@@ -98,4 +98,60 @@ public void testApprovalPageWithCsrf() throws Exception {\n \t\tassertTrue(\"Wrong content: \" + content, !content.contains(\"${\"));\n \t}\n \n-}\n+\t// gh-1340\n+\t@Test\n+\tpublic void testApprovalPageWithSuspectScope() throws Exception {\n+\t\trequest.setContextPath(\"/foo\");\n+\t\tparameters.put(\"client_id\", \"client\");\n+\t\tHashMap<String, Object> model = new HashMap<String, Object>();\n+\t\tmodel.put(\"authorizationRequest\", createFromParameters(parameters));\n+\t\tString scope = \"${T(java.lang.Runtime).getRuntime().exec(\\\"cd ..\\\")}\";\n+\t\tString escapedScope = \"T(java.lang.Runtime).getRuntime().exec(&quot;cd ..&quot;)\";\n+\t\tmodel.put(\"scopes\", Collections.singletonMap(scope, \"true\"));\n+\t\tModelAndView result = endpoint.getAccessConfirmation(model, request);\n+\t\tresult.getView().render(result.getModel(), request , response);\n+\t\tString content = response.getContentAsString();\n+\t\tassertTrue(\"Wrong content: \" + content, !content.contains(scope));\n+\t\tassertTrue(\"Wrong content: \" + content, content.contains(escapedScope));\n+\t}\n+\n+\t@Test\n+\tpublic void testApprovalPageWithScopesInForm() throws Exception {\n+\t\tString expectedContent = \"<html><body><h1>OAuth Approval</h1><p>Do you authorize \\\"client\\\" to access your protected resources?</p>\" +\n+\t\t\t\t\"<form id=\\\"confirmationForm\\\" name=\\\"confirmationForm\\\" action=\\\"/foo/oauth/authorize\\\" method=\\\"post\\\">\" +\n+\t\t\t\t\"<input name=\\\"user_oauth_approval\\\" value=\\\"true\\\" type=\\\"hidden\\\"/><input type=\\\"hidden\\\" name=\\\"_csrf\\\" value=\\\"FOO\\\" /><ul>\" +\n+\t\t\t\t\"<li><div class=\\\"form-group\\\">scope.read: <input type=\\\"radio\\\" name=\\\"scope.read\\\" value=\\\"true\\\" checked>Approve</input> \" +\n+\t\t\t\t\"<input type=\\\"radio\\\" name=\\\"scope.read\\\" value=\\\"false\\\">Deny</input></div></li></ul><label>\" +\n+\t\t\t\t\"<input name=\\\"authorize\\\" value=\\\"Authorize\\\" type=\\\"submit\\\"/></label></form></body></html>\";\n+\t\trequest.setContextPath(\"/foo\");\n+\t\trequest.setAttribute(\"_csrf\", new DefaultCsrfToken(\"X-CSRF-TOKEN\", \"_csrf\", \"FOO\"));\n+\t\tparameters.put(\"client_id\", \"client\");\n+\t\tHashMap<String, Object> model = new HashMap<String, Object>();\n+\t\tmodel.put(\"authorizationRequest\", createFromParameters(parameters));\n+\t\tmodel.put(\"scopes\", Collections.singletonMap(\"scope.read\", \"true\"));\n+\t\tModelAndView result = endpoint.getAccessConfirmation(model, request);\n+\t\tresult.getView().render(result.getModel(), request , response);\n+\t\tString content = response.getContentAsString();\n+\t\tassertTrue(\"Wrong content: \" + content, content.equals(expectedContent));\n+\t}\n+\n+\t@Test\n+\tpublic void testApprovalPageWithoutScopesInForm() throws Exception {\n+\t\tString expectedContent = \"<html><body><h1>OAuth Approval</h1><p>Do you authorize \\\"client\\\" to access your protected resources?</p>\" +\n+\t\t\t\t\"<form id=\\\"confirmationForm\\\" name=\\\"confirmationForm\\\" action=\\\"/foo/oauth/authorize\\\" method=\\\"post\\\">\" +\n+\t\t\t\t\"<input name=\\\"user_oauth_approval\\\" value=\\\"true\\\" type=\\\"hidden\\\"/><input type=\\\"hidden\\\" name=\\\"_csrf\\\" value=\\\"FOO\\\" /><label>\" +\n+\t\t\t\t\"<input name=\\\"authorize\\\" value=\\\"Authorize\\\" type=\\\"submit\\\"/></label></form>\" +\n+\t\t\t\t\"<form id=\\\"denialForm\\\" name=\\\"denialForm\\\" action=\\\"/foo/oauth/authorize\\\" method=\\\"post\\\">\" +\n+\t\t\t\t\"<input name=\\\"user_oauth_approval\\\" value=\\\"false\\\" type=\\\"hidden\\\"/><input type=\\\"hidden\\\" name=\\\"_csrf\\\" value=\\\"FOO\\\" /><label>\" +\n+\t\t\t\t\"<input name=\\\"deny\\\" value=\\\"Deny\\\" type=\\\"submit\\\"/></label></form></body></html>\";\n+\t\trequest.setContextPath(\"/foo\");\n+\t\trequest.setAttribute(\"_csrf\", new DefaultCsrfToken(\"X-CSRF-TOKEN\", \"_csrf\", \"FOO\"));\n+\t\tparameters.put(\"client_id\", \"client\");\n+\t\tHashMap<String, Object> model = new HashMap<String, Object>();\n+\t\tmodel.put(\"authorizationRequest\", createFromParameters(parameters));\n+\t\tModelAndView result = endpoint.getAccessConfirmation(model, request);\n+\t\tresult.getView().render(result.getModel(), request , response);\n+\t\tString content = response.getContentAsString();\n+\t\tassertTrue(\"Wrong content: \" + content, content.equals(expectedContent));\n+\t}\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "2f3ddf7e79e46a9630f4d45530604d220c93f658",
            "filename": "tests/annotation/approval/src/test/java/demo/AuthorizationCodeProviderTests.java",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/spring-attic/spring-security-oauth/blob/8e9792c1963f1aeea81ca618785eb8d71d1cd1d2/tests%2Fannotation%2Fapproval%2Fsrc%2Ftest%2Fjava%2Fdemo%2FAuthorizationCodeProviderTests.java",
            "raw_url": "https://github.com/spring-attic/spring-security-oauth/raw/8e9792c1963f1aeea81ca618785eb8d71d1cd1d2/tests%2Fannotation%2Fapproval%2Fsrc%2Ftest%2Fjava%2Fdemo%2FAuthorizationCodeProviderTests.java",
            "contents_url": "https://api.github.com/repos/spring-attic/spring-security-oauth/contents/tests%2Fannotation%2Fapproval%2Fsrc%2Ftest%2Fjava%2Fdemo%2FAuthorizationCodeProviderTests.java?ref=8e9792c1963f1aeea81ca618785eb8d71d1cd1d2",
            "patch": "@@ -22,9 +22,9 @@\n public class AuthorizationCodeProviderTests extends AbstractAuthorizationCodeProviderTests {\n \n \tprotected void verifyAuthorizationPage(String page) {\n-\t\tassertTrue(page.contains(\"action='/oauth/authorize'\"));\n-\t\tassertTrue(page.contains(\"<input name='user_oauth_approval'\"));\n-\t\tassertTrue(page.contains(\"type='radio\")); // approval store\n+\t\tassertTrue(page.contains(\"action=\\\"/oauth/authorize\\\"\"));\n+\t\tassertTrue(page.contains(\"<input name=\\\"user_oauth_approval\\\"\"));\n+\t\tassertTrue(page.contains(\"type=\\\"radio\")); // approval store\n \t}\n \n }"
        },
        {
            "sha": "27a0a1c4e5165222b57324625bd000bc0079e70c",
            "filename": "tests/annotation/jdbc/src/test/java/demo/AuthorizationCodeProviderTests.java",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/spring-attic/spring-security-oauth/blob/8e9792c1963f1aeea81ca618785eb8d71d1cd1d2/tests%2Fannotation%2Fjdbc%2Fsrc%2Ftest%2Fjava%2Fdemo%2FAuthorizationCodeProviderTests.java",
            "raw_url": "https://github.com/spring-attic/spring-security-oauth/raw/8e9792c1963f1aeea81ca618785eb8d71d1cd1d2/tests%2Fannotation%2Fjdbc%2Fsrc%2Ftest%2Fjava%2Fdemo%2FAuthorizationCodeProviderTests.java",
            "contents_url": "https://api.github.com/repos/spring-attic/spring-security-oauth/contents/tests%2Fannotation%2Fjdbc%2Fsrc%2Ftest%2Fjava%2Fdemo%2FAuthorizationCodeProviderTests.java?ref=8e9792c1963f1aeea81ca618785eb8d71d1cd1d2",
            "patch": "@@ -34,8 +34,8 @@ protected String getUsername() {\n \t}\n \n \tprotected void verifyAuthorizationPage(String page) {\n-\t\tassertTrue(page.contains(\"action='/oauth/authorize'\"));\n-\t\tassertTrue(page.contains(\"<input name='user_oauth_approval'\"));\n-\t\tassertFalse(page.contains(\"type='radio\")); // no approval store\n+\t\tassertTrue(page.contains(\"action=\\\"/oauth/authorize\\\"\"));\n+\t\tassertTrue(page.contains(\"<input name=\\\"user_oauth_approval\\\"\"));\n+\t\tassertFalse(page.contains(\"type=\\\"radio\")); // no approval store\n \t}\n }"
        },
        {
            "sha": "f336430f4d49c474c77a8ad4c4b55d15413e2b64",
            "filename": "tests/xml/approval/src/test/java/demo/AuthorizationCodeProviderTests.java",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/spring-attic/spring-security-oauth/blob/8e9792c1963f1aeea81ca618785eb8d71d1cd1d2/tests%2Fxml%2Fapproval%2Fsrc%2Ftest%2Fjava%2Fdemo%2FAuthorizationCodeProviderTests.java",
            "raw_url": "https://github.com/spring-attic/spring-security-oauth/raw/8e9792c1963f1aeea81ca618785eb8d71d1cd1d2/tests%2Fxml%2Fapproval%2Fsrc%2Ftest%2Fjava%2Fdemo%2FAuthorizationCodeProviderTests.java",
            "contents_url": "https://api.github.com/repos/spring-attic/spring-security-oauth/contents/tests%2Fxml%2Fapproval%2Fsrc%2Ftest%2Fjava%2Fdemo%2FAuthorizationCodeProviderTests.java?ref=8e9792c1963f1aeea81ca618785eb8d71d1cd1d2",
            "patch": "@@ -25,9 +25,9 @@\n public class AuthorizationCodeProviderTests extends AbstractAuthorizationCodeProviderTests {\n \n \tprotected void verifyAuthorizationPage(String page) {\n-\t\tassertTrue(page.contains(\"action='/oauth/authorize'\"));\n-\t\tassertTrue(page.contains(\"<input name='user_oauth_approval'\"));\n-\t\tassertTrue(page.contains(\"type='radio\")); // approval store\n+\t\tassertTrue(page.contains(\"action=\\\"/oauth/authorize\\\"\"));\n+\t\tassertTrue(page.contains(\"<input name=\\\"user_oauth_approval\\\"\"));\n+\t\tassertTrue(page.contains(\"type=\\\"radio\")); // approval store\n \t}\n \n }"
        },
        {
            "sha": "32cb5606dcc5e80a9eca9183fcb70bcc6036e4f1",
            "filename": "tests/xml/jdbc/src/test/java/demo/AuthorizationCodeProviderTests.java",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/spring-attic/spring-security-oauth/blob/8e9792c1963f1aeea81ca618785eb8d71d1cd1d2/tests%2Fxml%2Fjdbc%2Fsrc%2Ftest%2Fjava%2Fdemo%2FAuthorizationCodeProviderTests.java",
            "raw_url": "https://github.com/spring-attic/spring-security-oauth/raw/8e9792c1963f1aeea81ca618785eb8d71d1cd1d2/tests%2Fxml%2Fjdbc%2Fsrc%2Ftest%2Fjava%2Fdemo%2FAuthorizationCodeProviderTests.java",
            "contents_url": "https://api.github.com/repos/spring-attic/spring-security-oauth/contents/tests%2Fxml%2Fjdbc%2Fsrc%2Ftest%2Fjava%2Fdemo%2FAuthorizationCodeProviderTests.java?ref=8e9792c1963f1aeea81ca618785eb8d71d1cd1d2",
            "patch": "@@ -26,8 +26,8 @@\n public class AuthorizationCodeProviderTests extends AbstractAuthorizationCodeProviderTests {\n \n \tprotected void verifyAuthorizationPage(String page) {\n-\t\tassertTrue(page.contains(\"action='/oauth/authorize'\"));\n-\t\tassertTrue(page.contains(\"<input name='user_oauth_approval'\"));\n-\t\tassertFalse(page.contains(\"type='radio\")); // no approval store\n+\t\tassertTrue(page.contains(\"action=\\\"/oauth/authorize\\\"\"));\n+\t\tassertTrue(page.contains(\"<input name=\\\"user_oauth_approval\\\"\"));\n+\t\tassertFalse(page.contains(\"type=\\\"radio\")); // no approval store\n \t}\n }"
        }
    ]
}