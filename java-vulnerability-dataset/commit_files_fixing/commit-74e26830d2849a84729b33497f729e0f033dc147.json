{
    "sha": "74e26830d2849a84729b33497f729e0f033dc147",
    "node_id": "MDY6Q29tbWl0MTU5Mjg2NTA6NzRlMjY4MzBkMjg0OWE4NDcyOWIzMzQ5N2Y3MjllMGYwMzNkYzE0Nw==",
    "commit": {
        "author": {
            "name": "Lukasz Lenart",
            "email": "lukaszlenart@apache.org",
            "date": "2016-01-10T10:46:46Z"
        },
        "committer": {
            "name": "Lukasz Lenart",
            "email": "lukaszlenart@apache.org",
            "date": "2016-01-10T10:47:25Z"
        },
        "message": "Adds additional pattern to prevent access to getClass method",
        "tree": {
            "sha": "fc64eff692e5393b7237f12db5fc5e11187ff564",
            "url": "https://api.github.com/repos/apache/struts/git/trees/fc64eff692e5393b7237f12db5fc5e11187ff564"
        },
        "url": "https://api.github.com/repos/apache/struts/git/commits/74e26830d2849a84729b33497f729e0f033dc147",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/struts/commits/74e26830d2849a84729b33497f729e0f033dc147",
    "html_url": "https://github.com/apache/struts/commit/74e26830d2849a84729b33497f729e0f033dc147",
    "comments_url": "https://api.github.com/repos/apache/struts/commits/74e26830d2849a84729b33497f729e0f033dc147/comments",
    "author": {
        "login": "lukaszlenart",
        "id": 170103,
        "node_id": "MDQ6VXNlcjE3MDEwMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/170103?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukaszlenart",
        "html_url": "https://github.com/lukaszlenart",
        "followers_url": "https://api.github.com/users/lukaszlenart/followers",
        "following_url": "https://api.github.com/users/lukaszlenart/following{/other_user}",
        "gists_url": "https://api.github.com/users/lukaszlenart/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/lukaszlenart/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lukaszlenart/subscriptions",
        "organizations_url": "https://api.github.com/users/lukaszlenart/orgs",
        "repos_url": "https://api.github.com/users/lukaszlenart/repos",
        "events_url": "https://api.github.com/users/lukaszlenart/events{/privacy}",
        "received_events_url": "https://api.github.com/users/lukaszlenart/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "lukaszlenart",
        "id": 170103,
        "node_id": "MDQ6VXNlcjE3MDEwMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/170103?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukaszlenart",
        "html_url": "https://github.com/lukaszlenart",
        "followers_url": "https://api.github.com/users/lukaszlenart/followers",
        "following_url": "https://api.github.com/users/lukaszlenart/following{/other_user}",
        "gists_url": "https://api.github.com/users/lukaszlenart/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/lukaszlenart/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lukaszlenart/subscriptions",
        "organizations_url": "https://api.github.com/users/lukaszlenart/orgs",
        "repos_url": "https://api.github.com/users/lukaszlenart/repos",
        "events_url": "https://api.github.com/users/lukaszlenart/events{/privacy}",
        "received_events_url": "https://api.github.com/users/lukaszlenart/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "a4f8d492144a62af2a7d5e934e62d737bdfc8058",
            "url": "https://api.github.com/repos/apache/struts/commits/a4f8d492144a62af2a7d5e934e62d737bdfc8058",
            "html_url": "https://github.com/apache/struts/commit/a4f8d492144a62af2a7d5e934e62d737bdfc8058"
        }
    ],
    "stats": {
        "total": 10,
        "additions": 7,
        "deletions": 3
    },
    "files": [
        {
            "sha": "84840f59eaf3652d2be51ab61b326b622a2a2c0c",
            "filename": "core/src/main/java/com/opensymphony/xwork2/security/DefaultExcludedPatternsChecker.java",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/apache/struts/blob/74e26830d2849a84729b33497f729e0f033dc147/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2Fsecurity%2FDefaultExcludedPatternsChecker.java",
            "raw_url": "https://github.com/apache/struts/raw/74e26830d2849a84729b33497f729e0f033dc147/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2Fsecurity%2FDefaultExcludedPatternsChecker.java",
            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2Fsecurity%2FDefaultExcludedPatternsChecker.java?ref=74e26830d2849a84729b33497f729e0f033dc147",
            "patch": "@@ -17,6 +17,7 @@ public class DefaultExcludedPatternsChecker implements ExcludedPatternsChecker {\n \n     public static final String[] EXCLUDED_PATTERNS = {\n         \"(^|\\\\%\\\\{)((#?)(top(\\\\.|\\\\['|\\\\[\\\")|\\\\[\\\\d\\\\]\\\\.)?)(dojo|struts|session|request|response|application|servlet(Request|Response|Context)|parameters|context|_memberAccess)(\\\\.|\\\\[).*\",\n+        \".*(^|\\\\.|\\\\[|\\\\'|\\\"|get)class(\\\\(\\\\.|\\\\[|\\\\'|\\\").*\",\n         \"^(action|method):.*\"\n     };\n "
        },
        {
            "sha": "d5eef86e79d6a40e65b426c715ac0bc40ea38ce5",
            "filename": "core/src/test/java/com/opensymphony/xwork2/interceptor/ParametersInterceptorTest.java",
            "status": "modified",
            "additions": 6,
            "deletions": 3,
            "changes": 9,
            "blob_url": "https://github.com/apache/struts/blob/74e26830d2849a84729b33497f729e0f033dc147/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2Finterceptor%2FParametersInterceptorTest.java",
            "raw_url": "https://github.com/apache/struts/raw/74e26830d2849a84729b33497f729e0f033dc147/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2Finterceptor%2FParametersInterceptorTest.java",
            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2Finterceptor%2FParametersInterceptorTest.java?ref=74e26830d2849a84729b33497f729e0f033dc147",
            "patch": "@@ -83,6 +83,7 @@ public void testInsecureParameters() throws Exception {\n                         \"java.lang.Boolean(false), #_memberAccess[\\\"allowStaticMethodAccess\\\"]= new java.lang.Boolean(true), \" +\n                         \"@java.lang.Runtime@getRuntime().exec('mkdir /tmp/PWNAGE'))(meh)\");\n                 put(\"top['name'](0)\", \"true\");\n+                put(\"expression\", \"#f=#_memberAccess.getClass().getDeclaredField('allowStaticMethodAccess'),#f.setAccessible(true),#f.set(#_memberAccess,true),#req=@org.apache.struts2.ServletActionContext@getRequest(),#resp=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),#resp.println(#req.getRealPath('/')),#resp.close()\");\n             }\n         };\n \n@@ -95,13 +96,15 @@ public void testInsecureParameters() throws Exception {\n         pi.setParameters(action, vs, params);\n \n         // then\n-        assertEquals(2, action.getActionMessages().size());\n+        assertEquals(3, action.getActionMessages().size());\n \n         String msg1 = action.getActionMessage(0);\n         String msg2 = action.getActionMessage(1);\n+        String msg3 = action.getActionMessage(2);\n \n-        assertEquals(\"Error setting expression 'name' with value '(#context[\\\"xwork.MethodAccessor.denyMethodExecution\\\"]= new java.lang.Boolean(false), #_memberAccess[\\\"allowStaticMethodAccess\\\"]= new java.lang.Boolean(true), @java.lang.Runtime@getRuntime().exec('mkdir /tmp/PWNAGE'))(meh)'\", msg1);\n-        assertEquals(\"Error setting expression 'top['name'](0)' with value 'true'\", msg2);\n+        assertEquals(\"Error setting expression 'expression' with value '#f=#_memberAccess.getClass().getDeclaredField('allowStaticMethodAccess'),#f.setAccessible(true),#f.set(#_memberAccess,true),#req=@org.apache.struts2.ServletActionContext@getRequest(),#resp=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),#resp.println(#req.getRealPath('/')),#resp.close()'\", msg1);\n+        assertEquals(\"Error setting expression 'name' with value '(#context[\\\"xwork.MethodAccessor.denyMethodExecution\\\"]= new java.lang.Boolean(false), #_memberAccess[\\\"allowStaticMethodAccess\\\"]= new java.lang.Boolean(true), @java.lang.Runtime@getRuntime().exec('mkdir /tmp/PWNAGE'))(meh)'\", msg2);\n+        assertEquals(\"Error setting expression 'top['name'](0)' with value 'true'\", msg3);\n         assertNull(action.getName());\n     }\n "
        }
    ]
}