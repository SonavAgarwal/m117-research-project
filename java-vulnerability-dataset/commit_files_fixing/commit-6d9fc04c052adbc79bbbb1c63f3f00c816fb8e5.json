{
    "sha": "6d9fc04c052adbc79bbbb1c63f3f00c816fb8e56",
    "node_id": "MDY6Q29tbWl0MTYwOTk5OjZkOWZjMDRjMDUyYWRiYzc5YmJiYjFjNjNmM2YwMGM4MTZmYjhlNTY=",
    "commit": {
        "author": {
            "name": "Michael Han",
            "email": "hanm@apache.org",
            "date": "2017-03-04T18:22:03Z"
        },
        "committer": {
            "name": "Michael Han",
            "email": "hanm@apache.org",
            "date": "2017-03-04T18:22:15Z"
        },
        "message": "ZOOKEEPER-2693: DOS attack on wchp/wchc four letter words (4lw)\n\nThe previous patch is not valid anymore as design has changed. Update patch based on phunt 's feedback.\nSee ZOOKEEPER-2693 JIRA for details. This patch is still targeting for branch-3.5 / master. Patch for branch-3.4 will be created shortly.\n\nThe gist of the patch is:\n* Introduced a new configuration option which encodes a white list of 4lw commands. A 4lw command that is not on the white list will not be enabled on server side.\n* For branch-3.5, the default value of the configuration option is empty. We want users to use the alternative AdminServer anyway.\n\nAuthor: Michael Han <hanm@apache.org>\n\nReviewers: Rakesh Radhakrishnan <rakeshrapache.org>, Mohammad Arshad <arshad@apache.org>, Flavio Junqueira <fpj@apache.org>, Edward Ribeiro <edward.ribeiro@gmail.com>, Abraham Fine <afine@apache.org>\n\nCloses #179 from hanm/ZOOKEEPER-2693 and squashes the following commits:\n\n1ffd114 [Michael Han] Tweak tests.\nb4c421d [Michael Han] ZOOKEEPER-2693: DOS attack on wchp/wchc four letter words (4lw). Introduce a new configuration option 4lw.commands.whitelist that disables all 4lw (except srvr) by default to avoid the exploits reported on wchp/wchc commands.\n\n(cherry picked from commit 5fe68506f217246c7ebd96803f9c78e13ec2f11a)\nSigned-off-by: Michael Han <hanm@apache.org>",
        "tree": {
            "sha": "c3cd814728b46ab936a1ff21266bf212694c5eab",
            "url": "https://api.github.com/repos/apache/zookeeper/git/trees/c3cd814728b46ab936a1ff21266bf212694c5eab"
        },
        "url": "https://api.github.com/repos/apache/zookeeper/git/commits/6d9fc04c052adbc79bbbb1c63f3f00c816fb8e56",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/zookeeper/commits/6d9fc04c052adbc79bbbb1c63f3f00c816fb8e56",
    "html_url": "https://github.com/apache/zookeeper/commit/6d9fc04c052adbc79bbbb1c63f3f00c816fb8e56",
    "comments_url": "https://api.github.com/repos/apache/zookeeper/commits/6d9fc04c052adbc79bbbb1c63f3f00c816fb8e56/comments",
    "author": {
        "login": "hanm",
        "id": 1009243,
        "node_id": "MDQ6VXNlcjEwMDkyNDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1009243?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hanm",
        "html_url": "https://github.com/hanm",
        "followers_url": "https://api.github.com/users/hanm/followers",
        "following_url": "https://api.github.com/users/hanm/following{/other_user}",
        "gists_url": "https://api.github.com/users/hanm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hanm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hanm/subscriptions",
        "organizations_url": "https://api.github.com/users/hanm/orgs",
        "repos_url": "https://api.github.com/users/hanm/repos",
        "events_url": "https://api.github.com/users/hanm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hanm/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "hanm",
        "id": 1009243,
        "node_id": "MDQ6VXNlcjEwMDkyNDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1009243?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hanm",
        "html_url": "https://github.com/hanm",
        "followers_url": "https://api.github.com/users/hanm/followers",
        "following_url": "https://api.github.com/users/hanm/following{/other_user}",
        "gists_url": "https://api.github.com/users/hanm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hanm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hanm/subscriptions",
        "organizations_url": "https://api.github.com/users/hanm/orgs",
        "repos_url": "https://api.github.com/users/hanm/repos",
        "events_url": "https://api.github.com/users/hanm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hanm/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "1912fa8d63e6bbfdb5bb96bec85efa7c94e131e9",
            "url": "https://api.github.com/repos/apache/zookeeper/commits/1912fa8d63e6bbfdb5bb96bec85efa7c94e131e9",
            "html_url": "https://github.com/apache/zookeeper/commit/1912fa8d63e6bbfdb5bb96bec85efa7c94e131e9"
        }
    ],
    "stats": {
        "total": 481,
        "additions": 466,
        "deletions": 15
    },
    "files": [
        {
            "sha": "45cd29e18c10d599fa81a1beeba219c941d43faa",
            "filename": "src/docs/src/documentation/content/xdocs/zookeeperAdmin.xml",
            "status": "modified",
            "additions": 55,
            "deletions": 2,
            "changes": 57,
            "blob_url": "https://github.com/apache/zookeeper/blob/6d9fc04c052adbc79bbbb1c63f3f00c816fb8e56/src%2Fdocs%2Fsrc%2Fdocumentation%2Fcontent%2Fxdocs%2FzookeeperAdmin.xml",
            "raw_url": "https://github.com/apache/zookeeper/raw/6d9fc04c052adbc79bbbb1c63f3f00c816fb8e56/src%2Fdocs%2Fsrc%2Fdocumentation%2Fcontent%2Fxdocs%2FzookeeperAdmin.xml",
            "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src%2Fdocs%2Fsrc%2Fdocumentation%2Fcontent%2Fxdocs%2FzookeeperAdmin.xml?ref=6d9fc04c052adbc79bbbb1c63f3f00c816fb8e56",
            "patch": "@@ -1145,6 +1145,40 @@ server.3=zoo3:2888:3888</programlisting>\n             </listitem>\n           </varlistentry>\n \n+          <varlistentry>\n+            <term>4lw.commands.whitelist</term>\n+\n+            <listitem>\n+              <para>(Java system property: <emphasis\n+                      role=\"bold\">zookeeper.4lw.commands.whitelist</emphasis>)</para>\n+\n+              <para><emphasis role=\"bold\">New in 3.5.3:</emphasis>\n+                A list of comma separated <ulink url=\"#sc_4lw\">Four Letter Words</ulink>\n+                commands that user wants to use. A valid Four Letter Words\n+                command must be put in this list else ZooKeeper server will\n+                not enable the command.\n+                By default the whitelist only contains \"srvr\" command\n+                which zkServer.sh uses. The rest of four letter word commands are disabled\n+                by default.\n+              </para>\n+\n+              <para>Here's an example of the configuration that enables stat, ruok, conf, and isro\n+              command while disabling the rest of Four Letter Words command:</para>\n+              <programlisting>\n+                4lw.commands.whitelist=stat, ruok, conf, isro\n+              </programlisting>\n+\n+              <para>If you really need enable all four letter word commands by default, you can use\n+                the asterisk option so you don't have to include every command one by one in the list.\n+                As an example, this will enable all four letter word commands:\n+              </para>\n+              <programlisting>\n+                4lw.commands.whitelist=*\n+              </programlisting>\n+\n+            </listitem>\n+          </varlistentry>\n+\n         </variablelist>\n         <para></para>\n       </section>\n@@ -1600,7 +1634,7 @@ server.3=zoo3:2888:3888</programlisting>\n     <section id=\"sc_zkCommands\">\n       <title>ZooKeeper Commands</title>\n \n-      <section>\n+      <section id=\"sc_4lw\">\n         <title>The Four Letter Words</title>\n         <para>ZooKeeper responds to a small set of commands. Each command is\n         composed of four letters. You issue the commands to ZooKeeper via telnet\n@@ -1611,7 +1645,16 @@ server.3=zoo3:2888:3888</programlisting>\n         while \"srvr\" and \"cons\" give extended details on server and\n         connections respectively.</para>\n \n-        <variablelist>\n+        <para><emphasis role=\"bold\">New in 3.5.3:</emphasis>\n+          Four Letter Words need to be explicitly white listed before using.\n+          Please refer <emphasis role=\"bold\">4lw.commands.whitelist</emphasis>\n+           described in <ulink url=\"#sc_clusterOptions\">\n+            cluster configuration section</ulink> for details.\n+          Moving forward, Four Letter Words will be deprecated, please use\n+          <ulink url=\"#sc_adminserver\">AdminServer</ulink> instead.\n+        </para>\n+\n+      <variablelist>\n           <varlistentry>\n             <term>conf</term>\n \n@@ -2081,6 +2124,16 @@ server.3=zoo3:2888:3888</programlisting>\n             usage limit that would cause the system to swap.</para>\n           </listitem>\n         </varlistentry>\n+\n+        <varlistentry>\n+          <term>Publicly accessible deployment</term>\n+          <listitem>\n+            <para>\n+              A ZooKeeper ensemble is expected to operate in a trusted computing environment.\n+              It is thus recommended to deploy ZooKeeper behind a firewall.\n+            </para>\n+          </listitem>\n+        </varlistentry>\n       </variablelist>\n     </section>\n "
        },
        {
            "sha": "04240c2f65ef3aed7fec33bec90845a8ff70bceb",
            "filename": "src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java",
            "status": "modified",
            "additions": 17,
            "deletions": 4,
            "changes": 21,
            "blob_url": "https://github.com/apache/zookeeper/blob/6d9fc04c052adbc79bbbb1c63f3f00c816fb8e56/src%2Fjava%2Fmain%2Forg%2Fapache%2Fzookeeper%2Fserver%2FNIOServerCnxn.java",
            "raw_url": "https://github.com/apache/zookeeper/raw/6d9fc04c052adbc79bbbb1c63f3f00c816fb8e56/src%2Fjava%2Fmain%2Forg%2Fapache%2Fzookeeper%2Fserver%2FNIOServerCnxn.java",
            "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src%2Fjava%2Fmain%2Forg%2Fapache%2Fzookeeper%2Fserver%2FNIOServerCnxn.java?ref=6d9fc04c052adbc79bbbb1c63f3f00c816fb8e56",
            "patch": "@@ -47,6 +47,7 @@\n import org.apache.zookeeper.server.command.CommandExecutor;\n import org.apache.zookeeper.server.command.FourLetterCommands;\n import org.apache.zookeeper.server.command.SetTraceMaskCommand;\n+import org.apache.zookeeper.server.command.NopCommand;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -478,12 +479,11 @@ private boolean checkFourLetterWord(final SelectionKey k, final int len)\n     {\n         // We take advantage of the limited size of the length to look\n         // for cmds. They are all 4-bytes which fits inside of an int\n-        String cmd = FourLetterCommands.getCmdMapView().get(len);\n-        if (cmd == null) {\n+        if (!FourLetterCommands.isKnown(len)) {\n             return false;\n         }\n-        LOG.info(\"Processing \" + cmd + \" command from \"\n-                + sock.socket().getRemoteSocketAddress());\n+\n+        String cmd = FourLetterCommands.getCommandString(len);\n         packetReceived();\n \n         /** cancel the selection key to remove the socket handling\n@@ -505,6 +505,19 @@ private boolean checkFourLetterWord(final SelectionKey k, final int len)\n \n         final PrintWriter pwriter = new PrintWriter(\n                 new BufferedWriter(new SendBufferWriter()));\n+\n+        // ZOOKEEPER-2693: don't execute 4lw if it's not enabled.\n+        if (!FourLetterCommands.isEnabled(cmd)) {\n+            LOG.debug(\"Command {} is not executed because it is not in the whitelist.\", cmd);\n+            NopCommand nopCmd = new NopCommand(pwriter, this, cmd +\n+                    \" is not executed because it is not in the whitelist.\");\n+            nopCmd.start();\n+            return true;\n+        }\n+\n+        LOG.info(\"Processing \" + cmd + \" command from \"\n+                + sock.socket().getRemoteSocketAddress());\n+\n         if (len == FourLetterCommands.setTraceMaskCmd) {\n             incomingBuffer = ByteBuffer.allocate(8);\n             int rc = sock.read(incomingBuffer);"
        },
        {
            "sha": "cf5bd8a7cc32ded0f2fcec251919f9d2441e5ecd",
            "filename": "src/java/main/org/apache/zookeeper/server/NettyServerCnxn.java",
            "status": "modified",
            "additions": 18,
            "deletions": 4,
            "changes": 22,
            "blob_url": "https://github.com/apache/zookeeper/blob/6d9fc04c052adbc79bbbb1c63f3f00c816fb8e56/src%2Fjava%2Fmain%2Forg%2Fapache%2Fzookeeper%2Fserver%2FNettyServerCnxn.java",
            "raw_url": "https://github.com/apache/zookeeper/raw/6d9fc04c052adbc79bbbb1c63f3f00c816fb8e56/src%2Fjava%2Fmain%2Forg%2Fapache%2Fzookeeper%2Fserver%2FNettyServerCnxn.java",
            "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src%2Fjava%2Fmain%2Forg%2Fapache%2Fzookeeper%2Fserver%2FNettyServerCnxn.java?ref=6d9fc04c052adbc79bbbb1c63f3f00c816fb8e56",
            "patch": "@@ -41,6 +41,7 @@\n import org.apache.zookeeper.proto.WatcherEvent;\n import org.apache.zookeeper.server.command.CommandExecutor;\n import org.apache.zookeeper.server.command.FourLetterCommands;\n+import org.apache.zookeeper.server.command.NopCommand;\n import org.apache.zookeeper.server.command.SetTraceMaskCommand;\n import org.jboss.netty.buffer.ChannelBuffer;\n import org.jboss.netty.buffer.ChannelBuffers;\n@@ -267,17 +268,30 @@ private boolean checkFourLetterWord(final Channel channel,\n     {\n         // We take advantage of the limited size of the length to look\n         // for cmds. They are all 4-bytes which fits inside of an int\n-        String cmd = FourLetterCommands.getCmdMapView().get(len);\n-        if (cmd == null) {\n+        if (!FourLetterCommands.isKnown(len)) {\n             return false;\n         }\n+\n+        String cmd = FourLetterCommands.getCommandString(len);\n+\n         channel.setInterestOps(0).awaitUninterruptibly();\n-        LOG.info(\"Processing \" + cmd + \" command from \"\n-                + channel.getRemoteAddress());\n         packetReceived();\n \n         final PrintWriter pwriter = new PrintWriter(\n                 new BufferedWriter(new SendBufferWriter()));\n+\n+        // ZOOKEEPER-2693: don't execute 4lw if it's not enabled.\n+        if (!FourLetterCommands.isEnabled(cmd)) {\n+            LOG.debug(\"Command {} is not executed because it is not in the whitelist.\", cmd);\n+            NopCommand nopCmd = new NopCommand(pwriter, this, cmd +\n+                    \" is not executed because it is not in the whitelist.\");\n+            nopCmd.start();\n+            return true;\n+        }\n+\n+        LOG.info(\"Processing \" + cmd + \" command from \"\n+                + channel.getRemoteAddress());\n+\n        if (len == FourLetterCommands.setTraceMaskCmd) {\n             ByteBuffer mask = ByteBuffer.allocate(8);\n             message.readBytes(mask);"
        },
        {
            "sha": "82e09dc197e1d88b89c4d04163088488c37b728a",
            "filename": "src/java/main/org/apache/zookeeper/server/command/FourLetterCommands.java",
            "status": "modified",
            "additions": 81,
            "deletions": 5,
            "changes": 86,
            "blob_url": "https://github.com/apache/zookeeper/blob/6d9fc04c052adbc79bbbb1c63f3f00c816fb8e56/src%2Fjava%2Fmain%2Forg%2Fapache%2Fzookeeper%2Fserver%2Fcommand%2FFourLetterCommands.java",
            "raw_url": "https://github.com/apache/zookeeper/raw/6d9fc04c052adbc79bbbb1c63f3f00c816fb8e56/src%2Fjava%2Fmain%2Forg%2Fapache%2Fzookeeper%2Fserver%2Fcommand%2FFourLetterCommands.java",
            "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src%2Fjava%2Fmain%2Forg%2Fapache%2Fzookeeper%2Fserver%2Fcommand%2FFourLetterCommands.java?ref=6d9fc04c052adbc79bbbb1c63f3f00c816fb8e56",
            "patch": "@@ -18,10 +18,15 @@\n \n package org.apache.zookeeper.server.command;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import java.nio.ByteBuffer;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.Arrays;\n \n /**\n  * This class contains constants for all the four letter commands\n@@ -153,11 +158,82 @@ public class FourLetterCommands {\n      */\n     public final static int telnetCloseCmd = 0xfff4fffd;\n \n-    final static HashMap<Integer, String> cmd2String =\n-        new HashMap<Integer, String>();\n+    private static final String ZOOKEEPER_4LW_COMMANDS_WHITELIST = \"zookeeper.4lw.commands.whitelist\";\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(FourLetterCommands.class);\n+\n+    private static final Map<Integer, String> cmd2String = new HashMap<Integer, String>();\n+\n+    private static final Set<String> whiteListedCommands = new HashSet<String>();\n+\n+    private static boolean whiteListInitialized = false;\n+\n+    // @VisibleForTesting\n+    public static void resetWhiteList() {\n+        whiteListInitialized = false;\n+        whiteListedCommands.clear();\n+    }\n+\n+    /**\n+     * Return the string representation of the specified command code.\n+     */\n+    public static String getCommandString(int command) {\n+        return cmd2String.get(command);\n+    }\n+\n+    /**\n+     * Check if the specified command code is from a known command.\n+     *\n+     * @param command The integer code of command.\n+     * @return true if the specified command is known, false otherwise.\n+     */\n+    public static boolean isKnown(int command) {\n+        return cmd2String.containsKey(command);\n+    }\n+\n+    /**\n+     * Check if the specified command is enabled.\n+     *\n+     * In ZOOKEEPER-2693 we introduce a configuration option to only\n+     * allow a specific set of white listed commands to execute.\n+     * A command will only be executed if it is also configured\n+     * in the white list.\n+     *\n+     * @param command The command string.\n+     * @return true if the specified command is enabled\n+     */\n+    public static boolean isEnabled(String command) {\n+        if (whiteListInitialized) {\n+            return whiteListedCommands.contains(command);\n+        }\n+\n+        String commands = System.getProperty(ZOOKEEPER_4LW_COMMANDS_WHITELIST);\n+        if (commands != null) {\n+            String[] list = commands.split(\",\");\n+            for (String cmd : list) {\n+                if (cmd.trim().equals(\"*\")) {\n+                    for (Map.Entry<Integer, String> entry : cmd2String.entrySet()) {\n+                        whiteListedCommands.add(entry.getValue());\n+                    }\n+                    break;\n+                }\n+                if (!cmd.trim().isEmpty()) {\n+                    whiteListedCommands.add(cmd.trim());\n+                }\n+            }\n+        }\n \n-    public static Map<Integer, String> getCmdMapView() {\n-        return Collections.unmodifiableMap(cmd2String);\n+        // It is sad that isro and srvr are used by ZooKeeper itself. Need fix this\n+        // before deprecating 4lw.\n+        if (System.getProperty(\"readonlymode.enabled\", \"false\").equals(\"true\")) {\n+            whiteListedCommands.add(\"isro\");\n+        }\n+        // zkServer.sh depends on \"srvr\".\n+        whiteListedCommands.add(\"srvr\");\n+        whiteListInitialized = true;\n+        LOG.info(\"The list of known four letter word commands is : {}\", Arrays.asList(cmd2String));\n+        LOG.info(\"The list of enabled four letter word commands is : {}\", Arrays.asList(whiteListedCommands));\n+        return whiteListedCommands.contains(command);\n     }\n \n     // specify all of the commands that are available"
        },
        {
            "sha": "4924fcf4ce49259f7d7557f32b84fb724487e7aa",
            "filename": "src/java/main/org/apache/zookeeper/server/command/NopCommand.java",
            "status": "added",
            "additions": 41,
            "deletions": 0,
            "changes": 41,
            "blob_url": "https://github.com/apache/zookeeper/blob/6d9fc04c052adbc79bbbb1c63f3f00c816fb8e56/src%2Fjava%2Fmain%2Forg%2Fapache%2Fzookeeper%2Fserver%2Fcommand%2FNopCommand.java",
            "raw_url": "https://github.com/apache/zookeeper/raw/6d9fc04c052adbc79bbbb1c63f3f00c816fb8e56/src%2Fjava%2Fmain%2Forg%2Fapache%2Fzookeeper%2Fserver%2Fcommand%2FNopCommand.java",
            "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src%2Fjava%2Fmain%2Forg%2Fapache%2Fzookeeper%2Fserver%2Fcommand%2FNopCommand.java?ref=6d9fc04c052adbc79bbbb1c63f3f00c816fb8e56",
            "patch": "@@ -0,0 +1,41 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.zookeeper.server.command;\n+\n+import java.io.PrintWriter;\n+\n+import org.apache.zookeeper.server.ServerCnxn;\n+\n+/**\n+ * A command that does not do anything except reply to client with predefined message.\n+ * It is used to inform clients who execute none white listed four letter word commands.\n+ */\n+public class NopCommand extends AbstractFourLetterCommand {\n+    private String msg;\n+\n+    public NopCommand(PrintWriter pw, ServerCnxn serverCnxn, String msg) {\n+        super(pw, serverCnxn);\n+        this.msg = msg;\n+    }\n+\n+    @Override\n+    public void commandRun() {\n+        pw.println(msg);\n+    }\n+}"
        },
        {
            "sha": "54a6be50927d13bb0292d7f63850657cb5ff895f",
            "filename": "src/java/test/org/apache/zookeeper/ZKTestCase.java",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/apache/zookeeper/blob/6d9fc04c052adbc79bbbb1c63f3f00c816fb8e56/src%2Fjava%2Ftest%2Forg%2Fapache%2Fzookeeper%2FZKTestCase.java",
            "raw_url": "https://github.com/apache/zookeeper/raw/6d9fc04c052adbc79bbbb1c63f3f00c816fb8e56/src%2Fjava%2Ftest%2Forg%2Fapache%2Fzookeeper%2FZKTestCase.java",
            "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src%2Fjava%2Ftest%2Forg%2Fapache%2Fzookeeper%2FZKTestCase.java?ref=6d9fc04c052adbc79bbbb1c63f3f00c816fb8e56",
            "patch": "@@ -51,6 +51,9 @@ public void starting(FrameworkMethod method) {\n             // accidentally attempting to start multiple admin servers on the\n             // same port.\n             System.setProperty(\"zookeeper.admin.enableServer\", \"false\");\n+            // ZOOKEEPER-2693 disables all 4lw by default.\n+            // Here we enable the 4lw which ZooKeeper tests depends.\n+            System.setProperty(\"zookeeper.4lw.commands.whitelist\", \"*\");\n             testName = method.getName();\n             LOG.info(\"STARTING \" + testName);\n         }"
        },
        {
            "sha": "f5d69673e0ebda6de0fd41b4fe7ff0398d209337",
            "filename": "src/java/test/org/apache/zookeeper/test/FourLetterWordsWhiteListTest.java",
            "status": "added",
            "additions": 251,
            "deletions": 0,
            "changes": 251,
            "blob_url": "https://github.com/apache/zookeeper/blob/6d9fc04c052adbc79bbbb1c63f3f00c816fb8e56/src%2Fjava%2Ftest%2Forg%2Fapache%2Fzookeeper%2Ftest%2FFourLetterWordsWhiteListTest.java",
            "raw_url": "https://github.com/apache/zookeeper/raw/6d9fc04c052adbc79bbbb1c63f3f00c816fb8e56/src%2Fjava%2Ftest%2Forg%2Fapache%2Fzookeeper%2Ftest%2FFourLetterWordsWhiteListTest.java",
            "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src%2Fjava%2Ftest%2Forg%2Fapache%2Fzookeeper%2Ftest%2FFourLetterWordsWhiteListTest.java?ref=6d9fc04c052adbc79bbbb1c63f3f00c816fb8e56",
            "patch": "@@ -0,0 +1,251 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.zookeeper.test;\n+\n+import java.io.IOException;\n+\n+import org.apache.zookeeper.TestableZooKeeper;\n+import org.apache.zookeeper.common.X509Exception.SSLContextException;\n+\n+import static org.apache.zookeeper.client.FourLetterWordMain.send4LetterWord;\n+\n+import org.apache.zookeeper.server.command.FourLetterCommands;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class FourLetterWordsWhiteListTest extends ClientBase {\n+    protected static final Logger LOG =\n+        LoggerFactory.getLogger(FourLetterWordsWhiteListTest.class);\n+\n+    /*\n+     * ZOOKEEPER-2693: test white list of four letter words.\n+     * For 3.5.x default white list is empty. Verify that is\n+     * the case (except 'stat' command which is enabled in ClientBase\n+     * which other tests depend on.).\n+     */\n+    @Test(timeout=30000)\n+    public void testFourLetterWordsAllDisabledByDefault() throws Exception {\n+        stopServer();\n+        FourLetterCommands.resetWhiteList();\n+        System.setProperty(\"zookeeper.4lw.commands.whitelist\", \"stat\");\n+        startServer();\n+\n+        // Default white list for 3.5.x is empty, so all command should fail.\n+        verifyAllCommandsFail();\n+\n+        TestableZooKeeper zk = createClient();\n+\n+        verifyAllCommandsFail();\n+\n+        zk.getData(\"/\", true, null);\n+\n+        verifyAllCommandsFail();\n+\n+        zk.close();\n+\n+        verifyFuzzyMatch(\"stat\", \"Outstanding\");\n+        verifyAllCommandsFail();\n+    }\n+\n+    @Test(timeout=30000)\n+    public void testFourLetterWordsEnableSomeCommands() throws Exception {\n+        stopServer();\n+        FourLetterCommands.resetWhiteList();\n+        System.setProperty(\"zookeeper.4lw.commands.whitelist\", \"stat, ruok, isro\");\n+        startServer();\n+        // stat, ruok and isro are white listed.\n+        verifyFuzzyMatch(\"stat\", \"Outstanding\");\n+        verifyExactMatch(\"ruok\", \"imok\");\n+        verifyExactMatch(\"isro\", \"rw\");\n+\n+        // Rest of commands fail.\n+        verifyExactMatch(\"conf\", generateExpectedMessage(\"conf\"));\n+        verifyExactMatch(\"cons\", generateExpectedMessage(\"cons\"));\n+        verifyExactMatch(\"crst\", generateExpectedMessage(\"crst\"));\n+        verifyExactMatch(\"dirs\", generateExpectedMessage(\"dirs\"));\n+        verifyExactMatch(\"dump\", generateExpectedMessage(\"dump\"));\n+        verifyExactMatch(\"envi\", generateExpectedMessage(\"envi\"));\n+        verifyExactMatch(\"gtmk\", generateExpectedMessage(\"gtmk\"));\n+        verifyExactMatch(\"stmk\", generateExpectedMessage(\"stmk\"));\n+        verifyExactMatch(\"srst\", generateExpectedMessage(\"srst\"));\n+        verifyExactMatch(\"wchc\", generateExpectedMessage(\"wchc\"));\n+        verifyExactMatch(\"wchp\", generateExpectedMessage(\"wchp\"));\n+        verifyExactMatch(\"wchs\", generateExpectedMessage(\"wchs\"));\n+        verifyExactMatch(\"mntr\", generateExpectedMessage(\"mntr\"));\n+    }\n+\n+    @Test(timeout=30000)\n+    public void testISROEnabledWhenReadOnlyModeEnabled() throws Exception {\n+        stopServer();\n+        FourLetterCommands.resetWhiteList();\n+        System.setProperty(\"zookeeper.4lw.commands.whitelist\", \"stat\");\n+        System.setProperty(\"readonlymode.enabled\", \"true\");\n+        startServer();\n+        verifyExactMatch(\"isro\", \"rw\");\n+        System.clearProperty(\"readonlymode.enabled\");\n+    }\n+\n+    @Test(timeout=30000)\n+    public void testFourLetterWordsInvalidConfiguration() throws Exception {\n+        stopServer();\n+        FourLetterCommands.resetWhiteList();\n+        System.setProperty(\"zookeeper.4lw.commands.whitelist\", \"foo bar\" +\n+                \" foo,,, \" +\n+                \"bar :.,@#$%^&*() , , , , bar, bar, stat,        \");\n+        startServer();\n+\n+        // Just make sure we are good when admin made some mistakes in config file.\n+        verifyAllCommandsFail();\n+        // But still, what's valid in white list will get through.\n+        verifyFuzzyMatch(\"stat\", \"Outstanding\");\n+    }\n+\n+    @Test(timeout=30000)\n+    public void testFourLetterWordsEnableAllCommandsThroughAsterisk() throws Exception {\n+        stopServer();\n+        FourLetterCommands.resetWhiteList();\n+        System.setProperty(\"zookeeper.4lw.commands.whitelist\", \"*\");\n+        startServer();\n+        verifyAllCommandsSuccess();\n+    }\n+\n+    @Test(timeout=30000)\n+    public void testFourLetterWordsEnableAllCommandsThroughExplicitList() throws Exception {\n+        stopServer();\n+        FourLetterCommands.resetWhiteList();\n+        System.setProperty(\"zookeeper.4lw.commands.whitelist\",\n+                \"ruok, envi, conf, stat, srvr, cons, dump,\" +\n+                        \"wchs, wchp, wchc, srst, crst, \" +\n+                        \"dirs, mntr, gtmk, isro, stmk\");\n+        startServer();\n+        verifyAllCommandsSuccess();\n+    }\n+\n+\n+    private void verifyAllCommandsSuccess() throws Exception {\n+        verifyExactMatch(\"ruok\", \"imok\");\n+        verifyFuzzyMatch(\"envi\", \"java.version\");\n+        verifyFuzzyMatch(\"conf\", \"clientPort\");\n+        verifyFuzzyMatch(\"stat\", \"Outstanding\");\n+        verifyFuzzyMatch(\"srvr\", \"Outstanding\");\n+        verifyFuzzyMatch(\"cons\", \"queued\");\n+        verifyFuzzyMatch(\"dump\", \"Session\");\n+        verifyFuzzyMatch(\"wchs\", \"watches\");\n+        verifyFuzzyMatch(\"wchp\", \"\");\n+        verifyFuzzyMatch(\"wchc\", \"\");\n+\n+        verifyFuzzyMatch(\"srst\", \"reset\");\n+        verifyFuzzyMatch(\"crst\", \"reset\");\n+\n+        verifyFuzzyMatch(\"stat\", \"Outstanding\");\n+        verifyFuzzyMatch(\"srvr\", \"Outstanding\");\n+        verifyFuzzyMatch(\"cons\", \"queued\");\n+        verifyFuzzyMatch(\"gtmk\", \"306\");\n+        verifyFuzzyMatch(\"isro\", \"rw\");\n+\n+        TestableZooKeeper zk = createClient();\n+        String sid = getHexSessionId(zk.getSessionId());\n+\n+        verifyFuzzyMatch(\"stat\", \"queued\");\n+        verifyFuzzyMatch(\"srvr\", \"Outstanding\");\n+        verifyFuzzyMatch(\"cons\", sid);\n+        verifyFuzzyMatch(\"dump\", sid);\n+        verifyFuzzyMatch(\"dirs\", \"size\");\n+\n+        zk.getData(\"/\", true, null);\n+\n+        verifyFuzzyMatch(\"stat\", \"queued\");\n+        verifyFuzzyMatch(\"srvr\", \"Outstanding\");\n+        verifyFuzzyMatch(\"cons\", sid);\n+        verifyFuzzyMatch(\"dump\", sid);\n+\n+        verifyFuzzyMatch(\"wchs\", \"watching 1\");\n+        verifyFuzzyMatch(\"wchp\", sid);\n+        verifyFuzzyMatch(\"wchc\", sid);\n+        verifyFuzzyMatch(\"dirs\", \"size\");\n+        zk.close();\n+\n+        verifyExactMatch(\"ruok\", \"imok\");\n+        verifyFuzzyMatch(\"envi\", \"java.version\");\n+        verifyFuzzyMatch(\"conf\", \"clientPort\");\n+        verifyFuzzyMatch(\"stat\", \"Outstanding\");\n+        verifyFuzzyMatch(\"srvr\", \"Outstanding\");\n+        verifyFuzzyMatch(\"cons\", \"queued\");\n+        verifyFuzzyMatch(\"dump\", \"Session\");\n+        verifyFuzzyMatch(\"wchs\", \"watch\");\n+        verifyFuzzyMatch(\"wchp\", \"\");\n+        verifyFuzzyMatch(\"wchc\", \"\");\n+\n+        verifyFuzzyMatch(\"srst\", \"reset\");\n+        verifyFuzzyMatch(\"crst\", \"reset\");\n+\n+        verifyFuzzyMatch(\"stat\", \"Outstanding\");\n+        verifyFuzzyMatch(\"srvr\", \"Outstanding\");\n+        verifyFuzzyMatch(\"cons\", \"queued\");\n+        verifyFuzzyMatch(\"mntr\", \"zk_server_state\\tstandalone\");\n+        verifyFuzzyMatch(\"mntr\", \"num_alive_connections\");\n+        verifyFuzzyMatch(\"stat\", \"Connections\");\n+        verifyFuzzyMatch(\"srvr\", \"Connections\");\n+        verifyFuzzyMatch(\"dirs\", \"size\");\n+    }\n+\n+    private void verifyAllCommandsFail() throws Exception {\n+        verifyExactMatch(\"ruok\", generateExpectedMessage(\"ruok\"));\n+        verifyExactMatch(\"conf\", generateExpectedMessage(\"conf\"));\n+        verifyExactMatch(\"cons\", generateExpectedMessage(\"cons\"));\n+        verifyExactMatch(\"crst\", generateExpectedMessage(\"crst\"));\n+        verifyExactMatch(\"dirs\", generateExpectedMessage(\"dirs\"));\n+        verifyExactMatch(\"dump\", generateExpectedMessage(\"dump\"));\n+        verifyExactMatch(\"envi\", generateExpectedMessage(\"envi\"));\n+        verifyExactMatch(\"gtmk\", generateExpectedMessage(\"gtmk\"));\n+        verifyExactMatch(\"stmk\", generateExpectedMessage(\"stmk\"));\n+        verifyExactMatch(\"srst\", generateExpectedMessage(\"srst\"));\n+        verifyExactMatch(\"wchc\", generateExpectedMessage(\"wchc\"));\n+        verifyExactMatch(\"wchp\", generateExpectedMessage(\"wchp\"));\n+        verifyExactMatch(\"wchs\", generateExpectedMessage(\"wchs\"));\n+        verifyExactMatch(\"mntr\", generateExpectedMessage(\"mntr\"));\n+        verifyExactMatch(\"isro\", generateExpectedMessage(\"isro\"));\n+\n+        // srvr is enabled by default due to the sad fact zkServer.sh uses it.\n+        verifyFuzzyMatch(\"srvr\", \"Outstanding\");\n+    }\n+\n+    private String sendRequest(String cmd) throws IOException, SSLContextException {\n+      HostPort hpobj = ClientBase.parseHostPortList(hostPort).get(0);\n+      return send4LetterWord(hpobj.host, hpobj.port, cmd);\n+    }\n+\n+    private void verifyFuzzyMatch(String cmd, String expected) throws IOException, SSLContextException {\n+        String resp = sendRequest(cmd);\n+        LOG.info(\"cmd \" + cmd + \" expected \" + expected + \" got \" + resp);\n+        Assert.assertTrue(resp.contains(expected));\n+    }\n+\n+    private String generateExpectedMessage(String command) {\n+        return command + \" is not executed because it is not in the whitelist.\";\n+    }\n+\n+    private void verifyExactMatch(String cmd, String expected) throws IOException, SSLContextException {\n+        String resp = sendRequest(cmd);\n+        LOG.info(\"cmd \" + cmd + \" expected an exact match of \" + expected + \"; got \" + resp);\n+        Assert.assertTrue(resp.trim().equals(expected));\n+    }\n+}"
        }
    ]
}