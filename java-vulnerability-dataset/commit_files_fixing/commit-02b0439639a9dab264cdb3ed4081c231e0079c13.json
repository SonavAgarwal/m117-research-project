{
    "sha": "02b0439639a9dab264cdb3ed4081c231e0079c13",
    "node_id": "MDY6Q29tbWl0MzEwMDYxNTg6MDJiMDQzOTYzOWE5ZGFiMjY0Y2RiM2VkNDA4MWMyMzFlMDA3OWMxMw==",
    "commit": {
        "author": {
            "name": "Taras Ledkov",
            "email": "tledkov@gridgain.com",
            "date": "2020-04-17T10:41:11Z"
        },
        "committer": {
            "name": "Nikolay Izhikov",
            "email": "nizhikov@apache.org",
            "date": "2020-04-27T08:20:19Z"
        },
        "message": "IGNITE-12790 Introduce distributed SQL configuration and ability to disable SQL functions. (#7593)\n\n(cherry picked from commit a65e51c9148cd765f3a58b956e4e0e08ddc7a201)",
        "tree": {
            "sha": "c9c41a965ff4e9f8dbbf6fcd6c83dc76064e183a",
            "url": "https://api.github.com/repos/apache/ignite/git/trees/c9c41a965ff4e9f8dbbf6fcd6c83dc76064e183a"
        },
        "url": "https://api.github.com/repos/apache/ignite/git/commits/02b0439639a9dab264cdb3ed4081c231e0079c13",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/ignite/commits/02b0439639a9dab264cdb3ed4081c231e0079c13",
    "html_url": "https://github.com/apache/ignite/commit/02b0439639a9dab264cdb3ed4081c231e0079c13",
    "comments_url": "https://api.github.com/repos/apache/ignite/commits/02b0439639a9dab264cdb3ed4081c231e0079c13/comments",
    "author": null,
    "committer": {
        "login": "nizhikov",
        "id": 880793,
        "node_id": "MDQ6VXNlcjg4MDc5Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/880793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nizhikov",
        "html_url": "https://github.com/nizhikov",
        "followers_url": "https://api.github.com/users/nizhikov/followers",
        "following_url": "https://api.github.com/users/nizhikov/following{/other_user}",
        "gists_url": "https://api.github.com/users/nizhikov/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nizhikov/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nizhikov/subscriptions",
        "organizations_url": "https://api.github.com/users/nizhikov/orgs",
        "repos_url": "https://api.github.com/users/nizhikov/repos",
        "events_url": "https://api.github.com/users/nizhikov/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nizhikov/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "200df1900b3cf28a04e33f11e87378b6a63b99f2",
            "url": "https://api.github.com/repos/apache/ignite/commits/200df1900b3cf28a04e33f11e87378b6a63b99f2",
            "html_url": "https://github.com/apache/ignite/commit/200df1900b3cf28a04e33f11e87378b6a63b99f2"
        }
    ],
    "stats": {
        "total": 735,
        "additions": 666,
        "deletions": 69
    },
    "files": [
        {
            "sha": "ab2a00c2721bd5e274facc65e28c4fa1243afdd6",
            "filename": "examples/src/main/java/org/apache/ignite/examples/ml/sql/DecisionTreeClassificationTrainerSQLInferenceExample.java",
            "status": "modified",
            "additions": 10,
            "deletions": 1,
            "changes": 11,
            "blob_url": "https://github.com/apache/ignite/blob/02b0439639a9dab264cdb3ed4081c231e0079c13/examples%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fexamples%2Fml%2Fsql%2FDecisionTreeClassificationTrainerSQLInferenceExample.java",
            "raw_url": "https://github.com/apache/ignite/raw/02b0439639a9dab264cdb3ed4081c231e0079c13/examples%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fexamples%2Fml%2Fsql%2FDecisionTreeClassificationTrainerSQLInferenceExample.java",
            "contents_url": "https://api.github.com/repos/apache/ignite/contents/examples%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fexamples%2Fml%2Fsql%2FDecisionTreeClassificationTrainerSQLInferenceExample.java?ref=02b0439639a9dab264cdb3ed4081c231e0079c13",
            "patch": "@@ -17,13 +17,17 @@\n \n package org.apache.ignite.examples.ml.sql;\n \n+import java.util.HashSet;\n import java.util.List;\n import org.apache.ignite.Ignite;\n import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteCheckedException;\n import org.apache.ignite.Ignition;\n import org.apache.ignite.cache.query.QueryCursor;\n import org.apache.ignite.cache.query.SqlFieldsQuery;\n import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing;\n import org.apache.ignite.internal.util.IgniteUtils;\n import org.apache.ignite.ml.dataset.feature.extractor.impl.BinaryObjectVectorizer;\n import org.apache.ignite.ml.inference.IgniteModelStorageUtil;\n@@ -55,13 +59,18 @@ public class DecisionTreeClassificationTrainerSQLInferenceExample {\n     /**\n      * Run example.\n      */\n-    public static void main(String[] args) {\n+    public static void main(String[] args) throws IgniteCheckedException {\n         System.out.println(\">>> Decision tree classification trainer example started.\");\n \n         // Start ignite grid.\n         try (Ignite ignite = Ignition.start(\"examples/config/example-ignite-ml.xml\")) {\n             System.out.println(\">>> Ignite grid started.\");\n \n+            // Use internal API to enable SQL functions disabled by default (the function CSVREAD is used below)\n+            // TODO: IGNITE-12903\n+            ((IgniteH2Indexing)((IgniteEx)ignite).context().query().getIndexing())\n+                .distributedConfiguration().disabledFunctions(new HashSet<>());\n+\n             // Dummy cache is required to perform SQL queries.\n             CacheConfiguration<?, ?> cacheCfg = new CacheConfiguration<>(DUMMY_CACHE_NAME)\n                 .setSqlSchema(\"PUBLIC\")"
        },
        {
            "sha": "5fe123c8366cb604b451000496270942a7576749",
            "filename": "examples/src/main/java/org/apache/ignite/examples/ml/sql/DecisionTreeClassificationTrainerSQLTableExample.java",
            "status": "modified",
            "additions": 10,
            "deletions": 1,
            "changes": 11,
            "blob_url": "https://github.com/apache/ignite/blob/02b0439639a9dab264cdb3ed4081c231e0079c13/examples%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fexamples%2Fml%2Fsql%2FDecisionTreeClassificationTrainerSQLTableExample.java",
            "raw_url": "https://github.com/apache/ignite/raw/02b0439639a9dab264cdb3ed4081c231e0079c13/examples%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fexamples%2Fml%2Fsql%2FDecisionTreeClassificationTrainerSQLTableExample.java",
            "contents_url": "https://api.github.com/repos/apache/ignite/contents/examples%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fexamples%2Fml%2Fsql%2FDecisionTreeClassificationTrainerSQLTableExample.java?ref=02b0439639a9dab264cdb3ed4081c231e0079c13",
            "patch": "@@ -17,13 +17,17 @@\n \n package org.apache.ignite.examples.ml.sql;\n \n+import java.util.HashSet;\n import java.util.List;\n import org.apache.ignite.Ignite;\n import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteCheckedException;\n import org.apache.ignite.Ignition;\n import org.apache.ignite.cache.query.QueryCursor;\n import org.apache.ignite.cache.query.SqlFieldsQuery;\n import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing;\n import org.apache.ignite.internal.util.IgniteUtils;\n import org.apache.ignite.ml.dataset.feature.extractor.impl.BinaryObjectVectorizer;\n import org.apache.ignite.ml.math.primitives.vector.Vector;\n@@ -54,13 +58,18 @@ public class DecisionTreeClassificationTrainerSQLTableExample {\n     /**\n      * Run example.\n      */\n-    public static void main(String[] args) {\n+    public static void main(String[] args) throws IgniteCheckedException {\n         System.out.println(\">>> Decision tree classification trainer example started.\");\n \n         // Start ignite grid.\n         try (Ignite ignite = Ignition.start(\"examples/config/example-ignite.xml\")) {\n             System.out.println(\">>> Ignite grid started.\");\n \n+            // Use internal API to enable SQL functions disabled by default (the function CSVREAD is used below)\n+            // TODO: IGNITE-12903\n+            ((IgniteH2Indexing)((IgniteEx)ignite).context().query().getIndexing())\n+                .distributedConfiguration().disabledFunctions(new HashSet<>());\n+\n             // Dummy cache is required to perform SQL queries.\n             CacheConfiguration<?, ?> cacheCfg = new CacheConfiguration<>(DUMMY_CACHE_NAME)\n                 .setSqlSchema(\"PUBLIC\");"
        },
        {
            "sha": "c5aebfb29acea5d9f9c98ebdf0d97c21e03bde26",
            "filename": "modules/clients/src/test/java/org/apache/ignite/jdbc/thin/JdbcThinBatchSelfTest.java",
            "status": "modified",
            "additions": 0,
            "deletions": 18,
            "changes": 18,
            "blob_url": "https://github.com/apache/ignite/blob/02b0439639a9dab264cdb3ed4081c231e0079c13/modules%2Fclients%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fignite%2Fjdbc%2Fthin%2FJdbcThinBatchSelfTest.java",
            "raw_url": "https://github.com/apache/ignite/raw/02b0439639a9dab264cdb3ed4081c231e0079c13/modules%2Fclients%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fignite%2Fjdbc%2Fthin%2FJdbcThinBatchSelfTest.java",
            "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules%2Fclients%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fignite%2Fjdbc%2Fthin%2FJdbcThinBatchSelfTest.java?ref=02b0439639a9dab264cdb3ed4081c231e0079c13",
            "patch": "@@ -180,8 +180,6 @@ public void testBatchException() throws Exception {\n             fail(\"BatchUpdateException must be thrown\");\n         }\n         catch (BatchUpdateException e) {\n-            checkThereAreNotUsedConnections();\n-\n             int[] updCnts = e.getUpdateCounts();\n \n             assertEquals(\"Invalid update counts size\", BATCH_SIZE, updCnts.length);\n@@ -226,8 +224,6 @@ public void testBatchParseException() throws Exception {\n             fail(\"BatchUpdateException must be thrown\");\n         }\n         catch (BatchUpdateException e) {\n-            checkThereAreNotUsedConnections();\n-\n             int[] updCnts = e.getUpdateCounts();\n \n             assertEquals(\"Invalid update counts size\", BATCH_SIZE, updCnts.length);\n@@ -292,8 +288,6 @@ public void testBatchMergeParseException() throws Exception {\n             fail(\"BatchUpdateException must be thrown\");\n         }\n         catch (BatchUpdateException e) {\n-            checkThereAreNotUsedConnections();\n-\n             int[] updCnts = e.getUpdateCounts();\n \n             assertEquals(\"Invalid update counts size\", BATCH_SIZE, updCnts.length);\n@@ -340,8 +334,6 @@ public void testBatchKeyDuplicatesException() throws Exception {\n             fail(\"BatchUpdateException must be thrown\");\n         }\n         catch (BatchUpdateException e) {\n-            checkThereAreNotUsedConnections();\n-\n             int[] updCnts = e.getUpdateCounts();\n \n             assertEquals(\"Invalid update counts size\", BATCH_SIZE, updCnts.length);\n@@ -398,8 +390,6 @@ public void testHeterogeneousBatchException() throws Exception {\n             fail(\"BatchUpdateException must be thrown\");\n         }\n         catch (BatchUpdateException e) {\n-            checkThereAreNotUsedConnections();\n-\n             int[] updCnts = e.getUpdateCounts();\n \n             if (!e.getMessage().contains(\"Value conversion failed\")) {\n@@ -551,8 +541,6 @@ public void testBatchExceptionPrepared() throws Exception {\n             fail(\"BatchUpdateException must be thrown\");\n         }\n         catch (BatchUpdateException e) {\n-            checkThereAreNotUsedConnections();\n-\n             int[] updCnts = e.getUpdateCounts();\n \n             assertEquals(\"Invalid update counts size\", BATCH_SIZE, updCnts.length);\n@@ -651,8 +639,6 @@ public void testBatchMergeExceptionPrepared() throws Exception {\n             fail(\"BatchUpdateException must be thrown res=\" + Arrays.toString(res));\n         }\n         catch (BatchUpdateException e) {\n-            checkThereAreNotUsedConnections();\n-\n             int[] updCnts = e.getUpdateCounts();\n \n             assertEquals(\"Invalid update counts size\", BATCH_SIZE, updCnts.length);\n@@ -744,8 +730,6 @@ public void testBatchUpdateExceptionPrepared() throws Exception {\n             fail(\"BatchUpdateException must be thrown res=\" + Arrays.toString(res));\n         }\n         catch (BatchUpdateException e) {\n-            checkThereAreNotUsedConnections();\n-\n             int[] updCnts = e.getUpdateCounts();\n \n             assertEquals(\"Invalid update counts size\", BATCH_SIZE, updCnts.length);\n@@ -829,8 +813,6 @@ public void testBatchDeleteExceptionPrepared() throws Exception {\n             fail(\"BatchUpdateException must be thrown res=\" + Arrays.toString(res));\n         }\n         catch (BatchUpdateException e) {\n-            checkThereAreNotUsedConnections();\n-\n             int[] updCnts = e.getUpdateCounts();\n \n             assertEquals(\"Invalid update counts size\", BATCH_SIZE, updCnts.length);"
        },
        {
            "sha": "aa0a97893b17649484ad52e1866f5c4e92562821",
            "filename": "modules/core/src/main/java/org/apache/ignite/internal/cluster/DistributedBaselineConfiguration.java",
            "status": "modified",
            "additions": 4,
            "deletions": 41,
            "changes": 45,
            "blob_url": "https://github.com/apache/ignite/blob/02b0439639a9dab264cdb3ed4081c231e0079c13/modules%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Finternal%2Fcluster%2FDistributedBaselineConfiguration.java",
            "raw_url": "https://github.com/apache/ignite/raw/02b0439639a9dab264cdb3ed4081c231e0079c13/modules%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Finternal%2Fcluster%2FDistributedBaselineConfiguration.java",
            "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Finternal%2Fcluster%2FDistributedBaselineConfiguration.java?ref=02b0439639a9dab264cdb3ed4081c231e0079c13",
            "patch": "@@ -17,24 +17,19 @@\n \n package org.apache.ignite.internal.cluster;\n \n-import java.io.Serializable;\n-import java.util.Objects;\n import org.apache.ignite.IgniteCheckedException;\n import org.apache.ignite.IgniteLogger;\n import org.apache.ignite.internal.GridKernalContext;\n-import org.apache.ignite.internal.IgniteInternalFuture;\n-import org.apache.ignite.internal.processors.configuration.distributed.DistributePropertyListener;\n import org.apache.ignite.internal.processors.configuration.distributed.DistributedChangeableProperty;\n import org.apache.ignite.internal.processors.configuration.distributed.DistributedConfigurationLifecycleListener;\n-import org.apache.ignite.internal.processors.configuration.distributed.DistributedProperty;\n import org.apache.ignite.internal.processors.configuration.distributed.DistributedPropertyDispatcher;\n import org.apache.ignite.internal.processors.subscription.GridInternalSubscriptionProcessor;\n import org.apache.ignite.internal.util.future.GridFutureAdapter;\n import org.apache.ignite.internal.util.typedef.internal.CU;\n-import org.apache.ignite.lang.IgniteInClosure;\n-import org.jetbrains.annotations.NotNull;\n \n import static java.lang.String.format;\n+import static org.apache.ignite.internal.cluster.DistributedConfigurationUtils.makeUpdateListener;\n+import static org.apache.ignite.internal.cluster.DistributedConfigurationUtils.setDefaultValue;\n import static org.apache.ignite.internal.processors.configuration.distributed.DistributedBooleanProperty.detachedBooleanProperty;\n import static org.apache.ignite.internal.processors.configuration.distributed.DistributedLongProperty.detachedLongProperty;\n \n@@ -92,8 +87,8 @@ public DistributedBaselineConfiguration(\n         isp.registerDistributedConfigurationListener(\n             new DistributedConfigurationLifecycleListener() {\n                 @Override public void onReadyToRegister(DistributedPropertyDispatcher dispatcher) {\n-                    baselineAutoAdjustEnabled.addListener(makeUpdateListener());\n-                    baselineAutoAdjustTimeout.addListener(makeUpdateListener());\n+                    baselineAutoAdjustEnabled.addListener(makeUpdateListener(PROPERTY_UPDATE_MESSAGE, log));\n+                    baselineAutoAdjustTimeout.addListener(makeUpdateListener(PROPERTY_UPDATE_MESSAGE, log));\n \n                     dispatcher.registerProperties(baselineAutoAdjustEnabled, baselineAutoAdjustTimeout);\n                 }\n@@ -106,38 +101,6 @@ public DistributedBaselineConfiguration(\n         );\n     }\n \n-    /**\n-     * @param property Property which value should be set.\n-     * @param value Default value.\n-     * @param log Logger.\n-     * @param <T> Property type.\n-     */\n-    private <T extends Serializable> void setDefaultValue(DistributedProperty<T> property, T value, IgniteLogger log) {\n-        if (property.get() == null) {\n-            try {\n-                property.propagateAsync(null, value)\n-                    .listen((IgniteInClosure<IgniteInternalFuture<?>>)future -> {\n-                        if (future.error() != null)\n-                            log.error(\"Cannot set default value of '\" + property.getName() + '\\'', future.error());\n-                    });\n-            }\n-            catch (IgniteCheckedException e) {\n-                log.error(\"Cannot initiate setting default value of '\" + property.getName() + '\\'', e);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * @param <T> Type of property value.\n-     * @return Update property listener.\n-     */\n-    @NotNull private <T> DistributePropertyListener<T> makeUpdateListener() {\n-        return (name, oldVal, newVal) -> {\n-            if (!Objects.equals(oldVal, newVal))\n-                log.info(format(PROPERTY_UPDATE_MESSAGE, name, oldVal, newVal));\n-        };\n-    }\n-\n     /**\n      * Called when cluster performing activation.\n      */"
        },
        {
            "sha": "f3fe31bf3f85996e030dd2b2cce4cc11037daed2",
            "filename": "modules/core/src/main/java/org/apache/ignite/internal/cluster/DistributedConfigurationUtils.java",
            "status": "added",
            "additions": 77,
            "deletions": 0,
            "changes": 77,
            "blob_url": "https://github.com/apache/ignite/blob/02b0439639a9dab264cdb3ed4081c231e0079c13/modules%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Finternal%2Fcluster%2FDistributedConfigurationUtils.java",
            "raw_url": "https://github.com/apache/ignite/raw/02b0439639a9dab264cdb3ed4081c231e0079c13/modules%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Finternal%2Fcluster%2FDistributedConfigurationUtils.java",
            "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Finternal%2Fcluster%2FDistributedConfigurationUtils.java?ref=02b0439639a9dab264cdb3ed4081c231e0079c13",
            "patch": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.cluster;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.IgniteLogger;\n+import org.apache.ignite.internal.IgniteInternalFuture;\n+import org.apache.ignite.internal.processors.configuration.distributed.DistributePropertyListener;\n+import org.apache.ignite.internal.processors.configuration.distributed.DistributedProperty;\n+import org.apache.ignite.lang.IgniteInClosure;\n+import org.jetbrains.annotations.NotNull;\n+\n+import static java.lang.String.format;\n+\n+/**\n+ * Distributed configuration utilities methods.\n+ */\n+public final class DistributedConfigurationUtils {\n+    /**\n+     */\n+    private DistributedConfigurationUtils() {\n+        // No-op.\n+    }\n+\n+    /**\n+     * @param property Property which value should be set.\n+     * @param value Default value.\n+     * @param log Logger.\n+     * @param <T> Property type.\n+     */\n+    public static <T extends Serializable> void setDefaultValue(DistributedProperty<T> property, T value, IgniteLogger log) {\n+        if (property.get() == null) {\n+            try {\n+                property.propagateAsync(null, value)\n+                    .listen((IgniteInClosure<IgniteInternalFuture<?>>)future -> {\n+                        if (future.error() != null)\n+                            log.error(\"Cannot set default value of '\" + property.getName() + '\\'', future.error());\n+                    });\n+            }\n+            catch (IgniteCheckedException e) {\n+                log.error(\"Cannot initiate setting default value of '\" + property.getName() + '\\'', e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * @param propUpdMsg Update message.\n+     * @param log Logger.\n+     * @param <T> Type of property value.\n+     * @return Update property listener.\n+     */\n+    @NotNull public static <T> DistributePropertyListener<T> makeUpdateListener(String propUpdMsg, IgniteLogger log) {\n+        return (name, oldVal, newVal) -> {\n+            if (!Objects.equals(oldVal, newVal)) {\n+                if (log.isInfoEnabled())\n+                    log.info(format(propUpdMsg, name, oldVal, newVal));\n+            }\n+        };\n+    }\n+}"
        },
        {
            "sha": "09a0825f542a606d74201954e591db71dcc75449",
            "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/metastorage/DistributedMetaStorageTest.java",
            "status": "modified",
            "additions": 19,
            "deletions": 7,
            "changes": 26,
            "blob_url": "https://github.com/apache/ignite/blob/02b0439639a9dab264cdb3ed4081c231e0079c13/modules%2Fcore%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fignite%2Finternal%2Fprocessors%2Fmetastorage%2FDistributedMetaStorageTest.java",
            "raw_url": "https://github.com/apache/ignite/raw/02b0439639a9dab264cdb3ed4081c231e0079c13/modules%2Fcore%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fignite%2Finternal%2Fprocessors%2Fmetastorage%2FDistributedMetaStorageTest.java",
            "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules%2Fcore%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fignite%2Finternal%2Fprocessors%2Fmetastorage%2FDistributedMetaStorageTest.java?ref=02b0439639a9dab264cdb3ed4081c231e0079c13",
            "patch": "@@ -52,7 +52,20 @@ public class DistributedMetaStorageTest extends GridCommonAbstractTest {\n      * Used in tests for updatesCount counter of metastorage and corresponds to keys BASELINE_ENABLED and other initial\n      * objects that were added but should not be counted along with keys defined in tests.\n      */\n-    private static final int INITIAL_UPDATES_COUNT = 2;\n+    private static int initialUpdatesCount = -1;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        super.beforeTestsStarted();\n+\n+        startGrid(0);\n+\n+        // We have to start the second node and wait when it is started\n+        // to be sure that all async metastorage updates of the node_0 are completed.\n+        startGrid(1);\n+\n+        initialUpdatesCount = (int)metastorage(0).getUpdatesCount();\n+    }\n \n     /** {@inheritDoc} */\n     @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n@@ -333,18 +346,17 @@ public void testOptimizedWriteTwice() throws Exception {\n \n         metastorage(0).write(\"key1\", \"value1\");\n \n-        assertEquals(1, metastorage(0).getUpdatesCount() - INITIAL_UPDATES_COUNT);\n+        assertEquals(1, metastorage(0).getUpdatesCount() - initialUpdatesCount);\n \n         metastorage(0).write(\"key2\", \"value2\");\n \n-        assertEquals(2, metastorage(0).getUpdatesCount() - INITIAL_UPDATES_COUNT);\n+        assertEquals(2, metastorage(0).getUpdatesCount() - initialUpdatesCount);\n \n         metastorage(0).write(\"key1\", \"value1\");\n \n-        assertEquals(2, metastorage(0).getUpdatesCount() - INITIAL_UPDATES_COUNT);\n+        assertEquals(2, metastorage(0).getUpdatesCount() - initialUpdatesCount);\n     }\n \n-    /** */\n     /** */\n     @Test\n     public void testClient() throws Exception {\n@@ -358,7 +370,7 @@ public void testClient() throws Exception {\n \n         AtomicInteger clientLsnrUpdatesCnt = new AtomicInteger();\n \n-        assertEquals(1, metastorage(1).getUpdatesCount() - INITIAL_UPDATES_COUNT);\n+        assertEquals(1, metastorage(1).getUpdatesCount() - initialUpdatesCount);\n \n         assertEquals(\"value0\", metastorage(1).read(\"key0\"));\n \n@@ -400,7 +412,7 @@ public void testClientReconnect() throws Exception {\n \n         // Wait enough to cover failover timeout.\n         assertTrue(GridTestUtils.waitForCondition(\n-            () -> metastorage(1).getUpdatesCount() - INITIAL_UPDATES_COUNT == expUpdatesCnt, 15_000));\n+            () -> metastorage(1).getUpdatesCount() - initialUpdatesCount == expUpdatesCnt, 15_000));\n \n         if (isPersistent())\n             assertEquals(\"value0\", metastorage(1).read(\"key0\"));"
        },
        {
            "sha": "442aed7e991b0275e6adbd2c29d8104ff3d0a27d",
            "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/DistributedSqlConfiguration.java",
            "status": "added",
            "additions": 120,
            "deletions": 0,
            "changes": 120,
            "blob_url": "https://github.com/apache/ignite/blob/02b0439639a9dab264cdb3ed4081c231e0079c13/modules%2Findexing%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Finternal%2Fprocessors%2Fquery%2Fh2%2FDistributedSqlConfiguration.java",
            "raw_url": "https://github.com/apache/ignite/raw/02b0439639a9dab264cdb3ed4081c231e0079c13/modules%2Findexing%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Finternal%2Fprocessors%2Fquery%2Fh2%2FDistributedSqlConfiguration.java",
            "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules%2Findexing%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Finternal%2Fprocessors%2Fquery%2Fh2%2FDistributedSqlConfiguration.java?ref=02b0439639a9dab264cdb3ed4081c231e0079c13",
            "patch": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.query.h2;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.IgniteLogger;\n+import org.apache.ignite.internal.GridKernalContext;\n+import org.apache.ignite.internal.processors.configuration.distributed.DistributePropertyListener;\n+import org.apache.ignite.internal.processors.configuration.distributed.DistributedConfigurationLifecycleListener;\n+import org.apache.ignite.internal.processors.configuration.distributed.DistributedPropertyDispatcher;\n+import org.apache.ignite.internal.processors.configuration.distributed.SimpleDistributedProperty;\n+import org.apache.ignite.internal.processors.metastorage.ReadableDistributedMetaStorage;\n+import org.apache.ignite.internal.util.future.GridFutureAdapter;\n+\n+import static org.apache.ignite.internal.cluster.DistributedConfigurationUtils.makeUpdateListener;\n+import static org.apache.ignite.internal.cluster.DistributedConfigurationUtils.setDefaultValue;\n+\n+/**\n+ * Distributed configuration of the indexing module.\n+ */\n+public class DistributedSqlConfiguration {\n+    /** Property update message. */\n+    private static final String PROPERTY_UPDATE_MESSAGE =\n+        \"SQL parameter '%s' was changed from '%s' to '%s'\";\n+\n+    /** Default disabled SQL functions. */\n+    public static final HashSet<String> DFLT_DISABLED_FUNCS = (HashSet<String>)Arrays.stream(new String[] {\n+        \"FILE_READ\",\n+        \"FILE_WRITE\",\n+        \"CSVWRITE\",\n+        \"CSVREAD\",\n+        \"MEMORY_FREE\",\n+        \"MEMORY_USED\",\n+        \"LOCK_MODE\",\n+        \"LINK_SCHEMA\",\n+        \"SESSION_ID\",\n+        \"CANCEL_SESSION\"\n+    }).collect(Collectors.toSet());\n+\n+    /** Disabled SQL functions. */\n+    private final SimpleDistributedProperty<HashSet<String>> disabledSqlFuncs\n+        = new SimpleDistributedProperty<>(\"sql.disabledFunctions\");\n+\n+    /**\n+     * @param ctx Kernal context\n+     * @param log Logger.\n+     */\n+    public DistributedSqlConfiguration(\n+        GridKernalContext ctx,\n+        IgniteLogger log\n+    ) {\n+        ctx.internalSubscriptionProcessor().registerDistributedConfigurationListener(\n+            new DistributedConfigurationLifecycleListener() {\n+                @Override public void onReadyToRegister(DistributedPropertyDispatcher dispatcher) {\n+                    disabledSqlFuncs.addListener(makeUpdateListener(PROPERTY_UPDATE_MESSAGE, log));\n+\n+                    dispatcher.registerProperties(disabledSqlFuncs);\n+                }\n+\n+                @Override public void onReadyToWrite() {\n+                    if (ReadableDistributedMetaStorage.isSupported(ctx)) {\n+                        setDefaultValue(\n+                            disabledSqlFuncs,\n+                            DFLT_DISABLED_FUNCS,\n+                            log);\n+                    }\n+                    else {\n+                        log.warning(\"Distributed metastorage is not supported. \" +\n+                            \"All distributed SQL configuration parameters are unavailable.\");\n+\n+                        // Set disabled functions to default.\n+                        disabledSqlFuncs.localUpdate(null);\n+                    }\n+                }\n+            }\n+        );\n+    }\n+\n+    /**\n+     * @return Disabled SQL functions.\n+     */\n+    public Set<String> disabledFunctions() {\n+        Set<String> ret = disabledSqlFuncs.get();\n+\n+        return ret != null ? ret : DFLT_DISABLED_FUNCS;\n+    }\n+\n+    /**\n+     * @param disabledFuncs Set of disabled functions.\n+     * @throws IgniteCheckedException if failed.\n+     */\n+    public GridFutureAdapter<?> disabledFunctions(HashSet<String> disabledFuncs)\n+        throws IgniteCheckedException {\n+        return disabledSqlFuncs.propagateAsync(disabledFuncs);\n+    }\n+\n+    /** */\n+    public void listenDisabledFunctions(DistributePropertyListener<HashSet<String>> lsnr) {\n+        disabledSqlFuncs.addListener(lsnr);\n+    }\n+}"
        },
        {
            "sha": "fae51039cc78b98c7d6255127c817aad8bd71ec5",
            "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/FunctionsManager.java",
            "status": "added",
            "additions": 88,
            "deletions": 0,
            "changes": 88,
            "blob_url": "https://github.com/apache/ignite/blob/02b0439639a9dab264cdb3ed4081c231e0079c13/modules%2Findexing%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Finternal%2Fprocessors%2Fquery%2Fh2%2FFunctionsManager.java",
            "raw_url": "https://github.com/apache/ignite/raw/02b0439639a9dab264cdb3ed4081c231e0079c13/modules%2Findexing%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Finternal%2Fprocessors%2Fquery%2Fh2%2FFunctionsManager.java",
            "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules%2Findexing%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Finternal%2Fprocessors%2Fquery%2Fh2%2FFunctionsManager.java?ref=02b0439639a9dab264cdb3ed4081c231e0079c13",
            "patch": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.query.h2;\n+\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.h2.expression.Function;\n+\n+/**\n+ * SQL function manager.\n+ */\n+@SuppressWarnings(\"unchecked\")\n+public class FunctionsManager {\n+    /** Original H2 functions set. */\n+    private static HashMap<String, Object> origFuncs;\n+\n+    /** Current H2 functions set. */\n+    private static HashMap<String, Object> funcs;\n+\n+    static {\n+        // Extract from H2 the set of available functions.\n+        try {\n+            Field fldFUNCTIONS = Function.class.getDeclaredField(\"FUNCTIONS\");\n+\n+            fldFUNCTIONS.setAccessible(true);\n+\n+            funcs = (HashMap<String, Object>)fldFUNCTIONS.get(Class.class);\n+\n+            origFuncs = new HashMap<>(funcs);\n+        }\n+        catch (NoSuchFieldException | IllegalAccessException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    /**\n+     *\n+     */\n+    public FunctionsManager(DistributedSqlConfiguration distSqlCfg) {\n+        assert Objects.nonNull(funcs);\n+        assert Objects.nonNull(origFuncs);\n+        distSqlCfg.listenDisabledFunctions(this::updateDisabledFunctions);\n+    }\n+\n+    /**\n+     * Listener of changes the SQL parameter 'disabled functions'.\n+     *\n+     * @param paramName Parameter name (unused)\n+     * @param oldDisabledFuncs Old set of disabled functions.\n+     * @param newDisabledFuncs New set of disabled functions.\n+     */\n+    private void updateDisabledFunctions(\n+        String paramName,\n+        HashSet<String> oldDisabledFuncs,\n+        HashSet<String> newDisabledFuncs) {\n+        if (newDisabledFuncs != null)\n+            removeFunctions(newDisabledFuncs);\n+        else\n+            removeFunctions(DistributedSqlConfiguration.DFLT_DISABLED_FUNCS);\n+    }\n+\n+    /**\n+     * @param funcNames Set of function that must be removed from original functions set.\n+     */\n+    private static void removeFunctions(Set<String> funcNames) {\n+        funcs.putAll(origFuncs);\n+\n+        funcs.keySet().removeAll(funcNames);\n+    }\n+}"
        },
        {
            "sha": "79a43e35e292ddf22980e23d862e8c84c038c866",
            "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java",
            "status": "modified",
            "additions": 18,
            "deletions": 0,
            "changes": 18,
            "blob_url": "https://github.com/apache/ignite/blob/02b0439639a9dab264cdb3ed4081c231e0079c13/modules%2Findexing%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Finternal%2Fprocessors%2Fquery%2Fh2%2FIgniteH2Indexing.java",
            "raw_url": "https://github.com/apache/ignite/raw/02b0439639a9dab264cdb3ed4081c231e0079c13/modules%2Findexing%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Finternal%2Fprocessors%2Fquery%2Fh2%2FIgniteH2Indexing.java",
            "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules%2Findexing%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Finternal%2Fprocessors%2Fquery%2Fh2%2FIgniteH2Indexing.java?ref=02b0439639a9dab264cdb3ed4081c231e0079c13",
            "patch": "@@ -316,6 +316,12 @@ public class IgniteH2Indexing implements GridQueryIndexing {\n     /** Query message listener. */\n     private GridMessageListener qryLsnr;\n \n+    /** Distributed config. */\n+    private DistributedSqlConfiguration distrCfg;\n+\n+    /** Functions manager. */\n+    private FunctionsManager funcMgr;\n+\n     /**\n      * @return Kernal context.\n      */\n@@ -2144,6 +2150,10 @@ public RunningQueryManager runningQueryManager() {\n             U.warn(log, \"Custom H2 serialization is already configured, will override.\");\n \n         JdbcUtils.serializer = h2Serializer();\n+\n+        distrCfg = new DistributedSqlConfiguration(ctx, log);\n+\n+        funcMgr = new FunctionsManager(distrCfg);\n     }\n \n     /**\n@@ -3100,4 +3110,12 @@ else if (plan.hasRows()) {\n     public LongRunningQueryManager longRunningQueries() {\n         return longRunningQryMgr;\n     }\n+\n+    /**\n+     * @return Distributed SQL configuration.\n+     */\n+    public DistributedSqlConfiguration distributedConfiguration() {\n+        return distrCfg;\n+    }\n+\n }"
        },
        {
            "sha": "a14460e3c4702d0feff078d1a84df8e2f0c316db",
            "filename": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/index/H2ConnectionLeaksSelfTest.java",
            "status": "modified",
            "additions": 0,
            "deletions": 1,
            "changes": 1,
            "blob_url": "https://github.com/apache/ignite/blob/02b0439639a9dab264cdb3ed4081c231e0079c13/modules%2Findexing%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fignite%2Finternal%2Fprocessors%2Fcache%2Findex%2FH2ConnectionLeaksSelfTest.java",
            "raw_url": "https://github.com/apache/ignite/raw/02b0439639a9dab264cdb3ed4081c231e0079c13/modules%2Findexing%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fignite%2Finternal%2Fprocessors%2Fcache%2Findex%2FH2ConnectionLeaksSelfTest.java",
            "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules%2Findexing%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fignite%2Finternal%2Fprocessors%2Fcache%2Findex%2FH2ConnectionLeaksSelfTest.java?ref=02b0439639a9dab264cdb3ed4081c231e0079c13",
            "patch": "@@ -19,7 +19,6 @@\n \n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.CountDownLatch;\n import org.apache.ignite.IgniteCache;\n import org.apache.ignite.IgniteException;"
        },
        {
            "sha": "ca6192e9c504b671a2e0d2728521adea1180aed3",
            "filename": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/DisabledSqlFunctionsTest.java",
            "status": "added",
            "additions": 290,
            "deletions": 0,
            "changes": 290,
            "blob_url": "https://github.com/apache/ignite/blob/02b0439639a9dab264cdb3ed4081c231e0079c13/modules%2Findexing%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fignite%2Finternal%2Fprocessors%2Fquery%2FDisabledSqlFunctionsTest.java",
            "raw_url": "https://github.com/apache/ignite/raw/02b0439639a9dab264cdb3ed4081c231e0079c13/modules%2Findexing%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fignite%2Finternal%2Fprocessors%2Fquery%2FDisabledSqlFunctionsTest.java",
            "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules%2Findexing%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fignite%2Finternal%2Fprocessors%2Fquery%2FDisabledSqlFunctionsTest.java?ref=02b0439639a9dab264cdb3ed4081c231e0079c13",
            "patch": "@@ -0,0 +1,290 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.query;\n+\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.cache.QueryEntity;\n+import org.apache.ignite.cache.affinity.rendezvous.RendezvousAffinityFunction;\n+import org.apache.ignite.cache.query.FieldsQueryCursor;\n+import org.apache.ignite.cache.query.SqlFieldsQuery;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.processors.cache.index.AbstractIndexingCommonTest;\n+import org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+/**\n+ * Tests for disabled SQL functions.\n+ */\n+@RunWith(Parameterized.class)\n+public class DisabledSqlFunctionsTest extends AbstractIndexingCommonTest {\n+    /** Pattern func not found. */\n+    private static final Pattern PTRN_FUNC_NOT_FOUND = Pattern.compile(\"Failed to parse query. Function \\\"\\\\w+\\\" not found\");\n+\n+    /** Keys count. */\n+    private static final int KEY_CNT = 10;\n+\n+    /** Local mode. */\n+    @Parameterized.Parameter\n+    public boolean local;\n+\n+    /** Executes query on client node. */\n+    @Parameterized.Parameter(1)\n+    public boolean client;\n+\n+    /**\n+     * @return Test parameters.\n+     */\n+    @Parameterized.Parameters(name = \"local={0}, client={1}\")\n+    public static Collection parameters() {\n+        Set<Object[]> paramsSet = new LinkedHashSet<>();\n+\n+        for (int i = 0; i < 4; ++i) {\n+            Object[] params = new Object[2];\n+\n+            params[0] = (i & 1) == 0;\n+            params[1] = (i & 2) == 0;\n+\n+            paramsSet.add(params);\n+        }\n+\n+        return paramsSet;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        stopAllGrids();\n+\n+        FileSystem fs = FileSystems.getDefault();\n+\n+        Files.deleteIfExists(fs.getPath(\"test.dat\"));\n+        Files.deleteIfExists(fs.getPath(\"test.csv\"));\n+        Files.deleteIfExists(fs.getPath(\"test.mv.db\"));\n+\n+        super.afterTest();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        startGrid(\"srv\");\n+        startGrid(\"cli\");\n+\n+        IgniteCache<Long, Long> c = grid(\"srv\").createCache(new CacheConfiguration<Long, Long>()\n+            .setName(\"test\")\n+            .setSqlSchema(\"PUBLIC\")\n+            .setQueryEntities(Collections.singleton(new QueryEntity(Long.class, Long.class)\n+                .setTableName(\"test\")\n+                .addQueryField(\"id\", Long.class.getName(), null)\n+                .addQueryField(\"val\", Long.class.getName(), null)\n+                .setKeyFieldName(\"id\")\n+                .setValueFieldName(\"val\")\n+            ))\n+            .setAffinity(new RendezvousAffinityFunction(false, 10)));\n+\n+        for (long i = 0; i < KEY_CNT; ++i)\n+            c.put(i, i);\n+\n+    }\n+\n+    /**\n+     */\n+    @Test\n+    public void testDefaultSelect() throws Exception {\n+        checkSqlWithDisabledFunction(\"SELECT FILE_WRITE(0, 'test.dat')\");\n+        checkSqlWithDisabledFunction(\"SELECT FILE_READ('test.dat')\");\n+        checkSqlWithDisabledFunction(\"SELECT CSVWRITE('test.csv', 'select 1, 2')\");\n+        checkSqlWithDisabledFunction(\"SELECT * FROM CSVREAD('test.csv')\");\n+        checkSqlWithDisabledFunction(\"SELECT MEMORY_FREE()\");\n+        checkSqlWithDisabledFunction(\"SELECT MEMORY_USED()\");\n+        checkSqlWithDisabledFunction(\"SELECT LOCK_MODE()\");\n+        checkSqlWithDisabledFunction(\"SELECT LINK_SCHEMA('TEST2', '', 'jdbc:h2:./test', 'sa', 'sa', 'PUBLIC')\");\n+        checkSqlWithDisabledFunction(\"SELECT SESSION_ID()\");\n+        checkSqlWithDisabledFunction(\"SELECT CANCEL_SESSION(1)\");\n+    }\n+\n+    /**\n+     */\n+    @Test\n+    public void testDefaultInsert() throws Exception {\n+        checkSqlWithDisabledFunction(\"INSERT INTO TEST (ID, VAL) SELECT 1, FILE_WRITE(0, 'test.dat')\");\n+        checkSqlWithDisabledFunction(\"INSERT INTO TEST (ID, VAL) SELECT 1, FILE_READ('test.dat')\");\n+        checkSqlWithDisabledFunction(\"INSERT INTO TEST (ID, VAL) SELECT 1, SELECT CSVWRITE('test.csv', 'select 1, 2')\");\n+        checkSqlWithDisabledFunction(\"INSERT INTO TEST (ID, VAL) SELECT 1, count(*) FROM CSVREAD('test.csv')\");\n+        checkSqlWithDisabledFunction(\"INSERT INTO TEST (ID, VAL) SELECT 1, MEMORY_FREE()\");\n+        checkSqlWithDisabledFunction(\"INSERT INTO TEST (ID, VAL) SELECT 1, MEMORY_USED()\");\n+        checkSqlWithDisabledFunction(\"INSERT INTO TEST (ID, VAL) SELECT 1, LOCK_MODE()\");\n+        checkSqlWithDisabledFunction(\n+            \"INSERT INTO TEST (ID, VAL) SELECT 1, LINK_SCHEMA('TEST2', '', 'jdbc:h2:./test', 'sa', 'sa', 'PUBLIC')\");\n+        checkSqlWithDisabledFunction(\"INSERT INTO TEST (ID, VAL) SELECT 1, SESSION_ID()\");\n+        checkSqlWithDisabledFunction(\"INSERT INTO TEST (ID, VAL) SELECT 1, CANCEL_SESSION(1)\");\n+    }\n+\n+    /**\n+     */\n+    @Test\n+    public void testDefaultUpdate() throws Exception {\n+        checkSqlWithDisabledFunction(\"UPDATE TEST SET VAL = FILE_WRITE(0, 'test.dat')\");\n+        checkSqlWithDisabledFunction(\"UPDATE TEST SET VAL = LENGTH(FILE_READ('test.dat'))\");\n+        checkSqlWithDisabledFunction(\"UPDATE TEST SET VAL = CSVWRITE('test.csv', 'select 1, 2')\");\n+        checkSqlWithDisabledFunction(\"UPDATE TEST SET VAL = SELECT count(*) FROM CSVREAD('test.csv')\");\n+        checkSqlWithDisabledFunction(\"UPDATE TEST SET VAL = MEMORY_FREE()\");\n+        checkSqlWithDisabledFunction(\"UPDATE TEST SET VAL = MEMORY_USED()\");\n+        checkSqlWithDisabledFunction(\"UPDATE TEST SET VAL = LOCK_MODE()\");\n+        checkSqlWithDisabledFunction(\"UPDATE TEST SET VAL = LINK_SCHEMA('TEST2', '', 'jdbc:h2:./test', 'sa', 'sa', 'PUBLIC')\");\n+        checkSqlWithDisabledFunction(\"UPDATE TEST SET VAL = SESSION_ID()\");\n+        checkSqlWithDisabledFunction(\"UPDATE TEST SET VAL = CANCEL_SESSION(1)\");\n+    }\n+\n+    /**\n+     */\n+    @Test\n+    public void testDefaultDelete() throws Exception {\n+        checkSqlWithDisabledFunction(\"DELETE FROM TEST WHERE VAL = FILE_WRITE(0, 'test.dat')\");\n+        checkSqlWithDisabledFunction(\"DELETE FROM TEST WHERE VAL = LENGTH(FILE_READ('test.dat'))\");\n+        checkSqlWithDisabledFunction(\"DELETE FROM TEST WHERE VAL = CSVWRITE('test.csv', 'select 1, 2')\");\n+        checkSqlWithDisabledFunction(\"DELETE FROM TEST WHERE VAL = SELECT count(*) FROM CSVREAD('test.csv')\");\n+        checkSqlWithDisabledFunction(\"DELETE FROM TEST WHERE VAL = MEMORY_FREE()\");\n+        checkSqlWithDisabledFunction(\"DELETE FROM TEST WHERE VAL = MEMORY_USED()\");\n+        checkSqlWithDisabledFunction(\"DELETE FROM TEST WHERE VAL = LOCK_MODE()\");\n+        checkSqlWithDisabledFunction(\"DELETE FROM TEST WHERE VAL = LINK_SCHEMA('TEST2', '', 'jdbc:h2:./test', 'sa', 'sa', 'PUBLIC')\");\n+        checkSqlWithDisabledFunction(\"DELETE FROM TEST WHERE VAL = SESSION_ID()\");\n+        checkSqlWithDisabledFunction(\"DELETE FROM TEST WHERE VAL = CANCEL_SESSION(1)\");\n+    }\n+\n+    /**\n+     */\n+    @Test\n+    public void testAllowFunctionsDisabledByDefault() throws Exception {\n+        setDisabledSqlFunction();\n+\n+        sql(\"SELECT FILE_WRITE(0, 'test.dat')\").getAll();\n+        sql(\"SELECT FILE_READ('test.dat')\").getAll();\n+        sql(\"SELECT CSVWRITE('test.csv', 'select 1, 2')\").getAll();\n+        sql(\"SELECT * FROM CSVREAD('test.csv')\").getAll();\n+        sql(\"SELECT MEMORY_FREE()\").getAll();\n+        sql(\"SELECT MEMORY_USED()\").getAll();\n+        sql(\"SELECT LOCK_MODE()\").getAll();\n+        sql(\"SELECT LINK_SCHEMA('TEST2', '', 'jdbc:h2:./test', 'sa', 'sa', 'PUBLIC')\").getAll();\n+        sql(\"SELECT SESSION_ID()\").getAll();\n+        sql(\"SELECT CANCEL_SESSION(1)\").getAll();\n+    }\n+\n+    /**\n+     */\n+    @Test\n+    public void testCustomDisabledFunctionsSet_Length() throws Exception {\n+        setDisabledSqlFunction(\"LENGTH\");\n+\n+        sql(\"SELECT FILE_WRITE(0, 'test.dat')\").getAll();\n+        sql(\"SELECT FILE_READ('test.dat')\").getAll();\n+        sql(\"SELECT CSVWRITE('test.csv', 'select 1, 2')\").getAll();\n+        sql(\"SELECT * FROM CSVREAD('test.csv')\").getAll();\n+        sql(\"SELECT MEMORY_FREE()\").getAll();\n+        sql(\"SELECT MEMORY_USED()\").getAll();\n+        sql(\"SELECT LOCK_MODE()\").getAll();\n+        sql(\"SELECT LINK_SCHEMA('TEST2', '', 'jdbc:h2:./test', 'sa', 'sa', 'PUBLIC')\").getAll();\n+        sql(\"SELECT SESSION_ID()\").getAll();\n+        sql(\"SELECT CANCEL_SESSION(1)\").getAll();\n+\n+        checkSqlWithDisabledFunction(\"SELECT LENGTH(?)\", \"test\");\n+    }\n+\n+    /**\n+     */\n+    @Test\n+    public void testCustomDisabledFunctionsSet_FileRead_User() throws Exception {\n+        setDisabledSqlFunction(\"FILE_READ\", \"USER\");\n+\n+        sql(\"SELECT FILE_WRITE(0, 'test.dat')\").getAll();\n+        checkSqlWithDisabledFunction(\"SELECT FILE_READ('test.dat')\");\n+        sql(\"SELECT CSVWRITE('test.csv', 'select 1, 2')\").getAll();\n+        sql(\"SELECT * FROM CSVREAD('test.csv')\").getAll();\n+        sql(\"SELECT MEMORY_FREE()\").getAll();\n+        sql(\"SELECT MEMORY_USED()\").getAll();\n+        sql(\"SELECT LOCK_MODE()\").getAll();\n+        sql(\"SELECT LINK_SCHEMA('TEST2', '', 'jdbc:h2:./test', 'sa', 'sa', 'PUBLIC')\").getAll();\n+        sql(\"SELECT SESSION_ID()\").getAll();\n+        sql(\"SELECT CANCEL_SESSION(1)\").getAll();\n+\n+        checkSqlWithDisabledFunction(\"SELECT USER()\");\n+\n+        sql(\"SELECT CURRENT_TIMESTAMP()\").getAll();\n+    }\n+\n+    /**\n+     */\n+    private void checkSqlWithDisabledFunction(final String sql, final Object ... args) {\n+        try {\n+            sql(sql, args).getAll();\n+\n+            fail(\"Exception must be thrown\");\n+        }\n+        catch (IgniteSQLException e) {\n+            Matcher m = PTRN_FUNC_NOT_FOUND.matcher(e.getMessage());\n+\n+            assertTrue(\"Unexpected error message: \" + e.getMessage(), m.find());\n+        }\n+        catch (Throwable e) {\n+            log.error(\"Unexpected exception\", e);\n+\n+            fail(\"Unexpected exception\");\n+        }\n+    }\n+\n+    /**\n+     * @param sql SQL query.\n+     * @param args Query parameters.\n+     * @return Results cursor.\n+     */\n+    private FieldsQueryCursor<List<?>> sql(String sql, Object ... args) {\n+        IgniteEx ign = client ? grid(\"cli\") :grid(\"srv\");\n+\n+        return ign.context().query().querySqlFields(new SqlFieldsQuery(sql)\n+            .setLocal(local)\n+            .setArgs(args), false);\n+    }\n+\n+    /**\n+     * @param funcs Disabled SQL functions.\n+     * @throws IgniteCheckedException On error.\n+     */\n+    private void setDisabledSqlFunction(String... funcs) throws IgniteCheckedException {\n+        HashSet<String> set = new HashSet<>(Arrays.stream(funcs).collect(Collectors.toSet()));\n+\n+        ((IgniteH2Indexing)grid(\"srv\").context().query().getIndexing())\n+            .distributedConfiguration()\n+            .disabledFunctions(set)\n+            .get();\n+    }\n+}"
        },
        {
            "sha": "66ac052a5f1ff0a46cc653140d2a30fe45316cd7",
            "filename": "modules/indexing/src/test/java/org/apache/ignite/testsuites/IgniteBinaryCacheQueryTestSuite2.java",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/apache/ignite/blob/02b0439639a9dab264cdb3ed4081c231e0079c13/modules%2Findexing%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fignite%2Ftestsuites%2FIgniteBinaryCacheQueryTestSuite2.java",
            "raw_url": "https://github.com/apache/ignite/raw/02b0439639a9dab264cdb3ed4081c231e0079c13/modules%2Findexing%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fignite%2Ftestsuites%2FIgniteBinaryCacheQueryTestSuite2.java",
            "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules%2Findexing%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fignite%2Ftestsuites%2FIgniteBinaryCacheQueryTestSuite2.java?ref=02b0439639a9dab264cdb3ed4081c231e0079c13",
            "patch": "@@ -49,6 +49,7 @@\n import org.apache.ignite.internal.processors.cache.query.ScanQueryOffheapExpiryPolicySelfTest;\n import org.apache.ignite.internal.processors.database.baseline.IgniteChangingBaselineCacheQueryNodeRestartSelfTest;\n import org.apache.ignite.internal.processors.database.baseline.IgniteStableBaselineCacheQueryNodeRestartsSelfTest;\n+import org.apache.ignite.internal.processors.query.DisabledSqlFunctionsTest;\n import org.apache.ignite.internal.processors.query.DmlBatchSizeDeadlockTest;\n import org.apache.ignite.internal.processors.query.IgniteCacheGroupsCompareQueryTest;\n import org.apache.ignite.internal.processors.query.IgniteCacheGroupsSqlDistributedJoinSelfTest;\n@@ -81,6 +82,8 @@\n  */\n @RunWith(Suite.class)\n @Suite.SuiteClasses({\n+    DisabledSqlFunctionsTest.class,\n+\n     SqlIndexConsistencyAfterInterruptAtomicCacheOperationTest.class,\n     SqlIndexConsistencyAfterInterruptTxCacheOperationTest.class,\n     SqlTwoCachesInGroupWithSameEntryTest.class,"
        },
        {
            "sha": "d3db02c9c3033526d84d9701ea7971cdfba5e106",
            "filename": "modules/spring/src/test/java/org/apache/ignite/cache/store/spring/CacheSpringStoreSessionListenerSelfTest.java",
            "status": "modified",
            "additions": 27,
            "deletions": 0,
            "changes": 27,
            "blob_url": "https://github.com/apache/ignite/blob/02b0439639a9dab264cdb3ed4081c231e0079c13/modules%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fignite%2Fcache%2Fstore%2Fspring%2FCacheSpringStoreSessionListenerSelfTest.java",
            "raw_url": "https://github.com/apache/ignite/raw/02b0439639a9dab264cdb3ed4081c231e0079c13/modules%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fignite%2Fcache%2Fstore%2Fspring%2FCacheSpringStoreSessionListenerSelfTest.java",
            "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fignite%2Fcache%2Fstore%2Fspring%2FCacheSpringStoreSessionListenerSelfTest.java?ref=02b0439639a9dab264cdb3ed4081c231e0079c13",
            "patch": "@@ -17,9 +17,12 @@\n \n package org.apache.ignite.cache.store.spring;\n \n+import java.lang.reflect.Method;\n import java.sql.Connection;\n import java.sql.SQLException;\n+import java.util.Collections;\n import java.util.Map;\n+import java.util.Set;\n import javax.cache.Cache;\n import javax.cache.configuration.Factory;\n import javax.cache.integration.CacheLoaderException;\n@@ -31,6 +34,8 @@\n import org.apache.ignite.cache.store.CacheStoreSessionListener;\n import org.apache.ignite.cache.store.CacheStoreSessionListenerAbstractSelfTest;\n import org.apache.ignite.cache.store.jdbc.CacheJdbcStoreSessionListener;\n+import org.apache.ignite.internal.processors.query.h2.DistributedSqlConfiguration;\n+import org.apache.ignite.internal.processors.query.h2.FunctionsManager;\n import org.apache.ignite.lang.IgniteBiInClosure;\n import org.apache.ignite.resources.CacheStoreSessionResource;\n import org.springframework.jdbc.core.JdbcTemplate;\n@@ -45,6 +50,28 @@ public class CacheSpringStoreSessionListenerSelfTest extends CacheStoreSessionLi\n     /** */\n     private static final DataSource DATA_SRC = new DriverManagerDataSource(URL);\n \n+    /** */\n+    private static Method FunctionManager_removeFunctions;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        super.beforeTestsStarted();\n+\n+        FunctionManager_removeFunctions = FunctionsManager.class.getDeclaredMethod(\"removeFunctions\", Set.class);\n+\n+        FunctionManager_removeFunctions.setAccessible(true);\n+\n+        // Cleanup disabled functions because transaction manager uses LOCK_MODE()\n+        FunctionManager_removeFunctions.invoke(FunctionsManager.class, Collections.emptySet());\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTestsStopped() throws Exception {\n+        FunctionManager_removeFunctions.invoke(FunctionsManager.class, DistributedSqlConfiguration.DFLT_DISABLED_FUNCS);\n+\n+        super.afterTestsStopped();\n+    }\n+\n     /** {@inheritDoc} */\n     @Override protected Factory<? extends CacheStore<Integer, Integer>> storeFactory() {\n         return new Factory<CacheStore<Integer, Integer>>() {"
        }
    ]
}