{
    "sha": "7f21ade92407c5c65d2bd83a42e752838acdde5b",
    "node_id": "MDY6Q29tbWl0NTA3Nzc1OjdmMjFhZGU5MjQwN2M1YzY1ZDJiZDgzYTQyZTc1MjgzOGFjZGRlNWI=",
    "commit": {
        "author": {
            "name": "Yang Wang",
            "email": "yang.wang@elastic.co",
            "date": "2020-03-17T06:56:37Z"
        },
        "committer": {
            "name": "GitHub",
            "email": "noreply@github.com",
            "date": "2020-03-17T06:56:37Z"
        },
        "message": "Explicitly require that derived API keys have no privileges (#53647) (#53648)\n\nThe current implicit behaviour is that when an API keys is used to create another API key,\r\nthe child key is created without any privilege. This implicit behaviour is surprising and is\r\na source of confusion for users.\r\n\r\nThis change makes that behaviour explicit.",
        "tree": {
            "sha": "1aaf4c42fa6f1f32303ce4297c969dfc73dd0b91",
            "url": "https://api.github.com/repos/elastic/elasticsearch/git/trees/1aaf4c42fa6f1f32303ce4297c969dfc73dd0b91"
        },
        "url": "https://api.github.com/repos/elastic/elasticsearch/git/commits/7f21ade92407c5c65d2bd83a42e752838acdde5b",
        "comment_count": 0,
        "verification": {
            "verified": true,
            "reason": "valid",
            "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJecHSlCRBK7hj4Ov3rIwAAdHIIAChJhowkvDNlfXrJOUDYheE3\nliBwK59CNgQPLbv5mGtFpyIfOa6iyXOfjCRRT9znEO+ZiINFuIcj3NuS4GiUI0Xi\nXQm/OvzhSjQrc5f9XIZmd9Of34bF8noSGRqnfHddm7fjLBz2ovDYHRcXk52dV+R+\nww4fPK9g5k9ae9KnZfoo+l+glZ3Z8ZUI9HQdFXo39pWiDGjKhDioMO89RxjBMh6Y\noAYNPi5u+SropHlpSHEIkafVrDSlFNrjUp91uMUFu79RGIs2gXY6/1ueQx7hnJA2\nOiL+qLAzQu/mkczio1c3IB8Xvmeew949tLJl4mbt0n3jWsUQpKoRKLp6UryKszg=\n=6yAk\n-----END PGP SIGNATURE-----\n",
            "payload": "tree 1aaf4c42fa6f1f32303ce4297c969dfc73dd0b91\nparent 74dbdb991ce1707ccb7a4aef8f72212bccf583f2\nauthor Yang Wang <yang.wang@elastic.co> 1584428197 +1100\ncommitter GitHub <noreply@github.com> 1584428197 +1100\n\nExplicitly require that derived API keys have no privileges (#53647) (#53648)\n\nThe current implicit behaviour is that when an API keys is used to create another API key,\r\nthe child key is created without any privilege. This implicit behaviour is surprising and is\r\na source of confusion for users.\r\n\r\nThis change makes that behaviour explicit.",
            "verified_at": "2024-01-16T19:59:59Z"
        }
    },
    "url": "https://api.github.com/repos/elastic/elasticsearch/commits/7f21ade92407c5c65d2bd83a42e752838acdde5b",
    "html_url": "https://github.com/elastic/elasticsearch/commit/7f21ade92407c5c65d2bd83a42e752838acdde5b",
    "comments_url": "https://api.github.com/repos/elastic/elasticsearch/commits/7f21ade92407c5c65d2bd83a42e752838acdde5b/comments",
    "author": {
        "login": "ywangd",
        "id": 2344308,
        "node_id": "MDQ6VXNlcjIzNDQzMDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2344308?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ywangd",
        "html_url": "https://github.com/ywangd",
        "followers_url": "https://api.github.com/users/ywangd/followers",
        "following_url": "https://api.github.com/users/ywangd/following{/other_user}",
        "gists_url": "https://api.github.com/users/ywangd/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ywangd/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ywangd/subscriptions",
        "organizations_url": "https://api.github.com/users/ywangd/orgs",
        "repos_url": "https://api.github.com/users/ywangd/repos",
        "events_url": "https://api.github.com/users/ywangd/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ywangd/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "74dbdb991ce1707ccb7a4aef8f72212bccf583f2",
            "url": "https://api.github.com/repos/elastic/elasticsearch/commits/74dbdb991ce1707ccb7a4aef8f72212bccf583f2",
            "html_url": "https://github.com/elastic/elasticsearch/commit/74dbdb991ce1707ccb7a4aef8f72212bccf583f2"
        }
    ],
    "stats": {
        "total": 150,
        "additions": 150,
        "deletions": 0
    },
    "files": [
        {
            "sha": "fc79c8f4c1bbf9ae7c699df6e50aa7353dc7a0c6",
            "filename": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/RoleDescriptor.java",
            "status": "modified",
            "additions": 10,
            "deletions": 0,
            "changes": 10,
            "blob_url": "https://github.com/elastic/elasticsearch/blob/7f21ade92407c5c65d2bd83a42e752838acdde5b/x-pack%2Fplugin%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fcore%2Fsecurity%2Fauthz%2FRoleDescriptor.java",
            "raw_url": "https://github.com/elastic/elasticsearch/raw/7f21ade92407c5c65d2bd83a42e752838acdde5b/x-pack%2Fplugin%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fcore%2Fsecurity%2Fauthz%2FRoleDescriptor.java",
            "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fplugin%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fcore%2Fsecurity%2Fauthz%2FRoleDescriptor.java?ref=7f21ade92407c5c65d2bd83a42e752838acdde5b",
            "patch": "@@ -217,6 +217,16 @@ public int hashCode() {\n         return result;\n     }\n \n+\n+    public boolean isEmpty() {\n+        return clusterPrivileges.length == 0\n+            && configurableClusterPrivileges.length == 0\n+            && indicesPrivileges.length == 0\n+            && applicationPrivileges.length == 0\n+            && runAs.length == 0\n+            && metadata.size() == 0;\n+    }\n+\n     @Override\n     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n         return toXContent(builder, params, false);"
        },
        {
            "sha": "e96e0bdcdba2dc9722b99d85bf0776c1c6b8e41a",
            "filename": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/TransportCreateApiKeyAction.java",
            "status": "modified",
            "additions": 11,
            "deletions": 0,
            "changes": 11,
            "blob_url": "https://github.com/elastic/elasticsearch/blob/7f21ade92407c5c65d2bd83a42e752838acdde5b/x-pack%2Fplugin%2Fsecurity%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Faction%2FTransportCreateApiKeyAction.java",
            "raw_url": "https://github.com/elastic/elasticsearch/raw/7f21ade92407c5c65d2bd83a42e752838acdde5b/x-pack%2Fplugin%2Fsecurity%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Faction%2FTransportCreateApiKeyAction.java",
            "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fplugin%2Fsecurity%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Faction%2FTransportCreateApiKeyAction.java?ref=7f21ade92407c5c65d2bd83a42e752838acdde5b",
            "patch": "@@ -54,6 +54,11 @@ protected void doExecute(Task task, CreateApiKeyRequest request, ActionListener<\n         if (authentication == null) {\n             listener.onFailure(new IllegalStateException(\"authentication is required\"));\n         } else {\n+            if (Authentication.AuthenticationType.API_KEY == authentication.getAuthenticationType() && grantsAnyPrivileges(request)) {\n+                listener.onFailure(new IllegalArgumentException(\n+                    \"creating derived api keys requires an explicit role descriptor that is empty (has no privileges)\"));\n+                return;\n+            }\n             rolesStore.getRoleDescriptors(new HashSet<>(Arrays.asList(authentication.getUser().roles())),\n                 ActionListener.wrap(roleDescriptors -> {\n                         for (RoleDescriptor rd : roleDescriptors) {\n@@ -69,4 +74,10 @@ protected void doExecute(Task task, CreateApiKeyRequest request, ActionListener<\n                     listener::onFailure));\n         }\n     }\n+\n+    private boolean grantsAnyPrivileges(CreateApiKeyRequest request) {\n+        return request.getRoleDescriptors() == null\n+            || request.getRoleDescriptors().isEmpty()\n+            || false == request.getRoleDescriptors().stream().allMatch(RoleDescriptor::isEmpty);\n+    }\n }"
        },
        {
            "sha": "81203a43b51689d83d6bd1ec819bc5cab675802b",
            "filename": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java",
            "status": "modified",
            "additions": 76,
            "deletions": 0,
            "changes": 76,
            "blob_url": "https://github.com/elastic/elasticsearch/blob/7f21ade92407c5c65d2bd83a42e752838acdde5b/x-pack%2Fplugin%2Fsecurity%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Fauthc%2FApiKeyIntegTests.java",
            "raw_url": "https://github.com/elastic/elasticsearch/raw/7f21ade92407c5c65d2bd83a42e752838acdde5b/x-pack%2Fplugin%2Fsecurity%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Fauthc%2FApiKeyIntegTests.java",
            "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fplugin%2Fsecurity%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Fauthc%2FApiKeyIntegTests.java?ref=7f21ade92407c5c65d2bd83a42e752838acdde5b",
            "patch": "@@ -10,6 +10,8 @@\n import org.elasticsearch.ElasticsearchSecurityException;\n import org.elasticsearch.action.DocWriteResponse;\n import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;\n+import org.elasticsearch.action.admin.indices.refresh.RefreshAction;\n+import org.elasticsearch.action.admin.indices.refresh.RefreshRequestBuilder;\n import org.elasticsearch.action.admin.indices.refresh.RefreshResponse;\n import org.elasticsearch.action.support.PlainActionFuture;\n import org.elasticsearch.action.support.WriteRequest;\n@@ -771,6 +773,80 @@ public void testApiKeyWithManageOwnPrivilegeIsAbleToInvalidateItselfButNotAnyOth\n         assertThat(invalidateResponse.getErrors().size(), equalTo(0));\n     }\n \n+    public void testDerivedKeys() throws ExecutionException, InterruptedException {\n+        final Client client = client().filterWithHeader(Collections.singletonMap(\"Authorization\",\n+                UsernamePasswordToken.basicAuthHeaderValue(SecuritySettingsSource.TEST_SUPERUSER,\n+                    SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING)));\n+\n+        final CreateApiKeyResponse response = new SecurityClient(client)\n+            .prepareCreateApiKey()\n+            .setName(\"key-1\")\n+            .setRoleDescriptors(Collections.singletonList(\n+                new RoleDescriptor(\"role\", new String[] { \"manage_api_key\" }, null, null)))\n+            .get();\n+\n+        assertEquals(\"key-1\", response.getName());\n+        assertNotNull(response.getId());\n+        assertNotNull(response.getKey());\n+\n+        // use the first ApiKey for authorized action\n+        final String base64ApiKeyKeyValue = Base64.getEncoder().encodeToString(\n+            (response.getId() + \":\" + response.getKey().toString()).getBytes(StandardCharsets.UTF_8));\n+        final SecurityClient clientKey1 = new SecurityClient(\n+            client().filterWithHeader(Collections.singletonMap(\"Authorization\", \"ApiKey \" + base64ApiKeyKeyValue)));\n+\n+        final String expectedMessage = \"creating derived api keys requires an explicit role descriptor that is empty\";\n+\n+        final IllegalArgumentException e1 = expectThrows(IllegalArgumentException.class,\n+                () -> clientKey1.prepareCreateApiKey().setName(\"key-2\").get());\n+        assertThat(e1.getMessage(), containsString(expectedMessage));\n+\n+        final IllegalArgumentException e2 = expectThrows(IllegalArgumentException.class,\n+            () -> clientKey1.prepareCreateApiKey().setName(\"key-3\")\n+                .setRoleDescriptors(Collections.emptyList()).get());\n+        assertThat(e2.getMessage(), containsString(expectedMessage));\n+\n+        final IllegalArgumentException e3 = expectThrows(IllegalArgumentException.class,\n+            () -> clientKey1.prepareCreateApiKey().setName(\"key-4\")\n+                .setRoleDescriptors(Collections.singletonList(\n+                    new RoleDescriptor(\"role\", new String[] {\"manage_own_api_key\"}, null, null)\n+                )).get());\n+        assertThat(e3.getMessage(), containsString(expectedMessage));\n+\n+        final List<RoleDescriptor> roleDescriptors = randomList(2, 10,\n+            () -> new RoleDescriptor(\"role\", null, null, null));\n+        roleDescriptors.set(randomInt(roleDescriptors.size() - 1),\n+            new RoleDescriptor(\"role\", new String[] {\"manage_own_api_key\"}, null, null));\n+\n+        final IllegalArgumentException e4 = expectThrows(IllegalArgumentException.class,\n+            () -> clientKey1.prepareCreateApiKey().setName(\"key-5\")\n+                .setRoleDescriptors(roleDescriptors).get());\n+        assertThat(e4.getMessage(), containsString(expectedMessage));\n+\n+        final CreateApiKeyResponse key100Response = clientKey1.prepareCreateApiKey().setName(\"key-100\")\n+            .setRoleDescriptors(Collections.singletonList(\n+                new RoleDescriptor(\"role\", null, null, null)\n+            )).get();\n+        assertEquals(\"key-100\", key100Response.getName());\n+        assertNotNull(key100Response.getId());\n+        assertNotNull(key100Response.getKey());\n+\n+        // Check at the end to allow sometime for the operation to happen. Since an erroneous creation is\n+        // asynchronous so that the document is not available immediately.\n+        assertApiKeyNotCreated(client,\"key-2\");\n+        assertApiKeyNotCreated(client,\"key-3\");\n+        assertApiKeyNotCreated(client,\"key-4\");\n+        assertApiKeyNotCreated(client,\"key-5\");\n+    }\n+\n+    private void assertApiKeyNotCreated(Client client, String keyName) throws ExecutionException, InterruptedException {\n+        new RefreshRequestBuilder(client, RefreshAction.INSTANCE).setIndices(SECURITY_MAIN_ALIAS).execute().get();\n+        PlainActionFuture<GetApiKeyResponse> getApiKeyResponseListener = new PlainActionFuture<>();\n+        new SecurityClient(client).getApiKey(\n+            GetApiKeyRequest.usingApiKeyName(keyName, false), getApiKeyResponseListener);\n+        assertEquals(0, getApiKeyResponseListener.get().getApiKeyInfos().length);\n+    }\n+\n     private void verifyGetResponse(int expectedNumberOfApiKeys, List<CreateApiKeyResponse> responses,\n                                    GetApiKeyResponse response, Set<String> validApiKeyIds, List<String> invalidatedApiKeyIds) {\n         verifyGetResponse(SecuritySettingsSource.TEST_SUPERUSER, expectedNumberOfApiKeys, responses, response, validApiKeyIds,"
        },
        {
            "sha": "d5cbf4c1cbe669bf084f0b674727fd47243ba46d",
            "filename": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authz/RoleDescriptorTests.java",
            "status": "modified",
            "additions": 53,
            "deletions": 0,
            "changes": 53,
            "blob_url": "https://github.com/elastic/elasticsearch/blob/7f21ade92407c5c65d2bd83a42e752838acdde5b/x-pack%2Fplugin%2Fsecurity%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Fauthz%2FRoleDescriptorTests.java",
            "raw_url": "https://github.com/elastic/elasticsearch/raw/7f21ade92407c5c65d2bd83a42e752838acdde5b/x-pack%2Fplugin%2Fsecurity%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Fauthz%2FRoleDescriptorTests.java",
            "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fplugin%2Fsecurity%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Fauthz%2FRoleDescriptorTests.java?ref=7f21ade92407c5c65d2bd83a42e752838acdde5b",
            "patch": "@@ -32,7 +32,9 @@\n import java.io.IOException;\n import java.util.Arrays;\n import java.util.Collections;\n+import java.util.HashMap;\n import java.util.LinkedHashSet;\n+import java.util.List;\n import java.util.Map;\n \n import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;\n@@ -325,4 +327,55 @@ public void testParseIndicesPrivilegesFailsWhenExceptFieldsAreNotSubsetOfGranted\n         assertThat(epe, TestMatchers.throwableWithMessage(containsString(\"f2\")));\n         assertThat(epe, TestMatchers.throwableWithMessage(containsString(\"f3\")));\n     }\n+\n+    public void testIsEmpty() {\n+        assertTrue(new RoleDescriptor(\n+            randomAlphaOfLengthBetween(1, 10), null, null, null, null, null, null, null)\n+            .isEmpty());\n+\n+        assertTrue(new RoleDescriptor(\n+            randomAlphaOfLengthBetween(1, 10),\n+            new String[0],\n+            new RoleDescriptor.IndicesPrivileges[0],\n+            new RoleDescriptor.ApplicationResourcePrivileges[0],\n+            new ConfigurableClusterPrivilege[0],\n+            new String[0],\n+            new HashMap<>(),\n+            new HashMap<>())\n+            .isEmpty());\n+\n+        final List<Boolean> booleans = Arrays.asList(\n+            randomBoolean(),\n+            randomBoolean(),\n+            randomBoolean(),\n+            randomBoolean(),\n+            randomBoolean(),\n+            randomBoolean());\n+\n+        final RoleDescriptor roleDescriptor = new RoleDescriptor(\n+            randomAlphaOfLengthBetween(1, 10),\n+            booleans.get(0) ? new String[0] : new String[] { \"foo\" },\n+            booleans.get(1) ?\n+                new RoleDescriptor.IndicesPrivileges[0] :\n+                new RoleDescriptor.IndicesPrivileges[] {\n+                    RoleDescriptor.IndicesPrivileges.builder().indices(\"idx\").privileges(\"foo\").build() },\n+            booleans.get(2) ?\n+                new RoleDescriptor.ApplicationResourcePrivileges[0] :\n+                new RoleDescriptor.ApplicationResourcePrivileges[] {\n+                    RoleDescriptor.ApplicationResourcePrivileges.builder()\n+                        .application(\"app\").privileges(\"foo\").resources(\"res\").build() },\n+            booleans.get(3) ?\n+                new ConfigurableClusterPrivilege[0] :\n+                new ConfigurableClusterPrivilege[] {\n+                    new ConfigurableClusterPrivileges.ManageApplicationPrivileges(Collections.singleton(\"foo\")) },\n+            booleans.get(4) ? new String[0] : new String[] { \"foo\" },\n+            booleans.get(5) ? new HashMap<>() : Collections.singletonMap(\"foo\", \"bar\"),\n+            Collections.singletonMap(\"foo\", \"bar\"));\n+\n+        if (booleans.stream().anyMatch(e -> e.equals(false))) {\n+            assertFalse(roleDescriptor.isEmpty());\n+        } else {\n+            assertTrue(roleDescriptor.isEmpty());\n+        }\n+    }\n }"
        }
    ]
}