{
    "sha": "025b48f3193e2b10b1c41d2bc3bcfc9cfc238a27",
    "node_id": "MDY6Q29tbWl0ODg3MTE5ODE6MDI1YjQ4ZjMxOTNlMmIxMGIxYzQxZDJiYzNiY2ZjOWNmYzIzOGEyNw==",
    "commit": {
        "author": {
            "name": "Alex Rudyy",
            "email": "orudyy@apache.org",
            "date": "2018-06-05T19:01:13Z"
        },
        "committer": {
            "name": "Alex Rudyy",
            "email": "orudyy@apache.org",
            "date": "2018-06-05T22:59:19Z"
        },
        "message": "QPID-8203: [Broker-J][AMQP 0-9] Fix maximum message size check",
        "tree": {
            "sha": "f2fe47300e41042c9c6e1dee9ebb642614d1fdf6",
            "url": "https://api.github.com/repos/apache/qpid-broker-j/git/trees/f2fe47300e41042c9c6e1dee9ebb642614d1fdf6"
        },
        "url": "https://api.github.com/repos/apache/qpid-broker-j/git/commits/025b48f3193e2b10b1c41d2bc3bcfc9cfc238a27",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/qpid-broker-j/commits/025b48f3193e2b10b1c41d2bc3bcfc9cfc238a27",
    "html_url": "https://github.com/apache/qpid-broker-j/commit/025b48f3193e2b10b1c41d2bc3bcfc9cfc238a27",
    "comments_url": "https://api.github.com/repos/apache/qpid-broker-j/commits/025b48f3193e2b10b1c41d2bc3bcfc9cfc238a27/comments",
    "author": {
        "login": "alex-rufous",
        "id": 19550994,
        "node_id": "MDQ6VXNlcjE5NTUwOTk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/19550994?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/alex-rufous",
        "html_url": "https://github.com/alex-rufous",
        "followers_url": "https://api.github.com/users/alex-rufous/followers",
        "following_url": "https://api.github.com/users/alex-rufous/following{/other_user}",
        "gists_url": "https://api.github.com/users/alex-rufous/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/alex-rufous/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/alex-rufous/subscriptions",
        "organizations_url": "https://api.github.com/users/alex-rufous/orgs",
        "repos_url": "https://api.github.com/users/alex-rufous/repos",
        "events_url": "https://api.github.com/users/alex-rufous/events{/privacy}",
        "received_events_url": "https://api.github.com/users/alex-rufous/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "alex-rufous",
        "id": 19550994,
        "node_id": "MDQ6VXNlcjE5NTUwOTk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/19550994?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/alex-rufous",
        "html_url": "https://github.com/alex-rufous",
        "followers_url": "https://api.github.com/users/alex-rufous/followers",
        "following_url": "https://api.github.com/users/alex-rufous/following{/other_user}",
        "gists_url": "https://api.github.com/users/alex-rufous/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/alex-rufous/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/alex-rufous/subscriptions",
        "organizations_url": "https://api.github.com/users/alex-rufous/orgs",
        "repos_url": "https://api.github.com/users/alex-rufous/repos",
        "events_url": "https://api.github.com/users/alex-rufous/events{/privacy}",
        "received_events_url": "https://api.github.com/users/alex-rufous/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "560d4a3b3a51deb4cb79303976cd87a16b8e0997",
            "url": "https://api.github.com/repos/apache/qpid-broker-j/commits/560d4a3b3a51deb4cb79303976cd87a16b8e0997",
            "html_url": "https://github.com/apache/qpid-broker-j/commit/560d4a3b3a51deb4cb79303976cd87a16b8e0997"
        }
    ],
    "stats": {
        "total": 88,
        "additions": 87,
        "deletions": 1
    },
    "files": [
        {
            "sha": "ac9ea952b89066527c8087d8f0c95a7b65b20020",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
            "status": "modified",
            "additions": 4,
            "deletions": 1,
            "changes": 5,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/025b48f3193e2b10b1c41d2bc3bcfc9cfc238a27/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FAMQChannel.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/025b48f3193e2b10b1c41d2bc3bcfc9cfc238a27/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FAMQChannel.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FAMQChannel.java?ref=025b48f3193e2b10b1c41d2bc3bcfc9cfc238a27",
            "patch": "@@ -2217,7 +2217,10 @@ public void receiveMessageHeader(final BasicContentHeaderProperties properties,\n                 closeChannel(ErrorCodes.MESSAGE_TOO_LARGE,\n                              \"Message size of \" + bodySize + \" greater than allowed maximum of \" + _connection.getMaxMessageSize());\n             }\n-            publishContentHeader(new ContentHeaderBody(properties, bodySize));\n+            else\n+            {\n+                publishContentHeader(new ContentHeaderBody(properties, bodySize));\n+            }\n         }\n         else\n         {"
        },
        {
            "sha": "837b6e5b4fa8255da5a7d4a0f22c73540dcdffd9",
            "filename": "systests/protocol-tests-amqp-0-8/src/test/java/org/apache/qpid/tests/protocol/v0_8/extension/maxsize/MaximumMessageSize.java",
            "status": "added",
            "additions": 83,
            "deletions": 0,
            "changes": 83,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/025b48f3193e2b10b1c41d2bc3bcfc9cfc238a27/systests%2Fprotocol-tests-amqp-0-8%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Ftests%2Fprotocol%2Fv0_8%2Fextension%2Fmaxsize%2FMaximumMessageSize.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/025b48f3193e2b10b1c41d2bc3bcfc9cfc238a27/systests%2Fprotocol-tests-amqp-0-8%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Ftests%2Fprotocol%2Fv0_8%2Fextension%2Fmaxsize%2FMaximumMessageSize.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/systests%2Fprotocol-tests-amqp-0-8%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Ftests%2Fprotocol%2Fv0_8%2Fextension%2Fmaxsize%2FMaximumMessageSize.java?ref=025b48f3193e2b10b1c41d2bc3bcfc9cfc238a27",
            "patch": "@@ -0,0 +1,83 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.tests.protocol.v0_8.extension.maxsize;\n+\n+import static org.apache.qpid.tests.utils.BrokerAdmin.KIND_BROKER_J;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import java.net.InetSocketAddress;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.apache.qpid.server.protocol.v0_8.transport.ChannelCloseBody;\n+import org.apache.qpid.server.protocol.v0_8.transport.ChannelOpenOkBody;\n+import org.apache.qpid.server.protocol.v0_8.transport.ConnectionCloseOkBody;\n+import org.apache.qpid.tests.protocol.ChannelClosedResponse;\n+import org.apache.qpid.tests.protocol.v0_8.FrameTransport;\n+import org.apache.qpid.tests.protocol.v0_8.Interaction;\n+import org.apache.qpid.tests.utils.BrokerAdmin;\n+import org.apache.qpid.tests.utils.BrokerAdminUsingTestBase;\n+import org.apache.qpid.tests.utils.BrokerSpecific;\n+import org.apache.qpid.tests.utils.ConfigItem;\n+\n+@BrokerSpecific(kind = KIND_BROKER_J)\n+@ConfigItem(name = \"qpid.max_message_size\", value = \"1000\")\n+public class MaximumMessageSize extends BrokerAdminUsingTestBase\n+{\n+    private InetSocketAddress _brokerAddress;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        _brokerAddress = getBrokerAdmin().getBrokerAddress(BrokerAdmin.PortType.ANONYMOUS_AMQP);\n+        getBrokerAdmin().createQueue(BrokerAdmin.TEST_QUEUE_NAME);\n+    }\n+\n+    @Test\n+    public void limitExceeded() throws Exception\n+    {\n+        String content = Stream.generate(() -> String.valueOf('.')).limit(1001).collect(Collectors.joining());\n+        try(FrameTransport transport = new FrameTransport(_brokerAddress).connect())\n+        {\n+            final Interaction interaction = transport.newInteraction();\n+            interaction.openAnonymousConnection()\n+                       .channel().open().consumeResponse(ChannelOpenOkBody.class)\n+                       .basic().contentHeaderPropertiesContentType(\"text/plain\")\n+                       .contentHeaderPropertiesDeliveryMode((byte)1)\n+                       .contentHeaderPropertiesPriority((byte)1)\n+                       .publishExchange(\"\")\n+                       .publishRoutingKey(BrokerAdmin.TEST_QUEUE_NAME)\n+                       .content(content)\n+                       .publishMessage()\n+                       .consumeResponse(ChannelCloseBody.class)\n+                       .channel().closeOk()\n+                       .connection().close()\n+                       .consumeResponse(ConnectionCloseOkBody.class, ChannelClosedResponse.class);\n+\n+            assertThat(getBrokerAdmin().getQueueDepthMessages(BrokerAdmin.TEST_QUEUE_NAME), is(equalTo(0)));\n+        }\n+    }\n+}"
        }
    ]
}