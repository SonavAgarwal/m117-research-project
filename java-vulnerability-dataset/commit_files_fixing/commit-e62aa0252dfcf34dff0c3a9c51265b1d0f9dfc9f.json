{
    "sha": "e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f",
    "node_id": "MDY6Q29tbWl0Mjc5MTEwODg6ZTYyYWEwMjUyZGZjZjM0ZGZmMGMzYTljNTEyNjViMWQwZjlkZmM5Zg==",
    "commit": {
        "author": {
            "name": "Andy LoPresto",
            "email": "alopresto@apache.org",
            "date": "2018-07-18T23:08:31Z"
        },
        "committer": {
            "name": "Matt Gilman",
            "email": "matt.c.gilman@gmail.com",
            "date": "2018-08-01T16:10:14Z"
        },
        "message": "NIFI-5442 Get X-ProxyContextPath value from request attributes rather than directly from headers.\nNIFI-5442 Populate request contextPath attribute during AccessResource before displaying on message-page.jsp.\nRefactored shared code from CatchAllFilter to WebUtils.\nNIFI-5442 Refactored filter and context path code to shared parent filter and subclass.\nNIFI-5442 Removed unnecessary initParams from nifi-web-ui web.xml.\nNIFI-5442 Added explicit dispatchers to nifi-web-ui web.xml and removed unnecessary code from AccessResource.\n\nThis closes #2908",
        "tree": {
            "sha": "04be6c568fcce4754475e39ccb1463c4601035a1",
            "url": "https://api.github.com/repos/apache/nifi/git/trees/04be6c568fcce4754475e39ccb1463c4601035a1"
        },
        "url": "https://api.github.com/repos/apache/nifi/git/commits/e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f",
        "comment_count": 0,
        "verification": {
            "verified": true,
            "reason": "valid",
            "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEUHogUBYyiEHEusnu32HsGUMq7jcFAlth24AACgkQ32HsGUMq\n7jfHnQ/7B7yBzQPDPe2gEgdit/Ll9bx7ZfmYCDmU0OomwktW4FfO6LufU1TN4DQ/\nCJjQIWAdt10rkTpHk8vsR8VZj3oGQyrJe0HeWm0DvcH4ANwV1nJQi3Vbeg6q/k7M\n/4cD10AT501flt+YcG3tCbf6JU2VXA5yWWMgwAIx7wACBiF1CY3jqkL5RUQaB5T8\nN4jplNo0FXjda+g9Zepu6jKqKWk2i1X1hbPzbMamkDzMWTlaaPYLGri3ZivWSbhu\n9ZgqPplohkwYtVhhY8QQejzixOVtjJiGvApbw1/GS3POACY2i8XzUs3EZRmq8yy6\nyoUc22lRODiVZMXlb8EYySTBvheJwIZ7lDKyx2sr3IatcFhx1EoYmB4MLa7nhCK1\nS8/qiSEqTxds8im91AUPJHKEN+4jyGr+NQ7/ky8ldAcAi3YaS4QdxwNfQyePymvf\nuMHb5X4V3T/j6N0BRRq6/1eotgGKvFMp0mpV7m2hkTlmfZc5p8m4wUMfVgsu8cCf\n/FbYCntAvoYFqRN6OaJtoucjJrq1ai1c/aZG4GdnabMb1oK/CCshS94dCkI0CrAe\nL4UWoJfPScEYtLS8ZSwKbGex0RoE9RlOmUfxYbBTezAtKuboVWyB6CPDn3WEJHzL\nUgCKj7Zs3cMZOKWsuuT+o9nQlvCrExNbksTxijdXwlS3jxo4hAY=\n=FWLa\n-----END PGP SIGNATURE-----",
            "payload": "tree 04be6c568fcce4754475e39ccb1463c4601035a1\nparent 9742dd2fac42d4afb8b1e009535ed50c02373493\nauthor Andy LoPresto <alopresto@apache.org> 1531955311 -0700\ncommitter Matt Gilman <matt.c.gilman@gmail.com> 1533139814 -0400\n\nNIFI-5442 Get X-ProxyContextPath value from request attributes rather than directly from headers.\nNIFI-5442 Populate request contextPath attribute during AccessResource before displaying on message-page.jsp.\nRefactored shared code from CatchAllFilter to WebUtils.\nNIFI-5442 Refactored filter and context path code to shared parent filter and subclass.\nNIFI-5442 Removed unnecessary initParams from nifi-web-ui web.xml.\nNIFI-5442 Added explicit dispatchers to nifi-web-ui web.xml and removed unnecessary code from AccessResource.\n\nThis closes #2908\n",
            "verified_at": "2024-11-07T15:58:58Z"
        }
    },
    "url": "https://api.github.com/repos/apache/nifi/commits/e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f",
    "html_url": "https://github.com/apache/nifi/commit/e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f",
    "comments_url": "https://api.github.com/repos/apache/nifi/commits/e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f/comments",
    "author": {
        "login": "alopresto",
        "id": 798465,
        "node_id": "MDQ6VXNlcjc5ODQ2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/798465?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/alopresto",
        "html_url": "https://github.com/alopresto",
        "followers_url": "https://api.github.com/users/alopresto/followers",
        "following_url": "https://api.github.com/users/alopresto/following{/other_user}",
        "gists_url": "https://api.github.com/users/alopresto/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/alopresto/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/alopresto/subscriptions",
        "organizations_url": "https://api.github.com/users/alopresto/orgs",
        "repos_url": "https://api.github.com/users/alopresto/repos",
        "events_url": "https://api.github.com/users/alopresto/events{/privacy}",
        "received_events_url": "https://api.github.com/users/alopresto/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "mcgilman",
        "id": 123395,
        "node_id": "MDQ6VXNlcjEyMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/123395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mcgilman",
        "html_url": "https://github.com/mcgilman",
        "followers_url": "https://api.github.com/users/mcgilman/followers",
        "following_url": "https://api.github.com/users/mcgilman/following{/other_user}",
        "gists_url": "https://api.github.com/users/mcgilman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mcgilman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mcgilman/subscriptions",
        "organizations_url": "https://api.github.com/users/mcgilman/orgs",
        "repos_url": "https://api.github.com/users/mcgilman/repos",
        "events_url": "https://api.github.com/users/mcgilman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mcgilman/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "9742dd2fac42d4afb8b1e009535ed50c02373493",
            "url": "https://api.github.com/repos/apache/nifi/commits/9742dd2fac42d4afb8b1e009535ed50c02373493",
            "html_url": "https://github.com/apache/nifi/commit/9742dd2fac42d4afb8b1e009535ed50c02373493"
        }
    ],
    "stats": {
        "total": 281,
        "additions": 192,
        "deletions": 89
    },
    "files": [
        {
            "sha": "00b98d2bc1264331a6b3cf7bea2ac753a8665cb8",
            "filename": "nifi-commons/nifi-web-utils/src/main/java/org/apache/nifi/web/filter/SanitizeContextPathFilter.java",
            "status": "added",
            "additions": 81,
            "deletions": 0,
            "changes": 81,
            "blob_url": "https://github.com/apache/nifi/blob/e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f/nifi-commons%2Fnifi-web-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fweb%2Ffilter%2FSanitizeContextPathFilter.java",
            "raw_url": "https://github.com/apache/nifi/raw/e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f/nifi-commons%2Fnifi-web-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fweb%2Ffilter%2FSanitizeContextPathFilter.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons%2Fnifi-web-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fweb%2Ffilter%2FSanitizeContextPathFilter.java?ref=e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f",
            "patch": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.web.filter;\n+\n+import java.io.IOException;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import org.apache.nifi.web.util.WebUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This filter intercepts a request and populates the {@code contextPath} attribute on the request with a sanitized value (originally) retrieved from {@code nifi.properties}.\n+ */\n+public class SanitizeContextPathFilter implements Filter {\n+    private static final Logger logger = LoggerFactory.getLogger(SanitizeContextPathFilter.class);\n+\n+    private String whitelistedContextPaths = \"\";\n+\n+\n+    @Override\n+    public void init(FilterConfig filterConfig) throws ServletException {\n+        String providedWhitelist = filterConfig.getServletContext().getInitParameter(\"whitelistedContextPaths\");\n+        logger.debug(\"SanitizeContextPathFilter received provided whitelisted context paths from NiFi properties: \" + providedWhitelist);\n+        if (providedWhitelist != null) {\n+            whitelistedContextPaths = providedWhitelist;\n+        }\n+    }\n+\n+    @Override\n+    public void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain) throws IOException, ServletException {\n+        // Inject the contextPath attribute into the request\n+        injectContextPathAttribute(request);\n+\n+        // Pass execution to the next filter in the chain\n+        filterChain.doFilter(request, response);\n+    }\n+\n+    /**\n+     * Determines, sanitizes, and injects the {@code contextPath} attribute into the {@code request}. If not present, an empty string {@code \"\"} is injected.\n+     * @param request the request\n+     */\n+    protected void injectContextPathAttribute(ServletRequest request) {\n+        // Capture the provided context path headers and sanitize them before using in the response\n+        String contextPath = WebUtils.sanitizeContextPath(request, whitelistedContextPaths, \"\");\n+        request.setAttribute(\"contextPath\", contextPath);\n+\n+        logger.debug(\"SanitizeContextPathFilter set contextPath: \" + contextPath);\n+    }\n+\n+    @Override\n+    public void destroy() {\n+    }\n+\n+    /**\n+     * Getter for whitelistedContextPaths. Cannot be package-private because of an issue where the package is scoped per classloader.\n+     *\n+     * @return the whitelisted context path(s)\n+     */\n+    protected String getWhitelistedContextPaths() {\n+        return whitelistedContextPaths;\n+    }\n+}"
        },
        {
            "sha": "cbf64e655183c77321daa8d3ee5d433e25f22537",
            "filename": "nifi-commons/nifi-web-utils/src/main/java/org/apache/nifi/web/util/WebUtils.java",
            "status": "modified",
            "additions": 23,
            "deletions": 2,
            "changes": 25,
            "blob_url": "https://github.com/apache/nifi/blob/e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f/nifi-commons%2Fnifi-web-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fweb%2Futil%2FWebUtils.java",
            "raw_url": "https://github.com/apache/nifi/raw/e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f/nifi-commons%2Fnifi-web-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fweb%2Futil%2FWebUtils.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons%2Fnifi-web-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fweb%2Futil%2FWebUtils.java?ref=e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f",
            "patch": "@@ -21,13 +21,12 @@\n import java.util.List;\n import java.util.concurrent.locks.ReadWriteLock;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n-\n import javax.net.ssl.SSLContext;\n+import javax.servlet.ServletRequest;\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.client.Client;\n import javax.ws.rs.client.ClientBuilder;\n import javax.ws.rs.core.UriBuilderException;\n-\n import org.apache.commons.lang3.StringUtils;\n import org.glassfish.jersey.client.ClientConfig;\n import org.glassfish.jersey.jackson.internal.jackson.jaxrs.json.JacksonJaxbJsonProvider;\n@@ -176,6 +175,28 @@ public static String normalizeContextPath(String determinedContextPath) {\n         }\n     }\n \n+    /**\n+     * Returns a \"safe\" context path value from the request headers to use in a proxy environment.\n+     * This is used on the JSP to build the resource paths for the external resources (CSS, JS, etc.).\n+     * If no headers are present specifying this value, it is an empty string.\n+     *\n+     * @param request the HTTP request\n+     * @return the context path safe to be printed to the page\n+     */\n+    public static String sanitizeContextPath(ServletRequest request, String whitelistedContextPaths, String jspDisplayName) {\n+        if (StringUtils.isBlank(jspDisplayName)) {\n+            jspDisplayName = \"JSP page\";\n+        }\n+        String contextPath = normalizeContextPath(determineContextPath((HttpServletRequest) request));\n+        try {\n+            verifyContextPath(whitelistedContextPaths, contextPath);\n+            return contextPath;\n+        } catch (UriBuilderException e) {\n+            logger.error(\"Error determining context path on \" + jspDisplayName + \": \" + e.getMessage());\n+            return \"\";\n+        }\n+    }\n+\n     /**\n      * Determines the context path if populated in {@code X-ProxyContextPath} or {@code X-ForwardContext} headers. If not populated, returns an empty string.\n      *"
        },
        {
            "sha": "971353b711e9cf33af8abd47adf1e3072a3bd25a",
            "filename": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-jetty/src/main/java/org/apache/nifi/web/server/JettyServer.java",
            "status": "modified",
            "additions": 35,
            "deletions": 35,
            "changes": 70,
            "blob_url": "https://github.com/apache/nifi/blob/e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f/nifi-nar-bundles%2Fnifi-framework-bundle%2Fnifi-framework%2Fnifi-web%2Fnifi-jetty%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fweb%2Fserver%2FJettyServer.java",
            "raw_url": "https://github.com/apache/nifi/raw/e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f/nifi-nar-bundles%2Fnifi-framework-bundle%2Fnifi-framework%2Fnifi-web%2Fnifi-jetty%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fweb%2Fserver%2FJettyServer.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles%2Fnifi-framework-bundle%2Fnifi-framework%2Fnifi-web%2Fnifi-jetty%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fweb%2Fserver%2FJettyServer.java?ref=e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f",
            "patch": "@@ -18,6 +18,40 @@\n \n import com.google.common.base.Strings;\n import com.google.common.collect.Lists;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileFilter;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.InetAddress;\n+import java.net.NetworkInterface;\n+import java.net.SocketException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+import java.util.stream.Collectors;\n+import javax.servlet.DispatcherType;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.nifi.NiFiServer;\n@@ -68,41 +102,6 @@\n import org.springframework.web.context.WebApplicationContext;\n import org.springframework.web.context.support.WebApplicationContextUtils;\n \n-import javax.servlet.DispatcherType;\n-import javax.servlet.Filter;\n-import javax.servlet.FilterChain;\n-import javax.servlet.FilterConfig;\n-import javax.servlet.ServletContext;\n-import javax.servlet.ServletException;\n-import javax.servlet.ServletRequest;\n-import javax.servlet.ServletResponse;\n-import javax.servlet.http.HttpServletResponse;\n-import java.io.BufferedReader;\n-import java.io.File;\n-import java.io.FileFilter;\n-import java.io.IOException;\n-import java.io.InputStreamReader;\n-import java.net.InetAddress;\n-import java.net.NetworkInterface;\n-import java.net.SocketException;\n-import java.nio.file.Paths;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.EnumSet;\n-import java.util.Enumeration;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n-import java.util.jar.JarEntry;\n-import java.util.jar.JarFile;\n-import java.util.stream.Collectors;\n-\n /**\n  * Encapsulates the Jetty instance.\n  */\n@@ -317,6 +316,7 @@ private Handler loadWars(final Set<Bundle> bundles) {\n         final WebAppContext webUiContext = loadWar(webUiWar, \"/nifi\", frameworkClassLoader);\n         webUiContext.getInitParams().put(\"oidc-supported\", String.valueOf(props.isOidcEnabled()));\n         webUiContext.getInitParams().put(\"knox-supported\", String.valueOf(props.isKnoxSsoEnabled()));\n+        webUiContext.getInitParams().put(\"whitelistedContextPaths\", props.getWhitelistedContextPaths());\n         handlers.addHandler(webUiContext);\n \n         // load the web api app"
        },
        {
            "sha": "f2dd6970f94f0027a0b556c0916780401ee275bb",
            "filename": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/AccessResource.java",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/apache/nifi/blob/e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f/nifi-nar-bundles%2Fnifi-framework-bundle%2Fnifi-framework%2Fnifi-web%2Fnifi-web-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fweb%2Fapi%2FAccessResource.java",
            "raw_url": "https://github.com/apache/nifi/raw/e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f/nifi-nar-bundles%2Fnifi-framework-bundle%2Fnifi-framework%2Fnifi-web%2Fnifi-web-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fweb%2Fapi%2FAccessResource.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles%2Fnifi-framework-bundle%2Fnifi-framework%2Fnifi-web%2Fnifi-web-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fweb%2Fapi%2FAccessResource.java?ref=e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f",
            "patch": "@@ -340,8 +340,8 @@ public void oidcLogout(@Context HttpServletRequest httpServletRequest, @Context\n             httpServletResponse.sendRedirect(postLogoutRedirectUri);\n         } else {\n             URI logoutUri = UriBuilder.fromUri(endSessionEndpoint)\n-                .queryParam(\"post_logout_redirect_uri\", postLogoutRedirectUri)\n-                .build();\n+                    .queryParam(\"post_logout_redirect_uri\", postLogoutRedirectUri)\n+                    .build();\n             httpServletResponse.sendRedirect(logoutUri.toString());\n         }\n     }\n@@ -765,7 +765,7 @@ private long validateTokenExpiration(long proposedTokenExpiration, String identi\n      * Gets the value of a cookie matching the specified name. If no cookie with that name exists, null is returned.\n      *\n      * @param cookies the cookies\n-     * @param name the name of the cookie\n+     * @param name    the name of the cookie\n      * @return the value of the corresponding cookie, or null if the cookie does not exist\n      */\n     private String getCookieValue(final Cookie[] cookies, final String name) {\n@@ -786,7 +786,7 @@ private String getOidcCallback() {\n \n     private String getNiFiUri() {\n         final String nifiApiUrl = generateResourceUri();\n-        final String baseUrl = StringUtils.substringBeforeLast(nifiApiUrl,\"/nifi-api\");\n+        final String baseUrl = StringUtils.substringBeforeLast(nifiApiUrl, \"/nifi-api\");\n         return baseUrl + \"/nifi\";\n     }\n "
        },
        {
            "sha": "fa94e64f6538e807454ca1c4c2e2feaf8dcb8f21",
            "filename": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-error/src/main/java/org/apache/nifi/web/filter/CatchAllFilter.java",
            "status": "modified",
            "additions": 16,
            "deletions": 36,
            "changes": 52,
            "blob_url": "https://github.com/apache/nifi/blob/e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f/nifi-nar-bundles%2Fnifi-framework-bundle%2Fnifi-framework%2Fnifi-web%2Fnifi-web-error%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fweb%2Ffilter%2FCatchAllFilter.java",
            "raw_url": "https://github.com/apache/nifi/raw/e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f/nifi-nar-bundles%2Fnifi-framework-bundle%2Fnifi-framework%2Fnifi-web%2Fnifi-web-error%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fweb%2Ffilter%2FCatchAllFilter.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles%2Fnifi-framework-bundle%2Fnifi-framework%2Fnifi-web%2Fnifi-web-error%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fweb%2Ffilter%2FCatchAllFilter.java?ref=e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f",
            "patch": "@@ -17,65 +17,45 @@\n package org.apache.nifi.web.filter;\n \n import java.io.IOException;\n-import javax.servlet.Filter;\n import javax.servlet.FilterChain;\n import javax.servlet.FilterConfig;\n import javax.servlet.ServletException;\n import javax.servlet.ServletRequest;\n import javax.servlet.ServletResponse;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.ws.rs.core.UriBuilderException;\n-import org.apache.nifi.web.util.WebUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n- * Filter for forward all requests to index.jsp.\n+ * This filter catches all requests and explicitly forwards them to a JSP ({@code index.jsp} injected in\n+ * the filter configuration. This is used to handle all errors (this module is only used for errors). It\n+ * extends {@link SanitizeContextPathFilter} which sanitizes the context path and injects it as a request\n+ * attribute to be used on the page for linking resources without XSS vulnerabilities.\n  */\n-public class CatchAllFilter implements Filter {\n+public class CatchAllFilter extends SanitizeContextPathFilter {\n     private static final Logger logger = LoggerFactory.getLogger(CatchAllFilter.class);\n \n-    private static String whitelistedContextPaths = \"\";\n+    private String forwardPath = \"\";\n+    private String displayPath = \"\";\n \n     @Override\n     public void init(FilterConfig filterConfig) throws ServletException {\n-        String providedWhitelist = filterConfig.getServletContext().getInitParameter(\"whitelistedContextPaths\");\n-        logger.debug(\"CatchAllFilter received provided whitelisted context paths from NiFi properties: \" + providedWhitelist);\n-        if (providedWhitelist != null) {\n-            whitelistedContextPaths = providedWhitelist;\n-        }\n+        // TODO: Perform path validation (against what set of rules)?\n+        forwardPath = filterConfig.getInitParameter(\"forwardPath\");\n+        displayPath = filterConfig.getInitParameter(\"displayPath\");\n+\n+        logger.debug(\"CatchAllFilter  [\" + displayPath + \"] received provided whitelisted context paths from NiFi properties: \" + getWhitelistedContextPaths());\n     }\n \n     @Override\n     public void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain) throws IOException, ServletException {\n-        // Capture the provided context path headers and sanitize them before using in the response\n-        String contextPath = getSanitizedContextPath(request);\n-        request.setAttribute(\"contextPath\", contextPath);\n+        // Inject the contextPath attribute into the request\n+        injectContextPathAttribute(request);\n \n-        // for all requests to index.jsp\n-        request.getRequestDispatcher(\"/index.jsp\").forward(request, response);\n+        // Forward all requests to index.jsp\n+        request.getRequestDispatcher(forwardPath).forward(request, response);\n     }\n \n     @Override\n     public void destroy() {\n     }\n-\n-    /**\n-     * Returns a \"safe\" context path value from the request headers to use in a proxy environment.\n-     * This is used on the JSP to build the resource paths for the external resources (CSS, JS, etc.).\n-     * If no headers are present specifying this value, it is an empty string.\n-     *\n-     * @param request the HTTP request\n-     * @return the context path safe to be printed to the page\n-     */\n-    private String getSanitizedContextPath(ServletRequest request) {\n-        String contextPath = WebUtils.normalizeContextPath(WebUtils.determineContextPath((HttpServletRequest) request));\n-        try {\n-            WebUtils.verifyContextPath(whitelistedContextPaths, contextPath);\n-            return contextPath;\n-        } catch (UriBuilderException e) {\n-            logger.error(\"Error determining context path on index.jsp: \" + e.getMessage());\n-            return \"\";\n-        }\n-    }\n }"
        },
        {
            "sha": "3fb27e35b0f7e735cff3ad8dc346480fd8f017f0",
            "filename": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-error/src/main/webapp/WEB-INF/web.xml",
            "status": "modified",
            "additions": 8,
            "deletions": 0,
            "changes": 8,
            "blob_url": "https://github.com/apache/nifi/blob/e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f/nifi-nar-bundles%2Fnifi-framework-bundle%2Fnifi-framework%2Fnifi-web%2Fnifi-web-error%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml",
            "raw_url": "https://github.com/apache/nifi/raw/e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f/nifi-nar-bundles%2Fnifi-framework-bundle%2Fnifi-framework%2Fnifi-web%2Fnifi-web-error%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles%2Fnifi-framework-bundle%2Fnifi-framework%2Fnifi-web%2Fnifi-web-error%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f",
            "patch": "@@ -18,6 +18,14 @@\n     <filter>\n         <filter-name>catch-all-filter</filter-name>\n         <filter-class>org.apache.nifi.web.filter.CatchAllFilter</filter-class>\n+        <init-param>\n+            <param-name>displayPath</param-name>\n+            <param-value>index.jsp</param-value>\n+        </init-param>\n+        <init-param>\n+            <param-name>forwardPath</param-name>\n+            <param-value>/index.jsp</param-value>\n+        </init-param>\n     </filter>\n     <filter-mapping>\n         <filter-name>catch-all-filter</filter-name>"
        },
        {
            "sha": "abeffa7d252030b720ee07d989308259c9dd7b56",
            "filename": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/pom.xml",
            "status": "modified",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/apache/nifi/blob/e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f/nifi-nar-bundles%2Fnifi-framework-bundle%2Fnifi-framework%2Fnifi-web%2Fnifi-web-ui%2Fpom.xml",
            "raw_url": "https://github.com/apache/nifi/raw/e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f/nifi-nar-bundles%2Fnifi-framework-bundle%2Fnifi-framework%2Fnifi-web%2Fnifi-web-ui%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles%2Fnifi-framework-bundle%2Fnifi-framework%2Fnifi-web%2Fnifi-web-ui%2Fpom.xml?ref=e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f",
            "patch": "@@ -923,6 +923,11 @@\n             <artifactId>nifi-utils</artifactId>\n             <scope>provided</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>nifi-web-utils</artifactId>\n+            <scope>provided</scope>\n+        </dependency>\n         <dependency>\n             <groupId>org.apache.commons</groupId>\n             <artifactId>commons-lang3</artifactId>"
        },
        {
            "sha": "9999ec0bb3ce8a4e076f5fba6a3a224f1fabc302",
            "filename": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/WEB-INF/pages/message-page.jsp",
            "status": "modified",
            "additions": 5,
            "deletions": 12,
            "changes": 17,
            "blob_url": "https://github.com/apache/nifi/blob/e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f/nifi-nar-bundles%2Fnifi-framework-bundle%2Fnifi-framework%2Fnifi-web%2Fnifi-web-ui%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fpages%2Fmessage-page.jsp",
            "raw_url": "https://github.com/apache/nifi/raw/e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f/nifi-nar-bundles%2Fnifi-framework-bundle%2Fnifi-framework%2Fnifi-web%2Fnifi-web-ui%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fpages%2Fmessage-page.jsp",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles%2Fnifi-framework-bundle%2Fnifi-framework%2Fnifi-web%2Fnifi-web-ui%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fpages%2Fmessage-page.jsp?ref=e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f",
            "patch": "@@ -17,18 +17,11 @@\n <%@ page contentType=\"text/html\" pageEncoding=\"UTF-8\" session=\"false\" %>\n <!DOCTYPE html>\n <html xmlns=\"http://www.w3.org/1999/xhtml\">\n-    <%\n-        String contextPath = request.getHeader(\"X-ProxyContextPath\");\n-        if (contextPath == null) {\n-            contextPath = request.getHeader(\"X-Forwarded-Context\");\n-        }\n-        if (contextPath == null) {\n-            contextPath = \"\";\n-        }\n-        if (contextPath.endsWith(\"/\")) {\n-            contextPath = contextPath.substring(0, contextPath.length() - 1);\n-        }\n-    %>\n+<%\n+    // Sanitize the contextPath to ensure it is on this server\n+    // rather than getting it from the header directly\n+    String contextPath = request.getAttribute(\"contextPath\").toString();\n+%>\n     <head>\n         <title><%= request.getAttribute(\"title\") == null ? \"\" : org.apache.nifi.util.EscapeUtils.escapeHtml(request.getAttribute(\"title\").toString()) %></title>\n         <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />"
        },
        {
            "sha": "0639dd6123164c7773ccf5a60a6d43e933bb902b",
            "filename": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/WEB-INF/web.xml",
            "status": "modified",
            "additions": 15,
            "deletions": 0,
            "changes": 15,
            "blob_url": "https://github.com/apache/nifi/blob/e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f/nifi-nar-bundles%2Fnifi-framework-bundle%2Fnifi-framework%2Fnifi-web%2Fnifi-web-ui%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml",
            "raw_url": "https://github.com/apache/nifi/raw/e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f/nifi-nar-bundles%2Fnifi-framework-bundle%2Fnifi-framework%2Fnifi-web%2Fnifi-web-ui%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles%2Fnifi-framework-bundle%2Fnifi-framework%2Fnifi-web%2Fnifi-web-ui%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=e62aa0252dfcf34dff0c3a9c51265b1d0f9dfc9f",
            "patch": "@@ -146,6 +146,21 @@\n         <url-pattern>/logout</url-pattern>\n     </filter-mapping>\n \n+    <!-- catch all filter -->\n+    <filter>\n+        <filter-name>SanitizeContextPathFilter</filter-name>\n+        <filter-class>org.apache.nifi.web.filter.SanitizeContextPathFilter</filter-class>\n+    </filter>\n+    <filter-mapping>\n+        <filter-name>SanitizeContextPathFilter</filter-name>\n+        <url-pattern>/*</url-pattern>\n+        <dispatcher>REQUEST</dispatcher>\n+        <dispatcher>FORWARD</dispatcher>\n+        <dispatcher>INCLUDE</dispatcher>\n+        <dispatcher>ERROR</dispatcher>\n+        <dispatcher>ASYNC</dispatcher>\n+    </filter-mapping>\n+\n     <welcome-file-list>\n         <welcome-file>canvas.jsp</welcome-file>\n         <welcome-file>/WEB-INF/pages/canvas.jsp</welcome-file>"
        }
    ]
}