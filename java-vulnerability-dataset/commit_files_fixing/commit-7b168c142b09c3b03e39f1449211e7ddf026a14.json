{
    "sha": "7b168c142b09c3b03e39f1449211e7ddf026a14d",
    "node_id": "MDY6Q29tbWl0MjU2MjM5NDI6N2IxNjhjMTQyYjA5YzNiMDNlMzlmMTQ0OTIxMWU3ZGRmMDI2YTE0ZA==",
    "commit": {
        "author": {
            "name": "Francesco Chicchiricc\u00f2",
            "email": "ilgrosso@apache.org",
            "date": "2018-03-07T11:21:21Z"
        },
        "committer": {
            "name": "Francesco Chicchiricc\u00f2",
            "email": "ilgrosso@apache.org",
            "date": "2018-03-09T14:27:43Z"
        },
        "message": "Review fields usable for search and orderBy",
        "tree": {
            "sha": "7867de7c0a932d92178345af0c8a47481fbe7ed4",
            "url": "https://api.github.com/repos/apache/syncope/git/trees/7867de7c0a932d92178345af0c8a47481fbe7ed4"
        },
        "url": "https://api.github.com/repos/apache/syncope/git/commits/7b168c142b09c3b03e39f1449211e7ddf026a14d",
        "comment_count": 3,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/syncope/commits/7b168c142b09c3b03e39f1449211e7ddf026a14d",
    "html_url": "https://github.com/apache/syncope/commit/7b168c142b09c3b03e39f1449211e7ddf026a14d",
    "comments_url": "https://api.github.com/repos/apache/syncope/commits/7b168c142b09c3b03e39f1449211e7ddf026a14d/comments",
    "author": {
        "login": "ilgrosso",
        "id": 1064664,
        "node_id": "MDQ6VXNlcjEwNjQ2NjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1064664?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ilgrosso",
        "html_url": "https://github.com/ilgrosso",
        "followers_url": "https://api.github.com/users/ilgrosso/followers",
        "following_url": "https://api.github.com/users/ilgrosso/following{/other_user}",
        "gists_url": "https://api.github.com/users/ilgrosso/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ilgrosso/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ilgrosso/subscriptions",
        "organizations_url": "https://api.github.com/users/ilgrosso/orgs",
        "repos_url": "https://api.github.com/users/ilgrosso/repos",
        "events_url": "https://api.github.com/users/ilgrosso/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ilgrosso/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "ilgrosso",
        "id": 1064664,
        "node_id": "MDQ6VXNlcjEwNjQ2NjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1064664?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ilgrosso",
        "html_url": "https://github.com/ilgrosso",
        "followers_url": "https://api.github.com/users/ilgrosso/followers",
        "following_url": "https://api.github.com/users/ilgrosso/following{/other_user}",
        "gists_url": "https://api.github.com/users/ilgrosso/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ilgrosso/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ilgrosso/subscriptions",
        "organizations_url": "https://api.github.com/users/ilgrosso/orgs",
        "repos_url": "https://api.github.com/users/ilgrosso/repos",
        "events_url": "https://api.github.com/users/ilgrosso/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ilgrosso/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "717289bc10b6f3b204cb6d14881f530174c62359",
            "url": "https://api.github.com/repos/apache/syncope/commits/717289bc10b6f3b204cb6d14881f530174c62359",
            "html_url": "https://github.com/apache/syncope/commit/717289bc10b6f3b204cb6d14881f530174c62359"
        }
    ],
    "stats": {
        "total": 36,
        "additions": 33,
        "deletions": 3
    },
    "files": [
        {
            "sha": "77a7d134cb86476ca0f9f932b443df43ebad5b29",
            "filename": "common/lib/src/main/java/org/apache/syncope/common/lib/search/SearchableFields.java",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/apache/syncope/blob/7b168c142b09c3b03e39f1449211e7ddf026a14d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSearchableFields.java",
            "raw_url": "https://github.com/apache/syncope/raw/7b168c142b09c3b03e39f1449211e7ddf026a14d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSearchableFields.java",
            "contents_url": "https://api.github.com/repos/apache/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSearchableFields.java?ref=7b168c142b09c3b03e39f1449211e7ddf026a14d",
            "patch": "@@ -36,7 +36,7 @@\n public final class SearchableFields {\n \n     private static final String[] ATTRIBUTES_NOTINCLUDED = {\n-        \"serialVersionUID\", \"password\", \"type\", \"udynMembershipCond\"\n+        \"serialVersionUID\", \"password\", \"type\", \"udynMembershipCond\", \"securityAnswer\", \"token\", \"tokenExpireTime\"\n     };\n \n     private static final Set<String> ANY_FIELDS = new HashSet<>();"
        },
        {
            "sha": "178fa004b18307ce96370d330f14171f0c394dc9",
            "filename": "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java",
            "status": "modified",
            "additions": 11,
            "deletions": 0,
            "changes": 11,
            "blob_url": "https://github.com/apache/syncope/blob/7b168c142b09c3b03e39f1449211e7ddf026a14d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java",
            "raw_url": "https://github.com/apache/syncope/raw/7b168c142b09c3b03e39f1449211e7ddf026a14d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java",
            "contents_url": "https://api.github.com/repos/apache/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java?ref=7b168c142b09c3b03e39f1449211e7ddf026a14d",
            "patch": "@@ -30,6 +30,7 @@\n import javax.validation.ValidationException;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.ClassUtils;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -67,6 +68,10 @@\n \n public abstract class AbstractAnySearchDAO extends AbstractDAO<Any<?>> implements AnySearchDAO {\n \n+    private static final String[] ORDER_BY_NOT_ALLOWED = {\n+        \"serialVersionUID\", \"password\", \"securityQuestion\", \"securityAnswer\", \"token\", \"tokenExpireTime\"\n+    };\n+\n     @Autowired\n     protected RealmDAO realmDAO;\n \n@@ -129,6 +134,12 @@ public <T extends Any<?>> List<T> search(\n         return search(SyncopeConstants.FULL_ADMIN_REALMS, cond, -1, -1, orderBy, kind);\n     }\n \n+    protected List<OrderByClause> filterOrderBy(final List<OrderByClause> orderBy) {\n+        return orderBy.stream().\n+                filter(clause -> !ArrayUtils.contains(ORDER_BY_NOT_ALLOWED, clause.getField())).\n+                collect(Collectors.toList());\n+    }\n+\n     protected abstract <T extends Any<?>> List<T> doSearch(\n             Set<String> adminRealms,\n             SearchCond searchCondition,"
        },
        {
            "sha": "7ffd176be4c51aeaafd02e7d437f2a5e1be9f9fe",
            "filename": "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/apache/syncope/blob/7b168c142b09c3b03e39f1449211e7ddf026a14d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java",
            "raw_url": "https://github.com/apache/syncope/raw/7b168c142b09c3b03e39f1449211e7ddf026a14d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java",
            "contents_url": "https://api.github.com/repos/apache/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=7b168c142b09c3b03e39f1449211e7ddf026a14d",
            "patch": "@@ -276,13 +276,13 @@ private StringBuilder buildOrderBy(final OrderBySupport obs) {\n     }\n \n     private OrderBySupport parseOrderBy(\n-            final AnyTypeKind kind, final SearchSupport svs, final List<OrderByClause> orderByClauses) {\n+            final AnyTypeKind kind, final SearchSupport svs, final List<OrderByClause> orderBy) {\n \n         AnyUtils attrUtils = anyUtilsFactory.getInstance(kind);\n \n         OrderBySupport obs = new OrderBySupport();\n \n-        for (OrderByClause clause : orderByClauses) {\n+        for (OrderByClause clause : filterOrderBy(orderBy)) {\n             OrderBySupport.Item item = new OrderBySupport.Item();\n \n             // Manage difference among external key attribute and internal JPA @Id"
        },
        {
            "sha": "e159778a6dcd62153fa3f0b0f318d5bd230881fb",
            "filename": "fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java",
            "status": "modified",
            "additions": 19,
            "deletions": 0,
            "changes": 19,
            "blob_url": "https://github.com/apache/syncope/blob/7b168c142b09c3b03e39f1449211e7ddf026a14d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java",
            "raw_url": "https://github.com/apache/syncope/raw/7b168c142b09c3b03e39f1449211e7ddf026a14d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java",
            "contents_url": "https://api.github.com/repos/apache/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=7b168c142b09c3b03e39f1449211e7ddf026a14d",
            "patch": "@@ -25,6 +25,7 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n@@ -347,6 +348,24 @@ public void searchByRelationshipType() {\n                 anyMatch(user -> \"c9b2dec2-00a7-4855-97c0-d854842b4b24\".equals(user.getKey())));\n     }\n \n+    @Test\n+    public void searchBySecurityAnswer() {\n+        String securityAnswer = RandomStringUtils.randomAlphanumeric(10);\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"securityAnswer@syncope.apache.org\");\n+        userTO.setSecurityQuestion(\"887028ea-66fc-41e7-b397-620d7ea6dfbb\");\n+        userTO.setSecurityAnswer(securityAnswer);\n+\n+        userTO = createUser(userTO).getEntity();\n+        assertNotNull(userTO.getSecurityQuestion());\n+\n+        PagedResult<UserTO> matchingUsers = userService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                        fiql(SyncopeClient.getUserSearchConditionBuilder().\n+                                is(\"securityAnswer\").equalTo(securityAnswer).query()).build());\n+        assertNotNull(matchingUsers);\n+        assertTrue(matchingUsers.getResult().isEmpty());\n+    }\n+\n     @Test\n     public void assignable() {\n         PagedResult<GroupTO> groups = groupService.search(new AnyQuery.Builder().realm(\"/even/two\").page(1).size(1000)."
        }
    ]
}