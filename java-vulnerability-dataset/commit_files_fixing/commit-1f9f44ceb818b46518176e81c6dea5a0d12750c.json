{
    "sha": "1f9f44ceb818b46518176e81c6dea5a0d12750cf",
    "node_id": "MDY6Q29tbWl0Mjg3Mzg0NDc6MWY5ZjQ0Y2ViODE4YjQ2NTE4MTc2ZTgxYzZkZWE1YTBkMTI3NTBjZg==",
    "commit": {
        "author": {
            "name": "nichunen",
            "email": "nic@apache.org",
            "date": "2020-01-10T13:03:31Z"
        },
        "committer": {
            "name": "nichunen",
            "email": "nic@apache.org",
            "date": "2020-02-07T07:34:46Z"
        },
        "message": "Fix sql injection issue",
        "tree": {
            "sha": "99a443e31a47eea39c40fd4f9f44e289a15f1649",
            "url": "https://api.github.com/repos/apache/kylin/git/trees/99a443e31a47eea39c40fd4f9f44e289a15f1649"
        },
        "url": "https://api.github.com/repos/apache/kylin/git/commits/1f9f44ceb818b46518176e81c6dea5a0d12750cf",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/kylin/commits/1f9f44ceb818b46518176e81c6dea5a0d12750cf",
    "html_url": "https://github.com/apache/kylin/commit/1f9f44ceb818b46518176e81c6dea5a0d12750cf",
    "comments_url": "https://api.github.com/repos/apache/kylin/commits/1f9f44ceb818b46518176e81c6dea5a0d12750cf/comments",
    "author": {
        "login": "nichunen",
        "id": 15867197,
        "node_id": "MDQ6VXNlcjE1ODY3MTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/15867197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nichunen",
        "html_url": "https://github.com/nichunen",
        "followers_url": "https://api.github.com/users/nichunen/followers",
        "following_url": "https://api.github.com/users/nichunen/following{/other_user}",
        "gists_url": "https://api.github.com/users/nichunen/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nichunen/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nichunen/subscriptions",
        "organizations_url": "https://api.github.com/users/nichunen/orgs",
        "repos_url": "https://api.github.com/users/nichunen/repos",
        "events_url": "https://api.github.com/users/nichunen/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nichunen/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "nichunen",
        "id": 15867197,
        "node_id": "MDQ6VXNlcjE1ODY3MTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/15867197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nichunen",
        "html_url": "https://github.com/nichunen",
        "followers_url": "https://api.github.com/users/nichunen/followers",
        "following_url": "https://api.github.com/users/nichunen/following{/other_user}",
        "gists_url": "https://api.github.com/users/nichunen/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nichunen/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nichunen/subscriptions",
        "organizations_url": "https://api.github.com/users/nichunen/orgs",
        "repos_url": "https://api.github.com/users/nichunen/repos",
        "events_url": "https://api.github.com/users/nichunen/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nichunen/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "ae63d708bd4e865475b3ddd8cd2d4c084f4e29d3",
            "url": "https://api.github.com/repos/apache/kylin/commits/ae63d708bd4e865475b3ddd8cd2d4c084f4e29d3",
            "html_url": "https://github.com/apache/kylin/commit/ae63d708bd4e865475b3ddd8cd2d4c084f4e29d3"
        }
    ],
    "stats": {
        "total": 36,
        "additions": 27,
        "deletions": 9
    },
    "files": [
        {
            "sha": "c9f6fb9e02a2f32e1ffb647582dd3187e891c8ad",
            "filename": "server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java",
            "status": "modified",
            "additions": 27,
            "deletions": 9,
            "changes": 36,
            "blob_url": "https://github.com/apache/kylin/blob/1f9f44ceb818b46518176e81c6dea5a0d12750cf/server-base%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fkylin%2Frest%2Fservice%2FCubeService.java",
            "raw_url": "https://github.com/apache/kylin/raw/1f9f44ceb818b46518176e81c6dea5a0d12750cf/server-base%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fkylin%2Frest%2Fservice%2FCubeService.java",
            "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fkylin%2Frest%2Fservice%2FCubeService.java?ref=1f9f44ceb818b46518176e81c6dea5a0d12750cf",
            "patch": "@@ -69,6 +69,7 @@\n import org.apache.kylin.metadata.project.RealizationEntry;\n import org.apache.kylin.metadata.realization.RealizationStatusEnum;\n import org.apache.kylin.metadata.realization.RealizationType;\n+import org.apache.kylin.metrics.MetricsManager;\n import org.apache.kylin.metrics.property.QueryCubePropertyEnum;\n import org.apache.kylin.rest.constant.Constant;\n import org.apache.kylin.rest.exception.BadRequestException;\n@@ -77,6 +78,7 @@\n import org.apache.kylin.rest.msg.Message;\n import org.apache.kylin.rest.msg.MsgPicker;\n import org.apache.kylin.rest.request.MetricsRequest;\n+import org.apache.kylin.rest.request.PrepareSqlRequest;\n import org.apache.kylin.rest.response.CubeInstanceResponse;\n import org.apache.kylin.rest.response.CuboidTreeResponse;\n import org.apache.kylin.rest.response.CuboidTreeResponse.NodeInfo;\n@@ -576,7 +578,8 @@ private void cleanSegmentStorage(List<CubeSegment> toRemoveSegs) throws IOExcept\n             List<String> toDelHDFSPaths = Lists.newArrayListWithCapacity(toRemoveSegs.size());\n             for (CubeSegment seg : toRemoveSegs) {\n                 toDropHTables.add(seg.getStorageLocationIdentifier());\n-                toDelHDFSPaths.add(JobBuilderSupport.getJobWorkingDir(seg.getConfig().getHdfsWorkingDirectory(), seg.getLastBuildJobID()));\n+                toDelHDFSPaths.add(JobBuilderSupport.getJobWorkingDir(seg.getConfig().getHdfsWorkingDirectory(),\n+                        seg.getLastBuildJobID()));\n             }\n \n             StorageCleanUtil.dropHTables(new HBaseAdmin(HBaseConnection.getCurrentHBaseConfiguration()), toDropHTables);\n@@ -713,7 +716,6 @@ private boolean isMergingJobBeenDiscarded(CubeInstance cubeInstance, String cube\n         return false;\n     }\n \n-\n     public void validateCubeDesc(CubeDesc desc, boolean isDraft) {\n         Message msg = MsgPicker.getMsg();\n \n@@ -931,7 +933,7 @@ private NodeInfo generateNodeInfo(long cuboidId, int dimensionCount, long cubeQu\n         long queryExactlyMatchCount = queryMatchMap == null || queryMatchMap.get(cuboidId) == null ? 0L\n                 : queryMatchMap.get(cuboidId);\n         boolean ifExist = currentCuboidSet.contains(cuboidId);\n-        long rowCount = rowCountMap == null ? 0L : rowCountMap.get(cuboidId);\n+        long rowCount = (rowCountMap == null || rowCountMap.size() == 0) ? 0L : rowCountMap.get(cuboidId);\n \n         NodeInfo node = new NodeInfo();\n         node.setId(cuboidId);\n@@ -980,9 +982,10 @@ public Map<Long, Long> getCuboidHitFrequency(String cubeName, boolean isCuboidSo\n         String table = getMetricsManager().getSystemTableFromSubject(getConfig().getKylinMetricsSubjectQueryCube());\n         String sql = \"select \" + cuboidColumn + \", sum(\" + hitMeasure + \")\" //\n                 + \" from \" + table//\n-                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = '\" + cubeName + \"'\" //\n+                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = ?\" //\n                 + \" group by \" + cuboidColumn;\n-        List<List<String>> orgHitFrequency = queryService.querySystemCube(sql).getResults();\n+\n+        List<List<String>> orgHitFrequency = getPrepareQueryResult(cubeName, sql);\n         return formatQueryCount(orgHitFrequency);\n     }\n \n@@ -994,9 +997,10 @@ public Map<Long, Map<Long, Pair<Long, Long>>> getCuboidRollingUpStats(String cub\n         String table = getMetricsManager().getSystemTableFromSubject(getConfig().getKylinMetricsSubjectQueryCube());\n         String sql = \"select \" + cuboidSource + \", \" + cuboidTgt + \", avg(\" + aggCount + \"), avg(\" + returnCount + \")\"//\n                 + \" from \" + table //\n-                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = '\" + cubeName + \"' \" //\n+                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = ?\" //\n                 + \" group by \" + cuboidSource + \", \" + cuboidTgt;\n-        List<List<String>> orgRollingUpCount = queryService.querySystemCube(sql).getResults();\n+\n+        List<List<String>> orgRollingUpCount = getPrepareQueryResult(cubeName, sql);\n         return formatRollingUpStats(orgRollingUpCount);\n     }\n \n@@ -1006,13 +1010,27 @@ public Map<Long, Long> getCuboidQueryMatchCount(String cubeName) {\n         String table = getMetricsManager().getSystemTableFromSubject(getConfig().getKylinMetricsSubjectQueryCube());\n         String sql = \"select \" + cuboidSource + \", sum(\" + hitMeasure + \")\" //\n                 + \" from \" + table //\n-                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = '\" + cubeName + \"'\" //\n+                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = ?\" //\n                 + \" and \" + QueryCubePropertyEnum.IF_MATCH.toString() + \" = true\" //\n                 + \" group by \" + cuboidSource;\n-        List<List<String>> orgMatchHitFrequency = queryService.querySystemCube(sql).getResults();\n+\n+        List<List<String>> orgMatchHitFrequency = getPrepareQueryResult(cubeName, sql);\n         return formatQueryCount(orgMatchHitFrequency);\n     }\n \n+    private List<List<String>> getPrepareQueryResult(String cubeName, String sql) {\n+        PrepareSqlRequest sqlRequest = new PrepareSqlRequest();\n+        sqlRequest.setProject(MetricsManager.SYSTEM_PROJECT);\n+        PrepareSqlRequest.StateParam[] params = new PrepareSqlRequest.StateParam[1];\n+        params[0] = new PrepareSqlRequest.StateParam();\n+        params[0].setClassName(\"java.lang.String\");\n+        params[0].setValue(cubeName);\n+        sqlRequest.setParams(params);\n+        sqlRequest.setSql(sql);\n+\n+        return queryService.doQueryWithCache(sqlRequest, false).getResults();\n+    }\n+\n     @PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN\n             + \" or hasPermission(#cube, 'ADMINISTRATION') or hasPermission(#cube, 'MANAGEMENT')\")\n     public void migrateCube(CubeInstance cube, String projectName) {"
        }
    ]
}