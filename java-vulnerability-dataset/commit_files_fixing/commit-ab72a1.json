{
    "sha": "ab72a106fe5d992abddda954e30849d7cf8cc583",
    "node_id": "MDY6Q29tbWl0MjQ5MzkwNDphYjcyYTEwNmZlNWQ5OTJhYmRkZGE5NTRlMzA4NDlkN2NmOGNjNTgz",
    "commit": {
        "author": {
            "name": "Mark Thomas",
            "email": "markt@apache.org",
            "date": "2019-12-05T23:25:37Z"
        },
        "committer": {
            "name": "Mark Thomas",
            "email": "markt@apache.org",
            "date": "2019-12-07T20:19:50Z"
        },
        "message": "Refactor so Principal is never cached in session with cache==false",
        "tree": {
            "sha": "ace551c492e6de6fc00180008c8efc1f474d48af",
            "url": "https://api.github.com/repos/apache/tomcat/git/trees/ace551c492e6de6fc00180008c8efc1f474d48af"
        },
        "url": "https://api.github.com/repos/apache/tomcat/git/commits/ab72a106fe5d992abddda954e30849d7cf8cc583",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/tomcat/commits/ab72a106fe5d992abddda954e30849d7cf8cc583",
    "html_url": "https://github.com/apache/tomcat/commit/ab72a106fe5d992abddda954e30849d7cf8cc583",
    "comments_url": "https://api.github.com/repos/apache/tomcat/commits/ab72a106fe5d992abddda954e30849d7cf8cc583/comments",
    "author": {
        "login": "markt-asf",
        "id": 4690029,
        "node_id": "MDQ6VXNlcjQ2OTAwMjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4690029?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markt-asf",
        "html_url": "https://github.com/markt-asf",
        "followers_url": "https://api.github.com/users/markt-asf/followers",
        "following_url": "https://api.github.com/users/markt-asf/following{/other_user}",
        "gists_url": "https://api.github.com/users/markt-asf/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markt-asf/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markt-asf/subscriptions",
        "organizations_url": "https://api.github.com/users/markt-asf/orgs",
        "repos_url": "https://api.github.com/users/markt-asf/repos",
        "events_url": "https://api.github.com/users/markt-asf/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markt-asf/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "markt-asf",
        "id": 4690029,
        "node_id": "MDQ6VXNlcjQ2OTAwMjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4690029?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markt-asf",
        "html_url": "https://github.com/markt-asf",
        "followers_url": "https://api.github.com/users/markt-asf/followers",
        "following_url": "https://api.github.com/users/markt-asf/following{/other_user}",
        "gists_url": "https://api.github.com/users/markt-asf/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markt-asf/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markt-asf/subscriptions",
        "organizations_url": "https://api.github.com/users/markt-asf/orgs",
        "repos_url": "https://api.github.com/users/markt-asf/repos",
        "events_url": "https://api.github.com/users/markt-asf/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markt-asf/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "c31917da2d2338731b7406bb52561c3721816b18",
            "url": "https://api.github.com/repos/apache/tomcat/commits/c31917da2d2338731b7406bb52561c3721816b18",
            "html_url": "https://github.com/apache/tomcat/commit/c31917da2d2338731b7406bb52561c3721816b18"
        }
    ],
    "stats": {
        "total": 41,
        "additions": 15,
        "deletions": 26
    },
    "files": [
        {
            "sha": "6d5232e6c2d96969462dd0e9b0c509505cf4e8ef",
            "filename": "java/org/apache/catalina/authenticator/AuthenticatorBase.java",
            "status": "modified",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/apache/tomcat/blob/ab72a106fe5d992abddda954e30849d7cf8cc583/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FAuthenticatorBase.java",
            "raw_url": "https://github.com/apache/tomcat/raw/ab72a106fe5d992abddda954e30849d7cf8cc583/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FAuthenticatorBase.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FAuthenticatorBase.java?ref=ab72a106fe5d992abddda954e30849d7cf8cc583",
            "patch": "@@ -914,10 +914,11 @@ public void register(Request request, HttpServletResponse response, Principal pr\n         }\n \n         // Cache the authentication information in our session, if any\n-        if (cache) {\n-            if (session != null) {\n+        if (session != null) {\n+            if (cache) {\n                 session.setAuthType(authType);\n                 session.setPrincipal(principal);\n+            } else {\n                 if (username != null) {\n                     session.setNote(Constants.SESS_USERNAME_NOTE, username);\n                 } else {"
        },
        {
            "sha": "e13dc55443b5f2b1e2babe22c91ae6dc14d73ccd",
            "filename": "java/org/apache/catalina/authenticator/Constants.java",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/apache/tomcat/blob/ab72a106fe5d992abddda954e30849d7cf8cc583/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FConstants.java",
            "raw_url": "https://github.com/apache/tomcat/raw/ab72a106fe5d992abddda954e30849d7cf8cc583/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FConstants.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FConstants.java?ref=ab72a106fe5d992abddda954e30849d7cf8cc583",
            "patch": "@@ -108,7 +108,10 @@ public class Constants {\n \n     /**\n      * The previously authenticated principal (if caching is disabled).\n+     *\n+     * @deprecated Unused. Will be removed in Tomcat 10.\n      */\n+    @Deprecated\n     public static final String FORM_PRINCIPAL_NOTE = \"org.apache.catalina.authenticator.PRINCIPAL\";\n \n     /**"
        },
        {
            "sha": "1354ce22a806a382528f3e4f580032fdcae4c090",
            "filename": "java/org/apache/catalina/authenticator/FormAuthenticator.java",
            "status": "modified",
            "additions": 9,
            "deletions": 24,
            "changes": 33,
            "blob_url": "https://github.com/apache/tomcat/blob/ab72a106fe5d992abddda954e30849d7cf8cc583/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FFormAuthenticator.java",
            "raw_url": "https://github.com/apache/tomcat/raw/ab72a106fe5d992abddda954e30849d7cf8cc583/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FFormAuthenticator.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FFormAuthenticator.java?ref=ab72a106fe5d992abddda954e30849d7cf8cc583",
            "patch": "@@ -153,10 +153,6 @@ public boolean authenticate(Request request,\n                                 LoginConfig config)\n         throws IOException {\n \n-        if (checkForCachedAuthentication(request, response, true)) {\n-            return true;\n-        }\n-\n         // References to objects we will need later\n         Session session = null;\n         Principal principal = null;\n@@ -175,9 +171,8 @@ public boolean authenticate(Request request,\n                 }\n                 principal = context.getRealm().authenticate(username, password);\n                 if (principal != null) {\n-                    session.setNote(Constants.FORM_PRINCIPAL_NOTE, principal);\n+                    register(request, response, principal, HttpServletRequest.FORM_AUTH, username, password);\n                     if (!matchRequest(request)) {\n-                        register(request, response, principal, HttpServletRequest.FORM_AUTH, username, password);\n                         return true;\n                     }\n                 }\n@@ -194,16 +189,6 @@ public boolean authenticate(Request request,\n             if (log.isDebugEnabled()) {\n                 log.debug(\"Restore request from session '\" + session.getIdInternal() + \"'\");\n             }\n-            principal = (Principal) session.getNote(Constants.FORM_PRINCIPAL_NOTE);\n-            register(request, response, principal, HttpServletRequest.FORM_AUTH,\n-                     (String) session.getNote(Constants.SESS_USERNAME_NOTE),\n-                     (String) session.getNote(Constants.SESS_PASSWORD_NOTE));\n-            // If we're caching principals we no longer need the user name\n-            // and password in the session, so remove them\n-            if (cache) {\n-                session.removeNote(Constants.SESS_USERNAME_NOTE);\n-                session.removeNote(Constants.SESS_PASSWORD_NOTE);\n-            }\n             if (restoreRequest(request, session)) {\n                 if (log.isDebugEnabled()) {\n                     log.debug(\"Proceed to restored request\");\n@@ -218,6 +203,12 @@ public boolean authenticate(Request request,\n             }\n         }\n \n+        // This check has to be after the previous check for a matching request\n+        // because that matching request may also include a cached Principal.\n+        if (checkForCachedAuthentication(request, response, true)) {\n+            return true;\n+        }\n+\n         // Acquire references to objects we will need to evaluate\n         String contextPath = request.getContextPath();\n         String requestURI = request.getDecodedRequestURI();\n@@ -302,12 +293,7 @@ public boolean authenticate(Request request,\n             return false;\n         }\n \n-        // Save the authenticated Principal in our session\n-        session.setNote(Constants.FORM_PRINCIPAL_NOTE, principal);\n-\n-        // Save the username and password as well\n-        session.setNote(Constants.SESS_USERNAME_NOTE, username);\n-        session.setNote(Constants.SESS_PASSWORD_NOTE, password);\n+        register(request, response, principal, HttpServletRequest.FORM_AUTH, username, password);\n \n         // Redirect the user to the original request URI (which will cause\n         // the original request to be restored)\n@@ -502,7 +488,7 @@ protected boolean matchRequest(Request request) {\n         }\n \n         // Is there a saved principal?\n-        if (session.getNote(Constants.FORM_PRINCIPAL_NOTE) == null) {\n+        if (cache && session.getPrincipal() == null || !cache && request.getPrincipal() == null) {\n             return false;\n         }\n \n@@ -532,7 +518,6 @@ protected boolean restoreRequest(Request request, Session session)\n         // Retrieve and remove the SavedRequest object from our session\n         SavedRequest saved = (SavedRequest) session.getNote(Constants.FORM_REQUEST_NOTE);\n         session.removeNote(Constants.FORM_REQUEST_NOTE);\n-        session.removeNote(Constants.FORM_PRINCIPAL_NOTE);\n         if (saved == null) {\n             return false;\n         }"
        }
    ]
}