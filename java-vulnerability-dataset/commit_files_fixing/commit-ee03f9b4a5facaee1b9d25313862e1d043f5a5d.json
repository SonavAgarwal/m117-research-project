{
    "sha": "ee03f9b4a5facaee1b9d25313862e1d043f5a5dc",
    "node_id": "MDY6Q29tbWl0MTA3Mjg0NTplZTAzZjliNGE1ZmFjYWVlMWI5ZDI1MzEzODYyZTFkMDQzZjVhNWRj",
    "commit": {
        "author": {
            "name": "Oliver Drotbohm",
            "email": "ogierke@pivotal.io",
            "date": "2019-03-29T13:22:48Z"
        },
        "committer": {
            "name": "Oliver Drotbohm",
            "email": "ogierke@pivotal.io",
            "date": "2019-04-01T08:52:19Z"
        },
        "message": "DATAJPA-1519 - Final polishing.\n\nIntroduced dedicated JPA SpEL root  object to be able to explicitly control the function names exposed.",
        "tree": {
            "sha": "ed23e877fc7c110a305f07de2c0dc882b94d518f",
            "url": "https://api.github.com/repos/spring-projects/spring-data-jpa/git/trees/ed23e877fc7c110a305f07de2c0dc882b94d518f"
        },
        "url": "https://api.github.com/repos/spring-projects/spring-data-jpa/git/commits/ee03f9b4a5facaee1b9d25313862e1d043f5a5dc",
        "comment_count": 0,
        "verification": {
            "verified": true,
            "reason": "valid",
            "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3SOwfGzOVQk6tElQbkK1eHVD9pAFAlyh0UMACgkQbkK1eHVD\n9pBxQw/+PUAXO66AiWKG0GNmlAEsuci616Yg79RAZ7fBsQspDYKKnXzBJj7mJcTe\nMZS0XQF4xGwAdNQJm/pN0oxiOtbPFgh/OBgp3FylhF9koJstRFxrfWvVbwzHnSEA\nhHYlwyB2SosKTL3dhB6PdEINgOiprB90a6nbUcvVzmKWhp3w0j6BhwJwD+CiUmLJ\nPOfTyfj9R5zi6L94ubumjrI7NwulSE8Lv4jLVW6jiGcAVqtY7lRTNBCBq1wFWIYZ\nzP4Da1bH8KPELgwJy8tu6jgP0dOHH1lCllWN4bUcGAf/ZYc155BEtYvyIvenYJmg\nj1Rngjbth6GYcoMMsj50hF3XgbxbMlaXGxDOdbVPqewJgL35wpY3M5cXhQ4XX/I0\nxNnu4EmjnqgEFBLxzNMRRvKvNdWpo7BrsnNMsGOYzEzubkF4JwRoyqGDMWwS/s54\n0ZrrloP+Xb+/hUJnvUFAIOjuP+JziKmgQxR26yMaAFkvUtCgu46UQPVLnU8O4OMP\n9hjsXxnkDJjPeY0e5WAfUWrpudaUDFCCCCEdea4JyiGxZPbk3r19Vk9ScSiA7p0x\n4JenQ0e/xse5w2s/ainsYyX1biir615WNOitUiaMc8EF6UY4NVtGPStJVD3W7swM\n2W7C8ZR3WY/lf4MZrEFxG4rbjNol67aDVYck5Rw3yXegiCIuJYg=\n=HeO2\n-----END PGP SIGNATURE-----",
            "payload": "tree ed23e877fc7c110a305f07de2c0dc882b94d518f\nparent b6060be66b6cbf447c0c62e5b80caa565e10f383\nauthor Oliver Drotbohm <ogierke@pivotal.io> 1553865768 +0100\ncommitter Oliver Drotbohm <ogierke@pivotal.io> 1554108739 +0200\n\nDATAJPA-1519 - Final polishing.\n\nIntroduced dedicated JPA SpEL root  object to be able to explicitly control the function names exposed.\n",
            "verified_at": "2024-11-11T12:19:56Z"
        }
    },
    "url": "https://api.github.com/repos/spring-projects/spring-data-jpa/commits/ee03f9b4a5facaee1b9d25313862e1d043f5a5dc",
    "html_url": "https://github.com/spring-projects/spring-data-jpa/commit/ee03f9b4a5facaee1b9d25313862e1d043f5a5dc",
    "comments_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/commits/ee03f9b4a5facaee1b9d25313862e1d043f5a5dc/comments",
    "author": {
        "login": "odrotbohm",
        "id": 128577,
        "node_id": "MDQ6VXNlcjEyODU3Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/128577?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/odrotbohm",
        "html_url": "https://github.com/odrotbohm",
        "followers_url": "https://api.github.com/users/odrotbohm/followers",
        "following_url": "https://api.github.com/users/odrotbohm/following{/other_user}",
        "gists_url": "https://api.github.com/users/odrotbohm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/odrotbohm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/odrotbohm/subscriptions",
        "organizations_url": "https://api.github.com/users/odrotbohm/orgs",
        "repos_url": "https://api.github.com/users/odrotbohm/repos",
        "events_url": "https://api.github.com/users/odrotbohm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/odrotbohm/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "odrotbohm",
        "id": 128577,
        "node_id": "MDQ6VXNlcjEyODU3Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/128577?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/odrotbohm",
        "html_url": "https://github.com/odrotbohm",
        "followers_url": "https://api.github.com/users/odrotbohm/followers",
        "following_url": "https://api.github.com/users/odrotbohm/following{/other_user}",
        "gists_url": "https://api.github.com/users/odrotbohm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/odrotbohm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/odrotbohm/subscriptions",
        "organizations_url": "https://api.github.com/users/odrotbohm/orgs",
        "repos_url": "https://api.github.com/users/odrotbohm/repos",
        "events_url": "https://api.github.com/users/odrotbohm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/odrotbohm/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "b6060be66b6cbf447c0c62e5b80caa565e10f383",
            "url": "https://api.github.com/repos/spring-projects/spring-data-jpa/commits/b6060be66b6cbf447c0c62e5b80caa565e10f383",
            "html_url": "https://github.com/spring-projects/spring-data-jpa/commit/b6060be66b6cbf447c0c62e5b80caa565e10f383"
        }
    ],
    "stats": {
        "total": 99,
        "additions": 60,
        "deletions": 39
    },
    "files": [
        {
            "sha": "1d74e55426b22e42bc2e213839ce67344be58206",
            "filename": "src/main/java/org/springframework/data/jpa/repository/config/JpaRepositoryConfigExtension.java",
            "status": "modified",
            "additions": 5,
            "deletions": 8,
            "changes": 13,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/ee03f9b4a5facaee1b9d25313862e1d043f5a5dc/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fconfig%2FJpaRepositoryConfigExtension.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/ee03f9b4a5facaee1b9d25313862e1d043f5a5dc/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fconfig%2FJpaRepositoryConfigExtension.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fconfig%2FJpaRepositoryConfigExtension.java?ref=ee03f9b4a5facaee1b9d25313862e1d043f5a5dc",
            "patch": "@@ -214,16 +214,13 @@ public void registerBeansForRoot(BeanDefinitionRegistry registry, RepositoryConf\n \n \t\t// EvaluationContextExtension for JPA specific SpEL functions\n \n-\t\tregisterIfNotAlreadyRegistered(() -> {\n+\t\tObject value = getEscapeCharacter(config).orElse('\\\\');\n \n-\t\t\tObject value = getEscapeCharacter(config).orElse('\\\\');\n+\t\tBeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(JpaEvaluationContextExtension.class);\n+\t\tbuilder.addConstructorArgValue(value);\n \n-\t\t\tBeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(JpaEvaluationContextExtension.class);\n-\t\t\tbuilder.addConstructorArgValue(value);\n-\n-\t\t\treturn builder.getBeanDefinition();\n-\n-\t\t}, registry, JpaEvaluationContextExtension.class.getName(), source);\n+\t\tregisterIfNotAlreadyRegistered(builder.getBeanDefinition(), registry, JpaEvaluationContextExtension.class.getName(),\n+\t\t\t\tsource);\n \t}\n \n \t/*"
        },
        {
            "sha": "f1bc0fd5f908119c3b6941aa33f32f03f13be156",
            "filename": "src/main/java/org/springframework/data/jpa/repository/query/EscapeCharacter.java",
            "status": "modified",
            "additions": 6,
            "deletions": 16,
            "changes": 22,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/ee03f9b4a5facaee1b9d25313862e1d043f5a5dc/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FEscapeCharacter.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/ee03f9b4a5facaee1b9d25313862e1d043f5a5dc/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FEscapeCharacter.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FEscapeCharacter.java?ref=ee03f9b4a5facaee1b9d25313862e1d043f5a5dc",
            "patch": "@@ -34,30 +34,20 @@ public class EscapeCharacter {\n \n \tprivate static final List<String> TO_REPLACE = Arrays.asList(\"_\", \"%\");\n \n-\tchar value;\n+\tchar escapeCharacter;\n \n \t/**\n \t * Escapes all special like characters ({@code _}, {@code %}) using the configured escape character.\n \t *\n-\t * @param value May be {@literal null}.\n+\t * @param value may be {@literal null}.\n \t * @return\n \t */\n \t@Nullable\n \tpublic String escape(String value) {\n \n-\t\tif (value == null) {\n-\t\t\treturn null;\n-\t\t}\n-\t\treturn TO_REPLACE.stream() //\n-\t\t\t\t.reduce(value, (it, character) -> it.replace(character, this.value + character));\n-\t}\n-\n-\t/**\n-\t * Makes the underlying character available.\n-\t *\n-\t * @return the value\n-\t */\n-\tpublic char escapeCharacter() {\n-\t\treturn value;\n+\t\treturn value == null //\n+\t\t\t\t? null //\n+\t\t\t\t: TO_REPLACE.stream() //\n+\t\t\t\t\t\t.reduce(value, (it, character) -> it.replace(character, this.escapeCharacter + character));\n \t}\n }"
        },
        {
            "sha": "e5bb9cd550060759d91ed54f3ce0c028132b664b",
            "filename": "src/main/java/org/springframework/data/jpa/repository/query/JpaQueryCreator.java",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/ee03f9b4a5facaee1b9d25313862e1d043f5a5dc/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FJpaQueryCreator.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/ee03f9b4a5facaee1b9d25313862e1d043f5a5dc/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FJpaQueryCreator.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FJpaQueryCreator.java?ref=ee03f9b4a5facaee1b9d25313862e1d043f5a5dc",
            "patch": "@@ -291,7 +291,7 @@ public Predicate build() {\n \t\t\t\t\tExpression<String> stringPath = getTypedPath(root, part);\n \t\t\t\t\tExpression<String> propertyExpression = upperIfIgnoreCase(stringPath);\n \t\t\t\t\tExpression<String> parameterExpression = upperIfIgnoreCase(provider.next(part, String.class).getExpression());\n-\t\t\t\t\tPredicate like = builder.like(propertyExpression, parameterExpression, escape.getValue());\n+\t\t\t\t\tPredicate like = builder.like(propertyExpression, parameterExpression, escape.getEscapeCharacter());\n \t\t\t\t\treturn type.equals(NOT_LIKE) || type.equals(NOT_CONTAINING) ? like.not() : like;\n \t\t\t\tcase TRUE:\n \t\t\t\t\tExpression<Boolean> truePath = getTypedPath(root, part);"
        },
        {
            "sha": "a04e8ebbd274e2485b878419eaac5f1a9789ad89",
            "filename": "src/main/java/org/springframework/data/jpa/repository/query/QueryParameterSetterFactory.java",
            "status": "modified",
            "additions": 0,
            "deletions": 1,
            "changes": 1,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/ee03f9b4a5facaee1b9d25313862e1d043f5a5dc/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FQueryParameterSetterFactory.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/ee03f9b4a5facaee1b9d25313862e1d043f5a5dc/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FQueryParameterSetterFactory.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FQueryParameterSetterFactory.java?ref=ee03f9b4a5facaee1b9d25313862e1d043f5a5dc",
            "patch": "@@ -28,7 +28,6 @@\n import org.springframework.data.repository.query.EvaluationContextProvider;\n import org.springframework.data.repository.query.Parameter;\n import org.springframework.data.repository.query.Parameters;\n-import org.springframework.data.jpa.repository.support.EscapeCharacter;\n import org.springframework.expression.EvaluationContext;\n import org.springframework.expression.Expression;\n import org.springframework.expression.spel.standard.SpelExpressionParser;"
        },
        {
            "sha": "55baa05553721bcc35e0811f7ed8635fa610c3b1",
            "filename": "src/main/java/org/springframework/data/jpa/repository/support/JpaEvaluationContextExtension.java",
            "status": "modified",
            "additions": 34,
            "deletions": 5,
            "changes": 39,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/ee03f9b4a5facaee1b9d25313862e1d043f5a5dc/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsupport%2FJpaEvaluationContextExtension.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/ee03f9b4a5facaee1b9d25313862e1d043f5a5dc/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsupport%2FJpaEvaluationContextExtension.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsupport%2FJpaEvaluationContextExtension.java?ref=ee03f9b4a5facaee1b9d25313862e1d043f5a5dc",
            "patch": "@@ -15,26 +15,29 @@\n  */\n package org.springframework.data.jpa.repository.support;\n \n+import lombok.RequiredArgsConstructor;\n+\n import org.springframework.data.jpa.repository.query.EscapeCharacter;\n-import org.springframework.data.spel.spi.EvaluationContextExtension;\n+import org.springframework.data.repository.query.spi.EvaluationContextExtension;\n+import org.springframework.data.repository.query.spi.EvaluationContextExtensionSupport;\n \n /**\n  * {@link EvaluationContextExtension} to register {@link EscapeCharacter} as root object to essentially expose an\n  * {@code expose(\u2026)} function to SpEL.\n  *\n  * @author Oliver Drotbohm\n  */\n-public class JpaEvaluationContextExtension implements EvaluationContextExtension {\n+public class JpaEvaluationContextExtension extends EvaluationContextExtensionSupport {\n \n-\tprivate final EscapeCharacter character;\n+\tprivate final JpaRootObject root;\n \n \t/**\n \t * Creates a new {@link JpaEvaluationContextExtension} for the given escape character.\n \t *\n \t * @param escapeCharacter the character to be used to escape parameters for LIKE expression.\n \t */\n \tpublic JpaEvaluationContextExtension(char escapeCharacter) {\n-\t\tthis.character = EscapeCharacter.of(escapeCharacter);\n+\t\tthis.root = JpaRootObject.of(EscapeCharacter.of(escapeCharacter));\n \t}\n \n \t/*\n@@ -52,6 +55,32 @@ public String getExtensionId() {\n \t */\n \t@Override\n \tpublic Object getRootObject() {\n-\t\treturn character;\n+\t\treturn root;\n+\t}\n+\n+\t@RequiredArgsConstructor(staticName = \"of\")\n+\tpublic static class JpaRootObject {\n+\n+\t\tprivate final EscapeCharacter character;\n+\n+\t\t/**\n+\t\t * Escapes the given source {@link String} for LIKE expressions.\n+\t\t *\n+\t\t * @param source can be {@literal null}.\n+\t\t * @return\n+\t\t * @see EscapeCharacter#escape(String)\n+\t\t */\n+\t\tpublic String escape(String source) {\n+\t\t\treturn character.escape(source);\n+\t\t}\n+\n+\t\t/**\n+\t\t * Returns the escape character being used to escape special characters for LIKE expressions.\n+\t\t *\n+\t\t * @return\n+\t\t */\n+\t\tpublic char escapeCharacter() {\n+\t\t\treturn character.getEscapeCharacter();\n+\t\t}\n \t}\n }"
        },
        {
            "sha": "280a15794d86d7ad39feab129d4154232354cfc9",
            "filename": "src/main/java/org/springframework/data/jpa/repository/support/JpaRepositoryFactoryBean.java",
            "status": "modified",
            "additions": 14,
            "deletions": 8,
            "changes": 22,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/ee03f9b4a5facaee1b9d25313862e1d043f5a5dc/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsupport%2FJpaRepositoryFactoryBean.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/ee03f9b4a5facaee1b9d25313862e1d043f5a5dc/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsupport%2FJpaRepositoryFactoryBean.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsupport%2FJpaRepositoryFactoryBean.java?ref=ee03f9b4a5facaee1b9d25313862e1d043f5a5dc",
            "patch": "@@ -18,11 +18,11 @@\n import javax.persistence.EntityManager;\n import javax.persistence.PersistenceContext;\n \n+import org.springframework.data.jpa.repository.query.EscapeCharacter;\n import org.springframework.data.mapping.context.MappingContext;\n import org.springframework.data.repository.Repository;\n import org.springframework.data.repository.core.support.RepositoryFactorySupport;\n import org.springframework.data.repository.core.support.TransactionalRepositoryFactoryBeanSupport;\n-import org.springframework.data.jpa.repository.query.EscapeCharacter;\n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n \n@@ -39,6 +39,8 @@ public class JpaRepositoryFactoryBean<T extends Repository<S, ID>, S, ID>\n \t\textends TransactionalRepositoryFactoryBeanSupport<T, S, ID> {\n \n \tprivate @Nullable EntityManager entityManager;\n+\tprivate EscapeCharacter escapeCharacter = EscapeCharacter.of('\\\\');\n+\n \t/**\n \t * Creates a new {@link JpaRepositoryFactoryBean} for the given repository interface.\n \t *\n@@ -48,6 +50,15 @@ public JpaRepositoryFactoryBean(Class<? extends T> repositoryInterface) {\n \t\tsuper(repositoryInterface);\n \t}\n \n+\t/**\n+\t * Configures the escape character to be used to escape reserved characters in LIKE expressions.\n+\t *\n+\t * @param escapeCharacter\n+\t */\n+\tpublic void setEscapeCharacter(char escapeCharacter) {\n+\t\tthis.escapeCharacter = EscapeCharacter.of(escapeCharacter);\n+\t}\n+\n \t/**\n \t * The {@link EntityManager} to be used.\n \t *\n@@ -76,7 +87,7 @@ public void setMappingContext(MappingContext<?, ?> mappingContext) {\n \t@Override\n \tprotected RepositoryFactorySupport doCreateRepositoryFactory() {\n \n-\t\tAssert.state(entityManager != null,\"EntityManager must not be null!\");\n+\t\tAssert.state(entityManager != null, \"EntityManager must not be null!\");\n \n \t\treturn createRepositoryFactory(entityManager);\n \t}\n@@ -102,12 +113,7 @@ protected RepositoryFactorySupport createRepositoryFactory(EntityManager entityM\n \t@Override\n \tpublic void afterPropertiesSet() {\n \n-\t\tAssert.state(entityManager != null,\"EntityManager must not be null!\");\n+\t\tAssert.state(entityManager != null, \"EntityManager must not be null!\");\n \t\tsuper.afterPropertiesSet();\n \t}\n-\n-\tpublic void setEscapeCharacter(char escapeCharacter) {\n-\n-\t\tthis.escapeCharacter = EscapeCharacter.of(escapeCharacter);\n-\t}\n }"
        }
    ]
}