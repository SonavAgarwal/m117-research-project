{
    "sha": "97d871a7553a01384b43df855dccdda5205ae77a",
    "node_id": "MDY6Q29tbWl0MTA2NDU2Mzo5N2Q4NzFhNzU1M2EwMTM4NGI0M2RmODU1ZGNjZGRhNTIwNWFlNzdh",
    "commit": {
        "author": {
            "name": "Stephane Landelle",
            "email": "slandelle@gatling.io",
            "date": "2015-04-14T11:57:32Z"
        },
        "committer": {
            "name": "Norman Maurer",
            "email": "norman_maurer@apple.com",
            "date": "2015-05-07T04:33:36Z"
        },
        "message": "Validate cookie name and value characters Motivation:\n\nRFC6265 specifies which characters are allowed in a cookie name and value.\n\nNetty is currently too lax, which can used for HttpOnly escaping.\n\nModification:\n\nIn ServerCookieDecoder: discard cookie key-value pairs that contain invalid characters.\nIn ClientCookieEncoder: throw an exception when trying to encode cookies with invalid characters.\n\nResult:\n\nThe problem described in the motivation section is fixed.",
        "tree": {
            "sha": "19187bd77f8a6f2de1131890d97dbfbbe9f67b49",
            "url": "https://api.github.com/repos/netty/netty/git/trees/19187bd77f8a6f2de1131890d97dbfbbe9f67b49"
        },
        "url": "https://api.github.com/repos/netty/netty/git/commits/97d871a7553a01384b43df855dccdda5205ae77a",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/netty/netty/commits/97d871a7553a01384b43df855dccdda5205ae77a",
    "html_url": "https://github.com/netty/netty/commit/97d871a7553a01384b43df855dccdda5205ae77a",
    "comments_url": "https://api.github.com/repos/netty/netty/commits/97d871a7553a01384b43df855dccdda5205ae77a/comments",
    "author": {
        "login": "slandelle",
        "id": 849197,
        "node_id": "MDQ6VXNlcjg0OTE5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/849197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/slandelle",
        "html_url": "https://github.com/slandelle",
        "followers_url": "https://api.github.com/users/slandelle/followers",
        "following_url": "https://api.github.com/users/slandelle/following{/other_user}",
        "gists_url": "https://api.github.com/users/slandelle/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/slandelle/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/slandelle/subscriptions",
        "organizations_url": "https://api.github.com/users/slandelle/orgs",
        "repos_url": "https://api.github.com/users/slandelle/repos",
        "events_url": "https://api.github.com/users/slandelle/events{/privacy}",
        "received_events_url": "https://api.github.com/users/slandelle/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "normanmaurer",
        "id": 439362,
        "node_id": "MDQ6VXNlcjQzOTM2Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/439362?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/normanmaurer",
        "html_url": "https://github.com/normanmaurer",
        "followers_url": "https://api.github.com/users/normanmaurer/followers",
        "following_url": "https://api.github.com/users/normanmaurer/following{/other_user}",
        "gists_url": "https://api.github.com/users/normanmaurer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/normanmaurer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/normanmaurer/subscriptions",
        "organizations_url": "https://api.github.com/users/normanmaurer/orgs",
        "repos_url": "https://api.github.com/users/normanmaurer/repos",
        "events_url": "https://api.github.com/users/normanmaurer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/normanmaurer/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "c85b770ac4d3d03af3b603af89c841ebf6c4d082",
            "url": "https://api.github.com/repos/netty/netty/commits/c85b770ac4d3d03af3b603af89c841ebf6c4d082",
            "html_url": "https://github.com/netty/netty/commit/c85b770ac4d3d03af3b603af89c841ebf6c4d082"
        }
    ],
    "stats": {
        "total": 3155,
        "additions": 1864,
        "deletions": 1291
    },
    "files": [
        {
            "sha": "0df3078705fbc48045f914287b7a641214463e9f",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/ClientCookieEncoder.java",
            "status": "modified",
            "additions": 9,
            "deletions": 51,
            "changes": 60,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FClientCookieEncoder.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FClientCookieEncoder.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FClientCookieEncoder.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -15,8 +15,6 @@\n  */\n package io.netty.handler.codec.http;\n \n-import static io.netty.handler.codec.http.CookieEncoderUtil.*;\n-\n /**\n  * A <a href=\"http://tools.ietf.org/html/rfc6265\">RFC6265</a> compliant cookie encoder to be used client side,\n  * so only name=value pairs are sent.\n@@ -34,6 +32,7 @@\n  *\n  * @see ClientCookieDecoder\n  */\n+@Deprecated\n public final class ClientCookieEncoder {\n \n     /**\n@@ -43,8 +42,9 @@ public final class ClientCookieEncoder {\n      * @param value the cookie value\n      * @return a Rfc6265 style Cookie header value\n      */\n+    @Deprecated\n     public static String encode(String name, String value) {\n-        return encode(new DefaultCookie(name, value));\n+        return io.netty.handler.codec.http.cookie.ClientCookieEncoder.LAX.encode(name, value);\n     }\n \n     /**\n@@ -53,14 +53,9 @@ public static String encode(String name, String value) {\n      * @param specified the cookie\n      * @return a Rfc6265 style Cookie header value\n      */\n+    @Deprecated\n     public static String encode(Cookie cookie) {\n-        if (cookie == null) {\n-            throw new NullPointerException(\"cookie\");\n-        }\n-\n-        StringBuilder buf = stringBuilder();\n-        encode(buf, cookie);\n-        return stripTrailingSeparator(buf);\n+        return io.netty.handler.codec.http.cookie.ClientCookieEncoder.LAX.encode(cookie);\n     }\n \n     /**\n@@ -69,24 +64,9 @@ public static String encode(Cookie cookie) {\n      * @param cookies some cookies\n      * @return a Rfc6265 style Cookie header value, null if no cookies are passed.\n      */\n+    @Deprecated\n     public static String encode(Cookie... cookies) {\n-        if (cookies == null) {\n-            throw new NullPointerException(\"cookies\");\n-        }\n-\n-        if (cookies.length == 0) {\n-            return null;\n-        }\n-\n-        StringBuilder buf = stringBuilder();\n-        for (Cookie c : cookies) {\n-            if (c == null) {\n-                break;\n-            }\n-\n-            encode(buf, c);\n-        }\n-        return stripTrailingSeparatorOrNull(buf);\n+        return io.netty.handler.codec.http.cookie.ClientCookieEncoder.LAX.encode(cookies);\n     }\n \n     /**\n@@ -95,31 +75,9 @@ public static String encode(Cookie... cookies) {\n      * @param cookies some cookies\n      * @return a Rfc6265 style Cookie header value, null if no cookies are passed.\n      */\n+    @Deprecated\n     public static String encode(Iterable<Cookie> cookies) {\n-        if (cookies == null) {\n-            throw new NullPointerException(\"cookies\");\n-        }\n-\n-        if (!cookies.iterator().hasNext()) {\n-            return null;\n-        }\n-\n-        StringBuilder buf = stringBuilder();\n-        for (Cookie c : cookies) {\n-            if (c == null) {\n-                break;\n-            }\n-\n-            encode(buf, c);\n-        }\n-        return stripTrailingSeparatorOrNull(buf);\n-    }\n-\n-    private static void encode(StringBuilder buf, Cookie c) {\n-        // rawValue > value > \"\"\n-        String value = c.rawValue() != null ? c.rawValue()\n-                : c.value() != null ? c.value() : \"\";\n-        addUnquoted(buf, c.name(), value);\n+        return io.netty.handler.codec.http.cookie.ClientCookieEncoder.LAX.encode(cookies);\n     }\n \n     private ClientCookieEncoder() {"
        },
        {
            "sha": "b1c73a2edfc112f7e2f2732b9d065d1d14eea538",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/Cookie.java",
            "status": "modified",
            "additions": 42,
            "deletions": 100,
            "changes": 142,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FCookie.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FCookie.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FCookie.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -20,97 +20,35 @@\n /**\n  * An interface defining an\n  * <a href=\"http://en.wikipedia.org/wiki/HTTP_cookie\">HTTP cookie</a>.\n+ * @deprecated Use {@link io.netty.handler.codec.http.cookie.Cookie} instead.\n  */\n-public interface Cookie extends Comparable<Cookie> {\n+@Deprecated\n+public interface Cookie extends io.netty.handler.codec.http.cookie.Cookie {\n \n     /**\n      * @deprecated Use {@link #name()} instead.\n      */\n     @Deprecated\n     String getName();\n \n-    /**\n-     * Returns the name of this {@link Cookie}.\n-     *\n-     * @return The name of this {@link Cookie}\n-     */\n-    String name();\n-\n     /**\n      * @deprecated Use {@link #value()} instead.\n      */\n     @Deprecated\n     String getValue();\n \n-    /**\n-     * Returns the value of this {@link Cookie}.\n-     *\n-     * @return The value of this {@link Cookie}\n-     */\n-    String value();\n-\n-    /**\n-     * Sets the value of this {@link Cookie}.\n-     *\n-     * @param value The value to set\n-     */\n-    void setValue(String value);\n-\n-    /**\n-     * Returns the raw value of this {@link Cookie},\n-     * as it was set in original Set-Cookie header.\n-     *\n-     * @return The raw value of this {@link Cookie}\n-     */\n-    String rawValue();\n-\n-    /**\n-     * Sets the raw value of this {@link Cookie}.\n-     *\n-     * @param rawValue The raw value to set\n-     */\n-    void setRawValue(String rawValue);\n-\n     /**\n      * @deprecated Use {@link #domain()} instead.\n      */\n     @Deprecated\n     String getDomain();\n \n-    /**\n-     * Returns the domain of this {@link Cookie}.\n-     *\n-     * @return The domain of this {@link Cookie}\n-     */\n-    String domain();\n-\n-    /**\n-     * Sets the domain of this {@link Cookie}.\n-     *\n-     * @param domain The domain to use\n-     */\n-    void setDomain(String domain);\n-\n     /**\n      * @deprecated Use {@link #path()} instead.\n      */\n     @Deprecated\n     String getPath();\n \n-    /**\n-     * Returns the path of this {@link Cookie}.\n-     *\n-     * @return The {@link Cookie}'s path\n-     */\n-    String path();\n-\n-    /**\n-     * Sets the path of this {@link Cookie}.\n-     *\n-     * @param path The path to use for this {@link Cookie}\n-     */\n-    void setPath(String path);\n-\n     /**\n      * @deprecated Use {@link #comment()} instead.\n      */\n@@ -121,14 +59,20 @@ public interface Cookie extends Comparable<Cookie> {\n      * Returns the comment of this {@link Cookie}.\n      *\n      * @return The comment of this {@link Cookie}\n+     *\n+     * @deprecated Not part of RFC6265\n      */\n+    @Deprecated\n     String comment();\n \n     /**\n      * Sets the comment of this {@link Cookie}.\n      *\n      * @param comment The comment to use\n+     *\n+     * @deprecated Not part of RFC6265\n      */\n+    @Deprecated\n     void setComment(String comment);\n \n     /**\n@@ -141,7 +85,10 @@ public interface Cookie extends Comparable<Cookie> {\n      * Returns the maximum age of this {@link Cookie} in seconds or {@link Long#MIN_VALUE} if unspecified\n      *\n      * @return The maximum age of this {@link Cookie}\n+     *\n+     * @deprecated Not part of RFC6265\n      */\n+    @Deprecated\n     long maxAge();\n \n     /**\n@@ -152,7 +99,10 @@ public interface Cookie extends Comparable<Cookie> {\n      * browser is closed.\n      *\n      * @param maxAge The maximum age of this {@link Cookie} in seconds\n+     *\n+     * @deprecated Not part of RFC6265\n      */\n+    @Deprecated\n     void setMaxAge(long maxAge);\n \n     /**\n@@ -165,50 +115,21 @@ public interface Cookie extends Comparable<Cookie> {\n      * Returns the version of this {@link Cookie}.\n      *\n      * @return The version of this {@link Cookie}\n+     *\n+     * @deprecated Not part of RFC6265\n      */\n+    @Deprecated\n     int version();\n \n     /**\n      * Sets the version of this {@link Cookie}.\n      *\n      * @param version The new version to use\n-     */\n-    void setVersion(int version);\n-\n-    /**\n-     * Checks to see if this {@link Cookie} is secure\n-     *\n-     * @return True if this {@link Cookie} is secure, otherwise false\n-     */\n-    boolean isSecure();\n-\n-    /**\n-     * Sets the security getStatus of this {@link Cookie}\n      *\n-     * @param secure True if this {@link Cookie} is to be secure, otherwise false\n+     * @deprecated Not part of RFC6265\n      */\n-    void setSecure(boolean secure);\n-\n-    /**\n-     * Checks to see if this {@link Cookie} can only be accessed via HTTP.\n-     * If this returns true, the {@link Cookie} cannot be accessed through\n-     * client side script - But only if the browser supports it.\n-     * For more information, please look <a href=\"http://www.owasp.org/index.php/HTTPOnly\">here</a>\n-     *\n-     * @return True if this {@link Cookie} is HTTP-only or false if it isn't\n-     */\n-    boolean isHttpOnly();\n-\n-    /**\n-     * Determines if this {@link Cookie} is HTTP only.\n-     * If set to true, this {@link Cookie} cannot be accessed by a client\n-     * side script. However, this works only if the browser supports it.\n-     * For for information, please look\n-     * <a href=\"http://www.owasp.org/index.php/HTTPOnly\">here</a>.\n-     *\n-     * @param httpOnly True if the {@link Cookie} is HTTP only, otherwise false.\n-     */\n-    void setHttpOnly(boolean httpOnly);\n+    @Deprecated\n+    void setVersion(int version);\n \n     /**\n      * @deprecated Use {@link #commentUrl()} instead.\n@@ -220,22 +141,31 @@ public interface Cookie extends Comparable<Cookie> {\n      * Returns the comment URL of this {@link Cookie}.\n      *\n      * @return The comment URL of this {@link Cookie}\n+     *\n+     * @deprecated Not part of RFC6265\n      */\n+    @Deprecated\n     String commentUrl();\n \n     /**\n      * Sets the comment URL of this {@link Cookie}.\n      *\n      * @param commentUrl The comment URL to use\n+     *\n+     * @deprecated Not part of RFC6265\n      */\n+    @Deprecated\n     void setCommentUrl(String commentUrl);\n \n     /**\n      * Checks to see if this {@link Cookie} is to be discarded by the browser\n      * at the end of the current session.\n      *\n      * @return True if this {@link Cookie} is to be discarded, otherwise false\n+     *\n+     * @deprecated Not part of RFC6265\n      */\n+    @Deprecated\n     boolean isDiscard();\n \n     /**\n@@ -244,7 +174,10 @@ public interface Cookie extends Comparable<Cookie> {\n      * at the end of the current session\n      *\n      * @param discard True if the {@link Cookie} is to be discarded\n+     *\n+     * @deprecated Not part of RFC6265\n      */\n+    @Deprecated\n     void setDiscard(boolean discard);\n \n     /**\n@@ -257,21 +190,30 @@ public interface Cookie extends Comparable<Cookie> {\n      * Returns the ports that this {@link Cookie} can be accessed on.\n      *\n      * @return The {@link Set} of ports that this {@link Cookie} can use\n+     *\n+     * @deprecated Not part of RFC6265\n      */\n+    @Deprecated\n     Set<Integer> ports();\n \n     /**\n      * Sets the ports that this {@link Cookie} can be accessed on.\n      *\n      * @param ports The ports that this {@link Cookie} can be accessed on\n+     *\n+     * @deprecated Not part of RFC6265\n      */\n+    @Deprecated\n     void setPorts(int... ports);\n \n     /**\n      * Sets the ports that this {@link Cookie} can be accessed on.\n      *\n      * @param ports The {@link Iterable} collection of ports that this\n      *              {@link Cookie} can be accessed on.\n+     *\n+     * @deprecated Not part of RFC6265\n      */\n+    @Deprecated\n     void setPorts(Iterable<Integer> ports);\n }"
        },
        {
            "sha": "b71b7ad1de7231c049d6c90200ff52c4555e1c7b",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/CookieDecoder.java",
            "status": "modified",
            "additions": 92,
            "deletions": 14,
            "changes": 106,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FCookieDecoder.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FCookieDecoder.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FCookieDecoder.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -15,7 +15,13 @@\n  */\n package io.netty.handler.codec.http;\n \n+import static io.netty.handler.codec.http.CookieUtil.firstInvalidCookieNameOctet;\n+import static io.netty.handler.codec.http.CookieUtil.firstInvalidCookieValueOctet;\n+import static io.netty.handler.codec.http.CookieUtil.unwrapValue;\n+import io.netty.handler.codec.http.cookie.CookieHeaderNames;\n import io.netty.util.internal.StringUtil;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n \n import java.text.ParseException;\n import java.util.ArrayList;\n@@ -25,7 +31,8 @@\n import java.util.TreeSet;\n \n /**\n- * @deprecated Use {@link ClientCookieDecoder} or {@link ServerCookieDecoder} instead.\n+ * @deprecated Use {@link io.netty.handler.codec.http.cookie.ClientCookieDecoder}\n+ * or {@link io.netty.handler.codec.http.cookie.ServerCookieDecoder} instead.\n  *\n  * Decodes an HTTP header value into {@link Cookie}s.  This decoder can decode\n  * the HTTP cookie version 0, 1, and 2.\n@@ -36,20 +43,46 @@\n  * Set&lt;{@link Cookie}&gt; cookies = {@link CookieDecoder}.decode(value);\n  * </pre>\n  *\n- * @see ClientCookieEncoder\n- * @see ServerCookieEncoder\n+ * @see io.netty.handler.codec.http.cookie.ClientCookieDecoder\n+ * @see io.netty.handler.codec.http.cookie.ServerCookieDecoder\n  */\n @Deprecated\n public final class CookieDecoder {\n \n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(getClass());\n+\n+    private static final CookieDecoder STRICT = new CookieDecoder(true);\n+\n+    private static final CookieDecoder LAX = new CookieDecoder(false);\n+\n+    private static final String COMMENT = \"Comment\";\n+\n+    private static final String COMMENTURL = \"CommentURL\";\n+\n+    private static final String DISCARD = \"Discard\";\n+\n+    private static final String PORT = \"Port\";\n+\n+    private static final String VERSION = \"Version\";\n+\n     private static final char COMMA = ',';\n \n+    private final boolean strict;\n+\n+    public static Set<Cookie> decode(String header) {\n+        return decode(header, true);\n+    }\n+\n+    public static Set<Cookie> decode(String header, boolean strict) {\n+        return (strict ? STRICT : LAX).doDecode(header);\n+    }\n+\n     /**\n      * Decodes the specified HTTP header value into {@link Cookie}s.\n      *\n      * @return the decoded {@link Cookie}s\n      */\n-    public static Set<Cookie> decode(String header) {\n+    private Set<Cookie> doDecode(String header) {\n         List<String> names = new ArrayList<String>(8);\n         List<String> values = new ArrayList<String>(8);\n         extractKeyValuePairs(header, names, values);\n@@ -63,7 +96,7 @@ public static Set<Cookie> decode(String header) {\n \n         // $Version is the only attribute that can appear before the actual\n         // cookie name-value pair.\n-        if (names.get(0).equalsIgnoreCase(CookieHeaderNames.VERSION)) {\n+        if (names.get(0).equalsIgnoreCase(VERSION)) {\n             try {\n                 version = Integer.parseInt(values.get(0));\n             } catch (NumberFormatException e) {\n@@ -87,7 +120,11 @@ public static Set<Cookie> decode(String header) {\n                 value = \"\";\n             }\n \n-            Cookie c = new DefaultCookie(name, value);\n+            Cookie c = initCookie(name, value);\n+\n+            if (c == null) {\n+                break;\n+            }\n \n             boolean discard = false;\n             boolean secure = false;\n@@ -103,15 +140,15 @@ public static Set<Cookie> decode(String header) {\n                 name = names.get(j);\n                 value = values.get(j);\n \n-                if (CookieHeaderNames.DISCARD.equalsIgnoreCase(name)) {\n+                if (DISCARD.equalsIgnoreCase(name)) {\n                     discard = true;\n                 } else if (CookieHeaderNames.SECURE.equalsIgnoreCase(name)) {\n                     secure = true;\n                 } else if (CookieHeaderNames.HTTPONLY.equalsIgnoreCase(name)) {\n                    httpOnly = true;\n-                } else if (CookieHeaderNames.COMMENT.equalsIgnoreCase(name)) {\n+                } else if (COMMENT.equalsIgnoreCase(name)) {\n                     comment = value;\n-                } else if (CookieHeaderNames.COMMENTURL.equalsIgnoreCase(name)) {\n+                } else if (COMMENTURL.equalsIgnoreCase(name)) {\n                     commentURL = value;\n                 } else if (CookieHeaderNames.DOMAIN.equalsIgnoreCase(name)) {\n                     domain = value;\n@@ -129,9 +166,9 @@ public static Set<Cookie> decode(String header) {\n                     }\n                 } else if (CookieHeaderNames.MAX_AGE.equalsIgnoreCase(name)) {\n                     maxAge = Integer.parseInt(value);\n-                } else if (CookieHeaderNames.VERSION.equalsIgnoreCase(name)) {\n+                } else if (VERSION.equalsIgnoreCase(name)) {\n                     version = Integer.parseInt(value);\n-                } else if (CookieHeaderNames.PORT.equalsIgnoreCase(name)) {\n+                } else if (PORT.equalsIgnoreCase(name)) {\n                     String[] portList = StringUtil.split(value, COMMA);\n                     for (String s1: portList) {\n                         try {\n@@ -168,7 +205,6 @@ public static Set<Cookie> decode(String header) {\n \n     private static void extractKeyValuePairs(\n             final String header, final List<String> names, final List<String> values) {\n-\n         final int headerLen  = header.length();\n         loop: for (int i = 0;;) {\n \n@@ -290,7 +326,49 @@ private static void extractKeyValuePairs(\n         }\n     }\n \n-    private CookieDecoder() {\n-        // Unused\n+    private CookieDecoder(boolean strict) {\n+        this.strict = strict;\n+    }\n+\n+    private DefaultCookie initCookie(String name, String value) {\n+        if (name == null || name.length() == 0) {\n+            logger.debug(\"Skipping cookie with null name\");\n+            return null;\n+        }\n+\n+        if (value == null) {\n+            logger.debug(\"Skipping cookie with null value\");\n+            return null;\n+        }\n+\n+        CharSequence unwrappedValue = unwrapValue(value);\n+        if (unwrappedValue == null) {\n+            logger.debug(\"Skipping cookie because starting quotes are not properly balanced in '{}'\",\n+                    unwrappedValue);\n+            return null;\n+        }\n+\n+        int invalidOctetPos;\n+        if (strict && (invalidOctetPos = firstInvalidCookieNameOctet(name)) >= 0) {\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"Skipping cookie because name '{}' contains invalid char '{}'\",\n+                        name, name.charAt(invalidOctetPos));\n+            }\n+            return null;\n+        }\n+\n+        final boolean wrap = unwrappedValue.length() != value.length();\n+\n+        if (strict && (invalidOctetPos = firstInvalidCookieValueOctet(unwrappedValue)) >= 0) {\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"Skipping cookie because value '{}' contains invalid char '{}'\",\n+                        unwrappedValue, unwrappedValue.charAt(invalidOctetPos));\n+            }\n+            return null;\n+        }\n+\n+        DefaultCookie cookie = new DefaultCookie(name, unwrappedValue.toString());\n+        cookie.setWrap(wrap);\n+        return cookie;\n     }\n }"
        },
        {
            "sha": "2155a96b41b18e9c2e33d7e714a3240662e65a75",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/CookieEncoderUtil.java",
            "status": "removed",
            "additions": 0,
            "deletions": 96,
            "changes": 96,
            "blob_url": "https://github.com/netty/netty/blob/c85b770ac4d3d03af3b603af89c841ebf6c4d082/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FCookieEncoderUtil.java",
            "raw_url": "https://github.com/netty/netty/raw/c85b770ac4d3d03af3b603af89c841ebf6c4d082/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FCookieEncoderUtil.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FCookieEncoderUtil.java?ref=c85b770ac4d3d03af3b603af89c841ebf6c4d082",
            "patch": "@@ -1,96 +0,0 @@\n-/*\n- * Copyright 2012 The Netty Project\n- *\n- * The Netty Project licenses this file to you under the Apache License,\n- * version 2.0 (the \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at:\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations\n- * under the License.\n- */\n-package io.netty.handler.codec.http;\n-\n-\n-import io.netty.util.internal.InternalThreadLocalMap;\n-\n-final class CookieEncoderUtil {\n-\n-    static StringBuilder stringBuilder() {\n-        return InternalThreadLocalMap.get().stringBuilder();\n-    }\n-\n-    /**\n-     * @param buf a buffer where some cookies were maybe encoded\n-     * @return the buffer String without the trailing separator, or null if no cookie was appended.\n-     */\n-    static String stripTrailingSeparatorOrNull(StringBuilder buf) {\n-        return buf.length() == 0 ? null : stripTrailingSeparator(buf);\n-    }\n-\n-    static String stripTrailingSeparator(StringBuilder buf) {\n-        if (buf.length() > 0) {\n-            buf.setLength(buf.length() - 2);\n-        }\n-        return buf.toString();\n-    }\n-\n-    static void add(StringBuilder sb, String name, String val) {\n-        if (val == null) {\n-            addQuoted(sb, name, \"\");\n-            return;\n-        }\n-\n-        for (int i = 0; i < val.length(); i ++) {\n-            char c = val.charAt(i);\n-            switch (c) {\n-            case '\\t': case ' ': case '\"': case '(':  case ')': case ',':\n-            case '/':  case ':': case ';': case '<':  case '=': case '>':\n-            case '?':  case '@': case '[': case '\\\\': case ']':\n-            case '{':  case '}':\n-                addQuoted(sb, name, val);\n-                return;\n-            }\n-        }\n-\n-        addUnquoted(sb, name, val);\n-    }\n-\n-    static void addUnquoted(StringBuilder sb, String name, String val) {\n-        sb.append(name);\n-        sb.append((char) HttpConstants.EQUALS);\n-        sb.append(val);\n-        sb.append((char) HttpConstants.SEMICOLON);\n-        sb.append((char) HttpConstants.SP);\n-    }\n-\n-    static void addQuoted(StringBuilder sb, String name, String val) {\n-        if (val == null) {\n-            val = \"\";\n-        }\n-\n-        sb.append(name);\n-        sb.append((char) HttpConstants.EQUALS);\n-        sb.append((char) HttpConstants.DOUBLE_QUOTE);\n-        sb.append(val.replace(\"\\\\\", \"\\\\\\\\\").replace(\"\\\"\", \"\\\\\\\"\"));\n-        sb.append((char) HttpConstants.DOUBLE_QUOTE);\n-        sb.append((char) HttpConstants.SEMICOLON);\n-        sb.append((char) HttpConstants.SP);\n-    }\n-\n-    static void add(StringBuilder sb, String name, long val) {\n-        sb.append(name);\n-        sb.append((char) HttpConstants.EQUALS);\n-        sb.append(val);\n-        sb.append((char) HttpConstants.SEMICOLON);\n-        sb.append((char) HttpConstants.SP);\n-    }\n-\n-    private CookieEncoderUtil() {\n-        // Unused\n-    }\n-}"
        },
        {
            "sha": "fdaae035fd3873b793bd21241d7a561a6c1a2abc",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/CookieUtil.java",
            "status": "added",
            "additions": 104,
            "deletions": 0,
            "changes": 104,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FCookieUtil.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FCookieUtil.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FCookieUtil.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2015 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http;\n+\n+import java.util.BitSet;\n+\n+/**\n+ * @deprecated Duplicate of package private ${@link io.netty.handler.codec.http.cookie.CookieUtil}\n+ */\n+@Deprecated\n+final class CookieUtil {\n+\n+    private static final BitSet VALID_COOKIE_VALUE_OCTETS = validCookieValueOctets();\n+\n+    private static final BitSet VALID_COOKIE_NAME_OCTETS = validCookieNameOctets(VALID_COOKIE_VALUE_OCTETS);\n+\n+    // US-ASCII characters excluding CTLs, whitespace, DQUOTE, comma, semicolon, and backslash\n+    private static BitSet validCookieValueOctets() {\n+        BitSet bits = new BitSet(8);\n+        for (int i = 35; i < 127; i++) {\n+            // US-ASCII characters excluding CTLs (%x00-1F / %x7F)\n+            bits.set(i);\n+        }\n+        bits.set('\"', false);  // exclude DQUOTE = %x22\n+        bits.set(',', false);  // exclude comma = %x2C\n+        bits.set(';', false);  // exclude semicolon = %x3B\n+        bits.set('\\\\', false); // exclude backslash = %x5C\n+        return bits;\n+    }\n+\n+    //    token          = 1*<any CHAR except CTLs or separators>\n+    //    separators     = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n+    //                   | \",\" | \";\" | \":\" | \"\\\" | <\">\n+    //                   | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n+    //                   | \"{\" | \"}\" | SP | HT\n+    private static BitSet validCookieNameOctets(BitSet validCookieValueOctets) {\n+        BitSet bits = new BitSet(8);\n+        bits.or(validCookieValueOctets);\n+        bits.set('(', false);\n+        bits.set(')', false);\n+        bits.set('<', false);\n+        bits.set('>', false);\n+        bits.set('@', false);\n+        bits.set(':', false);\n+        bits.set('/', false);\n+        bits.set('[', false);\n+        bits.set(']', false);\n+        bits.set('?', false);\n+        bits.set('=', false);\n+        bits.set('{', false);\n+        bits.set('}', false);\n+        bits.set(' ', false);\n+        bits.set('\\t', false);\n+        return bits;\n+    }\n+\n+    static int firstInvalidCookieNameOctet(CharSequence cs) {\n+        return firstInvalidOctet(cs, VALID_COOKIE_NAME_OCTETS);\n+    }\n+\n+    static int firstInvalidCookieValueOctet(CharSequence cs) {\n+        return firstInvalidOctet(cs, VALID_COOKIE_VALUE_OCTETS);\n+    }\n+\n+    static int firstInvalidOctet(CharSequence cs, BitSet bits) {\n+        for (int i = 0; i < cs.length(); i++) {\n+            char c = cs.charAt(i);\n+            if (!bits.get(c)) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    static CharSequence unwrapValue(CharSequence cs) {\n+        final int len = cs.length();\n+        if (len > 0 && cs.charAt(0) == '\"') {\n+            if (len >= 2 && cs.charAt(len - 1) == '\"') {\n+                // properly balanced\n+                return len == 2 ? \"\" : cs.subSequence(1, len - 1);\n+            } else {\n+                return null;\n+            }\n+        }\n+        return cs;\n+    }\n+\n+    private CookieUtil() {\n+        // Unused\n+    }\n+}"
        },
        {
            "sha": "902ba16a2d894a8b167c089a264cd1da776bf1b9",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java",
            "status": "modified",
            "additions": 16,
            "deletions": 249,
            "changes": 265,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FDefaultCookie.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FDefaultCookie.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FDefaultCookie.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -19,63 +19,26 @@\n import java.util.Set;\n import java.util.TreeSet;\n \n-\n-\n /**\n  * The default {@link Cookie} implementation.\n+ *\n+ * @deprecated Use {@link io.netty.handler.codec.http.cookie.DefaultCookie} instead.\n  */\n-public class DefaultCookie implements Cookie {\n+@Deprecated\n+public class DefaultCookie extends io.netty.handler.codec.http.cookie.DefaultCookie implements Cookie {\n \n-    private final String name;\n-    private String value;\n-    private String rawValue;\n-    private String domain;\n-    private String path;\n     private String comment;\n     private String commentUrl;\n     private boolean discard;\n     private Set<Integer> ports = Collections.emptySet();\n     private Set<Integer> unmodifiablePorts = ports;\n-    private long maxAge = Long.MIN_VALUE;\n     private int version;\n-    private boolean secure;\n-    private boolean httpOnly;\n \n     /**\n      * Creates a new cookie with the specified name and value.\n      */\n     public DefaultCookie(String name, String value) {\n-        if (name == null) {\n-            throw new NullPointerException(\"name\");\n-        }\n-        name = name.trim();\n-        if (name.isEmpty()) {\n-            throw new IllegalArgumentException(\"empty name\");\n-        }\n-\n-        for (int i = 0; i < name.length(); i ++) {\n-            char c = name.charAt(i);\n-            if (c > 127) {\n-                throw new IllegalArgumentException(\n-                        \"name contains non-ascii character: \" + name);\n-            }\n-\n-            // Check prohibited characters.\n-            switch (c) {\n-            case '\\t': case '\\n': case 0x0b: case '\\f': case '\\r':\n-            case ' ':  case ',':  case ';':  case '=':\n-                throw new IllegalArgumentException(\n-                        \"name contains one of the following prohibited characters: \" +\n-                        \"=,; \\\\t\\\\r\\\\n\\\\v\\\\f: \" + name);\n-            }\n-        }\n-\n-        if (name.charAt(0) == '$') {\n-            throw new IllegalArgumentException(\"name starting with '$' not allowed: \" + name);\n-        }\n-\n-        this.name = name;\n-        setValue(value);\n+        super(name, value);\n     }\n \n     @Override\n@@ -84,87 +47,38 @@ public String getName() {\n         return name();\n     }\n \n-    @Override\n-    public String name() {\n-        return name;\n-    }\n-\n     @Override\n     @Deprecated\n     public String getValue() {\n         return value();\n     }\n \n-    @Override\n-    public String value() {\n-        return value;\n-    }\n-\n-    @Override\n-    public void setValue(String value) {\n-        if (value == null) {\n-            throw new NullPointerException(\"value\");\n-        }\n-        this.value = value;\n-    }\n-\n-    @Override\n-    public String rawValue() {\n-        return rawValue;\n-    }\n-\n-    @Override\n-    public void setRawValue(String rawValue) {\n-        if (value == null) {\n-            throw new NullPointerException(\"rawValue\");\n-        }\n-        this.rawValue = rawValue;\n-    }\n-\n     @Override\n     @Deprecated\n     public String getDomain() {\n         return domain();\n     }\n \n-    @Override\n-    public String domain() {\n-        return domain;\n-    }\n-\n-    @Override\n-    public void setDomain(String domain) {\n-        this.domain = validateValue(\"domain\", domain);\n-    }\n-\n     @Override\n     @Deprecated\n     public String getPath() {\n         return path();\n     }\n \n-    @Override\n-    public String path() {\n-        return path;\n-    }\n-\n-    @Override\n-    public void setPath(String path) {\n-        this.path = validateValue(\"path\", path);\n-    }\n-\n     @Override\n     @Deprecated\n     public String getComment() {\n         return comment();\n     }\n \n     @Override\n+    @Deprecated\n     public String comment() {\n         return comment;\n     }\n \n     @Override\n+    @Deprecated\n     public void setComment(String comment) {\n         this.comment = validateValue(\"comment\", comment);\n     }\n@@ -176,21 +90,25 @@ public String getCommentUrl() {\n     }\n \n     @Override\n+    @Deprecated\n     public String commentUrl() {\n         return commentUrl;\n     }\n \n     @Override\n+    @Deprecated\n     public void setCommentUrl(String commentUrl) {\n         this.commentUrl = validateValue(\"commentUrl\", commentUrl);\n     }\n \n     @Override\n+    @Deprecated\n     public boolean isDiscard() {\n         return discard;\n     }\n \n     @Override\n+    @Deprecated\n     public void setDiscard(boolean discard) {\n         this.discard = discard;\n     }\n@@ -202,6 +120,7 @@ public Set<Integer> getPorts() {\n     }\n \n     @Override\n+    @Deprecated\n     public Set<Integer> ports() {\n         if (unmodifiablePorts == null) {\n             unmodifiablePorts = Collections.unmodifiableSet(ports);\n@@ -210,6 +129,7 @@ public Set<Integer> ports() {\n     }\n \n     @Override\n+    @Deprecated\n     public void setPorts(int... ports) {\n         if (ports == null) {\n             throw new NullPointerException(\"ports\");\n@@ -232,6 +152,7 @@ public void setPorts(int... ports) {\n     }\n \n     @Override\n+    @Deprecated\n     public void setPorts(Iterable<Integer> ports) {\n         Set<Integer> newPorts = new TreeSet<Integer>();\n         for (int p: ports) {\n@@ -254,175 +175,21 @@ public long getMaxAge() {\n         return maxAge();\n     }\n \n-    @Override\n-    public long maxAge() {\n-        return maxAge;\n-    }\n-\n-    @Override\n-    public void setMaxAge(long maxAge) {\n-        this.maxAge = maxAge;\n-    }\n-\n     @Override\n     @Deprecated\n     public int getVersion() {\n         return version();\n     }\n \n     @Override\n+    @Deprecated\n     public int version() {\n         return version;\n     }\n \n     @Override\n+    @Deprecated\n     public void setVersion(int version) {\n         this.version = version;\n     }\n-\n-    @Override\n-    public boolean isSecure() {\n-        return secure;\n-    }\n-\n-    @Override\n-    public void setSecure(boolean secure) {\n-        this.secure = secure;\n-    }\n-\n-    @Override\n-    public boolean isHttpOnly() {\n-        return httpOnly;\n-    }\n-\n-    @Override\n-    public void setHttpOnly(boolean httpOnly) {\n-        this.httpOnly = httpOnly;\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return name().hashCode();\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (!(o instanceof Cookie)) {\n-            return false;\n-        }\n-\n-        Cookie that = (Cookie) o;\n-        if (!name().equalsIgnoreCase(that.name())) {\n-            return false;\n-        }\n-\n-        if (path() == null) {\n-            if (that.path() != null) {\n-                return false;\n-            }\n-        } else if (that.path() == null) {\n-            return false;\n-        } else if (!path().equals(that.path())) {\n-            return false;\n-        }\n-\n-        if (domain() == null) {\n-            if (that.domain() != null) {\n-                return false;\n-            }\n-        } else if (that.domain() == null) {\n-            return false;\n-        } else {\n-            return domain().equalsIgnoreCase(that.domain());\n-        }\n-\n-        return true;\n-    }\n-\n-    @Override\n-    public int compareTo(Cookie c) {\n-        int v;\n-        v = name().compareToIgnoreCase(c.name());\n-        if (v != 0) {\n-            return v;\n-        }\n-\n-        if (path() == null) {\n-            if (c.path() != null) {\n-                return -1;\n-            }\n-        } else if (c.path() == null) {\n-            return 1;\n-        } else {\n-            v = path().compareTo(c.path());\n-            if (v != 0) {\n-                return v;\n-            }\n-        }\n-\n-        if (domain() == null) {\n-            if (c.domain() != null) {\n-                return -1;\n-            }\n-        } else if (c.domain() == null) {\n-            return 1;\n-        } else {\n-            v = domain().compareToIgnoreCase(c.domain());\n-            return v;\n-        }\n-\n-        return 0;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        StringBuilder buf = new StringBuilder()\n-            .append(name())\n-            .append('=')\n-            .append(value());\n-        if (domain() != null) {\n-            buf.append(\", domain=\")\n-               .append(domain());\n-        }\n-        if (path() != null) {\n-            buf.append(\", path=\")\n-               .append(path());\n-        }\n-        if (comment() != null) {\n-            buf.append(\", comment=\")\n-               .append(comment());\n-        }\n-        if (maxAge() >= 0) {\n-            buf.append(\", maxAge=\")\n-               .append(maxAge())\n-               .append('s');\n-        }\n-        if (isSecure()) {\n-            buf.append(\", secure\");\n-        }\n-        if (isHttpOnly()) {\n-            buf.append(\", HTTPOnly\");\n-        }\n-        return buf.toString();\n-    }\n-\n-    private static String validateValue(String name, String value) {\n-        if (value == null) {\n-            return null;\n-        }\n-        value = value.trim();\n-        if (value.isEmpty()) {\n-            return null;\n-        }\n-        for (int i = 0; i < value.length(); i ++) {\n-            char c = value.charAt(i);\n-            switch (c) {\n-            case '\\r': case '\\n': case '\\f': case 0x0b: case ';':\n-                throw new IllegalArgumentException(\n-                        name + \" contains one of the following prohibited characters: \" +\n-                        \";\\\\r\\\\n\\\\f\\\\v (\" + value + ')');\n-            }\n-        }\n-        return value;\n-    }\n }"
        },
        {
            "sha": "a089a1856aee7fc34d1bb6f53c89cb7a74374579",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaderDateFormat.java",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FHttpHeaderDateFormat.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FHttpHeaderDateFormat.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FHttpHeaderDateFormat.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -33,7 +33,7 @@\n  * <li>Sun Nov  6 08:49:37 1994: obsolete specification</li>\n  * </ul>\n  */\n-final class HttpHeaderDateFormat extends SimpleDateFormat {\n+public final class HttpHeaderDateFormat extends SimpleDateFormat {\n     private static final long serialVersionUID = -925286159755905325L;\n \n     private final SimpleDateFormat format1 = new HttpHeaderDateFormatObsolete1();\n@@ -47,7 +47,7 @@ protected HttpHeaderDateFormat initialValue() {\n                 }\n             };\n \n-    static HttpHeaderDateFormat get() {\n+    public static HttpHeaderDateFormat get() {\n         return dateFormatThreadLocal.get();\n     }\n "
        },
        {
            "sha": "775926bd92f5d2462f9fd141f2f0da231af6fd03",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/HttpRequest.java",
            "status": "modified",
            "additions": 11,
            "deletions": 8,
            "changes": 19,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FHttpRequest.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FHttpRequest.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FHttpRequest.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -15,22 +15,25 @@\n  */\n package io.netty.handler.codec.http;\n \n-\n /**\n  * An HTTP request.\n  *\n  * <h3>Accessing Query Parameters and Cookie</h3>\n  * <p>\n  * Unlike the Servlet API, a query string is constructed and decomposed by\n- * {@link QueryStringEncoder} and {@link QueryStringDecoder}.  {@link Cookie}\n- * support is also provided separately via {@link ClientCookieDecoder}, {@link ServerCookieDecoder},\n- * {@link ClientCookieEncoder}, and {@link @ServerCookieEncoder}.\n+ * {@link QueryStringEncoder} and {@link QueryStringDecoder}.\n+ *\n+ * {@link io.netty.handler.codec.http.cookie.Cookie} support is also provided\n+ * separately via {@link io.netty.handler.codec.http.cookie.ServerCookieDecoder},\n+ * {@link io.netty.handler.codec.http.cookie.ClientCookieDecoder},\n+ * {@link io.netty.handler.codec.http.cookie.ServerCookieEncoder},\n+ * and {@link @io.netty.handler.codec.http.cookie.ClientCookieEncoder}.\n  *\n  * @see HttpResponse\n- * @see ClientCookieEncoder\n- * @see ServerCookieEncoder\n- * @see ClientCookieDecoder\n- * @see ServerCookieDecoder\n+ * @see io.netty.handler.codec.http.cookie.ServerCookieDecoder\n+ * @see io.netty.handler.codec.http.cookie.ClientCookieDecoder\n+ * @see io.netty.handler.codec.http.cookie.ServerCookieEncoder\n+ * @see io.netty.handler.codec.http.cookie.ClientCookieEncoder\n  */\n public interface HttpRequest extends HttpMessage {\n "
        },
        {
            "sha": "bcfd2f0309256c9aab9b8b65b46240d6f0803894",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/HttpResponse.java",
            "status": "modified",
            "additions": 9,
            "deletions": 7,
            "changes": 16,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FHttpResponse.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FHttpResponse.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FHttpResponse.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -15,20 +15,22 @@\n  */\n package io.netty.handler.codec.http;\n \n-\n /**\n  * An HTTP response.\n  *\n  * <h3>Accessing Cookies</h3>\n  * <p>\n- * Unlike the Servlet API, {@link Cookie} support is provided separately via {@link ClientCookieDecoder},\n- * {@link ServerCookieDecoder}, {@link ClientCookieEncoder}, and {@link @ServerCookieEncoder}.\n+ * Unlike the Servlet API, {@link io.netty.handler.codec.http.cookie.Cookie} support is provided\n+ * separately via {@link io.netty.handler.codec.http.cookie.ServerCookieDecoder},\n+ * {@link io.netty.handler.codec.http.cookie.ClientCookieDecoder},\n+ * {@link io.netty.handler.codec.http.cookie.ServerCookieEncoder},\n+ * and {@link @io.netty.handler.codec.http.cookie.ClientCookieEncoder}.\n  *\n  * @see HttpRequest\n- * @see ClientCookieEncoder\n- * @see ServerCookieEncoder\n- * @see ClientCookieDecoder\n- * @see ServerCookieDecoder\n+ * @see io.netty.handler.codec.http.cookie.ServerCookieDecoder\n+ * @see io.netty.handler.codec.http.cookie.ClientCookieDecoder\n+ * @see io.netty.handler.codec.http.cookie.ServerCookieEncoder\n+ * @see io.netty.handler.codec.http.cookie.ClientCookieEncoder\n  */\n public interface HttpResponse extends HttpMessage {\n "
        },
        {
            "sha": "d5361da4c4c080fee1730ce2f60eda9fe2ed654e",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/ServerCookieDecoder.java",
            "status": "removed",
            "additions": 0,
            "deletions": 182,
            "changes": 182,
            "blob_url": "https://github.com/netty/netty/blob/c85b770ac4d3d03af3b603af89c841ebf6c4d082/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FServerCookieDecoder.java",
            "raw_url": "https://github.com/netty/netty/raw/c85b770ac4d3d03af3b603af89c841ebf6c4d082/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FServerCookieDecoder.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FServerCookieDecoder.java?ref=c85b770ac4d3d03af3b603af89c841ebf6c4d082",
            "patch": "@@ -1,182 +0,0 @@\n-/*\n- * Copyright 2014 The Netty Project\n- *\n- * The Netty Project licenses this file to you under the Apache License,\n- * version 2.0 (the \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at:\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations\n- * under the License.\n- */\n-package io.netty.handler.codec.http;\n-\n-import java.util.Collections;\n-import java.util.Set;\n-import java.util.TreeSet;\n-\n-import static io.netty.handler.codec.http.CookieEncoderUtil.*;\n-\n-/**\n- * A <a href=\"http://tools.ietf.org/html/rfc6265\">RFC6265</a> compliant cookie decoder to be used server side.\n- *\n- * Only name and value fields are expected, so old fields are not populated (path, domain, etc).\n- *\n- * Old <a href=\"http://tools.ietf.org/html/rfc2965\">RFC2965</a> cookies are still supported,\n- * old fields will simply be ignored.\n- *\n- * @see ServerCookieEncoder\n- */\n-public final class ServerCookieDecoder {\n-\n-    /**\n-     * Decodes the specified Set-Cookie HTTP header value into a {@link Cookie}.\n-     *\n-     * @return the decoded {@link Cookie}\n-     */\n-    public static Set<Cookie> decode(String header) {\n-\n-        if (header == null) {\n-            throw new NullPointerException(\"header\");\n-        }\n-\n-        final int headerLen = header.length();\n-\n-        if (headerLen == 0) {\n-            return Collections.emptySet();\n-        }\n-\n-        Set<Cookie> cookies = new TreeSet<Cookie>();\n-\n-        int i = 0;\n-\n-        boolean rfc2965Style = false;\n-        if (header.regionMatches(true, 0, \"$Version\", 0, 8)) {\n-            // RFC 2965 style cookie, move to after version value\n-            i = header.indexOf(';') + 1;\n-            rfc2965Style = true;\n-        }\n-\n-        loop: for (;;) {\n-\n-            // Skip spaces and separators.\n-            for (;;) {\n-                if (i == headerLen) {\n-                    break loop;\n-                }\n-                char c = header.charAt(i);\n-                if (c == '\\t' || c == '\\n' || c == 0x0b || c == '\\f'\n-                        || c == '\\r' || c == ' ' || c == ',' || c == ';') {\n-                    i++;\n-                    continue;\n-                }\n-                break;\n-            }\n-\n-            int newNameStart = i;\n-            int newNameEnd = i;\n-            String value;\n-\n-            if (i == headerLen) {\n-                value = null;\n-            } else {\n-                keyValLoop: for (;;) {\n-\n-                    char curChar = header.charAt(i);\n-                    if (curChar == ';') {\n-                        // NAME; (no value till ';')\n-                        newNameEnd = i;\n-                        value = null;\n-                        break keyValLoop;\n-                    } else if (curChar == '=') {\n-                        // NAME=VALUE\n-                        newNameEnd = i;\n-                        i++;\n-                        if (i == headerLen) {\n-                            // NAME= (empty value, i.e. nothing after '=')\n-                            value = \"\";\n-                            break keyValLoop;\n-                        }\n-\n-                        int newValueStart = i;\n-                        char c = header.charAt(i);\n-                        if (c == '\"') {\n-                            // NAME=\"VALUE\"\n-                            StringBuilder newValueBuf = stringBuilder();\n-\n-                            final char q = c;\n-                            boolean hadBackslash = false;\n-                            i++;\n-                            for (;;) {\n-                                if (i == headerLen) {\n-                                    value = newValueBuf.toString();\n-                                    break keyValLoop;\n-                                }\n-                                if (hadBackslash) {\n-                                    hadBackslash = false;\n-                                    c = header.charAt(i++);\n-                                    if (c == '\\\\' || c == '\"') {\n-                                        // Escape last backslash.\n-                                        newValueBuf.setCharAt(newValueBuf.length() - 1, c);\n-                                    } else {\n-                                        // Do not escape last backslash.\n-                                        newValueBuf.append(c);\n-                                    }\n-                                } else {\n-                                    c = header.charAt(i++);\n-                                    if (c == q) {\n-                                        value = newValueBuf.toString();\n-                                        break keyValLoop;\n-                                    }\n-                                    newValueBuf.append(c);\n-                                    if (c == '\\\\') {\n-                                        hadBackslash = true;\n-                                    }\n-                                }\n-                            }\n-                        } else {\n-                            // NAME=VALUE;\n-                            int semiPos = header.indexOf(';', i);\n-                            if (semiPos > 0) {\n-                                value = header.substring(newValueStart, semiPos);\n-                                i = semiPos;\n-                            } else {\n-                                value = header.substring(newValueStart);\n-                                i = headerLen;\n-                            }\n-                        }\n-                        break keyValLoop;\n-                    } else {\n-                        i++;\n-                    }\n-\n-                    if (i == headerLen) {\n-                        // NAME (no value till the end of string)\n-                        newNameEnd = headerLen;\n-                        value = null;\n-                        break;\n-                    }\n-                }\n-            }\n-\n-            if (!rfc2965Style || (!header.regionMatches(newNameStart, \"$Path\", 0, \"$Path\".length()) &&\n-                    !header.regionMatches(newNameStart, \"$Domain\", 0, \"$Domain\".length()) &&\n-                    !header.regionMatches(newNameStart, \"$Port\", 0, \"$Port\".length()))) {\n-\n-                // skip obsolete RFC2965 fields\n-                String name = header.substring(newNameStart, newNameEnd);\n-                cookies.add(new DefaultCookie(name, value));\n-            }\n-        }\n-\n-        return cookies;\n-    }\n-\n-    private ServerCookieDecoder() {\n-        // unused\n-    }\n-}"
        },
        {
            "sha": "1f58f45f12afa2db60e43d05384f99b1f4889299",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/ServerCookieEncoder.java",
            "status": "modified",
            "additions": 13,
            "deletions": 87,
            "changes": 100,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FServerCookieEncoder.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FServerCookieEncoder.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FServerCookieEncoder.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -15,12 +15,7 @@\n  */\n package io.netty.handler.codec.http;\n \n-import static io.netty.handler.codec.http.CookieEncoderUtil.*;\n-\n-import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Date;\n import java.util.List;\n \n /**\n@@ -38,7 +33,10 @@\n  * </pre>\n  *\n  * @see ServerCookieDecoder\n+ *\n+ * @deprecated Use {@link io.netty.handler.codec.http.cookie.ServerCookieEncoder} instead\n  */\n+@Deprecated\n public final class ServerCookieEncoder {\n \n     /**\n@@ -48,8 +46,9 @@ public final class ServerCookieEncoder {\n      * @param value the cookie value\n      * @return a single Set-Cookie header value\n      */\n+    @Deprecated\n     public static String encode(String name, String value) {\n-        return encode(new DefaultCookie(name, value));\n+        return io.netty.handler.codec.http.cookie.ServerCookieEncoder.LAX.encode(name, value);\n     }\n \n     /**\n@@ -58,40 +57,9 @@ public static String encode(String name, String value) {\n      * @param cookie the cookie\n      * @return a single Set-Cookie header value\n      */\n+    @Deprecated\n     public static String encode(Cookie cookie) {\n-        if (cookie == null) {\n-            throw new NullPointerException(\"cookie\");\n-        }\n-\n-        StringBuilder buf = stringBuilder();\n-\n-        addUnquoted(buf, cookie.name(), cookie.value());\n-\n-        if (cookie.maxAge() != Long.MIN_VALUE) {\n-            add(buf, CookieHeaderNames.MAX_AGE, cookie.maxAge());\n-            Date expires = new Date(cookie.maxAge() * 1000 + System.currentTimeMillis());\n-            addUnquoted(buf, CookieHeaderNames.EXPIRES, HttpHeaderDateFormat.get().format(expires));\n-        }\n-\n-        if (cookie.path() != null) {\n-            addUnquoted(buf, CookieHeaderNames.PATH, cookie.path());\n-        }\n-\n-        if (cookie.domain() != null) {\n-            addUnquoted(buf, CookieHeaderNames.DOMAIN, cookie.domain());\n-        }\n-        if (cookie.isSecure()) {\n-            buf.append(CookieHeaderNames.SECURE);\n-            buf.append((char) HttpConstants.SEMICOLON);\n-            buf.append((char) HttpConstants.SP);\n-        }\n-        if (cookie.isHttpOnly()) {\n-            buf.append(CookieHeaderNames.HTTPONLY);\n-            buf.append((char) HttpConstants.SEMICOLON);\n-            buf.append((char) HttpConstants.SP);\n-        }\n-\n-        return stripTrailingSeparator(buf);\n+        return io.netty.handler.codec.http.cookie.ServerCookieEncoder.LAX.encode(cookie);\n     }\n \n     /**\n@@ -100,23 +68,9 @@ public static String encode(Cookie cookie) {\n      * @param cookies a bunch of cookies\n      * @return the corresponding bunch of Set-Cookie headers\n      */\n+    @Deprecated\n     public static List<String> encode(Cookie... cookies) {\n-        if (cookies == null) {\n-            throw new NullPointerException(\"cookies\");\n-        }\n-\n-        if (cookies.length == 0) {\n-            return Collections.emptyList();\n-        }\n-\n-        List<String> encoded = new ArrayList<String>(cookies.length);\n-        for (Cookie c : cookies) {\n-            if (c == null) {\n-                break;\n-            }\n-            encoded.add(encode(c));\n-        }\n-        return encoded;\n+        return io.netty.handler.codec.http.cookie.ServerCookieEncoder.LAX.encode(cookies);\n     }\n \n     /**\n@@ -125,23 +79,9 @@ public static List<String> encode(Cookie... cookies) {\n      * @param cookies a bunch of cookies\n      * @return the corresponding bunch of Set-Cookie headers\n      */\n+    @Deprecated\n     public static List<String> encode(Collection<Cookie> cookies) {\n-        if (cookies == null) {\n-            throw new NullPointerException(\"cookies\");\n-        }\n-\n-        if (cookies.isEmpty()) {\n-            return Collections.emptyList();\n-        }\n-\n-        List<String> encoded = new ArrayList<String>(cookies.size());\n-        for (Cookie c : cookies) {\n-            if (c == null) {\n-                break;\n-            }\n-            encoded.add(encode(c));\n-        }\n-        return encoded;\n+        return io.netty.handler.codec.http.cookie.ServerCookieEncoder.LAX.encode(cookies);\n     }\n \n     /**\n@@ -150,23 +90,9 @@ public static List<String> encode(Collection<Cookie> cookies) {\n      * @param cookies a bunch of cookies\n      * @return the corresponding bunch of Set-Cookie headers\n      */\n+    @Deprecated\n     public static List<String> encode(Iterable<Cookie> cookies) {\n-        if (cookies == null) {\n-            throw new NullPointerException(\"cookies\");\n-        }\n-\n-        if (!cookies.iterator().hasNext()) {\n-            return Collections.emptyList();\n-        }\n-\n-        List<String> encoded = new ArrayList<String>();\n-        for (Cookie c : cookies) {\n-            if (c == null) {\n-                break;\n-            }\n-            encoded.add(encode(c));\n-        }\n-        return encoded;\n+        return io.netty.handler.codec.http.cookie.ServerCookieEncoder.LAX.encode(cookies);\n     }\n \n     private ServerCookieEncoder() {"
        },
        {
            "sha": "168b4a4aeeaecb35196b106c0b7fd5a612a5bf67",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/cookie/ClientCookieDecoder.java",
            "status": "renamed",
            "additions": 67,
            "deletions": 113,
            "changes": 180,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FClientCookieDecoder.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FClientCookieDecoder.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FClientCookieDecoder.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2014 The Netty Project\n+ * Copyright 2015 The Netty Project\n  *\n  * The Netty Project licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n@@ -13,35 +13,47 @@\n  * License for the specific language governing permissions and limitations\n  * under the License.\n  */\n-package io.netty.handler.codec.http;\n+package io.netty.handler.codec.http.cookie;\n+\n+import static io.netty.util.internal.ObjectUtil.checkNotNull;\n+\n+import io.netty.handler.codec.http.HttpHeaderDateFormat;\n \n import java.text.ParsePosition;\n import java.util.Date;\n \n-import static io.netty.handler.codec.http.CookieEncoderUtil.*;\n-\n /**\n  * A <a href=\"http://tools.ietf.org/html/rfc6265\">RFC6265</a> compliant cookie decoder to be used client side.\n  *\n- * It will store the raw value in {@link Cookie#setRawValue(String)} so it can be\n+ * It will store the way the raw value was wrapped in {@link Cookie#setWrap(boolean)} so it can be\n  * eventually sent back to the Origin server as is.\n  *\n  * @see ClientCookieEncoder\n  */\n-public final class ClientCookieDecoder {\n+public final class ClientCookieDecoder extends CookieDecoder {\n+\n+    /**\n+     * Strict encoder that validates that name and value chars are in the valid scope\n+     * defined in RFC6265\n+     */\n+    public static final ClientCookieDecoder STRICT = new ClientCookieDecoder(true);\n+\n+    /**\n+     * Lax instance that doesn't validate name and value\n+     */\n+    public static final ClientCookieDecoder LAX = new ClientCookieDecoder(false);\n+\n+    private ClientCookieDecoder(boolean strict) {\n+        super(strict);\n+    }\n \n     /**\n      * Decodes the specified Set-Cookie HTTP header value into a {@link Cookie}.\n      *\n      * @return the decoded {@link Cookie}\n      */\n-    public static Cookie decode(String header) {\n-\n-        if (header == null) {\n-            throw new NullPointerException(\"header\");\n-        }\n-\n-        final int headerLen = header.length();\n+    public Cookie decode(String header) {\n+        final int headerLen = checkNotNull(header, \"header\").length();\n \n         if (headerLen == 0) {\n             return null;\n@@ -70,129 +82,84 @@ public static Cookie decode(String header) {\n                 break;\n             }\n \n-            int newNameStart = i;\n-            int newNameEnd = i;\n-            String value, rawValue;\n+            int nameBegin = i;\n+            int nameEnd = i;\n+            int valueBegin = -1;\n+            int valueEnd = -1;\n \n-            if (i == headerLen) {\n-                value = rawValue = null;\n-            } else {\n+            if (i != headerLen) {\n                 keyValLoop: for (;;) {\n \n                     char curChar = header.charAt(i);\n                     if (curChar == ';') {\n                         // NAME; (no value till ';')\n-                        newNameEnd = i;\n-                        value = rawValue = null;\n+                        nameEnd = i;\n+                        valueBegin = valueEnd = -1;\n                         break keyValLoop;\n+\n                     } else if (curChar == '=') {\n                         // NAME=VALUE\n-                        newNameEnd = i;\n+                        nameEnd = i;\n                         i++;\n                         if (i == headerLen) {\n                             // NAME= (empty value, i.e. nothing after '=')\n-                            value = rawValue = \"\";\n+                            valueBegin = valueEnd = 0;\n                             break keyValLoop;\n                         }\n \n-                        int newValueStart = i;\n-                        char c = header.charAt(i);\n-                        if (c == '\"') {\n-                            // NAME=\"VALUE\"\n-                            StringBuilder newValueBuf = stringBuilder();\n-\n-                            int rawValueStart = i;\n-                            int rawValueEnd = i;\n-\n-                            final char q = c;\n-                            boolean hadBackslash = false;\n-                            i++;\n-                            for (;;) {\n-                                if (i == headerLen) {\n-                                    value = newValueBuf.toString();\n-                                    // only need to compute raw value for cookie\n-                                    // value which is in first position\n-                                    rawValue = header.substring(rawValueStart, rawValueEnd);\n-                                    break keyValLoop;\n-                                }\n-                                if (hadBackslash) {\n-                                    hadBackslash = false;\n-                                    c = header.charAt(i++);\n-                                    rawValueEnd = i;\n-                                    if (c == '\\\\' || c == '\"') {\n-                                        newValueBuf.setCharAt(newValueBuf.length() - 1, c);\n-                                    } else {\n-                                        // Do not escape last backslash.\n-                                        newValueBuf.append(c);\n-                                    }\n-                                } else {\n-                                    c = header.charAt(i++);\n-                                    rawValueEnd = i;\n-                                    if (c == q) {\n-                                        value = newValueBuf.toString();\n-                                        // only need to compute raw value for\n-                                        // cookie value which is in first\n-                                        // position\n-                                        rawValue = header.substring(rawValueStart, rawValueEnd);\n-                                        break keyValLoop;\n-                                    }\n-                                    newValueBuf.append(c);\n-                                    if (c == '\\\\') {\n-                                        hadBackslash = true;\n-                                    }\n-                                }\n-                            }\n-                        } else {\n-                            // NAME=VALUE;\n-                            int semiPos = header.indexOf(';', i);\n-                            if (semiPos > 0) {\n-                                value = rawValue = header.substring(newValueStart, semiPos);\n-                                i = semiPos;\n-                            } else {\n-                                value = rawValue = header.substring(newValueStart);\n-                                i = headerLen;\n-                            }\n-                        }\n+                        valueBegin = i;\n+                        // NAME=VALUE;\n+                        int semiPos = header.indexOf(';', i);\n+                        valueEnd = i = semiPos > 0 ? semiPos : headerLen;\n                         break keyValLoop;\n                     } else {\n                         i++;\n                     }\n \n                     if (i == headerLen) {\n                         // NAME (no value till the end of string)\n-                        newNameEnd = i;\n-                        value = rawValue = null;\n+                        nameEnd = headerLen;\n+                        valueBegin = valueEnd = -1;\n                         break;\n                     }\n                 }\n             }\n \n+            if (valueEnd > 0 && header.charAt(valueEnd - 1) == ',') {\n+                // old multiple cookies separator, skipping it\n+                valueEnd--;\n+            }\n+\n             if (cookieBuilder == null) {\n-                cookieBuilder = new CookieBuilder(header, newNameStart, newNameEnd, value, rawValue);\n+                // cookie name-value pair\n+                DefaultCookie cookie = initCookie(header, nameBegin, nameEnd, valueBegin, valueEnd);\n+\n+                if (cookie == null) {\n+                    return null;\n+                }\n+\n+                cookieBuilder = new CookieBuilder(cookie);\n             } else {\n-                cookieBuilder.appendAttribute(header, newNameStart, newNameEnd, value);\n+                // cookie attribute\n+                String attrValue = valueBegin == -1 ? null : header.substring(valueBegin, valueEnd);\n+                cookieBuilder.appendAttribute(header, nameBegin, nameEnd, attrValue);\n             }\n         }\n         return cookieBuilder.cookie();\n     }\n \n     private static class CookieBuilder {\n \n-        private final String name;\n-        private final String value;\n-        private final String rawValue;\n+        private final DefaultCookie cookie;\n         private String domain;\n         private String path;\n         private long maxAge = Long.MIN_VALUE;\n         private String expires;\n         private boolean secure;\n         private boolean httpOnly;\n \n-        public CookieBuilder(String header, int keyStart, int keyEnd,\n-                String value, String rawValue) {\n-            name = header.substring(keyStart, keyEnd);\n-            this.value = value;\n-            this.rawValue = rawValue;\n+        public CookieBuilder(DefaultCookie cookie) {\n+            this.cookie = cookie;\n         }\n \n         private long mergeMaxAgeAndExpire(long maxAge, String expires) {\n@@ -210,13 +177,6 @@ private long mergeMaxAgeAndExpire(long maxAge, String expires) {\n         }\n \n         public Cookie cookie() {\n-            if (name == null) {\n-                return null;\n-            }\n-\n-            DefaultCookie cookie = new DefaultCookie(name, value);\n-            cookie.setValue(value);\n-            cookie.setRawValue(rawValue);\n             cookie.setDomain(domain);\n             cookie.setPath(path);\n             cookie.setMaxAge(mergeMaxAgeAndExpire(maxAge, expires));\n@@ -245,7 +205,6 @@ public void appendAttribute(String header, int keyStart, int keyEnd,\n \n         private void setCookieAttribute(String header, int keyStart,\n                 int keyEnd, String value) {\n-\n             int length = keyEnd - keyStart;\n \n             if (length == 4) {\n@@ -260,15 +219,15 @@ private void setCookieAttribute(String header, int keyStart,\n         }\n \n         private void parse4(String header, int nameStart, String value) {\n-            if (header.regionMatches(true, nameStart, \"Path\", 0, 4)) {\n+            if (header.regionMatches(true, nameStart, CookieHeaderNames.PATH, 0, 4)) {\n                 path = value;\n             }\n         }\n \n         private void parse6(String header, int nameStart, String value) {\n-            if (header.regionMatches(true, nameStart, \"Domain\", 0, 5)) {\n-                domain = value.isEmpty() ? null : value;\n-            } else if (header.regionMatches(true, nameStart, \"Secure\", 0, 5)) {\n+            if (header.regionMatches(true, nameStart, CookieHeaderNames.DOMAIN, 0, 5)) {\n+                domain = value.length() > 0 ? value.toString() : null;\n+            } else if (header.regionMatches(true, nameStart, CookieHeaderNames.SECURE, 0, 5)) {\n                 secure = true;\n             }\n         }\n@@ -286,22 +245,17 @@ private void setMaxAge(String value) {\n         }\n \n         private void parse7(String header, int nameStart, String value) {\n-            if (header.regionMatches(true, nameStart, \"Expires\", 0, 7)) {\n+            if (header.regionMatches(true, nameStart, CookieHeaderNames.EXPIRES, 0, 7)) {\n                 setExpire(value);\n-            } else if (header.regionMatches(true, nameStart, \"Max-Age\", 0, 7)) {\n+            } else if (header.regionMatches(true, nameStart, CookieHeaderNames.MAX_AGE, 0, 7)) {\n                 setMaxAge(value);\n             }\n         }\n \n         private void parse8(String header, int nameStart, String value) {\n-\n-            if (header.regionMatches(true, nameStart, \"HttpOnly\", 0, 8)) {\n+            if (header.regionMatches(true, nameStart, CookieHeaderNames.HTTPONLY, 0, 8)) {\n                 httpOnly = true;\n             }\n         }\n     }\n-\n-    private ClientCookieDecoder() {\n-        // unused\n-    }\n }",
            "previous_filename": "codec-http/src/main/java/io/netty/handler/codec/http/ClientCookieDecoder.java"
        },
        {
            "sha": "305c73807588031e637bd43e4f0b16adf2281581",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/cookie/ClientCookieEncoder.java",
            "status": "added",
            "additions": 140,
            "deletions": 0,
            "changes": 140,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FClientCookieEncoder.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FClientCookieEncoder.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FClientCookieEncoder.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2015 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.cookie;\n+\n+import static io.netty.handler.codec.http.cookie.CookieUtil.*;\n+import static io.netty.util.internal.ObjectUtil.checkNotNull;\n+\n+import java.util.Iterator;\n+\n+import io.netty.handler.codec.http.HttpRequest;\n+\n+/**\n+ * A <a href=\"http://tools.ietf.org/html/rfc6265\">RFC6265</a> compliant cookie encoder to be used client side,\n+ * so only name=value pairs are sent.\n+ *\n+ * User-Agents are not supposed to interpret cookies, so, if present, {@link Cookie#rawValue()} will be used.\n+ * Otherwise, {@link Cookie#value()} will be used unquoted.\n+ *\n+ * Note that multiple cookies are supposed to be sent at once in a single \"Cookie\" header.\n+ *\n+ * <pre>\n+ * // Example\n+ * {@link HttpRequest} req = ...;\n+ * res.setHeader(\"Cookie\", {@link ClientCookieEncoder}.encode(\"JSESSIONID\", \"1234\"));\n+ * </pre>\n+ *\n+ * @see ClientCookieDecoder\n+ */\n+public final class ClientCookieEncoder extends CookieEncoder {\n+\n+    /**\n+     * Strict encoder that validates that name and value chars are in the valid scope\n+     * defined in RFC6265\n+     */\n+    public static final ClientCookieEncoder STRICT = new ClientCookieEncoder(true);\n+\n+    /**\n+     * Lax instance that doesn't validate name and value\n+     */\n+    public static final ClientCookieEncoder LAX = new ClientCookieEncoder(false);\n+\n+    private ClientCookieEncoder(boolean strict) {\n+        super(strict);\n+    }\n+\n+    /**\n+     * Encodes the specified cookie into a Cookie header value.\n+     *\n+     * @param name the cookie name\n+     * @param value the cookie value\n+     * @return a Rfc6265 style Cookie header value\n+     */\n+    public String encode(String name, String value) {\n+        return encode(new DefaultCookie(name, value));\n+    }\n+\n+    /**\n+     * Encodes the specified cookie into a Cookie header value.\n+     *\n+     * @param specified the cookie\n+     * @return a Rfc6265 style Cookie header value\n+     */\n+    public String encode(Cookie cookie) {\n+        StringBuilder buf = stringBuilder();\n+        encode(buf, checkNotNull(cookie, \"cookie\"));\n+        return stripTrailingSeparator(buf);\n+    }\n+\n+    /**\n+     * Encodes the specified cookies into a single Cookie header value.\n+     *\n+     * @param cookies some cookies\n+     * @return a Rfc6265 style Cookie header value, null if no cookies are passed.\n+     */\n+    public String encode(Cookie... cookies) {\n+        if (checkNotNull(cookies, \"cookies\").length == 0) {\n+            return null;\n+        }\n+\n+        StringBuilder buf = stringBuilder();\n+        for (Cookie c : cookies) {\n+            if (c == null) {\n+                break;\n+            }\n+\n+            encode(buf, c);\n+        }\n+        return stripTrailingSeparatorOrNull(buf);\n+    }\n+\n+    /**\n+     * Encodes the specified cookies into a single Cookie header value.\n+     *\n+     * @param cookies some cookies\n+     * @return a Rfc6265 style Cookie header value, null if no cookies are passed.\n+     */\n+    public String encode(Iterable<? extends Cookie> cookies) {\n+        Iterator<? extends Cookie> cookiesIt = checkNotNull(cookies, \"cookies\").iterator();\n+        if (!cookiesIt.hasNext()) {\n+            return null;\n+        }\n+\n+        StringBuilder buf = stringBuilder();\n+        while (cookiesIt.hasNext()) {\n+            Cookie c = cookiesIt.next();\n+            if (c == null) {\n+                break;\n+            }\n+\n+            encode(buf, c);\n+        }\n+        return stripTrailingSeparatorOrNull(buf);\n+    }\n+\n+    private void encode(StringBuilder buf, Cookie c) {\n+        final String name = c.name();\n+        final String value = c.value() != null ? c.value() : \"\";\n+\n+        validateCookie(name, value);\n+\n+        if (c.wrap()) {\n+            addQuoted(buf, name, value);\n+        } else {\n+            add(buf, name, value);\n+        }\n+    }\n+}"
        },
        {
            "sha": "7633477e14b8c70f906498587b4400c51ece6122",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/cookie/Cookie.java",
            "status": "added",
            "additions": 141,
            "deletions": 0,
            "changes": 141,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FCookie.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FCookie.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FCookie.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2015 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.cookie;\n+\n+/**\n+ * An interface defining an\n+ * <a href=\"http://en.wikipedia.org/wiki/HTTP_cookie\">HTTP cookie</a>.\n+ */\n+public interface Cookie extends Comparable<Cookie> {\n+\n+    /**\n+     * Returns the name of this {@link Cookie}.\n+     *\n+     * @return The name of this {@link Cookie}\n+     */\n+    String name();\n+\n+    /**\n+     * Returns the value of this {@link Cookie}.\n+     *\n+     * @return The value of this {@link Cookie}\n+     */\n+    String value();\n+\n+    /**\n+     * Sets the value of this {@link Cookie}.\n+     *\n+     * @param value The value to set\n+     */\n+    void setValue(String value);\n+\n+    /**\n+     * Returns true if the raw value of this {@link Cookie},\n+     * was wrapped with double quotes in original Set-Cookie header.\n+     *\n+     * @return If the value of this {@link Cookie} is to be wrapped\n+     */\n+    boolean wrap();\n+\n+    /**\n+     * Sets true if the value of this {@link Cookie}\n+     * is to be wrapped with double quotes.\n+     *\n+     * @param wrap true if wrap\n+     */\n+    void setWrap(boolean wrap);\n+\n+    /**\n+     * Returns the domain of this {@link Cookie}.\n+     *\n+     * @return The domain of this {@link Cookie}\n+     */\n+    String domain();\n+\n+    /**\n+     * Sets the domain of this {@link Cookie}.\n+     *\n+     * @param domain The domain to use\n+     */\n+    void setDomain(String domain);\n+\n+    /**\n+     * Returns the path of this {@link Cookie}.\n+     *\n+     * @return The {@link Cookie}'s path\n+     */\n+    String path();\n+\n+    /**\n+     * Sets the path of this {@link Cookie}.\n+     *\n+     * @param path The path to use for this {@link Cookie}\n+     */\n+    void setPath(String path);\n+\n+    /**\n+     * Returns the maximum age of this {@link Cookie} in seconds or {@link Long#MIN_VALUE} if unspecified\n+     *\n+     * @return The maximum age of this {@link Cookie}\n+     */\n+    long maxAge();\n+\n+    /**\n+     * Sets the maximum age of this {@link Cookie} in seconds.\n+     * If an age of {@code 0} is specified, this {@link Cookie} will be\n+     * automatically removed by browser because it will expire immediately.\n+     * If {@link Long#MIN_VALUE} is specified, this {@link Cookie} will be removed when the\n+     * browser is closed.\n+     *\n+     * @param maxAge The maximum age of this {@link Cookie} in seconds\n+     */\n+    void setMaxAge(long maxAge);\n+\n+    /**\n+     * Checks to see if this {@link Cookie} is secure\n+     *\n+     * @return True if this {@link Cookie} is secure, otherwise false\n+     */\n+    boolean isSecure();\n+\n+    /**\n+     * Sets the security getStatus of this {@link Cookie}\n+     *\n+     * @param secure True if this {@link Cookie} is to be secure, otherwise false\n+     */\n+    void setSecure(boolean secure);\n+\n+    /**\n+     * Checks to see if this {@link Cookie} can only be accessed via HTTP.\n+     * If this returns true, the {@link Cookie} cannot be accessed through\n+     * client side script - But only if the browser supports it.\n+     * For more information, please look <a href=\"http://www.owasp.org/index.php/HTTPOnly\">here</a>\n+     *\n+     * @return True if this {@link Cookie} is HTTP-only or false if it isn't\n+     */\n+    boolean isHttpOnly();\n+\n+    /**\n+     * Determines if this {@link Cookie} is HTTP only.\n+     * If set to true, this {@link Cookie} cannot be accessed by a client\n+     * side script. However, this works only if the browser supports it.\n+     * For for information, please look\n+     * <a href=\"http://www.owasp.org/index.php/HTTPOnly\">here</a>.\n+     *\n+     * @param httpOnly True if the {@link Cookie} is HTTP only, otherwise false.\n+     */\n+    void setHttpOnly(boolean httpOnly);\n+}"
        },
        {
            "sha": "ab3fbcf7b0eb20ede399199abe0d4661cfb548b2",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/cookie/CookieDecoder.java",
            "status": "added",
            "additions": 84,
            "deletions": 0,
            "changes": 84,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FCookieDecoder.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FCookieDecoder.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FCookieDecoder.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2015 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.cookie;\n+\n+import static io.netty.handler.codec.http.cookie.CookieUtil.firstInvalidCookieNameOctet;\n+import static io.netty.handler.codec.http.cookie.CookieUtil.firstInvalidCookieValueOctet;\n+import static io.netty.handler.codec.http.cookie.CookieUtil.unwrapValue;\n+\n+import java.nio.CharBuffer;\n+\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+/**\n+ * Parent of Client and Server side cookie decoders\n+ */\n+public abstract class CookieDecoder {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(getClass());\n+\n+    private final boolean strict;\n+\n+    protected CookieDecoder(boolean strict) {\n+        this.strict = strict;\n+    }\n+\n+    protected DefaultCookie initCookie(String header, int nameBegin, int nameEnd, int valueBegin, int valueEnd) {\n+        if (nameBegin == -1 || nameBegin == nameEnd) {\n+            logger.debug(\"Skipping cookie with null name\");\n+            return null;\n+        }\n+\n+        if (valueBegin == -1) {\n+            logger.debug(\"Skipping cookie with null value\");\n+            return null;\n+        }\n+\n+        CharSequence wrappedValue = CharBuffer.wrap(header, valueBegin, valueEnd);\n+        CharSequence unwrappedValue = unwrapValue(wrappedValue);\n+        if (unwrappedValue == null) {\n+            logger.debug(\"Skipping cookie because starting quotes are not properly balanced in '{}'\",\n+                    wrappedValue);\n+            return null;\n+        }\n+\n+        final String name = header.substring(nameBegin, nameEnd);\n+\n+        int invalidOctetPos;\n+        if (strict && (invalidOctetPos = firstInvalidCookieNameOctet(name)) >= 0) {\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"Skipping cookie because name '{}' contains invalid char '{}'\",\n+                        name, name.charAt(invalidOctetPos));\n+            }\n+            return null;\n+        }\n+\n+        final boolean wrap = unwrappedValue.length() != valueEnd - valueBegin;\n+\n+        if (strict && (invalidOctetPos = firstInvalidCookieValueOctet(unwrappedValue)) >= 0) {\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"Skipping cookie because value '{}' contains invalid char '{}'\",\n+                        unwrappedValue, unwrappedValue.charAt(invalidOctetPos));\n+            }\n+            return null;\n+        }\n+\n+        DefaultCookie cookie = new DefaultCookie(name, unwrappedValue.toString());\n+        cookie.setWrap(wrap);\n+        return cookie;\n+    }\n+}"
        },
        {
            "sha": "1748f0a12092724c602135b65f0d27e4162b162a",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/cookie/CookieEncoder.java",
            "status": "added",
            "additions": 51,
            "deletions": 0,
            "changes": 51,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FCookieEncoder.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FCookieEncoder.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FCookieEncoder.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2015 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.cookie;\n+\n+import static io.netty.handler.codec.http.cookie.CookieUtil.firstInvalidCookieNameOctet;\n+import static io.netty.handler.codec.http.cookie.CookieUtil.firstInvalidCookieValueOctet;\n+import static io.netty.handler.codec.http.cookie.CookieUtil.unwrapValue;\n+\n+/**\n+ * Parent of Client and Server side cookie encoders\n+ */\n+public abstract class CookieEncoder {\n+\n+    private final boolean strict;\n+\n+    protected CookieEncoder(boolean strict) {\n+        this.strict = strict;\n+    }\n+\n+    protected void validateCookie(String name, String value) {\n+        if (strict) {\n+            int pos;\n+\n+            if ((pos = firstInvalidCookieNameOctet(name)) >= 0) {\n+                throw new IllegalArgumentException(\"Cookie name contains an invalid char: \" + name.charAt(pos));\n+            }\n+\n+            CharSequence unwrappedValue = unwrapValue(value);\n+            if (unwrappedValue == null) {\n+                throw new IllegalArgumentException(\"Cookie value wrapping quotes are not balanced: \" + value);\n+            }\n+\n+            if ((pos = firstInvalidCookieValueOctet(unwrappedValue)) >= 0) {\n+                throw new IllegalArgumentException(\"Cookie value contains an invalid char: \" + value.charAt(pos));\n+            }\n+        }\n+    }\n+}"
        },
        {
            "sha": "6d2e7f577c25daed43ad94ee3f81fd4ed5ef5c94",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/cookie/CookieHeaderNames.java",
            "status": "renamed",
            "additions": 9,
            "deletions": 19,
            "changes": 28,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FCookieHeaderNames.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FCookieHeaderNames.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FCookieHeaderNames.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012 The Netty Project\n+ * Copyright 2015 The Netty Project\n  *\n  * The Netty Project licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n@@ -13,30 +13,20 @@\n  * License for the specific language governing permissions and limitations\n  * under the License.\n  */\n-package io.netty.handler.codec.http;\n+package io.netty.handler.codec.http.cookie;\n \n-final class CookieHeaderNames {\n-    static final String PATH = \"Path\";\n+public final class CookieHeaderNames {\n+    public static final String PATH = \"Path\";\n \n-    static final String EXPIRES = \"Expires\";\n+    public static final String EXPIRES = \"Expires\";\n \n-    static final String MAX_AGE = \"Max-Age\";\n+    public static final String MAX_AGE = \"Max-Age\";\n \n-    static final String DOMAIN = \"Domain\";\n+    public static final String DOMAIN = \"Domain\";\n \n-    static final String SECURE = \"Secure\";\n+    public static final String SECURE = \"Secure\";\n \n-    static final String HTTPONLY = \"HTTPOnly\";\n-\n-    static final String COMMENT = \"Comment\";\n-\n-    static final String COMMENTURL = \"CommentURL\";\n-\n-    static final String DISCARD = \"Discard\";\n-\n-    static final String PORT = \"Port\";\n-\n-    static final String VERSION = \"Version\";\n+    public static final String HTTPONLY = \"HTTPOnly\";\n \n     private CookieHeaderNames() {\n         // Unused.",
            "previous_filename": "codec-http/src/main/java/io/netty/handler/codec/http/CookieHeaderNames.java"
        },
        {
            "sha": "9bc15f58a30fa9d034ddf686848615036a07c5b1",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/cookie/CookieUtil.java",
            "status": "added",
            "additions": 158,
            "deletions": 0,
            "changes": 158,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FCookieUtil.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FCookieUtil.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FCookieUtil.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2015 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.cookie;\n+\n+import io.netty.handler.codec.http.HttpConstants;\n+import io.netty.util.internal.InternalThreadLocalMap;\n+\n+import java.util.BitSet;\n+\n+final class CookieUtil {\n+\n+    private static final BitSet VALID_COOKIE_VALUE_OCTETS = validCookieValueOctets();\n+\n+    private static final BitSet VALID_COOKIE_NAME_OCTETS = validCookieNameOctets(VALID_COOKIE_VALUE_OCTETS);\n+\n+    // US-ASCII characters excluding CTLs, whitespace, DQUOTE, comma, semicolon, and backslash\n+    private static BitSet validCookieValueOctets() {\n+        BitSet bits = new BitSet(8);\n+        for (int i = 35; i < 127; i++) {\n+            // US-ASCII characters excluding CTLs (%x00-1F / %x7F)\n+            bits.set(i);\n+        }\n+        bits.set('\"', false);  // exclude DQUOTE = %x22\n+        bits.set(',', false);  // exclude comma = %x2C\n+        bits.set(';', false);  // exclude semicolon = %x3B\n+        bits.set('\\\\', false); // exclude backslash = %x5C\n+        return bits;\n+    }\n+\n+    //    token          = 1*<any CHAR except CTLs or separators>\n+    //    separators     = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n+    //                   | \",\" | \";\" | \":\" | \"\\\" | <\">\n+    //                   | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n+    //                   | \"{\" | \"}\" | SP | HT\n+    private static BitSet validCookieNameOctets(BitSet validCookieValueOctets) {\n+        BitSet bits = new BitSet(8);\n+        bits.or(validCookieValueOctets);\n+        bits.set('(', false);\n+        bits.set(')', false);\n+        bits.set('<', false);\n+        bits.set('>', false);\n+        bits.set('@', false);\n+        bits.set(':', false);\n+        bits.set('/', false);\n+        bits.set('[', false);\n+        bits.set(']', false);\n+        bits.set('?', false);\n+        bits.set('=', false);\n+        bits.set('{', false);\n+        bits.set('}', false);\n+        bits.set(' ', false);\n+        bits.set('\\t', false);\n+        return bits;\n+    }\n+\n+    static StringBuilder stringBuilder() {\n+        return InternalThreadLocalMap.get().stringBuilder();\n+    }\n+\n+    /**\n+     * @param buf a buffer where some cookies were maybe encoded\n+     * @return the buffer String without the trailing separator, or null if no cookie was appended.\n+     */\n+    static String stripTrailingSeparatorOrNull(StringBuilder buf) {\n+        return buf.length() == 0 ? null : stripTrailingSeparator(buf);\n+    }\n+\n+    static String stripTrailingSeparator(StringBuilder buf) {\n+        if (buf.length() > 0) {\n+            buf.setLength(buf.length() - 2);\n+        }\n+        return buf.toString();\n+    }\n+\n+    static void add(StringBuilder sb, String name, long val) {\n+        sb.append(name);\n+        sb.append((char) HttpConstants.EQUALS);\n+        sb.append(val);\n+        sb.append((char) HttpConstants.SEMICOLON);\n+        sb.append((char) HttpConstants.SP);\n+    }\n+\n+    static void add(StringBuilder sb, String name, String val) {\n+        sb.append(name);\n+        sb.append((char) HttpConstants.EQUALS);\n+        sb.append(val);\n+        sb.append((char) HttpConstants.SEMICOLON);\n+        sb.append((char) HttpConstants.SP);\n+    }\n+\n+    static void add(StringBuilder sb, String name) {\n+        sb.append(name);\n+        sb.append((char) HttpConstants.SEMICOLON);\n+        sb.append((char) HttpConstants.SP);\n+    }\n+\n+    static void addQuoted(StringBuilder sb, String name, String val) {\n+        if (val == null) {\n+            val = \"\";\n+        }\n+\n+        sb.append(name);\n+        sb.append((char) HttpConstants.EQUALS);\n+        sb.append((char) HttpConstants.DOUBLE_QUOTE);\n+        sb.append(val);\n+        sb.append((char) HttpConstants.DOUBLE_QUOTE);\n+        sb.append((char) HttpConstants.SEMICOLON);\n+        sb.append((char) HttpConstants.SP);\n+    }\n+\n+    static int firstInvalidCookieNameOctet(CharSequence cs) {\n+        return firstInvalidOctet(cs, VALID_COOKIE_NAME_OCTETS);\n+    }\n+\n+    static int firstInvalidCookieValueOctet(CharSequence cs) {\n+        return firstInvalidOctet(cs, VALID_COOKIE_VALUE_OCTETS);\n+    }\n+\n+    static int firstInvalidOctet(CharSequence cs, BitSet bits) {\n+        for (int i = 0; i < cs.length(); i++) {\n+            char c = cs.charAt(i);\n+            if (!bits.get(c)) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    static CharSequence unwrapValue(CharSequence cs) {\n+        final int len = cs.length();\n+        if (len > 0 && cs.charAt(0) == '\"') {\n+            if (len >= 2 && cs.charAt(len - 1) == '\"') {\n+                // properly balanced\n+                return len == 2 ? \"\" : cs.subSequence(1, len - 1);\n+            } else {\n+                return null;\n+            }\n+        }\n+        return cs;\n+    }\n+\n+    private CookieUtil() {\n+        // Unused\n+    }\n+}"
        },
        {
            "sha": "c5de61c9d42d0d86287dc500899a2e414a14574a",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/cookie/DefaultCookie.java",
            "status": "added",
            "additions": 268,
            "deletions": 0,
            "changes": 268,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FDefaultCookie.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FDefaultCookie.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FDefaultCookie.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2015 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.cookie;\n+\n+import static io.netty.handler.codec.http.cookie.CookieUtil.stringBuilder;\n+import static io.netty.util.internal.ObjectUtil.checkNotNull;\n+\n+/**\n+ * The default {@link Cookie} implementation.\n+ */\n+public class DefaultCookie implements Cookie {\n+\n+    private final String name;\n+    private String value;\n+    private boolean wrap;\n+    private String domain;\n+    private String path;\n+    private long maxAge = Long.MIN_VALUE;\n+    private boolean secure;\n+    private boolean httpOnly;\n+\n+    /**\n+     * Creates a new cookie with the specified name and value.\n+     */\n+    public DefaultCookie(String name, String value) {\n+        name = checkNotNull(name, \"name\").trim();\n+        if (name.isEmpty()) {\n+            throw new IllegalArgumentException(\"empty name\");\n+        }\n+\n+        for (int i = 0; i < name.length(); i ++) {\n+            char c = name.charAt(i);\n+            if (c > 127) {\n+                throw new IllegalArgumentException(\n+                        \"name contains non-ascii character: \" + name);\n+            }\n+\n+            // Check prohibited characters.\n+            switch (c) {\n+            case '\\t': case '\\n': case 0x0b: case '\\f': case '\\r':\n+            case ' ':  case ',':  case ';':  case '=':\n+                throw new IllegalArgumentException(\n+                        \"name contains one of the following prohibited characters: \" +\n+                        \"=,; \\\\t\\\\r\\\\n\\\\v\\\\f: \" + name);\n+            }\n+        }\n+\n+        if (name.charAt(0) == '$') {\n+            throw new IllegalArgumentException(\"name starting with '$' not allowed: \" + name);\n+        }\n+\n+        this.name = name;\n+        setValue(value);\n+    }\n+\n+    @Override\n+    public String name() {\n+        return name;\n+    }\n+\n+    @Override\n+    public String value() {\n+        return value;\n+    }\n+\n+    @Override\n+    public void setValue(String value) {\n+        this.value = checkNotNull(value, \"value\");\n+    }\n+\n+    @Override\n+    public boolean wrap() {\n+        return wrap;\n+    }\n+\n+    @Override\n+    public void setWrap(boolean wrap) {\n+        this.wrap = wrap;\n+    }\n+\n+    @Override\n+    public String domain() {\n+        return domain;\n+    }\n+\n+    @Override\n+    public void setDomain(String domain) {\n+        this.domain = validateValue(\"domain\", domain);\n+    }\n+\n+    @Override\n+    public String path() {\n+        return path;\n+    }\n+\n+    @Override\n+    public void setPath(String path) {\n+        this.path = validateValue(\"path\", path);\n+    }\n+\n+    @Override\n+    public long maxAge() {\n+        return maxAge;\n+    }\n+\n+    @Override\n+    public void setMaxAge(long maxAge) {\n+        this.maxAge = maxAge;\n+    }\n+\n+    @Override\n+    public boolean isSecure() {\n+        return secure;\n+    }\n+\n+    @Override\n+    public void setSecure(boolean secure) {\n+        this.secure = secure;\n+    }\n+\n+    @Override\n+    public boolean isHttpOnly() {\n+        return httpOnly;\n+    }\n+\n+    @Override\n+    public void setHttpOnly(boolean httpOnly) {\n+        this.httpOnly = httpOnly;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return name().hashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+\n+        if (!(o instanceof Cookie)) {\n+            return false;\n+        }\n+\n+        Cookie that = (Cookie) o;\n+        if (!name().equalsIgnoreCase(that.name())) {\n+            return false;\n+        }\n+\n+        if (path() == null) {\n+            if (that.path() != null) {\n+                return false;\n+            }\n+        } else if (that.path() == null) {\n+            return false;\n+        } else if (!path().equals(that.path())) {\n+            return false;\n+        }\n+\n+        if (domain() == null) {\n+            if (that.domain() != null) {\n+                return false;\n+            }\n+        } else if (that.domain() == null) {\n+            return false;\n+        } else {\n+            return domain().equalsIgnoreCase(that.domain());\n+        }\n+\n+        return true;\n+    }\n+\n+    @Override\n+    public int compareTo(Cookie c) {\n+        int v = name().compareToIgnoreCase(c.name());\n+        if (v != 0) {\n+            return v;\n+        }\n+\n+        if (path() == null) {\n+            if (c.path() != null) {\n+                return -1;\n+            }\n+        } else if (c.path() == null) {\n+            return 1;\n+        } else {\n+            v = path().compareTo(c.path());\n+            if (v != 0) {\n+                return v;\n+            }\n+        }\n+\n+        if (domain() == null) {\n+            if (c.domain() != null) {\n+                return -1;\n+            }\n+        } else if (c.domain() == null) {\n+            return 1;\n+        } else {\n+            v = domain().compareToIgnoreCase(c.domain());\n+            return v;\n+        }\n+\n+        return 0;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder buf = stringBuilder()\n+            .append(name())\n+            .append('=')\n+            .append(value());\n+        if (domain() != null) {\n+            buf.append(\", domain=\")\n+               .append(domain());\n+        }\n+        if (path() != null) {\n+            buf.append(\", path=\")\n+               .append(path());\n+        }\n+        if (maxAge() >= 0) {\n+            buf.append(\", maxAge=\")\n+               .append(maxAge())\n+               .append('s');\n+        }\n+        if (isSecure()) {\n+            buf.append(\", secure\");\n+        }\n+        if (isHttpOnly()) {\n+            buf.append(\", HTTPOnly\");\n+        }\n+        return buf.toString();\n+    }\n+\n+    protected String validateValue(String name, String value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        value = value.trim();\n+        if (value.isEmpty()) {\n+            return null;\n+        }\n+        for (int i = 0; i < value.length(); i ++) {\n+            char c = value.charAt(i);\n+            switch (c) {\n+            case '\\r': case '\\n': case '\\f': case 0x0b: case ';':\n+                throw new IllegalArgumentException(\n+                        name + \" contains one of the following prohibited characters: \" +\n+                        \";\\\\r\\\\n\\\\f\\\\v (\" + value + ')');\n+            }\n+        }\n+        return value;\n+    }\n+}"
        },
        {
            "sha": "04a8e3938baeb786ef3399d02f886f3b2d913611",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/cookie/ServerCookieDecoder.java",
            "status": "added",
            "additions": 157,
            "deletions": 0,
            "changes": 157,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FServerCookieDecoder.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FServerCookieDecoder.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FServerCookieDecoder.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2015 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.cookie;\n+\n+import static io.netty.util.internal.ObjectUtil.checkNotNull;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+/**\n+ * A <a href=\"http://tools.ietf.org/html/rfc6265\">RFC6265</a> compliant cookie decoder to be used server side.\n+ *\n+ * Only name and value fields are expected, so old fields are not populated (path, domain, etc).\n+ *\n+ * Old <a href=\"http://tools.ietf.org/html/rfc2965\">RFC2965</a> cookies are still supported,\n+ * old fields will simply be ignored.\n+ *\n+ * @see ServerCookieEncoder\n+ */\n+public final class ServerCookieDecoder extends CookieDecoder {\n+\n+    private static final String RFC2965_VERSION = \"$Version\";\n+\n+    private static final String RFC2965_PATH = \"$\" + CookieHeaderNames.PATH;\n+\n+    private static final String RFC2965_DOMAIN = \"$\" + CookieHeaderNames.DOMAIN;\n+\n+    private static final String RFC2965_PORT = \"$Port\";\n+\n+    /**\n+     * Strict encoder that validates that name and value chars are in the valid scope\n+     * defined in RFC6265\n+     */\n+    public static final ServerCookieDecoder STRICT = new ServerCookieDecoder(true);\n+\n+    /**\n+     * Lax instance that doesn't validate name and value\n+     */\n+    public static final ServerCookieDecoder LAX = new ServerCookieDecoder(false);\n+\n+    private ServerCookieDecoder(boolean strict) {\n+        super(strict);\n+    }\n+\n+    /**\n+     * Decodes the specified Set-Cookie HTTP header value into a {@link Cookie}.\n+     *\n+     * @return the decoded {@link Cookie}\n+     */\n+    public Set<Cookie> decode(String header) {\n+        final int headerLen = checkNotNull(header, \"header\").length();\n+\n+        if (headerLen == 0) {\n+            return Collections.emptySet();\n+        }\n+\n+        Set<Cookie> cookies = new TreeSet<Cookie>();\n+\n+        int i = 0;\n+\n+        boolean rfc2965Style = false;\n+        if (header.regionMatches(true, 0, RFC2965_VERSION, 0, RFC2965_VERSION.length())) {\n+            // RFC 2965 style cookie, move to after version value\n+            i = header.indexOf(';') + 1;\n+            rfc2965Style = true;\n+        }\n+\n+        loop: for (;;) {\n+\n+            // Skip spaces and separators.\n+            for (;;) {\n+                if (i == headerLen) {\n+                    break loop;\n+                }\n+                char c = header.charAt(i);\n+                if (c == '\\t' || c == '\\n' || c == 0x0b || c == '\\f'\n+                        || c == '\\r' || c == ' ' || c == ',' || c == ';') {\n+                    i++;\n+                    continue;\n+                }\n+                break;\n+            }\n+\n+            int nameBegin = i;\n+            int nameEnd = i;\n+            int valueBegin = -1;\n+            int valueEnd = -1;\n+\n+            if (i != headerLen) {\n+                keyValLoop: for (;;) {\n+\n+                    char curChar = header.charAt(i);\n+                    if (curChar == ';') {\n+                        // NAME; (no value till ';')\n+                        nameEnd = i;\n+                        valueBegin = valueEnd = -1;\n+                        break keyValLoop;\n+\n+                    } else if (curChar == '=') {\n+                        // NAME=VALUE\n+                        nameEnd = i;\n+                        i++;\n+                        if (i == headerLen) {\n+                            // NAME= (empty value, i.e. nothing after '=')\n+                            valueBegin = valueEnd = 0;\n+                            break keyValLoop;\n+                        }\n+\n+                        valueBegin = i;\n+                        // NAME=VALUE;\n+                        int semiPos = header.indexOf(';', i);\n+                        valueEnd = i = semiPos > 0 ? semiPos : headerLen;\n+                        break keyValLoop;\n+                    } else {\n+                        i++;\n+                    }\n+\n+                    if (i == headerLen) {\n+                        // NAME (no value till the end of string)\n+                        nameEnd = headerLen;\n+                        valueBegin = valueEnd = -1;\n+                        break;\n+                    }\n+                }\n+            }\n+\n+            if (rfc2965Style && (header.regionMatches(nameBegin, RFC2965_PATH, 0, RFC2965_PATH.length()) ||\n+                    header.regionMatches(nameBegin, RFC2965_DOMAIN, 0, RFC2965_DOMAIN.length()) ||\n+                    header.regionMatches(nameBegin, RFC2965_PORT, 0, RFC2965_PORT.length()))) {\n+\n+                // skip obsolete RFC2965 fields\n+                continue;\n+            }\n+\n+            DefaultCookie cookie = initCookie(header, nameBegin, nameEnd, valueBegin, valueEnd);\n+            if (cookie != null) {\n+                cookies.add(cookie);\n+            }\n+        }\n+\n+        return cookies;\n+    }\n+}"
        },
        {
            "sha": "17376903f3611379ccb75ab8cb3e74349bba4f3c",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/cookie/ServerCookieEncoder.java",
            "status": "added",
            "additions": 179,
            "deletions": 0,
            "changes": 179,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FServerCookieEncoder.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FServerCookieEncoder.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FServerCookieEncoder.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2015 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.cookie;\n+\n+import static io.netty.handler.codec.http.cookie.CookieUtil.*;\n+import static io.netty.util.internal.ObjectUtil.checkNotNull;\n+\n+import io.netty.handler.codec.http.HttpHeaderDateFormat;\n+import io.netty.handler.codec.http.HttpRequest;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * A <a href=\"http://tools.ietf.org/html/rfc6265\">RFC6265</a> compliant cookie encoder to be used server side,\n+ * so some fields are sent (Version is typically ignored).\n+ *\n+ * As Netty's Cookie merges Expires and MaxAge into one single field, only Max-Age field is sent.\n+ *\n+ * Note that multiple cookies are supposed to be sent at once in a single \"Set-Cookie\" header.\n+ *\n+ * <pre>\n+ * // Example\n+ * {@link HttpRequest} req = ...;\n+ * res.setHeader(\"Cookie\", {@link ServerCookieEncoder}.encode(\"JSESSIONID\", \"1234\"));\n+ * </pre>\n+ *\n+ * @see ServerCookieDecoder\n+ */\n+public final class ServerCookieEncoder extends CookieEncoder {\n+\n+    /**\n+     * Strict encoder that validates that name and value chars are in the valid scope\n+     * defined in RFC6265\n+     */\n+    public static final ServerCookieEncoder STRICT = new ServerCookieEncoder(true);\n+\n+    /**\n+     * Lax instance that doesn't validate name and value\n+     */\n+    public static final ServerCookieEncoder LAX = new ServerCookieEncoder(false);\n+\n+    private ServerCookieEncoder(boolean strict) {\n+        super(strict);\n+    }\n+\n+    /**\n+     * Encodes the specified cookie name-value pair into a Set-Cookie header value.\n+     *\n+     * @param name the cookie name\n+     * @param value the cookie value\n+     * @return a single Set-Cookie header value\n+     */\n+    public String encode(String name, String value) {\n+        return encode(new DefaultCookie(name, value));\n+    }\n+\n+    /**\n+     * Encodes the specified cookie into a Set-Cookie header value.\n+     *\n+     * @param cookie the cookie\n+     * @return a single Set-Cookie header value\n+     */\n+    public String encode(Cookie cookie) {\n+        final String name = checkNotNull(cookie, \"cookie\").name();\n+        final String value = cookie.value() != null ? cookie.value() : \"\";\n+\n+        validateCookie(name, value);\n+\n+        StringBuilder buf = stringBuilder();\n+\n+        if (cookie.wrap()) {\n+            addQuoted(buf, name, value);\n+        } else {\n+            add(buf, name, value);\n+        }\n+\n+        if (cookie.maxAge() != Long.MIN_VALUE) {\n+            add(buf, CookieHeaderNames.MAX_AGE, cookie.maxAge());\n+            Date expires = new Date(cookie.maxAge() * 1000 + System.currentTimeMillis());\n+            add(buf, CookieHeaderNames.EXPIRES, HttpHeaderDateFormat.get().format(expires));\n+        }\n+\n+        if (cookie.path() != null) {\n+            add(buf, CookieHeaderNames.PATH, cookie.path());\n+        }\n+\n+        if (cookie.domain() != null) {\n+            add(buf, CookieHeaderNames.DOMAIN, cookie.domain());\n+        }\n+        if (cookie.isSecure()) {\n+            add(buf, CookieHeaderNames.SECURE);\n+        }\n+        if (cookie.isHttpOnly()) {\n+            add(buf, CookieHeaderNames.HTTPONLY);\n+        }\n+\n+        return stripTrailingSeparator(buf);\n+    }\n+\n+    /**\n+     * Batch encodes cookies into Set-Cookie header values.\n+     *\n+     * @param cookies a bunch of cookies\n+     * @return the corresponding bunch of Set-Cookie headers\n+     */\n+    public List<String> encode(Cookie... cookies) {\n+        if (checkNotNull(cookies, \"cookies\").length == 0) {\n+            return Collections.emptyList();\n+        }\n+\n+        List<String> encoded = new ArrayList<String>(cookies.length);\n+        for (Cookie c : cookies) {\n+            if (c == null) {\n+                break;\n+            }\n+            encoded.add(encode(c));\n+        }\n+        return encoded;\n+    }\n+\n+    /**\n+     * Batch encodes cookies into Set-Cookie header values.\n+     *\n+     * @param cookies a bunch of cookies\n+     * @return the corresponding bunch of Set-Cookie headers\n+     */\n+    public List<String> encode(Collection<? extends Cookie> cookies) {\n+        if (checkNotNull(cookies, \"cookies\").isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+\n+        List<String> encoded = new ArrayList<String>(cookies.size());\n+        for (Cookie c : cookies) {\n+            if (c == null) {\n+                break;\n+            }\n+            encoded.add(encode(c));\n+        }\n+        return encoded;\n+    }\n+\n+    /**\n+     * Batch encodes cookies into Set-Cookie header values.\n+     *\n+     * @param cookies a bunch of cookies\n+     * @return the corresponding bunch of Set-Cookie headers\n+     */\n+    public List<String> encode(Iterable<? extends Cookie> cookies) {\n+        if (!checkNotNull(cookies, \"cookies\").iterator().hasNext()) {\n+            return Collections.emptyList();\n+        }\n+\n+        List<String> encoded = new ArrayList<String>();\n+        for (Cookie c : cookies) {\n+            if (c == null) {\n+                break;\n+            }\n+            encoded.add(encode(c));\n+        }\n+        return encoded;\n+    }\n+}"
        },
        {
            "sha": "4f9ebaf0f0e53b0861c588a161a14a29ccf4cac7",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/cookie/package-info.java",
            "status": "added",
            "additions": 20,
            "deletions": 0,
            "changes": 20,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2Fpackage-info.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2Fpackage-info.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2Fpackage-info.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2015 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * This package contains Cookie related classes.\n+ */\n+package io.netty.handler.codec.http.cookie;"
        },
        {
            "sha": "2ebd1b87c740b81fd3876ea5e6e460a9d7127197",
            "filename": "codec-http/src/test/java/io/netty/handler/codec/http/ServerCookieDecoderTest.java",
            "status": "removed",
            "additions": 0,
            "deletions": 228,
            "changes": 228,
            "blob_url": "https://github.com/netty/netty/blob/c85b770ac4d3d03af3b603af89c841ebf6c4d082/codec-http%2Fsrc%2Ftest%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FServerCookieDecoderTest.java",
            "raw_url": "https://github.com/netty/netty/raw/c85b770ac4d3d03af3b603af89c841ebf6c4d082/codec-http%2Fsrc%2Ftest%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FServerCookieDecoderTest.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Ftest%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FServerCookieDecoderTest.java?ref=c85b770ac4d3d03af3b603af89c841ebf6c4d082",
            "patch": "@@ -1,228 +0,0 @@\n-/*\n- * Copyright 2014 The Netty Project\n- *\n- * The Netty Project licenses this file to you under the Apache License,\n- * version 2.0 (the \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at:\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations\n- * under the License.\n- */\n-package io.netty.handler.codec.http;\n-\n-import org.junit.Test;\n-\n-import java.util.Date;\n-import java.util.Iterator;\n-import java.util.Set;\n-\n-import static org.junit.Assert.*;\n-\n-public class ServerCookieDecoderTest {\n-    @Test\n-    public void testDecodingSingleCookie() {\n-        String cookieString = \"myCookie=myValue\";\n-        cookieString = cookieString.replace(\"XXX\",\n-                HttpHeaderDateFormat.get().format(new Date(System.currentTimeMillis() + 50000)));\n-\n-        Set<Cookie> cookies = ServerCookieDecoder.decode(cookieString);\n-        assertEquals(1, cookies.size());\n-        Cookie cookie = cookies.iterator().next();\n-        assertNotNull(cookie);\n-        assertEquals(\"myValue\", cookie.value());\n-    }\n-\n-    @Test\n-    public void testDecodingMultipleCookies() {\n-        String c1 = \"myCookie=myValue;\";\n-        String c2 = \"myCookie2=myValue2;\";\n-        String c3 = \"myCookie3=myValue3;\";\n-\n-        Set<Cookie> cookies = ServerCookieDecoder.decode(c1 + c2 + c3);\n-        assertEquals(3, cookies.size());\n-        Iterator<Cookie> it = cookies.iterator();\n-        Cookie cookie = it.next();\n-        assertNotNull(cookie);\n-        assertEquals(\"myValue\", cookie.value());\n-        cookie = it.next();\n-        assertNotNull(cookie);\n-        assertEquals(\"myValue2\", cookie.value());\n-        cookie = it.next();\n-        assertNotNull(cookie);\n-        assertEquals(\"myValue3\", cookie.value());\n-    }\n-\n-    @Test\n-    public void testDecodingQuotedCookie() {\n-        String source =\n-            \"a=\\\"\\\";\" +\n-            \"b=\\\"1\\\";\" +\n-            \"c=\\\"\\\\\\\"1\\\\\\\"2\\\\\\\"\\\";\" +\n-            \"d=\\\"1\\\\\\\"2\\\\\\\"3\\\";\" +\n-            \"e=\\\"\\\\\\\"\\\\\\\"\\\";\" +\n-            \"f=\\\"1\\\\\\\"\\\\\\\"2\\\";\" +\n-            \"g=\\\"\\\\\\\\\\\";\" +\n-            \"h=\\\"';,\\\\x\\\"\";\n-\n-        Set<Cookie> cookies = ServerCookieDecoder.decode(source);\n-        Iterator<Cookie> it = cookies.iterator();\n-        Cookie c;\n-\n-        c = it.next();\n-        assertEquals(\"a\", c.name());\n-        assertEquals(\"\", c.value());\n-\n-        c = it.next();\n-        assertEquals(\"b\", c.name());\n-        assertEquals(\"1\", c.value());\n-\n-        c = it.next();\n-        assertEquals(\"c\", c.name());\n-        assertEquals(\"\\\"1\\\"2\\\"\", c.value());\n-\n-        c = it.next();\n-        assertEquals(\"d\", c.name());\n-        assertEquals(\"1\\\"2\\\"3\", c.value());\n-\n-        c = it.next();\n-        assertEquals(\"e\", c.name());\n-        assertEquals(\"\\\"\\\"\", c.value());\n-\n-        c = it.next();\n-        assertEquals(\"f\", c.name());\n-        assertEquals(\"1\\\"\\\"2\", c.value());\n-\n-        c = it.next();\n-        assertEquals(\"g\", c.name());\n-        assertEquals(\"\\\\\", c.value());\n-\n-        c = it.next();\n-        assertEquals(\"h\", c.name());\n-        assertEquals(\"';,\\\\x\", c.value());\n-\n-        assertFalse(it.hasNext());\n-    }\n-\n-    @Test\n-    public void testDecodingGoogleAnalyticsCookie() {\n-        String source =\n-            \"ARPT=LWUKQPSWRTUN04CKKJI; \" +\n-            \"kw-2E343B92-B097-442c-BFA5-BE371E0325A2=unfinished furniture; \" +\n-            \"__utma=48461872.1094088325.1258140131.1258140131.1258140131.1; \" +\n-            \"__utmb=48461872.13.10.1258140131; __utmc=48461872; \" +\n-            \"__utmz=48461872.1258140131.1.1.utmcsr=overstock.com|utmccn=(referral)|\" +\n-                    \"utmcmd=referral|utmcct=/Home-Garden/Furniture/Clearance,/clearance,/32/dept.html\";\n-        Set<Cookie> cookies = ServerCookieDecoder.decode(source);\n-        Iterator<Cookie> it = cookies.iterator();\n-        Cookie c;\n-\n-        c = it.next();\n-        assertEquals(\"__utma\", c.name());\n-        assertEquals(\"48461872.1094088325.1258140131.1258140131.1258140131.1\", c.value());\n-\n-        c = it.next();\n-        assertEquals(\"__utmb\", c.name());\n-        assertEquals(\"48461872.13.10.1258140131\", c.value());\n-\n-        c = it.next();\n-        assertEquals(\"__utmc\", c.name());\n-        assertEquals(\"48461872\", c.value());\n-\n-        c = it.next();\n-        assertEquals(\"__utmz\", c.name());\n-        assertEquals(\"48461872.1258140131.1.1.utmcsr=overstock.com|\" +\n-                \"utmccn=(referral)|utmcmd=referral|utmcct=/Home-Garden/Furniture/Clearance,/clearance,/32/dept.html\",\n-                c.value());\n-\n-        c = it.next();\n-        assertEquals(\"ARPT\", c.name());\n-        assertEquals(\"LWUKQPSWRTUN04CKKJI\", c.value());\n-\n-        c = it.next();\n-        assertEquals(\"kw-2E343B92-B097-442c-BFA5-BE371E0325A2\", c.name());\n-        assertEquals(\"unfinished furniture\", c.value());\n-\n-        assertFalse(it.hasNext());\n-    }\n-\n-    @Test\n-    public void testDecodingLongValue() {\n-        String longValue =\n-                \"b!!!$Q!!$ha!!<NC=MN(F!!%#4!!<NC=MN(F!!2!d!!!!#=IvZB!!2,F!!!!'=KqtH!!2-9!!!!\" +\n-                \"'=IvZM!!3f:!!!!$=HbQW!!3g'!!!!%=J^wI!!3g-!!!!%=J^wI!!3g1!!!!$=HbQW!!3g2!!!!\" +\n-                \"$=HbQW!!3g5!!!!%=J^wI!!3g9!!!!$=HbQW!!3gT!!!!$=HbQW!!3gX!!!!#=J^wI!!3gY!!!!\" +\n-                \"#=J^wI!!3gh!!!!$=HbQW!!3gj!!!!$=HbQW!!3gr!!!!$=HbQW!!3gx!!!!#=J^wI!!3h!!!!!\" +\n-                \"$=HbQW!!3h$!!!!#=J^wI!!3h'!!!!$=HbQW!!3h,!!!!$=HbQW!!3h0!!!!%=J^wI!!3h1!!!!\" +\n-                \"#=J^wI!!3h2!!!!$=HbQW!!3h4!!!!$=HbQW!!3h7!!!!$=HbQW!!3h8!!!!%=J^wI!!3h:!!!!\" +\n-                \"#=J^wI!!3h@!!!!%=J^wI!!3hB!!!!$=HbQW!!3hC!!!!$=HbQW!!3hL!!!!$=HbQW!!3hQ!!!!\" +\n-                \"$=HbQW!!3hS!!!!%=J^wI!!3hU!!!!$=HbQW!!3h[!!!!$=HbQW!!3h^!!!!$=HbQW!!3hd!!!!\" +\n-                \"%=J^wI!!3he!!!!%=J^wI!!3hf!!!!%=J^wI!!3hg!!!!$=HbQW!!3hh!!!!%=J^wI!!3hi!!!!\" +\n-                \"%=J^wI!!3hv!!!!$=HbQW!!3i/!!!!#=J^wI!!3i2!!!!#=J^wI!!3i3!!!!%=J^wI!!3i4!!!!\" +\n-                \"$=HbQW!!3i7!!!!$=HbQW!!3i8!!!!$=HbQW!!3i9!!!!%=J^wI!!3i=!!!!#=J^wI!!3i>!!!!\" +\n-                \"%=J^wI!!3iD!!!!$=HbQW!!3iF!!!!#=J^wI!!3iH!!!!%=J^wI!!3iM!!!!%=J^wI!!3iS!!!!\" +\n-                \"#=J^wI!!3iU!!!!%=J^wI!!3iZ!!!!#=J^wI!!3i]!!!!%=J^wI!!3ig!!!!%=J^wI!!3ij!!!!\" +\n-                \"%=J^wI!!3ik!!!!#=J^wI!!3il!!!!$=HbQW!!3in!!!!%=J^wI!!3ip!!!!$=HbQW!!3iq!!!!\" +\n-                \"$=HbQW!!3it!!!!%=J^wI!!3ix!!!!#=J^wI!!3j!!!!!$=HbQW!!3j%!!!!$=HbQW!!3j'!!!!\" +\n-                \"%=J^wI!!3j(!!!!%=J^wI!!9mJ!!!!'=KqtH!!=SE!!<NC=MN(F!!?VS!!<NC=MN(F!!Zw`!!!!\" +\n-                \"%=KqtH!!j+C!!<NC=MN(F!!j+M!!<NC=MN(F!!j+a!!<NC=MN(F!!j,.!!<NC=MN(F!!n>M!!!!\" +\n-                \"'=KqtH!!s1X!!!!$=MMyc!!s1_!!!!#=MN#O!!ypn!!!!'=KqtH!!ypr!!!!'=KqtH!#%h!!!!!\" +\n-                \"%=KqtH!#%o!!!!!'=KqtH!#)H6!!<NC=MN(F!#*%'!!!!%=KqtH!#+k(!!!!'=KqtH!#-E!!!!!\" +\n-                \"'=KqtH!#1)w!!!!'=KqtH!#1)y!!!!'=KqtH!#1*M!!!!#=KqtH!#1*p!!!!'=KqtH!#14Q!!<N\" +\n-                \"C=MN(F!#14S!!<NC=MN(F!#16I!!<NC=MN(F!#16N!!<NC=MN(F!#16X!!<NC=MN(F!#16k!!<N\" +\n-                \"C=MN(F!#17@!!<NC=MN(F!#17A!!<NC=MN(F!#1Cq!!!!'=KqtH!#7),!!!!#=KqtH!#7)b!!!!\" +\n-                \"#=KqtH!#7Ww!!!!'=KqtH!#?cQ!!!!'=KqtH!#His!!!!'=KqtH!#Jrh!!!!'=KqtH!#O@M!!<N\" +\n-                \"C=MN(F!#O@O!!<NC=MN(F!#OC6!!<NC=MN(F!#Os.!!!!#=KqtH!#YOW!!!!#=H/Li!#Zat!!!!\" +\n-                \"'=KqtH!#ZbI!!!!%=KqtH!#Zbc!!!!'=KqtH!#Zbs!!!!%=KqtH!#Zby!!!!'=KqtH!#Zce!!!!\" +\n-                \"'=KqtH!#Zdc!!!!%=KqtH!#Zea!!!!'=KqtH!#ZhI!!!!#=KqtH!#ZiD!!!!'=KqtH!#Zis!!!!\" +\n-                \"'=KqtH!#Zj0!!!!#=KqtH!#Zj1!!!!'=KqtH!#Zj[!!!!'=KqtH!#Zj]!!!!'=KqtH!#Zj^!!!!\" +\n-                \"'=KqtH!#Zjb!!!!'=KqtH!#Zk!!!!!'=KqtH!#Zk6!!!!#=KqtH!#Zk9!!!!%=KqtH!#Zk<!!!!\" +\n-                \"'=KqtH!#Zl>!!!!'=KqtH!#]9R!!!!$=H/Lt!#]I6!!!!#=KqtH!#]Z#!!!!%=KqtH!#^*N!!!!\" +\n-                \"#=KqtH!#^:m!!!!#=KqtH!#_*_!!!!%=J^wI!#`-7!!!!#=KqtH!#`T>!!!!'=KqtH!#`T?!!!!\" +\n-                \"'=KqtH!#`TA!!!!'=KqtH!#`TB!!!!'=KqtH!#`TG!!!!'=KqtH!#`TP!!!!#=KqtH!#`U,!!!!\" +\n-                \"'=KqtH!#`U/!!!!'=KqtH!#`U0!!!!#=KqtH!#`U9!!!!'=KqtH!#aEQ!!!!%=KqtH!#b<)!!!!\" +\n-                \"'=KqtH!#c9-!!!!%=KqtH!#dxC!!!!%=KqtH!#dxE!!!!%=KqtH!#ev$!!!!'=KqtH!#fBi!!!!\" +\n-                \"#=KqtH!#fBj!!!!'=KqtH!#fG)!!!!'=KqtH!#fG+!!!!'=KqtH!#g<d!!!!'=KqtH!#g<e!!!!\" +\n-                \"'=KqtH!#g=J!!!!'=KqtH!#gat!!!!#=KqtH!#s`D!!!!#=J_#p!#sg?!!!!#=J_#p!#t<a!!!!\" +\n-                \"#=KqtH!#t<c!!!!#=KqtH!#trY!!!!$=JiYj!#vA$!!!!'=KqtH!#xs_!!!!'=KqtH!$$rO!!!!\" +\n-                \"#=KqtH!$$rP!!!!#=KqtH!$(!%!!!!'=KqtH!$)]o!!!!%=KqtH!$,@)!!!!'=KqtH!$,k]!!!!\" +\n-                \"'=KqtH!$1]+!!!!%=KqtH!$3IO!!!!%=KqtH!$3J#!!!!'=KqtH!$3J.!!!!'=KqtH!$3J:!!!!\" +\n-                \"#=KqtH!$3JH!!!!#=KqtH!$3JI!!!!#=KqtH!$3JK!!!!%=KqtH!$3JL!!!!'=KqtH!$3JS!!!!\" +\n-                \"'=KqtH!$8+M!!!!#=KqtH!$99d!!!!%=KqtH!$:Lw!!!!#=LK+x!$:N@!!!!#=KqtG!$:NC!!!!\" +\n-                \"#=KqtG!$:hW!!!!'=KqtH!$:i[!!!!'=KqtH!$:ih!!!!'=KqtH!$:it!!!!'=KqtH!$:kO!!!!\" +\n-                \"'=KqtH!$>*B!!!!'=KqtH!$>hD!!!!+=J^x0!$?lW!!!!'=KqtH!$?ll!!!!'=KqtH!$?lm!!!!\" +\n-                \"%=KqtH!$?mi!!!!'=KqtH!$?mx!!!!'=KqtH!$D7]!!!!#=J_#p!$D@T!!!!#=J_#p!$V<g!!!!\" +\n-                \"'=KqtH\";\n-\n-        Set<Cookie> cookies = ServerCookieDecoder.decode(\"bh=\\\"\" + longValue + \"\\\";\");\n-        assertEquals(1, cookies.size());\n-        Cookie c = cookies.iterator().next();\n-        assertEquals(\"bh\", c.name());\n-        assertEquals(longValue, c.value());\n-    }\n-\n-    @Test\n-    public void testDecodingOldRFC2965Cookies() {\n-        String source = \"$Version=\\\"1\\\"; \" +\n-                \"Part_Number1=\\\"Riding_Rocket_0023\\\"; $Path=\\\"/acme/ammo\\\"; \" +\n-                \"Part_Number2=\\\"Rocket_Launcher_0001\\\"; $Path=\\\"/acme\\\"\";\n-\n-        Set<Cookie> cookies = ServerCookieDecoder.decode(source);\n-        Iterator<Cookie> it = cookies.iterator();\n-        Cookie c;\n-\n-        c = it.next();\n-        assertEquals(\"Part_Number1\", c.name());\n-        assertEquals(\"Riding_Rocket_0023\", c.value());\n-\n-        c = it.next();\n-        assertEquals(\"Part_Number2\", c.name());\n-        assertEquals(\"Rocket_Launcher_0001\", c.value());\n-\n-        assertFalse(it.hasNext());\n-    }\n-}"
        },
        {
            "sha": "bf596e4f7a77eab7f623be4661f2c8408f1fd514",
            "filename": "codec-http/src/test/java/io/netty/handler/codec/http/cookie/ClientCookieDecoderTest.java",
            "status": "renamed",
            "additions": 70,
            "deletions": 100,
            "changes": 170,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Ftest%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FClientCookieDecoderTest.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Ftest%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FClientCookieDecoderTest.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Ftest%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FClientCookieDecoderTest.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -13,7 +13,7 @@\n  * License for the specific language governing permissions and limitations\n  * under the License.\n  */\n-package io.netty.handler.codec.http;\n+package io.netty.handler.codec.http.cookie;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n@@ -22,23 +22,25 @@\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+import org.junit.Test;\n+\n+import io.netty.handler.codec.http.HttpHeaderDateFormat;\n+\n import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Collection;\n import java.util.Date;\n import java.util.Iterator;\n import java.util.TimeZone;\n \n-import org.junit.Test;\n-\n public class ClientCookieDecoderTest {\n     @Test\n     public void testDecodingSingleCookieV0() {\n         String cookieString = \"myCookie=myValue;expires=XXX;path=/apathsomewhere;domain=.adomainsomewhere;secure;\";\n         cookieString = cookieString.replace(\"XXX\", HttpHeaderDateFormat.get()\n                 .format(new Date(System.currentTimeMillis() + 50000)));\n \n-        Cookie cookie = ClientCookieDecoder.decode(cookieString);\n+        Cookie cookie = ClientCookieDecoder.STRICT.decode(cookieString);\n         assertNotNull(cookie);\n         assertEquals(\"myValue\", cookie.value());\n         assertEquals(\".adomainsomewhere\", cookie.domain());\n@@ -63,7 +65,7 @@ public void testDecodingSingleCookieV0ExtraParamsIgnored() {\n         String cookieString = \"myCookie=myValue;max-age=50;path=/apathsomewhere;\" +\n                 \"domain=.adomainsomewhere;secure;comment=this is a comment;version=0;\" +\n                 \"commentURL=http://aurl.com;port=\\\"80,8080\\\";discard;\";\n-        Cookie cookie = ClientCookieDecoder.decode(cookieString);\n+        Cookie cookie = ClientCookieDecoder.STRICT.decode(cookieString);\n         assertNotNull(cookie);\n         assertEquals(\"myValue\", cookie.value());\n         assertEquals(\".adomainsomewhere\", cookie.domain());\n@@ -76,7 +78,7 @@ public void testDecodingSingleCookieV0ExtraParamsIgnored() {\n     public void testDecodingSingleCookieV1() {\n         String cookieString = \"myCookie=myValue;max-age=50;path=/apathsomewhere;domain=.adomainsomewhere\"\n                 + \";secure;comment=this is a comment;version=1;\";\n-        Cookie cookie = ClientCookieDecoder.decode(cookieString);\n+        Cookie cookie = ClientCookieDecoder.STRICT.decode(cookieString);\n         assertEquals(\"myValue\", cookie.value());\n         assertNotNull(cookie);\n         assertEquals(\".adomainsomewhere\", cookie.domain());\n@@ -90,7 +92,7 @@ public void testDecodingSingleCookieV1ExtraParamsIgnored() {\n         String cookieString = \"myCookie=myValue;max-age=50;path=/apathsomewhere;\"\n                 + \"domain=.adomainsomewhere;secure;comment=this is a comment;version=1;\"\n                 + \"commentURL=http://aurl.com;port='80,8080';discard;\";\n-        Cookie cookie = ClientCookieDecoder.decode(cookieString);\n+        Cookie cookie = ClientCookieDecoder.STRICT.decode(cookieString);\n         assertNotNull(cookie);\n         assertEquals(\"myValue\", cookie.value());\n         assertEquals(\".adomainsomewhere\", cookie.domain());\n@@ -104,7 +106,7 @@ public void testDecodingSingleCookieV2() {\n         String cookieString = \"myCookie=myValue;max-age=50;path=/apathsomewhere;\"\n                 + \"domain=.adomainsomewhere;secure;comment=this is a comment;version=2;\"\n                 + \"commentURL=http://aurl.com;port=\\\"80,8080\\\";discard;\";\n-        Cookie cookie = ClientCookieDecoder.decode(cookieString);\n+        Cookie cookie = ClientCookieDecoder.STRICT.decode(cookieString);\n         assertNotNull(cookie);\n         assertEquals(\"myValue\", cookie.value());\n         assertEquals(\".adomainsomewhere\", cookie.domain());\n@@ -119,7 +121,7 @@ public void testDecodingComplexCookie() {\n                 + \"domain=.adomainsomewhere;secure;comment=this is a comment;version=2;\"\n                 + \"commentURL=\\\"http://aurl.com\\\";port='80,8080';discard;\";\n \n-        Cookie cookie = ClientCookieDecoder.decode(c1);\n+        Cookie cookie = ClientCookieDecoder.STRICT.decode(c1);\n         assertNotNull(cookie);\n         assertEquals(\"myValue\", cookie.value());\n         assertEquals(\".adomainsomewhere\", cookie.domain());\n@@ -133,16 +135,10 @@ public void testDecodingQuotedCookie() {\n         Collection<String> sources = new ArrayList<String>();\n         sources.add(\"a=\\\"\\\",\");\n         sources.add(\"b=\\\"1\\\",\");\n-        sources.add(\"c=\\\"\\\\\\\"1\\\\\\\"2\\\\\\\"\\\",\");\n-        sources.add(\"d=\\\"1\\\\\\\"2\\\\\\\"3\\\",\");\n-        sources.add(\"e=\\\"\\\\\\\"\\\\\\\"\\\",\");\n-        sources.add(\"f=\\\"1\\\\\\\"\\\\\\\"2\\\",\");\n-        sources.add(\"g=\\\"\\\\\\\\\\\",\");\n-        sources.add(\"h=\\\"';,\\\\x\\\"\");\n \n         Collection<Cookie> cookies = new ArrayList<Cookie>();\n         for (String source : sources) {\n-            cookies.add(ClientCookieDecoder.decode(source));\n+            cookies.add(ClientCookieDecoder.STRICT.decode(source));\n         }\n \n         Iterator<Cookie> it = cookies.iterator();\n@@ -156,30 +152,6 @@ public void testDecodingQuotedCookie() {\n         assertEquals(\"b\", c.name());\n         assertEquals(\"1\", c.value());\n \n-        c = it.next();\n-        assertEquals(\"c\", c.name());\n-        assertEquals(\"\\\"1\\\"2\\\"\", c.value());\n-\n-        c = it.next();\n-        assertEquals(\"d\", c.name());\n-        assertEquals(\"1\\\"2\\\"3\", c.value());\n-\n-        c = it.next();\n-        assertEquals(\"e\", c.name());\n-        assertEquals(\"\\\"\\\"\", c.value());\n-\n-        c = it.next();\n-        assertEquals(\"f\", c.name());\n-        assertEquals(\"1\\\"\\\"2\", c.value());\n-\n-        c = it.next();\n-        assertEquals(\"g\", c.name());\n-        assertEquals(\"\\\\\", c.value());\n-\n-        c = it.next();\n-        assertEquals(\"h\", c.name());\n-        assertEquals(\"';,\\\\x\", c.value());\n-\n         assertFalse(it.hasNext());\n     }\n \n@@ -191,7 +163,7 @@ public void testDecodingGoogleAnalyticsCookie() {\n                 + \"__utmb=48461872.13.10.1258140131; __utmc=48461872; \"\n                 + \"__utmz=48461872.1258140131.1.1.utmcsr=overstock.com|utmccn=(referral)|\"\n                 + \"utmcmd=referral|utmcct=/Home-Garden/Furniture/Clearance,/clearance,/32/dept.html\";\n-        Cookie cookie = ClientCookieDecoder.decode(source);\n+        Cookie cookie = ClientCookieDecoder.STRICT.decode(source);\n \n         assertEquals(\"ARPT\", cookie.name());\n         assertEquals(\"LWUKQPSWRTUN04CKKJI\", cookie.value());\n@@ -206,27 +178,25 @@ public void testDecodingLongDates() {\n \n         String source = \"Format=EU; expires=Fri, 31-Dec-9999 23:59:59 GMT; path=/\";\n \n-        Cookie cookie = ClientCookieDecoder.decode(source);\n+        Cookie cookie = ClientCookieDecoder.STRICT.decode(source);\n \n         assertTrue(Math.abs(expectedMaxAge - cookie.maxAge()) < 2);\n     }\n \n     @Test\n-    public void testDecodingValueWithComma() {\n+    public void testDecodingValueWithCommaFails() {\n         String source = \"UserCookie=timeZoneName=(GMT+04:00) Moscow, St. Petersburg, Volgograd&promocode=&region=BE;\"\n                 + \" expires=Sat, 01-Dec-2012 10:53:31 GMT; path=/\";\n \n-        Cookie cookie = ClientCookieDecoder.decode(source);\n+        Cookie cookie = ClientCookieDecoder.STRICT.decode(source);\n \n-        assertEquals(\n-                \"timeZoneName=(GMT+04:00) Moscow, St. Petersburg, Volgograd&promocode=&region=BE\",\n-                cookie.value());\n+        assertNull(cookie);\n     }\n \n     @Test\n     public void testDecodingWeirdNames1() {\n         String src = \"path=; expires=Mon, 01-Jan-1990 00:00:00 GMT; path=/; domain=.www.google.com\";\n-        Cookie cookie = ClientCookieDecoder.decode(src);\n+        Cookie cookie = ClientCookieDecoder.STRICT.decode(src);\n         assertEquals(\"path\", cookie.name());\n         assertEquals(\"\", cookie.value());\n         assertEquals(\"/\", cookie.path());\n@@ -235,67 +205,67 @@ public void testDecodingWeirdNames1() {\n     @Test\n     public void testDecodingWeirdNames2() {\n         String src = \"HTTPOnly=\";\n-        Cookie cookie = ClientCookieDecoder.decode(src);\n+        Cookie cookie = ClientCookieDecoder.STRICT.decode(src);\n         assertEquals(\"HTTPOnly\", cookie.name());\n         assertEquals(\"\", cookie.value());\n     }\n \n     @Test\n-    public void testDecodingValuesWithCommasAndEquals() {\n+    public void testDecodingValuesWithCommasAndEqualsFails() {\n         String src = \"A=v=1&lg=en-US,it-IT,it&intl=it&np=1;T=z=E\";\n-        Cookie cookie = ClientCookieDecoder.decode(src);\n-        assertEquals(\"A\", cookie.name());\n-        assertEquals(\"v=1&lg=en-US,it-IT,it&intl=it&np=1\", cookie.value());\n+        Cookie cookie = ClientCookieDecoder.STRICT.decode(src);\n+        assertNull(cookie);\n     }\n \n     @Test\n     public void testDecodingLongValue() {\n-        String longValue = \"b!!!$Q!!$ha!!<NC=MN(F!!%#4!!<NC=MN(F!!2!d!!!!#=IvZB!!2,F!!!!'=KqtH!!2-9!!!!\"\n-                + \"'=IvZM!!3f:!!!!$=HbQW!!3g'!!!!%=J^wI!!3g-!!!!%=J^wI!!3g1!!!!$=HbQW!!3g2!!!!\"\n-                + \"$=HbQW!!3g5!!!!%=J^wI!!3g9!!!!$=HbQW!!3gT!!!!$=HbQW!!3gX!!!!#=J^wI!!3gY!!!!\"\n-                + \"#=J^wI!!3gh!!!!$=HbQW!!3gj!!!!$=HbQW!!3gr!!!!$=HbQW!!3gx!!!!#=J^wI!!3h!!!!!\"\n-                + \"$=HbQW!!3h$!!!!#=J^wI!!3h'!!!!$=HbQW!!3h,!!!!$=HbQW!!3h0!!!!%=J^wI!!3h1!!!!\"\n-                + \"#=J^wI!!3h2!!!!$=HbQW!!3h4!!!!$=HbQW!!3h7!!!!$=HbQW!!3h8!!!!%=J^wI!!3h:!!!!\"\n-                + \"#=J^wI!!3h@!!!!%=J^wI!!3hB!!!!$=HbQW!!3hC!!!!$=HbQW!!3hL!!!!$=HbQW!!3hQ!!!!\"\n-                + \"$=HbQW!!3hS!!!!%=J^wI!!3hU!!!!$=HbQW!!3h[!!!!$=HbQW!!3h^!!!!$=HbQW!!3hd!!!!\"\n-                + \"%=J^wI!!3he!!!!%=J^wI!!3hf!!!!%=J^wI!!3hg!!!!$=HbQW!!3hh!!!!%=J^wI!!3hi!!!!\"\n-                + \"%=J^wI!!3hv!!!!$=HbQW!!3i/!!!!#=J^wI!!3i2!!!!#=J^wI!!3i3!!!!%=J^wI!!3i4!!!!\"\n-                + \"$=HbQW!!3i7!!!!$=HbQW!!3i8!!!!$=HbQW!!3i9!!!!%=J^wI!!3i=!!!!#=J^wI!!3i>!!!!\"\n-                + \"%=J^wI!!3iD!!!!$=HbQW!!3iF!!!!#=J^wI!!3iH!!!!%=J^wI!!3iM!!!!%=J^wI!!3iS!!!!\"\n-                + \"#=J^wI!!3iU!!!!%=J^wI!!3iZ!!!!#=J^wI!!3i]!!!!%=J^wI!!3ig!!!!%=J^wI!!3ij!!!!\"\n-                + \"%=J^wI!!3ik!!!!#=J^wI!!3il!!!!$=HbQW!!3in!!!!%=J^wI!!3ip!!!!$=HbQW!!3iq!!!!\"\n-                + \"$=HbQW!!3it!!!!%=J^wI!!3ix!!!!#=J^wI!!3j!!!!!$=HbQW!!3j%!!!!$=HbQW!!3j'!!!!\"\n-                + \"%=J^wI!!3j(!!!!%=J^wI!!9mJ!!!!'=KqtH!!=SE!!<NC=MN(F!!?VS!!<NC=MN(F!!Zw`!!!!\"\n-                + \"%=KqtH!!j+C!!<NC=MN(F!!j+M!!<NC=MN(F!!j+a!!<NC=MN(F!!j,.!!<NC=MN(F!!n>M!!!!\"\n-                + \"'=KqtH!!s1X!!!!$=MMyc!!s1_!!!!#=MN#O!!ypn!!!!'=KqtH!!ypr!!!!'=KqtH!#%h!!!!!\"\n-                + \"%=KqtH!#%o!!!!!'=KqtH!#)H6!!<NC=MN(F!#*%'!!!!%=KqtH!#+k(!!!!'=KqtH!#-E!!!!!\"\n-                + \"'=KqtH!#1)w!!!!'=KqtH!#1)y!!!!'=KqtH!#1*M!!!!#=KqtH!#1*p!!!!'=KqtH!#14Q!!<N\"\n-                + \"C=MN(F!#14S!!<NC=MN(F!#16I!!<NC=MN(F!#16N!!<NC=MN(F!#16X!!<NC=MN(F!#16k!!<N\"\n-                + \"C=MN(F!#17@!!<NC=MN(F!#17A!!<NC=MN(F!#1Cq!!!!'=KqtH!#7),!!!!#=KqtH!#7)b!!!!\"\n-                + \"#=KqtH!#7Ww!!!!'=KqtH!#?cQ!!!!'=KqtH!#His!!!!'=KqtH!#Jrh!!!!'=KqtH!#O@M!!<N\"\n-                + \"C=MN(F!#O@O!!<NC=MN(F!#OC6!!<NC=MN(F!#Os.!!!!#=KqtH!#YOW!!!!#=H/Li!#Zat!!!!\"\n-                + \"'=KqtH!#ZbI!!!!%=KqtH!#Zbc!!!!'=KqtH!#Zbs!!!!%=KqtH!#Zby!!!!'=KqtH!#Zce!!!!\"\n-                + \"'=KqtH!#Zdc!!!!%=KqtH!#Zea!!!!'=KqtH!#ZhI!!!!#=KqtH!#ZiD!!!!'=KqtH!#Zis!!!!\"\n-                + \"'=KqtH!#Zj0!!!!#=KqtH!#Zj1!!!!'=KqtH!#Zj[!!!!'=KqtH!#Zj]!!!!'=KqtH!#Zj^!!!!\"\n-                + \"'=KqtH!#Zjb!!!!'=KqtH!#Zk!!!!!'=KqtH!#Zk6!!!!#=KqtH!#Zk9!!!!%=KqtH!#Zk<!!!!\"\n-                + \"'=KqtH!#Zl>!!!!'=KqtH!#]9R!!!!$=H/Lt!#]I6!!!!#=KqtH!#]Z#!!!!%=KqtH!#^*N!!!!\"\n-                + \"#=KqtH!#^:m!!!!#=KqtH!#_*_!!!!%=J^wI!#`-7!!!!#=KqtH!#`T>!!!!'=KqtH!#`T?!!!!\"\n-                + \"'=KqtH!#`TA!!!!'=KqtH!#`TB!!!!'=KqtH!#`TG!!!!'=KqtH!#`TP!!!!#=KqtH!#`U,!!!!\"\n-                + \"'=KqtH!#`U/!!!!'=KqtH!#`U0!!!!#=KqtH!#`U9!!!!'=KqtH!#aEQ!!!!%=KqtH!#b<)!!!!\"\n-                + \"'=KqtH!#c9-!!!!%=KqtH!#dxC!!!!%=KqtH!#dxE!!!!%=KqtH!#ev$!!!!'=KqtH!#fBi!!!!\"\n-                + \"#=KqtH!#fBj!!!!'=KqtH!#fG)!!!!'=KqtH!#fG+!!!!'=KqtH!#g<d!!!!'=KqtH!#g<e!!!!\"\n-                + \"'=KqtH!#g=J!!!!'=KqtH!#gat!!!!#=KqtH!#s`D!!!!#=J_#p!#sg?!!!!#=J_#p!#t<a!!!!\"\n-                + \"#=KqtH!#t<c!!!!#=KqtH!#trY!!!!$=JiYj!#vA$!!!!'=KqtH!#xs_!!!!'=KqtH!$$rO!!!!\"\n-                + \"#=KqtH!$$rP!!!!#=KqtH!$(!%!!!!'=KqtH!$)]o!!!!%=KqtH!$,@)!!!!'=KqtH!$,k]!!!!\"\n-                + \"'=KqtH!$1]+!!!!%=KqtH!$3IO!!!!%=KqtH!$3J#!!!!'=KqtH!$3J.!!!!'=KqtH!$3J:!!!!\"\n-                + \"#=KqtH!$3JH!!!!#=KqtH!$3JI!!!!#=KqtH!$3JK!!!!%=KqtH!$3JL!!!!'=KqtH!$3JS!!!!\"\n-                + \"'=KqtH!$8+M!!!!#=KqtH!$99d!!!!%=KqtH!$:Lw!!!!#=LK+x!$:N@!!!!#=KqtG!$:NC!!!!\"\n-                + \"#=KqtG!$:hW!!!!'=KqtH!$:i[!!!!'=KqtH!$:ih!!!!'=KqtH!$:it!!!!'=KqtH!$:kO!!!!\"\n-                + \"'=KqtH!$>*B!!!!'=KqtH!$>hD!!!!+=J^x0!$?lW!!!!'=KqtH!$?ll!!!!'=KqtH!$?lm!!!!\"\n-                + \"%=KqtH!$?mi!!!!'=KqtH!$?mx!!!!'=KqtH!$D7]!!!!#=J_#p!$D@T!!!!#=J_#p!$V<g!!!!\"\n-                + \"'=KqtH\";\n-\n-        Cookie cookie = ClientCookieDecoder.decode(\"bh=\\\"\" + longValue\n+        String longValue =\n+                \"b___$Q__$ha__<NC=MN(F__%#4__<NC=MN(F__2_d____#=IvZB__2_F____'=KqtH__2-9____\" +\n+                \"'=IvZM__3f:____$=HbQW__3g'____%=J^wI__3g-____%=J^wI__3g1____$=HbQW__3g2____\" +\n+                \"$=HbQW__3g5____%=J^wI__3g9____$=HbQW__3gT____$=HbQW__3gX____#=J^wI__3gY____\" +\n+                \"#=J^wI__3gh____$=HbQW__3gj____$=HbQW__3gr____$=HbQW__3gx____#=J^wI__3h_____\" +\n+                \"$=HbQW__3h$____#=J^wI__3h'____$=HbQW__3h_____$=HbQW__3h0____%=J^wI__3h1____\" +\n+                \"#=J^wI__3h2____$=HbQW__3h4____$=HbQW__3h7____$=HbQW__3h8____%=J^wI__3h:____\" +\n+                \"#=J^wI__3h@____%=J^wI__3hB____$=HbQW__3hC____$=HbQW__3hL____$=HbQW__3hQ____\" +\n+                \"$=HbQW__3hS____%=J^wI__3hU____$=HbQW__3h[____$=HbQW__3h^____$=HbQW__3hd____\" +\n+                \"%=J^wI__3he____%=J^wI__3hf____%=J^wI__3hg____$=HbQW__3hh____%=J^wI__3hi____\" +\n+                \"%=J^wI__3hv____$=HbQW__3i/____#=J^wI__3i2____#=J^wI__3i3____%=J^wI__3i4____\" +\n+                \"$=HbQW__3i7____$=HbQW__3i8____$=HbQW__3i9____%=J^wI__3i=____#=J^wI__3i>____\" +\n+                \"%=J^wI__3iD____$=HbQW__3iF____#=J^wI__3iH____%=J^wI__3iM____%=J^wI__3iS____\" +\n+                \"#=J^wI__3iU____%=J^wI__3iZ____#=J^wI__3i]____%=J^wI__3ig____%=J^wI__3ij____\" +\n+                \"%=J^wI__3ik____#=J^wI__3il____$=HbQW__3in____%=J^wI__3ip____$=HbQW__3iq____\" +\n+                \"$=HbQW__3it____%=J^wI__3ix____#=J^wI__3j_____$=HbQW__3j%____$=HbQW__3j'____\" +\n+                \"%=J^wI__3j(____%=J^wI__9mJ____'=KqtH__=SE__<NC=MN(F__?VS__<NC=MN(F__Zw`____\" +\n+                \"%=KqtH__j+C__<NC=MN(F__j+M__<NC=MN(F__j+a__<NC=MN(F__j_.__<NC=MN(F__n>M____\" +\n+                \"'=KqtH__s1X____$=MMyc__s1_____#=MN#O__ypn____'=KqtH__ypr____'=KqtH_#%h_____\" +\n+                \"%=KqtH_#%o_____'=KqtH_#)H6__<NC=MN(F_#*%'____%=KqtH_#+k(____'=KqtH_#-E_____\" +\n+                \"'=KqtH_#1)w____'=KqtH_#1)y____'=KqtH_#1*M____#=KqtH_#1*p____'=KqtH_#14Q__<N\" +\n+                \"C=MN(F_#14S__<NC=MN(F_#16I__<NC=MN(F_#16N__<NC=MN(F_#16X__<NC=MN(F_#16k__<N\" +\n+                \"C=MN(F_#17@__<NC=MN(F_#17A__<NC=MN(F_#1Cq____'=KqtH_#7)_____#=KqtH_#7)b____\" +\n+                \"#=KqtH_#7Ww____'=KqtH_#?cQ____'=KqtH_#His____'=KqtH_#Jrh____'=KqtH_#O@M__<N\" +\n+                \"C=MN(F_#O@O__<NC=MN(F_#OC6__<NC=MN(F_#Os.____#=KqtH_#YOW____#=H/Li_#Zat____\" +\n+                \"'=KqtH_#ZbI____%=KqtH_#Zbc____'=KqtH_#Zbs____%=KqtH_#Zby____'=KqtH_#Zce____\" +\n+                \"'=KqtH_#Zdc____%=KqtH_#Zea____'=KqtH_#ZhI____#=KqtH_#ZiD____'=KqtH_#Zis____\" +\n+                \"'=KqtH_#Zj0____#=KqtH_#Zj1____'=KqtH_#Zj[____'=KqtH_#Zj]____'=KqtH_#Zj^____\" +\n+                \"'=KqtH_#Zjb____'=KqtH_#Zk_____'=KqtH_#Zk6____#=KqtH_#Zk9____%=KqtH_#Zk<____\" +\n+                \"'=KqtH_#Zl>____'=KqtH_#]9R____$=H/Lt_#]I6____#=KqtH_#]Z#____%=KqtH_#^*N____\" +\n+                \"#=KqtH_#^:m____#=KqtH_#_*_____%=J^wI_#`-7____#=KqtH_#`T>____'=KqtH_#`T?____\" +\n+                \"'=KqtH_#`TA____'=KqtH_#`TB____'=KqtH_#`TG____'=KqtH_#`TP____#=KqtH_#`U_____\" +\n+                \"'=KqtH_#`U/____'=KqtH_#`U0____#=KqtH_#`U9____'=KqtH_#aEQ____%=KqtH_#b<)____\" +\n+                \"'=KqtH_#c9-____%=KqtH_#dxC____%=KqtH_#dxE____%=KqtH_#ev$____'=KqtH_#fBi____\" +\n+                \"#=KqtH_#fBj____'=KqtH_#fG)____'=KqtH_#fG+____'=KqtH_#g<d____'=KqtH_#g<e____\" +\n+                \"'=KqtH_#g=J____'=KqtH_#gat____#=KqtH_#s`D____#=J_#p_#sg?____#=J_#p_#t<a____\" +\n+                \"#=KqtH_#t<c____#=KqtH_#trY____$=JiYj_#vA$____'=KqtH_#xs_____'=KqtH_$$rO____\" +\n+                \"#=KqtH_$$rP____#=KqtH_$(_%____'=KqtH_$)]o____%=KqtH_$_@)____'=KqtH_$_k]____\" +\n+                \"'=KqtH_$1]+____%=KqtH_$3IO____%=KqtH_$3J#____'=KqtH_$3J.____'=KqtH_$3J:____\" +\n+                \"#=KqtH_$3JH____#=KqtH_$3JI____#=KqtH_$3JK____%=KqtH_$3JL____'=KqtH_$3JS____\" +\n+                \"'=KqtH_$8+M____#=KqtH_$99d____%=KqtH_$:Lw____#=LK+x_$:N@____#=KqtG_$:NC____\" +\n+                \"#=KqtG_$:hW____'=KqtH_$:i[____'=KqtH_$:ih____'=KqtH_$:it____'=KqtH_$:kO____\" +\n+                \"'=KqtH_$>*B____'=KqtH_$>hD____+=J^x0_$?lW____'=KqtH_$?ll____'=KqtH_$?lm____\" +\n+                \"%=KqtH_$?mi____'=KqtH_$?mx____'=KqtH_$D7]____#=J_#p_$D@T____#=J_#p_$V<g____\" +\n+                \"'=KqtH\";\n+\n+        Cookie cookie = ClientCookieDecoder.STRICT.decode(\"bh=\\\"\" + longValue\n                                                    + \"\\\";\");\n         assertEquals(\"bh\", cookie.name());\n         assertEquals(longValue, cookie.value());\n@@ -304,7 +274,7 @@ public void testDecodingLongValue() {\n     @Test\n     public void testIgnoreEmptyDomain() {\n         String emptyDomain = \"sessionid=OTY4ZDllNTgtYjU3OC00MWRjLTkzMWMtNGUwNzk4MTY0MTUw;Domain=;Path=/\";\n-        Cookie cookie = ClientCookieDecoder.decode(emptyDomain);\n+        Cookie cookie = ClientCookieDecoder.STRICT.decode(emptyDomain);\n         assertNull(cookie.domain());\n     }\n }",
            "previous_filename": "codec-http/src/test/java/io/netty/handler/codec/http/ClientCookieDecoderTest.java"
        },
        {
            "sha": "f549b9eb1b0f3d52b912626fab3183457e96511c",
            "filename": "codec-http/src/test/java/io/netty/handler/codec/http/cookie/ClientCookieEncoderTest.java",
            "status": "renamed",
            "additions": 12,
            "deletions": 12,
            "changes": 24,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Ftest%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FClientCookieEncoderTest.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Ftest%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FClientCookieEncoderTest.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Ftest%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FClientCookieEncoderTest.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -13,7 +13,7 @@\n  * License for the specific language governing permissions and limitations\n  * under the License.\n  */\n-package io.netty.handler.codec.http;\n+package io.netty.handler.codec.http.cookie;\n \n import static org.junit.Assert.*;\n \n@@ -27,26 +27,26 @@ public void testEncodingMultipleClientCookies() {\n         String c2 = \"myCookie2=myValue2; \";\n         String c3 = \"myCookie3=myValue3\";\n         Cookie cookie = new DefaultCookie(\"myCookie\", \"myValue\");\n-        cookie.setVersion(1);\n-        cookie.setComment(\"this is a Comment\");\n-        cookie.setCommentUrl(\"http://aurl.com\");\n         cookie.setDomain(\".adomainsomewhere\");\n-        cookie.setDiscard(true);\n         cookie.setMaxAge(50);\n         cookie.setPath(\"/apathsomewhere\");\n-        cookie.setPorts(80, 8080);\n         cookie.setSecure(true);\n         Cookie cookie2 = new DefaultCookie(\"myCookie2\", \"myValue2\");\n-        cookie2.setVersion(1);\n-        cookie2.setComment(\"this is another Comment\");\n-        cookie2.setCommentUrl(\"http://anotherurl.com\");\n         cookie2.setDomain(\".anotherdomainsomewhere\");\n-        cookie2.setDiscard(false);\n         cookie2.setPath(\"/anotherpathsomewhere\");\n         cookie2.setSecure(false);\n         Cookie cookie3 = new DefaultCookie(\"myCookie3\", \"myValue3\");\n-        cookie3.setVersion(1);\n-        String encodedCookie = ClientCookieEncoder.encode(cookie, cookie2, cookie3);\n+        String encodedCookie = ClientCookieEncoder.STRICT.encode(cookie, cookie2, cookie3);\n         assertEquals(c1 + c2 + c3, encodedCookie);\n     }\n+\n+    @Test\n+    public void testWrappedCookieValue() {\n+        ClientCookieEncoder.STRICT.encode(new DefaultCookie(\"myCookie\", \"\\\"foo\\\"\"));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testRejectCookieValueWithSemicolon() {\n+        ClientCookieEncoder.STRICT.encode(new DefaultCookie(\"myCookie\", \"foo;bar\"));\n+    }\n }",
            "previous_filename": "codec-http/src/test/java/io/netty/handler/codec/http/ClientCookieEncoderTest.java"
        },
        {
            "sha": "d0c07646a55298cf7a2fcba7744691893e33df19",
            "filename": "codec-http/src/test/java/io/netty/handler/codec/http/cookie/ServerCookieDecoderTest.java",
            "status": "added",
            "additions": 185,
            "deletions": 0,
            "changes": 185,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Ftest%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FServerCookieDecoderTest.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Ftest%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FServerCookieDecoderTest.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Ftest%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FServerCookieDecoderTest.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright 2014 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.cookie;\n+\n+import org.junit.Test;\n+\n+import io.netty.handler.codec.http.HttpHeaderDateFormat;\n+\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.Set;\n+\n+import static org.junit.Assert.*;\n+\n+public class ServerCookieDecoderTest {\n+    @Test\n+    public void testDecodingSingleCookie() {\n+        String cookieString = \"myCookie=myValue\";\n+        cookieString = cookieString.replace(\"XXX\",\n+                HttpHeaderDateFormat.get().format(new Date(System.currentTimeMillis() + 50000)));\n+\n+        Set<Cookie> cookies = ServerCookieDecoder.STRICT.decode(cookieString);\n+        assertEquals(1, cookies.size());\n+        Cookie cookie = cookies.iterator().next();\n+        assertNotNull(cookie);\n+        assertEquals(\"myValue\", cookie.value());\n+    }\n+\n+    @Test\n+    public void testDecodingMultipleCookies() {\n+        String c1 = \"myCookie=myValue;\";\n+        String c2 = \"myCookie2=myValue2;\";\n+        String c3 = \"myCookie3=myValue3;\";\n+\n+        Set<Cookie> cookies = ServerCookieDecoder.STRICT.decode(c1 + c2 + c3);\n+        assertEquals(3, cookies.size());\n+        Iterator<Cookie> it = cookies.iterator();\n+        Cookie cookie = it.next();\n+        assertNotNull(cookie);\n+        assertEquals(\"myValue\", cookie.value());\n+        cookie = it.next();\n+        assertNotNull(cookie);\n+        assertEquals(\"myValue2\", cookie.value());\n+        cookie = it.next();\n+        assertNotNull(cookie);\n+        assertEquals(\"myValue3\", cookie.value());\n+    }\n+\n+    @Test\n+    public void testDecodingGoogleAnalyticsCookie() {\n+        String source =\n+            \"ARPT=LWUKQPSWRTUN04CKKJI; \" +\n+            \"kw-2E343B92-B097-442c-BFA5-BE371E0325A2=unfinished_furniture; \" +\n+            \"__utma=48461872.1094088325.1258140131.1258140131.1258140131.1; \" +\n+            \"__utmb=48461872.13.10.1258140131; __utmc=48461872; \" +\n+            \"__utmz=48461872.1258140131.1.1.utmcsr=overstock.com|utmccn=(referral)|\" +\n+                    \"utmcmd=referral|utmcct=/Home-Garden/Furniture/Clearance/clearance/32/dept.html\";\n+        Set<Cookie> cookies = ServerCookieDecoder.STRICT.decode(source);\n+        Iterator<Cookie> it = cookies.iterator();\n+        Cookie c;\n+\n+        c = it.next();\n+        assertEquals(\"__utma\", c.name());\n+        assertEquals(\"48461872.1094088325.1258140131.1258140131.1258140131.1\", c.value());\n+\n+        c = it.next();\n+        assertEquals(\"__utmb\", c.name());\n+        assertEquals(\"48461872.13.10.1258140131\", c.value());\n+\n+        c = it.next();\n+        assertEquals(\"__utmc\", c.name());\n+        assertEquals(\"48461872\", c.value());\n+\n+        c = it.next();\n+        assertEquals(\"__utmz\", c.name());\n+        assertEquals(\"48461872.1258140131.1.1.utmcsr=overstock.com|\" +\n+                \"utmccn=(referral)|utmcmd=referral|utmcct=/Home-Garden/Furniture/Clearance/clearance/32/dept.html\",\n+                c.value());\n+\n+        c = it.next();\n+        assertEquals(\"ARPT\", c.name());\n+        assertEquals(\"LWUKQPSWRTUN04CKKJI\", c.value());\n+\n+        c = it.next();\n+        assertEquals(\"kw-2E343B92-B097-442c-BFA5-BE371E0325A2\", c.name());\n+        assertEquals(\"unfinished_furniture\", c.value());\n+\n+        assertFalse(it.hasNext());\n+    }\n+\n+    @Test\n+    public void testDecodingLongValue() {\n+        String longValue =\n+                \"b___$Q__$ha__<NC=MN(F__%#4__<NC=MN(F__2_d____#=IvZB__2_F____'=KqtH__2-9____\" +\n+                \"'=IvZM__3f:____$=HbQW__3g'____%=J^wI__3g-____%=J^wI__3g1____$=HbQW__3g2____\" +\n+                \"$=HbQW__3g5____%=J^wI__3g9____$=HbQW__3gT____$=HbQW__3gX____#=J^wI__3gY____\" +\n+                \"#=J^wI__3gh____$=HbQW__3gj____$=HbQW__3gr____$=HbQW__3gx____#=J^wI__3h_____\" +\n+                \"$=HbQW__3h$____#=J^wI__3h'____$=HbQW__3h_____$=HbQW__3h0____%=J^wI__3h1____\" +\n+                \"#=J^wI__3h2____$=HbQW__3h4____$=HbQW__3h7____$=HbQW__3h8____%=J^wI__3h:____\" +\n+                \"#=J^wI__3h@____%=J^wI__3hB____$=HbQW__3hC____$=HbQW__3hL____$=HbQW__3hQ____\" +\n+                \"$=HbQW__3hS____%=J^wI__3hU____$=HbQW__3h[____$=HbQW__3h^____$=HbQW__3hd____\" +\n+                \"%=J^wI__3he____%=J^wI__3hf____%=J^wI__3hg____$=HbQW__3hh____%=J^wI__3hi____\" +\n+                \"%=J^wI__3hv____$=HbQW__3i/____#=J^wI__3i2____#=J^wI__3i3____%=J^wI__3i4____\" +\n+                \"$=HbQW__3i7____$=HbQW__3i8____$=HbQW__3i9____%=J^wI__3i=____#=J^wI__3i>____\" +\n+                \"%=J^wI__3iD____$=HbQW__3iF____#=J^wI__3iH____%=J^wI__3iM____%=J^wI__3iS____\" +\n+                \"#=J^wI__3iU____%=J^wI__3iZ____#=J^wI__3i]____%=J^wI__3ig____%=J^wI__3ij____\" +\n+                \"%=J^wI__3ik____#=J^wI__3il____$=HbQW__3in____%=J^wI__3ip____$=HbQW__3iq____\" +\n+                \"$=HbQW__3it____%=J^wI__3ix____#=J^wI__3j_____$=HbQW__3j%____$=HbQW__3j'____\" +\n+                \"%=J^wI__3j(____%=J^wI__9mJ____'=KqtH__=SE__<NC=MN(F__?VS__<NC=MN(F__Zw`____\" +\n+                \"%=KqtH__j+C__<NC=MN(F__j+M__<NC=MN(F__j+a__<NC=MN(F__j_.__<NC=MN(F__n>M____\" +\n+                \"'=KqtH__s1X____$=MMyc__s1_____#=MN#O__ypn____'=KqtH__ypr____'=KqtH_#%h_____\" +\n+                \"%=KqtH_#%o_____'=KqtH_#)H6__<NC=MN(F_#*%'____%=KqtH_#+k(____'=KqtH_#-E_____\" +\n+                \"'=KqtH_#1)w____'=KqtH_#1)y____'=KqtH_#1*M____#=KqtH_#1*p____'=KqtH_#14Q__<N\" +\n+                \"C=MN(F_#14S__<NC=MN(F_#16I__<NC=MN(F_#16N__<NC=MN(F_#16X__<NC=MN(F_#16k__<N\" +\n+                \"C=MN(F_#17@__<NC=MN(F_#17A__<NC=MN(F_#1Cq____'=KqtH_#7)_____#=KqtH_#7)b____\" +\n+                \"#=KqtH_#7Ww____'=KqtH_#?cQ____'=KqtH_#His____'=KqtH_#Jrh____'=KqtH_#O@M__<N\" +\n+                \"C=MN(F_#O@O__<NC=MN(F_#OC6__<NC=MN(F_#Os.____#=KqtH_#YOW____#=H/Li_#Zat____\" +\n+                \"'=KqtH_#ZbI____%=KqtH_#Zbc____'=KqtH_#Zbs____%=KqtH_#Zby____'=KqtH_#Zce____\" +\n+                \"'=KqtH_#Zdc____%=KqtH_#Zea____'=KqtH_#ZhI____#=KqtH_#ZiD____'=KqtH_#Zis____\" +\n+                \"'=KqtH_#Zj0____#=KqtH_#Zj1____'=KqtH_#Zj[____'=KqtH_#Zj]____'=KqtH_#Zj^____\" +\n+                \"'=KqtH_#Zjb____'=KqtH_#Zk_____'=KqtH_#Zk6____#=KqtH_#Zk9____%=KqtH_#Zk<____\" +\n+                \"'=KqtH_#Zl>____'=KqtH_#]9R____$=H/Lt_#]I6____#=KqtH_#]Z#____%=KqtH_#^*N____\" +\n+                \"#=KqtH_#^:m____#=KqtH_#_*_____%=J^wI_#`-7____#=KqtH_#`T>____'=KqtH_#`T?____\" +\n+                \"'=KqtH_#`TA____'=KqtH_#`TB____'=KqtH_#`TG____'=KqtH_#`TP____#=KqtH_#`U_____\" +\n+                \"'=KqtH_#`U/____'=KqtH_#`U0____#=KqtH_#`U9____'=KqtH_#aEQ____%=KqtH_#b<)____\" +\n+                \"'=KqtH_#c9-____%=KqtH_#dxC____%=KqtH_#dxE____%=KqtH_#ev$____'=KqtH_#fBi____\" +\n+                \"#=KqtH_#fBj____'=KqtH_#fG)____'=KqtH_#fG+____'=KqtH_#g<d____'=KqtH_#g<e____\" +\n+                \"'=KqtH_#g=J____'=KqtH_#gat____#=KqtH_#s`D____#=J_#p_#sg?____#=J_#p_#t<a____\" +\n+                \"#=KqtH_#t<c____#=KqtH_#trY____$=JiYj_#vA$____'=KqtH_#xs_____'=KqtH_$$rO____\" +\n+                \"#=KqtH_$$rP____#=KqtH_$(_%____'=KqtH_$)]o____%=KqtH_$_@)____'=KqtH_$_k]____\" +\n+                \"'=KqtH_$1]+____%=KqtH_$3IO____%=KqtH_$3J#____'=KqtH_$3J.____'=KqtH_$3J:____\" +\n+                \"#=KqtH_$3JH____#=KqtH_$3JI____#=KqtH_$3JK____%=KqtH_$3JL____'=KqtH_$3JS____\" +\n+                \"'=KqtH_$8+M____#=KqtH_$99d____%=KqtH_$:Lw____#=LK+x_$:N@____#=KqtG_$:NC____\" +\n+                \"#=KqtG_$:hW____'=KqtH_$:i[____'=KqtH_$:ih____'=KqtH_$:it____'=KqtH_$:kO____\" +\n+                \"'=KqtH_$>*B____'=KqtH_$>hD____+=J^x0_$?lW____'=KqtH_$?ll____'=KqtH_$?lm____\" +\n+                \"%=KqtH_$?mi____'=KqtH_$?mx____'=KqtH_$D7]____#=J_#p_$D@T____#=J_#p_$V<g____\" +\n+                \"'=KqtH\";\n+\n+        Set<Cookie> cookies = ServerCookieDecoder.STRICT.decode(\"bh=\\\"\" + longValue + \"\\\";\");\n+        assertEquals(1, cookies.size());\n+        Cookie c = cookies.iterator().next();\n+        assertEquals(\"bh\", c.name());\n+        assertEquals(longValue, c.value());\n+    }\n+\n+    @Test\n+    public void testDecodingOldRFC2965Cookies() {\n+        String source = \"$Version=\\\"1\\\"; \" +\n+                \"Part_Number1=\\\"Riding_Rocket_0023\\\"; $Path=\\\"/acme/ammo\\\"; \" +\n+                \"Part_Number2=\\\"Rocket_Launcher_0001\\\"; $Path=\\\"/acme\\\"\";\n+\n+        Set<Cookie> cookies = ServerCookieDecoder.STRICT.decode(source);\n+        Iterator<Cookie> it = cookies.iterator();\n+        Cookie c;\n+\n+        c = it.next();\n+        assertEquals(\"Part_Number1\", c.name());\n+        assertEquals(\"Riding_Rocket_0023\", c.value());\n+\n+        c = it.next();\n+        assertEquals(\"Part_Number2\", c.name());\n+        assertEquals(\"Rocket_Launcher_0001\", c.value());\n+\n+        assertFalse(it.hasNext());\n+    }\n+\n+    @Test\n+    public void testRejectCookieValueWithSemicolon() {\n+        Set<Cookie> cookies = ServerCookieDecoder.STRICT.decode(\"name=\\\"foo;bar\\\";\");\n+        assertTrue(cookies.isEmpty());\n+    }\n+}"
        },
        {
            "sha": "350499046a0177bb69041b2d4e77c3962c418b0e",
            "filename": "codec-http/src/test/java/io/netty/handler/codec/http/cookie/ServerCookieEncoderTest.java",
            "status": "renamed",
            "additions": 6,
            "deletions": 4,
            "changes": 10,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Ftest%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FServerCookieEncoderTest.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/codec-http%2Fsrc%2Ftest%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FServerCookieEncoderTest.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Ftest%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2Fcookie%2FServerCookieEncoderTest.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -13,10 +13,12 @@\n  * License for the specific language governing permissions and limitations\n  * under the License.\n  */\n-package io.netty.handler.codec.http;\n+package io.netty.handler.codec.http.cookie;\n \n import org.junit.Test;\n \n+import io.netty.handler.codec.http.HttpHeaderDateFormat;\n+\n import java.text.ParseException;\n import java.util.Date;\n import java.util.List;\n@@ -40,7 +42,7 @@ public void testEncodingSingleCookieV0() throws ParseException {\n         cookie.setPath(\"/apathsomewhere\");\n         cookie.setSecure(true);\n \n-        String encodedCookie = ServerCookieEncoder.encode(cookie);\n+        String encodedCookie = ServerCookieEncoder.STRICT.encode(cookie);\n \n         Matcher matcher = Pattern.compile(result).matcher(encodedCookie);\n         assertTrue(matcher.find());\n@@ -52,8 +54,8 @@ public void testEncodingSingleCookieV0() throws ParseException {\n \n     @Test\n     public void testEncodingWithNoCookies() {\n-        String encodedCookie1 = ClientCookieEncoder.encode();\n-        List<String> encodedCookie2 = ServerCookieEncoder.encode();\n+        String encodedCookie1 = ClientCookieEncoder.STRICT.encode();\n+        List<String> encodedCookie2 = ServerCookieEncoder.STRICT.encode();\n         assertNull(encodedCookie1);\n         assertNotNull(encodedCookie2);\n         assertTrue(encodedCookie2.isEmpty());",
            "previous_filename": "codec-http/src/test/java/io/netty/handler/codec/http/ServerCookieEncoderTest.java"
        },
        {
            "sha": "28055597b310b30ccb655d88cfcc06fa1377ca1e",
            "filename": "example/src/main/java/io/netty/example/http/snoop/HttpSnoopClient.java",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/example%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fexample%2Fhttp%2Fsnoop%2FHttpSnoopClient.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/example%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fexample%2Fhttp%2Fsnoop%2FHttpSnoopClient.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/example%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fexample%2Fhttp%2Fsnoop%2FHttpSnoopClient.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -20,14 +20,14 @@\n import io.netty.channel.EventLoopGroup;\n import io.netty.channel.nio.NioEventLoopGroup;\n import io.netty.channel.socket.nio.NioSocketChannel;\n-import io.netty.handler.codec.http.ClientCookieEncoder;\n-import io.netty.handler.codec.http.DefaultCookie;\n import io.netty.handler.codec.http.DefaultFullHttpRequest;\n import io.netty.handler.codec.http.HttpHeaderNames;\n import io.netty.handler.codec.http.HttpHeaderValues;\n import io.netty.handler.codec.http.HttpMethod;\n import io.netty.handler.codec.http.HttpRequest;\n import io.netty.handler.codec.http.HttpVersion;\n+import io.netty.handler.codec.http.cookie.ClientCookieEncoder;\n+import io.netty.handler.codec.http.cookie.DefaultCookie;\n import io.netty.handler.ssl.SslContext;\n import io.netty.handler.ssl.SslContextBuilder;\n import io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n@@ -91,7 +91,7 @@ public static void main(String[] args) throws Exception {\n             // Set some example cookies.\n             request.headers().set(\n                     HttpHeaderNames.COOKIE,\n-                    ClientCookieEncoder.encode(\n+                    ClientCookieEncoder.STRICT.encode(\n                             new DefaultCookie(\"my-cookie\", \"foo\"),\n                             new DefaultCookie(\"another-cookie\", \"bar\")));\n "
        },
        {
            "sha": "69d0a4abc3c594c887fc2df132f00e0064ca7755",
            "filename": "example/src/main/java/io/netty/example/http/snoop/HttpSnoopServerHandler.java",
            "status": "modified",
            "additions": 7,
            "deletions": 7,
            "changes": 14,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/example%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fexample%2Fhttp%2Fsnoop%2FHttpSnoopServerHandler.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/example%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fexample%2Fhttp%2Fsnoop%2FHttpSnoopServerHandler.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/example%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fexample%2Fhttp%2Fsnoop%2FHttpSnoopServerHandler.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -21,7 +21,6 @@\n import io.netty.channel.ChannelHandlerContext;\n import io.netty.channel.SimpleChannelInboundHandler;\n import io.netty.handler.codec.DecoderResult;\n-import io.netty.handler.codec.http.Cookie;\n import io.netty.handler.codec.http.DefaultFullHttpResponse;\n import io.netty.handler.codec.http.FullHttpResponse;\n import io.netty.handler.codec.http.HttpContent;\n@@ -33,8 +32,9 @@\n import io.netty.handler.codec.http.HttpRequest;\n import io.netty.handler.codec.http.LastHttpContent;\n import io.netty.handler.codec.http.QueryStringDecoder;\n-import io.netty.handler.codec.http.ServerCookieDecoder;\n-import io.netty.handler.codec.http.ServerCookieEncoder;\n+import io.netty.handler.codec.http.cookie.Cookie;\n+import io.netty.handler.codec.http.cookie.ServerCookieDecoder;\n+import io.netty.handler.codec.http.cookie.ServerCookieEncoder;\n import io.netty.util.CharsetUtil;\n \n import java.util.List;\n@@ -165,17 +165,17 @@ private boolean writeResponse(HttpObject currentObj, ChannelHandlerContext ctx)\n         // Encode the cookie.\n         String cookieString = request.headers().get(HttpHeaderNames.COOKIE);\n         if (cookieString != null) {\n-            Set<Cookie> cookies = ServerCookieDecoder.decode(cookieString);\n+            Set<Cookie> cookies = ServerCookieDecoder.STRICT.decode(cookieString);\n             if (!cookies.isEmpty()) {\n                 // Reset the cookies if necessary.\n                 for (Cookie cookie: cookies) {\n-                    response.headers().add(HttpHeaderNames.SET_COOKIE, ServerCookieEncoder.encode(cookie));\n+                    response.headers().add(HttpHeaderNames.SET_COOKIE, ServerCookieEncoder.STRICT.encode(cookie));\n                 }\n             }\n         } else {\n             // Browser sent no cookie.  Add some.\n-            response.headers().add(HttpHeaderNames.SET_COOKIE, ServerCookieEncoder.encode(\"key1\", \"value1\"));\n-            response.headers().add(HttpHeaderNames.SET_COOKIE, ServerCookieEncoder.encode(\"key2\", \"value2\"));\n+            response.headers().add(HttpHeaderNames.SET_COOKIE, ServerCookieEncoder.STRICT.encode(\"key1\", \"value1\"));\n+            response.headers().add(HttpHeaderNames.SET_COOKIE, ServerCookieEncoder.STRICT.encode(\"key2\", \"value2\"));\n         }\n \n         // Write the response."
        },
        {
            "sha": "ff31b96ceb64ef09e595bf37fc90af7290607f7e",
            "filename": "example/src/main/java/io/netty/example/http/upload/HttpUploadClient.java",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/example%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fexample%2Fhttp%2Fupload%2FHttpUploadClient.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/example%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fexample%2Fhttp%2Fupload%2FHttpUploadClient.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/example%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fexample%2Fhttp%2Fupload%2FHttpUploadClient.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -21,8 +21,6 @@\n import io.netty.channel.EventLoopGroup;\n import io.netty.channel.nio.NioEventLoopGroup;\n import io.netty.channel.socket.nio.NioSocketChannel;\n-import io.netty.handler.codec.http.ClientCookieEncoder;\n-import io.netty.handler.codec.http.DefaultCookie;\n import io.netty.handler.codec.http.DefaultHttpRequest;\n import io.netty.handler.codec.http.HttpHeaderNames;\n import io.netty.handler.codec.http.HttpHeaderValues;\n@@ -31,6 +29,8 @@\n import io.netty.handler.codec.http.HttpRequest;\n import io.netty.handler.codec.http.HttpVersion;\n import io.netty.handler.codec.http.QueryStringEncoder;\n+import io.netty.handler.codec.http.cookie.ClientCookieEncoder;\n+import io.netty.handler.codec.http.cookie.DefaultCookie;\n import io.netty.handler.codec.http.multipart.DefaultHttpDataFactory;\n import io.netty.handler.codec.http.multipart.DiskAttribute;\n import io.netty.handler.codec.http.multipart.DiskFileUpload;\n@@ -181,7 +181,7 @@ private static List<Entry<String, String>> formget(\n         // headers.set(\"Keep-Alive\",\"300\");\n \n         headers.set(\n-                HttpHeaderNames.COOKIE, ClientCookieEncoder.encode(\n+                HttpHeaderNames.COOKIE, ClientCookieEncoder.STRICT.encode(\n                         new DefaultCookie(\"my-cookie\", \"foo\"),\n                         new DefaultCookie(\"another-cookie\", \"bar\"))\n         );"
        },
        {
            "sha": "ed41134c4cbd136686298d6c0276f10dcb4b1496",
            "filename": "example/src/main/java/io/netty/example/http/upload/HttpUploadServerHandler.java",
            "status": "modified",
            "additions": 6,
            "deletions": 6,
            "changes": 12,
            "blob_url": "https://github.com/netty/netty/blob/97d871a7553a01384b43df855dccdda5205ae77a/example%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fexample%2Fhttp%2Fupload%2FHttpUploadServerHandler.java",
            "raw_url": "https://github.com/netty/netty/raw/97d871a7553a01384b43df855dccdda5205ae77a/example%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fexample%2Fhttp%2Fupload%2FHttpUploadServerHandler.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/example%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fexample%2Fhttp%2Fupload%2FHttpUploadServerHandler.java?ref=97d871a7553a01384b43df855dccdda5205ae77a",
            "patch": "@@ -21,7 +21,6 @@\n import io.netty.channel.ChannelFutureListener;\n import io.netty.channel.ChannelHandlerContext;\n import io.netty.channel.SimpleChannelInboundHandler;\n-import io.netty.handler.codec.http.Cookie;\n import io.netty.handler.codec.http.DefaultFullHttpResponse;\n import io.netty.handler.codec.http.FullHttpResponse;\n import io.netty.handler.codec.http.HttpContent;\n@@ -35,8 +34,9 @@\n import io.netty.handler.codec.http.HttpVersion;\n import io.netty.handler.codec.http.LastHttpContent;\n import io.netty.handler.codec.http.QueryStringDecoder;\n-import io.netty.handler.codec.http.ServerCookieDecoder;\n-import io.netty.handler.codec.http.ServerCookieEncoder;\n+import io.netty.handler.codec.http.cookie.Cookie;\n+import io.netty.handler.codec.http.cookie.ServerCookieDecoder;\n+import io.netty.handler.codec.http.cookie.ServerCookieEncoder;\n import io.netty.handler.codec.http.multipart.Attribute;\n import io.netty.handler.codec.http.multipart.DefaultHttpDataFactory;\n import io.netty.handler.codec.http.multipart.DiskAttribute;\n@@ -125,7 +125,7 @@ public void channelRead0(ChannelHandlerContext ctx, HttpObject msg) throws Excep\n             if (value == null) {\n                 cookies = Collections.emptySet();\n             } else {\n-                cookies = ServerCookieDecoder.decode(value);\n+                cookies = ServerCookieDecoder.STRICT.decode(value);\n             }\n             for (Cookie cookie : cookies) {\n                 responseContent.append(\"COOKIE: \" + cookie + \"\\r\\n\");\n@@ -308,12 +308,12 @@ private void writeResponse(Channel channel) {\n         if (value == null) {\n             cookies = Collections.emptySet();\n         } else {\n-            cookies = ServerCookieDecoder.decode(value);\n+            cookies = ServerCookieDecoder.STRICT.decode(value);\n         }\n         if (!cookies.isEmpty()) {\n             // Reset the cookies if necessary.\n             for (Cookie cookie : cookies) {\n-                response.headers().add(HttpHeaderNames.SET_COOKIE, ServerCookieEncoder.encode(cookie));\n+                response.headers().add(HttpHeaderNames.SET_COOKIE, ServerCookieEncoder.STRICT.encode(cookie));\n             }\n         }\n         // Write the response."
        }
    ]
}