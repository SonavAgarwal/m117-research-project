{
    "sha": "8cf6848f4d4d4917a4551c9aa49dc00f699eb569",
    "node_id": "MDY6Q29tbWl0Njk2NjYxOTo4Y2Y2ODQ4ZjRkNGQ0OTE3YTQ1NTFjOWFhNDlkYzAwZjY5OWViNTY5",
    "commit": {
        "author": {
            "name": "Hooman Broujerdi",
            "email": "hoomanb1@users.noreply.github.com",
            "date": "2017-10-04T07:05:35Z"
        },
        "committer": {
            "name": "Tadayoshi Sato",
            "email": "sato.tadayoshi@gmail.com",
            "date": "2017-10-04T07:05:35Z"
        },
        "message": "ENTESB-6558 - Implement a filter to prevent arbitrary file upload to hawtio",
        "tree": {
            "sha": "76f48bee637b929bfcc2b063a09ae8330e9d18ec",
            "url": "https://api.github.com/repos/hawtio/hawtio/git/trees/76f48bee637b929bfcc2b063a09ae8330e9d18ec"
        },
        "url": "https://api.github.com/repos/hawtio/hawtio/git/commits/8cf6848f4d4d4917a4551c9aa49dc00f699eb569",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/hawtio/hawtio/commits/8cf6848f4d4d4917a4551c9aa49dc00f699eb569",
    "html_url": "https://github.com/hawtio/hawtio/commit/8cf6848f4d4d4917a4551c9aa49dc00f699eb569",
    "comments_url": "https://api.github.com/repos/hawtio/hawtio/commits/8cf6848f4d4d4917a4551c9aa49dc00f699eb569/comments",
    "author": {
        "login": "hoomanb1",
        "id": 3271380,
        "node_id": "MDQ6VXNlcjMyNzEzODA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3271380?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hoomanb1",
        "html_url": "https://github.com/hoomanb1",
        "followers_url": "https://api.github.com/users/hoomanb1/followers",
        "following_url": "https://api.github.com/users/hoomanb1/following{/other_user}",
        "gists_url": "https://api.github.com/users/hoomanb1/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hoomanb1/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hoomanb1/subscriptions",
        "organizations_url": "https://api.github.com/users/hoomanb1/orgs",
        "repos_url": "https://api.github.com/users/hoomanb1/repos",
        "events_url": "https://api.github.com/users/hoomanb1/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hoomanb1/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": true
    },
    "committer": {
        "login": "tadayosi",
        "id": 156692,
        "node_id": "MDQ6VXNlcjE1NjY5Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/156692?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tadayosi",
        "html_url": "https://github.com/tadayosi",
        "followers_url": "https://api.github.com/users/tadayosi/followers",
        "following_url": "https://api.github.com/users/tadayosi/following{/other_user}",
        "gists_url": "https://api.github.com/users/tadayosi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tadayosi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tadayosi/subscriptions",
        "organizations_url": "https://api.github.com/users/tadayosi/orgs",
        "repos_url": "https://api.github.com/users/tadayosi/repos",
        "events_url": "https://api.github.com/users/tadayosi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tadayosi/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "3e9abef36a91f93742be4daf68e98619d44b9689",
            "url": "https://api.github.com/repos/hawtio/hawtio/commits/3e9abef36a91f93742be4daf68e98619d44b9689",
            "html_url": "https://github.com/hawtio/hawtio/commit/3e9abef36a91f93742be4daf68e98619d44b9689"
        }
    ],
    "stats": {
        "total": 925,
        "additions": 881,
        "deletions": 44
    },
    "files": [
        {
            "sha": "a07c765b822a8a5f5593e33a4c6d7af01d59f006",
            "filename": "hawtio-system/src/main/java/io/hawt/web/GitServlet.java",
            "status": "modified",
            "additions": 44,
            "deletions": 10,
            "changes": 54,
            "blob_url": "https://github.com/hawtio/hawtio/blob/8cf6848f4d4d4917a4551c9aa49dc00f699eb569/hawtio-system%2Fsrc%2Fmain%2Fjava%2Fio%2Fhawt%2Fweb%2FGitServlet.java",
            "raw_url": "https://github.com/hawtio/hawtio/raw/8cf6848f4d4d4917a4551c9aa49dc00f699eb569/hawtio-system%2Fsrc%2Fmain%2Fjava%2Fio%2Fhawt%2Fweb%2FGitServlet.java",
            "contents_url": "https://api.github.com/repos/hawtio/hawtio/contents/hawtio-system%2Fsrc%2Fmain%2Fjava%2Fio%2Fhawt%2Fweb%2FGitServlet.java?ref=8cf6848f4d4d4917a4551c9aa49dc00f699eb569",
            "patch": "@@ -17,11 +17,27 @@\n  */\n package io.hawt.web;\n \n-import io.hawt.git.*;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import io.hawt.git.GitFileManager;\n+import io.hawt.git.GitFacade;\n+import io.hawt.git.WriteCallback;\n+import io.hawt.git.WriteContext;\n+import io.hawt.git.GitHelper;\n import io.hawt.util.Files;\n import io.hawt.util.Function;\n import io.hawt.util.Strings;\n import io.hawt.util.Zips;\n+import org.apache.commons.fileupload.FileUploadBase;\n+import org.apache.commons.fileupload.FileUploadException;\n import org.eclipse.jgit.api.errors.GitAPIException;\n import org.osgi.framework.BundleContext;\n import org.osgi.framework.ServiceReference;\n@@ -30,24 +46,18 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import javax.servlet.ServletConfig;\n-import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.List;\n-\n /**\n  */\n public class GitServlet extends UploadServlet implements ServiceTrackerCustomizer {\n     private static final transient Logger LOG = LoggerFactory.getLogger(GitServlet.class);\n \n     private static final int DEFAULT_BUFFER_SIZE = 10240; // 10KB.\n+    private static final String GIT_FILE_UPLOAD_PROPNAME = \"hawtio.upload.git.filter\";\n \n     private BundleContext bundleContext;\n     private ServiceTracker serviceTracker;\n     private GitFileManager gitFacade;\n+    private List<GlobalFileUploadFilter.MagicNumberFileFilter> gitFileUploadFilters;\n \n     @Override\n     public void init(ServletConfig config) throws ServletException {\n@@ -160,7 +170,11 @@ public Object apply(WriteContext context) throws IOException, GitAPIException {\n                 }\n                 List<File> uploadedFiles = null;\n                 try {\n-                    uploadedFiles = uploadFiles(req, resp, file);\n+                    if (isFileUploadFilterConfigured() && !(file.length() <= GlobalFileUploadFilter.getMaxFileSizeAllowed(gitFileUploadFilters))) {\n+                        throw new FileUploadBase.FileUploadIOException(\n+                            new FileUploadException(\"File exceeds its maximum permitted size of bytes.\"));\n+                    }\n+                    uploadedFiles = uploadFiles(req, resp, file, gitFileUploadFilters);\n                 } catch (ServletException e) {\n                     throw new IOException(e);\n                 }\n@@ -245,4 +259,24 @@ public String getPath() {\n             return path;\n         }\n     }\n+\n+    private boolean isFileUploadFilterConfigured() {\n+        boolean configured = false;\n+        String config = System.getProperty(GIT_FILE_UPLOAD_PROPNAME);\n+        try {\n+            if (config != null) {\n+                configured = true;\n+                gitFileUploadFilters = GlobalFileUploadFilter.constructFilters(config, new ArrayList<>());\n+            } else {\n+                configured = false;\n+                if (gitFileUploadFilters == null || gitFileUploadFilters.isEmpty()) {\n+                    gitFileUploadFilters = new ArrayList<>();\n+                }\n+            }\n+        } catch (RuntimeException e) {\n+            LOG.warn(\"Error configuring filter {}\", config);\n+        }\n+\n+        return configured;\n+    }\n }"
        },
        {
            "sha": "83026d5bde16996734380772620941d1716118d7",
            "filename": "hawtio-system/src/main/java/io/hawt/web/GlobalFileUploadFilter.java",
            "status": "added",
            "additions": 444,
            "deletions": 0,
            "changes": 444,
            "blob_url": "https://github.com/hawtio/hawtio/blob/8cf6848f4d4d4917a4551c9aa49dc00f699eb569/hawtio-system%2Fsrc%2Fmain%2Fjava%2Fio%2Fhawt%2Fweb%2FGlobalFileUploadFilter.java",
            "raw_url": "https://github.com/hawtio/hawtio/raw/8cf6848f4d4d4917a4551c9aa49dc00f699eb569/hawtio-system%2Fsrc%2Fmain%2Fjava%2Fio%2Fhawt%2Fweb%2FGlobalFileUploadFilter.java",
            "contents_url": "https://api.github.com/repos/hawtio/hawtio/contents/hawtio-system%2Fsrc%2Fmain%2Fjava%2Fio%2Fhawt%2Fweb%2FGlobalFileUploadFilter.java?ref=8cf6848f4d4d4917a4551c9aa49dc00f699eb569",
            "patch": "@@ -0,0 +1,444 @@\n+package io.hawt.web;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.HashSet;\n+import java.util.Collections;\n+import java.util.zip.ZipInputStream;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.lang.Math.toIntExact;\n+\n+public class GlobalFileUploadFilter {\n+\n+    private static final transient Logger LOG = LoggerFactory.getLogger(GlobalFileUploadFilter.class);\n+    private static final String FILE_UPLOAD_PROPNAME = \"hawtio.upload.filter\";\n+    public static final int ALLOWED_NUMBER_OF_UPLOADS = 10;\n+    private static final String ZIP_SIGNATURE = \"504B0304\";\n+    private List<MagicNumberFileFilter> filters;\n+\n+    public List<MagicNumberFileFilter> getFilterConfig() {\n+        return Collections.unmodifiableList(getFilters());\n+    }\n+\n+    public GlobalFileUploadFilter() {\n+\n+        String config = System.getProperty(FILE_UPLOAD_PROPNAME);\n+        if (config != null) {\n+            LOG.info(\"Configuring file upload using {} configurations\", config);\n+\n+            try {\n+                constructFilters(config, this.getFilters());\n+            } catch (RuntimeException e) {\n+                LOG.warn(\"Error configuring filter {}\", config);\n+            }\n+        }\n+    }\n+\n+    private static List<String> constructDefaultScriptingContent() {\n+        // Scripting content search with offset 0\n+        String[] scriptContentSearch = new String[]{\"#!/usr/bin/python\", \"#!/usr/local/bin/python\", \"#!/bin/sh\",\n+            \"#!/usr/bin/env python\", \"#!/bin/bash\", \"#!/usr/bin/bash\", \"#!/usr/local/bash\", \"#!/usr/local/bin/bash\",\n+            \"#!/usr/bin/env bash\", \"=<?php\", \"=<?\\\\n\", \"=<?\\\\r\", \"#!/usr/local/bin/php\", \"#!/usr/bin/php\",\n+            \"#!/usr/bin/pdmenu\", \"eval \\\"exec perl\", \"eval \\\"exec /bin/perl\", \"eval \\\"exec /usr/bin/perl\",\n+            \"eval \\\"exec /usr/local/bin/perl\", \"eval 'exec perl\", \"eval 'exec /bin/perl\", \"eval 'exec /usr/bin/perl\",\n+            \"eval 'exec /usr/local/bin/perl\", \"eval '(exit $?0)' && eval 'exec\", \"#!/usr/bin/env perl\",\n+            \"#! /usr/bin/env perl\", \"#!/bin/node\", \"#!/usr/bin/node\", \"#!/bin/nodejs\", \"#!/usr/bin/nodejs\",\n+            \"#!/usr/bin/env node\", \"#!/usr/bin/env nodejs\", \"@\", \"echo off\", \"rem\", \"set\", \"<html>\", \"#!/usr/bin/env ruby\",\n+            \"#!/usr/bin/ruby\", \"#!\", \"<script>\", \"goscript\", \"//usr\", \"<%\", \"%>\", \"..\", \"/\", \"\\\\\", \"*\", \"?\", \"%\", \";\", \"#\",\n+            \"$\", \"&\", \"[\", \"]\", \"^\", \"`\", \"~\", \">>\", \"<<\", \"...\", \"#include\", \"stdio.h\", \"perl\"};\n+\n+        List<String> scriptingList = new ArrayList<>();\n+        for (int i = 0; i <= scriptContentSearch.length - 1; i ++) {\n+            scriptingList.add(scriptContentSearch[i]);\n+        }\n+\n+        return scriptingList;\n+    }\n+\n+    static List<MagicNumberFileFilter> constructFilters(String config, List<MagicNumberFileFilter> filters) {\n+        String[] var0 = config.split(\"-\");\n+        for (int i = 0; i <= var0.length - 1; i++) {\n+            MagicNumberFileFilter filter = new MagicNumberFileFilter();\n+            String[] var1 = var0[i].split(\",\");\n+            for (int j = 0; j <= var1.length - 1; j++) {\n+                if (var1[j].toLowerCase().startsWith(\"signature=\")) {\n+                    String value = var1[j].substring(10);\n+                    if (validateString(value)) {\n+                        filter.setMagicNumbers(hexStringToByteArray(value));\n+                    }\n+                }\n+\n+                if (var1[j].toLowerCase().startsWith(\"offset=\")) {\n+                    String value = var1[j].toLowerCase().substring(7);\n+                    if (validateString(value)) {\n+                        filter.setByteOffset(Long.parseLong(value));\n+                    }\n+                }\n+\n+                if (var1[j].toLowerCase().startsWith(\"maxsize=\")) {\n+                    String value = var1[j].substring(8);\n+                    if (validateString(value)) {\n+                        filter.setMaxSize(value.trim());\n+                    }\n+\n+                }\n+\n+                if (var1[j].toLowerCase().startsWith(\"exc=\")) {\n+                    List<String> excns = new ArrayList<>();\n+                    String tmpValue = var1[j].substring(5);\n+                    if (validateString(tmpValue) && tmpValue.charAt(tmpValue.length() - 1) == ']') {\n+                        tmpValue = tmpValue.substring(0, tmpValue.length() - 1);\n+                    }\n+\n+                    String[] vars = tmpValue.split(\"\\\\s+\");\n+                    for (int k = 0; k < vars.length; k ++) {\n+                        excns.add(vars[k]);\n+                    }\n+\n+                    filter.setExceptions(!excns.isEmpty() ? excns : new ArrayList<>());\n+                }\n+            }\n+\n+            filters.add(filter);\n+        }\n+\n+        return filters;\n+    }\n+\n+    private static boolean validateString(String tmpValue) {\n+        return tmpValue != null && tmpValue.length() > 0;\n+    }\n+\n+    protected static byte[] hexStringToByteArray(String s) {\n+        int len = s.length();\n+        byte[] data = new byte[len / 2];\n+        for (int i = 0; i < len; i += 2) {\n+            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)\n+                + Character.digit(s.charAt(i + 1), 16));\n+        }\n+        return data;\n+    }\n+\n+    static long translateFileSize(String size) {\n+\n+        if (size.toLowerCase().trim().contains(\"bytes\")) {\n+            String normalized = size.toLowerCase().replace(\"bytes\", \"\").trim();\n+            return Long.parseLong(!normalized.equals(\"\") ? normalized : \"0\");\n+        }\n+\n+        if (size.toLowerCase().trim().contains(\"kb\")) {\n+            String normalized = size.toLowerCase().replace(\"kb\", \"\").trim();\n+            return 1024L * Long.parseLong(!normalized.equals(\"\") ? normalized : \"0\");\n+        }\n+\n+        if (size.toLowerCase().trim().contains(\"mb\")) {\n+            String normalized = size.toLowerCase().replace(\"mb\", \"\").trim();\n+            return 1048576L * Long.parseLong(!normalized.equals(\"\") ? normalized : \"0\");\n+        }\n+\n+        if (size.toLowerCase().trim().contains(\"gb\")) {\n+            String normalized = size.toLowerCase().replace(\"gb\", \"\").trim();\n+            return 1073741824L * Long.parseLong(!normalized.equals(\"\") ? normalized : \"0\");\n+        }\n+\n+        return 0L;\n+    }\n+\n+    public static synchronized boolean accept(byte[] fileContent, List<MagicNumberFileFilter> filters) {\n+        // By default all files are allowed unless configured via sys. prop\n+        if (filters == null || filters.isEmpty()) {\n+            return true;\n+        }\n+\n+        boolean fileAccepted = false;\n+        for (MagicNumberFileFilter magicNumberFileFilter : filters) {\n+            if (magicNumberFileFilter.getMagicNumbers().length > 0 && fileContent.length >= magicNumberFileFilter.getByteOffset() +\n+                magicNumberFileFilter.getMagicNumbers().length) {\n+                byte[] fileMagicBytes = Arrays.copyOfRange(fileContent, toIntExact(magicNumberFileFilter.getByteOffset()),\n+                    toIntExact(magicNumberFileFilter.getByteOffset()) + magicNumberFileFilter.getMagicNumbers().length);\n+                boolean matched = Arrays.equals(magicNumberFileFilter.getMagicNumbers(), fileMagicBytes);\n+                if (matched) {\n+                    fileAccepted = true;\n+                    //Individual file size check to ensure it complies with configs\n+                    if (magicNumberFileFilter.getMaxSize() != null) {\n+                        String fileSize = FileUtils.byteCountToDisplaySize(fileContent.length);\n+                        if (translateFileSize(fileSize) <= translateFileSize(magicNumberFileFilter.getMaxSize())) {\n+                            fileAccepted = true;\n+                        } else {\n+                            fileAccepted = false;\n+                        }\n+                    }\n+\n+                    /**\n+                     * If this is a zip file inspect the content, at the moment hawtio should only\n+                     * allow zip archive file to be uploaded\n+                     */\n+                    if (Arrays.equals(magicNumberFileFilter.getMagicNumbers(),\n+                        hexStringToByteArray(ZIP_SIGNATURE)) && fileAccepted) {\n+                        try {\n+                            fileAccepted = unzip(fileContent, filters);\n+                        } catch (IOException e) {\n+                            e.printStackTrace();\n+                        }\n+                    }\n+                }\n+            } else if (magicNumberFileFilter.getExceptions() != null) {\n+                ByteArrayOutputStream outputStream = new ByteArrayOutputStream(fileContent.length);\n+                outputStream.write(fileContent, 0, fileContent.length);\n+                Set<String> excList = new HashSet<>();\n+                for (String s: constructDefaultScriptingContent()) {\n+                    if (magicNumberFileFilter.getExceptions() != null &&\n+                        !magicNumberFileFilter.getExceptions().contains(s)) {\n+                        excList.add(s);\n+                    }\n+                }\n+                if (!isAsciiContentDangerous(outputStream, excList)) {\n+                    fileAccepted = true;\n+                }\n+            }\n+        }\n+\n+        return fileAccepted;\n+    }\n+\n+    private static boolean unzip(byte[] fileContent, List<MagicNumberFileFilter> fileFilter) throws IOException {\n+        long maxSize = 5 * 1048576L; // Default size of the unzipped data, 50MB\n+        int tooMany = 100; // Max number of files\n+        int buffer = 512;\n+        ZipInputStream zipInputStream = new ZipInputStream(new ByteArrayInputStream(fileContent));\n+        boolean safe = true;\n+        int entries = 0;\n+        long total = 0;\n+        try {\n+            while ((zipInputStream.getNextEntry()) != null) {\n+                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+                int count;\n+                byte[] data = new byte[buffer];\n+                boolean isAscii = true;\n+                while (total + buffer <= maxSize && (count = zipInputStream.read(data, 0, buffer)) != -1) {\n+                    if (isAscii) {\n+                        isAscii = isAsciiFile(data, count); // Check if the stream is ascii.\n+                    }\n+\n+                    outputStream.write(data, 0, count);\n+                    total += count;\n+                }\n+\n+                if (outputStream.toByteArray().length > 0) {\n+                    // Check the entry file type\n+                    byte[] entryContent = outputStream.toByteArray();\n+                    boolean configured = accept(entryContent, fileFilter);\n+                    if (configured) {\n+                        continue; // valid file\n+                    }\n+\n+                    if (isAscii) {\n+                        if (!configured && isExceptionConfigured(fileFilter)) {\n+                            Set<String> finalProhibitedList = getFinalProhibitedList(fileFilter);\n+\n+                            if (!isAsciiContentDangerous(outputStream, finalProhibitedList)) {\n+                                safe = true;\n+                            } else {\n+                                safe = false;\n+                            }\n+                        }\n+\n+                        if (!configured && !isExceptionConfigured(fileFilter)) {\n+                            if (!isAsciiContentDangerous(outputStream,\n+                                new HashSet<>(constructDefaultScriptingContent()))) {\n+                                safe = true;\n+                            } else {\n+                                safe = false;\n+                            }\n+                        }\n+                    } else safe = false;\n+                }\n+\n+                if (!safe) {\n+                    return safe;\n+                }\n+\n+                if (outputStream != null) {\n+                    outputStream.close();\n+                }\n+            }\n+\n+            zipInputStream.closeEntry();\n+            entries ++;\n+            if (entries > tooMany) {\n+                throw new IllegalStateException(\"Too many files to unzip\");\n+            }\n+\n+            if (total > maxSize) {\n+                throw new IllegalStateException(\"File being unzipped is too big\");\n+            }\n+        } finally {\n+            zipInputStream.close();\n+        }\n+\n+        return safe;\n+    }\n+\n+    static boolean isAsciiFile(byte[] content, int len) {\n+        for (int i = 0; i < len; i ++) {\n+            if ((0x0080 & content[i]) != 0) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    static Set<String> getFinalProhibitedList(List<MagicNumberFileFilter> fileFilter) {\n+        Set<String> finalProhibitedList = new HashSet<>();\n+\n+        // Checking for exceptions: Nested loop should not be inefficient\n+        // as the filter usually does not grow unexpectedly\n+        for (String s: constructDefaultScriptingContent()) {\n+            for (MagicNumberFileFilter m: fileFilter) {\n+                if (m.getExceptions() != null && !m.getExceptions().contains(s)) {\n+                    finalProhibitedList.add(s);\n+                }\n+            }\n+        }\n+        return finalProhibitedList;\n+    }\n+\n+    private static boolean isExceptionConfigured(List<MagicNumberFileFilter> fileFilter) {\n+        boolean configured = true;\n+        for (MagicNumberFileFilter filter: fileFilter) {\n+            if (filter.getExceptions() == null) {\n+                configured = false;\n+            } else {\n+                configured = true;\n+            }\n+        }\n+        return configured;\n+    }\n+\n+    static boolean isAsciiContentDangerous(ByteArrayOutputStream outputStream,\n+                                           Set<String> finalProhibitedList) {\n+        boolean dangerousContentDetected = false;\n+\n+        StringBuilder builder = new StringBuilder();\n+        for (byte b: outputStream.toByteArray()) {\n+            builder.append((char)b);\n+        }\n+\n+        for (String s: finalProhibitedList) {\n+            if (builder.toString().startsWith(s) || builder.toString().contains(s)) {\n+                dangerousContentDetected = true; // script file detected\n+            }\n+        }\n+\n+        return dangerousContentDetected;\n+    }\n+\n+    /**\n+     * Getting the maximum file size allowed from the config\n+     */\n+    public static long getMaxFileSizeAllowed(List<MagicNumberFileFilter> filters) {\n+        if (filters.size() == 0) {\n+            return -1L; // Default file size unlimited\n+        }\n+\n+        long maxSize = -1L;\n+        try {\n+            long[] fileSizes = new long[filters.size()];\n+            for (int i = 0; i <= filters.size() - 1; i ++) {\n+                fileSizes[i] = translateFileSize(filters.get(i).getMaxSize());\n+            }\n+\n+            maxSize = fileSizes[0];\n+            for (int j = 0; j <= fileSizes.length - 1; j ++) {\n+                if (maxSize == fileSizes[j]) {\n+                    continue;\n+                }\n+\n+                if (fileSizes[j] > maxSize) {\n+                    maxSize = fileSizes[j];\n+                }\n+            }\n+        } catch (RuntimeException e) {\n+            LOG.error(\"Error calculating max file size\");\n+        }\n+\n+        return maxSize;\n+    }\n+\n+    public static GlobalFileUploadFilter newFileUploadFilter() {\n+        return new GlobalFileUploadFilter();\n+    }\n+\n+    private List<MagicNumberFileFilter> getFilters() {\n+        if (this.filters == null) {\n+            this.filters = new ArrayList<>();\n+        }\n+\n+        return this.filters;\n+    }\n+\n+    /**\n+     * Hold a snapshot of values to be passed to an GlobalFileUploadFilter.\n+     */\n+    public static final class MagicNumberFileFilter {\n+        private byte[] magicNumbers;\n+        private long byteOffset;\n+        private String maxSize;\n+        private List<String> exceptions;\n+\n+        public MagicNumberFileFilter() {\n+            this.magicNumbers = new byte[0];\n+            this.maxSize = \"200bytes\";\n+        }\n+\n+        public byte[] getMagicNumbers() {\n+            return magicNumbers;\n+        }\n+\n+        public void setMagicNumbers(byte[] magicNumbers) {\n+            if (magicNumbers.length == 0) {\n+                throw new IllegalArgumentException(\"The magic number must contain at least one byte\");\n+            }\n+            this.magicNumbers = magicNumbers;\n+        }\n+\n+        public long getByteOffset() {\n+            return byteOffset;\n+        }\n+\n+        public void setByteOffset(long byteOffset) {\n+            if (byteOffset < 0L) {\n+                throw new IllegalArgumentException(\"The offset cannot be negative\");\n+            }\n+            this.byteOffset = byteOffset;\n+        }\n+\n+        public String getMaxSize() {\n+            return maxSize;\n+        }\n+\n+        public void setMaxSize(String maxSize) {\n+            if (maxSize != null) {\n+                this.maxSize = maxSize;\n+            }\n+        }\n+\n+        public List<String> getExceptions() {\n+            return exceptions;\n+        }\n+\n+        public void setExceptions(List<String> exceptions) {\n+            this.exceptions = exceptions;\n+        }\n+    }\n+}"
        },
        {
            "sha": "69861b370b1fdf0caad7ed41d21450df6035b25d",
            "filename": "hawtio-system/src/main/java/io/hawt/web/UploadServlet.java",
            "status": "modified",
            "additions": 55,
            "deletions": 34,
            "changes": 89,
            "blob_url": "https://github.com/hawtio/hawtio/blob/8cf6848f4d4d4917a4551c9aa49dc00f699eb569/hawtio-system%2Fsrc%2Fmain%2Fjava%2Fio%2Fhawt%2Fweb%2FUploadServlet.java",
            "raw_url": "https://github.com/hawtio/hawtio/raw/8cf6848f4d4d4917a4551c9aa49dc00f699eb569/hawtio-system%2Fsrc%2Fmain%2Fjava%2Fio%2Fhawt%2Fweb%2FUploadServlet.java",
            "contents_url": "https://api.github.com/repos/hawtio/hawtio/contents/hawtio-system%2Fsrc%2Fmain%2Fjava%2Fio%2Fhawt%2Fweb%2FUploadServlet.java?ref=8cf6848f4d4d4917a4551c9aa49dc00f699eb569",
            "patch": "@@ -1,10 +1,10 @@\n package io.hawt.web;\n \n-import java.io.File;\n-import java.io.IOException;\n-import java.io.PrintWriter;\n+\n+import java.io.*;\n import java.util.ArrayList;\n import java.util.List;\n+\n import javax.servlet.ServletContext;\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServlet;\n@@ -18,6 +18,7 @@\n import org.apache.commons.fileupload.ProgressListener;\n import org.apache.commons.fileupload.disk.DiskFileItemFactory;\n import org.apache.commons.fileupload.servlet.ServletFileUpload;\n+import org.apache.commons.io.IOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -34,14 +35,17 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n         String uploadDirectory = UploadManager.UPLOAD_DIRECTORY;\n         File uploadDir = new File(uploadDirectory);\n \n-        uploadFiles(request, response, uploadDir);\n+        GlobalFileUploadFilter globalFilter = GlobalFileUploadFilter.newFileUploadFilter();\n+        uploadFiles(request, response, uploadDir, globalFilter.getFilterConfig());\n     }\n \n-    protected List<File> uploadFiles(HttpServletRequest request, HttpServletResponse response, File uploadDir) throws IOException, ServletException {\n+    protected List<File> uploadFiles(HttpServletRequest request, HttpServletResponse response,\n+                                     File uploadDir, List<GlobalFileUploadFilter.MagicNumberFileFilter> filters) throws IOException, ServletException {\n         response.setContentType(\"text/html\");\n         final PrintWriter out = response.getWriter();\n         List<File> uploadedFiles = new ArrayList<>();\n         boolean isMultipart = ServletFileUpload.isMultipartContent(request);\n+\n         if (isMultipart) {\n             ServletContext context = this.getServletConfig().getServletContext();\n             if (!uploadDir.exists()) {\n@@ -52,6 +56,8 @@ protected List<File> uploadFiles(HttpServletRequest request, HttpServletResponse\n             }\n             DiskFileItemFactory factory = UploadManager.newDiskFileItemFactory(context, uploadDir);\n             ServletFileUpload upload = new ServletFileUpload(factory);\n+            // Setting max file size allowed from config\n+            upload.setFileSizeMax(GlobalFileUploadFilter.getMaxFileSizeAllowed(filters));\n \n             String targetDirectory = null;\n             List<File> files = new ArrayList<File>();\n@@ -76,38 +82,46 @@ public void update(long pBytesRead, long pContentLength, int pItems) {\n \n             try {\n                 List<FileItem> items = upload.parseRequest(request);\n+                if (items.size() > GlobalFileUploadFilter.ALLOWED_NUMBER_OF_UPLOADS) {\n+                    response.sendError(HttpServletResponse.SC_FORBIDDEN, \"Uploaded files exceed the maximum allowed number of files\");\n+                }\n+\n                 for (FileItem item : items) {\n-                    if (item.isFormField()) {\n-                        String name = item.getFieldName();\n-                        String value = item.getString();\n-                        LOG.info(\"Got form field {} with value {}\", name, value);\n-                        if (name.equals(\"parent\")) {\n-                            targetDirectory = value;\n+                    if (fileAllowed(item, filters)) {\n+                        if (item.isFormField()) {\n+                            String name = item.getFieldName();\n+                            String value = item.getString();\n+                            LOG.info(\"Got form field {} with value {}\", name, value);\n+                            if (name.equals(\"parent\")) {\n+                                targetDirectory = value;\n+                            }\n+                        } else {\n+                            String fieldName = item.getFieldName();\n+                            String fileName = item.getName();\n+                            String contentType = item.getContentType();\n+                            long sizeInBytes = item.getSize();\n+\n+                            fileName = Strings.sanitize(fileName);\n+\n+                            LOG.info(\"Got file upload, fieldName: {} fileName: {} contentType: {} size: {}\", new Object[]{fieldName, fileName, contentType, sizeInBytes});\n+\n+                            if (fileName.equals(\"\")) {\n+                                LOG.info(\"Skipping field \" + fieldName + \" no filename given\");\n+                                continue;\n+                            }\n+                            File target = new File(uploadDir, fileName);\n+\n+                            try {\n+                                item.write(target);\n+                                files.add(target);\n+                                LOG.info(\"Wrote to file: {}\", target.getAbsoluteFile());\n+                            } catch (Exception e) {\n+                                LOG.warn(\"Failed to write to {} due to {}\", target, e);\n+                                //throw new RuntimeException(e);\n+                            }\n                         }\n                     } else {\n-                        String fieldName = item.getFieldName();\n-                        String fileName = item.getName();\n-                        String contentType = item.getContentType();\n-                        long sizeInBytes = item.getSize();\n-\n-                        fileName = Strings.sanitize(fileName);\n-\n-                        LOG.info(\"Got file upload, fieldName: {} fileName: {} contentType: {} size: {}\", new Object[]{fieldName, fileName, contentType, sizeInBytes});\n-\n-                        if (fileName.equals(\"\")) {\n-                            LOG.info(\"Skipping field \" + fieldName + \" no filename given\");\n-                            continue;\n-                        }\n-                        File target = new File(uploadDir, fileName);\n-\n-                        try {\n-                            item.write(target);\n-                            files.add(target);\n-                            LOG.info(\"Wrote to file: {}\", target.getAbsoluteFile());\n-                        } catch (Exception e) {\n-                            LOG.warn(\"Failed to write to {} due to {}\", target, e);\n-                            //throw new RuntimeException(e);\n-                        }\n+                        throw new RuntimeException(\"File is not allowed to be uploaded\");\n                     }\n                 }\n             } catch (FileUploadException e) {\n@@ -143,4 +157,11 @@ public void update(long pBytesRead, long pContentLength, int pItems) {\n         return uploadedFiles;\n     }\n \n+    private boolean fileAllowed(FileItem fileItem, List<GlobalFileUploadFilter.MagicNumberFileFilter> filters) throws IOException {\n+        InputStream inputStream = fileItem.getInputStream();\n+        byte[] fileContent = IOUtils.toByteArray(inputStream, fileItem.getSize());\n+        boolean result = GlobalFileUploadFilter.accept(fileContent, filters);\n+        inputStream.close();\n+        return result;\n+    }\n }"
        },
        {
            "sha": "3eabd957fdaf2401ebe004a5f0a47dbb2d2b2e00",
            "filename": "hawtio-system/src/test/java/io/hawt/web/GitFileUploadFilterTest.java",
            "status": "added",
            "additions": 76,
            "deletions": 0,
            "changes": 76,
            "blob_url": "https://github.com/hawtio/hawtio/blob/8cf6848f4d4d4917a4551c9aa49dc00f699eb569/hawtio-system%2Fsrc%2Ftest%2Fjava%2Fio%2Fhawt%2Fweb%2FGitFileUploadFilterTest.java",
            "raw_url": "https://github.com/hawtio/hawtio/raw/8cf6848f4d4d4917a4551c9aa49dc00f699eb569/hawtio-system%2Fsrc%2Ftest%2Fjava%2Fio%2Fhawt%2Fweb%2FGitFileUploadFilterTest.java",
            "contents_url": "https://api.github.com/repos/hawtio/hawtio/contents/hawtio-system%2Fsrc%2Ftest%2Fjava%2Fio%2Fhawt%2Fweb%2FGitFileUploadFilterTest.java?ref=8cf6848f4d4d4917a4551c9aa49dc00f699eb569",
            "patch": "@@ -0,0 +1,76 @@\n+package io.hawt.web;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class GitFileUploadFilterTest {\n+\n+\n+    List<GlobalFileUploadFilter.MagicNumberFileFilter> gitFilters;\n+    private static final String GIT_CONFIG = \"signature=504B0304,offset=0,maxSize=10mb,exc=[@ [ ] # * / & % ? ; $]\";\n+\n+    @Before\n+    public void setUp() {\n+        gitFilters = new ArrayList<>(GlobalFileUploadFilter.constructFilters(GIT_CONFIG, new ArrayList<>()));\n+    }\n+\n+    @Test\n+    public void testFabricProfileUpload_GoodContent() throws IOException {\n+        byte[] profileBytes = getFabricProfile();\n+        boolean result = GlobalFileUploadFilter.accept(profileBytes, gitFilters);\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void testFileContainsExceptions_1() {\n+        String fileContent = \"mem.pools.*.used\";\n+        byte[] fileByteContent = fileContent.getBytes();\n+        Set<String> prohibitedList = GlobalFileUploadFilter.getFinalProhibitedList(gitFilters);\n+        boolean result = GlobalFileUploadFilter.isAsciiContentDangerous(getFileContentByteStreams(fileByteContent), prohibitedList);\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void testFabricProfileUpload_BadContent() throws IOException {\n+        String fileContent = \"rem   lets enable stand alone mode\";\n+        byte[] fileByteContent = fileContent.getBytes();\n+        Set<String> prohibitedList = GlobalFileUploadFilter.getFinalProhibitedList(gitFilters);\n+        boolean result = GlobalFileUploadFilter.isAsciiContentDangerous(getFileContentByteStreams(fileByteContent), prohibitedList);\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void testShouldPreventExcessiveFileSize() throws IOException {\n+        String GIT_CONFIG = \"signature=504B0304,offset=0,maxSize=20kb,exc=[@ [ ] # * / & % ? ; $]\";\n+        byte[] profileBytes = getFabricProfile();\n+        List<GlobalFileUploadFilter.MagicNumberFileFilter> filters =\n+            GlobalFileUploadFilter.constructFilters(GIT_CONFIG, new ArrayList<>());\n+        long maxFileSizeAllowed = GlobalFileUploadFilter.getMaxFileSizeAllowed(filters);\n+        assertTrue(!(profileBytes.length <= maxFileSizeAllowed));\n+\n+    }\n+\n+    private ByteArrayOutputStream getFileContentByteStreams(byte[] fileByteContent) {\n+        ByteArrayOutputStream outputStream = new ByteArrayOutputStream(fileByteContent.length);\n+        outputStream.write(fileByteContent, 0, fileByteContent.length);\n+        return outputStream;\n+    }\n+\n+    private byte[] getFabricProfile() throws IOException {\n+        File profile = new File(\"src/test/resources/data/default.zip\");\n+        FileInputStream profileInputStream = new FileInputStream(profile);\n+        return IOUtils.toByteArray(profileInputStream);\n+    }\n+}"
        },
        {
            "sha": "dc86349ea7eeaa2bc42216799321dbfdc1a6b6b1",
            "filename": "hawtio-system/src/test/java/io/hawt/web/GlobalFileUploadFilterTest.java",
            "status": "added",
            "additions": 262,
            "deletions": 0,
            "changes": 262,
            "blob_url": "https://github.com/hawtio/hawtio/blob/8cf6848f4d4d4917a4551c9aa49dc00f699eb569/hawtio-system%2Fsrc%2Ftest%2Fjava%2Fio%2Fhawt%2Fweb%2FGlobalFileUploadFilterTest.java",
            "raw_url": "https://github.com/hawtio/hawtio/raw/8cf6848f4d4d4917a4551c9aa49dc00f699eb569/hawtio-system%2Fsrc%2Ftest%2Fjava%2Fio%2Fhawt%2Fweb%2FGlobalFileUploadFilterTest.java",
            "contents_url": "https://api.github.com/repos/hawtio/hawtio/contents/hawtio-system%2Fsrc%2Ftest%2Fjava%2Fio%2Fhawt%2Fweb%2FGlobalFileUploadFilterTest.java?ref=8cf6848f4d4d4917a4551c9aa49dc00f699eb569",
            "patch": "@@ -0,0 +1,262 @@\n+package io.hawt.web;\n+\n+import java.io.IOException;\n+import java.io.FileInputStream;\n+import java.io.File;\n+import java.io.ObjectOutputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ByteArrayInputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.zip.ZipInputStream;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+public class GlobalFileUploadFilterTest {\n+\n+    @Test\n+    public void testPreventsJavaSerializedFileUpload() throws IOException {\n+        System.setProperty(\"hawtio.upload.filter\", \"signature=D0CF11E0A1B11AE1,offset=2,maxSize=250kb\");\n+        GlobalFileUploadFilter uploadFilter = GlobalFileUploadFilter.newFileUploadFilter();\n+        UploadServlet uploadServlet = new UploadServlet();\n+        byte[] bytes = serialize(uploadServlet);\n+        assertFalse(uploadFilter.accept(bytes, uploadFilter.getFilterConfig()));\n+    }\n+\n+    @Test\n+    public void testAllowsJavaSerializedFileUpload() throws IOException {\n+        System.setProperty(\"hawtio.upload.filter\", \"signature=ACED,offset=0,maxSize=250bytes\");\n+        GlobalFileUploadFilter uploadFilter = GlobalFileUploadFilter.newFileUploadFilter();\n+        UploadServlet uploadServlet = new UploadServlet();\n+        byte[] bytes = serialize(uploadServlet);\n+        assertTrue(uploadFilter.accept(bytes, uploadFilter.getFilterConfig()));\n+    }\n+\n+    @Test\n+    public void testAllowsTarFileUploadButBlocksJarFileWithSizeRestriction() throws IOException {\n+        System.setProperty(\"hawtio.upload.filter\",\n+            \"signature=7573746172,offset=257,maxSize=10kb-signature=504B0304,offset=0,maxSize=1kb\");\n+\n+        GlobalFileUploadFilter uploadFilter = GlobalFileUploadFilter.newFileUploadFilter();\n+\n+        File jarFile = new File(\"src/test/resources/data/jar-file-1.0.jar\");\n+        assertNotNull(jarFile);\n+        FileInputStream jarInputStream = new FileInputStream(jarFile);\n+        byte[] jarBytes = IOUtils.toByteArray(jarInputStream);\n+        assertFalse(uploadFilter.accept(jarBytes, uploadFilter.getFilterConfig()));\n+        jarInputStream.close();\n+\n+        File tarFile = new File(\"src/test/resources/data/test.tar\");\n+        assertNotNull(jarFile);\n+\n+        FileInputStream tarInputStream = new FileInputStream(tarFile);\n+        byte[] tarBytes = IOUtils.toByteArray(tarInputStream);\n+        assertTrue(uploadFilter.accept(tarBytes, uploadFilter.getFilterConfig()));\n+        tarInputStream.close();\n+    }\n+\n+    @Test\n+    public void testAllowsJavaSerializedFileExceedsFileSizeUpload() throws IOException {\n+        System.setProperty(\"hawtio.upload.filter\", \"signature=ACED,offset=0,maxSize=100bytes\");\n+        GlobalFileUploadFilter uploadFilter = GlobalFileUploadFilter.newFileUploadFilter();\n+        UploadServlet uploadServlet = new UploadServlet();\n+        byte[] bytes = serialize(uploadServlet);\n+        assertFalse(uploadFilter.accept(bytes, uploadFilter.getFilterConfig()));\n+    }\n+\n+    @Test\n+    public void testGetsFileSize() throws IOException {\n+        UploadServlet uploadServlet = new UploadServlet();\n+        byte[] bytes = serialize(uploadServlet);\n+        assertEquals(\"134 bytes\", FileUtils.byteCountToDisplaySize(bytes.length));\n+    }\n+\n+    @Test\n+    public void testMaxFileSize() {\n+        String configs = \"signature=7573746172,offset=257,maxSize=10kb-signature=504B0304,offset=0,maxSize=1kb-\" +\n+            \"signature=504B0304,offset=0,maxSize=25mb\";\n+        List<GlobalFileUploadFilter.MagicNumberFileFilter> filters =\n+            GlobalFileUploadFilter.constructFilters(configs, new ArrayList<>());\n+        long max = GlobalFileUploadFilter.getMaxFileSizeAllowed(filters);\n+        assertEquals(26214400L, max);\n+    }\n+\n+    @Test\n+    public void testExceptions() {\n+        String configs = \"signature=7573746172,offset=257,maxSize=10kb,exc=[` ^ ...]-signature=504B0304,offset=0,maxSize=1kb-\" +\n+            \"signature=504B0304,offset=0,maxSize=25mb,exc=[@ ? %]\";\n+        List<String> _1expected = new ArrayList<>(Arrays.asList(\"@\", \"?\", \"%\"));\n+        List<String> _2expected = new ArrayList<>(Arrays.asList(\"`\", \"^\", \"...\"));\n+        List<GlobalFileUploadFilter.MagicNumberFileFilter> filters =\n+            GlobalFileUploadFilter.constructFilters(configs, new ArrayList<>());\n+        for (GlobalFileUploadFilter.MagicNumberFileFilter filter: filters) {\n+            if (filter.getMaxSize().equals(\"25mb\")) {\n+                for (String s: filter.getExceptions()) {\n+                    _1expected.contains(s);\n+                }\n+            }\n+\n+            if (filter.getMaxSize().equals(\"10kb\")) {\n+                for (String s: filter.getExceptions()) {\n+                    _2expected.contains(s);\n+                }\n+            }\n+        }\n+\n+    }\n+\n+    @Test\n+    public void testTreanslateFileSize() {\n+\n+        long byteSize = GlobalFileUploadFilter.translateFileSize(\"100 Bytes\");\n+        assertEquals(100L, byteSize);\n+\n+        long byteSize_1 = GlobalFileUploadFilter.translateFileSize(\"Bytes\");\n+        assertEquals(0L, byteSize_1);\n+\n+        long kiloByteSize = GlobalFileUploadFilter.translateFileSize(\"97 KB\");\n+        assertEquals(99328L, kiloByteSize);\n+\n+        long megaByteSize = GlobalFileUploadFilter.translateFileSize(\"25 mb\");\n+        assertEquals(26214400L, megaByteSize);\n+\n+        long gigaByteSize = GlobalFileUploadFilter.translateFileSize(\"14 GB\");\n+        assertEquals(15032385536L, gigaByteSize);\n+    }\n+\n+    @Test\n+    public void testInspectGoodZipEntryPasses() throws IOException {\n+        System.setProperty(\"hawtio.upload.filter\", \"signature=504B0304,offset=0,maxSize=1kb\");\n+        File goodZip = new File(\"src/test/resources/data/goodcontent.zip\");\n+        FileInputStream jarInputStream = new FileInputStream(goodZip);\n+        byte[] goodZipBytes = IOUtils.toByteArray(jarInputStream);\n+        GlobalFileUploadFilter filter = GlobalFileUploadFilter.newFileUploadFilter();\n+        boolean b = GlobalFileUploadFilter.accept(goodZipBytes, filter.getFilterConfig());\n+        assertTrue(b);\n+    }\n+\n+    @Test\n+    public void testInspectBadZipEntryFails() throws IOException {\n+        System.setProperty(\"hawtio.upload.filter\", \"signature=504B0304,offset=0,maxSize=200kb\");\n+        File goodZip = new File(\"src/test/resources/data/badcontent.zip\");\n+        FileInputStream jarInputStream = new FileInputStream(goodZip);\n+        byte[] goodZipBytes = IOUtils.toByteArray(jarInputStream);\n+        GlobalFileUploadFilter filter = GlobalFileUploadFilter.newFileUploadFilter();\n+        boolean b = GlobalFileUploadFilter.accept(goodZipBytes, filter.getFilterConfig());\n+        assertFalse(b);\n+    }\n+\n+    @Test\n+    public void testInspectExceptions() throws IOException {\n+        System.setProperty(\"hawtio.upload.filter\", \"signature=504B0304,offset=0,maxSize=200kb,exc=[@ [ ]]\");\n+        File zipContainsException = new File(\"src/test/resources/data/exception.zip\");\n+        FileInputStream zipInputStream = new FileInputStream(zipContainsException);\n+        byte[] goodZipBytes = IOUtils.toByteArray(zipInputStream);\n+        GlobalFileUploadFilter filter = GlobalFileUploadFilter.newFileUploadFilter();\n+        boolean b = GlobalFileUploadFilter.accept(goodZipBytes, filter.getFilterConfig());\n+        assertTrue(b);\n+    }\n+\n+    @Test\n+    public void testConfiguredZipContent() throws IOException {\n+        System.setProperty(\"hawtio.upload.filter\", \"signature=504B0304,offset=0,maxSize=200kb-signature=CAFEBABE,offset=0,maxSize=550bytes\");\n+        File zipContainAllowed = new File(\"src/test/resources/data/allowedContent.zip\");\n+        FileInputStream zipInputStream = new FileInputStream(zipContainAllowed);\n+        byte[] zipBytes = IOUtils.toByteArray(zipInputStream);\n+        GlobalFileUploadFilter filter = GlobalFileUploadFilter.newFileUploadFilter();\n+        boolean b = GlobalFileUploadFilter.accept(zipBytes, filter.getFilterConfig());\n+        assertTrue(b);\n+    }\n+\n+    @Test\n+    public void testExceptionsOnly() {\n+        System.setProperty(\"hawtio.upload.filter\", \"exc=[@ [ ]]\");\n+        String fileContent = \"@{toJson(result.server.name)} result.results['contexts'].results}\";\n+        GlobalFileUploadFilter filter = GlobalFileUploadFilter.newFileUploadFilter();\n+        boolean result = GlobalFileUploadFilter.accept(fileContent.getBytes(), filter.getFilterConfig());\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void testBlocksZipUploadNonConfiguredItemAndGenericBinaryItem() throws IOException {\n+        File zipContainNotAllowed = new File(\"src/test/resources/data/allowedContent.zip\");\n+        System.setProperty(\"hawtio.upload.filter\", \"signature=504B0304,offset=0,maxSize=10mb,exc=[@ [ ] # * / & % ? ; $]\");\n+        byte[] zipContainNotAllowedBytes = IOUtils.toByteArray(new FileInputStream(zipContainNotAllowed));\n+        List<GlobalFileUploadFilter.MagicNumberFileFilter> filters =\n+            GlobalFileUploadFilter.constructFilters(System.getProperty(\"hawtio.upload.filter\"), new ArrayList<>());\n+        boolean result = GlobalFileUploadFilter.accept(zipContainNotAllowedBytes, filters);\n+        assertFalse(result);\n+\n+    }\n+\n+//    @Test\n+//    public void testBlocksZipUploadNonConfiguredItemAndAsciiBinaryItem() throws IOException {\n+//\n+//    }\n+\n+    @Test\n+    public void testAsciiContent_1() throws IOException {\n+        UploadServlet uploadServlet = new UploadServlet();\n+        byte[] bytes = serialize(uploadServlet);\n+        byte[] buffer = new byte[512];\n+        boolean isAscii = true;\n+        int len;\n+        ByteArrayInputStream inputStream = new ByteArrayInputStream(bytes);\n+        while ((len = inputStream.read(buffer, 0, buffer.length)) != -1) {\n+            if (isAscii) {\n+                isAscii = GlobalFileUploadFilter.isAsciiFile(buffer, len);\n+            }\n+        }\n+\n+        assertFalse(isAscii);\n+    }\n+\n+    @Test\n+    public void testAsciiContent_2() throws IOException {\n+        File zipContainAscii = new File(\"src/test/resources/data/allowedContent.zip\");\n+        int len;\n+        byte[] buffer = new byte[512];\n+        boolean isAscii = true;\n+        ZipInputStream stream = new ZipInputStream(new FileInputStream(zipContainAscii));\n+        while ((stream.getNextEntry()) != null) {\n+            while ((len = stream.read(buffer, 0, buffer.length)) != -1) {\n+                if (isAscii) {\n+                    isAscii = GlobalFileUploadFilter.isAsciiFile(buffer, len);\n+                }\n+            }\n+        }\n+\n+        assertFalse(isAscii);\n+    }\n+\n+    @Test\n+    public void testAsciiContent_3() throws IOException {\n+        File zipContainAscii = new File(\"src/test/resources/data/badcontent.zip\");\n+        int len;\n+        byte[] buffer = new byte[512];\n+        boolean isAscii = true;\n+        ZipInputStream stream = new ZipInputStream(new FileInputStream(zipContainAscii));\n+        while ((stream.getNextEntry()) != null) {\n+            while ((len = stream.read(buffer, 0, buffer.length)) != -1) {\n+                if (isAscii) {\n+                    isAscii = GlobalFileUploadFilter.isAsciiFile(buffer, len);\n+                }\n+            }\n+        }\n+\n+        assertTrue(isAscii);\n+    }\n+\n+    private byte[] serialize(Object object) throws IOException {\n+        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream(bout);\n+        out.writeObject(object);\n+        out.flush();\n+        return bout.toByteArray();\n+    }\n+}"
        },
        {
            "sha": "5f253be7d704ac32da9cf610fd2e1061f03cd6f1",
            "filename": "hawtio-system/src/test/resources/data/allowedContent.zip",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/hawtio/hawtio/blob/8cf6848f4d4d4917a4551c9aa49dc00f699eb569/hawtio-system%2Fsrc%2Ftest%2Fresources%2Fdata%2FallowedContent.zip",
            "raw_url": "https://github.com/hawtio/hawtio/raw/8cf6848f4d4d4917a4551c9aa49dc00f699eb569/hawtio-system%2Fsrc%2Ftest%2Fresources%2Fdata%2FallowedContent.zip",
            "contents_url": "https://api.github.com/repos/hawtio/hawtio/contents/hawtio-system%2Fsrc%2Ftest%2Fresources%2Fdata%2FallowedContent.zip?ref=8cf6848f4d4d4917a4551c9aa49dc00f699eb569"
        },
        {
            "sha": "bee501ca347af2266fb600238f44196616ca31c9",
            "filename": "hawtio-system/src/test/resources/data/badcontent.zip",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/hawtio/hawtio/blob/8cf6848f4d4d4917a4551c9aa49dc00f699eb569/hawtio-system%2Fsrc%2Ftest%2Fresources%2Fdata%2Fbadcontent.zip",
            "raw_url": "https://github.com/hawtio/hawtio/raw/8cf6848f4d4d4917a4551c9aa49dc00f699eb569/hawtio-system%2Fsrc%2Ftest%2Fresources%2Fdata%2Fbadcontent.zip",
            "contents_url": "https://api.github.com/repos/hawtio/hawtio/contents/hawtio-system%2Fsrc%2Ftest%2Fresources%2Fdata%2Fbadcontent.zip?ref=8cf6848f4d4d4917a4551c9aa49dc00f699eb569"
        },
        {
            "sha": "10b5b6478b72e7149d76f056bac9b564b66ad161",
            "filename": "hawtio-system/src/test/resources/data/default.zip",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/hawtio/hawtio/blob/8cf6848f4d4d4917a4551c9aa49dc00f699eb569/hawtio-system%2Fsrc%2Ftest%2Fresources%2Fdata%2Fdefault.zip",
            "raw_url": "https://github.com/hawtio/hawtio/raw/8cf6848f4d4d4917a4551c9aa49dc00f699eb569/hawtio-system%2Fsrc%2Ftest%2Fresources%2Fdata%2Fdefault.zip",
            "contents_url": "https://api.github.com/repos/hawtio/hawtio/contents/hawtio-system%2Fsrc%2Ftest%2Fresources%2Fdata%2Fdefault.zip?ref=8cf6848f4d4d4917a4551c9aa49dc00f699eb569"
        },
        {
            "sha": "8b1eef4d582b54d740f1dbf918051197d78f0da9",
            "filename": "hawtio-system/src/test/resources/data/exception.zip",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/hawtio/hawtio/blob/8cf6848f4d4d4917a4551c9aa49dc00f699eb569/hawtio-system%2Fsrc%2Ftest%2Fresources%2Fdata%2Fexception.zip",
            "raw_url": "https://github.com/hawtio/hawtio/raw/8cf6848f4d4d4917a4551c9aa49dc00f699eb569/hawtio-system%2Fsrc%2Ftest%2Fresources%2Fdata%2Fexception.zip",
            "contents_url": "https://api.github.com/repos/hawtio/hawtio/contents/hawtio-system%2Fsrc%2Ftest%2Fresources%2Fdata%2Fexception.zip?ref=8cf6848f4d4d4917a4551c9aa49dc00f699eb569"
        },
        {
            "sha": "840f1b5d5b0be0308b551cae9363826d889bbc60",
            "filename": "hawtio-system/src/test/resources/data/goodcontent.zip",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/hawtio/hawtio/blob/8cf6848f4d4d4917a4551c9aa49dc00f699eb569/hawtio-system%2Fsrc%2Ftest%2Fresources%2Fdata%2Fgoodcontent.zip",
            "raw_url": "https://github.com/hawtio/hawtio/raw/8cf6848f4d4d4917a4551c9aa49dc00f699eb569/hawtio-system%2Fsrc%2Ftest%2Fresources%2Fdata%2Fgoodcontent.zip",
            "contents_url": "https://api.github.com/repos/hawtio/hawtio/contents/hawtio-system%2Fsrc%2Ftest%2Fresources%2Fdata%2Fgoodcontent.zip?ref=8cf6848f4d4d4917a4551c9aa49dc00f699eb569"
        },
        {
            "sha": "43acd6a52ac93fb08f6b266f2b3cb1ce85789768",
            "filename": "hawtio-system/src/test/resources/data/jar-file-1.0.jar",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/hawtio/hawtio/blob/8cf6848f4d4d4917a4551c9aa49dc00f699eb569/hawtio-system%2Fsrc%2Ftest%2Fresources%2Fdata%2Fjar-file-1.0.jar",
            "raw_url": "https://github.com/hawtio/hawtio/raw/8cf6848f4d4d4917a4551c9aa49dc00f699eb569/hawtio-system%2Fsrc%2Ftest%2Fresources%2Fdata%2Fjar-file-1.0.jar",
            "contents_url": "https://api.github.com/repos/hawtio/hawtio/contents/hawtio-system%2Fsrc%2Ftest%2Fresources%2Fdata%2Fjar-file-1.0.jar?ref=8cf6848f4d4d4917a4551c9aa49dc00f699eb569"
        },
        {
            "sha": "ddb8a18335bfb38d15796ab779e035879d59556a",
            "filename": "hawtio-system/src/test/resources/data/setenv.zip",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/hawtio/hawtio/blob/8cf6848f4d4d4917a4551c9aa49dc00f699eb569/hawtio-system%2Fsrc%2Ftest%2Fresources%2Fdata%2Fsetenv.zip",
            "raw_url": "https://github.com/hawtio/hawtio/raw/8cf6848f4d4d4917a4551c9aa49dc00f699eb569/hawtio-system%2Fsrc%2Ftest%2Fresources%2Fdata%2Fsetenv.zip",
            "contents_url": "https://api.github.com/repos/hawtio/hawtio/contents/hawtio-system%2Fsrc%2Ftest%2Fresources%2Fdata%2Fsetenv.zip?ref=8cf6848f4d4d4917a4551c9aa49dc00f699eb569"
        },
        {
            "sha": "aa8624179b2111d489ea84a4aab8c66d39623a3e",
            "filename": "hawtio-system/src/test/resources/data/test.tar",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/hawtio/hawtio/blob/8cf6848f4d4d4917a4551c9aa49dc00f699eb569/hawtio-system%2Fsrc%2Ftest%2Fresources%2Fdata%2Ftest.tar",
            "raw_url": "https://github.com/hawtio/hawtio/raw/8cf6848f4d4d4917a4551c9aa49dc00f699eb569/hawtio-system%2Fsrc%2Ftest%2Fresources%2Fdata%2Ftest.tar",
            "contents_url": "https://api.github.com/repos/hawtio/hawtio/contents/hawtio-system%2Fsrc%2Ftest%2Fresources%2Fdata%2Ftest.tar?ref=8cf6848f4d4d4917a4551c9aa49dc00f699eb569"
        }
    ]
}