{
    "sha": "417202db8e1714bdca1bd57879634866934c6f54",
    "node_id": "MDY6Q29tbWl0MTA3Mjg0NTo0MTcyMDJkYjhlMTcxNGJkY2ExYmQ1Nzg3OTYzNDg2NjkzNGM2ZjU0",
    "commit": {
        "author": {
            "name": "Oliver Drotbohm",
            "email": "ogierke@pivotal.io",
            "date": "2019-03-29T13:22:48Z"
        },
        "committer": {
            "name": "Oliver Drotbohm",
            "email": "ogierke@pivotal.io",
            "date": "2019-04-01T08:12:43Z"
        },
        "message": "DATAJPA-1519 - Final polishing.\n\nIntroduced dedicated JPA SpEL root  object to be able to explicitly control the function names exposed.",
        "tree": {
            "sha": "da7ee4590bc722f16dc840137ea97bce1f5a81c2",
            "url": "https://api.github.com/repos/spring-projects/spring-data-jpa/git/trees/da7ee4590bc722f16dc840137ea97bce1f5a81c2"
        },
        "url": "https://api.github.com/repos/spring-projects/spring-data-jpa/git/commits/417202db8e1714bdca1bd57879634866934c6f54",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/spring-projects/spring-data-jpa/commits/417202db8e1714bdca1bd57879634866934c6f54",
    "html_url": "https://github.com/spring-projects/spring-data-jpa/commit/417202db8e1714bdca1bd57879634866934c6f54",
    "comments_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/commits/417202db8e1714bdca1bd57879634866934c6f54/comments",
    "author": {
        "login": "odrotbohm",
        "id": 128577,
        "node_id": "MDQ6VXNlcjEyODU3Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/128577?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/odrotbohm",
        "html_url": "https://github.com/odrotbohm",
        "followers_url": "https://api.github.com/users/odrotbohm/followers",
        "following_url": "https://api.github.com/users/odrotbohm/following{/other_user}",
        "gists_url": "https://api.github.com/users/odrotbohm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/odrotbohm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/odrotbohm/subscriptions",
        "organizations_url": "https://api.github.com/users/odrotbohm/orgs",
        "repos_url": "https://api.github.com/users/odrotbohm/repos",
        "events_url": "https://api.github.com/users/odrotbohm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/odrotbohm/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "odrotbohm",
        "id": 128577,
        "node_id": "MDQ6VXNlcjEyODU3Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/128577?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/odrotbohm",
        "html_url": "https://github.com/odrotbohm",
        "followers_url": "https://api.github.com/users/odrotbohm/followers",
        "following_url": "https://api.github.com/users/odrotbohm/following{/other_user}",
        "gists_url": "https://api.github.com/users/odrotbohm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/odrotbohm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/odrotbohm/subscriptions",
        "organizations_url": "https://api.github.com/users/odrotbohm/orgs",
        "repos_url": "https://api.github.com/users/odrotbohm/repos",
        "events_url": "https://api.github.com/users/odrotbohm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/odrotbohm/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "ee39e8863bb43b63e34fe9ac6ec9b864cd8afca9",
            "url": "https://api.github.com/repos/spring-projects/spring-data-jpa/commits/ee39e8863bb43b63e34fe9ac6ec9b864cd8afca9",
            "html_url": "https://github.com/spring-projects/spring-data-jpa/commit/ee39e8863bb43b63e34fe9ac6ec9b864cd8afca9"
        }
    ],
    "stats": {
        "total": 58,
        "additions": 38,
        "deletions": 20
    },
    "files": [
        {
            "sha": "f1bc0fd5f908119c3b6941aa33f32f03f13be156",
            "filename": "src/main/java/org/springframework/data/jpa/repository/query/EscapeCharacter.java",
            "status": "modified",
            "additions": 6,
            "deletions": 16,
            "changes": 22,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/417202db8e1714bdca1bd57879634866934c6f54/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FEscapeCharacter.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/417202db8e1714bdca1bd57879634866934c6f54/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FEscapeCharacter.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FEscapeCharacter.java?ref=417202db8e1714bdca1bd57879634866934c6f54",
            "patch": "@@ -34,30 +34,20 @@ public class EscapeCharacter {\n \n \tprivate static final List<String> TO_REPLACE = Arrays.asList(\"_\", \"%\");\n \n-\tchar value;\n+\tchar escapeCharacter;\n \n \t/**\n \t * Escapes all special like characters ({@code _}, {@code %}) using the configured escape character.\n \t *\n-\t * @param value May be {@literal null}.\n+\t * @param value may be {@literal null}.\n \t * @return\n \t */\n \t@Nullable\n \tpublic String escape(String value) {\n \n-\t\tif (value == null) {\n-\t\t\treturn null;\n-\t\t}\n-\t\treturn TO_REPLACE.stream() //\n-\t\t\t\t.reduce(value, (it, character) -> it.replace(character, this.value + character));\n-\t}\n-\n-\t/**\n-\t * Makes the underlying character available.\n-\t *\n-\t * @return the value\n-\t */\n-\tpublic char escapeCharacter() {\n-\t\treturn value;\n+\t\treturn value == null //\n+\t\t\t\t? null //\n+\t\t\t\t: TO_REPLACE.stream() //\n+\t\t\t\t\t\t.reduce(value, (it, character) -> it.replace(character, this.escapeCharacter + character));\n \t}\n }"
        },
        {
            "sha": "e5bb9cd550060759d91ed54f3ce0c028132b664b",
            "filename": "src/main/java/org/springframework/data/jpa/repository/query/JpaQueryCreator.java",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/417202db8e1714bdca1bd57879634866934c6f54/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FJpaQueryCreator.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/417202db8e1714bdca1bd57879634866934c6f54/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FJpaQueryCreator.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FJpaQueryCreator.java?ref=417202db8e1714bdca1bd57879634866934c6f54",
            "patch": "@@ -291,7 +291,7 @@ public Predicate build() {\n \t\t\t\t\tExpression<String> stringPath = getTypedPath(root, part);\n \t\t\t\t\tExpression<String> propertyExpression = upperIfIgnoreCase(stringPath);\n \t\t\t\t\tExpression<String> parameterExpression = upperIfIgnoreCase(provider.next(part, String.class).getExpression());\n-\t\t\t\t\tPredicate like = builder.like(propertyExpression, parameterExpression, escape.getValue());\n+\t\t\t\t\tPredicate like = builder.like(propertyExpression, parameterExpression, escape.getEscapeCharacter());\n \t\t\t\t\treturn type.equals(NOT_LIKE) || type.equals(NOT_CONTAINING) ? like.not() : like;\n \t\t\t\tcase TRUE:\n \t\t\t\t\tExpression<Boolean> truePath = getTypedPath(root, part);"
        },
        {
            "sha": "a56867dd187abd68e44b60ed71d5c2ec3494adf7",
            "filename": "src/main/java/org/springframework/data/jpa/repository/support/JpaEvaluationContextExtension.java",
            "status": "modified",
            "additions": 31,
            "deletions": 3,
            "changes": 34,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/417202db8e1714bdca1bd57879634866934c6f54/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsupport%2FJpaEvaluationContextExtension.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/417202db8e1714bdca1bd57879634866934c6f54/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsupport%2FJpaEvaluationContextExtension.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsupport%2FJpaEvaluationContextExtension.java?ref=417202db8e1714bdca1bd57879634866934c6f54",
            "patch": "@@ -15,6 +15,8 @@\n  */\n package org.springframework.data.jpa.repository.support;\n \n+import lombok.RequiredArgsConstructor;\n+\n import org.springframework.data.jpa.repository.query.EscapeCharacter;\n import org.springframework.data.spel.spi.EvaluationContextExtension;\n \n@@ -26,15 +28,15 @@\n  */\n public class JpaEvaluationContextExtension implements EvaluationContextExtension {\n \n-\tprivate final EscapeCharacter character;\n+\tprivate final JpaRootObject root;\n \n \t/**\n \t * Creates a new {@link JpaEvaluationContextExtension} for the given escape character.\n \t *\n \t * @param escapeCharacter the character to be used to escape parameters for LIKE expression.\n \t */\n \tpublic JpaEvaluationContextExtension(char escapeCharacter) {\n-\t\tthis.character = EscapeCharacter.of(escapeCharacter);\n+\t\tthis.root = JpaRootObject.of(EscapeCharacter.of(escapeCharacter));\n \t}\n \n \t/*\n@@ -52,6 +54,32 @@ public String getExtensionId() {\n \t */\n \t@Override\n \tpublic Object getRootObject() {\n-\t\treturn character;\n+\t\treturn root;\n+\t}\n+\n+\t@RequiredArgsConstructor(staticName = \"of\")\n+\tpublic static class JpaRootObject {\n+\n+\t\tprivate final EscapeCharacter character;\n+\n+\t\t/**\n+\t\t * Escapes the given source {@link String} for LIKE expressions.\n+\t\t *\n+\t\t * @param source can be {@literal null}.\n+\t\t * @return\n+\t\t * @see EscapeCharacter#escape(String)\n+\t\t */\n+\t\tpublic String escape(String source) {\n+\t\t\treturn character.escape(source);\n+\t\t}\n+\n+\t\t/**\n+\t\t * Returns the escape character being used to escape special characters for LIKE expressions.\n+\t\t *\n+\t\t * @return\n+\t\t */\n+\t\tpublic char escapeCharacter() {\n+\t\t\treturn character.getEscapeCharacter();\n+\t\t}\n \t}\n }"
        }
    ]
}