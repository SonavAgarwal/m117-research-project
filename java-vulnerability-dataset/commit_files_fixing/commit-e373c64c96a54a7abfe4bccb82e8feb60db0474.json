{
    "sha": "e373c64c96a54a7abfe4bccb82e8feb60db04749",
    "node_id": "MDY6Q29tbWl0Mjg3Mzg0NDc6ZTM3M2M2NGM5NmE1NGE3YWJmZTRiY2NiODJlOGZlYjYwZGIwNDc0OQ==",
    "commit": {
        "author": {
            "name": "nichunen",
            "email": "nic@apache.org",
            "date": "2020-02-07T12:22:59Z"
        },
        "committer": {
            "name": "nichunen",
            "email": "nic@apache.org",
            "date": "2020-02-07T12:22:59Z"
        },
        "message": "Fix sql injection issue",
        "tree": {
            "sha": "34415c5bd65b37851669e882a51f69c17ab2cf39",
            "url": "https://api.github.com/repos/apache/kylin/git/trees/34415c5bd65b37851669e882a51f69c17ab2cf39"
        },
        "url": "https://api.github.com/repos/apache/kylin/git/commits/e373c64c96a54a7abfe4bccb82e8feb60db04749",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/kylin/commits/e373c64c96a54a7abfe4bccb82e8feb60db04749",
    "html_url": "https://github.com/apache/kylin/commit/e373c64c96a54a7abfe4bccb82e8feb60db04749",
    "comments_url": "https://api.github.com/repos/apache/kylin/commits/e373c64c96a54a7abfe4bccb82e8feb60db04749/comments",
    "author": {
        "login": "nichunen",
        "id": 15867197,
        "node_id": "MDQ6VXNlcjE1ODY3MTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/15867197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nichunen",
        "html_url": "https://github.com/nichunen",
        "followers_url": "https://api.github.com/users/nichunen/followers",
        "following_url": "https://api.github.com/users/nichunen/following{/other_user}",
        "gists_url": "https://api.github.com/users/nichunen/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nichunen/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nichunen/subscriptions",
        "organizations_url": "https://api.github.com/users/nichunen/orgs",
        "repos_url": "https://api.github.com/users/nichunen/repos",
        "events_url": "https://api.github.com/users/nichunen/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nichunen/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "nichunen",
        "id": 15867197,
        "node_id": "MDQ6VXNlcjE1ODY3MTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/15867197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nichunen",
        "html_url": "https://github.com/nichunen",
        "followers_url": "https://api.github.com/users/nichunen/followers",
        "following_url": "https://api.github.com/users/nichunen/following{/other_user}",
        "gists_url": "https://api.github.com/users/nichunen/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nichunen/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nichunen/subscriptions",
        "organizations_url": "https://api.github.com/users/nichunen/orgs",
        "repos_url": "https://api.github.com/users/nichunen/repos",
        "events_url": "https://api.github.com/users/nichunen/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nichunen/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "ebfc745dd681d7e0c129ded50bd50ff509d2a393",
            "url": "https://api.github.com/repos/apache/kylin/commits/ebfc745dd681d7e0c129ded50bd50ff509d2a393",
            "html_url": "https://github.com/apache/kylin/commit/ebfc745dd681d7e0c129ded50bd50ff509d2a393"
        }
    ],
    "stats": {
        "total": 81,
        "additions": 51,
        "deletions": 30
    },
    "files": [
        {
            "sha": "11b06a119f42036dc90fbb36ccae81f2b2d6985c",
            "filename": "server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java",
            "status": "modified",
            "additions": 51,
            "deletions": 30,
            "changes": 81,
            "blob_url": "https://github.com/apache/kylin/blob/e373c64c96a54a7abfe4bccb82e8feb60db04749/server-base%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fkylin%2Frest%2Fservice%2FCubeService.java",
            "raw_url": "https://github.com/apache/kylin/raw/e373c64c96a54a7abfe4bccb82e8feb60db04749/server-base%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fkylin%2Frest%2Fservice%2FCubeService.java",
            "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fkylin%2Frest%2Fservice%2FCubeService.java?ref=e373c64c96a54a7abfe4bccb82e8feb60db04749",
            "patch": "@@ -71,6 +71,7 @@\n import org.apache.kylin.metadata.project.RealizationEntry;\n import org.apache.kylin.metadata.realization.RealizationStatusEnum;\n import org.apache.kylin.metadata.realization.RealizationType;\n+import org.apache.kylin.metrics.MetricsManager;\n import org.apache.kylin.metrics.property.QueryCubePropertyEnum;\n import org.apache.kylin.rest.constant.Constant;\n import org.apache.kylin.rest.exception.BadRequestException;\n@@ -79,6 +80,7 @@\n import org.apache.kylin.rest.msg.Message;\n import org.apache.kylin.rest.msg.MsgPicker;\n import org.apache.kylin.rest.request.MetricsRequest;\n+import org.apache.kylin.rest.request.PrepareSqlRequest;\n import org.apache.kylin.rest.response.CubeInstanceResponse;\n import org.apache.kylin.rest.response.CuboidTreeResponse;\n import org.apache.kylin.rest.response.CuboidTreeResponse.NodeInfo;\n@@ -544,7 +546,8 @@ public HBaseResponse getHTableInfo(String cubeName, String tableName) throws IOE\n \n         hr = new HBaseResponse();\n         CubeInstance cube = CubeManager.getInstance(getConfig()).getCube(cubeName);\n-        if (cube.getStorageType() == IStorageAware.ID_HBASE || cube.getStorageType() == IStorageAware.ID_SHARDED_HBASE || cube.getStorageType() == IStorageAware.ID_REALTIME_AND_HBASE) {\n+        if (cube.getStorageType() == IStorageAware.ID_HBASE || cube.getStorageType() == IStorageAware.ID_SHARDED_HBASE\n+                || cube.getStorageType() == IStorageAware.ID_REALTIME_AND_HBASE) {\n             try {\n                 logger.debug(\"Loading HTable info \" + cubeName + \", \" + tableName);\n \n@@ -633,7 +636,8 @@ private void cleanSegmentStorage(List<CubeSegment> toRemoveSegs) throws IOExcept\n             List<String> toDelHDFSPaths = Lists.newArrayListWithCapacity(toRemoveSegs.size());\n             for (CubeSegment seg : toRemoveSegs) {\n                 toDropHTables.add(seg.getStorageLocationIdentifier());\n-                toDelHDFSPaths.add(JobBuilderSupport.getJobWorkingDir(seg.getConfig().getHdfsWorkingDirectory(), seg.getLastBuildJobID()));\n+                toDelHDFSPaths.add(JobBuilderSupport.getJobWorkingDir(seg.getConfig().getHdfsWorkingDirectory(),\n+                        seg.getLastBuildJobID()));\n             }\n \n             StorageCleanUtil.dropHTables(new HBaseAdmin(HBaseConnection.getCurrentHBaseConfiguration()), toDropHTables);\n@@ -763,10 +767,12 @@ public String mergeCubeSegment(String cubeName) {\n     }\n \n     //Don't merge the job that has been discarded manually before\n-    private boolean isMergingJobBeenDiscarded(CubeInstance cubeInstance, String cubeName, String projectName, SegmentRange offsets) {\n+    private boolean isMergingJobBeenDiscarded(CubeInstance cubeInstance, String cubeName, String projectName,\n+            SegmentRange offsets) {\n         SegmentRange.TSRange tsRange = new SegmentRange.TSRange((Long) offsets.start.v, (Long) offsets.end.v);\n         String segmentName = CubeSegment.makeSegmentName(tsRange, null, cubeInstance.getModel());\n-        final List<CubingJob> jobInstanceList = jobService.listJobsByRealizationName(cubeName, projectName, EnumSet.of(ExecutableState.DISCARDED));\n+        final List<CubingJob> jobInstanceList = jobService.listJobsByRealizationName(cubeName, projectName,\n+                EnumSet.of(ExecutableState.DISCARDED));\n         for (CubingJob cubingJob : jobInstanceList) {\n             if (cubingJob.getSegmentName().equals(segmentName)) {\n                 logger.debug(\"Merge job {} has been discarded before, will not merge.\", segmentName);\n@@ -777,7 +783,6 @@ private boolean isMergingJobBeenDiscarded(CubeInstance cubeInstance, String cube\n         return false;\n     }\n \n-\n     public void validateCubeDesc(CubeDesc desc, boolean isDraft) {\n         Message msg = MsgPicker.getMsg();\n \n@@ -931,24 +936,6 @@ public void afterPropertiesSet() throws Exception {\n         Broadcaster.getInstance(getConfig()).registerStaticListener(new HTableInfoSyncListener(), \"cube\");\n     }\n \n-    private class HTableInfoSyncListener extends Broadcaster.Listener {\n-        @Override\n-        public void onClearAll(Broadcaster broadcaster) throws IOException {\n-            htableInfoCache.invalidateAll();\n-        }\n-\n-        @Override\n-        public void onEntityChange(Broadcaster broadcaster, String entity, Broadcaster.Event event, String cacheKey)\n-                throws IOException {\n-            String cubeName = cacheKey;\n-            String keyPrefix = cubeName + \"/\";\n-            for (String k : htableInfoCache.asMap().keySet()) {\n-                if (k.startsWith(keyPrefix))\n-                    htableInfoCache.invalidate(k);\n-            }\n-        }\n-    }\n-\n     public CubeInstanceResponse createCubeInstanceResponse(CubeInstance cube) {\n         return new CubeInstanceResponse(cube, projectService.getProjectOfCube(cube.getName()));\n     }\n@@ -995,7 +982,7 @@ private NodeInfo generateNodeInfo(long cuboidId, int dimensionCount, long cubeQu\n         long queryExactlyMatchCount = queryMatchMap == null || queryMatchMap.get(cuboidId) == null ? 0L\n                 : queryMatchMap.get(cuboidId);\n         boolean ifExist = currentCuboidSet.contains(cuboidId);\n-        long rowCount = rowCountMap == null ? 0L : rowCountMap.get(cuboidId);\n+        long rowCount = (rowCountMap == null || rowCountMap.size() == 0) ? 0L : rowCountMap.get(cuboidId);\n \n         NodeInfo node = new NodeInfo();\n         node.setId(cuboidId);\n@@ -1044,9 +1031,10 @@ public Map<Long, Long> getCuboidHitFrequency(String cubeName, boolean isCuboidSo\n         String table = getMetricsManager().getSystemTableFromSubject(getConfig().getKylinMetricsSubjectQueryCube());\n         String sql = \"select \" + cuboidColumn + \", sum(\" + hitMeasure + \")\" //\n                 + \" from \" + table//\n-                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = '\" + cubeName + \"'\" //\n+                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = ?\" //\n                 + \" group by \" + cuboidColumn;\n-        List<List<String>> orgHitFrequency = queryService.querySystemCube(sql).getResults();\n+\n+        List<List<String>> orgHitFrequency = getPrepareQueryResult(cubeName, sql);\n         return formatQueryCount(orgHitFrequency);\n     }\n \n@@ -1058,9 +1046,10 @@ public Map<Long, Map<Long, Pair<Long, Long>>> getCuboidRollingUpStats(String cub\n         String table = getMetricsManager().getSystemTableFromSubject(getConfig().getKylinMetricsSubjectQueryCube());\n         String sql = \"select \" + cuboidSource + \", \" + cuboidTgt + \", avg(\" + aggCount + \"), avg(\" + returnCount + \")\"//\n                 + \" from \" + table //\n-                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = '\" + cubeName + \"' \" //\n+                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = ?\" //\n                 + \" group by \" + cuboidSource + \", \" + cuboidTgt;\n-        List<List<String>> orgRollingUpCount = queryService.querySystemCube(sql).getResults();\n+\n+        List<List<String>> orgRollingUpCount = getPrepareQueryResult(cubeName, sql);\n         return formatRollingUpStats(orgRollingUpCount);\n     }\n \n@@ -1070,13 +1059,27 @@ public Map<Long, Long> getCuboidQueryMatchCount(String cubeName) {\n         String table = getMetricsManager().getSystemTableFromSubject(getConfig().getKylinMetricsSubjectQueryCube());\n         String sql = \"select \" + cuboidSource + \", sum(\" + hitMeasure + \")\" //\n                 + \" from \" + table //\n-                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = '\" + cubeName + \"'\" //\n+                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = ?\" //\n                 + \" and \" + QueryCubePropertyEnum.IF_MATCH.toString() + \" = true\" //\n                 + \" group by \" + cuboidSource;\n-        List<List<String>> orgMatchHitFrequency = queryService.querySystemCube(sql).getResults();\n+\n+        List<List<String>> orgMatchHitFrequency = getPrepareQueryResult(cubeName, sql);\n         return formatQueryCount(orgMatchHitFrequency);\n     }\n \n+    private List<List<String>> getPrepareQueryResult(String cubeName, String sql) {\n+        PrepareSqlRequest sqlRequest = new PrepareSqlRequest();\n+        sqlRequest.setProject(MetricsManager.SYSTEM_PROJECT);\n+        PrepareSqlRequest.StateParam[] params = new PrepareSqlRequest.StateParam[1];\n+        params[0] = new PrepareSqlRequest.StateParam();\n+        params[0].setClassName(\"java.lang.String\");\n+        params[0].setValue(cubeName);\n+        sqlRequest.setParams(params);\n+        sqlRequest.setSql(sql);\n+\n+        return queryService.doQueryWithCache(sqlRequest, false).getResults();\n+    }\n+\n     @PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN\n             + \" or hasPermission(#cube, 'ADMINISTRATION') or hasPermission(#cube, 'MANAGEMENT')\")\n     public void migrateCube(CubeInstance cube, String projectName) {\n@@ -1114,4 +1117,22 @@ public void migrateCube(CubeInstance cube, String projectName) {\n             throw new InternalErrorException(\"Failed to perform one-click migrating\", e);\n         }\n     }\n+\n+    private class HTableInfoSyncListener extends Broadcaster.Listener {\n+        @Override\n+        public void onClearAll(Broadcaster broadcaster) throws IOException {\n+            htableInfoCache.invalidateAll();\n+        }\n+\n+        @Override\n+        public void onEntityChange(Broadcaster broadcaster, String entity, Broadcaster.Event event, String cacheKey)\n+                throws IOException {\n+            String cubeName = cacheKey;\n+            String keyPrefix = cubeName + \"/\";\n+            for (String k : htableInfoCache.asMap().keySet()) {\n+                if (k.startsWith(keyPrefix))\n+                    htableInfoCache.invalidate(k);\n+            }\n+        }\n+    }\n }"
        }
    ]
}