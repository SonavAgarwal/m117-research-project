{
    "sha": "2235894210c75f624a3d0cd60bfb0434a20a18bf",
    "node_id": "MDY6Q29tbWl0MzAzODkzNzoyMjM1ODk0MjEwYzc1ZjYyNGEzZDBjZDYwYmZiMDQzNGEyMGExOGJm",
    "commit": {
        "author": {
            "name": "Tatu Saloranta",
            "email": "tatu.saloranta@iki.fi",
            "date": "2017-12-19T05:41:51Z"
        },
        "committer": {
            "name": "Tatu Saloranta",
            "email": "tatu.saloranta@iki.fi",
            "date": "2017-12-19T05:41:51Z"
        },
        "message": "Fix #1855",
        "tree": {
            "sha": "9e1c0593e1bdfceb02f37778a1630b3f7b70a2ca",
            "url": "https://api.github.com/repos/FasterXML/jackson-databind/git/trees/9e1c0593e1bdfceb02f37778a1630b3f7b70a2ca"
        },
        "url": "https://api.github.com/repos/FasterXML/jackson-databind/git/commits/2235894210c75f624a3d0cd60bfb0434a20a18bf",
        "comment_count": 5,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/FasterXML/jackson-databind/commits/2235894210c75f624a3d0cd60bfb0434a20a18bf",
    "html_url": "https://github.com/FasterXML/jackson-databind/commit/2235894210c75f624a3d0cd60bfb0434a20a18bf",
    "comments_url": "https://api.github.com/repos/FasterXML/jackson-databind/commits/2235894210c75f624a3d0cd60bfb0434a20a18bf/comments",
    "author": {
        "login": "cowtowncoder",
        "id": 55065,
        "node_id": "MDQ6VXNlcjU1MDY1",
        "avatar_url": "https://avatars.githubusercontent.com/u/55065?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cowtowncoder",
        "html_url": "https://github.com/cowtowncoder",
        "followers_url": "https://api.github.com/users/cowtowncoder/followers",
        "following_url": "https://api.github.com/users/cowtowncoder/following{/other_user}",
        "gists_url": "https://api.github.com/users/cowtowncoder/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/cowtowncoder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/cowtowncoder/subscriptions",
        "organizations_url": "https://api.github.com/users/cowtowncoder/orgs",
        "repos_url": "https://api.github.com/users/cowtowncoder/repos",
        "events_url": "https://api.github.com/users/cowtowncoder/events{/privacy}",
        "received_events_url": "https://api.github.com/users/cowtowncoder/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "cowtowncoder",
        "id": 55065,
        "node_id": "MDQ6VXNlcjU1MDY1",
        "avatar_url": "https://avatars.githubusercontent.com/u/55065?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cowtowncoder",
        "html_url": "https://github.com/cowtowncoder",
        "followers_url": "https://api.github.com/users/cowtowncoder/followers",
        "following_url": "https://api.github.com/users/cowtowncoder/following{/other_user}",
        "gists_url": "https://api.github.com/users/cowtowncoder/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/cowtowncoder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/cowtowncoder/subscriptions",
        "organizations_url": "https://api.github.com/users/cowtowncoder/orgs",
        "repos_url": "https://api.github.com/users/cowtowncoder/repos",
        "events_url": "https://api.github.com/users/cowtowncoder/events{/privacy}",
        "received_events_url": "https://api.github.com/users/cowtowncoder/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "f031f27a31625d07922bdd090664c69544200a5d",
            "url": "https://api.github.com/repos/FasterXML/jackson-databind/commits/f031f27a31625d07922bdd090664c69544200a5d",
            "html_url": "https://github.com/FasterXML/jackson-databind/commit/f031f27a31625d07922bdd090664c69544200a5d"
        }
    ],
    "stats": {
        "total": 152,
        "additions": 103,
        "deletions": 49
    },
    "files": [
        {
            "sha": "b462c0c74d845ce92cf676952c1925ed21539019",
            "filename": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
            "status": "modified",
            "additions": 5,
            "deletions": 49,
            "changes": 54,
            "blob_url": "https://github.com/FasterXML/jackson-databind/blob/2235894210c75f624a3d0cd60bfb0434a20a18bf/src%2Fmain%2Fjava%2Fcom%2Ffasterxml%2Fjackson%2Fdatabind%2Fdeser%2FBeanDeserializerFactory.java",
            "raw_url": "https://github.com/FasterXML/jackson-databind/raw/2235894210c75f624a3d0cd60bfb0434a20a18bf/src%2Fmain%2Fjava%2Fcom%2Ffasterxml%2Fjackson%2Fdatabind%2Fdeser%2FBeanDeserializerFactory.java",
            "contents_url": "https://api.github.com/repos/FasterXML/jackson-databind/contents/src%2Fmain%2Fjava%2Fcom%2Ffasterxml%2Fjackson%2Fdatabind%2Fdeser%2FBeanDeserializerFactory.java?ref=2235894210c75f624a3d0cd60bfb0434a20a18bf",
            "patch": "@@ -12,6 +12,7 @@\n import com.fasterxml.jackson.databind.deser.std.ThrowableDeserializer;\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n+import com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator;\n import com.fasterxml.jackson.databind.util.ArrayBuilders;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n import com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;\n@@ -40,44 +41,6 @@ public class BeanDeserializerFactory\n \n     private final static Class<?>[] NO_VIEWS = new Class<?>[0];\n \n-    /**\n-     * Set of well-known \"nasty classes\", deserialization of which is considered dangerous\n-     * and should (and is) prevented by default.\n-     */\n-    protected final static Set<String> DEFAULT_NO_DESER_CLASS_NAMES;\n-    static {\n-        Set<String> s = new HashSet<String>();\n-        // Courtesy of [https://github.com/kantega/notsoserial]:\n-        // (and wrt [databind#1599])\n-        s.add(\"org.apache.commons.collections.functors.InvokerTransformer\");\n-        s.add(\"org.apache.commons.collections.functors.InstantiateTransformer\");\n-        s.add(\"org.apache.commons.collections4.functors.InvokerTransformer\");\n-        s.add(\"org.apache.commons.collections4.functors.InstantiateTransformer\");\n-        s.add(\"org.codehaus.groovy.runtime.ConvertedClosure\");\n-        s.add(\"org.codehaus.groovy.runtime.MethodClosure\");\n-        s.add(\"org.springframework.beans.factory.ObjectFactory\");\n-        s.add(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n-        s.add(\"org.apache.xalan.xsltc.trax.TemplatesImpl\");\n-        // [databind#1680]: may or may not be problem, take no chance\n-        s.add(\"com.sun.rowset.JdbcRowSetImpl\");\n-        // [databind#1737]; JDK provided\n-        s.add(\"java.util.logging.FileHandler\");\n-        s.add(\"java.rmi.server.UnicastRemoteObject\");\n-        // [databind#1737]; 3rd party\n-        s.add(\"org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor\");\n-        s.add(\"org.springframework.beans.factory.config.PropertyPathFactoryBean\");\n-        s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");\n-        s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");\n-        // [databind#1855]: more 3rd party\n-        s.add(\"org.apache.tomcat.dbcp.dbcp2.BasicDataSource\");\n-        s.add(\"com.sun.org.apache.bcel.internal.util.ClassLoader\");\n-        DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);\n-    }\n-\n-    /**\n-     * Set of class names of types that are never to be deserialized.\n-     */\n-    protected Set<String> _cfgIllegalClassNames = DEFAULT_NO_DESER_CLASS_NAMES;\n \n     /*\n     /**********************************************************\n@@ -179,7 +142,7 @@ public JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ct\n             return null;\n         }\n         // For checks like [databind#1599]\n-        checkIllegalTypes(ctxt, type, beanDesc);\n+        _validateSubType(ctxt, type, beanDesc);\n         // Use generic bean introspection to build deserializer\n         return buildBeanDeserializer(ctxt, type, beanDesc);\n     }\n@@ -877,19 +840,12 @@ protected boolean isIgnorableType(DeserializationConfig config, BeanDescription\n     }\n \n     /**\n-     * @since 2.8.9\n+     * @since 2.8.11\n      */\n-    protected void checkIllegalTypes(DeserializationContext ctxt, JavaType type,\n+    protected void _validateSubType(DeserializationContext ctxt, JavaType type,\n             BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n-        // There are certain nasty classes that could cause problems, mostly\n-        // via default typing -- catch them here.\n-        String full = type.getRawClass().getName();\n-\n-        if (_cfgIllegalClassNames.contains(full)) {\n-            throw JsonMappingException.from(ctxt,\n-                    String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n-        }\n+        SubTypeValidator.instance().validateSubType(ctxt, type);\n     }\n }"
        },
        {
            "sha": "8a273cc15a9605507c9450cc58f3d521a9225b6d",
            "filename": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
            "status": "added",
            "additions": 98,
            "deletions": 0,
            "changes": 98,
            "blob_url": "https://github.com/FasterXML/jackson-databind/blob/2235894210c75f624a3d0cd60bfb0434a20a18bf/src%2Fmain%2Fjava%2Fcom%2Ffasterxml%2Fjackson%2Fdatabind%2Fjsontype%2Fimpl%2FSubTypeValidator.java",
            "raw_url": "https://github.com/FasterXML/jackson-databind/raw/2235894210c75f624a3d0cd60bfb0434a20a18bf/src%2Fmain%2Fjava%2Fcom%2Ffasterxml%2Fjackson%2Fdatabind%2Fjsontype%2Fimpl%2FSubTypeValidator.java",
            "contents_url": "https://api.github.com/repos/FasterXML/jackson-databind/contents/src%2Fmain%2Fjava%2Fcom%2Ffasterxml%2Fjackson%2Fdatabind%2Fjsontype%2Fimpl%2FSubTypeValidator.java?ref=2235894210c75f624a3d0cd60bfb0434a20a18bf",
            "patch": "@@ -0,0 +1,98 @@\n+package com.fasterxml.jackson.databind.jsontype.impl;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+\n+/**\n+ * Helper class used to encapsulate rules that determine subtypes that\n+ * are invalid to use, even with default typing, mostly due to security\n+ * concerns.\n+ * Used by <code>BeanDeserializerFacotry</code>\n+ *\n+ * @since 2.8.11\n+ */\n+public class SubTypeValidator\n+{\n+    protected final static String PREFIX_STRING = \"org.springframework.\";\n+    /**\n+     * Set of well-known \"nasty classes\", deserialization of which is considered dangerous\n+     * and should (and is) prevented by default.\n+     */\n+    protected final static Set<String> DEFAULT_NO_DESER_CLASS_NAMES;\n+    static {\n+        Set<String> s = new HashSet<String>();\n+        // Courtesy of [https://github.com/kantega/notsoserial]:\n+        // (and wrt [databind#1599])\n+        s.add(\"org.apache.commons.collections.functors.InvokerTransformer\");\n+        s.add(\"org.apache.commons.collections.functors.InstantiateTransformer\");\n+        s.add(\"org.apache.commons.collections4.functors.InvokerTransformer\");\n+        s.add(\"org.apache.commons.collections4.functors.InstantiateTransformer\");\n+        s.add(\"org.codehaus.groovy.runtime.ConvertedClosure\");\n+        s.add(\"org.codehaus.groovy.runtime.MethodClosure\");\n+        s.add(\"org.springframework.beans.factory.ObjectFactory\");\n+        s.add(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n+        s.add(\"org.apache.xalan.xsltc.trax.TemplatesImpl\");\n+        // [databind#1680]: may or may not be problem, take no chance\n+        s.add(\"com.sun.rowset.JdbcRowSetImpl\");\n+        // [databind#1737]; JDK provided\n+        s.add(\"java.util.logging.FileHandler\");\n+        s.add(\"java.rmi.server.UnicastRemoteObject\");\n+        // [databind#1737]; 3rd party\n+//s.add(\"org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor\"); // deprecated by [databind#1855]\n+        s.add(\"org.springframework.beans.factory.config.PropertyPathFactoryBean\");\n+        s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");\n+        s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");\n+        // [databind#1855]: more 3rd party\n+        s.add(\"org.apache.tomcat.dbcp.dbcp2.BasicDataSource\");\n+        s.add(\"com.sun.org.apache.bcel.internal.util.ClassLoader\");\n+        DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);\n+    }\n+\n+    /**\n+     * Set of class names of types that are never to be deserialized.\n+     */\n+    protected Set<String> _cfgIllegalClassNames = DEFAULT_NO_DESER_CLASS_NAMES;\n+\n+    private final static SubTypeValidator instance = new SubTypeValidator();\n+\n+    protected SubTypeValidator() { }\n+\n+    public static SubTypeValidator instance() { return instance; }\n+\n+    public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n+    {\n+        // There are certain nasty classes that could cause problems, mostly\n+        // via default typing -- catch them here.\n+        final Class<?> raw = type.getRawClass();\n+        String full = raw.getName();\n+\n+        do {\n+            if (_cfgIllegalClassNames.contains(full)) {\n+                break;\n+            }\n+\n+            // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n+            //    for some Spring framework types\n+            if (full.startsWith(PREFIX_STRING)) {\n+                for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {\n+                    String name = cls.getSimpleName();\n+                    // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n+                    if (\"AbstractPointcutAdvisor\".equals(name)\n+                            // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n+                            || \"AbstractApplicationContext.equals\".equals(name)) {\n+                        break;\n+                    }\n+                }\n+            }\n+            return;\n+        } while (false);\n+\n+        throw JsonMappingException.from(ctxt,\n+                String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n+    }\n+}"
        }
    ]
}