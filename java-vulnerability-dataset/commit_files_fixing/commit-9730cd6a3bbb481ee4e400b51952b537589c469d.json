{
    "sha": "9730cd6a3bbb481ee4e400b51952b537589c469d",
    "node_id": "MDY6Q29tbWl0MzM4MjE5NTo5NzMwY2Q2YTNiYmI0ODFlZTRlNDAwYjUxOTUyYjUzNzU4OWM0Njlk",
    "commit": {
        "author": {
            "name": "Filip Hanik",
            "email": "fhanik@pivotal.io",
            "date": "2015-08-04T15:49:22Z"
        },
        "committer": {
            "name": "Filip Hanik",
            "email": "fhanik@pivotal.io",
            "date": "2015-08-05T15:54:22Z"
        },
        "message": "Upon a password change we will expire all HTTP sessions for that user\nhttps://www.pivotaltracker.com/story/show/100043648\n[#100043648]",
        "tree": {
            "sha": "74ebe90c931216127d7a86760e612a657eddcf25",
            "url": "https://api.github.com/repos/cloudfoundry/uaa/git/trees/74ebe90c931216127d7a86760e612a657eddcf25"
        },
        "url": "https://api.github.com/repos/cloudfoundry/uaa/git/commits/9730cd6a3bbb481ee4e400b51952b537589c469d",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/cloudfoundry/uaa/commits/9730cd6a3bbb481ee4e400b51952b537589c469d",
    "html_url": "https://github.com/cloudfoundry/uaa/commit/9730cd6a3bbb481ee4e400b51952b537589c469d",
    "comments_url": "https://api.github.com/repos/cloudfoundry/uaa/commits/9730cd6a3bbb481ee4e400b51952b537589c469d/comments",
    "author": {
        "login": "fhanik",
        "id": 607429,
        "node_id": "MDQ6VXNlcjYwNzQyOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/607429?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fhanik",
        "html_url": "https://github.com/fhanik",
        "followers_url": "https://api.github.com/users/fhanik/followers",
        "following_url": "https://api.github.com/users/fhanik/following{/other_user}",
        "gists_url": "https://api.github.com/users/fhanik/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fhanik/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fhanik/subscriptions",
        "organizations_url": "https://api.github.com/users/fhanik/orgs",
        "repos_url": "https://api.github.com/users/fhanik/repos",
        "events_url": "https://api.github.com/users/fhanik/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fhanik/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "fhanik",
        "id": 607429,
        "node_id": "MDQ6VXNlcjYwNzQyOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/607429?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fhanik",
        "html_url": "https://github.com/fhanik",
        "followers_url": "https://api.github.com/users/fhanik/followers",
        "following_url": "https://api.github.com/users/fhanik/following{/other_user}",
        "gists_url": "https://api.github.com/users/fhanik/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fhanik/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fhanik/subscriptions",
        "organizations_url": "https://api.github.com/users/fhanik/orgs",
        "repos_url": "https://api.github.com/users/fhanik/repos",
        "events_url": "https://api.github.com/users/fhanik/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fhanik/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "cad9bdd3b3a642093a3e3e783ce7e0125fbf17c0",
            "url": "https://api.github.com/repos/cloudfoundry/uaa/commits/cad9bdd3b3a642093a3e3e783ce7e0125fbf17c0",
            "html_url": "https://github.com/cloudfoundry/uaa/commit/cad9bdd3b3a642093a3e3e783ce7e0125fbf17c0"
        }
    ],
    "stats": {
        "total": 446,
        "additions": 425,
        "deletions": 21
    },
    "files": [
        {
            "sha": "ee8c4b5784d6339b37059f6f83f856c84d406e7c",
            "filename": "common/src/main/java/org/cloudfoundry/identity/uaa/authentication/AuthzAuthenticationFilter.java",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/9730cd6a3bbb481ee4e400b51952b537589c469d/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fauthentication%2FAuthzAuthenticationFilter.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/9730cd6a3bbb481ee4e400b51952b537589c469d/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fauthentication%2FAuthzAuthenticationFilter.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fauthentication%2FAuthzAuthenticationFilter.java?ref=9730cd6a3bbb481ee4e400b51952b537589c469d",
            "patch": "@@ -82,7 +82,7 @@ public class AuthzAuthenticationFilter implements Filter {\n      * @param methods the methods to set (defaults to POST)\n      */\n     public void setMethods(Set<String> methods) {\n-        this.methods = new HashSet<String>();\n+        this.methods = new HashSet<>();\n         for (String method : methods) {\n             this.methods.add(method.toUpperCase());\n         }"
        },
        {
            "sha": "66d1cc2ed9f91b75ecf9ee9f45ad409222afff5c",
            "filename": "common/src/main/java/org/cloudfoundry/identity/uaa/authentication/SessionResetFilter.java",
            "status": "added",
            "additions": 98,
            "deletions": 0,
            "changes": 98,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/9730cd6a3bbb481ee4e400b51952b537589c469d/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fauthentication%2FSessionResetFilter.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/9730cd6a3bbb481ee4e400b51952b537589c469d/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fauthentication%2FSessionResetFilter.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fauthentication%2FSessionResetFilter.java?ref=9730cd6a3bbb481ee4e400b51952b537589c469d",
            "patch": "@@ -0,0 +1,98 @@\n+/*\n+ * ******************************************************************************\n+ *  *     Cloud Foundry\n+ *  *     Copyright (c) [2009-2015] Pivotal Software, Inc. All Rights Reserved.\n+ *  *\n+ *  *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *  *     You may not use this product except in compliance with the License.\n+ *  *\n+ *  *     This product includes a number of subcomponents with\n+ *  *     separate copyright notices and license terms. Your use of these\n+ *  *     subcomponents is subject to the terms and conditions of the\n+ *  *     subcomponent's license, as noted in the LICENSE file.\n+ *  ******************************************************************************\n+ */\n+\n+package org.cloudfoundry.identity.uaa.authentication;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.cloudfoundry.identity.uaa.user.UaaUser;\n+import org.cloudfoundry.identity.uaa.user.UaaUserDatabase;\n+import org.springframework.security.core.context.SecurityContext;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.core.userdetails.UsernameNotFoundException;\n+import org.springframework.security.web.RedirectStrategy;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+import java.io.IOException;\n+\n+public class SessionResetFilter extends OncePerRequestFilter {\n+\n+    private static Log logger = LogFactory.getLog(SessionResetFilter.class);\n+\n+    private final RedirectStrategy strategy;\n+    private final String redirectUrl;\n+    private final UaaUserDatabase userDatabase;\n+\n+    public SessionResetFilter(RedirectStrategy strategy, String redirectUrl, UaaUserDatabase userDatabase) {\n+        this.strategy = strategy;\n+        this.redirectUrl = redirectUrl;\n+        this.userDatabase = userDatabase;\n+    }\n+\n+    public String getRedirectUrl() {\n+        return redirectUrl;\n+    }\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n+        SecurityContext context = SecurityContextHolder.getContext();\n+        if (context!=null && context.getAuthentication()!=null && context.getAuthentication() instanceof UaaAuthentication) {\n+            UaaAuthentication authentication = (UaaAuthentication)context.getAuthentication();\n+            if (authentication.isAuthenticated() &&\n+                Origin.UAA.equals(authentication.getPrincipal().getOrigin()) &&\n+                null != request.getSession(false)) {\n+\n+                boolean redirect = false;\n+                String userId = authentication.getPrincipal().getId();\n+                try {\n+                    logger.debug(\"Evaluating user-id for session reset:\"+userId);\n+                    UaaUser user = userDatabase.retrieveUserById(userId);\n+                    long lastAuthTime = authentication.getAuthenticatedTime();\n+                    long passwordModTime = user.getPasswordLastModified().getTime() ;\n+                    //if the password has changed after authentication time\n+                    if (hasPasswordChangedAfterAuthentication(lastAuthTime, passwordModTime)) {\n+                        logger.debug(String.format(\"Resetting user session for user ID: %s Auth Time: %s Password Change Time: %s\",userId, lastAuthTime, passwordModTime));\n+                        redirect = true;\n+                    }\n+                } catch (UsernameNotFoundException x) {\n+                    logger.info(\"Authenticated user [\"+userId+\"] was not found in DB.\");\n+                    redirect = true;\n+                }\n+                if (redirect) {\n+                    handleRedirect(request, response);\n+                    return;\n+                }\n+            }\n+        }\n+        filterChain.doFilter(request,response);\n+    }\n+\n+    protected boolean hasPasswordChangedAfterAuthentication(long lastAuthTime, long passwordModTime) {\n+        return passwordModTime > lastAuthTime;\n+    }\n+\n+    protected void handleRedirect(HttpServletRequest request, HttpServletResponse response) throws IOException {\n+        HttpSession session = request.getSession(false);\n+        if (session!=null) {\n+            session.invalidate();\n+        }\n+        strategy.sendRedirect(request, response, getRedirectUrl());\n+    }\n+}"
        },
        {
            "sha": "ab1fda62169e98ab54e9a5d877aa94f032a9bf45",
            "filename": "common/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthentication.java",
            "status": "modified",
            "additions": 11,
            "deletions": 2,
            "changes": 13,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/9730cd6a3bbb481ee4e400b51952b537589c469d/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fauthentication%2FUaaAuthentication.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/9730cd6a3bbb481ee4e400b51952b537589c469d/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fauthentication%2FUaaAuthentication.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fauthentication%2FUaaAuthentication.java?ref=9730cd6a3bbb481ee4e400b51952b537589c469d",
            "patch": "@@ -13,6 +13,7 @@\n package org.cloudfoundry.identity.uaa.authentication;\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.GrantedAuthority;\n@@ -30,6 +31,7 @@ public class UaaAuthentication implements Authentication, Serializable {\n     private UaaPrincipal principal;\n     private UaaAuthenticationDetails details;\n     private boolean authenticated;\n+    private long authenticatedTime = -1l;\n \n     /**\n      * Creates a token with the supplied array of authorities.\n@@ -40,15 +42,16 @@ public class UaaAuthentication implements Authentication, Serializable {\n     public UaaAuthentication(UaaPrincipal principal,\n                              List<? extends GrantedAuthority> authorities,\n                              UaaAuthenticationDetails details) {\n-        this(principal, null, authorities, details, true);\n+        this(principal, null, authorities, details, true, System.currentTimeMillis());\n     }\n \n     @JsonCreator\n     public UaaAuthentication(@JsonProperty(\"principal\") UaaPrincipal principal,\n                              @JsonProperty(\"credentials\") Object credentials,\n                              @JsonProperty(\"authorities\") List<? extends GrantedAuthority> authorities,\n                              @JsonProperty(\"details\") UaaAuthenticationDetails details,\n-                             @JsonProperty(\"authenticated\") boolean authenticated) {\n+                             @JsonProperty(\"authenticated\") boolean authenticated,\n+                             @JsonProperty(value = \"authenticatedTime\", defaultValue = \"-1\") long authenticatedTime) {\n         if (principal == null || authorities == null) {\n             throw new IllegalArgumentException(\"principal and authorities must not be null\");\n         }\n@@ -57,9 +60,15 @@ public UaaAuthentication(@JsonProperty(\"principal\") UaaPrincipal principal,\n         this.details = details;\n         this.credentials = credentials;\n         this.authenticated = authenticated;\n+        this.authenticatedTime = authenticatedTime == 0 ? -1 : authenticatedTime;\n+    }\n+\n+    public long getAuthenticatedTime() {\n+        return authenticatedTime;\n     }\n \n     @Override\n+    @JsonIgnore\n     public String getName() {\n         // Should we return the ID for the principal name? (No, because the\n         // UaaUserDatabase retrieves users by name.)"
        },
        {
            "sha": "e1456cd658e55efd595ef4df911011ce54cd980b",
            "filename": "common/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
            "status": "modified",
            "additions": 5,
            "deletions": 2,
            "changes": 7,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/9730cd6a3bbb481ee4e400b51952b537589c469d/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fauthentication%2Fmanager%2FAuthzAuthenticationManager.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/9730cd6a3bbb481ee4e400b51952b537589c469d/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fauthentication%2Fmanager%2FAuthzAuthenticationManager.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fauthentication%2Fmanager%2FAuthzAuthenticationManager.java?ref=9730cd6a3bbb481ee4e400b51952b537589c469d",
            "patch": "@@ -134,8 +134,11 @@ public Authentication authenticate(Authentication req) throws AuthenticationExce\n                 }\n             }\n \n-            Authentication success = new UaaAuthentication(new UaaPrincipal(user),\n-                            user.getAuthorities(), (UaaAuthenticationDetails) req.getDetails());\n+            Authentication success = new UaaAuthentication(\n+                new UaaPrincipal(user),\n+                user.getAuthorities(),\n+                (UaaAuthenticationDetails) req.getDetails());\n+\n             publish(new UserAuthenticationSuccessEvent(user, success));\n \n             return success;"
        },
        {
            "sha": "3a0b1a8f814e736233fdec5e7b42ae3534f969fa",
            "filename": "common/src/main/java/org/cloudfoundry/identity/uaa/zone/IdentityZoneSwitchingFilter.java",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/9730cd6a3bbb481ee4e400b51952b537589c469d/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fzone%2FIdentityZoneSwitchingFilter.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/9730cd6a3bbb481ee4e400b51952b537589c469d/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fzone%2FIdentityZoneSwitchingFilter.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fzone%2FIdentityZoneSwitchingFilter.java?ref=9730cd6a3bbb481ee4e400b51952b537589c469d",
            "patch": "@@ -109,7 +109,7 @@ protected void stripScopesFromAuthentication(String identityZoneId, HttpServletR\n                 null,\n                 UaaStringUtils.getAuthoritiesFromStrings(clientScopes),\n                 new UaaAuthenticationDetails(servletRequest),\n-                true);\n+                true, userAuthentication.getAuthenticatedTime());\n         }\n         oa = new OAuth2Authentication(request, userAuthentication);\n         oa.setDetails(oaDetails);"
        },
        {
            "sha": "ade14eb2fe08197db44a08e33afed8c97653952e",
            "filename": "common/src/test/java/org/cloudfoundry/identity/uaa/authentication/SessionResetFilterTests.java",
            "status": "added",
            "additions": 172,
            "deletions": 0,
            "changes": 172,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/9730cd6a3bbb481ee4e400b51952b537589c469d/common%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fauthentication%2FSessionResetFilterTests.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/9730cd6a3bbb481ee4e400b51952b537589c469d/common%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fauthentication%2FSessionResetFilterTests.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/common%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fauthentication%2FSessionResetFilterTests.java?ref=9730cd6a3bbb481ee4e400b51952b537589c469d",
            "patch": "@@ -0,0 +1,172 @@\n+/*\n+ * ******************************************************************************\n+ *  *     Cloud Foundry\n+ *  *     Copyright (c) [2009-2015] Pivotal Software, Inc. All Rights Reserved.\n+ *  *\n+ *  *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *  *     You may not use this product except in compliance with the License.\n+ *  *\n+ *  *     This product includes a number of subcomponents with\n+ *  *     separate copyright notices and license terms. Your use of these\n+ *  *     subcomponents is subject to the terms and conditions of the\n+ *  *     subcomponent's license, as noted in the LICENSE file.\n+ *  ******************************************************************************\n+ */\n+\n+package org.cloudfoundry.identity.uaa.authentication;\n+\n+import org.cloudfoundry.identity.uaa.user.InMemoryUaaUserDatabase;\n+import org.cloudfoundry.identity.uaa.user.UaaUser;\n+import org.cloudfoundry.identity.uaa.user.UaaUserDatabase;\n+import org.cloudfoundry.identity.uaa.zone.IdentityZone;\n+import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.web.DefaultRedirectStrategy;\n+import org.springframework.util.ReflectionUtils;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+import java.lang.reflect.Field;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.mockito.Matchers.anyBoolean;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyZeroInteractions;\n+import static org.mockito.Mockito.when;\n+\n+public class SessionResetFilterTests {\n+\n+    SessionResetFilter filter;\n+    HttpServletResponse response;\n+    HttpServletRequest request;\n+    HttpSession session;\n+    FilterChain chain;\n+    UaaUserDatabase userDatabase;\n+    UaaAuthentication authentication;\n+    Date yesterday;\n+    UaaUser user;\n+    Map<String,UaaUser> users;\n+\n+    @Before\n+    public void setUpFilter() throws Exception {\n+\n+        yesterday = new Date(System.currentTimeMillis()-(1000*60*60*24));\n+\n+        user = new UaaUser(\n+            \"user-id\",\n+            \"username\",\n+            \"password\",\n+            \"email\",\n+            Collections.EMPTY_LIST,\n+            \"given name\",\n+            \"family name\",\n+            yesterday,\n+            yesterday,\n+            Origin.UAA,\n+            null,\n+            true,\n+            IdentityZone.getUaa().getId(),\n+            \"salt\",\n+            yesterday\n+        );\n+\n+        UaaPrincipal principal = new UaaPrincipal(user);\n+\n+        authentication = new UaaAuthentication(principal, null, Collections.EMPTY_LIST, null, true, System.currentTimeMillis());\n+\n+        users = new HashMap<>();\n+        users.put(user.getId(), user);\n+        userDatabase = new InMemoryUaaUserDatabase(users);\n+\n+        chain = mock(FilterChain.class);\n+        request = mock(HttpServletRequest.class);\n+        response = mock(HttpServletResponse.class);\n+        session = mock(HttpSession.class);\n+        when(request.getSession(anyBoolean())).thenReturn(session);\n+        filter = new SessionResetFilter(new DefaultRedirectStrategy(),\"/login\", userDatabase);\n+    }\n+\n+    @After\n+    public void clearThingsUp() {\n+        SecurityContextHolder.clearContext();\n+        IdentityZoneHolder.clear();\n+    }\n+\n+\n+    @Test\n+    public void test_No_Authentication_Present() throws Exception {\n+        filter.doFilterInternal(request, response, chain);\n+        verify(chain, times(1)).doFilter(request, response);\n+    }\n+\n+    @Test\n+    public void test_No_UAA_Authentication_Present() throws Exception {\n+        UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(\"test\",\"test\");\n+        SecurityContextHolder.getContext().setAuthentication(authenticationToken);\n+        filter.doFilterInternal(request, response, chain);\n+        verify(chain, times(1)).doFilter(request, response);\n+        verifyZeroInteractions(request);\n+        verifyZeroInteractions(response);\n+    }\n+\n+    @Test\n+    public void test_User_Modified_After_Authentication() throws Exception {\n+        setFieldValue(\"authenticatedTime\", (yesterday.getTime() - (1000 * 60 * 60 * 24)), authentication);\n+        SecurityContextHolder.getContext().setAuthentication(authentication);\n+        filter.doFilterInternal(request, response, chain);\n+\n+        //user is not forwarded, and error response is generated right away\n+        Mockito.verifyZeroInteractions(chain);\n+        //user redirect\n+        verify(response, times(1)).sendRedirect(anyString());\n+        //session was requested\n+        verify(request, times(2)).getSession(false);\n+        //session was invalidated\n+        verify(session, times(1)).invalidate();\n+    }\n+\n+    protected long dropMilliSeconds(long time) {\n+        return ( time / 1000l ) * 1000l;\n+    }\n+\n+    @Test\n+    public void test_User_Not_Modified() throws Exception {\n+        SecurityContextHolder.getContext().setAuthentication(authentication);\n+        filter.doFilterInternal(request, response, chain);\n+        verify(chain, times(1)).doFilter(request, response);\n+        verifyZeroInteractions(response);\n+    }\n+\n+    @Test\n+    public void test_User_Not_Originated_In_Uaa() throws Exception {\n+        SecurityContextHolder.getContext().setAuthentication(authentication);\n+        setFieldValue(\"origin\", Origin.LDAP, authentication.getPrincipal());\n+        filter.doFilterInternal(request, response, chain);\n+        verify(chain, times(1)).doFilter(request, response);\n+        verifyZeroInteractions(request);\n+        verifyZeroInteractions(response);\n+    }\n+\n+    protected void setFieldValue(String fieldname, Object value, Object object) {\n+        Field f = ReflectionUtils.findField(object.getClass(), fieldname);\n+        ReflectionUtils.makeAccessible(f);\n+        ReflectionUtils.setField(f, object, value);\n+    }\n+\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "8ef2fe75de2e52485a6563096a2f90fe058b6837",
            "filename": "common/src/test/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthenticationSerializationTests.java",
            "status": "added",
            "additions": 35,
            "deletions": 0,
            "changes": 35,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/9730cd6a3bbb481ee4e400b51952b537589c469d/common%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fauthentication%2FUaaAuthenticationSerializationTests.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/9730cd6a3bbb481ee4e400b51952b537589c469d/common%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fauthentication%2FUaaAuthenticationSerializationTests.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/common%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fauthentication%2FUaaAuthenticationSerializationTests.java?ref=9730cd6a3bbb481ee4e400b51952b537589c469d",
            "patch": "@@ -0,0 +1,35 @@\n+/*\n+ * ******************************************************************************\n+ *  *     Cloud Foundry\n+ *  *     Copyright (c) [2009-2015] Pivotal Software, Inc. All Rights Reserved.\n+ *  *\n+ *  *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *  *     You may not use this product except in compliance with the License.\n+ *  *\n+ *  *     This product includes a number of subcomponents with\n+ *  *     separate copyright notices and license terms. Your use of these\n+ *  *     subcomponents is subject to the terms and conditions of the\n+ *  *     subcomponent's license, as noted in the LICENSE file.\n+ *  ******************************************************************************\n+ */\n+\n+package org.cloudfoundry.identity.uaa.authentication;\n+\n+import org.cloudfoundry.identity.uaa.util.JsonUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class UaaAuthenticationSerializationTests {\n+\n+    @Test\n+    public void testDeserializationWithoutAuthenticatedTime() throws Exception {\n+        String data =\"{\\\"principal\\\":{\\\"id\\\":\\\"user-id\\\",\\\"name\\\":\\\"username\\\",\\\"email\\\":\\\"email\\\",\\\"origin\\\":\\\"uaa\\\",\\\"externalId\\\":null,\\\"zoneId\\\":\\\"uaa\\\"},\\\"credentials\\\":null,\\\"authorities\\\":[],\\\"details\\\":null,\\\"authenticated\\\":true,\\\"authenticatedTime\\\":1438649464353,\\\"name\\\":\\\"username\\\"}\";\n+        UaaAuthentication authentication1 = JsonUtils.readValue(data, UaaAuthentication.class);\n+        Assert.assertEquals(1438649464353l, authentication1.getAuthenticatedTime());\n+\n+        String dataWithoutTime =\"{\\\"principal\\\":{\\\"id\\\":\\\"user-id\\\",\\\"name\\\":\\\"username\\\",\\\"email\\\":\\\"email\\\",\\\"origin\\\":\\\"uaa\\\",\\\"externalId\\\":null,\\\"zoneId\\\":\\\"uaa\\\"},\\\"credentials\\\":null,\\\"authorities\\\":[],\\\"details\\\":null,\\\"authenticated\\\":true,\\\"name\\\":\\\"username\\\"}\";\n+        UaaAuthentication authentication2 = JsonUtils.readValue(dataWithoutTime, UaaAuthentication.class);\n+        Assert.assertEquals(-1, authentication2.getAuthenticatedTime());\n+\n+    }\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "340d5c35b9e7d2a65ae6eb27eb80a93fdbc73002",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/ChangePasswordController.java",
            "status": "modified",
            "additions": 13,
            "deletions": 0,
            "changes": 13,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/9730cd6a3bbb481ee4e400b51952b537589c469d/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangePasswordController.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/9730cd6a3bbb481ee4e400b51952b537589c469d/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangePasswordController.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangePasswordController.java?ref=9730cd6a3bbb481ee4e400b51952b537589c469d",
            "patch": "@@ -12,6 +12,8 @@\n  *******************************************************************************/\n package org.cloudfoundry.identity.uaa.login;\n \n+import org.cloudfoundry.identity.uaa.authentication.UaaAuthentication;\n+import org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationDetails;\n import org.cloudfoundry.identity.uaa.scim.exception.InvalidPasswordException;\n import org.springframework.http.HttpStatus;\n import org.springframework.security.authentication.BadCredentialsException;\n@@ -26,6 +28,9 @@\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n \n+import java.util.Arrays;\n+import java.util.LinkedList;\n+\n import static org.springframework.web.bind.annotation.RequestMethod.GET;\n import static org.springframework.web.bind.annotation.RequestMethod.POST;\n \n@@ -67,6 +72,14 @@ public String changePassword(\n             changePasswordService.changePassword(username, currentPassword, newPassword);\n             request.getSession().invalidate();\n             request.getSession(true);\n+            if (authentication instanceof UaaAuthentication) {\n+                UaaAuthentication uaaAuthentication = (UaaAuthentication)authentication;\n+                authentication = new UaaAuthentication(\n+                    uaaAuthentication.getPrincipal(),\n+                    new LinkedList<>(uaaAuthentication.getAuthorities()),\n+                    new UaaAuthenticationDetails(request)\n+                );\n+            }\n             securityContext.setAuthentication(authentication);\n             return \"redirect:profile\";\n         } catch (BadCredentialsException e) {"
        },
        {
            "sha": "374279742ee6a1045153aa865255c38e062d290a",
            "filename": "scim/src/main/java/org/cloudfoundry/identity/uaa/scim/jdbc/JdbcScimUserProvisioning.java",
            "status": "modified",
            "additions": 11,
            "deletions": 4,
            "changes": 15,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/9730cd6a3bbb481ee4e400b51952b537589c469d/scim%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fjdbc%2FJdbcScimUserProvisioning.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/9730cd6a3bbb481ee4e400b51952b537589c469d/scim%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fjdbc%2FJdbcScimUserProvisioning.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/scim%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fjdbc%2FJdbcScimUserProvisioning.java?ref=9730cd6a3bbb481ee4e400b51952b537589c469d",
            "patch": "@@ -46,7 +46,9 @@\n import java.sql.SQLException;\n import java.sql.Timestamp;\n import java.sql.Types;\n+import java.util.Calendar;\n import java.util.Date;\n+import java.util.GregorianCalendar;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -66,7 +68,7 @@ public class JdbcScimUserProvisioning extends AbstractQueryable<ScimUser> implem\n     public static final String CREATE_USER_SQL = \"insert into users (\" + USER_FIELDS\n                     + \",password) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\";\n \n-    public static final String UPDATE_USER_SQL = \"update users set version=?, lastModified=?, userName=?, email=?, givenName=?, familyName=?, active=?, phoneNumber=?, verified=?, origin=?, external_id=?, salt=?, passwd_lastmodified=? where id=? and version=?\";\n+    public static final String UPDATE_USER_SQL = \"update users set version=?, lastModified=?, userName=?, email=?, givenName=?, familyName=?, active=?, phoneNumber=?, verified=?, origin=?, external_id=?, salt=? where id=? and version=?\";\n \n     public static final String DEACTIVATE_USER_SQL = \"update users set active=? where id=?\";\n \n@@ -169,7 +171,7 @@ public void setValues(PreparedStatement ps) throws SQLException {\n                     ps.setString(13, StringUtils.hasText(user.getExternalId())?user.getExternalId():null);\n                     ps.setString(14, identityZoneId);\n                     ps.setString(15, user.getSalt());\n-                    ps.setTimestamp(16, t);\n+                    ps.setTimestamp(16, getPasswordLastModifiedTimestamp(t));\n                     ps.setString(17, user.getPassword());\n                 }\n \n@@ -185,6 +187,12 @@ public void setValues(PreparedStatement ps) throws SQLException {\n         return retrieve(id);\n     }\n \n+    protected Timestamp getPasswordLastModifiedTimestamp(Timestamp t) {\n+        Calendar cal = new GregorianCalendar();\n+        cal.set(Calendar.MILLISECOND, 0);\n+        return new Timestamp(cal.getTimeInMillis());\n+    }\n+\n     @Override\n     public ScimUser createUser(ScimUser user, final String password) throws InvalidPasswordException,\n                     InvalidScimResourceException {\n@@ -232,7 +240,6 @@ public void setValues(PreparedStatement ps) throws SQLException {\n                 ps.setString(pos++, origin);\n                 ps.setString(pos++, StringUtils.hasText(user.getExternalId())?user.getExternalId():null);\n                 ps.setString(pos++, user.getSalt());\n-                ps.setTimestamp(pos++, t);\n                 ps.setString(pos++, id);\n                 ps.setInt(pos++, user.getVersion());\n             }\n@@ -265,7 +272,7 @@ public void setValues(PreparedStatement ps) throws SQLException {\n                 Timestamp t = new Timestamp(new Date().getTime());\n                 ps.setTimestamp(1, t);\n                 ps.setString(2, encNewPassword);\n-                ps.setTimestamp(3, t);\n+                ps.setTimestamp(3, getPasswordLastModifiedTimestamp(t));\n                 ps.setString(4, id);\n             }\n         });"
        },
        {
            "sha": "dbc878c0e504d6d07e5f40798dc7113074a15348",
            "filename": "scim/src/test/java/org/cloudfoundry/identity/uaa/scim/jdbc/JdbcScimUserProvisioningTests.java",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/9730cd6a3bbb481ee4e400b51952b537589c469d/scim%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fjdbc%2FJdbcScimUserProvisioningTests.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/9730cd6a3bbb481ee4e400b51952b537589c469d/scim%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fjdbc%2FJdbcScimUserProvisioningTests.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/scim%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fjdbc%2FJdbcScimUserProvisioningTests.java?ref=9730cd6a3bbb481ee4e400b51952b537589c469d",
            "patch": "@@ -164,7 +164,7 @@ public void canCreateUserInDefaultIdentityZone() {\n         assertEquals(\"uaa\", map.get(\"identity_zone_id\"));\n         assertNull(user.getPasswordLastModified());\n         assertNotNull(created.getPasswordLastModified());\n-        assertEquals(created.getMeta().getCreated(), created.getPasswordLastModified());\n+        assertEquals((created.getMeta().getCreated().getTime() / 1000l) * 1000l, created.getPasswordLastModified().getTime());\n     }\n \n     @Test\n@@ -174,13 +174,13 @@ public void canModifyPassword() throws Exception {\n         ScimUser created = db.createUser(user, \"j7hyqpassX\");\n         assertNull(user.getPasswordLastModified());\n         assertNotNull(created.getPasswordLastModified());\n-        assertEquals(created.getMeta().getCreated(), created.getPasswordLastModified());\n+        assertEquals((created.getMeta().getCreated().getTime() / 1000l) * 1000l, created.getPasswordLastModified().getTime());\n         Thread.sleep(10);\n         db.changePassword(created.getId(), \"j7hyqpassX\", \"j7hyqpassXXX\");\n \n         user = db.retrieve(created.getId());\n         assertNotNull(user.getPasswordLastModified());\n-        assertEquals(user.getMeta().getLastModified(), user.getPasswordLastModified());\n+        assertEquals((user.getMeta().getLastModified().getTime() / 1000l) * 1000l, user.getPasswordLastModified().getTime());\n     }\n \n     @Test"
        },
        {
            "sha": "5f3b29b2411219a6c9220fa4bf14fcc9ff44f797",
            "filename": "uaa/src/main/webapp/WEB-INF/spring-servlet.xml",
            "status": "modified",
            "additions": 9,
            "deletions": 0,
            "changes": 9,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/9730cd6a3bbb481ee4e400b51952b537589c469d/uaa%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fspring-servlet.xml",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/9730cd6a3bbb481ee4e400b51952b537589c469d/uaa%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fspring-servlet.xml",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fspring-servlet.xml?ref=9730cd6a3bbb481ee4e400b51952b537589c469d",
            "patch": "@@ -91,6 +91,7 @@\n                 <entry value-ref=\"identityZoneSwitchingFilter\"\n                        key=\"#{T(org.cloudfoundry.identity.uaa.security.web.SecurityFilterChainPostProcessor.FilterPosition).after(@oauth2TokenParseFilter)}\"/>\n                 <entry value-ref=\"xFrameOptionsFilter\" key=\"#{T(org.cloudfoundry.identity.uaa.security.web.SecurityFilterChainPostProcessor.FilterPosition).position(101)}\"/>\n+                <entry value-ref=\"sessionResetFilter\" key=\"#{T(org.cloudfoundry.identity.uaa.security.web.SecurityFilterChainPostProcessor.FilterPosition).position(102)}\"/>\n         \t</map>\n         </property>\n     </bean>\n@@ -107,6 +108,14 @@\n         <property name=\"additionalInternalHostnames\" value=\"#{@config['zones']==null ? null : @config['zones']['internal']==null ? null : @config['zones']['internal']['hostnames']}\"/>\n     </bean>\n \n+    <bean id=\"sessionResetFilter\" class=\"org.cloudfoundry.identity.uaa.authentication.SessionResetFilter\">\n+        <constructor-arg>\n+            <bean class=\"org.springframework.security.web.DefaultRedirectStrategy\"/>\n+        </constructor-arg>\n+        <constructor-arg value=\"/login\"/>\n+        <constructor-arg ref=\"userDatabase\"/>\n+    </bean>\n+\n     <bean id=\"identityZoneSwitchingFilter\" class=\"org.cloudfoundry.identity.uaa.zone.IdentityZoneSwitchingFilter\"/>\n \n     <bean id=\"uaaUrl\" class=\"java.lang.String\">"
        },
        {
            "sha": "3903a01cdd4356e9b91cae8acb52c73eaa1d80d3",
            "filename": "uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/ChangePasswordIT.java",
            "status": "modified",
            "additions": 7,
            "deletions": 8,
            "changes": 15,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/9730cd6a3bbb481ee4e400b51952b537589c469d/uaa%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fintegration%2Ffeature%2FChangePasswordIT.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/9730cd6a3bbb481ee4e400b51952b537589c469d/uaa%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fintegration%2Ffeature%2FChangePasswordIT.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fintegration%2Ffeature%2FChangePasswordIT.java?ref=9730cd6a3bbb481ee4e400b51952b537589c469d",
            "patch": "@@ -12,15 +12,7 @@\n  *******************************************************************************/\n package org.cloudfoundry.identity.uaa.integration.feature;\n \n-import java.security.SecureRandom;\n-\n-import static org.hamcrest.Matchers.containsString;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertThat;\n-import static org.junit.Assert.assertTrue;\n-\n import com.dumbster.smtp.SimpleSmtpServer;\n-import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n@@ -35,6 +27,13 @@\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n import org.springframework.web.client.RestTemplate;\n \n+import java.security.SecureRandom;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(classes = DefaultIntegrationTestConfig.class)\n public class ChangePasswordIT {"
        },
        {
            "sha": "614585716fcfacbace7e83011dfa303e3cf8a19a",
            "filename": "uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/password/PasswordChangeEndpointMockMvcTests.java",
            "status": "modified",
            "additions": 59,
            "deletions": 0,
            "changes": 59,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/9730cd6a3bbb481ee4e400b51952b537589c469d/uaa%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fmock%2Fpassword%2FPasswordChangeEndpointMockMvcTests.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/9730cd6a3bbb481ee4e400b51952b537589c469d/uaa%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fmock%2Fpassword%2FPasswordChangeEndpointMockMvcTests.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fmock%2Fpassword%2FPasswordChangeEndpointMockMvcTests.java?ref=9730cd6a3bbb481ee4e400b51952b537589c469d",
            "patch": "@@ -32,8 +32,10 @@\n import static org.junit.Assert.assertNotSame;\n import static org.junit.Assert.assertTrue;\n import static org.springframework.http.MediaType.APPLICATION_JSON;\n+import static org.springframework.http.MediaType.TEXT_HTML;\n import static org.springframework.http.MediaType.TEXT_HTML_VALUE;\n import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n@@ -144,6 +146,63 @@ public void changePassword_Resets_Session() throws Exception {\n \n     }\n \n+    @Test\n+    public void changePassword_Resets_All_Sessions() throws Exception {\n+        ScimUser user = createUser();\n+\n+        MockHttpSession session = new MockHttpSession();\n+        MockHttpSession afterLoginSessionA = (MockHttpSession) getMockMvc().perform(post(\"/login.do\")\n+            .session(session)\n+            .accept(TEXT_HTML_VALUE)\n+            .param(\"username\", user.getUserName())\n+            .param(\"password\", \"secr3T\"))\n+            .andExpect(status().isFound())\n+            .andExpect(redirectedUrl(\"/\"))\n+            .andReturn().getRequest().getSession(false);\n+\n+        session = new MockHttpSession();\n+        MockHttpSession afterLoginSessionB = (MockHttpSession) getMockMvc().perform(post(\"/login.do\")\n+            .session(session)\n+            .accept(TEXT_HTML_VALUE)\n+            .param(\"username\", user.getUserName())\n+            .param(\"password\", \"secr3T\"))\n+            .andExpect(status().isFound())\n+            .andExpect(redirectedUrl(\"/\"))\n+            .andReturn().getRequest().getSession(false);\n+\n+\n+        assertNotNull(afterLoginSessionA.getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY));\n+        assertNotNull(afterLoginSessionB.getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY));\n+\n+        getMockMvc().perform(get(\"/profile\").session(afterLoginSessionB))\n+            .andExpect(status().isOk());\n+\n+        Thread.sleep(1000 - (System.currentTimeMillis() % 1000) + 1);\n+\n+        MockHttpSession afterPasswordChange = (MockHttpSession) getMockMvc().perform(post(\"/change_password.do\")\n+            .session(afterLoginSessionA)\n+            .with(csrf())\n+            .accept(TEXT_HTML_VALUE)\n+            .param(\"current_password\", \"secr3T\")\n+            .param(\"new_password\", \"secr3T1\")\n+            .param(\"confirm_password\", \"secr3T1\"))\n+            .andExpect(status().isFound())\n+            .andExpect(redirectedUrl(\"profile\"))\n+            .andReturn().getRequest().getSession(false);\n+\n+        assertTrue(afterLoginSessionA.isInvalid());\n+        assertNotNull(afterPasswordChange);\n+        assertNotNull(afterPasswordChange.getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY));\n+        assertNotSame(afterLoginSessionA, afterPasswordChange);\n+        getMockMvc().perform(\n+            get(\"/profile\")\n+                .session(afterLoginSessionB)\n+                .accept(TEXT_HTML))\n+            .andExpect(status().isFound())\n+            .andExpect(redirectedUrl(\"/login\"));\n+\n+    }\n+\n     private ScimUser createUser() throws Exception {\n         String id = generator.generate();\n         ScimUser user = new ScimUser(id, id + \"user@example.com\", \"name\", \"familyname\");"
        }
    ]
}