{
    "sha": "29fd1107fd30579ad9bb23fae4dc3ba464205745",
    "node_id": "MDY6Q29tbWl0ODE5OTA3OjI5ZmQxMTA3ZmQzMDU3OWFkOWJiMjNmYWU0ZGMzYmE0NjQyMDU3NDU=",
    "commit": {
        "author": {
            "name": "Jozef Hartinger",
            "email": "jharting@redhat.com",
            "date": "2014-12-01T15:03:58Z"
        },
        "committer": {
            "name": "Jozef Hartinger",
            "email": "jharting@redhat.com",
            "date": "2014-12-04T10:16:55Z"
        },
        "message": "WELD-1802 RequestScopedCache - Testcase",
        "tree": {
            "sha": "b0d7b383302fa55f97cded1cd5cd9283e9df80a7",
            "url": "https://api.github.com/repos/weld/core/git/trees/b0d7b383302fa55f97cded1cd5cd9283e9df80a7"
        },
        "url": "https://api.github.com/repos/weld/core/git/commits/29fd1107fd30579ad9bb23fae4dc3ba464205745",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/weld/core/commits/29fd1107fd30579ad9bb23fae4dc3ba464205745",
    "html_url": "https://github.com/weld/core/commit/29fd1107fd30579ad9bb23fae4dc3ba464205745",
    "comments_url": "https://api.github.com/repos/weld/core/commits/29fd1107fd30579ad9bb23fae4dc3ba464205745/comments",
    "author": {
        "login": "jharting",
        "id": 167352,
        "node_id": "MDQ6VXNlcjE2NzM1Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/167352?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jharting",
        "html_url": "https://github.com/jharting",
        "followers_url": "https://api.github.com/users/jharting/followers",
        "following_url": "https://api.github.com/users/jharting/following{/other_user}",
        "gists_url": "https://api.github.com/users/jharting/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jharting/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jharting/subscriptions",
        "organizations_url": "https://api.github.com/users/jharting/orgs",
        "repos_url": "https://api.github.com/users/jharting/repos",
        "events_url": "https://api.github.com/users/jharting/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jharting/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "jharting",
        "id": 167352,
        "node_id": "MDQ6VXNlcjE2NzM1Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/167352?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jharting",
        "html_url": "https://github.com/jharting",
        "followers_url": "https://api.github.com/users/jharting/followers",
        "following_url": "https://api.github.com/users/jharting/following{/other_user}",
        "gists_url": "https://api.github.com/users/jharting/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jharting/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jharting/subscriptions",
        "organizations_url": "https://api.github.com/users/jharting/orgs",
        "repos_url": "https://api.github.com/users/jharting/repos",
        "events_url": "https://api.github.com/users/jharting/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jharting/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "00bdcbaffe1c8bc75a0d25d8dddecff396eda1c4",
            "url": "https://api.github.com/repos/weld/core/commits/00bdcbaffe1c8bc75a0d25d8dddecff396eda1c4",
            "html_url": "https://github.com/weld/core/commit/00bdcbaffe1c8bc75a0d25d8dddecff396eda1c4"
        }
    ],
    "stats": {
        "total": 168,
        "additions": 168,
        "deletions": 0
    },
    "files": [
        {
            "sha": "bd4f8c2b787c3655cebdd36cc54ff1c4b2983636",
            "filename": "tests-arquillian/src/test/java/org/jboss/weld/tests/contexts/cache/ConversationScopedBean.java",
            "status": "added",
            "additions": 33,
            "deletions": 0,
            "changes": 33,
            "blob_url": "https://github.com/weld/core/blob/29fd1107fd30579ad9bb23fae4dc3ba464205745/tests-arquillian%2Fsrc%2Ftest%2Fjava%2Forg%2Fjboss%2Fweld%2Ftests%2Fcontexts%2Fcache%2FConversationScopedBean.java",
            "raw_url": "https://github.com/weld/core/raw/29fd1107fd30579ad9bb23fae4dc3ba464205745/tests-arquillian%2Fsrc%2Ftest%2Fjava%2Forg%2Fjboss%2Fweld%2Ftests%2Fcontexts%2Fcache%2FConversationScopedBean.java",
            "contents_url": "https://api.github.com/repos/weld/core/contents/tests-arquillian%2Fsrc%2Ftest%2Fjava%2Forg%2Fjboss%2Fweld%2Ftests%2Fcontexts%2Fcache%2FConversationScopedBean.java?ref=29fd1107fd30579ad9bb23fae4dc3ba464205745",
            "patch": "@@ -0,0 +1,33 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2014, Red Hat, Inc., and individual contributors\n+ * by the @authors tag. See the copyright.txt in the distribution for a\n+ * full listing of individual contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.weld.tests.contexts.cache;\n+\n+import java.io.Serializable;\n+\n+import javax.enterprise.context.ConversationScoped;\n+\n+@ConversationScoped\n+public class ConversationScopedBean implements Serializable {\n+\n+    private String value = \"foo\";\n+\n+    public String getAndSet(String newValue) {\n+        String old = value;\n+        value = newValue;\n+        return old;\n+    }\n+}"
        },
        {
            "sha": "bba9b820e441dee7764ed339a73235ce44caf176",
            "filename": "tests-arquillian/src/test/java/org/jboss/weld/tests/contexts/cache/RequestScopedCacheLeakTest.java",
            "status": "added",
            "additions": 80,
            "deletions": 0,
            "changes": 80,
            "blob_url": "https://github.com/weld/core/blob/29fd1107fd30579ad9bb23fae4dc3ba464205745/tests-arquillian%2Fsrc%2Ftest%2Fjava%2Forg%2Fjboss%2Fweld%2Ftests%2Fcontexts%2Fcache%2FRequestScopedCacheLeakTest.java",
            "raw_url": "https://github.com/weld/core/raw/29fd1107fd30579ad9bb23fae4dc3ba464205745/tests-arquillian%2Fsrc%2Ftest%2Fjava%2Forg%2Fjboss%2Fweld%2Ftests%2Fcontexts%2Fcache%2FRequestScopedCacheLeakTest.java",
            "contents_url": "https://api.github.com/repos/weld/core/contents/tests-arquillian%2Fsrc%2Ftest%2Fjava%2Forg%2Fjboss%2Fweld%2Ftests%2Fcontexts%2Fcache%2FRequestScopedCacheLeakTest.java?ref=29fd1107fd30579ad9bb23fae4dc3ba464205745",
            "patch": "@@ -0,0 +1,80 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2014, Red Hat, Inc., and individual contributors\n+ * by the @authors tag. See the copyright.txt in the distribution for a\n+ * full listing of individual contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.weld.tests.contexts.cache;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import junit.framework.Assert;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.EmptyAsset;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.jboss.weld.tests.category.Integration;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;\n+import com.gargoylesoftware.htmlunit.WebClient;\n+\n+@RunWith(Arquillian.class)\n+@Category(Integration.class)\n+public class RequestScopedCacheLeakTest {\n+\n+    @ArquillianResource\n+    private URL contextPath;\n+\n+    @Deployment(testable = false)\n+    public static WebArchive getDeployment() {\n+        return ShrinkWrap.create(WebArchive.class).addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\")\n+                .addClasses(SimpleServlet.class, ConversationScopedBean.class);\n+    }\n+\n+    @Test\n+    public void test() throws Exception {\n+        WebClient webClient = new WebClient();\n+        webClient.setThrowExceptionOnFailingStatusCode(false);\n+        for (int i = 0; i < 100; i++) {\n+            // first, send out a hundred of poisoning requests\n+            // each of these should leave a thread in a broken state\n+            sendRequest(webClient, i, true);\n+        }\n+        for (int i = 0; i < 100; i++) {\n+            // now send out normal requests to see if they are affected by the thread's broken state\n+            String result = sendRequest(webClient, i, false);\n+            Assert.assertFalse(\"Invalid state detected after \" + (i + 1) + \" requests\", result.startsWith(\"bar\"));\n+        }\n+    }\n+\n+    private String sendRequest(WebClient webClient, int sequence, boolean poison) throws FailingHttpStatusCodeException, MalformedURLException, IOException {\n+        final String path = getPath(\"getAndSet\", sequence, poison);\n+        return webClient.getPage(path).getWebResponse().getContentAsString().trim();\n+    }\n+\n+    private String getPath(String test, int sequence, boolean poison) {\n+        String path = contextPath + \"/servlet?action=\" + test + \"&sequence=\" + sequence;\n+        if (poison) {\n+            path += \"&poison=true\";\n+        }\n+        return path;\n+    }\n+}"
        },
        {
            "sha": "93a114a146399aca21fdfbbb8489aef21d95db6a",
            "filename": "tests-arquillian/src/test/java/org/jboss/weld/tests/contexts/cache/SimpleServlet.java",
            "status": "added",
            "additions": 55,
            "deletions": 0,
            "changes": 55,
            "blob_url": "https://github.com/weld/core/blob/29fd1107fd30579ad9bb23fae4dc3ba464205745/tests-arquillian%2Fsrc%2Ftest%2Fjava%2Forg%2Fjboss%2Fweld%2Ftests%2Fcontexts%2Fcache%2FSimpleServlet.java",
            "raw_url": "https://github.com/weld/core/raw/29fd1107fd30579ad9bb23fae4dc3ba464205745/tests-arquillian%2Fsrc%2Ftest%2Fjava%2Forg%2Fjboss%2Fweld%2Ftests%2Fcontexts%2Fcache%2FSimpleServlet.java",
            "contents_url": "https://api.github.com/repos/weld/core/contents/tests-arquillian%2Fsrc%2Ftest%2Fjava%2Forg%2Fjboss%2Fweld%2Ftests%2Fcontexts%2Fcache%2FSimpleServlet.java?ref=29fd1107fd30579ad9bb23fae4dc3ba464205745",
            "patch": "@@ -0,0 +1,55 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2014, Red Hat, Inc., and individual contributors\n+ * by the @authors tag. See the copyright.txt in the distribution for a\n+ * full listing of individual contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.weld.tests.contexts.cache;\n+\n+import java.io.IOException;\n+\n+import javax.inject.Inject;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.jboss.weld.context.beanstore.ConversationNamingScheme;\n+\n+@WebServlet(value = \"/servlet\", asyncSupported = true)\n+public class SimpleServlet extends HttpServlet {\n+\n+    @Inject\n+    private ConversationScopedBean bean;\n+\n+    @Override\n+    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+        String action = req.getParameter(\"action\");\n+        String sequence = req.getParameter(\"sequence\");\n+        String poison = req.getParameter(\"poison\");\n+        if (\"getAndSet\".equals(action)) {\n+            // the value should always be foo\n+            String value = bean.getAndSet(\"bar\" + sequence);\n+            resp.getWriter().println(value);\n+            if (poison != null) {\n+                // this is a poisoning request\n+                // normal applications should never do something like this\n+                // we just do this to cause an exception to be thrown out of ConversationContext.deactivate\n+                req.removeAttribute(ConversationNamingScheme.PARAMETER_NAME);\n+            }\n+        } else {\n+            throw new IllegalArgumentException(action);\n+        }\n+    }\n+}"
        }
    ]
}