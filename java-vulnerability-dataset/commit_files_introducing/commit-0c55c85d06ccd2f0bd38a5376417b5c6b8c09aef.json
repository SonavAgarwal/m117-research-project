{
    "sha": "0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef",
    "node_id": "MDY6Q29tbWl0MTA2NDU2MzowYzU1Yzg1ZDA2Y2NkMmYwYmQzOGE1Mzc2NDE3YjVjNmI4YzA5YWVm",
    "commit": {
        "author": {
            "name": "Trustin Lee",
            "email": "trustin@gmail.com",
            "date": "2012-06-25T20:26:54Z"
        },
        "committer": {
            "name": "Trustin Lee",
            "email": "trustin@gmail.com",
            "date": "2012-07-07T05:30:25Z"
        },
        "message": "Make CookieEncoder and CookieDecoder stateless\n\n- Also: CookieEncoder is split into ServerCookieEncoder and\n  ClientCookieEncoder",
        "tree": {
            "sha": "2578c09ea558b373d3db64c328020daa4df4096d",
            "url": "https://api.github.com/repos/netty/netty/git/trees/2578c09ea558b373d3db64c328020daa4df4096d"
        },
        "url": "https://api.github.com/repos/netty/netty/git/commits/0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/netty/netty/commits/0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef",
    "html_url": "https://github.com/netty/netty/commit/0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef",
    "comments_url": "https://api.github.com/repos/netty/netty/commits/0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef/comments",
    "author": {
        "login": "trustin",
        "id": 173918,
        "node_id": "MDQ6VXNlcjE3MzkxOA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/173918?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/trustin",
        "html_url": "https://github.com/trustin",
        "followers_url": "https://api.github.com/users/trustin/followers",
        "following_url": "https://api.github.com/users/trustin/following{/other_user}",
        "gists_url": "https://api.github.com/users/trustin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/trustin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/trustin/subscriptions",
        "organizations_url": "https://api.github.com/users/trustin/orgs",
        "repos_url": "https://api.github.com/users/trustin/repos",
        "events_url": "https://api.github.com/users/trustin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/trustin/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "trustin",
        "id": 173918,
        "node_id": "MDQ6VXNlcjE3MzkxOA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/173918?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/trustin",
        "html_url": "https://github.com/trustin",
        "followers_url": "https://api.github.com/users/trustin/followers",
        "following_url": "https://api.github.com/users/trustin/following{/other_user}",
        "gists_url": "https://api.github.com/users/trustin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/trustin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/trustin/subscriptions",
        "organizations_url": "https://api.github.com/users/trustin/orgs",
        "repos_url": "https://api.github.com/users/trustin/repos",
        "events_url": "https://api.github.com/users/trustin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/trustin/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "c77af321427537be8d7526782ec9232c1a17ea3a",
            "url": "https://api.github.com/repos/netty/netty/commits/c77af321427537be8d7526782ec9232c1a17ea3a",
            "html_url": "https://github.com/netty/netty/commit/c77af321427537be8d7526782ec9232c1a17ea3a"
        }
    ],
    "stats": {
        "total": 762,
        "additions": 411,
        "deletions": 351
    },
    "files": [
        {
            "sha": "4dafb2a9c3d24d1d64a5eb0d298a292a9370af99",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/ClientCookieEncoder.java",
            "status": "added",
            "additions": 122,
            "deletions": 0,
            "changes": 122,
            "blob_url": "https://github.com/netty/netty/blob/0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FClientCookieEncoder.java",
            "raw_url": "https://github.com/netty/netty/raw/0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FClientCookieEncoder.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FClientCookieEncoder.java?ref=0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef",
            "patch": "@@ -0,0 +1,122 @@\n+package io.netty.handler.codec.http;\n+\n+import static io.netty.handler.codec.http.CookieEncoderUtil.*;\n+\n+import java.util.Collection;\n+\n+/**\n+ * Encodes client-side {@link Cookie}s into an HTTP header value.  This encoder can encode\n+ * the HTTP cookie version 0, 1, and 2.\n+ * <pre>\n+ * // Example\n+ * {@link HttpRequest} req = ...;\n+ * res.setHeader(\"Cookie\", {@link ClientCookieEncoder}.encode(\"JSESSIONID\", \"1234\"));\n+ * </pre>\n+ *\n+ * @see CookieDecoder\n+ *\n+ * @apiviz.stereotype utility\n+ * @apiviz.has        io.netty.handler.codec.http.Cookie oneway - - encodes\n+ */\n+public final class ClientCookieEncoder {\n+\n+    /**\n+     * Encodes the specified cookie into an HTTP header value.\n+     */\n+    public static String encode(String name, String value) {\n+        return encode(new DefaultCookie(name, value));\n+    }\n+\n+    public static String encode(Cookie cookie) {\n+        if (cookie == null) {\n+            throw new NullPointerException(\"cookie\");\n+        }\n+\n+        StringBuilder buf = new StringBuilder();\n+        encode(buf, cookie);\n+        return stripTrailingSeparator(buf);\n+    }\n+\n+    public static String encode(Cookie... cookies) {\n+        if (cookies == null) {\n+            throw new NullPointerException(\"cookies\");\n+        }\n+\n+        StringBuilder buf = new StringBuilder();\n+        for (Cookie c: cookies) {\n+            if (c == null) {\n+                break;\n+            }\n+\n+            encode(buf, c);\n+        }\n+        return stripTrailingSeparator(buf);\n+    }\n+\n+    public static String encode(Collection<Cookie> cookies) {\n+        if (cookies == null) {\n+            throw new NullPointerException(\"cookies\");\n+        }\n+\n+        StringBuilder buf = new StringBuilder();\n+        for (Cookie c: cookies) {\n+            if (c == null) {\n+                break;\n+            }\n+\n+            encode(buf, c);\n+        }\n+        return stripTrailingSeparator(buf);\n+    }\n+\n+    public static String encode(Iterable<Cookie> cookies) {\n+        if (cookies == null) {\n+            throw new NullPointerException(\"cookies\");\n+        }\n+\n+        StringBuilder buf = new StringBuilder();\n+        for (Cookie c: cookies) {\n+            if (c == null) {\n+                break;\n+            }\n+\n+            encode(buf, c);\n+        }\n+        return stripTrailingSeparator(buf);\n+    }\n+\n+    private static void encode(StringBuilder buf, Cookie c) {\n+        if (c.getVersion() >= 1) {\n+            add(buf, '$' + CookieHeaderNames.VERSION, 1);\n+        }\n+\n+        add(buf, c.getName(), c.getValue());\n+\n+        if (c.getPath() != null) {\n+            add(buf, '$' + CookieHeaderNames.PATH, c.getPath());\n+        }\n+\n+        if (c.getDomain() != null) {\n+            add(buf, '$' + CookieHeaderNames.DOMAIN, c.getDomain());\n+        }\n+\n+        if (c.getVersion() >= 1) {\n+            if (!c.getPorts().isEmpty()) {\n+                buf.append('$');\n+                buf.append(CookieHeaderNames.PORT);\n+                buf.append((char) HttpConstants.EQUALS);\n+                buf.append((char) HttpConstants.DOUBLE_QUOTE);\n+                for (int port: c.getPorts()) {\n+                    buf.append(port);\n+                    buf.append((char) HttpConstants.COMMA);\n+                }\n+                buf.setCharAt(buf.length() - 1, (char) HttpConstants.DOUBLE_QUOTE);\n+                buf.append((char) HttpConstants.SEMICOLON);\n+            }\n+        }\n+    }\n+\n+    private ClientCookieEncoder() {\n+        // Unused\n+    }\n+}"
        },
        {
            "sha": "2592c010eac72ce5fa963158fd2f23bb90818470",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/CookieDecoder.java",
            "status": "modified",
            "additions": 8,
            "deletions": 3,
            "changes": 11,
            "blob_url": "https://github.com/netty/netty/blob/0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FCookieDecoder.java",
            "raw_url": "https://github.com/netty/netty/raw/0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FCookieDecoder.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FCookieDecoder.java?ref=0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef",
            "patch": "@@ -32,12 +32,13 @@\n  * Set&lt;{@link Cookie}&gt; cookies = new {@link CookieDecoder}().decode(value);\n  * </pre>\n  *\n- * @see CookieEncoder\n+ * @see ClientCookieEncoder\n+ * @see ServerCookieEncoder\n  *\n  * @apiviz.stereotype utility\n  * @apiviz.has        io.netty.handler.codec.http.Cookie oneway - - decodes\n  */\n-public class CookieDecoder {\n+public final class CookieDecoder {\n \n     private static final String COMMA = \",\";\n \n@@ -46,7 +47,7 @@ public class CookieDecoder {\n      *\n      * @return the decoded {@link Cookie}s\n      */\n-    public Set<Cookie> decode(String header) {\n+    public static Set<Cookie> decode(String header) {\n         List<String> names = new ArrayList<String>(8);\n         List<String> values = new ArrayList<String>(8);\n         extractKeyValuePairs(header, names, values);\n@@ -289,4 +290,8 @@ private static void extractKeyValuePairs(\n             values.add(value);\n         }\n     }\n+\n+    private CookieDecoder() {\n+        // Unused\n+    }\n }"
        },
        {
            "sha": "a1acd5a4a6bba358baf209c0675248675fcc47d1",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/CookieEncoder.java",
            "status": "removed",
            "additions": 0,
            "deletions": 269,
            "changes": 269,
            "blob_url": "https://github.com/netty/netty/blob/c77af321427537be8d7526782ec9232c1a17ea3a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FCookieEncoder.java",
            "raw_url": "https://github.com/netty/netty/raw/c77af321427537be8d7526782ec9232c1a17ea3a/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FCookieEncoder.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FCookieEncoder.java?ref=c77af321427537be8d7526782ec9232c1a17ea3a",
            "patch": "@@ -1,269 +0,0 @@\n-/*\n- * Copyright 2012 The Netty Project\n- *\n- * The Netty Project licenses this file to you under the Apache License,\n- * version 2.0 (the \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at:\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations\n- * under the License.\n- */\n-package io.netty.handler.codec.http;\n-\n-import java.util.Date;\n-import java.util.Set;\n-import java.util.TreeSet;\n-\n-/**\n- * Encodes {@link Cookie}s into an HTTP header value.  This encoder can encode\n- * the HTTP cookie version 0, 1, and 2.\n- * <p>\n- * This encoder is stateful.  It maintains an internal data structure that\n- * holds the {@link Cookie}s added by the {@link #addCookie(String, String)}\n- * method.  Once {@link #encode()} is called, all added {@link Cookie}s are\n- * encoded into an HTTP header value and all {@link Cookie}s in the internal\n- * data structure are removed so that the encoder can start over.\n- * <pre>\n- * // Client-side example\n- * {@link HttpRequest} req = ...;\n- * {@link CookieEncoder} encoder = new {@link CookieEncoder}(false);\n- * encoder.addCookie(\"JSESSIONID\", \"1234\");\n- * res.setHeader(\"Cookie\", encoder.encode());\n- *\n- * // Server-side example\n- * {@link HttpResponse} res = ...;\n- * {@link CookieEncoder} encoder = new {@link CookieEncoder}(true);\n- * encoder.addCookie(\"JSESSIONID\", \"1234\");\n- * res.setHeader(\"Set-Cookie\", encoder.encode());\n- * </pre>\n- *\n- * @see CookieDecoder\n- *\n- * @apiviz.stereotype utility\n- * @apiviz.has        io.netty.handler.codec.http.Cookie oneway - - encodes\n- */\n-public class CookieEncoder {\n-\n-    private final Set<Cookie> cookies = new TreeSet<Cookie>();\n-    private final boolean server;\n-\n-    /**\n-     * Creates a new encoder.\n-     *\n-     * @param server {@code true} if and only if this encoder is supposed to\n-     *               encode server-side cookies.  {@code false} if and only if\n-     *               this encoder is supposed to encode client-side cookies.\n-     */\n-    public CookieEncoder(boolean server) {\n-        this.server = server;\n-    }\n-\n-    /**\n-     * Adds a new {@link Cookie} created with the specified name and value to\n-     * this encoder.\n-     */\n-    public void addCookie(String name, String value) {\n-        addCookie(new DefaultCookie(name, value));\n-    }\n-\n-    /**\n-     * Adds the specified {@link Cookie} to this encoder.\n-     */\n-    public void addCookie(Cookie cookie) {\n-        cookies.add(cookie);\n-    }\n-\n-    /**\n-     * Encodes the {@link Cookie}s which were added by {@link #addCookie(Cookie)}\n-     * so far into an HTTP header value.  If no {@link Cookie}s were added,\n-     * an empty string is returned.\n-     *\n-     * <strong>Be aware that calling this method will clear the {@link Cookie}s you added to\n-     * this encoder.</strong>\n-     */\n-    public String encode() {\n-        String answer;\n-        if (server) {\n-            answer = encodeServerSide();\n-        } else {\n-            answer = encodeClientSide();\n-        }\n-        cookies.clear();\n-        return answer;\n-    }\n-\n-    private String encodeServerSide() {\n-        if (cookies.size() > 1) {\n-            throw new IllegalStateException(\n-                    \"encode() can encode only one cookie on server mode: \" + cookies.size() + \" cookies added\");\n-        }\n-\n-        StringBuilder sb = new StringBuilder();\n-\n-        for (Cookie cookie: cookies) {\n-            add(sb, cookie.getName(), cookie.getValue());\n-\n-            if (cookie.getMaxAge() >= 0) {\n-                if (cookie.getVersion() == 0) {\n-                    addUnquoted(sb, CookieHeaderNames.EXPIRES,\n-                            new HttpHeaderDateFormat().format(\n-                                    new Date(System.currentTimeMillis() +\n-                                             cookie.getMaxAge() * 1000L)));\n-                } else {\n-                    add(sb, CookieHeaderNames.MAX_AGE, cookie.getMaxAge());\n-                }\n-            }\n-\n-            if (cookie.getPath() != null) {\n-                if (cookie.getVersion() > 0) {\n-                    add(sb, CookieHeaderNames.PATH, cookie.getPath());\n-                } else {\n-                    addUnquoted(sb, CookieHeaderNames.PATH, cookie.getPath());\n-                }\n-            }\n-\n-            if (cookie.getDomain() != null) {\n-                if (cookie.getVersion() > 0) {\n-                    add(sb, CookieHeaderNames.DOMAIN, cookie.getDomain());\n-                } else {\n-                    addUnquoted(sb, CookieHeaderNames.DOMAIN, cookie.getDomain());\n-                }\n-            }\n-            if (cookie.isSecure()) {\n-                sb.append(CookieHeaderNames.SECURE);\n-                sb.append((char) HttpConstants.SEMICOLON);\n-            }\n-            if (cookie.isHttpOnly()) {\n-                sb.append(CookieHeaderNames.HTTPONLY);\n-                sb.append((char) HttpConstants.SEMICOLON);\n-            }\n-            if (cookie.getVersion() >= 1) {\n-                if (cookie.getComment() != null) {\n-                    add(sb, CookieHeaderNames.COMMENT, cookie.getComment());\n-                }\n-\n-                add(sb, CookieHeaderNames.VERSION, 1);\n-\n-                if (cookie.getCommentUrl() != null) {\n-                    addQuoted(sb, CookieHeaderNames.COMMENTURL, cookie.getCommentUrl());\n-                }\n-\n-                if (!cookie.getPorts().isEmpty()) {\n-                    sb.append(CookieHeaderNames.PORT);\n-                    sb.append((char) HttpConstants.EQUALS);\n-                    sb.append((char) HttpConstants.DOUBLE_QUOTE);\n-                    for (int port: cookie.getPorts()) {\n-                        sb.append(port);\n-                        sb.append((char) HttpConstants.COMMA);\n-                    }\n-                    sb.setCharAt(sb.length() - 1, (char) HttpConstants.DOUBLE_QUOTE);\n-                    sb.append((char) HttpConstants.SEMICOLON);\n-                }\n-                if (cookie.isDiscard()) {\n-                    sb.append(CookieHeaderNames.DISCARD);\n-                    sb.append((char) HttpConstants.SEMICOLON);\n-                }\n-            }\n-        }\n-\n-        if (sb.length() > 0) {\n-            sb.setLength(sb.length() - 1);\n-        }\n-\n-        return sb.toString();\n-    }\n-\n-    private String encodeClientSide() {\n-        StringBuilder sb = new StringBuilder();\n-\n-        for (Cookie cookie: cookies) {\n-            if (cookie.getVersion() >= 1) {\n-                add(sb, '$' + CookieHeaderNames.VERSION, 1);\n-            }\n-\n-            add(sb, cookie.getName(), cookie.getValue());\n-\n-            if (cookie.getPath() != null) {\n-                add(sb, '$' + CookieHeaderNames.PATH, cookie.getPath());\n-            }\n-\n-            if (cookie.getDomain() != null) {\n-                add(sb, '$' + CookieHeaderNames.DOMAIN, cookie.getDomain());\n-            }\n-\n-            if (cookie.getVersion() >= 1) {\n-                if (!cookie.getPorts().isEmpty()) {\n-                    sb.append('$');\n-                    sb.append(CookieHeaderNames.PORT);\n-                    sb.append((char) HttpConstants.EQUALS);\n-                    sb.append((char) HttpConstants.DOUBLE_QUOTE);\n-                    for (int port: cookie.getPorts()) {\n-                        sb.append(port);\n-                        sb.append((char) HttpConstants.COMMA);\n-                    }\n-                    sb.setCharAt(sb.length() - 1, (char) HttpConstants.DOUBLE_QUOTE);\n-                    sb.append((char) HttpConstants.SEMICOLON);\n-                }\n-            }\n-        }\n-\n-        if (sb.length() > 0) {\n-            sb.setLength(sb.length() - 1);\n-        }\n-\n-        return sb.toString();\n-    }\n-\n-    private static void add(StringBuilder sb, String name, String val) {\n-        if (val == null) {\n-            addQuoted(sb, name, \"\");\n-            return;\n-        }\n-\n-        for (int i = 0; i < val.length(); i ++) {\n-            char c = val.charAt(i);\n-            switch (c) {\n-            case '\\t': case ' ': case '\"': case '(':  case ')': case ',':\n-            case '/':  case ':': case ';': case '<':  case '=': case '>':\n-            case '?':  case '@': case '[': case '\\\\': case ']':\n-            case '{':  case '}':\n-                addQuoted(sb, name, val);\n-                return;\n-            }\n-        }\n-\n-        addUnquoted(sb, name, val);\n-    }\n-\n-    private static void addUnquoted(StringBuilder sb, String name, String val) {\n-        sb.append(name);\n-        sb.append((char) HttpConstants.EQUALS);\n-        sb.append(val);\n-        sb.append((char) HttpConstants.SEMICOLON);\n-    }\n-\n-    private static void addQuoted(StringBuilder sb, String name, String val) {\n-        if (val == null) {\n-            val = \"\";\n-        }\n-\n-        sb.append(name);\n-        sb.append((char) HttpConstants.EQUALS);\n-        sb.append((char) HttpConstants.DOUBLE_QUOTE);\n-        sb.append(val.replace(\"\\\\\", \"\\\\\\\\\").replace(\"\\\"\", \"\\\\\\\"\"));\n-        sb.append((char) HttpConstants.DOUBLE_QUOTE);\n-        sb.append((char) HttpConstants.SEMICOLON);\n-    }\n-\n-    private static void add(StringBuilder sb, String name, long val) {\n-        sb.append(name);\n-        sb.append((char) HttpConstants.EQUALS);\n-        sb.append(val);\n-        sb.append((char) HttpConstants.SEMICOLON);\n-    }\n-}"
        },
        {
            "sha": "8891dee8412aed5ff6b838cdda02c777f6597157",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/CookieEncoderUtil.java",
            "status": "added",
            "additions": 79,
            "deletions": 0,
            "changes": 79,
            "blob_url": "https://github.com/netty/netty/blob/0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FCookieEncoderUtil.java",
            "raw_url": "https://github.com/netty/netty/raw/0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FCookieEncoderUtil.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FCookieEncoderUtil.java?ref=0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef",
            "patch": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2012 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http;\n+\n+\n+final class CookieEncoderUtil {\n+\n+    static String stripTrailingSeparator(StringBuilder buf) {\n+        if (buf.length() > 0) {\n+            buf.setLength(buf.length() - 1);\n+        }\n+        return buf.toString();\n+    }\n+\n+    static void add(StringBuilder sb, String name, String val) {\n+        if (val == null) {\n+            addQuoted(sb, name, \"\");\n+            return;\n+        }\n+\n+        for (int i = 0; i < val.length(); i ++) {\n+            char c = val.charAt(i);\n+            switch (c) {\n+            case '\\t': case ' ': case '\"': case '(':  case ')': case ',':\n+            case '/':  case ':': case ';': case '<':  case '=': case '>':\n+            case '?':  case '@': case '[': case '\\\\': case ']':\n+            case '{':  case '}':\n+                addQuoted(sb, name, val);\n+                return;\n+            }\n+        }\n+\n+        addUnquoted(sb, name, val);\n+    }\n+\n+    static void addUnquoted(StringBuilder sb, String name, String val) {\n+        sb.append(name);\n+        sb.append((char) HttpConstants.EQUALS);\n+        sb.append(val);\n+        sb.append((char) HttpConstants.SEMICOLON);\n+    }\n+\n+    static void addQuoted(StringBuilder sb, String name, String val) {\n+        if (val == null) {\n+            val = \"\";\n+        }\n+\n+        sb.append(name);\n+        sb.append((char) HttpConstants.EQUALS);\n+        sb.append((char) HttpConstants.DOUBLE_QUOTE);\n+        sb.append(val.replace(\"\\\\\", \"\\\\\\\\\").replace(\"\\\"\", \"\\\\\\\"\"));\n+        sb.append((char) HttpConstants.DOUBLE_QUOTE);\n+        sb.append((char) HttpConstants.SEMICOLON);\n+    }\n+\n+    static void add(StringBuilder sb, String name, long val) {\n+        sb.append(name);\n+        sb.append((char) HttpConstants.EQUALS);\n+        sb.append(val);\n+        sb.append((char) HttpConstants.SEMICOLON);\n+    }\n+\n+    private CookieEncoderUtil() {\n+        // Unused\n+    }\n+}"
        },
        {
            "sha": "a6cfe6a1b333e4559dc1f5baa4beb48b4b052dc8",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/HttpRequest.java",
            "status": "modified",
            "additions": 5,
            "deletions": 3,
            "changes": 8,
            "blob_url": "https://github.com/netty/netty/blob/0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FHttpRequest.java",
            "raw_url": "https://github.com/netty/netty/raw/0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FHttpRequest.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FHttpRequest.java?ref=0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef",
            "patch": "@@ -23,10 +23,12 @@\n  * <p>\n  * Unlike the Servlet API, a query string is constructed and decomposed by\n  * {@link QueryStringEncoder} and {@link QueryStringDecoder}.  {@link Cookie}\n- * support is also provided separately via {@link CookieEncoder} and\n- * {@link CookieDecoder}.\n+ * support is also provided separately via {@link CookieDecoder}, {@link ClientCookieEncoder},\n+ * and {@link @ServerCookieEncoder}.\n+ *\n  * @see HttpResponse\n- * @see CookieEncoder\n+ * @see ClientCookieEncoder\n+ * @see ServerCookieEncoder\n  * @see CookieDecoder\n  */\n public interface HttpRequest extends HttpMessage {"
        },
        {
            "sha": "0eb4023ea469c097821e7c1372ebaf75329b0cfb",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/HttpResponse.java",
            "status": "modified",
            "additions": 5,
            "deletions": 3,
            "changes": 8,
            "blob_url": "https://github.com/netty/netty/blob/0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FHttpResponse.java",
            "raw_url": "https://github.com/netty/netty/raw/0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FHttpResponse.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FHttpResponse.java?ref=0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef",
            "patch": "@@ -21,11 +21,13 @@\n  *\n  * <h3>Accessing Cookie</h3>\n  * <p>\n- * Unlike the Servlet API, {@link Cookie} support is provided separately via\n- * {@link CookieEncoder} and {@link CookieDecoder}.\n+ * Unlike the Servlet API, {@link Cookie} support is provided separately via {@link CookieDecoder},\n+ * {@link ClientCookieEncoder}, and {@link ServerCookieEncoder}.\n+ *\n  * @see HttpRequest\n- * @see CookieEncoder\n  * @see CookieDecoder\n+ * @see ClientCookieEncoder\n+ * @see ServerCookieEncoder\n  */\n public interface HttpResponse extends HttpMessage {\n "
        },
        {
            "sha": "6caa7f1e310ea3cfe584cb246ee345d692d47e4e",
            "filename": "codec-http/src/main/java/io/netty/handler/codec/http/ServerCookieEncoder.java",
            "status": "added",
            "additions": 155,
            "deletions": 0,
            "changes": 155,
            "blob_url": "https://github.com/netty/netty/blob/0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FServerCookieEncoder.java",
            "raw_url": "https://github.com/netty/netty/raw/0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FServerCookieEncoder.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FServerCookieEncoder.java?ref=0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef",
            "patch": "@@ -0,0 +1,155 @@\n+package io.netty.handler.codec.http;\n+\n+import static io.netty.handler.codec.http.CookieEncoderUtil.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * Encodes server-side {@link Cookie}s into HTTP header values.  This encoder can encode\n+ * the HTTP cookie version 0, 1, and 2.\n+ * <pre>\n+ * // Example\n+ * {@link HttpRequest} req = ...;\n+ * res.setHeader(\"Set-Cookie\", {@link ServerCookieEncoder}.encode(\"JSESSIONID\", \"1234\"));\n+ * </pre>\n+ *\n+ * @see CookieDecoder\n+ *\n+ * @apiviz.stereotype utility\n+ * @apiviz.has        io.netty.handler.codec.http.Cookie oneway - - encodes\n+ */\n+public final class ServerCookieEncoder {\n+\n+    /**\n+     * Encodes the specified cookie into an HTTP header value.\n+     */\n+    public static String encode(String name, String value) {\n+        return encode(new DefaultCookie(name, value));\n+    }\n+\n+    public static String encode(Cookie cookie) {\n+        if (cookie == null) {\n+            throw new NullPointerException(\"cookie\");\n+        }\n+\n+        StringBuilder buf = new StringBuilder();\n+\n+        add(buf, cookie.getName(), cookie.getValue());\n+\n+        if (cookie.getMaxAge() >= 0) {\n+            if (cookie.getVersion() == 0) {\n+                addUnquoted(buf, CookieHeaderNames.EXPIRES,\n+                        new HttpHeaderDateFormat().format(\n+                                new Date(System.currentTimeMillis() +\n+                                         cookie.getMaxAge() * 1000L)));\n+            } else {\n+                add(buf, CookieHeaderNames.MAX_AGE, cookie.getMaxAge());\n+            }\n+        }\n+\n+        if (cookie.getPath() != null) {\n+            if (cookie.getVersion() > 0) {\n+                add(buf, CookieHeaderNames.PATH, cookie.getPath());\n+            } else {\n+                addUnquoted(buf, CookieHeaderNames.PATH, cookie.getPath());\n+            }\n+        }\n+\n+        if (cookie.getDomain() != null) {\n+            if (cookie.getVersion() > 0) {\n+                add(buf, CookieHeaderNames.DOMAIN, cookie.getDomain());\n+            } else {\n+                addUnquoted(buf, CookieHeaderNames.DOMAIN, cookie.getDomain());\n+            }\n+        }\n+        if (cookie.isSecure()) {\n+            buf.append(CookieHeaderNames.SECURE);\n+            buf.append((char) HttpConstants.SEMICOLON);\n+        }\n+        if (cookie.isHttpOnly()) {\n+            buf.append(CookieHeaderNames.HTTPONLY);\n+            buf.append((char) HttpConstants.SEMICOLON);\n+        }\n+        if (cookie.getVersion() >= 1) {\n+            if (cookie.getComment() != null) {\n+                add(buf, CookieHeaderNames.COMMENT, cookie.getComment());\n+            }\n+\n+            add(buf, CookieHeaderNames.VERSION, 1);\n+\n+            if (cookie.getCommentUrl() != null) {\n+                addQuoted(buf, CookieHeaderNames.COMMENTURL, cookie.getCommentUrl());\n+            }\n+\n+            if (!cookie.getPorts().isEmpty()) {\n+                buf.append(CookieHeaderNames.PORT);\n+                buf.append((char) HttpConstants.EQUALS);\n+                buf.append((char) HttpConstants.DOUBLE_QUOTE);\n+                for (int port: cookie.getPorts()) {\n+                    buf.append(port);\n+                    buf.append((char) HttpConstants.COMMA);\n+                }\n+                buf.setCharAt(buf.length() - 1, (char) HttpConstants.DOUBLE_QUOTE);\n+                buf.append((char) HttpConstants.SEMICOLON);\n+            }\n+            if (cookie.isDiscard()) {\n+                buf.append(CookieHeaderNames.DISCARD);\n+                buf.append((char) HttpConstants.SEMICOLON);\n+            }\n+        }\n+\n+        return stripTrailingSeparator(buf);\n+    }\n+\n+    public static List<String> encode(Cookie... cookies) {\n+        if (cookies == null) {\n+            throw new NullPointerException(\"cookies\");\n+        }\n+\n+        List<String> encoded = new ArrayList<String>(cookies.length);\n+        for (Cookie c: cookies) {\n+            if (c == null) {\n+                break;\n+            }\n+            encoded.add(encode(c));\n+        }\n+        return encoded;\n+    }\n+\n+    public static List<String> encode(Collection<Cookie> cookies) {\n+        if (cookies == null) {\n+            throw new NullPointerException(\"cookies\");\n+        }\n+\n+        List<String> encoded = new ArrayList<String>(cookies.size());\n+        for (Cookie c: cookies) {\n+            if (c == null) {\n+                break;\n+            }\n+            encoded.add(encode(c));\n+        }\n+        return encoded;\n+    }\n+\n+    public static List<String> encode(Iterable<Cookie> cookies) {\n+        if (cookies == null) {\n+            throw new NullPointerException(\"cookies\");\n+        }\n+\n+        List<String> encoded = new ArrayList<String>();\n+        for (Cookie c: cookies) {\n+            if (c == null) {\n+                break;\n+            }\n+            encoded.add(encode(c));\n+        }\n+        return encoded;\n+    }\n+\n+    private ServerCookieEncoder() {\n+        // Unused\n+    }\n+}"
        },
        {
            "sha": "2055e4994b901f4ebaf5b0987f5feab74ba5a4ad",
            "filename": "codec-http/src/test/java/io/netty/handler/codec/http/CookieDecoderTest.java",
            "status": "modified",
            "additions": 15,
            "deletions": 21,
            "changes": 36,
            "blob_url": "https://github.com/netty/netty/blob/0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef/codec-http%2Fsrc%2Ftest%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FCookieDecoderTest.java",
            "raw_url": "https://github.com/netty/netty/raw/0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef/codec-http%2Fsrc%2Ftest%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FCookieDecoderTest.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Ftest%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FCookieDecoderTest.java?ref=0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef",
            "patch": "@@ -31,8 +31,7 @@ public void testDecodingSingleCookieV0() {\n         String cookieString = \"myCookie=myValue;expires=XXX;path=/apathsomewhere;domain=.adomainsomewhere;secure;\";\n         cookieString = cookieString.replace(\"XXX\", new HttpHeaderDateFormat().format(new Date(System.currentTimeMillis() + 50000)));\n \n-        CookieDecoder cookieDecoder = new CookieDecoder();\n-        Set<Cookie> cookies = cookieDecoder.decode(cookieString);\n+        Set<Cookie> cookies = CookieDecoder.decode(cookieString);\n         assertEquals(1, cookies.size());\n         Cookie cookie = cookies.iterator().next();\n         assertNotNull(cookie);\n@@ -62,8 +61,7 @@ public void testDecodingSingleCookieV0() {\n     @Test\n     public void testDecodingSingleCookieV0ExtraParamsIgnored() {\n         String cookieString = \"myCookie=myValue;max-age=50;path=/apathsomewhere;domain=.adomainsomewhere;secure;comment=this is a comment;version=0;commentURL=http://aurl.com;port=\\\"80,8080\\\";discard;\";\n-        CookieDecoder cookieDecoder = new CookieDecoder();\n-        Set<Cookie> cookies = cookieDecoder.decode(cookieString);\n+        Set<Cookie> cookies = CookieDecoder.decode(cookieString);\n         assertEquals(1, cookies.size());\n         Cookie cookie = cookies.iterator().next();\n         assertNotNull(cookie);\n@@ -81,8 +79,7 @@ public void testDecodingSingleCookieV0ExtraParamsIgnored() {\n     @Test\n     public void testDecodingSingleCookieV1() {\n         String cookieString = \"myCookie=myValue;max-age=50;path=/apathsomewhere;domain=.adomainsomewhere;secure;comment=this is a comment;version=1;\";\n-        CookieDecoder cookieDecoder = new CookieDecoder();\n-        Set<Cookie> cookies = cookieDecoder.decode(cookieString);\n+        Set<Cookie> cookies = CookieDecoder.decode(cookieString);\n         assertEquals(1, cookies.size());\n         Cookie cookie = cookies.iterator().next();\n         assertEquals(\"myValue\", cookie.getValue());\n@@ -101,8 +98,7 @@ public void testDecodingSingleCookieV1() {\n     @Test\n     public void testDecodingSingleCookieV1ExtraParamsIgnored() {\n         String cookieString = \"myCookie=myValue;max-age=50;path=/apathsomewhere;domain=.adomainsomewhere;secure;comment=this is a comment;version=1;commentURL=http://aurl.com;port='80,8080';discard;\";\n-        CookieDecoder cookieDecoder = new CookieDecoder();\n-        Set<Cookie> cookies = cookieDecoder.decode(cookieString);\n+        Set<Cookie> cookies = CookieDecoder.decode(cookieString);\n         assertEquals(1, cookies.size());\n         Cookie cookie = cookies.iterator().next();\n         assertNotNull(cookie);\n@@ -120,8 +116,7 @@ public void testDecodingSingleCookieV1ExtraParamsIgnored() {\n     @Test\n     public void testDecodingSingleCookieV2() {\n         String cookieString = \"myCookie=myValue;max-age=50;path=/apathsomewhere;domain=.adomainsomewhere;secure;comment=this is a comment;version=2;commentURL=http://aurl.com;port=\\\"80,8080\\\";discard;\";\n-        CookieDecoder cookieDecoder = new CookieDecoder();\n-        Set<Cookie> cookies = cookieDecoder.decode(cookieString);\n+        Set<Cookie> cookies = CookieDecoder.decode(cookieString);\n         assertEquals(1, cookies.size());\n         Cookie cookie = cookies.iterator().next();\n         assertNotNull(cookie);\n@@ -145,9 +140,8 @@ public void testDecodingMultipleCookies() {\n         String c1 = \"myCookie=myValue;max-age=50;path=/apathsomewhere;domain=.adomainsomewhere;secure;comment=this is a comment;version=2;commentURL=\\\"http://aurl.com\\\";port='80,8080';discard;\";\n         String c2 = \"myCookie2=myValue2;max-age=0;path=/anotherpathsomewhere;domain=.anotherdomainsomewhere;comment=this is another comment;version=2;commentURL=http://anotherurl.com;\";\n         String c3 = \"myCookie3=myValue3;max-age=0;version=2;\";\n-        CookieDecoder decoder = new CookieDecoder();\n \n-        Set<Cookie> cookies = decoder.decode(c1 + c2 + c3);\n+        Set<Cookie> cookies = CookieDecoder.decode(c1 + c2 + c3);\n         assertEquals(3, cookies.size());\n         Iterator<Cookie> it = cookies.iterator();\n         Cookie cookie = it.next();\n@@ -196,7 +190,7 @@ public void testDecodingClientSideCookies() {\n                 \"Part_Number=\\\"Riding_Rocket_0023\\\"; $Path=\\\"/acme/ammo\\\"; \" +\n                 \"Part_Number=\\\"Rocket_Launcher_0001\\\"; $Path=\\\"/acme\\\"\";\n \n-        Set<Cookie> cookies = new CookieDecoder().decode(source);\n+        Set<Cookie> cookies = CookieDecoder.decode(source);\n         Iterator<Cookie> it = cookies.iterator();\n         Cookie c;\n \n@@ -231,7 +225,7 @@ public void testDecodingCommaSeparatedClientSideCookies() {\n             \"$Version=\\\"1\\\"; session_id=\\\"1234\\\", \" +\n             \"$Version=\\\"1\\\"; session_id=\\\"1111\\\"; $Domain=\\\".cracker.edu\\\"\";\n \n-        Set<Cookie> cookies = new CookieDecoder().decode(source);\n+        Set<Cookie> cookies = CookieDecoder.decode(source);\n         Iterator<Cookie> it = cookies.iterator();\n         Cookie c;\n \n@@ -275,7 +269,7 @@ public void testDecodingQuotedCookie() {\n             \"h=\\\"';,\\\\x\\\"\";\n \n \n-        Set<Cookie> cookies = new CookieDecoder().decode(source);\n+        Set<Cookie> cookies = CookieDecoder.decode(source);\n         Iterator<Cookie> it = cookies.iterator();\n         Cookie c;\n \n@@ -322,7 +316,7 @@ public void testDecodingGoogleAnalyticsCookie() {\n             \"__utma=48461872.1094088325.1258140131.1258140131.1258140131.1; \" +\n             \"__utmb=48461872.13.10.1258140131; __utmc=48461872; \" +\n             \"__utmz=48461872.1258140131.1.1.utmcsr=overstock.com|utmccn=(referral)|utmcmd=referral|utmcct=/Home-Garden/Furniture/Clearance,/clearance,/32/dept.html\";\n-        Set<Cookie> cookies = new CookieDecoder().decode(source);\n+        Set<Cookie> cookies = CookieDecoder.decode(source);\n         Iterator<Cookie> it = cookies.iterator();\n         Cookie c;\n \n@@ -361,7 +355,7 @@ public void testDecodingLongDates() {\n \n         String source = \"Format=EU; expires=Fri, 31-Dec-9999 23:59:59 GMT; path=/\";\n \n-        Set<Cookie> cookies = new CookieDecoder().decode(source);\n+        Set<Cookie> cookies = CookieDecoder.decode(source);\n \n         Cookie c = cookies.iterator().next();\n         assertTrue(Math.abs(expectedMaxAge - c.getMaxAge()) < 2);\n@@ -372,7 +366,7 @@ public void testDecodingValueWithComma() {\n         String source = \"UserCookie=timeZoneName=(GMT+04:00) Moscow, St. Petersburg, Volgograd&promocode=&region=BE;\" +\n                 \" expires=Sat, 01-Dec-2012 10:53:31 GMT; path=/\";\n \n-        Set<Cookie> cookies = new CookieDecoder().decode(source);\n+        Set<Cookie> cookies = CookieDecoder.decode(source);\n \n         Cookie c = cookies.iterator().next();\n         assertEquals(\"timeZoneName=(GMT+04:00) Moscow, St. Petersburg, Volgograd&promocode=&region=BE\", c.getValue());\n@@ -381,7 +375,7 @@ public void testDecodingValueWithComma() {\n     @Test\n     public void testDecodingWeirdNames1() {\n         String src = \"path=; expires=Mon, 01-Jan-1990 00:00:00 GMT; path=/; domain=.www.google.com\";\n-        Set<Cookie> cookies = new CookieDecoder().decode(src);\n+        Set<Cookie> cookies = CookieDecoder.decode(src);\n         Cookie c = cookies.iterator().next();\n         assertEquals(\"path\", c.getName());\n         assertEquals(\"\", c.getValue());\n@@ -391,7 +385,7 @@ public void testDecodingWeirdNames1() {\n     @Test\n     public void testDecodingWeirdNames2() {\n         String src = \"HTTPOnly=\";\n-        Set<Cookie> cookies = new CookieDecoder().decode(src);\n+        Set<Cookie> cookies = CookieDecoder.decode(src);\n         Cookie c = cookies.iterator().next();\n         assertEquals(\"HTTPOnly\", c.getName());\n         assertEquals(\"\", c.getValue());\n@@ -445,7 +439,7 @@ public void testDecodingLongValue() {\n                 \"%=KqtH!$?mi!!!!'=KqtH!$?mx!!!!'=KqtH!$D7]!!!!#=J_#p!$D@T!!!!#=J_#p!$V<g!!!!\" +\n                 \"'=KqtH\";\n \n-        Set<Cookie> cookies = new CookieDecoder().decode(\"bh=\\\"\" + longValue + \"\\\";\");\n+        Set<Cookie> cookies = CookieDecoder.decode(\"bh=\\\"\" + longValue + \"\\\";\");\n         assertEquals(1, cookies.size());\n         Cookie c = cookies.iterator().next();\n         assertEquals(\"bh\", c.getName());"
        },
        {
            "sha": "ff701c12359bd13e6cd4fc1554a9bef0bfec7c6b",
            "filename": "codec-http/src/test/java/io/netty/handler/codec/http/CookieEncoderTest.java",
            "status": "modified",
            "additions": 9,
            "deletions": 35,
            "changes": 44,
            "blob_url": "https://github.com/netty/netty/blob/0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef/codec-http%2Fsrc%2Ftest%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FCookieEncoderTest.java",
            "raw_url": "https://github.com/netty/netty/raw/0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef/codec-http%2Fsrc%2Ftest%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FCookieEncoderTest.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/codec-http%2Fsrc%2Ftest%2Fjava%2Fio%2Fnetty%2Fhandler%2Fcodec%2Fhttp%2FCookieEncoderTest.java?ref=0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef",
            "patch": "@@ -19,6 +19,7 @@\n \n import java.text.DateFormat;\n import java.util.Date;\n+import java.util.List;\n \n import org.junit.Test;\n \n@@ -28,8 +29,6 @@ public void testEncodingSingleCookieV0() {\n         String result = \"myCookie=myValue;Expires=XXX;Path=/apathsomewhere;Domain=.adomainsomewhere;Secure\";\n         DateFormat df = new HttpHeaderDateFormat();\n         Cookie cookie = new DefaultCookie(\"myCookie\", \"myValue\");\n-        CookieEncoder encoder = new CookieEncoder(true);\n-        encoder.addCookie(cookie);\n         cookie.setComment(\"this is a Comment\");\n         cookie.setCommentUrl(\"http://aurl.com\");\n         cookie.setDomain(\".adomainsomewhere\");\n@@ -39,7 +38,7 @@ public void testEncodingSingleCookieV0() {\n         cookie.setPorts(80, 8080);\n         cookie.setSecure(true);\n \n-        String encodedCookie = encoder.encode();\n+        String encodedCookie = ServerCookieEncoder.encode(cookie);\n \n         long currentTime = System.currentTimeMillis();\n         boolean fail = true;\n@@ -61,24 +60,20 @@ public void testEncodingSingleCookieV0() {\n     public void testEncodingSingleCookieV1() {\n         String result = \"myCookie=myValue;Max-Age=50;Path=\\\"/apathsomewhere\\\";Domain=.adomainsomewhere;Secure;Comment=\\\"this is a Comment\\\";Version=1\";\n         Cookie cookie = new DefaultCookie(\"myCookie\", \"myValue\");\n-        CookieEncoder encoder = new CookieEncoder(true);\n-        encoder.addCookie(cookie);\n         cookie.setVersion(1);\n         cookie.setComment(\"this is a Comment\");\n         cookie.setDomain(\".adomainsomewhere\");\n         cookie.setMaxAge(50);\n         cookie.setPath(\"/apathsomewhere\");\n         cookie.setSecure(true);\n-        String encodedCookie = encoder.encode();\n+        String encodedCookie = ServerCookieEncoder.encode(cookie);\n         assertEquals(result, encodedCookie);\n     }\n \n     @Test\n     public void testEncodingSingleCookieV2() {\n         String result = \"myCookie=myValue;Max-Age=50;Path=\\\"/apathsomewhere\\\";Domain=.adomainsomewhere;Secure;Comment=\\\"this is a Comment\\\";Version=1;CommentURL=\\\"http://aurl.com\\\";Port=\\\"80,8080\\\";Discard\";\n         Cookie cookie = new DefaultCookie(\"myCookie\", \"myValue\");\n-        CookieEncoder encoder = new CookieEncoder(true);\n-        encoder.addCookie(cookie);\n         cookie.setVersion(1);\n         cookie.setComment(\"this is a Comment\");\n         cookie.setCommentUrl(\"http://aurl.com\");\n@@ -88,29 +83,15 @@ public void testEncodingSingleCookieV2() {\n         cookie.setPath(\"/apathsomewhere\");\n         cookie.setPorts(80, 8080);\n         cookie.setSecure(true);\n-        String encodedCookie = encoder.encode();\n+        String encodedCookie = ServerCookieEncoder.encode(cookie);\n         assertEquals(result, encodedCookie);\n     }\n \n-    @Test\n-    public void testEncodingMultipleServerCookies() {\n-        CookieEncoder encoder = new CookieEncoder(true);\n-        encoder.addCookie(\"a\", \"b\");\n-        encoder.addCookie(\"b\", \"c\");\n-        try {\n-            encoder.encode();\n-            fail();\n-        } catch (IllegalStateException e) {\n-            // Expected\n-        }\n-    }\n-\n     @Test\n     public void testEncodingMultipleClientCookies() {\n         String c1 = \"$Version=1;myCookie=myValue;$Path=\\\"/apathsomewhere\\\";$Domain=.adomainsomewhere;$Port=\\\"80,8080\\\";\";\n         String c2 = \"$Version=1;myCookie2=myValue2;$Path=\\\"/anotherpathsomewhere\\\";$Domain=.anotherdomainsomewhere;\";\n         String c3 = \"$Version=1;myCookie3=myValue3\";\n-        CookieEncoder encoder = new CookieEncoder(false);\n         Cookie cookie = new DefaultCookie(\"myCookie\", \"myValue\");\n         cookie.setVersion(1);\n         cookie.setComment(\"this is a Comment\");\n@@ -121,7 +102,6 @@ public void testEncodingMultipleClientCookies() {\n         cookie.setPath(\"/apathsomewhere\");\n         cookie.setPorts(80, 8080);\n         cookie.setSecure(true);\n-        encoder.addCookie(cookie);\n         Cookie cookie2 = new DefaultCookie(\"myCookie2\", \"myValue2\");\n         cookie2.setVersion(1);\n         cookie2.setComment(\"this is another Comment\");\n@@ -130,23 +110,17 @@ public void testEncodingMultipleClientCookies() {\n         cookie2.setDiscard(false);\n         cookie2.setPath(\"/anotherpathsomewhere\");\n         cookie2.setSecure(false);\n-        encoder.addCookie(cookie2);\n         Cookie cookie3 = new DefaultCookie(\"myCookie3\", \"myValue3\");\n         cookie3.setVersion(1);\n-        encoder.addCookie(cookie3);\n-        String encodedCookie = encoder.encode();\n+        String encodedCookie = ClientCookieEncoder.encode(cookie, cookie2, cookie3);\n         assertEquals(c1 + c2 + c3, encodedCookie);\n     }\n \n     @Test\n     public void testEncodingWithNoCookies() {\n-    \tCookieEncoder encoderForServer = new CookieEncoder(true);\n-    \tString encodedCookie1 = encoderForServer.encode();\n-    \tCookieEncoder encoderForClient = new CookieEncoder(false);\n-    \tString encodedCookie2 = encoderForClient.encode();\n-    \tassertNotNull(encodedCookie1);\n-    \tassertNotNull(encodedCookie2);\n-\n+        String encodedCookie1 = ClientCookieEncoder.encode();\n+        List<String> encodedCookie2 = ServerCookieEncoder.encode();\n+        assertNotNull(encodedCookie1);\n+        assertNotNull(encodedCookie2);\n     }\n-\n }"
        },
        {
            "sha": "89918eeb7a2418a39ea517cd8945037770760d1a",
            "filename": "example/src/main/java/io/netty/example/http/snoop/HttpSnoopClient.java",
            "status": "modified",
            "additions": 7,
            "deletions": 5,
            "changes": 12,
            "blob_url": "https://github.com/netty/netty/blob/0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef/example%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fexample%2Fhttp%2Fsnoop%2FHttpSnoopClient.java",
            "raw_url": "https://github.com/netty/netty/raw/0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef/example%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fexample%2Fhttp%2Fsnoop%2FHttpSnoopClient.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/example%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fexample%2Fhttp%2Fsnoop%2FHttpSnoopClient.java?ref=0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef",
            "patch": "@@ -19,7 +19,8 @@\n import io.netty.channel.Channel;\n import io.netty.channel.socket.nio.NioEventLoop;\n import io.netty.channel.socket.nio.NioSocketChannel;\n-import io.netty.handler.codec.http.CookieEncoder;\n+import io.netty.handler.codec.http.ClientCookieEncoder;\n+import io.netty.handler.codec.http.DefaultCookie;\n import io.netty.handler.codec.http.DefaultHttpRequest;\n import io.netty.handler.codec.http.HttpHeaders;\n import io.netty.handler.codec.http.HttpMethod;\n@@ -79,10 +80,11 @@ public void run() throws Exception {\n             request.setHeader(HttpHeaders.Names.ACCEPT_ENCODING, HttpHeaders.Values.GZIP);\n \n             // Set some example cookies.\n-            CookieEncoder httpCookieEncoder = new CookieEncoder(false);\n-            httpCookieEncoder.addCookie(\"my-cookie\", \"foo\");\n-            httpCookieEncoder.addCookie(\"another-cookie\", \"bar\");\n-            request.setHeader(HttpHeaders.Names.COOKIE, httpCookieEncoder.encode());\n+            request.setHeader(\n+                    HttpHeaders.Names.COOKIE,\n+                    ClientCookieEncoder.encode(\n+                            new DefaultCookie(\"my-cookie\", \"foo\"),\n+                            new DefaultCookie(\"another-cookie\", \"bar\")));\n \n             // Send the HTTP request.\n             ch.write(request);"
        },
        {
            "sha": "2d99d18f95037e6b8f4ec0b3b8a8ff766f5569fc",
            "filename": "example/src/main/java/io/netty/example/http/snoop/HttpSnoopServerHandler.java",
            "status": "modified",
            "additions": 6,
            "deletions": 12,
            "changes": 18,
            "blob_url": "https://github.com/netty/netty/blob/0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef/example%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fexample%2Fhttp%2Fsnoop%2FHttpSnoopServerHandler.java",
            "raw_url": "https://github.com/netty/netty/raw/0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef/example%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fexample%2Fhttp%2Fsnoop%2FHttpSnoopServerHandler.java",
            "contents_url": "https://api.github.com/repos/netty/netty/contents/example%2Fsrc%2Fmain%2Fjava%2Fio%2Fnetty%2Fexample%2Fhttp%2Fsnoop%2FHttpSnoopServerHandler.java?ref=0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef",
            "patch": "@@ -27,14 +27,14 @@\n import io.netty.channel.ChannelInboundMessageHandlerAdapter;\n import io.netty.handler.codec.http.Cookie;\n import io.netty.handler.codec.http.CookieDecoder;\n-import io.netty.handler.codec.http.CookieEncoder;\n import io.netty.handler.codec.http.DefaultHttpResponse;\n import io.netty.handler.codec.http.HttpChunk;\n import io.netty.handler.codec.http.HttpChunkTrailer;\n import io.netty.handler.codec.http.HttpHeaders;\n import io.netty.handler.codec.http.HttpRequest;\n import io.netty.handler.codec.http.HttpResponse;\n import io.netty.handler.codec.http.QueryStringDecoder;\n+import io.netty.handler.codec.http.ServerCookieEncoder;\n import io.netty.util.CharsetUtil;\n \n import java.util.List;\n@@ -137,23 +137,17 @@ private void writeResponse(ChannelHandlerContext ctx) {\n         // Encode the cookie.\n         String cookieString = request.getHeader(COOKIE);\n         if (cookieString != null) {\n-            CookieDecoder cookieDecoder = new CookieDecoder();\n-            Set<Cookie> cookies = cookieDecoder.decode(cookieString);\n+            Set<Cookie> cookies = CookieDecoder.decode(cookieString);\n             if (!cookies.isEmpty()) {\n                 // Reset the cookies if necessary.\n-                CookieEncoder cookieEncoder = new CookieEncoder(true);\n-                for (Cookie cookie : cookies) {\n-                    cookieEncoder.addCookie(cookie);\n-                    response.addHeader(SET_COOKIE, cookieEncoder.encode());\n+                for (Cookie cookie: cookies) {\n+                    response.addHeader(SET_COOKIE, ServerCookieEncoder.encode(cookie));\n                 }\n             }\n         } else {\n             // Browser sent no cookie.  Add some.\n-            CookieEncoder cookieEncoder = new CookieEncoder(true);\n-            cookieEncoder.addCookie(\"key1\", \"value1\");\n-            response.addHeader(SET_COOKIE, cookieEncoder.encode());\n-            cookieEncoder.addCookie(\"key2\", \"value2\");\n-            response.addHeader(SET_COOKIE, cookieEncoder.encode());\n+            response.addHeader(SET_COOKIE, ServerCookieEncoder.encode(\"key1\", \"value1\"));\n+            response.addHeader(SET_COOKIE, ServerCookieEncoder.encode(\"key2\", \"value2\"));\n         }\n \n         // Write the response."
        }
    ]
}