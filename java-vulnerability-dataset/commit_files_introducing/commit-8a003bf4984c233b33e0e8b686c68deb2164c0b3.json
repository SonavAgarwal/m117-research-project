{
    "sha": "8a003bf4984c233b33e0e8b686c68deb2164c0b3",
    "node_id": "MDY6Q29tbWl0NDYyNTEyMDQ6OGEwMDNiZjQ5ODRjMjMzYjMzZTBlOGI2ODZjNjhkZWIyMTY0YzBiMw==",
    "commit": {
        "author": {
            "name": "Trustin Lee",
            "email": "t@motd.kr",
            "date": "2019-01-07T10:02:28Z"
        },
        "committer": {
            "name": "GitHub",
            "email": "noreply@github.com",
            "date": "2019-01-07T10:02:28Z"
        },
        "message": "Make HttpHeaderNames.of() accept CharSequence in lieu of String (#1516)\n\nMotivation:\r\n\r\nBy allowing a user to specify `AsciiString` or other `CharSequence`\r\nimplementations, we can perform more HTTP header name normalization,\r\ne.g.\r\n\r\n    AsciiString contentType = AsciiString.of(\"Content-Type\");\r\n    assert HttpHeaderNames.CONTENT_TYPE != contentType;\r\n    AsciiString normContentType = HttpHeaderNames.of(contentType);\r\n    assert HttpHeaderNames.CONTENT_TYPE == normContentType;\r\n\r\nModifications:\r\n\r\n- Change the parameter type of `HttpHeaderNames.of()` from `String` to\r\n  `CharSequence` and add fast path for the case of `AsciiString`.\r\n- Use `HttpHeaderNames.of()` instead of `AsciiString.of()` wherever\r\n  possible.\r\n- Use `AsciiString.cached()` instead of `AsciiString.of()` when the type\r\n  of the string is actually a `String`.\r\n- Make `ClientBuilder.add/setHttpHeader()` accept `CharSequence` as a\r\n  header name.\r\n\r\nResult:\r\n\r\n- Efficiency",
        "tree": {
            "sha": "c18b8f9a8660fc206f2640d828431676f7f0a7de",
            "url": "https://api.github.com/repos/line/armeria/git/trees/c18b8f9a8660fc206f2640d828431676f7f0a7de"
        },
        "url": "https://api.github.com/repos/line/armeria/git/commits/8a003bf4984c233b33e0e8b686c68deb2164c0b3",
        "comment_count": 0,
        "verification": {
            "verified": true,
            "reason": "valid",
            "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcMyO0CRBK7hj4Ov3rIwAAdHIIADJnO35I8l1h07BkUiUh/SYV\npjyH7K/P6bRsUtP060MiO2doA3QF9mUfY8KzaYxMMjvYvzVK0QF9Exs/XP5ZJ4sK\ndH0KMI5RELXNmW85nMjkZerbwxhjhR4MXGvBCJbDRfhKaLCwXD23/cx1m1NvIGbz\nxc0ORsj0xf3iyuPpl7guYhynrrJlhAxFpyBJroyPehz2UPOQYItad9BX58ek9wVS\nXdHUUTvzdYaf9K5BzDQKqYvy3aqucmhKZXwXffwsUFWNtKRbIkjX/ZDm1uLrOcAM\n8IczwA+iaFKSF1g14ae2ML8upZ9WwaMnuLfnBTB0BWEGZOwG2Rhm9RVzG1adghE=\n=zATc\n-----END PGP SIGNATURE-----\n",
            "payload": "tree c18b8f9a8660fc206f2640d828431676f7f0a7de\nparent 24ced68ecc4fc6c7ce58e275e32d8b67a78bd3e2\nauthor Trustin Lee <t@motd.kr> 1546855348 +0900\ncommitter GitHub <noreply@github.com> 1546855348 +0900\n\nMake HttpHeaderNames.of() accept CharSequence in lieu of String (#1516)\n\nMotivation:\r\n\r\nBy allowing a user to specify `AsciiString` or other `CharSequence`\r\nimplementations, we can perform more HTTP header name normalization,\r\ne.g.\r\n\r\n    AsciiString contentType = AsciiString.of(\"Content-Type\");\r\n    assert HttpHeaderNames.CONTENT_TYPE != contentType;\r\n    AsciiString normContentType = HttpHeaderNames.of(contentType);\r\n    assert HttpHeaderNames.CONTENT_TYPE == normContentType;\r\n\r\nModifications:\r\n\r\n- Change the parameter type of `HttpHeaderNames.of()` from `String` to\r\n  `CharSequence` and add fast path for the case of `AsciiString`.\r\n- Use `HttpHeaderNames.of()` instead of `AsciiString.of()` wherever\r\n  possible.\r\n- Use `AsciiString.cached()` instead of `AsciiString.of()` when the type\r\n  of the string is actually a `String`.\r\n- Make `ClientBuilder.add/setHttpHeader()` accept `CharSequence` as a\r\n  header name.\r\n\r\nResult:\r\n\r\n- Efficiency",
            "verified_at": "2024-01-16T19:59:59Z"
        }
    },
    "url": "https://api.github.com/repos/line/armeria/commits/8a003bf4984c233b33e0e8b686c68deb2164c0b3",
    "html_url": "https://github.com/line/armeria/commit/8a003bf4984c233b33e0e8b686c68deb2164c0b3",
    "comments_url": "https://api.github.com/repos/line/armeria/commits/8a003bf4984c233b33e0e8b686c68deb2164c0b3/comments",
    "author": {
        "login": "trustin",
        "id": 173918,
        "node_id": "MDQ6VXNlcjE3MzkxOA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/173918?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/trustin",
        "html_url": "https://github.com/trustin",
        "followers_url": "https://api.github.com/users/trustin/followers",
        "following_url": "https://api.github.com/users/trustin/following{/other_user}",
        "gists_url": "https://api.github.com/users/trustin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/trustin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/trustin/subscriptions",
        "organizations_url": "https://api.github.com/users/trustin/orgs",
        "repos_url": "https://api.github.com/users/trustin/repos",
        "events_url": "https://api.github.com/users/trustin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/trustin/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "24ced68ecc4fc6c7ce58e275e32d8b67a78bd3e2",
            "url": "https://api.github.com/repos/line/armeria/commits/24ced68ecc4fc6c7ce58e275e32d8b67a78bd3e2",
            "html_url": "https://github.com/line/armeria/commit/24ced68ecc4fc6c7ce58e275e32d8b67a78bd3e2"
        }
    ],
    "stats": {
        "total": 380,
        "additions": 213,
        "deletions": 167
    },
    "files": [
        {
            "sha": "5309d50b9e86657c842cd9aaaa4d38f1de6f26ee",
            "filename": "core/src/main/java/com/linecorp/armeria/client/AbstractClientOptionsBuilder.java",
            "status": "modified",
            "additions": 5,
            "deletions": 4,
            "changes": 9,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fclient%2FAbstractClientOptionsBuilder.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fclient%2FAbstractClientOptionsBuilder.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fclient%2FAbstractClientOptionsBuilder.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -24,6 +24,7 @@\n import java.util.function.Function;\n \n import com.linecorp.armeria.common.DefaultHttpHeaders;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpHeaders;\n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.HttpResponse;\n@@ -263,10 +264,10 @@ B rpcDecorator(DecoratingClientFunction<I, O> decorator) {\n     /**\n      * Adds the specified HTTP header.\n      */\n-    public B addHttpHeader(AsciiString name, Object value) {\n+    public B addHttpHeader(CharSequence name, Object value) {\n         requireNonNull(name, \"name\");\n         requireNonNull(value, \"value\");\n-        httpHeaders.addObject(name, value);\n+        httpHeaders.addObject(HttpHeaderNames.of(name), value);\n         return self();\n     }\n \n@@ -282,10 +283,10 @@ public B addHttpHeaders(Headers<AsciiString, String, ?> httpHeaders) {\n     /**\n      * Sets the specified HTTP header.\n      */\n-    public B setHttpHeader(AsciiString name, Object value) {\n+    public B setHttpHeader(CharSequence name, Object value) {\n         requireNonNull(name, \"name\");\n         requireNonNull(value, \"value\");\n-        httpHeaders.setObject(name, value);\n+        httpHeaders.setObject(HttpHeaderNames.of(name), value);\n         return self();\n     }\n "
        },
        {
            "sha": "f2b426e9070821468c0ddb667e4148333e97f872",
            "filename": "core/src/main/java/com/linecorp/armeria/client/HttpHeaderUtil.java",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fclient%2FHttpHeaderUtil.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fclient%2FHttpHeaderUtil.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fclient%2FHttpHeaderUtil.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -24,7 +24,7 @@ final class HttpHeaderUtil {\n \n     private static final String CLIENT_ARTIFACT_ID = \"armeria\";\n \n-    static final AsciiString USER_AGENT = AsciiString.of(createUserAgentName());\n+    static final AsciiString USER_AGENT = AsciiString.cached(createUserAgentName());\n \n     static String hostHeader(String host, int port, int defaultPort) {\n         if (port == defaultPort) {"
        },
        {
            "sha": "65a8ae9708c7883ef43a1ee89714187c68c38a70",
            "filename": "core/src/main/java/com/linecorp/armeria/client/endpoint/StickyEndpointSelectionStrategy.java",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fclient%2Fendpoint%2FStickyEndpointSelectionStrategy.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fclient%2Fendpoint%2FStickyEndpointSelectionStrategy.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fclient%2Fendpoint%2FStickyEndpointSelectionStrategy.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -39,7 +39,7 @@\n  *\n  * <pre>{@code\n  * ToLongFunction<ClientRequestContext> hasher = (ClientRequestContext ctx) -> {\n- *     return ((HttpRequest) ctx.request()).headers().get(AsciiString.of(\"cookie\")).hashCode();\n+ *     return ((HttpRequest) ctx.request()).headers().get(HttpHeaderNames.COOKIE).hashCode();\n  * };\n  * final StickyEndpointSelectionStrategy strategy = new StickyEndpointSelectionStrategy(hasher);\n  * }</pre>"
        },
        {
            "sha": "4f72f9687282153ad3b0424465a06c14c56613cb",
            "filename": "core/src/main/java/com/linecorp/armeria/common/HttpHeaderNames.java",
            "status": "modified",
            "additions": 22,
            "deletions": 6,
            "changes": 28,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fcommon%2FHttpHeaderNames.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fcommon%2FHttpHeaderNames.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fcommon%2FHttpHeaderNames.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -422,10 +422,10 @@ public final class HttpHeaderNames {\n      */\n     public static final AsciiString X_FRAME_OPTIONS = AsciiString.cached(\"x-frame-options\");\n \n-    private static final Map<String, AsciiString> map;\n+    private static final Map<CharSequence, AsciiString> map;\n \n     static {\n-        final ImmutableMap.Builder<String, AsciiString> builder = ImmutableMap.builder();\n+        final ImmutableMap.Builder<CharSequence, AsciiString> builder = ImmutableMap.builder();\n         for (Field f : HttpHeaderNames.class.getDeclaredFields()) {\n             final int m = f.getModifiers();\n             if (Modifier.isPublic(m) && Modifier.isStatic(m) && Modifier.isFinal(m) &&\n@@ -436,6 +436,7 @@ public final class HttpHeaderNames {\n                 } catch (Exception e) {\n                     throw new Error(e);\n                 }\n+                builder.put(name, name);\n                 builder.put(name.toString(), name);\n             }\n         }\n@@ -447,10 +448,25 @@ public final class HttpHeaderNames {\n      * a known header name, this method will return a pre-instantiated {@link AsciiString} to reduce\n      * the allocation rate of {@link AsciiString}.\n      */\n-    public static AsciiString of(String name) {\n-        name = Ascii.toLowerCase(requireNonNull(name, \"name\"));\n-        final AsciiString asciiName = map.get(name);\n-        return asciiName != null ? asciiName : AsciiString.cached(name);\n+    public static AsciiString of(CharSequence name) {\n+        if (name instanceof AsciiString) {\n+            return of((AsciiString) name);\n+        }\n+\n+        final String lowerCased = Ascii.toLowerCase(requireNonNull(name, \"name\"));\n+        final AsciiString cached = map.get(lowerCased);\n+        return cached != null ? cached : AsciiString.cached(lowerCased);\n+    }\n+\n+    /**\n+     * Lower-cases and converts the specified header name into an {@link AsciiString}. If {@code name} is\n+     * a known header name, this method will return a pre-instantiated {@link AsciiString} to reduce\n+     * the allocation rate of {@link AsciiString}.\n+     */\n+    public static AsciiString of(AsciiString name) {\n+        final AsciiString lowerCased = name.toLowerCase();\n+        final AsciiString cached = map.get(lowerCased);\n+        return cached != null ? cached : lowerCased;\n     }\n \n     private HttpHeaderNames() {}"
        },
        {
            "sha": "f6f03a40388fa1d4cf795f32d1fb5b37ef708ce9",
            "filename": "core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Finternal%2FArmeriaHttpUtil.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Finternal%2FArmeriaHttpUtil.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Finternal%2FArmeriaHttpUtil.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -319,7 +319,7 @@ public static HttpHeaders toArmeria(Http2Headers headers, boolean endOfStream) {\n         final HttpHeaders converted = new DefaultHttpHeaders(false, headers.size(), endOfStream);\n         StringJoiner cookieJoiner = null;\n         for (Entry<CharSequence, CharSequence> e : headers) {\n-            final AsciiString name = AsciiString.of(e.getKey());\n+            final AsciiString name = HttpHeaderNames.of(e.getKey());\n             final CharSequence value = e.getValue();\n \n             // Cookies must be concatenated into a single octet string.\n@@ -409,7 +409,7 @@ public static void toArmeria(io.netty.handler.codec.http.HttpHeaders inHeaders,\n         StringJoiner cookieJoiner = null;\n         while (iter.hasNext()) {\n             final Entry<CharSequence, CharSequence> entry = iter.next();\n-            final AsciiString aName = AsciiString.of(entry.getKey()).toLowerCase();\n+            final AsciiString aName = HttpHeaderNames.of(entry.getKey()).toLowerCase();\n             if (HTTP_TO_HTTP2_HEADER_BLACKLIST.contains(aName) || connectionBlacklist.contains(aName)) {\n                 continue;\n             }\n@@ -443,7 +443,7 @@ private static CharSequenceMap toLowercaseMap(Iterator<? extends CharSequence> v\n         final CharSequenceMap result = new CharSequenceMap(arraySizeHint);\n \n         while (valuesIter.hasNext()) {\n-            final AsciiString lowerCased = AsciiString.of(valuesIter.next()).toLowerCase();\n+            final AsciiString lowerCased = HttpHeaderNames.of(valuesIter.next()).toLowerCase();\n             try {\n                 int index = lowerCased.forEachByte(FIND_COMMA);\n                 if (index != -1) {"
        },
        {
            "sha": "c434f0020ab9ddf5d2030ce1c361135cf91c4a74",
            "filename": "core/src/main/java/com/linecorp/armeria/internal/annotation/AnnotatedValueResolver.java",
            "status": "modified",
            "additions": 1,
            "deletions": 2,
            "changes": 3,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Finternal%2Fannotation%2FAnnotatedValueResolver.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Finternal%2Fannotation%2FAnnotatedValueResolver.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Finternal%2Fannotation%2FAnnotatedValueResolver.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -88,7 +88,6 @@\n import io.netty.handler.codec.http.QueryStringDecoder;\n import io.netty.handler.codec.http.cookie.Cookie;\n import io.netty.handler.codec.http.cookie.ServerCookieDecoder;\n-import io.netty.util.AsciiString;\n \n final class AnnotatedValueResolver {\n     private static final Logger logger = LoggerFactory.getLogger(AnnotatedValueResolver.class);\n@@ -457,7 +456,7 @@ private static AnnotatedValueResolver ofHeader(String name,\n                 .supportContainer(true)\n                 .description(description)\n                 .resolver(resolver(\n-                        ctx -> ctx.request().headers().getAll(AsciiString.of(name)),\n+                        ctx -> ctx.request().headers().getAll(HttpHeaderNames.of(name)),\n                         () -> \"Cannot resolve a value from HTTP header: \" + name))\n                 .build();\n     }"
        },
        {
            "sha": "70c3eaafec7e9b5d897699281ff2b3dc364b389e",
            "filename": "core/src/main/java/com/linecorp/armeria/server/ClientAddressSource.java",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2FClientAddressSource.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2FClientAddressSource.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2FClientAddressSource.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -38,7 +38,7 @@\n public final class ClientAddressSource {\n \n     private static final ClientAddressSource PROXY_PROTOCOL =\n-            new ClientAddressSource(AsciiString.of(\"PROXY_PROTOCOL\"));\n+            new ClientAddressSource(HttpHeaderNames.of(\"PROXY_PROTOCOL\"));\n \n     /**\n      * A default list of {@link ClientAddressSource}s.\n@@ -54,7 +54,7 @@ public final class ClientAddressSource {\n      */\n     public static ClientAddressSource ofHeader(CharSequence header) {\n         checkArgument(header != null && header.length() > 0, \"empty header\");\n-        return new ClientAddressSource(AsciiString.of(header));\n+        return new ClientAddressSource(HttpHeaderNames.of(header));\n     }\n \n     /**"
        },
        {
            "sha": "33e298053ad425d24f5da750a4d650a293f11a95",
            "filename": "core/src/main/java/com/linecorp/armeria/server/HttpServerPipelineConfigurator.java",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2FHttpServerPipelineConfigurator.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2FHttpServerPipelineConfigurator.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2FHttpServerPipelineConfigurator.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -90,8 +90,8 @@ final class HttpServerPipelineConfigurator extends ChannelInitializer<Channel> {\n \n     private static final int SSL_RECORD_HEADER_LENGTH = 5;\n \n-    private static final AsciiString SCHEME_HTTP = AsciiString.of(\"http\");\n-    private static final AsciiString SCHEME_HTTPS = AsciiString.of(\"https\");\n+    private static final AsciiString SCHEME_HTTP = AsciiString.cached(\"http\");\n+    private static final AsciiString SCHEME_HTTPS = AsciiString.cached(\"https\");\n \n     private static final int UPGRADE_REQUEST_MAX_LENGTH = 16384;\n "
        },
        {
            "sha": "f7cbe635a48181a89c08fed7518e5ef3ed21d6f5",
            "filename": "core/src/main/java/com/linecorp/armeria/server/logging/AccessLogFormats.java",
            "status": "modified",
            "additions": 1,
            "deletions": 3,
            "changes": 4,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2Flogging%2FAccessLogFormats.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2Flogging%2FAccessLogFormats.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2Flogging%2FAccessLogFormats.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -50,8 +50,6 @@\n import com.linecorp.armeria.server.logging.AccessLogComponent.TimestampComponent;\n import com.linecorp.armeria.server.logging.AccessLogType.VariableRequirement;\n \n-import io.netty.util.AsciiString;\n-\n /**\n  * Pre-defined access log formats and the utility methods for {@link AccessLogComponent}.\n  */\n@@ -217,7 +215,7 @@ private static AccessLogComponent newAccessLogComponent(char token,\n         }\n         if (HttpHeaderComponent.isSupported(type)) {\n             assert variable != null;\n-            return new HttpHeaderComponent(type, AsciiString.of(variable), addQuote, condition);\n+            return new HttpHeaderComponent(type, HttpHeaderNames.of(variable), addQuote, condition);\n         }\n         if (AttributeComponent.isSupported(type)) {\n             assert variable != null;"
        },
        {
            "sha": "0eb2a9fe17b72d7a56acde0a9da95dee615d6499",
            "filename": "core/src/test/java/com/linecorp/armeria/client/ClientOptionsTest.java",
            "status": "modified",
            "additions": 1,
            "deletions": 3,
            "changes": 4,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fclient%2FClientOptionsTest.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fclient%2FClientOptionsTest.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fclient%2FClientOptionsTest.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -22,13 +22,11 @@\n import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpHeaders;\n \n-import io.netty.util.AsciiString;\n-\n public class ClientOptionsTest {\n \n     @Test\n     public void testSetHttpHeader() {\n-        final HttpHeaders httpHeader = HttpHeaders.of(AsciiString.of(\"x-user-defined\"), \"HEADER_VALUE\");\n+        final HttpHeaders httpHeader = HttpHeaders.of(HttpHeaderNames.of(\"x-user-defined\"), \"HEADER_VALUE\");\n \n         final ClientOptions options = ClientOptions.of(ClientOption.HTTP_HEADERS.newValue(httpHeader));\n         assertThat(options.get(ClientOption.HTTP_HEADERS)).contains(httpHeader);"
        },
        {
            "sha": "f7394a306fe0f272aeabefa2e0c548e8ec261c4e",
            "filename": "core/src/test/java/com/linecorp/armeria/client/DefaultClientRequestContextTest.java",
            "status": "modified",
            "additions": 10,
            "deletions": 10,
            "changes": 20,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fclient%2FDefaultClientRequestContextTest.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fclient%2FDefaultClientRequestContextTest.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fclient%2FDefaultClientRequestContextTest.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -22,13 +22,13 @@\n import org.junit.Test;\n \n import com.linecorp.armeria.common.DefaultHttpHeaders;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpMethod;\n import com.linecorp.armeria.common.Request;\n import com.linecorp.armeria.common.SessionProtocol;\n import com.linecorp.armeria.common.metric.NoopMeterRegistry;\n \n import io.netty.channel.EventLoop;\n-import io.netty.util.AsciiString;\n import io.netty.util.AttributeKey;\n \n public class DefaultClientRequestContextTest {\n@@ -57,12 +57,12 @@ public void deriveContext() {\n         assertThat(derivedCtx.maxResponseLength()).isEqualTo(originalCtx.maxResponseLength());\n         assertThat(derivedCtx.responseTimeoutMillis()).isEqualTo(originalCtx.responseTimeoutMillis());\n         assertThat(derivedCtx.writeTimeoutMillis()).isEqualTo(originalCtx.writeTimeoutMillis());\n-        assertThat(derivedCtx.additionalRequestHeaders().get(AsciiString.of(\"my-header#1\"))).isNull();\n-        assertThat(derivedCtx.additionalRequestHeaders().get(AsciiString.of(\"my-header#2\")))\n+        assertThat(derivedCtx.additionalRequestHeaders().get(HttpHeaderNames.of(\"my-header#1\"))).isNull();\n+        assertThat(derivedCtx.additionalRequestHeaders().get(HttpHeaderNames.of(\"my-header#2\")))\n                 .isEqualTo(\"value#2\");\n-        assertThat(derivedCtx.additionalRequestHeaders().get(AsciiString.of(\"my-header#3\")))\n+        assertThat(derivedCtx.additionalRequestHeaders().get(HttpHeaderNames.of(\"my-header#3\")))\n                 .isEqualTo(\"value#3\");\n-        assertThat(derivedCtx.additionalRequestHeaders().get(AsciiString.of(\"my-header#4\")))\n+        assertThat(derivedCtx.additionalRequestHeaders().get(HttpHeaderNames.of(\"my-header#4\")))\n                 .isEqualTo(\"value#4\");\n         // the attribute is derived as well\n         assertThat(derivedCtx.attr(foo).get()).isEqualTo(\"foo\");\n@@ -79,15 +79,15 @@ public void deriveContext() {\n \n     private static void setAdditionalHeaders(ClientRequestContext originalCtx) {\n         final DefaultHttpHeaders headers1 = new DefaultHttpHeaders();\n-        headers1.set(AsciiString.of(\"my-header#1\"), \"value#1\");\n+        headers1.set(HttpHeaderNames.of(\"my-header#1\"), \"value#1\");\n         originalCtx.setAdditionalRequestHeaders(headers1);\n-        originalCtx.setAdditionalRequestHeader(AsciiString.of(\"my-header#2\"), \"value#2\");\n+        originalCtx.setAdditionalRequestHeader(HttpHeaderNames.of(\"my-header#2\"), \"value#2\");\n \n         final DefaultHttpHeaders headers2 = new DefaultHttpHeaders();\n-        headers2.set(AsciiString.of(\"my-header#3\"), \"value#3\");\n+        headers2.set(HttpHeaderNames.of(\"my-header#3\"), \"value#3\");\n         originalCtx.addAdditionalRequestHeaders(headers2);\n-        originalCtx.addAdditionalRequestHeader(AsciiString.of(\"my-header#4\"), \"value#4\");\n+        originalCtx.addAdditionalRequestHeader(HttpHeaderNames.of(\"my-header#4\"), \"value#4\");\n         // Remove the first one.\n-        originalCtx.removeAdditionalRequestHeader(AsciiString.of(\"my-header#1\"));\n+        originalCtx.removeAdditionalRequestHeader(HttpHeaderNames.of(\"my-header#1\"));\n     }\n }"
        },
        {
            "sha": "1fab5fceb81430294d2da341d3b7139e6c08f0fb",
            "filename": "core/src/test/java/com/linecorp/armeria/client/endpoint/StickyEndpointSelectionStrategyTest.java",
            "status": "modified",
            "additions": 8,
            "deletions": 7,
            "changes": 15,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fclient%2Fendpoint%2FStickyEndpointSelectionStrategyTest.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fclient%2Fendpoint%2FStickyEndpointSelectionStrategyTest.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fclient%2Fendpoint%2FStickyEndpointSelectionStrategyTest.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -28,20 +28,21 @@\n \n import com.linecorp.armeria.client.ClientRequestContext;\n import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpHeaders;\n import com.linecorp.armeria.common.HttpMethod;\n import com.linecorp.armeria.common.HttpRequest;\n \n-import io.netty.util.AsciiString;\n-\n public class StickyEndpointSelectionStrategyTest {\n \n     private static final String STICKY_HEADER_NAME = \"USER_COOKIE\";\n \n-    final ToLongFunction<ClientRequestContext> hasher =\n-            (ClientRequestContext ctx) -> ((HttpRequest) ctx.request()).headers()\n-                                                                       .get(AsciiString.of(STICKY_HEADER_NAME))\n-                                                                       .hashCode();\n+    final ToLongFunction<ClientRequestContext> hasher = (ClientRequestContext ctx) -> {\n+        return ((HttpRequest) ctx.request()).headers()\n+                                            .get(HttpHeaderNames.of(STICKY_HEADER_NAME))\n+                                            .hashCode();\n+    };\n+\n     final StickyEndpointSelectionStrategy strategy = new StickyEndpointSelectionStrategy(hasher);\n \n     private static final EndpointGroup STATIC_ENDPOINT_GROUP = new StaticEndpointGroup(\n@@ -100,7 +101,7 @@ public void select() {\n     private static ClientRequestContext contextWithHeader(String k, String v) {\n         final ClientRequestContext ctx = mock(ClientRequestContext.class);\n         when(ctx.request()).thenReturn(HttpRequest.of(HttpHeaders.of(HttpMethod.GET, \"/\")\n-                                                                 .set(AsciiString.of(k), v)));\n+                                                                 .set(HttpHeaderNames.of(k), v)));\n         return ctx;\n     }\n }"
        },
        {
            "sha": "5a4befcd058d24ede860fc94345cb266d45cc579",
            "filename": "core/src/test/java/com/linecorp/armeria/common/HttpHeaderNamesTest.java",
            "status": "added",
            "additions": 49,
            "deletions": 0,
            "changes": 49,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fcommon%2FHttpHeaderNamesTest.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fcommon%2FHttpHeaderNamesTest.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fcommon%2FHttpHeaderNamesTest.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2019 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.Test;\n+\n+import io.netty.util.AsciiString;\n+\n+public class HttpHeaderNamesTest {\n+\n+    @Test\n+    public void testOfAsciiString() {\n+        // Should produce a lower-cased AsciiString.\n+        final AsciiString mixedCased = AsciiString.of(\"Foo\");\n+        assertThat((Object) HttpHeaderNames.of(mixedCased)).isNotSameAs(mixedCased);\n+        assertThat(HttpHeaderNames.of(mixedCased).toString()).isEqualTo(\"foo\");\n+\n+        // Should not produce a new instance for an AsciiString that's already lower-cased.\n+        final AsciiString lowerCased = AsciiString.of(\"foo\");\n+        assertThat((Object) HttpHeaderNames.of(lowerCased)).isSameAs(lowerCased);\n+\n+        // Should reuse known header name instances.\n+        assertThat((Object) HttpHeaderNames.of(AsciiString.of(\"date\"))).isSameAs(HttpHeaderNames.DATE);\n+    }\n+\n+    @Test\n+    public void testOfCharSequence() {\n+        // Should produce a lower-cased AsciiString.\n+        assertThat((Object) HttpHeaderNames.of(\"Foo\")).isEqualTo(AsciiString.of(\"foo\"));\n+\n+        // Should reuse known header name instances.\n+        assertThat((Object) HttpHeaderNames.of(\"date\")).isSameAs(HttpHeaderNames.DATE);\n+    }\n+}"
        },
        {
            "sha": "e9c63161189cb526d8936ffce212839b881fe463",
            "filename": "core/src/test/java/com/linecorp/armeria/common/HttpHeadersJsonDeserializerTest.java",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fcommon%2FHttpHeadersJsonDeserializerTest.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fcommon%2FHttpHeadersJsonDeserializerTest.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fcommon%2FHttpHeadersJsonDeserializerTest.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -30,7 +30,7 @@\n \n public class HttpHeadersJsonDeserializerTest {\n \n-    private static final AsciiString NAME = AsciiString.of(\"a\");\n+    private static final AsciiString NAME = HttpHeaderNames.of(\"a\");\n \n     private static final ObjectMapper mapper = new ObjectMapper();\n "
        },
        {
            "sha": "7fb152f63a224d3e5f7f696072c477459b033d2d",
            "filename": "core/src/test/java/com/linecorp/armeria/common/HttpHeadersJsonSerializerTest.java",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fcommon%2FHttpHeadersJsonSerializerTest.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fcommon%2FHttpHeadersJsonSerializerTest.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fcommon%2FHttpHeadersJsonSerializerTest.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -26,7 +26,7 @@\n \n public class HttpHeadersJsonSerializerTest {\n \n-    private static final AsciiString NAME = AsciiString.of(\"a\");\n+    private static final AsciiString NAME = HttpHeaderNames.of(\"a\");\n \n     private static final ObjectMapper mapper = new ObjectMapper();\n "
        },
        {
            "sha": "e57f9601a11562cdabf18eb937234e5d5373c9f7",
            "filename": "core/src/test/java/com/linecorp/armeria/common/HttpHeadersTest.java",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fcommon%2FHttpHeadersTest.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fcommon%2FHttpHeadersTest.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fcommon%2FHttpHeadersTest.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -17,11 +17,11 @@\n package com.linecorp.armeria.common;\n \n import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_TYPE;\n+import static com.linecorp.armeria.common.HttpHeaderNames.of;\n import static com.linecorp.armeria.common.MediaType.ANY_APPLICATION_TYPE;\n import static com.linecorp.armeria.common.MediaType.ANY_AUDIO_TYPE;\n import static com.linecorp.armeria.common.MediaType.ANY_TEXT_TYPE;\n import static com.linecorp.armeria.common.MediaType.ANY_TYPE;\n-import static io.netty.util.AsciiString.of;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatThrownBy;\n "
        },
        {
            "sha": "43040a925bb6ff3b0b7d9b3b843883d148c2fbdd",
            "filename": "core/src/test/java/com/linecorp/armeria/common/logging/DefaultRequestLogTest.java",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fcommon%2Flogging%2FDefaultRequestLogTest.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fcommon%2Flogging%2FDefaultRequestLogTest.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fcommon%2Flogging%2FDefaultRequestLogTest.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -27,6 +27,7 @@\n import org.mockito.junit.MockitoJUnit;\n import org.mockito.junit.MockitoRule;\n \n+import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpHeaders;\n import com.linecorp.armeria.common.HttpMethod;\n import com.linecorp.armeria.common.HttpStatus;\n@@ -37,7 +38,6 @@\n import com.linecorp.armeria.testing.internal.AnticipatedException;\n \n import io.netty.channel.Channel;\n-import io.netty.util.AsciiString;\n \n public class DefaultRequestLogTest {\n \n@@ -134,7 +134,7 @@ public void addChild() {\n         assertThat(log.requestFirstBytesTransferredTimeNanos())\n                 .isEqualTo(child.requestFirstBytesTransferredTimeNanos());\n \n-        final HttpHeaders foo = HttpHeaders.of(AsciiString.of(\"foo\"), \"foo\");\n+        final HttpHeaders foo = HttpHeaders.of(HttpHeaderNames.of(\"foo\"), \"foo\");\n         child.requestHeaders(foo);\n         assertThat(log.requestHeaders()).isSameAs(foo);\n \n@@ -157,7 +157,7 @@ public void addChild() {\n         assertThatThrownBy(() -> log.responseFirstBytesTransferredTimeNanos())\n                 .isExactlyInstanceOf(RequestLogAvailabilityException.class);\n \n-        final HttpHeaders bar = HttpHeaders.of(AsciiString.of(\"bar\"), \"bar\");\n+        final HttpHeaders bar = HttpHeaders.of(HttpHeaderNames.of(\"bar\"), \"bar\");\n         child.responseHeaders(bar);\n         assertThatThrownBy(() -> log.responseHeaders())\n                 .isExactlyInstanceOf(RequestLogAvailabilityException.class);"
        },
        {
            "sha": "ae70121ef0a13a2f6f6d8198e3d118fda5f3d0c8",
            "filename": "core/src/test/java/com/linecorp/armeria/internal/ArmeriaHttpUtilTest.java",
            "status": "modified",
            "additions": 1,
            "deletions": 2,
            "changes": 3,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Finternal%2FArmeriaHttpUtilTest.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Finternal%2FArmeriaHttpUtilTest.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Finternal%2FArmeriaHttpUtilTest.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -36,7 +36,6 @@\n import io.netty.handler.codec.http2.DefaultHttp2Headers;\n import io.netty.handler.codec.http2.Http2Exception;\n import io.netty.handler.codec.http2.Http2Headers;\n-import io.netty.util.AsciiString;\n \n public class ArmeriaHttpUtilTest {\n     @Test\n@@ -258,6 +257,6 @@ public void stripConnectionNomineesWithCsv() {\n         final HttpHeaders out = new DefaultHttpHeaders();\n         toArmeria(in, out);\n         assertThat(out).hasSize(1);\n-        assertThat(out.get(AsciiString.of(\"hello\"))).isEqualTo(\"world\");\n+        assertThat(out.get(HttpHeaderNames.of(\"hello\"))).isEqualTo(\"world\");\n     }\n }"
        },
        {
            "sha": "3b4e75d03779eb9955364aa8ab2dfd3eb52c30e2",
            "filename": "core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpDocServiceTest.java",
            "status": "modified",
            "additions": 4,
            "deletions": 5,
            "changes": 9,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Finternal%2Fannotation%2FAnnotatedHttpDocServiceTest.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Finternal%2Fannotation%2FAnnotatedHttpDocServiceTest.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Finternal%2Fannotation%2FAnnotatedHttpDocServiceTest.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -45,6 +45,7 @@\n \n import com.linecorp.armeria.client.HttpClient;\n import com.linecorp.armeria.common.AggregatedHttpMessage;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpHeaders;\n import com.linecorp.armeria.common.HttpMethod;\n import com.linecorp.armeria.common.HttpResponse;\n@@ -75,15 +76,13 @@\n import com.linecorp.armeria.server.docs.TypeSignature;\n import com.linecorp.armeria.testing.server.ServerRule;\n \n-import io.netty.util.AsciiString;\n-\n public class AnnotatedHttpDocServiceTest {\n \n     private static final ObjectMapper mapper = new ObjectMapper();\n \n-    private static final HttpHeaders EXAMPLE_HEADERS_ALL = HttpHeaders.of(AsciiString.of(\"a\"), \"b\");\n-    private static final HttpHeaders EXAMPLE_HEADERS_SERVICE = HttpHeaders.of(AsciiString.of(\"c\"), \"d\");\n-    private static final HttpHeaders EXAMPLE_HEADERS_METHOD = HttpHeaders.of(AsciiString.of(\"e\"), \"f\");\n+    private static final HttpHeaders EXAMPLE_HEADERS_ALL = HttpHeaders.of(HttpHeaderNames.of(\"a\"), \"b\");\n+    private static final HttpHeaders EXAMPLE_HEADERS_SERVICE = HttpHeaders.of(HttpHeaderNames.of(\"c\"), \"d\");\n+    private static final HttpHeaders EXAMPLE_HEADERS_METHOD = HttpHeaders.of(HttpHeaderNames.of(\"e\"), \"f\");\n \n     @ClassRule\n     public static final ServerRule server = new ServerRule() {"
        },
        {
            "sha": "97945a47a8d33363655c90d9f8bff7b23c64d3c3",
            "filename": "core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceRequestConverterTest.java",
            "status": "modified",
            "additions": 24,
            "deletions": 25,
            "changes": 49,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Finternal%2Fannotation%2FAnnotatedHttpServiceRequestConverterTest.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Finternal%2Fannotation%2FAnnotatedHttpServiceRequestConverterTest.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Finternal%2Fannotation%2FAnnotatedHttpServiceRequestConverterTest.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -40,6 +40,7 @@\n import com.linecorp.armeria.client.HttpClient;\n import com.linecorp.armeria.common.AggregatedHttpMessage;\n import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpHeaders;\n import com.linecorp.armeria.common.HttpMethod;\n import com.linecorp.armeria.common.HttpStatus;\n@@ -64,8 +65,6 @@\n import com.linecorp.armeria.server.logging.LoggingService;\n import com.linecorp.armeria.testing.server.ServerRule;\n \n-import io.netty.util.AsciiString;\n-\n public class AnnotatedHttpServiceRequestConverterTest {\n \n     @ClassRule\n@@ -611,7 +610,7 @@ public void testDefaultRequestConverter_bean1() throws Exception {\n         expectedRequestBean.userName = \"john\";\n         expectedRequestBean.age = 25;\n         expectedRequestBean.gender = MALE;\n-        expectedRequestBean.permissions = Arrays.asList(\"permission1\", \"permission2\");\n+        expectedRequestBean.permissions = Arrays.asList(\"perm1\", \"perm2\");\n         expectedRequestBean.clientName = \"TestClient\";\n         expectedRequestBean.seqNum = 1234L;\n         expectedRequestBean.manager = true;\n@@ -621,8 +620,8 @@ public void testDefaultRequestConverter_bean1() throws Exception {\n         // Normal Request: POST + Form Data\n         final HttpData formData = HttpData.ofAscii(\"age=25&manager=true&gender=male\");\n         HttpHeaders reqHeaders = HttpHeaders.of(HttpMethod.POST, \"/2/default/bean1/john/1234\")\n-                                            .set(AsciiString.of(\"x-user-permission\"), \"permission1,permission2\")\n-                                            .set(AsciiString.of(\"x-client-name\"), \"TestClient\")\n+                                            .set(HttpHeaderNames.of(\"x-user-permission\"), \"perm1,perm2\")\n+                                            .set(HttpHeaderNames.of(\"x-client-name\"), \"TestClient\")\n                                             .contentType(MediaType.FORM_DATA);\n \n         response = client.execute(AggregatedHttpMessage.of(reqHeaders, formData)).aggregate().join();\n@@ -632,8 +631,8 @@ public void testDefaultRequestConverter_bean1() throws Exception {\n         // Normal Request: GET + Query String\n         reqHeaders = HttpHeaders.of(HttpMethod.GET,\n                                     \"/2/default/bean1/john/1234?age=25&manager=true&gender=MALE\")\n-                                .set(AsciiString.of(\"x-user-permission\"), \"permission1,permission2\")\n-                                .set(AsciiString.of(\"x-client-name\"), \"TestClient\");\n+                                .set(HttpHeaderNames.of(\"x-user-permission\"), \"perm1,perm2\")\n+                                .set(HttpHeaderNames.of(\"x-client-name\"), \"TestClient\");\n \n         response = client.execute(AggregatedHttpMessage.of(reqHeaders)).aggregate().join();\n         assertThat(response.headers().status()).isEqualTo(HttpStatus.OK);\n@@ -642,26 +641,26 @@ public void testDefaultRequestConverter_bean1() throws Exception {\n         // Bad Request: age=badParam\n         reqHeaders = HttpHeaders.of(HttpMethod.GET,\n                                     \"/2/default/bean1/john/1234?age=badParam&manager=true&gender=male\")\n-                                .set(AsciiString.of(\"x-user-permission\"), \"permission1,permission2\")\n-                                .set(AsciiString.of(\"x-client-name\"), \"TestClient\");\n+                                .set(HttpHeaderNames.of(\"x-user-permission\"), \"perm1,perm2\")\n+                                .set(HttpHeaderNames.of(\"x-client-name\"), \"TestClient\");\n \n         response = client.execute(AggregatedHttpMessage.of(reqHeaders)).aggregate().join();\n         assertThat(response.headers().status()).isEqualTo(HttpStatus.BAD_REQUEST);\n \n         // Bad Request: seqNum=badParam\n         reqHeaders = HttpHeaders.of(HttpMethod.GET,\n                                     \"/2/default/bean1/john/badParam?age=25&manager=true&gender=MALE\")\n-                                .set(AsciiString.of(\"x-user-permission\"), \"permission1,permission2\")\n-                                .set(AsciiString.of(\"x-client-name\"), \"TestClient\");\n+                                .set(HttpHeaderNames.of(\"x-user-permission\"), \"perm1,perm2\")\n+                                .set(HttpHeaderNames.of(\"x-client-name\"), \"TestClient\");\n \n         response = client.execute(AggregatedHttpMessage.of(reqHeaders)).aggregate().join();\n         assertThat(response.headers().status()).isEqualTo(HttpStatus.BAD_REQUEST);\n \n         // Bad Request: gender=badParam\n         reqHeaders = HttpHeaders.of(HttpMethod.GET,\n                                     \"/2/default/bean1/john/1234?age=25&manager=true&gender=badParam\")\n-                                .set(AsciiString.of(\"x-user-permission\"), \"permission1,permission2\")\n-                                .set(AsciiString.of(\"x-client-name\"), \"TestClient\");\n+                                .set(HttpHeaderNames.of(\"x-user-permission\"), \"perm1,perm2\")\n+                                .set(HttpHeaderNames.of(\"x-client-name\"), \"TestClient\");\n \n         response = client.execute(AggregatedHttpMessage.of(reqHeaders)).aggregate().join();\n         assertThat(response.headers().status()).isEqualTo(HttpStatus.BAD_REQUEST);\n@@ -679,17 +678,17 @@ public void testDefaultRequestConverter_bean2() throws Exception {\n         expectedRequestBean.userName = \"john\";\n         expectedRequestBean.age = 25;\n         expectedRequestBean.gender = MALE;\n-        expectedRequestBean.permissions = Arrays.asList(\"permission1\", \"permission2\");\n+        expectedRequestBean.permissions = Arrays.asList(\"perm1\", \"perm2\");\n         expectedRequestBean.clientName = \"TestClient\";\n \n         final String expectedResponseContent = mapper.writeValueAsString(expectedRequestBean);\n \n         // Normal Request: POST + Form Data\n         final HttpData formData = HttpData.ofAscii(\"age=25&gender=male\");\n         HttpHeaders reqHeaders = HttpHeaders.of(HttpMethod.POST, \"/2/default/bean2/john/98765\")\n-                                            .set(AsciiString.of(\"x-user-permission\"), \"permission1,permission2\")\n-                                            .set(AsciiString.of(\"x-client-name\"), \"TestClient\")\n-                                            .set(AsciiString.of(\"uid\"), \"abcd-efgh\")\n+                                            .set(HttpHeaderNames.of(\"x-user-permission\"), \"perm1,perm2\")\n+                                            .set(HttpHeaderNames.of(\"x-client-name\"), \"TestClient\")\n+                                            .set(HttpHeaderNames.of(\"uid\"), \"abcd-efgh\")\n                                             .contentType(MediaType.FORM_DATA);\n \n         response = client.execute(AggregatedHttpMessage.of(reqHeaders, formData)).aggregate().join();\n@@ -699,9 +698,9 @@ public void testDefaultRequestConverter_bean2() throws Exception {\n         // Normal Request: GET + Query String\n         reqHeaders = HttpHeaders.of(HttpMethod.GET,\n                                     \"/2/default/bean2/john?age=25&gender=MALE&serialNo=98765\")\n-                                .set(AsciiString.of(\"x-user-permission\"), \"permission1,permission2\")\n-                                .set(AsciiString.of(\"x-client-name\"), \"TestClient\")\n-                                .set(AsciiString.of(\"uid\"), \"abcd-efgh\");\n+                                .set(HttpHeaderNames.of(\"x-user-permission\"), \"perm1,perm2\")\n+                                .set(HttpHeaderNames.of(\"x-client-name\"), \"TestClient\")\n+                                .set(HttpHeaderNames.of(\"uid\"), \"abcd-efgh\");\n \n         response = client.execute(AggregatedHttpMessage.of(reqHeaders)).aggregate().join();\n         assertThat(response.headers().status()).isEqualTo(HttpStatus.OK);\n@@ -720,16 +719,16 @@ public void testDefaultRequestConverter_bean3() throws Exception {\n         expectedRequestBean.userName = \"john\";\n         expectedRequestBean.age = 25;\n         expectedRequestBean.gender = MALE;\n-        expectedRequestBean.permissions = Arrays.asList(\"permission1\", \"permission2\");\n+        expectedRequestBean.permissions = Arrays.asList(\"perm1\", \"perm2\");\n         expectedRequestBean.clientName = \"TestClient\";\n \n         final String expectedResponseContent = mapper.writeValueAsString(expectedRequestBean);\n \n         // Normal Request: POST + Form Data\n         final HttpData formData = HttpData.ofAscii(\"age=25&gender=male\");\n         HttpHeaders reqHeaders = HttpHeaders.of(HttpMethod.POST, \"/2/default/bean3/john/3349\")\n-                                            .set(AsciiString.of(\"x-user-permission\"), \"permission1,permission2\")\n-                                            .set(AsciiString.of(\"x-client-name\"), \"TestClient\")\n+                                            .set(HttpHeaderNames.of(\"x-user-permission\"), \"perm1,perm2\")\n+                                            .set(HttpHeaderNames.of(\"x-client-name\"), \"TestClient\")\n                                             .contentType(MediaType.FORM_DATA);\n \n         response = client.execute(AggregatedHttpMessage.of(reqHeaders, formData)).aggregate().join();\n@@ -739,8 +738,8 @@ public void testDefaultRequestConverter_bean3() throws Exception {\n         // Normal Request: GET + Query String\n         reqHeaders = HttpHeaders.of(HttpMethod.GET,\n                                     \"/2/default/bean3/john?age=25&gender=MALE&departmentNo=3349\")\n-                                .set(AsciiString.of(\"x-user-permission\"), \"permission1,permission2\")\n-                                .set(AsciiString.of(\"x-client-name\"), \"TestClient\");\n+                                .set(HttpHeaderNames.of(\"x-user-permission\"), \"perm1,perm2\")\n+                                .set(HttpHeaderNames.of(\"x-client-name\"), \"TestClient\");\n \n         response = client.execute(AggregatedHttpMessage.of(reqHeaders)).aggregate().join();\n         assertThat(response.headers().status()).isEqualTo(HttpStatus.OK);"
        },
        {
            "sha": "33f19107b387374090d458f5eee7c3f4a525f80d",
            "filename": "core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedValueResolverTest.java",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Finternal%2Fannotation%2FAnnotatedValueResolverTest.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Finternal%2Fannotation%2FAnnotatedValueResolverTest.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Finternal%2Fannotation%2FAnnotatedValueResolverTest.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -73,8 +73,8 @@ public class AnnotatedValueResolverTest {\n                                                                       \"sensitive\");\n \n     // 'headerValues' will be returned.\n-    static final Set<AsciiString> existingHttpHeaders = ImmutableSet.of(AsciiString.of(\"header1\"),\n-                                                                        AsciiString.of(\"header2\"));\n+    static final Set<AsciiString> existingHttpHeaders = ImmutableSet.of(HttpHeaderNames.of(\"header1\"),\n+                                                                        HttpHeaderNames.of(\"header2\"));\n     static final List<String> headerValues = ImmutableList.of(\"value1\",\n                                                               \"value3\",\n                                                               \"value2\");\n@@ -118,7 +118,7 @@ public static void setUp() throws Exception {\n \n     static boolean shouldHttpHeaderExist(AnnotatedValueResolver element) {\n         return element.shouldExist() ||\n-               existingHttpHeaders.contains(AsciiString.of(element.httpElementName()));\n+               existingHttpHeaders.contains(HttpHeaderNames.of(element.httpElementName()));\n     }\n \n     static boolean shouldHttpParameterExist(AnnotatedValueResolver element) {"
        },
        {
            "sha": "069480cc58e81cc01d580949f5bc4d10df6bc444",
            "filename": "core/src/test/java/com/linecorp/armeria/server/DefaultServiceRequestContextTest.java",
            "status": "modified",
            "additions": 19,
            "deletions": 19,
            "changes": 38,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2FDefaultServiceRequestContextTest.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2FDefaultServiceRequestContextTest.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2FDefaultServiceRequestContextTest.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -24,6 +24,7 @@\n import com.google.common.collect.ImmutableList;\n \n import com.linecorp.armeria.common.DefaultHttpHeaders;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpMethod;\n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.HttpResponse;\n@@ -33,7 +34,6 @@\n import com.linecorp.armeria.common.metric.NoopMeterRegistry;\n \n import io.netty.channel.Channel;\n-import io.netty.util.AsciiString;\n import io.netty.util.AttributeKey;\n import io.netty.util.NetUtil;\n \n@@ -69,19 +69,19 @@ public void deriveContext() {\n         assertThat(derivedCtx.path()).isEqualTo(originalCtx.path());\n         assertThat(derivedCtx.maxRequestLength()).isEqualTo(originalCtx.maxRequestLength());\n         assertThat(derivedCtx.requestTimeoutMillis()).isEqualTo(originalCtx.requestTimeoutMillis());\n-        assertThat(derivedCtx.additionalResponseHeaders().get(AsciiString.of(\"my-header#1\"))).isNull();\n-        assertThat(derivedCtx.additionalResponseHeaders().get(AsciiString.of(\"my-header#2\")))\n+        assertThat(derivedCtx.additionalResponseHeaders().get(HttpHeaderNames.of(\"my-header#1\"))).isNull();\n+        assertThat(derivedCtx.additionalResponseHeaders().get(HttpHeaderNames.of(\"my-header#2\")))\n                 .isEqualTo(\"value#2\");\n-        assertThat(derivedCtx.additionalResponseHeaders().get(AsciiString.of(\"my-header#3\")))\n+        assertThat(derivedCtx.additionalResponseHeaders().get(HttpHeaderNames.of(\"my-header#3\")))\n                 .isEqualTo(\"value#3\");\n-        assertThat(derivedCtx.additionalResponseHeaders().get(AsciiString.of(\"my-header#4\")))\n+        assertThat(derivedCtx.additionalResponseHeaders().get(HttpHeaderNames.of(\"my-header#4\")))\n                 .isEqualTo(\"value#4\");\n-        assertThat(derivedCtx.additionalResponseTrailers().get(AsciiString.of(\"my-trailer#1\"))).isNull();\n-        assertThat(derivedCtx.additionalResponseTrailers().get(AsciiString.of(\"my-trailer#2\")))\n+        assertThat(derivedCtx.additionalResponseTrailers().get(HttpHeaderNames.of(\"my-trailer#1\"))).isNull();\n+        assertThat(derivedCtx.additionalResponseTrailers().get(HttpHeaderNames.of(\"my-trailer#2\")))\n                 .isEqualTo(\"value#2\");\n-        assertThat(derivedCtx.additionalResponseTrailers().get(AsciiString.of(\"my-trailer#3\")))\n+        assertThat(derivedCtx.additionalResponseTrailers().get(HttpHeaderNames.of(\"my-trailer#3\")))\n                 .isEqualTo(\"value#3\");\n-        assertThat(derivedCtx.additionalResponseTrailers().get(AsciiString.of(\"my-trailer#4\")))\n+        assertThat(derivedCtx.additionalResponseTrailers().get(HttpHeaderNames.of(\"my-trailer#4\")))\n                 .isEqualTo(\"value#4\");\n         // the attribute is derived as well\n         assertThat(derivedCtx.attr(foo).get()).isEqualTo(\"foo\");\n@@ -106,29 +106,29 @@ private static VirtualHost virtualHost() {\n \n     private static void setAdditionalHeaders(ServiceRequestContext originalCtx) {\n         final DefaultHttpHeaders headers1 = new DefaultHttpHeaders();\n-        headers1.set(AsciiString.of(\"my-header#1\"), \"value#1\");\n+        headers1.set(HttpHeaderNames.of(\"my-header#1\"), \"value#1\");\n         originalCtx.setAdditionalResponseHeaders(headers1);\n-        originalCtx.setAdditionalResponseHeader(AsciiString.of(\"my-header#2\"), \"value#2\");\n+        originalCtx.setAdditionalResponseHeader(HttpHeaderNames.of(\"my-header#2\"), \"value#2\");\n \n         final DefaultHttpHeaders headers2 = new DefaultHttpHeaders();\n-        headers2.set(AsciiString.of(\"my-header#3\"), \"value#3\");\n+        headers2.set(HttpHeaderNames.of(\"my-header#3\"), \"value#3\");\n         originalCtx.addAdditionalResponseHeaders(headers2);\n-        originalCtx.addAdditionalResponseHeader(AsciiString.of(\"my-header#4\"), \"value#4\");\n+        originalCtx.addAdditionalResponseHeader(HttpHeaderNames.of(\"my-header#4\"), \"value#4\");\n         // Remove the first one.\n-        originalCtx.removeAdditionalResponseHeader(AsciiString.of(\"my-header#1\"));\n+        originalCtx.removeAdditionalResponseHeader(HttpHeaderNames.of(\"my-header#1\"));\n     }\n \n     private static void setAdditionalTrailers(ServiceRequestContext originalCtx) {\n         final DefaultHttpHeaders trailers1 = new DefaultHttpHeaders();\n-        trailers1.set(AsciiString.of(\"my-trailer#1\"), \"value#1\");\n+        trailers1.set(HttpHeaderNames.of(\"my-trailer#1\"), \"value#1\");\n         originalCtx.setAdditionalResponseTrailers(trailers1);\n-        originalCtx.setAdditionalResponseTrailer(AsciiString.of(\"my-trailer#2\"), \"value#2\");\n+        originalCtx.setAdditionalResponseTrailer(HttpHeaderNames.of(\"my-trailer#2\"), \"value#2\");\n \n         final DefaultHttpHeaders trailers2 = new DefaultHttpHeaders();\n-        trailers2.set(AsciiString.of(\"my-trailer#3\"), \"value#3\");\n+        trailers2.set(HttpHeaderNames.of(\"my-trailer#3\"), \"value#3\");\n         originalCtx.addAdditionalResponseTrailers(trailers2);\n-        originalCtx.addAdditionalResponseTrailer(AsciiString.of(\"my-trailer#4\"), \"value#4\");\n+        originalCtx.addAdditionalResponseTrailer(HttpHeaderNames.of(\"my-trailer#4\"), \"value#4\");\n         // Remove the first one.\n-        originalCtx.removeAdditionalResponseTrailer(AsciiString.of(\"my-trailer#1\"));\n+        originalCtx.removeAdditionalResponseTrailer(HttpHeaderNames.of(\"my-trailer#1\"));\n     }\n }"
        },
        {
            "sha": "06c3ad20311f428dd9099e333eaa07e888211a8d",
            "filename": "core/src/test/java/com/linecorp/armeria/server/HttpHeaderUtilTest.java",
            "status": "modified",
            "additions": 1,
            "deletions": 3,
            "changes": 4,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2FHttpHeaderUtilTest.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2FHttpHeaderUtilTest.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2FHttpHeaderUtilTest.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -34,8 +34,6 @@\n import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpHeaders;\n \n-import io.netty.util.AsciiString;\n-\n public class HttpHeaderUtilTest {\n \n     private static final Predicate<InetAddress> ACCEPT_ANY = addr -> true;\n@@ -193,7 +191,7 @@ public void testClientAddress() throws UnknownHostException {\n         assertThat(HttpHeaderUtil.determineClientAddress(\n                 HttpHeaders.of(HttpHeaderNames.FORWARDED, \"for=10.0.0.1,for=10.0.0.2\",\n                                HttpHeaderNames.X_FORWARDED_FOR, \"10.1.0.1,10.1.0.2\",\n-                               AsciiString.of(\"x-real-ip\"), \"10.2.0.1,10.2.0.2\"),\n+                               HttpHeaderNames.of(\"x-real-ip\"), \"10.2.0.1,10.2.0.2\"),\n                 ImmutableList.of(ofHeader(\"x-real-ip\"),\n                                  ofHeader(HttpHeaderNames.FORWARDED),\n                                  ofHeader(HttpHeaderNames.X_FORWARDED_FOR)),"
        },
        {
            "sha": "923b9ffe1f026e0674c0f1a45861e1e4efcda22d",
            "filename": "core/src/test/java/com/linecorp/armeria/server/HttpServerTest.java",
            "status": "modified",
            "additions": 14,
            "deletions": 14,
            "changes": 28,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2FHttpServerTest.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2FHttpServerTest.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2FHttpServerTest.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -357,8 +357,8 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) {\n                 protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) {\n                     return HttpResponse.of(\n                             HttpHeaders.of(HttpStatus.OK).contentType(MediaType.PLAIN_TEXT_UTF_8)\n-                                       .add(AsciiString.of(\"x-custom-header1\"), \"custom1\")\n-                                       .add(AsciiString.of(\"X-Custom-Header2\"), \"custom2\"),\n+                                       .add(HttpHeaderNames.of(\"x-custom-header1\"), \"custom1\")\n+                                       .add(HttpHeaderNames.of(\"X-Custom-Header2\"), \"custom2\"),\n                             HttpData.ofUtf8(\"headers\"));\n                 }\n             }.decorate(HttpEncodingService.class));\n@@ -370,29 +370,29 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)\n                     return HttpResponse.of(\n                             HttpHeaders.of(HttpStatus.OK),\n                             HttpData.ofAscii(\"trailers incoming!\"),\n-                            HttpHeaders.of(AsciiString.of(\"foo\"), \"bar\"));\n+                            HttpHeaders.of(HttpHeaderNames.of(\"foo\"), \"bar\"));\n                 }\n             });\n \n             sb.service(\"/head-headers-only\", (ctx, req) -> HttpResponse.of(HttpHeaders.of(HttpStatus.OK)));\n \n             sb.service(\"/additional-trailers-other-trailers\", (ctx, req) -> {\n-                ctx.addAdditionalResponseTrailer(AsciiString.of(\"additional-trailer\"), \"value2\");\n+                ctx.addAdditionalResponseTrailer(HttpHeaderNames.of(\"additional-trailer\"), \"value2\");\n                 return HttpResponse.of(HttpHeaders.of(HttpStatus.OK),\n                                        HttpData.ofAscii(\"foobar\"),\n-                                       HttpHeaders.of(AsciiString.of(\"original-trailer\"), \"value1\"));\n+                                       HttpHeaders.of(HttpHeaderNames.of(\"original-trailer\"), \"value1\"));\n             });\n \n             sb.service(\"/additional-trailers-no-other-trailers\", (ctx, req) -> {\n-                ctx.addAdditionalResponseTrailer(AsciiString.of(\"additional-trailer\"), \"value2\");\n+                ctx.addAdditionalResponseTrailer(HttpHeaderNames.of(\"additional-trailer\"), \"value2\");\n                 String payload = \"foobar\";\n                 return HttpResponse.of(HttpHeaders.of(HttpStatus.OK),\n                                        new DefaultHttpData(payload.getBytes(StandardCharsets.UTF_8),\n                                                            0, payload.length(), true));\n             });\n \n             sb.service(\"/additional-trailers-no-eos\", (ctx, req) -> {\n-                ctx.addAdditionalResponseTrailer(AsciiString.of(\"additional-trailer\"), \"value2\");\n+                ctx.addAdditionalResponseTrailer(HttpHeaderNames.of(\"additional-trailer\"), \"value2\");\n                 String payload = \"foobar\";\n                 return HttpResponse.of(HttpHeaders.of(HttpStatus.OK),\n                                        new DefaultHttpData(payload.getBytes(StandardCharsets.UTF_8),\n@@ -820,8 +820,8 @@ public void testHeaders() throws Exception {\n                       .forEach(c -> assertTrue(Character.isLowerCase(c)));\n         }\n \n-        assertThat(res.headers().get(AsciiString.of(\"x-custom-header1\"))).isEqualTo(\"custom1\");\n-        assertThat(res.headers().get(AsciiString.of(\"x-custom-header2\"))).isEqualTo(\"custom2\");\n+        assertThat(res.headers().get(HttpHeaderNames.of(\"x-custom-header1\"))).isEqualTo(\"custom1\");\n+        assertThat(res.headers().get(HttpHeaderNames.of(\"x-custom-header2\"))).isEqualTo(\"custom2\");\n         assertThat(res.content().toStringUtf8()).isEqualTo(\"headers\");\n     }\n \n@@ -831,7 +831,7 @@ public void testTrailers() throws Exception {\n         final CompletableFuture<AggregatedHttpMessage> f = client().execute(req).aggregate();\n \n         final AggregatedHttpMessage res = f.get();\n-        assertThat(res.trailingHeaders().get(AsciiString.of(\"foo\"))).isEqualTo(\"bar\");\n+        assertThat(res.trailingHeaders().get(HttpHeaderNames.of(\"foo\"))).isEqualTo(\"bar\");\n     }\n \n     @Test(timeout = 10000)\n@@ -868,8 +868,8 @@ public void testAdditionalTrailersOtherTrailers() {\n         }\n         HttpHeaders trailers = client().get(\"/additional-trailers-other-trailers\")\n                                        .aggregate().join().trailingHeaders();\n-        assertThat(trailers.get(AsciiString.of(\"original-trailer\"))).isEqualTo(\"value1\");\n-        assertThat(trailers.get(AsciiString.of(\"additional-trailer\"))).isEqualTo(\"value2\");\n+        assertThat(trailers.get(HttpHeaderNames.of(\"original-trailer\"))).isEqualTo(\"value1\");\n+        assertThat(trailers.get(HttpHeaderNames.of(\"additional-trailer\"))).isEqualTo(\"value2\");\n     }\n \n     @Test(timeout = 10000)\n@@ -879,7 +879,7 @@ public void testAdditionalTrailersNoEndOfStream() {\n         }\n         HttpHeaders trailers = client().get(\"/additional-trailers-no-eos\")\n                                        .aggregate().join().trailingHeaders();\n-        assertThat(trailers.get(AsciiString.of(\"additional-trailer\"))).isEqualTo(\"value2\");\n+        assertThat(trailers.get(HttpHeaderNames.of(\"additional-trailer\"))).isEqualTo(\"value2\");\n     }\n \n     @Test(timeout = 10000)\n@@ -889,7 +889,7 @@ public void testAdditionalTrailersNoOtherTrailers() {\n         }\n         HttpHeaders trailers = client().get(\"/additional-trailers-no-other-trailers\")\n                                        .aggregate().join().trailingHeaders();\n-        assertThat(trailers.get(AsciiString.of(\"additional-trailer\"))).isEqualTo(\"value2\");\n+        assertThat(trailers.get(HttpHeaderNames.of(\"additional-trailer\"))).isEqualTo(\"value2\");\n     }\n \n     private HttpClient client() {"
        },
        {
            "sha": "91c205d7defff21903d08561a358ebc495311414",
            "filename": "core/src/test/java/com/linecorp/armeria/server/cors/HttpServerCorsTest.java",
            "status": "modified",
            "additions": 1,
            "deletions": 3,
            "changes": 4,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2Fcors%2FHttpServerCorsTest.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2Fcors%2FHttpServerCorsTest.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2Fcors%2FHttpServerCorsTest.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -35,8 +35,6 @@\n import com.linecorp.armeria.server.ServiceRequestContext;\n import com.linecorp.armeria.testing.server.ServerRule;\n \n-import io.netty.util.AsciiString;\n-\n public class HttpServerCorsTest {\n \n     private static final ClientFactory clientFactory = ClientFactory.DEFAULT;\n@@ -87,7 +85,7 @@ public void testCorsPreflight() throws Exception {\n \n         assertEquals(HttpStatus.OK, response.status());\n         assertEquals(\"http://example.com\", response.headers().get(HttpHeaderNames.ACCESS_CONTROL_ALLOW_ORIGIN));\n-        assertEquals(\"Hello CORS\", response.headers().get(AsciiString.of(\"x-preflight-cors\")));\n+        assertEquals(\"Hello CORS\", response.headers().get(HttpHeaderNames.of(\"x-preflight-cors\")));\n     }\n \n     @Test"
        },
        {
            "sha": "f6b0c65f9b0f547e2fb2f79554531aa2ad853ad2",
            "filename": "core/src/test/java/com/linecorp/armeria/server/healthcheck/ManagedHttpHealthCheckServiceTest.java",
            "status": "modified",
            "additions": 7,
            "deletions": 9,
            "changes": 16,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2Fhealthcheck%2FManagedHttpHealthCheckServiceTest.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2Fhealthcheck%2FManagedHttpHealthCheckServiceTest.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2Fhealthcheck%2FManagedHttpHealthCheckServiceTest.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -19,7 +19,6 @@\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.when;\n \n-import org.apache.http.HttpHeaders;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n@@ -29,6 +28,7 @@\n \n import com.linecorp.armeria.common.AggregatedHttpMessage;\n import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpMethod;\n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.HttpRequestWriter;\n@@ -37,8 +37,6 @@\n import com.linecorp.armeria.common.logging.DefaultRequestLog;\n import com.linecorp.armeria.server.ServiceRequestContext;\n \n-import io.netty.util.AsciiString;\n-\n public class ManagedHttpHealthCheckServiceTest {\n \n     @Rule\n@@ -68,14 +66,14 @@ public void turnOff() throws Exception {\n         AggregatedHttpMessage res = service.serve(context, hcTurnOffReq).aggregate().get();\n \n         assertThat(res.status()).isEqualTo(HttpStatus.OK);\n-        assertThat(res.headers().get(AsciiString.of(HttpHeaders.CONTENT_TYPE)))\n+        assertThat(res.headers().get(HttpHeaderNames.CONTENT_TYPE))\n                   .isEqualTo(MediaType.PLAIN_TEXT_UTF_8.toString());\n         assertThat(res.content().toStringUtf8()).isEqualTo(\"Set unhealthy.\");\n \n         res = service.serve(context, hcReq).aggregate().get();\n \n         assertThat(res.status()).isEqualTo(HttpStatus.SERVICE_UNAVAILABLE);\n-        assertThat(res.headers().get(AsciiString.of(HttpHeaders.CONTENT_TYPE))).isEqualTo(\n+        assertThat(res.headers().get(HttpHeaderNames.CONTENT_TYPE)).isEqualTo(\n                 MediaType.PLAIN_TEXT_UTF_8.toString());\n     }\n \n@@ -84,14 +82,14 @@ public void turnOn() throws Exception {\n         AggregatedHttpMessage res = service.serve(context, hcTurnOnReq).aggregate().get();\n \n         assertThat(res.status()).isEqualTo(HttpStatus.OK);\n-        assertThat(res.headers().get(AsciiString.of(HttpHeaders.CONTENT_TYPE))).isEqualTo(\n+        assertThat(res.headers().get(HttpHeaderNames.CONTENT_TYPE)).isEqualTo(\n                 MediaType.PLAIN_TEXT_UTF_8.toString());\n         assertThat(res.content().toStringUtf8()).isEqualTo(\"Set healthy.\");\n \n         res = service.serve(context, hcReq).aggregate().get();\n \n         assertThat(res.status()).isEqualTo(HttpStatus.OK);\n-        assertThat(res.headers().get(AsciiString.of(HttpHeaders.CONTENT_TYPE))).isEqualTo(\n+        assertThat(res.headers().get(HttpHeaderNames.CONTENT_TYPE)).isEqualTo(\n                 MediaType.PLAIN_TEXT_UTF_8.toString());\n     }\n \n@@ -104,7 +102,7 @@ public void notSupported() throws Exception {\n         AggregatedHttpMessage res = service.serve(context, noopRequest).aggregate().get();\n \n         assertThat(res.status()).isEqualTo(HttpStatus.BAD_REQUEST);\n-        assertThat(res.headers().get(AsciiString.of(HttpHeaders.CONTENT_TYPE))).isEqualTo(\n+        assertThat(res.headers().get(HttpHeaderNames.CONTENT_TYPE)).isEqualTo(\n                 MediaType.PLAIN_TEXT_UTF_8.toString());\n         assertThat(res.content().toStringUtf8()).isEqualTo(\"Not supported.\");\n \n@@ -117,7 +115,7 @@ public void notSupported() throws Exception {\n         res = service.serve(context, noopRequest).aggregate().get();\n \n         assertThat(res.status()).isEqualTo(HttpStatus.BAD_REQUEST);\n-        assertThat(res.headers().get(AsciiString.of(HttpHeaders.CONTENT_TYPE))).isEqualTo(\n+        assertThat(res.headers().get(HttpHeaderNames.CONTENT_TYPE)).isEqualTo(\n                 MediaType.PLAIN_TEXT_UTF_8.toString());\n         assertThat(res.content().toStringUtf8()).isEqualTo(\"Not supported.\");\n     }"
        },
        {
            "sha": "49464a8cb106f210b66d0d091afd3faaa70d17dd",
            "filename": "examples/annotated-http-service/src/test/java/example/armeria/server/annotated/AnnotatedHttpServiceTest.java",
            "status": "modified",
            "additions": 3,
            "deletions": 5,
            "changes": 8,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/examples%2Fannotated-http-service%2Fsrc%2Ftest%2Fjava%2Fexample%2Farmeria%2Fserver%2Fannotated%2FAnnotatedHttpServiceTest.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/examples%2Fannotated-http-service%2Fsrc%2Ftest%2Fjava%2Fexample%2Farmeria%2Fserver%2Fannotated%2FAnnotatedHttpServiceTest.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/examples%2Fannotated-http-service%2Fsrc%2Ftest%2Fjava%2Fexample%2Farmeria%2Fserver%2Fannotated%2FAnnotatedHttpServiceTest.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -18,8 +18,6 @@\n import com.linecorp.armeria.common.MediaType;\n import com.linecorp.armeria.server.Server;\n \n-import io.netty.util.AsciiString;\n-\n public class AnnotatedHttpServiceTest {\n \n     private static Server server;\n@@ -72,9 +70,9 @@ public void testInjectionService() {\n                                                     .thatContains(\"MALE\");\n \n         final HttpHeaders headers = HttpHeaders.of(HttpMethod.GET, \"/injection/header\")\n-                                               .add(AsciiString.of(\"x-armeria-text\"), \"armeria\")\n-                                               .add(AsciiString.of(\"x-armeria-sequence\"), \"1\")\n-                                               .add(AsciiString.of(\"x-armeria-sequence\"), \"2\")\n+                                               .add(HttpHeaderNames.of(\"x-armeria-text\"), \"armeria\")\n+                                               .add(HttpHeaderNames.of(\"x-armeria-sequence\"), \"1\")\n+                                               .add(HttpHeaderNames.of(\"x-armeria-sequence\"), \"2\")\n                                                .add(HttpHeaderNames.COOKIE, \"a=1\")\n                                                .add(HttpHeaderNames.COOKIE, \"b=1\");\n "
        },
        {
            "sha": "c02ddd2d7b11a14b03f93d2d6e294a1a48da4977",
            "filename": "grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceTest.java",
            "status": "modified",
            "additions": 2,
            "deletions": 4,
            "changes": 6,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/grpc%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2Fgrpc%2FGrpcServiceTest.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/grpc%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2Fgrpc%2FGrpcServiceTest.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/grpc%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2Fgrpc%2FGrpcServiceTest.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -43,8 +43,6 @@\n import com.linecorp.armeria.server.ServerBuilder;\n import com.linecorp.armeria.server.ServiceRequestContext;\n \n-import io.netty.util.AsciiString;\n-\n // Tests error cases, success cases are checked in ArmeriaGrpcServiceInteropTest\n public class GrpcServiceTest {\n \n@@ -112,8 +110,8 @@ public void missingMethod() throws Exception {\n         assertThat(response.aggregate().get()).isEqualTo(AggregatedHttpMessage.of(\n                 HttpHeaders.of(HttpStatus.OK)\n                            .set(HttpHeaderNames.CONTENT_TYPE, \"application/grpc+proto\")\n-                           .set(AsciiString.of(\"grpc-status\"), \"12\")\n-                           .set(AsciiString.of(\"grpc-message\"),\n+                           .set(HttpHeaderNames.of(\"grpc-status\"), \"12\")\n+                           .set(HttpHeaderNames.of(\"grpc-message\"),\n                                 \"Method not found: grpc.testing.TestService/FooCall\")\n                            .set(HttpHeaderNames.CONTENT_LENGTH, \"0\"),\n                 HttpData.EMPTY_DATA));"
        },
        {
            "sha": "0b0685f2fac6162c87a715435f99de792b3255d2",
            "filename": "spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationTest.java",
            "status": "modified",
            "additions": 2,
            "deletions": 3,
            "changes": 5,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/spring%2Fboot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fspring%2FArmeriaAutoConfigurationTest.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/spring%2Fboot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fspring%2FArmeriaAutoConfigurationTest.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/spring%2Fboot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fspring%2FArmeriaAutoConfigurationTest.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -43,6 +43,7 @@\n import com.linecorp.armeria.client.Clients;\n import com.linecorp.armeria.client.HttpClient;\n import com.linecorp.armeria.common.AggregatedHttpMessage;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpHeaders;\n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.HttpResponse;\n@@ -64,8 +65,6 @@\n import com.linecorp.armeria.spring.test.thrift.main.HelloService;\n import com.linecorp.armeria.spring.test.thrift.main.HelloService.hello_args;\n \n-import io.netty.util.AsciiString;\n-\n /**\n  * This uses {@link ArmeriaAutoConfiguration} for integration tests.\n  * application-autoConfTest.yml will be loaded with minimal settings to make it work.\n@@ -109,7 +108,7 @@ public ThriftServiceRegistrationBean helloThriftService() {\n                     .setDecorators(ImmutableList.of(LoggingService.newDecorator()))\n                     .setExampleRequests(Collections.singleton(new hello_args(\"nameVal\")))\n                     .setExampleHeaders(Collections.singleton(HttpHeaders.of(\n-                            AsciiString.of(\"x-additional-header\"), \"headerVal\")));\n+                            HttpHeaderNames.of(\"x-additional-header\"), \"headerVal\")));\n         }\n     }\n "
        },
        {
            "sha": "be8e50e3f53fc5b415e626dbcb3837ae24a5c38d",
            "filename": "spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaClientHttpRequest.java",
            "status": "modified",
            "additions": 1,
            "deletions": 2,
            "changes": 3,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/spring%2Fboot-webflux-autoconfigure%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fspring%2Fweb%2Freactive%2FArmeriaClientHttpRequest.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/spring%2Fboot-webflux-autoconfigure%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fspring%2Fweb%2Freactive%2FArmeriaClientHttpRequest.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/spring%2Fboot-webflux-autoconfigure%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fspring%2Fweb%2Freactive%2FArmeriaClientHttpRequest.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -43,7 +43,6 @@\n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.HttpResponse;\n \n-import io.netty.util.AsciiString;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n \n@@ -79,7 +78,7 @@ final class ArmeriaClientHttpRequest extends AbstractClientHttpRequest {\n     @Override\n     protected void applyHeaders() {\n         // Copy the HTTP headers which were specified by a user to the Armeria request.\n-        getHeaders().forEach((name, values) -> headers.set(AsciiString.of(name), values));\n+        getHeaders().forEach((name, values) -> headers.set(HttpHeaderNames.of(name), values));\n         setDefaultRequestHeaders(headers);\n     }\n "
        },
        {
            "sha": "25afdd67f74f4a0c4ffd57fa1a4d2982ab0c4f63",
            "filename": "spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpResponse.java",
            "status": "modified",
            "additions": 1,
            "deletions": 2,
            "changes": 3,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/spring%2Fboot-webflux-autoconfigure%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fspring%2Fweb%2Freactive%2FArmeriaServerHttpResponse.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/spring%2Fboot-webflux-autoconfigure%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fspring%2Fweb%2Freactive%2FArmeriaServerHttpResponse.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/spring%2Fboot-webflux-autoconfigure%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fspring%2Fweb%2Freactive%2FArmeriaServerHttpResponse.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -46,7 +46,6 @@\n import io.netty.handler.codec.http.cookie.Cookie;\n import io.netty.handler.codec.http.cookie.DefaultCookie;\n import io.netty.handler.codec.http.cookie.ServerCookieEncoder;\n-import io.netty.util.AsciiString;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n import reactor.core.scheduler.Schedulers;\n@@ -122,7 +121,7 @@ protected void applyStatusCode() {\n \n     @Override\n     protected void applyHeaders() {\n-        getHeaders().forEach((name, values) -> headers.add(AsciiString.of(name), values));\n+        getHeaders().forEach((name, values) -> headers.add(HttpHeaderNames.of(name), values));\n     }\n \n     @Override"
        },
        {
            "sha": "3ffa23a53a6fba61eecc545cc07b1849bedd24bd",
            "filename": "spring/boot-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaClientHttpResponseTest.java",
            "status": "modified",
            "additions": 1,
            "deletions": 2,
            "changes": 3,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/spring%2Fboot-webflux-autoconfigure%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fspring%2Fweb%2Freactive%2FArmeriaClientHttpResponseTest.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/spring%2Fboot-webflux-autoconfigure%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fspring%2Fweb%2Freactive%2FArmeriaClientHttpResponseTest.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/spring%2Fboot-webflux-autoconfigure%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fspring%2Fweb%2Freactive%2FArmeriaClientHttpResponseTest.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -33,7 +33,6 @@\n import com.linecorp.armeria.common.HttpStatus;\n import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n \n-import io.netty.util.AsciiString;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n import reactor.test.StepVerifier;\n@@ -70,7 +69,7 @@ public void readBodyStream() {\n     @Test\n     public void getCookies() {\n         final HttpHeaders httpHeaders = HttpHeaders.of(HttpStatus.OK)\n-                                                   .add(AsciiString.of(\"blahblah\"), \"armeria\")\n+                                                   .add(HttpHeaderNames.of(\"blahblah\"), \"armeria\")\n                                                    .add(HttpHeaderNames.SET_COOKIE, \"a=1; b=2\");\n         final HttpResponse httpResponse = HttpResponse.of(httpHeaders);\n         final ArmeriaClientHttpResponse response ="
        },
        {
            "sha": "37893089b89dd9d7e834cb5559e3608d0ba3c294",
            "filename": "spring/boot-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpResponseTest.java",
            "status": "modified",
            "additions": 1,
            "deletions": 2,
            "changes": 3,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/spring%2Fboot-webflux-autoconfigure%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fspring%2Fweb%2Freactive%2FArmeriaServerHttpResponseTest.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/spring%2Fboot-webflux-autoconfigure%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fspring%2Fweb%2Freactive%2FArmeriaServerHttpResponseTest.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/spring%2Fboot-webflux-autoconfigure%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fspring%2Fweb%2Freactive%2FArmeriaServerHttpResponseTest.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -38,7 +38,6 @@\n \n import io.netty.handler.codec.http.cookie.ClientCookieDecoder;\n import io.netty.handler.codec.http.cookie.Cookie;\n-import io.netty.util.AsciiString;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n import reactor.test.StepVerifier;\n@@ -128,7 +127,7 @@ public void returnHeadersAndBody() throws Exception {\n                         final HttpHeaders headers = (HttpHeaders) o;\n                         assertThat(headers.status())\n                                 .isEqualTo(com.linecorp.armeria.common.HttpStatus.OK);\n-                        assertThat(headers.get(AsciiString.of(\"Armeria\"))).isEqualTo(\"awesome\");\n+                        assertThat(headers.get(HttpHeaderNames.of(\"Armeria\"))).isEqualTo(\"awesome\");\n                         final Cookie setCookie =\n                                 ClientCookieDecoder.LAX.decode(headers.get(HttpHeaderNames.SET_COOKIE));\n                         assertThat(setCookie.name()).isEqualTo(\"a\");"
        },
        {
            "sha": "1d08a58007b107ee4a4b5e8c67a5fa94a96117fb",
            "filename": "thrift/src/test/java/com/linecorp/armeria/client/thrift/ThriftOverHttpClientTest.java",
            "status": "modified",
            "additions": 6,
            "deletions": 3,
            "changes": 9,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/thrift%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fclient%2Fthrift%2FThriftOverHttpClientTest.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/thrift%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fclient%2Fthrift%2FThriftOverHttpClientTest.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/thrift%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fclient%2Fthrift%2FThriftOverHttpClientTest.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -49,6 +49,7 @@\n import com.linecorp.armeria.client.ConnectionPoolListener;\n import com.linecorp.armeria.client.logging.ConnectionPoolLoggingListener;\n import com.linecorp.armeria.client.logging.LoggingClient;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpHeaders;\n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.HttpResponse;\n@@ -139,7 +140,7 @@ public class ThriftOverHttpClientTest {\n     private static final HeaderService.AsyncIface headerServiceHandler =\n             (name, resultHandler) -> {\n                 final HttpRequest req = RequestContext.current().request();\n-                resultHandler.onComplete(req.headers().get(AsciiString.of(name), \"\"));\n+                resultHandler.onComplete(req.headers().get(HttpHeaderNames.of(name), \"\"));\n             };\n \n     private enum Handlers {\n@@ -512,10 +513,12 @@ public void testDerivedClient() throws Exception {\n         assertThat(client.header(AUTHORIZATION)).isEqualTo(NO_TOKEN);\n \n         final HeaderService.Iface clientA =\n-                Clients.newDerivedClient(client, newHttpHeaderOption(AsciiString.of(AUTHORIZATION), TOKEN_A));\n+                Clients.newDerivedClient(client,\n+                                         newHttpHeaderOption(HttpHeaderNames.of(AUTHORIZATION), TOKEN_A));\n \n         final HeaderService.Iface clientB =\n-                Clients.newDerivedClient(client, newHttpHeaderOption(AsciiString.of(AUTHORIZATION), TOKEN_B));\n+                Clients.newDerivedClient(client,\n+                                         newHttpHeaderOption(HttpHeaderNames.of(AUTHORIZATION), TOKEN_B));\n \n         assertThat(clientA.header(AUTHORIZATION)).isEqualTo(TOKEN_A);\n         assertThat(clientB.header(AUTHORIZATION)).isEqualTo(TOKEN_B);"
        },
        {
            "sha": "ee127ac155135079bee69fc8474d9a215e6b865e",
            "filename": "thrift/src/test/java/com/linecorp/armeria/it/thrift/ThriftHttpHeaderTest.java",
            "status": "modified",
            "additions": 3,
            "deletions": 4,
            "changes": 7,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/thrift%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fit%2Fthrift%2FThriftHttpHeaderTest.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/thrift%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fit%2Fthrift%2FThriftHttpHeaderTest.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/thrift%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fit%2Fthrift%2FThriftHttpHeaderTest.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -33,6 +33,7 @@\n import com.linecorp.armeria.client.Clients;\n import com.linecorp.armeria.common.DefaultHttpHeaders;\n import com.linecorp.armeria.common.FilteredHttpResponse;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpHeaders;\n import com.linecorp.armeria.common.HttpObject;\n import com.linecorp.armeria.common.HttpRequest;\n@@ -46,8 +47,6 @@\n import com.linecorp.armeria.service.test.thrift.main.HelloService.Iface;\n import com.linecorp.armeria.testing.server.ServerRule;\n \n-import io.netty.util.AsciiString;\n-\n /**\n  * Tests if Armeria decorators can alter the request/response timeout specified in Thrift call parameters.\n  */\n@@ -71,7 +70,7 @@ public class ThriftHttpHeaderTest {\n             resultHandler.onError(new Exception(errorMessage));\n         }\n \n-        final HttpHeaders responseHeaders = new DefaultHttpHeaders().set(AsciiString.of(\"foo\"), \"bar\");\n+        final HttpHeaders responseHeaders = new DefaultHttpHeaders().set(HttpHeaderNames.of(\"foo\"), \"bar\");\n         ctx.setAdditionalResponseHeaders(responseHeaders);\n     };\n \n@@ -153,7 +152,7 @@ public void httpResponseHeaderContainsFoo() throws TException {\n                         @Override\n                         protected HttpObject filter(HttpObject obj) {\n                             if (obj instanceof HttpHeaders) {\n-                                assertThat(((HttpHeaders) obj).get(AsciiString.of(\"foo\"))).isEqualTo(\"bar\");\n+                                assertThat(((HttpHeaders) obj).get(HttpHeaderNames.of(\"foo\"))).isEqualTo(\"bar\");\n                             }\n                             return obj;\n                         }"
        },
        {
            "sha": "71ddaf05d93f7b3f8429846af8cb3d0ad58d5359",
            "filename": "thrift/src/test/java/com/linecorp/armeria/server/thrift/ThriftDocServiceTest.java",
            "status": "modified",
            "additions": 5,
            "deletions": 6,
            "changes": 11,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/thrift%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2Fthrift%2FThriftDocServiceTest.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/thrift%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2Fthrift%2FThriftDocServiceTest.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/thrift%2Fsrc%2Ftest%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Fserver%2Fthrift%2FThriftDocServiceTest.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -41,6 +41,7 @@\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n \n+import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpHeaders;\n import com.linecorp.armeria.common.SerializationFormat;\n import com.linecorp.armeria.common.thrift.ThriftSerializationFormats;\n@@ -58,8 +59,6 @@\n import com.linecorp.armeria.service.test.thrift.main.SleepService;\n import com.linecorp.armeria.testing.server.ServerRule;\n \n-import io.netty.util.AsciiString;\n-\n public class ThriftDocServiceTest {\n \n     private static final HelloService.AsyncIface HELLO_SERVICE_HANDLER =\n@@ -69,10 +68,10 @@ public class ThriftDocServiceTest {\n             (duration, resultHandler) -> resultHandler.onComplete(duration);\n \n     private static final hello_args EXAMPLE_HELLO = new hello_args(\"sample user\");\n-    private static final HttpHeaders EXAMPLE_HEADERS_ALL = HttpHeaders.of(AsciiString.of(\"a\"), \"b\");\n-    private static final HttpHeaders EXAMPLE_HEADERS_HELLO = HttpHeaders.of(AsciiString.of(\"c\"), \"d\");\n-    private static final HttpHeaders EXAMPLE_HEADERS_FOO = HttpHeaders.of(AsciiString.of(\"e\"), \"f\");\n-    private static final HttpHeaders EXAMPLE_HEADERS_FOO_BAR1 = HttpHeaders.of(AsciiString.of(\"g\"), \"h\");\n+    private static final HttpHeaders EXAMPLE_HEADERS_ALL = HttpHeaders.of(HttpHeaderNames.of(\"a\"), \"b\");\n+    private static final HttpHeaders EXAMPLE_HEADERS_HELLO = HttpHeaders.of(HttpHeaderNames.of(\"c\"), \"d\");\n+    private static final HttpHeaders EXAMPLE_HEADERS_FOO = HttpHeaders.of(HttpHeaderNames.of(\"e\"), \"f\");\n+    private static final HttpHeaders EXAMPLE_HEADERS_FOO_BAR1 = HttpHeaders.of(HttpHeaderNames.of(\"g\"), \"h\");\n \n     private static final ObjectMapper mapper = new ObjectMapper();\n "
        },
        {
            "sha": "3919ac2a600b680f3a8e4ba9a36c7d790b71be4a",
            "filename": "zipkin/src/main/java/com/linecorp/armeria/internal/tracing/AsciiStringKeyFactory.java",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/line/armeria/blob/8a003bf4984c233b33e0e8b686c68deb2164c0b3/zipkin%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Finternal%2Ftracing%2FAsciiStringKeyFactory.java",
            "raw_url": "https://github.com/line/armeria/raw/8a003bf4984c233b33e0e8b686c68deb2164c0b3/zipkin%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Finternal%2Ftracing%2FAsciiStringKeyFactory.java",
            "contents_url": "https://api.github.com/repos/line/armeria/contents/zipkin%2Fsrc%2Fmain%2Fjava%2Fcom%2Flinecorp%2Farmeria%2Finternal%2Ftracing%2FAsciiStringKeyFactory.java?ref=8a003bf4984c233b33e0e8b686c68deb2164c0b3",
            "patch": "@@ -16,6 +16,7 @@\n \n package com.linecorp.armeria.internal.tracing;\n \n+import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpHeaders;\n \n import brave.propagation.Propagation;\n@@ -30,6 +31,6 @@ public enum AsciiStringKeyFactory implements Propagation.KeyFactory<AsciiString>\n \n     @Override\n     public AsciiString create(String name) {\n-        return AsciiString.of(name);\n+        return HttpHeaderNames.of(name);\n     }\n }"
        }
    ]
}