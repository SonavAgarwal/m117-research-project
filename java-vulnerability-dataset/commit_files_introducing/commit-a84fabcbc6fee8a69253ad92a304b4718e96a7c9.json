{
    "sha": "a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
    "node_id": "MDY6Q29tbWl0MjQ5MzkwNDphODRmYWJjYmM2ZmVlOGE2OTI1M2FkOTJhMzA0YjQ3MThlOTZhN2M5",
    "commit": {
        "author": {
            "name": "Remy Maucherat",
            "email": "remm@apache.org",
            "date": "2006-03-27T13:53:46Z"
        },
        "committer": {
            "name": "Remy Maucherat",
            "email": "remm@apache.org",
            "date": "2006-03-27T13:53:46Z"
        },
        "message": "- Attempt to create a new repository according to the earlier thread.\n- No modules right now.\n- Dependencies on c-logging, c-modeler (which I think I will merge/simplify to util, as done with \n  digester earlier), Ant, JDT, PureTLS and JavaMail. Maybe it is possible to add dummy sources\n  for JavaMail to build without having to get the JAR, don't know about PureTLS.\n- Will require Java 5.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@389146 13f79535-47bb-0310-9956-ffa450edef68",
        "tree": {
            "sha": "11238f20f5635506f05b9e4f2254c558f79b80bc",
            "url": "https://api.github.com/repos/apache/tomcat/git/trees/11238f20f5635506f05b9e4f2254c558f79b80bc"
        },
        "url": "https://api.github.com/repos/apache/tomcat/git/commits/a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/tomcat/commits/a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
    "html_url": "https://github.com/apache/tomcat/commit/a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
    "comments_url": "https://api.github.com/repos/apache/tomcat/commits/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/comments",
    "author": {
        "login": "rmaucher",
        "id": 324250,
        "node_id": "MDQ6VXNlcjMyNDI1MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/324250?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rmaucher",
        "html_url": "https://github.com/rmaucher",
        "followers_url": "https://api.github.com/users/rmaucher/followers",
        "following_url": "https://api.github.com/users/rmaucher/following{/other_user}",
        "gists_url": "https://api.github.com/users/rmaucher/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rmaucher/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rmaucher/subscriptions",
        "organizations_url": "https://api.github.com/users/rmaucher/orgs",
        "repos_url": "https://api.github.com/users/rmaucher/repos",
        "events_url": "https://api.github.com/users/rmaucher/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rmaucher/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "rmaucher",
        "id": 324250,
        "node_id": "MDQ6VXNlcjMyNDI1MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/324250?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rmaucher",
        "html_url": "https://github.com/rmaucher",
        "followers_url": "https://api.github.com/users/rmaucher/followers",
        "following_url": "https://api.github.com/users/rmaucher/following{/other_user}",
        "gists_url": "https://api.github.com/users/rmaucher/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rmaucher/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rmaucher/subscriptions",
        "organizations_url": "https://api.github.com/users/rmaucher/orgs",
        "repos_url": "https://api.github.com/users/rmaucher/repos",
        "events_url": "https://api.github.com/users/rmaucher/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rmaucher/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [],
    "stats": {
        "total": 264772,
        "additions": 264772,
        "deletions": 0
    },
    "files": [
        {
            "sha": "2091f7fa134adf93cc17b06ac5ac7d9af450be6e",
            "filename": "build.xml",
            "status": "added",
            "additions": 29,
            "deletions": 0,
            "changes": 29,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/build.xml",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/build.xml",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/build.xml?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,29 @@\n+<project name=\"Tomcat 6.0\" default=\"deploy\" basedir=\".\">\r\n+\r\n+\r\n+  <!-- ===================== Initialize Property Values =================== -->\r\n+\r\n+  <!-- See \"build.properties.sample\" in the top level directory for all     -->\r\n+  <!-- property values you must customize for successful building!!!        -->\r\n+  <property file=\"${user.home}/build.properties\"/>\r\n+  <property file=\"build.properties\"/>\r\n+\r\n+  <property file=\"build.properties.default\"/>\r\n+\r\n+  <!-- Project Properties -->\r\n+  <property name=\"name\"                  value=\"Apache Tomcat\" />\r\n+  <property name=\"year\"                  value=\"2005\" />\r\n+  <property name=\"version.major\"         value=\"6\" />\r\n+  <property name=\"version.minor\"         value=\"0\" />\r\n+  <property name=\"version.build\"         value=\"0\" />\r\n+  <property name=\"version.patch\"         value=\"0\" />\r\n+  <property name=\"version\"               value=\"6.0.0-dev\" />\r\n+  <property name=\"version.number\"        value=\"${version.major}.${version.minor}.${version.build}.${version.patch}\" />\r\n+\r\n+  <property name=\"project\"               value=\"apache-tomcat\" />\r\n+  <property name=\"final.name\"            value=\"${project}-${version}\" />\r\n+  <property name=\"final-src.name\"        value=\"${project}-${version}-src\" />\r\n+\r\n+\r\n+\r\n+</project>\n\\ No newline at end of file"
        },
        {
            "sha": "d92d8e8c4e7e2a3cde9abe06196bd74e27c44390",
            "filename": "java/javax/el/ArrayELResolver.java",
            "status": "added",
            "additions": 152,
            "deletions": 0,
            "changes": 152,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FArrayELResolver.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FArrayELResolver.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fel%2FArrayELResolver.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,152 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package javax.el;\r\n+\r\n+import java.beans.FeatureDescriptor;\r\n+import java.lang.reflect.Array;\r\n+import java.util.Arrays;\r\n+import java.util.Iterator;\r\n+\r\n+public class ArrayELResolver extends ELResolver {\r\n+\r\n+\tprivate final boolean readOnly;\r\n+\r\n+\tpublic ArrayELResolver() {\r\n+\t\tthis.readOnly = false;\r\n+\t}\r\n+\r\n+\tpublic ArrayELResolver(boolean readOnly) {\r\n+\t\tthis.readOnly = readOnly;\r\n+\t}\r\n+\r\n+\tpublic Object getValue(ELContext context, Object base, Object property)\r\n+\t\t\tthrows NullPointerException, PropertyNotFoundException, ELException {\r\n+\t\tif (context == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\r\n+\t\tif (base != null && base.getClass().isArray()) {\r\n+\t\t\tcontext.setPropertyResolved(true);\r\n+\t\t\tint idx = coerce(property);\r\n+\t\t\tcheckBounds(base, idx);\r\n+\t\t\treturn Array.get(base, idx);\r\n+\t\t}\r\n+\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\tpublic Class<?> getType(ELContext context, Object base, Object property)\r\n+\t\t\tthrows NullPointerException, PropertyNotFoundException, ELException {\r\n+\t\tif (context == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\r\n+\t\tif (base != null && base.getClass().isArray()) {\r\n+\t\t\tcontext.setPropertyResolved(true);\r\n+\t\t\tint idx = coerce(property);\r\n+\t\t\tcheckBounds(base, idx);\r\n+\t\t\treturn base.getClass().getComponentType();\r\n+\t\t}\r\n+\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\tpublic void setValue(ELContext context, Object base, Object property,\r\n+\t\t\tObject value) throws NullPointerException,\r\n+\t\t\tPropertyNotFoundException, PropertyNotWritableException,\r\n+\t\t\tELException {\r\n+\t\tif (context == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\r\n+\t\tif (base != null && base.getClass().isArray()) {\r\n+\t\t\tcontext.setPropertyResolved(true);\r\n+\r\n+\t\t\tif (this.readOnly) {\r\n+\t\t\t\tthrow new PropertyNotWritableException(message(context,\r\n+\t\t\t\t\t\t\"resolverNotWriteable\", new Object[] { base.getClass()\r\n+\t\t\t\t\t\t\t\t.getName() }));\r\n+\t\t\t}\r\n+\r\n+\t\t\tint idx = coerce(property);\r\n+\t\t\tcheckBounds(base, idx);\r\n+\t\t\tArray.set(base, idx, value);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tpublic boolean isReadOnly(ELContext context, Object base, Object property)\r\n+\t\t\tthrows NullPointerException, PropertyNotFoundException, ELException {\r\n+\t\tif (context == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\r\n+\t\tif (base != null && base.getClass().isArray()) {\r\n+\t\t\tcontext.setPropertyResolved(true);\r\n+\t\t\tint idx = coerce(property);\r\n+\t\t\tcheckBounds(base, idx);\r\n+\t\t}\r\n+\r\n+\t\treturn this.readOnly;\r\n+\t}\r\n+\r\n+\tpublic Iterator getFeatureDescriptors(ELContext context, Object base) {\r\n+\t\tif (base != null && base.getClass().isArray()) {\r\n+\t\t\tFeatureDescriptor[] descs = new FeatureDescriptor[Array.getLength(base)];\r\n+\t\t\tfor (int i = 0; i < descs.length; i++) {\r\n+\t\t\t\tdescs[i] = new FeatureDescriptor();\r\n+\t\t\t\tdescs[i].setDisplayName(\"[\"+i+\"]\");\r\n+\t\t\t\tdescs[i].setExpert(false);\r\n+\t\t\t\tdescs[i].setHidden(false);\r\n+\t\t\t\tdescs[i].setName(\"\"+i);\r\n+\t\t\t\tdescs[i].setPreferred(true);\r\n+\t\t\t\tdescs[i].setValue(RESOLVABLE_AT_DESIGN_TIME, Boolean.FALSE);\r\n+\t\t\t\tdescs[i].setValue(TYPE, Integer.class);\r\n+\t\t\t}\r\n+\t\t\treturn Arrays.asList(descs).iterator();\r\n+\t\t}\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\tpublic Class<?> getCommonPropertyType(ELContext context, Object base) {\r\n+\t\tif (base != null && base.getClass().isArray()) {\r\n+\t\t\treturn Integer.class;\r\n+\t\t}\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\tprivate final static void checkBounds(Object base, int idx) {\r\n+\t\tif (idx < 0 || idx >= Array.getLength(base)) {\r\n+\t\t\tthrow new PropertyNotFoundException(\r\n+\t\t\t\t\tnew ArrayIndexOutOfBoundsException(idx).getMessage());\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tprivate final static int coerce(Object property) {\r\n+\t\tif (property instanceof Number) {\r\n+\t\t\treturn ((Number) property).intValue();\r\n+\t\t}\r\n+\t\tif (property instanceof Character) {\r\n+\t\t\treturn ((Character) property).charValue();\r\n+\t\t}\r\n+\t\tif (property instanceof Boolean) {\r\n+\t\t\treturn (((Boolean) property).booleanValue() ? 1 : 0);\r\n+\t\t}\r\n+\t\tthrow new IllegalArgumentException(property != null ? property\r\n+\t\t\t\t.toString() : \"null\");\r\n+\t}\r\n+\r\n+}\r"
        },
        {
            "sha": "b947083b5103c2adc6c06b7066f5e2ae1535d005",
            "filename": "java/javax/el/BeanELResolver.java",
            "status": "added",
            "additions": 326,
            "deletions": 0,
            "changes": 326,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FBeanELResolver.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FBeanELResolver.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fel%2FBeanELResolver.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,326 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package javax.el;\r\n+\r\n+import java.beans.BeanInfo;\r\n+import java.beans.IntrospectionException;\r\n+import java.beans.Introspector;\r\n+import java.beans.PropertyDescriptor;\r\n+import java.lang.reflect.InvocationTargetException;\r\n+import java.lang.reflect.Method;\r\n+import java.lang.reflect.Modifier;\r\n+import java.util.Arrays;\r\n+import java.util.HashMap;\r\n+import java.util.Iterator;\r\n+import java.util.Map;\r\n+import java.util.WeakHashMap;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+\r\n+public class BeanELResolver extends ELResolver {\r\n+\r\n+\tprivate final boolean readOnly;\r\n+\r\n+\tprivate final ConcurrentCache<String, BeanProperties> cache = new ConcurrentCache<String, BeanProperties>(\r\n+\t\t\t1000);\r\n+\r\n+\tpublic BeanELResolver() {\r\n+\t\tthis.readOnly = false;\r\n+\t}\r\n+\r\n+\tpublic BeanELResolver(boolean readOnly) {\r\n+\t\tthis.readOnly = readOnly;\r\n+\t}\r\n+\r\n+\tpublic Object getValue(ELContext context, Object base, Object property)\r\n+\t\t\tthrows NullPointerException, PropertyNotFoundException, ELException {\r\n+\t\tif (context == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\t\tif (base == null || property == null) {\r\n+\t\t\treturn null;\r\n+\t\t}\r\n+\r\n+\t\tcontext.setPropertyResolved(true);\r\n+\t\tMethod m = this.property(context, base, property).read(context);\r\n+\t\ttry {\r\n+\t\t\treturn m.invoke(base, (Object[]) null);\r\n+\t\t} catch (IllegalAccessException e) {\r\n+\t\t\tthrow new ELException(e);\r\n+\t\t} catch (InvocationTargetException e) {\r\n+\t\t\tthrow new ELException(message(context, \"propertyReadError\",\r\n+\t\t\t\t\tnew Object[] { base.getClass().getName(),\r\n+\t\t\t\t\t\t\tproperty.toString() }), e.getCause());\r\n+\t\t} catch (Exception e) {\r\n+\t\t\tthrow new ELException(e);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tpublic Class<?> getType(ELContext context, Object base, Object property)\r\n+\t\t\tthrows NullPointerException, PropertyNotFoundException, ELException {\r\n+\t\tif (context == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\t\tif (base == null || property == null) {\r\n+\t\t\treturn null;\r\n+\t\t}\r\n+\r\n+\t\tcontext.setPropertyResolved(true);\r\n+\t\treturn this.property(context, base, property).getType();\r\n+\t}\r\n+\r\n+\tpublic void setValue(ELContext context, Object base, Object property,\r\n+\t\t\tObject value) throws NullPointerException,\r\n+\t\t\tPropertyNotFoundException, PropertyNotWritableException,\r\n+\t\t\tELException {\r\n+\t\tif (context == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\t\tif (base == null || property == null) {\r\n+\t\t\treturn;\r\n+\t\t}\r\n+\r\n+\t\tcontext.setPropertyResolved(true);\r\n+\r\n+\t\tif (this.readOnly) {\r\n+\t\t\tthrow new PropertyNotWritableException(message(context,\r\n+\t\t\t\t\t\"resolverNotWriteable\", new Object[] { base.getClass()\r\n+\t\t\t\t\t\t\t.getName() }));\r\n+\t\t}\r\n+\r\n+\t\tMethod m = this.property(context, base, property).write(context);\r\n+\t\ttry {\r\n+\t\t\tm.invoke(base, new Object[] { value });\r\n+\t\t} catch (IllegalAccessException e) {\r\n+\t\t\tthrow new ELException(e);\r\n+\t\t} catch (InvocationTargetException e) {\r\n+\t\t\tthrow new ELException(message(context, \"propertyWriteError\",\r\n+\t\t\t\t\tnew Object[] { base.getClass().getName(),\r\n+\t\t\t\t\t\t\tproperty.toString() }), e.getCause());\r\n+\t\t} catch (Exception e) {\r\n+\t\t\tthrow new ELException(e);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tpublic boolean isReadOnly(ELContext context, Object base, Object property)\r\n+\t\t\tthrows NullPointerException, PropertyNotFoundException, ELException {\r\n+\t\tif (context == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\t\tif (base == null || property == null) {\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+\r\n+\t\tcontext.setPropertyResolved(true);\r\n+\t\treturn this.readOnly\r\n+\t\t\t\t|| this.property(context, base, property).isReadOnly();\r\n+\t}\r\n+\r\n+\tpublic Iterator getFeatureDescriptors(ELContext context, Object base) {\r\n+\t\tif (context == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\r\n+\t\tif (base == null) {\r\n+\t\t\treturn null;\r\n+\t\t}\r\n+\r\n+\t\ttry {\r\n+\t\t\tBeanInfo info = Introspector.getBeanInfo(base.getClass());\r\n+\t\t\tPropertyDescriptor[] pds = info.getPropertyDescriptors();\r\n+\t\t\tfor (int i = 0; i < pds.length; i++) {\r\n+\t\t\t\tpds[i].setValue(RESOLVABLE_AT_DESIGN_TIME, Boolean.TRUE);\r\n+\t\t\t\tpds[i].setValue(TYPE, pds[i].getPropertyType());\r\n+\t\t\t}\r\n+\t\t\treturn Arrays.asList(pds).iterator();\r\n+\t\t} catch (IntrospectionException e) {\r\n+\t\t\t//\r\n+\t\t}\r\n+\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\tpublic Class<?> getCommonPropertyType(ELContext context, Object base) {\r\n+\t\tif (context == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\r\n+\t\tif (base != null) {\r\n+\t\t\treturn Object.class;\r\n+\t\t}\r\n+\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\tprivate final static class BeanProperties {\r\n+\t\tprivate final Map<String, BeanProperty> properties;\r\n+\r\n+\t\tprivate final Class<?> type;\r\n+\r\n+\t\tpublic BeanProperties(Class<?> type) throws ELException {\r\n+\t\t\tthis.type = type;\r\n+\t\t\tthis.properties = new HashMap<String, BeanProperty>();\r\n+\t\t\ttry {\r\n+\t\t\t\tBeanInfo info = Introspector.getBeanInfo(this.type);\r\n+\t\t\t\tPropertyDescriptor[] pds = info.getPropertyDescriptors();\r\n+\t\t\t\tfor (int i = 0; i < pds.length; i++) {\r\n+\t\t\t\t\tthis.properties.put(pds[i].getName(), new BeanProperty(\r\n+\t\t\t\t\t\t\ttype, pds[i]));\r\n+\t\t\t\t}\r\n+\t\t\t} catch (IntrospectionException ie) {\r\n+\t\t\t\tthrow new ELException(ie);\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\tpublic BeanProperty get(ELContext ctx, String name) {\r\n+\t\t\tBeanProperty property = this.properties.get(name);\r\n+\t\t\tif (property == null) {\r\n+\t\t\t\tthrow new PropertyNotFoundException(message(ctx,\r\n+\t\t\t\t\t\t\"propertyNotFound\",\r\n+\t\t\t\t\t\tnew Object[] { type.getName(), name }));\r\n+\t\t\t}\r\n+\t\t\treturn property;\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tprivate final static class BeanProperty {\r\n+\t\tprivate final Class type;\r\n+\r\n+\t\tprivate final Class owner;\r\n+\r\n+\t\tprivate final PropertyDescriptor descriptor;\r\n+\r\n+\t\tprivate Method read;\r\n+\r\n+\t\tprivate Method write;\r\n+\r\n+\t\tpublic BeanProperty(Class owner, PropertyDescriptor descriptor) {\r\n+\t\t\tthis.owner = owner;\r\n+\t\t\tthis.descriptor = descriptor;\r\n+\t\t\tthis.type = descriptor.getPropertyType();\r\n+\t\t}\r\n+\r\n+\t\tpublic Class<?> getType() {\r\n+\t\t\treturn this.type;\r\n+\t\t}\r\n+\r\n+\t\tpublic boolean isReadOnly() {\r\n+\t\t\treturn this.write != null\r\n+\t\t\t\t\t|| null == getMethod(type, descriptor.getWriteMethod());\r\n+\t\t}\r\n+\r\n+\t\tpublic Method write(ELContext ctx) {\r\n+\t\t\tif (this.write == null) {\r\n+\t\t\t\tthis.write = getMethod(this.owner, descriptor.getWriteMethod());\r\n+\t\t\t\tif (this.write == null) {\r\n+\t\t\t\t\tthrow new PropertyNotFoundException(message(ctx,\r\n+\t\t\t\t\t\t\t\"propertyNotWritable\", new Object[] {\r\n+\t\t\t\t\t\t\t\t\ttype.getName(), descriptor.getName() }));\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t\treturn this.write;\r\n+\t\t}\r\n+\r\n+\t\tpublic Method read(ELContext ctx) {\r\n+\t\t\tif (this.read == null) {\r\n+\t\t\t\tthis.read = getMethod(this.owner, descriptor.getReadMethod());\r\n+\t\t\t\tif (this.read == null) {\r\n+\t\t\t\t\tthrow new PropertyNotFoundException(message(ctx,\r\n+\t\t\t\t\t\t\t\"propertyNotReadable\", new Object[] {\r\n+\t\t\t\t\t\t\t\t\ttype.getName(), descriptor.getName() }));\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t\treturn this.read;\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tprivate final BeanProperty property(ELContext ctx, Object base,\r\n+\t\t\tObject property) {\r\n+\t\tClass<?> type = base.getClass();\r\n+\t\tString prop = property.toString();\r\n+\r\n+\t\tBeanProperties props = this.cache.get(type.getName());\r\n+\t\tif (props == null) {\r\n+\t\t\tprops = new BeanProperties(type);\r\n+\t\t\tthis.cache.put(type.getName(), props);\r\n+\t\t}\r\n+\r\n+\t\treturn props.get(ctx, prop);\r\n+\t}\r\n+\r\n+\tprivate final static Method getMethod(Class type, Method m) {\r\n+\t\tif (m == null || Modifier.isPublic(type.getModifiers())) {\r\n+\t\t\treturn m;\r\n+\t\t}\r\n+\t\tClass[] inf = type.getInterfaces();\r\n+\t\tMethod mp = null;\r\n+\t\tfor (int i = 0; i < inf.length; i++) {\r\n+\t\t\ttry {\r\n+\t\t\t\tmp = inf[i].getMethod(m.getName(), (Class[]) m.getParameterTypes());\r\n+\t\t\t\tmp = getMethod(mp.getDeclaringClass(), mp);\r\n+\t\t\t\tif (mp != null) {\r\n+\t\t\t\t\treturn mp;\r\n+\t\t\t\t}\r\n+\t\t\t} catch (NoSuchMethodException e) {\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tClass sup = type.getSuperclass();\r\n+\t\tif (sup != null) {\r\n+\t\t\ttry {\r\n+\t\t\t\tmp = sup.getMethod(m.getName(), (Class[]) m.getParameterTypes());\r\n+\t\t\t\tmp = getMethod(mp.getDeclaringClass(), mp);\r\n+\t\t\t\tif (mp != null) {\r\n+\t\t\t\t\treturn mp;\r\n+\t\t\t\t}\r\n+\t\t\t} catch (NoSuchMethodException e) {\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn null;\r\n+\t}\r\n+\t\r\n+\tprivate final static class ConcurrentCache<K,V> {\r\n+\r\n+\t\tprivate final int size;\r\n+\t\tprivate final Map<K,V> eden;\r\n+\t\tprivate final Map<K,V> longterm;\r\n+\t\t\r\n+\t\tpublic ConcurrentCache(int size) {\r\n+\t\t\tthis.size = size;\r\n+\t\t\tthis.eden = new ConcurrentHashMap<K,V>(size);\r\n+\t\t\tthis.longterm = new WeakHashMap<K,V>(size);\r\n+\t\t}\r\n+\t\t\r\n+\t\tpublic V get(K key) {\r\n+\t\t\tV value = this.eden.get(key);\r\n+\t\t\tif (value == null) {\r\n+\t\t\t\tvalue = this.longterm.get(key);\r\n+\t\t\t\tif (value != null) {\r\n+\t\t\t\t\tthis.eden.put(key, value);\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t\treturn value;\r\n+\t\t}\r\n+\t\t\r\n+\t\tpublic void put(K key, V value) {\r\n+\t\t\tif (this.eden.size() >= this.size) {\r\n+\t\t\t\tthis.longterm.putAll(this.eden);\r\n+\t\t\t\tthis.eden.clear();\r\n+\t\t\t}\r\n+\t\t\tthis.eden.put(key, value);\r\n+\t\t}\r\n+\r\n+\t}\r\n+}\r"
        },
        {
            "sha": "e6066aa81f1fbb6534e52affc206267ba295fa57",
            "filename": "java/javax/el/CompositeELResolver.java",
            "status": "added",
            "additions": 174,
            "deletions": 0,
            "changes": 174,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FCompositeELResolver.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FCompositeELResolver.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fel%2FCompositeELResolver.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,174 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package javax.el;\r\n+\r\n+import java.util.Iterator;\r\n+\r\n+public class CompositeELResolver extends ELResolver {\r\n+\r\n+\tprivate int size;\r\n+\r\n+\tprivate ELResolver[] resolvers;\r\n+\r\n+\tpublic CompositeELResolver() {\r\n+\t\tthis.size = 0;\r\n+\t\tthis.resolvers = new ELResolver[2];\r\n+\t}\r\n+\r\n+\tpublic void add(ELResolver elResolver) {\r\n+\t\tif (elResolver == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\r\n+\t\tif (this.size >= this.resolvers.length) {\r\n+\t\t\tELResolver[] nr = new ELResolver[this.size * 2];\r\n+\t\t\tSystem.arraycopy(this.resolvers, 0, nr, 0, this.size);\r\n+\t\t\tthis.resolvers = nr;\r\n+\t\t}\r\n+\t\tthis.resolvers[this.size++] = elResolver;\r\n+\t}\r\n+\r\n+\tpublic Object getValue(ELContext context, Object base, Object property)\r\n+\t\t\tthrows NullPointerException, PropertyNotFoundException, ELException {\r\n+\t\tcontext.setPropertyResolved(false);\r\n+\t\tint sz = this.size;\r\n+\t\tObject result = null;\r\n+\t\tfor (int i = 0; i < sz; i++) {\r\n+\t\t\tresult = this.resolvers[i].getValue(context, base, property);\r\n+\t\t\tif (context.isPropertyResolved()) {\r\n+\t\t\t\treturn result;\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\tpublic void setValue(ELContext context, Object base, Object property,\r\n+\t\t\tObject value) throws NullPointerException,\r\n+\t\t\tPropertyNotFoundException, PropertyNotWritableException,\r\n+\t\t\tELException {\r\n+\t\tcontext.setPropertyResolved(false);\r\n+\t\tint sz = this.size;\r\n+\t\tfor (int i = 0; i < sz; i++) {\r\n+\t\t\tthis.resolvers[i].setValue(context, base, property, value);\r\n+\t\t\tif (context.isPropertyResolved()) {\r\n+\t\t\t\treturn;\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tpublic boolean isReadOnly(ELContext context, Object base, Object property)\r\n+\t\t\tthrows NullPointerException, PropertyNotFoundException, ELException {\r\n+\t\tcontext.setPropertyResolved(false);\r\n+\t\tint sz = this.size;\r\n+\t\tboolean readOnly = false;\r\n+\t\tfor (int i = 0; i < sz; i++) {\r\n+\t\t\treadOnly = this.resolvers[i].isReadOnly(context, base, property);\r\n+\t\t\tif (context.isPropertyResolved()) {\r\n+\t\t\t\treturn readOnly;\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn false;\r\n+\t}\r\n+\r\n+\tpublic Iterator getFeatureDescriptors(ELContext context, Object base) {\r\n+\t\treturn new FeatureIterator(context, base, this.resolvers, this.size);\r\n+\t}\r\n+\r\n+\tpublic Class<?> getCommonPropertyType(ELContext context, Object base) {\r\n+\t\tint sz = this.size;\r\n+\t\tClass<?> commonType = null, type = null;\r\n+\t\tfor (int i = 0; i < sz; i++) {\r\n+\t\t\ttype = this.resolvers[i].getCommonPropertyType(context, base);\r\n+\t\t\tif (type != null\r\n+\t\t\t\t\t&& (commonType == null || commonType.isAssignableFrom(type))) {\r\n+\t\t\t\tcommonType = type;\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn commonType;\r\n+\t}\r\n+\r\n+\tpublic Class<?> getType(ELContext context, Object base, Object property)\r\n+\t\t\tthrows NullPointerException, PropertyNotFoundException, ELException {\r\n+\t\tcontext.setPropertyResolved(false);\r\n+\t\tint sz = this.size;\r\n+\t\tClass<?> type;\r\n+\t\tfor (int i = 0; i < sz; i++) {\r\n+\t\t\ttype = this.resolvers[i].getType(context, base, property);\r\n+\t\t\tif (context.isPropertyResolved()) {\r\n+\t\t\t\treturn type;\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\tprivate final static class FeatureIterator implements Iterator {\r\n+\r\n+\t\tprivate final ELContext context;\r\n+\r\n+\t\tprivate final Object base;\r\n+\r\n+\t\tprivate final ELResolver[] resolvers;\r\n+\r\n+\t\tprivate final int size;\r\n+\r\n+\t\tprivate Iterator itr;\r\n+\r\n+\t\tprivate int idx;\r\n+\r\n+\t\tpublic FeatureIterator(ELContext context, Object base,\r\n+\t\t\t\tELResolver[] resolvers, int size) {\r\n+\t\t\tthis.context = context;\r\n+\t\t\tthis.base = base;\r\n+\t\t\tthis.resolvers = resolvers;\r\n+\t\t\tthis.size = size;\r\n+\r\n+\t\t\tthis.idx = 0;\r\n+\t\t\tthis.guaranteeIterator();\r\n+\t\t}\r\n+\t\t\r\n+\t\tprivate void guaranteeIterator() {\r\n+\t\t\twhile (this.itr == null && this.idx < this.size) {\r\n+\t\t\t\tthis.itr = this.resolvers[this.idx].getFeatureDescriptors(\r\n+\t\t\t\t\t\tthis.context, this.base);\r\n+\t\t\t\tthis.idx++;\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\tpublic boolean hasNext() {\r\n+\t\t\treturn this.itr != null;\r\n+\t\t}\r\n+\r\n+\t\tpublic Object next() {\r\n+\t\t\tObject result = null;\r\n+\t\t\tif (this.itr != null) {\r\n+\t\t\t\tif (this.itr.hasNext()) {\r\n+\t\t\t\t\tresult = this.itr.next();\r\n+\t\t\t\t\tif (!this.itr.hasNext()) {\r\n+\t\t\t\t\t\tthis.itr = null;\r\n+\t\t\t\t\t\tthis.guaranteeIterator();\r\n+\t\t\t\t\t}\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t\treturn result;\r\n+\t\t}\r\n+\r\n+\t\tpublic void remove() {\r\n+\t\t\tthrow new UnsupportedOperationException();\r\n+\t\t}\r\n+\t}\r\n+\r\n+}\r"
        },
        {
            "sha": "dd2f832e92ac783832d25639fc14e71904b1f79f",
            "filename": "java/javax/el/ELContext.java",
            "status": "added",
            "additions": 81,
            "deletions": 0,
            "changes": 81,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FELContext.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FELContext.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fel%2FELContext.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,81 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package javax.el;\r\n+\r\n+import java.util.HashMap;\r\n+import java.util.Locale;\r\n+import java.util.Map;\r\n+\r\n+/**\r\n+ *\r\n+ */\r\n+public abstract class ELContext {\r\n+\r\n+    private Locale locale;\r\n+    \r\n+    private Map<Class<?>, Object> map;\r\n+    \r\n+    private boolean resolved;\r\n+    \r\n+    /**\r\n+     * \r\n+     */\r\n+    public ELContext() {\r\n+        this.resolved = false;\r\n+    }\r\n+    \r\n+    public Object getContext(Class key) {\r\n+        if (this.map == null) {\r\n+            return null;\r\n+        }\r\n+        return this.map.get(key);\r\n+    }\r\n+    \r\n+    public void putContext(Class key, Object contextObject) throws NullPointerException {\r\n+        if (key == null || contextObject == null) {\r\n+            throw new NullPointerException();\r\n+        }\r\n+        \r\n+        if (this.map == null) {\r\n+            this.map = new HashMap<Class<?>, Object>();\r\n+        }\r\n+        \r\n+        this.map.put(key, contextObject);\r\n+    }\r\n+    \r\n+    public void setPropertyResolved(boolean resolved) {\r\n+        this.resolved = resolved;\r\n+    }\r\n+    \r\n+    public boolean isPropertyResolved() {\r\n+        return this.resolved;\r\n+    }\r\n+    \r\n+    public abstract ELResolver getELResolver();\r\n+\r\n+    public abstract FunctionMapper getFunctionMapper();\r\n+    \r\n+    public abstract VariableMapper getVariableMapper();\r\n+    \r\n+    public Locale getLocale() {\r\n+        return this.locale;\r\n+    }\r\n+    \r\n+    public void setLocale(Locale locale) {\r\n+        this.locale = locale;\r\n+    }\r\n+}\r"
        },
        {
            "sha": "5e38fa2cf9d38b39db46c98fbdce6d05d5771f56",
            "filename": "java/javax/el/ELContextEvent.java",
            "status": "added",
            "additions": 37,
            "deletions": 0,
            "changes": 37,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FELContextEvent.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FELContextEvent.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fel%2FELContextEvent.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,37 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package javax.el;\r\n+\r\n+import java.util.EventObject;\r\n+\r\n+/**\r\n+ *\r\n+ */\r\n+public class ELContextEvent extends EventObject {\r\n+\r\n+    /**\r\n+     * @param source\r\n+     */\r\n+    public ELContextEvent(ELContext source) {\r\n+        super(source);\r\n+    }\r\n+    \r\n+    public ELContext getELContext() {\r\n+        return (ELContext) this.getSource();\r\n+    }\r\n+\r\n+}\r"
        },
        {
            "sha": "e070b4bd9b6270dc610df07a1b5accda2b3ff590",
            "filename": "java/javax/el/ELContextListener.java",
            "status": "added",
            "additions": 27,
            "deletions": 0,
            "changes": 27,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FELContextListener.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FELContextListener.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fel%2FELContextListener.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,27 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package javax.el;\r\n+\r\n+/**\r\n+ * @author Jacob Hookom [jacob/hookom.net]\r\n+ *\r\n+ */\r\n+public interface ELContextListener {\r\n+    \r\n+    public void contextCreated(ELContextEvent event);\r\n+\r\n+}\r"
        },
        {
            "sha": "cdc0c027fbb377bc2debfa3693cf0e3be6a44997",
            "filename": "java/javax/el/ELException.java",
            "status": "added",
            "additions": 65,
            "deletions": 0,
            "changes": 65,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FELException.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FELException.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fel%2FELException.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,65 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package javax.el;\r\n+\r\n+/**\r\n+ * Represents any of the exception conditions that can arise during expression\r\n+ * evaluation.\r\n+ * \r\n+ * @since 2.1\r\n+ */\r\n+public class ELException extends RuntimeException {\r\n+\r\n+\t/**\r\n+\t * Creates an ELException with no detail message\r\n+\t */\r\n+\tpublic ELException() {\r\n+\t\tsuper();\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Creates an ELException with the provided detail message.\r\n+\t * \r\n+\t * @param message\r\n+\t *            the detail message\r\n+\t */\r\n+\tpublic ELException(String message) {\r\n+\t\tsuper(message);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Creates an ELException with the given detail message and root cause.\r\n+\t * \r\n+\t * @param message\r\n+\t *            the detail message\r\n+\t * @param cause\r\n+\t *            the originating cause of this exception\r\n+\t */\r\n+\tpublic ELException(String message, Throwable cause) {\r\n+\t\tsuper(message, cause);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Creates an ELException with the given cause\r\n+\t * \r\n+\t * @param cause\r\n+\t *            the originating cause of this exception\r\n+\t */\r\n+\tpublic ELException(Throwable cause) {\r\n+\t\tsuper(cause);\r\n+\t}\r\n+}\r"
        },
        {
            "sha": "e804734d1637b469b6aceeee0b16b6d4d6dc15c6",
            "filename": "java/javax/el/ELResolver.java",
            "status": "added",
            "additions": 68,
            "deletions": 0,
            "changes": 68,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FELResolver.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FELResolver.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fel%2FELResolver.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,68 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package javax.el;\r\n+\r\n+import java.text.MessageFormat;\r\n+import java.util.Iterator;\r\n+import java.util.Locale;\r\n+import java.util.MissingResourceException;\r\n+import java.util.ResourceBundle;\r\n+\r\n+/**\r\n+ * @author Jacob Hookom [jacob/hookom.net]\r\n+ *\r\n+ */\r\n+public abstract class ELResolver {\r\n+\t\r\n+\tstatic String message(ELContext context, String name, Object[] props) {\r\n+\t\tLocale locale = context.getLocale();\r\n+\t\tif (locale == null) {\r\n+\t\t\tlocale = Locale.getDefault();\r\n+\t\t\tif (locale == null) {\r\n+\t\t\t\treturn \"\";\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tResourceBundle bundle = ResourceBundle.getBundle(\r\n+\t\t\t\t\"javax.el.LocalStrings\", locale);\r\n+\t\ttry {\r\n+\t\t\tString template = bundle.getString(name);\r\n+\t\t\tif (props != null) {\r\n+\t\t\t\ttemplate = MessageFormat.format(template, props);\r\n+\t\t\t}\r\n+\t\t\treturn template;\r\n+\t\t} catch (MissingResourceException e) {\r\n+\t\t\treturn \"Missing Resource: '\" + name + \"' for Locale \"\r\n+\t\t\t\t\t+ locale.getDisplayName();\r\n+\t\t}\r\n+\t}\r\n+\r\n+    public final static String RESOLVABLE_AT_DESIGN_TIME = \"resolvableAtDesignTime\";\r\n+    \r\n+    public final static String TYPE = \"type\";\r\n+    \r\n+    public abstract Object getValue(ELContext context, Object base, Object property) throws NullPointerException, PropertyNotFoundException, ELException;\r\n+    \r\n+    public abstract Class<?> getType(ELContext context, Object base, Object property) throws NullPointerException, PropertyNotFoundException, ELException;\r\n+    \r\n+    public abstract void setValue(ELContext context, Object base, Object property, Object value) throws NullPointerException, PropertyNotFoundException, PropertyNotWritableException, ELException;\r\n+\r\n+    public abstract boolean isReadOnly(ELContext context, Object base, Object property) throws NullPointerException, PropertyNotFoundException, ELException;\r\n+    \r\n+    public abstract Iterator getFeatureDescriptors(ELContext context, Object base);\r\n+    \r\n+    public abstract Class<?> getCommonPropertyType(ELContext context, Object base);\r\n+}\r"
        },
        {
            "sha": "c0a0a8546e39a6670410babefc49ce6ff8d90869",
            "filename": "java/javax/el/Expression.java",
            "status": "added",
            "additions": 34,
            "deletions": 0,
            "changes": 34,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FExpression.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FExpression.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fel%2FExpression.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,34 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package javax.el;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+/**\r\n+ *\r\n+ */\r\n+public abstract class Expression implements Serializable {\r\n+\r\n+    public abstract boolean equals(Object obj);\r\n+\r\n+    public abstract int hashCode();\r\n+    \r\n+    public abstract String getExpressionString();\r\n+    \r\n+    public abstract boolean isLiteralText();\r\n+\r\n+}\r"
        },
        {
            "sha": "f56de55c3de20d2d1e02c17ef2e004bcb9f6dea5",
            "filename": "java/javax/el/ExpressionFactory.java",
            "status": "added",
            "additions": 39,
            "deletions": 0,
            "changes": 39,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FExpressionFactory.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FExpressionFactory.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fel%2FExpressionFactory.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,39 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package javax.el;\r\n+\r\n+/**\r\n+ * \r\n+ * @since 2.1\r\n+ */\r\n+public abstract class ExpressionFactory {\r\n+\r\n+    public abstract Object coerceToType(Object obj, Class<?> expectedType)\r\n+            throws ELException;\r\n+\r\n+    public abstract ValueExpression createValueExpression(ELContext context,\r\n+            String expression, Class<?> expectedType)\r\n+            throws NullPointerException, ELException;\r\n+\r\n+    public abstract ValueExpression createValueExpression(Object instance,\r\n+            Class<?> expectedType);\r\n+\r\n+    public abstract MethodExpression createMethodExpression(ELContext context,\r\n+            String expression, Class<?> expectedReturnType,\r\n+            Class<?>[] expectedParamTypes) throws ELException,\r\n+            NullPointerException;\r\n+}\r"
        },
        {
            "sha": "d02189e4e54af4cd763cd0daf45e42790fd6ef8c",
            "filename": "java/javax/el/FunctionMapper.java",
            "status": "added",
            "additions": 28,
            "deletions": 0,
            "changes": 28,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FFunctionMapper.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FFunctionMapper.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fel%2FFunctionMapper.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,28 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package javax.el;\r\n+\r\n+import java.lang.reflect.Method;\r\n+\r\n+/**\r\n+ *\r\n+ */\r\n+public abstract class FunctionMapper {\r\n+\r\n+    public abstract Method resolveFunction(String prefix, String localName);\r\n+    \r\n+}\r"
        },
        {
            "sha": "e72518583f35090ec2ac2547fd18f699297edfe2",
            "filename": "java/javax/el/ListELResolver.java",
            "status": "added",
            "additions": 168,
            "deletions": 0,
            "changes": 168,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FListELResolver.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FListELResolver.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fel%2FListELResolver.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,168 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package javax.el;\r\n+\r\n+import java.beans.FeatureDescriptor;\r\n+import java.lang.reflect.Array;\r\n+import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n+import java.util.Collections;\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+\r\n+public class ListELResolver extends ELResolver {\r\n+\r\n+\tprivate final boolean readOnly;\r\n+\r\n+\tprivate final static Class UNMODIFIABLE = Collections.unmodifiableList(\r\n+\t\t\tnew ArrayList()).getClass();\r\n+\r\n+\tpublic ListELResolver() {\r\n+\t\tthis.readOnly = true;\r\n+\t}\r\n+\r\n+\tpublic ListELResolver(boolean readOnly) {\r\n+\t\tthis.readOnly = readOnly;\r\n+\t}\r\n+\r\n+\tpublic Object getValue(ELContext context, Object base, Object property)\r\n+\t\t\tthrows NullPointerException, PropertyNotFoundException, ELException {\r\n+\t\tif (context == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\r\n+\t\tif (base instanceof List) {\r\n+\t\t\tcontext.setPropertyResolved(true);\r\n+\t\t\tList list = (List) base;\r\n+\t\t\tint idx = coerce(property);\r\n+\t\t\tif (idx < 0 || idx >= list.size()) {\r\n+\t\t\t\treturn null;\r\n+\t\t\t}\r\n+\t\t\treturn list.get(idx);\r\n+\t\t}\r\n+\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\tpublic Class<?> getType(ELContext context, Object base, Object property)\r\n+\t\t\tthrows NullPointerException, PropertyNotFoundException, ELException {\r\n+\t\tif (context == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\r\n+\t\tif (base instanceof List) {\r\n+\t\t\tcontext.setPropertyResolved(true);\r\n+\t\t\tList list = (List) base;\r\n+\t\t\tint idx = coerce(property);\r\n+\t\t\tif (idx < 0 || idx >= list.size()) {\r\n+\t\t\t\treturn null;\r\n+\t\t\t}\r\n+\t\t\tObject obj = list.get(idx);\r\n+\t\t\treturn (obj != null) ? obj.getClass() : null;\r\n+\t\t}\r\n+\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\tpublic void setValue(ELContext context, Object base, Object property,\r\n+\t\t\tObject value) throws NullPointerException,\r\n+\t\t\tPropertyNotFoundException, PropertyNotWritableException,\r\n+\t\t\tELException {\r\n+\t\tif (context == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\r\n+\t\tif (base instanceof List) {\r\n+\t\t\tcontext.setPropertyResolved(true);\r\n+\t\t\tList list = (List) base;\r\n+\r\n+\t\t\tif (this.readOnly) {\r\n+\t\t\t\tthrow new PropertyNotWritableException(message(context,\r\n+\t\t\t\t\t\t\"resolverNotWriteable\", new Object[] { base.getClass()\r\n+\t\t\t\t\t\t\t\t.getName() }));\r\n+\t\t\t}\r\n+\r\n+\t\t\tint idx = coerce(property);\r\n+\t\t\ttry {\r\n+\t\t\t\tlist.set(idx, value);\r\n+\t\t\t} catch (UnsupportedOperationException e) {\r\n+\t\t\t\tthrow new PropertyNotWritableException(e);\r\n+\t\t\t} catch (IndexOutOfBoundsException e) {\r\n+\t\t\t\tthrow new PropertyNotFoundException(e);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tpublic boolean isReadOnly(ELContext context, Object base, Object property)\r\n+\t\t\tthrows NullPointerException, PropertyNotFoundException, ELException {\r\n+\t\tif (context == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\r\n+\t\tif (base instanceof List) {\r\n+\t\t\tcontext.setPropertyResolved(true);\r\n+\t\t\tList list = (List) base;\r\n+\t\t\tint idx = coerce(property);\r\n+\t\t\tif (idx < 0 || idx >= list.size()) {\r\n+\t\t\t\tthrow new PropertyNotFoundException(\r\n+\t\t\t\t\t\tnew ArrayIndexOutOfBoundsException(idx).getMessage());\r\n+\t\t\t}\r\n+\t\t\treturn this.readOnly || UNMODIFIABLE.equals(list.getClass());\r\n+\t\t}\r\n+\r\n+\t\treturn this.readOnly;\r\n+\t}\r\n+\r\n+\tpublic Iterator getFeatureDescriptors(ELContext context, Object base) {\r\n+\t\tif (base instanceof List) {\r\n+\t\t\tFeatureDescriptor[] descs = new FeatureDescriptor[((List) base).size()];\r\n+\t\t\tfor (int i = 0; i < descs.length; i++) {\r\n+\t\t\t\tdescs[i] = new FeatureDescriptor();\r\n+\t\t\t\tdescs[i].setDisplayName(\"[\"+i+\"]\");\r\n+\t\t\t\tdescs[i].setExpert(false);\r\n+\t\t\t\tdescs[i].setHidden(false);\r\n+\t\t\t\tdescs[i].setName(\"\"+i);\r\n+\t\t\t\tdescs[i].setPreferred(true);\r\n+\t\t\t\tdescs[i].setValue(RESOLVABLE_AT_DESIGN_TIME, Boolean.FALSE);\r\n+\t\t\t\tdescs[i].setValue(TYPE, Integer.class);\r\n+\t\t\t}\r\n+\t\t\treturn Arrays.asList(descs).iterator();\r\n+\t\t}\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\tpublic Class<?> getCommonPropertyType(ELContext context, Object base) {\r\n+\t\tif (base != null && base instanceof List) {\r\n+\t\t\treturn Integer.class;\r\n+\t\t}\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\tprivate final static int coerce(Object property) {\r\n+\t\tif (property instanceof Number) {\r\n+\t\t\treturn ((Number) property).intValue();\r\n+\t\t}\r\n+\t\tif (property instanceof Character) {\r\n+\t\t\treturn ((Character) property).charValue();\r\n+\t\t}\r\n+\t\tif (property instanceof Boolean) {\r\n+\t\t\treturn (((Boolean) property).booleanValue() ? 1 : 0);\r\n+\t\t}\r\n+\t\tthrow new IllegalArgumentException(property != null ? property\r\n+\t\t\t\t.toString() : \"null\");\r\n+\t}\r\n+}\r"
        },
        {
            "sha": "64df6eb23d951d1268fbd69263d54fac7406cdde",
            "filename": "java/javax/el/LocalStrings.properties",
            "status": "added",
            "additions": 23,
            "deletions": 0,
            "changes": 23,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FLocalStrings.properties",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FLocalStrings.properties",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fel%2FLocalStrings.properties?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,23 @@\n+# Copyright 2004 The Apache Software Foundation\r\n+#\r\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+# you may not use this file except in compliance with the License.\r\n+# You may obtain a copy of the License at\r\n+#\r\n+#     http://www.apache.org/licenses/LICENSE-2.0\r\n+#\r\n+# Unless required by applicable law or agreed to in writing, software\r\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+# See the License for the specific language governing permissions and\r\n+# limitations under the License.\r\n+\r\n+# Default localized string information\r\n+# Localized for Locale en_US\r\n+\r\n+propertyNotFound=Property '{1}' not found on type {0}\r\n+propertyNotReadable=Property '{1}' not readable on type {0}\r\n+propertyNotWritable=Property '{1}' not writable on type {0}\r\n+propertyReadError=Error reading '{1}' on type {0}\r\n+propertyWriteError=Error writing '{1}' on type {0}\r\n+resolverNotWritable=ELResolver not writable for type {0}\n\\ No newline at end of file"
        },
        {
            "sha": "9868b5212712d6d03223b733a09a4699e07cbd3e",
            "filename": "java/javax/el/MapELResolver.java",
            "status": "added",
            "additions": 140,
            "deletions": 0,
            "changes": 140,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FMapELResolver.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FMapELResolver.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fel%2FMapELResolver.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,140 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package javax.el;\r\n+\r\n+import java.beans.FeatureDescriptor;\r\n+import java.util.ArrayList;\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n+public class MapELResolver extends ELResolver {\r\n+\r\n+\tprivate final static Class UNMODIFIABLE = Collections.unmodifiableMap(\r\n+\t\t\tnew HashMap()).getClass();\r\n+\r\n+\tprivate final boolean readOnly;\r\n+\r\n+\tpublic MapELResolver() {\r\n+\t\tthis.readOnly = false;\r\n+\t}\r\n+\r\n+\tpublic MapELResolver(boolean readOnly) {\r\n+\t\tthis.readOnly = readOnly;\r\n+\t}\r\n+\r\n+\tpublic Object getValue(ELContext context, Object base, Object property)\r\n+\t\t\tthrows NullPointerException, PropertyNotFoundException, ELException {\r\n+\t\tif (context == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\r\n+\t\tif (base instanceof Map) {\r\n+\t\t\tcontext.setPropertyResolved(true);\r\n+\t\t\treturn ((Map) base).get(property);\r\n+\t\t}\r\n+\t\t\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\tpublic Class<?> getType(ELContext context, Object base, Object property)\r\n+\t\t\tthrows NullPointerException, PropertyNotFoundException, ELException {\r\n+\t\tif (context == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\r\n+\t\tif (base instanceof Map) {\r\n+\t\t\tcontext.setPropertyResolved(true);\r\n+\t\t\tObject obj = ((Map) base).get(property);\r\n+\t\t\treturn (obj != null) ? obj.getClass() : null;\r\n+\t\t}\r\n+\t\t\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\tpublic void setValue(ELContext context, Object base, Object property,\r\n+\t\t\tObject value) throws NullPointerException,\r\n+\t\t\tPropertyNotFoundException, PropertyNotWritableException,\r\n+\t\t\tELException {\r\n+\t\tif (context == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\r\n+\t\tif (base instanceof Map) {\r\n+\t\t\tcontext.setPropertyResolved(true);\r\n+\r\n+\t\t\tif (this.readOnly) {\r\n+\t\t\t\tthrow new PropertyNotWritableException(message(context,\r\n+\t\t\t\t\t\t\"resolverNotWriteable\", new Object[] { base.getClass()\r\n+\t\t\t\t\t\t\t\t.getName() }));\r\n+\t\t\t}\r\n+\r\n+\t\t\ttry {\r\n+\t\t\t\t((Map) base).put(property, value);\r\n+\t\t\t} catch (UnsupportedOperationException e) {\r\n+\t\t\t\tthrow new PropertyNotWritableException(e);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tpublic boolean isReadOnly(ELContext context, Object base, Object property)\r\n+\t\t\tthrows NullPointerException, PropertyNotFoundException, ELException {\r\n+\t\tif (context == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\r\n+\t\tif (base instanceof Map) {\r\n+\t\t\tcontext.setPropertyResolved(true);\r\n+\t\t\treturn this.readOnly || UNMODIFIABLE.equals(base.getClass());\r\n+\t\t}\r\n+\t\t\r\n+\t\treturn this.readOnly;\r\n+\t}\r\n+\r\n+\tpublic Iterator getFeatureDescriptors(ELContext context, Object base) {\r\n+\t\tif (base instanceof Map) {\r\n+\t\t\tIterator itr = ((Map) base).keySet().iterator();\r\n+\t\t\tList feats = new ArrayList();\r\n+\t\t\tObject key;\r\n+\t\t\tFeatureDescriptor desc;\r\n+\t\t\twhile (itr.hasNext()) {\r\n+\t\t\t\tkey = itr.next();\r\n+\t\t\t\tdesc = new FeatureDescriptor();\r\n+\t\t\t\tdesc.setDisplayName(key.toString());\r\n+\t\t\t\tdesc.setExpert(false);\r\n+\t\t\t\tdesc.setHidden(false);\r\n+\t\t\t\tdesc.setName(key.toString());\r\n+\t\t\t\tdesc.setPreferred(true);\r\n+\t\t\t\tdesc.setValue(RESOLVABLE_AT_DESIGN_TIME, Boolean.FALSE);\r\n+\t\t\t\tdesc.setValue(TYPE, key.getClass());\r\n+\t\t\t\tfeats.add(desc);\r\n+\t\t\t}\r\n+\t\t\treturn feats.iterator();\r\n+\t\t}\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\tpublic Class<?> getCommonPropertyType(ELContext context, Object base) {\r\n+\t\tif (base instanceof Map) {\r\n+\t\t\treturn Object.class;\r\n+\t\t}\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+}\r"
        },
        {
            "sha": "81fa6a3158fc03bbec465ef75759e08c9eac2671",
            "filename": "java/javax/el/MethodExpression.java",
            "status": "added",
            "additions": 27,
            "deletions": 0,
            "changes": 27,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FMethodExpression.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FMethodExpression.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fel%2FMethodExpression.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,27 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package javax.el;\r\n+\r\n+/**\r\n+ *\r\n+ */\r\n+public abstract class MethodExpression extends Expression {\r\n+\r\n+    public abstract MethodInfo getMethodInfo(ELContext context) throws NullPointerException, PropertyNotFoundException, MethodNotFoundException, ELException;\r\n+    \r\n+    public abstract Object invoke(ELContext context, Object[] params) throws NullPointerException, PropertyNotFoundException, MethodNotFoundException, ELException;\r\n+}\r"
        },
        {
            "sha": "51057e7aaeda6da97a9991a9d2ad2b3c13a241df",
            "filename": "java/javax/el/MethodInfo.java",
            "status": "added",
            "additions": 51,
            "deletions": 0,
            "changes": 51,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FMethodInfo.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FMethodInfo.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fel%2FMethodInfo.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,51 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package javax.el;\r\n+\r\n+/**\r\n+ *\r\n+ */\r\n+public class MethodInfo {\r\n+\r\n+    private final String name;\r\n+    \r\n+    private final Class<?>[] paramTypes;\r\n+    \r\n+    private final Class<?> returnType;\r\n+    \r\n+    /**\r\n+     * \r\n+     */\r\n+    public MethodInfo(String name, Class<?> returnType, Class<?>[] paramTypes) {\r\n+        this.name = name;\r\n+        this.returnType = returnType;\r\n+        this.paramTypes = paramTypes;\r\n+    }\r\n+    \r\n+    public String getName() {\r\n+        return this.name;\r\n+    }\r\n+    \r\n+    public Class<?>[] getParamTypes() {\r\n+        return this.paramTypes;\r\n+    }\r\n+    \r\n+    public Class<?> getReturnType() {\r\n+        return this.returnType;\r\n+    }\r\n+\r\n+}\r"
        },
        {
            "sha": "0610d066decb7c2a5559e08da4257b5f6e2744d9",
            "filename": "java/javax/el/MethodNotFoundException.java",
            "status": "added",
            "additions": 52,
            "deletions": 0,
            "changes": 52,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FMethodNotFoundException.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FMethodNotFoundException.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fel%2FMethodNotFoundException.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,52 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package javax.el;\r\n+\r\n+/**\r\n+ *\r\n+ */\r\n+public class MethodNotFoundException extends ELException {\r\n+\r\n+    /**\r\n+     * \r\n+     */\r\n+    public MethodNotFoundException() {\r\n+        super();\r\n+    }\r\n+\r\n+    /**\r\n+     * @param message\r\n+     */\r\n+    public MethodNotFoundException(String message) {\r\n+        super(message);\r\n+    }\r\n+\r\n+    /**\r\n+     * @param message\r\n+     * @param cause\r\n+     */\r\n+    public MethodNotFoundException(String message, Throwable cause) {\r\n+        super(message, cause);\r\n+    }\r\n+\r\n+    /**\r\n+     * @param cause\r\n+     */\r\n+    public MethodNotFoundException(Throwable cause) {\r\n+        super(cause);\r\n+    }\r\n+}\r"
        },
        {
            "sha": "a2e7b60a6d7c30d40ed654dd122fb2a4ead15de1",
            "filename": "java/javax/el/PropertyNotFoundException.java",
            "status": "added",
            "additions": 53,
            "deletions": 0,
            "changes": 53,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FPropertyNotFoundException.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FPropertyNotFoundException.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fel%2FPropertyNotFoundException.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,53 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package javax.el;\r\n+\r\n+/**\r\n+ *\r\n+ */\r\n+public class PropertyNotFoundException extends ELException {\r\n+\t\r\n+    /**\r\n+     * \r\n+     */\r\n+    public PropertyNotFoundException() {\r\n+        super();\r\n+    }\r\n+\r\n+    /**\r\n+     * @param message\r\n+     */\r\n+    public PropertyNotFoundException(String message) {\r\n+        super(message);\r\n+    }\r\n+\r\n+    /**\r\n+     * @param message\r\n+     * @param cause\r\n+     */\r\n+    public PropertyNotFoundException(String message, Throwable cause) {\r\n+        super(message, cause);\r\n+    }\r\n+\r\n+    /**\r\n+     * @param cause\r\n+     */\r\n+    public PropertyNotFoundException(Throwable cause) {\r\n+        super(cause);\r\n+    }\r\n+\r\n+}\r"
        },
        {
            "sha": "0042227a963420c6b518c176f0cecc409c8c9d7a",
            "filename": "java/javax/el/PropertyNotWritableException.java",
            "status": "added",
            "additions": 52,
            "deletions": 0,
            "changes": 52,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FPropertyNotWritableException.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FPropertyNotWritableException.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fel%2FPropertyNotWritableException.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,52 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package javax.el;\r\n+\r\n+/**\r\n+ *\r\n+ */\r\n+public class PropertyNotWritableException extends ELException {\r\n+\r\n+    /**\r\n+     * \r\n+     */\r\n+    public PropertyNotWritableException() {\r\n+        super();\r\n+    }\r\n+\r\n+    /**\r\n+     * @param message\r\n+     */\r\n+    public PropertyNotWritableException(String message) {\r\n+        super(message);\r\n+    }\r\n+\r\n+    /**\r\n+     * @param message\r\n+     * @param cause\r\n+     */\r\n+    public PropertyNotWritableException(String message, Throwable cause) {\r\n+        super(message, cause);\r\n+    }\r\n+\r\n+    /**\r\n+     * @param cause\r\n+     */\r\n+    public PropertyNotWritableException(Throwable cause) {\r\n+        super(cause);\r\n+    }\r\n+}\r"
        },
        {
            "sha": "23092c60929fded2eed6a21c219ae8bfff5afd56",
            "filename": "java/javax/el/ResourceBundleELResolver.java",
            "status": "added",
            "additions": 127,
            "deletions": 0,
            "changes": 127,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FResourceBundleELResolver.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FResourceBundleELResolver.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fel%2FResourceBundleELResolver.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,127 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package javax.el;\r\n+\r\n+import java.beans.FeatureDescriptor;\r\n+import java.util.ArrayList;\r\n+import java.util.Enumeration;\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+import java.util.MissingResourceException;\r\n+import java.util.ResourceBundle;\r\n+\r\n+public class ResourceBundleELResolver extends ELResolver {\r\n+\r\n+\tpublic ResourceBundleELResolver() {\r\n+\t\tsuper();\r\n+\t}\r\n+\r\n+\tpublic Object getValue(ELContext context, Object base, Object property)\r\n+\t\t\tthrows NullPointerException, PropertyNotFoundException, ELException {\r\n+\t\tif (context == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\t\t\r\n+\t\tif (base instanceof ResourceBundle) {\r\n+\t\t\tcontext.setPropertyResolved(true);\r\n+\r\n+\t\t\tif (property != null) {\r\n+\t\t\t\ttry {\r\n+\t\t\t\t\treturn ((ResourceBundle) base).getObject(property\r\n+\t\t\t\t\t\t\t.toString());\r\n+\t\t\t\t} catch (MissingResourceException mre) {\r\n+\t\t\t\t\treturn \"???\" + property.toString() + \"???\";\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\tpublic Class<?> getType(ELContext context, Object base, Object property)\r\n+\t\t\tthrows NullPointerException, PropertyNotFoundException, ELException {\r\n+\t\tif (context == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\t\t\r\n+\t\tif (base instanceof ResourceBundle) {\r\n+\t\t\tcontext.setPropertyResolved(true);\r\n+\t\t}\r\n+\t\t\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\tpublic void setValue(ELContext context, Object base, Object property,\r\n+\t\t\tObject value) throws NullPointerException,\r\n+\t\t\tPropertyNotFoundException, PropertyNotWritableException,\r\n+\t\t\tELException {\r\n+\t\tif (context == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\t\t\r\n+\t\tif (base instanceof ResourceBundle) {\r\n+\t\t\tcontext.setPropertyResolved(true);\r\n+\t\t\tthrow new PropertyNotWritableException(message(context,\r\n+\t\t\t\t\t\"resolverNotWriteable\", new Object[] { base.getClass()\r\n+\t\t\t\t\t\t\t.getName() }));\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tpublic boolean isReadOnly(ELContext context, Object base, Object property)\r\n+\t\t\tthrows NullPointerException, PropertyNotFoundException, ELException {\r\n+\t\tif (context == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\t\t\r\n+\t\tif (base instanceof ResourceBundle) {\r\n+\t\t\tcontext.setPropertyResolved(true);\r\n+\t\t}\r\n+\t\t\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\tpublic Iterator getFeatureDescriptors(ELContext context, Object base) {\r\n+\t\tif (base instanceof ResourceBundle) {\r\n+\t\t\tList feats = new ArrayList();\r\n+\t\t\tEnumeration e = ((ResourceBundle) base).getKeys();\r\n+\t\t\tFeatureDescriptor feat;\r\n+\t\t\tString key;\r\n+\t\t\twhile (e.hasMoreElements()) {\r\n+\t\t\t\tkey = (String) e.nextElement();\r\n+\t\t\t\tfeat = new FeatureDescriptor();\r\n+\t\t\t\tfeat.setDisplayName(key);\r\n+\t\t\t\tfeat.setExpert(false);\r\n+\t\t\t\tfeat.setHidden(false);\r\n+\t\t\t\tfeat.setName(key);\r\n+\t\t\t\tfeat.setPreferred(true);\r\n+\t\t\t\tfeat.setValue(RESOLVABLE_AT_DESIGN_TIME, Boolean.TRUE);\r\n+\t\t\t\tfeat.setValue(TYPE, String.class);\r\n+\t\t\t\tfeats.add(feat);\r\n+\t\t\t}\r\n+\t\t\treturn feats.iterator();\r\n+\t\t}\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\tpublic Class<?> getCommonPropertyType(ELContext context, Object base) {\r\n+\t\tif (base instanceof ResourceBundle) {\r\n+\t\t\treturn String.class;\r\n+\t\t}\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+}\r"
        },
        {
            "sha": "87334f9e59231f78acacd3a443fa7370835695e4",
            "filename": "java/javax/el/ValueExpression.java",
            "status": "added",
            "additions": 34,
            "deletions": 0,
            "changes": 34,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FValueExpression.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FValueExpression.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fel%2FValueExpression.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,34 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package javax.el;\r\n+\r\n+/**\r\n+ *\r\n+ */\r\n+public abstract class ValueExpression extends Expression {\r\n+\r\n+    public abstract Class<?> getExpectedType();\r\n+    \r\n+    public abstract Class<?> getType(ELContext context) throws NullPointerException, PropertyNotFoundException, ELException;\r\n+    \r\n+    public abstract boolean isReadOnly(ELContext context) throws NullPointerException, PropertyNotFoundException, ELException;\r\n+    \r\n+    public abstract void setValue(ELContext context, Object value) throws NullPointerException, PropertyNotFoundException, PropertyNotWritableException, ELException;\r\n+    \r\n+    public abstract Object getValue(ELContext context) throws NullPointerException, PropertyNotFoundException, ELException;\r\n+\r\n+}\r"
        },
        {
            "sha": "c47a185b875c8df49c4eabb40b60a97d508f34f3",
            "filename": "java/javax/el/VariableMapper.java",
            "status": "added",
            "additions": 27,
            "deletions": 0,
            "changes": 27,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FVariableMapper.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fel%2FVariableMapper.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fel%2FVariableMapper.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,27 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package javax.el;\r\n+\r\n+/**\r\n+ *\r\n+ */\r\n+public abstract class VariableMapper {\r\n+\r\n+    public abstract ValueExpression resolveVariable(String variable);\r\n+    \r\n+    public abstract ValueExpression setVariable(String variable, ValueExpression expression);\r\n+}\r"
        },
        {
            "sha": "9068ca0c9775b5b70cde052b4a4678978d6a3a22",
            "filename": "java/javax/servlet/Filter.java",
            "status": "added",
            "additions": 91,
            "deletions": 0,
            "changes": 91,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FFilter.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FFilter.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FFilter.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,91 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+\t/** \r\n+\t* A filter is an object that performs filtering tasks on either the request to a resource (a servlet or static content), or on the response from a resource, or both.\r\n+        * <br><br>\r\n+\t* Filters perform filtering in the <code>doFilter</code> method. Every Filter has access to \r\n+\t** a FilterConfig object from which it can obtain its initialization parameters, a\r\n+\t** reference to the ServletContext which it can use, for example, to load resources\r\n+\t** needed for filtering tasks.\r\n+\t** <p>\r\n+\t** Filters are configured in the deployment descriptor of a web application\r\n+\t** <p>\r\n+\t** Examples that have been identified for this design are<br>\r\n+\t** 1) Authentication Filters <br>\r\n+\t** 2) Logging and Auditing Filters <br>\r\n+\t** 3) Image conversion Filters <br>\r\n+    \t** 4) Data compression Filters <br>\r\n+\t** 5) Encryption Filters <br>\r\n+\t** 6) Tokenizing Filters <br>\r\n+\t** 7) Filters that trigger resource access events <br>\r\n+\t** 8) XSL/T filters <br>\r\n+\t** 9) Mime-type chain Filter <br>\r\n+\t * @since\tServlet 2.3\r\n+\t*/\r\n+\r\n+public interface Filter {\r\n+\r\n+\t/** \r\n+\t* Called by the web container to indicate to a filter that it is being placed into\r\n+\t* service. The servlet container calls the init method exactly once after instantiating the\r\n+\t* filter. The init method must complete successfully before the filter is asked to do any\r\n+\t* filtering work. <br><br>\r\n+\r\n+     \t* The web container cannot place the filter into service if the init method either<br>\r\n+        * 1.Throws a ServletException <br>\r\n+        * 2.Does not return within a time period defined by the web container \r\n+\t*/\r\n+\tpublic void init(FilterConfig filterConfig) throws ServletException;\r\n+\t\r\n+\t\r\n+\t/**\r\n+\t* The <code>doFilter</code> method of the Filter is called by the container\r\n+\t* each time a request/response pair is passed through the chain due\r\n+\t* to a client request for a resource at the end of the chain. The FilterChain passed in to this\r\n+\t* method allows the Filter to pass on the request and response to the next entity in the\r\n+\t* chain.<p>\r\n+\t* A typical implementation of this method would follow the following pattern:- <br>\r\n+\t* 1. Examine the request<br>\r\n+\t* 2. Optionally wrap the request object with a custom implementation to\r\n+\t* filter content or headers for input filtering <br>\r\n+\t* 3. Optionally wrap the response object with a custom implementation to\r\n+\t* filter content or headers for output filtering <br>\r\n+\t* 4. a) <strong>Either</strong> invoke the next entity in the chain using the FilterChain object (<code>chain.doFilter()</code>), <br>   \r\n+\t** 4. b) <strong>or</strong> not pass on the request/response pair to the next entity in the filter chain to block the request processing<br>\r\n+\t** 5. Directly set headers on the response after invocation of the next entity in the filter chain.\r\n+\t**/\r\n+    public void doFilter ( ServletRequest request, ServletResponse response, FilterChain chain ) throws IOException, ServletException;\r\n+\r\n+\t/**\r\n+\t* Called by the web container to indicate to a filter that it is being taken out of service. This \r\n+\t* method is only called once all threads within the filter's doFilter method have exited or after\r\n+\t* a timeout period has passed. After the web container calls this method, it will not call the\r\n+\t* doFilter method again on this instance of the filter. <br><br>\r\n+\t* \r\n+     \t* This method gives the filter an opportunity to clean up any resources that are being held (for\r\n+\t* example, memory, file handles, threads) and make sure that any persistent state is synchronized\r\n+\t* with the filter's current state in memory.\r\n+\t*/\r\n+\r\n+\tpublic void destroy();\r\n+\r\n+\r\n+}\r\n+\r"
        },
        {
            "sha": "1c60c9f5a1cfbf54520c2e0ea09c46b6475a52b2",
            "filename": "java/javax/servlet/FilterChain.java",
            "status": "added",
            "additions": 45,
            "deletions": 0,
            "changes": 45,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FFilterChain.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FFilterChain.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FFilterChain.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,45 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+    /**\r\n+    * A FilterChain is an object provided by the servlet container to the developer\r\n+    * giving a view into the invocation chain of a filtered request for a resource. Filters\r\n+    * use the FilterChain to invoke the next filter in the chain, or if the calling filter\r\n+    * is the last filter in the chain, to invoke the resource at the end of the chain.\r\n+    *\r\n+    * @see Filter\r\n+    * @since Servlet 2.3\r\n+    **/\r\n+\r\n+public interface FilterChain {\r\n+\t\r\n+\t/**\r\n+\t* Causes the next filter in the chain to be invoked, or if the calling filter is the last filter\r\n+\t* in the chain, causes the resource at the end of the chain to be invoked.\r\n+\t*\r\n+\t* @param request the request to pass along the chain.\r\n+\t* @param response the response to pass along the chain.\r\n+\t*\r\n+\t* @since 2.3\r\n+\t*/\r\n+\t\r\n+    public void doFilter ( ServletRequest request, ServletResponse response ) throws IOException, ServletException;\r\n+\r\n+}\r\n+\r"
        },
        {
            "sha": "58eeb24710cf7a63ad6bdca0dde4384c9aeb7d15",
            "filename": "java/javax/servlet/FilterConfig.java",
            "status": "added",
            "additions": 91,
            "deletions": 0,
            "changes": 91,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FFilterConfig.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FFilterConfig.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FFilterConfig.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,91 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+\r\n+package javax.servlet;\r\n+\r\n+\r\n+import java.util.Enumeration;\r\n+\r\n+\t /** \r\n+\t *\r\n+\t * A filter configuration object used by a servlet container\r\n+\t * to pass information to a filter during initialization.\r\n+\t * @see Filter \r\n+\t  * @since\tServlet 2.3\r\n+\t *\r\n+\t */\r\n+\r\n+\r\n+public interface FilterConfig {\r\n+\r\n+\t/** \r\n+\t* Returns the filter-name of this filter as defined in the deployment descriptor. \r\n+\t*/\r\n+\t\r\n+\tpublic String getFilterName();\r\n+\r\n+\r\n+ /**\r\n+     * Returns a reference to the {@link ServletContext} in which the caller\r\n+     * is executing.\r\n+     *\r\n+     *\r\n+     * @return\t\ta {@link ServletContext} object, used\r\n+     *\t\t\tby the caller to interact with its servlet \r\n+     *                  container\r\n+     * \r\n+     * @see\t\tServletContext\r\n+     *\r\n+     */\r\n+\r\n+    public ServletContext getServletContext();\r\n+    \r\n+    /**\r\n+     * Returns a <code>String</code> containing the value of the \r\n+     * named initialization parameter, or <code>null</code> if \r\n+     * the parameter does not exist.\r\n+     *\r\n+     * @param name\ta <code>String</code> specifying the name\r\n+     *\t\t\tof the initialization parameter\r\n+     *\r\n+     * @return\t\ta <code>String</code> containing the value \r\n+     *\t\t\tof the initialization parameter\r\n+     *\r\n+     */\r\n+\r\n+    public String getInitParameter(String name);\r\n+\r\n+\r\n+    /**\r\n+     * Returns the names of the filter's initialization parameters\r\n+     * as an <code>Enumeration</code> of <code>String</code> objects, \r\n+     * or an empty <code>Enumeration</code> if the filter has\r\n+     * no initialization parameters.\r\n+     *\r\n+     * @return\t\tan <code>Enumeration</code> of <code>String</code> \r\n+     *\t\t\tobjects containing the names of the filter's \r\n+     *\t\t\tinitialization parameters\r\n+     *\r\n+     *\r\n+     *\r\n+     */\r\n+\r\n+    public Enumeration getInitParameterNames();\r\n+\r\n+\r\n+\r\n+\r\n+}\r"
        },
        {
            "sha": "57134d715f66c8dbc46ab4096219a08551373fb7",
            "filename": "java/javax/servlet/GenericServlet.java",
            "status": "added",
            "additions": 323,
            "deletions": 0,
            "changes": 323,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FGenericServlet.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FGenericServlet.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FGenericServlet.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,323 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet;\r\n+\r\n+import java.io.IOException;\r\n+import java.util.Enumeration;\r\n+\r\n+/**\r\n+ *\r\n+ * Defines a generic, protocol-independent\r\n+ * servlet. To write an HTTP servlet for use on the\r\n+ * Web, extend {@link javax.servlet.http.HttpServlet} instead.\r\n+ *\r\n+ * <p><code>GenericServlet</code> implements the <code>Servlet</code>\r\n+ * and <code>ServletConfig</code> interfaces. <code>GenericServlet</code>\r\n+ * may be directly extended by a servlet, although it's more common to extend\r\n+ * a protocol-specific subclass such as <code>HttpServlet</code>.\r\n+ *\r\n+ * <p><code>GenericServlet</code> makes writing servlets\r\n+ * easier. It provides simple versions of the lifecycle methods \r\n+ * <code>init</code> and <code>destroy</code> and of the methods \r\n+ * in the <code>ServletConfig</code> interface. <code>GenericServlet</code>\r\n+ * also implements the <code>log</code> method, declared in the\r\n+ * <code>ServletContext</code> interface. \r\n+ *\r\n+ * <p>To write a generic servlet, you need only\r\n+ * override the abstract <code>service</code> method. \r\n+ *\r\n+ *\r\n+ * @author \tVarious\r\n+ * @version \t$Version$\r\n+ *\r\n+ *\r\n+ *\r\n+ */\r\n+\r\n+ \r\n+public abstract class GenericServlet \r\n+    implements Servlet, ServletConfig, java.io.Serializable\r\n+{\r\n+\r\n+    private transient ServletConfig config;\r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Does nothing. All of the servlet initialization\r\n+     * is done by one of the <code>init</code> methods.\r\n+     *\r\n+     */\r\n+\r\n+    public GenericServlet() { }\r\n+    \r\n+    \r\n+    \r\n+   /**\r\n+     * Called by the servlet container to indicate to a servlet that the\r\n+     * servlet is being taken out of service.  See {@link Servlet#destroy}.\r\n+     *\r\n+     * \r\n+     */\r\n+\r\n+    public void destroy() {\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+    /**\r\n+     * Returns a <code>String</code> containing the value of the named\r\n+     * initialization parameter, or <code>null</code> if the parameter does\r\n+     * not exist.  See {@link ServletConfig#getInitParameter}.\r\n+     *\r\n+     * <p>This method is supplied for convenience. It gets the \r\n+     * value of the named parameter from the servlet's \r\n+     * <code>ServletConfig</code> object.\r\n+     *\r\n+     * @param name \t\ta <code>String</code> specifying the name \r\n+     *\t\t\t\tof the initialization parameter\r\n+     *\r\n+     * @return String \t\ta <code>String</code> containing the value\r\n+     *\t\t\t\tof the initialization parameter\r\n+     *\r\n+     */ \r\n+\r\n+    public String getInitParameter(String name) {\r\n+\treturn getServletConfig().getInitParameter(name);\r\n+    }\r\n+    \r\n+    \r\n+\r\n+   /**\r\n+    * Returns the names of the servlet's initialization parameters \r\n+    * as an <code>Enumeration</code> of <code>String</code> objects,\r\n+    * or an empty <code>Enumeration</code> if the servlet has no\r\n+    * initialization parameters.  See {@link\r\n+    * ServletConfig#getInitParameterNames}.\r\n+    *\r\n+    * <p>This method is supplied for convenience. It gets the \r\n+    * parameter names from the servlet's <code>ServletConfig</code> object. \r\n+    *\r\n+    *\r\n+    * @return Enumeration \tan enumeration of <code>String</code>\r\n+    *\t\t\t\tobjects containing the names of \r\n+    *\t\t\t\tthe servlet's initialization parameters\r\n+    *\r\n+    */\r\n+\r\n+    public Enumeration getInitParameterNames() {\r\n+\treturn getServletConfig().getInitParameterNames();\r\n+    }   \r\n+    \r\n+     \r\n+ \r\n+     \r\n+\r\n+    /**\r\n+     * Returns this servlet's {@link ServletConfig} object.\r\n+     *\r\n+     * @return ServletConfig \tthe <code>ServletConfig</code> object\r\n+     *\t\t\t\tthat initialized this servlet\r\n+     *\r\n+     */\r\n+    \r\n+    public ServletConfig getServletConfig() {\r\n+\treturn config;\r\n+    }\r\n+    \r\n+    \r\n+ \r\n+    \r\n+    /**\r\n+     * Returns a reference to the {@link ServletContext} in which this servlet\r\n+     * is running.  See {@link ServletConfig#getServletContext}.\r\n+     *\r\n+     * <p>This method is supplied for convenience. It gets the \r\n+     * context from the servlet's <code>ServletConfig</code> object.\r\n+     *\r\n+     *\r\n+     * @return ServletContext \tthe <code>ServletContext</code> object\r\n+     *\t\t\t\tpassed to this servlet by the <code>init</code>\r\n+     *\t\t\t\tmethod\r\n+     *\r\n+     */\r\n+\r\n+    public ServletContext getServletContext() {\r\n+\treturn getServletConfig().getServletContext();\r\n+    }\r\n+\r\n+\r\n+\r\n+ \r\n+\r\n+    /**\r\n+     * Returns information about the servlet, such as \r\n+     * author, version, and copyright. \r\n+     * By default, this method returns an empty string.  Override this method\r\n+     * to have it return a meaningful value.  See {@link\r\n+     * Servlet#getServletInfo}.\r\n+     *\r\n+     *\r\n+     * @return String \t\tinformation about this servlet, by default an\r\n+     * \t\t\t\tempty string\r\n+     *\r\n+     */\r\n+    \r\n+    public String getServletInfo() {\r\n+\treturn \"\";\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * Called by the servlet container to indicate to a servlet that the\r\n+     * servlet is being placed into service.  See {@link Servlet#init}.\r\n+     *\r\n+     * <p>This implementation stores the {@link ServletConfig}\r\n+     * object it receives from the servlet container for later use.\r\n+     * When overriding this form of the method, call \r\n+     * <code>super.init(config)</code>.\r\n+     *\r\n+     * @param config \t\t\tthe <code>ServletConfig</code> object\r\n+     *\t\t\t\t\tthat contains configutation\r\n+     *\t\t\t\t\tinformation for this servlet\r\n+     *\r\n+     * @exception ServletException \tif an exception occurs that\r\n+     *\t\t\t\t\tinterrupts the servlet's normal\r\n+     *\t\t\t\t\toperation\r\n+     *\r\n+     * \r\n+     * @see \t\t\t\tUnavailableException\r\n+     *\r\n+     */\r\n+\r\n+    public void init(ServletConfig config) throws ServletException {\r\n+\tthis.config = config;\r\n+\tthis.init();\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * A convenience method which can be overridden so that there's no need\r\n+     * to call <code>super.init(config)</code>.\r\n+     *\r\n+     * <p>Instead of overriding {@link #init(ServletConfig)}, simply override\r\n+     * this method and it will be called by\r\n+     * <code>GenericServlet.init(ServletConfig config)</code>.\r\n+     * The <code>ServletConfig</code> object can still be retrieved via {@link\r\n+     * #getServletConfig}. \r\n+     *\r\n+     * @exception ServletException \tif an exception occurs that\r\n+     *\t\t\t\t\tinterrupts the servlet's\r\n+     *\t\t\t\t\tnormal operation\r\n+     *\r\n+     */\r\n+    \r\n+    public void init() throws ServletException {\r\n+\r\n+    }\r\n+    \r\n+\r\n+\r\n+\r\n+    /**\r\n+     * \r\n+     * Writes the specified message to a servlet log file, prepended by the\r\n+     * servlet's name.  See {@link ServletContext#log(String)}.\r\n+     *\r\n+     * @param msg \ta <code>String</code> specifying\r\n+     *\t\t\tthe message to be written to the log file\r\n+     *\r\n+     */\r\n+     \r\n+    public void log(String msg) {\r\n+\tgetServletContext().log(getServletName() + \": \"+ msg);\r\n+    }\r\n+   \r\n+   \r\n+   \r\n+   \r\n+    /**\r\n+     * Writes an explanatory message and a stack trace\r\n+     * for a given <code>Throwable</code> exception\r\n+     * to the servlet log file, prepended by the servlet's name.\r\n+     * See {@link ServletContext#log(String, Throwable)}.\r\n+     *\r\n+     *\r\n+     * @param message \t\ta <code>String</code> that describes\r\n+     *\t\t\t\tthe error or exception\r\n+     *\r\n+     * @param t\t\t\tthe <code>java.lang.Throwable</code> error\r\n+     * \t\t\t\tor exception\r\n+     *\r\n+     *\r\n+     */\r\n+   \r\n+    public void log(String message, Throwable t) {\r\n+\tgetServletContext().log(getServletName() + \": \" + message, t);\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+    /**\r\n+     * Called by the servlet container to allow the servlet to respond to\r\n+     * a request.  See {@link Servlet#service}.\r\n+     * \r\n+     * <p>This method is declared abstract so subclasses, such as \r\n+     * <code>HttpServlet</code>, must override it.\r\n+     *\r\n+     *\r\n+     *\r\n+     * @param req \tthe <code>ServletRequest</code> object\r\n+     *\t\t\tthat contains the client's request\r\n+     *\r\n+     * @param res \tthe <code>ServletResponse</code> object\r\n+     *\t\t\tthat will contain the servlet's response\r\n+     *\r\n+     * @exception ServletException \tif an exception occurs that\r\n+     *\t\t\t\t\tinterferes with the servlet's\r\n+     *\t\t\t\t\tnormal operation occurred\r\n+     *\r\n+     * @exception IOException \t\tif an input or output\r\n+     *\t\t\t\t\texception occurs\r\n+     *\r\n+     */\r\n+\r\n+    public abstract void service(ServletRequest req, ServletResponse res)\r\n+\tthrows ServletException, IOException;\r\n+    \r\n+\r\n+\r\n+    /**\r\n+     * Returns the name of this servlet instance.\r\n+     * See {@link ServletConfig#getServletName}.\r\n+     *\r\n+     * @return          the name of this servlet instance\r\n+     *\r\n+     *\r\n+     *\r\n+     */\r\n+\r\n+    public String getServletName() {\r\n+        return config.getServletName();\r\n+    }\r\n+}\r"
        },
        {
            "sha": "bd4a59a6ab60146162068abd74ac54ff4978ac62",
            "filename": "java/javax/servlet/LocalStrings.properties",
            "status": "added",
            "additions": 20,
            "deletions": 0,
            "changes": 20,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FLocalStrings.properties",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FLocalStrings.properties",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FLocalStrings.properties?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,20 @@\n+# Copyright 2004 The Apache Software Foundation\r\n+#\r\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+# you may not use this file except in compliance with the License.\r\n+# You may obtain a copy of the License at\r\n+#\r\n+#     http://www.apache.org/licenses/LICENSE-2.0\r\n+#\r\n+# Unless required by applicable law or agreed to in writing, software\r\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+# See the License for the specific language governing permissions and\r\n+# limitations under the License.\r\n+\r\n+# Default localized string information\r\n+# Localized for Locale en_US\r\n+\r\n+err.not_iso8859_1=Not an ISO 8859-1 character: {0}\r\n+value.true=true\r\n+value.false=false\r"
        },
        {
            "sha": "0e4477ba34b2a60181de5732fa382f8e881852cf",
            "filename": "java/javax/servlet/LocalStrings_fr.properties",
            "status": "added",
            "additions": 22,
            "deletions": 0,
            "changes": 22,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FLocalStrings_fr.properties",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FLocalStrings_fr.properties",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FLocalStrings_fr.properties?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,22 @@\n+# Copyright 2004 The Apache Software Foundation\r\n+#\r\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+# you may not use this file except in compliance with the License.\r\n+# You may obtain a copy of the License at\r\n+#\r\n+#     http://www.apache.org/licenses/LICENSE-2.0\r\n+#\r\n+# Unless required by applicable law or agreed to in writing, software\r\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+# See the License for the specific language governing permissions and\r\n+# limitations under the License.\r\n+\r\n+# Default localized string information\r\n+# Localized for Locale fr_FR\r\n+\r\n+err.not_iso8859_1={0} n''est pas un caract\ufffdre ISO 8859-1\r\n+value.true=true\r\n+value.false=false \r\n+\r\n+\r"
        },
        {
            "sha": "f63ab7a31821dc3c640ca7c265d1b08d5fe39715",
            "filename": "java/javax/servlet/LocalStrings_ja.properties",
            "status": "added",
            "additions": 20,
            "deletions": 0,
            "changes": 20,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FLocalStrings_ja.properties",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FLocalStrings_ja.properties",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FLocalStrings_ja.properties?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,20 @@\n+# Copyright 2004 The Apache Software Foundation\r\n+#\r\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+# you may not use this file except in compliance with the License.\r\n+# You may obtain a copy of the License at\r\n+#\r\n+#     http://www.apache.org/licenses/LICENSE-2.0\r\n+#\r\n+# Unless required by applicable law or agreed to in writing, software\r\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+# See the License for the specific language governing permissions and\r\n+# limitations under the License.\r\n+\r\n+# Default localized string information\r\n+# Localized for Locale ja_JP\r\n+\r\n+err.not_iso8859_1=ISO 8859-1 \\u306e\\u6587\\u5b57\\u3067\\u306f\\u3042\\u308a\\u307e\\u305b\\u3093: {0}\r\n+value.true=true\r\n+value.false=false\r"
        },
        {
            "sha": "17880c753e9453f796cb99155bc627708ccddd33",
            "filename": "java/javax/servlet/RequestDispatcher.java",
            "status": "added",
            "additions": 138,
            "deletions": 0,
            "changes": 138,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FRequestDispatcher.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FRequestDispatcher.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FRequestDispatcher.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,138 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+\r\n+package javax.servlet;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+\r\n+/**\r\n+ * Defines an object that receives requests from the client\r\n+ * and sends them to any resource (such as a servlet, \r\n+ * HTML file, or JSP file) on the server. The servlet\r\n+ * container creates the <code>RequestDispatcher</code> object,\r\n+ * which is used as a wrapper around a server resource located\r\n+ * at a particular path or given by a particular name.\r\n+ *\r\n+ * <p>This interface is intended to wrap servlets,\r\n+ * but a servlet container can create <code>RequestDispatcher</code>\r\n+ * objects to wrap any type of resource.\r\n+ *\r\n+ * @author \tVarious\r\n+ * @version \t$Version$\r\n+ *\r\n+ * @see \tServletContext#getRequestDispatcher(java.lang.String)\r\n+ * @see \tServletContext#getNamedDispatcher(java.lang.String)\r\n+ * @see \tServletRequest#getRequestDispatcher(java.lang.String)\r\n+ *\r\n+ */\r\n+ \r\n+public interface RequestDispatcher {\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+/**\r\n+ * Forwards a request from\r\n+ * a servlet to another resource (servlet, JSP file, or\r\n+ * HTML file) on the server. This method allows\r\n+ * one servlet to do preliminary processing of\r\n+ * a request and another resource to generate\r\n+ * the response.\r\n+ *\r\n+ * <p>For a <code>RequestDispatcher</code> obtained via \r\n+ * <code>getRequestDispatcher()</code>, the <code>ServletRequest</code> \r\n+ * object has its path elements and parameters adjusted to match\r\n+ * the path of the target resource.\r\n+ *\r\n+ * <p><code>forward</code> should be called before the response has been \r\n+ * committed to the client (before response body output has been flushed).  \r\n+ * If the response already has been committed, this method throws\r\n+ * an <code>IllegalStateException</code>.\r\n+ * Uncommitted output in the response buffer is automatically cleared \r\n+ * before the forward.\r\n+ *\r\n+ * <p>The request and response parameters must be either the same\r\n+ * objects as were passed to the calling servlet's service method or be\r\n+ * subclasses of the {@link ServletRequestWrapper} or {@link ServletResponseWrapper} classes\r\n+ * that wrap them.\r\n+ *\r\n+ *\r\n+ * @param request\t\ta {@link ServletRequest} object\r\n+ *\t\t\t\tthat represents the request the client\r\n+ * \t\t\t\tmakes of the servlet\r\n+ *\r\n+ * @param response\t\ta {@link ServletResponse} object\r\n+ *\t\t\t\tthat represents the response the servlet\r\n+ *\t\t\t\treturns to the client\r\n+ *\r\n+ * @exception ServletException\tif the target resource throws this exception\r\n+ *\r\n+ * @exception IOException\tif the target resource throws this exception\r\n+ *\r\n+ * @exception IllegalStateException\tif the response was already committed\r\n+ *\r\n+ */\r\n+\r\n+    public void forward(ServletRequest request, ServletResponse response)\r\n+\tthrows ServletException, IOException;\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * Includes the content of a resource (servlet, JSP page,\r\n+     * HTML file) in the response. In essence, this method enables \r\n+     * programmatic server-side includes.\r\n+     *\r\n+     * <p>The {@link ServletResponse} object has its path elements\r\n+     * and parameters remain unchanged from the caller's. The included\r\n+     * servlet cannot change the response status code or set headers;\r\n+     * any attempt to make a change is ignored.\r\n+     *\r\n+     * <p>The request and response parameters must be either the same\r\n+     * objects as were passed to the calling servlet's service method or be\r\n+     * subclasses of the {@link ServletRequestWrapper} or {@link ServletResponseWrapper} classes\r\n+     * that wrap them.\r\n+     * \r\n+     *\r\n+     *\r\n+     * @param request \t\t\ta {@link ServletRequest} object \r\n+     *\t\t\t\t\tthat contains the client's request\r\n+     *\r\n+     * @param response \t\t\ta {@link ServletResponse} object \r\n+     * \t\t\t\t\tthat contains the servlet's response\r\n+     *\r\n+     * @exception ServletException \tif the included resource throws this exception\r\n+     *\r\n+     * @exception IOException \t\tif the included resource throws this exception\r\n+     *\r\n+     *\r\n+     */\r\n+     \r\n+    public void include(ServletRequest request, ServletResponse response)\r\n+\tthrows ServletException, IOException;\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r"
        },
        {
            "sha": "0153838d61aa3c06eefc3315e62a8d1565275212",
            "filename": "java/javax/servlet/Servlet.java",
            "status": "added",
            "additions": 192,
            "deletions": 0,
            "changes": 192,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServlet.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServlet.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FServlet.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,192 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+ \r\n+package javax.servlet;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+\r\n+/**\r\n+ * Defines methods that all servlets must implement.\r\n+ *\r\n+ * <p>A servlet is a small Java program that runs within a Web server.\r\n+ * Servlets receive and respond to requests from Web clients,\r\n+ * usually across HTTP, the HyperText Transfer Protocol. \r\n+ *\r\n+ * <p>To implement this interface, you can write a generic servlet\r\n+ * that extends\r\n+ * <code>javax.servlet.GenericServlet</code> or an HTTP servlet that\r\n+ * extends <code>javax.servlet.http.HttpServlet</code>.\r\n+ *\r\n+ * <p>This interface defines methods to initialize a servlet,\r\n+ * to service requests, and to remove a servlet from the server.\r\n+ * These are known as life-cycle methods and are called in the\r\n+ * following sequence:\r\n+ * <ol>\r\n+ * <li>The servlet is constructed, then initialized with the <code>init</code> method.\r\n+ * <li>Any calls from clients to the <code>service</code> method are handled.\r\n+ * <li>The servlet is taken out of service, then destroyed with the \r\n+ * <code>destroy</code> method, then garbage collected and finalized.\r\n+ * </ol>\r\n+ *\r\n+ * <p>In addition to the life-cycle methods, this interface\r\n+ * provides the <code>getServletConfig</code> method, which the servlet \r\n+ * can use to get any startup information, and the <code>getServletInfo</code>\r\n+ * method, which allows the servlet to return basic information about itself,\r\n+ * such as author, version, and copyright.\r\n+ *\r\n+ * @author \tVarious\r\n+ * @version \t$Version$\r\n+ *\r\n+ * @see \tGenericServlet\r\n+ * @see \tjavax.servlet.http.HttpServlet\r\n+ *\r\n+ */\r\n+\r\n+\r\n+public interface Servlet {\r\n+\r\n+    /**\r\n+     * Called by the servlet container to indicate to a servlet that the \r\n+     * servlet is being placed into service.\r\n+     *\r\n+     * <p>The servlet container calls the <code>init</code>\r\n+     * method exactly once after instantiating the servlet.\r\n+     * The <code>init</code> method must complete successfully\r\n+     * before the servlet can receive any requests.\r\n+     *\r\n+     * <p>The servlet container cannot place the servlet into service\r\n+     * if the <code>init</code> method\r\n+     * <ol>\r\n+     * <li>Throws a <code>ServletException</code>\r\n+     * <li>Does not return within a time period defined by the Web server\r\n+     * </ol>\r\n+     *\r\n+     *\r\n+     * @param config\t\t\ta <code>ServletConfig</code> object \r\n+     *\t\t\t\t\tcontaining the servlet's\r\n+     * \t\t\t\t\tconfiguration and initialization parameters\r\n+     *\r\n+     * @exception ServletException \tif an exception has occurred that\r\n+     *\t\t\t\t\tinterferes with the servlet's normal\r\n+     *\t\t\t\t\toperation\r\n+     *\r\n+     * @see \t\t\t\tUnavailableException\r\n+     * @see \t\t\t\t#getServletConfig\r\n+     *\r\n+     */\r\n+\r\n+    public void init(ServletConfig config) throws ServletException;\r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Returns a {@link ServletConfig} object, which contains\r\n+     * initialization and startup parameters for this servlet.\r\n+     * The <code>ServletConfig</code> object returned is the one \r\n+     * passed to the <code>init</code> method. \r\n+     *\r\n+     * <p>Implementations of this interface are responsible for storing the \r\n+     * <code>ServletConfig</code> object so that this \r\n+     * method can return it. The {@link GenericServlet}\r\n+     * class, which implements this interface, already does this.\r\n+     *\r\n+     * @return\t\tthe <code>ServletConfig</code> object\r\n+     *\t\t\tthat initializes this servlet\r\n+     *\r\n+     * @see \t\t#init\r\n+     *\r\n+     */\r\n+\r\n+    public ServletConfig getServletConfig();\r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Called by the servlet container to allow the servlet to respond to \r\n+     * a request.\r\n+     *\r\n+     * <p>This method is only called after the servlet's <code>init()</code>\r\n+     * method has completed successfully.\r\n+     * \r\n+     * <p>  The status code of the response always should be set for a servlet \r\n+     * that throws or sends an error.\r\n+     *\r\n+     * \r\n+     * <p>Servlets typically run inside multithreaded servlet containers\r\n+     * that can handle multiple requests concurrently. Developers must \r\n+     * be aware to synchronize access to any shared resources such as files,\r\n+     * network connections, and as well as the servlet's class and instance \r\n+     * variables. \r\n+     * More information on multithreaded programming in Java is available in \r\n+     * <a href=\"http://java.sun.com/Series/Tutorial/java/threads/multithreaded.html\">\r\n+     * the Java tutorial on multi-threaded programming</a>.\r\n+     *\r\n+     *\r\n+     * @param req \tthe <code>ServletRequest</code> object that contains\r\n+     *\t\t\tthe client's request\r\n+     *\r\n+     * @param res \tthe <code>ServletResponse</code> object that contains\r\n+     *\t\t\tthe servlet's response\r\n+     *\r\n+     * @exception ServletException \tif an exception occurs that interferes\r\n+     *\t\t\t\t\twith the servlet's normal operation \r\n+     *\r\n+     * @exception IOException \t\tif an input or output exception occurs\r\n+     *\r\n+     */\r\n+\r\n+    public void service(ServletRequest req, ServletResponse res)\r\n+\tthrows ServletException, IOException;\r\n+\t\r\n+\t\r\n+\r\n+    /**\r\n+     * Returns information about the servlet, such\r\n+     * as author, version, and copyright.\r\n+     * \r\n+     * <p>The string that this method returns should\r\n+     * be plain text and not markup of any kind (such as HTML, XML,\r\n+     * etc.).\r\n+     *\r\n+     * @return \t\ta <code>String</code> containing servlet information\r\n+     *\r\n+     */\r\n+\r\n+    public String getServletInfo();\r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Called by the servlet container to indicate to a servlet that the\r\n+     * servlet is being taken out of service.  This method is\r\n+     * only called once all threads within the servlet's\r\n+     * <code>service</code> method have exited or after a timeout\r\n+     * period has passed. After the servlet container calls this \r\n+     * method, it will not call the <code>service</code> method again\r\n+     * on this servlet.\r\n+     *\r\n+     * <p>This method gives the servlet an opportunity \r\n+     * to clean up any resources that are being held (for example, memory,\r\n+     * file handles, threads) and make sure that any persistent state is\r\n+     * synchronized with the servlet's current state in memory.\r\n+     *\r\n+     */\r\n+\r\n+    public void destroy();\r\n+}\r"
        },
        {
            "sha": "094e418cda993fcf3f84a2cd769987f6be05e3d6",
            "filename": "java/javax/servlet/ServletConfig.java",
            "status": "added",
            "additions": 94,
            "deletions": 0,
            "changes": 94,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletConfig.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletConfig.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FServletConfig.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,94 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet;\r\n+\r\n+import java.util.Enumeration;\r\n+\r\n+\r\n+\r\n+/**\r\n+ * \r\n+ * A servlet configuration object used by a servlet container\r\n+ * to pass information to a servlet during initialization. \r\n+ *\r\n+ */\r\n+ \r\n+public interface ServletConfig {\r\n+    \r\n+\r\n+    /**\r\n+     * Returns the name of this servlet instance.\r\n+     * The name may be provided via server administration, assigned in the \r\n+     * web application deployment descriptor, or for an unregistered (and thus\r\n+     * unnamed) servlet instance it will be the servlet's class name.\r\n+     *\r\n+     * @return\t\tthe name of the servlet instance\r\n+     *\r\n+     *\r\n+     *\r\n+     */\r\n+\r\n+    public String getServletName();\r\n+\r\n+    /**\r\n+     * Returns a reference to the {@link ServletContext} in which the caller\r\n+     * is executing.\r\n+     *\r\n+     *\r\n+     * @return\t\ta {@link ServletContext} object, used\r\n+     *\t\t\tby the caller to interact with its servlet \r\n+     *                  container\r\n+     * \r\n+     * @see\t\tServletContext\r\n+     *\r\n+     */\r\n+\r\n+    public ServletContext getServletContext();\r\n+    \r\n+    /**\r\n+     * Returns a <code>String</code> containing the value of the \r\n+     * named initialization parameter, or <code>null</code> if \r\n+     * the parameter does not exist.\r\n+     *\r\n+     * @param name\ta <code>String</code> specifying the name\r\n+     *\t\t\tof the initialization parameter\r\n+     *\r\n+     * @return\t\ta <code>String</code> containing the value \r\n+     *\t\t\tof the initialization parameter\r\n+     *\r\n+     */\r\n+\r\n+    public String getInitParameter(String name);\r\n+\r\n+\r\n+    /**\r\n+     * Returns the names of the servlet's initialization parameters\r\n+     * as an <code>Enumeration</code> of <code>String</code> objects, \r\n+     * or an empty <code>Enumeration</code> if the servlet has\r\n+     * no initialization parameters.\r\n+     *\r\n+     * @return\t\tan <code>Enumeration</code> of <code>String</code> \r\n+     *\t\t\tobjects containing the names of the servlet's \r\n+     *\t\t\tinitialization parameters\r\n+     *\r\n+     *\r\n+     *\r\n+     */\r\n+\r\n+    public Enumeration getInitParameterNames();\r\n+\r\n+\r\n+}\r"
        },
        {
            "sha": "de16df5f1534b21abb018c4ce3b3300ed0719c25",
            "filename": "java/javax/servlet/ServletContext.java",
            "status": "added",
            "additions": 643,
            "deletions": 0,
            "changes": 643,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletContext.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletContext.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FServletContext.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,643 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet;\r\n+\r\n+import java.io.InputStream;\r\n+import java.net.MalformedURLException;\r\n+import java.net.URL;\r\n+import java.util.Enumeration;\r\n+import java.util.Set;\r\n+\r\n+\r\n+/**\r\n+ * \r\n+ * Defines a set of methods that a servlet uses to communicate with its\r\n+ * servlet container, for example, to get the MIME type of a file, dispatch\r\n+ * requests, or write to a log file.\r\n+ *\r\n+ * <p>There is one context per \"web application\" per Java Virtual Machine.  (A\r\n+ * \"web application\" is a collection of servlets and content installed under a\r\n+ * specific subset of the server's URL namespace such as <code>/catalog</code>\r\n+ * and possibly installed via a <code>.war</code> file.) \r\n+ *\r\n+ * <p>In the case of a web\r\n+ * application marked \"distributed\" in its deployment descriptor, there will\r\n+ * be one context instance for each virtual machine.  In this situation, the \r\n+ * context cannot be used as a location to share global information (because\r\n+ * the information won't be truly global).  Use an external resource like \r\n+ * a database instead.\r\n+ *\r\n+ * <p>The <code>ServletContext</code> object is contained within \r\n+ * the {@link ServletConfig} object, which the Web server provides the\r\n+ * servlet when the servlet is initialized.\r\n+ *\r\n+ * @author \tVarious\r\n+ * @version \t$Version$\r\n+ *\r\n+ * @see \tServlet#getServletConfig\r\n+ * @see \tServletConfig#getServletContext\r\n+ *\r\n+ */\r\n+\r\n+public interface ServletContext {\r\n+\r\n+\r\n+    /**\r\n+     * Returns a <code>ServletContext</code> object that \r\n+     * corresponds to a specified URL on the server.\r\n+     *\r\n+     * <p>This method allows servlets to gain\r\n+     * access to the context for various parts of the server, and as\r\n+     * needed obtain {@link RequestDispatcher} objects from the context.\r\n+     * The given path must be begin with \"/\", is interpreted relative \r\n+     * to the server's document root and is matched against the context roots of\r\n+     * other web applications hosted on this container.\r\n+     * \r\n+     * <p>In a security conscious environment, the servlet container may\r\n+     * return <code>null</code> for a given URL.\r\n+     *       \r\n+     * @param uripath \ta <code>String</code> specifying the context path of\r\n+     *\t\t\tanother web application in the container.\r\n+     * @return\t\tthe <code>ServletContext</code> object that\r\n+     *\t\t\tcorresponds to the named URL, or null if either\r\n+\t\t\tnone exists or the container wishes to restrict \r\n+     * \t\t\tthis access.\r\n+     *\r\n+     * @see \t\tRequestDispatcher\r\n+     *\r\n+     */\r\n+\r\n+    public ServletContext getContext(String uripath);\r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Returns the major version of the Java Servlet API that this\r\n+     * servlet container supports. All implementations that comply\r\n+     * with Version 2.4 must have this method\r\n+     * return the integer 2.\r\n+     *\r\n+     * @return \t\t2\r\n+     *\r\n+     */\r\n+    \r\n+    public int getMajorVersion();\r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Returns the minor version of the Servlet API that this\r\n+     * servlet container supports. All implementations that comply\r\n+     * with Version 2.4 must have this method\r\n+     * return the integer 4.\r\n+     *\r\n+     * @return \t\t4\r\n+     *\r\n+     */\r\n+\r\n+    public int getMinorVersion();\r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Returns the MIME type of the specified file, or <code>null</code> if \r\n+     * the MIME type is not known. The MIME type is determined\r\n+     * by the configuration of the servlet container, and may be specified\r\n+     * in a web application deployment descriptor. Common MIME\r\n+     * types are <code>\"text/html\"</code> and <code>\"image/gif\"</code>.\r\n+     *\r\n+     *\r\n+     * @param   file    a <code>String</code> specifying the name\r\n+     *\t\t\tof a file\r\n+     *\r\n+     * @return \t\ta <code>String</code> specifying the file's MIME type\r\n+     *\r\n+     */\r\n+\r\n+    public String getMimeType(String file);\r\n+    \r\n+    /**\r\n+    * Returns a directory-like listing of all the paths to resources within the web application whose longest sub-path\r\n+    * matches the supplied path argument. Paths indicating subdirectory paths end with a '/'. The returned paths are all \r\n+    * relative to the root of the web application and have a leading '/'. For example, for a web application \r\n+    * containing<br><br>\r\n+\r\n+    * /welcome.html<br>\r\n+    * /catalog/index.html<br>\r\n+    * /catalog/products.html<br>\r\n+    * /catalog/offers/books.html<br>\r\n+    * /catalog/offers/music.html<br>\r\n+    * /customer/login.jsp<br>\r\n+    * /WEB-INF/web.xml<br>\r\n+    * /WEB-INF/classes/com.acme.OrderServlet.class,<br><br>\r\n+    *\r\n+    * getResourcePaths(\"/\") returns {\"/welcome.html\", \"/catalog/\", \"/customer/\", \"/WEB-INF/\"}<br>\r\n+    * getResourcePaths(\"/catalog/\") returns {\"/catalog/index.html\", \"/catalog/products.html\", \"/catalog/offers/\"}.<br>\r\n+\t   \r\n+\r\n+\r\n+    *@param path\t\tthe partial path used to match the resources,\r\n+    *\t\t\t\twhich must start with a /\r\n+    *@return a Set containing the directory listing, or null if there are no resources in the web application whose path\r\n+\t* begins with the supplied path.\r\n+\r\n+    * @since Servlet 2.3\r\n+    */\r\n+    \r\n+    public Set getResourcePaths(String path);\r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Returns a URL to the resource that is mapped to a specified\r\n+     * path. The path must begin with a \"/\" and is interpreted\r\n+     * as relative to the current context root.\r\n+     *\r\n+     * <p>This method allows the servlet container to make a resource \r\n+     * available to servlets from any source. Resources \r\n+     * can be located on a local or remote\r\n+     * file system, in a database, or in a <code>.war</code> file. \r\n+     *\r\n+     * <p>The servlet container must implement the URL handlers\r\n+     * and <code>URLConnection</code> objects that are necessary\r\n+     * to access the resource.\r\n+     *\r\n+     * <p>This method returns <code>null</code>\r\n+     * if no resource is mapped to the pathname.\r\n+     *\r\n+     * <p>Some containers may allow writing to the URL returned by\r\n+     * this method using the methods of the URL class.\r\n+     *\r\n+     * <p>The resource content is returned directly, so be aware that \r\n+     * requesting a <code>.jsp</code> page returns the JSP source code.\r\n+     * Use a <code>RequestDispatcher</code> instead to include results of \r\n+     * an execution.\r\n+     *\r\n+     * <p>This method has a different purpose than\r\n+     * <code>java.lang.Class.getResource</code>,\r\n+     * which looks up resources based on a class loader. This\r\n+     * method does not use class loaders.\r\n+     * \r\n+     * @param path \t\t\t\ta <code>String</code> specifying\r\n+     *\t\t\t\t\t\tthe path to the resource\r\n+     *\r\n+     * @return \t\t\t\t\tthe resource located at the named path,\r\n+     * \t\t\t\t\t\tor <code>null</code> if there is no resource\r\n+     *\t\t\t\t\t\tat that path\r\n+     *\r\n+     * @exception MalformedURLException \tif the pathname is not given in \r\n+     * \t\t\t\t\t\tthe correct form\r\n+     *\r\n+     */\r\n+    \r\n+    public URL getResource(String path) throws MalformedURLException;\r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Returns the resource located at the named path as\r\n+     * an <code>InputStream</code> object.\r\n+     *\r\n+     * <p>The data in the <code>InputStream</code> can be \r\n+     * of any type or length. The path must be specified according\r\n+     * to the rules given in <code>getResource</code>.\r\n+     * This method returns <code>null</code> if no resource exists at\r\n+     * the specified path. \r\n+     * \r\n+     * <p>Meta-information such as content length and content type\r\n+     * that is available via <code>getResource</code>\r\n+     * method is lost when using this method.\r\n+     *\r\n+     * <p>The servlet container must implement the URL handlers\r\n+     * and <code>URLConnection</code> objects necessary to access\r\n+     * the resource.\r\n+     *\r\n+     * <p>This method is different from \r\n+     * <code>java.lang.Class.getResourceAsStream</code>,\r\n+     * which uses a class loader. This method allows servlet containers \r\n+     * to make a resource available\r\n+     * to a servlet from any location, without using a class loader.\r\n+     * \r\n+     *\r\n+     * @param path \ta <code>String</code> specifying the path\r\n+     *\t\t\tto the resource\r\n+     *\r\n+     * @return \t\tthe <code>InputStream</code> returned to the \r\n+     *\t\t\tservlet, or <code>null</code> if no resource\r\n+     *\t\t\texists at the specified path \r\n+     *\r\n+     *\r\n+     */\r\n+\r\n+    public InputStream getResourceAsStream(String path);\r\n+    \r\n+\r\n+\r\n+\r\n+    /**\r\n+     * \r\n+     * Returns a {@link RequestDispatcher} object that acts\r\n+     * as a wrapper for the resource located at the given path.\r\n+     * A <code>RequestDispatcher</code> object can be used to forward \r\n+     * a request to the resource or to include the resource in a response.\r\n+     * The resource can be dynamic or static.\r\n+     *\r\n+     * <p>The pathname must begin with a \"/\" and is interpreted as relative\r\n+     * to the current context root.  Use <code>getContext</code> to obtain\r\n+     * a <code>RequestDispatcher</code> for resources in foreign contexts.\r\n+     * This method returns <code>null</code> if the <code>ServletContext</code>\r\n+     * cannot return a <code>RequestDispatcher</code>.\r\n+     *\r\n+     * @param path \ta <code>String</code> specifying the pathname\r\n+     *\t\t\tto the resource\r\n+     *\r\n+     * @return \t\ta <code>RequestDispatcher</code> object\r\n+     *\t\t\tthat acts as a wrapper for the resource\r\n+     *\t\t\tat the specified path, or <code>null</code> if \r\n+     *\t\t\tthe <code>ServletContext</code> cannot return\r\n+     *\t\t\ta <code>RequestDispatcher</code>\r\n+     *\r\n+     * @see \t\tRequestDispatcher\r\n+     * @see \t\tServletContext#getContext\r\n+     *\r\n+     */\r\n+\r\n+    public RequestDispatcher getRequestDispatcher(String path);\r\n+\r\n+\r\n+\r\n+    /**\r\n+     * Returns a {@link RequestDispatcher} object that acts\r\n+     * as a wrapper for the named servlet.\r\n+     *\r\n+     * <p>Servlets (and JSP pages also) may be given names via server \r\n+     * administration or via a web application deployment descriptor.\r\n+     * A servlet instance can determine its name using \r\n+     * {@link ServletConfig#getServletName}.\r\n+     *\r\n+     * <p>This method returns <code>null</code> if the \r\n+     * <code>ServletContext</code>\r\n+     * cannot return a <code>RequestDispatcher</code> for any reason.\r\n+     *\r\n+     * @param name \ta <code>String</code> specifying the name\r\n+     *\t\t\tof a servlet to wrap\r\n+     *\r\n+     * @return \t\ta <code>RequestDispatcher</code> object\r\n+     *\t\t\tthat acts as a wrapper for the named servlet,\r\n+     *\t\t\tor <code>null</code> if the <code>ServletContext</code>\r\n+     *\t\t\tcannot return a <code>RequestDispatcher</code>\r\n+     *\r\n+     * @see \t\tRequestDispatcher\r\n+     * @see \t\tServletContext#getContext\r\n+     * @see \t\tServletConfig#getServletName\r\n+     *\r\n+     */\r\n+\r\n+    public RequestDispatcher getNamedDispatcher(String name);\r\n+    \r\n+    \r\n+    \r\n+    \r\n+    /**\r\n+     *\r\n+     * @deprecated\tAs of Java Servlet API 2.1, with no direct replacement.\r\n+     *\r\n+     * <p>This method was originally defined to retrieve a servlet\r\n+     * from a <code>ServletContext</code>. In this version, this method \r\n+     * always returns <code>null</code> and remains only to preserve \r\n+     * binary compatibility. This method will be permanently removed \r\n+     * in a future version of the Java Servlet API.\r\n+     *\r\n+     * <p>In lieu of this method, servlets can share information using the \r\n+     * <code>ServletContext</code> class and can perform shared business logic\r\n+     * by invoking methods on common non-servlet classes.\r\n+     *\r\n+     */\r\n+\r\n+    public Servlet getServlet(String name) throws ServletException;\r\n+    \r\n+  \r\n+  \r\n+  \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * @deprecated\tAs of Java Servlet API 2.0, with no replacement.\r\n+     *\r\n+     * <p>This method was originally defined to return an <code>Enumeration</code>\r\n+     * of all the servlets known to this servlet context. In this\r\n+     * version, this method always returns an empty enumeration and\r\n+     * remains only to preserve binary compatibility. This method\r\n+     * will be permanently removed in a future version of the Java\r\n+     * Servlet API.\r\n+     *\r\n+     */\r\n+    \r\n+    public Enumeration getServlets();\r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * @deprecated\tAs of Java Servlet API 2.1, with no replacement.\r\n+     *\r\n+     * <p>This method was originally defined to return an \r\n+     * <code>Enumeration</code>\r\n+     * of all the servlet names known to this context. In this version,\r\n+     * this method always returns an empty <code>Enumeration</code> and \r\n+     * remains only to preserve binary compatibility. This method will \r\n+     * be permanently removed in a future version of the Java Servlet API.\r\n+     *\r\n+     */\r\n+ \r\n+    public Enumeration getServletNames();\r\n+    \r\n+  \r\n+  \r\n+    \r\n+    \r\n+    /**\r\n+     *\r\n+     * Writes the specified message to a servlet log file, usually\r\n+     * an event log. The name and type of the servlet log file is \r\n+     * specific to the servlet container.\r\n+     *\r\n+     *\r\n+     * @param msg \ta <code>String</code> specifying the \r\n+     *\t\t\tmessage to be written to the log file\r\n+     *\r\n+     */\r\n+     \r\n+    public void log(String msg);\r\n+    \r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * @deprecated\tAs of Java Servlet API 2.1, use\r\n+     * \t\t\t{@link #log(String message, Throwable throwable)} \r\n+     *\t\t\tinstead.\r\n+     *\r\n+     * <p>This method was originally defined to write an \r\n+     * exception's stack trace and an explanatory error message\r\n+     * to the servlet log file.\r\n+     *\r\n+     */\r\n+\r\n+    public void log(Exception exception, String msg);\r\n+    \r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Writes an explanatory message and a stack trace\r\n+     * for a given <code>Throwable</code> exception\r\n+     * to the servlet log file. The name and type of the servlet log \r\n+     * file is specific to the servlet container, usually an event log.\r\n+     *\r\n+     *\r\n+     * @param message \t\ta <code>String</code> that \r\n+     *\t\t\t\tdescribes the error or exception\r\n+     *\r\n+     * @param throwable \tthe <code>Throwable</code> error \r\n+     *\t\t\t\tor exception\r\n+     *\r\n+     */\r\n+    \r\n+    public void log(String message, Throwable throwable);\r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    /**\r\n+     * Returns a <code>String</code> containing the real path \r\n+     * for a given virtual path. For example, the path \"/index.html\"\r\n+     * returns the absolute file path on the server's filesystem would be\r\n+     * served by a request for \"http://host/contextPath/index.html\",\r\n+     * where contextPath is the context path of this ServletContext..\r\n+     *\r\n+     * <p>The real path returned will be in a form\r\n+     * appropriate to the computer and operating system on\r\n+     * which the servlet container is running, including the\r\n+     * proper path separators. This method returns <code>null</code>\r\n+     * if the servlet container cannot translate the virtual path\r\n+     * to a real path for any reason (such as when the content is\r\n+     * being made available from a <code>.war</code> archive).\r\n+     *\r\n+     *\r\n+     * @param path \ta <code>String</code> specifying a virtual path\r\n+     *\r\n+     *\r\n+     * @return \t\ta <code>String</code> specifying the real path,\r\n+     *                  or null if the translation cannot be performed\r\n+     *\t\t\t\r\n+     *\r\n+     */\r\n+\r\n+    public String getRealPath(String path);\r\n+    \r\n+    \r\n+\r\n+\r\n+    /**\r\n+     * Returns the name and version of the servlet container on which\r\n+     * the servlet is running. \r\n+     *\r\n+     * <p>The form of the returned string is \r\n+     * <i>servername</i>/<i>versionnumber</i>.\r\n+     * For example, the JavaServer Web Development Kit may return the string\r\n+     * <code>JavaServer Web Dev Kit/1.0</code>.\r\n+     *\r\n+     * <p>The servlet container may return other optional information \r\n+     * after the primary string in parentheses, for example,\r\n+     * <code>JavaServer Web Dev Kit/1.0 (JDK 1.1.6; Windows NT 4.0 x86)</code>.\r\n+     *\r\n+     *\r\n+     * @return \t\ta <code>String</code> containing at least the \r\n+     *\t\t\tservlet container name and version number\r\n+     *\r\n+     */\r\n+\r\n+    public String getServerInfo();\r\n+    \r\n+    \r\n+\r\n+\r\n+    /**\r\n+     * Returns a <code>String</code> containing the value of the named\r\n+     * context-wide initialization parameter, or <code>null</code> if the \r\n+     * parameter does not exist.\r\n+     *\r\n+     * <p>This method can make available configuration information useful\r\n+     * to an entire \"web application\".  For example, it can provide a \r\n+     * webmaster's email address or the name of a system that holds \r\n+     * critical data.\r\n+     *\r\n+     * @param\tname\ta <code>String</code> containing the name of the\r\n+     *                  parameter whose value is requested\r\n+     * \r\n+     * @return \t\ta <code>String</code> containing at least the \r\n+     *\t\t\tservlet container name and version number\r\n+     *\r\n+     * @see ServletConfig#getInitParameter\r\n+     */\r\n+\r\n+    public String getInitParameter(String name);\r\n+    \r\n+    \r\n+\r\n+\r\n+    /**\r\n+     * Returns the names of the context's initialization parameters as an\r\n+     * <code>Enumeration</code> of <code>String</code> objects, or an\r\n+     * empty <code>Enumeration</code> if the context has no initialization\r\n+     * parameters.\r\n+     *\r\n+     * @return \t\tan <code>Enumeration</code> of <code>String</code> \r\n+     *                  objects containing the names of the context's\r\n+     *                  initialization parameters\r\n+     *\r\n+     * @see ServletConfig#getInitParameter\r\n+     */\r\n+\r\n+    public Enumeration getInitParameterNames();\r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Returns the servlet container attribute with the given name, \r\n+     * or <code>null</code> if there is no attribute by that name.\r\n+     * An attribute allows a servlet container to give the\r\n+     * servlet additional information not\r\n+     * already provided by this interface. See your\r\n+     * server documentation for information about its attributes.\r\n+     * A list of supported attributes can be retrieved using\r\n+     * <code>getAttributeNames</code>.\r\n+     *\r\n+     * <p>The attribute is returned as a <code>java.lang.Object</code>\r\n+     * or some subclass.\r\n+     * Attribute names should follow the same convention as package\r\n+     * names. The Java Servlet API specification reserves names\r\n+     * matching <code>java.*</code>, <code>javax.*</code>,\r\n+     * and <code>sun.*</code>.\r\n+     *\r\n+     *\r\n+     * @param name \ta <code>String</code> specifying the name \r\n+     *\t\t\tof the attribute\r\n+     *\r\n+     * @return \t\tan <code>Object</code> containing the value \r\n+     *\t\t\tof the attribute, or <code>null</code>\r\n+     *\t\t\tif no attribute exists matching the given\r\n+     *\t\t\tname\r\n+     *\r\n+     * @see \t\tServletContext#getAttributeNames\r\n+     *\r\n+     */\r\n+  \r\n+    public Object getAttribute(String name);\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Returns an <code>Enumeration</code> containing the \r\n+     * attribute names available\r\n+     * within this servlet context. Use the\r\n+     * {@link #getAttribute} method with an attribute name\r\n+     * to get the value of an attribute.\r\n+     *\r\n+     * @return \t\tan <code>Enumeration</code> of attribute \r\n+     *\t\t\tnames\r\n+     *\r\n+     * @see\t\t#getAttribute\r\n+     *\r\n+     */\r\n+\r\n+    public Enumeration getAttributeNames();\r\n+    \r\n+    \r\n+    \r\n+    \r\n+    /**\r\n+     *\r\n+     * Binds an object to a given attribute name in this servlet context. If\r\n+     * the name specified is already used for an attribute, this\r\n+     * method will replace the attribute with the new to the new attribute.\r\n+     * <p>If listeners are configured on the <code>ServletContext</code> the  \r\n+     * container notifies them accordingly.\r\n+     * <p>\r\n+     * If a null value is passed, the effect is the same as calling \r\n+     * <code>removeAttribute()</code>.\r\n+     * \r\n+     * <p>Attribute names should follow the same convention as package\r\n+     * names. The Java Servlet API specification reserves names\r\n+     * matching <code>java.*</code>, <code>javax.*</code>, and\r\n+     * <code>sun.*</code>.\r\n+     *\r\n+     *\r\n+     * @param name \ta <code>String</code> specifying the name \r\n+     *\t\t\tof the attribute\r\n+     *\r\n+     * @param object \tan <code>Object</code> representing the\r\n+     *\t\t\tattribute to be bound\r\n+     *\r\n+     *\r\n+     *\r\n+     */\r\n+    \r\n+    public void setAttribute(String name, Object object);\r\n+    \r\n+    \r\n+\r\n+\r\n+\r\n+    /**\r\n+     * Removes the attribute with the given name from \r\n+     * the servlet context. After removal, subsequent calls to\r\n+     * {@link #getAttribute} to retrieve the attribute's value\r\n+     * will return <code>null</code>.\r\n+\r\n+     * <p>If listeners are configured on the <code>ServletContext</code> the \r\n+     * container notifies them accordingly.\r\n+\r\n+     *\r\n+     *\r\n+     * @param name\ta <code>String</code> specifying the name \r\n+     * \t\t\tof the attribute to be removed\r\n+     *\r\n+     */\r\n+\r\n+    public void removeAttribute(String name);\r\n+    \r\n+    /**\r\n+     * Returns the name of this web application corresponding to this ServletContext as specified in the deployment\r\n+     * descriptor for this web application by the display-name element.\r\n+     *\r\n+     *\r\n+     * @return\t    The name of the web application or null if no name has been declared in the deployment descriptor.\r\n+     * @since Servlet 2.3\r\n+     */\r\n+    \r\n+    public String getServletContextName();\r\n+}\r\n+\r\n+\r"
        },
        {
            "sha": "5ba383670d47d87a50d439768a1aa8ef368cf84c",
            "filename": "java/javax/servlet/ServletContextAttributeEvent.java",
            "status": "added",
            "additions": 59,
            "deletions": 0,
            "changes": 59,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletContextAttributeEvent.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletContextAttributeEvent.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FServletContextAttributeEvent.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,59 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet;\r\n+\r\n+\r\n+\t/** \r\n+\t* This is the event class for notifications about changes to the attributes of the\r\n+\t*  servlet context of a web application.\r\n+\t* @see ServletContextAttributeListener\r\n+\t * @since\tv 2.3\r\n+\t*/\r\n+\r\n+public class ServletContextAttributeEvent extends ServletContextEvent { \r\n+\tprivate String name;\r\n+\tprivate Object value;\r\n+\r\n+\t/** Construct a ServletContextAttributeEvent from the given context for the\r\n+\t** given attribute name and attribute value. \r\n+\t*/\r\n+\tpublic ServletContextAttributeEvent(ServletContext source, String name, Object value) {\r\n+\t    super(source);\r\n+\t    this.name = name;\r\n+\t    this.value = value;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t* Return the name of the attribute that changed on the ServletContext.\r\n+\t*\r\n+\t*/\r\n+\tpublic String getName() {\r\n+\t\treturn this.name;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t* Returns the value of the attribute that has been added, removed, or replaced.\r\n+\t* If the attribute was added, this is the value of the attribute. If the attribute was\r\n+\t* removed, this is the value of the removed attribute. If the attribute was replaced, this\r\n+\t* is the old value of the attribute.\r\n+\t*\r\n+\t*/\r\n+\t\r\n+\tpublic Object getValue() {\r\n+\t    return this.value;   \r\n+\t}\r\n+}\r\n+\r"
        },
        {
            "sha": "7f039830f8fb425e13c5a37c082af739bd702609",
            "filename": "java/javax/servlet/ServletContextAttributeListener.java",
            "status": "added",
            "additions": 36,
            "deletions": 0,
            "changes": 36,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletContextAttributeListener.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletContextAttributeListener.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FServletContextAttributeListener.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,36 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet;\r\n+\r\n+import java.util.EventListener;\r\n+\r\n+\t/** Implementations of this interface receive notifications of\r\n+\t** changes to the attribute list on the servlet context of a web application. \r\n+\t* To receive notification events, the implementation class\r\n+\t* must be configured in the deployment descriptor for the web application.\r\n+\t* @see ServletContextAttributeEvent\r\n+\t * @since\tv 2.3\r\n+\t*/\r\n+\r\n+public interface ServletContextAttributeListener extends EventListener {\r\n+\t/** Notification that a new attribute was added to the servlet context. Called after the attribute is added.*/\r\n+public void attributeAdded(ServletContextAttributeEvent scab);\r\n+\t/** Notification that an existing attribute has been removed from the servlet context. Called after the attribute is removed.*/\r\n+public void attributeRemoved(ServletContextAttributeEvent scab);\r\n+\t/** Notification that an attribute on the servlet context has been replaced. Called after the attribute is replaced. */\r\n+public void attributeReplaced(ServletContextAttributeEvent scab);\r\n+}\r\n+\r"
        },
        {
            "sha": "a69241595b0e174c391fd3f7c8078f8bd62aaf1c",
            "filename": "java/javax/servlet/ServletContextEvent.java",
            "status": "added",
            "additions": 46,
            "deletions": 0,
            "changes": 46,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletContextEvent.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletContextEvent.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FServletContextEvent.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,46 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet;\r\n+\r\n+\r\n+\t/** \r\n+\t * This is the event class for notifications about changes to\r\n+\t * the servlet context of a web application.\r\n+\t * @see ServletContextListener\r\n+\t * @since\tv 2.3\r\n+\t */\r\n+\r\n+public class ServletContextEvent extends java.util.EventObject { \r\n+\r\n+\t/** Construct a ServletContextEvent from the given context.\r\n+\t *\r\n+\t * @param source - the ServletContext that is sending the event.\r\n+\t */\r\n+    public ServletContextEvent(ServletContext source) {\r\n+\tsuper(source);\r\n+    }\r\n+    \r\n+\t/**\r\n+\t * Return the ServletContext that changed.\r\n+\t *\r\n+\t * @return the ServletContext that sent the event.\r\n+\t */\r\n+    public ServletContext getServletContext () { \r\n+\treturn (ServletContext) super.getSource();\r\n+    }\r\n+    \r\n+}\r\n+\r"
        },
        {
            "sha": "0dc655c54bec814e6ccb628078bf737221d29c9f",
            "filename": "java/javax/servlet/ServletContextListener.java",
            "status": "added",
            "additions": 50,
            "deletions": 0,
            "changes": 50,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletContextListener.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletContextListener.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FServletContextListener.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,50 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet;\r\n+\r\n+import java.util.EventListener;\r\n+\r\n+\t/** \r\n+\t * Implementations of this interface receive notifications about\r\n+\t * changes to the servlet context of the web application they are\r\n+\t * part of.\r\n+\t * To receive notification events, the implementation class\r\n+\t * must be configured in the deployment descriptor for the web\r\n+\t * application.\r\n+\t * @see ServletContextEvent\r\n+\t * @since\tv 2.3\r\n+\t */\r\n+\r\n+public interface ServletContextListener extends EventListener {\r\n+\t/**\r\n+\t ** Notification that the web application initialization\r\n+\t ** process is starting.\r\n+\t ** All ServletContextListeners are notified of context\r\n+\t ** initialization before any filter or servlet in the web\r\n+\t ** application is initialized.\r\n+\t */\r\n+\r\n+    public void contextInitialized ( ServletContextEvent sce );\r\n+\r\n+\t/**\r\n+\t ** Notification that the servlet context is about to be shut down.\r\n+\t ** All servlets and filters have been destroy()ed before any\r\n+\t ** ServletContextListeners are notified of context\r\n+\t ** destruction.\r\n+\t */\r\n+    public void contextDestroyed ( ServletContextEvent sce );\r\n+}\r\n+\r"
        },
        {
            "sha": "06e07c5aa76651b2afca475d30d1f10d34f4fc73",
            "filename": "java/javax/servlet/ServletException.java",
            "status": "added",
            "additions": 141,
            "deletions": 0,
            "changes": 141,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletException.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletException.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FServletException.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,141 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet;\r\n+\r\n+\r\n+/**\r\n+ * Defines a general exception a servlet can throw when it\r\n+ * encounters difficulty.\r\n+ *\r\n+ * @author \tVarious\r\n+ * @version \t$Version$\r\n+ *\r\n+ */\r\n+\r\n+\r\n+public class ServletException extends Exception {\r\n+\r\n+    private Throwable rootCause;\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     * Constructs a new servlet exception.\r\n+     *\r\n+     */\r\n+\r\n+    public ServletException() {\r\n+\tsuper();\r\n+    }\r\n+    \r\n+   \r\n+\r\n+    \r\n+\r\n+    /**\r\n+     * Constructs a new servlet exception with the\r\n+     * specified message. The message can be written \r\n+     * to the server log and/or displayed for the user. \r\n+     *\r\n+     * @param message \t\ta <code>String</code> \r\n+     *\t\t\t\tspecifying the text of \r\n+     *\t\t\t\tthe exception message\r\n+     *\r\n+     */\r\n+\r\n+    public ServletException(String message) {\r\n+\tsuper(message);\r\n+    }\r\n+    \r\n+   \r\n+   \r\n+    \r\n+\r\n+    /**\r\n+     * Constructs a new servlet exception when the servlet \r\n+     * needs to throw an exception and include a message \r\n+     * about the \"root cause\" exception that interfered with its \r\n+     * normal operation, including a description message.\r\n+     *\r\n+     *\r\n+     * @param message \t\ta <code>String</code> containing \r\n+     *\t\t\t\tthe text of the exception message\r\n+     *\r\n+     * @param rootCause\t\tthe <code>Throwable</code> exception \r\n+     *\t\t\t\tthat interfered with the servlet's\r\n+     *\t\t\t\tnormal operation, making this servlet\r\n+     *\t\t\t\texception necessary\r\n+     *\r\n+     */\r\n+    \r\n+    public ServletException(String message, Throwable rootCause) {\r\n+\tsuper(message);\r\n+\tthis.rootCause = rootCause;\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     * Constructs a new servlet exception when the servlet \r\n+     * needs to throw an exception and include a message\r\n+     * about the \"root cause\" exception that interfered with its\r\n+     * normal operation.  The exception's message is based on the localized\r\n+     * message of the underlying exception.\r\n+     *\r\n+     * <p>This method calls the <code>getLocalizedMessage</code> method\r\n+     * on the <code>Throwable</code> exception to get a localized exception\r\n+     * message. When subclassing <code>ServletException</code>, \r\n+     * this method can be overridden to create an exception message \r\n+     * designed for a specific locale.\r\n+     *\r\n+     * @param rootCause \tthe <code>Throwable</code> exception\r\n+     * \t\t\t\tthat interfered with the servlet's\r\n+     *\t\t\t\tnormal operation, making the servlet exception\r\n+     *\t\t\t\tnecessary\r\n+     *\r\n+     */\r\n+\r\n+    public ServletException(Throwable rootCause) {\r\n+\tsuper(rootCause.getLocalizedMessage());\r\n+\tthis.rootCause = rootCause;\r\n+    }\r\n+  \r\n+  \r\n+ \r\n+ \r\n+    \r\n+    /**\r\n+     * Returns the exception that caused this servlet exception.\r\n+     *\r\n+     *\r\n+     * @return\t\t\tthe <code>Throwable</code> \r\n+     *\t\t\t\tthat caused this servlet exception\r\n+     *\r\n+     */\r\n+    \r\n+    public Throwable getRootCause() {\r\n+\treturn rootCause;\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+\r"
        },
        {
            "sha": "b4aecdc7b96ffc4c8d541cbcbe0befb2672af328",
            "filename": "java/javax/servlet/ServletInputStream.java",
            "status": "added",
            "additions": 105,
            "deletions": 0,
            "changes": 105,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletInputStream.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletInputStream.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FServletInputStream.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,105 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet;\r\n+\r\n+import java.io.InputStream;\r\n+import java.io.IOException;\r\n+\r\n+/**\r\n+ * \r\n+ * Provides an input stream for reading binary data from a client\r\n+ * request, including an efficient <code>readLine</code> method\r\n+ * for reading data one line at a time. With some protocols, such\r\n+ * as HTTP POST and PUT, a <code>ServletInputStream</code>\r\n+ * object can be used to read data sent from the client.\r\n+ *\r\n+ * <p>A <code>ServletInputStream</code> object is normally retrieved via\r\n+ * the {@link ServletRequest#getInputStream} method.\r\n+ *\r\n+ *\r\n+ * <p>This is an abstract class that a servlet container implements.\r\n+ * Subclasses of this class\r\n+ * must implement the <code>java.io.InputStream.read()</code> method.\r\n+ *\r\n+ *\r\n+ * @author \tVarious\r\n+ * @version \t$Version$\r\n+ *\r\n+ * @see\t\tServletRequest \r\n+ *\r\n+ */\r\n+\r\n+public abstract class ServletInputStream extends InputStream {\r\n+\r\n+\r\n+\r\n+    /**\r\n+     * Does nothing, because this is an abstract class.\r\n+     *\r\n+     */\r\n+\r\n+    protected ServletInputStream() { }\r\n+\r\n+  \r\n+  \r\n+    \r\n+    /**\r\n+     *\r\n+     * Reads the input stream, one line at a time. Starting at an\r\n+     * offset, reads bytes into an array, until it reads a certain number\r\n+     * of bytes or reaches a newline character, which it reads into the\r\n+     * array as well.\r\n+     *\r\n+     * <p>This method returns -1 if it reaches the end of the input\r\n+     * stream before reading the maximum number of bytes.\r\n+     *\r\n+     *\r\n+     *\r\n+     * @param b \t\tan array of bytes into which data is read\r\n+     *\r\n+     * @param off \t\tan integer specifying the character at which\r\n+     *\t\t\t\tthis method begins reading\r\n+     *\r\n+     * @param len\t\tan integer specifying the maximum number of \r\n+     *\t\t\t\tbytes to read\r\n+     *\r\n+     * @return\t\t\tan integer specifying the actual number of bytes \r\n+     *\t\t\t\tread, or -1 if the end of the stream is reached\r\n+     *\r\n+     * @exception IOException\tif an input or output exception has occurred\r\n+     *\r\n+     */\r\n+     \r\n+    public int readLine(byte[] b, int off, int len) throws IOException {\r\n+\r\n+\tif (len <= 0) {\r\n+\t    return 0;\r\n+\t}\r\n+\tint count = 0, c;\r\n+\r\n+\twhile ((c = read()) != -1) {\r\n+\t    b[off++] = (byte)c;\r\n+\t    count++;\r\n+\t    if (c == '\\n' || count == len) {\r\n+\t\tbreak;\r\n+\t    }\r\n+\t}\r\n+\treturn count > 0 ? count : -1;\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r"
        },
        {
            "sha": "9d32fb5d0d01229c4ab24870eb20892a2ba107ff",
            "filename": "java/javax/servlet/ServletOutputStream.java",
            "status": "added",
            "additions": 363,
            "deletions": 0,
            "changes": 363,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletOutputStream.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletOutputStream.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FServletOutputStream.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,363 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet;\r\n+\r\n+import java.io.OutputStream;\r\n+import java.io.IOException;\r\n+import java.io.CharConversionException;\r\n+import java.text.MessageFormat;\r\n+import java.util.ResourceBundle;\r\n+\r\n+/**\r\n+ * Provides an output stream for sending binary data to the\r\n+ * client. A <code>ServletOutputStream</code> object is normally retrieved \r\n+ * via the {@link ServletResponse#getOutputStream} method.\r\n+ *\r\n+ * <p>This is an abstract class that the servlet container implements.\r\n+ * Subclasses of this class\r\n+ * must implement the <code>java.io.OutputStream.write(int)</code>\r\n+ * method.\r\n+ *\r\n+ * \r\n+ * @author \tVarious\r\n+ * @version \t$Version$\r\n+ *\r\n+ * @see \tServletResponse\r\n+ *\r\n+ */\r\n+\r\n+public abstract class ServletOutputStream extends OutputStream {\r\n+\r\n+    private static final String LSTRING_FILE = \"javax.servlet.LocalStrings\";\r\n+    private static ResourceBundle lStrings =\r\n+\tResourceBundle.getBundle(LSTRING_FILE);\r\n+\r\n+\r\n+    \r\n+    /**\r\n+     *\r\n+     * Does nothing, because this is an abstract class.\r\n+     *\r\n+     */\r\n+\r\n+    protected ServletOutputStream() { }\r\n+\r\n+\r\n+    /**\r\n+     * Writes a <code>String</code> to the client, \r\n+     * without a carriage return-line feed (CRLF) \r\n+     * character at the end.\r\n+     *\r\n+     *\r\n+     * @param s\t\t\tthe <code>String</code> to send to the client\r\n+     *\r\n+     * @exception IOException \tif an input or output exception occurred\r\n+     *\r\n+     */\r\n+\r\n+    public void print(String s) throws IOException {\r\n+\tif (s==null) s=\"null\";\r\n+\tint len = s.length();\r\n+\tfor (int i = 0; i < len; i++) {\r\n+\t    char c = s.charAt (i);\r\n+\r\n+\t    //\r\n+\t    // XXX NOTE:  This is clearly incorrect for many strings,\r\n+\t    // but is the only consistent approach within the current\r\n+\t    // servlet framework.  It must suffice until servlet output\r\n+\t    // streams properly encode their output.\r\n+\t    //\r\n+\t    if ((c & 0xff00) != 0) {\t// high order byte must be zero\r\n+\t\tString errMsg = lStrings.getString(\"err.not_iso8859_1\");\r\n+\t\tObject[] errArgs = new Object[1];\r\n+\t\terrArgs[0] = new Character(c);\r\n+\t\terrMsg = MessageFormat.format(errMsg, errArgs);\r\n+\t\tthrow new CharConversionException(errMsg);\r\n+\t    }\r\n+\t    write (c);\r\n+\t}\r\n+    }\r\n+\r\n+\r\n+\r\n+    /**\r\n+     * Writes a <code>boolean</code> value to the client,\r\n+     * with no carriage return-line feed (CRLF) \r\n+     * character at the end.\r\n+     *\r\n+     * @param b\t\t\tthe <code>boolean</code> value \r\n+     *\t\t\t\tto send to the client\r\n+     *\r\n+     * @exception IOException \tif an input or output exception occurred\r\n+     *\r\n+     */\r\n+\r\n+    public void print(boolean b) throws IOException {\r\n+\tString msg;\r\n+\tif (b) {\r\n+\t    msg = lStrings.getString(\"value.true\");\r\n+\t} else {\r\n+\t    msg = lStrings.getString(\"value.false\");\r\n+\t}\r\n+\tprint(msg);\r\n+    }\r\n+\r\n+\r\n+\r\n+    /**\r\n+     * Writes a character to the client,\r\n+     * with no carriage return-line feed (CRLF) \r\n+     * at the end.\r\n+     *\r\n+     * @param c\t\t\tthe character to send to the client\r\n+     *\r\n+     * @exception IOException \tif an input or output exception occurred\r\n+     *\r\n+     */\r\n+\r\n+    public void print(char c) throws IOException {\r\n+\tprint(String.valueOf(c));\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * Writes an int to the client,\r\n+     * with no carriage return-line feed (CRLF) \r\n+     * at the end.\r\n+     *\r\n+     * @param i\t\t\tthe int to send to the client\r\n+     *\r\n+     * @exception IOException \tif an input or output exception occurred\r\n+     *\r\n+     */  \r\n+\r\n+    public void print(int i) throws IOException {\r\n+\tprint(String.valueOf(i));\r\n+    }\r\n+\r\n+\r\n+\r\n+ \r\n+    /**\r\n+     * \r\n+     * Writes a <code>long</code> value to the client,\r\n+     * with no carriage return-line feed (CRLF) at the end.\r\n+     *\r\n+     * @param l\t\t\tthe <code>long</code> value \r\n+     *\t\t\t\tto send to the client\r\n+     *\r\n+     * @exception IOException \tif an input or output exception \r\n+     *\t\t\t\toccurred\r\n+     * \r\n+     */\r\n+\r\n+    public void print(long l) throws IOException {\r\n+\tprint(String.valueOf(l));\r\n+    }\r\n+\r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * Writes a <code>float</code> value to the client,\r\n+     * with no carriage return-line feed (CRLF) at the end.\r\n+     *\r\n+     * @param f\t\t\tthe <code>float</code> value\r\n+     *\t\t\t\tto send to the client\r\n+     *\r\n+     * @exception IOException\tif an input or output exception occurred\r\n+     *\r\n+     *\r\n+     */\r\n+\r\n+    public void print(float f) throws IOException {\r\n+\tprint(String.valueOf(f));\r\n+    }\r\n+\r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * Writes a <code>double</code> value to the client,\r\n+     * with no carriage return-line feed (CRLF) at the end.\r\n+     * \r\n+     * @param d\t\t\tthe <code>double</code> value\r\n+     *\t\t\t\tto send to the client\r\n+     *\r\n+     * @exception IOException \tif an input or output exception occurred\r\n+     *\r\n+     */\r\n+\r\n+    public void print(double d) throws IOException {\r\n+\tprint(String.valueOf(d));\r\n+    }\r\n+\r\n+\r\n+\r\n+    /**\r\n+     * Writes a carriage return-line feed (CRLF)\r\n+     * to the client.\r\n+     *\r\n+     *\r\n+     *\r\n+     * @exception IOException \tif an input or output exception occurred\r\n+     *\r\n+     */\r\n+\r\n+    public void println() throws IOException {\r\n+\tprint(\"\\r\\n\");\r\n+    }\r\n+\r\n+\r\n+\r\n+    /**\r\n+     * Writes a <code>String</code> to the client, \r\n+     * followed by a carriage return-line feed (CRLF).\r\n+     *\r\n+     *\r\n+     * @param s\t\t\tthe <code>String</code> to write to the client\r\n+     *\r\n+     * @exception IOException \tif an input or output exception occurred\r\n+     *\r\n+     */\r\n+\r\n+    public void println(String s) throws IOException {\r\n+\tprint(s);\r\n+\tprintln();\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * Writes a <code>boolean</code> value to the client, \r\n+     * followed by a \r\n+     * carriage return-line feed (CRLF).\r\n+     *\r\n+     *\r\n+     * @param b\t\t\tthe <code>boolean</code> value \r\n+     *\t\t\t\tto write to the client\r\n+     *\r\n+     * @exception IOException \tif an input or output exception occurred\r\n+     *\r\n+     */\r\n+\r\n+    public void println(boolean b) throws IOException {\r\n+\tprint(b);\r\n+\tprintln();\r\n+    }\r\n+\r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * Writes a character to the client, followed by a carriage\r\n+     * return-line feed (CRLF).\r\n+     *\r\n+     * @param c\t\t\tthe character to write to the client\r\n+     *\r\n+     * @exception IOException \tif an input or output exception occurred\r\n+     *\r\n+     */\r\n+\r\n+    public void println(char c) throws IOException {\r\n+\tprint(c);\r\n+\tprintln();\r\n+    }\r\n+\r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * Writes an int to the client, followed by a \r\n+     * carriage return-line feed (CRLF) character.\r\n+     *\r\n+     *\r\n+     * @param i\t\t\tthe int to write to the client\r\n+     *\r\n+     * @exception IOException \tif an input or output exception occurred\r\n+     *\r\n+     */\r\n+\r\n+    public void println(int i) throws IOException {\r\n+\tprint(i);\r\n+\tprintln();\r\n+    }\r\n+\r\n+\r\n+\r\n+    /**  \r\n+     *\r\n+     * Writes a <code>long</code> value to the client, followed by a \r\n+     * carriage return-line feed (CRLF).\r\n+     *\r\n+     *\r\n+     * @param l\t\t\tthe <code>long</code> value to write to the client\r\n+     *\r\n+     * @exception IOException \tif an input or output exception occurred\r\n+     *\r\n+     */  \r\n+\r\n+    public void println(long l) throws IOException {\r\n+\tprint(l);\r\n+\tprintln();\r\n+    }\r\n+\r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * Writes a <code>float</code> value to the client, \r\n+     * followed by a carriage return-line feed (CRLF).\r\n+     *\r\n+     * @param f\t\t\tthe <code>float</code> value \r\n+     *\t\t\t\tto write to the client\r\n+     *\r\n+     *\r\n+     * @exception IOException \tif an input or output exception \r\n+     *\t\t\t\toccurred\r\n+     *\r\n+     */\r\n+\r\n+    public void println(float f) throws IOException {\r\n+\tprint(f);\r\n+\tprintln();\r\n+    }\r\n+\r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * Writes a <code>double</code> value to the client, \r\n+     * followed by a carriage return-line feed (CRLF).\r\n+     *\r\n+     *\r\n+     * @param d\t\t\tthe <code>double</code> value\r\n+     *\t\t\t\tto write to the client\r\n+     *\r\n+     * @exception IOException \tif an input or output exception occurred\r\n+     *\r\n+     */\r\n+\r\n+    public void println(double d) throws IOException {\r\n+\tprint(d);\r\n+\tprintln();\r\n+    }\r\n+}\r"
        },
        {
            "sha": "40ad0312fa8a5f6602f3e6b67dd3b94b51ebd07c",
            "filename": "java/javax/servlet/ServletRequest.java",
            "status": "added",
            "additions": 597,
            "deletions": 0,
            "changes": 597,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletRequest.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletRequest.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FServletRequest.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,597 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.IOException;\r\n+import java.util.Enumeration;\r\n+import java.util.Locale;\r\n+import java.util.Map;\r\n+\r\n+\r\n+\r\n+/**\r\n+ * Defines an object to provide client request information to a servlet.  The\r\n+ * servlet container creates a <code>ServletRequest</code> object and passes\r\n+ * it as an argument to the servlet's <code>service</code> method.\r\n+ *\r\n+ * <p>A <code>ServletRequest</code> object provides data including\r\n+ * parameter name and values, attributes, and an input stream.\r\n+ * Interfaces that extend <code>ServletRequest</code> can provide\r\n+ * additional protocol-specific data (for example, HTTP data is\r\n+ * provided by {@link javax.servlet.http.HttpServletRequest}.\r\n+ * \r\n+ * @author \tVarious\r\n+ * @version \t$Version$\r\n+ *\r\n+ * @see \tjavax.servlet.http.HttpServletRequest\r\n+ *\r\n+ */\r\n+\r\n+public interface ServletRequest {\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * Returns the value of the named attribute as an <code>Object</code>,\r\n+     * or <code>null</code> if no attribute of the given name exists. \r\n+     *\r\n+     * <p> Attributes can be set two ways.  The servlet container may set\r\n+     * attributes to make available custom information about a request.\r\n+     * For example, for requests made using HTTPS, the attribute\r\n+     * <code>javax.servlet.request.X509Certificate</code> can be used to\r\n+     * retrieve information on the certificate of the client.  Attributes\r\n+     * can also be set programatically using \r\n+     * {@link ServletRequest#setAttribute}.  This allows information to be\r\n+     * embedded into a request before a {@link RequestDispatcher} call.\r\n+     *\r\n+     * <p>Attribute names should follow the same conventions as package\r\n+     * names. This specification reserves names matching <code>java.*</code>,\r\n+     * <code>javax.*</code>, and <code>sun.*</code>. \r\n+     *\r\n+     * @param name\ta <code>String</code> specifying the name of \r\n+     *\t\t\tthe attribute\r\n+     *\r\n+     * @return\t\tan <code>Object</code> containing the value \r\n+     *\t\t\tof the attribute, or <code>null</code> if\r\n+     *\t\t\tthe attribute does not exist\r\n+     *\r\n+     */\r\n+\r\n+    public Object getAttribute(String name);\r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Returns an <code>Enumeration</code> containing the\r\n+     * names of the attributes available to this request. \r\n+     * This method returns an empty <code>Enumeration</code>\r\n+     * if the request has no attributes available to it.\r\n+     * \r\n+     *\r\n+     * @return\t\tan <code>Enumeration</code> of strings \r\n+     *\t\t\tcontaining the names \r\n+     * \t\t\tof the request's attributes\r\n+     *\r\n+     */\r\n+\r\n+    public Enumeration getAttributeNames();\r\n+    \r\n+    \r\n+    \r\n+    \r\n+    /**\r\n+     * Returns the name of the character encoding used in the body of this\r\n+     * request. This method returns <code>null</code> if the request\r\n+     * does not specify a character encoding\r\n+     * \r\n+     *\r\n+     * @return\t\ta <code>String</code> containing the name of \r\n+     *\t\t\tthe character encoding, or <code>null</code>\r\n+     *\t\t\tif the request does not specify a character encoding\r\n+     *\r\n+     */\r\n+\r\n+    public String getCharacterEncoding();\r\n+\r\n+ /**\r\n+     * Overrides the name of the character encoding used in the body of this\r\n+     * request. This method must be called prior to reading request parameters\r\n+     * or reading input using getReader().\r\n+     * \r\n+     *\r\n+     * @param env\ta <code>String</code> containing the name of \r\n+     *\t\t\tthe character encoding.\r\n+     * @throws\t\tjava.io.UnsupportedEncodingException if this is not a valid encoding\r\n+     */\r\n+\r\n+    public void setCharacterEncoding(String env) throws java.io.UnsupportedEncodingException;\r\n+\r\n+    \r\n+    \r\n+    \r\n+    \r\n+    /**\r\n+     * Returns the length, in bytes, of the request body \r\n+     * and made available by the input stream, or -1 if the\r\n+     * length is not known. For HTTP servlets, same as the value\r\n+     * of the CGI variable CONTENT_LENGTH.\r\n+     *\r\n+     * @return\t\tan integer containing the length of the \r\n+     * \t\t\trequest body or -1 if the length is not known\r\n+     *\r\n+     */\r\n+\r\n+    public int getContentLength();\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Returns the MIME type of the body of the request, or \r\n+     * <code>null</code> if the type is not known. For HTTP servlets, \r\n+     * same as the value of the CGI variable CONTENT_TYPE.\r\n+     *\r\n+     * @return\t\ta <code>String</code> containing the name \r\n+     *\t\t\tof the MIME type of \r\n+     * \t\t\tthe request, or null if the type is not known\r\n+     *\r\n+     */\r\n+\r\n+    public String getContentType();\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Retrieves the body of the request as binary data using\r\n+     * a {@link ServletInputStream}.  Either this method or \r\n+     * {@link #getReader} may be called to read the body, not both.\r\n+     *\r\n+     * @return\t\t\ta {@link ServletInputStream} object containing\r\n+     * \t\t\t\tthe body of the request\r\n+     *\r\n+     * @exception IllegalStateException  if the {@link #getReader} method\r\n+     * \t\t\t\t\t has already been called for this request\r\n+     *\r\n+     * @exception IOException    \tif an input or output exception occurred\r\n+     *\r\n+     */\r\n+\r\n+    public ServletInputStream getInputStream() throws IOException; \r\n+     \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Returns the value of a request parameter as a <code>String</code>,\r\n+     * or <code>null</code> if the parameter does not exist. Request parameters\r\n+     * are extra information sent with the request.  For HTTP servlets,\r\n+     * parameters are contained in the query string or posted form data.\r\n+     *\r\n+     * <p>You should only use this method when you are sure the\r\n+     * parameter has only one value. If the parameter might have\r\n+     * more than one value, use {@link #getParameterValues}.\r\n+     *\r\n+     * <p>If you use this method with a multivalued\r\n+     * parameter, the value returned is equal to the first value\r\n+     * in the array returned by <code>getParameterValues</code>.\r\n+     *\r\n+     * <p>If the parameter data was sent in the request body, such as occurs\r\n+     * with an HTTP POST request, then reading the body directly via {@link\r\n+     * #getInputStream} or {@link #getReader} can interfere\r\n+     * with the execution of this method.\r\n+     *\r\n+     * @param name \ta <code>String</code> specifying the \r\n+     *\t\t\tname of the parameter\r\n+     *\r\n+     * @return\t\ta <code>String</code> representing the \r\n+     *\t\t\tsingle value of the parameter\r\n+     *\r\n+     * @see \t\t#getParameterValues\r\n+     *\r\n+     */\r\n+\r\n+    public String getParameter(String name);\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Returns an <code>Enumeration</code> of <code>String</code>\r\n+     * objects containing the names of the parameters contained\r\n+     * in this request. If the request has \r\n+     * no parameters, the method returns an \r\n+     * empty <code>Enumeration</code>. \r\n+     *\r\n+     * @return\t\tan <code>Enumeration</code> of <code>String</code>\r\n+     *\t\t\tobjects, each <code>String</code> containing\r\n+     * \t\t\tthe name of a request parameter; or an \r\n+     *\t\t\tempty <code>Enumeration</code> if the\r\n+     *\t\t\trequest has no parameters\r\n+     *\r\n+     */\r\n+     \r\n+    public Enumeration getParameterNames();\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Returns an array of <code>String</code> objects containing \r\n+     * all of the values the given request parameter has, or \r\n+     * <code>null</code> if the parameter does not exist.\r\n+     *\r\n+     * <p>If the parameter has a single value, the array has a length\r\n+     * of 1.\r\n+     *\r\n+     * @param name\ta <code>String</code> containing the name of \r\n+     *\t\t\tthe parameter whose value is requested\r\n+     *\r\n+     * @return\t\tan array of <code>String</code> objects \r\n+     *\t\t\tcontaining the parameter's values\r\n+     *\r\n+     * @see\t\t#getParameter\r\n+     *\r\n+     */\r\n+\r\n+    public String[] getParameterValues(String name);\r\n+ \r\n+    /** Returns a java.util.Map of the parameters of this request.\r\n+     * Request parameters\r\n+     * are extra information sent with the request.  For HTTP servlets,\r\n+     * parameters are contained in the query string or posted form data.\r\n+     *\r\n+     * @return an immutable java.util.Map containing parameter names as \r\n+     * keys and parameter values as map values. The keys in the parameter\r\n+     * map are of type String. The values in the parameter map are of type\r\n+     * String array.\r\n+     *\r\n+     */\r\n+\r\n+    public Map getParameterMap();\r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Returns the name and version of the protocol the request uses\r\n+     * in the form <i>protocol/majorVersion.minorVersion</i>, for \r\n+     * example, HTTP/1.1. For HTTP servlets, the value\r\n+     * returned is the same as the value of the CGI variable \r\n+     * <code>SERVER_PROTOCOL</code>.\r\n+     *\r\n+     * @return\t\ta <code>String</code> containing the protocol \r\n+     *\t\t\tname and version number\r\n+     *\r\n+     */\r\n+    \r\n+    public String getProtocol();\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Returns the name of the scheme used to make this request, \r\n+     * for example,\r\n+     * <code>http</code>, <code>https</code>, or <code>ftp</code>.\r\n+     * Different schemes have different rules for constructing URLs,\r\n+     * as noted in RFC 1738.\r\n+     *\r\n+     * @return\t\ta <code>String</code> containing the name \r\n+     *\t\t\tof the scheme used to make this request\r\n+     *\r\n+     */\r\n+\r\n+    public String getScheme();\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Returns the host name of the server to which the request was sent.\r\n+     * It is the value of the part before \":\" in the <code>Host</code>\r\n+     * header value, if any, or the resolved server name, or the server IP address.\r\n+     *\r\n+     * @return\t\ta <code>String</code> containing the name \r\n+     *\t\t\tof the server\r\n+     */\r\n+\r\n+    public String getServerName();\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Returns the port number to which the request was sent.\r\n+     * It is the value of the part after \":\" in the <code>Host</code>\r\n+     * header value, if any, or the server port where the client connection\r\n+     * was accepted on.\r\n+     *\r\n+     * @return\t\tan integer specifying the port number\r\n+     *\r\n+     */\r\n+\r\n+    public int getServerPort();\r\n+    \r\n+    \r\n+    \r\n+    /**\r\n+     * Retrieves the body of the request as character data using\r\n+     * a <code>BufferedReader</code>.  The reader translates the character\r\n+     * data according to the character encoding used on the body.\r\n+     * Either this method or {@link #getInputStream} may be called to read the\r\n+     * body, not both.\r\n+     * \r\n+     *\r\n+     * @return\t\t\t\t\ta <code>BufferedReader</code>\r\n+     *\t\t\t\t\t\tcontaining the body of the request\t\r\n+     *\r\n+     * @exception UnsupportedEncodingException \tif the character set encoding\r\n+     * \t\t\t\t\t\tused is not supported and the \r\n+     *\t\t\t\t\t\ttext cannot be decoded\r\n+     *\r\n+     * @exception IllegalStateException   \tif {@link #getInputStream} method\r\n+     * \t\t\t\t\t\thas been called on this request\r\n+     *\r\n+     * @exception IOException  \t\t\tif an input or output exception occurred\r\n+     *\r\n+     * @see \t\t\t\t\t#getInputStream\r\n+     *\r\n+     */\r\n+\r\n+    public BufferedReader getReader() throws IOException;\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Returns the Internet Protocol (IP) address of the client \r\n+     * or last proxy that sent the request.\r\n+     * For HTTP servlets, same as the value of the \r\n+     * CGI variable <code>REMOTE_ADDR</code>.\r\n+     *\r\n+     * @return\t\ta <code>String</code> containing the \r\n+     *\t\t\tIP address of the client that sent the request\r\n+     *\r\n+     */\r\n+    \r\n+    public String getRemoteAddr();\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Returns the fully qualified name of the client\r\n+     * or the last proxy that sent the request.\r\n+     * If the engine cannot or chooses not to resolve the hostname \r\n+     * (to improve performance), this method returns the dotted-string form of \r\n+     * the IP address. For HTTP servlets, same as the value of the CGI variable \r\n+     * <code>REMOTE_HOST</code>.\r\n+     *\r\n+     * @return\t\ta <code>String</code> containing the fully \r\n+     *\t\t\tqualified name of the client\r\n+     *\r\n+     */\r\n+\r\n+    public String getRemoteHost();\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Stores an attribute in this request.\r\n+     * Attributes are reset between requests.  This method is most\r\n+     * often used in conjunction with {@link RequestDispatcher}.\r\n+     *\r\n+     * <p>Attribute names should follow the same conventions as\r\n+     * package names. Names beginning with <code>java.*</code>,\r\n+     * <code>javax.*</code>, and <code>com.sun.*</code>, are\r\n+     * reserved for use by Sun Microsystems.\r\n+     *<br> If the object passed in is null, the effect is the same as\r\n+     * calling {@link #removeAttribute}.\r\n+     * <br> It is warned that when the request is dispatched from the\r\n+     * servlet resides in a different web application by\r\n+     * <code>RequestDispatcher</code>, the object set by this method\r\n+     * may not be correctly retrieved in the caller servlet.\r\n+     *\r\n+     *\r\n+     * @param name\t\t\ta <code>String</code> specifying \r\n+     *\t\t\t\t\tthe name of the attribute\r\n+     *\r\n+     * @param o\t\t\t\tthe <code>Object</code> to be stored\r\n+     *\r\n+     */\r\n+\r\n+    public void setAttribute(String name, Object o);\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Removes an attribute from this request.  This method is not\r\n+     * generally needed as attributes only persist as long as the request\r\n+     * is being handled.\r\n+     *\r\n+     * <p>Attribute names should follow the same conventions as\r\n+     * package names. Names beginning with <code>java.*</code>,\r\n+     * <code>javax.*</code>, and <code>com.sun.*</code>, are\r\n+     * reserved for use by Sun Microsystems.\r\n+     *\r\n+     *\r\n+     * @param name\t\t\ta <code>String</code> specifying \r\n+     *\t\t\t\t\tthe name of the attribute to remove\r\n+     *\r\n+     */\r\n+\r\n+    public void removeAttribute(String name);\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Returns the preferred <code>Locale</code> that the client will \r\n+     * accept content in, based on the Accept-Language header.\r\n+     * If the client request doesn't provide an Accept-Language header,\r\n+     * this method returns the default locale for the server.\r\n+     *\r\n+     *\r\n+     * @return\t\tthe preferred <code>Locale</code> for the client\r\n+     *\r\n+     */\r\n+\r\n+    public Locale getLocale();\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Returns an <code>Enumeration</code> of <code>Locale</code> objects\r\n+     * indicating, in decreasing order starting with the preferred locale, the\r\n+     * locales that are acceptable to the client based on the Accept-Language\r\n+     * header.\r\n+     * If the client request doesn't provide an Accept-Language header,\r\n+     * this method returns an <code>Enumeration</code> containing one \r\n+     * <code>Locale</code>, the default locale for the server.\r\n+     *\r\n+     *\r\n+     * @return\t\tan <code>Enumeration</code> of preferred \r\n+     *                  <code>Locale</code> objects for the client\r\n+     *\r\n+     */\r\n+\r\n+    public Enumeration getLocales();\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Returns a boolean indicating whether this request was made using a\r\n+     * secure channel, such as HTTPS.\r\n+     *\r\n+     *\r\n+     * @return\t\ta boolean indicating if the request was made using a\r\n+     *                  secure channel\r\n+     *\r\n+     */\r\n+\r\n+    public boolean isSecure();\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Returns a {@link RequestDispatcher} object that acts as a wrapper for\r\n+     * the resource located at the given path.  \r\n+     * A <code>RequestDispatcher</code> object can be used to forward\r\n+     * a request to the resource or to include the resource in a response.\r\n+     * The resource can be dynamic or static.\r\n+     *\r\n+     * <p>The pathname specified may be relative, although it cannot extend\r\n+     * outside the current servlet context.  If the path begins with \r\n+     * a \"/\" it is interpreted as relative to the current context root.  \r\n+     * This method returns <code>null</code> if the servlet container\r\n+     * cannot return a <code>RequestDispatcher</code>.\r\n+     *\r\n+     * <p>The difference between this method and {@link\r\n+     * ServletContext#getRequestDispatcher} is that this method can take a\r\n+     * relative path.\r\n+     *\r\n+     * @param path      a <code>String</code> specifying the pathname\r\n+     *                  to the resource. If it is relative, it must be\r\n+     *                  relative against the current servlet.\r\n+     *\r\n+     * @return          a <code>RequestDispatcher</code> object\r\n+     *                  that acts as a wrapper for the resource\r\n+     *                  at the specified path, or <code>null</code>\r\n+     *                  if the servlet container cannot return a\r\n+     *                  <code>RequestDispatcher</code>\r\n+     *\r\n+     * @see             RequestDispatcher\r\n+     * @see             ServletContext#getRequestDispatcher\r\n+     *\r\n+     */\r\n+\r\n+    public RequestDispatcher getRequestDispatcher(String path);\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * \r\n+     * @deprecated \tAs of Version 2.1 of the Java Servlet API,\r\n+     * \t\t\tuse {@link ServletContext#getRealPath} instead.\r\n+     *\r\n+     */\r\n+\r\n+    public String getRealPath(String path);\r\n+    \r\n+    \r\n+    /**\r\n+     * Returns the Internet Protocol (IP) source port of the client\r\n+     * or last proxy that sent the request.\r\n+     *\r\n+     * @return\tan integer specifying the port number\r\n+     *\r\n+     * @since 2.4\r\n+     */    \r\n+    public int getRemotePort();\r\n+\r\n+\r\n+    /**\r\n+     * Returns the host name of the Internet Protocol (IP) interface on\r\n+     * which the request was received.\r\n+     *\r\n+     * @return\ta <code>String</code> containing the host\r\n+     *\t\tname of the IP on which the request was received.\r\n+     *\r\n+     * @since 2.4\r\n+     */\r\n+    public String getLocalName();\r\n+\r\n+    /**\r\n+     * Returns the Internet Protocol (IP) address of the interface on\r\n+     * which the request  was received.\r\n+     *\r\n+     * @return\ta <code>String</code> containing the\r\n+     *\t\tIP address on which the request was received. \r\n+     *\r\n+     * @since 2.4\r\n+     *\r\n+     */       \r\n+    public String getLocalAddr();\r\n+\r\n+\r\n+    /**\r\n+     * Returns the Internet Protocol (IP) port number of the interface\r\n+     * on which the request was received.\r\n+     *\r\n+     * @return an integer specifying the port number\r\n+     *\r\n+     * @since 2.4\r\n+     */\r\n+    public int getLocalPort();\r\n+\r\n+}\r\n+\r"
        },
        {
            "sha": "b0dfbe58fd89c9ebfc3a6dc0c2942a9d3ea342e6",
            "filename": "java/javax/servlet/ServletRequestAttributeEvent.java",
            "status": "added",
            "additions": 66,
            "deletions": 0,
            "changes": 66,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletRequestAttributeEvent.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletRequestAttributeEvent.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FServletRequestAttributeEvent.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,66 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet;\r\n+\r\n+\r\n+    /** \r\n+      * This is the event class for notifications of changes to the \r\n+      * attributes of the servlet request in an application.\r\n+      * @see ServletRequestAttributeListener\r\n+      * @since\tServlet 2.4\r\n+      */\r\n+\r\n+public class ServletRequestAttributeEvent extends ServletRequestEvent { \r\n+    private String name;\r\n+    private Object value;\r\n+\r\n+     /** Construct a ServletRequestAttributeEvent giving the servlet context\r\n+      * of this web application, the ServletRequest whose attributes are\r\n+      * changing and the name and value of the attribute.\r\n+      *\r\n+      * @param sc\t\tthe ServletContext that is sending the event.\r\n+      * @param request\t\tthe ServletRequest that is sending the event.\r\n+      * @param name\t\tthe name of the request attribute.\r\n+      * @param value\t\tthe value of the request attribute.\r\n+      */\r\n+    public ServletRequestAttributeEvent(ServletContext sc, ServletRequest request, String name, Object value) {\r\n+        super(sc, request);\r\n+        this.name = name;\r\n+        this.value = value;\r\n+    }\r\n+\r\n+    /**\r\n+      * Return the name of the attribute that changed on the ServletRequest.\r\n+      *\r\n+      * @return\t\tthe name of the changed request attribute\r\n+      */\r\n+    public String getName() {\r\n+        return this.name;\r\n+    }\r\n+\r\n+    /**\r\n+      * Returns the value of the attribute that has been added, removed or \r\n+      * replaced. If the attribute was added, this is the value of the \r\n+      * attribute. If the attribute was removed, this is the value of the \r\n+      * removed attribute. If the attribute was replaced, this is the old \r\n+      * value of the attribute.\r\n+      *\r\n+      * @return\t\tthe value of the changed request attribute\r\n+      */\r\n+    public Object getValue() {\r\n+        return this.value;   \r\n+    }\r\n+}\r"
        },
        {
            "sha": "f7735a1f637158b2ac314f130e6df839884a1d73",
            "filename": "java/javax/servlet/ServletRequestAttributeListener.java",
            "status": "added",
            "additions": 49,
            "deletions": 0,
            "changes": 49,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletRequestAttributeListener.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletRequestAttributeListener.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FServletRequestAttributeListener.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,49 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet;\r\n+\r\n+import java.util.EventListener;\r\n+\r\n+    /**\r\n+     * A ServletRequestAttributeListener can be implemented by the\r\n+     * developer interested in being notified of request attribute\r\n+     * changes. Notifications will be generated while the request\r\n+     * is within the scope of the web application in which the listener\r\n+     * is registered. A request is defined as coming into scope when\r\n+     * it is about to enter the first servlet or filter in each web\r\n+     * application, as going out of scope when it exits the last servlet\r\n+     * or the first filter in the chain.\r\n+     *\r\n+     * @since Servlet 2.4\r\n+     */\r\n+\r\n+public interface ServletRequestAttributeListener extends EventListener {\r\n+    /** Notification that a new attribute was added to the\r\n+     ** servlet request. Called after the attribute is added.\r\n+     */\r\n+    public void attributeAdded(ServletRequestAttributeEvent srae);\r\n+\r\n+    /** Notification that an existing attribute has been removed from the\r\n+     ** servlet request. Called after the attribute is removed.\r\n+     */\r\n+    public void attributeRemoved(ServletRequestAttributeEvent srae);\r\n+\r\n+    /** Notification that an attribute was replaced on the\r\n+     ** servlet request. Called after the attribute is replaced.\r\n+     */\r\n+    public void attributeReplaced(ServletRequestAttributeEvent srae);\r\n+}\r\n+\r"
        },
        {
            "sha": "03da745e09bce2d93295ffd21d98494f178a77bf",
            "filename": "java/javax/servlet/ServletRequestEvent.java",
            "status": "added",
            "additions": 55,
            "deletions": 0,
            "changes": 55,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletRequestEvent.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletRequestEvent.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FServletRequestEvent.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,55 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet;\r\n+\r\n+\r\n+    /** \r\n+      * Events of this kind indicate lifecycle\r\n+      * events for a ServletRequest.\r\n+      * The source of the event\r\n+      * is the ServletContext of this web application.\r\n+      * @see ServletRequestListener\r\n+      * @since\tServlet 2.4\r\n+      */\r\n+\r\n+public class ServletRequestEvent extends java.util.EventObject { \r\n+    private ServletRequest request;\r\n+\r\n+    /** Construct a ServletRequestEvent for the given ServletContext\r\n+      * and ServletRequest.\r\n+      *\r\n+      * @param sc\t\tthe ServletContext of the web application.\r\n+      * @param request\t\tthe ServletRequest that is sending the event.\r\n+      */\r\n+    public ServletRequestEvent(ServletContext sc, ServletRequest request) {\r\n+        super(sc);\r\n+        this.request = request;\r\n+    }\r\n+    \r\n+    /**\r\n+      * Returns the ServletRequest that is changing.\r\n+      */\r\n+    public ServletRequest getServletRequest () { \r\n+        return this.request;\r\n+    }\r\n+\r\n+    /**\r\n+      * Returns the ServletContext of this web application.\r\n+      */\r\n+    public ServletContext getServletContext () { \r\n+        return (ServletContext) super.getSource();\r\n+    }\r\n+}\r"
        },
        {
            "sha": "542e82a23b48f8e2ae82ea5fdc19c834252298f7",
            "filename": "java/javax/servlet/ServletRequestListener.java",
            "status": "added",
            "additions": 39,
            "deletions": 0,
            "changes": 39,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletRequestListener.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletRequestListener.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FServletRequestListener.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,39 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet;\r\n+\r\n+import java.util.EventListener;\r\n+\r\n+    /**\r\n+     * A ServletRequestListener can be implemented by the developer\r\n+     * interested in being notified of requests coming in and out of\r\n+     * scope in a web component. A request is defined as coming into\r\n+     * scope when it is about to enter the first servlet or filter\r\n+     * in each web application, as going out of scope when it exits\r\n+     * the last servlet or the first filter in the chain.\r\n+     *\r\n+     * @since Servlet 2.4\r\n+     */\r\n+\r\n+\r\n+public interface ServletRequestListener extends EventListener {\r\n+\r\n+    /** The request is about to go out of scope of the web application. */\r\n+    public void requestDestroyed ( ServletRequestEvent sre );\r\n+\r\n+    /** The request is about to come into scope of the web application. */\r\n+    public void requestInitialized ( ServletRequestEvent sre );\r\n+}\r"
        },
        {
            "sha": "a5fced6c9a9413fb3475208f013bf0205aa1d750",
            "filename": "java/javax/servlet/ServletRequestWrapper.java",
            "status": "added",
            "additions": 400,
            "deletions": 0,
            "changes": 400,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletRequestWrapper.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletRequestWrapper.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FServletRequestWrapper.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,400 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.IOException;\r\n+import java.util.Enumeration;\r\n+import java.util.Locale;\r\n+import java.util.Map;\r\n+\r\n+\r\n+\r\n+/**\r\n+ * \r\n+ * Provides a convenient implementation of the ServletRequest interface that\r\n+ * can be subclassed by developers wishing to adapt the request to a Servlet.\r\n+ * This class implements the Wrapper or Decorator pattern. Methods default to\r\n+ * calling through to the wrapped request object.\r\n+  * @since\tv 2.3\r\n+ * \r\n+ * \r\n+ *\r\n+ * @see \tjavax.servlet.ServletRequest\r\n+ *\r\n+ */\r\n+\r\n+public class ServletRequestWrapper implements ServletRequest {\r\n+    private ServletRequest request;\r\n+\r\n+\t/**\r\n+\t* Creates a ServletRequest adaptor wrapping the given request object. \r\n+\t* @throws java.lang.IllegalArgumentException if the request is null\r\n+\t*/\r\n+\r\n+    public ServletRequestWrapper(ServletRequest request) {\r\n+\tif (request == null) {\r\n+\t    throw new IllegalArgumentException(\"Request cannot be null\");   \r\n+\t}\r\n+\tthis.request = request;\r\n+    }\r\n+\r\n+\t/**\r\n+\t* Return the wrapped request object.\r\n+\t*/\r\n+\tpublic ServletRequest getRequest() {\r\n+\t\treturn this.request;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t* Sets the request object being wrapped. \r\n+\t* @throws java.lang.IllegalArgumentException if the request is null.\r\n+\t*/\r\n+\t\r\n+\tpublic void setRequest(ServletRequest request) {\r\n+\t    if (request == null) {\r\n+\t\tthrow new IllegalArgumentException(\"Request cannot be null\");\r\n+\t    }\r\n+\t    this.request = request;\r\n+\t}\r\n+\r\n+    /**\r\n+     *\r\n+     * The default behavior of this method is to call getAttribute(String name)\r\n+     * on the wrapped request object.\r\n+     */\r\n+\r\n+    public Object getAttribute(String name) {\r\n+\treturn this.request.getAttribute(name);\r\n+\t}\r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * The default behavior of this method is to return getAttributeNames()\r\n+     * on the wrapped request object.\r\n+     */\r\n+\r\n+    public Enumeration getAttributeNames() {\r\n+\treturn this.request.getAttributeNames();\r\n+\t}    \r\n+    \r\n+    \r\n+    \r\n+    /**\r\n+      * The default behavior of this method is to return getCharacterEncoding()\r\n+     * on the wrapped request object.\r\n+     */\r\n+\r\n+    public String getCharacterEncoding() {\r\n+\treturn this.request.getCharacterEncoding();\r\n+\t}\r\n+\t\r\n+    /**\r\n+      * The default behavior of this method is to set the character encoding\r\n+     * on the wrapped request object.\r\n+     */\r\n+\r\n+    public void setCharacterEncoding(String enc) throws java.io.UnsupportedEncodingException {\r\n+\tthis.request.setCharacterEncoding(enc);\r\n+\t}\r\n+    \r\n+    \r\n+    /**\r\n+      * The default behavior of this method is to return getContentLength()\r\n+     * on the wrapped request object.\r\n+     */\r\n+\r\n+    public int getContentLength() {\r\n+\treturn this.request.getContentLength();\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+\r\n+       /**\r\n+      * The default behavior of this method is to return getContentType()\r\n+     * on the wrapped request object.\r\n+     */\r\n+    public String getContentType() {\r\n+\treturn this.request.getContentType();\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+\r\n+     /**\r\n+      * The default behavior of this method is to return getInputStream()\r\n+     * on the wrapped request object.\r\n+     */\r\n+\r\n+    public ServletInputStream getInputStream() throws IOException {\r\n+\treturn this.request.getInputStream();\r\n+\t}\r\n+     \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+      * The default behavior of this method is to return getParameter(String name)\r\n+     * on the wrapped request object.\r\n+     */\r\n+\r\n+    public String getParameter(String name) {\r\n+\treturn this.request.getParameter(name);\r\n+    }\r\n+    \r\n+    /**\r\n+      * The default behavior of this method is to return getParameterMap()\r\n+     * on the wrapped request object.\r\n+     */\r\n+    public Map getParameterMap() {\r\n+\treturn this.request.getParameterMap();\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+      * The default behavior of this method is to return getParameterNames()\r\n+     * on the wrapped request object.\r\n+     */\r\n+     \r\n+    public Enumeration getParameterNames() {\r\n+\treturn this.request.getParameterNames();\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+\r\n+       /**\r\n+      * The default behavior of this method is to return getParameterValues(String name)\r\n+     * on the wrapped request object.\r\n+     */\r\n+    public String[] getParameterValues(String name) {\r\n+\treturn this.request.getParameterValues(name);\r\n+\t}\r\n+    \r\n+    \r\n+    \r\n+\r\n+     /**\r\n+      * The default behavior of this method is to return getProtocol()\r\n+     * on the wrapped request object.\r\n+     */\r\n+    \r\n+    public String getProtocol() {\r\n+\treturn this.request.getProtocol();\r\n+\t}\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+      * The default behavior of this method is to return getScheme()\r\n+     * on the wrapped request object.\r\n+     */\r\n+    \r\n+\r\n+    public String getScheme() {\r\n+\treturn this.request.getScheme();\r\n+\t}\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+      * The default behavior of this method is to return getServerName()\r\n+     * on the wrapped request object.\r\n+     */\r\n+    public String getServerName() {\r\n+\treturn this.request.getServerName();\r\n+\t}\r\n+    \r\n+    \r\n+    \r\n+\r\n+   /**\r\n+      * The default behavior of this method is to return getServerPort()\r\n+     * on the wrapped request object.\r\n+     */\r\n+\r\n+    public int getServerPort() {\r\n+\treturn this.request.getServerPort();\r\n+\t}\r\n+    \r\n+    \r\n+    \r\n+  /**\r\n+      * The default behavior of this method is to return getReader()\r\n+     * on the wrapped request object.\r\n+     */\r\n+\r\n+    public BufferedReader getReader() throws IOException {\r\n+\treturn this.request.getReader();\r\n+\t}\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+      * The default behavior of this method is to return getRemoteAddr()\r\n+     * on the wrapped request object.\r\n+     */\r\n+    \r\n+    public String getRemoteAddr() {\r\n+\treturn this.request.getRemoteAddr();\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+\r\n+      /**\r\n+      * The default behavior of this method is to return getRemoteHost()\r\n+     * on the wrapped request object.\r\n+     */\r\n+\r\n+    public String getRemoteHost() {\r\n+\treturn this.request.getRemoteHost();\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+      * The default behavior of this method is to return setAttribute(String name, Object o)\r\n+     * on the wrapped request object.\r\n+     */\r\n+\r\n+    public void setAttribute(String name, Object o) {\r\n+\tthis.request.setAttribute(name, o);\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+      * The default behavior of this method is to call removeAttribute(String name)\r\n+     * on the wrapped request object.\r\n+     */\r\n+    public void removeAttribute(String name) {\r\n+\tthis.request.removeAttribute(name);\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+\r\n+   /**\r\n+      * The default behavior of this method is to return getLocale()\r\n+     * on the wrapped request object.\r\n+     */\r\n+\r\n+    public Locale getLocale() {\r\n+\treturn this.request.getLocale();\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+\r\n+     /**\r\n+      * The default behavior of this method is to return getLocales()\r\n+     * on the wrapped request object.\r\n+     */\r\n+\r\n+    public Enumeration getLocales() {\r\n+\treturn this.request.getLocales();\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+      * The default behavior of this method is to return isSecure()\r\n+     * on the wrapped request object.\r\n+     */\r\n+\r\n+    public boolean isSecure() {\r\n+\treturn this.request.isSecure();\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+      * The default behavior of this method is to return getRequestDispatcher(String path)\r\n+     * on the wrapped request object.\r\n+     */\r\n+\r\n+    public RequestDispatcher getRequestDispatcher(String path) {\r\n+\treturn this.request.getRequestDispatcher(path);\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+      * The default behavior of this method is to return getRealPath(String path)\r\n+     * on the wrapped request object.\r\n+     */\r\n+\r\n+    public String getRealPath(String path) {\r\n+\treturn this.request.getRealPath(path);\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to return\r\n+     * getRemotePort() on the wrapped request object.\r\n+     *\r\n+     * @since 2.4\r\n+     */    \r\n+    public int getRemotePort(){\r\n+        return this.request.getRemotePort();\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * The default behavior of this method is to return\r\n+     * getLocalName() on the wrapped request object.\r\n+     *\r\n+     * @since 2.4\r\n+     */\r\n+    public String getLocalName(){\r\n+        return this.request.getLocalName();\r\n+    }\r\n+\r\n+    /**\r\n+     * The default behavior of this method is to return\r\n+     * getLocalAddr() on the wrapped request object.\r\n+     *\r\n+     * @since 2.4\r\n+     */       \r\n+    public String getLocalAddr(){\r\n+        return this.request.getLocalAddr();\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * The default behavior of this method is to return\r\n+     * getLocalPort() on the wrapped request object.\r\n+     *\r\n+     * @since 2.4\r\n+     */\r\n+    public int getLocalPort(){\r\n+        return this.request.getLocalPort();\r\n+    }\r\n+    \r\n+}\r\n+\r"
        },
        {
            "sha": "c807f741cb98a8557a7288ead3feb7260117f5cf",
            "filename": "java/javax/servlet/ServletResponse.java",
            "status": "added",
            "additions": 452,
            "deletions": 0,
            "changes": 452,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletResponse.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletResponse.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FServletResponse.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,452 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.PrintWriter;\r\n+import java.util.Locale;\r\n+\r\n+\r\n+/**\r\n+ * Defines an object to assist a servlet in sending a response to the client.\r\n+ * The servlet container creates a <code>ServletResponse</code> object and\r\n+ * passes it as an argument to the servlet's <code>service</code> method.\r\n+ *\r\n+ * <p>To send binary data in a MIME body response, use\r\n+ * the {@link ServletOutputStream} returned by {@link #getOutputStream}.\r\n+ * To send character data, use the <code>PrintWriter</code> object \r\n+ * returned by {@link #getWriter}. To mix binary and text data,\r\n+ * for example, to create a multipart response, use a\r\n+ * <code>ServletOutputStream</code> and manage the character sections\r\n+ * manually.\r\n+ *\r\n+ * <p>The charset for the MIME body response can be specified\r\n+ * explicitly using the {@link #setCharacterEncoding} and\r\n+ * {@link #setContentType} methods, or implicitly\r\n+ * using the {@link #setLocale} method.\r\n+ * Explicit specifications take precedence over\r\n+ * implicit specifications. If no charset is specified, ISO-8859-1 will be\r\n+ * used. The <code>setCharacterEncoding</code>,\r\n+ * <code>setContentType</code>, or <code>setLocale</code> method must\r\n+ * be called before <code>getWriter</code> and before committing\r\n+ * the response for the character encoding to be used.\r\n+ * \r\n+ * <p>See the Internet RFCs such as \r\n+ * <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">\r\n+ * RFC 2045</a> for more information on MIME. Protocols such as SMTP\r\n+ * and HTTP define profiles of MIME, and those standards\r\n+ * are still evolving.\r\n+ *\r\n+ * @author \tVarious\r\n+ * @version \t$Version$\r\n+ *\r\n+ * @see\t\tServletOutputStream\r\n+ *\r\n+ */\r\n+ \r\n+public interface ServletResponse {\r\n+\r\n+\r\n+    \r\n+    /**\r\n+     * Returns the name of the character encoding (MIME charset)\r\n+     * used for the body sent in this response.\r\n+     * The character encoding may have been specified explicitly\r\n+     * using the {@link #setCharacterEncoding} or\r\n+     * {@link #setContentType} methods, or implicitly using the\r\n+     * {@link #setLocale} method. Explicit specifications take\r\n+     * precedence over implicit specifications. Calls made\r\n+     * to these methods after <code>getWriter</code> has been\r\n+     * called or after the response has been committed have no\r\n+     * effect on the character encoding. If no character encoding\r\n+     * has been specified, <code>ISO-8859-1</code> is returned.\r\n+     * <p>See RFC 2047 (http://www.ietf.org/rfc/rfc2047.txt)\r\n+     * for more information about character encoding and MIME.\r\n+     *\r\n+     * @return\t\ta <code>String</code> specifying the\r\n+     *\t\t\tname of the character encoding, for\r\n+     *\t\t\texample, <code>UTF-8</code>\r\n+     *\r\n+     */\r\n+  \r\n+    public String getCharacterEncoding();\r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Returns the content type used for the MIME body\r\n+     * sent in this response. The content type proper must\r\n+     * have been specified using {@link #setContentType}\r\n+     * before the response is committed. If no content type\r\n+     * has been specified, this method returns null.\r\n+     * If a content type has been specified and a\r\n+     * character encoding has been explicitly or implicitly\r\n+     * specified as described in {@link #getCharacterEncoding},\r\n+     * the charset parameter is included in the string returned.\r\n+     * If no character encoding has been specified, the\r\n+     * charset parameter is omitted.\r\n+     *\r\n+     * @return\t\ta <code>String</code> specifying the\r\n+     *\t\t\tcontent type, for example,\r\n+     *\t\t\t<code>text/html; charset=UTF-8</code>,\r\n+     *\t\t\tor null\r\n+     *\r\n+     * @since 2.4\r\n+     */\r\n+  \r\n+    public String getContentType();\r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Returns a {@link ServletOutputStream} suitable for writing binary \r\n+     * data in the response. The servlet container does not encode the\r\n+     * binary data.  \r\n+     \r\n+     * <p> Calling flush() on the ServletOutputStream commits the response.\r\n+     \r\n+     * Either this method or {@link #getWriter} may \r\n+     * be called to write the body, not both.\r\n+     *\r\n+     * @return\t\t\t\ta {@link ServletOutputStream} for writing binary data\t\r\n+     *\r\n+     * @exception IllegalStateException if the <code>getWriter</code> method\r\n+     * \t\t\t\t\thas been called on this response\r\n+     *\r\n+     * @exception IOException \t\tif an input or output exception occurred\r\n+     *\r\n+     * @see \t\t\t\t#getWriter\r\n+     *\r\n+     */\r\n+\r\n+    public ServletOutputStream getOutputStream() throws IOException;\r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Returns a <code>PrintWriter</code> object that\r\n+     * can send character text to the client.\r\n+     * The <code>PrintWriter</code> uses the character\r\n+     * encoding returned by {@link #getCharacterEncoding}.\r\n+     * If the response's character encoding has not been\r\n+     * specified as described in <code>getCharacterEncoding</code>\r\n+     * (i.e., the method just returns the default value \r\n+     * <code>ISO-8859-1</code>), <code>getWriter</code>\r\n+     * updates it to <code>ISO-8859-1</code>.\r\n+     * <p>Calling flush() on the <code>PrintWriter</code>\r\n+     * commits the response.\r\n+     * <p>Either this method or {@link #getOutputStream} may be called\r\n+     * to write the body, not both.\r\n+     *\r\n+     * \r\n+     * @return \t\ta <code>PrintWriter</code> object that \r\n+     *\t\t\tcan return character data to the client \r\n+     *\r\n+     * @exception UnsupportedEncodingException\r\n+     *\t\t\tif the character encoding returned\r\n+     *\t\t\tby <code>getCharacterEncoding</code> cannot be used\r\n+     *\r\n+     * @exception IllegalStateException\r\n+     *\t\t\tif the <code>getOutputStream</code>\r\n+     * \t\t\tmethod has already been called for this \r\n+     *\t\t\tresponse object\r\n+     *\r\n+     * @exception IOException\r\n+     *\t\t\tif an input or output exception occurred\r\n+     *\r\n+     * @see \t\t#getOutputStream\r\n+     * @see \t\t#setCharacterEncoding\r\n+     *\r\n+     */\r\n+\r\n+    public PrintWriter getWriter() throws IOException;\r\n+    \r\n+    \r\n+    \r\n+    \r\n+    /**\r\n+     * Sets the character encoding (MIME charset) of the response\r\n+     * being sent to the client, for example, to UTF-8.\r\n+     * If the character encoding has already been set by\r\n+     * {@link #setContentType} or {@link #setLocale},\r\n+     * this method overrides it.\r\n+     * Calling {@link #setContentType} with the <code>String</code>\r\n+     * of <code>text/html</code> and calling\r\n+     * this method with the <code>String</code> of <code>UTF-8</code>\r\n+     * is equivalent with calling\r\n+     * <code>setContentType</code> with the <code>String</code> of\r\n+     * <code>text/html; charset=UTF-8</code>.\r\n+     * <p>This method can be called repeatedly to change the character\r\n+     * encoding.\r\n+     * This method has no effect if it is called after\r\n+     * <code>getWriter</code> has been\r\n+     * called or after the response has been committed.\r\n+     * <p>Containers must communicate the character encoding used for\r\n+     * the servlet response's writer to the client if the protocol\r\n+     * provides a way for doing so. In the case of HTTP, the character\r\n+     * encoding is communicated as part of the <code>Content-Type</code>\r\n+     * header for text media types. Note that the character encoding\r\n+     * cannot be communicated via HTTP headers if the servlet does not\r\n+     * specify a content type; however, it is still used to encode text\r\n+     * written via the servlet response's writer.\r\n+     *\r\n+     * @param charset \ta String specifying only the character set\r\n+     * \t\t\tdefined by IANA Character Sets\r\n+     *\t\t\t(http://www.iana.org/assignments/character-sets)\r\n+     *\r\n+     * @see\t\t#setContentType\r\n+     * \t\t\t#setLocale\r\n+     *\r\n+     * @since 2.4\r\n+     *\r\n+     */\r\n+\r\n+    public void setCharacterEncoding(String charset);\r\n+    \r\n+    \r\n+\r\n+\r\n+    /**\r\n+     * Sets the length of the content body in the response\r\n+     * In HTTP servlets, this method sets the HTTP Content-Length header.\r\n+     *\r\n+     *\r\n+     * @param len \tan integer specifying the length of the \r\n+     * \t\t\tcontent being returned to the client; sets\r\n+     *\t\t\tthe Content-Length header\r\n+     *\r\n+     */\r\n+\r\n+    public void setContentLength(int len);\r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Sets the content type of the response being sent to\r\n+     * the client, if the response has not been committed yet.\r\n+     * The given content type may include a character encoding\r\n+     * specification, for example, <code>text/html;charset=UTF-8</code>.\r\n+     * The response's character encoding is only set from the given\r\n+     * content type if this method is called before <code>getWriter</code>\r\n+     * is called.\r\n+     * <p>This method may be called repeatedly to change content type and\r\n+     * character encoding.\r\n+     * This method has no effect if called after the response\r\n+     * has been committed. It does not set the response's character\r\n+     * encoding if it is called after <code>getWriter</code>\r\n+     * has been called or after the response has been committed.\r\n+     * <p>Containers must communicate the content type and the character\r\n+     * encoding used for the servlet response's writer to the client if\r\n+     * the protocol provides a way for doing so. In the case of HTTP,\r\n+     * the <code>Content-Type</code> header is used.\r\n+     *\r\n+     * @param type \ta <code>String</code> specifying the MIME \r\n+     *\t\t\ttype of the content\r\n+     *\r\n+     * @see \t\t#setLocale\r\n+     * @see \t\t#setCharacterEncoding\r\n+     * @see \t\t#getOutputStream\r\n+     * @see \t\t#getWriter\r\n+     *\r\n+     */\r\n+\r\n+    public void setContentType(String type);\r\n+    \r\n+\r\n+    /**\r\n+     * Sets the preferred buffer size for the body of the response.  \r\n+     * The servlet container will use a buffer at least as large as \r\n+     * the size requested.  The actual buffer size used can be found\r\n+     * using <code>getBufferSize</code>.\r\n+     *\r\n+     * <p>A larger buffer allows more content to be written before anything is\r\n+     * actually sent, thus providing the servlet with more time to set\r\n+     * appropriate status codes and headers.  A smaller buffer decreases \r\n+     * server memory load and allows the client to start receiving data more\r\n+     * quickly.\r\n+     *\r\n+     * <p>This method must be called before any response body content is\r\n+     * written; if content has been written or the response object has\r\n+     * been committed, this method throws an \r\n+     * <code>IllegalStateException</code>.\r\n+     *\r\n+     * @param size \tthe preferred buffer size\r\n+     *\r\n+     * @exception  IllegalStateException  \tif this method is called after\r\n+     *\t\t\t\t\t\tcontent has been written\r\n+     *\r\n+     * @see \t\t#getBufferSize\r\n+     * @see \t\t#flushBuffer\r\n+     * @see \t\t#isCommitted\r\n+     * @see \t\t#reset\r\n+     *\r\n+     */\r\n+\r\n+    public void setBufferSize(int size);\r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Returns the actual buffer size used for the response.  If no buffering\r\n+     * is used, this method returns 0.\r\n+     *\r\n+     * @return\t \tthe actual buffer size used\r\n+     *\r\n+     * @see \t\t#setBufferSize\r\n+     * @see \t\t#flushBuffer\r\n+     * @see \t\t#isCommitted\r\n+     * @see \t\t#reset\r\n+     *\r\n+     */\r\n+\r\n+    public int getBufferSize();\r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Forces any content in the buffer to be written to the client.  A call\r\n+     * to this method automatically commits the response, meaning the status \r\n+     * code and headers will be written.\r\n+     *\r\n+     * @see \t\t#setBufferSize\r\n+     * @see \t\t#getBufferSize\r\n+     * @see \t\t#isCommitted\r\n+     * @see \t\t#reset\r\n+     *\r\n+     */\r\n+\r\n+    public void flushBuffer() throws IOException;\r\n+    \r\n+    \r\n+    \r\n+    /**\r\n+     * Clears the content of the underlying buffer in the response without\r\n+     * clearing headers or status code. If the \r\n+     * response has been committed, this method throws an \r\n+     * <code>IllegalStateException</code>.\r\n+     *\r\n+     * @see \t\t#setBufferSize\r\n+     * @see \t\t#getBufferSize\r\n+     * @see \t\t#isCommitted\r\n+     * @see \t\t#reset\r\n+     *\r\n+     * @since 2.3\r\n+     */\r\n+\r\n+    public void resetBuffer();\r\n+    \r\n+\r\n+    /**\r\n+     * Returns a boolean indicating if the response has been\r\n+     * committed.  A committed response has already had its status \r\n+     * code and headers written.\r\n+     *\r\n+     * @return\t\ta boolean indicating if the response has been\r\n+     *  \t\tcommitted\r\n+     *\r\n+     * @see \t\t#setBufferSize\r\n+     * @see \t\t#getBufferSize\r\n+     * @see \t\t#flushBuffer\r\n+     * @see \t\t#reset\r\n+     *\r\n+     */\r\n+\r\n+    public boolean isCommitted();\r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Clears any data that exists in the buffer as well as the status code and\r\n+     * headers.  If the response has been committed, this method throws an \r\n+     * <code>IllegalStateException</code>.\r\n+     *\r\n+     * @exception IllegalStateException  if the response has already been\r\n+     *                                   committed\r\n+     *\r\n+     * @see \t\t#setBufferSize\r\n+     * @see \t\t#getBufferSize\r\n+     * @see \t\t#flushBuffer\r\n+     * @see \t\t#isCommitted\r\n+     *\r\n+     */\r\n+\r\n+    public void reset();\r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Sets the locale of the response, if the response has not been\r\n+     * committed yet. It also sets the response's character encoding\r\n+     * appropriately for the locale, if the character encoding has not\r\n+     * been explicitly set using {@link #setContentType} or\r\n+     * {@link #setCharacterEncoding}, <code>getWriter</code> hasn't\r\n+     * been called yet, and the response hasn't been committed yet.\r\n+     * If the deployment descriptor contains a \r\n+     * <code>locale-encoding-mapping-list</code> element, and that\r\n+     * element provides a mapping for the given locale, that mapping\r\n+     * is used. Otherwise, the mapping from locale to character\r\n+     * encoding is container dependent.\r\n+     * <p>This method may be called repeatedly to change locale and\r\n+     * character encoding. The method has no effect if called after the\r\n+     * response has been committed. It does not set the response's\r\n+     * character encoding if it is called after {@link #setContentType}\r\n+     * has been called with a charset specification, after\r\n+     * {@link #setCharacterEncoding} has been called, after\r\n+     * <code>getWriter</code> has been called, or after the response\r\n+     * has been committed.\r\n+     * <p>Containers must communicate the locale and the character encoding\r\n+     * used for the servlet response's writer to the client if the protocol\r\n+     * provides a way for doing so. In the case of HTTP, the locale is\r\n+     * communicated via the <code>Content-Language</code> header,\r\n+     * the character encoding as part of the <code>Content-Type</code>\r\n+     * header for text media types. Note that the character encoding\r\n+     * cannot be communicated via HTTP headers if the servlet does not\r\n+     * specify a content type; however, it is still used to encode text\r\n+     * written via the servlet response's writer.\r\n+     * \r\n+     * @param loc  the locale of the response\r\n+     *\r\n+     * @see \t\t#getLocale\r\n+     * @see \t\t#setContentType\r\n+     * @see \t\t#setCharacterEncoding\r\n+     *\r\n+     */\r\n+\r\n+    public void setLocale(Locale loc);\r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Returns the locale specified for this response\r\n+     * using the {@link #setLocale} method. Calls made to\r\n+     * <code>setLocale</code> after the response is committed\r\n+     * have no effect. If no locale has been specified,\r\n+     * the container's default locale is returned.\r\n+     * \r\n+     * @see \t\t#setLocale\r\n+     *\r\n+     */\r\n+\r\n+    public Locale getLocale();\r\n+\r\n+\r\n+\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+\r"
        },
        {
            "sha": "829bb305847edbc1a1a110ba158ac12a5025976a",
            "filename": "java/javax/servlet/ServletResponseWrapper.java",
            "status": "added",
            "additions": 217,
            "deletions": 0,
            "changes": 217,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletResponseWrapper.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FServletResponseWrapper.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FServletResponseWrapper.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,217 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.PrintWriter;\r\n+import java.util.Locale;\r\n+\r\n+/**\r\n+ * \r\n+ * Provides a convenient implementation of the ServletResponse interface that\r\n+ * can be subclassed by developers wishing to adapt the response from a Servlet.\r\n+ * This class implements the Wrapper or Decorator pattern. Methods default to\r\n+ * calling through to the wrapped response object.\r\n+ * \r\n+ * @author \tVarious\r\n+ * @version \t$Version$\r\n+ * @since\tv 2.3\r\n+ *\r\n+ * @see \tjavax.servlet.ServletResponse\r\n+ *\r\n+ */\r\n+\r\n+ \r\n+public class ServletResponseWrapper implements ServletResponse {\r\n+\tprivate ServletResponse response;\r\n+\t/**\r\n+\t* Creates a ServletResponse adaptor wrapping the given response object.\r\n+\t* @throws java.lang.IllegalArgumentException if the response is null.\r\n+\t*/\r\n+\r\n+\r\n+\tpublic ServletResponseWrapper(ServletResponse response) {\r\n+\t    if (response == null) {\r\n+\t\tthrow new IllegalArgumentException(\"Response cannot be null\");\r\n+\t    }\r\n+\t    this.response = response;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t* Return the wrapped ServletResponse object.\r\n+\t*/\r\n+\r\n+\tpublic ServletResponse getResponse() {\r\n+\t\treturn this.response;\r\n+\t}\t\r\n+\t\r\n+\t\r\n+\t/**\r\n+\t* Sets the response being wrapped. \r\n+\t* @throws java.lang.IllegalArgumentException if the response is null.\r\n+\t*/\r\n+\t\r\n+\tpublic void setResponse(ServletResponse response) {\r\n+\t    if (response == null) {\r\n+\t\tthrow new IllegalArgumentException(\"Response cannot be null\");\r\n+\t    }\r\n+\t    this.response = response;\r\n+\t}\r\n+\r\n+    /**\r\n+     * The default behavior of this method is to call setCharacterEncoding(String charset)\r\n+     * on the wrapped response object.\r\n+     *\r\n+     * @since 2.4\r\n+     */\r\n+\r\n+    public void setCharacterEncoding(String charset) {\r\n+\tthis.response.setCharacterEncoding(charset);\r\n+    }\r\n+\r\n+    /**\r\n+     * The default behavior of this method is to return getCharacterEncoding()\r\n+     * on the wrapped response object.\r\n+     */\r\n+\r\n+    public String getCharacterEncoding() {\r\n+\treturn this.response.getCharacterEncoding();\r\n+\t}\r\n+    \r\n+    \r\n+\t  /**\r\n+     * The default behavior of this method is to return getOutputStream()\r\n+     * on the wrapped response object.\r\n+     */\r\n+\r\n+    public ServletOutputStream getOutputStream() throws IOException {\r\n+\treturn this.response.getOutputStream();\r\n+    }  \r\n+      \r\n+     /**\r\n+     * The default behavior of this method is to return getWriter()\r\n+     * on the wrapped response object.\r\n+     */\r\n+\r\n+\r\n+    public PrintWriter getWriter() throws IOException {\r\n+\treturn this.response.getWriter();\r\n+\t}\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to call setContentLength(int len)\r\n+     * on the wrapped response object.\r\n+     */\r\n+\r\n+    public void setContentLength(int len) {\r\n+\tthis.response.setContentLength(len);\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to call setContentType(String type)\r\n+     * on the wrapped response object.\r\n+     */\r\n+\r\n+    public void setContentType(String type) {\r\n+\tthis.response.setContentType(type);\r\n+    }\r\n+\r\n+    /**\r\n+     * The default behavior of this method is to return getContentType()\r\n+     * on the wrapped response object.\r\n+     *\r\n+     * @since 2.4\r\n+     */\r\n+\r\n+    public String getContentType() {\r\n+\treturn this.response.getContentType();\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to call setBufferSize(int size)\r\n+     * on the wrapped response object.\r\n+     */\r\n+    public void setBufferSize(int size) {\r\n+\tthis.response.setBufferSize(size);\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to return getBufferSize()\r\n+     * on the wrapped response object.\r\n+     */\r\n+    public int getBufferSize() {\r\n+\treturn this.response.getBufferSize();\r\n+    }\r\n+\r\n+    /**\r\n+     * The default behavior of this method is to call flushBuffer()\r\n+     * on the wrapped response object.\r\n+     */\r\n+\r\n+    public void flushBuffer() throws IOException {\r\n+\tthis.response.flushBuffer();\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to return isCommitted()\r\n+     * on the wrapped response object.\r\n+     */\r\n+    public boolean isCommitted() {\r\n+\treturn this.response.isCommitted();\r\n+    }\r\n+\r\n+    /**\r\n+     * The default behavior of this method is to call reset()\r\n+     * on the wrapped response object.\r\n+     */\r\n+\r\n+    public void reset() {\r\n+\tthis.response.reset();\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to call resetBuffer()\r\n+     * on the wrapped response object.\r\n+     */\r\n+     \r\n+    public void resetBuffer() {\r\n+\tthis.response.resetBuffer();\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to call setLocale(Locale loc)\r\n+     * on the wrapped response object.\r\n+     */\r\n+\r\n+    public void setLocale(Locale loc) {\r\n+\tthis.response.setLocale(loc);\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to return getLocale()\r\n+     * on the wrapped response object.\r\n+     */\r\n+    public Locale getLocale() {\r\n+\treturn this.response.getLocale();\r\n+    }\r\n+\r\n+\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+\r"
        },
        {
            "sha": "acf4ef0490a6d8d9f9b60faf5ba07f5ad3659672",
            "filename": "java/javax/servlet/SingleThreadModel.java",
            "status": "added",
            "additions": 48,
            "deletions": 0,
            "changes": 48,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FSingleThreadModel.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FSingleThreadModel.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FSingleThreadModel.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,48 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet;\r\n+\r\n+/**\r\n+ * Ensures that servlets handle\r\n+ * only one request at a time. This interface has no methods.\r\n+ *\r\n+ * <p>If a servlet implements this interface, you are <i>guaranteed</i>\r\n+ * that no two threads will execute concurrently in the\r\n+ * servlet's <code>service</code> method. The servlet container\r\n+ * can make this guarantee by synchronizing access to a single\r\n+ * instance of the servlet, or by maintaining a pool of servlet\r\n+ * instances and dispatching each new request to a free servlet.\r\n+ *\r\n+ * <p>Note that SingleThreadModel does not solve all thread safety\r\n+ * issues.  For example, session attributes and static variables can\r\n+ * still be accessed by multiple requests on multiple threads\r\n+ * at the same time, even when SingleThreadModel servlets are used.\r\n+ * It is recommended that a developer take other means to resolve\r\n+ * those issues instead of implementing this interface, such as\r\n+ * avoiding the usage of an instance variable or synchronizing\r\n+ * the block of the code accessing those resources.\r\n+ * This interface is deprecated in Servlet API version 2.4.\r\n+ *\r\n+ *\r\n+ * @author\tVarious\r\n+ * @version\t$Version$\r\n+ *\r\n+ * @deprecated\tAs of Java Servlet API 2.4, with no direct\r\n+ *\treplacement.\r\n+ */\r\n+\r\n+public interface SingleThreadModel {\r\n+}\r"
        },
        {
            "sha": "ab2dff8a3014f0e61102e05fa4475ba0d8fc66e5",
            "filename": "java/javax/servlet/UnavailableException.java",
            "status": "added",
            "additions": 205,
            "deletions": 0,
            "changes": 205,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FUnavailableException.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2FUnavailableException.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2FUnavailableException.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,205 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+\r\n+package javax.servlet;\r\n+\r\n+\r\n+/**\r\n+ * Defines an exception that a servlet or filter throws to indicate\r\n+ * that it is permanently or temporarily unavailable. \r\n+ *\r\n+ * <p>When a servlet or filter is permanently unavailable, something is wrong\r\n+ * with it, and it cannot handle\r\n+ * requests until some action is taken. For example, a servlet\r\n+ * might be configured incorrectly, or a filter's state may be corrupted.\r\n+ * The component should log both the error and the corrective action\r\n+ * that is needed.\r\n+ *\r\n+ * <p>A servlet or filter is temporarily unavailable if it cannot handle\r\n+ * requests momentarily due to some system-wide problem. For example,\r\n+ * a third-tier server might not be accessible, or there may be \r\n+ * insufficient memory or disk storage to handle requests. A system\r\n+ * administrator may need to take corrective action.\r\n+ *\r\n+ * <p>Servlet containers can safely treat both types of unavailable\r\n+ * exceptions in the same way. However, treating temporary unavailability\r\n+ * effectively makes the servlet container more robust. Specifically,\r\n+ * the servlet container might block requests to the servlet or filter for a period\r\n+ * of time suggested by the exception, rather than rejecting them until\r\n+ * the servlet container restarts.\r\n+ *\r\n+ *\r\n+ * @author \tVarious\r\n+ * @version \t$Version$\r\n+ *\r\n+ */\r\n+\r\n+public class UnavailableException\r\n+extends ServletException {\r\n+\r\n+    private Servlet     servlet;           // what's unavailable\r\n+    private boolean     permanent;         // needs admin action?\r\n+    private int         seconds;           // unavailability estimate\r\n+\r\n+    /**\r\n+     * \r\n+     * @deprecated\tAs of Java Servlet API 2.2, use {@link\r\n+     * \t\t\t#UnavailableException(String)} instead.\r\n+     *\r\n+     * @param servlet \tthe <code>Servlet</code> instance that is\r\n+     *                  unavailable\r\n+     *\r\n+     * @param msg \ta <code>String</code> specifying the\r\n+     *                  descriptive message\r\n+     *\r\n+     */\r\n+\r\n+    public UnavailableException(Servlet servlet, String msg) {\r\n+\tsuper(msg);\r\n+\tthis.servlet = servlet;\r\n+\tpermanent = true;\r\n+    }\r\n+ \r\n+    /**\r\n+     * @deprecated\tAs of Java Servlet API 2.2, use {@link\r\n+     *\t\t\t#UnavailableException(String, int)} instead.\r\n+     *\r\n+     * @param seconds\tan integer specifying the number of seconds\r\n+     * \t\t\tthe servlet expects to be unavailable; if\r\n+     *\t\t\tzero or negative, indicates that the servlet\r\n+     *\t\t\tcan't make an estimate\r\n+     *\r\n+     * @param servlet\tthe <code>Servlet</code> that is unavailable\r\n+     * \r\n+     * @param msg\ta <code>String</code> specifying the descriptive \r\n+     *\t\t\tmessage, which can be written to a log file or \r\n+     *\t\t\tdisplayed for the user.\r\n+     *\r\n+     */\r\n+    \r\n+    public UnavailableException(int seconds, Servlet servlet, String msg) {\r\n+\tsuper(msg);\r\n+\tthis.servlet = servlet;\r\n+\tif (seconds <= 0)\r\n+\t    this.seconds = -1;\r\n+\telse\r\n+\t    this.seconds = seconds;\r\n+\tpermanent = false;\r\n+    }\r\n+\r\n+    /**\r\n+     * \r\n+     * Constructs a new exception with a descriptive\r\n+     * message indicating that the servlet is permanently\r\n+     * unavailable.\r\n+     *\r\n+     * @param msg \ta <code>String</code> specifying the\r\n+     *                  descriptive message\r\n+     *\r\n+     */\r\n+\r\n+    public UnavailableException(String msg) {\r\n+\tsuper(msg);\r\n+\r\n+\tpermanent = true;\r\n+    }\r\n+\r\n+    /**\r\n+     * Constructs a new exception with a descriptive message\r\n+     * indicating that the servlet is temporarily unavailable\r\n+     * and giving an estimate of how long it will be unavailable.\r\n+     * \r\n+     * <p>In some cases, the servlet cannot make an estimate. For\r\n+     * example, the servlet might know that a server it needs is\r\n+     * not running, but not be able to report how long it will take\r\n+     * to be restored to functionality. This can be indicated with\r\n+     * a negative or zero value for the <code>seconds</code> argument.\r\n+     *\r\n+     * @param msg\ta <code>String</code> specifying the\r\n+     *                  descriptive message, which can be written\r\n+     *                  to a log file or displayed for the user.\r\n+     *\r\n+     * @param seconds\tan integer specifying the number of seconds\r\n+     * \t\t\tthe servlet expects to be unavailable; if\r\n+     *\t\t\tzero or negative, indicates that the servlet\r\n+     *\t\t\tcan't make an estimate\r\n+     *\r\n+     */\r\n+    \r\n+    public UnavailableException(String msg, int seconds) {\r\n+\tsuper(msg);\r\n+\r\n+\tif (seconds <= 0)\r\n+\t    this.seconds = -1;\r\n+\telse\r\n+\t    this.seconds = seconds;\r\n+\r\n+\tpermanent = false;\r\n+    }\r\n+\r\n+    /**\r\n+     *\r\n+     * Returns a <code>boolean</code> indicating\r\n+     * whether the servlet is permanently unavailable.\r\n+     * If so, something is wrong with the servlet, and the\r\n+     * system administrator must take some corrective action.\r\n+     *\r\n+     * @return\t\t<code>true</code> if the servlet is\r\n+     *\t\t\tpermanently unavailable; <code>false</code>\r\n+     *\t\t\tif the servlet is available or temporarily\r\n+     *\t\t\tunavailable\r\n+     *\r\n+     */\r\n+     \r\n+    public boolean isPermanent() {\r\n+\treturn permanent;\r\n+    }\r\n+  \r\n+    /**\r\n+     * @deprecated\tAs of Java Servlet API 2.2, with no replacement.\r\n+     *\r\n+     * Returns the servlet that is reporting its unavailability.\r\n+     * \r\n+     * @return\t\tthe <code>Servlet</code> object that is \r\n+     *\t\t\tthrowing the <code>UnavailableException</code>\r\n+     *\r\n+     */\r\n+     \r\n+    public Servlet getServlet() {\r\n+\treturn servlet;\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the number of seconds the servlet expects to \r\n+     * be temporarily unavailable.  \r\n+     *\r\n+     * <p>If this method returns a negative number, the servlet\r\n+     * is permanently unavailable or cannot provide an estimate of\r\n+     * how long it will be unavailable. No effort is\r\n+     * made to correct for the time elapsed since the exception was\r\n+     * first reported.\r\n+     *\r\n+     * @return\t\tan integer specifying the number of seconds\r\n+     *\t\t\tthe servlet will be temporarily unavailable,\r\n+     *\t\t\tor a negative number if the servlet is permanently\r\n+     *\t\t\tunavailable or cannot make an estimate\r\n+     *\r\n+     */\r\n+     \r\n+    public int getUnavailableSeconds() {\r\n+\treturn permanent ? -1 : seconds;\r\n+    }\r\n+}\r"
        },
        {
            "sha": "a7b54b7fe4b51520c479b0fe5714adf1155a0844",
            "filename": "java/javax/servlet/http/Cookie.java",
            "status": "added",
            "additions": 536,
            "deletions": 0,
            "changes": 536,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FCookie.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FCookie.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fhttp%2FCookie.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,536 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet.http;\r\n+\r\n+import java.text.MessageFormat;\r\n+import java.util.ResourceBundle;\r\n+\r\n+/**\r\n+ *\r\n+ * Creates a cookie, a small amount of information sent by a servlet to \r\n+ * a Web browser, saved by the browser, and later sent back to the server.\r\n+ * A cookie's value can uniquely \r\n+ * identify a client, so cookies are commonly used for session management.\r\n+ * \r\n+ * <p>A cookie has a name, a single value, and optional attributes\r\n+ * such as a comment, path and domain qualifiers, a maximum age, and a\r\n+ * version number. Some Web browsers have bugs in how they handle the \r\n+ * optional attributes, so use them sparingly to improve the interoperability \r\n+ * of your servlets.\r\n+ *\r\n+ * <p>The servlet sends cookies to the browser by using the\r\n+ * {@link HttpServletResponse#addCookie} method, which adds\r\n+ * fields to HTTP response headers to send cookies to the \r\n+ * browser, one at a time. The browser is expected to \r\n+ * support 20 cookies for each Web server, 300 cookies total, and\r\n+ * may limit cookie size to 4 KB each.\r\n+ * \r\n+ * <p>The browser returns cookies to the servlet by adding \r\n+ * fields to HTTP request headers. Cookies can be retrieved\r\n+ * from a request by using the {@link HttpServletRequest#getCookies} method.\r\n+ * Several cookies might have the same name but different path attributes.\r\n+ * \r\n+ * <p>Cookies affect the caching of the Web pages that use them. \r\n+ * HTTP 1.0 does not cache pages that use cookies created with\r\n+ * this class. This class does not support the cache control\r\n+ * defined with HTTP 1.1.\r\n+ *\r\n+ * <p>This class supports both the Version 0 (by Netscape) and Version 1 \r\n+ * (by RFC 2109) cookie specifications. By default, cookies are\r\n+ * created using Version 0 to ensure the best interoperability.\r\n+ *\r\n+ *\r\n+ * @author\tVarious\r\n+ * @version\t$Version$\r\n+ *\r\n+ */\r\n+\r\n+// XXX would implement java.io.Serializable too, but can't do that\r\n+// so long as sun.servlet.* must run on older JDK 1.02 JVMs which\r\n+// don't include that support.\r\n+\r\n+public class Cookie implements Cloneable {\r\n+\r\n+    private static final String LSTRING_FILE =\r\n+\t\"javax.servlet.http.LocalStrings\";\r\n+    private static ResourceBundle lStrings =\r\n+\tResourceBundle.getBundle(LSTRING_FILE);\r\n+    \r\n+    //\r\n+    // The value of the cookie itself.\r\n+    //\r\n+    \r\n+    private String name;\t// NAME= ... \"$Name\" style is reserved\r\n+    private String value;\t// value of NAME\r\n+\r\n+    //\r\n+    // Attributes encoded in the header's cookie fields.\r\n+    //\r\n+    \r\n+    private String comment;\t// ;Comment=VALUE ... describes cookie's use\r\n+\t\t\t\t// ;Discard ... implied by maxAge < 0\r\n+    private String domain;\t// ;Domain=VALUE ... domain that sees cookie\r\n+    private int maxAge = -1;\t// ;Max-Age=VALUE ... cookies auto-expire\r\n+    private String path;\t// ;Path=VALUE ... URLs that see the cookie\r\n+    private boolean secure;\t// ;Secure ... e.g. use SSL\r\n+    private int version = 0;\t// ;Version=1 ... means RFC 2109++ style\r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Constructs a cookie with a specified name and value.\r\n+     *\r\n+     * <p>The name must conform to RFC 2109. That means it can contain \r\n+     * only ASCII alphanumeric characters and cannot contain commas, \r\n+     * semicolons, or white space or begin with a $ character. The cookie's\r\n+     * name cannot be changed after creation.\r\n+     *\r\n+     * <p>The value can be anything the server chooses to send. Its\r\n+     * value is probably of interest only to the server. The cookie's\r\n+     * value can be changed after creation with the\r\n+     * <code>setValue</code> method.\r\n+     *\r\n+     * <p>By default, cookies are created according to the Netscape\r\n+     * cookie specification. The version can be changed with the \r\n+     * <code>setVersion</code> method.\r\n+     *\r\n+     *\r\n+     * @param name \t\t\ta <code>String</code> specifying the name of the cookie\r\n+     *\r\n+     * @param value\t\t\ta <code>String</code> specifying the value of the cookie\r\n+     *\r\n+     * @throws IllegalArgumentException\tif the cookie name contains illegal characters\r\n+     *\t\t\t\t\t(for example, a comma, space, or semicolon)\r\n+     *\t\t\t\t\tor it is one of the tokens reserved for use\r\n+     *\t\t\t\t\tby the cookie protocol\r\n+     * @see #setValue\r\n+     * @see #setVersion\r\n+     *\r\n+     */\r\n+\r\n+    public Cookie(String name, String value) {\r\n+\tif (!isToken(name)\r\n+\t\t|| name.equalsIgnoreCase(\"Comment\")\t// rfc2019\r\n+\t\t|| name.equalsIgnoreCase(\"Discard\")\t// 2019++\r\n+\t\t|| name.equalsIgnoreCase(\"Domain\")\r\n+\t\t|| name.equalsIgnoreCase(\"Expires\")\t// (old cookies)\r\n+\t\t|| name.equalsIgnoreCase(\"Max-Age\")\t// rfc2019\r\n+\t\t|| name.equalsIgnoreCase(\"Path\")\r\n+\t\t|| name.equalsIgnoreCase(\"Secure\")\r\n+\t\t|| name.equalsIgnoreCase(\"Version\")\r\n+\t\t|| name.startsWith(\"$\")\r\n+\t    ) {\r\n+\t    String errMsg = lStrings.getString(\"err.cookie_name_is_token\");\r\n+\t    Object[] errArgs = new Object[1];\r\n+\t    errArgs[0] = name;\r\n+\t    errMsg = MessageFormat.format(errMsg, errArgs);\r\n+\t    throw new IllegalArgumentException(errMsg);\r\n+\t}\r\n+\r\n+\tthis.name = name;\r\n+\tthis.value = value;\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * Specifies a comment that describes a cookie's purpose.\r\n+     * The comment is useful if the browser presents the cookie \r\n+     * to the user. Comments\r\n+     * are not supported by Netscape Version 0 cookies.\r\n+     *\r\n+     * @param purpose\t\ta <code>String</code> specifying the comment \r\n+     *\t\t\t\tto display to the user\r\n+     *\r\n+     * @see #getComment\r\n+     *\r\n+     */\r\n+\r\n+    public void setComment(String purpose) {\r\n+\tcomment = purpose;\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Returns the comment describing the purpose of this cookie, or\r\n+     * <code>null</code> if the cookie has no comment.\r\n+     *\r\n+     * @return\t\t\ta <code>String</code> containing the comment,\r\n+     *\t\t\t\tor <code>null</code> if none\r\n+     *\r\n+     * @see #setComment\r\n+     *\r\n+     */ \r\n+\r\n+    public String getComment() {\r\n+\treturn comment;\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * Specifies the domain within which this cookie should be presented.\r\n+     *\r\n+     * <p>The form of the domain name is specified by RFC 2109. A domain\r\n+     * name begins with a dot (<code>.foo.com</code>) and means that\r\n+     * the cookie is visible to servers in a specified Domain Name System\r\n+     * (DNS) zone (for example, <code>www.foo.com</code>, but not \r\n+     * <code>a.b.foo.com</code>). By default, cookies are only returned\r\n+     * to the server that sent them.\r\n+     *\r\n+     *\r\n+     * @param pattern\t\ta <code>String</code> containing the domain name\r\n+     *\t\t\t\twithin which this cookie is visible;\r\n+     *\t\t\t\tform is according to RFC 2109\r\n+     *\r\n+     * @see #getDomain\r\n+     *\r\n+     */\r\n+\r\n+    public void setDomain(String pattern) {\r\n+\tdomain = pattern.toLowerCase();\t// IE allegedly needs this\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Returns the domain name set for this cookie. The form of \r\n+     * the domain name is set by RFC 2109.\r\n+     *\r\n+     * @return\t\t\ta <code>String</code> containing the domain name\r\n+     *\r\n+     * @see #setDomain\r\n+     *\r\n+     */ \r\n+\r\n+    public String getDomain() {\r\n+\treturn domain;\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     * Sets the maximum age of the cookie in seconds.\r\n+     *\r\n+     * <p>A positive value indicates that the cookie will expire\r\n+     * after that many seconds have passed. Note that the value is\r\n+     * the <i>maximum</i> age when the cookie will expire, not the cookie's\r\n+     * current age.\r\n+     *\r\n+     * <p>A negative value means\r\n+     * that the cookie is not stored persistently and will be deleted\r\n+     * when the Web browser exits. A zero value causes the cookie\r\n+     * to be deleted.\r\n+     *\r\n+     * @param expiry\t\tan integer specifying the maximum age of the\r\n+     * \t\t\t\tcookie in seconds; if negative, means\r\n+     *\t\t\t\tthe cookie is not stored; if zero, deletes\r\n+     *\t\t\t\tthe cookie\r\n+     *\r\n+     *\r\n+     * @see #getMaxAge\r\n+     *\r\n+     */\r\n+\r\n+    public void setMaxAge(int expiry) {\r\n+\tmaxAge = expiry;\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     * Returns the maximum age of the cookie, specified in seconds,\r\n+     * By default, <code>-1</code> indicating the cookie will persist\r\n+     * until browser shutdown.\r\n+     *\r\n+     *\r\n+     * @return\t\t\tan integer specifying the maximum age of the\r\n+     *\t\t\t\tcookie in seconds; if negative, means\r\n+     *\t\t\t\tthe cookie persists until browser shutdown\r\n+     *\r\n+     *\r\n+     * @see #setMaxAge\r\n+     *\r\n+     */\r\n+\r\n+    public int getMaxAge() {\r\n+\treturn maxAge;\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Specifies a path for the cookie\r\n+     * to which the client should return the cookie.\r\n+     *\r\n+     * <p>The cookie is visible to all the pages in the directory\r\n+     * you specify, and all the pages in that directory's subdirectories. \r\n+     * A cookie's path must include the servlet that set the cookie,\r\n+     * for example, <i>/catalog</i>, which makes the cookie\r\n+     * visible to all directories on the server under <i>/catalog</i>.\r\n+     *\r\n+     * <p>Consult RFC 2109 (available on the Internet) for more\r\n+     * information on setting path names for cookies.\r\n+     *\r\n+     *\r\n+     * @param uri\t\ta <code>String</code> specifying a path\r\n+     *\r\n+     *\r\n+     * @see #getPath\r\n+     *\r\n+     */\r\n+\r\n+    public void setPath(String uri) {\r\n+\tpath = uri;\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     * Returns the path on the server \r\n+     * to which the browser returns this cookie. The\r\n+     * cookie is visible to all subpaths on the server.\r\n+     *\r\n+     *\r\n+     * @return\t\ta <code>String</code> specifying a path that contains\r\n+     *\t\t\ta servlet name, for example, <i>/catalog</i>\r\n+     *\r\n+     * @see #setPath\r\n+     *\r\n+     */ \r\n+\r\n+    public String getPath() {\r\n+\treturn path;\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     * Indicates to the browser whether the cookie should only be sent\r\n+     * using a secure protocol, such as HTTPS or SSL.\r\n+     *\r\n+     * <p>The default value is <code>false</code>.\r\n+     *\r\n+     * @param flag\tif <code>true</code>, sends the cookie from the browser\r\n+     *\t\t\tto the server only when using a secure protocol;\r\n+     *\t\t\tif <code>false</code>, sent on any protocol\r\n+     *\r\n+     * @see #getSecure\r\n+     *\r\n+     */\r\n+ \r\n+    public void setSecure(boolean flag) {\r\n+\tsecure = flag;\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     * Returns <code>true</code> if the browser is sending cookies\r\n+     * only over a secure protocol, or <code>false</code> if the\r\n+     * browser can send cookies using any protocol.\r\n+     *\r\n+     * @return\t\t<code>true</code> if the browser uses a secure protocol;\r\n+     * \t\t\t otherwise, <code>true</code>\r\n+     *\r\n+     * @see #setSecure\r\n+     *\r\n+     */\r\n+\r\n+    public boolean getSecure() {\r\n+\treturn secure;\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     * Returns the name of the cookie. The name cannot be changed after\r\n+     * creation.\r\n+     *\r\n+     * @return\t\ta <code>String</code> specifying the cookie's name\r\n+     *\r\n+     */\r\n+\r\n+    public String getName() {\r\n+\treturn name;\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * Assigns a new value to a cookie after the cookie is created.\r\n+     * If you use a binary value, you may want to use BASE64 encoding.\r\n+     *\r\n+     * <p>With Version 0 cookies, values should not contain white \r\n+     * space, brackets, parentheses, equals signs, commas,\r\n+     * double quotes, slashes, question marks, at signs, colons,\r\n+     * and semicolons. Empty values may not behave the same way\r\n+     * on all browsers.\r\n+     *\r\n+     * @param newValue\t\ta <code>String</code> specifying the new value \r\n+     *\r\n+     *\r\n+     * @see #getValue\r\n+     * @see Cookie\r\n+     *\r\n+     */\r\n+\r\n+    public void setValue(String newValue) {\r\n+\tvalue = newValue;\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     * Returns the value of the cookie.\r\n+     *\r\n+     * @return\t\t\ta <code>String</code> containing the cookie's\r\n+     *\t\t\t\tpresent value\r\n+     *\r\n+     * @see #setValue\r\n+     * @see Cookie\r\n+     *\r\n+     */\r\n+\r\n+    public String getValue() {\r\n+\treturn value;\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     * Returns the version of the protocol this cookie complies \r\n+     * with. Version 1 complies with RFC 2109, \r\n+     * and version 0 complies with the original\r\n+     * cookie specification drafted by Netscape. Cookies provided\r\n+     * by a browser use and identify the browser's cookie version.\r\n+     * \r\n+     *\r\n+     * @return\t\t\t0 if the cookie complies with the\r\n+     *\t\t\t\toriginal Netscape specification; 1\r\n+     *\t\t\t\tif the cookie complies with RFC 2109\r\n+     *\r\n+     * @see #setVersion\r\n+     *\r\n+     */\r\n+\r\n+    public int getVersion() {\r\n+\treturn version;\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     * Sets the version of the cookie protocol this cookie complies\r\n+     * with. Version 0 complies with the original Netscape cookie\r\n+     * specification. Version 1 complies with RFC 2109.\r\n+     *\r\n+     * <p>Since RFC 2109 is still somewhat new, consider\r\n+     * version 1 as experimental; do not use it yet on production sites.\r\n+     *\r\n+     *\r\n+     * @param v\t\t\t0 if the cookie should comply with \r\n+     *\t\t\t\tthe original Netscape specification;\r\n+     *\t\t\t\t1 if the cookie should comply with RFC 2109\r\n+     *\r\n+     * @see #getVersion\r\n+     *\r\n+     */\r\n+\r\n+    public void setVersion(int v) {\r\n+\tversion = v;\r\n+    }\r\n+\r\n+    // Note -- disabled for now to allow full Netscape compatibility\r\n+    // from RFC 2068, token special case characters\r\n+    // \r\n+    // private static final String tspecials = \"()<>@,;:\\\\\\\"/[]?={} \\t\";\r\n+\r\n+    private static final String tspecials = \",; \";\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /*\r\n+     * Tests a string and returns true if the string counts as a \r\n+     * reserved token in the Java language.\r\n+     * \r\n+     * @param value\t\tthe <code>String</code> to be tested\r\n+     *\r\n+     * @return\t\t\t<code>true</code> if the <code>String</code> is\r\n+     *\t\t\t\ta reserved token; <code>false</code>\r\n+     *\t\t\t\tif it is not\t\t\t\r\n+     */\r\n+\r\n+    private boolean isToken(String value) {\r\n+\tint len = value.length();\r\n+\r\n+\tfor (int i = 0; i < len; i++) {\r\n+\t    char c = value.charAt(i);\r\n+\r\n+\t    if (c < 0x20 || c >= 0x7f || tspecials.indexOf(c) != -1)\r\n+\t\treturn false;\r\n+\t}\r\n+\treturn true;\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * Overrides the standard <code>java.lang.Object.clone</code> \r\n+     * method to return a copy of this cookie.\r\n+     *\t\t\r\n+     *\r\n+     */\r\n+\r\n+    public Object clone() {\r\n+\ttry {\r\n+\t    return super.clone();\r\n+\t} catch (CloneNotSupportedException e) {\r\n+\t    throw new RuntimeException(e.getMessage());\r\n+\t}\r\n+    }\r\n+}\r\n+\r"
        },
        {
            "sha": "fd61cf441491e06b34b07245a7dad1e610c66ce4",
            "filename": "java/javax/servlet/http/HttpServlet.java",
            "status": "added",
            "additions": 1018,
            "deletions": 0,
            "changes": 1018,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpServlet.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpServlet.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fhttp%2FHttpServlet.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,1018 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet.http;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.PrintWriter;\r\n+import java.io.OutputStreamWriter;\r\n+import java.io.UnsupportedEncodingException;\r\n+import java.lang.reflect.Method;\r\n+import java.text.MessageFormat;\r\n+import java.util.Enumeration;\r\n+import java.util.Locale;\r\n+import java.util.ResourceBundle;\r\n+\r\n+import javax.servlet.GenericServlet;\r\n+import javax.servlet.ServletException;\r\n+import javax.servlet.ServletOutputStream;\r\n+import javax.servlet.ServletRequest;\r\n+import javax.servlet.ServletResponse;\r\n+\r\n+\r\n+/**\r\n+ *\r\n+ * Provides an abstract class to be subclassed to create\r\n+ * an HTTP servlet suitable for a Web site. A subclass of\r\n+ * <code>HttpServlet</code> must override at least \r\n+ * one method, usually one of these:\r\n+ *\r\n+ * <ul>\r\n+ * <li> <code>doGet</code>, if the servlet supports HTTP GET requests\r\n+ * <li> <code>doPost</code>, for HTTP POST requests\r\n+ * <li> <code>doPut</code>, for HTTP PUT requests\r\n+ * <li> <code>doDelete</code>, for HTTP DELETE requests\r\n+ * <li> <code>init</code> and <code>destroy</code>, \r\n+ * to manage resources that are held for the life of the servlet\r\n+ * <li> <code>getServletInfo</code>, which the servlet uses to\r\n+ * provide information about itself \r\n+ * </ul>\r\n+ *\r\n+ * <p>There's almost no reason to override the <code>service</code>\r\n+ * method. <code>service</code> handles standard HTTP\r\n+ * requests by dispatching them to the handler methods\r\n+ * for each HTTP request type (the <code>do</code><i>XXX</i>\r\n+ * methods listed above).\r\n+ *\r\n+ * <p>Likewise, there's almost no reason to override the \r\n+ * <code>doOptions</code> and <code>doTrace</code> methods.\r\n+ * \r\n+ * <p>Servlets typically run on multithreaded servers,\r\n+ * so be aware that a servlet must handle concurrent\r\n+ * requests and be careful to synchronize access to shared resources.\r\n+ * Shared resources include in-memory data such as\r\n+ * instance or class variables and external objects\r\n+ * such as files, database connections, and network \r\n+ * connections.\r\n+ * See the\r\n+ * <a href=\"http://java.sun.com/Series/Tutorial/java/threads/multithreaded.html\">\r\n+ * Java Tutorial on Multithreaded Programming</a> for more\r\n+ * information on handling multiple threads in a Java program.\r\n+ *\r\n+ * @author\tVarious\r\n+ * @version\t$Version$\r\n+ *\r\n+ */\r\n+\r\n+\r\n+\r\n+public abstract class HttpServlet extends GenericServlet\r\n+    implements java.io.Serializable\r\n+{\r\n+    private static final String METHOD_DELETE = \"DELETE\";\r\n+    private static final String METHOD_HEAD = \"HEAD\";\r\n+    private static final String METHOD_GET = \"GET\";\r\n+    private static final String METHOD_OPTIONS = \"OPTIONS\";\r\n+    private static final String METHOD_POST = \"POST\";\r\n+    private static final String METHOD_PUT = \"PUT\";\r\n+    private static final String METHOD_TRACE = \"TRACE\";\r\n+\r\n+    private static final String HEADER_IFMODSINCE = \"If-Modified-Since\";\r\n+    private static final String HEADER_LASTMOD = \"Last-Modified\";\r\n+    \r\n+    private static final String LSTRING_FILE =\r\n+\t\"javax.servlet.http.LocalStrings\";\r\n+    private static ResourceBundle lStrings =\r\n+\tResourceBundle.getBundle(LSTRING_FILE);\r\n+   \r\n+   \r\n+   \r\n+    \r\n+    /**\r\n+     * Does nothing, because this is an abstract class.\r\n+     * \r\n+     */\r\n+\r\n+    public HttpServlet() { }\r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Called by the server (via the <code>service</code> method) to\r\n+     * allow a servlet to handle a GET request. \r\n+     *\r\n+     * <p>Overriding this method to support a GET request also\r\n+     * automatically supports an HTTP HEAD request. A HEAD\r\n+     * request is a GET request that returns no body in the\r\n+     * response, only the request header fields.\r\n+     *\r\n+     * <p>When overriding this method, read the request data,\r\n+     * write the response headers, get the response's writer or \r\n+     * output stream object, and finally, write the response data.\r\n+     * It's best to include content type and encoding. When using\r\n+     * a <code>PrintWriter</code> object to return the response,\r\n+     * set the content type before accessing the\r\n+     * <code>PrintWriter</code> object.\r\n+     *\r\n+     * <p>The servlet container must write the headers before\r\n+     * committing the response, because in HTTP the headers must be sent\r\n+     * before the response body.\r\n+     *\r\n+     * <p>Where possible, set the Content-Length header (with the\r\n+     * {@link javax.servlet.ServletResponse#setContentLength} method),\r\n+     * to allow the servlet container to use a persistent connection \r\n+     * to return its response to the client, improving performance.\r\n+     * The content length is automatically set if the entire response fits\r\n+     * inside the response buffer.\r\n+     *\r\n+     * <p>When using HTTP 1.1 chunked encoding (which means that the response\r\n+     * has a Transfer-Encoding header), do not set the Content-Length header.\r\n+     *\r\n+     * <p>The GET method should be safe, that is, without\r\n+     * any side effects for which users are held responsible.\r\n+     * For example, most form queries have no side effects.\r\n+     * If a client request is intended to change stored data,\r\n+     * the request should use some other HTTP method.\r\n+     *\r\n+     * <p>The GET method should also be idempotent, meaning\r\n+     * that it can be safely repeated. Sometimes making a\r\n+     * method safe also makes it idempotent. For example, \r\n+     * repeating queries is both safe and idempotent, but\r\n+     * buying a product online or modifying data is neither\r\n+     * safe nor idempotent. \r\n+     *\r\n+     * <p>If the request is incorrectly formatted, <code>doGet</code>\r\n+     * returns an HTTP \"Bad Request\" message.\r\n+     * \r\n+     *\r\n+     * @param req\tan {@link HttpServletRequest} object that\r\n+     *\t\t\tcontains the request the client has made\r\n+     *\t\t\tof the servlet\r\n+     *\r\n+     * @param resp\tan {@link HttpServletResponse} object that\r\n+     *\t\t\tcontains the response the servlet sends\r\n+     *\t\t\tto the client\r\n+     * \r\n+     * @exception IOException\tif an input or output error is \r\n+     *\t\t\t\tdetected when the servlet handles\r\n+     *\t\t\t\tthe GET request\r\n+     *\r\n+     * @exception ServletException\tif the request for the GET\r\n+     *\t\t\t\t\tcould not be handled\r\n+     *\r\n+     * \r\n+     * @see javax.servlet.ServletResponse#setContentType\r\n+     *\r\n+     */\r\n+\r\n+    protected void doGet(HttpServletRequest req, HttpServletResponse resp)\r\n+\tthrows ServletException, IOException\r\n+    {\r\n+\tString protocol = req.getProtocol();\r\n+\tString msg = lStrings.getString(\"http.method_get_not_supported\");\r\n+\tif (protocol.endsWith(\"1.1\")) {\r\n+\t    resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, msg);\r\n+\t} else {\r\n+\t    resp.sendError(HttpServletResponse.SC_BAD_REQUEST, msg);\r\n+\t}\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * Returns the time the <code>HttpServletRequest</code>\r\n+     * object was last modified,\r\n+     * in milliseconds since midnight January 1, 1970 GMT.\r\n+     * If the time is unknown, this method returns a negative\r\n+     * number (the default).\r\n+     *\r\n+     * <p>Servlets that support HTTP GET requests and can quickly determine\r\n+     * their last modification time should override this method.\r\n+     * This makes browser and proxy caches work more effectively,\r\n+     * reducing the load on server and network resources.\r\n+     *\r\n+     *\r\n+     * @param req\tthe <code>HttpServletRequest</code> \r\n+     *\t\t\tobject that is sent to the servlet\r\n+     *\r\n+     * @return\t\ta <code>long</code> integer specifying\r\n+     *\t\t\tthe time the <code>HttpServletRequest</code>\r\n+     *\t\t\tobject was last modified, in milliseconds\r\n+     *\t\t\tsince midnight, January 1, 1970 GMT, or\r\n+     *\t\t\t-1 if the time is not known\r\n+     *\r\n+     */\r\n+\r\n+    protected long getLastModified(HttpServletRequest req) {\r\n+\treturn -1;\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     * \r\n+     *\r\n+     * <p>Receives an HTTP HEAD request from the protected\r\n+     * <code>service</code> method and handles the\r\n+     * request.\r\n+     * The client sends a HEAD request when it wants\r\n+     * to see only the headers of a response, such as\r\n+     * Content-Type or Content-Length. The HTTP HEAD\r\n+     * method counts the output bytes in the response\r\n+     * to set the Content-Length header accurately.\r\n+     *\r\n+     * <p>If you override this method, you can avoid computing\r\n+     * the response body and just set the response headers\r\n+     * directly to improve performance. Make sure that the\r\n+     * <code>doHead</code> method you write is both safe\r\n+     * and idempotent (that is, protects itself from being\r\n+     * called multiple times for one HTTP HEAD request).\r\n+     *\r\n+     * <p>If the HTTP HEAD request is incorrectly formatted,\r\n+     * <code>doHead</code> returns an HTTP \"Bad Request\"\r\n+     * message.\r\n+     *\r\n+     *\r\n+     * @param req\tthe request object that is passed\r\n+     *\t\t\tto the servlet\r\n+     *\t\t\t\r\n+     * @param resp\tthe response object that the servlet\r\n+     *\t\t\tuses to return the headers to the clien\r\n+     *\r\n+     * @exception IOException\t\tif an input or output error occurs\r\n+     *\r\n+     * @exception ServletException\tif the request for the HEAD\r\n+     *\t\t\t\t\tcould not be handled\r\n+     */\r\n+\r\n+    protected void doHead(HttpServletRequest req, HttpServletResponse resp)\r\n+\tthrows ServletException, IOException\r\n+    {\r\n+\tNoBodyResponse response = new NoBodyResponse(resp);\r\n+\t\r\n+\tdoGet(req, response);\r\n+\tresponse.setContentLength();\r\n+    }\r\n+    \r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * Called by the server (via the <code>service</code> method)\r\n+     * to allow a servlet to handle a POST request.\r\n+     *\r\n+     * The HTTP POST method allows the client to send\r\n+     * data of unlimited length to the Web server a single time\r\n+     * and is useful when posting information such as\r\n+     * credit card numbers.\r\n+     *\r\n+     * <p>When overriding this method, read the request data,\r\n+     * write the response headers, get the response's writer or output\r\n+     * stream object, and finally, write the response data. It's best \r\n+     * to include content type and encoding. When using a\r\n+     * <code>PrintWriter</code> object to return the response, set the \r\n+     * content type before accessing the <code>PrintWriter</code> object. \r\n+     *\r\n+     * <p>The servlet container must write the headers before committing the\r\n+     * response, because in HTTP the headers must be sent before the \r\n+     * response body.\r\n+     *\r\n+     * <p>Where possible, set the Content-Length header (with the\r\n+     * {@link javax.servlet.ServletResponse#setContentLength} method),\r\n+     * to allow the servlet container to use a persistent connection \r\n+     * to return its response to the client, improving performance.\r\n+     * The content length is automatically set if the entire response fits\r\n+     * inside the response buffer.  \r\n+     *\r\n+     * <p>When using HTTP 1.1 chunked encoding (which means that the response\r\n+     * has a Transfer-Encoding header), do not set the Content-Length header. \r\n+     *\r\n+     * <p>This method does not need to be either safe or idempotent.\r\n+     * Operations requested through POST can have side effects for\r\n+     * which the user can be held accountable, for example, \r\n+     * updating stored data or buying items online.\r\n+     *\r\n+     * <p>If the HTTP POST request is incorrectly formatted,\r\n+     * <code>doPost</code> returns an HTTP \"Bad Request\" message.\r\n+     *\r\n+     *\r\n+     * @param req\tan {@link HttpServletRequest} object that\r\n+     *\t\t\tcontains the request the client has made\r\n+     *\t\t\tof the servlet\r\n+     *\r\n+     * @param resp\tan {@link HttpServletResponse} object that\r\n+     *\t\t\tcontains the response the servlet sends\r\n+     *\t\t\tto the client\r\n+     * \r\n+     * @exception IOException\tif an input or output error is \r\n+     *\t\t\t\tdetected when the servlet handles\r\n+     *\t\t\t\tthe request\r\n+     *\r\n+     * @exception ServletException\tif the request for the POST\r\n+     *\t\t\t\t\tcould not be handled\r\n+     *\r\n+     *\r\n+     * @see javax.servlet.ServletOutputStream\r\n+     * @see javax.servlet.ServletResponse#setContentType\r\n+     *\r\n+     *\r\n+     */\r\n+\r\n+    protected void doPost(HttpServletRequest req, HttpServletResponse resp)\r\n+\tthrows ServletException, IOException\r\n+    {\r\n+\tString protocol = req.getProtocol();\r\n+\tString msg = lStrings.getString(\"http.method_post_not_supported\");\r\n+\tif (protocol.endsWith(\"1.1\")) {\r\n+\t    resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, msg);\r\n+\t} else {\r\n+\t    resp.sendError(HttpServletResponse.SC_BAD_REQUEST, msg);\r\n+\t}\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     * Called by the server (via the <code>service</code> method)\r\n+     * to allow a servlet to handle a PUT request.\r\n+     *\r\n+     * The PUT operation allows a client to \r\n+     * place a file on the server and is similar to \r\n+     * sending a file by FTP.\r\n+     *\r\n+     * <p>When overriding this method, leave intact\r\n+     * any content headers sent with the request (including\r\n+     * Content-Length, Content-Type, Content-Transfer-Encoding,\r\n+     * Content-Encoding, Content-Base, Content-Language, Content-Location,\r\n+     * Content-MD5, and Content-Range). If your method cannot\r\n+     * handle a content header, it must issue an error message\r\n+     * (HTTP 501 - Not Implemented) and discard the request.\r\n+     * For more information on HTTP 1.1, see RFC 2616\r\n+     * <a href=\"http://www.ietf.org/rfc/rfc2616.txt\"></a>.\r\n+     *\r\n+     * <p>This method does not need to be either safe or idempotent.\r\n+     * Operations that <code>doPut</code> performs can have side\r\n+     * effects for which the user can be held accountable. When using\r\n+     * this method, it may be useful to save a copy of the\r\n+     * affected URL in temporary storage.\r\n+     *\r\n+     * <p>If the HTTP PUT request is incorrectly formatted,\r\n+     * <code>doPut</code> returns an HTTP \"Bad Request\" message.\r\n+     *\r\n+     *\r\n+     * @param req\tthe {@link HttpServletRequest} object that\r\n+     *\t\t\tcontains the request the client made of\r\n+     *\t\t\tthe servlet\r\n+     *\r\n+     * @param resp\tthe {@link HttpServletResponse} object that\r\n+     *\t\t\tcontains the response the servlet returns\r\n+     *\t\t\tto the client\r\n+     *\r\n+     * @exception IOException\tif an input or output error occurs\r\n+     *\t\t\t\twhile the servlet is handling the\r\n+     *\t\t\t\tPUT request\r\n+     *\r\n+     * @exception ServletException\tif the request for the PUT\r\n+     *\t\t\t\t\tcannot be handled\r\n+     *\r\n+     */\r\n+  \r\n+    protected void doPut(HttpServletRequest req, HttpServletResponse resp)\r\n+\tthrows ServletException, IOException\r\n+    {\r\n+\tString protocol = req.getProtocol();\r\n+\tString msg = lStrings.getString(\"http.method_put_not_supported\");\r\n+\tif (protocol.endsWith(\"1.1\")) {\r\n+\t    resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, msg);\r\n+\t} else {\r\n+\t    resp.sendError(HttpServletResponse.SC_BAD_REQUEST, msg);\r\n+\t}\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     * \r\n+     * Called by the server (via the <code>service</code> method)\r\n+     * to allow a servlet to handle a DELETE request.\r\n+     *\r\n+     * The DELETE operation allows a client to remove a document\r\n+     * or Web page from the server.\r\n+     * \r\n+     * <p>This method does not need to be either safe\r\n+     * or idempotent. Operations requested through\r\n+     * DELETE can have side effects for which users\r\n+     * can be held accountable. When using\r\n+     * this method, it may be useful to save a copy of the\r\n+     * affected URL in temporary storage.\r\n+     *\r\n+     * <p>If the HTTP DELETE request is incorrectly formatted,\r\n+     * <code>doDelete</code> returns an HTTP \"Bad Request\"\r\n+     * message.\r\n+     *\r\n+     *\r\n+     * @param req\tthe {@link HttpServletRequest} object that\r\n+     *\t\t\tcontains the request the client made of\r\n+     *\t\t\tthe servlet\r\n+     *\r\n+     *\r\n+     * @param resp\tthe {@link HttpServletResponse} object that\r\n+     *\t\t\tcontains the response the servlet returns\r\n+     *\t\t\tto the client\t\t\t\t\r\n+     *\r\n+     *\r\n+     * @exception IOException\tif an input or output error occurs\r\n+     *\t\t\t\twhile the servlet is handling the\r\n+     *\t\t\t\tDELETE request\r\n+     *\r\n+     * @exception ServletException\tif the request for the\r\n+     *\t\t\t\t\tDELETE cannot be handled\r\n+     *\r\n+     */\r\n+     \r\n+    protected void doDelete(HttpServletRequest req,\r\n+\t\t\t    HttpServletResponse resp)\r\n+\tthrows ServletException, IOException\r\n+    {\r\n+\tString protocol = req.getProtocol();\r\n+\tString msg = lStrings.getString(\"http.method_delete_not_supported\");\r\n+\tif (protocol.endsWith(\"1.1\")) {\r\n+\t    resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, msg);\r\n+\t} else {\r\n+\t    resp.sendError(HttpServletResponse.SC_BAD_REQUEST, msg);\r\n+\t}\r\n+    }\r\n+    \r\n+\r\n+    private static Method[] getAllDeclaredMethods(Class c) {\r\n+\r\n+        if (c.equals(javax.servlet.http.HttpServlet.class)) {\r\n+            return null;\r\n+        }\r\n+\r\n+        Method[] parentMethods = getAllDeclaredMethods(c.getSuperclass());\r\n+        Method[] thisMethods = c.getDeclaredMethods();\r\n+\t\r\n+        if ((parentMethods != null) && (parentMethods.length > 0)) {\r\n+            Method[] allMethods =\r\n+                new Method[parentMethods.length + thisMethods.length];\r\n+\t    System.arraycopy(parentMethods, 0, allMethods, 0,\r\n+                             parentMethods.length);\r\n+\t    System.arraycopy(thisMethods, 0, allMethods, parentMethods.length,\r\n+                             thisMethods.length);\r\n+\r\n+\t    thisMethods = allMethods;\r\n+\t}\r\n+\r\n+\treturn thisMethods;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Called by the server (via the <code>service</code> method)\r\n+     * to allow a servlet to handle a OPTIONS request.\r\n+     *\r\n+     * The OPTIONS request determines which HTTP methods \r\n+     * the server supports and\r\n+     * returns an appropriate header. For example, if a servlet\r\n+     * overrides <code>doGet</code>, this method returns the\r\n+     * following header:\r\n+     *\r\n+     * <p><code>Allow: GET, HEAD, TRACE, OPTIONS</code>\r\n+     *\r\n+     * <p>There's no need to override this method unless the\r\n+     * servlet implements new HTTP methods, beyond those \r\n+     * implemented by HTTP 1.1.\r\n+     *\r\n+     * @param req\tthe {@link HttpServletRequest} object that\r\n+     *\t\t\tcontains the request the client made of\r\n+     *\t\t\tthe servlet\r\n+     *\r\n+     *\r\n+     * @param resp\tthe {@link HttpServletResponse} object that\r\n+     *\t\t\tcontains the response the servlet returns\r\n+     *\t\t\tto the client\t\t\t\t\r\n+     *\r\n+     *\r\n+     * @exception IOException\tif an input or output error occurs\r\n+     *\t\t\t\twhile the servlet is handling the\r\n+     *\t\t\t\tOPTIONS request\r\n+     *\r\n+     * @exception ServletException\tif the request for the\r\n+     *\t\t\t\t\tOPTIONS cannot be handled\r\n+     *\r\n+     */\r\n+         \r\n+    protected void doOptions(HttpServletRequest req, HttpServletResponse resp)\r\n+\tthrows ServletException, IOException\r\n+    {\r\n+\tMethod[] methods = getAllDeclaredMethods(this.getClass());\r\n+\t\r\n+\tboolean ALLOW_GET = false;\r\n+\tboolean ALLOW_HEAD = false;\r\n+\tboolean ALLOW_POST = false;\r\n+\tboolean ALLOW_PUT = false;\r\n+\tboolean ALLOW_DELETE = false;\r\n+\tboolean ALLOW_TRACE = true;\r\n+\tboolean ALLOW_OPTIONS = true;\r\n+\t\r\n+\tfor (int i=0; i<methods.length; i++) {\r\n+\t    Method m = methods[i];\r\n+\t    \r\n+\t    if (m.getName().equals(\"doGet\")) {\r\n+\t\tALLOW_GET = true;\r\n+\t\tALLOW_HEAD = true;\r\n+\t    }\r\n+\t    if (m.getName().equals(\"doPost\")) \r\n+\t\tALLOW_POST = true;\r\n+\t    if (m.getName().equals(\"doPut\"))\r\n+\t\tALLOW_PUT = true;\r\n+\t    if (m.getName().equals(\"doDelete\"))\r\n+\t\tALLOW_DELETE = true;\r\n+\t    \r\n+\t}\r\n+\t\r\n+\tString allow = null;\r\n+\tif (ALLOW_GET)\r\n+\t    if (allow==null) allow=METHOD_GET;\r\n+\tif (ALLOW_HEAD)\r\n+\t    if (allow==null) allow=METHOD_HEAD;\r\n+\t    else allow += \", \" + METHOD_HEAD;\r\n+\tif (ALLOW_POST)\r\n+\t    if (allow==null) allow=METHOD_POST;\r\n+\t    else allow += \", \" + METHOD_POST;\r\n+\tif (ALLOW_PUT)\r\n+\t    if (allow==null) allow=METHOD_PUT;\r\n+\t    else allow += \", \" + METHOD_PUT;\r\n+\tif (ALLOW_DELETE)\r\n+\t    if (allow==null) allow=METHOD_DELETE;\r\n+\t    else allow += \", \" + METHOD_DELETE;\r\n+\tif (ALLOW_TRACE)\r\n+\t    if (allow==null) allow=METHOD_TRACE;\r\n+\t    else allow += \", \" + METHOD_TRACE;\r\n+\tif (ALLOW_OPTIONS)\r\n+\t    if (allow==null) allow=METHOD_OPTIONS;\r\n+\t    else allow += \", \" + METHOD_OPTIONS;\r\n+\t\r\n+\tresp.setHeader(\"Allow\", allow);\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+    \r\n+    /**\r\n+     * Called by the server (via the <code>service</code> method)\r\n+     * to allow a servlet to handle a TRACE request.\r\n+     *\r\n+     * A TRACE returns the headers sent with the TRACE\r\n+     * request to the client, so that they can be used in\r\n+     * debugging. There's no need to override this method. \r\n+     *\r\n+     *\r\n+     *\r\n+     * @param req\tthe {@link HttpServletRequest} object that\r\n+     *\t\t\tcontains the request the client made of\r\n+     *\t\t\tthe servlet\r\n+     *\r\n+     *\r\n+     * @param resp\tthe {@link HttpServletResponse} object that\r\n+     *\t\t\tcontains the response the servlet returns\r\n+     *\t\t\tto the client\t\t\t\t\r\n+     *\r\n+     *\r\n+     * @exception IOException\tif an input or output error occurs\r\n+     *\t\t\t\twhile the servlet is handling the\r\n+     *\t\t\t\tTRACE request\r\n+     *\r\n+     * @exception ServletException\tif the request for the\r\n+     *\t\t\t\t\tTRACE cannot be handled\r\n+     *\r\n+     */\r\n+\r\n+    protected void doTrace(HttpServletRequest req, HttpServletResponse resp) \r\n+\tthrows ServletException, IOException\r\n+    {\r\n+\t\r\n+\tint responseLength;\r\n+\t\r\n+\tString CRLF = \"\\r\\n\";\r\n+\tString responseString = \"TRACE \"+ req.getRequestURI()+\r\n+\t    \" \" + req.getProtocol();\r\n+\t\r\n+\tEnumeration reqHeaderEnum = req.getHeaderNames();\r\n+\t\r\n+\twhile( reqHeaderEnum.hasMoreElements() ) {\r\n+\t    String headerName = (String)reqHeaderEnum.nextElement();\r\n+\t    responseString += CRLF + headerName + \": \" +\r\n+\t\treq.getHeader(headerName); \r\n+\t}\r\n+\t\r\n+\tresponseString += CRLF;\r\n+\t\r\n+\tresponseLength = responseString.length();\r\n+\t\r\n+\tresp.setContentType(\"message/http\");\r\n+\tresp.setContentLength(responseLength);\r\n+\tServletOutputStream out = resp.getOutputStream();\r\n+\tout.print(responseString);\t\r\n+\tout.close();\r\n+\treturn;\r\n+    }\t\t\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * Receives standard HTTP requests from the public\r\n+     * <code>service</code> method and dispatches\r\n+     * them to the <code>do</code><i>XXX</i> methods defined in \r\n+     * this class. This method is an HTTP-specific version of the \r\n+     * {@link javax.servlet.Servlet#service} method. There's no\r\n+     * need to override this method.\r\n+     *\r\n+     *\r\n+     *\r\n+     * @param req\tthe {@link HttpServletRequest} object that\r\n+     *\t\t\tcontains the request the client made of\r\n+     *\t\t\tthe servlet\r\n+     *\r\n+     *\r\n+     * @param resp\tthe {@link HttpServletResponse} object that\r\n+     *\t\t\tcontains the response the servlet returns\r\n+     *\t\t\tto the client\t\t\t\t\r\n+     *\r\n+     *\r\n+     * @exception IOException\tif an input or output error occurs\r\n+     *\t\t\t\twhile the servlet is handling the\r\n+     *\t\t\t\tHTTP request\r\n+     *\r\n+     * @exception ServletException\tif the HTTP request\r\n+     *\t\t\t\t\tcannot be handled\r\n+     * \r\n+     * @see \t\t\t\tjavax.servlet.Servlet#service\r\n+     *\r\n+     */\r\n+\r\n+    protected void service(HttpServletRequest req, HttpServletResponse resp)\r\n+\tthrows ServletException, IOException\r\n+    {\r\n+\tString method = req.getMethod();\r\n+\r\n+\tif (method.equals(METHOD_GET)) {\r\n+\t    long lastModified = getLastModified(req);\r\n+\t    if (lastModified == -1) {\r\n+\t\t// servlet doesn't support if-modified-since, no reason\r\n+\t\t// to go through further expensive logic\r\n+\t\tdoGet(req, resp);\r\n+\t    } else {\r\n+\t\tlong ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);\r\n+\t\tif (ifModifiedSince < (lastModified / 1000 * 1000)) {\r\n+\t\t    // If the servlet mod time is later, call doGet()\r\n+                    // Round down to the nearest second for a proper compare\r\n+                    // A ifModifiedSince of -1 will always be less\r\n+\t\t    maybeSetLastModified(resp, lastModified);\r\n+\t\t    doGet(req, resp);\r\n+\t\t} else {\r\n+\t\t    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\r\n+\t\t}\r\n+\t    }\r\n+\r\n+\t} else if (method.equals(METHOD_HEAD)) {\r\n+\t    long lastModified = getLastModified(req);\r\n+\t    maybeSetLastModified(resp, lastModified);\r\n+\t    doHead(req, resp);\r\n+\r\n+\t} else if (method.equals(METHOD_POST)) {\r\n+\t    doPost(req, resp);\r\n+\t    \r\n+\t} else if (method.equals(METHOD_PUT)) {\r\n+\t    doPut(req, resp);\t\r\n+\t    \r\n+\t} else if (method.equals(METHOD_DELETE)) {\r\n+\t    doDelete(req, resp);\r\n+\t    \r\n+\t} else if (method.equals(METHOD_OPTIONS)) {\r\n+\t    doOptions(req,resp);\r\n+\t    \r\n+\t} else if (method.equals(METHOD_TRACE)) {\r\n+\t    doTrace(req,resp);\r\n+\t    \r\n+\t} else {\r\n+\t    //\r\n+\t    // Note that this means NO servlet supports whatever\r\n+\t    // method was requested, anywhere on this server.\r\n+\t    //\r\n+\r\n+\t    String errMsg = lStrings.getString(\"http.method_not_implemented\");\r\n+\t    Object[] errArgs = new Object[1];\r\n+\t    errArgs[0] = method;\r\n+\t    errMsg = MessageFormat.format(errMsg, errArgs);\r\n+\t    \r\n+\t    resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);\r\n+\t}\r\n+    }\r\n+    \r\n+\r\n+\r\n+\r\n+\r\n+    /*\r\n+     * Sets the Last-Modified entity header field, if it has not\r\n+     * already been set and if the value is meaningful.  Called before\r\n+     * doGet, to ensure that headers are set before response data is\r\n+     * written.  A subclass might have set this header already, so we\r\n+     * check.\r\n+     */\r\n+\r\n+    private void maybeSetLastModified(HttpServletResponse resp,\r\n+\t\t\t\t      long lastModified) {\r\n+\tif (resp.containsHeader(HEADER_LASTMOD))\r\n+\t    return;\r\n+\tif (lastModified >= 0)\r\n+\t    resp.setDateHeader(HEADER_LASTMOD, lastModified);\r\n+    }\r\n+   \r\n+   \r\n+   \r\n+    \r\n+    /**\r\n+     *\r\n+     * Dispatches client requests to the protected\r\n+     * <code>service</code> method. There's no need to\r\n+     * override this method.\r\n+     *\r\n+     * \r\n+     * @param req\tthe {@link HttpServletRequest} object that\r\n+     *\t\t\tcontains the request the client made of\r\n+     *\t\t\tthe servlet\r\n+     *\r\n+     *\r\n+     * @param res\tthe {@link HttpServletResponse} object that\r\n+     *\t\t\tcontains the response the servlet returns\r\n+     *\t\t\tto the client\t\t\t\t\r\n+     *\r\n+     *\r\n+     * @exception IOException\tif an input or output error occurs\r\n+     *\t\t\t\twhile the servlet is handling the\r\n+     *\t\t\t\tHTTP request\r\n+     *\r\n+     * @exception ServletException\tif the HTTP request cannot\r\n+     *\t\t\t\t\tbe handled\r\n+     *\r\n+     * \r\n+     * @see javax.servlet.Servlet#service\r\n+     *\r\n+     */\r\n+\r\n+    public void service(ServletRequest req, ServletResponse res)\r\n+\tthrows ServletException, IOException\r\n+    {\r\n+\tHttpServletRequest\trequest;\r\n+\tHttpServletResponse\tresponse;\r\n+\t\r\n+\ttry {\r\n+\t    request = (HttpServletRequest) req;\r\n+\t    response = (HttpServletResponse) res;\r\n+\t} catch (ClassCastException e) {\r\n+\t    throw new ServletException(\"non-HTTP request or response\");\r\n+\t}\r\n+\tservice(request, response);\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+/*\r\n+ * A response that includes no body, for use in (dumb) \"HEAD\" support.\r\n+ * This just swallows that body, counting the bytes in order to set\r\n+ * the content length appropriately.  All other methods delegate directly\r\n+ * to the HTTP Servlet Response object used to construct this one.\r\n+ */\r\n+// file private\r\n+class NoBodyResponse implements HttpServletResponse {\r\n+    private HttpServletResponse\t\tresp;\r\n+    private NoBodyOutputStream\t\tnoBody;\r\n+    private PrintWriter\t\t\twriter;\r\n+    private boolean\t\t\tdidSetContentLength;\r\n+\r\n+    // file private\r\n+    NoBodyResponse(HttpServletResponse r) {\r\n+\tresp = r;\r\n+\tnoBody = new NoBodyOutputStream();\r\n+    }\r\n+\r\n+    // file private\r\n+    void setContentLength() {\r\n+\tif (!didSetContentLength)\r\n+\t  resp.setContentLength(noBody.getContentLength());\r\n+    }\r\n+\r\n+\r\n+    // SERVLET RESPONSE interface methods\r\n+\r\n+    public void setContentLength(int len) {\r\n+\tresp.setContentLength(len);\r\n+\tdidSetContentLength = true;\r\n+    }\r\n+\r\n+    public void setCharacterEncoding(String charset)\r\n+      { resp.setCharacterEncoding(charset); }\r\n+\r\n+    public void setContentType(String type)\r\n+      { resp.setContentType(type); }\r\n+\r\n+    public String getContentType()\r\n+      { return resp.getContentType(); }\r\n+\r\n+    public ServletOutputStream getOutputStream() throws IOException\r\n+      { return noBody; }\r\n+\r\n+    public String getCharacterEncoding()\r\n+\t{ return resp.getCharacterEncoding(); }\r\n+\r\n+    public PrintWriter getWriter() throws UnsupportedEncodingException\r\n+    {\r\n+\tif (writer == null) {\r\n+\t    OutputStreamWriter\tw;\r\n+\r\n+\t    w = new OutputStreamWriter(noBody, getCharacterEncoding());\r\n+\t    writer = new PrintWriter(w);\r\n+\t}\r\n+\treturn writer;\r\n+    }\r\n+\r\n+    public void setBufferSize(int size) throws IllegalStateException\r\n+      { resp.setBufferSize(size); }\r\n+\r\n+    public int getBufferSize()\r\n+      { return resp.getBufferSize(); }\r\n+\r\n+    public void reset() throws IllegalStateException\r\n+      { resp.reset(); }\r\n+      \r\n+      public void resetBuffer() throws IllegalStateException\r\n+      { resp.resetBuffer(); }\r\n+\r\n+    public boolean isCommitted()\r\n+      { return resp.isCommitted(); }\r\n+\r\n+    public void flushBuffer() throws IOException\r\n+      { resp.flushBuffer(); }\r\n+\r\n+    public void setLocale(Locale loc)\r\n+      { resp.setLocale(loc); }\r\n+\r\n+    public Locale getLocale()\r\n+      { return resp.getLocale(); }\r\n+\r\n+\r\n+    // HTTP SERVLET RESPONSE interface methods\r\n+\r\n+    public void addCookie(Cookie cookie)\r\n+      { resp.addCookie(cookie); }\r\n+\r\n+    public boolean containsHeader(String name)\r\n+      { return resp.containsHeader(name); }\r\n+\r\n+    /** @deprecated */\r\n+    public void setStatus(int sc, String sm)\r\n+      { resp.setStatus(sc, sm); }\r\n+\r\n+    public void setStatus(int sc)\r\n+      { resp.setStatus(sc); }\r\n+\r\n+    public void setHeader(String name, String value)\r\n+      { resp.setHeader(name, value); }\r\n+\r\n+    public void setIntHeader(String name, int value)\r\n+      { resp.setIntHeader(name, value); }\r\n+\r\n+    public void setDateHeader(String name, long date)\r\n+      { resp.setDateHeader(name, date); }\r\n+\r\n+    public void sendError(int sc, String msg) throws IOException\r\n+      { resp.sendError(sc, msg); }\r\n+\r\n+    public void sendError(int sc) throws IOException\r\n+      { resp.sendError(sc); }\r\n+\r\n+    public void sendRedirect(String location) throws IOException\r\n+      { resp.sendRedirect(location); }\r\n+    \r\n+    public String encodeURL(String url) \r\n+      { return resp.encodeURL(url); }\r\n+\r\n+    public String encodeRedirectURL(String url)\r\n+      { return resp.encodeRedirectURL(url); }\r\n+      \r\n+    public void addHeader(String name, String value)\r\n+      { resp.addHeader(name, value); }\r\n+      \r\n+    public void addDateHeader(String name, long value)\r\n+      { resp.addDateHeader(name, value); }\r\n+      \r\n+    public void addIntHeader(String name, int value)\r\n+      { resp.addIntHeader(name, value); }\r\n+      \r\n+      \r\n+      \r\n+\r\n+    /**\r\n+     * @deprecated\tAs of Version 2.1, replaced by\r\n+     * \t\t\t{@link HttpServletResponse#encodeURL}.\r\n+     *\r\n+     */\r\n+     \r\n+     \r\n+    public String encodeUrl(String url) \r\n+      { return this.encodeURL(url); }\r\n+      \r\n+      \r\n+      \r\n+      \r\n+      \r\n+      \r\n+      \r\n+\r\n+    /**\r\n+     * @deprecated\tAs of Version 2.1, replaced by\r\n+     *\t\t\t{@link HttpServletResponse#encodeRedirectURL}.\r\n+     *\r\n+     */\r\n+     \r\n+     \r\n+    public String encodeRedirectUrl(String url)\r\n+      { return this.encodeRedirectURL(url); }\r\n+\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+/*\r\n+ * Servlet output stream that gobbles up all its data.\r\n+ */\r\n+ \r\n+// file private\r\n+class NoBodyOutputStream extends ServletOutputStream {\r\n+\r\n+    private static final String LSTRING_FILE =\r\n+\t\"javax.servlet.http.LocalStrings\";\r\n+    private static ResourceBundle lStrings =\r\n+\tResourceBundle.getBundle(LSTRING_FILE);\r\n+\r\n+    private int\t\tcontentLength = 0;\r\n+\r\n+    // file private\r\n+    NoBodyOutputStream() {}\r\n+\r\n+    // file private\r\n+    int getContentLength() {\r\n+\treturn contentLength;\r\n+    }\r\n+\r\n+    public void write(int b) {\r\n+\tcontentLength++;\r\n+    }\r\n+\r\n+    public void write(byte buf[], int offset, int len)\r\n+\tthrows IOException\r\n+    {\r\n+\tif (len >= 0) {\r\n+\t    contentLength += len;\r\n+\t} else {\r\n+\t    // XXX\r\n+\t    // isn't this really an IllegalArgumentException?\r\n+\t    \r\n+\t    String msg = lStrings.getString(\"err.io.negativelength\");\r\n+\t    throw new IOException(\"negative length\");\r\n+\t}\r\n+    }\r\n+}\r"
        },
        {
            "sha": "7d3a7ecdeeae1a6f25df3ef3f3fc5561e9b210a0",
            "filename": "java/javax/servlet/http/HttpServletRequest.java",
            "status": "added",
            "additions": 660,
            "deletions": 0,
            "changes": 660,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpServletRequest.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpServletRequest.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fhttp%2FHttpServletRequest.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,660 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+\r\n+package javax.servlet.http;\r\n+\r\n+import javax.servlet.ServletRequest;\r\n+import java.util.Enumeration;\r\n+\r\n+/**\r\n+ *\r\n+ * Extends the {@link javax.servlet.ServletRequest} interface\r\n+ * to provide request information for HTTP servlets. \r\n+ *\r\n+ * <p>The servlet container creates an <code>HttpServletRequest</code> \r\n+ * object and passes it as an argument to the servlet's service\r\n+ * methods (<code>doGet</code>, <code>doPost</code>, etc).\r\n+ *\r\n+ *\r\n+ * @author \tVarious\r\n+ * @version\t$Version$\r\n+ *\r\n+ *\r\n+ */\r\n+\r\n+public interface HttpServletRequest extends ServletRequest {\r\n+\r\n+    /**\r\n+    * String identifier for Basic authentication. Value \"BASIC\"\r\n+    */\r\n+    public static final String BASIC_AUTH = \"BASIC\";\r\n+    /**\r\n+    * String identifier for Form authentication. Value \"FORM\"\r\n+    */\r\n+    public static final String FORM_AUTH = \"FORM\";\r\n+    /**\r\n+    * String identifier for Client Certificate authentication. Value \"CLIENT_CERT\"\r\n+    */\r\n+    public static final String CLIENT_CERT_AUTH = \"CLIENT_CERT\";\r\n+    /**\r\n+    * String identifier for Digest authentication. Value \"DIGEST\"\r\n+    */\r\n+    public static final String DIGEST_AUTH = \"DIGEST\";\r\n+\r\n+    /**\r\n+     * Returns the name of the authentication scheme used to protect\r\n+     * the servlet. All servlet containers support basic, form and client \r\n+     * certificate authentication, and may additionally support digest \r\n+     * authentication.\r\n+     * If the servlet is not authenticated <code>null</code> is returned. \r\n+     *\r\n+     * <p>Same as the value of the CGI variable AUTH_TYPE.\r\n+     *\r\n+     *\r\n+     * @return\t\tone of the static members BASIC_AUTH, \r\n+     *\t\t\tFORM_AUTH, CLIENT_CERT_AUTH, DIGEST_AUTH\r\n+     *\t\t\t(suitable for == comparison) or\r\n+     *\t\t\tthe container-specific string indicating\r\n+     *\t\t\tthe authentication scheme, or\r\n+     *\t\t\t<code>null</code> if the request was \r\n+     *\t\t\tnot authenticated.     \r\n+     *\r\n+     */\r\n+   \r\n+    public String getAuthType();\r\n+    \r\n+   \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Returns an array containing all of the <code>Cookie</code>\r\n+     * objects the client sent with this request.\r\n+     * This method returns <code>null</code> if no cookies were sent.\r\n+     *\r\n+     * @return\t\tan array of all the <code>Cookies</code>\r\n+     *\t\t\tincluded with this request, or <code>null</code>\r\n+     *\t\t\tif the request has no cookies\r\n+     *\r\n+     *\r\n+     */\r\n+\r\n+    public Cookie[] getCookies();\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Returns the value of the specified request header\r\n+     * as a <code>long</code> value that represents a \r\n+     * <code>Date</code> object. Use this method with\r\n+     * headers that contain dates, such as\r\n+     * <code>If-Modified-Since</code>. \r\n+     *\r\n+     * <p>The date is returned as\r\n+     * the number of milliseconds since January 1, 1970 GMT.\r\n+     * The header name is case insensitive.\r\n+     *\r\n+     * <p>If the request did not have a header of the\r\n+     * specified name, this method returns -1. If the header\r\n+     * can't be converted to a date, the method throws\r\n+     * an <code>IllegalArgumentException</code>.\r\n+     *\r\n+     * @param name\t\ta <code>String</code> specifying the\r\n+     *\t\t\t\tname of the header\r\n+     *\r\n+     * @return\t\t\ta <code>long</code> value\r\n+     *\t\t\t\trepresenting the date specified\r\n+     *\t\t\t\tin the header expressed as\r\n+     *\t\t\t\tthe number of milliseconds\r\n+     *\t\t\t\tsince January 1, 1970 GMT,\r\n+     *\t\t\t\tor -1 if the named header\r\n+     *\t\t\t\twas not included with the\r\n+     *\t\t\t\trequest\r\n+     *\r\n+     * @exception\tIllegalArgumentException\tIf the header value\r\n+     *\t\t\t\t\t\t\tcan't be converted\r\n+     *\t\t\t\t\t\t\tto a date\r\n+     *\r\n+     */\r\n+\r\n+    public long getDateHeader(String name);\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Returns the value of the specified request header\r\n+     * as a <code>String</code>. If the request did not include a header\r\n+     * of the specified name, this method returns <code>null</code>.\r\n+     * If there are multiple headers with the same name, this method\r\n+     * returns the first head in the request.\r\n+     * The header name is case insensitive. You can use\r\n+     * this method with any request header.\r\n+     *\r\n+     * @param name\t\ta <code>String</code> specifying the\r\n+     *\t\t\t\theader name\r\n+     *\r\n+     * @return\t\t\ta <code>String</code> containing the\r\n+     *\t\t\t\tvalue of the requested\r\n+     *\t\t\t\theader, or <code>null</code>\r\n+     *\t\t\t\tif the request does not\r\n+     *\t\t\t\thave a header of that name\r\n+     *\r\n+     */\t\t\t\r\n+\r\n+    public String getHeader(String name); \r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * Returns all the values of the specified request header\r\n+     * as an <code>Enumeration</code> of <code>String</code> objects.\r\n+     *\r\n+     * <p>Some headers, such as <code>Accept-Language</code> can be sent\r\n+     * by clients as several headers each with a different value rather than\r\n+     * sending the header as a comma separated list.\r\n+     *\r\n+     * <p>If the request did not include any headers\r\n+     * of the specified name, this method returns an empty\r\n+     * <code>Enumeration</code>.\r\n+     * The header name is case insensitive. You can use\r\n+     * this method with any request header.\r\n+     *\r\n+     * @param name\t\ta <code>String</code> specifying the\r\n+     *\t\t\t\theader name\r\n+     *\r\n+     * @return\t\t\tan <code>Enumeration</code> containing\r\n+     *                  \tthe values of the requested header. If\r\n+     *                  \tthe request does not have any headers of\r\n+     *                  \tthat name return an empty\r\n+     *                  \tenumeration. If \r\n+     *                  \tthe container does not allow access to\r\n+     *                  \theader information, return null\r\n+     *\r\n+     */\t\t\t\r\n+\r\n+    public Enumeration getHeaders(String name); \r\n+    \r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Returns an enumeration of all the header names\r\n+     * this request contains. If the request has no\r\n+     * headers, this method returns an empty enumeration.\r\n+     *\r\n+     * <p>Some servlet containers do not allow\r\n+     * servlets to access headers using this method, in\r\n+     * which case this method returns <code>null</code>\r\n+     *\r\n+     * @return\t\t\tan enumeration of all the\r\n+     *\t\t\t\theader names sent with this\r\n+     *\t\t\t\trequest; if the request has\r\n+     *\t\t\t\tno headers, an empty enumeration;\r\n+     *\t\t\t\tif the servlet container does not\r\n+     *\t\t\t\tallow servlets to use this method,\r\n+     *\t\t\t\t<code>null</code>\r\n+     *\t\t\t\t\r\n+     *\r\n+     */\r\n+\r\n+    public Enumeration getHeaderNames();\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Returns the value of the specified request header\r\n+     * as an <code>int</code>. If the request does not have a header\r\n+     * of the specified name, this method returns -1. If the\r\n+     * header cannot be converted to an integer, this method\r\n+     * throws a <code>NumberFormatException</code>.\r\n+     *\r\n+     * <p>The header name is case insensitive.\r\n+     *\r\n+     * @param name\t\ta <code>String</code> specifying the name\r\n+     *\t\t\t\tof a request header\r\n+     *\r\n+     * @return\t\t\tan integer expressing the value \r\n+     * \t\t\t\tof the request header or -1\r\n+     *\t\t\t\tif the request doesn't have a\r\n+     *\t\t\t\theader of this name\r\n+     *\r\n+     * @exception\tNumberFormatException\t\tIf the header value\r\n+     *\t\t\t\t\t\t\tcan't be converted\r\n+     *\t\t\t\t\t\t\tto an <code>int</code>\r\n+     */\r\n+\r\n+    public int getIntHeader(String name);\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Returns the name of the HTTP method with which this \r\n+     * request was made, for example, GET, POST, or PUT.\r\n+     * Same as the value of the CGI variable REQUEST_METHOD.\r\n+     *\r\n+     * @return\t\t\ta <code>String</code> \r\n+     *\t\t\t\tspecifying the name\r\n+     *\t\t\t\tof the method with which\r\n+     *\t\t\t\tthis request was made\r\n+     *\r\n+     */\r\n+ \r\n+    public String getMethod();\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Returns any extra path information associated with\r\n+     * the URL the client sent when it made this request.\r\n+     * The extra path information follows the servlet path\r\n+     * but precedes the query string and will start with\r\n+     * a \"/\" character.\r\n+     *\r\n+     * <p>This method returns <code>null</code> if there\r\n+     * was no extra path information.\r\n+     *\r\n+     * <p>Same as the value of the CGI variable PATH_INFO.\r\n+     *\r\n+     *\r\n+     * @return\t\ta <code>String</code>, decoded by the\r\n+     *\t\t\tweb container, specifying \r\n+     *\t\t\textra path information that comes\r\n+     *\t\t\tafter the servlet path but before\r\n+     *\t\t\tthe query string in the request URL;\r\n+     *\t\t\tor <code>null</code> if the URL does not have\r\n+     *\t\t\tany extra path information\r\n+     *\r\n+     */\r\n+     \r\n+    public String getPathInfo();\r\n+    \r\n+\r\n+ \r\n+\r\n+    /**\r\n+     *\r\n+     * Returns any extra path information after the servlet name\r\n+     * but before the query string, and translates it to a real\r\n+     * path. Same as the value of the CGI variable PATH_TRANSLATED.\r\n+     *\r\n+     * <p>If the URL does not have any extra path information,\r\n+     * this method returns <code>null</code> or the servlet container\r\n+     * cannot translate the virtual path to a real path for any reason\r\n+     * (such as when the web application is executed from an archive).\r\n+     *\r\n+     * The web container does not decode this string.\r\n+     *\r\n+     *\r\n+     * @return\t\ta <code>String</code> specifying the\r\n+     *\t\t\treal path, or <code>null</code> if\r\n+     *\t\t\tthe URL does not have any extra path\r\n+     *\t\t\tinformation\r\n+     *\r\n+     *\r\n+     */\r\n+\r\n+    public String getPathTranslated();\r\n+    \r\n+\r\n+ \r\n+\r\n+    /**\r\n+     *\r\n+     * Returns the portion of the request URI that indicates the context\r\n+     * of the request.  The context path always comes first in a request\r\n+     * URI.  The path starts with a \"/\" character but does not end with a \"/\"\r\n+     * character.  For servlets in the default (root) context, this method\r\n+     * returns \"\". The container does not decode this string.\r\n+     *\r\n+     *\r\n+     * @return\t\ta <code>String</code> specifying the\r\n+     *\t\t\tportion of the request URI that indicates the context\r\n+     *\t\t\tof the request\r\n+     *\r\n+     *\r\n+     */\r\n+\r\n+    public String getContextPath();\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Returns the query string that is contained in the request\r\n+     * URL after the path. This method returns <code>null</code>\r\n+     * if the URL does not have a query string. Same as the value\r\n+     * of the CGI variable QUERY_STRING. \r\n+     *\r\n+     * @return\t\ta <code>String</code> containing the query\r\n+     *\t\t\tstring or <code>null</code> if the URL \r\n+     *\t\t\tcontains no query string. The value is not\r\n+     *\t\t\tdecoded by the container.\r\n+     *\r\n+     */\r\n+\r\n+    public String getQueryString();\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Returns the login of the user making this request, if the\r\n+     * user has been authenticated, or <code>null</code> if the user \r\n+     * has not been authenticated.\r\n+     * Whether the user name is sent with each subsequent request\r\n+     * depends on the browser and type of authentication. Same as the \r\n+     * value of the CGI variable REMOTE_USER.\r\n+     *\r\n+     * @return\t\ta <code>String</code> specifying the login\r\n+     *\t\t\tof the user making this request, or <code>null</code>\r\n+     *\t\t\tif the user login is not known\r\n+     *\r\n+     */\r\n+\r\n+    public String getRemoteUser();\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Returns a boolean indicating whether the authenticated user is included\r\n+     * in the specified logical \"role\".  Roles and role membership can be\r\n+     * defined using deployment descriptors.  If the user has not been\r\n+     * authenticated, the method returns <code>false</code>.\r\n+     *\r\n+     * @param role\t\ta <code>String</code> specifying the name\r\n+     *\t\t\t\tof the role\r\n+     *\r\n+     * @return\t\ta <code>boolean</code> indicating whether\r\n+     *\t\t\tthe user making this request belongs to a given role;\r\n+     *\t\t\t<code>false</code> if the user has not been \r\n+     *\t\t\tauthenticated\r\n+     *\r\n+     */\r\n+\r\n+    public boolean isUserInRole(String role);\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Returns a <code>java.security.Principal</code> object containing\r\n+     * the name of the current authenticated user. If the user has not been\r\n+     * authenticated, the method returns <code>null</code>.\r\n+     *\r\n+     * @return\t\ta <code>java.security.Principal</code> containing\r\n+     *\t\t\tthe name of the user making this request;\r\n+     *\t\t\t<code>null</code> if the user has not been \r\n+     *\t\t\tauthenticated\r\n+     *\r\n+     */\r\n+\r\n+    public java.security.Principal getUserPrincipal();\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Returns the session ID specified by the client. This may\r\n+     * not be the same as the ID of the current valid session\r\n+     * for this request.\r\n+     * If the client did not specify a session ID, this method returns\r\n+     * <code>null</code>.\r\n+     *\r\n+     *\r\n+     * @return\t\ta <code>String</code> specifying the session\r\n+     *\t\t\tID, or <code>null</code> if the request did\r\n+     *\t\t\tnot specify a session ID\r\n+     *\r\n+     * @see\t\t#isRequestedSessionIdValid\r\n+     *\r\n+     */\r\n+\r\n+    public String getRequestedSessionId();\r\n+    \r\n+    \r\n+    \r\n+    \r\n+    /**\r\n+     *\r\n+     * Returns the part of this request's URL from the protocol\r\n+     * name up to the query string in the first line of the HTTP request.\r\n+     * The web container does not decode this String.\r\n+     * For example:\r\n+     *\r\n+     * \r\n+\r\n+     * <table summary=\"Examples of Returned Values\">\r\n+     * <tr align=left><th>First line of HTTP request      </th>\r\n+     * <th>     Returned Value</th>\r\n+     * <tr><td>POST /some/path.html HTTP/1.1<td><td>/some/path.html\r\n+     * <tr><td>GET http://foo.bar/a.html HTTP/1.0\r\n+     * <td><td>/a.html\r\n+     * <tr><td>HEAD /xyz?a=b HTTP/1.1<td><td>/xyz\r\n+     * </table>\r\n+     *\r\n+     * <p>To reconstruct an URL with a scheme and host, use\r\n+     * {@link HttpUtils#getRequestURL}.\r\n+     *\r\n+     * @return\t\ta <code>String</code> containing\r\n+     *\t\t\tthe part of the URL from the \r\n+     *\t\t\tprotocol name up to the query string\r\n+     *\r\n+     * @see\t\tHttpUtils#getRequestURL\r\n+     *\r\n+     */\r\n+\r\n+    public String getRequestURI();\r\n+    \r\n+    /**\r\n+     *\r\n+     * Reconstructs the URL the client used to make the request.\r\n+     * The returned URL contains a protocol, server name, port\r\n+     * number, and server path, but it does not include query\r\n+     * string parameters.\r\n+     *\r\n+     * <p>Because this method returns a <code>StringBuffer</code>,\r\n+     * not a string, you can modify the URL easily, for example,\r\n+     * to append query parameters.\r\n+     *\r\n+     * <p>This method is useful for creating redirect messages\r\n+     * and for reporting errors.\r\n+     *\r\n+     * @return\t\ta <code>StringBuffer</code> object containing\r\n+     *\t\t\tthe reconstructed URL\r\n+     *\r\n+     */\r\n+    public StringBuffer getRequestURL();\r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Returns the part of this request's URL that calls\r\n+     * the servlet. This path starts with a \"/\" character\r\n+     * and includes either the servlet name or a path to\r\n+     * the servlet, but does not include any extra path\r\n+     * information or a query string. Same as the value of\r\n+     * the CGI variable SCRIPT_NAME.\r\n+     *\r\n+     * <p>This method will return an empty string (\"\") if the\r\n+     * servlet used to process this request was matched using\r\n+     * the \"/*\" pattern.\r\n+     *\r\n+     * @return\t\ta <code>String</code> containing\r\n+     *\t\t\tthe name or path of the servlet being\r\n+     *\t\t\tcalled, as specified in the request URL,\r\n+     *\t\t\tdecoded, or an empty string if the servlet\r\n+     *\t\t\tused to process the request is matched\r\n+     *\t\t\tusing the \"/*\" pattern.\r\n+     *\r\n+     */\r\n+\r\n+    public String getServletPath();\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Returns the current <code>HttpSession</code>\r\n+     * associated with this request or, if there is no\r\n+     * current session and <code>create</code> is true, returns \r\n+     * a new session.\r\n+     *\r\n+     * <p>If <code>create</code> is <code>false</code>\r\n+     * and the request has no valid <code>HttpSession</code>,\r\n+     * this method returns <code>null</code>.\r\n+     *\r\n+     * <p>To make sure the session is properly maintained,\r\n+     * you must call this method before \r\n+     * the response is committed. If the container is using cookies\r\n+     * to maintain session integrity and is asked to create a new session\r\n+     * when the response is committed, an IllegalStateException is thrown.\r\n+     *\r\n+     *\r\n+     *\r\n+     *\r\n+     * @param create\t<code>true</code> to create\r\n+     *\t\t\ta new session for this request if necessary; \r\n+     *\t\t\t<code>false</code> to return <code>null</code>\r\n+     *\t\t\tif there's no current session\r\n+     *\t\t\t\r\n+     *\r\n+     * @return \t\tthe <code>HttpSession</code> associated \r\n+     *\t\t\twith this request or <code>null</code> if\r\n+     * \t\t\t<code>create</code> is <code>false</code>\r\n+     *\t\t\tand the request has no valid session\r\n+     *\r\n+     * @see\t#getSession()\r\n+     *\r\n+     *\r\n+     */\r\n+\r\n+    public HttpSession getSession(boolean create);\r\n+    \r\n+    \r\n+    \r\n+   \r\n+\r\n+    /**\r\n+     *\r\n+     * Returns the current session associated with this request,\r\n+     * or if the request does not have a session, creates one.\r\n+     * \r\n+     * @return\t\tthe <code>HttpSession</code> associated\r\n+     *\t\t\twith this request\r\n+     *\r\n+     * @see\t#getSession(boolean)\r\n+     *\r\n+     */\r\n+\r\n+    public HttpSession getSession();\r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Checks whether the requested session ID is still valid.\r\n+     *\r\n+     * @return\t\t\t<code>true</code> if this\r\n+     *\t\t\t\trequest has an id for a valid session\r\n+     *\t\t\t\tin the current session context;\r\n+     *\t\t\t\t<code>false</code> otherwise\r\n+     *\r\n+     * @see\t\t\t#getRequestedSessionId\r\n+     * @see\t\t\t#getSession\r\n+     * @see\t\t\tHttpSessionContext\r\n+     *\r\n+     */\r\n+\r\n+    public boolean isRequestedSessionIdValid();\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Checks whether the requested session ID came in as a cookie.\r\n+     *\r\n+     * @return\t\t\t<code>true</code> if the session ID\r\n+     *\t\t\t\tcame in as a\r\n+     *\t\t\t\tcookie; otherwise, <code>false</code>\r\n+     *\r\n+     *\r\n+     * @see\t\t\t#getSession\r\n+     *\r\n+     */ \r\n+\r\n+    public boolean isRequestedSessionIdFromCookie();\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Checks whether the requested session ID came in as part of the \r\n+     * request URL.\r\n+     *\r\n+     * @return\t\t\t<code>true</code> if the session ID\r\n+     *\t\t\t\tcame in as part of a URL; otherwise,\r\n+     *\t\t\t\t<code>false</code>\r\n+     *\r\n+     *\r\n+     * @see\t\t\t#getSession\r\n+     *\r\n+     */\r\n+    \r\n+    public boolean isRequestedSessionIdFromURL();\r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+    /**\r\n+     *\r\n+     * @deprecated\t\tAs of Version 2.1 of the Java Servlet\r\n+     *\t\t\t\tAPI, use {@link #isRequestedSessionIdFromURL}\r\n+     *\t\t\t\tinstead.\r\n+     *\r\n+     */\r\n+\r\n+    public boolean isRequestedSessionIdFromUrl();\r\n+\r\n+\r\n+    \r\n+}\r"
        },
        {
            "sha": "5e681a5fff37247cb20024b8d7f8fd509be4ef77",
            "filename": "java/javax/servlet/http/HttpServletRequestWrapper.java",
            "status": "added",
            "additions": 262,
            "deletions": 0,
            "changes": 262,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpServletRequestWrapper.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpServletRequestWrapper.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fhttp%2FHttpServletRequestWrapper.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,262 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet.http;\r\n+\r\n+import javax.servlet.ServletRequestWrapper;\r\n+import java.util.Enumeration;\r\n+\r\n+/**\r\n+ * \r\n+ * Provides a convenient implementation of the HttpServletRequest interface that\r\n+ * can be subclassed by developers wishing to adapt the request to a Servlet.\r\n+ * This class implements the Wrapper or Decorator pattern. Methods default to\r\n+ * calling through to the wrapped request object.\r\n+ * \r\n+ *\r\n+ * @see \tjavax.servlet.http.HttpServletRequest\r\n+  * @since\tv 2.3\r\n+ *\r\n+ */\r\n+\r\n+\r\n+public class HttpServletRequestWrapper extends ServletRequestWrapper implements HttpServletRequest {\r\n+\r\n+\t/** \r\n+\t* Constructs a request object wrapping the given request.\r\n+\t* @throws java.lang.IllegalArgumentException if the request is null\r\n+\t*/\r\n+    public HttpServletRequestWrapper(HttpServletRequest request) {\r\n+\t    super(request);\r\n+    }\r\n+    \r\n+    private HttpServletRequest _getHttpServletRequest() {\r\n+\treturn (HttpServletRequest) super.getRequest();\r\n+    }\r\n+\r\n+    /**\r\n+     * The default behavior of this method is to return getAuthType()\r\n+     * on the wrapped request object.\r\n+     */\r\n+\r\n+    public String getAuthType() {\r\n+\treturn this._getHttpServletRequest().getAuthType();\r\n+    }\r\n+   \r\n+    /**\r\n+     * The default behavior of this method is to return getCookies()\r\n+     * on the wrapped request object.\r\n+     */\r\n+    public Cookie[] getCookies() {\r\n+\treturn this._getHttpServletRequest().getCookies();\r\n+    }\r\n+\r\n+    /**\r\n+     * The default behavior of this method is to return getDateHeader(String name)\r\n+     * on the wrapped request object.\r\n+     */\r\n+    public long getDateHeader(String name) {\r\n+\treturn this._getHttpServletRequest().getDateHeader(name);\r\n+    }\r\n+        \t\r\n+    /**\r\n+     * The default behavior of this method is to return getHeader(String name)\r\n+     * on the wrapped request object.\r\n+     */\r\n+    public String getHeader(String name) {\r\n+\treturn this._getHttpServletRequest().getHeader(name);\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to return getHeaders(String name)\r\n+     * on the wrapped request object.\r\n+     */\r\n+    public Enumeration getHeaders(String name) {\r\n+\treturn this._getHttpServletRequest().getHeaders(name);\r\n+    }  \r\n+\r\n+    /**\r\n+     * The default behavior of this method is to return getHeaderNames()\r\n+     * on the wrapped request object.\r\n+     */\r\n+  \r\n+    public Enumeration getHeaderNames() {\r\n+\treturn this._getHttpServletRequest().getHeaderNames();\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to return getIntHeader(String name)\r\n+     * on the wrapped request object.\r\n+     */\r\n+\r\n+     public int getIntHeader(String name) {\r\n+\treturn this._getHttpServletRequest().getIntHeader(name);\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to return getMethod()\r\n+     * on the wrapped request object.\r\n+     */\r\n+    public String getMethod() {\r\n+\treturn this._getHttpServletRequest().getMethod();\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to return getPathInfo()\r\n+     * on the wrapped request object.\r\n+     */\r\n+    public String getPathInfo() {\r\n+\treturn this._getHttpServletRequest().getPathInfo();\r\n+    }\r\n+\r\n+    /**\r\n+     * The default behavior of this method is to return getPathTranslated()\r\n+     * on the wrapped request object.\r\n+     */\r\n+\r\n+     public String getPathTranslated() {\r\n+\treturn this._getHttpServletRequest().getPathTranslated();\r\n+    }\r\n+\r\n+    /**\r\n+     * The default behavior of this method is to return getContextPath()\r\n+     * on the wrapped request object.\r\n+     */\r\n+    public String getContextPath() {\r\n+\treturn this._getHttpServletRequest().getContextPath();\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to return getQueryString()\r\n+     * on the wrapped request object.\r\n+     */\r\n+    public String getQueryString() {\r\n+\treturn this._getHttpServletRequest().getQueryString();\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to return getRemoteUser()\r\n+     * on the wrapped request object.\r\n+     */\r\n+    public String getRemoteUser() {\r\n+\treturn this._getHttpServletRequest().getRemoteUser();\r\n+    }\r\n+    \r\n+ \r\n+    /**\r\n+     * The default behavior of this method is to return isUserInRole(String role)\r\n+     * on the wrapped request object.\r\n+     */\r\n+    public boolean isUserInRole(String role) {\r\n+\treturn this._getHttpServletRequest().isUserInRole(role);\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to return getUserPrincipal()\r\n+     * on the wrapped request object.\r\n+     */\r\n+    public java.security.Principal getUserPrincipal() {\r\n+\treturn this._getHttpServletRequest().getUserPrincipal();\r\n+    }\r\n+    \r\n+   \r\n+    /**\r\n+     * The default behavior of this method is to return getRequestedSessionId()\r\n+     * on the wrapped request object.\r\n+     */\r\n+    public String getRequestedSessionId() {\r\n+\treturn this._getHttpServletRequest().getRequestedSessionId();\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to return getRequestURI()\r\n+     * on the wrapped request object.\r\n+     */\r\n+    public String getRequestURI() {\r\n+\treturn this._getHttpServletRequest().getRequestURI();\r\n+    }\r\n+\t/**\r\n+     * The default behavior of this method is to return getRequestURL()\r\n+     * on the wrapped request object.\r\n+     */\r\n+    public StringBuffer getRequestURL() {\r\n+\treturn this._getHttpServletRequest().getRequestURL();\r\n+    }\r\n+\t\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to return getServletPath()\r\n+     * on the wrapped request object.\r\n+     */\r\n+    public String getServletPath() {\r\n+\treturn this._getHttpServletRequest().getServletPath();\r\n+    }\r\n+    \r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to return getSession(boolean create)\r\n+     * on the wrapped request object.\r\n+     */\r\n+    public HttpSession getSession(boolean create) {\r\n+\treturn this._getHttpServletRequest().getSession(create);\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to return getSession()\r\n+     * on the wrapped request object.\r\n+     */\r\n+    public HttpSession getSession() {\r\n+\treturn this._getHttpServletRequest().getSession();\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to return isRequestedSessionIdValid()\r\n+     * on the wrapped request object.\r\n+     */ \r\n+\r\n+    public boolean isRequestedSessionIdValid() {\r\n+\treturn this._getHttpServletRequest().isRequestedSessionIdValid();\r\n+    }\r\n+     \r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to return isRequestedSessionIdFromCookie()\r\n+     * on the wrapped request object.\r\n+     */\r\n+    public boolean isRequestedSessionIdFromCookie() {\r\n+\treturn this._getHttpServletRequest().isRequestedSessionIdFromCookie();\r\n+    }\r\n+    \r\n+    \t  /**\r\n+     * The default behavior of this method is to return isRequestedSessionIdFromURL()\r\n+     * on the wrapped request object.\r\n+     */ \r\n+    public boolean isRequestedSessionIdFromURL() {\r\n+\treturn this._getHttpServletRequest().isRequestedSessionIdFromURL();\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to return isRequestedSessionIdFromUrl()\r\n+     * on the wrapped request object.\r\n+     */\r\n+    public boolean isRequestedSessionIdFromUrl() {\r\n+\treturn this._getHttpServletRequest().isRequestedSessionIdFromUrl();\r\n+    }\r\n+\r\n+\r\n+    \r\n+}\r"
        },
        {
            "sha": "89d5710c7f1a4d2a06a6b821788ccbdc4fd56eeb",
            "filename": "java/javax/servlet/http/HttpServletResponse.java",
            "status": "added",
            "additions": 636,
            "deletions": 0,
            "changes": 636,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpServletResponse.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpServletResponse.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fhttp%2FHttpServletResponse.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,636 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet.http;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+import javax.servlet.ServletResponse;\r\n+\r\n+/**\r\n+ *\r\n+ * Extends the {@link ServletResponse} interface to provide HTTP-specific\r\n+ * functionality in sending a response.  For example, it has methods\r\n+ * to access HTTP headers and cookies.\r\n+ *\r\n+ * <p>The servlet container creates an <code>HttpServletResponse</code> object\r\n+ * and passes it as an argument to the servlet's service methods\r\n+ * (<code>doGet</code>, <code>doPost</code>, etc).\r\n+ *\r\n+ * \r\n+ * @author\tVarious\r\n+ * @version\t$Version$\r\n+ *\r\n+ * @see\t\tjavax.servlet.ServletResponse\r\n+ *\r\n+ */\r\n+\r\n+\r\n+\r\n+public interface HttpServletResponse extends ServletResponse {\r\n+\r\n+    /**\r\n+     * Adds the specified cookie to the response.  This method can be called\r\n+     * multiple times to set more than one cookie.\r\n+     *\r\n+     * @param cookie the Cookie to return to the client\r\n+     *\r\n+     */\r\n+\r\n+    public void addCookie(Cookie cookie);\r\n+\r\n+    /**\r\n+     * Returns a boolean indicating whether the named response header \r\n+     * has already been set.\r\n+     * \r\n+     * @param\tname\tthe header name\r\n+     * @return\t\t<code>true</code> if the named response header \r\n+     *\t\t\thas already been set; \r\n+     * \t\t\t<code>false</code> otherwise\r\n+     */\r\n+\r\n+    public boolean containsHeader(String name);\r\n+\r\n+    /**\r\n+     * Encodes the specified URL by including the session ID in it,\r\n+     * or, if encoding is not needed, returns the URL unchanged.\r\n+     * The implementation of this method includes the logic to\r\n+     * determine whether the session ID needs to be encoded in the URL.\r\n+     * For example, if the browser supports cookies, or session\r\n+     * tracking is turned off, URL encoding is unnecessary.\r\n+     * \r\n+     * <p>For robust session tracking, all URLs emitted by a servlet \r\n+     * should be run through this\r\n+     * method.  Otherwise, URL rewriting cannot be used with browsers\r\n+     * which do not support cookies.\r\n+     *\r\n+     * @param\turl\tthe url to be encoded.\r\n+     * @return\t\tthe encoded URL if encoding is needed;\r\n+     * \t\t\tthe unchanged URL otherwise.\r\n+     */\r\n+\r\n+    public String encodeURL(String url);\r\n+\r\n+    /**\r\n+     * Encodes the specified URL for use in the\r\n+     * <code>sendRedirect</code> method or, if encoding is not needed,\r\n+     * returns the URL unchanged.  The implementation of this method\r\n+     * includes the logic to determine whether the session ID\r\n+     * needs to be encoded in the URL.  Because the rules for making\r\n+     * this determination can differ from those used to decide whether to\r\n+     * encode a normal link, this method is separated from the\r\n+     * <code>encodeURL</code> method.\r\n+     * \r\n+     * <p>All URLs sent to the <code>HttpServletResponse.sendRedirect</code>\r\n+     * method should be run through this method.  Otherwise, URL\r\n+     * rewriting cannot be used with browsers which do not support\r\n+     * cookies.\r\n+     *\r\n+     * @param\turl\tthe url to be encoded.\r\n+     * @return\t\tthe encoded URL if encoding is needed;\r\n+     * \t\t\tthe unchanged URL otherwise.\r\n+     *\r\n+     * @see #sendRedirect\r\n+     * @see #encodeUrl\r\n+     */\r\n+\r\n+    public String encodeRedirectURL(String url);\r\n+\r\n+    /**\r\n+     * @deprecated\tAs of version 2.1, use encodeURL(String url) instead\r\n+     *\r\n+     * @param\turl\tthe url to be encoded.\r\n+     * @return\t\tthe encoded URL if encoding is needed; \r\n+     * \t\t\tthe unchanged URL otherwise.\r\n+     */\r\n+\r\n+    public String encodeUrl(String url);\r\n+    \r\n+    /**\r\n+     * @deprecated\tAs of version 2.1, use \r\n+     *\t\t\tencodeRedirectURL(String url) instead\r\n+     *\r\n+     * @param\turl\tthe url to be encoded.\r\n+     * @return\t\tthe encoded URL if encoding is needed; \r\n+     * \t\t\tthe unchanged URL otherwise.\r\n+     */\r\n+\r\n+    public String encodeRedirectUrl(String url);\r\n+\r\n+    /**\r\n+     * Sends an error response to the client using the specified\r\n+     * status.  The server defaults to creating the\r\n+     * response to look like an HTML-formatted server error page\r\n+     * containing the specified message, setting the content type\r\n+     * to \"text/html\", leaving cookies and other headers unmodified.\r\n+     *\r\n+     * If an error-page declaration has been made for the web application\r\n+     * corresponding to the status code passed in, it will be served back in \r\n+     * preference to the suggested msg parameter. \r\n+     *\r\n+     * <p>If the response has already been committed, this method throws \r\n+     * an IllegalStateException.\r\n+     * After using this method, the response should be considered\r\n+     * to be committed and should not be written to.\r\n+     *\r\n+     * @param\tsc\tthe error status code\r\n+     * @param\tmsg\tthe descriptive message\r\n+     * @exception\tIOException\tIf an input or output exception occurs\r\n+     * @exception\tIllegalStateException\tIf the response was committed\r\n+     */\r\n+   \r\n+    public void sendError(int sc, String msg) throws IOException;\r\n+\r\n+    /**\r\n+     * Sends an error response to the client using the specified status\r\n+     * code and clearing the buffer. \r\n+     * <p>If the response has already been committed, this method throws \r\n+     * an IllegalStateException.\r\n+     * After using this method, the response should be considered\r\n+     * to be committed and should not be written to.\r\n+     *\r\n+     * @param\tsc\tthe error status code\r\n+     * @exception\tIOException\tIf an input or output exception occurs\r\n+     * @exception\tIllegalStateException\tIf the response was committed\r\n+     *\t\t\t\t\t\tbefore this method call\r\n+     */\r\n+\r\n+    public void sendError(int sc) throws IOException;\r\n+\r\n+    /**\r\n+     * Sends a temporary redirect response to the client using the\r\n+     * specified redirect location URL.  This method can accept relative URLs;\r\n+     * the servlet container must convert the relative URL to an absolute URL\r\n+     * before sending the response to the client. If the location is relative \r\n+     * without a leading '/' the container interprets it as relative to\r\n+     * the current request URI. If the location is relative with a leading\r\n+     * '/' the container interprets it as relative to the servlet container root.\r\n+     *\r\n+     * <p>If the response has already been committed, this method throws \r\n+     * an IllegalStateException.\r\n+     * After using this method, the response should be considered\r\n+     * to be committed and should not be written to.\r\n+     *\r\n+     * @param\t\tlocation\tthe redirect location URL\r\n+     * @exception\tIOException\tIf an input or output exception occurs\r\n+     * @exception\tIllegalStateException\tIf the response was committed or\r\n+ if a partial URL is given and cannot be converted into a valid URL\r\n+     */\r\n+\r\n+    public void sendRedirect(String location) throws IOException;\r\n+    \r\n+    /**\r\n+     * \r\n+     * Sets a response header with the given name and\r\n+     * date-value.  The date is specified in terms of\r\n+     * milliseconds since the epoch.  If the header had already\r\n+     * been set, the new value overwrites the previous one.  The\r\n+     * <code>containsHeader</code> method can be used to test for the\r\n+     * presence of a header before setting its value.\r\n+     * \r\n+     * @param\tname\tthe name of the header to set\r\n+     * @param\tdate\tthe assigned date value\r\n+     * \r\n+     * @see #containsHeader\r\n+     * @see #addDateHeader\r\n+     */\r\n+\r\n+    public void setDateHeader(String name, long date);\r\n+    \r\n+    /**\r\n+     * \r\n+     * Adds a response header with the given name and\r\n+     * date-value.  The date is specified in terms of\r\n+     * milliseconds since the epoch.  This method allows response headers \r\n+     * to have multiple values.\r\n+     * \r\n+     * @param\tname\tthe name of the header to set\r\n+     * @param\tdate\tthe additional date value\r\n+     * \r\n+     * @see #setDateHeader\r\n+     */\r\n+\r\n+    public void addDateHeader(String name, long date);\r\n+    \r\n+    /**\r\n+     *\r\n+     * Sets a response header with the given name and value.\r\n+     * If the header had already been set, the new value overwrites the\r\n+     * previous one.  The <code>containsHeader</code> method can be\r\n+     * used to test for the presence of a header before setting its\r\n+     * value.\r\n+     * \r\n+     * @param\tname\tthe name of the header\r\n+     * @param\tvalue\tthe header value  If it contains octet string,\r\n+     *\t\tit should be encoded according to RFC 2047\r\n+     *\t\t(http://www.ietf.org/rfc/rfc2047.txt)\r\n+     *\r\n+     * @see #containsHeader\r\n+     * @see #addHeader\r\n+     */\r\n+\r\n+    public void setHeader(String name, String value);\r\n+    \r\n+    /**\r\n+     * Adds a response header with the given name and value.\r\n+     * This method allows response headers to have multiple values.\r\n+     * \r\n+     * @param\tname\tthe name of the header\r\n+     * @param\tvalue\tthe additional header value   If it contains\r\n+     *\t\toctet string, it should be encoded\r\n+     *\t\taccording to RFC 2047\r\n+     *\t\t(http://www.ietf.org/rfc/rfc2047.txt)\r\n+     *\r\n+     * @see #setHeader\r\n+     */\r\n+\r\n+    public void addHeader(String name, String value);\r\n+\r\n+    /**\r\n+     * Sets a response header with the given name and\r\n+     * integer value.  If the header had already been set, the new value\r\n+     * overwrites the previous one.  The <code>containsHeader</code>\r\n+     * method can be used to test for the presence of a header before\r\n+     * setting its value.\r\n+     *\r\n+     * @param\tname\tthe name of the header\r\n+     * @param\tvalue\tthe assigned integer value\r\n+     *\r\n+     * @see #containsHeader\r\n+     * @see #addIntHeader\r\n+     */\r\n+\r\n+    public void setIntHeader(String name, int value);\r\n+\r\n+    /**\r\n+     * Adds a response header with the given name and\r\n+     * integer value.  This method allows response headers to have multiple\r\n+     * values.\r\n+     *\r\n+     * @param\tname\tthe name of the header\r\n+     * @param\tvalue\tthe assigned integer value\r\n+     *\r\n+     * @see #setIntHeader\r\n+     */\r\n+\r\n+    public void addIntHeader(String name, int value);\r\n+\r\n+\r\n+    \r\n+    /**\r\n+     * Sets the status code for this response.  This method is used to\r\n+     * set the return status code when there is no error (for example,\r\n+     * for the status codes SC_OK or SC_MOVED_TEMPORARILY).  If there\r\n+     * is an error, and the caller wishes to invoke an error-page defined\r\n+     * in the web application, the <code>sendError</code> method should be used\r\n+     * instead.\r\n+     * <p> The container clears the buffer and sets the Location header, preserving\r\n+     * cookies and other headers.\r\n+     *\r\n+     * @param\tsc\tthe status code\r\n+     *\r\n+     * @see #sendError\r\n+     */\r\n+\r\n+    public void setStatus(int sc);\r\n+  \r\n+    /**\r\n+     * @deprecated As of version 2.1, due to ambiguous meaning of the \r\n+     * message parameter. To set a status code \r\n+     * use <code>setStatus(int)</code>, to send an error with a description\r\n+     * use <code>sendError(int, String)</code>.\r\n+     *\r\n+     * Sets the status code and message for this response.\r\n+     * \r\n+     * @param\tsc\tthe status code\r\n+     * @param\tsm\tthe status message\r\n+     */\r\n+\r\n+    public void setStatus(int sc, String sm);\r\n+\r\n+    \r\n+    /*\r\n+     * Server status codes; see RFC 2068.\r\n+     */\r\n+\r\n+    /**\r\n+     * Status code (100) indicating the client can continue.\r\n+     */\r\n+\r\n+    public static final int SC_CONTINUE = 100;\r\n+\r\n+    \r\n+    /**\r\n+     * Status code (101) indicating the server is switching protocols\r\n+     * according to Upgrade header.\r\n+     */\r\n+\r\n+    public static final int SC_SWITCHING_PROTOCOLS = 101;\r\n+\r\n+    /**\r\n+     * Status code (200) indicating the request succeeded normally.\r\n+     */\r\n+\r\n+    public static final int SC_OK = 200;\r\n+\r\n+    /**\r\n+     * Status code (201) indicating the request succeeded and created\r\n+     * a new resource on the server.\r\n+     */\r\n+\r\n+    public static final int SC_CREATED = 201;\r\n+\r\n+    /**\r\n+     * Status code (202) indicating that a request was accepted for\r\n+     * processing, but was not completed.\r\n+     */\r\n+\r\n+    public static final int SC_ACCEPTED = 202;\r\n+\r\n+    /**\r\n+     * Status code (203) indicating that the meta information presented\r\n+     * by the client did not originate from the server.\r\n+     */\r\n+\r\n+    public static final int SC_NON_AUTHORITATIVE_INFORMATION = 203;\r\n+\r\n+    /**\r\n+     * Status code (204) indicating that the request succeeded but that\r\n+     * there was no new information to return.\r\n+     */\r\n+\r\n+    public static final int SC_NO_CONTENT = 204;\r\n+\r\n+    /**\r\n+     * Status code (205) indicating that the agent <em>SHOULD</em> reset\r\n+     * the document view which caused the request to be sent.\r\n+     */\r\n+\r\n+    public static final int SC_RESET_CONTENT = 205;\r\n+\r\n+    /**\r\n+     * Status code (206) indicating that the server has fulfilled\r\n+     * the partial GET request for the resource.\r\n+     */\r\n+\r\n+    public static final int SC_PARTIAL_CONTENT = 206;\r\n+\r\n+    /**\r\n+     * Status code (300) indicating that the requested resource\r\n+     * corresponds to any one of a set of representations, each with\r\n+     * its own specific location.\r\n+     */\r\n+\r\n+    public static final int SC_MULTIPLE_CHOICES = 300;\r\n+\r\n+    /**\r\n+     * Status code (301) indicating that the resource has permanently\r\n+     * moved to a new location, and that future references should use a\r\n+     * new URI with their requests.\r\n+     */\r\n+\r\n+    public static final int SC_MOVED_PERMANENTLY = 301;\r\n+\r\n+    /**\r\n+     * Status code (302) indicating that the resource has temporarily\r\n+     * moved to another location, but that future references should\r\n+     * still use the original URI to access the resource.\r\n+     *\r\n+     * This definition is being retained for backwards compatibility.\r\n+     * SC_FOUND is now the preferred definition.\r\n+     */\r\n+\r\n+    public static final int SC_MOVED_TEMPORARILY = 302;\r\n+\r\n+    /**\r\n+    * Status code (302) indicating that the resource reside\r\n+    * temporarily under a different URI. Since the redirection might\r\n+    * be altered on occasion, the client should continue to use the\r\n+    * Request-URI for future requests.(HTTP/1.1) To represent the\r\n+    * status code (302), it is recommended to use this variable.\r\n+    */\r\n+\r\n+    public static final int SC_FOUND = 302;\r\n+\r\n+    /**\r\n+     * Status code (303) indicating that the response to the request\r\n+     * can be found under a different URI.\r\n+     */\r\n+\r\n+    public static final int SC_SEE_OTHER = 303;\r\n+\r\n+    /**\r\n+     * Status code (304) indicating that a conditional GET operation\r\n+     * found that the resource was available and not modified.\r\n+     */\r\n+\r\n+    public static final int SC_NOT_MODIFIED = 304;\r\n+\r\n+    /**\r\n+     * Status code (305) indicating that the requested resource\r\n+     * <em>MUST</em> be accessed through the proxy given by the\r\n+     * <code><em>Location</em></code> field.\r\n+     */\r\n+\r\n+    public static final int SC_USE_PROXY = 305;\r\n+\r\n+     /**\r\n+     * Status code (307) indicating that the requested resource \r\n+     * resides temporarily under a different URI. The temporary URI\r\n+     * <em>SHOULD</em> be given by the <code><em>Location</em></code> \r\n+     * field in the response.\r\n+     */\r\n+\r\n+     public static final int SC_TEMPORARY_REDIRECT = 307;\r\n+\r\n+    /**\r\n+     * Status code (400) indicating the request sent by the client was\r\n+     * syntactically incorrect.\r\n+     */\r\n+\r\n+    public static final int SC_BAD_REQUEST = 400;\r\n+\r\n+    /**\r\n+     * Status code (401) indicating that the request requires HTTP\r\n+     * authentication.\r\n+     */\r\n+\r\n+    public static final int SC_UNAUTHORIZED = 401;\r\n+\r\n+    /**\r\n+     * Status code (402) reserved for future use.\r\n+     */\r\n+\r\n+    public static final int SC_PAYMENT_REQUIRED = 402;\r\n+\r\n+    /**\r\n+     * Status code (403) indicating the server understood the request\r\n+     * but refused to fulfill it.\r\n+     */\r\n+\r\n+    public static final int SC_FORBIDDEN = 403;\r\n+\r\n+    /**\r\n+     * Status code (404) indicating that the requested resource is not\r\n+     * available.\r\n+     */\r\n+\r\n+    public static final int SC_NOT_FOUND = 404;\r\n+\r\n+    /**\r\n+     * Status code (405) indicating that the method specified in the\r\n+     * <code><em>Request-Line</em></code> is not allowed for the resource\r\n+     * identified by the <code><em>Request-URI</em></code>.\r\n+     */\r\n+\r\n+    public static final int SC_METHOD_NOT_ALLOWED = 405;\r\n+\r\n+    /**\r\n+     * Status code (406) indicating that the resource identified by the\r\n+     * request is only capable of generating response entities which have\r\n+     * content characteristics not acceptable according to the accept\r\n+     * headers sent in the request.\r\n+     */\r\n+\r\n+    public static final int SC_NOT_ACCEPTABLE = 406;\r\n+\r\n+    /**\r\n+     * Status code (407) indicating that the client <em>MUST</em> first\r\n+     * authenticate itself with the proxy.\r\n+     */\r\n+\r\n+    public static final int SC_PROXY_AUTHENTICATION_REQUIRED = 407;\r\n+\r\n+    /**\r\n+     * Status code (408) indicating that the client did not produce a\r\n+     * request within the time that the server was prepared to wait.\r\n+     */\r\n+\r\n+    public static final int SC_REQUEST_TIMEOUT = 408;\r\n+\r\n+    /**\r\n+     * Status code (409) indicating that the request could not be\r\n+     * completed due to a conflict with the current state of the\r\n+     * resource.\r\n+     */\r\n+\r\n+    public static final int SC_CONFLICT = 409;\r\n+\r\n+    /**\r\n+     * Status code (410) indicating that the resource is no longer\r\n+     * available at the server and no forwarding address is known.\r\n+     * This condition <em>SHOULD</em> be considered permanent.\r\n+     */\r\n+\r\n+    public static final int SC_GONE = 410;\r\n+\r\n+    /**\r\n+     * Status code (411) indicating that the request cannot be handled\r\n+     * without a defined <code><em>Content-Length</em></code>.\r\n+     */\r\n+\r\n+    public static final int SC_LENGTH_REQUIRED = 411;\r\n+\r\n+    /**\r\n+     * Status code (412) indicating that the precondition given in one\r\n+     * or more of the request-header fields evaluated to false when it\r\n+     * was tested on the server.\r\n+     */\r\n+\r\n+    public static final int SC_PRECONDITION_FAILED = 412;\r\n+\r\n+    /**\r\n+     * Status code (413) indicating that the server is refusing to process\r\n+     * the request because the request entity is larger than the server is\r\n+     * willing or able to process.\r\n+     */\r\n+\r\n+    public static final int SC_REQUEST_ENTITY_TOO_LARGE = 413;\r\n+\r\n+    /**\r\n+     * Status code (414) indicating that the server is refusing to service\r\n+     * the request because the <code><em>Request-URI</em></code> is longer\r\n+     * than the server is willing to interpret.\r\n+     */\r\n+\r\n+    public static final int SC_REQUEST_URI_TOO_LONG = 414;\r\n+\r\n+    /**\r\n+     * Status code (415) indicating that the server is refusing to service\r\n+     * the request because the entity of the request is in a format not\r\n+     * supported by the requested resource for the requested method.\r\n+     */\r\n+\r\n+    public static final int SC_UNSUPPORTED_MEDIA_TYPE = 415;\r\n+\r\n+    /**\r\n+     * Status code (416) indicating that the server cannot serve the\r\n+     * requested byte range.\r\n+     */\r\n+\r\n+    public static final int SC_REQUESTED_RANGE_NOT_SATISFIABLE = 416;\r\n+\r\n+    /**\r\n+     * Status code (417) indicating that the server could not meet the\r\n+     * expectation given in the Expect request header.\r\n+     */\r\n+\r\n+    public static final int SC_EXPECTATION_FAILED = 417;\r\n+\r\n+    /**\r\n+     * Status code (500) indicating an error inside the HTTP server\r\n+     * which prevented it from fulfilling the request.\r\n+     */\r\n+\r\n+    public static final int SC_INTERNAL_SERVER_ERROR = 500;\r\n+\r\n+    /**\r\n+     * Status code (501) indicating the HTTP server does not support\r\n+     * the functionality needed to fulfill the request.\r\n+     */\r\n+\r\n+    public static final int SC_NOT_IMPLEMENTED = 501;\r\n+\r\n+    /**\r\n+     * Status code (502) indicating that the HTTP server received an\r\n+     * invalid response from a server it consulted when acting as a\r\n+     * proxy or gateway.\r\n+     */\r\n+\r\n+    public static final int SC_BAD_GATEWAY = 502;\r\n+\r\n+    /**\r\n+     * Status code (503) indicating that the HTTP server is\r\n+     * temporarily overloaded, and unable to handle the request.\r\n+     */\r\n+\r\n+    public static final int SC_SERVICE_UNAVAILABLE = 503;\r\n+\r\n+    /**\r\n+     * Status code (504) indicating that the server did not receive\r\n+     * a timely response from the upstream server while acting as\r\n+     * a gateway or proxy.\r\n+     */\r\n+\r\n+    public static final int SC_GATEWAY_TIMEOUT = 504;\r\n+\r\n+    /**\r\n+     * Status code (505) indicating that the server does not support\r\n+     * or refuses to support the HTTP protocol version that was used\r\n+     * in the request message.\r\n+     */\r\n+\r\n+    public static final int SC_HTTP_VERSION_NOT_SUPPORTED = 505;\r\n+}\r"
        },
        {
            "sha": "a68bb6426ad0a7b5930618d9b13497ab29c00695",
            "filename": "java/javax/servlet/http/HttpServletResponseWrapper.java",
            "status": "added",
            "additions": 195,
            "deletions": 0,
            "changes": 195,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpServletResponseWrapper.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpServletResponseWrapper.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fhttp%2FHttpServletResponseWrapper.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,195 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet.http;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+import javax.servlet.ServletResponseWrapper;\r\n+\r\n+/**\r\n+ * \r\n+ * Provides a convenient implementation of the HttpServletResponse interface that\r\n+ * can be subclassed by developers wishing to adapt the response from a Servlet.\r\n+ * This class implements the Wrapper or Decorator pattern. Methods default to\r\n+ * calling through to the wrapped response object.\r\n+ * \r\n+ * @author \tVarious\r\n+ * @version \t$Version$\r\n+  * @since\tv 2.3\r\n+ *\r\n+ * @see \tjavax.servlet.http.HttpServletResponse\r\n+ *\r\n+ */\r\n+\r\n+public class HttpServletResponseWrapper extends ServletResponseWrapper implements HttpServletResponse {\r\n+\r\n+\r\n+    /** \r\n+    * Constructs a response adaptor wrapping the given response.\r\n+    * @throws java.lang.IllegalArgumentException if the response is null\r\n+    */\r\n+    public HttpServletResponseWrapper(HttpServletResponse response) {\r\n+\t    super(response);\r\n+    }\r\n+    \r\n+    private HttpServletResponse _getHttpServletResponse() {\r\n+\treturn (HttpServletResponse) super.getResponse();\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to call addCookie(Cookie cookie)\r\n+     * on the wrapped response object.\r\n+     */\r\n+    public void addCookie(Cookie cookie) {\r\n+\tthis._getHttpServletResponse().addCookie(cookie);\r\n+    }\r\n+\r\n+    /**\r\n+     * The default behavior of this method is to call containsHeader(String name)\r\n+     * on the wrapped response object.\r\n+     */\r\n+\r\n+ \r\n+    public boolean containsHeader(String name) {\r\n+\treturn this._getHttpServletResponse().containsHeader(name);\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to call encodeURL(String url)\r\n+     * on the wrapped response object.\r\n+     */\r\n+    public String encodeURL(String url) {\r\n+\treturn this._getHttpServletResponse().encodeURL(url);\r\n+    }\r\n+\r\n+    /**\r\n+     * The default behavior of this method is to return encodeRedirectURL(String url)\r\n+     * on the wrapped response object.\r\n+     */\r\n+    public String encodeRedirectURL(String url) {\r\n+\treturn this._getHttpServletResponse().encodeRedirectURL(url);\r\n+    }\r\n+\r\n+    /**\r\n+     * The default behavior of this method is to call encodeUrl(String url)\r\n+     * on the wrapped response object.\r\n+     */\r\n+    public String encodeUrl(String url) {\r\n+\treturn this._getHttpServletResponse().encodeUrl(url);\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to return encodeRedirectUrl(String url)\r\n+     * on the wrapped response object.\r\n+     */\r\n+    public String encodeRedirectUrl(String url) {\r\n+\treturn this._getHttpServletResponse().encodeRedirectUrl(url);\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to call sendError(int sc, String msg)\r\n+     * on the wrapped response object.\r\n+     */\r\n+    public void sendError(int sc, String msg) throws IOException {\r\n+\tthis._getHttpServletResponse().sendError(sc, msg);\r\n+    }\r\n+\r\n+    /**\r\n+     * The default behavior of this method is to call sendError(int sc)\r\n+     * on the wrapped response object.\r\n+     */\r\n+\r\n+\r\n+    public void sendError(int sc) throws IOException {\r\n+\tthis._getHttpServletResponse().sendError(sc);\r\n+    }\r\n+\r\n+    /**\r\n+     * The default behavior of this method is to return sendRedirect(String location)\r\n+     * on the wrapped response object.\r\n+     */\r\n+    public void sendRedirect(String location) throws IOException {\r\n+\tthis._getHttpServletResponse().sendRedirect(location);\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to call setDateHeader(String name, long date)\r\n+     * on the wrapped response object.\r\n+     */\r\n+    public void setDateHeader(String name, long date) {\r\n+\tthis._getHttpServletResponse().setDateHeader(name, date);\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to call addDateHeader(String name, long date)\r\n+     * on the wrapped response object.\r\n+     */\r\n+   public void addDateHeader(String name, long date) {\r\n+\tthis._getHttpServletResponse().addDateHeader(name, date);\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to return setHeader(String name, String value)\r\n+     * on the wrapped response object.\r\n+     */\r\n+    public void setHeader(String name, String value) {\r\n+\tthis._getHttpServletResponse().setHeader(name, value);\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to return addHeader(String name, String value)\r\n+     * on the wrapped response object.\r\n+     */\r\n+     public void addHeader(String name, String value) {\r\n+\tthis._getHttpServletResponse().addHeader(name, value);\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to call setIntHeader(String name, int value)\r\n+     * on the wrapped response object.\r\n+     */\r\n+    public void setIntHeader(String name, int value) {\r\n+\tthis._getHttpServletResponse().setIntHeader(name, value);\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to call addIntHeader(String name, int value)\r\n+     * on the wrapped response object.\r\n+     */\r\n+    public void addIntHeader(String name, int value) {\r\n+\tthis._getHttpServletResponse().addIntHeader(name, value);\r\n+    }\r\n+\r\n+    /**\r\n+     * The default behavior of this method is to call setStatus(int sc)\r\n+     * on the wrapped response object.\r\n+     */\r\n+\r\n+\r\n+    public void setStatus(int sc) {\r\n+\tthis._getHttpServletResponse().setStatus(sc);\r\n+    }\r\n+    \r\n+    /**\r\n+     * The default behavior of this method is to call setStatus(int sc, String sm)\r\n+     * on the wrapped response object.\r\n+     */\r\n+     public void setStatus(int sc, String sm) {\r\n+\tthis._getHttpServletResponse().setStatus(sc, sm);\r\n+    }\r\n+\r\n+   \r\n+}\r"
        },
        {
            "sha": "973c8c846360b2de10eb33961159094c16d991b9",
            "filename": "java/javax/servlet/http/HttpSession.java",
            "status": "added",
            "additions": 423,
            "deletions": 0,
            "changes": 423,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpSession.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpSession.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fhttp%2FHttpSession.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,423 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet.http;\r\n+\r\n+import java.util.Enumeration;\r\n+import javax.servlet.ServletContext;\r\n+\r\n+/**\r\n+ *\r\n+ * Provides a way to identify a user across more than one page\r\n+ * request or visit to a Web site and to store information about that user.\r\n+ *\r\n+ * <p>The servlet container uses this interface to create a session\r\n+ * between an HTTP client and an HTTP server. The session persists\r\n+ * for a specified time period, across more than one connection or\r\n+ * page request from the user. A session usually corresponds to one \r\n+ * user, who may visit a site many times. The server can maintain a \r\n+ * session in many ways such as using cookies or rewriting URLs.\r\n+ *\r\n+ * <p>This interface allows servlets to \r\n+ * <ul>\r\n+ * <li>View and manipulate information about a session, such as\r\n+ *     the session identifier, creation time, and last accessed time\r\n+ * <li>Bind objects to sessions, allowing user information to persist \r\n+ *     across multiple user connections\r\n+ * </ul>\r\n+ *\r\n+ * <p>When an application stores an object in or removes an object from a\r\n+ * session, the session checks whether the object implements\r\n+ * {@link HttpSessionBindingListener}. If it does, \r\n+ * the servlet notifies the object that it has been bound to or unbound \r\n+ * from the session. Notifications are sent after the binding methods complete. \r\n+ * For session that are invalidated or expire, notifications are sent after\r\n+ * the session has been invalidated or expired.\r\n+ *\r\n+ * <p> When container migrates a session between VMs in a distributed container\r\n+ * setting, all session attributes implementing the {@link HttpSessionActivationListener}\r\n+ * interface are notified.\r\n+ * \r\n+ * <p>A servlet should be able to handle cases in which\r\n+ * the client does not choose to join a session, such as when cookies are\r\n+ * intentionally turned off. Until the client joins the session,\r\n+ * <code>isNew</code> returns <code>true</code>.  If the client chooses \r\n+ * not to join\r\n+ * the session, <code>getSession</code> will return a different session\r\n+ * on each request, and <code>isNew</code> will always return\r\n+ * <code>true</code>.\r\n+ *\r\n+ * <p>Session information is scoped only to the current web application\r\n+ * (<code>ServletContext</code>), so information stored in one context\r\n+ * will not be directly visible in another.\r\n+ *\r\n+ * @author\tVarious\r\n+ * @version\t$Version$\r\n+ *\r\n+ *\r\n+ * @see \tHttpSessionBindingListener\r\n+ * @see \tHttpSessionContext\r\n+ *\r\n+ */\r\n+\r\n+public interface HttpSession {\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * Returns the time when this session was created, measured\r\n+     * in milliseconds since midnight January 1, 1970 GMT.\r\n+     *\r\n+     * @return\t\t\t\ta <code>long</code> specifying\r\n+     * \t\t\t\t\twhen this session was created,\r\n+     *\t\t\t\t\texpressed in \r\n+     *\t\t\t\t\tmilliseconds since 1/1/1970 GMT\r\n+     *\r\n+     * @exception IllegalStateException\tif this method is called on an\r\n+     *\t\t\t\t\tinvalidated session\r\n+     *\r\n+     */\r\n+\r\n+    public long getCreationTime();\r\n+    \r\n+    \r\n+    \r\n+    \r\n+    /**\r\n+     *\r\n+     * Returns a string containing the unique identifier assigned \r\n+     * to this session. The identifier is assigned \r\n+     * by the servlet container and is implementation dependent.\r\n+     * \r\n+     * @return\t\t\t\ta string specifying the identifier\r\n+     *\t\t\t\t\tassigned to this session\r\n+     *\r\n+     * @exception IllegalStateException\tif this method is called on an\r\n+     *\t\t\t\t\tinvalidated session\r\n+     *\r\n+     */\r\n+\r\n+    public String getId();\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Returns the last time the client sent a request associated with\r\n+     * this session, as the number of milliseconds since midnight\r\n+     * January 1, 1970 GMT, and marked by the time the container received the request. \r\n+     *\r\n+     * <p>Actions that your application takes, such as getting or setting\r\n+     * a value associated with the session, do not affect the access\r\n+     * time.\r\n+     *\r\n+     * @return\t\t\t\ta <code>long</code>\r\n+     *\t\t\t\t\trepresenting the last time \r\n+     *\t\t\t\t\tthe client sent a request associated\r\n+     *\t\t\t\t\twith this session, expressed in \r\n+     *\t\t\t\t\tmilliseconds since 1/1/1970 GMT\r\n+     *\r\n+     * @exception IllegalStateException\tif this method is called on an\r\n+     *\t\t\t\t\tinvalidated session\r\n+     *\r\n+     */\r\n+\r\n+    public long getLastAccessedTime();\r\n+    \r\n+    \r\n+    /**\r\n+    * Returns the ServletContext to which this session belongs.\r\n+    *    \r\n+    * @return The ServletContext object for the web application\r\n+    * @since 2.3\r\n+    */\r\n+\r\n+    public ServletContext getServletContext();\r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * Specifies the time, in seconds, between client requests before the \r\n+     * servlet container will invalidate this session.  A negative time\r\n+     * indicates the session should never timeout.\r\n+     *\r\n+     * @param interval\t\tAn integer specifying the number\r\n+     * \t\t\t\tof seconds \r\n+     *\r\n+     */\r\n+    \r\n+    public void setMaxInactiveInterval(int interval);\r\n+\r\n+\r\n+\r\n+\r\n+   /**\r\n+    * Returns the maximum time interval, in seconds, that \r\n+    * the servlet container will keep this session open between \r\n+    * client accesses. After this interval, the servlet container\r\n+    * will invalidate the session.  The maximum time interval can be set\r\n+    * with the <code>setMaxInactiveInterval</code> method.\r\n+    * A negative time indicates the session should never timeout.\r\n+    *  \r\n+    *\r\n+    * @return\t\tan integer specifying the number of\r\n+    *\t\t\tseconds this session remains open\r\n+    *\t\t\tbetween client requests\r\n+    *\r\n+    * @see\t\t#setMaxInactiveInterval\r\n+    *\r\n+    *\r\n+    */\r\n+\r\n+    public int getMaxInactiveInterval();\r\n+    \r\n+    \r\n+\r\n+\r\n+   /**\r\n+    *\r\n+    * @deprecated \tAs of Version 2.1, this method is\r\n+    *\t\t\tdeprecated and has no replacement.\r\n+    *\t\t\tIt will be removed in a future\r\n+    *\t\t\tversion of the Java Servlet API.\r\n+    *\r\n+    */\r\n+\r\n+    public HttpSessionContext getSessionContext();\r\n+    \r\n+    \r\n+    \r\n+    \r\n+    /**\r\n+     *\r\n+     * Returns the object bound with the specified name in this session, or\r\n+     * <code>null</code> if no object is bound under the name.\r\n+     *\r\n+     * @param name\t\ta string specifying the name of the object\r\n+     *\r\n+     * @return\t\t\tthe object with the specified name\r\n+     *\r\n+     * @exception IllegalStateException\tif this method is called on an\r\n+     *\t\t\t\t\tinvalidated session\r\n+     *\r\n+     */\r\n+  \r\n+    public Object getAttribute(String name);\r\n+    \r\n+    \r\n+    \r\n+    \r\n+    /**\r\n+     *\r\n+     * @deprecated \tAs of Version 2.2, this method is\r\n+     * \t\t\treplaced by {@link #getAttribute}.\r\n+     *\r\n+     * @param name\t\ta string specifying the name of the object\r\n+     *\r\n+     * @return\t\t\tthe object with the specified name\r\n+     *\r\n+     * @exception IllegalStateException\tif this method is called on an\r\n+     *\t\t\t\t\tinvalidated session\r\n+     *\r\n+     */\r\n+  \r\n+    public Object getValue(String name);\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Returns an <code>Enumeration</code> of <code>String</code> objects\r\n+     * containing the names of all the objects bound to this session. \r\n+     *\r\n+     * @return\t\t\tan <code>Enumeration</code> of \r\n+     *\t\t\t\t<code>String</code> objects specifying the\r\n+     *\t\t\t\tnames of all the objects bound to\r\n+     *\t\t\t\tthis session\r\n+     *\r\n+     * @exception IllegalStateException\tif this method is called on an\r\n+     *\t\t\t\t\tinvalidated session\r\n+     *\r\n+     */\r\n+    \r\n+    public Enumeration getAttributeNames();\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * @deprecated \tAs of Version 2.2, this method is\r\n+     * \t\t\treplaced by {@link #getAttributeNames}\r\n+     *\r\n+     * @return\t\t\t\tan array of <code>String</code>\r\n+     *\t\t\t\t\tobjects specifying the\r\n+     *\t\t\t\t\tnames of all the objects bound to\r\n+     *\t\t\t\t\tthis session\r\n+     *\r\n+     * @exception IllegalStateException\tif this method is called on an\r\n+     *\t\t\t\t\tinvalidated session\r\n+     *\r\n+     */\r\n+    \r\n+    public String[] getValueNames();\r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     * Binds an object to this session, using the name specified.\r\n+     * If an object of the same name is already bound to the session,\r\n+     * the object is replaced.\r\n+     *\r\n+     * <p>After this method executes, and if the new object\r\n+     * implements <code>HttpSessionBindingListener</code>,\r\n+     * the container calls \r\n+     * <code>HttpSessionBindingListener.valueBound</code>. The container then   \r\n+     * notifies any <code>HttpSessionAttributeListener</code>s in the web \r\n+     * application.\r\n+     \r\n+     * <p>If an object was already bound to this session of this name\r\n+     * that implements <code>HttpSessionBindingListener</code>, its \r\n+     * <code>HttpSessionBindingListener.valueUnbound</code> method is called.\r\n+     *\r\n+     * <p>If the value passed in is null, this has the same effect as calling \r\n+     * <code>removeAttribute()<code>.\r\n+     *\r\n+     *\r\n+     * @param name\t\t\tthe name to which the object is bound;\r\n+     *\t\t\t\t\tcannot be null\r\n+     *\r\n+     * @param value\t\t\tthe object to be bound\r\n+     *\r\n+     * @exception IllegalStateException\tif this method is called on an\r\n+     *\t\t\t\t\tinvalidated session\r\n+     *\r\n+     */\r\n+ \r\n+    public void setAttribute(String name, Object value);\r\n+    \r\n+\r\n+\r\n+\r\n+    \r\n+    /**\r\n+     *\r\n+     * @deprecated \tAs of Version 2.2, this method is\r\n+     * \t\t\treplaced by {@link #setAttribute}\r\n+     *\r\n+     * @param name\t\t\tthe name to which the object is bound;\r\n+     *\t\t\t\t\tcannot be null\r\n+     *\r\n+     * @param value\t\t\tthe object to be bound; cannot be null\r\n+     *\r\n+     * @exception IllegalStateException\tif this method is called on an\r\n+     *\t\t\t\t\tinvalidated session\r\n+     *\r\n+     */\r\n+ \r\n+    public void putValue(String name, Object value);\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * Removes the object bound with the specified name from\r\n+     * this session. If the session does not have an object\r\n+     * bound with the specified name, this method does nothing.\r\n+     *\r\n+     * <p>After this method executes, and if the object\r\n+     * implements <code>HttpSessionBindingListener</code>,\r\n+     * the container calls \r\n+     * <code>HttpSessionBindingListener.valueUnbound</code>. The container\r\n+     * then notifies any <code>HttpSessionAttributeListener</code>s in the web \r\n+     * application.\r\n+     * \r\n+     * \r\n+     *\r\n+     * @param name\t\t\t\tthe name of the object to\r\n+     *\t\t\t\t\t\tremove from this session\r\n+     *\r\n+     * @exception IllegalStateException\tif this method is called on an\r\n+     *\t\t\t\t\tinvalidated session\r\n+     */\r\n+\r\n+    public void removeAttribute(String name);\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * @deprecated \tAs of Version 2.2, this method is\r\n+     * \t\t\treplaced by {@link #removeAttribute}\r\n+     *\r\n+     * @param name\t\t\t\tthe name of the object to\r\n+     *\t\t\t\t\t\tremove from this session\r\n+     *\r\n+     * @exception IllegalStateException\tif this method is called on an\r\n+     *\t\t\t\t\tinvalidated session\r\n+     */\r\n+\r\n+    public void removeValue(String name);\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * Invalidates this session then unbinds any objects bound\r\n+     * to it. \r\n+     *\r\n+     * @exception IllegalStateException\tif this method is called on an\r\n+     *\t\t\t\t\talready invalidated session\r\n+     *\r\n+     */\r\n+\r\n+    public void invalidate();\r\n+    \r\n+    \r\n+    \r\n+    \r\n+    /**\r\n+     *\r\n+     * Returns <code>true</code> if the client does not yet know about the\r\n+     * session or if the client chooses not to join the session.  For \r\n+     * example, if the server used only cookie-based sessions, and\r\n+     * the client had disabled the use of cookies, then a session would\r\n+     * be new on each request.\r\n+     *\r\n+     * @return \t\t\t\t<code>true</code> if the \r\n+     *\t\t\t\t\tserver has created a session, \r\n+     *\t\t\t\t\tbut the client has not yet joined\r\n+     *\r\n+     * @exception IllegalStateException\tif this method is called on an\r\n+     *\t\t\t\t\talready invalidated session\r\n+     *\r\n+     */\r\n+\r\n+    public boolean isNew();\r\n+\r\n+\r\n+\r\n+}\r\n+\r"
        },
        {
            "sha": "4f1a4370b9744f9214daa7f5d23f32aa152f60af",
            "filename": "java/javax/servlet/http/HttpSessionActivationListener.java",
            "status": "added",
            "additions": 36,
            "deletions": 0,
            "changes": 36,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpSessionActivationListener.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpSessionActivationListener.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fhttp%2FHttpSessionActivationListener.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,36 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet.http;\r\n+\r\n+import java.util.EventListener;\r\n+\r\n+    /** Objects that are bound to a session may listen to container\r\n+    ** events notifying them that sessions will be passivated and that\r\n+    ** session will be activated. A container that migrates session between VMs\r\n+    ** or persists sessions is required to notify all attributes bound to sessions\r\n+    ** implementing HttpSessionActivationListener.\r\n+    **\r\n+    * @since 2.3\r\n+    */\r\n+    \r\n+public interface HttpSessionActivationListener extends EventListener { \r\n+\r\n+    /** Notification that the session is about to be passivated.*/\r\n+    public void sessionWillPassivate(HttpSessionEvent se); \r\n+    /** Notification that the session has just been activated.*/\r\n+    public void sessionDidActivate(HttpSessionEvent se);\r\n+} \r\n+\r"
        },
        {
            "sha": "e83333a58dfd662baa73188ff07d7eea9fb515a3",
            "filename": "java/javax/servlet/http/HttpSessionAttributeListener.java",
            "status": "added",
            "additions": 35,
            "deletions": 0,
            "changes": 35,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpSessionAttributeListener.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpSessionAttributeListener.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fhttp%2FHttpSessionAttributeListener.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,35 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet.http;\r\n+\r\n+import java.util.EventListener;\r\n+\r\n+\t/** This listener interface can be implemented in order to\r\n+\t* get notifications of changes to the attribute lists of sessions within\r\n+\t* this web application.\r\n+\t* @since\tv 2.3\r\n+*/\r\n+\r\n+public interface HttpSessionAttributeListener extends EventListener {\r\n+\t/** Notification that an attribute has been added to a session. Called after the attribute is added.*/\r\n+    public void attributeAdded ( HttpSessionBindingEvent se );\r\n+\t/** Notification that an attribute has been removed from a session. Called after the attribute is removed. */\r\n+    public void attributeRemoved ( HttpSessionBindingEvent se );\r\n+\t/** Notification that an attribute has been replaced in a session. Called after the attribute is replaced. */\r\n+    public void attributeReplaced ( HttpSessionBindingEvent se );\r\n+\r\n+}\r\n+\r"
        },
        {
            "sha": "76c18d8d358f25538393f9d834169304a78e94c8",
            "filename": "java/javax/servlet/http/HttpSessionBindingEvent.java",
            "status": "added",
            "additions": 151,
            "deletions": 0,
            "changes": 151,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpSessionBindingEvent.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpSessionBindingEvent.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fhttp%2FHttpSessionBindingEvent.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,151 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+\r\n+package javax.servlet.http;\r\n+\r\n+\r\n+\r\n+/**\r\n+ *\r\n+ * Events of this type are either sent to an object that implements\r\n+ * {@link HttpSessionBindingListener} when it is bound or \r\n+ * unbound from a session, or to a {@link HttpSessionAttributeListener} \r\n+ * that has been configured in the deployment descriptor when any attribute is\r\n+ * bound, unbound or replaced in a session.\r\n+ *\r\n+ * <p>The session binds the object by a call to\r\n+ * <code>HttpSession.setAttribute</code> and unbinds the object\r\n+ * by a call to <code>HttpSession.removeAttribute</code>.\r\n+ *\r\n+ *\r\n+ *\r\n+ * @author\t\tVarious\r\n+ * @version\t\t$Version$\r\n+ * \r\n+ * @see \t\tHttpSession\r\n+ * @see \t\tHttpSessionBindingListener\r\n+ * @see\t\t\tHttpSessionAttributeListener\r\n+ */\r\n+\r\n+public class HttpSessionBindingEvent extends HttpSessionEvent {\r\n+\r\n+\r\n+\r\n+\r\n+    /* The name to which the object is being bound or unbound */\r\n+\r\n+    private String name;\r\n+    \r\n+    /* The object is being bound or unbound */\r\n+\r\n+    private Object value;\r\n+    \r\n+  \r\n+\r\n+    /**\r\n+     *\r\n+     * Constructs an event that notifies an object that it\r\n+     * has been bound to or unbound from a session. \r\n+     * To receive the event, the object must implement\r\n+     * {@link HttpSessionBindingListener}.\r\n+     *\r\n+     *\r\n+     *\r\n+     * @param session \tthe session to which the object is bound or unbound\r\n+     *\r\n+     * @param name \tthe name with which the object is bound or unbound\r\n+     *\r\n+     * @see\t\t\t#getName\r\n+     * @see\t\t\t#getSession\r\n+     *\r\n+     */\r\n+\r\n+    public HttpSessionBindingEvent(HttpSession session, String name) {\r\n+\tsuper(session);\r\n+\tthis.name = name;\r\n+    }\r\n+    \r\n+    /**\r\n+     *\r\n+     * Constructs an event that notifies an object that it\r\n+     * has been bound to or unbound from a session. \r\n+     * To receive the event, the object must implement\r\n+     * {@link HttpSessionBindingListener}.\r\n+     *\r\n+     *\r\n+     *\r\n+     * @param session \tthe session to which the object is bound or unbound\r\n+     *\r\n+     * @param name \tthe name with which the object is bound or unbound\r\n+     *\r\n+     * @see\t\t\t#getName\r\n+     * @see\t\t\t#getSession\r\n+     *\r\n+     */\r\n+    \r\n+    public HttpSessionBindingEvent(HttpSession session, String name, Object value) {\r\n+\tsuper(session);\r\n+\tthis.name = name;\r\n+\tthis.value = value;\r\n+    }\r\n+    \r\n+    \r\n+   \t/** Return the session that changed. */\r\n+    public HttpSession getSession () { \r\n+\treturn super.getSession();\r\n+    }\r\n+ \r\n+   \r\n+  \r\n+    \r\n+    /**\r\n+     *\r\n+     * Returns the name with which the attribute is bound to or\r\n+     * unbound from the session.\r\n+     *\r\n+     *\r\n+     * @return\t\ta string specifying the name with which\r\n+     *\t\t\tthe object is bound to or unbound from\r\n+     *\t\t\tthe session\r\n+     *\r\n+     *\r\n+     */\r\n+\r\n+    public String getName() {\r\n+\treturn name;\r\n+    }\r\n+    \r\n+    /**\r\n+\t* Returns the value of the attribute that has been added, removed or replaced.\r\n+\t* If the attribute was added (or bound), this is the value of the attribute. If the attribute was\r\n+\t* removed (or unbound), this is the value of the removed attribute. If the attribute was replaced, this\r\n+\t* is the old value of the attribute.\r\n+\t*\r\n+        * @since 2.3\r\n+\t*/\r\n+\t\r\n+\tpublic Object getValue() {\r\n+\t    return this.value;   \r\n+\t}\r\n+    \r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r"
        },
        {
            "sha": "bf31092cba1162b27c84030c0216ad884e186715",
            "filename": "java/javax/servlet/http/HttpSessionBindingListener.java",
            "status": "added",
            "additions": 77,
            "deletions": 0,
            "changes": 77,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpSessionBindingListener.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpSessionBindingListener.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fhttp%2FHttpSessionBindingListener.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,77 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+\r\n+package javax.servlet.http;\r\n+\r\n+import java.util.EventListener;\r\n+\r\n+\r\n+ \r\n+ \r\n+\r\n+/**\r\n+ * Causes an object to be notified when it is bound to\r\n+ * or unbound from a session. The object is notified\r\n+ * by an {@link HttpSessionBindingEvent} object. This may be as a result\r\n+ * of a servlet programmer explicitly unbinding an attribute from a session,\r\n+ * due to a session being invalidated, or due to a session timing out.\r\n+ *\r\n+ *\r\n+ * @author\t\tVarious\r\n+ * @version\t\t$Version$\r\n+ *\r\n+ * @see HttpSession\r\n+ * @see HttpSessionBindingEvent\r\n+ *\r\n+ */\r\n+\r\n+public interface HttpSessionBindingListener extends EventListener {\r\n+\r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * Notifies the object that it is being bound to\r\n+     * a session and identifies the session.\r\n+     *\r\n+     * @param event\t\tthe event that identifies the\r\n+     *\t\t\t\tsession \r\n+     *\r\n+     * @see #valueUnbound\r\n+     *\r\n+     */ \r\n+\r\n+    public void valueBound(HttpSessionBindingEvent event);\r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Notifies the object that it is being unbound\r\n+     * from a session and identifies the session.\r\n+     *\r\n+     * @param event\t\tthe event that identifies\r\n+     *\t\t\t\tthe session \r\n+     *\t\r\n+     * @see #valueBound\r\n+     *\r\n+     */\r\n+\r\n+    public void valueUnbound(HttpSessionBindingEvent event);\r\n+    \r\n+    \r\n+}\r\n+\r"
        },
        {
            "sha": "acaf648947bbdcb8ce38d5cb963999d2596edefd",
            "filename": "java/javax/servlet/http/HttpSessionContext.java",
            "status": "added",
            "additions": 70,
            "deletions": 0,
            "changes": 70,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpSessionContext.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpSessionContext.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fhttp%2FHttpSessionContext.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,70 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+\r\n+\r\n+package javax.servlet.http;\r\n+\r\n+import java.util.Enumeration;\r\n+\r\n+/**\r\n+ *\r\n+ * @author\t\tVarious\r\n+ * @version\t\t$Version$\r\n+ *\r\n+ * @deprecated\t\tAs of Java(tm) Servlet API 2.1\r\n+ *\t\t\tfor security reasons, with no replacement.\r\n+ *\t\t\tThis interface will be removed in a future\r\n+ *\t\t\tversion of this API.\r\n+ *\r\n+ * @see\t\t\tHttpSession\r\n+ * @see\t\t\tHttpSessionBindingEvent\r\n+ * @see\t\t\tHttpSessionBindingListener\r\n+ *\r\n+ */\r\n+\r\n+\r\n+public interface HttpSessionContext {\r\n+\r\n+    /**\r\n+     *\r\n+     * @deprecated \tAs of Java Servlet API 2.1 with\r\n+     *\t\t\tno replacement. This method must \r\n+     *\t\t\treturn null and will be removed in\r\n+     *\t\t\ta future version of this API.\r\n+     *\r\n+     */\r\n+\r\n+    public HttpSession getSession(String sessionId);\r\n+    \r\n+    \r\n+    \r\n+  \r\n+    /**\r\n+     *\r\n+     * @deprecated\tAs of Java Servlet API 2.1 with\r\n+     *\t\t\tno replacement. This method must return \r\n+     *\t\t\tan empty <code>Enumeration</code> and will be removed\r\n+     *\t\t\tin a future version of this API.\r\n+     *\r\n+     */\r\n+\r\n+    public Enumeration getIds();\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+\r"
        },
        {
            "sha": "fe39428d839bbe02a0f67069d5ebe490c6e32695",
            "filename": "java/javax/servlet/http/HttpSessionEvent.java",
            "status": "added",
            "additions": 33,
            "deletions": 0,
            "changes": 33,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpSessionEvent.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpSessionEvent.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fhttp%2FHttpSessionEvent.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,33 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet.http;\r\n+\r\n+\r\n+\t/** This is the class representing event notifications for\r\n+\t* changes to sessions within a web application.\r\n+\t * @since\tv 2.3\r\n+\t*/\r\n+public class HttpSessionEvent extends java.util.EventObject {\r\n+\t/** Construct a session event from the given source.*/\r\n+\t public HttpSessionEvent(HttpSession source) {\r\n+\t\tsuper(source);\r\n+}\r\n+\t/** Return the session that changed.*/\r\n+    public HttpSession getSession () { \r\n+\treturn (HttpSession) super.getSource();\r\n+    }\r\n+}\r\n+\r"
        },
        {
            "sha": "6f2c7e3b39fa6b0d80cacb851734791c9b5fb835",
            "filename": "java/javax/servlet/http/HttpSessionListener.java",
            "status": "added",
            "additions": 44,
            "deletions": 0,
            "changes": 44,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpSessionListener.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpSessionListener.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fhttp%2FHttpSessionListener.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,44 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet.http;\r\n+\r\n+import java.util.EventListener;\r\n+\r\n+\t/** \r\n+\t* Implementations of this interface are notified of changes to the \r\n+\t* list of active sessions in a web application.\r\n+\t* To receive notification events, the implementation class\r\n+\t* must be configured in the deployment descriptor for the web application.\r\n+\t* @see HttpSessionEvent\r\n+\t * @since\tv 2.3\r\n+\t*/\r\n+\r\n+public interface HttpSessionListener extends EventListener {\r\n+    \r\n+\t/** \r\n+\t* Notification that a session was created.\r\n+\t* @param se the notification event\r\n+\t*/\r\n+    public void sessionCreated ( HttpSessionEvent se );\r\n+    \r\n+\t/** \r\n+\t* Notification that a session is about to be invalidated.\r\n+\t* @param se the notification event\r\n+\t*/\r\n+    public void sessionDestroyed ( HttpSessionEvent se );\r\n+    \r\n+}\r\n+\r"
        },
        {
            "sha": "bee397b8961dd6f76e6f56ac87a846a321c5dffa",
            "filename": "java/javax/servlet/http/HttpUtils.java",
            "status": "added",
            "additions": 306,
            "deletions": 0,
            "changes": 306,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpUtils.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FHttpUtils.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fhttp%2FHttpUtils.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,306 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+\r\n+package javax.servlet.http;\r\n+\r\n+import javax.servlet.ServletInputStream;\r\n+import java.util.Hashtable;\r\n+import java.util.ResourceBundle;\r\n+import java.util.StringTokenizer;\r\n+import java.io.IOException;\r\n+\r\n+/**\r\n+ * @deprecated\t\tAs of Java(tm) Servlet API 2.3. \r\n+ *\t\t\tThese methods were only useful\r\n+ *\t\t\twith the default encoding and have been moved\r\n+ *\t\t\tto the request interfaces.\r\n+ *\r\n+*/\r\n+\r\n+\r\n+public class HttpUtils {\r\n+\r\n+    private static final String LSTRING_FILE =\r\n+\t\"javax.servlet.http.LocalStrings\";\r\n+    private static ResourceBundle lStrings =\r\n+\tResourceBundle.getBundle(LSTRING_FILE);\r\n+        \r\n+    \r\n+    \r\n+    /**\r\n+     * Constructs an empty <code>HttpUtils</code> object.\r\n+     *\r\n+     */\r\n+\r\n+    public HttpUtils() {}\r\n+    \r\n+    \r\n+    \r\n+    \r\n+\r\n+    /**\r\n+     *\r\n+     * Parses a query string passed from the client to the\r\n+     * server and builds a <code>HashTable</code> object\r\n+     * with key-value pairs. \r\n+     * The query string should be in the form of a string\r\n+     * packaged by the GET or POST method, that is, it\r\n+     * should have key-value pairs in the form <i>key=value</i>,\r\n+     * with each pair separated from the next by a &amp; character.\r\n+     *\r\n+     * <p>A key can appear more than once in the query string\r\n+     * with different values. However, the key appears only once in \r\n+     * the hashtable, with its value being\r\n+     * an array of strings containing the multiple values sent\r\n+     * by the query string.\r\n+     * \r\n+     * <p>The keys and values in the hashtable are stored in their\r\n+     * decoded form, so\r\n+     * any + characters are converted to spaces, and characters\r\n+     * sent in hexadecimal notation (like <i>%xx</i>) are\r\n+     * converted to ASCII characters.\r\n+     *\r\n+     * @param s\t\ta string containing the query to be parsed\r\n+     *\r\n+     * @return\t\ta <code>HashTable</code> object built\r\n+     * \t\t\tfrom the parsed key-value pairs\r\n+     *\r\n+     * @exception IllegalArgumentException\tif the query string \r\n+     *\t\t\t\t\t\tis invalid\r\n+     *\r\n+     */\r\n+\r\n+    static public Hashtable parseQueryString(String s) {\r\n+\r\n+\tString valArray[] = null;\r\n+\t\r\n+\tif (s == null) {\r\n+\t    throw new IllegalArgumentException();\r\n+\t}\r\n+\tHashtable ht = new Hashtable();\r\n+\tStringBuffer sb = new StringBuffer();\r\n+\tStringTokenizer st = new StringTokenizer(s, \"&\");\r\n+\twhile (st.hasMoreTokens()) {\r\n+\t    String pair = (String)st.nextToken();\r\n+\t    int pos = pair.indexOf('=');\r\n+\t    if (pos == -1) {\r\n+\t\t// XXX\r\n+\t\t// should give more detail about the illegal argument\r\n+\t\tthrow new IllegalArgumentException();\r\n+\t    }\r\n+\t    String key = parseName(pair.substring(0, pos), sb);\r\n+\t    String val = parseName(pair.substring(pos+1, pair.length()), sb);\r\n+\t    if (ht.containsKey(key)) {\r\n+\t\tString oldVals[] = (String []) ht.get(key);\r\n+\t\tvalArray = new String[oldVals.length + 1];\r\n+\t\tfor (int i = 0; i < oldVals.length; i++) \r\n+\t\t    valArray[i] = oldVals[i];\r\n+\t\tvalArray[oldVals.length] = val;\r\n+\t    } else {\r\n+\t\tvalArray = new String[1];\r\n+\t\tvalArray[0] = val;\r\n+\t    }\r\n+\t    ht.put(key, valArray);\r\n+\t}\r\n+\treturn ht;\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * Parses data from an HTML form that the client sends to \r\n+     * the server using the HTTP POST method and the \r\n+     * <i>application/x-www-form-urlencoded</i> MIME type.\r\n+     *\r\n+     * <p>The data sent by the POST method contains key-value\r\n+     * pairs. A key can appear more than once in the POST data\r\n+     * with different values. However, the key appears only once in \r\n+     * the hashtable, with its value being\r\n+     * an array of strings containing the multiple values sent\r\n+     * by the POST method.\r\n+     *\r\n+     * <p>The keys and values in the hashtable are stored in their\r\n+     * decoded form, so\r\n+     * any + characters are converted to spaces, and characters\r\n+     * sent in hexadecimal notation (like <i>%xx</i>) are\r\n+     * converted to ASCII characters.\r\n+     *\r\n+     *\r\n+     *\r\n+     * @param len\tan integer specifying the length,\r\n+     *\t\t\tin characters, of the \r\n+     *\t\t\t<code>ServletInputStream</code>\r\n+     *\t\t\tobject that is also passed to this\r\n+     *\t\t\tmethod\r\n+     *\r\n+     * @param in\tthe <code>ServletInputStream</code>\r\n+     *\t\t\tobject that contains the data sent\r\n+     *\t\t\tfrom the client\r\n+     * \r\n+     * @return\t\ta <code>HashTable</code> object built\r\n+     *\t\t\tfrom the parsed key-value pairs\r\n+     *\r\n+     *\r\n+     * @exception IllegalArgumentException\tif the data\r\n+     *\t\t\tsent by the POST method is invalid\r\n+     *\r\n+     */\r\n+     \r\n+\r\n+    static public Hashtable parsePostData(int len, \r\n+\t\t\t\t\t  ServletInputStream in)\r\n+    {\r\n+\t// XXX\r\n+\t// should a length of 0 be an IllegalArgumentException\r\n+\t\r\n+\tif (len <=0)\r\n+\t    return new Hashtable(); // cheap hack to return an empty hash\r\n+\r\n+\tif (in == null) {\r\n+\t    throw new IllegalArgumentException();\r\n+\t}\r\n+\t\r\n+\t//\r\n+\t// Make sure we read the entire POSTed body.\r\n+\t//\r\n+        byte[] postedBytes = new byte [len];\r\n+        try {\r\n+            int offset = 0;\r\n+       \r\n+\t    do {\r\n+\t\tint inputLen = in.read (postedBytes, offset, len - offset);\r\n+\t\tif (inputLen <= 0) {\r\n+\t\t    String msg = lStrings.getString(\"err.io.short_read\");\r\n+\t\t    throw new IllegalArgumentException (msg);\r\n+\t\t}\r\n+\t\toffset += inputLen;\r\n+\t    } while ((len - offset) > 0);\r\n+\r\n+\t} catch (IOException e) {\r\n+\t    throw new IllegalArgumentException(e.getMessage());\r\n+\t}\r\n+\r\n+        // XXX we shouldn't assume that the only kind of POST body\r\n+        // is FORM data encoded using ASCII or ISO Latin/1 ... or\r\n+        // that the body should always be treated as FORM data.\r\n+        //\r\n+\r\n+        try {\r\n+            String postedBody = new String(postedBytes, 0, len, \"8859_1\");\r\n+            return parseQueryString(postedBody);\r\n+        } catch (java.io.UnsupportedEncodingException e) {\r\n+            // XXX function should accept an encoding parameter & throw this\r\n+            // exception.  Otherwise throw something expected.\r\n+            throw new IllegalArgumentException(e.getMessage());\r\n+        }\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+    /*\r\n+     * Parse a name in the query string.\r\n+     */\r\n+\r\n+    static private String parseName(String s, StringBuffer sb) {\r\n+\tsb.setLength(0);\r\n+\tfor (int i = 0; i < s.length(); i++) {\r\n+\t    char c = s.charAt(i); \r\n+\t    switch (c) {\r\n+\t    case '+':\r\n+\t\tsb.append(' ');\r\n+\t\tbreak;\r\n+\t    case '%':\r\n+\t\ttry {\r\n+\t\t    sb.append((char) Integer.parseInt(s.substring(i+1, i+3), \r\n+\t\t\t\t\t\t      16));\r\n+\t\t    i += 2;\r\n+\t\t} catch (NumberFormatException e) {\r\n+\t\t    // XXX\r\n+\t\t    // need to be more specific about illegal arg\r\n+\t\t    throw new IllegalArgumentException();\r\n+\t\t} catch (StringIndexOutOfBoundsException e) {\r\n+\t\t    String rest  = s.substring(i);\r\n+\t\t    sb.append(rest);\r\n+\t\t    if (rest.length()==2)\r\n+\t\t\ti++;\r\n+\t\t}\r\n+\t\t\r\n+\t\tbreak;\r\n+\t    default:\r\n+\t\tsb.append(c);\r\n+\t\tbreak;\r\n+\t    }\r\n+\t}\r\n+\treturn sb.toString();\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+    /**\r\n+     *\r\n+     * Reconstructs the URL the client used to make the request,\r\n+     * using information in the <code>HttpServletRequest</code> object.\r\n+     * The returned URL contains a protocol, server name, port\r\n+     * number, and server path, but it does not include query\r\n+     * string parameters.\r\n+     * \r\n+     * <p>Because this method returns a <code>StringBuffer</code>,\r\n+     * not a string, you can modify the URL easily, for example,\r\n+     * to append query parameters.\r\n+     *\r\n+     * <p>This method is useful for creating redirect messages\r\n+     * and for reporting errors.\r\n+     *\r\n+     * @param req\ta <code>HttpServletRequest</code> object\r\n+     *\t\t\tcontaining the client's request\r\n+     * \r\n+     * @return\t\ta <code>StringBuffer</code> object containing\r\n+     *\t\t\tthe reconstructed URL\r\n+     *\r\n+     */\r\n+\r\n+    public static StringBuffer getRequestURL (HttpServletRequest req) {\r\n+\tStringBuffer url = new StringBuffer ();\r\n+\tString scheme = req.getScheme ();\r\n+\tint port = req.getServerPort ();\r\n+\tString urlPath = req.getRequestURI();\r\n+\t\r\n+\t//String\t\tservletPath = req.getServletPath ();\r\n+\t//String\t\tpathInfo = req.getPathInfo ();\r\n+\r\n+\turl.append (scheme);\t\t// http, https\r\n+\turl.append (\"://\");\r\n+\turl.append (req.getServerName ());\r\n+\tif ((scheme.equals (\"http\") && port != 80)\r\n+\t\t|| (scheme.equals (\"https\") && port != 443)) {\r\n+\t    url.append (':');\r\n+\t    url.append (req.getServerPort ());\r\n+\t}\r\n+\t//if (servletPath != null)\r\n+\t//    url.append (servletPath);\r\n+\t//if (pathInfo != null)\r\n+\t//    url.append (pathInfo);\r\n+\turl.append(urlPath);\r\n+\treturn url;\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r"
        },
        {
            "sha": "a12d8ed8422932c75f3186f34c5a4fa27e7c8c1a",
            "filename": "java/javax/servlet/http/LocalStrings.properties",
            "status": "added",
            "additions": 27,
            "deletions": 0,
            "changes": 27,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FLocalStrings.properties",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FLocalStrings.properties",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fhttp%2FLocalStrings.properties?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,27 @@\n+# Copyright 2004 The Apache Software Foundation\r\n+#\r\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+# you may not use this file except in compliance with the License.\r\n+# You may obtain a copy of the License at\r\n+#\r\n+#     http://www.apache.org/licenses/LICENSE-2.0\r\n+#\r\n+# Unless required by applicable law or agreed to in writing, software\r\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+# See the License for the specific language governing permissions and\r\n+# limitations under the License.\r\n+\r\n+# Default localized string information\r\n+# Localized for Locale en_US\r\n+\r\n+err.cookie_name_is_token=Cookie name \\\"{0}\\\" is a reserved token\r\n+err.io.negativelength=Negative Length given in write method\r\n+err.io.short_read=Short Read\r\n+\r\n+http.method_not_implemented=Method {0} is not defined in RFC 2068 and is not supported by the Servlet API \r\n+\r\n+http.method_get_not_supported=HTTP method GET is not supported by this URL\r\n+http.method_post_not_supported=HTTP method POST is not supported by this URL\r\n+http.method_put_not_supported=HTTP method PUT is not supported by this URL\r\n+http.method_delete_not_supported=Http method DELETE is not supported by this URL\r"
        },
        {
            "sha": "e186e94e1b51f5ddc170e429c9d6fbf254885439",
            "filename": "java/javax/servlet/http/LocalStrings_es.properties",
            "status": "added",
            "additions": 29,
            "deletions": 0,
            "changes": 29,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FLocalStrings_es.properties",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FLocalStrings_es.properties",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fhttp%2FLocalStrings_es.properties?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,29 @@\n+# Copyright 2004 The Apache Software Foundation\r\n+#\r\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+# you may not use this file except in compliance with the License.\r\n+# You may obtain a copy of the License at\r\n+#\r\n+#     http://www.apache.org/licenses/LICENSE-2.0\r\n+#\r\n+# Unless required by applicable law or agreed to in writing, software\r\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+# See the License for the specific language governing permissions and\r\n+# limitations under the License.\r\n+\r\n+# $Id: LocalStrings_es.properties 267129 2004-03-18 16:40:35Z jfarcand $\r\n+#\r\n+# Default localized string information\r\n+# Localized para Locale es_ES\r\n+\r\n+err.cookie_name_is_token=El Nombre de Cookie {0} es una palabra reservada\r\n+err.io.negativelength=Longitud Negativa en el metodo write\r\n+err.io.short_read=Lectura Corta\r\n+\r\n+http.method_not_implemented=El Metodo {0} no esta definido en la especificacion RFC 2068 y no es soportado por la API Servlet \r\n+\r\n+http.method_get_not_supported=El Metodo HTTP GET no es soportado por esta URL\r\n+http.method_post_not_supported=El Metodo HTTP POST no es soportado por esta URL\r\n+http.method_put_not_supported=El Metodo HTTP PUT no es soportado por esta URL\r\n+http.method_delete_not_supported=El Metodo HTTP DELETE no es soportado por esta URL\r"
        },
        {
            "sha": "e955e41f22d36f18d02ab4cf83a4e3ff3369cdc1",
            "filename": "java/javax/servlet/http/LocalStrings_fr.properties",
            "status": "added",
            "additions": 27,
            "deletions": 0,
            "changes": 27,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FLocalStrings_fr.properties",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FLocalStrings_fr.properties",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fhttp%2FLocalStrings_fr.properties?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,27 @@\n+# Copyright 2004 The Apache Software Foundation\r\n+#\r\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+# you may not use this file except in compliance with the License.\r\n+# You may obtain a copy of the License at\r\n+#\r\n+#     http://www.apache.org/licenses/LICENSE-2.0\r\n+#\r\n+# Unless required by applicable law or agreed to in writing, software\r\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+# See the License for the specific language governing permissions and\r\n+# limitations under the License.\r\n+\r\n+# Default localized string information\r\n+# Localized for Locale fr_FR\r\n+\r\n+err.cookie_name_is_token=Le nom de cookie \\\"{0}\\\" est un \\\"token\\\" r\ufffdserv\ufffd\r\n+err.io.negativelength=Taille n\ufffdgative donn\ufffde dans la m\ufffdthode \\\"write\\\"\r\n+err.io.short_read=Lecture partielle\r\n+\r\n+http.method_not_implemented=Le m\ufffdthode {0} n''est pas d\ufffdfinie dans la RFC 2068 et n''est pas support\ufffde par l''API Servlet\r\n+\r\n+http.method_get_not_supported=La m\ufffdthode HTTP GET n''est pas support\ufffde par cette URL\r\n+http.method_post_not_supported=La m\ufffdthode HTTP POST n''est pas support\ufffde par cette URL\r\n+http.method_put_not_supported=La m\ufffdthode HTTP PUT n''est pas support\ufffde par cette URL\r\n+http.method_delete_not_supported=La m\ufffdthode HTTP DELETE n''est pas support\ufffde par cette URL \r"
        },
        {
            "sha": "dbff17e5a4fd397dc08c23f9e2547bc012c52935",
            "filename": "java/javax/servlet/http/LocalStrings_ja.properties",
            "status": "added",
            "additions": 27,
            "deletions": 0,
            "changes": 27,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FLocalStrings_ja.properties",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2FLocalStrings_ja.properties",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fhttp%2FLocalStrings_ja.properties?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,27 @@\n+# Copyright 2004 The Apache Software Foundation\r\n+#\r\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+# you may not use this file except in compliance with the License.\r\n+# You may obtain a copy of the License at\r\n+#\r\n+#     http://www.apache.org/licenses/LICENSE-2.0\r\n+#\r\n+# Unless required by applicable law or agreed to in writing, software\r\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+# See the License for the specific language governing permissions and\r\n+# limitations under the License.\r\n+\r\n+# Default localized string information\r\n+# Localized for Locale ja_JP\r\n+\r\n+err.cookie_name_is_token=\\u30af\\u30c3\\u30ad\\u30fc\\u540d \\\"{0}\\\" \\u306f\\u4e88\\u7d04\\u6e08\\u306e\\u30c8\\u30fc\\u30af\\u30f3\\u3067\\u3059\\u3002\r\n+err.io.negativelength=write\\u30e1\\u30bd\\u30c3\\u30c9\\u306b\\u8ca0\\u306e\\u9577\\u3055\\u304c\\u6307\\u5b9a\\u3055\\u308c\\u307e\\u3057\\u305f\\u3002\r\n+err.io.short_read=\\u8aad\\u307f\\u8fbc\\u307f\\u304c\\u3059\\u3050\\u306b\\u7d42\\u308f\\u308a\\u307e\\u3057\\u305f\\u3002\r\n+\r\n+http.method_not_implemented=\\u30e1\\u30bd\\u30c3\\u30c9 {0} \\u306fRFC 2068\\u306b\\u306f\\u5b9a\\u7fa9\\u3055\\u308c\\u3066\\u304a\\u3089\\u305a\\u3001\\u30b5\\u30fc\\u30d6\\u30ec\\u30c3\\u30c8API\\u3067\\u306f\\u30b5\\u30dd\\u30fc\\u30c8\\u3055\\u308c\\u307e\\u305b\\u3093\\u3002\r\n+\r\n+http.method_get_not_supported=HTTP\\u306eGET\\u30e1\\u30bd\\u30c3\\u30c9\\u306f\\u3001\\u3053\\u306eURL\\u3067\\u306f\\u30b5\\u30dd\\u30fc\\u30c8\\u3055\\u308c\\u3066\\u3044\\u307e\\u305b\\u3093\\u3002\r\n+http.method_post_not_supported=HTTP\\u306ePOST\\u30e1\\u30bd\\u30c3\\u30c9\\u306f\\u3001\\u3053\\u306eURL\\u3067\\u306f\\u30b5\\u30dd\\u30fc\\u30c8\\u3055\\u308c\\u3066\\u3044\\u307e\\u305b\\u3093\\u3002\r\n+http.method_put_not_supported=HTTP\\u306ePUT\\u30e1\\u30bd\\u30c3\\u30c9\\u306f\\u3001\\u3053\\u306eURL\\u3067\\u306f\\u30b5\\u30dd\\u30fc\\u30c8\\u3055\\u308c\\u3066\\u3044\\u307e\\u305b\\u3093\\u3002\r\n+http.method_delete_not_supported=HTTP\\u306eDELETE\\u30e1\\u30bd\\u30c3\\u30c9\\u306f\\u3001\\u3053\\u306eURL\\u3067\\u306f\\u30b5\\u30dd\\u30fc\\u30c8\\u3055\\u308c\\u3066\\u3044\\u307e\\u305b\\u3093\\u3002\r"
        },
        {
            "sha": "3b5c6c2e404e850bf13f72074dd98ec08a3c1498",
            "filename": "java/javax/servlet/http/package.html",
            "status": "added",
            "additions": 23,
            "deletions": 0,
            "changes": 23,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2Fpackage.html",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fhttp%2Fpackage.html",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fhttp%2Fpackage.html?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,23 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\r\n+<HTML>\r\n+<HEAD>\r\n+<!--\r\n+\r\n+  Copyright 2001 Sun Microsystems, Inc. All Rights Reserved.\r\n+\r\n+  This software is the proprietary information of Sun Microsystems, Inc.  \r\n+  Use is subject to license terms.\r\n+\r\n+-->\r\n+\r\n+</HEAD>\r\n+<BODY BGCOLOR=\"white\">\r\n+\r\n+The javax.servlet.http package contains a number of classes and interfaces\r\n+that describe and define the contracts between a servlet class\r\n+running under the HTTP protocol and the runtime environment provided\r\n+for an instance of such a class by a conforming servlet container.\r\n+\r\n+\r\n+</BODY>\r\n+</HTML>\r"
        },
        {
            "sha": "f6c623409ab68eb67f3ce2cbad7dc703fb3b2212",
            "filename": "java/javax/servlet/jsp/ErrorData.java",
            "status": "added",
            "additions": 88,
            "deletions": 0,
            "changes": 88,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2FErrorData.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2FErrorData.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2FErrorData.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,88 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/ \r\n+package javax.servlet.jsp;\r\n+\r\n+/**\r\n+ * Contains information about an error, for error pages.\r\n+ * The information contained in this instance is meaningless if not used\r\n+ * in the context of an error page.  To indicate a JSP is an error page,\r\n+ * the page author must set the isErrorPage attribute of the page directive\r\n+ * to \"true\".\r\n+ *\r\n+ * @see PageContext#getErrorData\r\n+ * @since 2.0\r\n+ */\r\n+\r\n+public final class ErrorData {\r\n+\r\n+    private Throwable throwable;\r\n+    private int statusCode;\r\n+    private String uri;\r\n+    private String servletName;\r\n+\r\n+    /**\r\n+     * Creates a new ErrorData object.\r\n+     *\r\n+     * @param throwable The Throwable that is the cause of the error\r\n+     * @param statusCode The status code of the error\r\n+     * @param uri The request URI\r\n+     * @param servletName The name of the servlet invoked\r\n+     */\r\n+    public ErrorData( Throwable throwable, int statusCode, String uri, \r\n+\tString servletName )\r\n+    {\r\n+\tthis.throwable = throwable;\r\n+\tthis.statusCode = statusCode;\r\n+\tthis.uri = uri;\r\n+\tthis.servletName = servletName;\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the Throwable that caused the error.\r\n+     *\r\n+     * @return The Throwable that caused the error\r\n+     */\r\n+    public Throwable getThrowable() {\r\n+\treturn this.throwable;\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the status code of the error.\r\n+     *\r\n+     * @return The status code of the error\r\n+     */\r\n+    public int getStatusCode() {\r\n+\treturn this.statusCode;\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the request URI.\r\n+     *\r\n+     * @return The request URI\r\n+     */\r\n+    public String getRequestURI() {\r\n+\treturn this.uri;\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the name of the servlet invoked.\r\n+     *\r\n+     * @return The name of the servlet invoked\r\n+     */\r\n+    public String getServletName() {\r\n+\treturn this.servletName;\r\n+    }\r\n+}\r"
        },
        {
            "sha": "1568c7ef8e0d7ec119ad5691818f08abf7a69181",
            "filename": "java/javax/servlet/jsp/HttpJspPage.java",
            "status": "added",
            "additions": 57,
            "deletions": 0,
            "changes": 57,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2FHttpJspPage.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2FHttpJspPage.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2FHttpJspPage.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,57 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+ \r\n+package javax.servlet.jsp;\r\n+\r\n+import javax.servlet.*;\r\n+import javax.servlet.http.*;\r\n+import java.io.IOException;\r\n+\r\n+/**\r\n+ * The HttpJspPage interface describes the interaction that a JSP Page\r\n+ * Implementation Class must satisfy when using the HTTP protocol.\r\n+ *\r\n+ * <p>\r\n+ * The behaviour is identical to that of the JspPage, except for the signature\r\n+ * of the _jspService method, which is now expressible in the Java type\r\n+ * system and included explicitly in the interface.\r\n+ * \r\n+ * @see JspPage\r\n+ */\r\n+\r\n+public interface HttpJspPage extends JspPage {\r\n+\r\n+    /** The _jspService()method corresponds to the body of the JSP page. This\r\n+     * method is defined automatically by the JSP container and should never\r\n+     * be defined by the JSP page author.\r\n+     * <p>\r\n+     * If a superclass is specified using the extends attribute, that\r\n+     * superclass may choose to perform some actions in its service() method\r\n+     * before or after calling the _jspService() method.  See using the extends\r\n+     * attribute in the JSP_Engine chapter of the JSP specification.\r\n+     *\r\n+     * @param request Provides client request information to the JSP.\r\n+     * @param response Assists the JSP in sending a response to the client.\r\n+     * @throws ServletException Thrown if an error occurred during the \r\n+     *     processing of the JSP and that the container should take \r\n+     *     appropriate action to clean up the request.\r\n+     * @throws IOException Thrown if an error occurred while writing the\r\n+     *     response for this page.\r\n+     */\r\n+    public void _jspService(HttpServletRequest request,\r\n+                            HttpServletResponse response)\r\n+       throws ServletException, IOException;\r\n+}\r"
        },
        {
            "sha": "a51bf49ee72d5c0ab856552dc3d2b06aea550ed4",
            "filename": "java/javax/servlet/jsp/JspApplicationContext.java",
            "status": "added",
            "additions": 76,
            "deletions": 0,
            "changes": 76,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2FJspApplicationContext.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2FJspApplicationContext.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2FJspApplicationContext.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,76 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet.jsp;\r\n+\r\n+import javax.el.ELContextListener;\r\n+import javax.el.ELResolver;\r\n+import javax.el.ExpressionFactory;\r\n+\r\n+/**\r\n+ * <p>\r\n+ * Stores <i>application</i>-scoped information for the JSP container.\r\n+ * </p>\r\n+ * @since 2.1\r\n+ */\r\n+public interface JspApplicationContext {\r\n+\r\n+\t/**\r\n+\t * <p>\r\n+\t * Registers an <code>ELContextListener</code> that will notified whenever\r\n+\t * a new <code>ELContext</code> is created.\r\n+\t * </p>\r\n+\t * <p>\r\n+\t * At the very least, any <code>ELContext</code> instantiated will have reference\r\n+\t * to the <code>JspContext</code> under <code>JspContext.class</code>.\r\n+\t * </p>\r\n+\t * \r\n+\t * @param listener\r\n+\t */\r\n+\tpublic void addELContextListener(ELContextListener listener);\r\n+\t\r\n+\t/**\r\n+\t * <p>\r\n+\t * Adds an <code>ELResolver</code> to the chain of EL variable and property management\r\n+\t * within JSP pages and Tag files.\r\n+\t * </p>\r\n+\t * <p>\r\n+\t * JSP has a default set of ELResolvers to chain for all EL evaluation:\r\n+\t * <ul>\r\n+\t * <li><code>ImplicitObjectELResolver</code></li>\r\n+\t * <li><code>ELResolver</code> instances registered with this method</li>\r\n+\t * <li><code>MapELResolver</code></li>\r\n+\t * <li><code>ListELResolver</code></li>\r\n+\t * <li><code>ArrayELResolver</code></li>\r\n+\t * <li><code>BeanELResolver</code></li>\r\n+\t * <li><code>ScopedAttributeELResolver</code></li>\r\n+\t * </ul>\r\n+\t * </p>\r\n+\t * \r\n+\t * @param resolver an additional resolver\r\n+\t * @throws IllegalStateException if called after the application's <code>ServletContextListeners</code> have been initialized.\r\n+\t */\r\n+\tpublic void addELResolver(ELResolver resolver) throws IllegalStateException;\r\n+\t\r\n+\t/**\r\n+\t * <p>\r\n+\t * Returns the JSP container's <code>ExpressionFactory</code> implementation for EL use.\r\n+\t * </p>\r\n+\t * \r\n+\t * @return an <code>ExpressionFactory</code> implementation\r\n+\t */\r\n+\tpublic ExpressionFactory getExpressionFactory();\r\n+\t\r\n+}\r"
        },
        {
            "sha": "23b7954d56103d6c09117da25b3646c56d72e307",
            "filename": "java/javax/servlet/jsp/JspContext.java",
            "status": "added",
            "additions": 274,
            "deletions": 0,
            "changes": 274,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2FJspContext.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2FJspContext.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2FJspContext.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,274 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/ \r\n+package javax.servlet.jsp;\r\n+\r\n+import java.util.Enumeration;\r\n+\r\n+import javax.el.ELContext;\r\n+import javax.servlet.jsp.el.ExpressionEvaluator;\r\n+import javax.servlet.jsp.el.VariableResolver;\r\n+\r\n+/**\r\n+ * <p>\r\n+ * <code>JspContext</code> serves as the base class for the \r\n+ * PageContext class and abstracts all information that is not specific\r\n+ * to servlets.  This allows for Simple Tag Extensions to be used\r\n+ * outside of the context of a request/response Servlet.\r\n+ * <p>\r\n+ * The JspContext provides a number of facilities to the \r\n+ * page/component author and page implementor, including:\r\n+ * <ul>\r\n+ * <li>a single API to manage the various scoped namespaces\r\n+ * <li>a mechanism to obtain the JspWriter for output\r\n+ * <li>a mechanism to expose page directive attributes to the \r\n+ *     scripting environment\r\n+ * </ul>\r\n+ *\r\n+ * <p><B>Methods Intended for Container Generated Code</B>\r\n+ * <p>\r\n+ * The following methods enable the <B>management of nested</B> JspWriter \r\n+ * streams to implement Tag Extensions: <code>pushBody()</code> and\r\n+ * <code>popBody()</code>\r\n+ *\r\n+ * <p><B>Methods Intended for JSP authors</B>\r\n+ * <p>\r\n+ * Some methods provide <B>uniform access</B> to the diverse objects\r\n+ * representing scopes.\r\n+ * The implementation must use the underlying machinery\r\n+ * corresponding to that scope, so information can be passed back and\r\n+ * forth between the underlying environment (e.g. Servlets) and JSP pages.\r\n+ * The methods are:\r\n+ * <code>setAttribute()</code>,  <code>getAttribute()</code>,\r\n+ * <code>findAttribute()</code>,  <code>removeAttribute()</code>,\r\n+ * <code>getAttributesScope()</code> and \r\n+ * <code>getAttributeNamesInScope()</code>.\r\n+ * \r\n+ * <p>\r\n+ * The following methods provide <B>convenient access</B> to implicit objects:\r\n+ * <code>getOut()</code>\r\n+ *\r\n+ * <p>\r\n+ * The following methods provide <B>programmatic access</b> to the \r\n+ * Expression Language evaluator:\r\n+ * <code>getExpressionEvaluator()</code>, <code>getVariableResolver()</code>\r\n+ *\r\n+ * @since 2.0\r\n+ */\r\n+\r\n+public abstract class JspContext {\r\n+\r\n+    /**\r\n+     * Sole constructor. (For invocation by subclass constructors, \r\n+     * typically implicit.)\r\n+     */\r\n+    public JspContext() {\r\n+    }\r\n+    \r\n+    /** \r\n+     * Register the name and value specified with page scope semantics.\r\n+     * If the value passed in is <code>null</code>, this has the same \r\n+     * effect as calling \r\n+     * <code>removeAttribute( name, PageContext.PAGE_SCOPE )</code>.\r\n+     *\r\n+     * @param name the name of the attribute to set\r\n+     * @param value the value to associate with the name, or null if the\r\n+     *     attribute is to be removed from the page scope.\r\n+     * @throws NullPointerException if the name is null\r\n+     */\r\n+\r\n+    abstract public void setAttribute(String name, Object value);\r\n+\r\n+    /**\r\n+     * Register the name and value specified with appropriate \r\n+     * scope semantics.  If the value passed in is <code>null</code>, \r\n+     * this has the same effect as calling\r\n+     * <code>removeAttribute( name, scope )</code>.\r\n+     * \r\n+     * @param name the name of the attribute to set\r\n+     * @param value the object to associate with the name, or null if\r\n+     *     the attribute is to be removed from the specified scope.\r\n+     * @param scope the scope with which to associate the name/object\r\n+     * \r\n+     * @throws NullPointerException if the name is null\r\n+     * @throws IllegalArgumentException if the scope is invalid\r\n+     * @throws IllegalStateException if the scope is \r\n+     *     PageContext.SESSION_SCOPE but the page that was requested\r\n+     *     does not participate in a session or the session has been\r\n+     *     invalidated.\r\n+     */\r\n+\r\n+    abstract public void setAttribute(String name, Object value, int scope);\r\n+\r\n+    /**\r\n+     * Returns the object associated with the name in the page scope or null\r\n+     * if not found.\r\n+     *\r\n+     * @param name the name of the attribute to get\r\n+     * @return the object associated with the name in the page scope \r\n+     *     or null if not found.\r\n+     * \r\n+     * @throws NullPointerException if the name is null\r\n+     */\r\n+\r\n+    abstract public Object getAttribute(String name);\r\n+\r\n+    /**\r\n+     * Return the object associated with the name in the specified\r\n+     * scope or null if not found.\r\n+     *\r\n+     * @param name the name of the attribute to set\r\n+     * @param scope the scope with which to associate the name/object\r\n+     * @return the object associated with the name in the specified\r\n+     *     scope or null if not found.\r\n+     * \r\n+     * @throws NullPointerException if the name is null\r\n+     * @throws IllegalArgumentException if the scope is invalid \r\n+     * @throws IllegalStateException if the scope is \r\n+     *     PageContext.SESSION_SCOPE but the page that was requested\r\n+     *     does not participate in a session or the session has been\r\n+     *     invalidated.\r\n+     */\r\n+\r\n+    abstract public Object getAttribute(String name, int scope);\r\n+\r\n+    /**\r\n+     * Searches for the named attribute in page, request, session (if valid),\r\n+     * and application scope(s) in order and returns the value associated or\r\n+     * null.\r\n+     *\r\n+     * @param name the name of the attribute to search for\r\n+     * @return the value associated or null\r\n+     * @throws NullPointerException if the name is null\r\n+     */\r\n+\r\n+    abstract public Object findAttribute(String name);\r\n+\r\n+    /**\r\n+     * Remove the object reference associated with the given name\r\n+     * from all scopes.  Does nothing if there is no such object.\r\n+     *\r\n+     * @param name The name of the object to remove.\r\n+     * @throws NullPointerException if the name is null\r\n+     */\r\n+\r\n+    abstract public void removeAttribute(String name);\r\n+\r\n+    /**\r\n+     * Remove the object reference associated with the specified name\r\n+     * in the given scope.  Does nothing if there is no such object.\r\n+     *\r\n+     * @param name The name of the object to remove.\r\n+     * @param scope The scope where to look.\r\n+     * @throws IllegalArgumentException if the scope is invalid\r\n+     * @throws IllegalStateException if the scope is \r\n+     *     PageContext.SESSION_SCOPE but the page that was requested\r\n+     *     does not participate in a session or the session has been\r\n+     *     invalidated.\r\n+     * @throws NullPointerException if the name is null\r\n+     */\r\n+\r\n+    abstract public void removeAttribute(String name, int scope);\r\n+\r\n+    /**\r\n+     * Get the scope where a given attribute is defined.\r\n+     *\r\n+     * @param name the name of the attribute to return the scope for\r\n+     * @return the scope of the object associated with the name specified or 0\r\n+     * @throws NullPointerException if the name is null\r\n+     */\r\n+\r\n+    abstract public int getAttributesScope(String name);\r\n+\r\n+    /**\r\n+     * Enumerate all the attributes in a given scope.\r\n+     *\r\n+     * @param scope the scope to enumerate all the attributes for\r\n+     * @return an enumeration of names (java.lang.String) of all the \r\n+     *     attributes the specified scope\r\n+     * @throws IllegalArgumentException if the scope is invalid\r\n+     * @throws IllegalStateException if the scope is \r\n+     *     PageContext.SESSION_SCOPE but the page that was requested\r\n+     *     does not participate in a session or the session has been\r\n+     *     invalidated.\r\n+     */\r\n+\r\n+    abstract public Enumeration getAttributeNamesInScope(int scope);\r\n+\r\n+    /**\r\n+     * The current value of the out object (a JspWriter).\r\n+     *\r\n+     * @return the current JspWriter stream being used for client response\r\n+     */\r\n+    abstract public JspWriter getOut();\r\n+    \r\n+    /**\r\n+     * Provides programmatic access to the ExpressionEvaluator.\r\n+     * The JSP Container must return a valid instance of an \r\n+     * ExpressionEvaluator that can parse EL expressions.\r\n+     *\r\n+     * @return A valid instance of an ExpressionEvaluator.\r\n+     * @since 2.0\r\n+     */\r\n+    public abstract ExpressionEvaluator getExpressionEvaluator();\r\n+    \r\n+    \r\n+    public abstract ELContext getELContext();\r\n+    \r\n+    /**\r\n+     * Returns an instance of a VariableResolver that provides access to the\r\n+     * implicit objects specified in the JSP specification using this JspContext\r\n+     * as the context object.\r\n+     *\r\n+     * @return A valid instance of a VariableResolver.\r\n+     * @since 2.0\r\n+     */\r\n+    public abstract VariableResolver getVariableResolver();\r\n+    \r\n+    /**\r\n+     * Return a new JspWriter object that sends output to the\r\n+     * provided Writer.  Saves the current \"out\" JspWriter,\r\n+     * and updates the value of the \"out\" attribute in the\r\n+     * page scope attribute namespace of the JspContext.\r\n+     * <p>The returned JspWriter must implement all methods and\r\n+     * behave as though it were unbuffered.  More specifically:\r\n+     * <ul>\r\n+     *   <li>clear() must throw an IOException</li>\r\n+     *   <li>clearBuffer() does nothing</li>\r\n+     *   <li>getBufferSize() always returns 0</li>\r\n+     *   <li>getRemaining() always returns 0</li>\r\n+     * </ul>\r\n+     * </p>\r\n+     *\r\n+     * @param writer The Writer for the returned JspWriter to send\r\n+     *     output to.\r\n+     * @return a new JspWriter that writes to the given Writer.\r\n+     * @since 2.0\r\n+     */\r\n+    public JspWriter pushBody( java.io.Writer writer ) {\r\n+        return null; // XXX to implement\r\n+    }\r\n+    \r\n+    /**\r\n+     * Return the previous JspWriter \"out\" saved by the matching\r\n+     * pushBody(), and update the value of the \"out\" attribute in\r\n+     * the page scope attribute namespace of the JspContext.\r\n+     *\r\n+     * @return the saved JspWriter.\r\n+     */\r\n+    public JspWriter popBody() {\r\n+        return null; // XXX to implement\r\n+    }\r\n+}\r"
        },
        {
            "sha": "4a54fb08eedac31b2f3a25327aa3d54350acabd8",
            "filename": "java/javax/servlet/jsp/JspEngineInfo.java",
            "status": "added",
            "additions": 47,
            "deletions": 0,
            "changes": 47,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2FJspEngineInfo.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2FJspEngineInfo.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2FJspEngineInfo.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,47 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/ \r\n+package javax.servlet.jsp;\r\n+\r\n+/**\r\n+ * The JspEngineInfo is an abstract class that provides information on the\r\n+ * current JSP engine.\r\n+ */\r\n+\r\n+public abstract class JspEngineInfo {\r\n+\r\n+    /**\r\n+     * Sole constructor. (For invocation by subclass constructors, \r\n+     * typically implicit.)\r\n+     */\r\n+    public JspEngineInfo() {\r\n+    }\r\n+    \r\n+    /**\r\n+     * Return the version number of the JSP specification that is supported by\r\n+     * this JSP engine.\r\n+     * <p>\r\n+     * Specification version numbers that consists of positive decimal integers\r\n+     * separated by periods \".\", for example, \"2.0\" or \"1.2.3.4.5.6.7\".\r\n+     * This allows an extensible number to be used to\r\n+     * represent major, minor, micro, etc versions.\r\n+     * The version number must begin with a number.\r\n+     * </p>\r\n+     *\r\n+     * @return the specification version, null is returned if it is not known\r\n+     */\r\n+\r\n+    public abstract String getSpecificationVersion();\r\n+}\r"
        },
        {
            "sha": "61e66db8fb2b52389cc650d17bd90f444ae8f008",
            "filename": "java/javax/servlet/jsp/JspException.java",
            "status": "added",
            "additions": 112,
            "deletions": 0,
            "changes": 112,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2FJspException.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2FJspException.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2FJspException.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,112 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet.jsp;\r\n+\r\n+/**\r\n+ * A generic exception known to the JSP engine; uncaught\r\n+ * JspExceptions will result in an invocation of the errorpage\r\n+ * machinery.\r\n+ */\r\n+\r\n+public class JspException extends Exception {\r\n+\r\n+    private Throwable rootCause;\r\n+\r\n+\r\n+    /**\r\n+     * Construct a JspException.\r\n+     */\r\n+    public JspException() {\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Constructs a new JSP exception with the\r\n+     * specified message. The message can be written \r\n+     * to the server log and/or displayed for the user. \r\n+     *\r\n+     * @param msg \t\ta <code>String</code> \r\n+     *\t\t\t\tspecifying the text of \r\n+     *\t\t\t\tthe exception message\r\n+     *\r\n+     */\r\n+    public JspException(String msg) {\r\n+\tsuper(msg);\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Constructs a new JSP exception when the JSP \r\n+     * needs to throw an exception and include a message \r\n+     * about the \"root cause\" exception that interfered with its \r\n+     * normal operation, including a description message.\r\n+     *\r\n+     *\r\n+     * @param message \t\ta <code>String</code> containing \r\n+     *\t\t\t\tthe text of the exception message\r\n+     *\r\n+     * @param rootCause\t\tthe <code>Throwable</code> exception \r\n+     *\t\t\t\tthat interfered with the servlet's\r\n+     *\t\t\t\tnormal operation, making this servlet\r\n+     *\t\t\t\texception necessary\r\n+     *\r\n+     */\r\n+    \r\n+    public JspException(String message, Throwable rootCause) {\r\n+\tsuper(message);\r\n+\tthis.rootCause = rootCause;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Constructs a new JSP exception when the JSP \r\n+     * needs to throw an exception and include a message\r\n+     * about the \"root cause\" exception that interfered with its\r\n+     * normal operation.  The exception's message is based on the localized\r\n+     * message of the underlying exception.\r\n+     *\r\n+     * <p>This method calls the <code>getLocalizedMessage</code> method\r\n+     * on the <code>Throwable</code> exception to get a localized exception\r\n+     * message. When subclassing <code>JspException</code>, \r\n+     * this method can be overridden to create an exception message \r\n+     * designed for a specific locale.\r\n+     *\r\n+     * @param rootCause \tthe <code>Throwable</code> exception\r\n+     * \t\t\t\tthat interfered with the JSP's\r\n+     *\t\t\t\tnormal operation, making the JSP exception\r\n+     *\t\t\t\tnecessary\r\n+     *\r\n+     */\r\n+\r\n+    public JspException(Throwable rootCause) {\r\n+\tsuper(rootCause.getLocalizedMessage());\r\n+\tthis.rootCause = rootCause;\r\n+    }\r\n+\r\n+    \r\n+    /**\r\n+     * Returns the exception that caused this JSP exception.\r\n+     *\r\n+     *\r\n+     * @return\t\t\tthe <code>Throwable</code> \r\n+     *\t\t\t\tthat caused this JSP exception\r\n+     *\r\n+     */\r\n+    \r\n+    public Throwable getRootCause() {\r\n+\treturn rootCause;\r\n+    }\r\n+}\r"
        },
        {
            "sha": "3380023d5a86ff09c1459041243438e36c6e8d5d",
            "filename": "java/javax/servlet/jsp/JspFactory.java",
            "status": "added",
            "additions": 155,
            "deletions": 0,
            "changes": 155,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2FJspFactory.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2FJspFactory.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2FJspFactory.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,155 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet.jsp;\r\n+\r\n+import javax.servlet.Servlet;\r\n+import javax.servlet.ServletContext;\r\n+import javax.servlet.ServletRequest;\r\n+import javax.servlet.ServletResponse;\r\n+import javax.servlet.jsp.PageContext;\r\n+\r\n+/**\r\n+ * <p>\r\n+ * The JspFactory is an abstract class that defines a number of factory\r\n+ * methods available to a JSP page at runtime for the purposes of creating\r\n+ * instances of various interfaces and classes used to support the JSP \r\n+ * implementation.\r\n+ * <p>\r\n+ * A conformant JSP Engine implementation will, during it's initialization\r\n+ * instantiate an implementation dependent subclass of this class, and make \r\n+ * it globally available for use by JSP implementation classes by registering\r\n+ * the instance created with this class via the\r\n+ * static <code> setDefaultFactory() </code> method.\r\n+ * <p>\r\n+ * The PageContext and the JspEngineInfo classes are the only implementation-dependent\r\n+ * classes that can be created from the factory.\r\n+ * <p>\r\n+ * JspFactory objects should not be used by JSP page authors.\r\n+ */\r\n+\r\n+public abstract class JspFactory {\r\n+\r\n+    private static JspFactory deflt = null;\r\n+    \r\n+    /**\r\n+     * Sole constructor. (For invocation by subclass constructors, \r\n+     * typically implicit.)\r\n+     */\r\n+    public JspFactory() {\r\n+    }\r\n+\r\n+    /**\r\n+     * <p>\r\n+     * set the default factory for this implementation. It is illegal for\r\n+     * any principal other than the JSP Engine runtime to call this method.\r\n+     * </p>\r\n+     *\r\n+     * @param deflt\tThe default factory implementation\r\n+     */\r\n+\r\n+    public static synchronized void setDefaultFactory(JspFactory deflt) {\r\n+\tJspFactory.deflt = deflt;\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the default factory for this implementation.\r\n+     *\r\n+     * @return the default factory for this implementation\r\n+     */\r\n+\r\n+    public static synchronized JspFactory getDefaultFactory() {\r\n+\treturn deflt;\r\n+    }\r\n+\r\n+    /**\r\n+     * <p>\r\n+     * obtains an instance of an implementation dependent \r\n+     * javax.servlet.jsp.PageContext abstract class for the calling Servlet\r\n+     * and currently pending request and response.\r\n+     * </p>\r\n+     *\r\n+     * <p>\r\n+     * This method is typically called early in the processing of the \r\n+     * _jspService() method of a JSP implementation class in order to \r\n+     * obtain a PageContext object for the request being processed.\r\n+     * </p>\r\n+     * <p>\r\n+     * Invoking this method shall result in the PageContext.initialize()\r\n+     * method being invoked. The PageContext returned is properly initialized.\r\n+     * </p>\r\n+     * <p>\r\n+     * All PageContext objects obtained via this method shall be released\r\n+     * by invoking releasePageContext().\r\n+     * </p>\r\n+     *\r\n+     * @param servlet   the requesting servlet\r\n+     * @param request\tthe current request pending on the servlet\r\n+     * @param response\tthe current response pending on the servlet\r\n+     * @param errorPageURL the URL of the error page for the requesting JSP, or null\r\n+     * @param needsSession true if the JSP participates in a session\r\n+     * @param buffer\tsize of buffer in bytes, PageContext.NO_BUFFER if no buffer,\r\n+     *\t\t\tPageContext.DEFAULT_BUFFER if implementation default.\r\n+     * @param autoflush\tshould the buffer autoflush to the output stream on buffer\r\n+     *\t\t\toverflow, or throw an IOException?\r\n+     *\r\n+     * @return the page context\r\n+     *\r\n+     * @see javax.servlet.jsp.PageContext\r\n+     */\r\n+\r\n+    public abstract PageContext getPageContext(Servlet\t       servlet,\r\n+\t\t\t\t    \t       ServletRequest  request,\r\n+\t\t\t\t    \t       ServletResponse response,\r\n+\t\t\t\t    \t       String\t       errorPageURL,\r\n+\t\t\t\t    \t       boolean         needsSession,\r\n+\t\t\t\t    \t       int             buffer,\r\n+\t\t\t\t    \t       boolean         autoflush);\r\n+\r\n+    /**\r\n+     * <p>\r\n+     * called to release a previously allocated PageContext object.\r\n+     * Results in PageContext.release() being invoked.\r\n+     * This method should be invoked prior to returning from the _jspService() method of a JSP implementation\r\n+     * class.\r\n+     * </p>\r\n+     *\r\n+     * @param pc A PageContext previously obtained by getPageContext()\r\n+     */\r\n+\r\n+    public abstract void releasePageContext(PageContext pc);\r\n+\r\n+    /**\r\n+     * <p>\r\n+     * called to get implementation-specific information on the current JSP engine.\r\n+     * </p>\r\n+     *\r\n+     * @return a JspEngineInfo object describing the current JSP engine\r\n+     */\r\n+    \r\n+    public abstract JspEngineInfo getEngineInfo();\r\n+    \r\n+    /**\r\n+     * <p>\r\n+     * Obtain the <code>JspApplicationContext</code> instance that was associated\r\n+     * within the passed <code>ServletContext</code> for this web application.\r\n+     * </p>\r\n+     * \r\n+     * @param context the current web application's <code>ServletContext</code>\r\n+     * @return <code>JspApplicationContext</code> instance\r\n+     * @since 2.1\r\n+     */\r\n+    public abstract JspApplicationContext getJspApplicationContext(ServletContext context);\r\n+}\r"
        },
        {
            "sha": "85c8d8c69b72b56df6ff9545b9a4e7d6370dbd9d",
            "filename": "java/javax/servlet/jsp/JspPage.java",
            "status": "added",
            "additions": 89,
            "deletions": 0,
            "changes": 89,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2FJspPage.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2FJspPage.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2FJspPage.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,89 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/ \r\n+package javax.servlet.jsp;\r\n+\r\n+import javax.servlet.*;\r\n+\r\n+/**\r\n+ * The JspPage interface describes the generic interaction that a JSP Page\r\n+ * Implementation class must satisfy; pages that use the HTTP protocol\r\n+ * are described by the HttpJspPage interface.\r\n+ *\r\n+ * <p><B>Two plus One Methods</B>\r\n+ * <p>\r\n+ * The interface defines a protocol with 3 methods; only two of\r\n+ * them: jspInit() and jspDestroy() are part of this interface as\r\n+ * the signature of the third method: _jspService() depends on\r\n+ * the specific protocol used and cannot be expressed in a generic\r\n+ * way in Java.\r\n+ * <p>\r\n+ * A class implementing this interface is responsible for invoking\r\n+ * the above methods at the appropriate time based on the\r\n+ * corresponding Servlet-based method invocations.\r\n+ * <p>\r\n+ * The jspInit() and jspDestroy() methods can be defined by a JSP\r\n+ * author, but the _jspService() method is defined automatically\r\n+ * by the JSP processor based on the contents of the JSP page.\r\n+ *\r\n+ * <p><B>_jspService()</B>\r\n+ * <p>\r\n+ * The _jspService()method corresponds to the body of the JSP page. This\r\n+ * method is defined automatically by the JSP container and should never\r\n+ * be defined by the JSP page author.\r\n+ * <p>\r\n+ * If a superclass is specified using the extends attribute, that\r\n+ * superclass may choose to perform some actions in its service() method\r\n+ * before or after calling the _jspService() method.  See using the extends\r\n+ * attribute in the JSP_Engine chapter of the JSP specification.\r\n+ * <p>\r\n+ * The specific signature depends on the protocol supported by the JSP page.\r\n+ *\r\n+ * <pre>\r\n+ * public void _jspService(<em>ServletRequestSubtype</em> request,\r\n+ *                             <em>ServletResponseSubtype</em> response)\r\n+ *        throws ServletException, IOException;\r\n+ * </pre>\r\n+ */\r\n+\r\n+\r\n+public interface JspPage extends Servlet {\r\n+\r\n+    /**\r\n+     * The jspInit() method is invoked when the JSP page is initialized. It\r\n+     * is the responsibility of the JSP implementation (and of the class\r\n+     * mentioned by the extends attribute, if present) that at this point\r\n+     * invocations to the getServletConfig() method will return the desired\r\n+     * value.\r\n+     *\r\n+     * A JSP page can override this method by including a definition for it\r\n+     * in a declaration element.\r\n+     *\r\n+     * A JSP page should redefine the init() method from Servlet.\r\n+     */\r\n+    public void jspInit();\r\n+\r\n+    /**\r\n+     * The jspDestroy() method is invoked when the JSP page is about to be\r\n+     * destroyed.\r\n+     * \r\n+     * A JSP page can override this method by including a definition for it\r\n+     * in a declaration element.\r\n+     *\r\n+     * A JSP page should redefine the destroy() method from Servlet.\r\n+     */\r\n+    public void jspDestroy();\r\n+\r\n+}\r"
        },
        {
            "sha": "548e4645eb331b70ee0132de4d87cf5c00ba6ca7",
            "filename": "java/javax/servlet/jsp/JspTagException.java",
            "status": "added",
            "additions": 92,
            "deletions": 0,
            "changes": 92,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2FJspTagException.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2FJspTagException.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2FJspTagException.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,92 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet.jsp;\r\n+\r\n+/**\r\n+ * Exception to be used by a Tag Handler to indicate some unrecoverable\r\n+ * error.\r\n+ * This error is to be caught by the top level of the JSP page and will result\r\n+ * in an error page.\r\n+ */\r\n+\r\n+public class JspTagException extends JspException {\r\n+    /**\r\n+     * Constructs a new JspTagException with the specified message.\r\n+     * The message can be written to the server log and/or displayed\r\n+     * for the user.\r\n+     * \r\n+     * @param msg a <code>String</code> specifying the text of \r\n+     *     the exception message\r\n+     */\r\n+    public JspTagException(String msg) {\r\n+\tsuper( msg );\r\n+    }\r\n+\r\n+    /**\r\n+     * Constructs a new JspTagException with no message.\r\n+     */\r\n+    public JspTagException() {\r\n+\tsuper();\r\n+    }\r\n+\r\n+    /**\r\n+     * Constructs a new JspTagException when the JSP Tag\r\n+     * needs to throw an exception and include a message \r\n+     * about the \"root cause\" exception that interfered with its \r\n+     * normal operation, including a description message.\r\n+     *\r\n+     *\r\n+     * @param message \t\ta <code>String</code> containing \r\n+     *\t\t\t\tthe text of the exception message\r\n+     *\r\n+     * @param rootCause\t\tthe <code>Throwable</code> exception \r\n+     *\t\t\t\tthat interfered with the JSP Tag's\r\n+     *\t\t\t\tnormal operation, making this JSP Tag\r\n+     *\t\t\t\texception necessary\r\n+     *\r\n+     * @since 2.0\r\n+     */\r\n+    public JspTagException(String message, Throwable rootCause) {\r\n+\tsuper( message, rootCause );\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Constructs a new JSP Tag exception when the JSP Tag\r\n+     * needs to throw an exception and include a message\r\n+     * about the \"root cause\" exception that interfered with its\r\n+     * normal operation.  The exception's message is based on the localized\r\n+     * message of the underlying exception.\r\n+     *\r\n+     * <p>This method calls the <code>getLocalizedMessage</code> method\r\n+     * on the <code>Throwable</code> exception to get a localized exception\r\n+     * message. When subclassing <code>JspTagException</code>, \r\n+     * this method can be overridden to create an exception message \r\n+     * designed for a specific locale.\r\n+     *\r\n+     * @param rootCause \tthe <code>Throwable</code> exception\r\n+     * \t\t\t\tthat interfered with the JSP Tag's\r\n+     *\t\t\t\tnormal operation, making the JSP Tag \r\n+     *                          exception necessary\r\n+     *\r\n+     * @since 2.0\r\n+     */\r\n+\r\n+    public JspTagException(Throwable rootCause) {\r\n+\tsuper( rootCause );\r\n+    }\r\n+\r\n+}\r"
        },
        {
            "sha": "bbc434a1cee054263a44cc6803ec24a4682a0615",
            "filename": "java/javax/servlet/jsp/JspWriter.java",
            "status": "added",
            "additions": 442,
            "deletions": 0,
            "changes": 442,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2FJspWriter.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2FJspWriter.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2FJspWriter.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,442 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+ \r\n+package javax.servlet.jsp;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+/**\r\n+ * <p>\r\n+ * The actions and template data in a JSP page is written using the\r\n+ * JspWriter object that is referenced by the implicit variable out which\r\n+ * is initialized automatically using methods in the PageContext object.\r\n+ *<p>\r\n+ * This abstract class emulates some of the functionality found in the\r\n+ * java.io.BufferedWriter and java.io.PrintWriter classes,\r\n+ * however it differs in that it throws java.io.IOException from the print\r\n+ * methods while PrintWriter does not.\r\n+ * <p><B>Buffering</B>\r\n+ * <p>\r\n+ * The initial JspWriter object is associated with the PrintWriter object\r\n+ * of the ServletResponse in a way that depends on whether the page is or\r\n+ * is not buffered. If the page is not buffered, output written to this\r\n+ * JspWriter object will be written through to the PrintWriter directly,\r\n+ * which will be created if necessary by invoking the getWriter() method\r\n+ * on the response object. But if the page is buffered, the PrintWriter\r\n+ * object will not be created until the buffer is flushed and\r\n+ * operations like setContentType() are legal. Since this flexibility\r\n+ * simplifies programming substantially, buffering is the default for JSP\r\n+ * pages.\r\n+ * <p>\r\n+ * Buffering raises the issue of what to do when the buffer is\r\n+ * exceeded. Two approaches can be taken:\r\n+ * <ul>\r\n+ * <li>\r\n+ * Exceeding the buffer is not a fatal error; when the buffer is\r\n+ * exceeded, just flush the output.\r\n+ * <li>\r\n+ * Exceeding the buffer is a fatal error; when the buffer is exceeded,\r\n+ * raise an exception.\r\n+ * </ul>\r\n+ * <p>\r\n+ * Both approaches are valid, and thus both are supported in the JSP\r\n+ * technology. The behavior of a page is controlled by the autoFlush\r\n+ * attribute, which defaults to true. In general, JSP pages that need to\r\n+ * be sure that correct and complete data has been sent to their client\r\n+ * may want to set autoFlush to false, with a typical case being that\r\n+ * where the client is an application itself. On the other hand, JSP\r\n+ * pages that send data that is meaningful even when partially\r\n+ * constructed may want to set autoFlush to true; such as when the\r\n+ * data is sent for immediate display through a browser. Each application\r\n+ * will need to consider their specific needs.\r\n+ * <p>\r\n+ * An alternative considered was to make the buffer size unbounded; but,\r\n+ * this had the disadvantage that runaway computations would consume an\r\n+ * unbounded amount of resources.\r\n+ * <p>\r\n+ * The \"out\" implicit variable of a JSP implementation class is of this type.\r\n+ * If the page directive selects autoflush=\"true\" then all the I/O operations\r\n+ * on this class shall automatically flush the contents of the buffer if an\r\n+ * overflow condition would result if the current operation were performed\r\n+ * without a flush. If autoflush=\"false\" then all the I/O operations on this\r\n+ * class shall throw an IOException if performing the current operation would\r\n+ * result in a buffer overflow condition.\r\n+ *\r\n+ * @see java.io.Writer\r\n+ * @see java.io.BufferedWriter\r\n+ * @see java.io.PrintWriter\r\n+ */\r\n+\r\n+abstract public class JspWriter extends java.io.Writer {\r\n+\r\n+    /**\r\n+     * Constant indicating that the Writer is not buffering output.\r\n+     */\r\n+\r\n+    public static final int\tNO_BUFFER = 0;\r\n+\r\n+    /**\r\n+     * Constant indicating that the Writer is buffered and is using the\r\n+     * implementation default buffer size.\r\n+     */\r\n+\r\n+    public static final int\tDEFAULT_BUFFER = -1;\r\n+\r\n+    /**\r\n+     * Constant indicating that the Writer is buffered and is unbounded; this\r\n+     * is used in BodyContent.\r\n+     */\r\n+\r\n+    public static final int\tUNBOUNDED_BUFFER = -2;\r\n+\r\n+    /**\r\n+     * Protected constructor.\r\n+     *\r\n+     * @param bufferSize the size of the buffer to be used by the JspWriter\r\n+     * @param autoFlush whether the JspWriter should be autoflushing\r\n+     */\r\n+\r\n+    protected JspWriter(int bufferSize, boolean autoFlush) {\r\n+\tthis.bufferSize = bufferSize;\r\n+\tthis.autoFlush  = autoFlush;\r\n+    }\r\n+\r\n+    /**\r\n+     * Write a line separator.  The line separator string is defined by the\r\n+     * system property <tt>line.separator</tt>, and is not necessarily a single\r\n+     * newline ('\\n') character.\r\n+     *\r\n+     * @exception  IOException  If an I/O error occurs\r\n+     */\r\n+\r\n+    abstract public void newLine() throws IOException;\r\n+\r\n+    /**\r\n+     * Print a boolean value.  The string produced by <code>{@link\r\n+     * java.lang.String#valueOf(boolean)}</code> is written to the\r\n+     * JspWriter's buffer or, if no buffer is used, directly to the \r\n+     * underlying writer.\r\n+     *\r\n+     * @param      b   The <code>boolean</code> to be printed\r\n+     * @throws\t   java.io.IOException If an error occured while writing\r\n+     */\r\n+\r\n+    abstract public void print(boolean b) throws IOException;\r\n+\r\n+    /**\r\n+     * Print a character.  The character is written to the\r\n+     * JspWriter's buffer or, if no buffer is used, directly to the\r\n+     * underlying writer.\r\n+     *\r\n+     * @param      c   The <code>char</code> to be printed\r\n+     * @throws\t   java.io.IOException If an error occured while writing\r\n+     */\r\n+\r\n+    abstract public void print(char c) throws IOException;\r\n+\r\n+    /**\r\n+     * Print an integer.  The string produced by <code>{@link\r\n+     * java.lang.String#valueOf(int)}</code> is written to the\r\n+     * JspWriter's buffer or, if no buffer is used, directly to the\r\n+     * underlying writer.\r\n+     *\r\n+     * @param      i   The <code>int</code> to be printed\r\n+     * @see        java.lang.Integer#toString(int)\r\n+     * @throws\t   java.io.IOException If an error occured while writing\r\n+     */\r\n+\r\n+    abstract public void print(int i) throws IOException;\r\n+\r\n+    /**\r\n+     * Print a long integer.  The string produced by <code>{@link\r\n+     * java.lang.String#valueOf(long)}</code> is written to the\r\n+     * JspWriter's buffer or, if no buffer is used, directly to the\r\n+     * underlying writer.\r\n+     *\r\n+     * @param      l   The <code>long</code> to be printed\r\n+     * @see        java.lang.Long#toString(long)\r\n+     * @throws\t   java.io.IOException If an error occured while writing\r\n+     */\r\n+\r\n+    abstract public void print(long l) throws IOException;\r\n+\r\n+    /**\r\n+     * Print a floating-point number.  The string produced by <code>{@link\r\n+     * java.lang.String#valueOf(float)}</code> is written to the\r\n+     * JspWriter's buffer or, if no buffer is used, directly to the\r\n+     * underlying writer.\r\n+     *\r\n+     * @param      f   The <code>float</code> to be printed\r\n+     * @see        java.lang.Float#toString(float)\r\n+     * @throws\t   java.io.IOException If an error occured while writing\r\n+     */\r\n+\r\n+    abstract public void print(float f) throws IOException;\r\n+\r\n+    /**\r\n+     * Print a double-precision floating-point number.  The string produced by\r\n+     * <code>{@link java.lang.String#valueOf(double)}</code> is written to\r\n+     * the JspWriter's buffer or, if no buffer is used, directly to the\r\n+     * underlying writer.\r\n+     *\r\n+     * @param      d   The <code>double</code> to be printed\r\n+     * @see        java.lang.Double#toString(double)\r\n+     * @throws\t   java.io.IOException If an error occured while writing\r\n+     */\r\n+\r\n+    abstract public void print(double d) throws IOException;\r\n+\r\n+    /**\r\n+     * Print an array of characters.  The characters are written to the\r\n+     * JspWriter's buffer or, if no buffer is used, directly to the\r\n+     * underlying writer.\r\n+     *\r\n+     * @param      s   The array of chars to be printed\r\n+     *\r\n+     * @throws  NullPointerException  If <code>s</code> is <code>null</code>\r\n+     * @throws\t   java.io.IOException If an error occured while writing\r\n+     */\r\n+\r\n+    abstract public void print(char s[]) throws IOException;\r\n+\r\n+    /**\r\n+     * Print a string.  If the argument is <code>null</code> then the string\r\n+     * <code>\"null\"</code> is printed.  Otherwise, the string's characters are\r\n+     * written to the JspWriter's buffer or, if no buffer is used, directly\r\n+     * to the underlying writer.\r\n+     *\r\n+     * @param      s   The <code>String</code> to be printed\r\n+     * @throws\t   java.io.IOException If an error occured while writing\r\n+     */\r\n+\r\n+    abstract public void print(String s) throws IOException;\r\n+\r\n+    /**\r\n+     * Print an object.  The string produced by the <code>{@link\r\n+     * java.lang.String#valueOf(Object)}</code> method is written to the\r\n+     * JspWriter's buffer or, if no buffer is used, directly to the\r\n+     * underlying writer.\r\n+     *\r\n+     * @param      obj   The <code>Object</code> to be printed\r\n+     * @see        java.lang.Object#toString()\r\n+     * @throws\t   java.io.IOException If an error occured while writing\r\n+     */\r\n+\r\n+    abstract public void print(Object obj) throws IOException;\r\n+\r\n+    /**\r\n+     * Terminate the current line by writing the line separator string.  The\r\n+     * line separator string is defined by the system property\r\n+     * <code>line.separator</code>, and is not necessarily a single newline\r\n+     * character (<code>'\\n'</code>).\r\n+     * @throws\t   java.io.IOException If an error occured while writing\r\n+     */\r\n+\r\n+    abstract public void println() throws IOException;\r\n+\r\n+    /**\r\n+     * Print a boolean value and then terminate the line.  This method behaves\r\n+     * as though it invokes <code>{@link #print(boolean)}</code> and then\r\n+     * <code>{@link #println()}</code>.\r\n+     *\r\n+     * @param      x the boolean to write\r\n+     * @throws\t   java.io.IOException If an error occured while writing\r\n+     */\r\n+\r\n+    abstract public void println(boolean x) throws IOException;\r\n+\r\n+    /**\r\n+     * Print a character and then terminate the line.  This method behaves as\r\n+     * though it invokes <code>{@link #print(char)}</code> and then <code>{@link\r\n+     * #println()}</code>.\r\n+     *\r\n+     * @param      x the char to write\r\n+     * @throws\t   java.io.IOException If an error occured while writing\r\n+     */\r\n+\r\n+    abstract public void println(char x) throws IOException;\r\n+\r\n+    /**\r\n+     * Print an integer and then terminate the line.  This method behaves as\r\n+     * though it invokes <code>{@link #print(int)}</code> and then <code>{@link\r\n+     * #println()}</code>.\r\n+     *\r\n+     * @param      x the int to write\r\n+     * @throws\t   java.io.IOException If an error occured while writing\r\n+     */\r\n+\r\n+    abstract public void println(int x) throws IOException;\r\n+\r\n+    /**\r\n+     * Print a long integer and then terminate the line.  This method behaves\r\n+     * as though it invokes <code>{@link #print(long)}</code> and then\r\n+     * <code>{@link #println()}</code>.\r\n+     *\r\n+     * @param      x the long to write\r\n+     * @throws\t   java.io.IOException If an error occured while writing\r\n+     */\r\n+\r\n+    abstract public void println(long x) throws IOException;\r\n+\r\n+    /**\r\n+     * Print a floating-point number and then terminate the line.  This method\r\n+     * behaves as though it invokes <code>{@link #print(float)}</code> and then\r\n+     * <code>{@link #println()}</code>.\r\n+     *\r\n+     * @param      x the float to write\r\n+     * @throws\t   java.io.IOException If an error occured while writing\r\n+     */\r\n+\r\n+    abstract public void println(float x) throws IOException;\r\n+\r\n+    /**\r\n+     * Print a double-precision floating-point number and then terminate the\r\n+     * line.  This method behaves as though it invokes <code>{@link\r\n+     * #print(double)}</code> and then <code>{@link #println()}</code>.\r\n+     *\r\n+     * @param      x the double to write\r\n+     * @throws\t   java.io.IOException If an error occured while writing\r\n+     */\r\n+\r\n+    abstract public void println(double x) throws IOException;\r\n+\r\n+    /**\r\n+     * Print an array of characters and then terminate the line.  This method\r\n+     * behaves as though it invokes <code>print(char[])</code> and then\r\n+     * <code>println()</code>.\r\n+     *\r\n+     * @param      x the char[] to write\r\n+     * @throws\t   java.io.IOException If an error occured while writing\r\n+     */\r\n+\r\n+    abstract public void println(char x[]) throws IOException;\r\n+\r\n+    /**\r\n+     * Print a String and then terminate the line.  This method behaves as\r\n+     * though it invokes <code>{@link #print(String)}</code> and then\r\n+     * <code>{@link #println()}</code>.\r\n+     *\r\n+     * @param      x the String to write\r\n+     * @throws\t   java.io.IOException If an error occured while writing\r\n+     */\r\n+\r\n+    abstract public void println(String x) throws IOException;\r\n+\r\n+    /**\r\n+     * Print an Object and then terminate the line.  This method behaves as\r\n+     * though it invokes <code>{@link #print(Object)}</code> and then\r\n+     * <code>{@link #println()}</code>.\r\n+     *\r\n+     * @param      x the Object to write\r\n+     * @throws\t   java.io.IOException If an error occured while writing\r\n+     */\r\n+\r\n+    abstract public void println(Object x) throws IOException;\r\n+\r\n+\r\n+    /**\r\n+     * Clear the contents of the buffer. If the buffer has been already\r\n+     * been flushed then the clear operation shall throw an IOException\r\n+     * to signal the fact that some data has already been irrevocably \r\n+     * written to the client response stream.\r\n+     *\r\n+     * @throws IOException\t\tIf an I/O error occurs\r\n+     */\r\n+\r\n+    abstract public void clear() throws IOException;\r\n+\r\n+    /**\r\n+     * Clears the current contents of the buffer. Unlike clear(), this\r\n+     * method will not throw an IOException if the buffer has already been\r\n+     * flushed. It merely clears the current content of the buffer and\r\n+     * returns.\r\n+     *\r\n+     * @throws IOException\t\tIf an I/O error occurs\r\n+     */\r\n+\r\n+    abstract public void clearBuffer() throws IOException;\r\n+\r\n+    /**\r\n+     * Flush the stream.  If the stream has saved any characters from the\r\n+     * various write() methods in a buffer, write them immediately to their\r\n+     * intended destination.  Then, if that destination is another character or\r\n+     * byte stream, flush it.  Thus one flush() invocation will flush all the\r\n+     * buffers in a chain of Writers and OutputStreams.\r\n+     * <p>\r\n+     * The method may be invoked indirectly if the buffer size is exceeded.\r\n+     * <p>\r\n+     * Once a stream has been closed,\r\n+     * further write() or flush() invocations will cause an IOException to be\r\n+     * thrown.\r\n+     *\r\n+     * @exception  IOException  If an I/O error occurs\r\n+     */\r\n+\r\n+    abstract public void flush() throws IOException;\r\n+\r\n+    /**\r\n+     * Close the stream, flushing it first.\r\n+     * <p>\r\n+     * This method needs not be invoked explicitly for the initial JspWriter\r\n+     * as the code generated by the JSP container will automatically\r\n+     * include a call to close().\r\n+     * <p>\r\n+     * Closing a previously-closed stream, unlike flush(), has no effect.\r\n+     *\r\n+     * @exception  IOException  If an I/O error occurs\r\n+     */\r\n+\r\n+    abstract public void close() throws IOException;\r\n+\r\n+    /**\r\n+     * This method returns the size of the buffer used by the JspWriter.\r\n+     *\r\n+     * @return the size of the buffer in bytes, or 0 is unbuffered.\r\n+     */\r\n+\r\n+    public int getBufferSize() { return bufferSize; }\r\n+\r\n+    /**\r\n+     * This method returns the number of unused bytes in the buffer.\r\n+     *\r\n+     * @return the number of bytes unused in the buffer\r\n+     */\r\n+\r\n+    abstract public int getRemaining();\r\n+\r\n+    /**\r\n+     * This method indicates whether the JspWriter is autoFlushing.\r\n+     *\r\n+     * @return if this JspWriter is auto flushing or throwing IOExceptions \r\n+     *     on buffer overflow conditions\r\n+     */\r\n+\r\n+    public boolean isAutoFlush() { return autoFlush; }\r\n+\r\n+    /*\r\n+     * fields\r\n+     */\r\n+\r\n+    /**\r\n+     * The size of the buffer used by the JspWriter.\r\n+     */\r\n+    protected int     bufferSize;\r\n+    \r\n+    /**\r\n+     * Whether the JspWriter is autoflushing.\r\n+     */\r\n+    protected boolean autoFlush;\r\n+}\r"
        },
        {
            "sha": "6af01f2063133df664e6dd2d2e2c53d6ced09c35",
            "filename": "java/javax/servlet/jsp/PageContext.java",
            "status": "added",
            "additions": 522,
            "deletions": 0,
            "changes": 522,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2FPageContext.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2FPageContext.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2FPageContext.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,522 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+ \r\n+package javax.servlet.jsp;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+import javax.servlet.Servlet;\r\n+import javax.servlet.ServletConfig;\r\n+import javax.servlet.ServletContext;\r\n+import javax.servlet.ServletException;\r\n+import javax.servlet.ServletRequest;\r\n+import javax.servlet.ServletResponse;\r\n+\r\n+import javax.servlet.http.HttpSession;\r\n+\r\n+import javax.servlet.jsp.tagext.BodyContent;\r\n+\r\n+/**\r\n+ * <p>\r\n+ * PageContext extends JspContext to provide useful context information for\r\n+ * when JSP technology is used in a Servlet environment.\r\n+ * <p>\r\n+ * A PageContext instance provides access to all the namespaces associated\r\n+ * with a JSP page, provides access to several page attributes, as well as\r\n+ * a layer above the implementation details.  Implicit objects are added\r\n+ * to the pageContext automatically.\r\n+ *\r\n+ * <p> The <code> PageContext </code> class is an abstract class, designed to be\r\n+ * extended to provide implementation dependent implementations thereof, by\r\n+ * conformant JSP engine runtime environments. A PageContext instance is \r\n+ * obtained by a JSP implementation class by calling the\r\n+ * JspFactory.getPageContext() method, and is released by calling\r\n+ * JspFactory.releasePageContext().\r\n+ *\r\n+ * <p> An example of how PageContext, JspFactory, and other classes can be\r\n+ * used  within a JSP Page Implementation object is given elsewhere.\r\n+ *\r\n+ * <p>\r\n+ * The PageContext provides a number of facilities to the page/component \r\n+ * author and page implementor, including:\r\n+ * <ul>\r\n+ * <li>a single API to manage the various scoped namespaces\r\n+ * <li>a number of convenience API's to access various public objects\r\n+ * <li>a mechanism to obtain the JspWriter for output\r\n+ * <li>a mechanism to manage session usage by the page\r\n+ * <li>a mechanism to expose page directive attributes to the scripting \r\n+ *     environment\r\n+ * <li>mechanisms to forward or include the current request to other active \r\n+ *     components in the application\r\n+ * <li>a mechanism to handle errorpage exception processing\r\n+ * </ul>\r\n+ *\r\n+ * <p><B>Methods Intended for Container Generated Code</B>\r\n+ * <p>Some methods are intended to be used by the code generated by the\r\n+ * container, not by code written by JSP page authors, or JSP tag library \r\n+ * authors.\r\n+ * <p>The methods supporting <B>lifecycle</B> are <code>initialize()</code>\r\n+ * and <code>release()</code>\r\n+ *\r\n+ * <p>\r\n+ * The following methods enable the <B>management of nested</B> JspWriter \r\n+ * streams to implement Tag Extensions: <code>pushBody()</code>\r\n+ *\r\n+ * <p><B>Methods Intended for JSP authors</B>\r\n+ * <p>\r\n+ * The following methods provide <B>convenient access</B> to implicit objects:\r\n+ * <code>getException()</code>,  <code>getPage()</code>\r\n+ * <code>getRequest()</code>,  <code>getResponse()</code>,\r\n+ * <code>getSession()</code>,  <code>getServletConfig()</code>\r\n+ * and <code>getServletContext()</code>.\r\n+ *\r\n+ * <p>\r\n+ * The following methods provide support for <B>forwarding, inclusion\r\n+ * and error handling</B>:\r\n+ * <code>forward()</code>,  <code>include()</code>,\r\n+ * and  <code>handlePageException()</code>.\r\n+ */\r\n+\r\n+abstract public class PageContext \r\n+    extends JspContext\r\n+{\r\n+    \r\n+    /**\r\n+     * Sole constructor. (For invocation by subclass constructors, \r\n+     * typically implicit.)\r\n+     */\r\n+    public PageContext() {\r\n+    }\r\n+    \r\n+    /**\r\n+     * Page scope: (this is the default) the named reference remains available\r\n+     * in this PageContext until the return from the current Servlet.service()\r\n+     * invocation.\r\n+     */\r\n+\r\n+    public static final int PAGE_SCOPE\t\t= 1;\r\n+\r\n+    /**\r\n+     * Request scope: the named reference remains available from the \r\n+     * ServletRequest associated with the Servlet until the current request \r\n+     * is completed.\r\n+     */\r\n+\r\n+    public static final int REQUEST_SCOPE\t= 2;\r\n+\r\n+    /**\r\n+     * Session scope (only valid if this page participates in a session):\r\n+     * the named reference remains available from the HttpSession (if any)\r\n+     * associated with the Servlet until the HttpSession is invalidated.\r\n+     */\r\n+\r\n+    public static final int SESSION_SCOPE\t= 3;\r\n+\r\n+    /**\r\n+     * Application scope: named reference remains available in the \r\n+     * ServletContext until it is reclaimed.\r\n+     */\r\n+\r\n+    public static final int APPLICATION_SCOPE\t= 4;\r\n+\r\n+    /**\r\n+     * Name used to store the Servlet in this PageContext's nametables.\r\n+     */\r\n+\r\n+    public static final String PAGE = \"javax.servlet.jsp.jspPage\";\r\n+\r\n+    /**\r\n+     * Name used to store this PageContext in it's own name table.\r\n+     */\r\n+\r\n+    public static final String PAGECONTEXT = \"javax.servlet.jsp.jspPageContext\";\r\n+\r\n+    /**\r\n+     * Name used to store ServletRequest in PageContext name table.\r\n+     */\r\n+\r\n+    public static final String REQUEST = \"javax.servlet.jsp.jspRequest\";\r\n+\r\n+    /**\r\n+     * Name used to store ServletResponse in PageContext name table.\r\n+     */\r\n+\r\n+    public static final String RESPONSE = \"javax.servlet.jsp.jspResponse\";\r\n+\r\n+    /**\r\n+     * Name used to store ServletConfig in PageContext name table.\r\n+     */\r\n+\r\n+    public static final String CONFIG = \"javax.servlet.jsp.jspConfig\";\r\n+\r\n+    /**\r\n+     * Name used to store HttpSession in PageContext name table.\r\n+     */\r\n+\r\n+    public static final String SESSION = \"javax.servlet.jsp.jspSession\";\r\n+    /**\r\n+     * Name used to store current JspWriter in PageContext name table.\r\n+     */\r\n+\r\n+    public static final String OUT = \"javax.servlet.jsp.jspOut\";\r\n+\r\n+    /**\r\n+     * Name used to store ServletContext in PageContext name table.\r\n+     */\r\n+\r\n+    public static final String APPLICATION = \"javax.servlet.jsp.jspApplication\";\r\n+\r\n+    /**\r\n+     * Name used to store uncaught exception in ServletRequest attribute \r\n+     * list and PageContext name table.\r\n+     */\r\n+\r\n+    public static final String EXCEPTION = \"javax.servlet.jsp.jspException\";\r\n+\r\n+    /**\r\n+     * <p>\r\n+     * The initialize method is called to initialize an uninitialized PageContext\r\n+     * so that it may be used by a JSP Implementation class to service an\r\n+     * incoming request and response within it's _jspService() method.\r\n+     *\r\n+     * <p>\r\n+     * This method is typically called from JspFactory.getPageContext() in\r\n+     * order to initialize state.\r\n+     *\r\n+     * <p>\r\n+     * This method is required to create an initial JspWriter, and associate\r\n+     * the \"out\" name in page scope with this newly created object.\r\n+     *\r\n+     * <p>\r\n+     * This method should not be used by page  or tag library authors.\r\n+     *\r\n+     * @param servlet The Servlet that is associated with this PageContext\r\n+     * @param request The currently pending request for this Servlet\r\n+     * @param response The currently pending response for this Servlet\r\n+     * @param errorPageURL The value of the errorpage attribute from the page \r\n+     *     directive or null\r\n+     * @param needsSession The value of the session attribute from the \r\n+     *     page directive\r\n+     * @param bufferSize The value of the buffer attribute from the page \r\n+     *     directive\r\n+     * @param autoFlush The value of the autoflush attribute from the page \r\n+     *     directive\r\n+     *\r\n+     * @throws IOException during creation of JspWriter\r\n+     * @throws IllegalStateException if out not correctly initialized\r\n+     * @throws IllegalArgumentException If one of the given parameters\r\n+     *     is invalid\r\n+     */\r\n+ \r\n+    abstract public void initialize(Servlet servlet, ServletRequest request, \r\n+        ServletResponse response, String errorPageURL, boolean needsSession, \r\n+        int bufferSize, boolean autoFlush)  \r\n+        throws IOException, IllegalStateException, IllegalArgumentException;\r\n+\r\n+    /**\r\n+     * <p>\r\n+     * This method shall \"reset\" the internal state of a PageContext, releasing\r\n+     * all internal references, and preparing the PageContext for potential\r\n+     * reuse by a later invocation of initialize(). This method is typically\r\n+     * called from JspFactory.releasePageContext().\r\n+     *\r\n+     * <p>\r\n+     * Subclasses shall envelope this method.\r\n+     *\r\n+     * <p>\r\n+     * This method should not be used by page  or tag library authors.\r\n+     *\r\n+     */\r\n+\r\n+    abstract public void release();\r\n+\r\n+    /**\r\n+     * The current value of the session object (an HttpSession).\r\n+     *\r\n+     * @return the HttpSession for this PageContext or null\r\n+     */\r\n+\r\n+    abstract public HttpSession getSession();\r\n+\r\n+    /**\r\n+     * The current value of the page object (In a Servlet environment, \r\n+     * this is an instance of javax.servlet.Servlet).\r\n+     *\r\n+     * @return the Page implementation class instance associated \r\n+     *     with this PageContext\r\n+     */\r\n+\r\n+    abstract public Object getPage();\r\n+\r\n+\r\n+    /**\r\n+     * The current value of the request object (a ServletRequest).\r\n+     *\r\n+     * @return The ServletRequest for this PageContext\r\n+     */\r\n+\r\n+    abstract public ServletRequest getRequest();\r\n+\r\n+    /**\r\n+     * The current value of the response object (a ServletResponse).\r\n+     *\r\n+     * @return the ServletResponse for this PageContext\r\n+     */\r\n+\r\n+    abstract public ServletResponse getResponse();\r\n+\r\n+    /**\r\n+     * The current value of the exception object (an Exception).\r\n+     *\r\n+     * @return any exception passed to this as an errorpage\r\n+     */\r\n+\r\n+    abstract public Exception getException();\r\n+\r\n+    /**\r\n+     * The ServletConfig instance.\r\n+     *\r\n+     * @return the ServletConfig for this PageContext\r\n+     */\r\n+\r\n+    abstract public ServletConfig getServletConfig();\r\n+\r\n+    /**\r\n+     * The ServletContext instance.\r\n+     * \r\n+     * @return the ServletContext for this PageContext\r\n+     */\r\n+\r\n+    abstract public ServletContext getServletContext();\r\n+\r\n+    /**\r\n+     * <p>\r\n+     * This method is used to re-direct, or \"forward\" the current \r\n+     * ServletRequest and ServletResponse to another active component in \r\n+     * the application.\r\n+     * </p>\r\n+     * <p>\r\n+     * If the <I> relativeUrlPath </I> begins with a \"/\" then the URL specified\r\n+     * is calculated relative to the DOCROOT of the <code> ServletContext </code>\r\n+     * for this JSP. If the path does not begin with a \"/\" then the URL \r\n+     * specified is calculated relative to the URL of the request that was\r\n+     * mapped to the calling JSP.\r\n+     * </p>\r\n+     * <p>\r\n+     * It is only valid to call this method from a <code> Thread </code>\r\n+     * executing within a <code> _jspService(...) </code> method of a JSP.\r\n+     * </p>\r\n+     * <p>\r\n+     * Once this method has been called successfully, it is illegal for the\r\n+     * calling <code> Thread </code> to attempt to modify the <code>\r\n+     * ServletResponse </code> object.  Any such attempt to do so, shall result\r\n+     * in undefined behavior. Typically, callers immediately return from \r\n+     * <code> _jspService(...) </code> after calling this method.\r\n+     * </p>\r\n+     *\r\n+     * @param relativeUrlPath specifies the relative URL path to the target \r\n+     *     resource as described above\r\n+     *\r\n+     * @throws IllegalStateException if <code> ServletResponse </code> is not \r\n+     *     in a state where a forward can be performed\r\n+     * @throws ServletException if the page that was forwarded to throws\r\n+     *     a ServletException\r\n+     * @throws IOException if an I/O error occurred while forwarding\r\n+     */\r\n+\r\n+    abstract public void forward(String relativeUrlPath) \r\n+        throws ServletException, IOException;\r\n+\r\n+    /**\r\n+     * <p>\r\n+     * Causes the resource specified to be processed as part of the current\r\n+     * ServletRequest and ServletResponse being processed by the calling Thread.\r\n+     * The output of the target resources processing of the request is written\r\n+     * directly to the ServletResponse output stream.\r\n+     * </p>\r\n+     * <p>\r\n+     * The current JspWriter \"out\" for this JSP is flushed as a side-effect\r\n+     * of this call, prior to processing the include.\r\n+     * </p>\r\n+     * <p>\r\n+     * If the <I> relativeUrlPath </I> begins with a \"/\" then the URL specified\r\n+     * is calculated relative to the DOCROOT of the <code>ServletContext</code>\r\n+     * for this JSP. If the path does not begin with a \"/\" then the URL \r\n+     * specified is calculated relative to the URL of the request that was\r\n+     * mapped to the calling JSP.\r\n+     * </p>\r\n+     * <p>\r\n+     * It is only valid to call this method from a <code> Thread </code>\r\n+     * executing within a <code> _jspService(...) </code> method of a JSP.\r\n+     * </p>\r\n+     *\r\n+     * @param relativeUrlPath specifies the relative URL path to the target \r\n+     *     resource to be included\r\n+     *\r\n+     * @throws ServletException if the page that was forwarded to throws\r\n+     *     a ServletException\r\n+     * @throws IOException if an I/O error occurred while forwarding\r\n+     */\r\n+    abstract public void include(String relativeUrlPath) \r\n+        throws ServletException, IOException;\r\n+\r\n+    /**\r\n+     * <p>\r\n+     * Causes the resource specified to be processed as part of the current\r\n+     * ServletRequest and ServletResponse being processed by the calling Thread.\r\n+     * The output of the target resources processing of the request is written\r\n+     * directly to the current JspWriter returned by a call to getOut().\r\n+     * </p>\r\n+     * <p>\r\n+     * If flush is true, The current JspWriter \"out\" for this JSP \r\n+     * is flushed as a side-effect of this call, prior to processing \r\n+     * the include.  Otherwise, the JspWriter \"out\" is not flushed.\r\n+     * </p>\r\n+     * <p>\r\n+     * If the <i>relativeUrlPath</i> begins with a \"/\" then the URL specified\r\n+     * is calculated relative to the DOCROOT of the <code>ServletContext</code>\r\n+     * for this JSP. If the path does not begin with a \"/\" then the URL \r\n+     * specified is calculated relative to the URL of the request that was\r\n+     * mapped to the calling JSP.\r\n+     * </p>\r\n+     * <p>\r\n+     * It is only valid to call this method from a <code> Thread </code>\r\n+     * executing within a <code> _jspService(...) </code> method of a JSP.\r\n+     * </p>\r\n+     *\r\n+     * @param relativeUrlPath specifies the relative URL path to the \r\n+     *     target resource to be included\r\n+     * @param flush True if the JspWriter is to be flushed before the include,\r\n+     *     or false if not.\r\n+     *\r\n+     * @throws ServletException if the page that was forwarded to throws\r\n+     *     a ServletException\r\n+     * @throws IOException if an I/O error occurred while forwarding\r\n+     * @since 2.0\r\n+     */\r\n+    abstract public void include(String relativeUrlPath, boolean flush) \r\n+\tthrows ServletException, IOException;\r\n+\r\n+    /**\r\n+     * <p>\r\n+     * This method is intended to process an unhandled 'page' level\r\n+     * exception by forwarding the exception to the specified\r\n+     * error page for this JSP.  If forwarding is not possible (for\r\n+     * example because the response has already been committed), an\r\n+     * implementation dependent mechanism should be used to invoke\r\n+     * the error page (e.g. \"including\" the error page instead).\r\n+     *\r\n+     * <p>\r\n+     * If no error page is defined in the page, the exception should\r\n+     * be rethrown so that the standard servlet error handling\r\n+     * takes over.\r\n+     *\r\n+     * <p>\r\n+     * A JSP implementation class shall typically clean up any local state\r\n+     * prior to invoking this and will return immediately thereafter. It is\r\n+     * illegal to generate any output to the client, or to modify any \r\n+     * ServletResponse state after invoking this call.\r\n+     *\r\n+     * <p>\r\n+     * This method is kept for backwards compatiblity reasons.  Newly\r\n+     * generated code should use PageContext.handlePageException(Throwable).\r\n+     *\r\n+     * @param e the exception to be handled\r\n+     *\r\n+     * @throws ServletException if an error occurs while invoking the error page\r\n+     * @throws IOException if an I/O error occurred while invoking the error\r\n+     *     page\r\n+     * @throws NullPointerException if the exception is null\r\n+     *\r\n+     * @see #handlePageException(Throwable)\r\n+     */\r\n+\r\n+    abstract public void handlePageException(Exception e) \r\n+        throws ServletException, IOException;\r\n+\r\n+    /**\r\n+     * <p>\r\n+     * This method is intended to process an unhandled 'page' level\r\n+     * exception by forwarding the exception to the specified\r\n+     * error page for this JSP.  If forwarding is not possible (for\r\n+     * example because the response has already been committed), an\r\n+     * implementation dependent mechanism should be used to invoke\r\n+     * the error page (e.g. \"including\" the error page instead).\r\n+     *\r\n+     * <p>\r\n+     * If no error page is defined in the page, the exception should\r\n+     * be rethrown so that the standard servlet error handling\r\n+     * takes over.\r\n+     *\r\n+     * <p>\r\n+     * This method is intended to process an unhandled \"page\" level exception\r\n+     * by redirecting the exception to either the specified error page for this\r\n+     * JSP, or if none was specified, to perform some implementation dependent\r\n+     * action.\r\n+     *\r\n+     * <p>\r\n+     * A JSP implementation class shall typically clean up any local state\r\n+     * prior to invoking this and will return immediately thereafter. It is\r\n+     * illegal to generate any output to the client, or to modify any \r\n+     * ServletResponse state after invoking this call.\r\n+     *\r\n+     * @param t the throwable to be handled\r\n+     *\r\n+     * @throws ServletException if an error occurs while invoking the error page\r\n+     * @throws IOException if an I/O error occurred while invoking the error\r\n+     *     page\r\n+     * @throws NullPointerException if the exception is null\r\n+     *\r\n+     * @see #handlePageException(Exception)\r\n+     */\r\n+\r\n+    abstract public void handlePageException(Throwable t) \r\n+        throws ServletException, IOException;\r\n+\r\n+    /**\r\n+     * Return a new BodyContent object, save the current \"out\" JspWriter,\r\n+     * and update the value of the \"out\" attribute in the page scope\r\n+     * attribute namespace of the PageContext.\r\n+     *\r\n+     * @return the new BodyContent\r\n+     */\r\n+\r\n+    public BodyContent pushBody() {\r\n+        return null; // XXX to implement\r\n+    }\r\n+         \r\n+\r\n+    /**\r\n+     * Provides convenient access to error information.\r\n+     *\r\n+     * @return an ErrorData instance containing information about the \r\n+     * error, as obtained from the request attributes, as per the \r\n+     * Servlet specification.  If this is not an error page (that is,\r\n+     * if the isErrorPage attribute of the page directive is not set\r\n+     * to \"true\"), the information is meaningless.\r\n+     *\r\n+     * @since 2.0\r\n+     */\r\n+    public ErrorData getErrorData() {\r\n+\treturn new ErrorData( \r\n+\t    (Throwable)getRequest().getAttribute( \"javax.servlet.error.exception\" ),\r\n+\t    ((Integer)getRequest().getAttribute( \r\n+\t\t\"javax.servlet.error.status_code\" )).intValue(),\r\n+\t    (String)getRequest().getAttribute( \"javax.servlet.error.request_uri\" ),\r\n+\t    (String)getRequest().getAttribute( \"javax.servlet.error.servlet_name\" ) );\r\n+    }\r\n+    \r\n+}\r"
        },
        {
            "sha": "bfb80d6096703204c23f214bef4bdd204eacd04c",
            "filename": "java/javax/servlet/jsp/SkipPageException.java",
            "status": "added",
            "additions": 75,
            "deletions": 0,
            "changes": 75,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2FSkipPageException.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2FSkipPageException.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2FSkipPageException.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,75 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet.jsp;\r\n+\r\n+/**\r\n+ * Exception to indicate the calling page must cease evaluation.\r\n+ * Thrown by a simple tag handler to indicate that the remainder of \r\n+ * the page must not be evaluated.  The result is propagated back to\r\n+ * the pagein the case where one tag invokes another (as can be\r\n+ * the case with tag files).  The effect is similar to that of a \r\n+ * Classic Tag Handler returning Tag.SKIP_PAGE from doEndTag().\r\n+ * Jsp Fragments may also throw this exception.  This exception\r\n+ * should not be thrown manually in a JSP page or tag file - the behavior is\r\n+ * undefined.  The exception is intended to be thrown inside \r\n+ * SimpleTag handlers and in JSP fragments.\r\n+ * \r\n+ * @see javax.servlet.jsp.tagext.SimpleTag#doTag\r\n+ * @see javax.servlet.jsp.tagext.JspFragment#invoke\r\n+ * @see javax.servlet.jsp.tagext.Tag#doEndTag\r\n+ * @since 2.0\r\n+ */\r\n+public class SkipPageException\r\n+    extends JspException\r\n+{\r\n+    /**\r\n+     * Creates a SkipPageException with no message.\r\n+     */\r\n+    public SkipPageException() {\r\n+        super();\r\n+    }\r\n+    \r\n+    /**\r\n+     * Creates a SkipPageException with the provided message.\r\n+     *\r\n+     * @param message the detail message\r\n+     */\r\n+    public SkipPageException( String message ) {\r\n+        super( message );\r\n+    }\r\n+\r\n+    /**\r\n+     * Creates a SkipPageException with the provided message and root cause.\r\n+     *\r\n+     * @param message the detail message\r\n+     * @param rootCause the originating cause of this exception\r\n+     */\r\n+    public SkipPageException( String message, Throwable rootCause ) {\r\n+\tsuper( message, rootCause );\r\n+    }\r\n+\r\n+    /**\r\n+     * Creates a SkipPageException with the provided root cause.\r\n+     *\r\n+     * @param rootCause the originating cause of this exception\r\n+     */\r\n+    public SkipPageException( Throwable rootCause ) {\r\n+\tsuper( rootCause );\r\n+    }\r\n+    \r\n+}\r\n+\r\n+\r"
        },
        {
            "sha": "eb6de839c43e593a6a6748ee3bfadfc324232b97",
            "filename": "java/javax/servlet/jsp/el/ELException.java",
            "status": "added",
            "additions": 92,
            "deletions": 0,
            "changes": 92,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Fel%2FELException.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Fel%2FELException.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Fel%2FELException.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,92 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+\r\n+package javax.servlet.jsp.el;\r\n+\r\n+\r\n+/**\r\n+ * Represents any of the exception conditions that arise during the\r\n+ * operation evaluation of the evaluator.\r\n+ *\r\n+ * @since 2.0\r\n+ * @deprecated\r\n+ */\r\n+public class ELException\r\n+  extends Exception\r\n+{\r\n+  //-------------------------------------\r\n+  // Member variables\r\n+  //-------------------------------------\r\n+\r\n+  private Throwable mRootCause;\r\n+\r\n+  //-------------------------------------\r\n+  /**\r\n+   * Creates an ELException with no detail message.\r\n+   **/\r\n+  public ELException ()\r\n+  {\r\n+    super ();\r\n+  }\r\n+\r\n+  //-------------------------------------\r\n+  /**\r\n+   * Creates an ELException with the provided detail message.\r\n+   *\r\n+   * @param pMessage the detail message\r\n+   **/\r\n+  public ELException (String pMessage)\r\n+  {\r\n+    super (pMessage);\r\n+  }\r\n+\r\n+  //-------------------------------------\r\n+  /**\r\n+   * Creates an ELException with the given root cause.\r\n+   *\r\n+   * @param pRootCause the originating cause of this exception\r\n+   **/\r\n+  public ELException (Throwable pRootCause)\r\n+  {\r\n+    super( pRootCause.getLocalizedMessage() );\r\n+    mRootCause = pRootCause;\r\n+  }\r\n+\r\n+  //-------------------------------------\r\n+  /**\r\n+   * Creates an ELException with the given detail message and root cause.\r\n+   *\r\n+   * @param pMessage the detail message\r\n+   * @param pRootCause the originating cause of this exception\r\n+   **/\r\n+  public ELException (String pMessage,\r\n+\t\t      Throwable pRootCause)\r\n+  {\r\n+    super (pMessage);\r\n+    mRootCause = pRootCause;\r\n+  }\r\n+\r\n+  //-------------------------------------\r\n+  /**\r\n+   * Returns the root cause.\r\n+   *\r\n+   * @return the root cause of this exception\r\n+   */\r\n+  public Throwable getRootCause ()\r\n+  {\r\n+    return mRootCause;\r\n+  }\r\n+}\r"
        },
        {
            "sha": "6e65cf7782b71969f3d40248b1546e42895dfbbe",
            "filename": "java/javax/servlet/jsp/el/ELParseException.java",
            "status": "added",
            "additions": 50,
            "deletions": 0,
            "changes": 50,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Fel%2FELParseException.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Fel%2FELParseException.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Fel%2FELParseException.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,50 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+\r\n+package javax.servlet.jsp.el;\r\n+\r\n+\r\n+/**\r\n+ * Represents a parsing error encountered while parsing an EL expression.\r\n+ *\r\n+ * @since 2.0\r\n+ * @deprecated\r\n+ */\r\n+\r\n+public class ELParseException extends ELException {\r\n+\r\n+ //-------------------------------------\r\n+  /**\r\n+   * Creates an ELParseException with no detail message.\r\n+   */\r\n+  public ELParseException ()\r\n+  {\r\n+    super ();\r\n+  }\r\n+\r\n+  //-------------------------------------\r\n+  /**\r\n+   * Creates an ELParseException with the provided detail message.\r\n+   *\r\n+   * @param pMessage the detail message\r\n+   **/\r\n+  public ELParseException (String pMessage)\r\n+  {\r\n+    super (pMessage);\r\n+  }\r\n+\r\n+  //-------------------------------------\r\n+}\r"
        },
        {
            "sha": "3d5c13417471739dbf38e13dd191271c9f096c3e",
            "filename": "java/javax/servlet/jsp/el/Expression.java",
            "status": "added",
            "additions": 52,
            "deletions": 0,
            "changes": 52,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Fel%2FExpression.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Fel%2FExpression.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Fel%2FExpression.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,52 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+\r\n+\r\n+package javax.servlet.jsp.el;\r\n+\r\n+\r\n+/**\r\n+ * <p>The abstract class for a prepared expression.</p>\r\n+ *\r\n+ * <p>An instance of an Expression can be obtained via from an \r\n+ * ExpressionEvaluator instance.</p>\r\n+ *\r\n+ * <p>An Expression may or not have done a syntactic parse of the expression.\r\n+ * A client invoking the evaluate() method should be ready for the case \r\n+ * where ELParseException exceptions are raised. </p>\r\n+ *\r\n+ * @since 2.0\r\n+ * @deprecated\r\n+ */\r\n+public abstract class Expression {\r\n+\r\n+    /** \r\n+     * Evaluates an expression that was previously prepared.  In some \r\n+     * implementations preparing an expression involves full syntactic \r\n+     * validation, but others may not do so.  Evaluating the expression may \r\n+     * raise an ELParseException as well as other ELExceptions due to \r\n+     * run-time evaluation.\r\n+     *\r\n+     * @param vResolver A VariableResolver instance that can be used at \r\n+     *   runtime to resolve the name of implicit objects into Objects.\r\n+     * @return The result of the expression evaluation.\r\n+     *\r\n+     * @exception ELException Thrown if the expression evaluation failed.\r\n+     */ \r\n+    public abstract Object evaluate( VariableResolver vResolver )\r\n+        throws ELException;\r\n+}\r\n+\r"
        },
        {
            "sha": "5cb95fa620fed0bc33ace4abfda02bda0c6ee72c",
            "filename": "java/javax/servlet/jsp/el/ExpressionEvaluator.java",
            "status": "added",
            "additions": 107,
            "deletions": 0,
            "changes": 107,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Fel%2FExpressionEvaluator.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Fel%2FExpressionEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Fel%2FExpressionEvaluator.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,107 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+\r\n+package javax.servlet.jsp.el;\r\n+\r\n+\r\n+/**\r\n+ * <p>The abstract base class for an expression-language evaluator.\r\n+ * Classes that implement an expression language expose their functionality\r\n+ * via this abstract class.</p>\r\n+ *\r\n+ * <p>An instance of the ExpressionEvaluator can be obtained via the \r\n+ * JspContext / PageContext</p>\r\n+ *\r\n+ * <p>The parseExpression() and evaluate() methods must be thread-safe.  \r\n+ * That is, multiple threads may call these methods on the same \r\n+ * ExpressionEvaluator object simultaneously.  Implementations should \r\n+ * synchronize access if they depend on transient state.  Implementations \r\n+ * should not, however, assume that only one object of each \r\n+ * ExpressionEvaluator type will be instantiated; global caching should \r\n+ * therefore be static.</p>\r\n+ *\r\n+ * <p>Only a single EL expression, starting with '${' and ending with\r\n+ * '}', can be parsed or evaluated at a time.  EL expressions \r\n+ * cannot be mixed with static text.  For example, attempting to \r\n+ * parse or evaluate \"<code>abc${1+1}def${1+1}ghi</code>\" or even\r\n+ * \"<code>${1+1}${1+1}</code>\" will cause an <code>ELException</code> to\r\n+ * be thrown.</p>\r\n+ *\r\n+ * <p>The following are examples of syntactically legal EL expressions:\r\n+ *\r\n+ * <ul>\r\n+ *   <li><code>${person.lastName}</code></li>\r\n+ *   <li><code>${8 * 8}</code></li>\r\n+ *   <li><code>${my:reverse('hello')}</code></li>\r\n+ * </ul>\r\n+ * </p>\r\n+ *\r\n+ * @since 2.0\r\n+ * @deprecated\r\n+ */\r\n+public abstract class ExpressionEvaluator {\r\n+\r\n+    /**\r\n+     * Prepare an expression for later evaluation.  This method should perform\r\n+     * syntactic validation of the expression; if in doing so it detects \r\n+     * errors, it should raise an ELParseException.\r\n+     *\r\n+     * @param expression The expression to be evaluated.\r\n+     * @param expectedType The expected type of the result of the evaluation\r\n+     * @param fMapper A FunctionMapper to resolve functions found in \r\n+     *     the expression.  It can be null, in which case no functions \r\n+     *     are supported for this invocation.  The ExpressionEvaluator \r\n+     *     must not hold on to the FunctionMapper reference after \r\n+     *     returning from <code>parseExpression()</code>.  The \r\n+     *     <code>Expression</code> object returned must invoke the same \r\n+     *     functions regardless of whether the mappings in the \r\n+     *     provided <code>FunctionMapper</code> instance change between \r\n+     *     calling <code>ExpressionEvaluator.parseExpression()</code>\r\n+     *     and <code>Expression.evaluate()</code>.\r\n+     * @return The Expression object encapsulating the arguments.\r\n+     *\r\n+     * @exception ELException Thrown if parsing errors were found.\r\n+     */ \r\n+    public abstract Expression parseExpression( String expression, \r\n+\t\t\t\t       Class expectedType, \r\n+\t\t\t\t       FunctionMapper fMapper ) \r\n+      throws ELException; \r\n+\r\n+\r\n+    /** \r\n+     * Evaluates an expression.  This method may perform some syntactic \r\n+     * validation and, if so, it should raise an ELParseException error if \r\n+     * it encounters syntactic errors.  EL evaluation errors should cause \r\n+     * an ELException to be raised.\r\n+     *\r\n+     * @param expression The expression to be evaluated.\r\n+     * @param expectedType The expected type of the result of the evaluation\r\n+     * @param vResolver A VariableResolver instance that can be used at \r\n+     *     runtime to resolve the name of implicit objects into Objects.\r\n+     * @param fMapper A FunctionMapper to resolve functions found in \r\n+     *     the expression.  It can be null, in which case no functions \r\n+     *     are supported for this invocation.  \r\n+     * @return The result of the expression evaluation.\r\n+     *\r\n+     * @exception ELException Thrown if the expression evaluation failed.\r\n+     */ \r\n+    public abstract Object evaluate( String expression, \r\n+\t\t\t    Class expectedType, \r\n+\t\t\t    VariableResolver vResolver,\r\n+\t\t\t    FunctionMapper fMapper ) \r\n+      throws ELException; \r\n+}\r\n+\r"
        },
        {
            "sha": "078ed715053c810af8e7aa7b6c18d0633cc65eb0",
            "filename": "java/javax/servlet/jsp/el/FunctionMapper.java",
            "status": "added",
            "additions": 39,
            "deletions": 0,
            "changes": 39,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Fel%2FFunctionMapper.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Fel%2FFunctionMapper.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Fel%2FFunctionMapper.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,39 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+\r\n+package javax.servlet.jsp.el;\r\n+\r\n+/**\r\n+ * <p>The interface to a map between EL function names and methods.</p>\r\n+ *\r\n+ * <p>Classes implementing this interface may, for instance, consult tag library\r\n+ * information to resolve the map. </p>\r\n+ *\r\n+ * @since 2.0\r\n+ * @deprecated\r\n+ */\r\n+public interface FunctionMapper {\r\n+  /**\r\n+   * Resolves the specified local name and prefix into a Java.lang.Method.\r\n+   * Returns null if the prefix and local name are not found.\r\n+   * \r\n+   * @param prefix the prefix of the function, or \"\" if no prefix.\r\n+   * @param localName the short name of the function\r\n+   * @return the result of the method mapping.  Null means no entry found.\r\n+   **/\r\n+  public java.lang.reflect.Method resolveFunction(String prefix, \r\n+      String localName);\r\n+}\r"
        },
        {
            "sha": "0dbb304c89e806fa414ad5a4ccc392eb8a673866",
            "filename": "java/javax/servlet/jsp/el/ImplicitObjectELResolver.java",
            "status": "added",
            "additions": 538,
            "deletions": 0,
            "changes": 538,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Fel%2FImplicitObjectELResolver.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Fel%2FImplicitObjectELResolver.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Fel%2FImplicitObjectELResolver.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,538 @@\n+package javax.servlet.jsp.el;\r\n+\r\n+import java.beans.FeatureDescriptor;\r\n+import java.util.AbstractMap;\r\n+import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n+import java.util.Enumeration;\r\n+import java.util.HashSet;\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+import java.util.Vector;\r\n+\r\n+import javax.el.ELContext;\r\n+import javax.el.ELException;\r\n+import javax.el.ELResolver;\r\n+import javax.el.PropertyNotFoundException;\r\n+import javax.el.PropertyNotWritableException;\r\n+import javax.servlet.http.Cookie;\r\n+import javax.servlet.http.HttpServletRequest;\r\n+import javax.servlet.http.HttpSession;\r\n+import javax.servlet.jsp.JspContext;\r\n+import javax.servlet.jsp.PageContext;\r\n+\r\n+/**\r\n+ *\r\n+ * @since 2.1\r\n+ */\r\n+public class ImplicitObjectELResolver extends ELResolver {\r\n+\r\n+    private final static String[] SCOPE_NAMES = new String[] {\r\n+            \"applicationScope\", \"cookie\", \"header\", \"headerValues\",\r\n+            \"initParam\", \"pageContext\", \"pageScope\", \"param\", \"paramValues\",\r\n+            \"requestScope\", \"sessionScope\" };\r\n+\r\n+    private final static int APPLICATIONSCOPE = 0;\r\n+\r\n+    private final static int COOKIE = 1;\r\n+\r\n+    private final static int HEADER = 2;\r\n+\r\n+    private final static int HEADERVALUES = 3;\r\n+\r\n+    private final static int INITPARAM = 4;\r\n+\r\n+    private final static int PAGECONTEXT = 5;\r\n+\r\n+    private final static int PAGESCOPE = 6;\r\n+\r\n+    private final static int PARAM = 7;\r\n+\r\n+    private final static int PARAM_VALUES = 8;\r\n+\r\n+    private final static int REQUEST_SCOPE = 9;\r\n+\r\n+    private final static int SESSION_SCOPE = 10;\r\n+\r\n+    public ImplicitObjectELResolver() {\r\n+        super();\r\n+    }\r\n+\r\n+    public Object getValue(ELContext context, Object base, Object property)\r\n+            throws NullPointerException, PropertyNotFoundException, ELException {\r\n+        if (context == null) {\r\n+            throw new NullPointerException();\r\n+        }\r\n+\r\n+        if (base == null && property != null) {\r\n+            int idx = Arrays.binarySearch(SCOPE_NAMES, property.toString());\r\n+\r\n+            if (idx >= 0) {\r\n+                PageContext page = (PageContext) context\r\n+                        .getContext(JspContext.class);\r\n+                context.setPropertyResolved(true);\r\n+                switch (idx) {\r\n+                case APPLICATIONSCOPE:\r\n+                    return ScopeManager.get(page).getApplicationScope();\r\n+                case COOKIE:\r\n+                    return ScopeManager.get(page).getCookie();\r\n+                case HEADER:\r\n+                    return ScopeManager.get(page).getHeader();\r\n+                case HEADERVALUES:\r\n+                    return ScopeManager.get(page).getHeaderValues();\r\n+                case INITPARAM:\r\n+                    return ScopeManager.get(page).getInitParam();\r\n+                case PAGECONTEXT:\r\n+                    return ScopeManager.get(page).getPageContext();\r\n+                case PAGESCOPE:\r\n+                    return ScopeManager.get(page).getPageScope();\r\n+                case PARAM:\r\n+                    return ScopeManager.get(page).getParam();\r\n+                case PARAM_VALUES:\r\n+                    return ScopeManager.get(page).getParamValues();\r\n+                case REQUEST_SCOPE:\r\n+                    return ScopeManager.get(page).getRequestScope();\r\n+                case SESSION_SCOPE:\r\n+                    return ScopeManager.get(page).getSessionScope();\r\n+                }\r\n+            }\r\n+        }\r\n+        return null;\r\n+    }\r\n+\r\n+    public Class<?> getType(ELContext context, Object base, Object property)\r\n+            throws NullPointerException, PropertyNotFoundException, ELException {\r\n+        if (context == null) {\r\n+            throw new NullPointerException();\r\n+        }\r\n+\r\n+        if (base == null && property != null) {\r\n+            int idx = Arrays.binarySearch(SCOPE_NAMES, property.toString());\r\n+            if (idx >= 0) {\r\n+                context.setPropertyResolved(true);\r\n+            }\r\n+        }\r\n+        return null;\r\n+    }\r\n+\r\n+    public void setValue(ELContext context, Object base, Object property,\r\n+            Object value) throws NullPointerException,\r\n+            PropertyNotFoundException, PropertyNotWritableException,\r\n+            ELException {\r\n+        if (context == null) {\r\n+            throw new NullPointerException();\r\n+        }\r\n+\r\n+        if (base == null && property != null) {\r\n+            int idx = Arrays.binarySearch(SCOPE_NAMES, property.toString());\r\n+            if (idx >= 0) {\r\n+                context.setPropertyResolved(true);\r\n+                throw new PropertyNotWritableException();\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public boolean isReadOnly(ELContext context, Object base, Object property)\r\n+            throws NullPointerException, PropertyNotFoundException, ELException {\r\n+        if (context == null) {\r\n+            throw new NullPointerException();\r\n+        }\r\n+\r\n+        if (base == null && property != null) {\r\n+            int idx = Arrays.binarySearch(SCOPE_NAMES, property.toString());\r\n+            if (idx >= 0) {\r\n+                context.setPropertyResolved(true);\r\n+                return true;\r\n+            }\r\n+        }\r\n+        return false;\r\n+    }\r\n+\r\n+    public Iterator getFeatureDescriptors(ELContext context, Object base) {\r\n+        List<FeatureDescriptor> feats = new ArrayList<FeatureDescriptor>(\r\n+                SCOPE_NAMES.length);\r\n+        FeatureDescriptor feat;\r\n+        for (int i = 0; i < SCOPE_NAMES.length; i++) {\r\n+            feat = new FeatureDescriptor();\r\n+            feat.setDisplayName(SCOPE_NAMES[i]);\r\n+            feat.setExpert(false);\r\n+            feat.setHidden(false);\r\n+            feat.setName(SCOPE_NAMES[i]);\r\n+            feat.setPreferred(true);\r\n+            feat.setValue(RESOLVABLE_AT_DESIGN_TIME, Boolean.TRUE);\r\n+            feat.setValue(TYPE, String.class);\r\n+            feats.add(feat);\r\n+        }\r\n+        return feats.iterator();\r\n+    }\r\n+\r\n+    public Class<?> getCommonPropertyType(ELContext context, Object base) {\r\n+        if (base == null) {\r\n+            return String.class;\r\n+        }\r\n+        return null;\r\n+    }\r\n+\r\n+    private static class ScopeManager {\r\n+        private final static String MNGR_KEY = ScopeManager.class.getName();\r\n+\r\n+        private final PageContext page;\r\n+\r\n+        private Map applicationScope;\r\n+\r\n+        private Map cookie;\r\n+\r\n+        private Map header;\r\n+\r\n+        private Map headerValues;\r\n+\r\n+        private Map initParam;\r\n+\r\n+        private Map pageScope;\r\n+\r\n+        private Map param;\r\n+\r\n+        private Map paramValues;\r\n+\r\n+        private Map requestScope;\r\n+\r\n+        private Map sessionScope;\r\n+\r\n+        public ScopeManager(PageContext page) {\r\n+            this.page = page;\r\n+        }\r\n+\r\n+        public static ScopeManager get(PageContext page) {\r\n+            ScopeManager mngr = (ScopeManager) page.getAttribute(MNGR_KEY);\r\n+            if (mngr == null) {\r\n+                mngr = new ScopeManager(page);\r\n+                page.setAttribute(MNGR_KEY, mngr);\r\n+            }\r\n+            return mngr;\r\n+        }\r\n+\r\n+        public Map getApplicationScope() {\r\n+            if (this.applicationScope == null) {\r\n+                this.applicationScope = new ScopeMap() {\r\n+                    protected void setAttribute(String name, Object value) {\r\n+                        page.getServletContext().setAttribute(name, value);\r\n+                    }\r\n+\r\n+                    protected void removeAttribute(String name) {\r\n+                        page.getServletContext().removeAttribute(name);\r\n+                    }\r\n+\r\n+                    protected Enumeration getAttributeNames() {\r\n+                        return page.getServletContext().getAttributeNames();\r\n+                    }\r\n+\r\n+                    protected Object getAttribute(String name) {\r\n+                        return page.getServletContext().getAttribute(name);\r\n+                    }\r\n+                };\r\n+            }\r\n+            return this.applicationScope;\r\n+        }\r\n+\r\n+        public Map getCookie() {\r\n+            if (this.cookie == null) {\r\n+                this.cookie = new ScopeMap() {\r\n+                    protected Enumeration getAttributeNames() {\r\n+                        Cookie[] c = ((HttpServletRequest) page.getRequest())\r\n+                                .getCookies();\r\n+                        if (c != null) {\r\n+                            Vector v = new Vector();\r\n+                            for (int i = 0; i < c.length; i++) {\r\n+                                v.add(c[i].getName());\r\n+                            }\r\n+                            return v.elements();\r\n+                        }\r\n+                        return null;\r\n+                    }\r\n+\r\n+                    protected Object getAttribute(String name) {\r\n+                        Cookie[] c = ((HttpServletRequest) page.getRequest())\r\n+                                .getCookies();\r\n+                        if (c != null) {\r\n+                            for (int i = 0; i < c.length; i++) {\r\n+                                if (name.equals(c[i].getName())) {\r\n+                                    return c[i];\r\n+                                }\r\n+                            }\r\n+                        }\r\n+                        return null;\r\n+                    }\r\n+\r\n+                };\r\n+            }\r\n+            return this.cookie;\r\n+        }\r\n+\r\n+        public Map getHeader() {\r\n+            if (this.header == null) {\r\n+                this.header = new ScopeMap() {\r\n+                    protected Enumeration getAttributeNames() {\r\n+                        return ((HttpServletRequest) page.getRequest())\r\n+                                .getHeaderNames();\r\n+                    }\r\n+\r\n+                    protected Object getAttribute(String name) {\r\n+                        return ((HttpServletRequest) page.getRequest())\r\n+                                .getHeader(name);\r\n+                    }\r\n+                };\r\n+            }\r\n+            return this.header;\r\n+        }\r\n+\r\n+        public Map getHeaderValues() {\r\n+            if (this.headerValues == null) {\r\n+                this.headerValues = new ScopeMap() {\r\n+                    protected Enumeration getAttributeNames() {\r\n+                        return ((HttpServletRequest) page.getRequest())\r\n+                                .getHeaderNames();\r\n+                    }\r\n+\r\n+                    protected Object getAttribute(String name) {\r\n+                        Enumeration e = ((HttpServletRequest) page.getRequest())\r\n+                                .getHeaders(name);\r\n+                        if (e != null) {\r\n+                            List list = new ArrayList();\r\n+                            while (e.hasMoreElements()) {\r\n+                                list.add(e.nextElement().toString());\r\n+                            }\r\n+                            return (String[]) list.toArray(new String[list\r\n+                                    .size()]);\r\n+                        }\r\n+                        return null;\r\n+                    }\r\n+\r\n+                };\r\n+            }\r\n+            return this.headerValues;\r\n+        }\r\n+\r\n+        public Map getInitParam() {\r\n+            if (this.initParam == null) {\r\n+                this.initParam = new ScopeMap() {\r\n+                    protected Enumeration getAttributeNames() {\r\n+                        return page.getServletContext().getInitParameterNames();\r\n+                    }\r\n+\r\n+                    protected Object getAttribute(String name) {\r\n+                        return page.getServletContext().getInitParameter(name);\r\n+                    }\r\n+                };\r\n+            }\r\n+            return this.initParam;\r\n+        }\r\n+\r\n+        public PageContext getPageContext() {\r\n+            return this.page;\r\n+        }\r\n+\r\n+        public Map getPageScope() {\r\n+            if (this.pageScope == null) {\r\n+                this.pageScope = new ScopeMap() {\r\n+                    protected void setAttribute(String name, Object value) {\r\n+                        page.setAttribute(name, value);\r\n+                    }\r\n+\r\n+                    protected void removeAttribute(String name) {\r\n+                        page.removeAttribute(name);\r\n+                    }\r\n+\r\n+                    protected Enumeration getAttributeNames() {\r\n+                        return page\r\n+                                .getAttributeNamesInScope(PageContext.PAGE_SCOPE);\r\n+                    }\r\n+\r\n+                    protected Object getAttribute(String name) {\r\n+                        return page.getAttribute(name);\r\n+                    }\r\n+                };\r\n+            }\r\n+            return this.pageScope;\r\n+        }\r\n+\r\n+        public Map getParam() {\r\n+            if (this.param == null) {\r\n+                this.param = new ScopeMap() {\r\n+                    protected Enumeration getAttributeNames() {\r\n+                        return page.getRequest().getParameterNames();\r\n+                    }\r\n+\r\n+                    protected Object getAttribute(String name) {\r\n+                        return page.getRequest().getParameter(name);\r\n+                    }\r\n+                };\r\n+            }\r\n+            return this.param;\r\n+        }\r\n+\r\n+        public Map getParamValues() {\r\n+            if (this.paramValues == null) {\r\n+                this.paramValues = new ScopeMap() {\r\n+                    protected Object getAttribute(String name) {\r\n+                        return page.getRequest().getParameterValues(name);\r\n+                    }\r\n+\r\n+                    protected Enumeration getAttributeNames() {\r\n+                        return page.getRequest().getParameterNames();\r\n+                    }\r\n+                };\r\n+            }\r\n+            return this.paramValues;\r\n+        }\r\n+\r\n+        public Map getRequestScope() {\r\n+            if (this.requestScope == null) {\r\n+                this.requestScope = new ScopeMap() {\r\n+                    protected void setAttribute(String name, Object value) {\r\n+                        page.getRequest().setAttribute(name, value);\r\n+                    }\r\n+\r\n+                    protected void removeAttribute(String name) {\r\n+                        page.getRequest().removeAttribute(name);\r\n+                    }\r\n+\r\n+                    protected Enumeration getAttributeNames() {\r\n+                        return page.getRequest().getAttributeNames();\r\n+                    }\r\n+\r\n+                    protected Object getAttribute(String name) {\r\n+                        return page.getAttribute(name);\r\n+                    }\r\n+                };\r\n+            }\r\n+            return this.requestScope;\r\n+        }\r\n+\r\n+        public Map getSessionScope() {\r\n+            if (this.sessionScope == null) {\r\n+                this.sessionScope = new ScopeMap() {\r\n+                    protected void setAttribute(String name, Object value) {\r\n+                        ((HttpServletRequest) page.getRequest()).getSession()\r\n+                                .setAttribute(name, value);\r\n+                    }\r\n+\r\n+                    protected void removeAttribute(String name) {\r\n+                        HttpSession session = page.getSession();\r\n+                        if (session != null) {\r\n+                            session.removeAttribute(name);\r\n+                        }\r\n+                    }\r\n+\r\n+                    protected Enumeration getAttributeNames() {\r\n+                        HttpSession session = page.getSession();\r\n+                        if (session != null) {\r\n+                            return session.getAttributeNames();\r\n+                        }\r\n+                        return null;\r\n+                    }\r\n+\r\n+                    protected Object getAttribute(String name) {\r\n+                        HttpSession session = page.getSession();\r\n+                        if (session != null) {\r\n+                            return session.getAttribute(name);\r\n+                        }\r\n+                        return null;\r\n+                    }\r\n+                };\r\n+            }\r\n+            return this.sessionScope;\r\n+        }\r\n+    }\r\n+\r\n+    private abstract static class ScopeMap extends AbstractMap {\r\n+\r\n+        protected abstract Enumeration getAttributeNames();\r\n+\r\n+        protected abstract Object getAttribute(String name);\r\n+\r\n+        protected void removeAttribute(String name) {\r\n+            throw new UnsupportedOperationException();\r\n+        }\r\n+\r\n+        protected void setAttribute(String name, Object value) {\r\n+            throw new UnsupportedOperationException();\r\n+        }\r\n+\r\n+        public final Set entrySet() {\r\n+            Enumeration e = getAttributeNames();\r\n+            Set set = new HashSet();\r\n+            if (e != null) {\r\n+                while (e.hasMoreElements()) {\r\n+                    set.add(new ScopeEntry((String) e.nextElement()));\r\n+                }\r\n+            }\r\n+            return set;\r\n+        }\r\n+\r\n+        private class ScopeEntry implements Map.Entry {\r\n+\r\n+            private final String key;\r\n+\r\n+            public ScopeEntry(String key) {\r\n+                this.key = key;\r\n+            }\r\n+\r\n+            public Object getKey() {\r\n+                return (Object) this.key;\r\n+            }\r\n+\r\n+            public Object getValue() {\r\n+                return getAttribute(this.key);\r\n+            }\r\n+\r\n+            public Object setValue(Object value) {\r\n+                if (value == null) {\r\n+                    removeAttribute(this.key);\r\n+                } else {\r\n+                    setAttribute(this.key, value);\r\n+                }\r\n+                return null;\r\n+            }\r\n+\r\n+            public boolean equals(Object obj) {\r\n+                return (obj != null && this.hashCode() == obj.hashCode());\r\n+            }\r\n+\r\n+            public int hashCode() {\r\n+                return this.key.hashCode();\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        public final Object get(Object key) {\r\n+            if (key != null) {\r\n+                return getAttribute(key.toString());\r\n+            }\r\n+            return null;\r\n+        }\r\n+\r\n+        public final Object put(Object key, Object value) {\r\n+            if (key == null) {\r\n+                throw new NullPointerException();\r\n+            }\r\n+            if (value == null) {\r\n+                this.removeAttribute(key.toString());\r\n+            } else {\r\n+                this.setAttribute(key.toString(), value);\r\n+            }\r\n+            return null;\r\n+        }\r\n+\r\n+        public final Object remove(Object key) {\r\n+            if (key == null) {\r\n+                throw new NullPointerException();\r\n+            }\r\n+            this.removeAttribute(key.toString());\r\n+            return null;\r\n+        }\r\n+\r\n+    }\r\n+\r\n+}\r"
        },
        {
            "sha": "8930f33c968423e78927436cc41998048e5336b6",
            "filename": "java/javax/servlet/jsp/el/ScopedAttributeELResolver.java",
            "status": "added",
            "additions": 182,
            "deletions": 0,
            "changes": 182,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Fel%2FScopedAttributeELResolver.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Fel%2FScopedAttributeELResolver.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Fel%2FScopedAttributeELResolver.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,182 @@\n+package javax.servlet.jsp.el;\r\n+\r\n+import java.beans.FeatureDescriptor;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.Enumeration;\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+\r\n+import javax.el.ELContext;\r\n+import javax.el.ELException;\r\n+import javax.el.ELResolver;\r\n+import javax.el.PropertyNotFoundException;\r\n+import javax.el.PropertyNotWritableException;\r\n+import javax.servlet.jsp.JspContext;\r\n+import javax.servlet.jsp.PageContext;\r\n+\r\n+public class ScopedAttributeELResolver extends ELResolver {\r\n+\r\n+\tpublic ScopedAttributeELResolver() {\r\n+\t\tsuper();\r\n+\t}\r\n+\r\n+\tpublic Object getValue(ELContext context, Object base, Object property)\r\n+\t\t\tthrows NullPointerException, PropertyNotFoundException, ELException {\r\n+\t\tif (context == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\r\n+\t\tif (base == null) {\r\n+\t\t\tcontext.setPropertyResolved(true);\r\n+\t\t\tif (property != null) {\r\n+\t\t\t\tString key = property.toString();\r\n+\t\t\t\tPageContext page = (PageContext) context\r\n+\t\t\t\t\t\t.getContext(JspContext.class);\r\n+\t\t\t\treturn page.findAttribute(key);\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\tpublic Class<?> getType(ELContext context, Object base, Object property)\r\n+\t\t\tthrows NullPointerException, PropertyNotFoundException, ELException {\r\n+\t\tif (context == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\r\n+\t\tif (base == null) {\r\n+\t\t\tcontext.setPropertyResolved(true);\r\n+\t\t\treturn Object.class;\r\n+\t\t}\r\n+\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\tpublic void setValue(ELContext context, Object base, Object property,\r\n+\t\t\tObject value) throws NullPointerException,\r\n+\t\t\tPropertyNotFoundException, PropertyNotWritableException,\r\n+\t\t\tELException {\r\n+\t\tif (context == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\r\n+\t\tif (base == null) {\r\n+\t\t\tcontext.setPropertyResolved(true);\r\n+\t\t\tif (property != null) {\r\n+\t\t\t\tString key = property.toString();\r\n+\t\t\t\tPageContext page = (PageContext) context\r\n+\t\t\t\t\t\t.getContext(JspContext.class);\r\n+\t\t\t\tint scope = page.getAttributesScope(key);\r\n+\t\t\t\tif (scope != 0) {\r\n+\t\t\t\t\tpage.setAttribute(key, value, scope);\r\n+\t\t\t\t} else {\r\n+\t\t\t\t\tpage.setAttribute(key, value);\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tpublic boolean isReadOnly(ELContext context, Object base, Object property)\r\n+\t\t\tthrows NullPointerException, PropertyNotFoundException, ELException {\r\n+\t\tif (context == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\r\n+\t\tif (base == null) {\r\n+\t\t\tcontext.setPropertyResolved(true);\r\n+\t\t}\r\n+\r\n+\t\treturn false;\r\n+\t}\r\n+\r\n+\tpublic Iterator getFeatureDescriptors(ELContext context, Object base) {\r\n+\r\n+\t\tPageContext ctxt = (PageContext) context.getContext(JspContext.class);\r\n+\t\tList list = new ArrayList();\r\n+\t\tEnumeration e;\r\n+\t\tObject value;\r\n+\t\tString name;\r\n+\r\n+\t\te = ctxt.getAttributeNamesInScope(PageContext.PAGE_SCOPE);\r\n+\t\twhile (e.hasMoreElements()) {\r\n+\t\t\tname = (String) e.nextElement();\r\n+\t\t\tvalue = ctxt.getAttribute(name, PageContext.PAGE_SCOPE);\r\n+\t\t\tFeatureDescriptor descriptor = new FeatureDescriptor();\r\n+\t\t\tdescriptor.setName(name);\r\n+\t\t\tdescriptor.setDisplayName(name);\r\n+\t\t\tdescriptor.setExpert(false);\r\n+\t\t\tdescriptor.setHidden(false);\r\n+\t\t\tdescriptor.setPreferred(true);\r\n+\t\t\tdescriptor.setShortDescription(\"page scoped attribute\");\r\n+\t\t\tdescriptor.setValue(\"type\", value.getClass());\r\n+\t\t\tdescriptor.setValue(\"resolvableAtDesignTime\", Boolean.FALSE);\r\n+\t\t\tlist.add(descriptor);\r\n+\t\t}\r\n+\r\n+\t\te = ctxt.getAttributeNamesInScope(PageContext.REQUEST_SCOPE);\r\n+\t\twhile (e.hasMoreElements()) {\r\n+\t\t\tname = (String) e.nextElement();\r\n+\t\t\tvalue = ctxt.getAttribute(name, PageContext.REQUEST_SCOPE);\r\n+\t\t\tFeatureDescriptor descriptor = new FeatureDescriptor();\r\n+\t\t\tdescriptor.setName(name);\r\n+\t\t\tdescriptor.setDisplayName(name);\r\n+\t\t\tdescriptor.setExpert(false);\r\n+\t\t\tdescriptor.setHidden(false);\r\n+\t\t\tdescriptor.setPreferred(true);\r\n+\t\t\tdescriptor.setShortDescription(\"request scope attribute\");\r\n+\t\t\tdescriptor.setValue(\"type\", value.getClass());\r\n+\t\t\tdescriptor.setValue(\"resolvableAtDesignTime\", Boolean.FALSE);\r\n+\t\t\tlist.add(descriptor);\r\n+\t\t}\r\n+\r\n+\t\tif (ctxt.getSession() != null) {\r\n+\t\t\te = ctxt.getAttributeNamesInScope(PageContext.SESSION_SCOPE);\r\n+\t\t\twhile (e.hasMoreElements()) {\r\n+\t\t\t\tname = (String) e.nextElement();\r\n+\t\t\t\tvalue = ctxt.getAttribute(name, PageContext.SESSION_SCOPE);\r\n+\t\t\t\tFeatureDescriptor descriptor = new FeatureDescriptor();\r\n+\t\t\t\tdescriptor.setName(name);\r\n+\t\t\t\tdescriptor.setDisplayName(name);\r\n+\t\t\t\tdescriptor.setExpert(false);\r\n+\t\t\t\tdescriptor.setHidden(false);\r\n+\t\t\t\tdescriptor.setPreferred(true);\r\n+\t\t\t\tdescriptor.setShortDescription(\"session scoped attribute\");\r\n+\t\t\t\tdescriptor.setValue(\"type\", value.getClass());\r\n+\t\t\t\tdescriptor.setValue(\"resolvableAtDesignTime\", Boolean.FALSE);\r\n+\t\t\t\tlist.add(descriptor);\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\te = ctxt.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE);\r\n+\t\twhile (e.hasMoreElements()) {\r\n+\t\t\tname = (String) e.nextElement();\r\n+\t\t\tvalue = ctxt.getAttribute(name, PageContext.APPLICATION_SCOPE);\r\n+\t\t\tFeatureDescriptor descriptor = new FeatureDescriptor();\r\n+\t\t\tdescriptor.setName(name);\r\n+\t\t\tdescriptor.setDisplayName(name);\r\n+\t\t\tdescriptor.setExpert(false);\r\n+\t\t\tdescriptor.setHidden(false);\r\n+\t\t\tdescriptor.setPreferred(true);\r\n+\t\t\tdescriptor.setShortDescription(\"application scoped attribute\");\r\n+\t\t\tdescriptor.setValue(\"type\", value.getClass());\r\n+\t\t\tdescriptor.setValue(\"resolvableAtDesignTime\", Boolean.FALSE);\r\n+\t\t\tlist.add(descriptor);\r\n+\t\t}\r\n+\t\treturn list.iterator();\r\n+\t}\r\n+\r\n+\tprivate static void appendEnumeration(Collection c, Enumeration e) {\r\n+\t\twhile (e.hasMoreElements()) {\r\n+\t\t\tc.add(e.nextElement());\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tpublic Class<?> getCommonPropertyType(ELContext context, Object base) {\r\n+\t\tif (base == null) {\r\n+\t\t\treturn String.class;\r\n+\t\t}\r\n+\t\treturn null;\r\n+\t}\r\n+}\r"
        },
        {
            "sha": "e1f1ca3b5ba7e6d410421d2bdd6e08a530442d72",
            "filename": "java/javax/servlet/jsp/el/VariableResolver.java",
            "status": "added",
            "additions": 50,
            "deletions": 0,
            "changes": 50,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Fel%2FVariableResolver.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Fel%2FVariableResolver.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Fel%2FVariableResolver.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,50 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+\r\n+package javax.servlet.jsp.el;\r\n+\r\n+/**\r\n+ * <p>This class is used to customize the way an ExpressionEvaluator resolves\r\n+ * variable references at evaluation time.  For example, instances of this class can\r\n+ * implement their own variable lookup mechanisms, or introduce the\r\n+ * notion of \"implicit variables\" which override any other variables.\r\n+ * An instance of this class should be passed when evaluating\r\n+ * an expression.</p>\r\n+ *\r\n+ * <p>An instance of this class includes the context against which resolution\r\n+ * will happen</p>\r\n+ *\r\n+ * @since 2.0\r\n+ * @deprecated\r\n+ */\r\n+public interface VariableResolver\r\n+{\r\n+  //-------------------------------------\r\n+  /**\r\n+   * Resolves the specified variable.\r\n+   * Returns null if the variable is not found.\r\n+   * \r\n+   * @param pName the name of the variable to resolve\r\n+   * @return the result of the variable resolution\r\n+   *\r\n+   * @throws ELException if a failure occurred while trying to resolve\r\n+   *     the given variable\r\n+   **/\r\n+  public Object resolveVariable (String pName)\r\n+    throws ELException;\r\n+\t\t\t\t\t\r\n+  //-------------------------------------\r\n+}\r"
        },
        {
            "sha": "c7a18ba63a83c3f3c108d3ede224530ddf524c23",
            "filename": "java/javax/servlet/jsp/el/package.html",
            "status": "added",
            "additions": 75,
            "deletions": 0,
            "changes": 75,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Fel%2Fpackage.html",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Fel%2Fpackage.html",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Fel%2Fpackage.html?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,75 @@\n+<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\r\n+<html>\r\n+<head>\r\n+<!--\r\n+  - The Apache Software License, Version 1.1\r\n+  -\r\n+  - Copyright (c) 1999 The Apache Software Foundation.  All rights \r\n+  - reserved.\r\n+  -\r\n+  - Redistribution and use in source and binary forms, with or without\r\n+  - modification, are permitted provided that the following conditions\r\n+  - are met:\r\n+  -\r\n+  - 1. Redistributions of source code must retain the above copyright\r\n+  -    notice, this list of conditions and the following disclaimer. \r\n+  -\r\n+  - 2. Redistributions in binary form must reproduce the above copyright\r\n+  -    notice, this list of conditions and the following disclaimer in\r\n+  -    the documentation and/or other materials provided with the\r\n+  -    distribution.\r\n+  -\r\n+  - 3. The end-user documentation included with the redistribution, if\r\n+  -    any, must include the following acknowlegement:  \r\n+  -       \"This product includes software developed by the \r\n+  -        Apache Software Foundation (http://www.apache.org/).\"\r\n+  -    Alternately, this acknowlegement may appear in the software itself,\r\n+  -    if and wherever such third-party acknowlegements normally appear.\r\n+  -\r\n+  - 4. The names \"The Jakarta Project\", \"Tomcat\", and \"Apache Software\r\n+  -    Foundation\" must not be used to endorse or promote products derived\r\n+  -    from this software without prior written permission. For written \r\n+  -    permission, please contact apache@apache.org.\r\n+  -\r\n+  - 5. Products derived from this software may not be called \"Apache\"\r\n+  -    nor may \"Apache\" appear in their names without prior written\r\n+  -    permission of the Apache Group.\r\n+  -\r\n+  - THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n+  - WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n+  - OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n+  - DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n+  - ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n+  - SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n+  - LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n+  - USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n+  - ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n+  - OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n+  - OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n+  - SUCH DAMAGE.\r\n+  - ====================================================================\r\n+  -\r\n+  - This software consists of voluntary contributions made by many\r\n+  - individuals on behalf of the Apache Software Foundation.  For more\r\n+  - information on the Apache Software Foundation, please see\r\n+  - <http://www.apache.org/>.\r\n+  -\r\n+  -->\r\n+</head>\r\n+<body bgcolor=\"white\">\r\n+\r\n+Classes and interfaces for the JSP 2.0 Expression Language API.\r\n+\r\n+<p>\r\n+The JavaServer Pages(tm) (JSP) 2.0 specification provides a portable\r\n+API for evaluating \"EL Expressions\".  As of JSP 2.0, EL expressions can\r\n+be placed directly in the template text of JSP pages and tag files.\r\n+<p>\r\n+This package contains a number of classes and interfaces that describe \r\n+and define programmatic access to the Expression Language evaluator. \r\n+This API can also be used by an implementation of JSP to evaluate the \r\n+expressions, but other implementations, like open-coding into Java \r\n+bytecodes, are allowed.  This package is intended to have no dependencies \r\n+on other portions of the JSP 2.0 specification. \r\n+</body>\r\n+</html>\r"
        },
        {
            "sha": "7a5c4d9783ce75fea76e18116261dda532b80d27",
            "filename": "java/javax/servlet/jsp/package.html",
            "status": "added",
            "additions": 67,
            "deletions": 0,
            "changes": 67,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Fpackage.html",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Fpackage.html",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Fpackage.html?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,67 @@\n+<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\r\n+<html>\r\n+<head>\r\n+<!--\r\n+  - The Apache Software License, Version 1.1\r\n+  -\r\n+  - Copyright (c) 1999 The Apache Software Foundation.  All rights \r\n+  - reserved.\r\n+  -\r\n+  - Redistribution and use in source and binary forms, with or without\r\n+  - modification, are permitted provided that the following conditions\r\n+  - are met:\r\n+  -\r\n+  - 1. Redistributions of source code must retain the above copyright\r\n+  -    notice, this list of conditions and the following disclaimer. \r\n+  -\r\n+  - 2. Redistributions in binary form must reproduce the above copyright\r\n+  -    notice, this list of conditions and the following disclaimer in\r\n+  -    the documentation and/or other materials provided with the\r\n+  -    distribution.\r\n+  -\r\n+  - 3. The end-user documentation included with the redistribution, if\r\n+  -    any, must include the following acknowlegement:  \r\n+  -       \"This product includes software developed by the \r\n+  -        Apache Software Foundation (http://www.apache.org/).\"\r\n+  -    Alternately, this acknowlegement may appear in the software itself,\r\n+  -    if and wherever such third-party acknowlegements normally appear.\r\n+  -\r\n+  - 4. The names \"The Jakarta Project\", \"Tomcat\", and \"Apache Software\r\n+  -    Foundation\" must not be used to endorse or promote products derived\r\n+  -    from this software without prior written permission. For written \r\n+  -    permission, please contact apache@apache.org.\r\n+  -\r\n+  - 5. Products derived from this software may not be called \"Apache\"\r\n+  -    nor may \"Apache\" appear in their names without prior written\r\n+  -    permission of the Apache Group.\r\n+  -\r\n+  - THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n+  - WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n+  - OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n+  - DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n+  - ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n+  - SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n+  - LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n+  - USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n+  - ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n+  - OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n+  - OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n+  - SUCH DAMAGE.\r\n+  - ====================================================================\r\n+  -\r\n+  - This software consists of voluntary contributions made by many\r\n+  - individuals on behalf of the Apache Software Foundation.  For more\r\n+  - information on the Apache Software Foundation, please see\r\n+  - <http://www.apache.org/>.\r\n+  -\r\n+  -->\r\n+</head>\r\n+<body bgcolor=\"white\">\r\n+Classes and interfaces for the Core JSP 2.0 API.\r\n+<p>\r\n+The javax.servlet.jsp package contains a number of classes and\r\n+interfaces that describe and define the contracts between a JSP page\r\n+implementation class and the runtime environment provided for an\r\n+instance of such a class by a conforming JSP container.\r\n+</body>\r\n+</html>\r"
        },
        {
            "sha": "f34d297bbbc5af8699b7d3b6be097ee4d42281e6",
            "filename": "java/javax/servlet/jsp/tagext/BodyContent.java",
            "status": "added",
            "additions": 138,
            "deletions": 0,
            "changes": 138,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FBodyContent.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FBodyContent.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FBodyContent.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,138 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/ \r\n+package javax.servlet.jsp.tagext;\r\n+\r\n+import java.io.Reader;\r\n+import java.io.Writer;\r\n+import java.io.IOException;\r\n+import javax.servlet.jsp.*;\r\n+\r\n+/**\r\n+ * An encapsulation of the evaluation of the body of an action so it is\r\n+ * available to a tag handler.  BodyContent is a subclass of JspWriter.\r\n+ *\r\n+ * <p>\r\n+ * Note that the content of BodyContent is the result of evaluation, so\r\n+ * it will not contain actions and the like, but the result of their\r\n+ * invocation.\r\n+ * \r\n+ * <p>\r\n+ * BodyContent has methods to convert its contents into\r\n+ * a String, to read its contents, and to clear the contents.\r\n+ *\r\n+ * <p>\r\n+ * The buffer size of a BodyContent object is unbounded.  A\r\n+ * BodyContent object cannot be in autoFlush mode.  It is not possible to\r\n+ * invoke flush on a BodyContent object, as there is no backing stream.\r\n+ *\r\n+ * <p>\r\n+ * Instances of BodyContent are created by invoking the pushBody and\r\n+ * popBody methods of the PageContext class.  A BodyContent is enclosed\r\n+ * within another JspWriter (maybe another BodyContent object) following\r\n+ * the structure of their associated actions.\r\n+ *\r\n+ * <p>\r\n+ * A BodyContent is made available to a BodyTag through a setBodyContent()\r\n+ * call.  The tag handler can use the object until after the call to\r\n+ * doEndTag().\r\n+ */\r\n+\r\n+public abstract class BodyContent extends JspWriter {\r\n+    \r\n+    /**\r\n+     * Protected constructor.\r\n+     *\r\n+     * Unbounded buffer, no autoflushing.\r\n+     *\r\n+     * @param e the enclosing JspWriter\r\n+     */\r\n+\r\n+    protected BodyContent(JspWriter e) {\r\n+\tsuper(UNBOUNDED_BUFFER , false);\r\n+\tthis.enclosingWriter = e;\r\n+    }\r\n+\r\n+    /**\r\n+     * Redefined flush() so it is not legal.\r\n+     *\r\n+     * <p>\r\n+     * It is not valid to flush a BodyContent because there is no backing\r\n+     * stream behind it.\r\n+     *\r\n+     * @throws IOException always thrown\r\n+     */\r\n+\r\n+    public void flush() throws IOException {\r\n+\tthrow new IOException(\"Illegal to flush within a custom tag\");\r\n+    }\r\n+\r\n+    /**\r\n+     * Clear the body without throwing any exceptions.\r\n+     */\r\n+    \r\n+    public void clearBody() {\r\n+\ttry {\r\n+\t    this.clear();\r\n+\t} catch (IOException ex) {\r\n+\t    // TODO -- clean this one up.\r\n+\t    throw new Error(\"internal error!;\");\r\n+\t}\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the value of this BodyContent as a Reader.\r\n+     *\r\n+     * @return the value of this BodyContent as a Reader\r\n+     */\r\n+    public abstract Reader getReader();\r\n+\r\n+\r\n+    /**\r\n+     * Return the value of the BodyContent as a String.\r\n+     *\r\n+     * @return the value of the BodyContent as a String\r\n+     */\r\n+    public abstract String getString();\r\n+\t\r\n+\r\n+    /**\r\n+     * Write the contents of this BodyContent into a Writer.\r\n+     * Subclasses may optimize common invocation patterns.\r\n+     *\r\n+     * @param out The writer into which to place the contents of\r\n+     *     this body evaluation\r\n+     * @throws IOException if an I/O error occurred while writing the\r\n+     *     contents of this BodyContent to the given Writer\r\n+     */\r\n+\r\n+    public abstract void writeOut(Writer out) throws IOException;\r\n+\r\n+\r\n+    /**\r\n+     * Get the enclosing JspWriter.\r\n+     *\r\n+     * @return the enclosing JspWriter passed at construction time\r\n+     */\r\n+\r\n+    public JspWriter getEnclosingWriter() {\r\n+\treturn enclosingWriter;\r\n+    }\r\n+\r\n+\r\n+    // private fields\r\n+\r\n+    private JspWriter enclosingWriter;\r\n+ }\r"
        },
        {
            "sha": "04ec7d9912fc4f0e27df86174689e9e46d299a9b",
            "filename": "java/javax/servlet/jsp/tagext/BodyTag.java",
            "status": "added",
            "additions": 185,
            "deletions": 0,
            "changes": 185,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FBodyTag.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FBodyTag.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FBodyTag.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,185 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet.jsp.tagext;\r\n+\r\n+import javax.servlet.jsp.*;\r\n+\r\n+/**\r\n+ * The BodyTag interface extends IterationTag by defining additional\r\n+ * methods that let a tag handler manipulate the content of evaluating its body.\r\n+ *\r\n+ * <p>\r\n+ * It is the responsibility of the tag handler to manipulate the body\r\n+ * content.  For example the tag handler may take the body content,\r\n+ * convert it into a String using the bodyContent.getString\r\n+ * method and then use it.  Or the tag handler may take the body\r\n+ * content and write it out into its enclosing JspWriter using\r\n+ * the bodyContent.writeOut method.\r\n+ *\r\n+ * <p> A tag handler that implements BodyTag is treated as one that\r\n+ * implements IterationTag, except that the doStartTag method can\r\n+ * return SKIP_BODY, EVAL_BODY_INCLUDE or EVAL_BODY_BUFFERED.\r\n+ *\r\n+ * <p>\r\n+ * If EVAL_BODY_INCLUDE is returned, then evaluation happens\r\n+ * as in IterationTag.\r\n+ *\r\n+ * <p>\r\n+ * If EVAL_BODY_BUFFERED is returned, then a BodyContent object will be\r\n+ * created (by code generated by the JSP compiler) to capture the body\r\n+ * evaluation.\r\n+ * The code generated by the JSP compiler obtains the BodyContent object by\r\n+ * calling the pushBody method of the current pageContext, which\r\n+ * additionally has the effect of saving the previous out value.\r\n+ * The page compiler returns this object by calling the popBody\r\n+ * method of the PageContext class;\r\n+ * the call also restores the value of out.\r\n+ *\r\n+ * <p>\r\n+ * The interface provides one new property with a setter method and one\r\n+ * new action method.\r\n+ *\r\n+ * <p><B>Properties</B>\r\n+ * <p> There is a new property: bodyContent, to contain the BodyContent\r\n+ * object, where the JSP Page implementation object will place the\r\n+ * evaluation (and reevaluation, if appropriate) of the body.  The setter\r\n+ * method (setBodyContent) will only be invoked if doStartTag() returns\r\n+ * EVAL_BODY_BUFFERED and the corresponding action element does not have\r\n+ * an empty body.\r\n+ *\r\n+ * <p><B>Methods</B>\r\n+ * <p> In addition to the setter method for the bodyContent property, there\r\n+ * is a new action method: doInitBody(), which is invoked right after\r\n+ * setBodyContent() and before the body evaluation.  This method is only\r\n+ * invoked if doStartTag() returns EVAL_BODY_BUFFERED.\r\n+ *\r\n+ * <p><B>Lifecycle</B>\r\n+ * <p> Lifecycle details are described by the transition diagram below.\r\n+ * Exceptions that are thrown during the computation of doStartTag(),\r\n+ * setBodyContent(), doInitBody(), BODY, doAfterBody() interrupt the\r\n+ * execution sequence and are propagated up the stack, unless the\r\n+ * tag handler implements the TryCatchFinally interface; see that\r\n+ * interface for details.\r\n+ * <p>\r\n+ * <IMG src=\"doc-files/BodyTagProtocol.gif\"\r\n+ *      alt=\"Lifecycle Details Transition Diagram for BodyTag\"/>\r\n+ *\r\n+ * <p><B>Empty and Non-Empty Action</B>\r\n+ * <p> If the TagLibraryDescriptor file indicates that the action must\r\n+ * always have an empty element body, by an &lt;body-content&gt; entry \r\n+ * of \"empty\", then the doStartTag() method must return SKIP_BODY.\r\n+ * Otherwise, the doStartTag() method may return SKIP_BODY,\r\n+ * EVAL_BODY_INCLUDE, or EVAL_BODY_BUFFERED.\r\n+ *\r\n+ * <p>Note that which methods are invoked after the doStartTag() depends on \r\n+ * both the return value and on if the custom action element is empty\r\n+ * or not in the JSP page, not how it's declared in the TLD.\r\n+ *\r\n+ * <p>\r\n+ * If SKIP_BODY is returned the body is not evaluated, and doEndTag() is\r\n+ * invoked.\r\n+ *\r\n+ * <p>\r\n+ * If EVAL_BODY_INCLUDE is returned, and the custom action element is not\r\n+ * empty, setBodyContent() is not invoked,\r\n+ * doInitBody() is not invoked, the body is evaluated and\r\n+ * \"passed through\" to the current out, doAfterBody() is invoked\r\n+ * and then, after zero or more iterations, doEndTag() is invoked.\r\n+ * If the custom action element is empty, only doStart() and \r\n+ * doEndTag() are invoked.\r\n+ *\r\n+ * <p>\r\n+ * If EVAL_BODY_BUFFERED is returned, and the custom action element is not\r\n+ * empty, setBodyContent() is invoked,\r\n+ * doInitBody() is invoked, the body is evaluated, doAfterBody() is\r\n+ * invoked, and then, after zero or more iterations, doEndTag() is invoked.\r\n+ * If the custom action element is empty, only doStart() and doEndTag() \r\n+ * are invoked.\r\n+ */\r\n+\r\n+public interface BodyTag extends IterationTag {\r\n+\r\n+    /**\r\n+     * Deprecated constant that has the same value as EVAL_BODY_BUFFERED\r\n+     * and EVAL_BODY_AGAIN.  This name has been marked as deprecated\r\n+     * to encourage the use of the two different terms, which are much\r\n+     * more descriptive.\r\n+     *\r\n+     * @deprecated\tAs of Java JSP API 1.2, use BodyTag.EVAL_BODY_BUFFERED\r\n+     * or IterationTag.EVAL_BODY_AGAIN.\r\n+     */\r\n+ \r\n+    public final static int EVAL_BODY_TAG = 2;\r\n+\r\n+    /**\r\n+     * Request the creation of new buffer, a BodyContent on which to\r\n+     * evaluate the body of this tag.\r\n+     *\r\n+     * Returned from doStartTag when it implements BodyTag.\r\n+     * This is an illegal return value for doStartTag when the class\r\n+     * does not implement BodyTag.\r\n+     */\r\n+\r\n+    public final static int EVAL_BODY_BUFFERED = 2;\r\n+\r\n+\r\n+    /**\r\n+     * Set the bodyContent property.\r\n+     * This method is invoked by the JSP page implementation object at\r\n+     * most once per action invocation.\r\n+     * This method will be invoked before doInitBody.\r\n+     * This method will not be invoked for empty tags or for non-empty\r\n+     * tags whose doStartTag() method returns SKIP_BODY or EVAL_BODY_INCLUDE.\r\n+     *\r\n+     * <p>\r\n+     * When setBodyContent is invoked, the value of the implicit object out\r\n+     * has already been changed in the pageContext object.  The BodyContent\r\n+     * object passed will have not data on it but may have been reused\r\n+     * (and cleared) from some previous invocation.\r\n+     *\r\n+     * <p>\r\n+     * The BodyContent object is available and with the appropriate content\r\n+     * until after the invocation of the doEndTag method, at which case it\r\n+     * may be reused.\r\n+     *\r\n+     * @param b the BodyContent\r\n+     * @see #doInitBody\r\n+     * @see #doAfterBody\r\n+     */\r\n+\r\n+    void setBodyContent(BodyContent b);\r\n+\r\n+\r\n+    /**\r\n+     * Prepare for evaluation of the body.\r\n+     * This method is invoked by the JSP page implementation object\r\n+     * after setBodyContent and before the first time\r\n+     * the body is to be evaluated.\r\n+     * This method will not be invoked for empty tags or for non-empty\r\n+     * tags whose doStartTag() method returns SKIP_BODY or EVAL_BODY_INCLUDE.\r\n+     *\r\n+     * <p>\r\n+     * The JSP container will resynchronize the values of any AT_BEGIN and\r\n+     * NESTED variables (defined by the associated TagExtraInfo or TLD) after\r\n+     * the invocation of doInitBody().\r\n+     *\r\n+     * @throws JspException if an error occurred while processing this tag\r\n+     * @see #doAfterBody\r\n+     */\r\n+\r\n+    void doInitBody() throws JspException;\r\n+\r\n+}\r"
        },
        {
            "sha": "a9da03d667fc7c7441e8e2178f938109dddd8fdc",
            "filename": "java/javax/servlet/jsp/tagext/BodyTagSupport.java",
            "status": "added",
            "additions": 159,
            "deletions": 0,
            "changes": 159,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FBodyTagSupport.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FBodyTagSupport.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FBodyTagSupport.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,159 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet.jsp.tagext;\r\n+\r\n+import javax.servlet.jsp.JspException;\r\n+import javax.servlet.jsp.JspWriter;\r\n+\r\n+/**\r\n+ * A base class for defining tag handlers implementing BodyTag.\r\n+ *\r\n+ * <p>\r\n+ * The BodyTagSupport class implements the BodyTag interface and adds\r\n+ * additional convenience methods including getter methods for the\r\n+ * bodyContent property and methods to get at the previous out JspWriter.\r\n+ *\r\n+ * <p>\r\n+ * Many tag handlers will extend BodyTagSupport and only redefine a\r\n+ * few methods.\r\n+ */\r\n+\r\n+public class BodyTagSupport extends TagSupport implements BodyTag {\r\n+\r\n+    /**\r\n+     * Default constructor, all subclasses are required to only define\r\n+     * a public constructor with the same signature, and to call the\r\n+     * superclass constructor.\r\n+     *\r\n+     * This constructor is called by the code generated by the JSP\r\n+     * translator.\r\n+     */\r\n+\r\n+    public BodyTagSupport() {\r\n+\tsuper();\r\n+    }\r\n+\r\n+    /**\r\n+     * Default processing of the start tag returning EVAL_BODY_BUFFERED.\r\n+     *\r\n+     * @return EVAL_BODY_BUFFERED\r\n+     * @throws JspException if an error occurred while processing this tag\r\n+     * @see BodyTag#doStartTag\r\n+     */\r\n+ \r\n+    public int doStartTag() throws JspException {\r\n+        return EVAL_BODY_BUFFERED;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Default processing of the end tag returning EVAL_PAGE.\r\n+     *\r\n+     * @return EVAL_PAGE\r\n+     * @throws JspException if an error occurred while processing this tag\r\n+     * @see Tag#doEndTag\r\n+     */\r\n+\r\n+    public int doEndTag() throws JspException {\r\n+\treturn super.doEndTag();\r\n+    }\r\n+\r\n+\r\n+    // Actions related to body evaluation\r\n+\r\n+    /**\r\n+     * Prepare for evaluation of the body: stash the bodyContent away.\r\n+     *\r\n+     * @param b the BodyContent\r\n+     * @see #doAfterBody\r\n+     * @see #doInitBody()\r\n+     * @see BodyTag#setBodyContent\r\n+     */\r\n+\r\n+    public void setBodyContent(BodyContent b) {\r\n+\tthis.bodyContent = b;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Prepare for evaluation of the body just before the first body evaluation:\r\n+     * no action.\r\n+     *\r\n+     * @throws JspException if an error occurred while processing this tag\r\n+     * @see #setBodyContent\r\n+     * @see #doAfterBody\r\n+     * @see BodyTag#doInitBody\r\n+     */\r\n+\r\n+    public void doInitBody() throws JspException {\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * After the body evaluation: do not reevaluate and continue with the page.\r\n+     * By default nothing is done with the bodyContent data (if any).\r\n+     *\r\n+     * @return SKIP_BODY\r\n+     * @throws JspException if an error occurred while processing this tag\r\n+     * @see #doInitBody\r\n+     * @see BodyTag#doAfterBody\r\n+     */\r\n+\r\n+    public int doAfterBody() throws JspException {\r\n+ \treturn SKIP_BODY;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Release state.\r\n+     *\r\n+     * @see Tag#release\r\n+     */\r\n+\r\n+    public void release() {\r\n+\tbodyContent = null;\r\n+\r\n+\tsuper.release();\r\n+    }\r\n+\r\n+    /**\r\n+     * Get current bodyContent.\r\n+     *\r\n+     * @return the body content.\r\n+     */\r\n+    \r\n+    public BodyContent getBodyContent() {\r\n+\treturn bodyContent;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Get surrounding out JspWriter.\r\n+     *\r\n+     * @return the enclosing JspWriter, from the bodyContent.\r\n+     */\r\n+\r\n+    public JspWriter getPreviousOut() {\r\n+\treturn bodyContent.getEnclosingWriter();\r\n+    }\r\n+\r\n+    // protected fields\r\n+\r\n+    /**\r\n+     * The current BodyContent for this BodyTag.\r\n+     */\r\n+    protected BodyContent   bodyContent;\r\n+}\r"
        },
        {
            "sha": "740af78fa2e5f5594f4c8d84879fc1f7656d3e3d",
            "filename": "java/javax/servlet/jsp/tagext/DynamicAttributes.java",
            "status": "added",
            "additions": 51,
            "deletions": 0,
            "changes": 51,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FDynamicAttributes.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FDynamicAttributes.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FDynamicAttributes.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,51 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet.jsp.tagext;\r\n+\r\n+import javax.servlet.jsp.JspException;\r\n+\r\n+/**\r\n+ * For a tag to declare that it accepts dynamic attributes, it must implement\r\n+ * this interface.  The entry for the tag in the Tag Library Descriptor must \r\n+ * also be configured to indicate dynamic attributes are accepted.\r\n+ * <br>\r\n+ * For any attribute that is not declared in the Tag Library Descriptor for\r\n+ * this tag, instead of getting an error at translation time, the \r\n+ * <code>setDynamicAttribute()</code> method is called, with the name and\r\n+ * value of the attribute.  It is the responsibility of the tag to \r\n+ * remember the names and values of the dynamic attributes.\r\n+ *\r\n+ * @since 2.0\r\n+ */\r\n+public interface DynamicAttributes {\r\n+    \r\n+    /**\r\n+     * Called when a tag declared to accept dynamic attributes is passed\r\n+     * an attribute that is not declared in the Tag Library Descriptor.\r\n+     * \r\n+     * @param uri the namespace of the attribute, or null if in the default\r\n+     *     namespace.\r\n+     * @param localName the name of the attribute being set.\r\n+     * @param value the value of the attribute\r\n+     * @throws JspException if the tag handler wishes to\r\n+     *     signal that it does not accept the given attribute.  The \r\n+     *     container must not call doStartTag() or doTag() for this tag.\r\n+     */\r\n+    public void setDynamicAttribute(\r\n+        String uri, String localName, Object value ) \r\n+        throws JspException;\r\n+    \r\n+}\r"
        },
        {
            "sha": "aff078a3393ff859e552c090d2ec84d7674fc8ae",
            "filename": "java/javax/servlet/jsp/tagext/FunctionInfo.java",
            "status": "added",
            "additions": 80,
            "deletions": 0,
            "changes": 80,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FFunctionInfo.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FFunctionInfo.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FFunctionInfo.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,80 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+ \r\n+package javax.servlet.jsp.tagext;\r\n+\r\n+/**\r\n+ * Information for a function in a Tag Library.\r\n+ * This class is instantiated from the Tag Library Descriptor file (TLD)\r\n+ * and is available only at translation time.\r\n+ * \r\n+ * @since 2.0\r\n+ */\r\n+public class FunctionInfo {\r\n+\r\n+    /**\r\n+     * Constructor for FunctionInfo.\r\n+     *\r\n+     * @param name The name of the function\r\n+     * @param klass The class of the function\r\n+     * @param signature The signature of the function\r\n+     */\r\n+\r\n+    public FunctionInfo(String name, String klass, String signature) {\r\n+\r\n+\tthis.name = name;\r\n+        this.functionClass = klass;\r\n+        this.functionSignature = signature;\r\n+    }\r\n+\r\n+    /**\r\n+     * The name of the function.\r\n+     *\r\n+     * @return The name of the function\r\n+     */\r\n+\r\n+    public String getName() {\r\n+\treturn name;\r\n+    }\r\n+\r\n+    /**\r\n+     * The class of the function.\r\n+     *\r\n+     * @return The class of the function\r\n+     */\r\n+\r\n+    public String getFunctionClass() {\r\n+        return functionClass;\r\n+    }\r\n+\r\n+    /**\r\n+     * The signature of the function.\r\n+     *\r\n+     * @return The signature of the function\r\n+     */\r\n+\r\n+    public String getFunctionSignature() {\r\n+        return functionSignature;\r\n+    }\r\n+\r\n+    /*\r\n+     * fields\r\n+     */\r\n+\r\n+    private String name;\r\n+    private String functionClass;\r\n+    private String functionSignature;\r\n+}\r"
        },
        {
            "sha": "cd640ba0cbeb1fc237f42e4026fb4f27665d96c0",
            "filename": "java/javax/servlet/jsp/tagext/IterationTag.java",
            "status": "added",
            "additions": 119,
            "deletions": 0,
            "changes": 119,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FIterationTag.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FIterationTag.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FIterationTag.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,119 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+\r\n+package javax.servlet.jsp.tagext;\r\n+\r\n+import javax.servlet.jsp.*;\r\n+\r\n+/**\r\n+ * The IterationTag interface extends Tag by defining one additional\r\n+ * method that controls the reevaluation of its body.\r\n+ *\r\n+ * <p> A tag handler that implements IterationTag is treated as one that\r\n+ * implements Tag regarding  the doStartTag() and doEndTag() methods.\r\n+ * IterationTag provides a new method: <code>doAfterBody()</code>.\r\n+ *\r\n+ * <p> The doAfterBody() method is invoked after every body evaluation\r\n+ * to control whether the body will be reevaluated or not.  If doAfterBody()\r\n+ * returns IterationTag.EVAL_BODY_AGAIN, then the body will be reevaluated.\r\n+ * If doAfterBody() returns Tag.SKIP_BODY, then the body will be skipped\r\n+ * and doEndTag() will be evaluated instead.\r\n+ *\r\n+ * <p><B>Properties</B>\r\n+ * There are no new properties in addition to those in Tag.\r\n+ *\r\n+ * <p><B>Methods</B>\r\n+ * There is one new methods: doAfterBody().\r\n+ *\r\n+ * <p><B>Lifecycle</B>\r\n+ *\r\n+ * <p> Lifecycle details are described by the transition diagram\r\n+ * below.  Exceptions that are thrown during the computation of\r\n+ * doStartTag(), BODY and doAfterBody() interrupt the execution\r\n+ * sequence and are propagated up the stack, unless the tag handler\r\n+ * implements the TryCatchFinally interface; see that interface for\r\n+ * details.\r\n+ *\r\n+ * <p>\r\n+ * <IMG src=\"doc-files/IterationTagProtocol.gif\"\r\n+ *      alt=\"Lifecycle Details Transition Diagram for IterationTag\"/>\r\n+ *\r\n+ * <p><B>Empty and Non-Empty Action</B>\r\n+ * <p> If the TagLibraryDescriptor file indicates that the action must\r\n+ * always have an empty element body, by a &lt;body-content&gt; entry of \r\n+ * \"empty\", then the doStartTag() method must return SKIP_BODY.\r\n+ *\r\n+ * <p>Note that which methods are invoked after the doStartTag() depends on\r\n+ * both the return value and on if the custom action element is empty\r\n+ * or not in the JSP page, not on how it's declared in the TLD.\r\n+ *\r\n+ * <p>\r\n+ * If SKIP_BODY is returned the body is not evaluated, and then doEndTag()\r\n+ * is invoked.\r\n+ *\r\n+ * <p>\r\n+ * If EVAL_BODY_INCLUDE is returned, and the custom action element is not\r\n+ * empty, the body is evaluated and \"passed through\" to the current out, \r\n+ * then doAfterBody() is invoked and, after zero or more iterations, \r\n+ * doEndTag() is invoked.\r\n+ */\r\n+\r\n+public interface IterationTag extends Tag {\r\n+\r\n+    /**\r\n+     * Request the reevaluation of some body.\r\n+     * Returned from doAfterBody.\r\n+     *\r\n+     * For compatibility with JSP 1.1, the value is carefully selected\r\n+     * to be the same as the, now deprecated, BodyTag.EVAL_BODY_TAG,\r\n+     * \r\n+     */\r\n+ \r\n+    public final static int EVAL_BODY_AGAIN = 2;\r\n+\r\n+    /**\r\n+     * Process body (re)evaluation.  This method is invoked by the\r\n+     * JSP Page implementation object after every evaluation of\r\n+     * the body into the BodyEvaluation object. The method is\r\n+     * not invoked if there is no body evaluation.\r\n+     *\r\n+     * <p>\r\n+     * If doAfterBody returns EVAL_BODY_AGAIN, a new evaluation of the\r\n+     * body will happen (followed by another invocation of doAfterBody).\r\n+     * If doAfterBody returns SKIP_BODY, no more body evaluations will occur,\r\n+     * and the doEndTag method will be invoked.\r\n+     *\r\n+     * <p>\r\n+     * If this tag handler implements BodyTag and doAfterBody returns\r\n+     * SKIP_BODY, the value of out will be restored using the popBody \r\n+     * method in pageContext prior to invoking doEndTag.\r\n+     *\r\n+     * <p>\r\n+     * The method re-invocations may be lead to different actions because\r\n+     * there might have been some changes to shared state, or because\r\n+     * of external computation.\r\n+     *\r\n+     * <p>\r\n+     * The JSP container will resynchronize the values of any AT_BEGIN and\r\n+     * NESTED variables (defined by the associated TagExtraInfo or TLD) after\r\n+     * the invocation of doAfterBody().\r\n+     *\r\n+     * @return whether additional evaluations of the body are desired\r\n+     * @throws JspException if an error occurred while processing this tag\r\n+     */\r\n+\r\n+    int doAfterBody() throws JspException;\r\n+}\r"
        },
        {
            "sha": "ceb5731ecb7eed742828c210e58d6eda4f2c0b19",
            "filename": "java/javax/servlet/jsp/tagext/JspFragment.java",
            "status": "added",
            "additions": 82,
            "deletions": 0,
            "changes": 82,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FJspFragment.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FJspFragment.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FJspFragment.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,82 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+ \r\n+package javax.servlet.jsp.tagext;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.Writer;\r\n+import javax.servlet.jsp.*;\r\n+\r\n+/**\r\n+ * Encapsulates a portion of JSP code in an object that \r\n+ * can be invoked as many times as needed.  JSP Fragments are defined \r\n+ * using JSP syntax as the body of a tag for an invocation to a SimpleTag \r\n+ * handler, or as the body of a &lt;jsp:attribute&gt; standard action\r\n+ * specifying the value of an attribute that is declared as a fragment,\r\n+ * or to be of type JspFragment in the TLD.\r\n+ * <p>\r\n+ * The definition of the JSP fragment must only contain template \r\n+ * text and JSP action elements.  In other words, it must not contain\r\n+ * scriptlets or scriptlet expressions.  At translation time, the \r\n+ * container generates an implementation of the JspFragment abstract class\r\n+ * capable of executing the defined fragment.\r\n+ * <p>\r\n+ * A tag handler can invoke the fragment zero or more times, or \r\n+ * pass it along to other tags, before returning.  To communicate values\r\n+ * to/from a JSP fragment, tag handlers store/retrieve values in \r\n+ * the JspContext associated with the fragment.\r\n+ * <p>\r\n+ * Note that tag library developers and page authors should not generate\r\n+ * JspFragment implementations manually.\r\n+ * <p>\r\n+ * <i>Implementation Note</i>: It is not necessary to generate a \r\n+ * separate class for each fragment.  One possible implementation is \r\n+ * to generate a single helper class for each page that implements \r\n+ * JspFragment. Upon construction, a discriminator can be passed to \r\n+ * select which fragment that instance will execute.\r\n+ *\r\n+ * @since 2.0\r\n+ */\r\n+public abstract class JspFragment {\r\n+\r\n+    /**\r\n+     * Executes the fragment and directs all output to the given Writer,\r\n+     * or the JspWriter returned by the getOut() method of the JspContext\r\n+     * associated with the fragment if out is null.\r\n+     *\r\n+     * @param out The Writer to output the fragment to, or null if \r\n+     *     output should be sent to JspContext.getOut().\r\n+     * @throws javax.servlet.jsp.JspException Thrown if an error occured\r\n+     *     while invoking this fragment.\r\n+     * @throws javax.servlet.jsp.SkipPageException Thrown if the page\r\n+     *     that (either directly or indirectly) invoked the tag handler that\r\n+     *     invoked this fragment is to cease evaluation.  The container\r\n+     *     must throw this exception if a Classic Tag Handler returned\r\n+     *     Tag.SKIP_PAGE or if a Simple Tag Handler threw SkipPageException.\r\n+     * @throws java.io.IOException If there was an error writing to the \r\n+     *     stream.\r\n+     */\r\n+    public abstract void invoke( Writer out )\r\n+        throws JspException, IOException;\r\n+\r\n+    /**\r\n+     * Returns the JspContext that is bound to this JspFragment.\r\n+     *\r\n+     * @return The JspContext used by this fragment at invocation time.\r\n+     */\r\n+    public abstract JspContext getJspContext();\r\n+\r\n+}\r"
        },
        {
            "sha": "221439a46ef9ab98519c13f8646bf557871e0b12",
            "filename": "java/javax/servlet/jsp/tagext/JspIdConsumer.java",
            "status": "added",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FJspIdConsumer.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FJspIdConsumer.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FJspIdConsumer.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,5 @@\n+package javax.servlet.jsp.tagext;\r\n+\r\n+public interface JspIdConsumer {\r\n+    public void setJspId(String jspId);\r\n+}\r"
        },
        {
            "sha": "adfd9b1bc4cfca5092624813fae2229e939da8c7",
            "filename": "java/javax/servlet/jsp/tagext/JspTag.java",
            "status": "added",
            "additions": 25,
            "deletions": 0,
            "changes": 25,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FJspTag.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FJspTag.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FJspTag.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,25 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet.jsp.tagext;\r\n+\r\n+/**\r\n+ * Serves as a base class for Tag and SimpleTag.  \r\n+ * This is mostly for organizational and type-safety purposes.\r\n+ *\r\n+ * @since 2.0\r\n+ */\r\n+public interface JspTag {\r\n+}\r"
        },
        {
            "sha": "c57487b0f0331d2a56c5f93046e840e6f4cc69c1",
            "filename": "java/javax/servlet/jsp/tagext/PageData.java",
            "status": "added",
            "additions": 48,
            "deletions": 0,
            "changes": 48,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FPageData.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FPageData.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FPageData.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,48 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+\r\n+\r\n+package javax.servlet.jsp.tagext;\r\n+\r\n+import java.io.InputStream;\r\n+\r\n+/**\r\n+ * Translation-time information on a JSP page.  The information\r\n+ * corresponds to the XML view of the JSP page.\r\n+ *\r\n+ * <p>\r\n+ * Objects of this type are generated by the JSP translator, e.g.\r\n+ * when being pased to a TagLibraryValidator instance.\r\n+ */\r\n+\r\n+abstract public class PageData {\r\n+\r\n+    /**\r\n+     * Sole constructor. (For invocation by subclass constructors, \r\n+     * typically implicit.)\r\n+     */\r\n+    public PageData() {\r\n+    }\r\n+    \r\n+    /**\r\n+     * Returns an input stream on the XML view of a JSP page.\r\n+     * The stream is encoded in UTF-8.  Recall tht the XML view of a \r\n+     * JSP page has the include directives expanded.\r\n+     * \r\n+     * @return An input stream on the document.\r\n+     */\r\n+   abstract public InputStream getInputStream();\r\n+}\r"
        },
        {
            "sha": "d608ba201435a30275e4007faaa65a428a6d92db",
            "filename": "java/javax/servlet/jsp/tagext/SimpleTag.java",
            "status": "added",
            "additions": 139,
            "deletions": 0,
            "changes": 139,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FSimpleTag.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FSimpleTag.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FSimpleTag.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,139 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet.jsp.tagext;\r\n+\r\n+import javax.servlet.jsp.JspContext;\r\n+\r\n+/**\r\n+ * Interface for defining Simple Tag Handlers.\r\n+ * \r\n+ * <p>Simple Tag Handlers differ from Classic Tag Handlers in that instead \r\n+ * of supporting <code>doStartTag()</code> and <code>doEndTag()</code>, \r\n+ * the <code>SimpleTag</code> interface provides a simple \r\n+ * <code>doTag()</code> method, which is called once and only once for any \r\n+ * given tag invocation.  All tag logic, iteration, body evaluations, etc. \r\n+ * are to be performed in this single method.  Thus, simple tag handlers \r\n+ * have the equivalent power of <code>BodyTag</code>, but with a much \r\n+ * simpler lifecycle and interface.</p>\r\n+ *\r\n+ * <p>To support body content, the <code>setJspBody()</code> \r\n+ * method is provided.  The container invokes the <code>setJspBody()</code> \r\n+ * method with a <code>JspFragment</code> object encapsulating the body of \r\n+ * the tag.  The tag handler implementation can call \r\n+ * <code>invoke()</code> on that fragment to evaluate the body as\r\n+ * many times as it needs.</p>\r\n+ *\r\n+ * <p>A SimpleTag handler must have a public no-args constructor.  Most\r\n+ * SimpleTag handlers should extend SimpleTagSupport.</p>\r\n+ * \r\n+ * <p><b>Lifecycle</b></p>\r\n+ *\r\n+ * <p>The following is a non-normative, brief overview of the \r\n+ * SimpleTag lifecycle.  Refer to the JSP Specification for details.</p>\r\n+ *\r\n+ * <ol>\r\n+ *   <li>A new tag handler instance is created each time by the container \r\n+ *       by calling the provided zero-args constructor.  Unlike classic\r\n+ *       tag handlers, simple tag handlers are never cached and reused by\r\n+ *       the JSP container.</li>\r\n+ *   <li>The <code>setJspContext()</code> and <code>setParent()</code> \r\n+ *       methods are called by the container.  The <code>setParent()</code>\r\n+ *       method is only called if the element is nested within another tag \r\n+ *       invocation.</li>\r\n+ *   <li>The setters for each attribute defined for this tag are called\r\n+ *       by the container.</li>\r\n+ *   <li>If a body exists, the <code>setJspBody()</code> method is called \r\n+ *       by the container to set the body of this tag, as a \r\n+ *       <code>JspFragment</code>.  If the action element is empty in\r\n+ *       the page, this method is not called at all.</li>\r\n+ *   <li>The <code>doTag()</code> method is called by the container.  All\r\n+ *       tag logic, iteration, body evaluations, etc. occur in this \r\n+ *       method.</li>\r\n+ *   <li>The <code>doTag()</code> method returns and all variables are\r\n+ *       synchronized.</li>\r\n+ * </ol>\r\n+ * \r\n+ * @see SimpleTagSupport\r\n+ * @since 2.0\r\n+ */\r\n+public interface SimpleTag extends JspTag {\r\n+    \r\n+    /** \r\n+     * Called by the container to invoke this tag.\r\n+     * The implementation of this method is provided by the tag library\r\n+     * developer, and handles all tag processing, body iteration, etc.\r\n+     *\r\n+     * <p>\r\n+     * The JSP container will resynchronize any AT_BEGIN and AT_END\r\n+     * variables (defined by the associated tag file, TagExtraInfo, or TLD)\r\n+     * after the invocation of doTag().\r\n+     * \r\n+     * @throws javax.servlet.jsp.JspException If an error occurred \r\n+     *     while processing this tag.\r\n+     * @throws javax.servlet.jsp.SkipPageException If the page that\r\n+     *     (either directly or indirectly) invoked this tag is to\r\n+     *     cease evaluation.  A Simple Tag Handler generated from a \r\n+     *     tag file must throw this exception if an invoked Classic \r\n+     *     Tag Handler returned SKIP_PAGE or if an invoked Simple\r\n+     *     Tag Handler threw SkipPageException or if an invoked Jsp Fragment\r\n+     *     threw a SkipPageException.\r\n+     * @throws java.io.IOException If there was an error writing to the\r\n+     *     output stream.\r\n+     */ \r\n+    public void doTag() \r\n+        throws javax.servlet.jsp.JspException, java.io.IOException;\r\n+    \r\n+    /**\r\n+     * Sets the parent of this tag, for collaboration purposes.\r\n+     * <p>\r\n+     * The container invokes this method only if this tag invocation is \r\n+     * nested within another tag invocation.\r\n+     *\r\n+     * @param parent the tag that encloses this tag\r\n+     */\r\n+    public void setParent( JspTag parent );\r\n+    \r\n+    /**\r\n+     * Returns the parent of this tag, for collaboration purposes.\r\n+     *\r\n+     * @return the parent of this tag\r\n+     */ \r\n+    public JspTag getParent();\r\n+    \r\n+    /**\r\n+     * Called by the container to provide this tag handler with\r\n+     * the <code>JspContext</code> for this invocation.\r\n+     * An implementation should save this value.\r\n+     * \r\n+     * @param pc the page context for this invocation\r\n+     * @see Tag#setPageContext\r\n+     */\r\n+    public void setJspContext( JspContext pc );\r\n+                \r\n+    /** \r\n+     * Provides the body of this tag as a JspFragment object, able to be \r\n+     * invoked zero or more times by the tag handler. \r\n+     * <p>\r\n+     * This method is invoked by the JSP page implementation \r\n+     * object prior to <code>doTag()</code>.  If the action element is\r\n+     * empty in the page, this method is not called at all.\r\n+     * \r\n+     * @param jspBody The fragment encapsulating the body of this tag.\r\n+     */ \r\n+    public void setJspBody( JspFragment jspBody );\r\n+\r\n+    \r\n+}\r"
        },
        {
            "sha": "0264cc57d6340851bdc56ad1a5ecb5d92a8255c6",
            "filename": "java/javax/servlet/jsp/tagext/SimpleTagSupport.java",
            "status": "added",
            "additions": 212,
            "deletions": 0,
            "changes": 212,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FSimpleTagSupport.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FSimpleTagSupport.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FSimpleTagSupport.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,212 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet.jsp.tagext;\r\n+\r\n+import javax.servlet.jsp.JspContext;\r\n+import javax.servlet.jsp.JspException;\r\n+import java.io.IOException;\r\n+\r\n+/**\r\n+ * A base class for defining tag handlers implementing SimpleTag.\r\n+ * <p>\r\n+ * The SimpleTagSupport class is a utility class intended to be used\r\n+ * as the base class for new simple tag handlers.  The SimpleTagSupport\r\n+ * class implements the SimpleTag interface and adds additional\r\n+ * convenience methods including getter methods for the properties in\r\n+ * SimpleTag.\r\n+ *\r\n+ * @since 2.0\r\n+ */\r\n+public class SimpleTagSupport \r\n+    implements SimpleTag\r\n+{\r\n+    /** Reference to the enclosing tag. */\r\n+    private JspTag parentTag;\r\n+    \r\n+    /** The JSP context for the upcoming tag invocation. */\r\n+    private JspContext jspContext;\r\n+    \r\n+    /** The body of the tag. */\r\n+    private JspFragment jspBody;\r\n+    \r\n+    /**\r\n+     * Sole constructor. (For invocation by subclass constructors, \r\n+     * typically implicit.)\r\n+     */\r\n+    public SimpleTagSupport() {\r\n+    }\r\n+    \r\n+    /** \r\n+     * Default processing of the tag does nothing.\r\n+     *\r\n+     * @throws JspException Subclasses can throw JspException to indicate\r\n+     *     an error occurred while processing this tag.\r\n+     * @throws javax.servlet.jsp.SkipPageException If the page that\r\n+     *     (either directly or indirectly) invoked this tag is to\r\n+     *     cease evaluation.  A Simple Tag Handler generated from a \r\n+     *     tag file must throw this exception if an invoked Classic \r\n+     *     Tag Handler returned SKIP_PAGE or if an invoked Simple\r\n+     *     Tag Handler threw SkipPageException or if an invoked Jsp Fragment\r\n+     *     threw a SkipPageException.\r\n+     * @throws IOException Subclasses can throw IOException if there was\r\n+     *     an error writing to the output stream\r\n+     * @see SimpleTag#doTag()\r\n+     */ \r\n+    public void doTag() \r\n+        throws JspException, IOException\r\n+    {\r\n+    }\r\n+    \r\n+    /**\r\n+     * Sets the parent of this tag, for collaboration purposes.\r\n+     * <p>\r\n+     * The container invokes this method only if this tag invocation is\r\n+     * nested within another tag invocation.\r\n+     *\r\n+     * @param parent the tag that encloses this tag\r\n+     */\r\n+    public void setParent( JspTag parent ) {\r\n+        this.parentTag = parent;\r\n+    }\r\n+    \r\n+    /**\r\n+     * Returns the parent of this tag, for collaboration purposes.\r\n+     *\r\n+     * @return the parent of this tag\r\n+     */ \r\n+    public JspTag getParent() {\r\n+        return this.parentTag;\r\n+    }\r\n+    \r\n+    /**\r\n+     * Stores the provided JSP context in the private jspContext field.\r\n+     * Subclasses can access the <code>JspContext</code> via \r\n+     * <code>getJspContext()</code>.\r\n+     * \r\n+     * @param pc the page context for this invocation\r\n+     * @see SimpleTag#setJspContext\r\n+     */\r\n+    public void setJspContext( JspContext pc ) {\r\n+        this.jspContext = pc;\r\n+    }\r\n+    \r\n+    /**\r\n+     * Returns the page context passed in by the container via \r\n+     * setJspContext.\r\n+     *\r\n+     * @return the page context for this invocation\r\n+     */\r\n+    protected JspContext getJspContext() {\r\n+        return this.jspContext;\r\n+    }\r\n+                \r\n+    /** \r\n+     * Stores the provided JspFragment.\r\n+     *\r\n+     * @param jspBody The fragment encapsulating the body of this tag.\r\n+     *     If the action element is empty in the page, this method is \r\n+     *     not called at all.\r\n+     * @see SimpleTag#setJspBody\r\n+     */ \r\n+    public void setJspBody( JspFragment jspBody ) {\r\n+        this.jspBody = jspBody;\r\n+    }\r\n+    \r\n+    /**\r\n+     * Returns the body passed in by the container via setJspBody.\r\n+     *\r\n+     * @return the fragment encapsulating the body of this tag, or\r\n+     *    null if the action element is empty in the page.\r\n+     */\r\n+    protected JspFragment getJspBody() {\r\n+        return this.jspBody;\r\n+    }\r\n+\r\n+    /**\r\n+     * Find the instance of a given class type that is closest to a given\r\n+     * instance.\r\n+     * This method uses the getParent method from the Tag and/or SimpleTag\r\n+     * interfaces.  This method is used for coordination among \r\n+     * cooperating tags.\r\n+     *\r\n+     * <p> For every instance of TagAdapter\r\n+     * encountered while traversing the ancestors, the tag handler returned by\r\n+     * <tt>TagAdapter.getAdaptee()</tt> - instead of the TagAdpater itself -\r\n+     * is compared to <tt>klass</tt>. If the tag handler matches, it - and\r\n+     * not its TagAdapter - is returned.\r\n+     *\r\n+     * <p>\r\n+     * The current version of the specification only provides one formal\r\n+     * way of indicating the observable type of a tag handler: its\r\n+     * tag handler implementation class, described in the tag-class\r\n+     * subelement of the tag element.  This is extended in an\r\n+     * informal manner by allowing the tag library author to\r\n+     * indicate in the description subelement an observable type.\r\n+     * The type should be a subtype of the tag handler implementation\r\n+     * class or void.\r\n+     * This addititional constraint can be exploited by a\r\n+     * specialized container that knows about that specific tag library,\r\n+     * as in the case of the JSP standard tag library.\r\n+     *\r\n+     * <p>\r\n+     * When a tag library author provides information on the\r\n+     * observable type of a tag handler, client programmatic code\r\n+     * should adhere to that constraint.  Specifically, the Class\r\n+     * passed to findAncestorWithClass should be a subtype of the\r\n+     * observable type.\r\n+     * \r\n+     *\r\n+     * @param from The instance from where to start looking.\r\n+     * @param klass The subclass of JspTag or interface to be matched\r\n+     * @return the nearest ancestor that implements the interface\r\n+     * or is an instance of the class specified\r\n+     */\r\n+    public static final JspTag findAncestorWithClass(\r\n+\tJspTag from, Class klass) \r\n+    {\r\n+\tboolean isInterface = false;\r\n+\r\n+\tif (from == null || klass == null\r\n+\t        || (!JspTag.class.isAssignableFrom(klass)\r\n+\t\t    && !(isInterface = klass.isInterface()))) {\r\n+\t    return null;\r\n+\t}\r\n+\r\n+\tfor (;;) {\r\n+\t    JspTag parent = null;\r\n+\t    if( from instanceof SimpleTag ) {\r\n+\t\tparent = ((SimpleTag)from).getParent();\r\n+\t    }\r\n+\t    else if( from instanceof Tag ) {\r\n+\t\tparent = ((Tag)from).getParent();\r\n+\t    }\r\n+\t    if (parent == null) {\r\n+\t\treturn null;\r\n+\t    }\r\n+\r\n+\t    if (parent instanceof TagAdapter) {\r\n+\t\tparent = ((TagAdapter) parent).getAdaptee();\r\n+\t    }\r\n+\r\n+\t    if ((isInterface && klass.isInstance(parent))\r\n+\t\t    || klass.isAssignableFrom(parent.getClass())) {\r\n+\t\treturn parent;\r\n+\t    }\r\n+\r\n+\t    from = parent;\r\n+\t}\r\n+    }    \r\n+}\r"
        },
        {
            "sha": "7abf782e81772f1cb5db1b8243d7b2f0139c1b3e",
            "filename": "java/javax/servlet/jsp/tagext/Tag.java",
            "status": "added",
            "additions": 262,
            "deletions": 0,
            "changes": 262,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTag.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTag.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTag.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,262 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+ \r\n+package javax.servlet.jsp.tagext;\r\n+\r\n+import javax.servlet.jsp.*;\r\n+\r\n+\r\n+/**\r\n+ * The interface of a classic tag handler that does not want to manipulate \r\n+ * its body.  The Tag interface defines the basic protocol between a Tag \r\n+ * handler and JSP page implementation class.  It defines the life cycle \r\n+ * and the methods to be invoked at start and end tag.\r\n+ *\r\n+ * <p><B>Properties</B></p>\r\n+ *\r\n+ * <p>The Tag interface specifies the setter and getter methods for the core\r\n+ * pageContext and parent properties.</p>\r\n+ *\r\n+ * <p>The JSP page implementation object invokes setPageContext and\r\n+ * setParent, in that order, before invoking doStartTag() or doEndTag().</p>\r\n+ *\r\n+ * <p><B>Methods</B></p>\r\n+ *\r\n+ * <p>There are two main actions: doStartTag and doEndTag.  Once all\r\n+ * appropriate properties have been initialized, the doStartTag and\r\n+ * doEndTag methods can be invoked on the tag handler.  Between these\r\n+ * invocations, the tag handler is assumed to hold a state that must\r\n+ * be preserved.  After the doEndTag invocation, the tag handler is\r\n+ * available for further invocations (and it is expected to have\r\n+ * retained its properties).</p>\r\n+ *\r\n+ * <p><B>Lifecycle</B></p>\r\n+ *\r\n+ * <p>Lifecycle details are described by the transition diagram below,\r\n+ * with the following comments:\r\n+ * <ul>\r\n+ * <li> [1] This transition is intended to be for releasing long-term data.\r\n+ * no guarantees are assumed on whether any properties have been retained\r\n+ * or not.\r\n+ * <li> [2] This transition happens if and only if the tag ends normally\r\n+ * without raising an exception\r\n+ * <li> [3] Some setters may be called again before a tag handler is \r\n+ * reused.  For instance, <code>setParent()</code> is called if it's \r\n+ * reused within the same page but at a different level, \r\n+ * <code>setPageContext()</code> is called if it's used in another page, \r\n+ * and attribute setters are called if the values differ or are expressed \r\n+ * as request-time attribute values.\r\n+ * <li> Check the TryCatchFinally interface for additional details related\r\n+ * to exception handling and resource management.\r\n+ * </ul></p>\r\n+ *\r\n+ * <IMG src=\"doc-files/TagProtocol.gif\"\r\n+ *      alt=\"Lifecycle Details Transition Diagram for Tag\"/>\r\n+ * \r\n+ * <p>Once all invocations on the tag handler\r\n+ * are completed, the release method is invoked on it.  Once a release\r\n+ * method is invoked <em>all</em> properties, including parent and\r\n+ * pageContext, are assumed to have been reset to an unspecified value.\r\n+ * The page compiler guarantees that release() will be invoked on the Tag\r\n+ * handler before the handler is released to the GC.</p>\r\n+ *\r\n+ * <p><B>Empty and Non-Empty Action</B></p>\r\n+ * <p>If the TagLibraryDescriptor file indicates that the action must\r\n+ * always have an empty action, by an &lt;body-content&gt; entry of \"empty\",\r\n+ * then the doStartTag() method must return SKIP_BODY.</p>\r\n+ *\r\n+ * <p>Otherwise, the doStartTag() method may return SKIP_BODY or\r\n+ * EVAL_BODY_INCLUDE.</p>\r\n+ *\r\n+ * <p>If SKIP_BODY is returned the body, if present, is not evaluated.</p>\r\n+ * \r\n+ * <p>If EVAL_BODY_INCLUDE is returned, the body is evaluated and\r\n+ * \"passed through\" to the current out.</p>\r\n+*/\r\n+\r\n+public interface Tag extends JspTag {\r\n+\r\n+    /**\r\n+     * Skip body evaluation.\r\n+     * Valid return value for doStartTag and doAfterBody.\r\n+     */\r\n+ \r\n+    public final static int SKIP_BODY = 0;\r\n+ \r\n+    /**\r\n+     * Evaluate body into existing out stream.\r\n+     * Valid return value for doStartTag.\r\n+     */\r\n+ \r\n+    public final static int EVAL_BODY_INCLUDE = 1;\r\n+\r\n+    /**\r\n+     * Skip the rest of the page.\r\n+     * Valid return value for doEndTag.\r\n+     */\r\n+\r\n+    public final static int SKIP_PAGE = 5;\r\n+\r\n+    /**\r\n+     * Continue evaluating the page.\r\n+     * Valid return value for doEndTag().\r\n+     */\r\n+\r\n+    public final static int EVAL_PAGE = 6;\r\n+\r\n+    // Setters for Tag handler data\r\n+\r\n+\r\n+    /**\r\n+     * Set the current page context.\r\n+     * This method is invoked by the JSP page implementation object\r\n+     * prior to doStartTag().\r\n+     * <p>\r\n+     * This value is *not* reset by doEndTag() and must be explicitly reset\r\n+     * by a page implementation if it changes between calls to doStartTag().\r\n+     *\r\n+     * @param pc The page context for this tag handler.\r\n+     */\r\n+\r\n+    void setPageContext(PageContext pc);\r\n+\r\n+\r\n+    /**\r\n+     * Set the parent (closest enclosing tag handler) of this tag handler.\r\n+     * Invoked by the JSP page implementation object prior to doStartTag().\r\n+     * <p>\r\n+     * This value is *not* reset by doEndTag() and must be explicitly reset\r\n+     * by a page implementation.\r\n+     *\r\n+     * @param t The parent tag, or null.\r\n+     */\r\n+\r\n+\r\n+    void setParent(Tag t);\r\n+\r\n+\r\n+    /**\r\n+     * Get the parent (closest enclosing tag handler) for this tag handler.\r\n+     *\r\n+     * <p>\r\n+     * The getParent() method can be used to navigate the nested tag\r\n+     * handler structure at runtime for cooperation among custom actions;\r\n+     * for example, the findAncestorWithClass() method in TagSupport\r\n+     * provides a convenient way of doing this.\r\n+     *\r\n+     * <p>\r\n+     * The current version of the specification only provides one formal\r\n+     * way of indicating the observable type of a tag handler: its\r\n+     * tag handler implementation class, described in the tag-class\r\n+     * subelement of the tag element.  This is extended in an\r\n+     * informal manner by allowing the tag library author to\r\n+     * indicate in the description subelement an observable type.\r\n+     * The type should be a subtype of the tag handler implementation\r\n+     * class or void.\r\n+     * This addititional constraint can be exploited by a\r\n+     * specialized container that knows about that specific tag library,\r\n+     * as in the case of the JSP standard tag library.\r\n+     *\r\n+     * @return the current parent, or null if none.\r\n+     * @see TagSupport#findAncestorWithClass\r\n+     */\r\n+\r\n+    Tag getParent();\r\n+\r\n+\r\n+    // Actions for basic start/end processing.\r\n+\r\n+\r\n+    /**\r\n+     * Process the start tag for this instance.\r\n+     * This method is invoked by the JSP page implementation object.\r\n+     *\r\n+     * <p>\r\n+     * The doStartTag method assumes that the properties pageContext and\r\n+     * parent have been set. It also assumes that any properties exposed as\r\n+     * attributes have been set too.  When this method is invoked, the body\r\n+     * has not yet been evaluated.\r\n+     *\r\n+     * <p>\r\n+     * This method returns Tag.EVAL_BODY_INCLUDE or\r\n+     * BodyTag.EVAL_BODY_BUFFERED to indicate\r\n+     * that the body of the action should be evaluated or SKIP_BODY to\r\n+     * indicate otherwise.\r\n+     *\r\n+     * <p>\r\n+     * When a Tag returns EVAL_BODY_INCLUDE the result of evaluating\r\n+     * the body (if any) is included into the current \"out\" JspWriter as it\r\n+     * happens and then doEndTag() is invoked.\r\n+     *\r\n+     * <p>\r\n+     * BodyTag.EVAL_BODY_BUFFERED is only valid  if the tag handler\r\n+     * implements BodyTag.\r\n+     *\r\n+     * <p>\r\n+     * The JSP container will resynchronize the values of any AT_BEGIN and\r\n+     * NESTED variables (defined by the associated TagExtraInfo or TLD)\r\n+     * after the invocation of doStartTag(), except for a tag handler\r\n+     * implementing BodyTag whose doStartTag() method returns\r\n+     * BodyTag.EVAL_BODY_BUFFERED.\r\n+     *\r\n+     * @return EVAL_BODY_INCLUDE if the tag wants to process body, SKIP_BODY \r\n+     *     if it does not want to process it.\r\n+     * @throws JspException if an error occurred while processing this tag\r\n+     * @see BodyTag\r\n+     */\r\n+ \r\n+    int doStartTag() throws JspException;\r\n+ \r\n+\r\n+    /**\r\n+     * Process the end tag for this instance.\r\n+     * This method is invoked by the JSP page implementation object\r\n+     * on all Tag handlers.\r\n+     *\r\n+     * <p>\r\n+     * This method will be called after returning from doStartTag. The\r\n+     * body of the action may or may not have been evaluated, depending on\r\n+     * the return value of doStartTag.\r\n+     *\r\n+     * <p>\r\n+     * If this method returns EVAL_PAGE, the rest of the page continues\r\n+     * to be evaluated.  If this method returns SKIP_PAGE, the rest of\r\n+     * the page is not evaluated, the request is completed, and \r\n+     * the doEndTag() methods of enclosing tags are not invoked.  If this\r\n+     * request was forwarded or included from another page (or Servlet),\r\n+     * only the current page evaluation is stopped.\r\n+     *\r\n+     * <p>\r\n+     * The JSP container will resynchronize the values of any AT_BEGIN and\r\n+     * AT_END variables (defined by the associated TagExtraInfo or TLD)\r\n+     * after the invocation of doEndTag().\r\n+     *\r\n+     * @return indication of whether to continue evaluating the JSP page.\r\n+     * @throws JspException if an error occurred while processing this tag\r\n+     */\r\n+\r\n+    int doEndTag() throws JspException;\r\n+\r\n+    /**\r\n+     * Called on a Tag handler to release state.\r\n+     * The page compiler guarantees that JSP page implementation\r\n+     * objects will invoke this method on all tag handlers,\r\n+     * but there may be multiple invocations on doStartTag and doEndTag in between.\r\n+     */\r\n+\r\n+    void release();\r\n+\r\n+}\r"
        },
        {
            "sha": "4b375a169e55b7ff1ae8e000b846ab86910cab44",
            "filename": "java/javax/servlet/jsp/tagext/TagAdapter.java",
            "status": "added",
            "additions": 158,
            "deletions": 0,
            "changes": 158,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagAdapter.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagAdapter.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagAdapter.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,158 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+ \r\n+package javax.servlet.jsp.tagext;\r\n+\r\n+import javax.servlet.jsp.*;\r\n+\r\n+\r\n+/**\r\n+ * Wraps any SimpleTag and exposes it using a Tag interface.  This is used\r\n+ * to allow collaboration between classic Tag handlers and SimpleTag\r\n+ * handlers.\r\n+ * <p>\r\n+ * Because SimpleTag does not extend Tag, and because Tag.setParent()\r\n+ * only accepts a Tag instance, a classic tag handler (one\r\n+ * that implements Tag) cannot have a SimpleTag as its parent.  To remedy\r\n+ * this, a TagAdapter is created to wrap the SimpleTag parent, and the\r\n+ * adapter is passed to setParent() instead.  A classic Tag Handler can\r\n+ * call getAdaptee() to retrieve the encapsulated SimpleTag instance.\r\n+ *\r\n+ * @since 2.0\r\n+ */\r\n+public class TagAdapter \r\n+    implements Tag\r\n+{\r\n+    /** The simple tag that's being adapted. */\r\n+    private SimpleTag simpleTagAdaptee;\r\n+\r\n+    /** The parent, of this tag, converted (if necessary) to be of type Tag. */\r\n+    private Tag parent;\r\n+\r\n+    // Flag indicating whether we have already determined the parent\r\n+    private boolean parentDetermined;\r\n+\r\n+    /**\r\n+     * Creates a new TagAdapter that wraps the given SimpleTag and \r\n+     * returns the parent tag when getParent() is called.\r\n+     *\r\n+     * @param adaptee The SimpleTag being adapted as a Tag.\r\n+     */\r\n+    public TagAdapter( SimpleTag adaptee ) {\r\n+        if( adaptee == null ) {\r\n+\t    // Cannot wrap a null adaptee.\r\n+\t    throw new IllegalArgumentException();\r\n+        }\r\n+        this.simpleTagAdaptee = adaptee;\r\n+    }\r\n+    \r\n+    /**\r\n+     * Must not be called.\r\n+     *\r\n+     * @param pc ignored.\r\n+     * @throws UnsupportedOperationException Must not be called\r\n+     */\r\n+    public void setPageContext(PageContext pc) {\r\n+        throw new UnsupportedOperationException( \r\n+            \"Illegal to invoke setPageContext() on TagAdapter wrapper\" );\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Must not be called.  The parent of this tag is always \r\n+     * getAdaptee().getParent().\r\n+     *\r\n+     * @param parentTag ignored.\r\n+     * @throws UnsupportedOperationException Must not be called.\r\n+     */\r\n+    public void setParent( Tag parentTag ) {\r\n+        throw new UnsupportedOperationException( \r\n+            \"Illegal to invoke setParent() on TagAdapter wrapper\" );\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Returns the parent of this tag, which is always\r\n+     * getAdaptee().getParent().  \r\n+     *\r\n+     * This will either be the enclosing Tag (if getAdaptee().getParent()\r\n+     * implements Tag), or an adapter to the enclosing Tag (if \r\n+     * getAdaptee().getParent() does not implement Tag).\r\n+     *\r\n+     * @return The parent of the tag being adapted.\r\n+     */\r\n+    public Tag getParent() {\r\n+\tif (!parentDetermined) {\r\n+\t    JspTag adapteeParent = simpleTagAdaptee.getParent();\r\n+\t    if (adapteeParent != null) {\r\n+\t\tif (adapteeParent instanceof Tag) {\r\n+\t\t    this.parent = (Tag) adapteeParent;\r\n+\t\t} else {\r\n+\t\t    // Must be SimpleTag - no other types defined.\r\n+\t\t    this.parent = new TagAdapter((SimpleTag) adapteeParent);\r\n+\t\t}\r\n+\t    }\r\n+\t    parentDetermined = true;\r\n+\t}\r\n+\r\n+\treturn this.parent;\r\n+    }\r\n+    \r\n+    /**\r\n+     * Gets the tag that is being adapted to the Tag interface.\r\n+     * This should be an instance of SimpleTag in JSP 2.0, but room\r\n+     * is left for other kinds of tags in future spec versions.\r\n+     *\r\n+     * @return the tag that is being adapted\r\n+     */\r\n+    public JspTag getAdaptee() {\r\n+        return this.simpleTagAdaptee;\r\n+    }\r\n+\r\n+    /**\r\n+     * Must not be called.\r\n+     *\r\n+     * @return always throws UnsupportedOperationException\r\n+     * @throws UnsupportedOperationException Must not be called\r\n+     * @throws JspException never thrown\r\n+     */\r\n+    public int doStartTag() throws JspException {\r\n+        throw new UnsupportedOperationException( \r\n+            \"Illegal to invoke doStartTag() on TagAdapter wrapper\" );\r\n+    }\r\n+ \r\n+    /**\r\n+     * Must not be called.\r\n+     *\r\n+     * @return always throws UnsupportedOperationException\r\n+     * @throws UnsupportedOperationException Must not be called\r\n+     * @throws JspException never thrown\r\n+     */\r\n+    public int doEndTag() throws JspException {\r\n+        throw new UnsupportedOperationException( \r\n+            \"Illegal to invoke doEndTag() on TagAdapter wrapper\" );\r\n+    }\r\n+\r\n+    /**\r\n+     * Must not be called.\r\n+     *\r\n+     * @throws UnsupportedOperationException Must not be called\r\n+     */\r\n+    public void release() {\r\n+        throw new UnsupportedOperationException( \r\n+            \"Illegal to invoke release() on TagAdapter wrapper\" );\r\n+    }\r\n+}\r"
        },
        {
            "sha": "05a76976b987b23422cd9698a20327b2763334c9",
            "filename": "java/javax/servlet/jsp/tagext/TagAttributeInfo.java",
            "status": "added",
            "additions": 234,
            "deletions": 0,
            "changes": 234,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagAttributeInfo.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagAttributeInfo.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagAttributeInfo.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,234 @@\n+/*\r\n+ * Copyright 2004 The Apache Software Foundation\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package javax.servlet.jsp.tagext;\r\n+\r\n+/**\r\n+ * Information on the attributes of a Tag, available at translation time. This\r\n+ * class is instantiated from the Tag Library Descriptor file (TLD).\r\n+ * \r\n+ * <p>\r\n+ * Only the information needed to generate code is included here. Other\r\n+ * information like SCHEMA for validation belongs elsewhere.\r\n+ */\r\n+\r\n+public class TagAttributeInfo {\r\n+    /**\r\n+     * \"id\" is wired in to be ID. There is no real benefit in having it be\r\n+     * something else IDREFs are not handled any differently.\r\n+     */\r\n+\r\n+    public static final String ID = \"id\";\r\n+\r\n+    /**\r\n+     * Constructor for TagAttributeInfo. This class is to be instantiated only\r\n+     * from the TagLibrary code under request from some JSP code that is parsing\r\n+     * a TLD (Tag Library Descriptor).\r\n+     * \r\n+     * @param name\r\n+     *            The name of the attribute.\r\n+     * @param required\r\n+     *            If this attribute is required in tag instances.\r\n+     * @param type\r\n+     *            The name of the type of the attribute.\r\n+     * @param reqTime\r\n+     *            Whether this attribute holds a request-time Attribute.\r\n+     */\r\n+\r\n+    public TagAttributeInfo(String name, boolean required, String type,\r\n+            boolean reqTime) {\r\n+        this.name = name;\r\n+        this.required = required;\r\n+        this.type = type;\r\n+        this.reqTime = reqTime;\r\n+    }\r\n+\r\n+    /**\r\n+     * JSP 2.0 Constructor for TagAttributeInfo. This class is to be\r\n+     * instantiated only from the TagLibrary code under request from some JSP\r\n+     * code that is parsing a TLD (Tag Library Descriptor).\r\n+     * \r\n+     * @param name\r\n+     *            The name of the attribute.\r\n+     * @param required\r\n+     *            If this attribute is required in tag instances.\r\n+     * @param type\r\n+     *            The name of the type of the attribute.\r\n+     * @param reqTime\r\n+     *            Whether this attribute holds a request-time Attribute.\r\n+     * @param fragment\r\n+     *            Whether this attribute is of type JspFragment\r\n+     * \r\n+     * @since 2.0\r\n+     */\r\n+\r\n+    public TagAttributeInfo(String name, boolean required, String type,\r\n+            boolean reqTime, boolean fragment) {\r\n+        this(name, required, type, reqTime);\r\n+        this.fragment = fragment;\r\n+    }\r\n+\r\n+    /**\r\n+     * @since JSP 2.1\r\n+     */\r\n+    public TagAttributeInfo(String name, boolean required, String type,\r\n+            boolean reqTime, boolean fragment, String description,\r\n+            boolean deferredValue, boolean deferredMethod,\r\n+            String expectedTypeName, String methodSignature) {\r\n+        this(name, required, type, reqTime, fragment);\r\n+        this.description = description;\r\n+        this.deferredValue = deferredValue;\r\n+        this.deferredMethod = deferredMethod;\r\n+        this.expectedTypeName = expectedTypeName;\r\n+        this.methodSignature = methodSignature;\r\n+    }\r\n+\r\n+    /**\r\n+     * The name of this attribute.\r\n+     * \r\n+     * @return the name of the attribute\r\n+     */\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    /**\r\n+     * The type (as a String) of this attribute.\r\n+     * \r\n+     * @return the type of the attribute\r\n+     */\r\n+\r\n+    public String getTypeName() {\r\n+        return type;\r\n+    }\r\n+\r\n+    /**\r\n+     * Whether this attribute can hold a request-time value.\r\n+     * \r\n+     * @return if the attribute can hold a request-time value.\r\n+     */\r\n+\r\n+    public boolean canBeRequestTime() {\r\n+        return reqTime;\r\n+    }\r\n+\r\n+    /**\r\n+     * Whether this attribute is required.\r\n+     * \r\n+     * @return if the attribute is required.\r\n+     */\r\n+    public boolean isRequired() {\r\n+        return required;\r\n+    }\r\n+\r\n+    /**\r\n+     * Convenience static method that goes through an array of TagAttributeInfo\r\n+     * objects and looks for \"id\".\r\n+     * \r\n+     * @param a\r\n+     *            An array of TagAttributeInfo\r\n+     * @return The TagAttributeInfo reference with name \"id\"\r\n+     */\r\n+    public static TagAttributeInfo getIdAttribute(TagAttributeInfo a[]) {\r\n+        for (int i = 0; i < a.length; i++) {\r\n+            if (a[i].getName().equals(ID)) {\r\n+                return a[i];\r\n+            }\r\n+        }\r\n+        return null; // no such attribute\r\n+    }\r\n+\r\n+    /**\r\n+     * Whether this attribute is of type JspFragment.\r\n+     * \r\n+     * @return if the attribute is of type JspFragment\r\n+     * \r\n+     * @since 2.0\r\n+     */\r\n+    public boolean isFragment() {\r\n+        return fragment;\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns a String representation of this TagAttributeInfo, suitable for\r\n+     * debugging purposes.\r\n+     * \r\n+     * @return a String representation of this TagAttributeInfo\r\n+     */\r\n+    public String toString() {\r\n+        StringBuffer b = new StringBuffer(64);\r\n+        b.append(\"name = \" + name + \" \");\r\n+        b.append(\"type = \" + type + \" \");\r\n+        b.append(\"reqTime = \" + reqTime + \" \");\r\n+        b.append(\"required = \" + required + \" \");\r\n+        b.append(\"fragment = \" + fragment + \" \");\r\n+        b.append(\"deferredValue = \" + deferredValue + \" \");\r\n+        b.append(\"expectedTypeName = \" + expectedTypeName + \" \");\r\n+        b.append(\"deferredMethod = \" + deferredMethod + \" \");\r\n+        b.append(\"methodSignature = \" + methodSignature);\r\n+        return b.toString();\r\n+    }\r\n+\r\n+    /*\r\n+     * private fields\r\n+     */\r\n+    private String name;\r\n+\r\n+    private String type;\r\n+\r\n+    private boolean reqTime;\r\n+\r\n+    private boolean required;\r\n+\r\n+    /*\r\n+     * private fields for JSP 2.0\r\n+     */\r\n+    private boolean fragment;\r\n+\r\n+    /*\r\n+     * private fields for JSP 2.1\r\n+     */\r\n+    private String description;\r\n+\r\n+    private boolean deferredValue;\r\n+\r\n+    private boolean deferredMethod;\r\n+\r\n+    private String expectedTypeName;\r\n+\r\n+    private String methodSignature;\r\n+\r\n+    public boolean isDeferredMethod() {\r\n+        return deferredMethod;\r\n+    }\r\n+\r\n+    public boolean isDeferredValue() {\r\n+        return deferredValue;\r\n+    }\r\n+\r\n+    public String getDescription() {\r\n+        return description;\r\n+    }\r\n+\r\n+    public String getExpectedTypeName() {\r\n+        return expectedTypeName;\r\n+    }\r\n+\r\n+    public String getMethodSignature() {\r\n+        return methodSignature;\r\n+    }\r\n+}\r"
        },
        {
            "sha": "30b962f5867b1f2bdbf26dd3ded4bbd7219c2d83",
            "filename": "java/javax/servlet/jsp/tagext/TagData.java",
            "status": "added",
            "additions": 153,
            "deletions": 0,
            "changes": 153,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagData.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagData.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagData.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,153 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+\r\n+package javax.servlet.jsp.tagext;\r\n+\r\n+import java.util.Hashtable;\r\n+\r\n+/**\r\n+ * The (translation-time only) attribute/value information for a tag instance.\r\n+ *\r\n+ * <p>\r\n+ * TagData is only used as an argument to the isValid, validate, and \r\n+ * getVariableInfo methods of TagExtraInfo, which are invoked at \r\n+ * translation time.\r\n+ */\r\n+\r\n+public class TagData implements Cloneable {\r\n+\r\n+    /**\r\n+     * Distinguished value for an attribute to indicate its value\r\n+     * is a request-time expression (which is not yet available because\r\n+     * TagData instances are used at translation-time).\r\n+     */\r\n+\r\n+    public static final Object REQUEST_TIME_VALUE = new Object();\r\n+\r\n+\r\n+    /**\r\n+     * Constructor for TagData.\r\n+     *\r\n+     * <p>\r\n+     * A typical constructor may be\r\n+     * <pre>\r\n+     * static final Object[][] att = {{\"connection\", \"conn0\"}, {\"id\", \"query0\"}};\r\n+     * static final TagData td = new TagData(att);\r\n+     * </pre>\r\n+     *\r\n+     * All values must be Strings except for those holding the\r\n+     * distinguished object REQUEST_TIME_VALUE.\r\n+\r\n+     * @param atts the static attribute and values.  May be null.\r\n+     */\r\n+    public TagData(Object[] atts[]) {\r\n+\tif (atts == null) {\r\n+\t    attributes = new Hashtable();\r\n+\t} else {\r\n+\t    attributes = new Hashtable(atts.length);\r\n+\t}\r\n+\r\n+\tif (atts != null) {\r\n+\t    for (int i = 0; i < atts.length; i++) {\r\n+\t\tattributes.put(atts[i][0], atts[i][1]);\r\n+\t    }\r\n+\t}\r\n+    }\r\n+\r\n+    /**\r\n+     * Constructor for a TagData.\r\n+     *\r\n+     * If you already have the attributes in a hashtable, use this\r\n+     * constructor. \r\n+     *\r\n+     * @param attrs A hashtable to get the values from.\r\n+     */\r\n+    public TagData(Hashtable attrs) {\r\n+        this.attributes = attrs;\r\n+    }\r\n+\r\n+    /**\r\n+     * The value of the tag's id attribute.\r\n+     *\r\n+     * @return the value of the tag's id attribute, or null if no such\r\n+     *     attribute was specified.\r\n+     */\r\n+\r\n+    public String getId() {\r\n+\treturn getAttributeString(TagAttributeInfo.ID);\r\n+    }\r\n+\r\n+    /**\r\n+     * The value of the attribute.\r\n+     * If a static value is specified for an attribute that accepts a\r\n+     * request-time attribute expression then that static value is returned,\r\n+     * even if the value is provided in the body of a <jsp:attribute> action.\r\n+     * The distinguished object REQUEST_TIME_VALUE is only returned if\r\n+     * the value is specified as a request-time attribute expression\r\n+     * or via the &lt;jsp:attribute&gt; action with a body that contains\r\n+     * dynamic content (scriptlets, scripting expressions, EL expressions, \r\n+     * standard actions, or custom actions).  Returns null if the attribute \r\n+     * is not set. \r\n+     *\r\n+     * @param attName the name of the attribute\r\n+     * @return the attribute's value\r\n+     */\r\n+\r\n+    public Object getAttribute(String attName) {\r\n+\treturn attributes.get(attName);\r\n+    }\r\n+\r\n+    /**\r\n+     * Set the value of an attribute.\r\n+     *\r\n+     * @param attName the name of the attribute\r\n+     * @param value the value.\r\n+     */\r\n+    public void setAttribute(String attName,\r\n+\t\t\t     Object value) {\r\n+\tattributes.put(attName, value);\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the value for a given attribute.\r\n+     *\r\n+     * @param attName the name of the attribute\r\n+     * @return the attribute value string\r\n+     * @throws ClassCastException if attribute value is not a String\r\n+     */\r\n+\r\n+    public String getAttributeString(String attName) {\r\n+\tObject o = attributes.get(attName);\r\n+\tif (o == null) {\r\n+\t    return null;\r\n+\t} else {\r\n+\t    return (String) o;\r\n+\t}\t\r\n+    }\r\n+\r\n+    /**\r\n+     * Enumerates the attributes.\r\n+     *\r\n+     *@return An enumeration of the attributes in a TagData\r\n+     */\r\n+    public java.util.Enumeration getAttributes() {\r\n+        return attributes.keys();\r\n+    };\r\n+\r\n+    // private data\r\n+\r\n+    private Hashtable attributes;\t// the tagname/value map\r\n+}\r"
        },
        {
            "sha": "ebc56f33a16f2906c92eccd6fab639e1321b5cff",
            "filename": "java/javax/servlet/jsp/tagext/TagExtraInfo.java",
            "status": "added",
            "additions": 143,
            "deletions": 0,
            "changes": 143,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagExtraInfo.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagExtraInfo.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagExtraInfo.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,143 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+\r\n+ \r\n+package javax.servlet.jsp.tagext;\r\n+\r\n+/**\r\n+ * Optional class provided by the tag library author to describe additional\r\n+ * translation-time information not described in the TLD.\r\n+ * The TagExtraInfo class is mentioned in the Tag Library Descriptor file (TLD).\r\n+ *\r\n+ * <p>\r\n+ * This class can be used:\r\n+ * <ul>\r\n+ * <li> to indicate that the tag defines scripting variables\r\n+ * <li> to perform translation-time validation of the tag attributes.\r\n+ * </ul>\r\n+ *\r\n+ * <p>\r\n+ * It is the responsibility of the JSP translator that the initial value\r\n+ * to be returned by calls to getTagInfo() corresponds to a TagInfo\r\n+ * object for the tag being translated. If an explicit call to\r\n+ * setTagInfo() is done, then the object passed will be returned in\r\n+ * subsequent calls to getTagInfo().\r\n+ * \r\n+ * <p>\r\n+ * The only way to affect the value returned by getTagInfo()\r\n+ * is through a setTagInfo() call, and thus, TagExtraInfo.setTagInfo() is\r\n+ * to be called by the JSP translator, with a TagInfo object that\r\n+ * corresponds to the tag being translated. The call should happen before\r\n+ * any invocation on validate() and before any invocation on\r\n+ * getVariableInfo().\r\n+ *\r\n+ * <p>\r\n+ * <tt>NOTE:</tt> It is a (translation time) error for a tag definition\r\n+ * in a TLD with one or more variable subelements to have an associated\r\n+ * TagExtraInfo implementation that returns a VariableInfo array with\r\n+ * one or more elements from a call to getVariableInfo().\r\n+ */\r\n+\r\n+public abstract class TagExtraInfo {\r\n+\r\n+    /**\r\n+     * Sole constructor. (For invocation by subclass constructors, \r\n+     * typically implicit.)\r\n+     */\r\n+    public TagExtraInfo() {\r\n+    }\r\n+    \r\n+    /**\r\n+     * information on scripting variables defined by the tag associated with\r\n+     * this TagExtraInfo instance.\r\n+     * Request-time attributes are indicated as such in the TagData parameter.\r\n+     *\r\n+     * @param data The TagData instance.\r\n+     * @return An array of VariableInfo data, or null or a zero length array\r\n+     *         if no scripting variables are to be defined.\r\n+     */\r\n+    public VariableInfo[] getVariableInfo(TagData data) {\r\n+\treturn ZERO_VARIABLE_INFO;\r\n+    }\r\n+\r\n+    /**\r\n+     * Translation-time validation of the attributes. \r\n+     * Request-time attributes are indicated as such in the TagData parameter.\r\n+     * Note that the preferred way to do validation is with the validate()\r\n+     * method, since it can return more detailed information.\r\n+     *\r\n+     * @param data The TagData instance.\r\n+     * @return Whether this tag instance is valid.\r\n+     * @see TagExtraInfo#validate\r\n+     */\r\n+\r\n+    public boolean isValid(TagData data) {\r\n+\treturn true;\r\n+    }\r\n+\r\n+    /**\r\n+     * Translation-time validation of the attributes.\r\n+     * Request-time attributes are indicated as such in the TagData parameter.\r\n+     * Because of the higher quality validation messages possible, \r\n+     * this is the preferred way to do validation (although isValid() \r\n+     * still works).  \r\n+     * \r\n+     * <p>JSP 2.0 and higher containers call validate() instead of isValid().\r\n+     * The default implementation of this method is to call isValid().  If \r\n+     * isValid() returns false, a generic ValidationMessage[] is returned\r\n+     * indicating isValid() returned false.</p>\r\n+     *\r\n+     * @param data The TagData instance.\r\n+     * @return A null object, or zero length array if no errors, an \r\n+     *     array of ValidationMessages otherwise.\r\n+     * @since 2.0\r\n+     */\r\n+    public ValidationMessage[] validate( TagData data ) {\r\n+\tValidationMessage[] result = null;\r\n+\r\n+\tif( !isValid( data ) ) {\r\n+\t    result = new ValidationMessage[] {\r\n+\t\tnew ValidationMessage( data.getId(), \"isValid() == false\" ) };\r\n+\t}\r\n+\r\n+\treturn result;\r\n+    }\r\n+\r\n+    /**\r\n+     * Set the TagInfo for this class.\r\n+     *\r\n+     * @param tagInfo The TagInfo this instance is extending\r\n+     */\r\n+    public final void setTagInfo(TagInfo tagInfo) {\r\n+\tthis.tagInfo = tagInfo;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the TagInfo for this class.\r\n+     *\r\n+     * @return the taginfo instance this instance is extending\r\n+     */\r\n+    public final TagInfo getTagInfo() {\r\n+\treturn tagInfo;\r\n+    }\r\n+    \r\n+    // private data\r\n+    private TagInfo tagInfo;\r\n+\r\n+    // zero length VariableInfo array\r\n+    private static final VariableInfo[] ZERO_VARIABLE_INFO = { };\r\n+}\r\n+\r"
        },
        {
            "sha": "b6f22cef0849f8a6a3fc80cbd83fd3dcdeb73f78",
            "filename": "java/javax/servlet/jsp/tagext/TagFileInfo.java",
            "status": "added",
            "additions": 85,
            "deletions": 0,
            "changes": 85,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagFileInfo.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagFileInfo.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagFileInfo.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,85 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+\r\n+ \r\n+package javax.servlet.jsp.tagext;\r\n+\r\n+/**\r\n+ * Tag information for a tag file in a Tag Library;\r\n+ * This class is instantiated from the Tag Library Descriptor file (TLD)\r\n+ * and is available only at translation time.\r\n+ *\r\n+ * @since 2.0\r\n+ */\r\n+public class TagFileInfo {\r\n+\r\n+    /**\r\n+     * Constructor for TagFileInfo from data in the JSP 2.0 format for TLD.\r\n+     * This class is to be instantiated only from the TagLibrary code\r\n+     * under request from some JSP code that is parsing a\r\n+     * TLD (Tag Library Descriptor).\r\n+     *\r\n+     * Note that, since TagLibibraryInfo reflects both TLD information\r\n+     * and taglib directive information, a TagFileInfo instance is\r\n+     * dependent on a taglib directive.  This is probably a\r\n+     * design error, which may be fixed in the future.\r\n+     *\r\n+     * @param name The unique action name of this tag\r\n+     * @param path Where to find the .tag file implementing this \r\n+     *     action, relative to the location of the TLD file.\r\n+     * @param tagInfo The detailed information about this tag, as parsed\r\n+     *     from the directives in the tag file.\r\n+     */\r\n+    public TagFileInfo( String name, String path, TagInfo tagInfo ) {\r\n+        this.name = name;\r\n+        this.path = path;\r\n+        this.tagInfo = tagInfo;\r\n+    }\r\n+\r\n+    /**\r\n+     * The unique action name of this tag.\r\n+     *\r\n+     * @return The (short) name of the tag.\r\n+     */\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    /**\r\n+     * Where to find the .tag file implementing this action.\r\n+     *\r\n+     * @return The path of the tag file, relative to the TLD, or \".\" if \r\n+     *     the tag file was defined in an implicit tag file.\r\n+     */\r\n+    public String getPath() {\r\n+        return path;\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns information about this tag, parsed from the directives \r\n+     * in the tag file.\r\n+     *\r\n+     * @return a TagInfo object containing information about this tag\r\n+     */\r\n+    public TagInfo getTagInfo() {\r\n+        return tagInfo;\r\n+    }\r\n+\r\n+    // private fields for 2.0 info\r\n+    private String name;\r\n+    private String path;\r\n+    private TagInfo tagInfo;\r\n+}\r"
        },
        {
            "sha": "8f53930f27217ae6b4f6237f3253a817e2e32f99",
            "filename": "java/javax/servlet/jsp/tagext/TagInfo.java",
            "status": "added",
            "additions": 446,
            "deletions": 0,
            "changes": 446,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagInfo.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagInfo.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagInfo.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,446 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+\r\n+ \r\n+package javax.servlet.jsp.tagext;\r\n+\r\n+/**\r\n+ * Tag information for a tag in a Tag Library;\r\n+ * This class is instantiated from the Tag Library Descriptor file (TLD)\r\n+ * and is available only at translation time.\r\n+ *\r\n+ * \r\n+*/\r\n+\r\n+public class TagInfo {\r\n+\r\n+    /**\r\n+     * Static constant for getBodyContent() when it is JSP.\r\n+     */\r\n+\r\n+    public static final String BODY_CONTENT_JSP = \"JSP\";\r\n+\r\n+    /**\r\n+     * Static constant for getBodyContent() when it is Tag dependent.\r\n+     */\r\n+\r\n+    public static final String BODY_CONTENT_TAG_DEPENDENT = \"TAGDEPENDENT\";\r\n+\r\n+\r\n+    /**\r\n+     * Static constant for getBodyContent() when it is empty.\r\n+     */\r\n+\r\n+    public static final String BODY_CONTENT_EMPTY = \"EMPTY\";\r\n+    \r\n+    /**\r\n+     * Static constant for getBodyContent() when it is scriptless.\r\n+     * \r\n+     * @since 2.0\r\n+     */ \r\n+    public static final String BODY_CONTENT_SCRIPTLESS = \"SCRIPTLESS\";\r\n+\r\n+    /**\r\n+     * Constructor for TagInfo from data in the JSP 1.1 format for TLD.\r\n+     * This class is to be instantiated only from the TagLibrary code\r\n+     * under request from some JSP code that is parsing a\r\n+     * TLD (Tag Library Descriptor).\r\n+     *\r\n+     * Note that, since TagLibibraryInfo reflects both TLD information\r\n+     * and taglib directive information, a TagInfo instance is\r\n+     * dependent on a taglib directive.  This is probably a\r\n+     * design error, which may be fixed in the future.\r\n+     *\r\n+     * @param tagName The name of this tag\r\n+     * @param tagClassName The name of the tag handler class\r\n+     * @param bodycontent Information on the body content of these tags\r\n+     * @param infoString The (optional) string information for this tag\r\n+     * @param taglib The instance of the tag library that contains us.\r\n+     * @param tagExtraInfo The instance providing extra Tag info.  May be null\r\n+     * @param attributeInfo An array of AttributeInfo data from descriptor.\r\n+     * May be null;\r\n+     *\r\n+     */\r\n+    public TagInfo(String tagName,\r\n+\t    String tagClassName,\r\n+\t    String bodycontent,\r\n+\t    String infoString,\r\n+\t    TagLibraryInfo taglib,\r\n+\t    TagExtraInfo tagExtraInfo,\r\n+\t    TagAttributeInfo[] attributeInfo) {\r\n+\tthis.tagName       = tagName;\r\n+\tthis.tagClassName  = tagClassName;\r\n+\tthis.bodyContent   = bodycontent;\r\n+\tthis.infoString    = infoString;\r\n+\tthis.tagLibrary    = taglib;\r\n+\tthis.tagExtraInfo  = tagExtraInfo;\r\n+\tthis.attributeInfo = attributeInfo;\r\n+\r\n+\tif (tagExtraInfo != null)\r\n+            tagExtraInfo.setTagInfo(this);\r\n+    }\r\n+\t\t\t \r\n+    /**\r\n+     * Constructor for TagInfo from data in the JSP 1.2 format for TLD.\r\n+     * This class is to be instantiated only from the TagLibrary code\r\n+     * under request from some JSP code that is parsing a\r\n+     * TLD (Tag Library Descriptor).\r\n+     *\r\n+     * Note that, since TagLibibraryInfo reflects both TLD information\r\n+     * and taglib directive information, a TagInfo instance is\r\n+     * dependent on a taglib directive.  This is probably a\r\n+     * design error, which may be fixed in the future.\r\n+     *\r\n+     * @param tagName The name of this tag\r\n+     * @param tagClassName The name of the tag handler class\r\n+     * @param bodycontent Information on the body content of these tags\r\n+     * @param infoString The (optional) string information for this tag\r\n+     * @param taglib The instance of the tag library that contains us.\r\n+     * @param tagExtraInfo The instance providing extra Tag info.  May be null\r\n+     * @param attributeInfo An array of AttributeInfo data from descriptor.\r\n+     * May be null;\r\n+     * @param displayName A short name to be displayed by tools\r\n+     * @param smallIcon Path to a small icon to be displayed by tools\r\n+     * @param largeIcon Path to a large icon to be displayed by tools\r\n+     * @param tvi An array of a TagVariableInfo (or null)\r\n+     */\r\n+    public TagInfo(String tagName,\r\n+\t    String tagClassName,\r\n+\t    String bodycontent,\r\n+\t    String infoString,\r\n+\t    TagLibraryInfo taglib,\r\n+\t    TagExtraInfo tagExtraInfo,\r\n+\t    TagAttributeInfo[] attributeInfo,\r\n+\t    String displayName,\r\n+\t    String smallIcon,\r\n+\t    String largeIcon,\r\n+\t    TagVariableInfo[] tvi) {\r\n+\tthis.tagName       = tagName;\r\n+\tthis.tagClassName  = tagClassName;\r\n+\tthis.bodyContent   = bodycontent;\r\n+\tthis.infoString    = infoString;\r\n+\tthis.tagLibrary    = taglib;\r\n+\tthis.tagExtraInfo  = tagExtraInfo;\r\n+\tthis.attributeInfo = attributeInfo;\r\n+\tthis.displayName = displayName;\r\n+\tthis.smallIcon = smallIcon;\r\n+\tthis.largeIcon = largeIcon;\r\n+\tthis.tagVariableInfo = tvi;\r\n+\r\n+\tif (tagExtraInfo != null)\r\n+            tagExtraInfo.setTagInfo(this);\r\n+    }\r\n+\t\t\t \r\n+    /**\r\n+     * Constructor for TagInfo from data in the JSP 2.0 format for TLD.\r\n+     * This class is to be instantiated only from the TagLibrary code\r\n+     * under request from some JSP code that is parsing a\r\n+     * TLD (Tag Library Descriptor).\r\n+     *\r\n+     * Note that, since TagLibibraryInfo reflects both TLD information\r\n+     * and taglib directive information, a TagInfo instance is\r\n+     * dependent on a taglib directive.  This is probably a\r\n+     * design error, which may be fixed in the future.\r\n+     *\r\n+     * @param tagName The name of this tag\r\n+     * @param tagClassName The name of the tag handler class\r\n+     * @param bodycontent Information on the body content of these tags\r\n+     * @param infoString The (optional) string information for this tag\r\n+     * @param taglib The instance of the tag library that contains us.\r\n+     * @param tagExtraInfo The instance providing extra Tag info.  May be null\r\n+     * @param attributeInfo An array of AttributeInfo data from descriptor.\r\n+     * May be null;\r\n+     * @param displayName A short name to be displayed by tools\r\n+     * @param smallIcon Path to a small icon to be displayed by tools\r\n+     * @param largeIcon Path to a large icon to be displayed by tools\r\n+     * @param tvi An array of a TagVariableInfo (or null)\r\n+     * @param dynamicAttributes True if supports dynamic attributes\r\n+     *\r\n+     * @since 2.0\r\n+     */\r\n+    public TagInfo(String tagName,\r\n+            String tagClassName,\r\n+            String bodycontent,\r\n+            String infoString,\r\n+            TagLibraryInfo taglib,\r\n+            TagExtraInfo tagExtraInfo,\r\n+            TagAttributeInfo[] attributeInfo,\r\n+            String displayName,\r\n+            String smallIcon,\r\n+            String largeIcon,\r\n+            TagVariableInfo[] tvi,\r\n+            boolean dynamicAttributes) {\r\n+        this.tagName       = tagName;\r\n+        this.tagClassName  = tagClassName;\r\n+        this.bodyContent   = bodycontent;\r\n+        this.infoString    = infoString;\r\n+        this.tagLibrary    = taglib;\r\n+        this.tagExtraInfo  = tagExtraInfo;\r\n+        this.attributeInfo = attributeInfo;\r\n+        this.displayName = displayName;\r\n+        this.smallIcon = smallIcon;\r\n+        this.largeIcon = largeIcon;\r\n+        this.tagVariableInfo = tvi;\r\n+        this.dynamicAttributes = dynamicAttributes;\r\n+\r\n+        if (tagExtraInfo != null)\r\n+            tagExtraInfo.setTagInfo(this);\r\n+    }\r\n+\r\n+    /**\r\n+     * The name of the Tag.\r\n+     *\r\n+     * @return The (short) name of the tag.\r\n+     */\r\n+\r\n+    public String getTagName() {\r\n+\treturn tagName;\r\n+    }\r\n+\r\n+    /**\r\n+     * Attribute information (in the TLD) on this tag.\r\n+     * The return is an array describing the attributes of this tag, as\r\n+     * indicated in the TLD.\r\n+     *\r\n+     * @return The array of TagAttributeInfo for this tag, or a\r\n+     *         zero-length array if the tag has no attributes.\r\n+     */\r\n+\r\n+   public TagAttributeInfo[] getAttributes() {\r\n+       return attributeInfo;\r\n+   }\r\n+\r\n+    /**\r\n+     * Information on the scripting objects created by this tag at runtime.\r\n+     * This is a convenience method on the associated TagExtraInfo class.\r\n+     *\r\n+     * @param data TagData describing this action.\r\n+     * @return if a TagExtraInfo object is associated with this TagInfo, the\r\n+     *     result of getTagExtraInfo().getVariableInfo( data ), otherwise\r\n+     *     null.\r\n+     */\r\n+   public VariableInfo[] getVariableInfo(TagData data) {\r\n+       VariableInfo[] result = null;\r\n+       TagExtraInfo tei = getTagExtraInfo();\r\n+       if (tei != null) {\r\n+\t   result = tei.getVariableInfo( data );\r\n+       }\r\n+       return result;\r\n+   }\r\n+\r\n+    /**\r\n+     * Translation-time validation of the attributes. \r\n+     * This is a convenience method on the associated TagExtraInfo class.\r\n+     *\r\n+     * @param data The translation-time TagData instance.\r\n+     * @return Whether the data is valid.\r\n+     */\r\n+    public boolean isValid(TagData data) {\r\n+        TagExtraInfo tei = getTagExtraInfo();\r\n+        if (tei == null) {\r\n+\t    return true;\r\n+        }\r\n+        return tei.isValid(data);\r\n+    }\r\n+\r\n+    /**\r\n+     * Translation-time validation of the attributes.\r\n+     * This is a convenience method on the associated TagExtraInfo class.\r\n+     *\r\n+     * @param data The translation-time TagData instance.\r\n+     * @return A null object, or zero length array if no errors, an\r\n+     *     array of ValidationMessages otherwise.\r\n+     * @since 2.0\r\n+     */\r\n+    public ValidationMessage[] validate( TagData data ) {\r\n+\tTagExtraInfo tei = getTagExtraInfo();\r\n+\tif( tei == null ) {\r\n+\t    return null;\r\n+\t}\r\n+\treturn tei.validate( data );\r\n+    }\r\n+\r\n+    /**\r\n+     * Set the instance for extra tag information.\r\n+     * \r\n+     * @param tei the TagExtraInfo instance\r\n+     */\r\n+    public void setTagExtraInfo(TagExtraInfo tei) {\r\n+\ttagExtraInfo = tei;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * The instance (if any) for extra tag information.\r\n+     * \r\n+     * @return The TagExtraInfo instance, if any.\r\n+     */\r\n+    public TagExtraInfo getTagExtraInfo() {\r\n+\treturn tagExtraInfo;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Name of the class that provides the handler for this tag.\r\n+     *\r\n+     * @return The name of the tag handler class.\r\n+     */\r\n+    \r\n+    public String getTagClassName() {\r\n+\treturn tagClassName;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * The bodycontent information for this tag.\r\n+     * If the bodycontent is not defined for this\r\n+     * tag, the default of JSP will be returned.\r\n+     *\r\n+     * @return the body content string.\r\n+     */\r\n+\r\n+    public String getBodyContent() {\r\n+\treturn bodyContent;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * The information string for the tag.\r\n+     *\r\n+     * @return the info string, or null if \r\n+     *         not defined\r\n+     */\r\n+\r\n+    public String getInfoString() {\r\n+\treturn infoString;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Set the TagLibraryInfo property.\r\n+     *\r\n+     * Note that a TagLibraryInfo element is dependent\r\n+     * not just on the TLD information but also on the\r\n+     * specific taglib instance used.  This means that\r\n+     * a fair amount of work needs to be done to construct\r\n+     * and initialize TagLib objects.\r\n+     *\r\n+     * If used carefully, this setter can be used to avoid having to\r\n+     * create new TagInfo elements for each taglib directive.\r\n+     *\r\n+     * @param tl the TagLibraryInfo to assign\r\n+     */\r\n+\r\n+    public void setTagLibrary(TagLibraryInfo tl) {\r\n+\ttagLibrary = tl;\r\n+    }\r\n+\r\n+    /**\r\n+     * The instance of TabLibraryInfo we belong to.\r\n+     *\r\n+     * @return the tag library instance we belong to\r\n+     */\r\n+\r\n+    public TagLibraryInfo getTagLibrary() {\r\n+\treturn tagLibrary;\r\n+    }\r\n+\r\n+\r\n+    // ============== JSP 2.0 TLD Information ========\r\n+\r\n+\r\n+    /**\r\n+     * Get the displayName.\r\n+     *\r\n+     * @return A short name to be displayed by tools,\r\n+     *         or null if not defined\r\n+     */\r\n+\r\n+    public String getDisplayName() {\r\n+\treturn displayName;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the path to the small icon.\r\n+     *\r\n+     * @return Path to a small icon to be displayed by tools,\r\n+     *         or null if not defined\r\n+     */\r\n+\r\n+    public String getSmallIcon() {\r\n+\treturn smallIcon;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the path to the large icon.\r\n+     *\r\n+     * @return Path to a large icon to be displayed by tools,\r\n+     *         or null if not defined\r\n+     */\r\n+\r\n+    public String getLargeIcon() {\r\n+\treturn largeIcon;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get TagVariableInfo objects associated with this TagInfo.\r\n+     *\r\n+     * @return Array of TagVariableInfo objects corresponding to\r\n+     *         variables declared by this tag, or a zero length\r\n+     *         array if no variables have been declared\r\n+     */\r\n+\r\n+    public TagVariableInfo[] getTagVariableInfos() {\r\n+\treturn tagVariableInfo;\r\n+    }\r\n+\r\n+\r\n+    // ============== JSP 2.0 TLD Information ========\r\n+\r\n+    /**\r\n+     * Get dynamicAttributes associated with this TagInfo.\r\n+     *\r\n+     * @return True if tag handler supports dynamic attributes\r\n+     * @since 2.0\r\n+     */\r\n+    public boolean hasDynamicAttributes() {\r\n+        return dynamicAttributes;\r\n+    }\r\n+\r\n+    /*\r\n+     * private fields for 1.1 info\r\n+     */\r\n+    private String             tagName; // the name of the tag\r\n+    private String             tagClassName;\r\n+    private String             bodyContent;\r\n+    private String             infoString;\r\n+    private TagLibraryInfo     tagLibrary;\r\n+    private TagExtraInfo       tagExtraInfo; // instance of TagExtraInfo\r\n+    private TagAttributeInfo[] attributeInfo;\r\n+\r\n+    /*\r\n+     * private fields for 1.2 info\r\n+     */\r\n+    private String             displayName;\r\n+    private String             smallIcon;\r\n+    private String             largeIcon;\r\n+    private TagVariableInfo[]  tagVariableInfo;\r\n+\r\n+    /*\r\n+     * Additional private fields for 2.0 info\r\n+     */\r\n+    private boolean dynamicAttributes;\r\n+}\r"
        },
        {
            "sha": "1e42da02c5497bbf686a7dadc6d72b4a2b9d7955",
            "filename": "java/javax/servlet/jsp/tagext/TagLibraryInfo.java",
            "status": "added",
            "additions": 286,
            "deletions": 0,
            "changes": 286,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagLibraryInfo.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagLibraryInfo.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagLibraryInfo.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,286 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+ \r\n+package javax.servlet.jsp.tagext;\r\n+\r\n+import javax.servlet.jsp.tagext.TagInfo;\r\n+import javax.servlet.jsp.tagext.TagFileInfo;\r\n+\r\n+/**\r\n+ * Translation-time information associated with a taglib directive, and its\r\n+ * underlying TLD file.\r\n+ *\r\n+ * Most of the information is directly from the TLD, except for\r\n+ * the prefix and the uri values used in the taglib directive\r\n+ *\r\n+ *\r\n+ */\r\n+\r\n+abstract public class TagLibraryInfo {\r\n+\r\n+    /**\r\n+     * Constructor.\r\n+     *\r\n+     * This will invoke the constructors for TagInfo, and TagAttributeInfo\r\n+     * after parsing the TLD file.\r\n+     *\r\n+     * @param prefix the prefix actually used by the taglib directive\r\n+     * @param uri the URI actually used by the taglib directive\r\n+     */\r\n+    protected TagLibraryInfo(String prefix, String uri) {\r\n+\tthis.prefix = prefix;\r\n+\tthis.uri    = uri;\r\n+    }\r\n+\r\n+    // ==== methods accessing taglib information =======\r\n+\r\n+    /**\r\n+     * The value of the uri attribute from the taglib directive for \r\n+     * this library.\r\n+     *\r\n+     * @return the value of the uri attribute\r\n+     */\r\n+   \r\n+    public String getURI() {\r\n+        return uri;\r\n+    }\r\n+\r\n+    /**\r\n+     * The prefix assigned to this taglib from the taglib directive\r\n+     *\r\n+     * @return the prefix assigned to this taglib from the taglib directive\r\n+     */\r\n+\r\n+    public String getPrefixString() {\r\n+\treturn prefix;\r\n+    }\r\n+\r\n+    // ==== methods using the TLD data =======\r\n+\r\n+    /**\r\n+     * The preferred short name (prefix) as indicated in the TLD.\r\n+     * This may be used by authoring tools as the preferred prefix\r\n+     * to use when creating an taglib directive for this library.\r\n+     *\r\n+     * @return the preferred short name for the library\r\n+     */\r\n+    public String getShortName() {\r\n+        return shortname;\r\n+    }\r\n+\r\n+    /**\r\n+     * The \"reliable\" URN indicated in the TLD (the uri element).\r\n+     * This may be used by authoring tools as a global identifier\r\n+     * to use when creating a taglib directive for this library.\r\n+     *\r\n+     * @return a reliable URN to a TLD like this\r\n+     */\r\n+    public String getReliableURN() {\r\n+        return urn;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Information (documentation) for this TLD.\r\n+     *\r\n+     * @return the info string for this tag lib\r\n+     */\r\n+   \r\n+    public String getInfoString() {\r\n+        return info;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * A string describing the required version of the JSP container.\r\n+     * \r\n+     * @return the (minimal) required version of the JSP container.\r\n+     * @see javax.servlet.jsp.JspEngineInfo\r\n+     */\r\n+   \r\n+    public String getRequiredVersion() {\r\n+        return jspversion;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * An array describing the tags that are defined in this tag library.\r\n+     *\r\n+     * @return the TagInfo objects corresponding to the tags defined by this\r\n+     *         tag library, or a zero length array if this tag library\r\n+     *         defines no tags\r\n+     */\r\n+    public TagInfo[] getTags() {\r\n+        return tags;\r\n+    }\r\n+\r\n+    /**\r\n+     * An array describing the tag files that are defined in this tag library.\r\n+     *\r\n+     * @return the TagFileInfo objects corresponding to the tag files defined\r\n+     *         by this tag library, or a zero length array if this\r\n+     *         tag library defines no tags files\r\n+     * @since 2.0\r\n+     */\r\n+    public TagFileInfo[] getTagFiles() {\r\n+        return tagFiles;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Get the TagInfo for a given tag name, looking through all the\r\n+     * tags in this tag library.\r\n+     *\r\n+     * @param shortname The short name (no prefix) of the tag\r\n+     * @return the TagInfo for the tag with the specified short name, or\r\n+     *         null if no such tag is found\r\n+     */\r\n+\r\n+    public TagInfo getTag(String shortname) {\r\n+        TagInfo tags[] = getTags();\r\n+\r\n+        if (tags == null || tags.length == 0) {\r\n+            return null;\r\n+        }\r\n+\r\n+        for (int i=0; i < tags.length; i++) {\r\n+            if (tags[i].getTagName().equals(shortname)) {\r\n+                return tags[i];\r\n+            }\r\n+        }\r\n+        return null;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the TagFileInfo for a given tag name, looking through all the\r\n+     * tag files in this tag library.\r\n+     *\r\n+     * @param shortname The short name (no prefix) of the tag\r\n+     * @return the TagFileInfo for the specified Tag file, or null\r\n+     *         if no Tag file is found\r\n+     * @since 2.0\r\n+     */\r\n+    public TagFileInfo getTagFile(String shortname) {\r\n+        TagFileInfo tagFiles[] = getTagFiles();\r\n+\r\n+        if (tagFiles == null || tagFiles.length == 0) {\r\n+            return null;\r\n+        }\r\n+\r\n+        for (int i=0; i < tagFiles.length; i++) {\r\n+            if (tagFiles[i].getName().equals(shortname)) {\r\n+                return tagFiles[i];\r\n+            }\r\n+        }\r\n+        return null;\r\n+    }\r\n+\r\n+    /**\r\n+     * An array describing the functions that are defined in this tag library.\r\n+     *\r\n+     * @return the functions defined in this tag library, or a zero\r\n+     *         length array if the tag library defines no functions.\r\n+     * @since 2.0\r\n+     */\r\n+    public FunctionInfo[] getFunctions() {\r\n+        return functions;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Get the FunctionInfo for a given function name, looking through all the\r\n+     * functions in this tag library.\r\n+     *\r\n+     * @param name The name (no prefix) of the function\r\n+     * @return the FunctionInfo for the function with the given name, or null\r\n+     *         if no such function exists\r\n+     * @since 2.0\r\n+     */\r\n+    public FunctionInfo getFunction(String name) {\r\n+\r\n+        if (functions == null || functions.length == 0) {\r\n+            System.err.println(\"No functions\");\r\n+            return null;\r\n+        }\r\n+\r\n+        for (int i=0; i < functions.length; i++) {\r\n+            if (functions[i].getName().equals(name)) {\r\n+                return functions[i];\r\n+            }\r\n+        }\r\n+        return null;\r\n+    }\r\n+\r\n+\r\n+    // Protected fields\r\n+\r\n+    /**\r\n+     * The prefix assigned to this taglib from the taglib directive.\r\n+     */\r\n+    protected String        prefix;\r\n+    \r\n+    /**\r\n+     * The value of the uri attribute from the taglib directive for \r\n+     * this library.\r\n+     */\r\n+    protected String        uri;\r\n+    \r\n+    /**\r\n+     * An array describing the tags that are defined in this tag library.\r\n+     */\r\n+    protected TagInfo[]     tags;\r\n+    \r\n+    /**\r\n+     * An array describing the tag files that are defined in this tag library.\r\n+     *\r\n+     * @since 2.0\r\n+     */\r\n+    protected TagFileInfo[] tagFiles;\r\n+    \r\n+    /**\r\n+     * An array describing the functions that are defined in this tag library.\r\n+     *\r\n+     * @since 2.0\r\n+     */\r\n+    protected FunctionInfo[] functions;\r\n+\r\n+    // Tag Library Data\r\n+    \r\n+    /**\r\n+     * The version of the tag library.\r\n+     */\r\n+    protected String tlibversion; // required\r\n+    \r\n+    /**\r\n+     * The version of the JSP specification this tag library is written to.\r\n+     */\r\n+    protected String jspversion;  // required\r\n+    \r\n+    /**\r\n+     * The preferred short name (prefix) as indicated in the TLD.\r\n+     */\r\n+    protected String shortname;   // required\r\n+    \r\n+    /**\r\n+     * The \"reliable\" URN indicated in the TLD.\r\n+     */\r\n+    protected String urn;         // required\r\n+    \r\n+    /**\r\n+     * Information (documentation) for this TLD.\r\n+     */\r\n+    protected String info;        // optional\r\n+}\r"
        },
        {
            "sha": "eb2ff072b84ea143dfc1ed19aad9061a126d1c8e",
            "filename": "java/javax/servlet/jsp/tagext/TagLibraryValidator.java",
            "status": "added",
            "additions": 143,
            "deletions": 0,
            "changes": 143,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagLibraryValidator.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagLibraryValidator.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagLibraryValidator.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,143 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+\r\n+package javax.servlet.jsp.tagext;\r\n+\r\n+import java.util.Map;\r\n+\r\n+/**\r\n+ * Translation-time validator class for a JSP page. \r\n+ * A validator operates on the XML view associated with the JSP page.\r\n+ *\r\n+ * <p>\r\n+ * The TLD file associates a TagLibraryValidator class and some init\r\n+ * arguments with a tag library.\r\n+ *\r\n+ * <p>\r\n+ * The JSP container is reponsible for locating an appropriate\r\n+ * instance of the appropriate subclass by\r\n+ *\r\n+ * <ul>\r\n+ * <li> new a fresh instance, or reuse an available one\r\n+ * <li> invoke the setInitParams(Map) method on the instance\r\n+ * </ul>\r\n+ *\r\n+ * once initialized, the validate(String, String, PageData) method will\r\n+ * be invoked, where the first two arguments are the prefix\r\n+ * and uri for this tag library in the XML View.  The prefix is intended\r\n+ * to make it easier to produce an error message.  However, it is not\r\n+ * always accurate.  In the case where a single URI is mapped to more \r\n+ * than one prefix in the XML view, the prefix of the first URI is provided.\r\n+ * Therefore, to provide high quality error messages in cases where the \r\n+ * tag elements themselves are checked, the prefix parameter should be \r\n+ * ignored and the actual prefix of the element should be used instead.  \r\n+ * TagLibraryValidators should always use the uri to identify elements \r\n+ * as beloning to the tag library, not the prefix.\r\n+ *\r\n+ * <p>\r\n+ * A TagLibraryValidator instance\r\n+ * may create auxiliary objects internally to perform\r\n+ * the validation (e.g. an XSchema validator) and may reuse it for all\r\n+ * the pages in a given translation run.\r\n+ *\r\n+ * <p>\r\n+ * The JSP container is not guaranteed to serialize invocations of\r\n+ * validate() method, and TagLibraryValidators should perform any\r\n+ * synchronization they may require.\r\n+ *\r\n+ * <p>\r\n+ * As of JSP 2.0, a JSP container must provide a jsp:id attribute to\r\n+ * provide higher quality validation errors.\r\n+ * The container will track the JSP pages\r\n+ * as passed to the container, and will assign to each element\r\n+ * a unique \"id\", which is passed as the value of the jsp:id\r\n+ * attribute.  Each XML element in the XML view available will\r\n+ * be extended with this attribute.  The TagLibraryValidator\r\n+ * can then use the attribute in one or more ValidationMessage\r\n+ * objects.  The container then, in turn, can use these\r\n+ * values to provide more precise information on the location\r\n+ * of an error.\r\n+ *\r\n+ * <p>\r\n+ * The actual prefix of the <code>id</code> attribute may or may not be \r\n+ * <code>jsp</code> but it will always map to the namespace\r\n+ * <code>http://java.sun.com/JSP/Page</code>.  A TagLibraryValidator\r\n+ * implementation must rely on the uri, not the prefix, of the <code>id</code>\r\n+ * attribute.\r\n+ */\r\n+\r\n+abstract public class TagLibraryValidator {\r\n+\r\n+    /**\r\n+     * Sole constructor. (For invocation by subclass constructors, \r\n+     * typically implicit.)\r\n+     */\r\n+    public TagLibraryValidator() {\r\n+    }\r\n+    \r\n+    /**\r\n+     * Set the init data in the TLD for this validator.\r\n+     * Parameter names are keys, and parameter values are the values.\r\n+     *\r\n+     * @param map A Map describing the init parameters\r\n+     */\r\n+    public void setInitParameters(Map map) {\r\n+\tinitParameters = map;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Get the init parameters data as an immutable Map.\r\n+     * Parameter names are keys, and parameter values are the values.\r\n+     *\r\n+     * @return The init parameters as an immutable map.\r\n+     */\r\n+    public Map getInitParameters() {\r\n+\treturn initParameters;\r\n+    }\r\n+\r\n+    /**\r\n+     * Validate a JSP page.\r\n+     * This will get invoked once per unique tag library URI in the\r\n+     * XML view.  This method will return null if the page is valid; otherwise\r\n+     * the method should return an array of ValidationMessage objects.\r\n+     * An array of length zero is also interpreted as no errors.\r\n+     *\r\n+     * @param prefix the first prefix with which the tag library is \r\n+     *     associated, in the XML view.  Note that some tags may use \r\n+     *     a different prefix if the namespace is redefined.\r\n+     * @param uri the tag library's unique identifier\r\n+     * @param page the JspData page object\r\n+     * @return A null object, or zero length array if no errors, an array\r\n+     * of ValidationMessages otherwise.\r\n+     */\r\n+    public ValidationMessage[] validate(String prefix, String uri, \r\n+        PageData page) \r\n+    {\r\n+\treturn null;\r\n+    }\r\n+\r\n+    /**\r\n+     * Release any data kept by this instance for validation purposes.\r\n+     */\r\n+    public void release() {\r\n+\tinitParameters = null;\r\n+    }\r\n+\r\n+    // Private data\r\n+    private Map initParameters;\r\n+\r\n+}\r"
        },
        {
            "sha": "5a109963e57744c0e35a3c59e0735b918ac1becd",
            "filename": "java/javax/servlet/jsp/tagext/TagSupport.java",
            "status": "added",
            "additions": 293,
            "deletions": 0,
            "changes": 293,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagSupport.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagSupport.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagSupport.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,293 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+package javax.servlet.jsp.tagext;\r\n+\r\n+import java.io.Serializable;\r\n+import java.util.Enumeration;\r\n+import java.util.Hashtable;\r\n+\r\n+import javax.servlet.jsp.JspException;\r\n+import javax.servlet.jsp.PageContext;\r\n+\r\n+/**\r\n+ * A base class for defining new tag handlers implementing Tag.\r\n+ *\r\n+ * <p> The TagSupport class is a utility class intended to be used as\r\n+ * the base class for new tag handlers.  The TagSupport class\r\n+ * implements the Tag and IterationTag interfaces and adds additional\r\n+ * convenience methods including getter methods for the properties in\r\n+ * Tag.  TagSupport has one static method that is included to\r\n+ * facilitate coordination among cooperating tags.\r\n+ *\r\n+ * <p> Many tag handlers will extend TagSupport and only redefine a\r\n+ * few methods. \r\n+ */\r\n+\r\n+public class TagSupport implements IterationTag, Serializable {\r\n+\r\n+    /**\r\n+     * Find the instance of a given class type that is closest to a given\r\n+     * instance.\r\n+     * This method uses the getParent method from the Tag\r\n+     * interface.\r\n+     * This method is used for coordination among cooperating tags.\r\n+     *\r\n+     * <p>\r\n+     * The current version of the specification only provides one formal\r\n+     * way of indicating the observable type of a tag handler: its\r\n+     * tag handler implementation class, described in the tag-class\r\n+     * subelement of the tag element.  This is extended in an\r\n+     * informal manner by allowing the tag library author to\r\n+     * indicate in the description subelement an observable type.\r\n+     * The type should be a subtype of the tag handler implementation\r\n+     * class or void.\r\n+     * This addititional constraint can be exploited by a\r\n+     * specialized container that knows about that specific tag library,\r\n+     * as in the case of the JSP standard tag library.\r\n+     *\r\n+     * <p>\r\n+     * When a tag library author provides information on the\r\n+     * observable type of a tag handler, client programmatic code\r\n+     * should adhere to that constraint.  Specifically, the Class\r\n+     * passed to findAncestorWithClass should be a subtype of the\r\n+     * observable type.\r\n+     * \r\n+     *\r\n+     * @param from The instance from where to start looking.\r\n+     * @param klass The subclass of Tag or interface to be matched\r\n+     * @return the nearest ancestor that implements the interface\r\n+     * or is an instance of the class specified\r\n+     */\r\n+\r\n+    public static final Tag findAncestorWithClass(Tag from, Class klass) {\r\n+\tboolean isInterface = false;\r\n+\r\n+\tif (from == null ||\r\n+\t    klass == null ||\r\n+\t    (!Tag.class.isAssignableFrom(klass) &&\r\n+\t     !(isInterface = klass.isInterface()))) {\r\n+\t    return null;\r\n+\t}\r\n+\r\n+\tfor (;;) {\r\n+\t    Tag tag = from.getParent();\r\n+\r\n+\t    if (tag == null) {\r\n+\t\treturn null;\r\n+\t    }\r\n+\r\n+\t    if ((isInterface && klass.isInstance(tag)) ||\r\n+\t        klass.isAssignableFrom(tag.getClass()))\r\n+\t\treturn tag;\r\n+\t    else\r\n+\t\tfrom = tag;\r\n+\t}\r\n+    }\r\n+\r\n+    /**\r\n+     * Default constructor, all subclasses are required to define only\r\n+     * a public constructor with the same signature, and to call the\r\n+     * superclass constructor.\r\n+     *\r\n+     * This constructor is called by the code generated by the JSP\r\n+     * translator.\r\n+     */\r\n+\r\n+    public TagSupport() { }\r\n+\r\n+    /**\r\n+     * Default processing of the start tag, returning SKIP_BODY.\r\n+     *\r\n+     * @return SKIP_BODY\r\n+     * @throws JspException if an error occurs while processing this tag\r\n+     *\r\n+     * @see Tag#doStartTag()\r\n+     */\r\n+ \r\n+    public int doStartTag() throws JspException {\r\n+        return SKIP_BODY;\r\n+    }\r\n+\r\n+    /**\r\n+     * Default processing of the end tag returning EVAL_PAGE.\r\n+     *\r\n+     * @return EVAL_PAGE\r\n+     * @throws JspException if an error occurs while processing this tag\r\n+     *\r\n+     * @see Tag#doEndTag()\r\n+     */\r\n+\r\n+    public int doEndTag() throws JspException {\r\n+\treturn EVAL_PAGE;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Default processing for a body.\r\n+     *\r\n+     * @return SKIP_BODY\r\n+     * @throws JspException if an error occurs while processing this tag\r\n+     *\r\n+     * @see IterationTag#doAfterBody()\r\n+     */\r\n+    \r\n+    public int doAfterBody() throws JspException {\r\n+\treturn SKIP_BODY;\r\n+    }\r\n+\r\n+    // Actions related to body evaluation\r\n+\r\n+\r\n+    /**\r\n+     * Release state.\r\n+     *\r\n+     * @see Tag#release()\r\n+     */\r\n+\r\n+    public void release() {\r\n+\tparent = null;\r\n+\tid = null;\r\n+\tif( values != null ) {\r\n+\t    values.clear();\r\n+\t}\r\n+\tvalues = null;\r\n+    }\r\n+\r\n+    /**\r\n+     * Set the nesting tag of this tag.\r\n+     *\r\n+     * @param t The parent Tag.\r\n+     * @see Tag#setParent(Tag)\r\n+     */\r\n+\r\n+    public void setParent(Tag t) {\r\n+\tparent = t;\r\n+    }\r\n+\r\n+    /**\r\n+     * The Tag instance most closely enclosing this tag instance.\r\n+     * @see Tag#getParent()\r\n+     *\r\n+     * @return the parent tag instance or null\r\n+     */\r\n+\r\n+    public Tag getParent() {\r\n+\treturn parent;\r\n+    }\r\n+\r\n+    /**\r\n+     * Set the id attribute for this tag.\r\n+     *\r\n+     * @param id The String for the id.\r\n+     */\r\n+\r\n+    public void setId(String id) {\r\n+\tthis.id = id;\r\n+    }\r\n+\r\n+    /**\r\n+     * The value of the id attribute of this tag; or null.\r\n+     *\r\n+     * @return the value of the id attribute, or null\r\n+     */\r\n+    \r\n+    public String getId() {\r\n+\treturn id;\r\n+    }\r\n+\r\n+    /**\r\n+     * Set the page context.\r\n+     *\r\n+     * @param pageContext The PageContext.\r\n+     * @see Tag#setPageContext\r\n+     */\r\n+\r\n+    public void setPageContext(PageContext pageContext) {\r\n+\tthis.pageContext = pageContext;\r\n+    }\r\n+\r\n+    /**\r\n+     * Associate a value with a String key.\r\n+     *\r\n+     * @param k The key String.\r\n+     * @param o The value to associate.\r\n+     */\r\n+\r\n+    public void setValue(String k, Object o) {\r\n+\tif (values == null) {\r\n+\t    values = new Hashtable();\r\n+\t}\r\n+\tvalues.put(k, o);\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a the value associated with a key.\r\n+     *\r\n+     * @param k The string key.\r\n+     * @return The value associated with the key, or null.\r\n+     */\r\n+\r\n+    public Object getValue(String k) {\r\n+\tif (values == null) {\r\n+\t    return null;\r\n+\t} else {\r\n+\t    return values.get(k);\r\n+\t}\r\n+    }\r\n+\r\n+    /**\r\n+     * Remove a value associated with a key.\r\n+     *\r\n+     * @param k The string key.\r\n+     */\r\n+\r\n+    public void removeValue(String k) {\r\n+\tif (values != null) {\r\n+\t    values.remove(k);\r\n+\t}\r\n+    }\r\n+\r\n+    /**\r\n+     * Enumerate the keys for the values kept by this tag handler.\r\n+     *\r\n+     * @return An enumeration of all the keys for the values set,\r\n+     *     or null or an empty Enumeration if no values have been set.\r\n+     */\r\n+\r\n+    public Enumeration getValues() {\r\n+\tif (values == null) {\r\n+\t    return null;\r\n+\t}\r\n+\treturn values.keys();\r\n+    }\r\n+\r\n+    // private fields\r\n+\r\n+    private   Tag         parent;\r\n+    private   Hashtable   values;\r\n+    /**\r\n+     * The value of the id attribute of this tag; or null.\r\n+     */\r\n+    protected String\t  id;\r\n+\r\n+    // protected fields\r\n+\r\n+    /**\r\n+     * The PageContext.\r\n+     */\r\n+    protected PageContext pageContext;\r\n+}\r\n+\r"
        },
        {
            "sha": "729550a4aa8a0a6cd8ec53347ad52326abea041e",
            "filename": "java/javax/servlet/jsp/tagext/TagVariableInfo.java",
            "status": "added",
            "additions": 120,
            "deletions": 0,
            "changes": 120,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagVariableInfo.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagVariableInfo.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTagVariableInfo.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,120 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+\r\n+ \r\n+package javax.servlet.jsp.tagext;\r\n+\r\n+/**\r\n+ * Variable information for a tag in a Tag Library;\r\n+ * This class is instantiated from the Tag Library Descriptor file (TLD)\r\n+ * and is available only at translation time.\r\n+ *\r\n+ * This object should be immutable.\r\n+ *\r\n+ * This information is only available in JSP 1.2 format TLDs or above.\r\n+ */\r\n+\r\n+public class TagVariableInfo {\r\n+\r\n+    /**\r\n+     * Constructor for TagVariableInfo.\r\n+     *\r\n+     * @param nameGiven value of &lt;name-given&gt;\r\n+     * @param nameFromAttribute value of &lt;name-from-attribute&gt;\r\n+     * @param className value of &lt;variable-class&gt;\r\n+     * @param declare value of &lt;declare&gt;\r\n+     * @param scope value of &lt;scope&gt;\r\n+     */\r\n+    public TagVariableInfo(\r\n+\t    String nameGiven,\r\n+\t    String nameFromAttribute,\r\n+\t    String className,\r\n+\t    boolean declare,\r\n+\t    int scope) {\r\n+\tthis.nameGiven         = nameGiven;\r\n+\tthis.nameFromAttribute = nameFromAttribute;\r\n+\tthis.className         = className;\r\n+\tthis.declare           = declare;\r\n+\tthis.scope             = scope;\r\n+    }\r\n+\r\n+    /**\r\n+     * The body of the &lt;name-given&gt; element.\r\n+     *\r\n+     * @return The variable name as a constant\r\n+     */\r\n+\r\n+    public String getNameGiven() {\r\n+\treturn nameGiven;\r\n+    }\r\n+\r\n+    /**\r\n+     * The body of the &lt;name-from-attribute&gt; element.\r\n+     * This is the name of an attribute whose (translation-time)\r\n+     * value will give the name of the variable.  One of\r\n+     * &lt;name-given&gt; or &lt;name-from-attribute&gt; is required.\r\n+     *\r\n+     * @return The attribute whose value defines the variable name\r\n+     */\r\n+\r\n+    public String getNameFromAttribute() {\r\n+\treturn nameFromAttribute;\r\n+    }\r\n+\r\n+    /**\r\n+     * The body of the &lt;variable-class&gt; element.  \r\n+     *\r\n+     * @return The name of the class of the variable or\r\n+     *         'java.lang.String' if not defined in the TLD.\r\n+     */\r\n+\r\n+    public String getClassName() {\r\n+\treturn className;\r\n+    }\r\n+\r\n+    /**\r\n+     * The body of the &lt;declare&gt; element.\r\n+     *\r\n+     * @return Whether the variable is to be declared or not.\r\n+     *         If not defined in the TLD, 'true' will be returned.\r\n+     */\r\n+\r\n+    public boolean getDeclare() {\r\n+\treturn declare;\r\n+    }\r\n+\r\n+    /**\r\n+     * The body of the &lt;scope&gt; element.\r\n+     *\r\n+     * @return The scope to give the variable.  NESTED\r\n+     *         scope will be returned if not defined in \r\n+     *         the TLD.\r\n+     */\r\n+\r\n+    public int getScope() {\r\n+\treturn scope;\r\n+    }\r\n+\r\n+\r\n+    /*\r\n+     * private fields\r\n+     */\r\n+    private String   nameGiven;         // <name-given>\r\n+    private String   nameFromAttribute; // <name-from-attribute>\r\n+    private String   className;         // <class>\r\n+    private boolean  declare;           // <declare>\r\n+    private int      scope;             // <scope>\r\n+}\r"
        },
        {
            "sha": "b800af340039fae817825ce232a7f644c5441b67",
            "filename": "java/javax/servlet/jsp/tagext/TryCatchFinally.java",
            "status": "added",
            "additions": 98,
            "deletions": 0,
            "changes": 98,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTryCatchFinally.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTryCatchFinally.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FTryCatchFinally.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,98 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+\r\n+ \r\n+package javax.servlet.jsp.tagext;\r\n+\r\n+\r\n+\r\n+/**\r\n+ * The auxiliary interface of a Tag, IterationTag or BodyTag tag\r\n+ * handler that wants additional hooks for managing resources.\r\n+ *\r\n+ * <p>This interface provides two new methods: doCatch(Throwable)\r\n+ * and doFinally().  The prototypical invocation is as follows:\r\n+ *\r\n+ * <pre>\r\n+ * h = get a Tag();  // get a tag handler, perhaps from pool\r\n+ *\r\n+ * h.setPageContext(pc);  // initialize as desired\r\n+ * h.setParent(null);\r\n+ * h.setFoo(\"foo\");\r\n+ * \r\n+ * // tag invocation protocol; see Tag.java\r\n+ * try {\r\n+ *   doStartTag()...\r\n+ *   ....\r\n+ *   doEndTag()...\r\n+ * } catch (Throwable t) {\r\n+ *   // react to exceptional condition\r\n+ *   h.doCatch(t);\r\n+ * } finally {\r\n+ *   // restore data invariants and release per-invocation resources\r\n+ *   h.doFinally();\r\n+ * }\r\n+ * \r\n+ * ... other invocations perhaps with some new setters\r\n+ * ...\r\n+ * h.release();  // release long-term resources\r\n+ * </pre>\r\n+ */\r\n+\r\n+public interface TryCatchFinally {\r\n+\r\n+    /**\r\n+     * Invoked if a Throwable occurs while evaluating the BODY\r\n+     * inside a tag or in any of the following methods:\r\n+     * Tag.doStartTag(), Tag.doEndTag(),\r\n+     * IterationTag.doAfterBody() and BodyTag.doInitBody().\r\n+     *\r\n+     * <p>This method is not invoked if the Throwable occurs during\r\n+     * one of the setter methods.\r\n+     *\r\n+     * <p>This method may throw an exception (the same or a new one)\r\n+     * that will be propagated further up the nest chain.  If an exception\r\n+     * is thrown, doFinally() will be invoked.\r\n+     *\r\n+     * <p>This method is intended to be used to respond to an exceptional\r\n+     * condition.\r\n+     *\r\n+     * @param t The throwable exception navigating through this tag.\r\n+     * @throws Throwable if the exception is to be rethrown further up \r\n+     *     the nest chain.\r\n+     */\r\n+ \r\n+    void doCatch(Throwable t) throws Throwable;\r\n+\r\n+    /**\r\n+     * Invoked in all cases after doEndTag() for any class implementing\r\n+     * Tag, IterationTag or BodyTag.  This method is invoked even if\r\n+     * an exception has occurred in the BODY of the tag,\r\n+     * or in any of the following methods:\r\n+     * Tag.doStartTag(), Tag.doEndTag(),\r\n+     * IterationTag.doAfterBody() and BodyTag.doInitBody().\r\n+     *\r\n+     * <p>This method is not invoked if the Throwable occurs during\r\n+     * one of the setter methods.\r\n+     *\r\n+     * <p>This method should not throw an Exception.\r\n+     *\r\n+     * <p>This method is intended to maintain per-invocation data\r\n+     * integrity and resource management actions.\r\n+     */\r\n+\r\n+    void doFinally();\r\n+}\r"
        },
        {
            "sha": "86bcbba06536c0b60456cc6fa6055b1623b162f3",
            "filename": "java/javax/servlet/jsp/tagext/ValidationMessage.java",
            "status": "added",
            "additions": 85,
            "deletions": 0,
            "changes": 85,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FValidationMessage.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FValidationMessage.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FValidationMessage.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,85 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+\r\n+\r\n+package javax.servlet.jsp.tagext;\r\n+\r\n+\r\n+/**\r\n+ * A validation message from either TagLibraryValidator or TagExtraInfo.\r\n+ * <p>\r\n+ * As of JSP 2.0, a JSP container must support a jsp:id attribute\r\n+ * to provide higher quality validation errors.\r\n+ * The container will track the JSP pages\r\n+ * as passed to the container, and will assign to each element\r\n+ * a unique \"id\", which is passed as the value of the jsp:id\r\n+ * attribute.  Each XML element in the XML view available will\r\n+ * be extended with this attribute.  The TagLibraryValidator\r\n+ * can then use the attribute in one or more ValidationMessage\r\n+ * objects.  The container then, in turn, can use these\r\n+ * values to provide more precise information on the location\r\n+ * of an error.\r\n+ *  \r\n+ * <p>\r\n+ * The actual prefix of the <code>id</code> attribute may or may not be \r\n+ * <code>jsp</code> but it will always map to the namespace\r\n+ * <code>http://java.sun.com/JSP/Page</code>.  A TagLibraryValidator\r\n+ * implementation must rely on the uri, not the prefix, of the <code>id</code>\r\n+ * attribute.\r\n+ */\r\n+\r\n+public class ValidationMessage {\r\n+\r\n+    /**\r\n+     * Create a ValidationMessage.  The message String should be\r\n+     * non-null.  The value of id may be null, if the message\r\n+     * is not specific to any XML element, or if no jsp:id\r\n+     * attributes were passed on.  If non-null, the value of\r\n+     * id must be the value of a jsp:id attribute for the PageData\r\n+     * passed into the validate() method.\r\n+     *\r\n+     * @param id Either null, or the value of a jsp:id attribute.\r\n+     * @param message A localized validation message.\r\n+     */\r\n+    public ValidationMessage(String id, String message) {\r\n+\tthis.id = id;\r\n+\tthis.message = message;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Get the jsp:id.\r\n+     * Null means that there is no information available.\r\n+     *\r\n+     * @return The jsp:id information.\r\n+     */\r\n+    public String getId() {\r\n+\treturn id;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the localized validation message.\r\n+     *\r\n+     * @return A validation message\r\n+     */\r\n+    public String getMessage(){\r\n+\treturn message;\r\n+    }\r\n+\r\n+    // Private data\r\n+    private String id;\r\n+    private String message;\r\n+}\r"
        },
        {
            "sha": "19e95a3ba6835d0f09843cada0ead7cdd05f9ee4",
            "filename": "java/javax/servlet/jsp/tagext/VariableInfo.java",
            "status": "added",
            "additions": 283,
            "deletions": 0,
            "changes": 283,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FVariableInfo.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FVariableInfo.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2FVariableInfo.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,283 @@\n+/*\r\n+* Copyright 2004 The Apache Software Foundation\r\n+*\r\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+* you may not use this file except in compliance with the License.\r\n+* You may obtain a copy of the License at\r\n+*\r\n+*     http://www.apache.org/licenses/LICENSE-2.0\r\n+*\r\n+* Unless required by applicable law or agreed to in writing, software\r\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+* See the License for the specific language governing permissions and\r\n+* limitations under the License.\r\n+*/\r\n+\r\n+ \r\n+package javax.servlet.jsp.tagext;\r\n+\r\n+/**\r\n+ * Information on the scripting variables that are created/modified by\r\n+ * a tag (at run-time). This information is provided by TagExtraInfo\r\n+ * classes and it is used by the translation phase of JSP.\r\n+ *\r\n+ * <p>\r\n+ * Scripting variables generated by a custom action have an associated \r\n+ * scope of either AT_BEGIN, NESTED, or AT_END.\r\n+ *\r\n+ * <p>\r\n+ * The class name (VariableInfo.getClassName) in the returned objects\r\n+ * is used to determine the types of the scripting variables.\r\n+ * Note that because scripting variables are assigned their values\r\n+ * from scoped attributes which cannot be of primitive types,\r\n+ * &quot;boxed&quot; types such as <code>java.lang.Integer</code> must \r\n+ * be used instead of primitives.\r\n+ *\r\n+ * <p>\r\n+ * The class name may be a Fully Qualified Class Name, or a short\r\n+ * class name.\r\n+ *\r\n+ * <p>\r\n+ * If a Fully Qualified Class Name is provided, it should refer to a\r\n+ * class that should be in the CLASSPATH for the Web Application (see\r\n+ * Servlet 2.4 specification - essentially it is WEB-INF/lib and\r\n+ * WEB-INF/classes). Failure to be so will lead to a translation-time\r\n+ * error.\r\n+ *\r\n+ * <p>\r\n+ * If a short class name is given in the VariableInfo objects, then\r\n+ * the class name must be that of a public class in the context of the\r\n+ * import directives of the page where the custom action appears. \r\n+ * The class must also be in the CLASSPATH for the Web Application \r\n+ * (see Servlet 2.4 specification - essentially it is WEB-INF/lib and\r\n+ * WEB-INF/classes). Failure to be so will lead to a translation-time\r\n+ * error.\r\n+ *\r\n+ * <p><B>Usage Comments</B>\r\n+ * <p>\r\n+ * Frequently a fully qualified class name will refer to a class that\r\n+ * is known to the tag library and thus, delivered in the same JAR\r\n+ * file as the tag handlers. In most other remaining cases it will\r\n+ * refer to a class that is in the platform on which the JSP processor\r\n+ * is built (like J2EE). Using fully qualified class names in this\r\n+ * manner makes the usage relatively resistant to configuration\r\n+ * errors.\r\n+ *\r\n+ * <p>\r\n+ * A short name is usually generated by the tag library based on some\r\n+ * attributes passed through from the custom action user (the author),\r\n+ * and it is thus less robust: for instance a missing import directive\r\n+ * in the referring JSP page will lead to an invalid short name class\r\n+ * and a translation error.\r\n+ *\r\n+ * <p><B>Synchronization Protocol</B>\r\n+ *\r\n+ * <p>\r\n+ * The result of the invocation on getVariableInfo is an array of\r\n+ * VariableInfo objects.  Each such object describes a scripting\r\n+ * variable by providing its name, its type, whether the variable is\r\n+ * new or not, and what its scope is.  Scope is best described through\r\n+ * a picture:\r\n+ *\r\n+ * <p>\r\n+ * <IMG src=\"doc-files/VariableInfo-1.gif\"\r\n+ *      alt=\"NESTED, AT_BEGIN and AT_END Variable Scopes\"/>\r\n+ *\r\n+ *<p>\r\n+ * The JSP 2.0 specification defines the interpretation of 3 values:\r\n+ * \r\n+ * <ul>\r\n+ * <li> NESTED, if the scripting variable is available between\r\n+ * the start tag and the end tag of the action that defines it.\r\n+ * <li>\r\n+ * AT_BEGIN, if the scripting variable is available from the start tag\r\n+ * of the action that defines it until the end of the scope.\r\n+ * <li> AT_END, if the scripting variable is available after the end tag\r\n+ * of the action that defines it until the end of the scope.\r\n+ * </ul>\r\n+ *\r\n+ * The scope value for a variable implies what methods may affect its\r\n+ * value and thus where synchronization is needed as illustrated by\r\n+ * the table below.  <b>Note:</b> the synchronization of the variable(s)\r\n+ * will occur <em>after</em> the respective method has been called.\r\n+ *\r\n+ * <blockquote>\r\n+ * <table cellpadding=\"2\" cellspacing=\"2\" border=\"0\" width=\"55%\"\r\n+ *        bgcolor=\"#999999\" summary=\"Variable Synchronization Points\">\r\n+ * <tbody>\r\n+ *   <tr align=\"center\">\r\n+ *     <td valign=\"top\" colspan=\"6\" bgcolor=\"#999999\"><u><b>Variable Synchronization\r\n+ *     Points</b></u><br>\r\n+ *     </td>\r\n+ *   </tr>\r\n+ *   <tr>\r\n+ *     <th valign=\"top\" bgcolor=\"#c0c0c0\">&nbsp;</th>\r\n+ *     <th valign=\"top\" bgcolor=\"#c0c0c0\" align=\"center\">doStartTag()</th>\r\n+ *     <th valign=\"top\" bgcolor=\"#c0c0c0\" align=\"center\">doInitBody()</th>\r\n+ *     <th valign=\"top\" bgcolor=\"#c0c0c0\" align=\"center\">doAfterBody()</th>\r\n+ *     <th valign=\"top\" bgcolor=\"#c0c0c0\" align=\"center\">doEndTag()</th>\r\n+ *     <th valign=\"top\" bgcolor=\"#c0c0c0\" align=\"center\">doTag()</th>\r\n+ *   </tr>\r\n+ *   <tr>\r\n+ *     <td valign=\"top\" bgcolor=\"#c0c0c0\"><b>Tag<br>\r\n+ *     </b></td>\r\n+ *     <td valign=\"top\" align=\"center\" bgcolor=\"#ffffff\">AT_BEGIN, NESTED<br>\r\n+ *     </td>\r\n+ *     <td valign=\"top\" align=\"center\" bgcolor=\"#ffffff\"><br>\r\n+ *     </td>\r\n+ *     <td valign=\"top\" align=\"center\" bgcolor=\"#ffffff\"><br>\r\n+ *     </td>\r\n+ *     <td valign=\"top\" align=\"center\" bgcolor=\"#ffffff\">AT_BEGIN, AT_END<br>\r\n+ *     </td>\r\n+ *     <td valign=\"top\" align=\"center\" bgcolor=\"#ffffff\"><br>\r\n+ *     </td>\r\n+ *   </tr>\r\n+ *   <tr>\r\n+ *     <td valign=\"top\" bgcolor=\"#c0c0c0\"><b>IterationTag<br>\r\n+ *     </b></td>\r\n+ *     <td valign=\"top\" align=\"center\" bgcolor=\"#ffffff\">AT_BEGIN, NESTED<br>\r\n+ *     </td>\r\n+ *     <td valign=\"top\" align=\"center\" bgcolor=\"#ffffff\"><br>\r\n+ *     </td>\r\n+ *     <td valign=\"top\" align=\"center\" bgcolor=\"#ffffff\">AT_BEGIN, NESTED<br>\r\n+ *     </td>\r\n+ *     <td valign=\"top\" align=\"center\" bgcolor=\"#ffffff\">AT_BEGIN, AT_END<br>\r\n+ *     </td>\r\n+ *     <td valign=\"top\" align=\"center\" bgcolor=\"#ffffff\"><br>\r\n+ *     </td>\r\n+ *   </tr>\r\n+ *   <tr>\r\n+ *     <td valign=\"top\" bgcolor=\"#c0c0c0\"><b>BodyTag<br>\r\n+ *     </b></td>\r\n+ *     <td valign=\"top\" align=\"center\" bgcolor=\"#ffffff\">AT_BEGIN, NESTED<sup>1</sup><br>\r\n+ *     </td>\r\n+ *     <td valign=\"top\" align=\"center\" bgcolor=\"#ffffff\">AT_BEGIN, NESTED<sup>1</sup><br>\r\n+ *     </td>\r\n+ *     <td valign=\"top\" align=\"center\" bgcolor=\"#ffffff\">AT_BEGIN, NESTED<br>\r\n+ *     </td>\r\n+ *     <td valign=\"top\" align=\"center\" bgcolor=\"#ffffff\">AT_BEGIN, AT_END<br>\r\n+ *     </td>\r\n+ *     <td valign=\"top\" align=\"center\" bgcolor=\"#ffffff\"><br>\r\n+ *     </td>\r\n+ *   </tr>\r\n+ *   <tr>\r\n+ *     <td valign=\"top\" bgcolor=\"#c0c0c0\"><b>SimpleTag<br>\r\n+ *     </b></td>\r\n+ *     <td valign=\"top\" align=\"center\" bgcolor=\"#ffffff\"><br>\r\n+ *     </td>\r\n+ *     <td valign=\"top\" align=\"center\" bgcolor=\"#ffffff\"><br>\r\n+ *     </td>\r\n+ *     <td valign=\"top\" align=\"center\" bgcolor=\"#ffffff\"><br>\r\n+ *     </td>\r\n+ *     <td valign=\"top\" align=\"center\" bgcolor=\"#ffffff\"><br>\r\n+ *     </td>\r\n+ *     <td valign=\"top\" align=\"center\" bgcolor=\"#ffffff\">AT_BEGIN, AT_END<br>\r\n+ *     </td>\r\n+ *   </tr>\r\n+ * </tbody>\r\n+ * </table>\r\n+ * <sup>1</sup> Called after <code>doStartTag()</code> if \r\n+ * <code>EVAL_BODY_INCLUDE</code> is returned, or after \r\n+ * <code>doInitBody()</code> otherwise.\r\n+ * </blockquote>\r\n+ *\r\n+ * <p><B>Variable Information in the TLD</B>\r\n+ * <p>\r\n+ * Scripting variable information can also be encoded directly for most cases\r\n+ * into the Tag Library Descriptor using the &lt;variable&gt; subelement of the\r\n+ * &lt;tag&gt; element.  See the JSP specification.\r\n+ */\r\n+\r\n+public class VariableInfo {\r\n+\r\n+    /**\r\n+     * Scope information that scripting variable is visible only within the\r\n+     * start/end tags.\r\n+     */\r\n+    public static final int NESTED = 0;\r\n+\r\n+    /**\r\n+     * Scope information that scripting variable is visible after start tag.\r\n+     */\r\n+    public static final int AT_BEGIN = 1;\r\n+\r\n+    /**\r\n+     * Scope information that scripting variable is visible after end tag.\r\n+     */\r\n+    public static final int AT_END = 2;\r\n+\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     * These objects can be created (at translation time) by the TagExtraInfo\r\n+     * instances.\r\n+     *\r\n+     * @param varName The name of the scripting variable\r\n+     * @param className The type of this variable\r\n+     * @param declare If true, it is a new variable (in some languages this will\r\n+     *     require a declaration)\r\n+     * @param scope Indication on the lexical scope of the variable\r\n+     */\r\n+\r\n+    public VariableInfo(String varName,\r\n+\t\t\tString className,\r\n+\t\t\tboolean declare,\r\n+\t\t\tint scope) {\r\n+\tthis.varName = varName;\r\n+\tthis.className = className;\r\n+\tthis.declare = declare;\r\n+\tthis.scope = scope;\r\n+    }\r\n+\r\n+    // Accessor methods\r\n+    \r\n+    /**\r\n+     * Returns the name of the scripting variable.\r\n+     *\r\n+     * @return the name of the scripting variable\r\n+     */\r\n+    public String getVarName() { \r\n+        return varName; \r\n+    }\r\n+    \r\n+    /**\r\n+     * Returns the type of this variable.\r\n+     *\r\n+     * @return the type of this variable\r\n+     */\r\n+    public String getClassName() { \r\n+        return className; \r\n+    }\r\n+    \r\n+    /**\r\n+     * Returns whether this is a new variable.\r\n+     * If so, in some languages this will require a declaration.\r\n+     *\r\n+     * @return whether this is a new variable.\r\n+     */\r\n+    public boolean getDeclare() { \r\n+        return declare; \r\n+    }\r\n+    \r\n+    /**\r\n+     * Returns the lexical scope of the variable.\r\n+     * \r\n+     * @return the lexical scope of the variable, either AT_BEGIN, AT_END,\r\n+     *    or NESTED.\r\n+     * @see #AT_BEGIN\r\n+     * @see #AT_END\r\n+     * @see #NESTED\r\n+     */\r\n+    public int getScope() { \r\n+        return scope; \r\n+    }\r\n+\r\n+\r\n+    // == private data\r\n+    private String varName;\r\n+    private String className;\r\n+    private boolean declare;\r\n+    private int scope;\r\n+}\r\n+\r"
        },
        {
            "sha": "a61e82b9bfc7216be2f79d31bb447dd9c6fe1ee7",
            "filename": "java/javax/servlet/jsp/tagext/doc-files/BodyTagProtocol.gif",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2Fdoc-files%2FBodyTagProtocol.gif",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2Fdoc-files%2FBodyTagProtocol.gif",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2Fdoc-files%2FBodyTagProtocol.gif?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "c262341d953899ca416914e2c6ed247ad248ac38",
            "filename": "java/javax/servlet/jsp/tagext/doc-files/IterationTagProtocol.gif",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2Fdoc-files%2FIterationTagProtocol.gif",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2Fdoc-files%2FIterationTagProtocol.gif",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2Fdoc-files%2FIterationTagProtocol.gif?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "9a1880e65d4c8e77d13ff08d993b8c9516666696",
            "filename": "java/javax/servlet/jsp/tagext/doc-files/TagProtocol.gif",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2Fdoc-files%2FTagProtocol.gif",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2Fdoc-files%2FTagProtocol.gif",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2Fdoc-files%2FTagProtocol.gif?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "1e8eaed56c757cc70839341ab74c1fa5e66eb1da",
            "filename": "java/javax/servlet/jsp/tagext/doc-files/Thumbs.db",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2Fdoc-files%2FThumbs.db",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2Fdoc-files%2FThumbs.db",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2Fdoc-files%2FThumbs.db?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "32eabeb836735bdd143094fd9494c4d3b7579f6d",
            "filename": "java/javax/servlet/jsp/tagext/doc-files/VariableInfo-1.gif",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2Fdoc-files%2FVariableInfo-1.gif",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2Fdoc-files%2FVariableInfo-1.gif",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2Fdoc-files%2FVariableInfo-1.gif?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "f17b0cffc6867a3d2d66a88a1da3a51b0e06da27",
            "filename": "java/javax/servlet/jsp/tagext/package.html",
            "status": "added",
            "additions": 85,
            "deletions": 0,
            "changes": 85,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2Fpackage.html",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2Fpackage.html",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fjsp%2Ftagext%2Fpackage.html?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,85 @@\n+<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\r\n+<html>\r\n+<head>\r\n+<!--\r\n+  - The Apache Software License, Version 1.1\r\n+  -\r\n+  - Copyright (c) 1999 The Apache Software Foundation.  All rights \r\n+  - reserved.\r\n+  -\r\n+  - Redistribution and use in source and binary forms, with or without\r\n+  - modification, are permitted provided that the following conditions\r\n+  - are met:\r\n+  -\r\n+  - 1. Redistributions of source code must retain the above copyright\r\n+  -    notice, this list of conditions and the following disclaimer. \r\n+  -\r\n+  - 2. Redistributions in binary form must reproduce the above copyright\r\n+  -    notice, this list of conditions and the following disclaimer in\r\n+  -    the documentation and/or other materials provided with the\r\n+  -    distribution.\r\n+  -\r\n+  - 3. The end-user documentation included with the redistribution, if\r\n+  -    any, must include the following acknowlegement:  \r\n+  -       \"This product includes software developed by the \r\n+  -        Apache Software Foundation (http://www.apache.org/).\"\r\n+  -    Alternately, this acknowlegement may appear in the software itself,\r\n+  -    if and wherever such third-party acknowlegements normally appear.\r\n+  -\r\n+  - 4. The names \"The Jakarta Project\", \"Tomcat\", and \"Apache Software\r\n+  -    Foundation\" must not be used to endorse or promote products derived\r\n+  -    from this software without prior written permission. For written \r\n+  -    permission, please contact apache@apache.org.\r\n+  -\r\n+  - 5. Products derived from this software may not be called \"Apache\"\r\n+  -    nor may \"Apache\" appear in their names without prior written\r\n+  -    permission of the Apache Group.\r\n+  -\r\n+  - THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n+  - WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n+  - OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n+  - DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n+  - ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n+  - SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n+  - LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n+  - USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n+  - ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n+  - OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n+  - OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n+  - SUCH DAMAGE.\r\n+  - ====================================================================\r\n+  -\r\n+  - This software consists of voluntary contributions made by many\r\n+  - individuals on behalf of the Apache Software Foundation.  For more\r\n+  - information on the Apache Software Foundation, please see\r\n+  - <http://www.apache.org/>.\r\n+  -\r\n+  -->\r\n+</head>\r\n+<body bgcolor=\"white\">\r\n+\r\n+Classes and interfaces for the definition of JavaServer Pages Tag Libraries.\r\n+\r\n+<p>\r\n+The JavaServer Pages(tm) (JSP) 2.0 specification provides a portable\r\n+mechanism for the description of tag libraries.\r\n+<p>\r\n+A JSP tag library contains\r\n+<ul>\r\n+<li>A Tag Library Descriptor</li>\r\n+<li>A number of Tag Files or Tag handler classes defining \r\n+    request-time behavior</li>\r\n+<li>Additional classes and resources used at runtime</li>\r\n+<li>Possibly some additional classes to provide extra translation \r\n+    information</li>\r\n+</ul>\r\n+<p>\r\n+The JSP 2.0 specification and the reference implementation both contain\r\n+simple and moderately complex examples of actions defined using this\r\n+mechanism.  These are available at JSP's web site, at\r\n+<a href=\"http://java.sun.com/products/jsp\">http://java.sun.com/products/jsp</a>.\r\n+Some readers may want to consult those to get a quick feel for how\r\n+the mechanisms work together.\r\n+\r\n+</body>\r\n+</html>\r"
        },
        {
            "sha": "5f01c3902b7ca67f8144aa7b94459c3fc15ab185",
            "filename": "java/javax/servlet/package.html",
            "status": "added",
            "additions": 23,
            "deletions": 0,
            "changes": 23,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fpackage.html",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Fjavax%2Fservlet%2Fpackage.html",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Fjavax%2Fservlet%2Fpackage.html?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,23 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\r\n+<HTML>\r\n+<HEAD>\r\n+<!--\r\n+\r\n+  Copyright 2001 Sun Microsystems, Inc. All Rights Reserved.\r\n+\r\n+  This software is the proprietary information of Sun Microsystems, Inc.  \r\n+  Use is subject to license terms.\r\n+\r\n+-->\r\n+\r\n+</HEAD>\r\n+<BODY BGCOLOR=\"white\">\r\n+\r\n+The javax.servlet package contains a number of classes and interfaces that\r\n+describe and define the contracts between a servlet class and the\r\n+runtime environment provided for an instance of such a class by a\r\n+conforming servlet container.\r\n+\r\n+\r\n+</BODY>\r\n+</HTML>\r"
        },
        {
            "sha": "460333864d100963c910996b3d6bd35b577e59d8",
            "filename": "java/org/apache/catalina/Authenticator.java",
            "status": "added",
            "additions": 35,
            "deletions": 0,
            "changes": 35,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FAuthenticator.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FAuthenticator.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FAuthenticator.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,35 @@\n+/*\r\n+ * Copyright 1999,2004 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+\r\n+package org.apache.catalina;\r\n+\r\n+\r\n+/**\r\n+ * An <b>Authenticator</b> is a component (usually a Valve or Container) that\r\n+ * provides some sort of authentication service.  The interface itself has no\r\n+ * functional significance,  but is used as a tagging mechanism so that other\r\n+ * components can detect the presence (via an \"instanceof Authenticator\" test)\r\n+ * of an already configured authentication service.\r\n+ *\r\n+ * @author Craig R. McClanahan\r\n+ * @version $Revision: 302726 $ $Date: 2004-02-27 15:59:07 +0100 (ven., 27 f\u00e9vr. 2004) $\r\n+ */\r\n+\r\n+public interface Authenticator {\r\n+\r\n+\r\n+}\r"
        },
        {
            "sha": "42999d5e976f74a54055f4a135f91dfff6709653",
            "filename": "java/org/apache/catalina/Cluster.java",
            "status": "added",
            "additions": 178,
            "deletions": 0,
            "changes": 178,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FCluster.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FCluster.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FCluster.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,178 @@\n+/*\r\n+ * Copyright 1999,2004 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.catalina;\r\n+\r\n+import java.io.IOException;\r\n+import java.net.URL;\r\n+/**\r\n+ * A <b>Cluster</b> works as a Cluster client/server for the local host\r\n+ * Different Cluster implementations can be used to support different\r\n+ * ways to communicate within the Cluster. A Cluster implementation is\r\n+ * responsible for setting up a way to communicate within the Cluster\r\n+ * and also supply \"ClientApplications\" with <code>ClusterSender</code>\r\n+ * used when sending information in the Cluster and\r\n+ * <code>ClusterInfo</code> used for receiving information in the Cluster.\r\n+ *\r\n+ * @author Bip Thelin\r\n+ * @author Remy Maucherat\r\n+ * @author Filip Hanik\r\n+ * @version $Revision: 303857 $, $Date: 2005-04-15 22:15:45 +0200 (ven., 15 avr. 2005) $\r\n+ */\r\n+\r\n+public interface Cluster {\r\n+\r\n+    // ------------------------------------------------------------- Properties\r\n+\r\n+    /**\r\n+     * Return descriptive information about this Cluster implementation and\r\n+     * the corresponding version number, in the format\r\n+     * <code>&lt;description&gt;/&lt;version&gt;</code>.\r\n+     */\r\n+    public String getInfo();\r\n+\r\n+    /**\r\n+     * Return the name of the cluster that this Server is currently\r\n+     * configured to operate within.\r\n+     *\r\n+     * @return The name of the cluster associated with this server\r\n+     */\r\n+    public String getClusterName();\r\n+\r\n+    /**\r\n+     * Set the name of the cluster to join, if no cluster with\r\n+     * this name is present create one.\r\n+     *\r\n+     * @param clusterName The clustername to join\r\n+     */\r\n+    public void setClusterName(String clusterName);\r\n+\r\n+    /**\r\n+     * Set the Container associated with our Cluster\r\n+     *\r\n+     * @param container The Container to use\r\n+     */\r\n+    public void setContainer(Container container);\r\n+\r\n+    /**\r\n+     * Get the Container associated with our Cluster\r\n+     *\r\n+     * @return The Container associated with our Cluster\r\n+     */\r\n+    public Container getContainer();\r\n+\r\n+    /**\r\n+     * Set the protocol parameters.\r\n+     *\r\n+     * @param protocol The protocol used by the cluster\r\n+     * @deprecated\r\n+     */\r\n+    public void setProtocol(String protocol);\r\n+\r\n+    /**\r\n+     * Get the protocol used by the cluster.\r\n+     *\r\n+     * @return The protocol\r\n+     * @deprecated\r\n+     */\r\n+    public String getProtocol();\r\n+\r\n+    // --------------------------------------------------------- Public Methods\r\n+\r\n+    /**\r\n+     * Create a new manager which will use this cluster to replicate its\r\n+     * sessions.\r\n+     *\r\n+     * @param name Name (key) of the application with which the manager is\r\n+     * associated\r\n+     */\r\n+    public Manager createManager(String name);\r\n+\r\n+    // --------------------------------------------------------- Cluster Wide Deployments\r\n+    \r\n+    \r\n+    /**\r\n+     * Execute a periodic task, such as reloading, etc. This method will be\r\n+     * invoked inside the classloading context of this container. Unexpected\r\n+     * throwables will be caught and logged.\r\n+     */\r\n+    public void backgroundProcess();\r\n+\r\n+\r\n+    /**\r\n+     * Start an existing web application, attached to the specified context\r\n+     * path in all the other nodes in the cluster.\r\n+     * Only starts a web application if it is not running.\r\n+     *\r\n+     * @param contextPath The context path of the application to be started\r\n+     *\r\n+     * @exception IllegalArgumentException if the specified context path\r\n+     *  is malformed (it must be \"\" or start with a slash)\r\n+     * @exception IllegalArgumentException if the specified context path does\r\n+     *  not identify a currently installed web application\r\n+     * @exception IOException if an input/output error occurs during\r\n+     *  startup\r\n+     * @deprecated\r\n+     */\r\n+    public void startContext(String contextPath) throws IOException;\r\n+\r\n+\r\n+    /**\r\n+     * Install a new web application, whose web application archive is at the\r\n+     * specified URL, into this container with the specified context path.\r\n+     * A context path of \"\" (the empty string) should be used for the root\r\n+     * application for this container.  Otherwise, the context path must\r\n+     * start with a slash.\r\n+     * <p>\r\n+     * If this application is successfully installed, a ContainerEvent of type\r\n+     * <code>PRE_INSTALL_EVENT</code> will be sent to registered listeners\r\n+     * before the associated Context is started, and a ContainerEvent of type\r\n+     * <code>INSTALL_EVENT</code> will be sent to all registered listeners\r\n+     * after the associated Context is started, with the newly created\r\n+     * <code>Context</code> as an argument.\r\n+     *\r\n+     * @param contextPath The context path to which this application should\r\n+     *  be installed (must be unique)\r\n+     * @param war A URL of type \"jar:\" that points to a WAR file, or type\r\n+     *  \"file:\" that points to an unpacked directory structure containing\r\n+     *  the web application to be installed\r\n+     *\r\n+     * @exception IllegalArgumentException if the specified context path\r\n+     *  is malformed (it must be \"\" or start with a slash)\r\n+     * @exception IllegalStateException if the specified context path\r\n+     *  is already attached to an existing web application\r\n+     * @deprecated\r\n+     */\r\n+    public void installContext(String contextPath, URL war);\r\n+\r\n+    /**\r\n+     * Stop an existing web application, attached to the specified context\r\n+     * path.  Only stops a web application if it is running.\r\n+     *\r\n+     * @param contextPath The context path of the application to be stopped\r\n+     *\r\n+     * @exception IllegalArgumentException if the specified context path\r\n+     *  is malformed (it must be \"\" or start with a slash)\r\n+     * @exception IllegalArgumentException if the specified context path does\r\n+     *  not identify a currently installed web application\r\n+     * @exception IOException if an input/output error occurs while stopping\r\n+     *  the web application\r\n+     * @deprecated\r\n+     */\r\n+    public void stop(String contextPath) throws IOException;\r\n+\r\n+\r\n+}\r"
        },
        {
            "sha": "4163c5a99d62eee995ff43ecc63ded972ab6e6e2",
            "filename": "java/org/apache/catalina/Contained.java",
            "status": "added",
            "additions": 53,
            "deletions": 0,
            "changes": 53,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FContained.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FContained.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FContained.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,53 @@\n+/*\r\n+ * Copyright 1999-2001,2004 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+\r\n+package org.apache.catalina;\r\n+\r\n+\r\n+/**\r\n+ * <p>Decoupling interface which specifies that an implementing class is\r\n+ * associated with at most one <strong>Container</strong> instance.</p>\r\n+ *\r\n+ * @author Craig R. McClanahan\r\n+ * @author Peter Donald\r\n+ * @version $Revision: 302726 $ $Date: 2004-02-27 15:59:07 +0100 (ven., 27 f\u00e9vr. 2004) $\r\n+ */\r\n+\r\n+public interface Contained {\r\n+\r\n+\r\n+    //-------------------------------------------------------------- Properties\r\n+\r\n+\r\n+    /**\r\n+     * Return the <code>Container</code> with which this instance is associated\r\n+     * (if any); otherwise return <code>null</code>.\r\n+     */\r\n+    public Container getContainer();\r\n+\r\n+\r\n+    /**\r\n+     * Set the <code>Container</code> with which this instance is associated.\r\n+     *\r\n+     * @param container The Container instance with which this instance is to\r\n+     *  be associated, or <code>null</code> to disassociate this instance\r\n+     *  from any Container\r\n+     */\r\n+    public void setContainer(Container container);\r\n+\r\n+\r\n+}\r"
        },
        {
            "sha": "2f2acc4490f99946389423baedbfa0e79c9a12e6",
            "filename": "java/org/apache/catalina/Container.java",
            "status": "added",
            "additions": 442,
            "deletions": 0,
            "changes": 442,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FContainer.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FContainer.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FContainer.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,442 @@\n+/*\r\n+ * Copyright 1999,2004 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+\r\n+package org.apache.catalina;\r\n+\r\n+\r\n+import java.beans.PropertyChangeListener;\r\n+import java.io.IOException;\r\n+import javax.servlet.ServletException;\r\n+import javax.naming.directory.DirContext;\r\n+\r\n+import org.apache.commons.logging.Log;\r\n+import org.apache.catalina.connector.Request;\r\n+import org.apache.catalina.connector.Response;\r\n+\r\n+\r\n+/**\r\n+ * A <b>Container</b> is an object that can execute requests received from\r\n+ * a client, and return responses based on those requests.  A Container may\r\n+ * optionally support a pipeline of Valves that process the request in an\r\n+ * order configured at runtime, by implementing the <b>Pipeline</b> interface\r\n+ * as well.\r\n+ * <p>\r\n+ * Containers will exist at several conceptual levels within Catalina.  The\r\n+ * following examples represent common cases:\r\n+ * <ul>\r\n+ * <li><b>Engine</b> - Representation of the entire Catalina servlet engine,\r\n+ *     most likely containing one or more subcontainers that are either Host\r\n+ *     or Context implementations, or other custom groups.\r\n+ * <li><b>Host</b> - Representation of a virtual host containing a number\r\n+ *     of Contexts.\r\n+ * <li><b>Context</b> - Representation of a single ServletContext, which will\r\n+ *     typically contain one or more Wrappers for the supported servlets.\r\n+ * <li><b>Wrapper</b> - Representation of an individual servlet definition\r\n+ *     (which may support multiple servlet instances if the servlet itself\r\n+ *     implements SingleThreadModel).\r\n+ * </ul>\r\n+ * A given deployment of Catalina need not include Containers at all of the\r\n+ * levels described above.  For example, an administration application\r\n+ * embedded within a network device (such as a router) might only contain\r\n+ * a single Context and a few Wrappers, or even a single Wrapper if the\r\n+ * application is relatively small.  Therefore, Container implementations\r\n+ * need to be designed so that they will operate correctly in the absence\r\n+ * of parent Containers in a given deployment.\r\n+ * <p>\r\n+ * A Container may also be associated with a number of support components\r\n+ * that provide functionality which might be shared (by attaching it to a\r\n+ * parent Container) or individually customized.  The following support\r\n+ * components are currently recognized:\r\n+ * <ul>\r\n+ * <li><b>Loader</b> - Class loader to use for integrating new Java classes\r\n+ *     for this Container into the JVM in which Catalina is running.\r\n+ * <li><b>Logger</b> - Implementation of the <code>log()</code> method\r\n+ *     signatures of the <code>ServletContext</code> interface.\r\n+ * <li><b>Manager</b> - Manager for the pool of Sessions associated with\r\n+ *     this Container.\r\n+ * <li><b>Realm</b> - Read-only interface to a security domain, for\r\n+ *     authenticating user identities and their corresponding roles.\r\n+ * <li><b>Resources</b> - JNDI directory context enabling access to static\r\n+ *     resources, enabling custom linkages to existing server components when\r\n+ *     Catalina is embedded in a larger server.\r\n+ * </ul>\r\n+ *\r\n+ * @author Craig R. McClanahan\r\n+ * @author Remy Maucherat\r\n+ * @version $Revision: 303037 $ $Date: 2004-07-27 09:17:21 +0200 (mar., 27 juil. 2004) $\r\n+ */\r\n+\r\n+public interface Container {\r\n+\r\n+\r\n+    // ----------------------------------------------------- Manifest Constants\r\n+\r\n+\r\n+    /**\r\n+     * The ContainerEvent event type sent when a child container is added\r\n+     * by <code>addChild()</code>.\r\n+     */\r\n+    public static final String ADD_CHILD_EVENT = \"addChild\";\r\n+\r\n+\r\n+    /**\r\n+     * The ContainerEvent event type sent when a Mapper is added\r\n+     * by <code>addMapper()</code>.\r\n+     */\r\n+    public static final String ADD_MAPPER_EVENT = \"addMapper\";\r\n+\r\n+\r\n+    /**\r\n+     * The ContainerEvent event type sent when a valve is added\r\n+     * by <code>addValve()</code>, if this Container supports pipelines.\r\n+     */\r\n+    public static final String ADD_VALVE_EVENT = \"addValve\";\r\n+\r\n+\r\n+    /**\r\n+     * The ContainerEvent event type sent when a child container is removed\r\n+     * by <code>removeChild()</code>.\r\n+     */\r\n+    public static final String REMOVE_CHILD_EVENT = \"removeChild\";\r\n+\r\n+\r\n+    /**\r\n+     * The ContainerEvent event type sent when a Mapper is removed\r\n+     * by <code>removeMapper()</code>.\r\n+     */\r\n+    public static final String REMOVE_MAPPER_EVENT = \"removeMapper\";\r\n+\r\n+\r\n+    /**\r\n+     * The ContainerEvent event type sent when a valve is removed\r\n+     * by <code>removeValve()</code>, if this Container supports pipelines.\r\n+     */\r\n+    public static final String REMOVE_VALVE_EVENT = \"removeValve\";\r\n+\r\n+\r\n+    // ------------------------------------------------------------- Properties\r\n+\r\n+\r\n+    /**\r\n+     * Return descriptive information about this Container implementation and\r\n+     * the corresponding version number, in the format\r\n+     * <code>&lt;description&gt;/&lt;version&gt;</code>.\r\n+     */\r\n+    public String getInfo();\r\n+\r\n+\r\n+    /**\r\n+     * Return the Loader with which this Container is associated.  If there is\r\n+     * no associated Loader, return the Loader associated with our parent\r\n+     * Container (if any); otherwise, return <code>null</code>.\r\n+     */\r\n+    public Loader getLoader();\r\n+\r\n+\r\n+    /**\r\n+     * Set the Loader with which this Container is associated.\r\n+     *\r\n+     * @param loader The newly associated loader\r\n+     */\r\n+    public void setLoader(Loader loader);\r\n+\r\n+\r\n+    /**\r\n+     * Return the Logger with which this Container is associated.  If there is\r\n+     * no associated Logger, return the Logger associated with our parent\r\n+     * Container (if any); otherwise return <code>null</code>.\r\n+     */\r\n+    public Log getLogger();\r\n+\r\n+\r\n+    /**\r\n+     * Return the Manager with which this Container is associated.  If there is\r\n+     * no associated Manager, return the Manager associated with our parent\r\n+     * Container (if any); otherwise return <code>null</code>.\r\n+     */\r\n+    public Manager getManager();\r\n+\r\n+\r\n+    /**\r\n+     * Set the Manager with which this Container is associated.\r\n+     *\r\n+     * @param manager The newly associated Manager\r\n+     */\r\n+    public void setManager(Manager manager);\r\n+\r\n+\r\n+    /**\r\n+     * Return an object which may be utilized for mapping to this component.\r\n+     */\r\n+    public Object getMappingObject();\r\n+\r\n+    \r\n+    /**\r\n+     * Return the JMX name associated with this container.\r\n+     */\r\n+    public String getObjectName();    \r\n+\r\n+    /**\r\n+     * Return the Pipeline object that manages the Valves associated with\r\n+     * this Container.\r\n+     */\r\n+    public Pipeline getPipeline();\r\n+\r\n+\r\n+    /**\r\n+     * Return the Cluster with which this Container is associated.  If there is\r\n+     * no associated Cluster, return the Cluster associated with our parent\r\n+     * Container (if any); otherwise return <code>null</code>.\r\n+     */\r\n+    public Cluster getCluster();\r\n+\r\n+\r\n+    /**\r\n+     * Set the Cluster with which this Container is associated.\r\n+     *\r\n+     * @param cluster the Cluster with which this Container is associated.\r\n+     */\r\n+    public void setCluster(Cluster cluster);\r\n+\r\n+\r\n+    /**\r\n+     * Get the delay between the invocation of the backgroundProcess method on\r\n+     * this container and its children. Child containers will not be invoked\r\n+     * if their delay value is not negative (which would mean they are using \r\n+     * their own thread). Setting this to a positive value will cause \r\n+     * a thread to be spawn. After waiting the specified amount of time, \r\n+     * the thread will invoke the executePeriodic method on this container \r\n+     * and all its children.\r\n+     */\r\n+    public int getBackgroundProcessorDelay();\r\n+\r\n+\r\n+    /**\r\n+     * Set the delay between the invocation of the execute method on this\r\n+     * container and its children.\r\n+     * \r\n+     * @param delay The delay in seconds between the invocation of \r\n+     *              backgroundProcess methods\r\n+     */\r\n+    public void setBackgroundProcessorDelay(int delay);\r\n+\r\n+\r\n+    /**\r\n+     * Return a name string (suitable for use by humans) that describes this\r\n+     * Container.  Within the set of child containers belonging to a particular\r\n+     * parent, Container names must be unique.\r\n+     */\r\n+    public String getName();\r\n+\r\n+\r\n+    /**\r\n+     * Set a name string (suitable for use by humans) that describes this\r\n+     * Container.  Within the set of child containers belonging to a particular\r\n+     * parent, Container names must be unique.\r\n+     *\r\n+     * @param name New name of this container\r\n+     *\r\n+     * @exception IllegalStateException if this Container has already been\r\n+     *  added to the children of a parent Container (after which the name\r\n+     *  may not be changed)\r\n+     */\r\n+    public void setName(String name);\r\n+\r\n+\r\n+    /**\r\n+     * Return the Container for which this Container is a child, if there is\r\n+     * one.  If there is no defined parent, return <code>null</code>.\r\n+     */\r\n+    public Container getParent();\r\n+\r\n+\r\n+    /**\r\n+     * Set the parent Container to which this Container is being added as a\r\n+     * child.  This Container may refuse to become attached to the specified\r\n+     * Container by throwing an exception.\r\n+     *\r\n+     * @param container Container to which this Container is being added\r\n+     *  as a child\r\n+     *\r\n+     * @exception IllegalArgumentException if this Container refuses to become\r\n+     *  attached to the specified Container\r\n+     */\r\n+    public void setParent(Container container);\r\n+\r\n+\r\n+    /**\r\n+     * Return the parent class loader (if any) for web applications.\r\n+     */\r\n+    public ClassLoader getParentClassLoader();\r\n+\r\n+\r\n+    /**\r\n+     * Set the parent class loader (if any) for web applications.\r\n+     * This call is meaningful only <strong>before</strong> a Loader has\r\n+     * been configured, and the specified value (if non-null) should be\r\n+     * passed as an argument to the class loader constructor.\r\n+     *\r\n+     * @param parent The new parent class loader\r\n+     */\r\n+    public void setParentClassLoader(ClassLoader parent);\r\n+\r\n+\r\n+    /**\r\n+     * Return the Realm with which this Container is associated.  If there is\r\n+     * no associated Realm, return the Realm associated with our parent\r\n+     * Container (if any); otherwise return <code>null</code>.\r\n+     */\r\n+    public Realm getRealm();\r\n+\r\n+\r\n+    /**\r\n+     * Set the Realm with which this Container is associated.\r\n+     *\r\n+     * @param realm The newly associated Realm\r\n+     */\r\n+    public void setRealm(Realm realm);\r\n+\r\n+\r\n+    /**\r\n+     * Return the Resources with which this Container is associated.  If there\r\n+     * is no associated Resources object, return the Resources associated with\r\n+     * our parent Container (if any); otherwise return <code>null</code>.\r\n+     */\r\n+    public DirContext getResources();\r\n+\r\n+\r\n+    /**\r\n+     * Set the Resources object with which this Container is associated.\r\n+     *\r\n+     * @param resources The newly associated Resources\r\n+     */\r\n+    public void setResources(DirContext resources);\r\n+\r\n+\r\n+    // --------------------------------------------------------- Public Methods\r\n+\r\n+\r\n+    /**\r\n+     * Execute a periodic task, such as reloading, etc. This method will be\r\n+     * invoked inside the classloading context of this container. Unexpected\r\n+     * throwables will be caught and logged.\r\n+     */\r\n+    public void backgroundProcess();\r\n+\r\n+\r\n+    /**\r\n+     * Add a new child Container to those associated with this Container,\r\n+     * if supported.  Prior to adding this Container to the set of children,\r\n+     * the child's <code>setParent()</code> method must be called, with this\r\n+     * Container as an argument.  This method may thrown an\r\n+     * <code>IllegalArgumentException</code> if this Container chooses not\r\n+     * to be attached to the specified Container, in which case it is not added\r\n+     *\r\n+     * @param child New child Container to be added\r\n+     *\r\n+     * @exception IllegalArgumentException if this exception is thrown by\r\n+     *  the <code>setParent()</code> method of the child Container\r\n+     * @exception IllegalArgumentException if the new child does not have\r\n+     *  a name unique from that of existing children of this Container\r\n+     * @exception IllegalStateException if this Container does not support\r\n+     *  child Containers\r\n+     */\r\n+    public void addChild(Container child);\r\n+\r\n+\r\n+    /**\r\n+     * Add a container event listener to this component.\r\n+     *\r\n+     * @param listener The listener to add\r\n+     */\r\n+    public void addContainerListener(ContainerListener listener);\r\n+\r\n+\r\n+    /**\r\n+     * Add a property change listener to this component.\r\n+     *\r\n+     * @param listener The listener to add\r\n+     */\r\n+    public void addPropertyChangeListener(PropertyChangeListener listener);\r\n+\r\n+\r\n+    /**\r\n+     * Return the child Container, associated with this Container, with\r\n+     * the specified name (if any); otherwise, return <code>null</code>\r\n+     *\r\n+     * @param name Name of the child Container to be retrieved\r\n+     */\r\n+    public Container findChild(String name);\r\n+\r\n+\r\n+    /**\r\n+     * Return the set of children Containers associated with this Container.\r\n+     * If this Container has no children, a zero-length array is returned.\r\n+     */\r\n+    public Container[] findChildren();\r\n+\r\n+\r\n+    /**\r\n+     * Return the set of container listeners associated with this Container.\r\n+     * If this Container has no registered container listeners, a zero-length\r\n+     * array is returned.\r\n+     */\r\n+    public ContainerListener[] findContainerListeners();\r\n+\r\n+\r\n+    /**\r\n+     * Process the specified Request, and generate the corresponding Response,\r\n+     * according to the design of this particular Container.\r\n+     *\r\n+     * @param request Request to be processed\r\n+     * @param response Response to be produced\r\n+     *\r\n+     * @exception IOException if an input/output error occurred while\r\n+     *  processing\r\n+     * @exception ServletException if a ServletException was thrown\r\n+     *  while processing this request\r\n+     */\r\n+    public void invoke(Request request, Response response)\r\n+        throws IOException, ServletException;\r\n+\r\n+\r\n+    /**\r\n+     * Remove an existing child Container from association with this parent\r\n+     * Container.\r\n+     *\r\n+     * @param child Existing child Container to be removed\r\n+     */\r\n+    public void removeChild(Container child);\r\n+\r\n+\r\n+    /**\r\n+     * Remove a container event listener from this component.\r\n+     *\r\n+     * @param listener The listener to remove\r\n+     */\r\n+    public void removeContainerListener(ContainerListener listener);\r\n+\r\n+\r\n+    /**\r\n+     * Remove a property change listener from this component.\r\n+     *\r\n+     * @param listener The listener to remove\r\n+     */\r\n+    public void removePropertyChangeListener(PropertyChangeListener listener);\r\n+\r\n+\r\n+}\r"
        },
        {
            "sha": "b1f288591d77f127d323fe2c95ff1cef26689bb0",
            "filename": "java/org/apache/catalina/ContainerEvent.java",
            "status": "added",
            "additions": 111,
            "deletions": 0,
            "changes": 111,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FContainerEvent.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FContainerEvent.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FContainerEvent.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,111 @@\n+/*\r\n+ * Copyright 1999,2004 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+\r\n+package org.apache.catalina;\r\n+\r\n+\r\n+import java.util.EventObject;\r\n+\r\n+\r\n+/**\r\n+ * General event for notifying listeners of significant changes on a Container.\r\n+ *\r\n+ * @author Craig R. McClanahan\r\n+ * @version $Revision: 302726 $ $Date: 2004-02-27 15:59:07 +0100 (ven., 27 f\u00e9vr. 2004) $\r\n+ */\r\n+\r\n+public final class ContainerEvent\r\n+    extends EventObject {\r\n+\r\n+\r\n+    /**\r\n+     * The Container on which this event occurred.\r\n+     */\r\n+    private Container container = null;\r\n+\r\n+\r\n+    /**\r\n+     * The event data associated with this event.\r\n+     */\r\n+    private Object data = null;\r\n+\r\n+\r\n+    /**\r\n+     * The event type this instance represents.\r\n+     */\r\n+    private String type = null;\r\n+\r\n+\r\n+    /**\r\n+     * Construct a new ContainerEvent with the specified parameters.\r\n+     *\r\n+     * @param container Container on which this event occurred\r\n+     * @param type Event type\r\n+     * @param data Event data\r\n+     */\r\n+    public ContainerEvent(Container container, String type, Object data) {\r\n+\r\n+        super(container);\r\n+        this.container = container;\r\n+        this.type = type;\r\n+        this.data = data;\r\n+\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Return the event data of this event.\r\n+     */\r\n+    public Object getData() {\r\n+\r\n+        return (this.data);\r\n+\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Return the Container on which this event occurred.\r\n+     */\r\n+    public Container getContainer() {\r\n+\r\n+        return (this.container);\r\n+\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Return the event type of this event.\r\n+     */\r\n+    public String getType() {\r\n+\r\n+        return (this.type);\r\n+\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Return a string representation of this event.\r\n+     */\r\n+    public String toString() {\r\n+\r\n+        return (\"ContainerEvent['\" + getContainer() + \"','\" +\r\n+                getType() + \"','\" + getData() + \"']\");\r\n+\r\n+    }\r\n+\r\n+\r\n+}\r"
        },
        {
            "sha": "8ad94a28bf81cb98a91728bb998699e4ace549a5",
            "filename": "java/org/apache/catalina/ContainerListener.java",
            "status": "added",
            "additions": 43,
            "deletions": 0,
            "changes": 43,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FContainerListener.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FContainerListener.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FContainerListener.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,43 @@\n+/*\r\n+ * Copyright 1999,2004 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+\r\n+package org.apache.catalina;\r\n+\r\n+\r\n+\r\n+\r\n+/**\r\n+ * Interface defining a listener for significant Container generated events.\r\n+ * Note that \"container start\" and \"container stop\" events are normally\r\n+ * LifecycleEvents, not ContainerEvents.\r\n+ *\r\n+ * @author Craig R. McClanahan\r\n+ * @version $Revision: 302726 $ $Date: 2004-02-27 15:59:07 +0100 (ven., 27 f\u00e9vr. 2004) $\r\n+ */\r\n+\r\n+public interface ContainerListener {\r\n+\r\n+\r\n+    /**\r\n+     * Acknowledge the occurrence of the specified event.\r\n+     *\r\n+     * @param event ContainerEvent that has occurred\r\n+     */\r\n+    public void containerEvent(ContainerEvent event);\r\n+\r\n+\r\n+}\r"
        },
        {
            "sha": "e3807b675e717388e3dec29efc88a40b06bf5fc9",
            "filename": "java/org/apache/catalina/ContainerServlet.java",
            "status": "added",
            "additions": 52,
            "deletions": 0,
            "changes": 52,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FContainerServlet.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FContainerServlet.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FContainerServlet.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9",
            "patch": "@@ -0,0 +1,52 @@\n+/*\r\n+ * Copyright 1999-2001,2004 The Apache Software Foundation.\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+\r\n+package org.apache.catalina;\r\n+\r\n+\r\n+/**\r\n+ * A <b>ContainerServlet</b> is a servlet that has access to Catalina\r\n+ * internal functionality, and is loaded from the Catalina class loader\r\n+ * instead of the web application class loader.  The property setter\r\n+ * methods must be called by the container whenever a new instance of\r\n+ * this servlet is put into service.\r\n+ *\r\n+ * @author Craig R. McClanahan\r\n+ * @version $Revision: 302726 $ $Date: 2004-02-27 15:59:07 +0100 (ven., 27 f\u00e9vr. 2004) $\r\n+ */\r\n+\r\n+public interface ContainerServlet {\r\n+\r\n+\r\n+    // ------------------------------------------------------------- Properties\r\n+\r\n+\r\n+    /**\r\n+     * Return the Wrapper with which this Servlet is associated.\r\n+     */\r\n+    public Wrapper getWrapper();\r\n+\r\n+\r\n+    /**\r\n+     * Set the Wrapper with which this Servlet is associated.\r\n+     *\r\n+     * @param wrapper The new associated Wrapper\r\n+     */\r\n+    public void setWrapper(Wrapper wrapper);\r\n+\r\n+\r\n+}\r"
        },
        {
            "sha": "25a31b21c47eee78a62fd6f853fde8f675b77b5e",
            "filename": "java/org/apache/catalina/Context.java",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FContext.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FContext.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FContext.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "57081b64735efec029f072fa951b51baee619647",
            "filename": "java/org/apache/catalina/Engine.java",
            "status": "added",
            "additions": 95,
            "deletions": 0,
            "changes": 95,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FEngine.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FEngine.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FEngine.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "4ab50cf162c2a34a84b645e1494c763e9110f436",
            "filename": "java/org/apache/catalina/Globals.java",
            "status": "added",
            "additions": 324,
            "deletions": 0,
            "changes": 324,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FGlobals.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FGlobals.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FGlobals.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "7ed17807a8ce24b48cca567cfe9f254194947050",
            "filename": "java/org/apache/catalina/Group.java",
            "status": "added",
            "additions": 122,
            "deletions": 0,
            "changes": 122,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FGroup.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FGroup.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FGroup.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "ce831ffd4557b81770c917653d1a4a8932e114b9",
            "filename": "java/org/apache/catalina/Host.java",
            "status": "added",
            "additions": 218,
            "deletions": 0,
            "changes": 218,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FHost.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FHost.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FHost.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "5898a316898c4222766f4d7489535efe7e01ec92",
            "filename": "java/org/apache/catalina/InstanceEvent.java",
            "status": "added",
            "additions": 448,
            "deletions": 0,
            "changes": 448,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FInstanceEvent.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FInstanceEvent.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FInstanceEvent.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "7de8b1d949541426e8e7bcfcc00554f2d3431fde",
            "filename": "java/org/apache/catalina/InstanceListener.java",
            "status": "added",
            "additions": 41,
            "deletions": 0,
            "changes": 41,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FInstanceListener.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FInstanceListener.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FInstanceListener.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "f5d40d70afa512af32adff14ecbece86a4093a9b",
            "filename": "java/org/apache/catalina/Lifecycle.java",
            "status": "added",
            "additions": 141,
            "deletions": 0,
            "changes": 141,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FLifecycle.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FLifecycle.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FLifecycle.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "24158643715e187afe321496899a9d19b8e99a60",
            "filename": "java/org/apache/catalina/LifecycleEvent.java",
            "status": "added",
            "additions": 125,
            "deletions": 0,
            "changes": 125,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FLifecycleEvent.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FLifecycleEvent.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FLifecycleEvent.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "f1883841d2885c55518c99746c084a1247f5e543",
            "filename": "java/org/apache/catalina/LifecycleException.java",
            "status": "added",
            "additions": 144,
            "deletions": 0,
            "changes": 144,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FLifecycleException.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FLifecycleException.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FLifecycleException.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "1fb8237e09fa580adb49e49f92be56d45d10d0b1",
            "filename": "java/org/apache/catalina/LifecycleListener.java",
            "status": "added",
            "additions": 43,
            "deletions": 0,
            "changes": 43,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FLifecycleListener.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FLifecycleListener.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FLifecycleListener.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "216f51d23dbebe3d83951ec05a69a2930e79c056",
            "filename": "java/org/apache/catalina/Loader.java",
            "status": "added",
            "additions": 168,
            "deletions": 0,
            "changes": 168,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FLoader.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FLoader.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FLoader.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "0cfe060c144c76ca66021c8b4413b883486ec7a8",
            "filename": "java/org/apache/catalina/Manager.java",
            "status": "added",
            "additions": 365,
            "deletions": 0,
            "changes": 365,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FManager.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FManager.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FManager.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "a3cdd4b7e44942d2d64bbd2de1971722a411bed4",
            "filename": "java/org/apache/catalina/Pipeline.java",
            "status": "added",
            "additions": 120,
            "deletions": 0,
            "changes": 120,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FPipeline.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FPipeline.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FPipeline.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "e6e304618d8a2a765f5fddee7a45e5cf233b24f0",
            "filename": "java/org/apache/catalina/Realm.java",
            "status": "added",
            "additions": 201,
            "deletions": 0,
            "changes": 201,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FRealm.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FRealm.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FRealm.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "09d790c77ad0003b5a15209dcb67fdda79f50a53",
            "filename": "java/org/apache/catalina/Role.java",
            "status": "added",
            "additions": 75,
            "deletions": 0,
            "changes": 75,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FRole.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FRole.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FRole.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "e670a0a6367290d6881d21e446fb1364d0891e9e",
            "filename": "java/org/apache/catalina/Server.java",
            "status": "added",
            "additions": 152,
            "deletions": 0,
            "changes": 152,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FServer.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FServer.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FServer.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "e94cb10e300e6686c8ceebc3b882b600d2cccd38",
            "filename": "java/org/apache/catalina/ServerFactory.java",
            "status": "added",
            "additions": 76,
            "deletions": 0,
            "changes": 76,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FServerFactory.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FServerFactory.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FServerFactory.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "21c5ae716f7fed6d43193bc5391a520cc1ea6500",
            "filename": "java/org/apache/catalina/Service.java",
            "status": "added",
            "additions": 131,
            "deletions": 0,
            "changes": 131,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FService.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FService.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FService.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "083831f6867ef874650b524d814500efc660705a",
            "filename": "java/org/apache/catalina/Session.java",
            "status": "added",
            "additions": 302,
            "deletions": 0,
            "changes": 302,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FSession.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FSession.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FSession.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "f9403d3b9f549fd804a6ee6b326742d94d7362cf",
            "filename": "java/org/apache/catalina/SessionEvent.java",
            "status": "added",
            "additions": 111,
            "deletions": 0,
            "changes": 111,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FSessionEvent.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FSessionEvent.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FSessionEvent.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "e46ce64f0f43ce8ab4baaa69b06aa90709edf54a",
            "filename": "java/org/apache/catalina/SessionListener.java",
            "status": "added",
            "additions": 41,
            "deletions": 0,
            "changes": 41,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FSessionListener.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FSessionListener.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FSessionListener.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "49245db23e54a623303bba9523797879d29fee10",
            "filename": "java/org/apache/catalina/Store.java",
            "status": "added",
            "additions": 144,
            "deletions": 0,
            "changes": 144,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FStore.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FStore.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FStore.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "15aea865e696e58c4d69eb5a8fc3b4e75e8dbc51",
            "filename": "java/org/apache/catalina/User.java",
            "status": "added",
            "additions": 173,
            "deletions": 0,
            "changes": 173,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FUser.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FUser.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FUser.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "e83515b206dc09124a7b9ed2a30ff0c8125a5fd6",
            "filename": "java/org/apache/catalina/UserDatabase.java",
            "status": "added",
            "additions": 173,
            "deletions": 0,
            "changes": 173,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FUserDatabase.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FUserDatabase.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FUserDatabase.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "71de7a7a43255d3413c50eb5c5b754048678cbee",
            "filename": "java/org/apache/catalina/Valve.java",
            "status": "added",
            "additions": 132,
            "deletions": 0,
            "changes": 132,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FValve.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FValve.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FValve.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "57a8c31812f40bc9c0797a25332d7cbc838bfe47",
            "filename": "java/org/apache/catalina/Wrapper.java",
            "status": "added",
            "additions": 330,
            "deletions": 0,
            "changes": 330,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FWrapper.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2FWrapper.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2FWrapper.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "a10a67f9fe532ddd64ef7346008b272483c4bc74",
            "filename": "java/org/apache/catalina/ant/AbstractCatalinaTask.java",
            "status": "added",
            "additions": 288,
            "deletions": 0,
            "changes": 288,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FAbstractCatalinaTask.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FAbstractCatalinaTask.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2FAbstractCatalinaTask.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "3efdc233b84fe8eaaf70ec5d162e670b5a08e5f0",
            "filename": "java/org/apache/catalina/ant/BaseRedirectorHelperTask.java",
            "status": "added",
            "additions": 370,
            "deletions": 0,
            "changes": 370,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FBaseRedirectorHelperTask.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FBaseRedirectorHelperTask.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2FBaseRedirectorHelperTask.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "10d423214008e21ee29a1eabbb8a525a426760c4",
            "filename": "java/org/apache/catalina/ant/DeployTask.java",
            "status": "added",
            "additions": 205,
            "deletions": 0,
            "changes": 205,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FDeployTask.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FDeployTask.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2FDeployTask.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "287d7ecccee25c82bd2d45e2cf87e92a609be0f2",
            "filename": "java/org/apache/catalina/ant/InstallTask.java",
            "status": "added",
            "additions": 118,
            "deletions": 0,
            "changes": 118,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FInstallTask.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FInstallTask.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2FInstallTask.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "81ef5e9846c222c8900adef11bfce86a41bd701c",
            "filename": "java/org/apache/catalina/ant/JKStatusUpdateTask.java",
            "status": "added",
            "additions": 415,
            "deletions": 0,
            "changes": 415,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FJKStatusUpdateTask.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FJKStatusUpdateTask.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2FJKStatusUpdateTask.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "ff38b310d0c8c18b605c8745f0b07fd4f43283fb",
            "filename": "java/org/apache/catalina/ant/JMXGetTask.java",
            "status": "added",
            "additions": 95,
            "deletions": 0,
            "changes": 95,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FJMXGetTask.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FJMXGetTask.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2FJMXGetTask.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "f9505a34a95588d7ce5b403c6ffd23f2924399ec",
            "filename": "java/org/apache/catalina/ant/JMXQueryTask.java",
            "status": "added",
            "additions": 78,
            "deletions": 0,
            "changes": 78,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FJMXQueryTask.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FJMXQueryTask.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2FJMXQueryTask.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "64660e37109fd98d022e9a685e4666414f3d31d7",
            "filename": "java/org/apache/catalina/ant/JMXSetTask.java",
            "status": "added",
            "additions": 118,
            "deletions": 0,
            "changes": 118,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FJMXSetTask.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FJMXSetTask.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2FJMXSetTask.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "7fa34b7f42463c0f2a7b328ff41c2948ef737165",
            "filename": "java/org/apache/catalina/ant/ListTask.java",
            "status": "added",
            "additions": 54,
            "deletions": 0,
            "changes": 54,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FListTask.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FListTask.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2FListTask.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "25ea5e144fcbd1ee6c3c2bc1ab24a690a511a230",
            "filename": "java/org/apache/catalina/ant/ReloadTask.java",
            "status": "added",
            "additions": 81,
            "deletions": 0,
            "changes": 81,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FReloadTask.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FReloadTask.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2FReloadTask.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "93f2681a293c1a5db03108c484bda4de36c446eb",
            "filename": "java/org/apache/catalina/ant/RemoveTask.java",
            "status": "added",
            "additions": 74,
            "deletions": 0,
            "changes": 74,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FRemoveTask.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FRemoveTask.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2FRemoveTask.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "ae1ee87e240f3d49994a197340e0e1946fcf6f3e",
            "filename": "java/org/apache/catalina/ant/ResourcesTask.java",
            "status": "added",
            "additions": 73,
            "deletions": 0,
            "changes": 73,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FResourcesTask.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FResourcesTask.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2FResourcesTask.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "864504740fe68b43f1b132ab23206ebeb3914787",
            "filename": "java/org/apache/catalina/ant/RolesTask.java",
            "status": "added",
            "additions": 54,
            "deletions": 0,
            "changes": 54,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FRolesTask.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FRolesTask.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2FRolesTask.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "40ba32e84c9947c1c2e6f8236b5ea4429fa7b0a8",
            "filename": "java/org/apache/catalina/ant/ServerinfoTask.java",
            "status": "added",
            "additions": 47,
            "deletions": 0,
            "changes": 47,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FServerinfoTask.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FServerinfoTask.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2FServerinfoTask.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "1b099679c4ca1e012c3efe837923421078d10816",
            "filename": "java/org/apache/catalina/ant/SessionsTask.java",
            "status": "added",
            "additions": 75,
            "deletions": 0,
            "changes": 75,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FSessionsTask.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FSessionsTask.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2FSessionsTask.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "3424d2e16bbbfbcd2312730c2dbfe388c9c5f3be",
            "filename": "java/org/apache/catalina/ant/StartTask.java",
            "status": "added",
            "additions": 80,
            "deletions": 0,
            "changes": 80,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FStartTask.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FStartTask.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2FStartTask.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "ac4490e0922c50bf0423e5f41702190815bb0688",
            "filename": "java/org/apache/catalina/ant/StopTask.java",
            "status": "added",
            "additions": 80,
            "deletions": 0,
            "changes": 80,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FStopTask.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FStopTask.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2FStopTask.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "37f7bd455ccd81d1099dbe86457076c785df84b4",
            "filename": "java/org/apache/catalina/ant/UndeployTask.java",
            "status": "added",
            "additions": 71,
            "deletions": 0,
            "changes": 71,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FUndeployTask.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FUndeployTask.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2FUndeployTask.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "f1734db49e2787f46fafe9e90d465e5ff582e1d6",
            "filename": "java/org/apache/catalina/ant/ValidatorTask.java",
            "status": "added",
            "additions": 114,
            "deletions": 0,
            "changes": 114,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FValidatorTask.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2FValidatorTask.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2FValidatorTask.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "831c76a04988a0a00c7cccbdb62e41f56808424e",
            "filename": "java/org/apache/catalina/ant/antlib.xml",
            "status": "added",
            "additions": 42,
            "deletions": 0,
            "changes": 42,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fantlib.xml",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fantlib.xml",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fantlib.xml?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "11d4292249c2d7db3f06a843f08b28184d0ebd48",
            "filename": "java/org/apache/catalina/ant/catalina.tasks",
            "status": "added",
            "additions": 22,
            "deletions": 0,
            "changes": 22,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fcatalina.tasks",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fcatalina.tasks",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fcatalina.tasks?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "5a61d6ff7bd4aeb656c5c4a94dfdc9a7a9225e79",
            "filename": "java/org/apache/catalina/ant/jmx/Arg.java",
            "status": "added",
            "additions": 46,
            "deletions": 0,
            "changes": 46,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FArg.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FArg.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FArg.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "41f5478221c9beb4a7e12cc1d119c9ec0a8810bb",
            "filename": "java/org/apache/catalina/ant/jmx/JMXAccessorCondition.java",
            "status": "added",
            "additions": 400,
            "deletions": 0,
            "changes": 400,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FJMXAccessorCondition.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FJMXAccessorCondition.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FJMXAccessorCondition.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "c136fd4b0cdb9256381ed90287ddfd80a8f9245a",
            "filename": "java/org/apache/catalina/ant/jmx/JMXAccessorCreateTask.java",
            "status": "added",
            "additions": 206,
            "deletions": 0,
            "changes": 206,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FJMXAccessorCreateTask.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FJMXAccessorCreateTask.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FJMXAccessorCreateTask.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "520d5e8ea534e0ce64b9cd7ba2af423a28093157",
            "filename": "java/org/apache/catalina/ant/jmx/JMXAccessorEqualsCondition.java",
            "status": "added",
            "additions": 250,
            "deletions": 0,
            "changes": 250,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FJMXAccessorEqualsCondition.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FJMXAccessorEqualsCondition.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FJMXAccessorEqualsCondition.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "ff8472fd05526ccb6637842eafb5affd35baf61f",
            "filename": "java/org/apache/catalina/ant/jmx/JMXAccessorGetTask.java",
            "status": "added",
            "additions": 144,
            "deletions": 0,
            "changes": 144,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FJMXAccessorGetTask.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FJMXAccessorGetTask.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FJMXAccessorGetTask.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "cb3521ada7d3da9ff4e13fa4e3078607238fb616",
            "filename": "java/org/apache/catalina/ant/jmx/JMXAccessorInvokeTask.java",
            "status": "added",
            "additions": 206,
            "deletions": 0,
            "changes": 206,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FJMXAccessorInvokeTask.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FJMXAccessorInvokeTask.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FJMXAccessorInvokeTask.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "8aa749b4f58fa1d57ff5fd103371b51fe56d20d9",
            "filename": "java/org/apache/catalina/ant/jmx/JMXAccessorQueryTask.java",
            "status": "added",
            "additions": 214,
            "deletions": 0,
            "changes": 214,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FJMXAccessorQueryTask.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FJMXAccessorQueryTask.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FJMXAccessorQueryTask.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "b9e6ea00d54cfa871084e0c637be77c1123b6c51",
            "filename": "java/org/apache/catalina/ant/jmx/JMXAccessorSetTask.java",
            "status": "added",
            "additions": 220,
            "deletions": 0,
            "changes": 220,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FJMXAccessorSetTask.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FJMXAccessorSetTask.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FJMXAccessorSetTask.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "4661b6a4a99d1453b230730564ca1f353c6b2a66",
            "filename": "java/org/apache/catalina/ant/jmx/JMXAccessorTask.java",
            "status": "added",
            "additions": 731,
            "deletions": 0,
            "changes": 731,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FJMXAccessorTask.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FJMXAccessorTask.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FJMXAccessorTask.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "ea1eea954269d1d254207e27dc0687be770343f3",
            "filename": "java/org/apache/catalina/ant/jmx/JMXAccessorUnregisterTask.java",
            "status": "added",
            "additions": 112,
            "deletions": 0,
            "changes": 112,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FJMXAccessorUnregisterTask.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FJMXAccessorUnregisterTask.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2FJMXAccessorUnregisterTask.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "f6b1cc411f7358a33633ca7972a8556be4c186a7",
            "filename": "java/org/apache/catalina/ant/jmx/antlib.xml",
            "status": "added",
            "additions": 30,
            "deletions": 0,
            "changes": 30,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2Fantlib.xml",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2Fantlib.xml",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2Fantlib.xml?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "2eee6dd7dc5c13dad5e2e4180712c7270d254e62",
            "filename": "java/org/apache/catalina/ant/jmx/jmxaccessor.tasks",
            "status": "added",
            "additions": 8,
            "deletions": 0,
            "changes": 8,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2Fjmxaccessor.tasks",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2Fjmxaccessor.tasks",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2Fjmxaccessor.tasks?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "50c3d7af147447d40f06b9dcd81228f46cd45133",
            "filename": "java/org/apache/catalina/ant/jmx/package.html",
            "status": "added",
            "additions": 61,
            "deletions": 0,
            "changes": 61,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2Fpackage.html",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2Fpackage.html",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fjmx%2Fpackage.html?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "44f38c9cfa92cd0973ffdd80bfdb05b690942044",
            "filename": "java/org/apache/catalina/ant/package.html",
            "status": "added",
            "additions": 86,
            "deletions": 0,
            "changes": 86,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fpackage.html",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fpackage.html",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fant%2Fpackage.html?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "2dcc640243059f7cde40e6a0cd944dd517d3d8f3",
            "filename": "java/org/apache/catalina/authenticator/AuthenticatorBase.java",
            "status": "added",
            "additions": 880,
            "deletions": 0,
            "changes": 880,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FAuthenticatorBase.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FAuthenticatorBase.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FAuthenticatorBase.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "63fb82d4cefc0b2c4122cd1e2aab35efd4f67ee7",
            "filename": "java/org/apache/catalina/authenticator/BasicAuthenticator.java",
            "status": "added",
            "additions": 211,
            "deletions": 0,
            "changes": 211,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FBasicAuthenticator.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FBasicAuthenticator.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FBasicAuthenticator.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "cc21df7fb92465cb915c2d498f70f490bdfedccf",
            "filename": "java/org/apache/catalina/authenticator/Constants.java",
            "status": "added",
            "additions": 137,
            "deletions": 0,
            "changes": 137,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FConstants.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FConstants.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FConstants.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "0f1423af69665bb02cec1e00fe7d4fe942e0b974",
            "filename": "java/org/apache/catalina/authenticator/DigestAuthenticator.java",
            "status": "added",
            "additions": 424,
            "deletions": 0,
            "changes": 424,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FDigestAuthenticator.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FDigestAuthenticator.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FDigestAuthenticator.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "52c17755010fceb7059c12080a93fdfcc6986359",
            "filename": "java/org/apache/catalina/authenticator/FormAuthenticator.java",
            "status": "added",
            "additions": 524,
            "deletions": 0,
            "changes": 524,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FFormAuthenticator.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FFormAuthenticator.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FFormAuthenticator.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "84e91b3b9269696dc7c5711dbd16d502ceed13c8",
            "filename": "java/org/apache/catalina/authenticator/LocalStrings.properties",
            "status": "added",
            "additions": 14,
            "deletions": 0,
            "changes": 14,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FLocalStrings.properties",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FLocalStrings.properties",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FLocalStrings.properties?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "b38497c92c86aaf71dc948e3d308b82fa865e16c",
            "filename": "java/org/apache/catalina/authenticator/LocalStrings_es.properties",
            "status": "added",
            "additions": 12,
            "deletions": 0,
            "changes": 12,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FLocalStrings_es.properties",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FLocalStrings_es.properties",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FLocalStrings_es.properties?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "ed45aaaff853055e182b81e588c0d44ff5789a62",
            "filename": "java/org/apache/catalina/authenticator/LocalStrings_fr.properties",
            "status": "added",
            "additions": 12,
            "deletions": 0,
            "changes": 12,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FLocalStrings_fr.properties",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FLocalStrings_fr.properties",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FLocalStrings_fr.properties?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "707a9719f16d2be5dbbb1164f79ba9da51dd75c9",
            "filename": "java/org/apache/catalina/authenticator/LocalStrings_ja.properties",
            "status": "added",
            "additions": 13,
            "deletions": 0,
            "changes": 13,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FLocalStrings_ja.properties",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FLocalStrings_ja.properties",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FLocalStrings_ja.properties?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "e98452b645848609cf7f255080017fd00c733e84",
            "filename": "java/org/apache/catalina/authenticator/NonLoginAuthenticator.java",
            "status": "added",
            "additions": 102,
            "deletions": 0,
            "changes": 102,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FNonLoginAuthenticator.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FNonLoginAuthenticator.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FNonLoginAuthenticator.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "153fbf3129ffb6f0529cea745d44028f515c904f",
            "filename": "java/org/apache/catalina/authenticator/SSLAuthenticator.java",
            "status": "added",
            "additions": 196,
            "deletions": 0,
            "changes": 196,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FSSLAuthenticator.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FSSLAuthenticator.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FSSLAuthenticator.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "327da8f05f0c8a3575eb15359645c27833912625",
            "filename": "java/org/apache/catalina/authenticator/SavedRequest.java",
            "status": "added",
            "additions": 180,
            "deletions": 0,
            "changes": 180,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FSavedRequest.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FSavedRequest.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FSavedRequest.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "b175a33b7a55910d9362c4375ab31f95990d8cbd",
            "filename": "java/org/apache/catalina/authenticator/SingleSignOn.java",
            "status": "added",
            "additions": 701,
            "deletions": 0,
            "changes": 701,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FSingleSignOn.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FSingleSignOn.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FSingleSignOn.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "3d7b9613dafbf9535bbe2c537a92597a00a2e34f",
            "filename": "java/org/apache/catalina/authenticator/SingleSignOnEntry.java",
            "status": "added",
            "additions": 189,
            "deletions": 0,
            "changes": 189,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FSingleSignOnEntry.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FSingleSignOnEntry.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2FSingleSignOnEntry.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "6a55b7e7df3cbe8551872f50e8b98f0db21799aa",
            "filename": "java/org/apache/catalina/authenticator/mbeans-descriptors.xml",
            "status": "added",
            "additions": 148,
            "deletions": 0,
            "changes": 148,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2Fmbeans-descriptors.xml",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2Fmbeans-descriptors.xml",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2Fmbeans-descriptors.xml?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "6c554d47d313cafaf48a5889e4a8e6efba5f48cd",
            "filename": "java/org/apache/catalina/authenticator/package.html",
            "status": "added",
            "additions": 38,
            "deletions": 0,
            "changes": 38,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2Fpackage.html",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2Fpackage.html",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fauthenticator%2Fpackage.html?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "0ed96c69d73af799f9fad4c225ca17bfa5a7b5a8",
            "filename": "java/org/apache/catalina/connector/ClientAbortException.java",
            "status": "added",
            "additions": 144,
            "deletions": 0,
            "changes": 144,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FClientAbortException.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FClientAbortException.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FClientAbortException.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "234771cf679f0d9b413ee7ff2f0d679286ddcb36",
            "filename": "java/org/apache/catalina/connector/Connector.java",
            "status": "added",
            "additions": 1264,
            "deletions": 0,
            "changes": 1264,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FConnector.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FConnector.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FConnector.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "26ca627026496732b7184abdc7c0be94474ab9b3",
            "filename": "java/org/apache/catalina/connector/Constants.java",
            "status": "added",
            "additions": 48,
            "deletions": 0,
            "changes": 48,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FConstants.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FConstants.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FConstants.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "af017d8465a162e00134c6df6e0165395b53b718",
            "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
            "status": "added",
            "additions": 619,
            "deletions": 0,
            "changes": 619,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FCoyoteAdapter.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FCoyoteAdapter.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FCoyoteAdapter.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "a0dfeb80d2c7b74aa5732752c40aa5f4cbf8d0ae",
            "filename": "java/org/apache/catalina/connector/CoyoteInputStream.java",
            "status": "added",
            "additions": 233,
            "deletions": 0,
            "changes": 233,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FCoyoteInputStream.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FCoyoteInputStream.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FCoyoteInputStream.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "e5119007821f61f5574db0198f614592ffe0cb26",
            "filename": "java/org/apache/catalina/connector/CoyoteOutputStream.java",
            "status": "added",
            "additions": 117,
            "deletions": 0,
            "changes": 117,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FCoyoteOutputStream.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FCoyoteOutputStream.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FCoyoteOutputStream.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "3fda99295406d1811b3829c86c92b043c3373656",
            "filename": "java/org/apache/catalina/connector/CoyotePrincipal.java",
            "status": "added",
            "additions": 74,
            "deletions": 0,
            "changes": 74,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FCoyotePrincipal.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FCoyotePrincipal.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FCoyotePrincipal.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "a513bc59017df622d036ab435b50ba9590dc4109",
            "filename": "java/org/apache/catalina/connector/CoyoteReader.java",
            "status": "added",
            "additions": 207,
            "deletions": 0,
            "changes": 207,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FCoyoteReader.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FCoyoteReader.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FCoyoteReader.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "4651736cdd231f0ee40740e748141deaca7a9d53",
            "filename": "java/org/apache/catalina/connector/CoyoteWriter.java",
            "status": "added",
            "additions": 288,
            "deletions": 0,
            "changes": 288,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FCoyoteWriter.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FCoyoteWriter.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FCoyoteWriter.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "cbc3847929896871e3cf23bf3c214fb1086967c9",
            "filename": "java/org/apache/catalina/connector/InputBuffer.java",
            "status": "added",
            "additions": 498,
            "deletions": 0,
            "changes": 498,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FInputBuffer.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FInputBuffer.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FInputBuffer.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "10c46cf79aa4fb35a231dfd0e4f2722ea2978e85",
            "filename": "java/org/apache/catalina/connector/LocalStrings.properties",
            "status": "added",
            "additions": 64,
            "deletions": 0,
            "changes": 64,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FLocalStrings.properties",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FLocalStrings.properties",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FLocalStrings.properties?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "a305490e61a25bc98fd932f54838a01f83096ceb",
            "filename": "java/org/apache/catalina/connector/LocalStrings_es.properties",
            "status": "added",
            "additions": 56,
            "deletions": 0,
            "changes": 56,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FLocalStrings_es.properties",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FLocalStrings_es.properties",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FLocalStrings_es.properties?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "4010c179e3d0c1f920950b63ee0da453620c5068",
            "filename": "java/org/apache/catalina/connector/LocalStrings_fr.properties",
            "status": "added",
            "additions": 58,
            "deletions": 0,
            "changes": 58,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FLocalStrings_fr.properties",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FLocalStrings_fr.properties",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FLocalStrings_fr.properties?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "7a75aa0ecd32f827d7519947f4229c5f0ec68b00",
            "filename": "java/org/apache/catalina/connector/LocalStrings_ja.properties",
            "status": "added",
            "additions": 58,
            "deletions": 0,
            "changes": 58,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FLocalStrings_ja.properties",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FLocalStrings_ja.properties",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FLocalStrings_ja.properties?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "80ebe95dd8e529a730a0b17124e03683fab36adc",
            "filename": "java/org/apache/catalina/connector/MapperListener.java",
            "status": "added",
            "additions": 504,
            "deletions": 0,
            "changes": 504,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FMapperListener.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FMapperListener.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FMapperListener.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "505cf13e2a5d2c945cccb3271f9e6701d32c2bb1",
            "filename": "java/org/apache/catalina/connector/OutputBuffer.java",
            "status": "added",
            "additions": 651,
            "deletions": 0,
            "changes": 651,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FOutputBuffer.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FOutputBuffer.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FOutputBuffer.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "fe2d4d426df2ca056317c00a3f580749ff709921",
            "filename": "java/org/apache/catalina/connector/Request.java",
            "status": "added",
            "additions": 2523,
            "deletions": 0,
            "changes": 2523,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FRequest.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FRequest.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FRequest.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "2a5e0aed1f5e312773edc8b7c89d6bae03eee86a",
            "filename": "java/org/apache/catalina/connector/RequestFacade.java",
            "status": "added",
            "additions": 933,
            "deletions": 0,
            "changes": 933,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FRequestFacade.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FRequestFacade.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FRequestFacade.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "c71d2ee3b09b11bc11c7a636e4bdb277ab72024a",
            "filename": "java/org/apache/catalina/connector/Response.java",
            "status": "added",
            "additions": 1549,
            "deletions": 0,
            "changes": 1549,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FResponse.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FResponse.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FResponse.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "90bb95c9c125b6ff88e8cd053a5f6e85b2edb13d",
            "filename": "java/org/apache/catalina/connector/ResponseFacade.java",
            "status": "added",
            "additions": 552,
            "deletions": 0,
            "changes": 552,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FResponseFacade.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FResponseFacade.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2FResponseFacade.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "527b4235fb4111eb638c7d4493934537e61738fd",
            "filename": "java/org/apache/catalina/connector/mbeans-descriptors.xml",
            "status": "added",
            "additions": 198,
            "deletions": 0,
            "changes": 198,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2Fmbeans-descriptors.xml",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2Fmbeans-descriptors.xml",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fconnector%2Fmbeans-descriptors.xml?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "fd3a2a384e5ffd70fa934039c9d4f2a967bc97e8",
            "filename": "java/org/apache/catalina/core/ApplicationContext.java",
            "status": "added",
            "additions": 974,
            "deletions": 0,
            "changes": 974,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationContext.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationContext.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationContext.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "78d4aca2276b72a7ea71dda39519248b37a8098c",
            "filename": "java/org/apache/catalina/core/ApplicationContextFacade.java",
            "status": "added",
            "additions": 508,
            "deletions": 0,
            "changes": 508,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationContextFacade.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationContextFacade.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationContextFacade.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "9a20f5bb91752a3e7e7107e731ef7363e03d5f17",
            "filename": "java/org/apache/catalina/core/ApplicationDispatcher.java",
            "status": "added",
            "additions": 961,
            "deletions": 0,
            "changes": 961,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationDispatcher.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationDispatcher.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationDispatcher.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "ca36d47212c740e4b53d28b7f499160029355027",
            "filename": "java/org/apache/catalina/core/ApplicationFilterChain.java",
            "status": "added",
            "additions": 342,
            "deletions": 0,
            "changes": 342,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationFilterChain.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationFilterChain.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationFilterChain.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "749c949becabd6b66a8a2fcda87fdecaac6e8bbe",
            "filename": "java/org/apache/catalina/core/ApplicationFilterConfig.java",
            "status": "added",
            "additions": 314,
            "deletions": 0,
            "changes": 314,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationFilterConfig.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationFilterConfig.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationFilterConfig.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "d178c46fd64ec381224a315ce687cd650c4143d8",
            "filename": "java/org/apache/catalina/core/ApplicationFilterFactory.java",
            "status": "added",
            "additions": 339,
            "deletions": 0,
            "changes": 339,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationFilterFactory.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationFilterFactory.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationFilterFactory.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "58c6a4284d8025c47c6679ac9e609c0ce9c2e7ed",
            "filename": "java/org/apache/catalina/core/ApplicationHttpRequest.java",
            "status": "added",
            "additions": 950,
            "deletions": 0,
            "changes": 950,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationHttpRequest.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationHttpRequest.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationHttpRequest.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "9fd422b5c404577007b98de0de5d1b7677e734ea",
            "filename": "java/org/apache/catalina/core/ApplicationHttpResponse.java",
            "status": "added",
            "additions": 393,
            "deletions": 0,
            "changes": 393,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationHttpResponse.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationHttpResponse.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationHttpResponse.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "6eb1c734b54c39e6144d9bdaf19979d3818f0296",
            "filename": "java/org/apache/catalina/core/ApplicationRequest.java",
            "status": "added",
            "additions": 209,
            "deletions": 0,
            "changes": 209,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationRequest.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationRequest.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationRequest.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "d4b1870eb47e94c60d8fc397ea8bf4a931ca2ea2",
            "filename": "java/org/apache/catalina/core/ApplicationResponse.java",
            "status": "added",
            "additions": 201,
            "deletions": 0,
            "changes": 201,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationResponse.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationResponse.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FApplicationResponse.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "72d77dbb50e918228f368d1a3ec7ad5e43d65bf8",
            "filename": "java/org/apache/catalina/core/AprLifecycleListener.java",
            "status": "added",
            "additions": 118,
            "deletions": 0,
            "changes": 118,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FAprLifecycleListener.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FAprLifecycleListener.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FAprLifecycleListener.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "0c6d9084d4cc51e9037748ce3bbf9ef33a7de1f9",
            "filename": "java/org/apache/catalina/core/Constants.java",
            "status": "added",
            "additions": 31,
            "deletions": 0,
            "changes": 31,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FConstants.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FConstants.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FConstants.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "bf604d2798c51425a1133f1adc800a16a60101f8",
            "filename": "java/org/apache/catalina/core/ContainerBase.java",
            "status": "added",
            "additions": 1586,
            "deletions": 0,
            "changes": 1586,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FContainerBase.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FContainerBase.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FContainerBase.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "140f7819ab26aa4140c17fa4da02990700eca894",
            "filename": "java/org/apache/catalina/core/DummyRequest.java",
            "status": "added",
            "additions": 267,
            "deletions": 0,
            "changes": 267,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FDummyRequest.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FDummyRequest.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FDummyRequest.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "574c4ee87c42e6ce8345156cbaa9e2187ac0ee83",
            "filename": "java/org/apache/catalina/core/DummyResponse.java",
            "status": "added",
            "additions": 124,
            "deletions": 0,
            "changes": 124,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FDummyResponse.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FDummyResponse.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FDummyResponse.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "8065a679827127a28f8e187385f3eeddc9e5afd5",
            "filename": "java/org/apache/catalina/core/LocalStrings.properties",
            "status": "added",
            "additions": 187,
            "deletions": 0,
            "changes": 187,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FLocalStrings.properties",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FLocalStrings.properties",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FLocalStrings.properties?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "c8e983d018c6fb1640034af6baa388c25efe61b0",
            "filename": "java/org/apache/catalina/core/LocalStrings_es.properties",
            "status": "added",
            "additions": 172,
            "deletions": 0,
            "changes": 172,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FLocalStrings_es.properties",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FLocalStrings_es.properties",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FLocalStrings_es.properties?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "eb28a396d3ae99de77d83ee2ba0b00bcfa97c7be",
            "filename": "java/org/apache/catalina/core/LocalStrings_fr.properties",
            "status": "added",
            "additions": 164,
            "deletions": 0,
            "changes": 164,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FLocalStrings_fr.properties",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FLocalStrings_fr.properties",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FLocalStrings_fr.properties?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "f591dfdf39538383f1b7145d23d8011befb5e691",
            "filename": "java/org/apache/catalina/core/LocalStrings_ja.properties",
            "status": "added",
            "additions": 172,
            "deletions": 0,
            "changes": 172,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FLocalStrings_ja.properties",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FLocalStrings_ja.properties",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FLocalStrings_ja.properties?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "996265886f5f31e1818a01849f75320015df7d1b",
            "filename": "java/org/apache/catalina/core/NamingContextListener.java",
            "status": "added",
            "additions": 1016,
            "deletions": 0,
            "changes": 1016,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FNamingContextListener.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FNamingContextListener.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FNamingContextListener.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "e2d8c1be55652e56032570df67005d1ba0f59b5f",
            "filename": "java/org/apache/catalina/core/StandardContext.java",
            "status": "added",
            "additions": 5454,
            "deletions": 0,
            "changes": 5454,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardContext.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardContext.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardContext.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "2466d6aa51867fefd28eda21dd15336d869c1ba2",
            "filename": "java/org/apache/catalina/core/StandardContextValve.java",
            "status": "added",
            "additions": 270,
            "deletions": 0,
            "changes": 270,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardContextValve.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardContextValve.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardContextValve.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "976597eb05d72d3437af55bcd7f15426f11b1038",
            "filename": "java/org/apache/catalina/core/StandardEngine.java",
            "status": "added",
            "additions": 537,
            "deletions": 0,
            "changes": 537,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardEngine.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardEngine.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardEngine.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "6869c664aa7d74c3831044113442e0d450887e80",
            "filename": "java/org/apache/catalina/core/StandardEngineValve.java",
            "status": "added",
            "additions": 111,
            "deletions": 0,
            "changes": 111,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardEngineValve.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardEngineValve.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardEngineValve.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "2b1505faf4fe4ea3942d8e538fe51e0a9e6f79a5",
            "filename": "java/org/apache/catalina/core/StandardHost.java",
            "status": "added",
            "additions": 822,
            "deletions": 0,
            "changes": 822,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardHost.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardHost.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardHost.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "248d1cc4bfa4a47b49cc264e7090381dd3d509ff",
            "filename": "java/org/apache/catalina/core/StandardHostValve.java",
            "status": "added",
            "additions": 382,
            "deletions": 0,
            "changes": 382,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardHostValve.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardHostValve.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardHostValve.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "819b21fbabb6927816ef0139a8d03cbdd1afe9fc",
            "filename": "java/org/apache/catalina/core/StandardPipeline.java",
            "status": "added",
            "additions": 561,
            "deletions": 0,
            "changes": 561,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardPipeline.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardPipeline.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardPipeline.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "fb6594de3f40f2df060e69bab3b057a6080b7d44",
            "filename": "java/org/apache/catalina/core/StandardServer.java",
            "status": "added",
            "additions": 826,
            "deletions": 0,
            "changes": 826,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardServer.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardServer.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardServer.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "4ffce27ff5ffd2fe1709d62eae6e7e895591dc1d",
            "filename": "java/org/apache/catalina/core/StandardService.java",
            "status": "added",
            "additions": 630,
            "deletions": 0,
            "changes": 630,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardService.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardService.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardService.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "4bbea6af324e804876e84e1c2d208c5ce730aba2",
            "filename": "java/org/apache/catalina/core/StandardWrapper.java",
            "status": "added",
            "additions": 1843,
            "deletions": 0,
            "changes": 1843,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardWrapper.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardWrapper.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardWrapper.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "c80e2d301848850aec4704757fb65e5c9e330574",
            "filename": "java/org/apache/catalina/core/StandardWrapperFacade.java",
            "status": "added",
            "additions": 88,
            "deletions": 0,
            "changes": 88,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardWrapperFacade.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardWrapperFacade.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardWrapperFacade.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "152ef28b6a055fd3b14c17b90300d7e5dc754130",
            "filename": "java/org/apache/catalina/core/StandardWrapperValve.java",
            "status": "added",
            "additions": 386,
            "deletions": 0,
            "changes": 386,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardWrapperValve.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardWrapperValve.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2FStandardWrapperValve.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "dcf0ac5d0850a22069501b7b6ae36e173a117a1a",
            "filename": "java/org/apache/catalina/core/mbeans-descriptors.xml",
            "status": "added",
            "additions": 686,
            "deletions": 0,
            "changes": 686,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2Fmbeans-descriptors.xml",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fcore%2Fmbeans-descriptors.xml",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fcore%2Fmbeans-descriptors.xml?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "959c2a6788b877c4caa7fbb001658a7ec4338ce2",
            "filename": "java/org/apache/catalina/deploy/ApplicationParameter.java",
            "status": "added",
            "additions": 121,
            "deletions": 0,
            "changes": 121,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FApplicationParameter.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FApplicationParameter.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FApplicationParameter.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "b15c45159d4eea6ed28334566e1e3dfbdd2a4824",
            "filename": "java/org/apache/catalina/deploy/ContextEjb.java",
            "status": "added",
            "additions": 118,
            "deletions": 0,
            "changes": 118,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FContextEjb.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FContextEjb.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FContextEjb.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "d07c003f369eedf182be3df5807eb2a7a5971716",
            "filename": "java/org/apache/catalina/deploy/ContextEnvironment.java",
            "status": "added",
            "additions": 155,
            "deletions": 0,
            "changes": 155,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FContextEnvironment.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FContextEnvironment.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FContextEnvironment.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "8d2a52fa060791564b87078aa868b921a9522e00",
            "filename": "java/org/apache/catalina/deploy/ContextLocalEjb.java",
            "status": "added",
            "additions": 115,
            "deletions": 0,
            "changes": 115,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FContextLocalEjb.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FContextLocalEjb.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FContextLocalEjb.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "57e30c2199dbe4d055d2cfffba7e819c5549f222",
            "filename": "java/org/apache/catalina/deploy/ContextResource.java",
            "status": "added",
            "additions": 99,
            "deletions": 0,
            "changes": 99,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FContextResource.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FContextResource.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FContextResource.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "fda2a8bd03bdd46eacf7ed05f66948424076e07e",
            "filename": "java/org/apache/catalina/deploy/ContextResourceEnvRef.java",
            "status": "added",
            "additions": 75,
            "deletions": 0,
            "changes": 75,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FContextResourceEnvRef.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FContextResourceEnvRef.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FContextResourceEnvRef.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "7b566bba774043f053955103e6b4c80a6168dfd8",
            "filename": "java/org/apache/catalina/deploy/ContextResourceLink.java",
            "status": "added",
            "additions": 76,
            "deletions": 0,
            "changes": 76,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FContextResourceLink.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FContextResourceLink.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FContextResourceLink.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "092aaf6f62ee9cb2532ebc98b0a07ae7f200ed04",
            "filename": "java/org/apache/catalina/deploy/ContextTransaction.java",
            "status": "added",
            "additions": 105,
            "deletions": 0,
            "changes": 105,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FContextTransaction.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FContextTransaction.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FContextTransaction.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "4bcbf55cfaa0b8c614355cd1edf81c8eb818fbf7",
            "filename": "java/org/apache/catalina/deploy/ErrorPage.java",
            "status": "added",
            "additions": 170,
            "deletions": 0,
            "changes": 170,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FErrorPage.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FErrorPage.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FErrorPage.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "d81b083904448e349b69312e1e61e48e7765ab2c",
            "filename": "java/org/apache/catalina/deploy/FilterDef.java",
            "status": "added",
            "additions": 171,
            "deletions": 0,
            "changes": 171,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FFilterDef.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FFilterDef.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FFilterDef.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "2c59e4ef6e2d5b3b5c19b7ce9ef809b849126f0c",
            "filename": "java/org/apache/catalina/deploy/FilterMap.java",
            "status": "added",
            "additions": 214,
            "deletions": 0,
            "changes": 214,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FFilterMap.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FFilterMap.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FFilterMap.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "38ba89647a65149cc51bb171f6c545279ecd8571",
            "filename": "java/org/apache/catalina/deploy/LoginConfig.java",
            "status": "added",
            "additions": 166,
            "deletions": 0,
            "changes": 166,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FLoginConfig.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FLoginConfig.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FLoginConfig.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "3e8276b2de69f4c174423ff041c80bc880d76fb9",
            "filename": "java/org/apache/catalina/deploy/MessageDestination.java",
            "status": "added",
            "additions": 140,
            "deletions": 0,
            "changes": 140,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FMessageDestination.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FMessageDestination.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FMessageDestination.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "542b7493acc8252361cf8cdb05bbc278574496eb",
            "filename": "java/org/apache/catalina/deploy/MessageDestinationRef.java",
            "status": "added",
            "additions": 159,
            "deletions": 0,
            "changes": 159,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FMessageDestinationRef.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FMessageDestinationRef.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FMessageDestinationRef.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "18036aa3ce8054f4b2abdc3d335f097aa6c6f5f4",
            "filename": "java/org/apache/catalina/deploy/NamingResources.java",
            "status": "added",
            "additions": 705,
            "deletions": 0,
            "changes": 705,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FNamingResources.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FNamingResources.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FNamingResources.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "38820967a5a5e6f048529bf8edc726ca2d3dc232",
            "filename": "java/org/apache/catalina/deploy/ResourceBase.java",
            "status": "added",
            "additions": 132,
            "deletions": 0,
            "changes": 132,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FResourceBase.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FResourceBase.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FResourceBase.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "d8c0a827f93332f4e9769b4f7ac11a31affa9ab2",
            "filename": "java/org/apache/catalina/deploy/SecurityCollection.java",
            "status": "added",
            "additions": 348,
            "deletions": 0,
            "changes": 348,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FSecurityCollection.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FSecurityCollection.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FSecurityCollection.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "4d80a8b3722937af97aee4f54a5573c13bcf11be",
            "filename": "java/org/apache/catalina/deploy/SecurityConstraint.java",
            "status": "added",
            "additions": 459,
            "deletions": 0,
            "changes": 459,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FSecurityConstraint.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FSecurityConstraint.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2FSecurityConstraint.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "1d982eb0ba6623aaa42b9d14f7291ea4dcf67bff",
            "filename": "java/org/apache/catalina/deploy/mbeans-descriptors.xml",
            "status": "added",
            "additions": 185,
            "deletions": 0,
            "changes": 185,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2Fmbeans-descriptors.xml",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2Fmbeans-descriptors.xml",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2Fmbeans-descriptors.xml?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "81b742d08e26ab066c2a6b4004b863e33105a302",
            "filename": "java/org/apache/catalina/deploy/package.html",
            "status": "added",
            "additions": 10,
            "deletions": 0,
            "changes": 10,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2Fpackage.html",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2Fpackage.html",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fdeploy%2Fpackage.html?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "7d5aeb0574ca98653f575ab3f23a5d4fda96d7d7",
            "filename": "java/org/apache/catalina/loader/Constants.java",
            "status": "added",
            "additions": 25,
            "deletions": 0,
            "changes": 25,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Floader%2FConstants.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Floader%2FConstants.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Floader%2FConstants.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "08d13e19e2420acae25017f2baf76f8df788e291",
            "filename": "java/org/apache/catalina/loader/LocaStrings_fr.properties",
            "status": "added",
            "additions": 30,
            "deletions": 0,
            "changes": 30,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Floader%2FLocaStrings_fr.properties",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Floader%2FLocaStrings_fr.properties",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Floader%2FLocaStrings_fr.properties?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "9db238f444f5538f247a334f869018690f97122d",
            "filename": "java/org/apache/catalina/loader/LocalStrings.properties",
            "status": "added",
            "additions": 31,
            "deletions": 0,
            "changes": 31,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Floader%2FLocalStrings.properties",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Floader%2FLocalStrings.properties",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Floader%2FLocalStrings.properties?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "ec0c31c14f418f770bfe95feb129d7007ed771c2",
            "filename": "java/org/apache/catalina/loader/LocalStrings_es.properties",
            "status": "added",
            "additions": 31,
            "deletions": 0,
            "changes": 31,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Floader%2FLocalStrings_es.properties",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Floader%2FLocalStrings_es.properties",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Floader%2FLocalStrings_es.properties?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "3f44753a138beeb8b3562fc2ccbf32576f3b9aad",
            "filename": "java/org/apache/catalina/loader/LocalStrings_ja.properties",
            "status": "added",
            "additions": 31,
            "deletions": 0,
            "changes": 31,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Floader%2FLocalStrings_ja.properties",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Floader%2FLocalStrings_ja.properties",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Floader%2FLocalStrings_ja.properties?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "f221f9a749dcc9acf3c38f55751103cac181e30a",
            "filename": "java/org/apache/catalina/loader/Reloader.java",
            "status": "added",
            "additions": 61,
            "deletions": 0,
            "changes": 61,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Floader%2FReloader.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Floader%2FReloader.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Floader%2FReloader.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "a3e01b9689620153735179cb6a553e487b32e2c5",
            "filename": "java/org/apache/catalina/loader/ResourceEntry.java",
            "status": "added",
            "additions": 77,
            "deletions": 0,
            "changes": 77,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Floader%2FResourceEntry.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Floader%2FResourceEntry.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Floader%2FResourceEntry.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "29c246b0e0b7486ad53f71742e18c382ae21fd62",
            "filename": "java/org/apache/catalina/loader/StandardClassLoader.java",
            "status": "added",
            "additions": 60,
            "deletions": 0,
            "changes": 60,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Floader%2FStandardClassLoader.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Floader%2FStandardClassLoader.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Floader%2FStandardClassLoader.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "7f19d69413092558438089e61db944f4d449aa45",
            "filename": "java/org/apache/catalina/loader/StandardClassLoaderMBean.java",
            "status": "added",
            "additions": 28,
            "deletions": 0,
            "changes": 28,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Floader%2FStandardClassLoaderMBean.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Floader%2FStandardClassLoaderMBean.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Floader%2FStandardClassLoaderMBean.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "2f24552961e04519307f52e2ccd534cd8c40a0e2",
            "filename": "java/org/apache/catalina/loader/WebappClassLoader.java",
            "status": "added",
            "additions": 2334,
            "deletions": 0,
            "changes": 2334,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Floader%2FWebappClassLoader.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Floader%2FWebappClassLoader.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Floader%2FWebappClassLoader.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "81d4cee27d6d45836d47e8a79a387bf19171015d",
            "filename": "java/org/apache/catalina/loader/WebappLoader.java",
            "status": "added",
            "additions": 1227,
            "deletions": 0,
            "changes": 1227,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Floader%2FWebappLoader.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Floader%2FWebappLoader.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Floader%2FWebappLoader.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "2f286e783646403cbc0abfca1841b7da8a2d49ef",
            "filename": "java/org/apache/catalina/loader/mbeans-descriptors.xml",
            "status": "added",
            "additions": 59,
            "deletions": 0,
            "changes": 59,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Floader%2Fmbeans-descriptors.xml",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Floader%2Fmbeans-descriptors.xml",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Floader%2Fmbeans-descriptors.xml?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "568afd1abf297d563e80fcbf684b393ddd44f0a8",
            "filename": "java/org/apache/catalina/mbeans-descriptors.xml",
            "status": "added",
            "additions": 150,
            "deletions": 0,
            "changes": 150,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fmbeans-descriptors.xml",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fmbeans-descriptors.xml",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fmbeans-descriptors.xml?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "dc93fe115fc044afcd02e36e3637d0684f888ec2",
            "filename": "java/org/apache/catalina/mbeans/ClassNameMBean.java",
            "status": "added",
            "additions": 75,
            "deletions": 0,
            "changes": 75,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fmbeans%2FClassNameMBean.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fmbeans%2FClassNameMBean.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fmbeans%2FClassNameMBean.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        },
        {
            "sha": "174e3d97f139c9d8f6c290f5ecd26cb583792031",
            "filename": "java/org/apache/catalina/mbeans/ConnectorMBean.java",
            "status": "added",
            "additions": 140,
            "deletions": 0,
            "changes": 140,
            "blob_url": "https://github.com/apache/tomcat/blob/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fmbeans%2FConnectorMBean.java",
            "raw_url": "https://github.com/apache/tomcat/raw/a84fabcbc6fee8a69253ad92a304b4718e96a7c9/java%2Forg%2Fapache%2Fcatalina%2Fmbeans%2FConnectorMBean.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcatalina%2Fmbeans%2FConnectorMBean.java?ref=a84fabcbc6fee8a69253ad92a304b4718e96a7c9"
        }
    ]
}