{
    "sha": "53600cfaf16966ed01b4e888993e7700106ed97b",
    "node_id": "MDY6Q29tbWl0MjA2MzE3OjUzNjAwY2ZhZjE2OTY2ZWQwMWI0ZTg4ODk5M2U3NzAwMTA2ZWQ5N2I=",
    "commit": {
        "author": {
            "name": "lburgazzoli",
            "email": "lburgazzoli@gmail.com",
            "date": "2016-03-02T15:17:55Z"
        },
        "committer": {
            "name": "Claus Ibsen",
            "email": "davsclaus@apache.org",
            "date": "2016-03-04T07:53:04Z"
        },
        "message": "CAMEL-9661 - YAML Data Format",
        "tree": {
            "sha": "d86c9cdd883ed7472f555bac19e7f7fa98ee461c",
            "url": "https://api.github.com/repos/apache/camel/git/trees/d86c9cdd883ed7472f555bac19e7f7fa98ee461c"
        },
        "url": "https://api.github.com/repos/apache/camel/git/commits/53600cfaf16966ed01b4e888993e7700106ed97b",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/camel/commits/53600cfaf16966ed01b4e888993e7700106ed97b",
    "html_url": "https://github.com/apache/camel/commit/53600cfaf16966ed01b4e888993e7700106ed97b",
    "comments_url": "https://api.github.com/repos/apache/camel/commits/53600cfaf16966ed01b4e888993e7700106ed97b/comments",
    "author": {
        "login": "lburgazzoli",
        "id": 1868933,
        "node_id": "MDQ6VXNlcjE4Njg5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1868933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lburgazzoli",
        "html_url": "https://github.com/lburgazzoli",
        "followers_url": "https://api.github.com/users/lburgazzoli/followers",
        "following_url": "https://api.github.com/users/lburgazzoli/following{/other_user}",
        "gists_url": "https://api.github.com/users/lburgazzoli/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/lburgazzoli/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lburgazzoli/subscriptions",
        "organizations_url": "https://api.github.com/users/lburgazzoli/orgs",
        "repos_url": "https://api.github.com/users/lburgazzoli/repos",
        "events_url": "https://api.github.com/users/lburgazzoli/events{/privacy}",
        "received_events_url": "https://api.github.com/users/lburgazzoli/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "davsclaus",
        "id": 477100,
        "node_id": "MDQ6VXNlcjQ3NzEwMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/477100?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davsclaus",
        "html_url": "https://github.com/davsclaus",
        "followers_url": "https://api.github.com/users/davsclaus/followers",
        "following_url": "https://api.github.com/users/davsclaus/following{/other_user}",
        "gists_url": "https://api.github.com/users/davsclaus/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/davsclaus/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/davsclaus/subscriptions",
        "organizations_url": "https://api.github.com/users/davsclaus/orgs",
        "repos_url": "https://api.github.com/users/davsclaus/repos",
        "events_url": "https://api.github.com/users/davsclaus/events{/privacy}",
        "received_events_url": "https://api.github.com/users/davsclaus/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "4a3c464c97c053a776484926700a961b0a3a2967",
            "url": "https://api.github.com/repos/apache/camel/commits/4a3c464c97c053a776484926700a961b0a3a2967",
            "html_url": "https://github.com/apache/camel/commit/4a3c464c97c053a776484926700a961b0a3a2967"
        }
    ],
    "stats": {
        "total": 1385,
        "additions": 1382,
        "deletions": 3
    },
    "files": [
        {
            "sha": "0eb7c9d6fb7b7294f9daf7c49f44bf0ba147f2a6",
            "filename": "apache-camel/pom.xml",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/apache/camel/blob/53600cfaf16966ed01b4e888993e7700106ed97b/apache-camel%2Fpom.xml",
            "raw_url": "https://github.com/apache/camel/raw/53600cfaf16966ed01b4e888993e7700106ed97b/apache-camel%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/apache-camel%2Fpom.xml?ref=53600cfaf16966ed01b4e888993e7700106ed97b",
            "patch": "@@ -734,6 +734,10 @@\n       <groupId>org.apache.camel</groupId>\n       <artifactId>camel-smpp</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.camel</groupId>\n+      <artifactId>camel-snakeyaml</artifactId>\n+    </dependency>\n     <dependency>\n       <groupId>org.apache.camel</groupId>\n       <artifactId>camel-snmp</artifactId>"
        },
        {
            "sha": "b00bd97f125e46b93de76882967ba3c82a4c65fd",
            "filename": "apache-camel/src/main/descriptors/common-bin.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/apache/camel/blob/53600cfaf16966ed01b4e888993e7700106ed97b/apache-camel%2Fsrc%2Fmain%2Fdescriptors%2Fcommon-bin.xml",
            "raw_url": "https://github.com/apache/camel/raw/53600cfaf16966ed01b4e888993e7700106ed97b/apache-camel%2Fsrc%2Fmain%2Fdescriptors%2Fcommon-bin.xml",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/apache-camel%2Fsrc%2Fmain%2Fdescriptors%2Fcommon-bin.xml?ref=53600cfaf16966ed01b4e888993e7700106ed97b",
            "patch": "@@ -195,6 +195,7 @@\n         <include>org.apache.camel:camel-sjms</include>\n         <include>org.apache.camel:camel-slack</include>\n         <include>org.apache.camel:camel-smpp</include>\n+        <include>org.apache.camel:camel-snakeyaml</include>\n         <include>org.apache.camel:camel-snmp</include>\n         <include>org.apache.camel:camel-soap</include>\n         <include>org.apache.camel:camel-solr</include>"
        },
        {
            "sha": "33b5403b4e6a7cf00a7aad431baa0262465093be",
            "filename": "camel-core/src/main/java/org/apache/camel/builder/DataFormatClause.java",
            "status": "modified",
            "additions": 22,
            "deletions": 2,
            "changes": 24,
            "blob_url": "https://github.com/apache/camel/blob/53600cfaf16966ed01b4e888993e7700106ed97b/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fbuilder%2FDataFormatClause.java",
            "raw_url": "https://github.com/apache/camel/raw/53600cfaf16966ed01b4e888993e7700106ed97b/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fbuilder%2FDataFormatClause.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fbuilder%2FDataFormatClause.java?ref=53600cfaf16966ed01b4e888993e7700106ed97b",
            "patch": "@@ -20,8 +20,6 @@\n import java.util.Map;\n import java.util.zip.Deflater;\n \n-import org.w3c.dom.Node;\n-\n import org.apache.camel.model.DataFormatDefinition;\n import org.apache.camel.model.ProcessorDefinition;\n import org.apache.camel.model.dataformat.AvroDataFormat;\n@@ -55,10 +53,13 @@\n import org.apache.camel.model.dataformat.XMLSecurityDataFormat;\n import org.apache.camel.model.dataformat.XStreamDataFormat;\n import org.apache.camel.model.dataformat.XmlJsonDataFormat;\n+import org.apache.camel.model.dataformat.YAMLDataFormat;\n+import org.apache.camel.model.dataformat.YAMLLibrary;\n import org.apache.camel.model.dataformat.ZipDataFormat;\n import org.apache.camel.model.dataformat.ZipFileDataFormat;\n import org.apache.camel.util.CollectionStringBuffer;\n import org.apache.camel.util.jsse.KeyStoreParameters;\n+import org.w3c.dom.Node;\n \n /**\n  * An expression for constructing the different possible {@link org.apache.camel.spi.DataFormat}\n@@ -870,6 +871,25 @@ public T xstream(String encoding, Class<?>... type) {\n         return xstream(encoding, csb.toString());\n     }\n \n+    /**\n+     * Uses the YAML data format\n+     *\n+     * @param library the yaml library to use\n+     */\n+    public T yaml(YAMLLibrary library) {\n+        return dataFormat(new YAMLDataFormat(library));\n+    }\n+\n+    /**\n+     * Uses the YAML data format\n+     *\n+     * @param type          the yaml type to use\n+     * @param type          the type for json snakeyaml type\n+     */\n+    public T yaml(YAMLLibrary library, Class<?> type) {\n+        return dataFormat(new YAMLDataFormat(library, type));\n+    }\n+\n     /**\n      * Uses the XML Security data format\n      */"
        },
        {
            "sha": "81b09f93658b5bf89295af4d5e4cdc2ffa3e1335",
            "filename": "camel-core/src/main/java/org/apache/camel/model/dataformat/DataFormatsDefinition.java",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/apache/camel/blob/53600cfaf16966ed01b4e888993e7700106ed97b/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fmodel%2Fdataformat%2FDataFormatsDefinition.java",
            "raw_url": "https://github.com/apache/camel/raw/53600cfaf16966ed01b4e888993e7700106ed97b/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fmodel%2Fdataformat%2FDataFormatsDefinition.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fmodel%2Fdataformat%2FDataFormatsDefinition.java?ref=53600cfaf16966ed01b4e888993e7700106ed97b",
            "patch": "@@ -75,6 +75,7 @@ public class DataFormatsDefinition {\n         @XmlElement(required = false, name = \"xmlrpc\", type = XmlRpcDataFormat.class),\n         @XmlElement(required = false, name = \"xstream\", type = XStreamDataFormat.class),\n         @XmlElement(required = false, name = \"pgp\", type = PGPDataFormat.class),\n+        @XmlElement(required = false, name = \"yaml\", type = YAMLDataFormat.class),\n         @XmlElement(required = false, name = \"zip\", type = ZipDataFormat.class),\n         @XmlElement(required = false, name = \"zipFile\", type = ZipFileDataFormat.class)}\n         )"
        },
        {
            "sha": "77be7a63bf516551c1ac2a9046772a268182cee3",
            "filename": "camel-core/src/main/java/org/apache/camel/model/dataformat/YAMLDataFormat.java",
            "status": "added",
            "additions": 241,
            "deletions": 0,
            "changes": 241,
            "blob_url": "https://github.com/apache/camel/blob/53600cfaf16966ed01b4e888993e7700106ed97b/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fmodel%2Fdataformat%2FYAMLDataFormat.java",
            "raw_url": "https://github.com/apache/camel/raw/53600cfaf16966ed01b4e888993e7700106ed97b/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fmodel%2Fdataformat%2FYAMLDataFormat.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fmodel%2Fdataformat%2FYAMLDataFormat.java?ref=53600cfaf16966ed01b4e888993e7700106ed97b",
            "patch": "@@ -0,0 +1,241 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.model.dataformat;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlAttribute;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlTransient;\n+\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.model.DataFormatDefinition;\n+import org.apache.camel.spi.DataFormat;\n+import org.apache.camel.spi.Metadata;\n+import org.apache.camel.spi.RouteContext;\n+import org.apache.camel.util.ObjectHelper;\n+\n+/**\n+ * YAML data format\n+ *\n+ * @version \n+ */\n+@Metadata(label = \"dataformat,transformation,yaml\", title = \"YAML\")\n+@XmlRootElement(name = \"yaml\")\n+@XmlAccessorType(XmlAccessType.FIELD)\n+public class YAMLDataFormat extends DataFormatDefinition {\n+    @XmlAttribute @Metadata(defaultValue = \"SnakeYAML\")\n+    private YAMLLibrary library = YAMLLibrary.SnakeYAML;\n+    @XmlTransient\n+    private ClassLoader classLoader;\n+    @XmlTransient\n+    private Class<?> unmarshalType;\n+    @XmlAttribute\n+    private String unmarshalTypeName;\n+    @XmlAttribute\n+    private String constructor;\n+    @XmlAttribute\n+    private String representer;\n+    @XmlAttribute\n+    private String dumperOptions;\n+    @XmlAttribute\n+    private String resolver;\n+    @XmlAttribute @Metadata(defaultValue = \"true\")\n+    private Boolean useApplicationContextClassLoader = true;\n+    @XmlAttribute @Metadata(defaultValue = \"false\")\n+    private Boolean prettyFlow = false;\n+\n+    public YAMLDataFormat() {\n+        this(YAMLLibrary.SnakeYAML);\n+    }\n+\n+    public YAMLDataFormat(YAMLLibrary library) {\n+        super(\"yaml-\" + library.name().toLowerCase());\n+        this.library = library;\n+    }\n+\n+    public YAMLDataFormat(YAMLLibrary library, Class<?> unmarshalType) {\n+        super(\"yaml-\" + library.name().toLowerCase());\n+        this.library = library;\n+        this.unmarshalType = unmarshalType;\n+    }\n+\n+    public YAMLLibrary getLibrary() {\n+        return library;\n+    }\n+\n+    /**\n+     * Which yaml library to use such.\n+     * <p/>\n+     * Is by default SnakeYAML\n+     */\n+    public void setLibrary(YAMLLibrary library) {\n+        this.library = library;\n+        setDataFormatName(\"yaml-\" + library.name().toLowerCase());\n+    }\n+\n+    public Class<?> getUnmarshalType() {\n+        return unmarshalType;\n+    }\n+\n+    /**\n+     * Class of the object to be created\n+     */\n+    public void setUnmarshalType(Class<?> type) {\n+        this.unmarshalType = type;\n+    }\n+\n+    public String getUnmarshalTypeName() {\n+        return unmarshalTypeName;\n+    }\n+\n+    /**\n+     * Class name of the java type to use when unarmshalling\n+     */\n+    public void setUnmarshalTypeName(String unmarshalTypeName) {\n+        this.unmarshalTypeName = unmarshalTypeName;\n+    }\n+\n+    public ClassLoader getClassLoader() {\n+        return classLoader;\n+    }\n+\n+    /**\n+     * Set a custom classloader\n+     */\n+    public void setClassLoader(ClassLoader classLoader) {\n+        this.classLoader = classLoader;\n+    }\n+\n+    public String getConstructor() {\n+        return constructor;\n+    }\n+\n+    /**\n+     * BaseConstructor to construct incoming documents.\n+     */\n+    public void setConstructor(String constructor) {\n+        this.constructor = constructor;\n+    }\n+\n+    public String getRepresenter() {\n+        return representer;\n+    }\n+\n+    /**\n+     * Representer to emit outgoing objects.\n+     */\n+    public void setRepresenter(String representer) {\n+        this.representer = representer;\n+    }\n+\n+    public String getDumperOptions() {\n+        return dumperOptions;\n+    }\n+\n+    /**\n+     * DumperOptions to configure outgoing objects.\n+     */\n+    public void setDumperOptions(String dumperOptions) {\n+        this.dumperOptions = dumperOptions;\n+    }\n+\n+    public String getResolver() {\n+        return resolver;\n+    }\n+\n+    /**\n+     * Resolver to detect implicit type\n+     */\n+    public void setResolver(String resolver) {\n+        this.resolver = resolver;\n+    }\n+\n+    public boolean isUseApplicationContextClassLoader() {\n+        return useApplicationContextClassLoader;\n+    }\n+\n+    /**\n+     * Use ApplicationContextClassLoader as custom ClassLoader\n+     */\n+    public void setUseApplicationContextClassLoader(boolean useApplicationContextClassLoader) {\n+        this.useApplicationContextClassLoader = useApplicationContextClassLoader;\n+    }\n+\n+    public boolean isPrettyFlow() {\n+        return prettyFlow;\n+    }\n+\n+    /**\n+     * Force the emitter to produce a pretty YAML document when using the flow\n+     * style.\n+     */\n+    public void setPrettyFlow(boolean prettyFlow) {\n+        this.prettyFlow = prettyFlow;\n+    }\n+\n+    @Override\n+    protected DataFormat createDataFormat(RouteContext routeContext) {\n+        if (library == YAMLLibrary.SnakeYAML) {\n+            setProperty(routeContext.getCamelContext(), this, \"dataFormatName\", \"yaml-snakeyaml\");\n+        }\n+\n+        return super.createDataFormat(routeContext);\n+    }\n+\n+    @Override\n+    protected void configureDataFormat(DataFormat dataFormat, CamelContext camelContext) {\n+        if (library == YAMLLibrary.SnakeYAML) {\n+            configureSnakeDataFormat(dataFormat, camelContext);\n+        }\n+    }\n+\n+    protected void configureSnakeDataFormat(DataFormat dataFormat, CamelContext camelContext) {\n+        Class<?> yamlUnmarshalType =  unmarshalType;\n+        if (yamlUnmarshalType == null && unmarshalTypeName != null) {\n+            try {\n+                yamlUnmarshalType = camelContext.getClassResolver().resolveMandatoryClass(unmarshalTypeName);\n+            } catch (ClassNotFoundException e) {\n+                throw ObjectHelper.wrapRuntimeCamelException(e);\n+            }\n+        }\n+\n+        setProperty(dataFormat, camelContext, \"unmarshalType\", yamlUnmarshalType);\n+        setProperty(dataFormat, camelContext, \"classLoader\", classLoader);\n+        setProperty(dataFormat, camelContext, \"useApplicationContextClassLoader\", useApplicationContextClassLoader);\n+        setProperty(dataFormat, camelContext, \"prettyFlow\", prettyFlow);\n+\n+        setPropertyRef(dataFormat, camelContext, \"constructor\", constructor);\n+        setPropertyRef(dataFormat, camelContext, \"representer\", representer);\n+        setPropertyRef(dataFormat, camelContext, \"dumperOptions\", dumperOptions);\n+        setPropertyRef(dataFormat, camelContext, \"resolver\", resolver);\n+    }\n+\n+    protected void setProperty(DataFormat dataFormat, CamelContext camelContext, String propertyName, Object propertyValue) {\n+        if (ObjectHelper.isNotEmpty(propertyValue)) {\n+            setProperty(camelContext, dataFormat, propertyName, propertyValue);\n+        }\n+    }\n+\n+    protected void setPropertyRef(DataFormat dataFormat, CamelContext camelContext, String propertyName, String propertyValue) {\n+        if (ObjectHelper.isNotEmpty(propertyValue)) {\n+            // must be a reference value\n+            String ref = propertyValue.startsWith(\"#\") ? propertyValue : \"#\" + propertyValue;\n+            setProperty(camelContext, dataFormat, propertyName, ref);\n+        }\n+    }\n+}"
        },
        {
            "sha": "4f47b3a67a2457a1c4cc9a3043b0afc7a0fa7aa1",
            "filename": "camel-core/src/main/java/org/apache/camel/model/dataformat/YAMLLibrary.java",
            "status": "added",
            "additions": 31,
            "deletions": 0,
            "changes": 31,
            "blob_url": "https://github.com/apache/camel/blob/53600cfaf16966ed01b4e888993e7700106ed97b/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fmodel%2Fdataformat%2FYAMLLibrary.java",
            "raw_url": "https://github.com/apache/camel/raw/53600cfaf16966ed01b4e888993e7700106ed97b/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fmodel%2Fdataformat%2FYAMLLibrary.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fmodel%2Fdataformat%2FYAMLLibrary.java?ref=53600cfaf16966ed01b4e888993e7700106ed97b",
            "patch": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.model.dataformat;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+import javax.xml.bind.annotation.XmlType;\n+\n+/**\n+ * Represents the concrete Yaml libraries Camel supports.\n+ *\n+ * @version \n+ */\n+@XmlType\n+@XmlEnum\n+public enum YAMLLibrary {\n+    SnakeYAML\n+}"
        },
        {
            "sha": "93286544748cc334d00e766c321182af698b9da4",
            "filename": "camel-core/src/main/resources/org/apache/camel/model/dataformat/jaxb.index",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/apache/camel/blob/53600cfaf16966ed01b4e888993e7700106ed97b/camel-core%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fcamel%2Fmodel%2Fdataformat%2Fjaxb.index",
            "raw_url": "https://github.com/apache/camel/raw/53600cfaf16966ed01b4e888993e7700106ed97b/camel-core%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fcamel%2Fmodel%2Fdataformat%2Fjaxb.index",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fcamel%2Fmodel%2Fdataformat%2Fjaxb.index?ref=53600cfaf16966ed01b4e888993e7700106ed97b",
            "patch": "@@ -48,5 +48,7 @@ UniVocityTsvDataFormat\n XMLBeansDataFormat\n XMLSecurityDataFormat\n XStreamDataFormat\n+YAMLDataFormat\n+YAMLLibrary\n ZipDataFormat\n ZipFileDataFormat"
        },
        {
            "sha": "1f36c80093632ecefb37fe4a76fd5487a2afdeaa",
            "filename": "components/camel-snakeyaml/pom.xml",
            "status": "added",
            "additions": 67,
            "deletions": 0,
            "changes": 67,
            "blob_url": "https://github.com/apache/camel/blob/53600cfaf16966ed01b4e888993e7700106ed97b/components%2Fcamel-snakeyaml%2Fpom.xml",
            "raw_url": "https://github.com/apache/camel/raw/53600cfaf16966ed01b4e888993e7700106ed97b/components%2Fcamel-snakeyaml%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/components%2Fcamel-snakeyaml%2Fpom.xml?ref=53600cfaf16966ed01b4e888993e7700106ed97b",
            "patch": "@@ -0,0 +1,67 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements.  See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to You under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>2.17-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-snakeyaml</artifactId>\n+    <packaging>bundle</packaging>\n+    <name>Camel :: SnakeYAML</name>\n+    <description>Camel SnakeYAML support</description>\n+\n+    <properties>\n+        <camel.osgi.export.pkg>org.apache.camel.component.snakeyaml.*</camel.osgi.export.pkg>\n+        <camel.osgi.export.service>org.apache.camel.spi.DataFormatResolver;dataformat=yaml-snakeyaml</camel.osgi.export.service>\n+    </properties>\n+\n+    <dependencies>\n+\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.yaml</groupId>\n+            <artifactId>snakeyaml</artifactId>\n+            <version>${snakeyaml-version}</version>\n+        </dependency>\n+\n+        <!-- testing -->\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-test-spring</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-log4j12</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+</project>"
        },
        {
            "sha": "7e030bb5f3068841d43ebadca0a894e37ab995e8",
            "filename": "components/camel-snakeyaml/src/main/java/org/apache/camel/component/snakeyaml/SnakeYAMLDataFormat.java",
            "status": "added",
            "additions": 304,
            "deletions": 0,
            "changes": 304,
            "blob_url": "https://github.com/apache/camel/blob/53600cfaf16966ed01b4e888993e7700106ed97b/components%2Fcamel-snakeyaml%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Fsnakeyaml%2FSnakeYAMLDataFormat.java",
            "raw_url": "https://github.com/apache/camel/raw/53600cfaf16966ed01b4e888993e7700106ed97b/components%2Fcamel-snakeyaml%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Fsnakeyaml%2FSnakeYAMLDataFormat.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/components%2Fcamel-snakeyaml%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Fsnakeyaml%2FSnakeYAMLDataFormat.java?ref=53600cfaf16966ed01b4e888993e7700106ed97b",
            "patch": "@@ -0,0 +1,304 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.snakeyaml;\n+\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.lang.ref.WeakReference;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.spi.DataFormat;\n+import org.apache.camel.spi.DataFormatName;\n+import org.apache.camel.support.ServiceSupport;\n+import org.apache.camel.util.IOHelper;\n+import org.yaml.snakeyaml.DumperOptions;\n+import org.yaml.snakeyaml.TypeDescription;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.constructor.BaseConstructor;\n+import org.yaml.snakeyaml.constructor.Constructor;\n+import org.yaml.snakeyaml.constructor.CustomClassLoaderConstructor;\n+import org.yaml.snakeyaml.nodes.Tag;\n+import org.yaml.snakeyaml.representer.Representer;\n+import org.yaml.snakeyaml.resolver.Resolver;\n+\n+\n+/**\n+ * A <a href=\"http://camel.apache.org/data-format.html\">data format</a> ({@link DataFormat})\n+ * using <a href=\"http://www.snakeyaml.org\">SnakeYAML</a> to marshal to and from YAML.\n+ */\n+public class SnakeYAMLDataFormat extends ServiceSupport implements DataFormat, DataFormatName {\n+\n+    private ThreadLocal<WeakReference<Yaml>> yamlCache;\n+    private BaseConstructor constructor;\n+    private Representer representer;\n+    private DumperOptions dumperOptions;\n+    private Resolver resolver;\n+    private ClassLoader classLoader;\n+    private Class<?> unmarshalType;\n+    private List<TypeDescription> typeDescriptions;\n+    private Map<Class<?>, Tag> classTags;\n+    private boolean useApplicationContextClassLoader;\n+    private boolean prettyFlow;\n+\n+    public SnakeYAMLDataFormat() {\n+        this(Object.class);\n+    }\n+\n+    public SnakeYAMLDataFormat(Class<?> type) {\n+        this.unmarshalType = type;\n+        this.yamlCache = new ThreadLocal<>();\n+        this.useApplicationContextClassLoader = true;\n+        this.prettyFlow = false;\n+    }\n+\n+    @Override\n+    public String getDataFormatName() {\n+        return \"yaml-snakeyaml\";\n+    }\n+\n+    @Override\n+    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n+        try (final OutputStreamWriter osw = new OutputStreamWriter(stream, IOHelper.getCharsetName(exchange))) {\n+            getYaml(exchange.getContext()).dump(graph, osw);\n+        }\n+    }\n+\n+    @Override\n+    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n+        try (final InputStreamReader isr = new InputStreamReader(stream, IOHelper.getCharsetName(exchange))) {\n+            return getYaml(exchange.getContext()).loadAs(isr, unmarshalType);\n+        }\n+    }\n+\n+    protected Yaml getYaml(CamelContext context) {\n+        Yaml yaml = null;\n+        WeakReference<Yaml> ref = yamlCache.get();\n+\n+        if (ref != null) {\n+            yaml = ref.get();\n+        }\n+\n+        if (yaml == null) {\n+            BaseConstructor yamlConstructor = this.constructor;\n+            Representer yamlRepresenter = this.representer;\n+            DumperOptions yamlDumperOptions = this.dumperOptions;\n+            Resolver yamlResolver = this.resolver;\n+            ClassLoader yamlClassLoader = this.classLoader;\n+\n+            if (yamlClassLoader == null && useApplicationContextClassLoader) {\n+                yamlClassLoader = context.getApplicationContextClassLoader();\n+            }\n+\n+            if (yamlConstructor == null) {\n+                yamlConstructor = yamlClassLoader == null\n+                    ? new Constructor()\n+                    : new CustomClassLoaderConstructor(yamlClassLoader);\n+\n+                if (typeDescriptions != null) {\n+                    for (TypeDescription typeDescription : typeDescriptions) {\n+                        ((Constructor)yamlConstructor).addTypeDescription(typeDescription);\n+                    }\n+                }\n+            }\n+            if (yamlRepresenter == null) {\n+                yamlRepresenter = new Representer();\n+\n+                if (classTags != null) {\n+                    for (Map.Entry<Class<?>, Tag> entry : classTags.entrySet()) {\n+                        yamlRepresenter.addClassTag(entry.getKey(), entry.getValue());\n+                    }\n+                }\n+            }\n+            if (yamlDumperOptions == null) {\n+                yamlDumperOptions = new DumperOptions();\n+                yamlDumperOptions.setPrettyFlow(prettyFlow);\n+            }\n+            if (yamlResolver == null) {\n+                yamlResolver = new Resolver();\n+            }\n+\n+            yaml = new Yaml(yamlConstructor, yamlRepresenter, yamlDumperOptions, yamlResolver);\n+            yamlCache.set(new WeakReference<>(yaml));\n+        }\n+\n+        return yaml;\n+    }\n+\n+    @Override\n+    protected void doStart() throws Exception {\n+        // noop\n+    }\n+\n+    @Override\n+    protected void doStop() throws Exception {\n+        // noop\n+    }\n+\n+    public BaseConstructor getConstructor() {\n+        return constructor;\n+    }\n+\n+    /**\n+     * BaseConstructor to construct incoming documents.\n+     */\n+    public void setConstructor(BaseConstructor constructor) {\n+        this.constructor = constructor;\n+    }\n+\n+    public Representer getRepresenter() {\n+        return representer;\n+    }\n+\n+    /**\n+     * Representer to emit outgoing objects.\n+     */\n+    public void setRepresenter(Representer representer) {\n+        this.representer = representer;\n+    }\n+\n+    public DumperOptions getDumperOptions() {\n+        return dumperOptions;\n+    }\n+\n+    /**\n+     * DumperOptions to configure outgoing objects.\n+     */\n+    public void setDumperOptions(DumperOptions dumperOptions) {\n+        this.dumperOptions = dumperOptions;\n+    }\n+\n+    public Resolver getResolver() {\n+        return resolver;\n+    }\n+\n+    /**\n+     * Resolver to detect implicit type\n+     */\n+    public void setResolver(Resolver resolver) {\n+        this.resolver = resolver;\n+    }\n+\n+    public ClassLoader getClassLoader() {\n+        return classLoader;\n+    }\n+\n+    /**\n+     * Set a custom classloader\n+     */\n+    public void setClassLoader(ClassLoader classLoader) {\n+        this.classLoader = classLoader;\n+    }\n+\n+    public Class<?> getUnmarshalType() {\n+        return this.unmarshalType;\n+    }\n+\n+    /**\n+     * Class of the object to be created\n+     */\n+    public void setUnmarshalType(Class<?> unmarshalType) {\n+        this.unmarshalType = unmarshalType;\n+    }\n+\n+    public List<TypeDescription> getTypeDescriptions() {\n+        return typeDescriptions;\n+    }\n+\n+    /**\n+     * Make YAML aware how to parse a custom Class.\n+     */\n+    public void setTypeDescriptions(List<TypeDescription> typeDescriptions) {\n+        this.typeDescriptions = typeDescriptions;\n+    }\n+\n+    public void addTypeDescriptions(TypeDescription... typeDescriptions) {\n+        if (this.typeDescriptions == null) {\n+            this.typeDescriptions = new LinkedList<>();\n+        }\n+\n+        for (TypeDescription typeDescription : typeDescriptions) {\n+            this.typeDescriptions.add(typeDescription);\n+        }\n+    }\n+\n+    public void addTypeDescription(Class<?> type, Tag tag) {\n+        if (this.typeDescriptions == null) {\n+            this.typeDescriptions = new LinkedList<>();\n+        }\n+\n+        this.typeDescriptions.add(new TypeDescription(type, tag));\n+    }\n+\n+    public Map<Class<?>, Tag> getClassTags() {\n+        return classTags;\n+    }\n+\n+    /**\n+     * Define a tag for the <code>Class</code> to serialize.\n+     */\n+    public void setClassTags(Map<Class<?>, Tag> classTags) {\n+        this.classTags = classTags;\n+    }\n+\n+    public void addClassTags(Class<?> type, Tag tag) {\n+        if (this.classTags == null) {\n+            this.classTags = new LinkedHashMap<>();\n+        }\n+\n+        this.classTags.put(type, tag);\n+    }\n+\n+\n+    public boolean isUseApplicationContextClassLoader() {\n+        return useApplicationContextClassLoader;\n+    }\n+\n+    /**\n+     * Use ApplicationContextClassLoader as custom ClassLoader\n+     */\n+    public void setUseApplicationContextClassLoader(boolean useApplicationContextClassLoader) {\n+        this.useApplicationContextClassLoader = useApplicationContextClassLoader;\n+    }\n+\n+    public boolean isPrettyFlow() {\n+        return prettyFlow;\n+    }\n+\n+    /**\n+     * Force the emitter to produce a pretty YAML document when using the flow\n+     * style.\n+     */\n+    public void setPrettyFlow(boolean prettyFlow) {\n+        this.prettyFlow = prettyFlow;\n+    }\n+\n+    /**\n+     * Convenience method to set class tag for bot <code>Constructor</code> and\n+     * <code>Representer</code>\n+     */\n+    public void addTag(Class<?> type, Tag tag) {\n+        addClassTags(type, tag);\n+        addTypeDescription(type, tag);\n+    }\n+}"
        },
        {
            "sha": "6b0b1270ff0ca8f03867efcd09ba6ddb6392b1e1",
            "filename": "components/camel-snakeyaml/src/main/resources/META-INF/LICENSE.txt",
            "status": "added",
            "additions": 203,
            "deletions": 0,
            "changes": 203,
            "blob_url": "https://github.com/apache/camel/blob/53600cfaf16966ed01b4e888993e7700106ed97b/components%2Fcamel-snakeyaml%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2FLICENSE.txt",
            "raw_url": "https://github.com/apache/camel/raw/53600cfaf16966ed01b4e888993e7700106ed97b/components%2Fcamel-snakeyaml%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2FLICENSE.txt",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/components%2Fcamel-snakeyaml%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2FLICENSE.txt?ref=53600cfaf16966ed01b4e888993e7700106ed97b",
            "patch": "@@ -0,0 +1,203 @@\n+\n+                                 Apache License\n+                           Version 2.0, January 2004\n+                        http://www.apache.org/licenses/\n+\n+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n+\n+   1. Definitions.\n+\n+      \"License\" shall mean the terms and conditions for use, reproduction,\n+      and distribution as defined by Sections 1 through 9 of this document.\n+\n+      \"Licensor\" shall mean the copyright owner or entity authorized by\n+      the copyright owner that is granting the License.\n+\n+      \"Legal Entity\" shall mean the union of the acting entity and all\n+      other entities that control, are controlled by, or are under common\n+      control with that entity. For the purposes of this definition,\n+      \"control\" means (i) the power, direct or indirect, to cause the\n+      direction or management of such entity, whether by contract or\n+      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n+      outstanding shares, or (iii) beneficial ownership of such entity.\n+\n+      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n+      exercising permissions granted by this License.\n+\n+      \"Source\" form shall mean the preferred form for making modifications,\n+      including but not limited to software source code, documentation\n+      source, and configuration files.\n+\n+      \"Object\" form shall mean any form resulting from mechanical\n+      transformation or translation of a Source form, including but\n+      not limited to compiled object code, generated documentation,\n+      and conversions to other media types.\n+\n+      \"Work\" shall mean the work of authorship, whether in Source or\n+      Object form, made available under the License, as indicated by a\n+      copyright notice that is included in or attached to the work\n+      (an example is provided in the Appendix below).\n+\n+      \"Derivative Works\" shall mean any work, whether in Source or Object\n+      form, that is based on (or derived from) the Work and for which the\n+      editorial revisions, annotations, elaborations, or other modifications\n+      represent, as a whole, an original work of authorship. For the purposes\n+      of this License, Derivative Works shall not include works that remain\n+      separable from, or merely link (or bind by name) to the interfaces of,\n+      the Work and Derivative Works thereof.\n+\n+      \"Contribution\" shall mean any work of authorship, including\n+      the original version of the Work and any modifications or additions\n+      to that Work or Derivative Works thereof, that is intentionally\n+      submitted to Licensor for inclusion in the Work by the copyright owner\n+      or by an individual or Legal Entity authorized to submit on behalf of\n+      the copyright owner. For the purposes of this definition, \"submitted\"\n+      means any form of electronic, verbal, or written communication sent\n+      to the Licensor or its representatives, including but not limited to\n+      communication on electronic mailing lists, source code control systems,\n+      and issue tracking systems that are managed by, or on behalf of, the\n+      Licensor for the purpose of discussing and improving the Work, but\n+      excluding communication that is conspicuously marked or otherwise\n+      designated in writing by the copyright owner as \"Not a Contribution.\"\n+\n+      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n+      on behalf of whom a Contribution has been received by Licensor and\n+      subsequently incorporated within the Work.\n+\n+   2. Grant of Copyright License. Subject to the terms and conditions of\n+      this License, each Contributor hereby grants to You a perpetual,\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n+      copyright license to reproduce, prepare Derivative Works of,\n+      publicly display, publicly perform, sublicense, and distribute the\n+      Work and such Derivative Works in Source or Object form.\n+\n+   3. Grant of Patent License. Subject to the terms and conditions of\n+      this License, each Contributor hereby grants to You a perpetual,\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n+      (except as stated in this section) patent license to make, have made,\n+      use, offer to sell, sell, import, and otherwise transfer the Work,\n+      where such license applies only to those patent claims licensable\n+      by such Contributor that are necessarily infringed by their\n+      Contribution(s) alone or by combination of their Contribution(s)\n+      with the Work to which such Contribution(s) was submitted. If You\n+      institute patent litigation against any entity (including a\n+      cross-claim or counterclaim in a lawsuit) alleging that the Work\n+      or a Contribution incorporated within the Work constitutes direct\n+      or contributory patent infringement, then any patent licenses\n+      granted to You under this License for that Work shall terminate\n+      as of the date such litigation is filed.\n+\n+   4. Redistribution. You may reproduce and distribute copies of the\n+      Work or Derivative Works thereof in any medium, with or without\n+      modifications, and in Source or Object form, provided that You\n+      meet the following conditions:\n+\n+      (a) You must give any other recipients of the Work or\n+          Derivative Works a copy of this License; and\n+\n+      (b) You must cause any modified files to carry prominent notices\n+          stating that You changed the files; and\n+\n+      (c) You must retain, in the Source form of any Derivative Works\n+          that You distribute, all copyright, patent, trademark, and\n+          attribution notices from the Source form of the Work,\n+          excluding those notices that do not pertain to any part of\n+          the Derivative Works; and\n+\n+      (d) If the Work includes a \"NOTICE\" text file as part of its\n+          distribution, then any Derivative Works that You distribute must\n+          include a readable copy of the attribution notices contained\n+          within such NOTICE file, excluding those notices that do not\n+          pertain to any part of the Derivative Works, in at least one\n+          of the following places: within a NOTICE text file distributed\n+          as part of the Derivative Works; within the Source form or\n+          documentation, if provided along with the Derivative Works; or,\n+          within a display generated by the Derivative Works, if and\n+          wherever such third-party notices normally appear. The contents\n+          of the NOTICE file are for informational purposes only and\n+          do not modify the License. You may add Your own attribution\n+          notices within Derivative Works that You distribute, alongside\n+          or as an addendum to the NOTICE text from the Work, provided\n+          that such additional attribution notices cannot be construed\n+          as modifying the License.\n+\n+      You may add Your own copyright statement to Your modifications and\n+      may provide additional or different license terms and conditions\n+      for use, reproduction, or distribution of Your modifications, or\n+      for any such Derivative Works as a whole, provided Your use,\n+      reproduction, and distribution of the Work otherwise complies with\n+      the conditions stated in this License.\n+\n+   5. Submission of Contributions. Unless You explicitly state otherwise,\n+      any Contribution intentionally submitted for inclusion in the Work\n+      by You to the Licensor shall be under the terms and conditions of\n+      this License, without any additional terms or conditions.\n+      Notwithstanding the above, nothing herein shall supersede or modify\n+      the terms of any separate license agreement you may have executed\n+      with Licensor regarding such Contributions.\n+\n+   6. Trademarks. This License does not grant permission to use the trade\n+      names, trademarks, service marks, or product names of the Licensor,\n+      except as required for reasonable and customary use in describing the\n+      origin of the Work and reproducing the content of the NOTICE file.\n+\n+   7. Disclaimer of Warranty. Unless required by applicable law or\n+      agreed to in writing, Licensor provides the Work (and each\n+      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+      implied, including, without limitation, any warranties or conditions\n+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n+      PARTICULAR PURPOSE. You are solely responsible for determining the\n+      appropriateness of using or redistributing the Work and assume any\n+      risks associated with Your exercise of permissions under this License.\n+\n+   8. Limitation of Liability. In no event and under no legal theory,\n+      whether in tort (including negligence), contract, or otherwise,\n+      unless required by applicable law (such as deliberate and grossly\n+      negligent acts) or agreed to in writing, shall any Contributor be\n+      liable to You for damages, including any direct, indirect, special,\n+      incidental, or consequential damages of any character arising as a\n+      result of this License or out of the use or inability to use the\n+      Work (including but not limited to damages for loss of goodwill,\n+      work stoppage, computer failure or malfunction, or any and all\n+      other commercial damages or losses), even if such Contributor\n+      has been advised of the possibility of such damages.\n+\n+   9. Accepting Warranty or Additional Liability. While redistributing\n+      the Work or Derivative Works thereof, You may choose to offer,\n+      and charge a fee for, acceptance of support, warranty, indemnity,\n+      or other liability obligations and/or rights consistent with this\n+      License. However, in accepting such obligations, You may act only\n+      on Your own behalf and on Your sole responsibility, not on behalf\n+      of any other Contributor, and only if You agree to indemnify,\n+      defend, and hold each Contributor harmless for any liability\n+      incurred by, or claims asserted against, such Contributor by reason\n+      of your accepting any such warranty or additional liability.\n+\n+   END OF TERMS AND CONDITIONS\n+\n+   APPENDIX: How to apply the Apache License to your work.\n+\n+      To apply the Apache License to your work, attach the following\n+      boilerplate notice, with the fields enclosed by brackets \"[]\"\n+      replaced with your own identifying information. (Don't include\n+      the brackets!)  The text should be enclosed in the appropriate\n+      comment syntax for the file format. We also recommend that a\n+      file or class name and description of purpose be included on the\n+      same \"printed page\" as the copyright notice for easier\n+      identification within third-party archives.\n+\n+   Copyright [yyyy] [name of copyright owner]\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+"
        },
        {
            "sha": "2e215bf2e6b1f6b1caa52e63c330e024a433eb6f",
            "filename": "components/camel-snakeyaml/src/main/resources/META-INF/NOTICE.txt",
            "status": "added",
            "additions": 11,
            "deletions": 0,
            "changes": 11,
            "blob_url": "https://github.com/apache/camel/blob/53600cfaf16966ed01b4e888993e7700106ed97b/components%2Fcamel-snakeyaml%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2FNOTICE.txt",
            "raw_url": "https://github.com/apache/camel/raw/53600cfaf16966ed01b4e888993e7700106ed97b/components%2Fcamel-snakeyaml%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2FNOTICE.txt",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/components%2Fcamel-snakeyaml%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2FNOTICE.txt?ref=53600cfaf16966ed01b4e888993e7700106ed97b",
            "patch": "@@ -0,0 +1,11 @@\n+   =========================================================================\n+   ==  NOTICE file corresponding to the section 4 d of                    ==\n+   ==  the Apache License, Version 2.0,                                   ==\n+   ==  in this case for the Apache Camel distribution.                    ==\n+   =========================================================================\n+\n+   This product includes software developed by\n+   The Apache Software Foundation (http://www.apache.org/).\n+\n+   Please read the different LICENSE files present in the licenses directory of\n+   this distribution."
        },
        {
            "sha": "c503c8af7f6db34ea5c9496259c5030d41ee40da",
            "filename": "components/camel-snakeyaml/src/main/resources/META-INF/services/org/apache/camel/dataformat/yaml-snakeyaml",
            "status": "added",
            "additions": 18,
            "deletions": 0,
            "changes": 18,
            "blob_url": "https://github.com/apache/camel/blob/53600cfaf16966ed01b4e888993e7700106ed97b/components%2Fcamel-snakeyaml%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fservices%2Forg%2Fapache%2Fcamel%2Fdataformat%2Fyaml-snakeyaml",
            "raw_url": "https://github.com/apache/camel/raw/53600cfaf16966ed01b4e888993e7700106ed97b/components%2Fcamel-snakeyaml%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fservices%2Forg%2Fapache%2Fcamel%2Fdataformat%2Fyaml-snakeyaml",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/components%2Fcamel-snakeyaml%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fservices%2Forg%2Fapache%2Fcamel%2Fdataformat%2Fyaml-snakeyaml?ref=53600cfaf16966ed01b4e888993e7700106ed97b",
            "patch": "@@ -0,0 +1,18 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+class=org.apache.camel.component.snakeyaml.SnakeYAMLDataFormat"
        },
        {
            "sha": "0284386ea9800251e067ac54317dda29f301d816",
            "filename": "components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLMarshalTest.java",
            "status": "added",
            "additions": 100,
            "deletions": 0,
            "changes": 100,
            "blob_url": "https://github.com/apache/camel/blob/53600cfaf16966ed01b4e888993e7700106ed97b/components%2Fcamel-snakeyaml%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Fsnakeyaml%2FSnakeYAMLMarshalTest.java",
            "raw_url": "https://github.com/apache/camel/raw/53600cfaf16966ed01b4e888993e7700106ed97b/components%2Fcamel-snakeyaml%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Fsnakeyaml%2FSnakeYAMLMarshalTest.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/components%2Fcamel-snakeyaml%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Fsnakeyaml%2FSnakeYAMLMarshalTest.java?ref=53600cfaf16966ed01b4e888993e7700106ed97b",
            "patch": "@@ -0,0 +1,100 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.snakeyaml;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.snakeyaml.model.TestPojo;\n+import org.apache.camel.test.junit4.CamelTestSupport;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.yaml.snakeyaml.nodes.Tag;\n+\n+import static org.apache.camel.component.snakeyaml.SnakeYAMLMarshalTestHelper.createClassTagDataFormat;\n+import static org.apache.camel.component.snakeyaml.SnakeYAMLMarshalTestHelper.createDataFormat;\n+import static org.apache.camel.component.snakeyaml.SnakeYAMLMarshalTestHelper.createPrettyFlowDataFormat;\n+import static org.apache.camel.component.snakeyaml.SnakeYAMLMarshalTestHelper.createTestMap;\n+import static org.apache.camel.component.snakeyaml.SnakeYAMLMarshalTestHelper.createTestPojo;\n+\n+@RunWith(Parameterized.class)\n+public class SnakeYAMLMarshalTest extends CamelTestSupport {\n+\n+    private final SnakeYAMLDataFormat format;\n+    private final Object body;\n+    private final String expected;\n+\n+    public SnakeYAMLMarshalTest(SnakeYAMLDataFormat format, Object body, String expected) {\n+        this.format = format;\n+        this.body = body;\n+        this.expected = expected;\n+    }\n+\n+    @Parameterized.Parameters\n+    public static Collection yamlCases() {\n+        return Arrays.asList(new Object[][] {\n+            {\n+                createDataFormat(null),\n+                createTestMap(),\n+                \"{name: Camel}\"\n+            },\n+            {\n+                createDataFormat(TestPojo.class),\n+                createTestPojo(),\n+                \"!!org.apache.camel.component.snakeyaml.model.TestPojo {name: Camel}\"\n+            },\n+            {\n+                createPrettyFlowDataFormat(TestPojo.class, true),\n+                createTestPojo(),\n+                \"!!org.apache.camel.component.snakeyaml.model.TestPojo {\\n  name: Camel\\n}\"\n+            },\n+            {\n+                createClassTagDataFormat(TestPojo.class, new Tag(\"!tpojo\")),\n+                createTestPojo(),\n+                \"!tpojo {name: Camel}\"\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void testMarshalAndUnmarshal() throws Exception {\n+        SnakeYAMLMarshalTestHelper.marshalAndUnmarshal(\n+            context(),\n+            body,\n+            \"mock:reverse\",\n+            \"direct:in\",\n+            \"direct:back\",\n+            expected\n+        );\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"direct:in\")\n+                    .marshal(format);\n+                from(\"direct:back\")\n+                    .unmarshal(format)\n+                    .to(\"mock:reverse\");\n+            }\n+        };\n+    }\n+}"
        },
        {
            "sha": "e004103d2d0b72033e7ec7830089414c05700688",
            "filename": "components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLMarshalTestHelper.java",
            "status": "added",
            "additions": 84,
            "deletions": 0,
            "changes": 84,
            "blob_url": "https://github.com/apache/camel/blob/53600cfaf16966ed01b4e888993e7700106ed97b/components%2Fcamel-snakeyaml%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Fsnakeyaml%2FSnakeYAMLMarshalTestHelper.java",
            "raw_url": "https://github.com/apache/camel/raw/53600cfaf16966ed01b4e888993e7700106ed97b/components%2Fcamel-snakeyaml%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Fsnakeyaml%2FSnakeYAMLMarshalTestHelper.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/components%2Fcamel-snakeyaml%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Fsnakeyaml%2FSnakeYAMLMarshalTestHelper.java?ref=53600cfaf16966ed01b4e888993e7700106ed97b",
            "patch": "@@ -0,0 +1,84 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.snakeyaml;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.ProducerTemplate;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.component.snakeyaml.model.TestPojo;\n+import org.yaml.snakeyaml.nodes.Tag;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public final class SnakeYAMLMarshalTestHelper  {\n+\n+    protected SnakeYAMLMarshalTestHelper() {\n+    }\n+\n+    public static TestPojo createTestPojo() {\n+        return new TestPojo(\"Camel\");\n+    }\n+\n+    public static Map<String, String> createTestMap() {\n+        Map<String, String> map = new HashMap<>();\n+        map.put(\"name\", \"Camel\");\n+\n+        return map;\n+    }\n+\n+    public static SnakeYAMLDataFormat createDataFormat(Class<?> type) {\n+        return type == null ? new SnakeYAMLDataFormat() : new SnakeYAMLDataFormat(type);\n+    }\n+\n+    public static SnakeYAMLDataFormat createPrettyFlowDataFormat(Class<?> type, boolean prettyFlow) {\n+        SnakeYAMLDataFormat df = type == null ? new SnakeYAMLDataFormat() : new SnakeYAMLDataFormat(type);\n+        df.setPrettyFlow(prettyFlow);\n+\n+        return df;\n+    }\n+\n+    public static SnakeYAMLDataFormat createClassTagDataFormat(Class<?> type, Tag tag) {\n+        SnakeYAMLDataFormat df = new SnakeYAMLDataFormat(type);\n+        df.addTag(type, tag);\n+\n+        return df;\n+    }\n+\n+    public static void marshalAndUnmarshal(\n+            CamelContext context, Object body, String mockName, String directIn, String directBack, String expected) throws Exception {\n+\n+        MockEndpoint mock = context.getEndpoint(mockName, MockEndpoint.class);\n+        assertNotNull(mock);\n+\n+        mock.expectedMessageCount(1);\n+        mock.message(0).body().isInstanceOf(body.getClass());\n+        mock.message(0).body().equals(body);\n+\n+        ProducerTemplate template = context.createProducerTemplate();\n+        String result = template.requestBody(directIn, body, String.class);\n+        assertNotNull(result);\n+        assertEquals(expected, result.trim());\n+\n+        template.sendBody(directBack, result);\n+\n+        mock.assertIsSatisfied();\n+    }\n+}"
        },
        {
            "sha": "a80b4fdc7d6bdff612c5f7cf08be7e8e9ecfad66",
            "filename": "components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLSpringMarshalTest.java",
            "status": "added",
            "additions": 73,
            "deletions": 0,
            "changes": 73,
            "blob_url": "https://github.com/apache/camel/blob/53600cfaf16966ed01b4e888993e7700106ed97b/components%2Fcamel-snakeyaml%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Fsnakeyaml%2FSnakeYAMLSpringMarshalTest.java",
            "raw_url": "https://github.com/apache/camel/raw/53600cfaf16966ed01b4e888993e7700106ed97b/components%2Fcamel-snakeyaml%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Fsnakeyaml%2FSnakeYAMLSpringMarshalTest.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/components%2Fcamel-snakeyaml%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Fsnakeyaml%2FSnakeYAMLSpringMarshalTest.java?ref=53600cfaf16966ed01b4e888993e7700106ed97b",
            "patch": "@@ -0,0 +1,73 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.snakeyaml;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.camel.test.spring.CamelSpringTestSupport;\n+import org.junit.Test;\n+import org.springframework.context.support.AbstractXmlApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class SnakeYAMLSpringMarshalTest extends CamelSpringTestSupport {\n+\n+    @Test\n+    public void testMarshalAndUnmarshalMap() throws Exception {\n+        Map<String, String> in = new HashMap<>();\n+        in.put(\"name\", \"Camel\");\n+\n+        SnakeYAMLMarshalTestHelper.marshalAndUnmarshal(\n+            context(),\n+            SnakeYAMLMarshalTestHelper.createTestMap(),\n+            \"mock:reverse\",\n+            \"direct:in\",\n+            \"direct:back\",\n+            \"{name: Camel}\"\n+        );\n+    }\n+\n+    @Test\n+    public void testMarshalAndUnmarshalPojo() throws Exception {\n+        SnakeYAMLMarshalTestHelper.marshalAndUnmarshal(\n+            context(),\n+            SnakeYAMLMarshalTestHelper.createTestPojo(),\n+            \"mock:reversePojo\",\n+            \"direct:inPojo\",\n+            \"direct:backPojo\",\n+            \"!!org.apache.camel.component.snakeyaml.model.TestPojo {name: Camel}\"\n+        );\n+    }\n+\n+    @Test\n+    public void testMarshalAndUnmarshalPojoWithPrettyFlow() throws Exception {\n+        SnakeYAMLMarshalTestHelper.marshalAndUnmarshal(\n+            context(),\n+            SnakeYAMLMarshalTestHelper.createTestPojo(),\n+            \"mock:reversePojoWithPrettyFlow\",\n+            \"direct:inPojoWithPrettyFlow\",\n+            \"direct:backPojoWithPrettyFlow\",\n+            \"!!org.apache.camel.component.snakeyaml.model.TestPojo {\\n  name: Camel\\n}\"\n+        );\n+    }\n+\n+    @Override\n+    protected AbstractXmlApplicationContext createApplicationContext() {\n+        return new ClassPathXmlApplicationContext(\"org/apache/camel/component/snakeyaml/SnakeYAMLSpringMarshalTest.xml\");\n+    }\n+\n+}"
        },
        {
            "sha": "c62c929fb3a5517c0fd9819403d60157afc07e64",
            "filename": "components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/model/TestPojo.java",
            "status": "added",
            "additions": 52,
            "deletions": 0,
            "changes": 52,
            "blob_url": "https://github.com/apache/camel/blob/53600cfaf16966ed01b4e888993e7700106ed97b/components%2Fcamel-snakeyaml%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Fsnakeyaml%2Fmodel%2FTestPojo.java",
            "raw_url": "https://github.com/apache/camel/raw/53600cfaf16966ed01b4e888993e7700106ed97b/components%2Fcamel-snakeyaml%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Fsnakeyaml%2Fmodel%2FTestPojo.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/components%2Fcamel-snakeyaml%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Fsnakeyaml%2Fmodel%2FTestPojo.java?ref=53600cfaf16966ed01b4e888993e7700106ed97b",
            "patch": "@@ -0,0 +1,52 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.camel.component.snakeyaml.model;\n+\n+public class TestPojo {\n+    private String name;\n+\n+    public TestPojo() {\n+    }\n+\n+    public TestPojo(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        return this.name.equals(((TestPojo) obj).getName());\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return name != null ? name.hashCode() : 0;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"TestPojo[\" + name + \"]\";\n+    }\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "52724cbe4dd12395a7441f689787d23f5769e7fa",
            "filename": "components/camel-snakeyaml/src/test/resources/log4j.properties",
            "status": "added",
            "additions": 36,
            "deletions": 0,
            "changes": 36,
            "blob_url": "https://github.com/apache/camel/blob/53600cfaf16966ed01b4e888993e7700106ed97b/components%2Fcamel-snakeyaml%2Fsrc%2Ftest%2Fresources%2Flog4j.properties",
            "raw_url": "https://github.com/apache/camel/raw/53600cfaf16966ed01b4e888993e7700106ed97b/components%2Fcamel-snakeyaml%2Fsrc%2Ftest%2Fresources%2Flog4j.properties",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/components%2Fcamel-snakeyaml%2Fsrc%2Ftest%2Fresources%2Flog4j.properties?ref=53600cfaf16966ed01b4e888993e7700106ed97b",
            "patch": "@@ -0,0 +1,36 @@\n+## ---------------------------------------------------------------------------\n+## Licensed to the Apache Software Foundation (ASF) under one or more\n+## contributor license agreements.  See the NOTICE file distributed with\n+## this work for additional information regarding copyright ownership.\n+## The ASF licenses this file to You under the Apache License, Version 2.0\n+## (the \"License\"); you may not use this file except in compliance with\n+## the License.  You may obtain a copy of the License at\n+##\n+## http://www.apache.org/licenses/LICENSE-2.0\n+##\n+## Unless required by applicable law or agreed to in writing, software\n+## distributed under the License is distributed on an \"AS IS\" BASIS,\n+## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+## See the License for the specific language governing permissions and\n+## limitations under the License.\n+## ---------------------------------------------------------------------------\n+\n+#\n+# The logging properties used during tests..\n+#\n+log4j.rootLogger=INFO, file\n+\n+# uncomment this to turn on debug of camel\n+#log4j.logger.org.apache.camel=DEBUG\n+\n+# CONSOLE appender not used by default\n+log4j.appender.out=org.apache.log4j.ConsoleAppender\n+log4j.appender.out.layout=org.apache.log4j.PatternLayout\n+log4j.appender.out.layout.ConversionPattern=%d [%-15.15t] %-5p %-30.30c{1} - %m%n\n+\n+# File appender\n+log4j.appender.file=org.apache.log4j.FileAppender\n+log4j.appender.file.layout=org.apache.log4j.PatternLayout\n+log4j.appender.file.layout.ConversionPattern=%d [%-15.15t] %-5p %-30.30c{1} - %m%n\n+log4j.appender.file.file=target/camel-snakeyaml-test.log\n+log4j.appender.file.append=true"
        },
        {
            "sha": "78210ff81bbd974bc40f125b88d723c8c2b17433",
            "filename": "components/camel-snakeyaml/src/test/resources/org/apache/camel/component/snakeyaml/SnakeYAMLSpringMarshalTest.xml",
            "status": "added",
            "additions": 76,
            "deletions": 0,
            "changes": 76,
            "blob_url": "https://github.com/apache/camel/blob/53600cfaf16966ed01b4e888993e7700106ed97b/components%2Fcamel-snakeyaml%2Fsrc%2Ftest%2Fresources%2Forg%2Fapache%2Fcamel%2Fcomponent%2Fsnakeyaml%2FSnakeYAMLSpringMarshalTest.xml",
            "raw_url": "https://github.com/apache/camel/raw/53600cfaf16966ed01b4e888993e7700106ed97b/components%2Fcamel-snakeyaml%2Fsrc%2Ftest%2Fresources%2Forg%2Fapache%2Fcamel%2Fcomponent%2Fsnakeyaml%2FSnakeYAMLSpringMarshalTest.xml",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/components%2Fcamel-snakeyaml%2Fsrc%2Ftest%2Fresources%2Forg%2Fapache%2Fcamel%2Fcomponent%2Fsnakeyaml%2FSnakeYAMLSpringMarshalTest.xml?ref=53600cfaf16966ed01b4e888993e7700106ed97b",
            "patch": "@@ -0,0 +1,76 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one or more\n+  ~ contributor license agreements.  See the NOTICE file distributed with\n+  ~ this work for additional information regarding copyright ownership.\n+  ~ The ASF licenses this file to You under the Apache License, Version 2.0\n+  ~ (the \"License\"); you may not use this file except in compliance with\n+  ~ the License.  You may obtain a copy of the License at\n+  ~\n+  ~      http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xsi:schemaLocation=\"\n+       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n+       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd\">\n+\n+    <camelContext id=\"camel\" xmlns=\"http://camel.apache.org/schema/spring\">\n+\n+        <!-- we define the yaml SnakeYAML data formats to be used -->\n+        <dataFormats>\n+            <yaml id=\"yaml\"\n+                  library=\"SnakeYAML\"/>\n+\n+            <yaml id=\"yaml-pojo\"\n+                  library=\"SnakeYAML\"\n+                  unmarshalTypeName=\"org.apache.camel.component.snakeyaml.model.TestPojo\"/>\n+\n+            <yaml id=\"yaml-pojo-pretty-flow\"\n+                  library=\"SnakeYAML\"\n+                  unmarshalTypeName=\"org.apache.camel.component.snakeyaml.model.TestPojo\"\n+                  prettyFlow=\"true\"/>\n+        </dataFormats>\n+\n+\n+        <route>\n+            <from uri=\"direct:in\"/>\n+            <marshal ref=\"yaml\"/>\n+        </route>\n+\n+        <route>\n+            <from uri=\"direct:back\"/>\n+            <unmarshal ref=\"yaml\"/>\n+            <to uri=\"mock:reverse\"/>\n+        </route>\n+\n+        <route>\n+            <from uri=\"direct:inPojo\"/>\n+            <marshal ref=\"yaml-pojo\"/>\n+        </route>\n+\n+        <route>\n+            <from uri=\"direct:backPojo\"/>\n+            <unmarshal ref=\"yaml-pojo\"/>\n+            <to uri=\"mock:reversePojo\"/>\n+        </route>\n+\n+        <route>\n+            <from uri=\"direct:inPojoWithPrettyFlow\"/>\n+            <marshal ref=\"yaml-pojo-pretty-flow\"/>\n+        </route>\n+\n+        <route>\n+            <from uri=\"direct:backPojoWithPrettyFlow\"/>\n+            <unmarshal ref=\"yaml-pojo-pretty-flow\"/>\n+            <to uri=\"mock:reversePojoWithPrettyFlow\"/>\n+        </route>\n+\n+    </camelContext>\n+</beans>"
        },
        {
            "sha": "80c11cafb809487829702a74827e5f22aff9fd26",
            "filename": "components/pom.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/apache/camel/blob/53600cfaf16966ed01b4e888993e7700106ed97b/components%2Fpom.xml",
            "raw_url": "https://github.com/apache/camel/raw/53600cfaf16966ed01b4e888993e7700106ed97b/components%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/components%2Fpom.xml?ref=53600cfaf16966ed01b4e888993e7700106ed97b",
            "patch": "@@ -213,6 +213,7 @@\n     <module>camel-shiro</module>\n     <module>camel-sip</module>\n     <module>camel-smpp</module>\n+    <module>camel-snakeyaml</module>\n     <module>camel-snmp</module>\n     <module>camel-sjms</module>\n     <module>camel-slack</module>"
        },
        {
            "sha": "3c42c1ad973ec94ac2a89915f53139c864490335",
            "filename": "parent/pom.xml",
            "status": "modified",
            "additions": 6,
            "deletions": 1,
            "changes": 7,
            "blob_url": "https://github.com/apache/camel/blob/53600cfaf16966ed01b4e888993e7700106ed97b/parent%2Fpom.xml",
            "raw_url": "https://github.com/apache/camel/raw/53600cfaf16966ed01b4e888993e7700106ed97b/parent%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/parent%2Fpom.xml?ref=53600cfaf16966ed01b4e888993e7700106ed97b",
            "patch": "@@ -482,7 +482,7 @@\n     <slf4j-version>1.7.13</slf4j-version>\n     <smack-bundle-version>4.0.6</smack-bundle-version>\n     <smack-version>4.0.7</smack-version>\n-    <snakeyaml-version>1.16</snakeyaml-version>\n+    <snakeyaml-version>1.17</snakeyaml-version>\n     <snappy-version>1.1.2.1</snappy-version>\n     <snmp4j-version>2.3.4_1</snmp4j-version>\n     <solr-bundle-version>5.3.1_1</solr-bundle-version>\n@@ -1538,6 +1538,11 @@\n         <artifactId>camel-splunk</artifactId>\n         <version>${project.version}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>camel-snakeyaml</artifactId>\n+        <version>${project.version}</version>\n+      </dependency>\n       <dependency>\n         <groupId>org.apache.camel</groupId>\n         <artifactId>camel-snmp</artifactId>"
        },
        {
            "sha": "64651f2fdd5b8841f6493cf4c441ac28a0acb6c0",
            "filename": "platforms/karaf/features/src/main/resources/features.xml",
            "status": "modified",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/apache/camel/blob/53600cfaf16966ed01b4e888993e7700106ed97b/platforms%2Fkaraf%2Ffeatures%2Fsrc%2Fmain%2Fresources%2Ffeatures.xml",
            "raw_url": "https://github.com/apache/camel/raw/53600cfaf16966ed01b4e888993e7700106ed97b/platforms%2Fkaraf%2Ffeatures%2Fsrc%2Fmain%2Fresources%2Ffeatures.xml",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/platforms%2Fkaraf%2Ffeatures%2Fsrc%2Fmain%2Fresources%2Ffeatures.xml?ref=53600cfaf16966ed01b4e888993e7700106ed97b",
            "patch": "@@ -1433,6 +1433,11 @@\n     <bundle dependency='true'>mvn:commons-codec/commons-codec/${commons-codec-version}</bundle>\n     <bundle>mvn:org.apache.camel/camel-smpp/${project.version}</bundle>\n   </feature>\n+  <feature name='camel-snakeyaml' version='${project.version}' resolver='(obr)' start-level='50'>\n+    <feature version='${project.version}'>camel-core</feature>\n+    <bundle dependency='true'>mvn:org.yaml/snakeyaml/${snakeyaml-version}</bundle>\n+    <bundle>mvn:org.apache.camel/camel-snakeyaml/${project.version}</bundle>\n+  </feature>\n   <feature name='camel-snmp' version='${project.version}' resolver='(obr)' start-level='50'>\n     <feature version='${project.version}'>camel-core</feature>\n     <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.snmp4j/${snmp4j-version}</bundle>"
        },
        {
            "sha": "2a8c416b63cc0246e379499f3059193088f1ef16",
            "filename": "tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelSnakeyamlTest.java",
            "status": "added",
            "additions": 40,
            "deletions": 0,
            "changes": 40,
            "blob_url": "https://github.com/apache/camel/blob/53600cfaf16966ed01b4e888993e7700106ed97b/tests%2Fcamel-itest-karaf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fitest%2Fkaraf%2FCamelSnakeyamlTest.java",
            "raw_url": "https://github.com/apache/camel/raw/53600cfaf16966ed01b4e888993e7700106ed97b/tests%2Fcamel-itest-karaf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fitest%2Fkaraf%2FCamelSnakeyamlTest.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/tests%2Fcamel-itest-karaf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fitest%2Fkaraf%2FCamelSnakeyamlTest.java?ref=53600cfaf16966ed01b4e888993e7700106ed97b",
            "patch": "@@ -0,0 +1,40 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.itest.karaf;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.ops4j.pax.exam.Configuration;\n+import org.ops4j.pax.exam.Option;\n+import org.ops4j.pax.exam.junit.PaxExam;\n+\n+@RunWith(PaxExam.class)\n+public class CamelSnakeyamlTest extends AbstractFeatureTest {\n+\n+    public static final String COMPONENT = extractName(CamelSnakeyamlTest.class);\n+\n+    @Test\n+    public void test() throws Exception {\n+        testComponent(COMPONENT);\n+    }\n+\n+    @Configuration\n+    public static Option[] configure() {\n+        return configure(COMPONENT);\n+    }\n+\n+}"
        },
        {
            "sha": "9f88702bf33ae92c81ee5b51982a802d87c1c6c9",
            "filename": "tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/PackageDataFormatMojo.java",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/apache/camel/blob/53600cfaf16966ed01b4e888993e7700106ed97b/tooling%2Fmaven%2Fcamel-package-maven-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fmaven%2Fpackaging%2FPackageDataFormatMojo.java",
            "raw_url": "https://github.com/apache/camel/raw/53600cfaf16966ed01b4e888993e7700106ed97b/tooling%2Fmaven%2Fcamel-package-maven-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fmaven%2Fpackaging%2FPackageDataFormatMojo.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/tooling%2Fmaven%2Fcamel-package-maven-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fmaven%2Fpackaging%2FPackageDataFormatMojo.java?ref=53600cfaf16966ed01b4e888993e7700106ed97b",
            "patch": "@@ -315,6 +315,8 @@ private static String asModelName(String name) {\n         } else if (\"zipfile\".equals(name)) {\n             // darn should have been lower case\n             return \"zipFile\";\n+        } else if (\"yaml-snakeyaml\".equals(name)) {\n+            return \"yaml\";\n         }\n         return name;\n     }\n@@ -333,6 +335,8 @@ private static String asModelTitle(String name, String title) {\n             return \"Bindy Fixed Length\";\n         } else if (\"bindy-kvp\".equals(name)) {\n             return \"Bindy Key Value Pair\";\n+        } else if (\"yaml-snakeyaml\".equals(name)) {\n+            return \"YAML SnakeYAML\";\n         }\n         return title;\n     }"
        }
    ]
}