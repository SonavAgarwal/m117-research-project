{
    "sha": "4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
    "node_id": "MDY6Q29tbWl0Mjc5MTEwODg6NGQ5OThjMTJjOTVhNmU1Y2UzZDY2YzBkODYxZTc1ZTMzYjVjZjAxMw==",
    "commit": {
        "author": {
            "name": "joewitt",
            "email": "joewitt@apache.org",
            "date": "2014-12-08T20:22:14Z"
        },
        "committer": {
            "name": "joewitt",
            "email": "joewitt@apache.org",
            "date": "2014-12-08T20:22:14Z"
        },
        "message": "Initial code contribution",
        "tree": {
            "sha": "b4cbae1580a5ca70e3c229bed275ccd27d02395f",
            "url": "https://api.github.com/repos/apache/nifi/git/trees/b4cbae1580a5ca70e3c229bed275ccd27d02395f"
        },
        "url": "https://api.github.com/repos/apache/nifi/git/commits/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/nifi/commits/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
    "html_url": "https://github.com/apache/nifi/commit/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
    "comments_url": "https://api.github.com/repos/apache/nifi/commits/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/comments",
    "author": {
        "login": "joewitt",
        "id": 3057465,
        "node_id": "MDQ6VXNlcjMwNTc0NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3057465?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joewitt",
        "html_url": "https://github.com/joewitt",
        "followers_url": "https://api.github.com/users/joewitt/followers",
        "following_url": "https://api.github.com/users/joewitt/following{/other_user}",
        "gists_url": "https://api.github.com/users/joewitt/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/joewitt/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/joewitt/subscriptions",
        "organizations_url": "https://api.github.com/users/joewitt/orgs",
        "repos_url": "https://api.github.com/users/joewitt/repos",
        "events_url": "https://api.github.com/users/joewitt/events{/privacy}",
        "received_events_url": "https://api.github.com/users/joewitt/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "joewitt",
        "id": 3057465,
        "node_id": "MDQ6VXNlcjMwNTc0NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3057465?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joewitt",
        "html_url": "https://github.com/joewitt",
        "followers_url": "https://api.github.com/users/joewitt/followers",
        "following_url": "https://api.github.com/users/joewitt/following{/other_user}",
        "gists_url": "https://api.github.com/users/joewitt/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/joewitt/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/joewitt/subscriptions",
        "organizations_url": "https://api.github.com/users/joewitt/orgs",
        "repos_url": "https://api.github.com/users/joewitt/repos",
        "events_url": "https://api.github.com/users/joewitt/events{/privacy}",
        "received_events_url": "https://api.github.com/users/joewitt/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [],
    "stats": {
        "total": 350029,
        "additions": 350029,
        "deletions": 0
    },
    "files": [
        {
            "sha": "21c67f215d0c541ce5d65357c1612c066ea668bc",
            "filename": ".gitignore",
            "status": "added",
            "additions": 9,
            "deletions": 0,
            "changes": 9,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/.gitignore",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/.gitignore",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/.gitignore?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,9 @@\n+target\n+.project\n+.settings\n+nbactions.xml\n+\n+# Intellij\n+.idea/\n+*.iml\n+*.iws"
        },
        {
            "sha": "0f8e7a1ecc45614748a5e570ef7aead7303ffa6e",
            "filename": "DISCLAIMER",
            "status": "added",
            "additions": 15,
            "deletions": 0,
            "changes": 15,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/DISCLAIMER",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/DISCLAIMER",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/DISCLAIMER?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,15 @@\n+Apache NiFi is an effort undergoing incubation at the Apache Software\n+Foundation (ASF), sponsored by the Apache Incubator PMC.\n+\n+Incubation is required of all newly accepted projects until a further review\n+indicates that the infrastructure, communications, and decision making process\n+have stabilized in a manner consistent with other successful ASF projects.\n+\n+While incubation status is not necessarily a reflection of the completeness\n+or stability of the code, it does indicate that the project has yet to be\n+fully endorsed by the ASF.\n+\n+For more information about the incubation status of the Apache NiFi project\n+you can go to the following page:\n+\n+http://nifi.incubator.apache.org/"
        },
        {
            "sha": "d645695673349e3947e8e5ae42332d0ac3164cd7",
            "filename": "LICENSE",
            "status": "added",
            "additions": 202,
            "deletions": 0,
            "changes": 202,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/LICENSE",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/LICENSE",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/LICENSE?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,202 @@\n+\n+                                 Apache License\n+                           Version 2.0, January 2004\n+                        http://www.apache.org/licenses/\n+\n+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n+\n+   1. Definitions.\n+\n+      \"License\" shall mean the terms and conditions for use, reproduction,\n+      and distribution as defined by Sections 1 through 9 of this document.\n+\n+      \"Licensor\" shall mean the copyright owner or entity authorized by\n+      the copyright owner that is granting the License.\n+\n+      \"Legal Entity\" shall mean the union of the acting entity and all\n+      other entities that control, are controlled by, or are under common\n+      control with that entity. For the purposes of this definition,\n+      \"control\" means (i) the power, direct or indirect, to cause the\n+      direction or management of such entity, whether by contract or\n+      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n+      outstanding shares, or (iii) beneficial ownership of such entity.\n+\n+      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n+      exercising permissions granted by this License.\n+\n+      \"Source\" form shall mean the preferred form for making modifications,\n+      including but not limited to software source code, documentation\n+      source, and configuration files.\n+\n+      \"Object\" form shall mean any form resulting from mechanical\n+      transformation or translation of a Source form, including but\n+      not limited to compiled object code, generated documentation,\n+      and conversions to other media types.\n+\n+      \"Work\" shall mean the work of authorship, whether in Source or\n+      Object form, made available under the License, as indicated by a\n+      copyright notice that is included in or attached to the work\n+      (an example is provided in the Appendix below).\n+\n+      \"Derivative Works\" shall mean any work, whether in Source or Object\n+      form, that is based on (or derived from) the Work and for which the\n+      editorial revisions, annotations, elaborations, or other modifications\n+      represent, as a whole, an original work of authorship. For the purposes\n+      of this License, Derivative Works shall not include works that remain\n+      separable from, or merely link (or bind by name) to the interfaces of,\n+      the Work and Derivative Works thereof.\n+\n+      \"Contribution\" shall mean any work of authorship, including\n+      the original version of the Work and any modifications or additions\n+      to that Work or Derivative Works thereof, that is intentionally\n+      submitted to Licensor for inclusion in the Work by the copyright owner\n+      or by an individual or Legal Entity authorized to submit on behalf of\n+      the copyright owner. For the purposes of this definition, \"submitted\"\n+      means any form of electronic, verbal, or written communication sent\n+      to the Licensor or its representatives, including but not limited to\n+      communication on electronic mailing lists, source code control systems,\n+      and issue tracking systems that are managed by, or on behalf of, the\n+      Licensor for the purpose of discussing and improving the Work, but\n+      excluding communication that is conspicuously marked or otherwise\n+      designated in writing by the copyright owner as \"Not a Contribution.\"\n+\n+      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n+      on behalf of whom a Contribution has been received by Licensor and\n+      subsequently incorporated within the Work.\n+\n+   2. Grant of Copyright License. Subject to the terms and conditions of\n+      this License, each Contributor hereby grants to You a perpetual,\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n+      copyright license to reproduce, prepare Derivative Works of,\n+      publicly display, publicly perform, sublicense, and distribute the\n+      Work and such Derivative Works in Source or Object form.\n+\n+   3. Grant of Patent License. Subject to the terms and conditions of\n+      this License, each Contributor hereby grants to You a perpetual,\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n+      (except as stated in this section) patent license to make, have made,\n+      use, offer to sell, sell, import, and otherwise transfer the Work,\n+      where such license applies only to those patent claims licensable\n+      by such Contributor that are necessarily infringed by their\n+      Contribution(s) alone or by combination of their Contribution(s)\n+      with the Work to which such Contribution(s) was submitted. If You\n+      institute patent litigation against any entity (including a\n+      cross-claim or counterclaim in a lawsuit) alleging that the Work\n+      or a Contribution incorporated within the Work constitutes direct\n+      or contributory patent infringement, then any patent licenses\n+      granted to You under this License for that Work shall terminate\n+      as of the date such litigation is filed.\n+\n+   4. Redistribution. You may reproduce and distribute copies of the\n+      Work or Derivative Works thereof in any medium, with or without\n+      modifications, and in Source or Object form, provided that You\n+      meet the following conditions:\n+\n+      (a) You must give any other recipients of the Work or\n+          Derivative Works a copy of this License; and\n+\n+      (b) You must cause any modified files to carry prominent notices\n+          stating that You changed the files; and\n+\n+      (c) You must retain, in the Source form of any Derivative Works\n+          that You distribute, all copyright, patent, trademark, and\n+          attribution notices from the Source form of the Work,\n+          excluding those notices that do not pertain to any part of\n+          the Derivative Works; and\n+\n+      (d) If the Work includes a \"NOTICE\" text file as part of its\n+          distribution, then any Derivative Works that You distribute must\n+          include a readable copy of the attribution notices contained\n+          within such NOTICE file, excluding those notices that do not\n+          pertain to any part of the Derivative Works, in at least one\n+          of the following places: within a NOTICE text file distributed\n+          as part of the Derivative Works; within the Source form or\n+          documentation, if provided along with the Derivative Works; or,\n+          within a display generated by the Derivative Works, if and\n+          wherever such third-party notices normally appear. The contents\n+          of the NOTICE file are for informational purposes only and\n+          do not modify the License. You may add Your own attribution\n+          notices within Derivative Works that You distribute, alongside\n+          or as an addendum to the NOTICE text from the Work, provided\n+          that such additional attribution notices cannot be construed\n+          as modifying the License.\n+\n+      You may add Your own copyright statement to Your modifications and\n+      may provide additional or different license terms and conditions\n+      for use, reproduction, or distribution of Your modifications, or\n+      for any such Derivative Works as a whole, provided Your use,\n+      reproduction, and distribution of the Work otherwise complies with\n+      the conditions stated in this License.\n+\n+   5. Submission of Contributions. Unless You explicitly state otherwise,\n+      any Contribution intentionally submitted for inclusion in the Work\n+      by You to the Licensor shall be under the terms and conditions of\n+      this License, without any additional terms or conditions.\n+      Notwithstanding the above, nothing herein shall supersede or modify\n+      the terms of any separate license agreement you may have executed\n+      with Licensor regarding such Contributions.\n+\n+   6. Trademarks. This License does not grant permission to use the trade\n+      names, trademarks, service marks, or product names of the Licensor,\n+      except as required for reasonable and customary use in describing the\n+      origin of the Work and reproducing the content of the NOTICE file.\n+\n+   7. Disclaimer of Warranty. Unless required by applicable law or\n+      agreed to in writing, Licensor provides the Work (and each\n+      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+      implied, including, without limitation, any warranties or conditions\n+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n+      PARTICULAR PURPOSE. You are solely responsible for determining the\n+      appropriateness of using or redistributing the Work and assume any\n+      risks associated with Your exercise of permissions under this License.\n+\n+   8. Limitation of Liability. In no event and under no legal theory,\n+      whether in tort (including negligence), contract, or otherwise,\n+      unless required by applicable law (such as deliberate and grossly\n+      negligent acts) or agreed to in writing, shall any Contributor be\n+      liable to You for damages, including any direct, indirect, special,\n+      incidental, or consequential damages of any character arising as a\n+      result of this License or out of the use or inability to use the\n+      Work (including but not limited to damages for loss of goodwill,\n+      work stoppage, computer failure or malfunction, or any and all\n+      other commercial damages or losses), even if such Contributor\n+      has been advised of the possibility of such damages.\n+\n+   9. Accepting Warranty or Additional Liability. While redistributing\n+      the Work or Derivative Works thereof, You may choose to offer,\n+      and charge a fee for, acceptance of support, warranty, indemnity,\n+      or other liability obligations and/or rights consistent with this\n+      License. However, in accepting such obligations, You may act only\n+      on Your own behalf and on Your sole responsibility, not on behalf\n+      of any other Contributor, and only if You agree to indemnify,\n+      defend, and hold each Contributor harmless for any liability\n+      incurred by, or claims asserted against, such Contributor by reason\n+      of your accepting any such warranty or additional liability.\n+\n+   END OF TERMS AND CONDITIONS\n+\n+   APPENDIX: How to apply the Apache License to your work.\n+\n+      To apply the Apache License to your work, attach the following\n+      boilerplate notice, with the fields enclosed by brackets \"[]\"\n+      replaced with your own identifying information. (Don't include\n+      the brackets!)  The text should be enclosed in the appropriate\n+      comment syntax for the file format. We also recommend that a\n+      file or class name and description of purpose be included on the\n+      same \"printed page\" as the copyright notice for easier\n+      identification within third-party archives.\n+\n+   Copyright [yyyy] [name of copyright owner]\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License."
        },
        {
            "sha": "e02ae44d1d44aaf5241d039fa5c641936e41dc5f",
            "filename": "NOTICE",
            "status": "added",
            "additions": 7,
            "deletions": 0,
            "changes": 7,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/NOTICE",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/NOTICE",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/NOTICE?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,7 @@\n+Apache NiFi\n+Copyright 2014 The Apache Software Foundation\n+\n+This product includes software developed at\n+The Apache Software Foundation (http://www.apache.org/).\n+\n+Please see LICENSE for additional copyright and licensing information."
        },
        {
            "sha": "3f051341b53a2fa6c79f05f0fe59d5a2cc9ffb1f",
            "filename": "README.md",
            "status": "added",
            "additions": 65,
            "deletions": 0,
            "changes": 65,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/README.md",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/README.md",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/README.md?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,65 @@\n+# Apache NiFi\n+\n+Apache NiFi is a dataflow system based on the concepts of flow-based programming. It is currently apart of the Apache Incubator.\n+\n+## Table of Contents\n+\n+- [Features](#features)\n+- [Getting Started](#getting-started)\n+- [Getting Help](#getting-help)\n+- [Requirements](#requirements)\n+- [License](#license)\n+- [Disclaimer](#disclaimer)\n+\n+## Features\n+\n+Apache NiFi supports powerful and scalable directed graphs of data routing, transformation, and system mediation logic. Some of the high-level capabilities and objectives of Apache NiFi include:\n+\n+- Web-based user interface for seamless experience between design, control, feedback, and monitoring of data flows\n+- Highly configurable along several dimensions of quality of service such as loss tolerant versus guaranteed delivery, low latency versus high throughput, and priority based queuing\n+- Fine-grained data provenance for all data received, forked, joined, cloned, modified, sent, and ultimately dropped as data reaches its configured end-state\n+- Component-based extension model along well defined interfaces enabling rapid development and effective testing \n+\n+## Getting Started\n+\n+Execute <nifi install dir>/bin/nifi.sh\n+\n+## Getting Help\n+If you have questions, you can reach out to our mailing list: dev@nifi.incubator.apache.org\n+([archive](http://mail-archives.apache.org/mod_mbox/incubator-nifi-dev)).\n+We're also often available in IRC: #nifi on\n+[irc.freenode.net](http://webchat.freenode.net/?channels=#nifi).\n+\n+\n+## Requirements\n+* JDK 1.7 or higher\n+\n+## License\n+\n+Except as otherwise noted this software is licensed under the\n+[Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html)\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+\n+## Disclaimer\n+\n+Apache NiFi is an effort undergoing incubation at the Apache Software\n+Foundation (ASF), sponsored by the Apache Incubator PMC.\n+\n+Incubation is required of all newly accepted projects until a further review\n+indicates that the infrastructure, communications, and decision making process\n+have stabilized in a manner consistent with other successful ASF projects.\n+\n+While incubation status is not necessarily a reflection of the completeness\n+or stability of the code, it does indicate that the project has yet to be\n+fully endorsed by the ASF."
        },
        {
            "sha": "ec06a2327d4ae91556a35a4caf7dd083868a3337",
            "filename": "assemblies/nifi/pom.xml",
            "status": "added",
            "additions": 485,
            "deletions": 0,
            "changes": 485,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/assemblies%2Fnifi%2Fpom.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/assemblies%2Fnifi%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/assemblies%2Fnifi%2Fpom.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,485 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements.  See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to You under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License.  You may obtain a copy of the License at\n+      http://www.apache.org/licenses/LICENSE-2.0\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.apache.nifi</groupId>\n+        <artifactId>nifi-parent</artifactId>\n+        <version>0.0.1-SNAPSHOT</version>\n+    </parent>\n+    \n+    <artifactId>nifi</artifactId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <packaging>pom</packaging>\n+    \n+    <name>NiFi Release</name>\n+    <description>This is the assembly for the Main Standard Release of NiFi</description>\n+    \n+    <build>\n+        <plugins>\n+            <plugin>\n+                <artifactId>maven-dependency-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>unpack-shared-resources</id>\n+                        <goals>\n+                            <goal>unpack-dependencies</goal>\n+                        </goals>\n+                        <phase>generate-resources</phase>\n+                        <configuration>\n+                            <outputDirectory>${project.build.directory}/generated-resources</outputDirectory>\n+                            <includeArtifactIds>nifi-resources</includeArtifactIds>\n+                            <includeGroupIds>org.apache.nifi</includeGroupIds>\n+                            <excludeTransitive>false</excludeTransitive>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-assembly-plugin</artifactId>\n+                <configuration>\n+                    <descriptors>\n+                        <descriptor>src/main/assembly/dependencies.xml</descriptor>\n+                    </descriptors>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>exec-maven-plugin</artifactId>\n+                <version>1.3.2</version>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>exec</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+                <configuration>\n+                    <executable>${project.build.directory}/${project.artifactId}-${project.version}-${nifi.assembly.id}.dir/${nifi.executable}</executable>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+        <resources>\n+            <resource>\n+                <directory>${basedir}/src/main/resources</directory>\n+            </resource>\n+            <resource>\n+                <directory>${project.build.directory}/generated-resources</directory>\n+                <filtering>true</filtering>\n+            </resource>\n+        </resources>\n+    </build>\n+    <dependencies>\n+        <dependency>\n+            <groupId>ch.qos.logback</groupId>\n+            <artifactId>logback-classic</artifactId>\n+            <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>jcl-over-slf4j</artifactId>\n+            <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>jul-to-slf4j</artifactId>\n+            <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>log4j-over-slf4j</artifactId>\n+            <version>${org.slf4j.version}</version>\n+            <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-api</artifactId>\n+            <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>nifi-api</artifactId>\n+            <version>0.0.1-SNAPSHOT</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>nifi-runtime</artifactId>\n+            <version>${framework.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>nifi-resources</artifactId>\n+            <version>${framework.version}</version>\n+            <classifier>resources</classifier>\n+            <scope>provided</scope> <!-- Provided - we don't want the zip in the libs -->\n+            <type>zip</type>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>nifi-framework-nar</artifactId>\n+            <version>${framework.version}</version>\n+            <type>nar</type>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>volatile-provenance-repository-nar</artifactId>\n+            <version>0.0.1-SNAPSHOT</version>\n+            <type>nar</type>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>persistent-provenance-repository-nar</artifactId>\n+            <version>0.0.1-SNAPSHOT</version>\n+            <type>nar</type>\n+        </dependency>\n+\t\t\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>standard-services-api-nar</artifactId>\n+            <version>0.0.1-SNAPSHOT</version>\n+            <type>nar</type>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>ssl-context-service-nar</artifactId>\n+            <version>0.0.1-SNAPSHOT</version>\n+            <type>nar</type>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>distributed-cache-services-nar</artifactId>\n+            <version>0.0.1-SNAPSHOT</version>\n+            <type>nar</type>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>nifi-standard-nar</artifactId>\n+            <version>0.0.1-SNAPSHOT</version>\n+            <type>nar</type>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>nifi-jetty-bundle</artifactId>\n+            <version>0.0.1-SNAPSHOT</version>\n+            <type>nar</type>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>update-attribute-nar</artifactId>\n+            <version>0.0.1-SNAPSHOT</version>\n+            <type>nar</type>\n+        </dependency>\n+\t\t\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>monitor-threshold-nar</artifactId>\n+            <version>0.0.1-SNAPSHOT</version>\n+            <type>nar</type>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>hadoop-libraries-nar</artifactId>\n+            <version>0.0.1-SNAPSHOT</version>\n+            <type>nar</type>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>hadoop-nar</artifactId>\n+            <version>0.0.1-SNAPSHOT</version>\n+            <type>nar</type>\n+        </dependency>\n+        <!--        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>execute-script-nar</artifactId>\n+            <version>0.0.1-SNAPSHOT</version>\n+            <type>nar</type>\n+        </dependency>-->\n+    </dependencies>\n+    \n+    <properties>\n+        <framework.version>0.0.1-SNAPSHOT</framework.version>\n+        \n+        <!--Wrapper Properties-->\n+        <nifi.wrapper.jvm.heap.initial.mb>256</nifi.wrapper.jvm.heap.initial.mb>\n+        <nifi.wrapper.jvm.heap.max.mb>512</nifi.wrapper.jvm.heap.max.mb>\n+        <nifi.initial.permgen.size.mb>128</nifi.initial.permgen.size.mb>\n+        <nifi.max.permgen.size.mb>128</nifi.max.permgen.size.mb>\n+        <nifi.wrapper.logfile.maxsize>10m</nifi.wrapper.logfile.maxsize>\n+        <nifi.wrapper.logfile.maxfiles>10</nifi.wrapper.logfile.maxfiles>\n+        \n+        <!-- nifi.properties: core properties -->\n+        <nifi.flowcontroller.autoResumeState>true</nifi.flowcontroller.autoResumeState>\n+        <nifi.flowcontroller.graceful.shutdown.period>10 sec</nifi.flowcontroller.graceful.shutdown.period>\n+        <nifi.flowservice.writedelay.interval>500 ms</nifi.flowservice.writedelay.interval>\n+        <nifi.administrative.yield.duration>30 sec</nifi.administrative.yield.duration>\n+\n+        <nifi.flow.configuration.file>./conf/flow.xml.gz</nifi.flow.configuration.file>\n+        <nifi.flow.configuration.archive.dir>./conf/archive/</nifi.flow.configuration.archive.dir>\n+        <nifi.reporting.task.configuration.file>./conf/reporting-tasks.xml</nifi.reporting.task.configuration.file>\n+        <nifi.controller.service.configuration.file>./conf/controller-services.xml</nifi.controller.service.configuration.file>\n+        <nifi.authority.provider.configuration.file>./conf/authority-providers.xml</nifi.authority.provider.configuration.file>\n+        <nifi.templates.directory>./conf/templates</nifi.templates.directory>\n+        <nifi.database.directory>./database_repository</nifi.database.directory>\n+\n+        <nifi.flowfile.repository.implementation>org.apache.nifi.controller.repository.WriteAheadFlowFileRepository</nifi.flowfile.repository.implementation>\n+        <nifi.flowfile.repository.directory>./flowfile_repository</nifi.flowfile.repository.directory>\n+        <nifi.flowfile.repository.partitions>256</nifi.flowfile.repository.partitions>\n+        <nifi.flowfile.repository.checkpoint.interval>2 mins</nifi.flowfile.repository.checkpoint.interval>\n+        <nifi.flowfile.repository.always.sync>false</nifi.flowfile.repository.always.sync>\n+        <nifi.swap.manager.implementation>org.apache.nifi.controller.FileSystemSwapManager</nifi.swap.manager.implementation>\n+        <nifi.queue.swap.threshold>20000</nifi.queue.swap.threshold>\n+        <nifi.swap.storage.directory>./flowfile_repository/swap</nifi.swap.storage.directory>\n+        <nifi.swap.in.period>5 sec</nifi.swap.in.period>\n+        <nifi.swap.in.threads>1</nifi.swap.in.threads>\n+        <nifi.swap.out.period>5 sec</nifi.swap.out.period>\n+        <nifi.swap.out.threads>4</nifi.swap.out.threads>\n+\t\t\n+        <nifi.content.repository.implementation>org.apache.nifi.controller.repository.FileSystemRepository</nifi.content.repository.implementation>\n+        <nifi.content.claim.max.appendable.size>10 MB</nifi.content.claim.max.appendable.size>\n+        <nifi.content.claim.max.flow.files>100</nifi.content.claim.max.flow.files>\n+        <nifi.content.repository.directory.default>./content_repository</nifi.content.repository.directory.default>\n+        <nifi.content.repository.archive.max.retention.period />\n+        <nifi.content.repository.archive.max.usage.percentage />\n+        <nifi.content.repository.archive.enabled>false</nifi.content.repository.archive.enabled>\n+        <nifi.content.repository.always.sync>false</nifi.content.repository.always.sync>\n+        <nifi.content.viewer.url />\n+        \n+        \n+        <nifi.restore.directory />\n+        <nifi.ui.banner.text></nifi.ui.banner.text>\n+        <nifi.ui.autorefresh.interval>30 sec</nifi.ui.autorefresh.interval>\n+        <nifi.nar.library.directory>./lib</nifi.nar.library.directory>\n+        <nifi.nar.working.directory>./work/nar/</nifi.nar.working.directory>\n+        <nifi.documentation.working.directory>./work/docs/components</nifi.documentation.working.directory>\n+        \n+        <nifi.sensitive.props.algorithm>PBEWITHMD5AND256BITAES-CBC-OPENSSL</nifi.sensitive.props.algorithm>\n+        <nifi.sensitive.props.provider>BC</nifi.sensitive.props.provider>\n+        <nifi.h2.url.append>;LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE</nifi.h2.url.append>\n+\n+        <nifi.remote.input.socket.port>9990</nifi.remote.input.socket.port>\n+        \n+        <!-- persistent provenance repository properties -->\n+        <nifi.provenance.repository.implementation>org.apache.nifi.provenance.PersistentProvenanceRepository</nifi.provenance.repository.implementation>\n+        <nifi.provenance.repository.directory.default>./provenance_repository</nifi.provenance.repository.directory.default>\n+        <nifi.provenance.repository.max.storage.time>24 hours</nifi.provenance.repository.max.storage.time>\n+        <nifi.provenance.repository.max.storage.size>1 GB</nifi.provenance.repository.max.storage.size>\n+        <nifi.provenance.repository.rollover.time>5 mins</nifi.provenance.repository.rollover.time>\n+        <nifi.provenance.repository.rollover.size>100 MB</nifi.provenance.repository.rollover.size>\n+        <nifi.provenance.repository.query.threads>2</nifi.provenance.repository.query.threads>\n+        <nifi.provenance.repository.compress.on.rollover>true</nifi.provenance.repository.compress.on.rollover>\n+        <nifi.provenance.repository.indexed.fields>EventType, FlowFileUUID, Filename, ProcessorID</nifi.provenance.repository.indexed.fields>\n+        <nifi.provenance.repository.indexed.attributes />\n+        <nifi.provenance.repository.index.shard.size>500 MB</nifi.provenance.repository.index.shard.size>\n+        <nifi.provenance.repository.always.sync>false</nifi.provenance.repository.always.sync>\n+        <nifi.provenance.repository.journal.count>16</nifi.provenance.repository.journal.count>\n+        \n+        <!-- volatile provenance repository properties -->\n+        <nifi.provenance.repository.buffer.size>100000</nifi.provenance.repository.buffer.size>\n+        \n+        <!-- Component status repository properties -->\n+        <nifi.components.status.repository.implementation>org.apache.nifi.controller.status.history.VolatileComponentStatusRepository</nifi.components.status.repository.implementation>\n+        <nifi.components.status.repository.buffer.size>288</nifi.components.status.repository.buffer.size>\n+        <nifi.components.status.snapshot.frequency>5 mins</nifi.components.status.snapshot.frequency>\n+        \n+        <!-- nifi.properties: web properties -->\n+        <nifi.web.war.directory>./lib</nifi.web.war.directory>\n+        <nifi.web.http.host />\n+        <nifi.web.http.port>8080</nifi.web.http.port>\n+        <nifi.web.https.host />\n+        <nifi.web.https.port />\n+        <nifi.jetty.work.dir>./work/jetty</nifi.jetty.work.dir>\n+        \n+        <!-- nifi.properties: security properties -->\n+        <nifi.security.keystore />\n+        <nifi.security.keystoreType />\n+        <nifi.security.keystorePasswd />\n+        <nifi.security.keyPasswd />\n+        <nifi.security.truststore />\n+        <nifi.security.truststoreType />\n+        <nifi.security.truststorePasswd />\n+        <nifi.security.needClientAuth />\n+        <nifi.security.authorizedUsers.file>./conf/authorized-users.xml</nifi.security.authorizedUsers.file>\n+        <nifi.security.user.credential.cache.duration>24 hours</nifi.security.user.credential.cache.duration>\n+        <nifi.security.user.authority.provider>file-provider</nifi.security.user.authority.provider>\n+        <nifi.security.x509.principal.extractor />\n+        <nifi.security.support.new.account.requests />\n+        <nifi.security.ocsp.responder.url />\n+        <nifi.security.ocsp.responder.certificate />\n+        \n+        <!-- nifi.properties: cluster common properties (cluster manager and nodes must have same values) -->\n+        <nifi.cluster.protocol.heartbeat.interval>5 sec</nifi.cluster.protocol.heartbeat.interval>\n+        <nifi.cluster.protocol.is.secure>false</nifi.cluster.protocol.is.secure>\n+        <nifi.cluster.protocol.socket.timeout>30 sec</nifi.cluster.protocol.socket.timeout>\n+        <nifi.cluster.protocol.connection.handshake.timeout>45 sec</nifi.cluster.protocol.connection.handshake.timeout> \n+        <nifi.cluster.protocol.use.multicast>false</nifi.cluster.protocol.use.multicast>\n+        <nifi.cluster.protocol.multicast.address />\n+        <nifi.cluster.protocol.multicast.port />\n+        <nifi.cluster.protocol.multicast.service.broadcast.delay>500 ms</nifi.cluster.protocol.multicast.service.broadcast.delay>\n+        <nifi.cluster.protocol.multicast.service.locator.attempts>3</nifi.cluster.protocol.multicast.service.locator.attempts>\n+        <nifi.cluster.protocol.multicast.service.locator.attempts.delay>1 sec</nifi.cluster.protocol.multicast.service.locator.attempts.delay>\n+\n+        <!-- nifi.properties: cluster node properties (only configure for cluster nodes) -->\n+        <nifi.cluster.is.node>false</nifi.cluster.is.node>\n+        <nifi.cluster.node.address />\n+        <nifi.cluster.node.protocol.port />\n+        <nifi.cluster.node.protocol.threads>2</nifi.cluster.node.protocol.threads>\n+        <nifi.cluster.node.unicast.manager.address />\n+        <nifi.cluster.node.unicast.manager.protocol.port />\n+        \n+        <!-- nifi.properties: cluster manager properties (only configure for cluster manager) -->\n+        <nifi.cluster.is.manager>false</nifi.cluster.is.manager>\n+        <nifi.cluster.manager.address />\n+        <nifi.cluster.manager.protocol.port />\n+        <nifi.cluster.manager.node.firewall.file />\n+        <nifi.cluster.manager.node.event.history.size>10</nifi.cluster.manager.node.event.history.size>\n+        <nifi.cluster.manager.node.api.connection.timeout>30 sec</nifi.cluster.manager.node.api.connection.timeout>\n+        <nifi.cluster.manager.node.api.read.timeout>30 sec</nifi.cluster.manager.node.api.read.timeout>\n+        <nifi.cluster.manager.node.api.request.threads>10</nifi.cluster.manager.node.api.request.threads>\n+        <nifi.cluster.manager.flow.retrieval.delay>5 sec</nifi.cluster.manager.flow.retrieval.delay>\n+        <nifi.cluster.manager.protocol.threads>10</nifi.cluster.manager.protocol.threads>\n+        <nifi.cluster.manager.safemode.duration>0 sec</nifi.cluster.manager.safemode.duration>\n+        \n+        <!--\n+            Properties to execute nifi using Maven.  It is assumed that the assembly has a\n+            format of type 'dir' so that the executable can be referenced in a defined location.\n+        -->\n+        <nifi.assembly.id>bin</nifi.assembly.id>\n+        <nifi.executable>${project.artifactId}-${project.version}/bin/${project.artifactId}</nifi.executable>\n+        \n+    </properties>\n+    <profiles>\n+        <profile>\n+            <id>standard-rpm</id>\n+            <activation>\n+                <activeByDefault>false</activeByDefault>\n+            </activation>\n+            <build>\n+                <plugins>\n+                    <plugin>\n+                        <groupId>org.codehaus.mojo</groupId>\n+                        <artifactId>rpm-maven-plugin</artifactId>\n+                        <version>2.0.1</version>\n+                        <executions>\n+                            <execution>\n+                                <goals>\n+                                    <goal>rpm</goal>\n+                                </goals>\n+                            </execution>\n+                        </executions>\n+                        <configuration>\n+                            <name>${project.artifactId}</name>\n+                            <projversion>${project.version}</projversion>\n+                            <summary>NiFi data flow framework</summary>\n+                            <description>\n+                                Nifi is a simple event processing framework largely\n+                                based on the Flow-Based Programming concepts.\n+                            </description>\n+                            <copyright>NONE</copyright>\n+                            <url>http://nifi.apache.org</url>\n+                            <group>Utilities</group>\n+                            <requires>\n+                                <require>jdk</require>\n+                            </requires>\n+                            <prefix>/opt/${project.artifactId}</prefix>\n+                            <defineStatements>\n+                                <defineStatement>_use_internal_dependency_generator 0</defineStatement>\n+                            </defineStatements>\n+                            <defaultDirmode>750</defaultDirmode>\n+                            <defaultFilemode>640</defaultFilemode>\n+                            <defaultUsername>dataflow</defaultUsername>\n+                            <defaultGroupname>dataflow</defaultGroupname>\n+                            <mappings>\n+                                <mapping>\n+                                    <directory>/opt/${project.artifactId}/${project.artifactId}-${project.version}</directory>\n+                                </mapping>\n+                                <mapping>\n+                                    <directory>/opt/${project.artifactId}/${project.artifactId}-${project.version}/bin</directory>\n+                                    <filemode>750</filemode>\n+                                    <sources>\n+                                        <source>\n+                                            <location>${project.build.directory}/generated-resources/bin/nifi</location>\n+                                            <destination>${project.artifactId}</destination>\n+                                            <filter>true</filter>\n+                                        </source>\n+                                        <source>\n+                                            <location>${project.build.directory}/generated-resources/bin/wrapper-linux-x86-32</location>\n+                                        </source>\n+                                        <source>\n+                                            <location>${project.build.directory}/generated-resources/bin/wrapper-linux-x86-64</location>\n+                                        </source>\n+                                    </sources>\n+                                </mapping>\n+                                <mapping>\n+                                    <directory>/opt/${project.artifactId}/${project.artifactId}-${project.version}/conf</directory>\n+                                    <configuration>true</configuration>\n+                                    <sources>\n+                                        <source>\n+                                            <location>${project.build.directory}/generated-resources/conf</location>\n+                                            <excludes>\n+                                                <exclude>nifi.properties</exclude>\n+                                            </excludes>\n+                                            <filter>true</filter>\n+                                        </source>\n+                                        <source>\n+                                            <location>${project.build.directory}/generated-resources/conf/nifi.properties</location>\n+                                            <destination>${project.artifactId}.properties</destination>\n+                                            <filter>true</filter>\n+                                        </source>\n+                                    </sources>\n+                                </mapping>\n+                                <mapping>\n+                                    <directory>/opt/${project.artifactId}/${project.artifactId}-${project.version}/lib</directory>\n+                                    <dependency />\n+                                    <sources>\n+                                        <source>\n+                                            <location>${project.build.directory}/generated-resources/lib</location>\n+                                            <excludes>\n+                                                <exclude>**/*-aix*</exclude>\n+                                                <exclude>**/*-freebsd*</exclude>\n+                                                <exclude>**/*-hpux*</exclude>                                                \n+                                                <exclude>**/*-linux-ia*</exclude>\n+                                                <exclude>**/*-linux-ppc*</exclude>\n+                                                <exclude>**/*-macosx*</exclude>\n+                                                <exclude>**/*-solaris*</exclude>\n+                                                <exclude>**/*-windows*</exclude>\n+                                            </excludes>\n+                                        </source>\n+                                    </sources>\n+                                </mapping>\n+                                <mapping>\n+                                    <directory>/opt/${project.artifactId}/${project.artifactId}-${project.version}/docs</directory>\n+                                    <sources>\n+                                        <source>\n+                                            <location>${project.build.directory}/generated-resources/docs</location>\n+                                        </source>\n+                                    </sources>\n+                                </mapping>\n+                                <mapping>\n+                                    <directory>/opt/${project.artifactId}/${project.artifactId}-${project.version}/logs</directory>\n+                                    <sources>\n+                                        <source>\n+                                            <location>${project.build.directory}/generated-resources/logs</location>\n+                                        </source>\n+                                    </sources>\n+                                </mapping>\n+                            </mappings>\n+                        </configuration>\n+                    </plugin>\n+                </plugins>\n+            </build>\n+        </profile>\n+    </profiles>\n+</project>"
        },
        {
            "sha": "339275bd11967618fd2af57298affa1b1d106abf",
            "filename": "assemblies/nifi/src/main/assembly/dependencies.xml",
            "status": "added",
            "additions": 123,
            "deletions": 0,
            "changes": 123,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/assemblies%2Fnifi%2Fsrc%2Fmain%2Fassembly%2Fdependencies.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/assemblies%2Fnifi%2Fsrc%2Fmain%2Fassembly%2Fdependencies.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/assemblies%2Fnifi%2Fsrc%2Fmain%2Fassembly%2Fdependencies.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,123 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements.  See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to You under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License.  You may obtain a copy of the License at\n+      http://www.apache.org/licenses/LICENSE-2.0\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<assembly>\n+    <id>bin</id>\n+    <formats>\n+        <format>dir</format>\n+        <format>tar.gz</format>\n+    </formats>\n+    <includeBaseDirectory>true</includeBaseDirectory>\n+    <baseDirectory>${project.artifactId}-${project.version}</baseDirectory>\n+\n+    <dependencySets>\n+        <dependencySet>\n+            <scope>runtime</scope>\n+            <outputDirectory>lib</outputDirectory>\n+            <useTransitiveFiltering>true</useTransitiveFiltering>\n+        </dependencySet>\n+    </dependencySets>\n+\n+    <fileSets>\n+        <fileSet>\n+            <directory>${project.build.directory}/generated-resources/bin</directory>\n+            <outputDirectory>bin</outputDirectory>\n+            <directoryMode>0750</directoryMode>\n+            <fileMode>0750</fileMode>\n+            <filtered>false</filtered>\n+        </fileSet>\n+        <fileSet>\n+            <directory>${project.build.directory}/generated-resources/conf</directory>\n+            <outputDirectory>conf</outputDirectory>\n+            <excludes>\n+                <exclude>nifi.properties</exclude>\n+            </excludes>\n+            <directoryMode>0750</directoryMode>\n+            <fileMode>0640</fileMode>\n+            <filtered>true</filtered>\n+        </fileSet>\n+        <fileSet>\n+            <directory>${project.build.directory}/generated-resources/lib</directory>\n+            <outputDirectory>lib</outputDirectory>\n+            <directoryMode>0750</directoryMode>\n+            <fileMode>0640</fileMode>\n+        </fileSet>\n+        <fileSet>\n+            <directory>${project.build.directory}/generated-resources/logs</directory>\n+            <outputDirectory>logs</outputDirectory>\n+            <directoryMode>0750</directoryMode>\n+            <fileMode>0640</fileMode>\n+        </fileSet>\n+        <fileSet>\n+            <directory>${project.build.directory}/generated-resources/docs</directory>\n+            <outputDirectory>docs</outputDirectory>\n+            <directoryMode>0750</directoryMode>\n+            <fileMode>0640</fileMode>\n+            <filtered>false</filtered>\n+        </fileSet>\n+    </fileSets>\n+\n+    <files>\n+        <file>\n+            <source>${project.build.directory}/generated-resources/conf/nifi.properties</source>\n+            <outputDirectory>conf</outputDirectory>\n+            <destName>${project.artifactId}.properties</destName>\n+            <fileMode>0640</fileMode>\n+            <filtered>true</filtered>\n+        </file>\n+        <file>\n+            <source>${project.build.directory}/generated-resources/bin/nifi.sh</source>\n+            <outputDirectory>bin</outputDirectory>\n+            <destName>nifi.sh</destName>\n+            <fileMode>0750</fileMode>\n+            <filtered>true</filtered>\n+        </file>\n+        <file>\n+            <source>${project.build.directory}/generated-resources/docs/README.md</source>\n+            <outputDirectory>docs</outputDirectory>\n+            <destName>README.md</destName>\n+            <fileMode>0640</fileMode>\n+            <filtered>true</filtered>\n+        </file>\n+        <file>\n+            <source>${project.build.directory}/generated-resources/DISCLAIMER</source>\n+            <outputDirectory>./</outputDirectory>\n+            <destName>DISCLAIMER</destName>\n+            <fileMode>0640</fileMode>\n+            <filtered>true</filtered>\n+        </file>\n+        <file>\n+            <source>${project.build.directory}/generated-resources/DISCLAIMER</source>\n+            <outputDirectory>./</outputDirectory>\n+            <destName>DISCLAIMER</destName>\n+            <fileMode>0640</fileMode>\n+            <filtered>true</filtered>\n+        </file>    \n+        <file>\n+            <source>${project.build.directory}/generated-resources/LICENSE</source>\n+            <outputDirectory>./</outputDirectory>\n+            <destName>LICENSE</destName>\n+            <fileMode>0640</fileMode>\n+            <filtered>true</filtered>\n+        </file>       \n+        <file>\n+            <source>${project.build.directory}/generated-resources/NOTICE</source>\n+            <outputDirectory>./</outputDirectory>\n+            <destName>NOTICE</destName>\n+            <fileMode>0640</fileMode>\n+            <filtered>true</filtered>\n+        </file>\n+    </files>\n+</assembly>"
        },
        {
            "sha": "d611134c69d62c655c6e8abea0a1b9e10ac9708c",
            "filename": "commons/core-flowfile-attributes/pom.xml",
            "status": "added",
            "additions": 32,
            "deletions": 0,
            "changes": 32,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fcore-flowfile-attributes%2Fpom.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fcore-flowfile-attributes%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fcore-flowfile-attributes%2Fpom.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,32 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <!--\n+      Licensed to the Apache Software Foundation (ASF) under one or more\n+      contributor license agreements.  See the NOTICE file distributed with\n+      this work for additional information regarding copyright ownership.\n+      The ASF licenses this file to You under the Apache License, Version 2.0\n+      (the \"License\"); you may not use this file except in compliance with\n+      the License.  You may obtain a copy of the License at\n+          http://www.apache.org/licenses/LICENSE-2.0\n+      Unless required by applicable law or agreed to in writing, software\n+      distributed under the License is distributed on an \"AS IS\" BASIS,\n+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+      See the License for the specific language governing permissions and\n+      limitations under the License.\n+    -->\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.nifi</groupId>\n+        <artifactId>nifi-parent</artifactId>\n+        <version>0.0.1-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>nifi-core-flowfile-attributes</artifactId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <packaging>jar</packaging>\n+\n+    <name>NiFi: Core FlowFile Attributes</name>\n+    \n+    <dependencies>\n+    </dependencies>\n+</project>"
        },
        {
            "sha": "24f43ca5879a7fbd2d5f214f285e13dfe0c90f02",
            "filename": "commons/core-flowfile-attributes/src/main/java/org/apache/nifi/flowfile/attributes/CoreAttributes.java",
            "status": "added",
            "additions": 72,
            "deletions": 0,
            "changes": 72,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fcore-flowfile-attributes%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fflowfile%2Fattributes%2FCoreAttributes.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fcore-flowfile-attributes%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fflowfile%2Fattributes%2FCoreAttributes.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fcore-flowfile-attributes%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fflowfile%2Fattributes%2FCoreAttributes.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.flowfile.attributes;\n+\n+public enum CoreAttributes implements FlowFileAttributeKey {\n+    /**\n+     * The flowfile's path indicates the relative directory to which a FlowFile belongs and does not\n+     * contain the filename\n+     */\n+    PATH(\"path\"),\n+    \n+    /**\n+     * The flowfile's absolute path indicates the absolute directory to which a FlowFile belongs and does not\n+     * contain the filename\n+     */\n+    ABSOLUTE_PATH(\"absolute.path\"),\n+    \n+    /**\n+     * The filename of the FlowFile. The filename should not contain any directory structure.\n+     */\n+    FILENAME(\"filename\"),\n+    \n+    /**\n+     * A unique UUID assigned to this FlowFile\n+     */\n+    UUID(\"uuid\"),\n+    \n+    /**\n+     * A numeric value indicating the FlowFile priority\n+     */\n+    PRIORITY(\"priority\"),\n+    \n+    /**\n+     * The MIME Type of this FlowFile\n+     */\n+    MIME_TYPE(\"mime.type\"),\n+    \n+    /**\n+     * Specifies the reason that a FlowFile is being discarded\n+     */\n+    DISCARD_REASON(\"discard.reason\"),\n+\n+    /**\n+     * Indicates an identifier other than the FlowFile's UUID that is known to refer to this FlowFile.\n+     */\n+    ALTERNATE_IDENTIFIER(\"alternate.identifier\");\n+    \n+    private final String key;\n+    private CoreAttributes(final String key) {\n+        this.key = key;\n+    }\n+    \n+    @Override\n+    public String key() {\n+        return key;\n+    }\n+\n+}"
        },
        {
            "sha": "cc6c28ebaad4ccd1d13584c5c69f8561244cdbf7",
            "filename": "commons/core-flowfile-attributes/src/main/java/org/apache/nifi/flowfile/attributes/FlowFileAttributeKey.java",
            "status": "added",
            "additions": 21,
            "deletions": 0,
            "changes": 21,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fcore-flowfile-attributes%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fflowfile%2Fattributes%2FFlowFileAttributeKey.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fcore-flowfile-attributes%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fflowfile%2Fattributes%2FFlowFileAttributeKey.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fcore-flowfile-attributes%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fflowfile%2Fattributes%2FFlowFileAttributeKey.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,21 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.flowfile.attributes;\n+\n+public interface FlowFileAttributeKey {\n+    String key();\n+}"
        },
        {
            "sha": "19f2e002ce4b64ea5d8ee046e9587984ed33e630",
            "filename": "commons/data-provenance-utils/.gitignore",
            "status": "added",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2F.gitignore",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2F.gitignore",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fdata-provenance-utils%2F.gitignore?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,2 @@\n+/target\n+/target"
        },
        {
            "sha": "0f33c06b287f653d2a5e2c56a8c10dfc06ca74d2",
            "filename": "commons/data-provenance-utils/pom.xml",
            "status": "added",
            "additions": 42,
            "deletions": 0,
            "changes": 42,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2Fpom.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fdata-provenance-utils%2Fpom.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,42 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <!--\n+      Licensed to the Apache Software Foundation (ASF) under one or more\n+      contributor license agreements.  See the NOTICE file distributed with\n+      this work for additional information regarding copyright ownership.\n+      The ASF licenses this file to You under the Apache License, Version 2.0\n+      (the \"License\"); you may not use this file except in compliance with\n+      the License.  You may obtain a copy of the License at\n+          http://www.apache.org/licenses/LICENSE-2.0\n+      Unless required by applicable law or agreed to in writing, software\n+      distributed under the License is distributed on an \"AS IS\" BASIS,\n+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+      See the License for the specific language governing permissions and\n+      limitations under the License.\n+    -->\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.nifi</groupId>\n+        <artifactId>nifi-parent</artifactId>\n+        <version>0.0.1-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>data-provenance-utils</artifactId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <packaging>jar</packaging>\n+\n+    <name>data-provenance-utils</name>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>nifi-api</artifactId>\n+            <version>[0.0.1-SNAPSHOT,1.0.0-SNAPSHOT)</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>nifi-core-flowfile-attributes</artifactId>\n+            <version>0.0.1-SNAPSHOT</version>\n+        </dependency>\n+    </dependencies>\n+</project>"
        },
        {
            "sha": "dc24a93fe49dd42a4653c3305a4988af6d4dedb2",
            "filename": "commons/data-provenance-utils/src/main/java/org/apache/nifi/provenance/AsyncLineageSubmission.java",
            "status": "added",
            "additions": 87,
            "deletions": 0,
            "changes": 87,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2FAsyncLineageSubmission.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2FAsyncLineageSubmission.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2FAsyncLineageSubmission.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.provenance;\n+\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.UUID;\n+\n+import org.apache.nifi.provenance.lineage.ComputeLineageSubmission;\n+import org.apache.nifi.provenance.lineage.LineageComputationType;\n+\n+/**\n+ *\n+ */\n+public class AsyncLineageSubmission implements ComputeLineageSubmission {\n+    private final String lineageIdentifier = UUID.randomUUID().toString();\n+    private final Date submissionTime = new Date();\n+\n+    private final LineageComputationType computationType;\n+    private final Long eventId;\n+    private final Collection<String> lineageFlowFileUuids;\n+\n+    private volatile boolean canceled = false;\n+\n+    private final StandardLineageResult result;\n+\n+    public AsyncLineageSubmission(final LineageComputationType computationType, final Long eventId, final Collection<String> lineageFlowFileUuids, final int numSteps) {\n+        this.computationType = computationType;\n+        this.eventId = eventId;\n+        this.lineageFlowFileUuids = lineageFlowFileUuids;\n+        this.result = new StandardLineageResult(numSteps, lineageFlowFileUuids);\n+    }\n+\n+    @Override\n+    public StandardLineageResult getResult() {\n+        return result;\n+    }\n+\n+    @Override\n+    public Date getSubmissionTime() {\n+        return submissionTime;\n+    }\n+\n+    @Override\n+    public String getLineageIdentifier() {\n+        return lineageIdentifier;\n+    }\n+\n+    @Override\n+    public void cancel() {\n+        this.canceled = true;\n+    }\n+\n+    @Override\n+    public boolean isCanceled() {\n+        return canceled;\n+    }\n+\n+    @Override\n+    public LineageComputationType getLineageComputationType() {\n+        return computationType;\n+    }\n+\n+    @Override\n+    public Long getExpandedEventId() {\n+        return eventId;\n+    }\n+\n+    @Override\n+    public Collection<String> getLineageFlowFileUuids() {\n+        return lineageFlowFileUuids;\n+    }\n+}"
        },
        {
            "sha": "42444762bef4509d5595db7c1851f20b8227dabd",
            "filename": "commons/data-provenance-utils/src/main/java/org/apache/nifi/provenance/AsyncQuerySubmission.java",
            "status": "added",
            "additions": 81,
            "deletions": 0,
            "changes": 81,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2FAsyncQuerySubmission.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2FAsyncQuerySubmission.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2FAsyncQuerySubmission.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.provenance;\n+\n+import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.nifi.provenance.search.Query;\n+import org.apache.nifi.provenance.search.QuerySubmission;\n+\n+/**\n+ *\n+ */\n+public class AsyncQuerySubmission implements QuerySubmission {\n+\n+    public static final int TTL = (int) TimeUnit.MILLISECONDS.convert(60, TimeUnit.SECONDS);\n+\n+    private final Date submissionTime = new Date();\n+    private final Query query;\n+\n+    private volatile boolean canceled = false;\n+    private final StandardQueryResult queryResult;\n+\n+    /**\n+     * Constructs an AsyncQuerySubmission with the given query and the given\n+     * number of steps, indicating how many results must be added to this\n+     * AsyncQuerySubmission before it is considered finished\n+     *\n+     * @param query\n+     * @param numSteps\n+     */\n+    public AsyncQuerySubmission(final Query query, final int numSteps) {\n+        this.query = query;\n+        queryResult = new StandardQueryResult(query, numSteps);\n+    }\n+\n+    @Override\n+    public Date getSubmissionTime() {\n+        return submissionTime;\n+    }\n+\n+    @Override\n+    public String getQueryIdentifier() {\n+        return query.getIdentifier();\n+    }\n+\n+    @Override\n+    public void cancel() {\n+        this.canceled = true;\n+        queryResult.cancel();\n+    }\n+\n+    @Override\n+    public boolean isCanceled() {\n+        return canceled;\n+    }\n+\n+    @Override\n+    public Query getQuery() {\n+        return query;\n+    }\n+\n+    @Override\n+    public StandardQueryResult getResult() {\n+        return queryResult;\n+    }\n+}"
        },
        {
            "sha": "dc2903f377f12aaaecb0f3b6b5282665ff76f0ca",
            "filename": "commons/data-provenance-utils/src/main/java/org/apache/nifi/provenance/NamedSearchableField.java",
            "status": "added",
            "additions": 95,
            "deletions": 0,
            "changes": 95,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2FNamedSearchableField.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2FNamedSearchableField.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2FNamedSearchableField.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.provenance;\n+\n+import org.apache.nifi.provenance.search.SearchableField;\n+import org.apache.nifi.provenance.search.SearchableFieldType;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ *\n+ */\n+public class NamedSearchableField implements SearchableField {\n+\n+    private final String identifier;\n+    private final String searchableName;\n+    private final SearchableFieldType fieldType;\n+    private final String friendlyName;\n+    private final boolean attribute;\n+\n+    NamedSearchableField(final String identifier, final String searchableName, final String friendlyName, final boolean attribute) {\n+        this(identifier, searchableName, friendlyName, attribute, SearchableFieldType.STRING);\n+    }\n+\n+    NamedSearchableField(final String identifier, final String searchableName, final String friendlyName, final boolean attribute, final SearchableFieldType fieldType) {\n+        this.identifier = requireNonNull(identifier);\n+        this.searchableName = requireNonNull(searchableName);\n+        this.friendlyName = requireNonNull(friendlyName);\n+        this.attribute = requireNonNull(attribute);\n+        this.fieldType = requireNonNull(fieldType);\n+    }\n+\n+    @Override\n+    public String getIdentifier() {\n+        return identifier;\n+    }\n+\n+    @Override\n+    public String getSearchableFieldName() {\n+        return searchableName;\n+    }\n+\n+    @Override\n+    public String getFriendlyName() {\n+        return friendlyName;\n+    }\n+\n+    @Override\n+    public boolean isAttribute() {\n+        return attribute;\n+    }\n+\n+    @Override\n+    public SearchableFieldType getFieldType() {\n+        return fieldType;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return friendlyName;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 298347 + searchableName.hashCode() + (attribute ? 1 : 0);\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+\n+        if (!(obj instanceof SearchableField)) {\n+            return false;\n+        }\n+\n+        final SearchableField other = (SearchableField) obj;\n+        return (this.searchableName.equals(other.getSearchableFieldName()) && attribute == other.isAttribute());\n+    }\n+}"
        },
        {
            "sha": "6a934b1ab56280eab0d65e7c8ba9c6cc8806bb23",
            "filename": "commons/data-provenance-utils/src/main/java/org/apache/nifi/provenance/SearchableFieldParser.java",
            "status": "added",
            "additions": 53,
            "deletions": 0,
            "changes": 53,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2FSearchableFieldParser.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2FSearchableFieldParser.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2FSearchableFieldParser.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.provenance;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.nifi.provenance.search.SearchableField;\n+\n+public class SearchableFieldParser {\n+\n+    public static List<SearchableField> extractSearchableFields(final String indexedFieldString, final boolean predefinedField) {\n+        final List<SearchableField> searchableFields = new ArrayList<>();\n+        if (indexedFieldString != null) {\n+            final String[] split = indexedFieldString.split(\",\");\n+            for (String fieldName : split) {\n+                fieldName = fieldName.trim();\n+                if (fieldName.isEmpty()) {\n+                    continue;\n+                }\n+\n+                final SearchableField searchableField;\n+                if (predefinedField) {\n+                    searchableField = SearchableFields.getSearchableField(fieldName);\n+                } else {\n+                    searchableField = SearchableFields.newSearchableAttribute(fieldName);\n+                }\n+\n+                if (searchableField == null) {\n+                    throw new RuntimeException(\"Invalid Configuration: Provenance Repository configured to Index field '\" + fieldName + \"', but this is not a valid field\");\n+                }\n+                searchableFields.add(searchableField);\n+            }\n+        }\n+\n+        return searchableFields;\n+    }\n+\n+}"
        },
        {
            "sha": "97c988029af9357959a9a2ae9a4922a227d35244",
            "filename": "commons/data-provenance-utils/src/main/java/org/apache/nifi/provenance/SearchableFields.java",
            "status": "added",
            "additions": 84,
            "deletions": 0,
            "changes": 84,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2FSearchableFields.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2FSearchableFields.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2FSearchableFields.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.provenance;\n+\n+import org.apache.nifi.provenance.search.SearchableField;\n+import org.apache.nifi.provenance.search.SearchableFieldType;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ *\n+ */\n+public class SearchableFields {\n+\n+    public static final SearchableField Identifier = new NamedSearchableField(\"Identifier\", \"identifier\", \"Identifier\", false);\n+    public static final SearchableField EventTime = new NamedSearchableField(\"EventTime\", \"time\", \"Event Time\", false, SearchableFieldType.DATE);\n+    public static final SearchableField FlowFileUUID = new NamedSearchableField(\"FlowFileUUID\", \"uuid\", \"FlowFile UUID\", false);\n+    public static final SearchableField Filename = new NamedSearchableField(\"Filename\", \"filename\", \"Filename\", false);\n+    public static final SearchableField EventType = new NamedSearchableField(\"EventType\", \"eventType\", \"Event Type\", false);\n+    public static final SearchableField TransitURI = new NamedSearchableField(\"TransitURI\", \"transitUri\", \"Transit URI\", false);\n+    public static final SearchableField ComponentID = new NamedSearchableField(\"ProcessorID\", \"processorId\", \"Component ID\", false);\n+    public static final SearchableField AlternateIdentifierURI = new NamedSearchableField(\"AlternateIdentifierURI\", \"alternateIdentifierUri\", \"Alternate Identifier URI\", false);\n+    public static final SearchableField FileSize = new NamedSearchableField(\"FileSize\", \"fileSize\", \"File Size\", false, SearchableFieldType.DATA_SIZE);\n+    public static final SearchableField Details = new NamedSearchableField(\"Details\", \"details\", \"Details\", false, SearchableFieldType.STRING);\n+    public static final SearchableField Relationship = new NamedSearchableField(\"Relationship\", \"relationship\", \"Relationship\", false, SearchableFieldType.STRING);\n+\n+    public static final SearchableField LineageStartDate = new NamedSearchableField(\"LineageStartDate\", \"lineageStartDate\", \"Lineage Start Date\", false, SearchableFieldType.DATE);\n+    public static final SearchableField LineageIdentifier = new NamedSearchableField(\"LineageIdentifiers\", \"lineageIdentifier\", \"Lineage Identifier\", false, SearchableFieldType.STRING);\n+\n+    public static final SearchableField ContentClaimSection = new NamedSearchableField(\"ContentClaimSection\", \"contentClaimSection\", \"Content Claim Section\", false, SearchableFieldType.STRING);\n+    public static final SearchableField ContentClaimContainer = new NamedSearchableField(\"ContentClaimContainer\", \"contentClaimContainer\", \"Content Claim Container\", false, SearchableFieldType.STRING);\n+    public static final SearchableField ContentClaimIdentifier = new NamedSearchableField(\"ContentClaimIdentifier\", \"contentClaimIdentifier\", \"Content Claim Identifier\", false, SearchableFieldType.STRING);\n+    public static final SearchableField ContentClaimOffset = new NamedSearchableField(\"ContentClaimOffset\", \"contentClaimOffset\", \"Content Claim Offset\", false, SearchableFieldType.LONG);\n+    public static final SearchableField SourceQueueIdentifier = new NamedSearchableField(\"SourceQueueIdentifier\", \"sourceQueueIdentifier\", \"Source Queue Identifier\", false, SearchableFieldType.STRING);\n+\n+    private static final Map<String, SearchableField> standardFields;\n+\n+    static {\n+        final SearchableField[] searchableFields = new SearchableField[]{\n+            EventTime, FlowFileUUID, Filename, EventType, TransitURI,\n+            ComponentID, AlternateIdentifierURI, FileSize, Relationship, Details,\n+            LineageStartDate, LineageIdentifier, ContentClaimSection, ContentClaimContainer, ContentClaimIdentifier,\n+            ContentClaimOffset, SourceQueueIdentifier};\n+\n+        final Map<String, SearchableField> fields = new HashMap<>();\n+        for (final SearchableField field : searchableFields) {\n+            fields.put(field.getIdentifier(), field);\n+        }\n+\n+        standardFields = Collections.unmodifiableMap(fields);\n+    }\n+\n+    private SearchableFields() {\n+    }\n+\n+    public static Collection<SearchableField> getStandardFields() {\n+        return standardFields.values();\n+    }\n+\n+    public static SearchableField getSearchableField(final String fieldIdentifier) {\n+        return standardFields.get(fieldIdentifier);\n+    }\n+\n+    public static SearchableField newSearchableAttribute(final String attributeName) {\n+        return new NamedSearchableField(attributeName, attributeName, attributeName, true);\n+    }\n+}"
        },
        {
            "sha": "afb56e8bdb0a3a00b8afd782cfe5b2221cb52189",
            "filename": "commons/data-provenance-utils/src/main/java/org/apache/nifi/provenance/StandardLineageResult.java",
            "status": "added",
            "additions": 324,
            "deletions": 0,
            "changes": 324,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2FStandardLineageResult.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2FStandardLineageResult.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2FStandardLineageResult.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,324 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.provenance;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.nifi.provenance.lineage.ComputeLineageResult;\n+import org.apache.nifi.provenance.lineage.EdgeNode;\n+import org.apache.nifi.provenance.lineage.EventNode;\n+import org.apache.nifi.provenance.lineage.FlowFileNode;\n+import org.apache.nifi.provenance.lineage.LineageEdge;\n+import org.apache.nifi.provenance.lineage.LineageNode;\n+\n+/**\n+ *\n+ */\n+public class StandardLineageResult implements ComputeLineageResult {\n+\n+    public static final int TTL = (int) TimeUnit.MILLISECONDS.convert(30, TimeUnit.MINUTES);\n+    private static final Logger logger = LoggerFactory.getLogger(StandardLineageResult.class);\n+\n+    private final Collection<String> flowFileUuids;\n+    private final Collection<ProvenanceEventRecord> relevantRecords = new ArrayList<>();\n+    private final Set<LineageNode> nodes = new HashSet<>();\n+    private final Set<LineageEdge> edges = new HashSet<>();\n+    private final int numSteps;\n+    private final long creationNanos;\n+    private long computationNanos;\n+\n+    private final ReadWriteLock rwLock = new ReentrantReadWriteLock();\n+    private final Lock readLock = rwLock.readLock();\n+    private final Lock writeLock = rwLock.writeLock();\n+\n+    private Date expirationDate = null;\n+    private String error = null;\n+    private int numCompletedSteps = 0;\n+\n+    private volatile boolean canceled = false;\n+\n+    public StandardLineageResult(final int numSteps, final Collection<String> flowFileUuids) {\n+        this.numSteps = numSteps;\n+        this.creationNanos = System.nanoTime();\n+        this.flowFileUuids = flowFileUuids;\n+\n+        updateExpiration();\n+    }\n+\n+    @Override\n+    public List<LineageNode> getNodes() {\n+        readLock.lock();\n+        try {\n+            return new ArrayList<>(nodes);\n+        } finally {\n+            readLock.unlock();\n+        }\n+    }\n+\n+    @Override\n+    public List<LineageEdge> getEdges() {\n+        readLock.lock();\n+        try {\n+            return new ArrayList<>(edges);\n+        } finally {\n+            readLock.unlock();\n+        }\n+    }\n+\n+    public int getNumberOfEdges() {\n+        readLock.lock();\n+        try {\n+            return edges.size();\n+        } finally {\n+            readLock.unlock();\n+        }\n+    }\n+\n+    public int getNumberOfNodes() {\n+        readLock.lock();\n+        try {\n+            return nodes.size();\n+        } finally {\n+            readLock.unlock();\n+        }\n+    }\n+\n+    public long getComputationTime(final TimeUnit timeUnit) {\n+        readLock.lock();\n+        try {\n+            return timeUnit.convert(computationNanos, TimeUnit.NANOSECONDS);\n+        } finally {\n+            readLock.unlock();\n+        }\n+    }\n+\n+    @Override\n+    public Date getExpiration() {\n+        readLock.lock();\n+        try {\n+            return expirationDate;\n+        } finally {\n+            readLock.unlock();\n+        }\n+    }\n+\n+    @Override\n+    public String getError() {\n+        readLock.lock();\n+        try {\n+            return error;\n+        } finally {\n+            readLock.unlock();\n+        }\n+    }\n+\n+    @Override\n+    public int getPercentComplete() {\n+        readLock.lock();\n+        try {\n+            return (numSteps < 1) ? 100 : (int) (((float) numCompletedSteps / (float) numSteps) * 100.0F);\n+        } finally {\n+            readLock.unlock();\n+        }\n+    }\n+\n+    @Override\n+    public boolean isFinished() {\n+        readLock.lock();\n+        try {\n+            return numCompletedSteps >= numSteps || canceled;\n+        } finally {\n+            readLock.unlock();\n+        }\n+    }\n+\n+    public void setError(final String error) {\n+        writeLock.lock();\n+        try {\n+            this.error = error;\n+            numCompletedSteps++;\n+\n+            updateExpiration();\n+\n+            if (numCompletedSteps >= numSteps) {\n+                computationNanos = System.nanoTime() - creationNanos;\n+            }\n+        } finally {\n+            writeLock.unlock();\n+        }\n+    }\n+\n+    public void update(final Collection<ProvenanceEventRecord> records) {\n+        writeLock.lock();\n+        try {\n+            relevantRecords.addAll(records);\n+\n+            numCompletedSteps++;\n+            updateExpiration();\n+\n+            if (numCompletedSteps >= numSteps && error == null) {\n+                computeLineage();\n+                computationNanos = System.nanoTime() - creationNanos;\n+            }\n+        } finally {\n+            writeLock.unlock();\n+        }\n+    }\n+\n+    /**\n+     * Computes the lineage from the relevant Provenance Event Records. This\n+     * method must be called with the write lock held and is only going to be\n+     * useful after all of the records have been successfully obtained\n+     */\n+    private void computeLineage() {\n+        final long startNanos = System.nanoTime();\n+\n+        nodes.clear();\n+        edges.clear();\n+\n+        Map<String, LineageNode> lastEventMap = new HashMap<>();    // maps FlowFile UUID to last event for that FlowFile\n+        final List<ProvenanceEventRecord> sortedRecords = new ArrayList<>(relevantRecords);\n+        Collections.sort(sortedRecords, new Comparator<ProvenanceEventRecord>() {\n+            @Override\n+            public int compare(final ProvenanceEventRecord o1, final ProvenanceEventRecord o2) {\n+                // Sort on Event Time, then Event ID.\n+                final int eventTimeComparison = Long.compare(o1.getEventTime(), o2.getEventTime());\n+                if (eventTimeComparison == 0) {\n+                    return Long.compare(o1.getEventId(), o2.getEventId());\n+                } else {\n+                    return eventTimeComparison;\n+                }\n+            }\n+        });\n+\n+        // convert the StandardProvenanceRecord objects into Lineage nodes (FlowFileNode, EventNodes).\n+        for (final ProvenanceEventRecord record : sortedRecords) {\n+            final LineageNode lineageNode = new EventNode(record);\n+            final boolean added = nodes.add(lineageNode);\n+            if (!added) {\n+                logger.debug(\"Did not add {} because it already exists in the 'nodes' set\", lineageNode);\n+            }\n+\n+            // Create an edge that connects this node to the previous node for the same FlowFile UUID.\n+            final LineageNode lastNode = lastEventMap.get(record.getFlowFileUuid());\n+            if (lastNode != null) {\n+                // We calculate the Edge UUID based on whether or not this event is a SPAWN.\n+                // If this event is a SPAWN, then we want to use the previous node's UUID because a\n+                // SPAWN Event's UUID is not necessarily what we want, since a SPAWN Event's UUID pertains to\n+                // only one of (potentially) many UUIDs associated with the event. Otherwise, we know that\n+                // the UUID of this record is appropriate, so we just use it.\n+                final String edgeUuid;\n+\n+                switch (record.getEventType()) {\n+                    case JOIN:\n+                    case CLONE:\n+                    case REPLAY:\n+                        edgeUuid = lastNode.getFlowFileUuid();\n+                        break;\n+                    default:\n+                        edgeUuid = record.getFlowFileUuid();\n+                        break;\n+                }\n+\n+                edges.add(new EdgeNode(edgeUuid, lastNode, lineageNode));\n+            }\n+\n+            lastEventMap.put(record.getFlowFileUuid(), lineageNode);\n+\n+            switch (record.getEventType()) {\n+                case FORK:\n+                case JOIN:\n+                case REPLAY:\n+                case CLONE: {\n+                    // For events that create FlowFile nodes, we need to create the FlowFile Nodes and associated Edges, as appropriate\n+                    for (final String childUuid : record.getChildUuids()) {\n+                        if (flowFileUuids.contains(childUuid)) {\n+                            final FlowFileNode childNode = new FlowFileNode(childUuid, record.getEventTime());\n+                            final boolean isNewFlowFile = nodes.add(childNode);\n+                            if (!isNewFlowFile) {\n+                                final String msg = \"Unable to generate Lineage Graph because multiple events were registered claiming to have generated the same FlowFile (UUID = \" + childNode.getFlowFileUuid() + \")\";\n+                                logger.error(msg);\n+                                setError(msg);\n+                                return;\n+                            }\n+\n+                            edges.add(new EdgeNode(childNode.getFlowFileUuid(), lineageNode, childNode));\n+                            lastEventMap.put(childUuid, childNode);\n+                        }\n+                    }\n+                    for (final String parentUuid : record.getParentUuids()) {\n+                        LineageNode lastNodeForParent = lastEventMap.get(parentUuid);\n+                        if (lastNodeForParent != null && !lastNodeForParent.equals(lineageNode)) {\n+                            edges.add(new EdgeNode(parentUuid, lastNodeForParent, lineageNode));\n+                        }\n+\n+                        lastEventMap.put(parentUuid, lineageNode);\n+                    }\n+                }\n+                break;\n+                case RECEIVE:\n+                case CREATE: {\n+                        // for a receive event, we want to create a FlowFile Node that represents the FlowFile received\n+                    // and create an edge from the Receive Event to the FlowFile Node\n+                    final LineageNode flowFileNode = new FlowFileNode(record.getFlowFileUuid(), record.getEventTime());\n+                    final boolean isNewFlowFile = nodes.add(flowFileNode);\n+                    if (!isNewFlowFile) {\n+                        final String msg = \"Found cycle in graph. This indicates that multiple events were registered claiming to have generated the same FlowFile (UUID = \" + flowFileNode.getFlowFileUuid() + \")\";\n+                        setError(msg);\n+                        logger.error(msg);\n+                        return;\n+                    }\n+                    edges.add(new EdgeNode(record.getFlowFileUuid(), lineageNode, flowFileNode));\n+                    lastEventMap.put(record.getFlowFileUuid(), flowFileNode);\n+                }\n+                break;\n+                default:\n+                    break;\n+            }\n+        }\n+\n+        final long nanos = System.nanoTime() - startNanos;\n+        logger.debug(\"Finished building lineage with {} nodes and {} edges in {} millis\", nodes.size(), edges.size(), TimeUnit.NANOSECONDS.toMillis(nanos));\n+    }\n+\n+    void cancel() {\n+        this.canceled = true;\n+    }\n+\n+    /**\n+     * Must be called with write lock!\n+     */\n+    private void updateExpiration() {\n+        expirationDate = new Date(System.currentTimeMillis() + TTL);\n+    }\n+}"
        },
        {
            "sha": "cfbae8892c03915de4e84ede823923e97b171bf9",
            "filename": "commons/data-provenance-utils/src/main/java/org/apache/nifi/provenance/StandardProvenanceEventRecord.java",
            "status": "added",
            "additions": 752,
            "deletions": 0,
            "changes": 752,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2FStandardProvenanceEventRecord.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2FStandardProvenanceEventRecord.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2FStandardProvenanceEventRecord.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,752 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.provenance;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.nifi.flowfile.FlowFile;\n+import org.apache.nifi.flowfile.attributes.CoreAttributes;\n+import org.apache.nifi.processor.Relationship;\n+\n+/**\n+ * Holder for provenance relevant information\n+ * <p/>\n+ * @author none\n+ */\n+public final class StandardProvenanceEventRecord implements ProvenanceEventRecord {\n+\n+    private final long eventTime;\n+    private final long entryDate;\n+    private final ProvenanceEventType eventType;\n+    private final long lineageStartDate;\n+    private final Set<String> lineageIdentifiers;\n+    private final String componentId;\n+    private final String componentType;\n+    private final String transitUri;\n+    private final String sourceSystemFlowFileIdentifier;\n+    private final String uuid;\n+    private final List<String> parentUuids;\n+    private final List<String> childrenUuids;\n+    private final String alternateIdentifierUri;\n+    private final String details;\n+    private final String relationship;\n+    private final long storageByteOffset;\n+    private final String storageFilename;\n+    private final long eventDuration;\n+\n+    private final String contentClaimSection;\n+    private final String contentClaimContainer;\n+    private final String contentClaimIdentifier;\n+    private final Long contentClaimOffset;\n+    private final long contentSize;\n+\n+    private final String previousClaimSection;\n+    private final String previousClaimContainer;\n+    private final String previousClaimIdentifier;\n+    private final Long previousClaimOffset;\n+    private final Long previousSize;\n+\n+    private final String sourceQueueIdentifier;\n+\n+    private final Map<String, String> previousAttributes;\n+    private final Map<String, String> updatedAttributes;\n+\n+    private volatile long eventId;\n+\n+    private StandardProvenanceEventRecord(final Builder builder) {\n+        this.eventTime = builder.eventTime;\n+        this.entryDate = builder.entryDate;\n+        this.eventType = builder.eventType;\n+        this.componentId = builder.componentId;\n+        this.componentType = builder.componentType;\n+        this.transitUri = builder.transitUri;\n+        this.sourceSystemFlowFileIdentifier = builder.sourceSystemFlowFileIdentifier;\n+        this.uuid = builder.uuid;\n+        this.parentUuids = builder.parentUuids;\n+        this.childrenUuids = builder.childrenUuids;\n+        this.alternateIdentifierUri = builder.alternateIdentifierUri;\n+        this.details = builder.details;\n+        this.relationship = builder.relationship;\n+        this.storageByteOffset = builder.storageByteOffset;\n+        this.storageFilename = builder.storageFilename;\n+        this.eventDuration = builder.eventDuration;\n+        this.lineageStartDate = builder.lineageStartDate;\n+        this.lineageIdentifiers = Collections.unmodifiableSet(builder.lineageIdentifiers);\n+\n+        previousClaimSection = builder.previousClaimSection;\n+        previousClaimContainer = builder.previousClaimContainer;\n+        previousClaimIdentifier = builder.previousClaimIdentifier;\n+        previousClaimOffset = builder.previousClaimOffset;\n+        previousSize = builder.previousSize;\n+\n+        contentClaimSection = builder.contentClaimSection;\n+        contentClaimContainer = builder.contentClaimContainer;\n+        contentClaimIdentifier = builder.contentClaimIdentifier;\n+        contentClaimOffset = builder.contentClaimOffset;\n+        contentSize = builder.contentSize;\n+\n+        previousAttributes = builder.previousAttributes == null ? Collections.<String, String>emptyMap() : Collections.unmodifiableMap(builder.previousAttributes);\n+        updatedAttributes = builder.updatedAttributes == null ? Collections.<String, String>emptyMap() : Collections.unmodifiableMap(builder.updatedAttributes);\n+\n+        sourceQueueIdentifier = builder.sourceQueueIdentifier;\n+\n+    }\n+\n+    public String getStorageFilename() {\n+        return storageFilename;\n+    }\n+\n+    public long getStorageByteOffset() {\n+        return storageByteOffset;\n+    }\n+\n+    void setEventId(final long eventId) {\n+        this.eventId = eventId;\n+    }\n+\n+    @Override\n+    public long getEventId() {\n+        return eventId;\n+    }\n+\n+    @Override\n+    public long getEventTime() {\n+        return eventTime;\n+    }\n+\n+    @Override\n+    public Set<String> getLineageIdentifiers() {\n+        return lineageIdentifiers;\n+    }\n+\n+    @Override\n+    public long getLineageStartDate() {\n+        return lineageStartDate;\n+    }\n+\n+    @Override\n+    public long getFileSize() {\n+        return contentSize;\n+    }\n+\n+    @Override\n+    public Long getPreviousFileSize() {\n+        return previousSize;\n+    }\n+\n+    @Override\n+    public ProvenanceEventType getEventType() {\n+        return eventType;\n+    }\n+\n+    @Override\n+    public Map<String, String> getAttributes() {\n+        final Map<String, String> allAttrs = new HashMap<>(previousAttributes.size() + updatedAttributes.size());\n+        allAttrs.putAll(previousAttributes);\n+        for (final Map.Entry<String, String> entry : updatedAttributes.entrySet()) {\n+            if (entry.getValue() != null) {\n+                allAttrs.put(entry.getKey(), entry.getValue());\n+            }\n+        }\n+        return allAttrs;\n+    }\n+\n+    @Override\n+    public String getComponentId() {\n+        return componentId;\n+    }\n+\n+    @Override\n+    public String getComponentType() {\n+        return componentType;\n+    }\n+\n+    @Override\n+    public String getTransitUri() {\n+        return transitUri;\n+    }\n+\n+    @Override\n+    public String getSourceSystemFlowFileIdentifier() {\n+        return sourceSystemFlowFileIdentifier;\n+    }\n+\n+    @Override\n+    public String getFlowFileUuid() {\n+        return uuid;\n+    }\n+\n+    @Override\n+    public List<String> getParentUuids() {\n+        return parentUuids == null ? Collections.<String>emptyList() : parentUuids;\n+    }\n+\n+    @Override\n+    public List<String> getChildUuids() {\n+        return childrenUuids == null ? Collections.<String>emptyList() : childrenUuids;\n+    }\n+\n+    @Override\n+    public String getAlternateIdentifierUri() {\n+        return alternateIdentifierUri;\n+    }\n+\n+    @Override\n+    public long getEventDuration() {\n+        return eventDuration;\n+    }\n+\n+    @Override\n+    public String getDetails() {\n+        return details;\n+    }\n+\n+    @Override\n+    public String getRelationship() {\n+        return relationship;\n+    }\n+\n+    @Override\n+    public long getFlowFileEntryDate() {\n+        return entryDate;\n+    }\n+\n+    @Override\n+    public String getContentClaimSection() {\n+        return contentClaimSection;\n+    }\n+\n+    @Override\n+    public String getContentClaimContainer() {\n+        return contentClaimContainer;\n+    }\n+\n+    @Override\n+    public String getContentClaimIdentifier() {\n+        return contentClaimIdentifier;\n+    }\n+\n+    @Override\n+    public Long getContentClaimOffset() {\n+        return contentClaimOffset;\n+    }\n+\n+    @Override\n+    public String getSourceQueueIdentifier() {\n+        return sourceQueueIdentifier;\n+    }\n+\n+    @Override\n+    public Map<String, String> getPreviousAttributes() {\n+        return previousAttributes;\n+    }\n+\n+    @Override\n+    public String getPreviousContentClaimContainer() {\n+        return previousClaimContainer;\n+    }\n+\n+    @Override\n+    public String getPreviousContentClaimIdentifier() {\n+        return previousClaimIdentifier;\n+    }\n+\n+    @Override\n+    public Long getPreviousContentClaimOffset() {\n+        return previousClaimOffset;\n+    }\n+\n+    @Override\n+    public String getPreviousContentClaimSection() {\n+        return previousClaimSection;\n+    }\n+\n+    @Override\n+    public Map<String, String> getUpdatedAttributes() {\n+        return updatedAttributes;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int eventTypeCode;\n+        if (eventType == ProvenanceEventType.CLONE || eventType == ProvenanceEventType.JOIN || eventType == ProvenanceEventType.FORK) {\n+            eventTypeCode = 1472;\n+        } else if (eventType == ProvenanceEventType.REPLAY) {\n+            eventTypeCode = 21479 + (int) (0x7FFFFFFF & eventTime); // use lower bits of event time.\n+        } else {\n+            eventTypeCode = 4812 + eventType.hashCode() + 4 * uuid.hashCode();\n+        }\n+\n+        return -37423 + 3 * componentId.hashCode() + (transitUri == null ? 0 : 41 * transitUri.hashCode())\n+                + (relationship == null ? 0 : 47 * relationship.hashCode()) + 44 * eventTypeCode;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (!(obj instanceof StandardProvenanceEventRecord)) {\n+            return false;\n+        }\n+\n+        final StandardProvenanceEventRecord other = (StandardProvenanceEventRecord) obj;\n+        // If event ID's are populated and not equal, return false. If they have not yet been populated, do not\n+        // use them in the comparison.\n+        if (eventId > 0L && other.getEventId() > 0L && eventId != other.getEventId()) {\n+            return false;\n+        }\n+        if (eventType != other.eventType) {\n+            return false;\n+        }\n+\n+        if (!componentId.equals(other.componentId)) {\n+            return false;\n+        }\n+\n+        if (different(parentUuids, other.parentUuids)) {\n+            return false;\n+        }\n+\n+        if (different(childrenUuids, other.childrenUuids)) {\n+            return false;\n+        }\n+\n+        // SPAWN had issues indicating which should be the event's FlowFileUUID in the case that there is 1 parent and 1 child.\n+        if (!uuid.equals(other.uuid)) {\n+            return false;\n+        }\n+\n+        if (different(transitUri, other.transitUri)) {\n+            return false;\n+        }\n+\n+        if (different(relationship, other.relationship)) {\n+            return false;\n+        }\n+\n+        return !(eventType == ProvenanceEventType.REPLAY && eventTime != other.getEventTime());\n+    }\n+\n+    private boolean different(final Object a, final Object b) {\n+        if (a == null && b == null) {\n+            return false;\n+        }\n+        if (a == null || b == null) {\n+            return true;\n+        }\n+\n+        return !a.equals(b);\n+    }\n+\n+    private boolean different(final List<String> a, final List<String> b) {\n+        if (a == null && b == null) {\n+            return false;\n+        }\n+\n+        if (a == null && b != null) {\n+            return true;\n+        }\n+\n+        if (a != null && b == null) {\n+            return true;\n+        }\n+\n+        if (a.size() != b.size()) {\n+            return true;\n+        }\n+\n+        final List<String> sortedA = new ArrayList<>(a);\n+        final List<String> sortedB = new ArrayList<>(b);\n+\n+        Collections.sort(sortedA);\n+        Collections.sort(sortedB);\n+\n+        for (int i = 0; i < sortedA.size(); i++) {\n+            if (!sortedA.get(i).equals(sortedB.get(i))) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"ProvenanceEventRecord [\"\n+                + \"eventId=\" + eventId\n+                + \", eventType=\" + eventType\n+                + \", eventTime=\" + new Date(eventTime)\n+                + \", uuid=\" + uuid\n+                + \", fileSize=\" + contentSize\n+                + \", componentId=\" + componentId\n+                + \", transitUri=\" + transitUri\n+                + \", sourceSystemFlowFileIdentifier=\" + sourceSystemFlowFileIdentifier\n+                + \", parentUuids=\" + parentUuids\n+                + \", alternateIdentifierUri=\" + alternateIdentifierUri + \"]\";\n+    }\n+\n+    public static class Builder implements ProvenanceEventBuilder {\n+\n+        private long eventTime = System.currentTimeMillis();\n+        private long entryDate;\n+        private long lineageStartDate;\n+        private Set<String> lineageIdentifiers = new HashSet<>();\n+        private ProvenanceEventType eventType = null;\n+        private String componentId = null;\n+        private String componentType = null;\n+        private String sourceSystemFlowFileIdentifier = null;\n+        private String transitUri = null;\n+        private String uuid = null;\n+        private List<String> parentUuids = null;\n+        private List<String> childrenUuids = null;\n+        private String contentType = null;\n+        private String alternateIdentifierUri = null;\n+        private String details = null;\n+        private String relationship = null;\n+        private long storageByteOffset = -1L;\n+        private long eventDuration = -1L;\n+        private String storageFilename;\n+\n+        private String contentClaimSection;\n+        private String contentClaimContainer;\n+        private String contentClaimIdentifier;\n+        private Long contentClaimOffset;\n+        private Long contentSize;\n+\n+        private String previousClaimSection;\n+        private String previousClaimContainer;\n+        private String previousClaimIdentifier;\n+        private Long previousClaimOffset;\n+        private Long previousSize;\n+\n+        private String sourceQueueIdentifier;\n+\n+        private Map<String, String> previousAttributes;\n+        private Map<String, String> updatedAttributes;\n+\n+        @Override\n+        public Builder fromEvent(final ProvenanceEventRecord event) {\n+            eventTime = event.getEventTime();\n+            entryDate = event.getFlowFileEntryDate();\n+            lineageStartDate = event.getLineageStartDate();\n+            lineageIdentifiers = event.getLineageIdentifiers();\n+            eventType = event.getEventType();\n+            componentId = event.getComponentId();\n+            componentType = event.getComponentType();\n+            transitUri = event.getTransitUri();\n+            sourceSystemFlowFileIdentifier = event.getSourceSystemFlowFileIdentifier();\n+            uuid = event.getFlowFileUuid();\n+            parentUuids = event.getParentUuids();\n+            childrenUuids = event.getChildUuids();\n+            alternateIdentifierUri = event.getAlternateIdentifierUri();\n+            eventDuration = event.getEventDuration();\n+            previousAttributes = event.getPreviousAttributes();\n+            updatedAttributes = event.getUpdatedAttributes();\n+            details = event.getDetails();\n+            relationship = event.getRelationship();\n+\n+            contentClaimSection = event.getContentClaimSection();\n+            contentClaimContainer = event.getContentClaimContainer();\n+            contentClaimIdentifier = event.getContentClaimIdentifier();\n+            contentClaimOffset = event.getContentClaimOffset();\n+            contentSize = event.getFileSize();\n+\n+            previousClaimSection = event.getPreviousContentClaimSection();\n+            previousClaimContainer = event.getPreviousContentClaimContainer();\n+            previousClaimIdentifier = event.getPreviousContentClaimIdentifier();\n+            previousClaimOffset = event.getPreviousContentClaimOffset();\n+            previousSize = event.getPreviousFileSize();\n+\n+            sourceQueueIdentifier = event.getSourceQueueIdentifier();\n+\n+            if (event instanceof StandardProvenanceEventRecord) {\n+                final StandardProvenanceEventRecord standardProvEvent = (StandardProvenanceEventRecord) event;\n+                storageByteOffset = standardProvEvent.storageByteOffset;\n+                storageFilename = standardProvEvent.storageFilename;\n+            }\n+\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder setFlowFileEntryDate(final long entryDate) {\n+            this.entryDate = entryDate;\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder setLineageIdentifiers(final Set<String> lineageIdentifiers) {\n+            this.lineageIdentifiers = lineageIdentifiers;\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder setAttributes(final Map<String, String> previousAttributes, final Map<String, String> updatedAttributes) {\n+            this.previousAttributes = previousAttributes;\n+            this.updatedAttributes = updatedAttributes;\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder setFlowFileUUID(final String uuid) {\n+            this.uuid = uuid;\n+            return this;\n+        }\n+\n+        public Builder setStorageLocation(final String filename, final long offset) {\n+            this.storageFilename = filename;\n+            this.storageByteOffset = offset;\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder setEventTime(long eventTime) {\n+            this.eventTime = eventTime;\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder setEventDuration(final long millis) {\n+            this.eventDuration = millis;\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder setLineageStartDate(final long startDate) {\n+            this.lineageStartDate = startDate;\n+            return this;\n+        }\n+\n+        public Builder addLineageIdentifier(final String lineageIdentifier) {\n+            this.lineageIdentifiers.add(lineageIdentifier);\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder setEventType(ProvenanceEventType eventType) {\n+            this.eventType = eventType;\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder setComponentId(String componentId) {\n+            this.componentId = componentId;\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder setComponentType(String componentType) {\n+            this.componentType = componentType;\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder setSourceSystemFlowFileIdentifier(String sourceSystemFlowFileIdentifier) {\n+            this.sourceSystemFlowFileIdentifier = sourceSystemFlowFileIdentifier;\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder setTransitUri(String transitUri) {\n+            this.transitUri = transitUri;\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder addParentFlowFile(final FlowFile parentFlowFile) {\n+            if (this.parentUuids == null) {\n+                this.parentUuids = new ArrayList<>();\n+            }\n+            this.parentUuids.add(parentFlowFile.getAttribute(CoreAttributes.UUID.key()));\n+            return this;\n+        }\n+\n+        public Builder addParentUuid(final String uuid) {\n+            if (this.parentUuids == null) {\n+                this.parentUuids = new ArrayList<>();\n+            }\n+            this.parentUuids.add(uuid);\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder removeParentFlowFile(final FlowFile parentFlowFile) {\n+            if (this.parentUuids == null) {\n+                return this;\n+            }\n+\n+            parentUuids.remove(parentFlowFile.getAttribute(CoreAttributes.UUID.key()));\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder addChildFlowFile(final FlowFile childFlowFile) {\n+            if (this.childrenUuids == null) {\n+                this.childrenUuids = new ArrayList<>();\n+            }\n+            this.childrenUuids.add(childFlowFile.getAttribute(CoreAttributes.UUID.key()));\n+            return this;\n+        }\n+\n+        public Builder addChildUuid(final String uuid) {\n+            if (this.childrenUuids == null) {\n+                this.childrenUuids = new ArrayList<>();\n+            }\n+            this.childrenUuids.add(uuid);\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder removeChildFlowFile(final FlowFile childFlowFile) {\n+            if (this.childrenUuids == null) {\n+                return this;\n+            }\n+\n+            childrenUuids.remove(childFlowFile.getAttribute(CoreAttributes.UUID.key()));\n+            return this;\n+        }\n+\n+        public Builder setContentType(String contentType) {\n+            this.contentType = contentType;\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder setAlternateIdentifierUri(String alternateIdentifierUri) {\n+            this.alternateIdentifierUri = alternateIdentifierUri;\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder setDetails(String details) {\n+            this.details = details;\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder setRelationship(Relationship relationship) {\n+            this.relationship = relationship.getName();\n+            return this;\n+        }\n+\n+        public Builder setRelationship(final String relationship) {\n+            this.relationship = relationship;\n+            return this;\n+        }\n+\n+        @Override\n+        public ProvenanceEventBuilder fromFlowFile(final FlowFile flowFile) {\n+            setFlowFileEntryDate(flowFile.getEntryDate());\n+            setLineageIdentifiers(flowFile.getLineageIdentifiers());\n+            setLineageStartDate(flowFile.getLineageStartDate());\n+            setAttributes(Collections.<String, String>emptyMap(), flowFile.getAttributes());\n+            uuid = flowFile.getAttribute(CoreAttributes.UUID.key());\n+            this.contentSize = flowFile.getSize();\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder setPreviousContentClaim(final String container, final String section, final String identifier, final Long offset, final long size) {\n+            previousClaimSection = section;\n+            previousClaimContainer = container;\n+            previousClaimIdentifier = identifier;\n+            previousClaimOffset = offset;\n+            previousSize = size;\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder setCurrentContentClaim(final String container, final String section, final String identifier, final Long offset, final long size) {\n+            contentClaimSection = section;\n+            contentClaimContainer = container;\n+            contentClaimIdentifier = identifier;\n+            contentClaimOffset = offset;\n+            contentSize = size;\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder setSourceQueueIdentifier(final String identifier) {\n+            sourceQueueIdentifier = identifier;\n+            return this;\n+        }\n+\n+        private void assertSet(final Object value, final String name) {\n+            if (value == null) {\n+                throw new IllegalStateException(\"Cannot create Provenance Event Record because \" + name + \" is not set\");\n+            }\n+        }\n+\n+        public ProvenanceEventType getEventType() {\n+            return eventType;\n+        }\n+\n+        public List<String> getChildUuids() {\n+            return Collections.unmodifiableList(childrenUuids);\n+        }\n+\n+        public List<String> getParentUuids() {\n+            return Collections.unmodifiableList(parentUuids);\n+        }\n+\n+        @Override\n+        public StandardProvenanceEventRecord build() {\n+            assertSet(eventType, \"Event Type\");\n+            assertSet(componentId, \"Component ID\");\n+            assertSet(componentType, \"Component Type\");\n+            assertSet(uuid, \"FlowFile UUID\");\n+            assertSet(contentSize, \"FlowFile Size\");\n+\n+            switch (eventType) {\n+                case ADDINFO:\n+                    if (alternateIdentifierUri == null) {\n+                        throw new IllegalStateException(\"Cannot create Provenance Event Record of type \" + eventType + \" because no alternate identifiers have been set\");\n+                    }\n+                    break;\n+                case RECEIVE:\n+                case SEND:\n+                    assertSet(transitUri, \"Transit URI\");\n+                    break;\n+                case ROUTE:\n+                    assertSet(relationship, \"Relationship\");\n+                    break;\n+                case CLONE:\n+                case FORK:\n+                case JOIN:\n+                    if ((parentUuids == null || parentUuids.isEmpty()) && (childrenUuids == null || childrenUuids.isEmpty())) {\n+                        throw new IllegalStateException(\"Cannot create Provenance Event Record of type \" + eventType + \" because no Parent UUIDs or Children UUIDs have been set\");\n+                    }\n+                    break;\n+                default:\n+                    break;\n+            }\n+\n+            return new StandardProvenanceEventRecord(this);\n+        }\n+    }\n+}"
        },
        {
            "sha": "9a9a27d79ae335d057f7325a146f26814ce0dec9",
            "filename": "commons/data-provenance-utils/src/main/java/org/apache/nifi/provenance/StandardQueryResult.java",
            "status": "added",
            "additions": 168,
            "deletions": 0,
            "changes": 168,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2FStandardQueryResult.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2FStandardQueryResult.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2FStandardQueryResult.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.provenance;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import org.apache.nifi.provenance.search.Query;\n+import org.apache.nifi.provenance.search.QueryResult;\n+\n+public class StandardQueryResult implements QueryResult {\n+\n+    public static final int TTL = (int) TimeUnit.MILLISECONDS.convert(30, TimeUnit.MINUTES);\n+    private final Query query;\n+    private final long creationNanos;\n+\n+    private final int numSteps;\n+    private final ReadWriteLock rwLock = new ReentrantReadWriteLock();\n+    private final Lock readLock = rwLock.readLock();\n+\n+    private final Lock writeLock = rwLock.writeLock();\n+    // guarded by writeLock\n+    private final List<ProvenanceEventRecord> matchingRecords = new ArrayList<>();\n+    private long totalHitCount;\n+    private int numCompletedSteps = 0;\n+    private Date expirationDate;\n+    private String error;\n+    private long queryTime;\n+\n+    private volatile boolean canceled = false;\n+\n+    public StandardQueryResult(final Query query, final int numSteps) {\n+        this.query = query;\n+        this.numSteps = numSteps;\n+        this.creationNanos = System.nanoTime();\n+\n+        updateExpiration();\n+    }\n+\n+    @Override\n+    public List<ProvenanceEventRecord> getMatchingEvents() {\n+        readLock.lock();\n+        try {\n+            if (matchingRecords.size() <= query.getMaxResults()) {\n+                return new ArrayList<>(matchingRecords);\n+            }\n+\n+            final List<ProvenanceEventRecord> copy = new ArrayList<>(query.getMaxResults());\n+            for (int i = 0; i < query.getMaxResults(); i++) {\n+                copy.add(matchingRecords.get(i));\n+            }\n+\n+            return copy;\n+        } finally {\n+            readLock.unlock();\n+        }\n+    }\n+\n+    @Override\n+    public long getTotalHitCount() {\n+        readLock.lock();\n+        try {\n+            return totalHitCount;\n+        } finally {\n+            readLock.unlock();\n+        }\n+    }\n+\n+    @Override\n+    public long getQueryTime() {\n+        return queryTime;\n+    }\n+\n+    @Override\n+    public Date getExpiration() {\n+        return expirationDate;\n+    }\n+\n+    @Override\n+    public String getError() {\n+        return error;\n+    }\n+\n+    @Override\n+    public int getPercentComplete() {\n+        readLock.lock();\n+        try {\n+            return (numSteps < 1) ? 100 : (int) (((float) numCompletedSteps / (float) numSteps) * 100.0F);\n+        } finally {\n+            readLock.unlock();\n+        }\n+    }\n+\n+    @Override\n+    public boolean isFinished() {\n+        readLock.lock();\n+        try {\n+            return numCompletedSteps >= numSteps || canceled;\n+        } finally {\n+            readLock.unlock();\n+        }\n+    }\n+\n+    void cancel() {\n+        this.canceled = true;\n+    }\n+\n+    public void setError(final String error) {\n+        writeLock.lock();\n+        try {\n+            this.error = error;\n+            numCompletedSteps++;\n+\n+            updateExpiration();\n+            if (numCompletedSteps >= numSteps) {\n+                final long searchNanos = System.nanoTime() - creationNanos;\n+                queryTime = TimeUnit.MILLISECONDS.convert(searchNanos, TimeUnit.NANOSECONDS);\n+            }\n+        } finally {\n+            writeLock.unlock();\n+        }\n+    }\n+\n+    public void update(final Collection<ProvenanceEventRecord> matchingRecords, final long totalHits) {\n+        writeLock.lock();\n+        try {\n+            this.matchingRecords.addAll(matchingRecords);\n+            this.totalHitCount += totalHits;\n+\n+            numCompletedSteps++;\n+            updateExpiration();\n+\n+            if (numCompletedSteps >= numSteps) {\n+                final long searchNanos = System.nanoTime() - creationNanos;\n+                queryTime = TimeUnit.MILLISECONDS.convert(searchNanos, TimeUnit.NANOSECONDS);\n+            }\n+        } finally {\n+            writeLock.unlock();\n+        }\n+    }\n+\n+    /**\n+     * Must be called with write lock!\n+     */\n+    private void updateExpiration() {\n+        expirationDate = new Date(System.currentTimeMillis() + TTL);\n+    }\n+}"
        },
        {
            "sha": "0aaf5efb60b89f2fb928e3b391daaeac2c40d7d9",
            "filename": "commons/data-provenance-utils/src/main/java/org/apache/nifi/provenance/lineage/EdgeNode.java",
            "status": "added",
            "additions": 74,
            "deletions": 0,
            "changes": 74,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2Flineage%2FEdgeNode.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2Flineage%2FEdgeNode.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2Flineage%2FEdgeNode.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.provenance.lineage;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class EdgeNode implements LineageEdge {\n+\n+    private final String uuid;\n+    private final LineageNode source;\n+    private final LineageNode destination;\n+\n+    public EdgeNode(final String uuid, final LineageNode source, final LineageNode destination) {\n+        this.uuid = uuid;\n+        this.source = requireNonNull(source);\n+        this.destination = requireNonNull(destination);\n+    }\n+\n+    @Override\n+    public String getUuid() {\n+        return uuid;\n+    }\n+\n+    @Override\n+    public LineageNode getSource() {\n+        return source;\n+    }\n+\n+    @Override\n+    public LineageNode getDestination() {\n+        return destination;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 43298293 + source.hashCode() + destination.hashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+\n+        if (!(obj instanceof EdgeNode)) {\n+            return false;\n+        }\n+\n+        final EdgeNode other = (EdgeNode) obj;\n+        return (source.equals(other.source) && destination.equals(other.destination));\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Edge[Source=\" + source + \", Destination=\" + destination + \"]\";\n+    }\n+}"
        },
        {
            "sha": "12d9a4ff5ec2785f9d4749afba131fb5ad7bcf3d",
            "filename": "commons/data-provenance-utils/src/main/java/org/apache/nifi/provenance/lineage/EventNode.java",
            "status": "added",
            "additions": 109,
            "deletions": 0,
            "changes": 109,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2Flineage%2FEventNode.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2Flineage%2FEventNode.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2Flineage%2FEventNode.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.provenance.lineage;\n+\n+import java.util.List;\n+\n+import org.apache.nifi.flowfile.attributes.CoreAttributes;\n+import org.apache.nifi.provenance.ProvenanceEventRecord;\n+import org.apache.nifi.provenance.ProvenanceEventType;\n+\n+public class EventNode implements ProvenanceEventLineageNode {\n+\n+    private final ProvenanceEventRecord record;\n+    private String clusterNodeIdentifier = null;\n+\n+    public EventNode(final ProvenanceEventRecord event) {\n+        this.record = event;\n+    }\n+\n+    @Override\n+    public String getIdentifier() {\n+        return String.valueOf(getEventIdentifier());\n+    }\n+\n+    @Override\n+    public String getClusterNodeIdentifier() {\n+        return clusterNodeIdentifier;\n+    }\n+\n+    public void setClusterNodeIdentifier(final String nodeIdentifier) {\n+        this.clusterNodeIdentifier = nodeIdentifier;\n+    }\n+\n+    @Override\n+    public LineageNodeType getNodeType() {\n+        return LineageNodeType.PROVENANCE_EVENT_NODE;\n+    }\n+\n+    @Override\n+    public ProvenanceEventType getEventType() {\n+        return record.getEventType();\n+    }\n+\n+    @Override\n+    public long getTimestamp() {\n+        return record.getEventTime();\n+    }\n+\n+    @Override\n+    public long getEventIdentifier() {\n+        return record.getEventId();\n+    }\n+\n+    @Override\n+    public String getFlowFileUuid() {\n+        return record.getAttributes().get(CoreAttributes.UUID.key());\n+    }\n+\n+    @Override\n+    public List<String> getParentUuids() {\n+        return record.getParentUuids();\n+    }\n+\n+    @Override\n+    public List<String> getChildUuids() {\n+        return record.getChildUuids();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 2938472 + record.hashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (this == obj) {\n+            return true;\n+        }\n+\n+        if (!(obj instanceof EventNode)) {\n+            return false;\n+        }\n+\n+        final EventNode other = (EventNode) obj;\n+        return record.equals(other.record);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Event[ID=\" + record.getEventId() + \", Type=\" + record.getEventType() + \", UUID=\" + record.getFlowFileUuid() + \", Component=\" + record.getComponentId() + \"]\";\n+    }\n+}"
        },
        {
            "sha": "c36c38de0e9da6d69b364e3f778954b0c4a2e858",
            "filename": "commons/data-provenance-utils/src/main/java/org/apache/nifi/provenance/lineage/FlowFileLineage.java",
            "status": "added",
            "additions": 76,
            "deletions": 0,
            "changes": 76,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2Flineage%2FFlowFileLineage.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2Flineage%2FFlowFileLineage.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2Flineage%2FFlowFileLineage.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.provenance.lineage;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class FlowFileLineage implements Lineage {\n+\n+    private final List<LineageNode> nodes;\n+    private final List<LineageEdge> edges;\n+\n+    public FlowFileLineage(final Collection<LineageNode> nodes, final Collection<LineageEdge> edges) {\n+        this.nodes = new ArrayList<>(requireNonNull(nodes));\n+        this.edges = new ArrayList<>(requireNonNull(edges));\n+    }\n+\n+    @Override\n+    public List<LineageNode> getNodes() {\n+        return nodes;\n+    }\n+\n+    @Override\n+    public List<LineageEdge> getEdges() {\n+        return edges;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int sum = 923;\n+        for (final LineageNode node : nodes) {\n+            sum += node.hashCode();\n+        }\n+\n+        for (final LineageEdge edge : edges) {\n+            sum += edge.hashCode();\n+        }\n+\n+        return sum;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+\n+        if (obj == this) {\n+            return true;\n+        }\n+\n+        if (!(obj instanceof FlowFileLineage)) {\n+            return false;\n+        }\n+\n+        final FlowFileLineage other = (FlowFileLineage) obj;\n+        return nodes.equals(other.nodes) && edges.equals(other.edges);\n+    }\n+}"
        },
        {
            "sha": "fdc7470d999b27aa304309cc52f791213e9de36a",
            "filename": "commons/data-provenance-utils/src/main/java/org/apache/nifi/provenance/lineage/FlowFileNode.java",
            "status": "added",
            "additions": 83,
            "deletions": 0,
            "changes": 83,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2Flineage%2FFlowFileNode.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2Flineage%2FFlowFileNode.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fdata-provenance-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprovenance%2Flineage%2FFlowFileNode.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.provenance.lineage;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class FlowFileNode implements LineageNode {\n+\n+    private final String flowFileUuid;\n+    private final long creationTime;\n+    private String clusterNodeIdentifier;\n+\n+    public FlowFileNode(final String flowFileUuid, final long flowFileCreationTime) {\n+        this.flowFileUuid = requireNonNull(flowFileUuid);\n+        this.creationTime = flowFileCreationTime;\n+    }\n+\n+    @Override\n+    public String getIdentifier() {\n+        return flowFileUuid;\n+    }\n+\n+    @Override\n+    public long getTimestamp() {\n+        return creationTime;\n+    }\n+\n+    @Override\n+    public String getClusterNodeIdentifier() {\n+        return clusterNodeIdentifier;\n+    }\n+\n+    @Override\n+    public LineageNodeType getNodeType() {\n+        return LineageNodeType.FLOWFILE_NODE;\n+    }\n+\n+    @Override\n+    public String getFlowFileUuid() {\n+        return flowFileUuid;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 23498723 + flowFileUuid.hashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (obj == this) {\n+            return true;\n+        }\n+\n+        if (!(obj instanceof FlowFileNode)) {\n+            return false;\n+        }\n+\n+        final FlowFileNode other = (FlowFileNode) obj;\n+        return flowFileUuid.equals(other.flowFileUuid);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"FlowFile[UUID=\" + flowFileUuid + \"]\";\n+    }\n+}"
        },
        {
            "sha": "f4001febb3b1920bcd9d82af3e0b1d07a32c3ab9",
            "filename": "commons/flowfile-packager/pom.xml",
            "status": "added",
            "additions": 43,
            "deletions": 0,
            "changes": 43,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fflowfile-packager%2Fpom.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fflowfile-packager%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fflowfile-packager%2Fpom.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,43 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <!--\n+      Licensed to the Apache Software Foundation (ASF) under one or more\n+      contributor license agreements.  See the NOTICE file distributed with\n+      this work for additional information regarding copyright ownership.\n+      The ASF licenses this file to You under the Apache License, Version 2.0\n+      (the \"License\"); you may not use this file except in compliance with\n+      the License.  You may obtain a copy of the License at\n+          http://www.apache.org/licenses/LICENSE-2.0\n+      Unless required by applicable law or agreed to in writing, software\n+      distributed under the License is distributed on an \"AS IS\" BASIS,\n+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+      See the License for the specific language governing permissions and\n+      limitations under the License.\n+    -->\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.nifi</groupId>\n+        <artifactId>nifi-parent</artifactId>\n+        <version>0.0.1-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>flowfile-packager</artifactId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <packaging>jar</packaging>\n+\n+    <name>FlowFile Packager</name>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-compress</artifactId>\n+            <version>1.9</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-lang3</artifactId>\n+            <version>3.3.2</version>\n+        </dependency>\n+    </dependencies>\n+\n+</project>"
        },
        {
            "sha": "ae16f999d8061d3e1b5281580d915d4a6bd9a7f1",
            "filename": "commons/flowfile-packager/src/main/java/org/apache/nifi/util/FlowFilePackager.java",
            "status": "added",
            "additions": 28,
            "deletions": 0,
            "changes": 28,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fflowfile-packager%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FFlowFilePackager.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fflowfile-packager%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FFlowFilePackager.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fflowfile-packager%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FFlowFilePackager.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.util;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Map;\n+\n+public interface FlowFilePackager {\n+\n+    void packageFlowFile(InputStream in, OutputStream out, Map<String, String> attributes, long fileSize) throws IOException;\n+\n+}"
        },
        {
            "sha": "2437279f53ee9d082f827b68e9c8efe5034ed38e",
            "filename": "commons/flowfile-packager/src/main/java/org/apache/nifi/util/FlowFilePackagerV1.java",
            "status": "added",
            "additions": 104,
            "deletions": 0,
            "changes": 104,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fflowfile-packager%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FFlowFilePackagerV1.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fflowfile-packager%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FFlowFilePackagerV1.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fflowfile-packager%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FFlowFilePackagerV1.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.util;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.lang3.StringEscapeUtils;\n+\n+public class FlowFilePackagerV1 implements FlowFilePackager {\n+\n+    public static final String FILENAME_ATTRIBUTES = \"flowfile.attributes\";\n+    public static final String FILENAME_CONTENT = \"flowfile.content\";\n+    public static final int DEFAULT_TAR_PERMISSIONS = 0644;\n+\n+    private final int tarPermissions;\n+\n+    public FlowFilePackagerV1() {\n+        this(DEFAULT_TAR_PERMISSIONS);\n+    }\n+\n+    public FlowFilePackagerV1(final int tarPermissions) {\n+        this.tarPermissions = tarPermissions;\n+    }\n+\n+    @Override\n+    public void packageFlowFile(final InputStream in, final OutputStream out, final Map<String, String> attributes, final long fileSize) throws IOException {\n+        try (final TarArchiveOutputStream tout = new TarArchiveOutputStream(out)) {\n+            writeAttributesEntry(attributes, tout);\n+            writeContentEntry(tout, in, fileSize);\n+            tout.finish();\n+            tout.flush();\n+            tout.close();\n+        }\n+    }\n+\n+    private void writeAttributesEntry(final Map<String, String> attributes, final TarArchiveOutputStream tout) throws IOException {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><!DOCTYPE properties\\n  SYSTEM \\\"http://java.sun.com/dtd/properties.dtd\\\">\\n\");\n+        sb.append(\"<properties>\");\n+        for (final Map.Entry<String, String> entry : attributes.entrySet()) {\n+            final String escapedKey = StringEscapeUtils.escapeXml(entry.getKey());\n+            final String escapedValue = StringEscapeUtils.escapeXml(entry.getValue());\n+            sb.append(\"\\n  <entry key=\\\"\").append(escapedKey).append(\"\\\">\").append(escapedValue).append(\"</entry>\");\n+        }\n+        sb.append(\"</properties>\");\n+\n+        final byte[] metaBytes = sb.toString().getBytes(StandardCharsets.UTF_8);\n+        final TarArchiveEntry attribEntry = new TarArchiveEntry(FILENAME_ATTRIBUTES);\n+        attribEntry.setMode(tarPermissions);\n+        attribEntry.setSize(metaBytes.length);\n+        tout.putArchiveEntry(attribEntry);\n+        tout.write(metaBytes);\n+        tout.closeArchiveEntry();\n+    }\n+\n+    private void writeContentEntry(final TarArchiveOutputStream tarOut, final InputStream inStream, final long fileSize) throws IOException {\n+        final TarArchiveEntry entry = new TarArchiveEntry(FILENAME_CONTENT);\n+        entry.setMode(tarPermissions);\n+        entry.setSize(fileSize);\n+        tarOut.putArchiveEntry(entry);\n+        final byte[] buffer = new byte[512 << 10];//512KB            \n+        int bytesRead = 0;\n+        while ((bytesRead = inStream.read(buffer)) != -1) { //still more data to read\n+            if (bytesRead > 0) {\n+                tarOut.write(buffer, 0, bytesRead);\n+            }\n+        }\n+\n+        copy(inStream, tarOut);\n+        tarOut.closeArchiveEntry();\n+    }\n+\n+    public static long copy(final InputStream source, final OutputStream destination) throws IOException {\n+        final byte[] buffer = new byte[8192];\n+        int len;\n+        long totalCount = 0L;\n+        while ((len = source.read(buffer)) > 0) {\n+            destination.write(buffer, 0, len);\n+            totalCount += len;\n+        }\n+        return totalCount;\n+    }\n+\n+}"
        },
        {
            "sha": "6f9d6b11ce8e73d15ea86bf59b8177fd3e2a5f4f",
            "filename": "commons/flowfile-packager/src/main/java/org/apache/nifi/util/FlowFilePackagerV2.java",
            "status": "added",
            "additions": 146,
            "deletions": 0,
            "changes": 146,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fflowfile-packager%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FFlowFilePackagerV2.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fflowfile-packager%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FFlowFilePackagerV2.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fflowfile-packager%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FFlowFilePackagerV2.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.util;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Map;\n+\n+/**\n+ * <p>\n+ * Packages a FlowFile, including both its content and its attributes into a\n+ * single file that is stream-friendly. The encoding scheme is as such:\n+ * </p>\n+ *\n+ * <pre>\n+ * Length Field : indicates the number of Flow File Attributes in the stream\n+ * 1 to N times (N=number of Flow File Attributes):\n+ *      String Field : Flow File Attribute key name\n+ *      String Field : Flow File Attribute value\n+ * Long : 8 bytes indicating the length of the Flow File content\n+ * Content : The next M bytes are the content of the Flow File.\n+ * </pre>\n+ *\n+ * <pre>\n+ * Encoding of String Field is as follows:\n+ *      Length Field : indicates the length of the String\n+ *      1 to N bytes (N=String length, determined by previous field, as described above) : The UTF-8 encoded string value.\n+ * </pre>\n+ *\n+ * <pre>\n+ * Encoding of Length Field is as follows:\n+ *      First 2 bytes: Indicate length. If both bytes = 255, this is a special value indicating that the length is\n+ *                     greater than or equal to 65536 bytes; therefore, the next 4 bytes will indicate the actual length.\n+ * </pre>\n+ *\n+ * <p>\n+ * Note: All byte-order encoding is Network Byte Order (Most Significant Byte\n+ * first)\n+ * </p>\n+ *\n+ * <p>\n+ * The following example shows the bytes expected if we were to encode a\n+ * FlowFile containing the following attributes where the content is the text\n+ * \"Hello World!\":\n+ *\n+ * <br><br>\n+ * Attributes:\n+ * <pre>\n+ * +-------+-------+\n+ * | Key   + Value |\n+ * + --------------+\n+ * | A     | a     |\n+ * + --------------+\n+ * | B     | b     |\n+ * + --------------+\n+ * </pre> Content:<br>\n+ * Hello World!\n+ * <br><br>\n+ * Packaged Byte Encoding (In Hexadecimal Form):\n+ * <p>\n+ *\n+ * <pre>\n+ * 00 02 00 01 41 00 01 61\n+ * 00 01 42 00 01 62 00 00\n+ * 00 00 00 00 00 0C 48 65\n+ * 6C 6C 6F 20 57 6F 72 6C\n+ * 64 21\n+ * </pre>\n+ */\n+public class FlowFilePackagerV2 implements FlowFilePackager {\n+\n+    private static final int MAX_VALUE_2_BYTES = 65535;\n+    private final byte[] writeBuffer = new byte[8];\n+\n+    @Override\n+    public void packageFlowFile(final InputStream in, final OutputStream out, final Map<String, String> attributes, final long fileSize) throws IOException {\n+        writeFieldLength(out, attributes.size()); //write out the number of attributes\n+        for (final Map.Entry<String, String> entry : attributes.entrySet()) { //write out each attribute key/value pair\n+            writeString(entry.getKey(), out);\n+            writeString(entry.getValue(), out);\n+        }\n+        writeLong(out, fileSize);//write out length of data\n+        copy(in, out);//write out the actual flow file payload\n+    }\n+\n+    private void copy(final InputStream in, final OutputStream out) throws IOException {\n+        final byte[] buffer = new byte[65536];\n+        int len;\n+        while ((len = in.read(buffer)) > 0) {\n+            out.write(buffer, 0, len);\n+        }\n+    }\n+\n+    private void writeString(final String val, final OutputStream out) throws IOException {\n+        final byte[] bytes = val.getBytes(\"UTF-8\");\n+        writeFieldLength(out, bytes.length);\n+        out.write(bytes);\n+    }\n+\n+    private void writeFieldLength(final OutputStream out, final int numBytes) throws IOException {\n+        // If the value is less than the max value that can be fit into 2 bytes, just use the\n+        // actual value. Otherwise, we will set the first 2 bytes to 255/255 and then use the next\n+        // 4 bytes to indicate the real length.\n+        if (numBytes < MAX_VALUE_2_BYTES) {\n+            writeBuffer[0] = (byte) (numBytes >>> 8);\n+            writeBuffer[1] = (byte) (numBytes);\n+            out.write(writeBuffer, 0, 2);\n+        } else {\n+            writeBuffer[0] = (byte) 0xff;\n+            writeBuffer[1] = (byte) 0xff;\n+            writeBuffer[2] = (byte) (numBytes >>> 24);\n+            writeBuffer[3] = (byte) (numBytes >>> 16);\n+            writeBuffer[4] = (byte) (numBytes >>> 8);\n+            writeBuffer[5] = (byte) (numBytes);\n+            out.write(writeBuffer, 0, 6);\n+        }\n+    }\n+\n+    private void writeLong(final OutputStream out, final long val) throws IOException {\n+        writeBuffer[0] = (byte) (val >>> 56);\n+        writeBuffer[1] = (byte) (val >>> 48);\n+        writeBuffer[2] = (byte) (val >>> 40);\n+        writeBuffer[3] = (byte) (val >>> 32);\n+        writeBuffer[4] = (byte) (val >>> 24);\n+        writeBuffer[5] = (byte) (val >>> 16);\n+        writeBuffer[6] = (byte) (val >>> 8);\n+        writeBuffer[7] = (byte) (val);\n+        out.write(writeBuffer, 0, 8);\n+    }\n+\n+}"
        },
        {
            "sha": "181f3e3079da1e21342f32179927be24968e6174",
            "filename": "commons/flowfile-packager/src/main/java/org/apache/nifi/util/FlowFilePackagerV3.java",
            "status": "added",
            "additions": 93,
            "deletions": 0,
            "changes": 93,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fflowfile-packager%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FFlowFilePackagerV3.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fflowfile-packager%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FFlowFilePackagerV3.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fflowfile-packager%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FFlowFilePackagerV3.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.util;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Map;\n+\n+public class FlowFilePackagerV3 implements FlowFilePackager {\n+\n+    public static final byte[] MAGIC_HEADER = {'N', 'i', 'F', 'i', 'F', 'F', '3'};\n+    private static final int MAX_VALUE_2_BYTES = 65535;\n+    private final byte[] writeBuffer = new byte[8];\n+\n+    @Override\n+    public void packageFlowFile(final InputStream in, final OutputStream out, final Map<String, String> attributes, final long fileSize) throws IOException {\n+        out.write(MAGIC_HEADER);\n+\n+        if (attributes == null) {\n+            writeFieldLength(out, 0);\n+        } else {\n+            writeFieldLength(out, attributes.size()); //write out the number of attributes\n+            for (final Map.Entry<String, String> entry : attributes.entrySet()) { //write out each attribute key/value pair\n+                writeString(entry.getKey(), out);\n+                writeString(entry.getValue(), out);\n+            }\n+        }\n+\n+        writeLong(out, fileSize);//write out length of data\n+        copy(in, out);//write out the actual flow file payload\n+    }\n+\n+    private void copy(final InputStream in, final OutputStream out) throws IOException {\n+        final byte[] buffer = new byte[65536];\n+        int len;\n+        while ((len = in.read(buffer)) > 0) {\n+            out.write(buffer, 0, len);\n+        }\n+    }\n+\n+    private void writeString(final String val, final OutputStream out) throws IOException {\n+        final byte[] bytes = val.getBytes(\"UTF-8\");\n+        writeFieldLength(out, bytes.length);\n+        out.write(bytes);\n+    }\n+\n+    private void writeFieldLength(final OutputStream out, final int numBytes) throws IOException {\n+        // If the value is less than the max value that can be fit into 2 bytes, just use the\n+        // actual value. Otherwise, we will set the first 2 bytes to 255/255 and then use the next\n+        // 4 bytes to indicate the real length.\n+        if (numBytes < MAX_VALUE_2_BYTES) {\n+            writeBuffer[0] = (byte) (numBytes >>> 8);\n+            writeBuffer[1] = (byte) (numBytes);\n+            out.write(writeBuffer, 0, 2);\n+        } else {\n+            writeBuffer[0] = (byte) 0xff;\n+            writeBuffer[1] = (byte) 0xff;\n+            writeBuffer[2] = (byte) (numBytes >>> 24);\n+            writeBuffer[3] = (byte) (numBytes >>> 16);\n+            writeBuffer[4] = (byte) (numBytes >>> 8);\n+            writeBuffer[5] = (byte) (numBytes);\n+            out.write(writeBuffer, 0, 6);\n+        }\n+    }\n+\n+    private void writeLong(final OutputStream out, final long val) throws IOException {\n+        writeBuffer[0] = (byte) (val >>> 56);\n+        writeBuffer[1] = (byte) (val >>> 48);\n+        writeBuffer[2] = (byte) (val >>> 40);\n+        writeBuffer[3] = (byte) (val >>> 32);\n+        writeBuffer[4] = (byte) (val >>> 24);\n+        writeBuffer[5] = (byte) (val >>> 16);\n+        writeBuffer[6] = (byte) (val >>> 8);\n+        writeBuffer[7] = (byte) (val);\n+        out.write(writeBuffer, 0, 8);\n+    }\n+\n+}"
        },
        {
            "sha": "fd9d92d9b1f56e045c92c2649bda776862820328",
            "filename": "commons/flowfile-packager/src/main/java/org/apache/nifi/util/FlowFileUnpackager.java",
            "status": "added",
            "additions": 30,
            "deletions": 0,
            "changes": 30,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fflowfile-packager%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FFlowFileUnpackager.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fflowfile-packager%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FFlowFileUnpackager.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fflowfile-packager%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FFlowFileUnpackager.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.util;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Map;\n+\n+public interface FlowFileUnpackager {\n+\n+    Map<String, String> unpackageFlowFile(InputStream in, OutputStream out) throws IOException;\n+\n+    boolean hasMoreData() throws IOException;\n+\n+}"
        },
        {
            "sha": "f8ef3d1ab5e68cbad6dce54c892a941895a5979c",
            "filename": "commons/flowfile-packager/src/main/java/org/apache/nifi/util/FlowFileUnpackagerV1.java",
            "status": "added",
            "additions": 155,
            "deletions": 0,
            "changes": 155,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fflowfile-packager%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FFlowFileUnpackagerV1.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fflowfile-packager%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FFlowFileUnpackagerV1.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fflowfile-packager%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FFlowFileUnpackagerV1.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.util;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Properties;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+\n+public class FlowFileUnpackagerV1 implements FlowFileUnpackager {\n+\n+    private int flowFilesRead = 0;\n+\n+    @Override\n+    public Map<String, String> unpackageFlowFile(final InputStream in, final OutputStream out) throws IOException {\n+        flowFilesRead++;\n+        final TarArchiveInputStream tarIn = new TarArchiveInputStream(in);\n+        final TarArchiveEntry attribEntry = tarIn.getNextTarEntry();\n+        if (attribEntry == null) {\n+            return null;\n+        }\n+\n+        final Map<String, String> attributes;\n+        if (attribEntry.getName().equals(FlowFilePackagerV1.FILENAME_ATTRIBUTES)) {\n+            attributes = getAttributes(tarIn);\n+        } else {\n+            throw new IOException(\"Expected two tar entries: \"\n+                    + FlowFilePackagerV1.FILENAME_CONTENT + \" and \"\n+                    + FlowFilePackagerV1.FILENAME_ATTRIBUTES);\n+        }\n+\n+        final TarArchiveEntry contentEntry = tarIn.getNextTarEntry();\n+\n+        if (contentEntry != null && contentEntry.getName().equals(FlowFilePackagerV1.FILENAME_CONTENT)) {\n+            final byte[] buffer = new byte[512 << 10];//512KB            \n+            int bytesRead = 0;\n+            while ((bytesRead = tarIn.read(buffer)) != -1) { //still more data to read\n+                if (bytesRead > 0) {\n+                    out.write(buffer, 0, bytesRead);\n+                }\n+            }\n+            out.flush();\n+        } else {\n+            throw new IOException(\"Expected two tar entries: \"\n+                    + FlowFilePackagerV1.FILENAME_CONTENT + \" and \"\n+                    + FlowFilePackagerV1.FILENAME_ATTRIBUTES);\n+        }\n+\n+        return attributes;\n+    }\n+\n+    protected Map<String, String> getAttributes(final TarArchiveInputStream stream) throws IOException {\n+\n+        final Properties props = new Properties();\n+        props.loadFromXML(new NonCloseableInputStream(stream));\n+\n+        final Map<String, String> result = new HashMap<>();\n+        for (final Entry<Object, Object> entry : props.entrySet()) {\n+            final Object keyObject = entry.getKey();\n+            final Object valueObject = entry.getValue();\n+            if (!(keyObject instanceof String)) {\n+                throw new IOException(\"Flow file attributes object contains key of type \"\n+                        + keyObject.getClass().getCanonicalName()\n+                        + \" but expected java.lang.String\");\n+            } else if (!(keyObject instanceof String)) {\n+                throw new IOException(\"Flow file attributes object contains value of type \"\n+                        + keyObject.getClass().getCanonicalName()\n+                        + \" but expected java.lang.String\");\n+            }\n+\n+            final String key = (String) keyObject;\n+            final String value = (String) valueObject;\n+            result.put(key, value);\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean hasMoreData() throws IOException {\n+        return flowFilesRead == 0;\n+    }\n+\n+    public static final class NonCloseableInputStream extends InputStream {\n+\n+        final InputStream stream;\n+\n+        public NonCloseableInputStream(final InputStream stream) {\n+            this.stream = stream;\n+        }\n+\n+        @Override\n+        public void close() {\n+        }\n+\n+        @Override\n+        public int read() throws IOException {\n+            return stream.read();\n+        }\n+\n+        @Override\n+        public int available() throws IOException {\n+            return stream.available();\n+        }\n+\n+        @Override\n+        public synchronized void mark(int readlimit) {\n+            stream.mark(readlimit);\n+        }\n+\n+        @Override\n+        public synchronized void reset() throws IOException {\n+            stream.reset();\n+        }\n+\n+        @Override\n+        public boolean markSupported() {\n+            return stream.markSupported();\n+        }\n+\n+        @Override\n+        public long skip(long n) throws IOException {\n+            return stream.skip(n);\n+        }\n+\n+        @Override\n+        public int read(byte b[], int off, int len) throws IOException {\n+            return stream.read(b, off, len);\n+        }\n+\n+        @Override\n+        public int read(byte b[]) throws IOException {\n+            return stream.read(b);\n+        }\n+    }\n+}"
        },
        {
            "sha": "500015f74617e40474b7058ec176427130f3560f",
            "filename": "commons/flowfile-packager/src/main/java/org/apache/nifi/util/FlowFileUnpackagerV2.java",
            "status": "added",
            "additions": 143,
            "deletions": 0,
            "changes": 143,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fflowfile-packager%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FFlowFileUnpackagerV2.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fflowfile-packager%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FFlowFileUnpackagerV2.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fflowfile-packager%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FFlowFileUnpackagerV2.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.util;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class FlowFileUnpackagerV2 implements FlowFileUnpackager {\n+\n+    private final byte readBuffer[] = new byte[8192];\n+    private Map<String, String> nextAttributes = null;\n+    private boolean haveReadSomething = false;\n+\n+    @Override\n+    public boolean hasMoreData() throws IOException {\n+        return nextAttributes != null || !haveReadSomething;\n+    }\n+\n+    protected Map<String, String> readAttributes(final InputStream in) throws IOException {\n+        final Map<String, String> attributes = new HashMap<>();\n+        final Integer numAttributes = readFieldLength(in); //read number of attributes\n+        if (numAttributes == null) {\n+            return null;\n+        }\n+        if (numAttributes == 0) {\n+            throw new IOException(\"flow files cannot have zero attributes\");\n+        }\n+        for (int i = 0; i < numAttributes; i++) { //read each attribute key/value pair\n+            final String key = readString(in);\n+            final String value = readString(in);\n+            attributes.put(key, value);\n+        }\n+\n+        return attributes;\n+    }\n+\n+    @Override\n+    public Map<String, String> unpackageFlowFile(final InputStream in, final OutputStream out) throws IOException {\n+        final Map<String, String> attributes;\n+        if (nextAttributes != null) {\n+            attributes = nextAttributes;\n+        } else {\n+            attributes = readAttributes(in);\n+        }\n+\n+        final long expectedNumBytes = readLong(in); // read length of payload\n+        copy(in, out, expectedNumBytes); // read payload\n+\n+        nextAttributes = readAttributes(in);\n+        haveReadSomething = true;\n+\n+        return attributes;\n+    }\n+\n+    protected String readString(final InputStream in) throws IOException {\n+        final Integer numBytes = readFieldLength(in);\n+        if (numBytes == null) {\n+            throw new EOFException();\n+        }\n+        final byte[] bytes = new byte[numBytes];\n+        fillBuffer(in, bytes, numBytes);\n+        return new String(bytes, \"UTF-8\");\n+    }\n+\n+    private void fillBuffer(final InputStream in, final byte[] buffer, final int length) throws IOException {\n+        int bytesRead;\n+        int totalBytesRead = 0;\n+        while ((bytesRead = in.read(buffer, totalBytesRead, length - totalBytesRead)) > 0) {\n+            totalBytesRead += bytesRead;\n+        }\n+        if (totalBytesRead != length) {\n+            throw new EOFException();\n+        }\n+    }\n+\n+    protected long copy(final InputStream in, final OutputStream out, final long numBytes) throws IOException {\n+        int bytesRead;\n+        long totalBytesRead = 0L;\n+        while ((bytesRead = in.read(readBuffer, 0, (int) Math.min(readBuffer.length, numBytes - totalBytesRead))) > 0) {\n+            out.write(readBuffer, 0, bytesRead);\n+            totalBytesRead += bytesRead;\n+        }\n+\n+        if (totalBytesRead < numBytes) {\n+            throw new EOFException(\"Expected \" + numBytes + \" but received \" + totalBytesRead);\n+        }\n+\n+        return totalBytesRead;\n+    }\n+\n+    protected long readLong(final InputStream in) throws IOException {\n+        fillBuffer(in, readBuffer, 8);\n+        return (((long) readBuffer[0] << 56)\n+                + ((long) (readBuffer[1] & 255) << 48)\n+                + ((long) (readBuffer[2] & 255) << 40)\n+                + ((long) (readBuffer[3] & 255) << 32)\n+                + ((long) (readBuffer[4] & 255) << 24)\n+                + ((readBuffer[5] & 255) << 16)\n+                + ((readBuffer[6] & 255) << 8)\n+                + ((readBuffer[7] & 255)));\n+    }\n+\n+    private Integer readFieldLength(final InputStream in) throws IOException {\n+        final int firstValue = in.read();\n+        final int secondValue = in.read();\n+        if (firstValue < 0) {\n+            return null;\n+        }\n+        if (secondValue < 0) {\n+            throw new EOFException();\n+        }\n+        if (firstValue == 0xff && secondValue == 0xff) {\n+            int ch1 = in.read();\n+            int ch2 = in.read();\n+            int ch3 = in.read();\n+            int ch4 = in.read();\n+            if ((ch1 | ch2 | ch3 | ch4) < 0) {\n+                throw new EOFException();\n+            }\n+            return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8) + (ch4));\n+        } else {\n+            return ((firstValue << 8) + (secondValue));\n+        }\n+    }\n+}"
        },
        {
            "sha": "f937585cf31493a1fab8a30564d9d667b096fc39",
            "filename": "commons/flowfile-packager/src/main/java/org/apache/nifi/util/FlowFileUnpackagerV3.java",
            "status": "added",
            "additions": 161,
            "deletions": 0,
            "changes": 161,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fflowfile-packager%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FFlowFileUnpackagerV3.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fflowfile-packager%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FFlowFileUnpackagerV3.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fflowfile-packager%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FFlowFileUnpackagerV3.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.util;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class FlowFileUnpackagerV3 implements FlowFileUnpackager {\n+\n+    private byte[] nextHeader = null;\n+    private boolean haveReadSomething = false;\n+    private final byte readBuffer[] = new byte[8192];\n+\n+    @Override\n+    public boolean hasMoreData() throws IOException {\n+        return nextHeader != null || !haveReadSomething;\n+    }\n+\n+    private byte[] readHeader(final InputStream in) throws IOException {\n+        final byte[] header = new byte[FlowFilePackagerV3.MAGIC_HEADER.length];\n+        for (int i = 0; i < header.length; i++) {\n+            final int next = in.read();\n+            if (next < 0) {\n+                if (i == 0) {\n+                    return null;\n+                }\n+\n+                throw new IOException(\"Not in FlowFile-v3 format\");\n+            }\n+            header[i] = (byte) (next & 0xFF);\n+        }\n+\n+        return header;\n+    }\n+\n+    @Override\n+    public Map<String, String> unpackageFlowFile(final InputStream in, final OutputStream out) throws IOException {\n+        final byte[] header = (nextHeader == null) ? readHeader(in) : nextHeader;\n+        if (!Arrays.equals(header, FlowFilePackagerV3.MAGIC_HEADER)) {\n+            throw new IOException(\"Not in FlowFile-v3 format\");\n+        }\n+\n+        final Map<String, String> attributes = readAttributes(in);\n+        final long expectedNumBytes = readLong(in); // read length of payload\n+        copy(in, out, expectedNumBytes); // read payload\n+\n+        nextHeader = readHeader(in);\n+        haveReadSomething = true;\n+\n+        return attributes;\n+    }\n+\n+    protected Map<String, String> readAttributes(final InputStream in) throws IOException {\n+        final Map<String, String> attributes = new HashMap<>();\n+        final Integer numAttributes = readFieldLength(in); //read number of attributes\n+        if (numAttributes == null) {\n+            return null;\n+        }\n+        if (numAttributes == 0) {\n+            throw new IOException(\"flow files cannot have zero attributes\");\n+        }\n+        for (int i = 0; i < numAttributes; i++) { //read each attribute key/value pair\n+            final String key = readString(in);\n+            final String value = readString(in);\n+            attributes.put(key, value);\n+        }\n+\n+        return attributes;\n+    }\n+\n+    protected String readString(final InputStream in) throws IOException {\n+        final Integer numBytes = readFieldLength(in);\n+        if (numBytes == null) {\n+            throw new EOFException();\n+        }\n+        final byte[] bytes = new byte[numBytes];\n+        fillBuffer(in, bytes, numBytes);\n+        return new String(bytes, \"UTF-8\");\n+    }\n+\n+    private void fillBuffer(final InputStream in, final byte[] buffer, final int length) throws IOException {\n+        int bytesRead;\n+        int totalBytesRead = 0;\n+        while ((bytesRead = in.read(buffer, totalBytesRead, length - totalBytesRead)) > 0) {\n+            totalBytesRead += bytesRead;\n+        }\n+        if (totalBytesRead != length) {\n+            throw new EOFException();\n+        }\n+    }\n+\n+    protected long copy(final InputStream in, final OutputStream out, final long numBytes) throws IOException {\n+        int bytesRead;\n+        long totalBytesRead = 0L;\n+        while ((bytesRead = in.read(readBuffer, 0, (int) Math.min(readBuffer.length, numBytes - totalBytesRead))) > 0) {\n+            out.write(readBuffer, 0, bytesRead);\n+            totalBytesRead += bytesRead;\n+        }\n+\n+        if (totalBytesRead < numBytes) {\n+            throw new EOFException(\"Expected \" + numBytes + \" but received \" + totalBytesRead);\n+        }\n+\n+        return totalBytesRead;\n+    }\n+\n+    protected long readLong(final InputStream in) throws IOException {\n+        fillBuffer(in, readBuffer, 8);\n+        return (((long) readBuffer[0] << 56)\n+                + ((long) (readBuffer[1] & 255) << 48)\n+                + ((long) (readBuffer[2] & 255) << 40)\n+                + ((long) (readBuffer[3] & 255) << 32)\n+                + ((long) (readBuffer[4] & 255) << 24)\n+                + ((readBuffer[5] & 255) << 16)\n+                + ((readBuffer[6] & 255) << 8)\n+                + ((readBuffer[7] & 255)));\n+    }\n+\n+    private Integer readFieldLength(final InputStream in) throws IOException {\n+        final int firstValue = in.read();\n+        final int secondValue = in.read();\n+        if (firstValue < 0) {\n+            return null;\n+        }\n+        if (secondValue < 0) {\n+            throw new EOFException();\n+        }\n+        if (firstValue == 0xff && secondValue == 0xff) {\n+            int ch1 = in.read();\n+            int ch2 = in.read();\n+            int ch3 = in.read();\n+            int ch4 = in.read();\n+            if ((ch1 | ch2 | ch3 | ch4) < 0) {\n+                throw new EOFException();\n+            }\n+            return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8) + (ch4));\n+        } else {\n+            return ((firstValue << 8) + (secondValue));\n+        }\n+    }\n+\n+}"
        },
        {
            "sha": "19f702ca0126c22272247916c9e45132f3c6afee",
            "filename": "commons/flowfile-packager/src/main/java/org/apache/nifi/util/Unpackage.java",
            "status": "added",
            "additions": 119,
            "deletions": 0,
            "changes": 119,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fflowfile-packager%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FUnpackage.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fflowfile-packager%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FUnpackage.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fflowfile-packager%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FUnpackage.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.util;\n+\n+import java.io.BufferedInputStream;\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+public class Unpackage {\n+\n+    private static void printUsage() {\n+        System.out.println(\"java \" + Unpackage.class.getCanonicalName() + \" <version> <input file 1> [<input file 2> <input file 3> ... <input file N>]\");\n+        System.out.println(\"<version> : The version of the FlowFile Package format. Valid values are 1, 2, 3\");\n+        System.out.println(\"<input file X> : The FlowFile package to unpack\");\n+        System.out.println();\n+    }\n+\n+    public static void main(final String[] args) throws IOException {\n+        if (args.length < 2) {\n+            printUsage();\n+            return;\n+        }\n+\n+        final String version = args[0];\n+\n+        int inputFileCount = 0;\n+        int outputFileCount = 0;\n+\n+        for (int i = 1; i < args.length; i++) {\n+            final String filename = args[i];\n+            final File inFile = new File(filename);\n+\n+            if (inFile.isDirectory()) {\n+                System.out.println(\"WARNING: input file \" + inFile + \" is a directory; skipping\");\n+                continue;\n+            }\n+\n+            if (!inFile.exists() || !inFile.canRead()) {\n+                System.out.println(\"ERROR: unable to read file \" + inFile);\n+                continue;\n+            }\n+\n+            final File outputDir = new File(inFile.getAbsolutePath() + \".unpacked\");\n+            if (!outputDir.exists() && !outputDir.mkdir()) {\n+                System.out.println(\"ERROR: Unable to create directory \" + outputDir);\n+                continue;\n+            }\n+\n+            final File tempFile = new File(outputDir, \".temp.\" + UUID.randomUUID().toString() + \".unpackage\");\n+            inputFileCount++;\n+            try (final FileInputStream fis = new FileInputStream(inFile);\n+                    final BufferedInputStream bufferedIn = new BufferedInputStream(fis)) {\n+\n+                final FlowFileUnpackager unpackager = createUnpackager(version);\n+                while (unpackager.hasMoreData()) {\n+                    outputFileCount++;\n+                    final Map<String, String> attributes;\n+\n+                    try (final FileOutputStream fos = new FileOutputStream(tempFile);\n+                            final BufferedOutputStream bufferedOut = new BufferedOutputStream(fos)) {\n+                        attributes = unpackager.unpackageFlowFile(bufferedIn, bufferedOut);\n+                    }\n+\n+                    String outputFilename = attributes.get(\"filename\");\n+                    if (outputFilename == null) {\n+                        outputFilename = attributes.get(\"nf.file.name\");\n+                    }\n+\n+                    final File outputFile = new File(outputDir, outputFilename);\n+                    tempFile.renameTo(outputFile);\n+\n+                    final File attributeFilename = new File(outputDir, outputFilename + \".attributes\");\n+                    try (final FileOutputStream fos = new FileOutputStream(attributeFilename);\n+                            final BufferedOutputStream bufferedOut = new BufferedOutputStream(fos)) {\n+\n+                        for (final Map.Entry<String, String> entry : attributes.entrySet()) {\n+                            bufferedOut.write((entry.getKey() + \"=\" + entry.getValue() + \"\\n\").getBytes(\"UTF-8\"));\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        System.out.println(\"Unpacked \" + inputFileCount + \" packages into \" + outputFileCount + \" files\");\n+    }\n+\n+    public static FlowFileUnpackager createUnpackager(final String version) {\n+        switch (version) {\n+            case \"1\":\n+                return new FlowFileUnpackagerV1();\n+            case \"2\":\n+                return new FlowFileUnpackagerV2();\n+            case \"3\":\n+                return new FlowFileUnpackagerV3();\n+            default:\n+                System.out.println(\"ERROR: Invalid version: \" + version + \"; must be 1, 2, or 3\");\n+                return null;\n+        }\n+    }\n+}"
        },
        {
            "sha": "24cd37464500a8bd8feec40c32cb4c4de17c3fbf",
            "filename": "commons/flowfile-packager/src/test/java/org/apache/nifi/util/TestPackageUnpackageV3.java",
            "status": "added",
            "additions": 56,
            "deletions": 0,
            "changes": 56,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fflowfile-packager%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FTestPackageUnpackageV3.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fflowfile-packager%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FTestPackageUnpackageV3.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fflowfile-packager%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FTestPackageUnpackageV3.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.util;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+public class TestPackageUnpackageV3 {\n+\n+    @Test\n+    public void test() throws IOException {\n+        final FlowFilePackager packager = new FlowFilePackagerV3();\n+        final FlowFileUnpackager unpackager = new FlowFileUnpackagerV3();\n+\n+        final byte[] data = \"Hello, World!\".getBytes(\"UTF-8\");\n+        final Map<String, String> map = new HashMap<>();\n+        map.put(\"abc\", \"cba\");\n+\n+        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        final ByteArrayInputStream in = new ByteArrayInputStream(data);\n+        packager.packageFlowFile(in, baos, map, data.length);\n+\n+        final byte[] encoded = baos.toByteArray();\n+        final ByteArrayInputStream encodedIn = new ByteArrayInputStream(encoded);\n+        final ByteArrayOutputStream decodedOut = new ByteArrayOutputStream();\n+        final Map<String, String> unpackagedAttributes = unpackager.unpackageFlowFile(encodedIn, decodedOut);\n+        final byte[] decoded = decodedOut.toByteArray();\n+\n+        assertEquals(map, unpackagedAttributes);\n+        assertTrue(Arrays.equals(data, decoded));\n+    }\n+\n+}"
        },
        {
            "sha": "e84be0fdb778fa4e67fe5580d36b5084a7160060",
            "filename": "commons/naive-search-ring-buffer/pom.xml",
            "status": "added",
            "additions": 30,
            "deletions": 0,
            "changes": 30,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnaive-search-ring-buffer%2Fpom.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnaive-search-ring-buffer%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnaive-search-ring-buffer%2Fpom.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,30 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <!--\n+      Licensed to the Apache Software Foundation (ASF) under one or more\n+      contributor license agreements.  See the NOTICE file distributed with\n+      this work for additional information regarding copyright ownership.\n+      The ASF licenses this file to You under the Apache License, Version 2.0\n+      (the \"License\"); you may not use this file except in compliance with\n+      the License.  You may obtain a copy of the License at\n+          http://www.apache.org/licenses/LICENSE-2.0\n+      Unless required by applicable law or agreed to in writing, software\n+      distributed under the License is distributed on an \"AS IS\" BASIS,\n+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+      See the License for the specific language governing permissions and\n+      limitations under the License.\n+    -->\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.nifi</groupId>\n+        <artifactId>nifi-parent</artifactId>\n+        <version>0.0.1-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>naive-search-ring-buffer</artifactId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <packaging>jar</packaging>\n+\n+    <name>NiFi Ring Buffer</name>\n+\t\n+</project>"
        },
        {
            "sha": "85bfd96e67897482c2d6d03f74d9b687ff750b56",
            "filename": "commons/naive-search-ring-buffer/src/main/java/org/apache/nifi/util/NaiveSearchRingBuffer.java",
            "status": "added",
            "additions": 135,
            "deletions": 0,
            "changes": 135,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnaive-search-ring-buffer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FNaiveSearchRingBuffer.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnaive-search-ring-buffer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FNaiveSearchRingBuffer.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnaive-search-ring-buffer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FNaiveSearchRingBuffer.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.util;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * <p>\n+ * A RingBuffer that can be used to scan byte sequences for subsequences.\n+ * </p>\n+ *\n+ * <p>\n+ * This class implements an efficient naive search algorithm, which allows the\n+ * user of the library to identify byte sequences in a stream on-the-fly so that\n+ * the stream can be segmented without having to buffer the data.\n+ * </p>\n+ *\n+ * <p>\n+ * The intended usage paradigm is:\n+ * <code>\n+ * <pre>\n+ * final byte[] searchSequence = ...;\n+ * final CircularBuffer buffer = new CircularBuffer(searchSequence);\n+ * while ((int nextByte = in.read()) > 0) {\n+ *      if ( buffer.addAndCompare(nextByte) ) {\n+ *          // This byte is the last byte in the given sequence\n+ *      } else {\n+ *          // This byte does not complete the given sequence\n+ *      }\n+ * }\n+ * </pre>\n+ * </code>\n+ * </p>\n+ */\n+public class NaiveSearchRingBuffer {\n+\n+    private final byte[] lookingFor;\n+    private final int[] buffer;\n+    private int insertionPointer = 0;\n+    private int bufferSize = 0;\n+\n+    public NaiveSearchRingBuffer(final byte[] lookingFor) {\n+        this.lookingFor = lookingFor;\n+        this.buffer = new int[lookingFor.length];\n+        Arrays.fill(buffer, -1);\n+    }\n+\n+    /**\n+     * Returns the contents of the internal buffer, which represents the last X\n+     * bytes added to the buffer, where X is the minimum of the number of bytes\n+     * added to the buffer or the length of the byte sequence for which we are\n+     * looking\n+     *\n+     * @return\n+     */\n+    public byte[] getBufferContents() {\n+        final int contentLength = Math.min(lookingFor.length, bufferSize);\n+        final byte[] contents = new byte[contentLength];\n+        for (int i = 0; i < contentLength; i++) {\n+            final byte nextByte = (byte) buffer[(insertionPointer + i) % lookingFor.length];\n+            contents[i] = nextByte;\n+        }\n+        return contents;\n+    }\n+\n+    /**\n+     * Returns the oldest byte in the buffer\n+     *\n+     * @return\n+     */\n+    public int getOldestByte() {\n+        return buffer[insertionPointer];\n+    }\n+\n+    /**\n+     * Returns <code>true</code> if the number of bytes that have been added to\n+     * the buffer is at least equal to the length of the byte sequence for which\n+     * we are searching\n+     *\n+     * @return\n+     */\n+    public boolean isFilled() {\n+        return bufferSize >= buffer.length;\n+    }\n+\n+    /**\n+     * Clears the internal buffer so that a new search may begin\n+     */\n+    public void clear() {\n+        Arrays.fill(buffer, -1);\n+        insertionPointer = 0;\n+        bufferSize = 0;\n+    }\n+\n+    /**\n+     * Add the given byte to the buffer and notify whether or not the byte\n+     * completes the desired byte sequence.\n+     *\n+     * @param data\n+     * @return <code>true</code> if this byte completes the byte sequence,\n+     * <code>false</code> otherwise.\n+     */\n+    public boolean addAndCompare(final byte data) {\n+        buffer[insertionPointer] = data;\n+        insertionPointer = (insertionPointer + 1) % lookingFor.length;\n+\n+        bufferSize++;\n+        if (bufferSize < lookingFor.length) {\n+            return false;\n+        }\n+\n+        for (int i = 0; i < lookingFor.length; i++) {\n+            final byte compare = (byte) buffer[(insertionPointer + i) % lookingFor.length];\n+            if (compare != lookingFor[i]) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+}"
        },
        {
            "sha": "0838e968b2eb04e964709eb1e47d8d577436fb82",
            "filename": "commons/naive-search-ring-buffer/src/test/java/org/apache/nifi/util/TestNaiveSearchRingBuffer.java",
            "status": "added",
            "additions": 72,
            "deletions": 0,
            "changes": 72,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnaive-search-ring-buffer%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FTestNaiveSearchRingBuffer.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnaive-search-ring-buffer%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FTestNaiveSearchRingBuffer.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnaive-search-ring-buffer%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FTestNaiveSearchRingBuffer.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.util;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Test;\n+\n+public class TestNaiveSearchRingBuffer {\n+\n+    @Test\n+    public void testAddAndCompare() {\n+        final byte[] pattern = new byte[]{\n+            '\\r', '0', 38, 48\n+        };\n+\n+        final byte[] search = new byte[]{\n+            '\\r', '0', 38, 58, 58, 83, 78, '\\r', '0', 38, 48, 83, 92, 78, 4, 38\n+        };\n+\n+        final NaiveSearchRingBuffer circ = new NaiveSearchRingBuffer(pattern);\n+        int counter = -1;\n+        for (final byte b : search) {\n+            counter++;\n+            final boolean matched = circ.addAndCompare(b);\n+            if (counter == 10) {\n+                assertTrue(matched);\n+            } else {\n+                assertFalse(matched);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testGetOldestByte() {\n+        final byte[] pattern = new byte[]{\n+            '\\r', '0', 38, 48\n+        };\n+\n+        final byte[] search = new byte[]{\n+            '\\r', '0', 38, 58, 58, 83, 78, (byte) 223, (byte) 227, (byte) 250, '\\r', '0', 38, 48, 83, 92, 78, 4, 38\n+        };\n+\n+        final NaiveSearchRingBuffer circ = new NaiveSearchRingBuffer(pattern);\n+        int counter = -1;\n+        for (final byte b : search) {\n+            counter++;\n+            final boolean matched = circ.addAndCompare(b);\n+            if (counter == 13) {\n+                assertTrue(matched);\n+            } else {\n+                assertFalse(matched);\n+            }\n+        }\n+    }\n+\n+}"
        },
        {
            "sha": "dfb1ea5b03cab7e473fe87eb65f806eae4359de6",
            "filename": "commons/nifi-expression-language/pom.xml",
            "status": "added",
            "additions": 59,
            "deletions": 0,
            "changes": 59,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fpom.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fpom.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,59 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <!--\n+      Licensed to the Apache Software Foundation (ASF) under one or more\n+      contributor license agreements.  See the NOTICE file distributed with\n+      this work for additional information regarding copyright ownership.\n+      The ASF licenses this file to You under the Apache License, Version 2.0\n+      (the \"License\"); you may not use this file except in compliance with\n+      the License.  You may obtain a copy of the License at\n+          http://www.apache.org/licenses/LICENSE-2.0\n+      Unless required by applicable law or agreed to in writing, software\n+      distributed under the License is distributed on an \"AS IS\" BASIS,\n+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+      See the License for the specific language governing permissions and\n+      limitations under the License.\n+    -->\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.nifi</groupId>\n+        <artifactId>nifi-parent</artifactId>\n+        <version>0.0.1-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>nifi-expression-language</artifactId>\n+    <version>0.0.1-SNAPSHOT</version>\n+\t\n+    <packaging>jar</packaging>\n+    <name>NiFi Expression Language</name>\n+\t\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.antlr</groupId>\n+                <artifactId>antlr3-maven-plugin</artifactId>\n+                <version>3.5.2</version>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>antlr</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.antlr</groupId>\n+            <artifactId>antlr-runtime</artifactId>\n+            <version>3.5.2</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>nifi-api</artifactId>\n+            <version>[0.0.1-SNAPSHOT, 1.0.0-SNAPSHOT)</version>\n+        </dependency>\n+    </dependencies>\n+</project>"
        },
        {
            "sha": "8cb6847f8066d27e5875ce770f80d3e65dfc9cc5",
            "filename": "commons/nifi-expression-language/src/main/antlr3/org/apache/nifi/attribute/expression/language/antlr/AttributeExpressionLexer.g",
            "status": "added",
            "additions": 207,
            "deletions": 0,
            "changes": 207,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fantlr3%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fantlr%2FAttributeExpressionLexer.g",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fantlr3%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fantlr%2FAttributeExpressionLexer.g",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fantlr3%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fantlr%2FAttributeExpressionLexer.g?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+lexer grammar AttributeExpressionLexer;\n+\n+@header {\n+\tpackage org.apache.nifi.attribute.expression.language.antlr;\n+\timport org.apache.nifi.attribute.expression.language.exception.AttributeExpressionLanguageParsingException;\n+}\n+\n+@rulecatch {\n+  catch(final Exception e) {\n+    throw new AttributeExpressionLanguageParsingException(e);\n+  }\n+}\n+\n+@members {\n+  public void displayRecognitionError(String[] tokenNames, RecognitionException e) {\n+    final StringBuilder sb = new StringBuilder();\n+    if ( e.token == null ) {\n+    \tsb.append(\"Unrecognized token \");\n+    } else {\n+    \tsb.append(\"Unexpected token '\").append(e.token.getText()).append(\"' \");\n+    }\n+    sb.append(\"at line \").append(e.line);\n+    if ( e.approximateLineInfo ) {\n+    \tsb.append(\" (approximately)\");\n+    }\n+    sb.append(\", column \").append(e.charPositionInLine);\n+    sb.append(\". Query: \").append(e.input.toString());\n+    \n+    throw new AttributeExpressionLanguageParsingException(sb.toString());\n+  }\n+\n+  public void recover(RecognitionException e) {\n+  \tfinal StringBuilder sb = new StringBuilder();\n+    if ( e.token == null ) {\n+    \tsb.append(\"Unrecognized token \");\n+    } else {\n+    \tsb.append(\"Unexpected token '\").append(e.token.getText()).append(\"' \");\n+    }\n+    sb.append(\"at line \").append(e.line);\n+    if ( e.approximateLineInfo ) {\n+    \tsb.append(\" (approximately)\");\n+    }\n+    sb.append(\", column \").append(e.charPositionInLine);\n+    sb.append(\". Query: \").append(e.input.toString());\n+    \n+    throw new AttributeExpressionLanguageParsingException(sb.toString());\n+  } \n+}\n+\n+\n+// PUNCTUATION & SPECIAL CHARACTERS\n+WHITESPACE : (' '|'\\t'|'\\n'|'\\r')+ { $channel = HIDDEN; };\n+COMMENT : '#' ( ~('\\n') )* '\\n' { $channel = HIDDEN; };\n+\n+DOLLAR : '$';\n+LPAREN\t: '(';\n+RPAREN\t: ')';\n+LBRACE  : '{';\n+RBRACE  : '}';\n+COLON\t: ':';\n+COMMA\t: ',';\n+DOT\t\t: '.';\n+SEMICOLON : ';';\n+NUMBER\t: ('0'..'9')+;\n+\n+TRUE\t: 'true';\n+FALSE\t: 'false';\n+\n+//\n+// FUNCTION NAMES\n+//\n+\n+// ATTRIBUTE KEY SELECTION FUNCTIONS\n+ANY_ATTRIBUTE : 'anyAttribute';\n+ANY_MATCHING_ATTRIBUTE : 'anyMatchingAttribute';\n+ALL_ATTRIBUTES : 'allAttributes';\n+ALL_MATCHING_ATTRIBUTES : 'allMatchingAttributes';\n+ANY_DELINEATED_VALUE : 'anyDelineatedValue';\n+ALL_DELINEATED_VALUES : 'allDelineatedValues';\n+\n+// NO-SUBJECT FUNCTIONS\n+NEXT_INT\t: 'nextInt';\n+IP\t: 'ip';\n+UUID : 'UUID';\n+HOSTNAME : 'hostname';\t// requires boolean arg: prefer FQDN\n+NOW\t: 'now';\n+\n+\n+// 0 arg functions\n+TO_UPPER : 'toUpper';\n+TO_LOWER : 'toLower';\n+TO_STRING : 'toString';\n+LENGTH : 'length';\n+TRIM\t: 'trim';\n+IS_NULL\t: 'isNull';\n+NOT_NULL : 'notNull';\n+TO_NUMBER : 'toNumber';\n+URL_ENCODE : 'urlEncode';\n+URL_DECODE : 'urlDecode';\n+NOT : 'not';\n+\n+// 1 arg functions\n+SUBSTRING_AFTER\t: 'substringAfter';\n+SUBSTRING_BEFORE : 'substringBefore';\n+SUBSTRING_AFTER_LAST : 'substringAfterLast';\n+SUBSTRING_BEFORE_LAST : 'substringBeforeLast';\n+STARTS_WITH : 'startsWith';\n+ENDS_WITH : 'endsWith';\n+CONTAINS : 'contains';\n+PREPEND\t: 'prepend';\n+APPEND\t: 'append';\n+INDEX_OF : 'indexOf';\n+LAST_INDEX_OF : 'lastIndexOf';\n+REPLACE_NULL : 'replaceNull';\n+FIND\t: 'find';\t// regex\n+MATCHES : 'matches';\t// regex\n+EQUALS\t: 'equals';\n+EQUALS_IGNORE_CASE : 'equalsIgnoreCase';\n+GREATER_THAN\t: 'gt';\n+LESS_THAN\t\t: 'lt';\n+GREATER_THAN_OR_EQUAL\t: 'ge';\n+LESS_THAN_OR_EQUAL\t\t: 'le';\n+FORMAT\t\t\t: 'format'; // takes string date format; uses SimpleDateFormat\n+TO_DATE\t\t\t: 'toDate'; // takes string date format; converts the subject to a Long based on the date format\n+MOD : 'mod';\n+PLUS : 'plus';\n+MINUS : 'minus';\n+MULTIPLY : 'multiply';\n+DIVIDE : 'divide';\n+TO_RADIX : 'toRadix';\n+OR : 'or';\n+AND : 'and';\n+\n+\n+// 2 arg functions\n+SUBSTRING\t: 'substring';\n+REPLACE\t: 'replace';\n+REPLACE_ALL : 'replaceAll';\n+\n+\n+// STRINGS\n+STRING_LITERAL\n+@init{StringBuilder lBuf = new StringBuilder();}\n+\t:\n+\t\t(\n+\t\t\t'\"'\n+\t\t\t\t(\n+\t\t\t\t\tescaped=ESC {lBuf.append(getText());} |\n+\t\t\t\t  \tnormal = ~( '\"' | '\\\\' | '\\n' | '\\r' | '\\t' ) { lBuf.appendCodePoint(normal);} \n+\t\t\t\t)*\n+\t\t\t'\"'\n+\t\t)\n+\t\t{\n+\t\t\tsetText(lBuf.toString());\n+\t\t}\n+\t\t|\n+\t\t(\n+\t\t\t'\\''\n+\t\t\t\t(\n+\t\t\t\t\tescaped=ESC {lBuf.append(getText());} |\n+\t\t\t\t  \tnormal = ~( '\\'' | '\\\\' | '\\n' | '\\r' | '\\t' ) { lBuf.appendCodePoint(normal);} \n+\t\t\t\t)*\n+\t\t\t'\\''\n+\t\t)\n+\t\t{\n+\t\t\tsetText(lBuf.toString());\n+\t\t}\n+\t\t;\n+\n+\n+fragment\n+ESC\n+\t:\t'\\\\'\n+\t\t(\n+\t\t\t\t'\"'\t\t{ setText(\"\\\"\"); }\n+\t\t\t|\t'\\''\t{ setText(\"\\'\"); }\n+\t\t\t|\t'r'\t\t{ setText(\"\\r\"); }\n+\t\t\t|\t'n'\t\t{ setText(\"\\n\"); }\n+\t\t\t|\t't'\t\t{ setText(\"\\t\"); }\n+\t\t\t|\t'\\\\'\t{ setText(\"\\\\\\\\\"); }\n+\t\t\t|\tnextChar = ~('\"' | '\\'' | 'r' | 'n' | 't' | '\\\\')\t\t\n+\t\t\t\t{\n+\t\t\t\t\tStringBuilder lBuf = new StringBuilder(); lBuf.append(\"\\\\\\\\\").appendCodePoint(nextChar); setText(lBuf.toString());\n+\t\t\t\t}\n+\t\t)\n+\t;\n+\n+ATTRIBUTE_NAME : (\n+\t\t\t\t  ~('$' | '{' | '}' | '(' | ')' | '[' | ']' | ',' | ':' | ';' | '/' | '*' | '\\'' | ' ' | '\\t' | '\\r' | '\\n' | '0'..'9')\n+\t\t\t\t  ~('$' | '{' | '}' | '(' | ')' | '[' | ']' | ',' | ':' | ';' | '/' | '*' | '\\'' | ' ' | '\\t' | '\\r' | '\\n')*\n+\t\t\t\t );"
        },
        {
            "sha": "cf10fc044efb5be16320827ee3050c32932df6f8",
            "filename": "commons/nifi-expression-language/src/main/antlr3/org/apache/nifi/attribute/expression/language/antlr/AttributeExpressionParser.g",
            "status": "added",
            "additions": 139,
            "deletions": 0,
            "changes": 139,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fantlr3%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fantlr%2FAttributeExpressionParser.g",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fantlr3%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fantlr%2FAttributeExpressionParser.g",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fantlr3%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fantlr%2FAttributeExpressionParser.g?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+parser grammar AttributeExpressionParser;\n+\n+options {\n+\toutput=AST;\n+\ttokenVocab=AttributeExpressionLexer;\n+}\n+\n+tokens {\n+\tQUERY;\n+\tATTRIBUTE_REFERENCE;\n+\tATTR_NAME;\n+\tFUNCTION_CALL;\n+\tEXPRESSION;\n+\tMULTI_ATTRIBUTE_REFERENCE;\n+\tQUOTED_ATTR_NAME;\n+}\n+\n+@header {\n+\tpackage org.apache.nifi.attribute.expression.language.antlr;\n+\timport org.apache.nifi.attribute.expression.language.exception.AttributeExpressionLanguageParsingException;\n+}\n+\n+@members {\n+  public void displayRecognitionError(String[] tokenNames, RecognitionException e) {\n+  \tfinal StringBuilder sb = new StringBuilder();\n+    if ( e.token == null ) {\n+    \tsb.append(\"Unrecognized token \");\n+    } else {\n+    \tsb.append(\"Unexpected token '\").append(e.token.getText()).append(\"' \");\n+    }\n+    sb.append(\"at line \").append(e.line);\n+    if ( e.approximateLineInfo ) {\n+    \tsb.append(\" (approximately)\");\n+    }\n+    sb.append(\", column \").append(e.charPositionInLine);\n+    sb.append(\". Query: \").append(e.input.toString());\n+    \n+    throw new AttributeExpressionLanguageParsingException(sb.toString());\n+  }\n+\n+  public void recover(final RecognitionException e) {\n+  \tfinal StringBuilder sb = new StringBuilder();\n+    if ( e.token == null ) {\n+    \tsb.append(\"Unrecognized token \");\n+    } else {\n+    \tsb.append(\"Unexpected token '\").append(e.token.getText()).append(\"' \");\n+    }\n+    sb.append(\"at line \").append(e.line);\n+    if ( e.approximateLineInfo ) {\n+    \tsb.append(\" (approximately)\");\n+    }\n+    sb.append(\", column \").append(e.charPositionInLine);\n+    sb.append(\". Query: \").append(e.input.toString());\n+    \n+    throw new AttributeExpressionLanguageParsingException(sb.toString());\n+  } \n+}\n+\n+// functions that return Strings\n+zeroArgString : (TO_UPPER | TO_LOWER | TRIM | TO_STRING | URL_ENCODE | URL_DECODE) LPAREN! RPAREN!;\n+oneArgString : ((SUBSTRING_BEFORE | SUBSTRING_BEFORE_LAST | SUBSTRING_AFTER | SUBSTRING_AFTER_LAST | REPLACE_NULL | \n+\t\t\t\tPREPEND | APPEND | FORMAT | STARTS_WITH | ENDS_WITH | CONTAINS) LPAREN! anyArg RPAREN!) |\n+\t\t\t   (TO_RADIX LPAREN! anyArg (COMMA! anyArg)? RPAREN!);\n+twoArgString : ((REPLACE | REPLACE_ALL) LPAREN! anyArg COMMA! anyArg RPAREN!) |\n+\t\t\t   (SUBSTRING LPAREN! anyArg (COMMA! anyArg)? RPAREN!);\n+\n+\n+// functions that return Booleans\n+zeroArgBool : (IS_NULL | NOT_NULL | NOT) LPAREN! RPAREN!;\n+oneArgBool\t: ((FIND | MATCHES | EQUALS_IGNORE_CASE) LPAREN! anyArg RPAREN!) |\n+\t\t\t  (GREATER_THAN | LESS_THAN | GREATER_THAN_OR_EQUAL | LESS_THAN_OR_EQUAL) LPAREN! anyArg RPAREN! |\n+\t\t\t  (EQUALS) LPAREN! anyArg RPAREN! |\n+\t\t\t  (AND | OR) LPAREN! anyArg RPAREN!;\n+\n+\n+// functions that return Numbers\n+zeroArgNum\t: (LENGTH | TO_NUMBER) LPAREN! RPAREN!;\n+oneArgNum\t: ((INDEX_OF | LAST_INDEX_OF) LPAREN! anyArg RPAREN!) |\n+\t\t\t  (TO_DATE LPAREN! anyArg? RPAREN!) |\n+\t\t\t  ((MOD | PLUS | MINUS | MULTIPLY | DIVIDE) LPAREN! anyArg RPAREN!);\n+\n+stringFunctionRef : zeroArgString | oneArgString | twoArgString;\n+booleanFunctionRef : zeroArgBool | oneArgBool;\n+numberFunctionRef : zeroArgNum | oneArgNum;\n+\n+anyArg : NUMBER | numberFunctionRef | STRING_LITERAL | zeroArgString | oneArgString | twoArgString | booleanLiteral | zeroArgBool | oneArgBool | expression;\n+stringArg : STRING_LITERAL | zeroArgString | oneArgString | twoArgString | expression;\n+functionRef : stringFunctionRef | booleanFunctionRef | numberFunctionRef;\n+\n+\n+\n+// Attribute Reference\n+subject : attrName | expression;\n+attrName : singleAttrName | multiAttrName;\n+\n+singleAttrRef : ATTRIBUTE_NAME | STRING_LITERAL;\n+singleAttrName : singleAttrRef ->\n+\t^(ATTR_NAME singleAttrRef);\n+\t\n+\n+multiAttrFunction : ANY_ATTRIBUTE | ANY_MATCHING_ATTRIBUTE | ALL_ATTRIBUTES | ALL_MATCHING_ATTRIBUTES | ANY_DELINEATED_VALUE | ALL_DELINEATED_VALUES;\n+multiAttrName : multiAttrFunction LPAREN stringArg (COMMA stringArg)* RPAREN ->\n+\t^(MULTI_ATTRIBUTE_REFERENCE multiAttrFunction stringArg*);\n+\n+attributeRef : subject ->\n+\t^(ATTRIBUTE_REFERENCE subject);\n+\t\n+\n+functionCall : functionRef ->\n+\t^(FUNCTION_CALL functionRef);\n+\n+booleanLiteral : TRUE | FALSE;\n+zeroArgStandaloneFunction : (IP | UUID | NOW | NEXT_INT | HOSTNAME) LPAREN! RPAREN!;\n+oneArgStandaloneFunction : HOSTNAME^ LPAREN! booleanLiteral RPAREN!;\n+standaloneFunction : zeroArgStandaloneFunction | oneArgStandaloneFunction;\n+\n+attributeRefOrFunctionCall\t: (attributeRef | standaloneFunction);\n+\n+expression : DOLLAR LBRACE attributeRefOrFunctionCall (COLON functionCall)* RBRACE ->\n+\t^(EXPRESSION attributeRefOrFunctionCall functionCall*);\n+\n+query : expression EOF ->\n+\t^(QUERY expression);"
        },
        {
            "sha": "1b973c8f6cfe3244f96755c495064f26de3e0c48",
            "filename": "commons/nifi-expression-language/src/main/antlr3/org/apache/nifi/attribute/expression/language/antlr/output/AttributeExpressionLexer.tokens",
            "status": "added",
            "additions": 72,
            "deletions": 0,
            "changes": 72,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fantlr3%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fantlr%2Foutput%2FAttributeExpressionLexer.tokens",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fantlr3%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fantlr%2Foutput%2FAttributeExpressionLexer.tokens",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fantlr3%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fantlr%2Foutput%2FAttributeExpressionLexer.tokens?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,72 @@\n+ALL_ATTRIBUTES=4\n+ALL_DELINEATED_VALUES=5\n+ALL_MATCHING_ATTRIBUTES=6\n+AND=7\n+ANY_ATTRIBUTE=8\n+ANY_DELINEATED_VALUE=9\n+ANY_MATCHING_ATTRIBUTE=10\n+APPEND=11\n+ATTRIBUTE_NAME=12\n+CEIL=13\n+COLON=14\n+COMMA=15\n+CONTAINS=16\n+DIVIDE=17\n+DOLLAR=18\n+DOT=19\n+ENDS_WITH=20\n+EQUALS=21\n+EQUALS_IGNORE_CASE=22\n+FALSE=23\n+FIND=24\n+FLOOR=25\n+FORMAT=26\n+GREATER_THAN=27\n+GREATER_THAN_OR_EQUAL=28\n+HOSTNAME=29\n+INDEX_OF=30\n+IP=31\n+IS_NULL=32\n+LAST_INDEX_OF=33\n+LBRACE=34\n+LENGTH=35\n+LESS_THAN=36\n+LESS_THAN_OR_EQUAL=37\n+LPAREN=38\n+MATCHES=39\n+MINUS=40\n+MOD=41\n+MULTIPLY=42\n+NEXT_INT=43\n+NOT=44\n+NOT_NULL=45\n+NOW=46\n+NUMBER=47\n+OR=48\n+PLUS=49\n+PREPEND=50\n+RBRACE=51\n+REPLACE=52\n+REPLACE_ALL=53\n+REPLACE_NULL=54\n+RPAREN=55\n+SEMICOLON=56\n+STARTS_WITH=57\n+STRING_LITERAL=58\n+SUBSTRING=59\n+SUBSTRING_AFTER=60\n+SUBSTRING_AFTER_LAST=61\n+SUBSTRING_BEFORE=62\n+SUBSTRING_BEFORE_LAST=63\n+TO_DATE=64\n+TO_LOWER=65\n+TO_NUMBER=66\n+TO_RADIX=67\n+TO_STRING=68\n+TO_UPPER=69\n+TRIM=70\n+TRUE=71\n+URL_DECODE=72\n+URL_ENCODE=73\n+UUID=74\n+WHITESPACE=75"
        },
        {
            "sha": "81da47ee31a6f3afab7391facbf47339d84df213",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/EmptyPreparedQuery.java",
            "status": "added",
            "additions": 62,
            "deletions": 0,
            "changes": 62,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2FEmptyPreparedQuery.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2FEmptyPreparedQuery.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2FEmptyPreparedQuery.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.expression.AttributeValueDecorator;\n+import org.apache.nifi.flowfile.FlowFile;\n+import org.apache.nifi.processor.exception.ProcessException;\n+\n+public class EmptyPreparedQuery implements PreparedQuery {\n+\n+    private final String value;\n+\n+    EmptyPreparedQuery(final String value) {\n+        this.value = value;\n+    }\n+\n+    @Override\n+    public String evaluateExpressions(final FlowFile flowFile, final AttributeValueDecorator decorator) throws ProcessException {\n+        return value;\n+    }\n+\n+    @Override\n+    public String evaluateExpressions() throws ProcessException {\n+        return value;\n+    }\n+\n+    @Override\n+    public String evaluateExpressions(final AttributeValueDecorator decorator) throws ProcessException {\n+        return value;\n+    }\n+\n+    @Override\n+    public String evaluateExpressions(final FlowFile flowFile) throws ProcessException {\n+        return value;\n+    }\n+\n+    @Override\n+    public String evaluateExpressions(Map<String, String> attributes) throws ProcessException {\n+        return value;\n+    }\n+\n+    @Override\n+    public String evaluateExpressions(Map<String, String> attributes, AttributeValueDecorator decorator) throws ProcessException {\n+        return value;\n+    }\n+}"
        },
        {
            "sha": "0d1b2c7b7915dc904319e30dd056df322480205e",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/PreparedQuery.java",
            "status": "added",
            "additions": 39,
            "deletions": 0,
            "changes": 39,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2FPreparedQuery.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2FPreparedQuery.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2FPreparedQuery.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.expression.AttributeValueDecorator;\n+import org.apache.nifi.flowfile.FlowFile;\n+import org.apache.nifi.processor.exception.ProcessException;\n+\n+public interface PreparedQuery {\n+\n+    String evaluateExpressions(FlowFile flowFile, AttributeValueDecorator decorator) throws ProcessException;\n+\n+    String evaluateExpressions() throws ProcessException;\n+\n+    String evaluateExpressions(AttributeValueDecorator decorator) throws ProcessException;\n+\n+    String evaluateExpressions(FlowFile flowFile) throws ProcessException;\n+\n+    String evaluateExpressions(Map<String, String> attributes) throws ProcessException;\n+\n+    String evaluateExpressions(Map<String, String> attributes, AttributeValueDecorator decorator) throws ProcessException;\n+\n+}"
        },
        {
            "sha": "6d9cc91ee2915f7d8173a7d0899f7f91f4a52ce0",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/Query.java",
            "status": "added",
            "additions": 1183,
            "deletions": 0,
            "changes": 1183,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2FQuery.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2FQuery.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2FQuery.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,1183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language;\n+\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.ALL_ATTRIBUTES;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.ALL_DELINEATED_VALUES;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.ALL_MATCHING_ATTRIBUTES;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.AND;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.ANY_ATTRIBUTE;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.ANY_DELINEATED_VALUE;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.ANY_MATCHING_ATTRIBUTE;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.APPEND;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.ATTRIBUTE_REFERENCE;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.ATTR_NAME;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.CONTAINS;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.DIVIDE;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.ENDS_WITH;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.EQUALS;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.EQUALS_IGNORE_CASE;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.EXPRESSION;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.FALSE;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.FIND;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.FORMAT;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.GREATER_THAN;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.GREATER_THAN_OR_EQUAL;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.HOSTNAME;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.INDEX_OF;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.IP;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.IS_NULL;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.LAST_INDEX_OF;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.LENGTH;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.LESS_THAN;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.LESS_THAN_OR_EQUAL;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.MATCHES;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.MINUS;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.MOD;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.MULTIPLY;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.MULTI_ATTRIBUTE_REFERENCE;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.NEXT_INT;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.NOT;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.NOT_NULL;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.NOW;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.NUMBER;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.OR;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.PLUS;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.PREPEND;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.REPLACE;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.REPLACE_ALL;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.REPLACE_NULL;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.STARTS_WITH;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.STRING_LITERAL;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.SUBSTRING;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.SUBSTRING_AFTER;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.SUBSTRING_AFTER_LAST;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.SUBSTRING_BEFORE;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.SUBSTRING_BEFORE_LAST;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.TO_DATE;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.TO_LOWER;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.TO_NUMBER;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.TO_RADIX;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.TO_STRING;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.TO_UPPER;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.TRIM;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.TRUE;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.URL_DECODE;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.URL_ENCODE;\n+import static org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser.UUID;\n+\n+import java.net.UnknownHostException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionLexer;\n+import org.apache.nifi.attribute.expression.language.antlr.AttributeExpressionParser;\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.DateEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.cast.BooleanCastEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.cast.DateCastEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.cast.NumberCastEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.cast.StringCastEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.AndEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.AppendEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.AttributeEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.ContainsEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.DateToNumberEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.DivideEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.EndsWithEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.EqualsEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.EqualsIgnoreCaseEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.FindEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.FormatEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.GreaterThanEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.GreaterThanOrEqualEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.HostnameEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.IPEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.IndexOfEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.IsNullEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.LastIndexOfEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.LengthEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.LessThanEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.LessThanOrEqualEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.MatchesEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.MinusEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.ModEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.MultiplyEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.NotEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.NotNullEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.NowEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.NumberToDateEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.OneUpSequenceEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.OrEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.PlusEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.PrependEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.ReplaceAllEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.ReplaceEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.ReplaceNullEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.StartsWithEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.StringToDateEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.SubstringAfterEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.SubstringAfterLastEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.SubstringBeforeEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.SubstringBeforeLastEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.SubstringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.ToLowerEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.ToNumberEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.ToRadixEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.ToStringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.ToUpperEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.TrimEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.UrlDecodeEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.UrlEncodeEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.functions.UuidEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.literals.BooleanLiteralEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.literals.NumberLiteralEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.literals.StringLiteralEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.selection.AllAttributesEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.selection.AnyAttributeEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.selection.DelineatedAttributeEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.selection.MultiAttributeEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.selection.MultiMatchAttributeEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.selection.MultiNamedAttributeEvaluator;\n+import org.apache.nifi.attribute.expression.language.exception.AttributeExpressionLanguageException;\n+import org.apache.nifi.attribute.expression.language.exception.AttributeExpressionLanguageParsingException;\n+import org.apache.nifi.expression.AttributeExpression.ResultType;\n+import org.apache.nifi.expression.AttributeValueDecorator;\n+import org.apache.nifi.flowfile.FlowFile;\n+import org.apache.nifi.processor.exception.ProcessException;\n+\n+import org.antlr.runtime.ANTLRStringStream;\n+import org.antlr.runtime.CharStream;\n+import org.antlr.runtime.CommonTokenStream;\n+import org.antlr.runtime.tree.Tree;\n+\n+/**\n+ * Class used for creating and evaluating NiFi Expression Language. Once a Query\n+ * has been created, it may be evaluated using the evaluate methods exactly\n+ * once.\n+ */\n+public class Query {\n+\n+    private final String query;\n+    private final Tree tree;\n+    private final Evaluator<?> evaluator;\n+    private final AtomicBoolean evaluated = new AtomicBoolean(false);\n+\n+    private Query(final String query, final Tree tree, final Evaluator<?> evaluator) {\n+        this.query = query;\n+        this.tree = tree;\n+        this.evaluator = evaluator;\n+    }\n+\n+    public static boolean isValidExpression(final String value) {\n+        try {\n+            validateExpression(value, false);\n+            return true;\n+        } catch (final ProcessException e) {\n+            return false;\n+        }\n+    }\n+\n+    public static ResultType getResultType(final String value) throws AttributeExpressionLanguageParsingException {\n+        return Query.compile(value).getResultType();\n+    }\n+\n+    public static List<ResultType> extractResultTypes(final String value) throws AttributeExpressionLanguageParsingException {\n+        final List<ResultType> types = new ArrayList<>();\n+\n+        for (final Range range : extractExpressionRanges(value)) {\n+            final String text = value.substring(range.getStart(), range.getEnd() + 1);\n+            types.add(getResultType(text));\n+        }\n+\n+        return types;\n+    }\n+\n+    public static List<String> extractExpressions(final String value) throws AttributeExpressionLanguageParsingException {\n+        final List<String> expressions = new ArrayList<>();\n+\n+        for (final Range range : extractExpressionRanges(value)) {\n+            expressions.add(value.substring(range.getStart(), range.getEnd() + 1));\n+        }\n+\n+        return expressions;\n+    }\n+\n+    public static List<Range> extractExpressionRanges(final String value) throws AttributeExpressionLanguageParsingException {\n+        final List<Range> ranges = new ArrayList<>();\n+        char lastChar = 0;\n+        int embeddedCount = 0;\n+        int expressionStart = -1;\n+        boolean oddDollarCount = false;\n+        int backslashCount = 0;\n+\n+        charLoop:\n+        for (int i = 0; i < value.length(); i++) {\n+            final char c = value.charAt(i);\n+\n+            if (expressionStart > -1 && (c == '\\'' || c == '\"') && (lastChar != '\\\\' || backslashCount % 2 == 0)) {\n+                final int endQuoteIndex = findEndQuoteChar(value, i);\n+                if (endQuoteIndex < 0) {\n+                    break charLoop;\n+                }\n+\n+                i = endQuoteIndex;\n+                continue;\n+            }\n+\n+            if (c == '{') {\n+                if (oddDollarCount && lastChar == '$') {\n+                    if (embeddedCount == 0) {\n+                        expressionStart = i - 1;\n+                    }\n+                }\n+\n+                embeddedCount++;\n+            } else if (c == '}') {\n+                if (embeddedCount <= 0) {\n+                    continue;\n+                }\n+\n+                if (--embeddedCount == 0) {\n+                    if (expressionStart > -1) {\n+                        // ended expression. Add a new range.\n+                        final Range range = new Range(expressionStart, i);\n+                        ranges.add(range);\n+                    }\n+\n+                    expressionStart = -1;\n+                }\n+            } else if (c == '$') {\n+                oddDollarCount = !oddDollarCount;\n+            } else if (c == '\\\\') {\n+                backslashCount++;\n+            } else {\n+                oddDollarCount = false;\n+            }\n+\n+            lastChar = c;\n+        }\n+\n+        return ranges;\n+    }\n+\n+    /**\n+     *\n+     *\n+     * @param value\n+     * @param allowSurroundingCharacters\n+     * @throws AttributeExpressionLanguageParsingException\n+     */\n+    public static void validateExpression(final String value, final boolean allowSurroundingCharacters) throws AttributeExpressionLanguageParsingException {\n+        if (!allowSurroundingCharacters) {\n+            final List<Range> ranges = extractExpressionRanges(value);\n+            if (ranges.size() > 1) {\n+                throw new AttributeExpressionLanguageParsingException(\"Found multiple Expressions but expected only 1\");\n+            }\n+\n+            if (ranges.isEmpty()) {\n+                throw new AttributeExpressionLanguageParsingException(\"No Expressions found\");\n+            }\n+\n+            final Range range = ranges.get(0);\n+            final String expression = value.substring(range.getStart(), range.getEnd() + 1);\n+            Query.compile(expression);\n+\n+            if (range.getStart() > 0 || range.getEnd() < value.length() - 1) {\n+                throw new AttributeExpressionLanguageParsingException(\"Found characters outside of Expression\");\n+            }\n+        } else {\n+            for (final Range range : extractExpressionRanges(value)) {\n+                final String expression = value.substring(range.getStart(), range.getEnd() + 1);\n+                Query.compile(expression);\n+            }\n+        }\n+    }\n+\n+    static int findEndQuoteChar(final String value, final int quoteStart) {\n+        final char quoteChar = value.charAt(quoteStart);\n+\n+        int backslashCount = 0;\n+        char lastChar = 0;\n+        for (int i = quoteStart + 1; i < value.length(); i++) {\n+            final char c = value.charAt(i);\n+\n+            if (c == '\\\\') {\n+                backslashCount++;\n+            } else if (c == quoteChar && ((backslashCount % 2 == 0) || lastChar != '\\\\')) {\n+                return i;\n+            }\n+\n+            lastChar = c;\n+        }\n+\n+        return -1;\n+    }\n+\n+    static String evaluateExpression(final Tree tree, final String queryText, final Map<String, String> expressionMap, final AttributeValueDecorator decorator) throws ProcessException {\n+        final Object evaluated = Query.fromTree(tree, queryText).evaluate(expressionMap).getValue();\n+        if (evaluated == null) {\n+            return null;\n+        }\n+\n+        final String value = evaluated.toString();\n+        final String escaped = value.replace(\"$$\", \"$\");\n+        return (decorator == null) ? escaped : decorator.decorate(escaped);\n+    }\n+\n+    static String evaluateExpressions(final String rawValue, Map<String, String> expressionMap) throws ProcessException {\n+        return evaluateExpressions(rawValue, expressionMap, null);\n+    }\n+\n+    static String evaluateExpressions(final String rawValue) throws ProcessException {\n+        return evaluateExpressions(rawValue, createExpressionMap(null), null);\n+    }\n+\n+    static String evaluateExpressions(final String rawValue, final FlowFile flowFile) throws ProcessException {\n+        return evaluateExpressions(rawValue, createExpressionMap(flowFile), null);\n+    }\n+\n+    static String evaluateExpressions(final String rawValue, Map<String, String> expressionMap, final AttributeValueDecorator decorator) throws ProcessException {\n+        return Query.prepare(rawValue).evaluateExpressions(expressionMap, decorator);\n+    }\n+\n+    public static String evaluateExpressions(final String rawValue, final FlowFile flowFile, final AttributeValueDecorator decorator) throws ProcessException {\n+        if (rawValue == null) {\n+            return null;\n+        }\n+\n+        final Map<String, String> expressionMap = createExpressionMap(flowFile);\n+        return evaluateExpressions(rawValue, expressionMap, decorator);\n+    }\n+\n+    private static Evaluator<?> getRootSubjectEvaluator(final Evaluator<?> evaluator) {\n+        if (evaluator == null) {\n+            return null;\n+        }\n+\n+        final Evaluator<?> subject = evaluator.getSubjectEvaluator();\n+        if (subject == null) {\n+            return evaluator;\n+        }\n+\n+        return getRootSubjectEvaluator(subject);\n+    }\n+\n+    /**\n+     * Un-escapes ${...} patterns that were escaped\n+     *\n+     * @param value\n+     * @return\n+     */\n+    public static String unescape(final String value) {\n+        return value.replaceAll(\"\\\\$\\\\$(?=\\\\$*\\\\{.*?\\\\})\", \"\\\\$\");\n+    }\n+\n+    static Map<String, String> createExpressionMap(final FlowFile flowFile) {\n+        final Map<String, String> attributeMap = flowFile == null ? new HashMap<String, String>() : flowFile.getAttributes();\n+        final Map<String, String> envMap = System.getenv();\n+        final Map<?, ?> sysProps = System.getProperties();\n+\n+        final Map<String, String> flowFileProps = new HashMap<>();\n+        if (flowFile != null) {\n+            flowFileProps.put(\"flowFileId\", String.valueOf(flowFile.getId()));\n+            flowFileProps.put(\"fileSize\", String.valueOf(flowFile.getSize()));\n+            flowFileProps.put(\"entryDate\", String.valueOf(flowFile.getEntryDate()));\n+            flowFileProps.put(\"lineageStartDate\", String.valueOf(flowFile.getLineageStartDate()));\n+        }\n+\n+        return wrap(attributeMap, flowFileProps, envMap, sysProps);\n+    }\n+\n+    private static Map<String, String> wrap(final Map<String, String> attributes, final Map<String, String> flowFileProps,\n+            final Map<String, String> env, final Map<?, ?> sysProps) {\n+        @SuppressWarnings(\"rawtypes\")\n+        final Map[] maps = new Map[]{attributes, flowFileProps, env, sysProps};\n+\n+        return new Map<String, String>() {\n+            @Override\n+            public int size() {\n+                int size = 0;\n+                for (final Map<?, ?> map : maps) {\n+                    size += map.size();\n+                }\n+                return size;\n+            }\n+\n+            @Override\n+            public boolean isEmpty() {\n+                for (final Map<?, ?> map : maps) {\n+                    if (!map.isEmpty()) {\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            }\n+\n+            @Override\n+            public boolean containsKey(final Object key) {\n+                if (key == null) {\n+                    return false;\n+                }\n+                if (!(key instanceof String)) {\n+                    return false;\n+                }\n+\n+                for (final Map<?, ?> map : maps) {\n+                    if (map.containsKey(key)) {\n+                        return true;\n+                    }\n+                }\n+                return false;\n+            }\n+\n+            @Override\n+            public boolean containsValue(final Object value) {\n+                for (final Map<?, ?> map : maps) {\n+                    if (map.containsValue(value)) {\n+                        return true;\n+                    }\n+                }\n+                return false;\n+            }\n+\n+            @Override\n+            @SuppressWarnings(\"rawtypes\")\n+            public String get(final Object key) {\n+                if (key == null) {\n+                    throw new IllegalArgumentException(\"Null Keys are not allowed\");\n+                }\n+                if (!(key instanceof String)) {\n+                    return null;\n+                }\n+\n+                for (final Map map : maps) {\n+                    final Object val = map.get(key);\n+                    if (val != null) {\n+                        return String.valueOf(val);\n+                    }\n+                }\n+                return null;\n+            }\n+\n+            @Override\n+            public String put(String key, String value) {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            @Override\n+            public String remove(final Object key) {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            @Override\n+            public void putAll(final Map<? extends String, ? extends String> m) {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            @Override\n+            public void clear() {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            @Override\n+            @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+            public Set<String> keySet() {\n+                final Set<String> keySet = new HashSet<>();\n+                for (final Map map : maps) {\n+                    keySet.addAll(map.keySet());\n+                }\n+                return keySet;\n+            }\n+\n+            @Override\n+            @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+            public Collection<String> values() {\n+                final Set<String> values = new HashSet<>();\n+                for (final Map map : maps) {\n+                    values.addAll(map.values());\n+                }\n+                return values;\n+            }\n+\n+            @Override\n+            @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+            public Set<java.util.Map.Entry<String, String>> entrySet() {\n+                final Set<java.util.Map.Entry<String, String>> entrySet = new HashSet<>();\n+                for (final Map map : maps) {\n+                    entrySet.addAll(map.entrySet());\n+                }\n+                return entrySet;\n+            }\n+\n+        };\n+    }\n+\n+    public static Query fromTree(final Tree tree, final String text) {\n+        return new Query(text, tree, buildEvaluator(tree));\n+    }\n+\n+    public static Tree compileTree(final String query) throws AttributeExpressionLanguageParsingException {\n+        try {\n+            final CommonTokenStream lexerTokenStream = createTokenStream(query);\n+            final AttributeExpressionParser parser = new AttributeExpressionParser(lexerTokenStream);\n+            final Tree ast = (Tree) parser.query().getTree();\n+            final Tree tree = ast.getChild(0);\n+\n+            // ensure that we are able to build the evaluators, so that we validate syntax\n+            buildEvaluator(tree);\n+            return tree;\n+        } catch (final AttributeExpressionLanguageParsingException e) {\n+            throw e;\n+        } catch (final Exception e) {\n+            throw new AttributeExpressionLanguageParsingException(e);\n+        }\n+    }\n+\n+    public static PreparedQuery prepare(final String query) throws AttributeExpressionLanguageParsingException {\n+        if (query == null) {\n+            return new EmptyPreparedQuery(null);\n+        }\n+\n+        final List<Range> ranges = extractExpressionRanges(query);\n+\n+        if (ranges.isEmpty()) {\n+            return new EmptyPreparedQuery(query.replace(\"$$\", \"$\"));\n+        }\n+\n+        final List<String> substrings = new ArrayList<>();\n+        final Map<String, Tree> trees = new HashMap<>();\n+\n+        int lastIndex = 0;\n+        for (final Range range : ranges) {\n+            if (range.getStart() > lastIndex) {\n+                substrings.add(query.substring(lastIndex, range.getStart()).replace(\"$$\", \"$\"));\n+                lastIndex = range.getEnd() + 1;\n+            }\n+\n+            final String treeText = query.substring(range.getStart(), range.getEnd() + 1).replace(\"$$\", \"$\");\n+            substrings.add(treeText);\n+            trees.put(treeText, Query.compileTree(treeText));\n+            lastIndex = range.getEnd() + 1;\n+        }\n+\n+        final Range lastRange = ranges.get(ranges.size() - 1);\n+        if (lastRange.getEnd() + 1 < query.length()) {\n+            final String treeText = query.substring(lastRange.getEnd() + 1).replace(\"$$\", \"$\");\n+            substrings.add(treeText);\n+        }\n+\n+        return new StandardPreparedQuery(substrings, trees);\n+    }\n+\n+    public static Query compile(final String query) throws AttributeExpressionLanguageParsingException {\n+        try {\n+            final CommonTokenStream lexerTokenStream = createTokenStream(query);\n+            final AttributeExpressionParser parser = new AttributeExpressionParser(lexerTokenStream);\n+            final Tree ast = (Tree) parser.query().getTree();\n+            final Tree tree = ast.getChild(0);\n+\n+            return new Query(query, tree, buildEvaluator(tree));\n+        } catch (final AttributeExpressionLanguageParsingException e) {\n+            throw e;\n+        } catch (final Exception e) {\n+            throw new AttributeExpressionLanguageParsingException(e);\n+        }\n+    }\n+\n+    private static CommonTokenStream createTokenStream(final String expression) throws AttributeExpressionLanguageParsingException {\n+        final CharStream input = new ANTLRStringStream(expression);\n+        final AttributeExpressionLexer lexer = new AttributeExpressionLexer(input);\n+        return new CommonTokenStream(lexer);\n+    }\n+\n+    public ResultType getResultType() {\n+        return evaluator.getResultType();\n+    }\n+\n+    QueryResult<?> evaluate() {\n+        return evaluate(createExpressionMap(null));\n+    }\n+\n+    QueryResult<?> evaluate(final FlowFile flowFile) {\n+        return evaluate(createExpressionMap(flowFile));\n+    }\n+\n+    QueryResult<?> evaluate(final Map<String, String> attributes) {\n+        if (evaluated.getAndSet(true)) {\n+            throw new IllegalStateException(\"A Query cannot be evaluated more than once\");\n+        }\n+\n+        Evaluator<?> chosenEvaluator = evaluator;\n+        final Evaluator<?> rootEvaluator = getRootSubjectEvaluator(evaluator);\n+        if (rootEvaluator != null) {\n+            if (rootEvaluator instanceof MultiAttributeEvaluator) {\n+                if (evaluator.getResultType() != ResultType.BOOLEAN) {\n+                    throw new AttributeExpressionLanguageParsingException(\"Found Multi-Attribute function but return type is \" + evaluator.getResultType() + \", not \" + ResultType.BOOLEAN + \", for query: \" + query);\n+                }\n+\n+                final MultiAttributeEvaluator multiAttrEval = (MultiAttributeEvaluator) rootEvaluator;\n+\n+                switch (multiAttrEval.getEvaluationType()) {\n+                    case ANY_ATTRIBUTE:\n+                    case ANY_MATCHING_ATTRIBUTE:\n+                    case ANY_DELINEATED_VALUE:\n+                        chosenEvaluator = new AnyAttributeEvaluator((BooleanEvaluator) evaluator, multiAttrEval);\n+                        break;\n+                    case ALL_ATTRIBUTES:\n+                    case ALL_MATCHING_ATTRIBUTES:\n+                    case ALL_DELINEATED_VALUES:\n+                        chosenEvaluator = new AllAttributesEvaluator((BooleanEvaluator) evaluator, multiAttrEval);\n+                        break;\n+                }\n+            }\n+        }\n+\n+        return chosenEvaluator.evaluate(attributes);\n+    }\n+\n+    Tree getTree() {\n+        return this.tree;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Query [\" + query + \"]\";\n+    }\n+\n+    private static StringEvaluator newStringLiteralEvaluator(final String literalValue) {\n+        if (literalValue == null || literalValue.length() < 2) {\n+            return new StringLiteralEvaluator(literalValue);\n+        }\n+\n+        final List<Range> ranges = extractExpressionRanges(literalValue);\n+        if (ranges.isEmpty()) {\n+            return new StringLiteralEvaluator(literalValue);\n+        }\n+\n+        final List<Evaluator<?>> evaluators = new ArrayList<>();\n+\n+        int lastIndex = 0;\n+        for (final Range range : ranges) {\n+            if (range.getStart() > lastIndex) {\n+                evaluators.add(newStringLiteralEvaluator(literalValue.substring(lastIndex, range.getStart())));\n+            }\n+\n+            final String treeText = literalValue.substring(range.getStart(), range.getEnd() + 1);\n+            evaluators.add(buildEvaluator(compileTree(treeText)));\n+            lastIndex = range.getEnd() + 1;\n+        }\n+\n+        final Range lastRange = ranges.get(ranges.size() - 1);\n+        if (lastRange.getEnd() + 1 < literalValue.length()) {\n+            final String treeText = literalValue.substring(lastRange.getEnd() + 1);\n+            evaluators.add(newStringLiteralEvaluator(treeText));\n+        }\n+\n+        if (evaluators.size() == 1) {\n+            return toStringEvaluator(evaluators.get(0));\n+        }\n+\n+        StringEvaluator lastEvaluator = toStringEvaluator(evaluators.get(0));\n+        for (int i = 1; i < evaluators.size(); i++) {\n+            lastEvaluator = new AppendEvaluator(lastEvaluator, toStringEvaluator(evaluators.get(i)));\n+        }\n+\n+        return lastEvaluator;\n+    }\n+\n+    private static Evaluator<?> buildEvaluator(final Tree tree) {\n+        switch (tree.getType()) {\n+            case EXPRESSION: {\n+                return buildExpressionEvaluator(tree);\n+            }\n+            case ATTRIBUTE_REFERENCE: {\n+                final Evaluator<?> childEvaluator = buildEvaluator(tree.getChild(0));\n+                if (childEvaluator instanceof MultiAttributeEvaluator) {\n+                    return childEvaluator;\n+                }\n+                return new AttributeEvaluator(toStringEvaluator(childEvaluator));\n+            }\n+            case MULTI_ATTRIBUTE_REFERENCE: {\n+\n+                final Tree functionTypeTree = tree.getChild(0);\n+                final int multiAttrType = functionTypeTree.getType();\n+                if (multiAttrType == ANY_DELINEATED_VALUE || multiAttrType == ALL_DELINEATED_VALUES) {\n+                    final StringEvaluator delineatedValueEvaluator = toStringEvaluator(buildEvaluator(tree.getChild(1)));\n+                    final StringEvaluator delimiterEvaluator = toStringEvaluator(buildEvaluator(tree.getChild(2)));\n+\n+                    return new DelineatedAttributeEvaluator(delineatedValueEvaluator, delimiterEvaluator, multiAttrType);\n+                }\n+\n+                final List<String> attributeNames = new ArrayList<>();\n+                for (int i = 1; i < tree.getChildCount(); i++) {  // skip the first child because that's the name of the multi-attribute function\n+                    attributeNames.add(newStringLiteralEvaluator(tree.getChild(i).getText()).evaluate(null).getValue());\n+                }\n+\n+                switch (multiAttrType) {\n+                    case ALL_ATTRIBUTES:\n+                        for (final String attributeName : attributeNames) {\n+                            try {\n+                                FlowFile.KeyValidator.validateKey(attributeName);\n+                            } catch (final IllegalArgumentException iae) {\n+                                throw new AttributeExpressionLanguageParsingException(\"Invalid Attribute Name: \" + attributeName + \". \" + iae.getMessage());\n+                            }\n+                        }\n+\n+                        return new MultiNamedAttributeEvaluator(attributeNames, ALL_ATTRIBUTES);\n+                    case ALL_MATCHING_ATTRIBUTES:\n+                        return new MultiMatchAttributeEvaluator(attributeNames, ALL_MATCHING_ATTRIBUTES);\n+                    case ANY_ATTRIBUTE:\n+                        for (final String attributeName : attributeNames) {\n+                            try {\n+                                FlowFile.KeyValidator.validateKey(attributeName);\n+                            } catch (final IllegalArgumentException iae) {\n+                                throw new AttributeExpressionLanguageParsingException(\"Invalid Attribute Name: \" + attributeName + \". \" + iae.getMessage());\n+                            }\n+                        }\n+\n+                        return new MultiNamedAttributeEvaluator(attributeNames, ANY_ATTRIBUTE);\n+                    case ANY_MATCHING_ATTRIBUTE:\n+                        return new MultiMatchAttributeEvaluator(attributeNames, ANY_MATCHING_ATTRIBUTE);\n+                    default:\n+                        throw new AssertionError(\"Illegal Multi-Attribute Reference: \" + functionTypeTree.toString());\n+                }\n+            }\n+            case ATTR_NAME: {\n+                return newStringLiteralEvaluator(tree.getChild(0).getText());\n+            }\n+            case NUMBER: {\n+                return new NumberLiteralEvaluator(tree.getText());\n+            }\n+            case STRING_LITERAL: {\n+                return newStringLiteralEvaluator(tree.getText());\n+            }\n+            case TRUE:\n+            case FALSE:\n+                return buildBooleanEvaluator(tree);\n+            case UUID: {\n+                return new UuidEvaluator();\n+            }\n+            case NOW: {\n+                return new NowEvaluator();\n+            }\n+            case IP: {\n+                try {\n+                    return new IPEvaluator();\n+                } catch (final UnknownHostException e) {\n+                    throw new AttributeExpressionLanguageException(e);\n+                }\n+            }\n+            case HOSTNAME: {\n+                if (tree.getChildCount() == 0) {\n+                    try {\n+                        return new HostnameEvaluator(false);\n+                    } catch (UnknownHostException e) {\n+                        throw new AttributeExpressionLanguageException(e);\n+                    }\n+                } else if (tree.getChildCount() == 1) {\n+                    final Tree childTree = tree.getChild(0);\n+                    try {\n+                        switch (childTree.getType()) {\n+                            case TRUE:\n+                                return new HostnameEvaluator(true);\n+                            case FALSE:\n+                                return new HostnameEvaluator(false);\n+                            default:\n+                                throw new AttributeExpressionLanguageParsingException(\"Call to hostname() must take 0 or 1 (boolean) parameter\");\n+                        }\n+                    } catch (UnknownHostException e) {\n+                        throw new AttributeExpressionLanguageException(e);\n+                    }\n+                } else {\n+                    throw new AttributeExpressionLanguageParsingException(\"Call to hostname() must take 0 or 1 (boolean) parameter\");\n+                }\n+            }\n+            case NEXT_INT: {\n+                return new OneUpSequenceEvaluator();\n+            }\n+            default:\n+                throw new AttributeExpressionLanguageParsingException(\"Unexpected token: \" + tree.toString());\n+        }\n+    }\n+\n+    private static Evaluator<Boolean> buildBooleanEvaluator(final Tree tree) {\n+        switch (tree.getType()) {\n+            case TRUE:\n+                return new BooleanLiteralEvaluator(true);\n+            case FALSE:\n+                return new BooleanLiteralEvaluator(false);\n+        }\n+        throw new AttributeExpressionLanguageParsingException(\"Cannot build Boolean evaluator from tree \" + tree.toString());\n+    }\n+\n+    private static Evaluator<?> buildExpressionEvaluator(final Tree tree) {\n+        if (tree.getChildCount() == 0) {\n+            throw new AttributeExpressionLanguageParsingException(\"EXPRESSION tree node has no children\");\n+        }\n+        if (tree.getChildCount() == 1) {\n+            return buildEvaluator(tree.getChild(0));\n+        } else {\n+            // we can chain together functions in the form of:\n+            // ${x:trim():substring(1,2):trim()}\n+            // in this case, the subject of the right-most function is the function to its left; its\n+            // subject is the function to its left (the first trim()), and its subject is the value of\n+            // the 'x' attribute. We accomplish this logic by iterating over all of the children of the\n+            // tree from the right-most child going left-ward.\n+            return buildFunctionExpressionEvaluator(tree, 0);\n+        }\n+    }\n+\n+    private static Evaluator<?> buildFunctionExpressionEvaluator(final Tree tree, final int offset) {\n+        if (tree.getChildCount() == 0) {\n+            throw new AttributeExpressionLanguageParsingException(\"EXPRESSION tree node has no children\");\n+        }\n+        final int firstChildIndex = tree.getChildCount() - offset - 1;\n+        if (firstChildIndex == 0) {\n+            return buildEvaluator(tree.getChild(0));\n+        }\n+\n+        final Tree functionTree = tree.getChild(firstChildIndex);\n+        final Evaluator<?> subjectEvaluator = buildFunctionExpressionEvaluator(tree, offset + 1);\n+\n+        final Tree functionNameTree = functionTree.getChild(0);\n+        final List<Evaluator<?>> argEvaluators = new ArrayList<>();\n+        for (int i = 1; i < functionTree.getChildCount(); i++) {\n+            argEvaluators.add(buildEvaluator(functionTree.getChild(i)));\n+        }\n+        return buildFunctionEvaluator(functionNameTree, subjectEvaluator, argEvaluators);\n+    }\n+\n+    private static List<Evaluator<?>> verifyArgCount(final List<Evaluator<?>> args, final int count, final String functionName) {\n+        if (args.size() != count) {\n+            throw new AttributeExpressionLanguageParsingException(functionName + \"() function takes \" + count + \" arguments\");\n+        }\n+        return args;\n+    }\n+\n+    private static StringEvaluator toStringEvaluator(final Evaluator<?> evaluator) {\n+        return toStringEvaluator(evaluator, null);\n+    }\n+\n+    private static StringEvaluator toStringEvaluator(final Evaluator<?> evaluator, final String location) {\n+        if (evaluator.getResultType() == ResultType.STRING) {\n+            return (StringEvaluator) evaluator;\n+        }\n+\n+        return new StringCastEvaluator(evaluator);\n+    }\n+\n+    private static BooleanEvaluator toBooleanEvaluator(final Evaluator<?> evaluator, final String location) {\n+        switch (evaluator.getResultType()) {\n+            case BOOLEAN:\n+                return (BooleanEvaluator) evaluator;\n+            case STRING:\n+                return new BooleanCastEvaluator((StringEvaluator) evaluator);\n+            default:\n+                throw new AttributeExpressionLanguageParsingException(\"Cannot implicitly convert Data Type \" + evaluator.getResultType() + \" to \" + ResultType.BOOLEAN\n+                        + (location == null ? \"\" : \" at location [\" + location + \"]\"));\n+        }\n+\n+    }\n+\n+    private static BooleanEvaluator toBooleanEvaluator(final Evaluator<?> evaluator) {\n+        return toBooleanEvaluator(evaluator, null);\n+    }\n+\n+    private static NumberEvaluator toNumberEvaluator(final Evaluator<?> evaluator) {\n+        return toNumberEvaluator(evaluator, null);\n+    }\n+\n+    private static NumberEvaluator toNumberEvaluator(final Evaluator<?> evaluator, final String location) {\n+        switch (evaluator.getResultType()) {\n+            case NUMBER:\n+                return (NumberEvaluator) evaluator;\n+            case STRING:\n+                return new NumberCastEvaluator((StringEvaluator) evaluator);\n+            default:\n+                throw new AttributeExpressionLanguageParsingException(\"Cannot implicitly convert Data Type \" + evaluator.getResultType() + \" to \" + ResultType.NUMBER\n+                        + (location == null ? \"\" : \" at location [\" + location + \"]\"));\n+        }\n+    }\n+\n+    private static DateEvaluator toDateEvaluator(final Evaluator<?> evaluator) {\n+        return toDateEvaluator(evaluator, null);\n+    }\n+\n+    private static DateEvaluator toDateEvaluator(final Evaluator<?> evaluator, final String location) {\n+        if (evaluator.getResultType() == ResultType.DATE) {\n+            return (DateEvaluator) evaluator;\n+        }\n+\n+        return new DateCastEvaluator(evaluator);\n+    }\n+\n+    private static Evaluator<?> buildFunctionEvaluator(final Tree tree, final Evaluator<?> subjectEvaluator, final List<Evaluator<?>> argEvaluators) {\n+        switch (tree.getType()) {\n+            case TRIM: {\n+                verifyArgCount(argEvaluators, 0, \"trim\");\n+                return new TrimEvaluator(toStringEvaluator(subjectEvaluator));\n+            }\n+            case TO_STRING: {\n+                verifyArgCount(argEvaluators, 0, \"toString\");\n+                return new ToStringEvaluator(subjectEvaluator);\n+            }\n+            case TO_LOWER: {\n+                verifyArgCount(argEvaluators, 0, \"toLower\");\n+                return new ToLowerEvaluator(toStringEvaluator(subjectEvaluator));\n+            }\n+            case TO_UPPER: {\n+                verifyArgCount(argEvaluators, 0, \"toUpper\");\n+                return new ToUpperEvaluator(toStringEvaluator(subjectEvaluator));\n+            }\n+            case URL_ENCODE: {\n+                verifyArgCount(argEvaluators, 0, \"urlEncode\");\n+                return new UrlEncodeEvaluator(toStringEvaluator(subjectEvaluator));\n+            }\n+            case URL_DECODE: {\n+                verifyArgCount(argEvaluators, 0, \"urlDecode\");\n+                return new UrlDecodeEvaluator(toStringEvaluator(subjectEvaluator));\n+            }\n+            case SUBSTRING_BEFORE: {\n+                verifyArgCount(argEvaluators, 1, \"substringBefore\");\n+                return new SubstringBeforeEvaluator(toStringEvaluator(subjectEvaluator),\n+                        toStringEvaluator(argEvaluators.get(0), \"first argument to substringBefore\"));\n+            }\n+            case SUBSTRING_BEFORE_LAST: {\n+                verifyArgCount(argEvaluators, 1, \"substringBeforeLast\");\n+                return new SubstringBeforeLastEvaluator(toStringEvaluator(subjectEvaluator),\n+                        toStringEvaluator(argEvaluators.get(0), \"first argument to substringBeforeLast\"));\n+            }\n+            case SUBSTRING_AFTER: {\n+                verifyArgCount(argEvaluators, 1, \"substringAfter\");\n+                return new SubstringAfterEvaluator(toStringEvaluator(subjectEvaluator),\n+                        toStringEvaluator(argEvaluators.get(0), \"first argument to substringAfter\"));\n+            }\n+            case SUBSTRING_AFTER_LAST: {\n+                verifyArgCount(argEvaluators, 1, \"substringAfterLast\");\n+                return new SubstringAfterLastEvaluator(toStringEvaluator(subjectEvaluator),\n+                        toStringEvaluator(argEvaluators.get(0), \"first argument to substringAfterLast\"));\n+            }\n+            case REPLACE_NULL: {\n+                verifyArgCount(argEvaluators, 1, \"replaceNull\");\n+                return new ReplaceNullEvaluator(toStringEvaluator(subjectEvaluator),\n+                        toStringEvaluator(argEvaluators.get(0), \"first argument to replaceNull\"));\n+            }\n+            case REPLACE: {\n+                verifyArgCount(argEvaluators, 2, \"replace\");\n+                return new ReplaceEvaluator(toStringEvaluator(subjectEvaluator),\n+                        toStringEvaluator(argEvaluators.get(0), \"first argument to replace\"),\n+                        toStringEvaluator(argEvaluators.get(1), \"second argument to replace\"));\n+            }\n+            case REPLACE_ALL: {\n+                verifyArgCount(argEvaluators, 2, \"replaceAll\");\n+                return new ReplaceAllEvaluator(toStringEvaluator(subjectEvaluator),\n+                        toStringEvaluator(argEvaluators.get(0), \"first argument to replaceAll\"),\n+                        toStringEvaluator(argEvaluators.get(1), \"second argument to replaceAll\"));\n+            }\n+            case APPEND: {\n+                verifyArgCount(argEvaluators, 1, \"append\");\n+                return new AppendEvaluator(toStringEvaluator(subjectEvaluator),\n+                        toStringEvaluator(argEvaluators.get(0), \"first argument to append\"));\n+            }\n+            case PREPEND: {\n+                verifyArgCount(argEvaluators, 1, \"prepend\");\n+                return new PrependEvaluator(toStringEvaluator(subjectEvaluator),\n+                        toStringEvaluator(argEvaluators.get(0), \"first argument to prepend\"));\n+            }\n+            case SUBSTRING: {\n+                final int numArgs = argEvaluators.size();\n+                if (numArgs == 1) {\n+                    return new SubstringEvaluator(toStringEvaluator(subjectEvaluator),\n+                            toNumberEvaluator(argEvaluators.get(0), \"first argument to substring\"));\n+                } else if (numArgs == 2) {\n+                    return new SubstringEvaluator(toStringEvaluator(subjectEvaluator),\n+                            toNumberEvaluator(argEvaluators.get(0), \"first argument to substring\"),\n+                            toNumberEvaluator(argEvaluators.get(1), \"second argument to substring\"));\n+                } else {\n+                    throw new AttributeExpressionLanguageParsingException(\"substring() function can take either 1 or 2 arguments but cannot take \" + numArgs + \" arguments\");\n+                }\n+            }\n+            case IS_NULL: {\n+                verifyArgCount(argEvaluators, 0, \"isNull\");\n+                return new IsNullEvaluator(toStringEvaluator(subjectEvaluator));\n+            }\n+            case NOT_NULL: {\n+                verifyArgCount(argEvaluators, 0, \"notNull\");\n+                return new NotNullEvaluator(toStringEvaluator(subjectEvaluator));\n+            }\n+            case STARTS_WITH: {\n+                verifyArgCount(argEvaluators, 1, \"startsWith\");\n+                return new StartsWithEvaluator(toStringEvaluator(subjectEvaluator),\n+                        toStringEvaluator(argEvaluators.get(0), \"first argument to startsWith\"));\n+            }\n+            case ENDS_WITH: {\n+                verifyArgCount(argEvaluators, 1, \"endsWith\");\n+                return new EndsWithEvaluator(toStringEvaluator(subjectEvaluator),\n+                        toStringEvaluator(argEvaluators.get(0), \"first argument to endsWith\"));\n+            }\n+            case CONTAINS: {\n+                verifyArgCount(argEvaluators, 1, \"contains\");\n+                return new ContainsEvaluator(toStringEvaluator(subjectEvaluator),\n+                        toStringEvaluator(argEvaluators.get(0), \"first argument to contains\"));\n+            }\n+            case FIND: {\n+                verifyArgCount(argEvaluators, 1, \"find\");\n+                return new FindEvaluator(toStringEvaluator(subjectEvaluator),\n+                        toStringEvaluator(argEvaluators.get(0), \"first argument to find\"));\n+            }\n+            case MATCHES: {\n+                verifyArgCount(argEvaluators, 1, \"matches\");\n+                return new MatchesEvaluator(toStringEvaluator(subjectEvaluator),\n+                        toStringEvaluator(argEvaluators.get(0), \"first argument to matches\"));\n+            }\n+            case EQUALS: {\n+                verifyArgCount(argEvaluators, 1, \"equals\");\n+                return new EqualsEvaluator(subjectEvaluator, argEvaluators.get(0));\n+            }\n+            case EQUALS_IGNORE_CASE: {\n+                verifyArgCount(argEvaluators, 1, \"equalsIgnoreCase\");\n+                return new EqualsIgnoreCaseEvaluator(toStringEvaluator(subjectEvaluator),\n+                        toStringEvaluator(argEvaluators.get(0), \"first argument to equalsIgnoreCase\"));\n+            }\n+            case GREATER_THAN: {\n+                verifyArgCount(argEvaluators, 1, \"gt\");\n+                return new GreaterThanEvaluator(toNumberEvaluator(subjectEvaluator),\n+                        toNumberEvaluator(argEvaluators.get(0), \"first argument to gt\"));\n+            }\n+            case GREATER_THAN_OR_EQUAL: {\n+                verifyArgCount(argEvaluators, 1, \"ge\");\n+                return new GreaterThanOrEqualEvaluator(toNumberEvaluator(subjectEvaluator),\n+                        toNumberEvaluator(argEvaluators.get(0), \"first argument to ge\"));\n+            }\n+            case LESS_THAN: {\n+                verifyArgCount(argEvaluators, 1, \"lt\");\n+                return new LessThanEvaluator(toNumberEvaluator(subjectEvaluator),\n+                        toNumberEvaluator(argEvaluators.get(0), \"first argument to lt\"));\n+            }\n+            case LESS_THAN_OR_EQUAL: {\n+                verifyArgCount(argEvaluators, 1, \"le\");\n+                return new LessThanOrEqualEvaluator(toNumberEvaluator(subjectEvaluator),\n+                        toNumberEvaluator(argEvaluators.get(0), \"first argument to le\"));\n+            }\n+            case LENGTH: {\n+                verifyArgCount(argEvaluators, 0, \"length\");\n+                return new LengthEvaluator(toStringEvaluator(subjectEvaluator));\n+            }\n+            case TO_DATE: {\n+                if (argEvaluators.isEmpty()) {\n+                    return new NumberToDateEvaluator(toNumberEvaluator(subjectEvaluator));\n+                } else if (subjectEvaluator.getResultType() == ResultType.STRING) {\n+                    return new StringToDateEvaluator(toStringEvaluator(subjectEvaluator), toStringEvaluator(argEvaluators.get(0)));\n+                } else {\n+                    return new NumberToDateEvaluator(toNumberEvaluator(subjectEvaluator));\n+                }\n+            }\n+            case TO_NUMBER: {\n+                verifyArgCount(argEvaluators, 0, \"toNumber\");\n+                switch (subjectEvaluator.getResultType()) {\n+                    case STRING:\n+                        return new ToNumberEvaluator((StringEvaluator) subjectEvaluator);\n+                    case DATE:\n+                        return new DateToNumberEvaluator((DateEvaluator) subjectEvaluator);\n+                    default:\n+                        throw new AttributeExpressionLanguageParsingException(subjectEvaluator + \" returns type \" + subjectEvaluator.getResultType() + \" but expected to get \" + ResultType.STRING);\n+                }\n+            }\n+            case TO_RADIX: {\n+                if (argEvaluators.size() == 1) {\n+                    return new ToRadixEvaluator((NumberEvaluator) subjectEvaluator, toNumberEvaluator(argEvaluators.get(0)));\n+                } else {\n+                    return new ToRadixEvaluator((NumberEvaluator) subjectEvaluator, toNumberEvaluator(argEvaluators.get(0)), toNumberEvaluator(argEvaluators.get(1)));\n+                }\n+            }\n+            case MOD: {\n+                return new ModEvaluator(toNumberEvaluator(subjectEvaluator), toNumberEvaluator(argEvaluators.get(0)));\n+            }\n+            case PLUS: {\n+                return new PlusEvaluator(toNumberEvaluator(subjectEvaluator), toNumberEvaluator(argEvaluators.get(0)));\n+            }\n+            case MINUS: {\n+                return new MinusEvaluator(toNumberEvaluator(subjectEvaluator), toNumberEvaluator(argEvaluators.get(0)));\n+            }\n+            case MULTIPLY: {\n+                return new MultiplyEvaluator(toNumberEvaluator(subjectEvaluator), toNumberEvaluator(argEvaluators.get(0)));\n+            }\n+            case DIVIDE: {\n+                return new DivideEvaluator(toNumberEvaluator(subjectEvaluator), toNumberEvaluator(argEvaluators.get(0)));\n+            }\n+            case INDEX_OF: {\n+                verifyArgCount(argEvaluators, 1, \"indexOf\");\n+                return new IndexOfEvaluator(toStringEvaluator(subjectEvaluator),\n+                        toStringEvaluator(argEvaluators.get(0), \"first argument to indexOf\"));\n+            }\n+            case LAST_INDEX_OF: {\n+                verifyArgCount(argEvaluators, 1, \"lastIndexOf\");\n+                return new LastIndexOfEvaluator(toStringEvaluator(subjectEvaluator),\n+                        toStringEvaluator(argEvaluators.get(0), \"first argument to lastIndexOf\"));\n+            }\n+            case FORMAT: {\n+                return new FormatEvaluator(toDateEvaluator(subjectEvaluator), toStringEvaluator(argEvaluators.get(0), \"first argument of format\"));\n+            }\n+            case OR: {\n+                return new OrEvaluator(toBooleanEvaluator(subjectEvaluator), toBooleanEvaluator(argEvaluators.get(0)));\n+            }\n+            case AND: {\n+                return new AndEvaluator(toBooleanEvaluator(subjectEvaluator), toBooleanEvaluator(argEvaluators.get(0)));\n+            }\n+            case NOT: {\n+                return new NotEvaluator(toBooleanEvaluator(subjectEvaluator));\n+            }\n+            default:\n+                throw new AttributeExpressionLanguageParsingException(\"Expected a Function-type expression but got \" + tree.toString());\n+        }\n+    }\n+\n+    public static class Range {\n+\n+        private final int start;\n+        private final int end;\n+\n+        public Range(final int start, final int end) {\n+            this.start = start;\n+            this.end = end;\n+        }\n+\n+        public int getStart() {\n+            return start;\n+        }\n+\n+        public int getEnd() {\n+            return end;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return start + \" - \" + end;\n+        }\n+    }\n+}"
        },
        {
            "sha": "49ef6efb512ca7392804bd7a5b031f41c5b17618",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/StandardAttributeExpression.java",
            "status": "added",
            "additions": 65,
            "deletions": 0,
            "changes": 65,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2FStandardAttributeExpression.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2FStandardAttributeExpression.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2FStandardAttributeExpression.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language;\n+\n+import org.apache.nifi.expression.AttributeExpression;\n+import org.apache.nifi.expression.AttributeValueDecorator;\n+import org.apache.nifi.flowfile.FlowFile;\n+import org.apache.nifi.processor.exception.ProcessException;\n+\n+public class StandardAttributeExpression implements AttributeExpression {\n+\n+    private final Query query;\n+\n+    public StandardAttributeExpression(final Query query) {\n+        this.query = query;\n+    }\n+\n+    @Override\n+    public ResultType getResultType() {\n+        return query.getResultType();\n+    }\n+\n+    @Override\n+    public String evaluate() throws ProcessException {\n+        return evaluate((AttributeValueDecorator) null);\n+    }\n+\n+    @Override\n+    public String evaluate(final AttributeValueDecorator decorator) throws ProcessException {\n+        return evaluate(null, decorator);\n+    }\n+\n+    @Override\n+    public String evaluate(final FlowFile flowFile) throws ProcessException {\n+        return evaluate(flowFile, null);\n+    }\n+\n+    @Override\n+    public String evaluate(final FlowFile flowFile, final AttributeValueDecorator decorator) throws ProcessException {\n+        final Object evaluationResult = query.evaluate(flowFile).getValue();\n+        if (evaluationResult == null) {\n+            return \"\";\n+        }\n+\n+        String result = evaluationResult.toString();\n+        if (decorator != null) {\n+            result = decorator.decorate(result);\n+        }\n+        return Query.unescape(result);\n+    }\n+}"
        },
        {
            "sha": "cec73d17484f0886bb679513ebbd1d9064d05346",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/StandardExpressionLanguageCompiler.java",
            "status": "added",
            "additions": 58,
            "deletions": 0,
            "changes": 58,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2FStandardExpressionLanguageCompiler.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2FStandardExpressionLanguageCompiler.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2FStandardExpressionLanguageCompiler.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language;\n+\n+import org.apache.nifi.attribute.expression.language.exception.AttributeExpressionLanguageParsingException;\n+import org.apache.nifi.expression.AttributeExpression;\n+import org.apache.nifi.expression.ExpressionLanguageCompiler;\n+import org.apache.nifi.expression.AttributeExpression.ResultType;\n+\n+public class StandardExpressionLanguageCompiler implements ExpressionLanguageCompiler {\n+\n+    @Override\n+    public AttributeExpression compile(final String expression) throws IllegalArgumentException {\n+        try {\n+            return new StandardAttributeExpression(Query.compile(expression));\n+        } catch (final AttributeExpressionLanguageParsingException e) {\n+            throw new IllegalArgumentException(e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public boolean isValidExpression(final String expression) {\n+        return Query.isValidExpression(expression);\n+    }\n+\n+    @Override\n+    public String validateExpression(final String expression, final boolean allowSurroundingCharacters) {\n+        try {\n+            Query.validateExpression(expression, allowSurroundingCharacters);\n+            return null;\n+        } catch (final AttributeExpressionLanguageParsingException aelpe) {\n+            return aelpe.getMessage();\n+        }\n+    }\n+\n+    @Override\n+    public ResultType getResultType(final String expression) throws IllegalArgumentException {\n+        try {\n+            return Query.getResultType(expression);\n+        } catch (final AttributeExpressionLanguageParsingException e) {\n+            throw new IllegalArgumentException(e);\n+        }\n+    }\n+}"
        },
        {
            "sha": "0affb7f5c58cfcd4c9316a2ae8e0ddedbc2e3645",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/StandardPreparedQuery.java",
            "status": "added",
            "additions": 83,
            "deletions": 0,
            "changes": 83,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2FStandardPreparedQuery.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2FStandardPreparedQuery.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2FStandardPreparedQuery.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.nifi.expression.AttributeValueDecorator;\n+import org.apache.nifi.flowfile.FlowFile;\n+import org.apache.nifi.processor.exception.ProcessException;\n+\n+import org.antlr.runtime.tree.Tree;\n+\n+public class StandardPreparedQuery implements PreparedQuery {\n+\n+    private final List<String> queryStrings;\n+    private final Map<String, Tree> trees;\n+\n+    public StandardPreparedQuery(final List<String> queryStrings, final Map<String, Tree> trees) {\n+        this.queryStrings = new ArrayList<>(queryStrings);\n+        this.trees = new HashMap<>(trees);\n+    }\n+\n+    @Override\n+    public String evaluateExpressions(Map<String, String> attributes) throws ProcessException {\n+        return evaluateExpressions(attributes, null);\n+    }\n+\n+    @Override\n+    public String evaluateExpressions(final Map<String, String> attributes, final AttributeValueDecorator decorator) throws ProcessException {\n+        final StringBuilder sb = new StringBuilder();\n+        for (final String val : queryStrings) {\n+            final Tree tree = trees.get(val);\n+            if (tree == null) {\n+                sb.append(val);\n+            } else {\n+                final String evaluated = Query.evaluateExpression(tree, val, attributes, decorator);\n+                if (evaluated != null) {\n+                    sb.append(evaluated);\n+                }\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    @Override\n+    public String evaluateExpressions(final FlowFile flowFile, final AttributeValueDecorator decorator) throws ProcessException {\n+        final Map<String, String> expressionMap = Query.createExpressionMap(flowFile);\n+        return evaluateExpressions(expressionMap, decorator);\n+    }\n+\n+    @Override\n+    public String evaluateExpressions() throws ProcessException {\n+        return evaluateExpressions((FlowFile) null, null);\n+    }\n+\n+    @Override\n+    public String evaluateExpressions(final AttributeValueDecorator decorator) throws ProcessException {\n+        return evaluateExpressions((FlowFile) null, decorator);\n+    }\n+\n+    @Override\n+    public String evaluateExpressions(final FlowFile flowFile) throws ProcessException {\n+        return evaluateExpressions(flowFile, null);\n+    }\n+\n+}"
        },
        {
            "sha": "376ddfe3d7f02f640fc624a49c66dafa719b098d",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/BooleanEvaluator.java",
            "status": "added",
            "additions": 32,
            "deletions": 0,
            "changes": 32,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FBooleanEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FBooleanEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FBooleanEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation;\n+\n+import org.apache.nifi.expression.AttributeExpression.ResultType;\n+\n+public abstract class BooleanEvaluator implements Evaluator<Boolean> {\n+\n+    @Override\n+    public ResultType getResultType() {\n+        return ResultType.BOOLEAN;\n+    }\n+\n+    @Override\n+    public int getEvaluationsRemaining() {\n+        return 0;\n+    }\n+}"
        },
        {
            "sha": "e5ef1139ed88d83a9973eb432913c9aead81a6a2",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/BooleanQueryResult.java",
            "status": "added",
            "additions": 43,
            "deletions": 0,
            "changes": 43,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FBooleanQueryResult.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FBooleanQueryResult.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FBooleanQueryResult.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation;\n+\n+import org.apache.nifi.expression.AttributeExpression.ResultType;\n+\n+public class BooleanQueryResult implements QueryResult<Boolean> {\n+\n+    private final Boolean value;\n+\n+    public BooleanQueryResult(final Boolean value) {\n+        this.value = value;\n+    }\n+\n+    @Override\n+    public Boolean getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public ResultType getResultType() {\n+        return ResultType.BOOLEAN;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.valueOf(getValue());\n+    }\n+}"
        },
        {
            "sha": "7474b6007716466f59f1ba65ac51fe1defa7f8e0",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/DateEvaluator.java",
            "status": "added",
            "additions": 34,
            "deletions": 0,
            "changes": 34,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FDateEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FDateEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FDateEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation;\n+\n+import java.util.Date;\n+\n+import org.apache.nifi.expression.AttributeExpression.ResultType;\n+\n+public abstract class DateEvaluator implements Evaluator<Date> {\n+\n+    @Override\n+    public ResultType getResultType() {\n+        return ResultType.DATE;\n+    }\n+\n+    @Override\n+    public int getEvaluationsRemaining() {\n+        return 0;\n+    }\n+}"
        },
        {
            "sha": "a77bbe9592b934047eb48bc81966fb3c730011a9",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/DateQueryResult.java",
            "status": "added",
            "additions": 45,
            "deletions": 0,
            "changes": 45,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FDateQueryResult.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FDateQueryResult.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FDateQueryResult.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation;\n+\n+import java.util.Date;\n+\n+import org.apache.nifi.expression.AttributeExpression.ResultType;\n+\n+public class DateQueryResult implements QueryResult<Date> {\n+\n+    private final Date date;\n+\n+    public DateQueryResult(final Date date) {\n+        this.date = date;\n+    }\n+\n+    @Override\n+    public Date getValue() {\n+        return date;\n+    }\n+\n+    @Override\n+    public ResultType getResultType() {\n+        return ResultType.DATE;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.valueOf(getValue());\n+    }\n+}"
        },
        {
            "sha": "6d164df25e779de82ace48fc98af12b738eaf9c7",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/Evaluator.java",
            "status": "added",
            "additions": 32,
            "deletions": 0,
            "changes": 32,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.expression.AttributeExpression.ResultType;\n+\n+public interface Evaluator<T> {\n+\n+    QueryResult<T> evaluate(Map<String, String> attributes);\n+\n+    ResultType getResultType();\n+\n+    int getEvaluationsRemaining();\n+\n+    Evaluator<?> getSubjectEvaluator();\n+}"
        },
        {
            "sha": "403bae358e178c9e68a81a3a5cf4a9bdeab60f57",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/NumberEvaluator.java",
            "status": "added",
            "additions": 33,
            "deletions": 0,
            "changes": 33,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FNumberEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FNumberEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FNumberEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation;\n+\n+import org.apache.nifi.expression.AttributeExpression.ResultType;\n+\n+public abstract class NumberEvaluator implements Evaluator<Long> {\n+\n+    @Override\n+    public ResultType getResultType() {\n+        return ResultType.NUMBER;\n+    }\n+\n+    @Override\n+    public int getEvaluationsRemaining() {\n+        return 0;\n+    }\n+\n+}"
        },
        {
            "sha": "fc3c961bc25a3310073db075adb3510590c95a0f",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/NumberQueryResult.java",
            "status": "added",
            "additions": 43,
            "deletions": 0,
            "changes": 43,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FNumberQueryResult.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FNumberQueryResult.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FNumberQueryResult.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation;\n+\n+import org.apache.nifi.expression.AttributeExpression.ResultType;\n+\n+public class NumberQueryResult implements QueryResult<Long> {\n+\n+    private final Long value;\n+\n+    public NumberQueryResult(final Long value) {\n+        this.value = value;\n+    }\n+\n+    @Override\n+    public Long getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public ResultType getResultType() {\n+        return ResultType.NUMBER;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.valueOf(getValue());\n+    }\n+}"
        },
        {
            "sha": "56bd76a25f7a0ca4de64a1de5b71b2e0cc594fdf",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/QueryResult.java",
            "status": "added",
            "additions": 26,
            "deletions": 0,
            "changes": 26,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FQueryResult.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FQueryResult.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FQueryResult.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation;\n+\n+import org.apache.nifi.expression.AttributeExpression.ResultType;\n+\n+public interface QueryResult<T> {\n+\n+    T getValue();\n+\n+    ResultType getResultType();\n+}"
        },
        {
            "sha": "1f4ff213934b61c54b498eeb7089422189e8f388",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/StringEvaluator.java",
            "status": "added",
            "additions": 32,
            "deletions": 0,
            "changes": 32,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FStringEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FStringEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FStringEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation;\n+\n+import org.apache.nifi.expression.AttributeExpression.ResultType;\n+\n+public abstract class StringEvaluator implements Evaluator<String> {\n+\n+    @Override\n+    public ResultType getResultType() {\n+        return ResultType.STRING;\n+    }\n+\n+    @Override\n+    public int getEvaluationsRemaining() {\n+        return 0;\n+    }\n+}"
        },
        {
            "sha": "c010bb168c89de778a8930ee14759f840df5ed81",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/StringQueryResult.java",
            "status": "added",
            "additions": 43,
            "deletions": 0,
            "changes": 43,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FStringQueryResult.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FStringQueryResult.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2FStringQueryResult.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation;\n+\n+import org.apache.nifi.expression.AttributeExpression.ResultType;\n+\n+public class StringQueryResult implements QueryResult<String> {\n+\n+    private final String value;\n+\n+    public StringQueryResult(final String value) {\n+        this.value = value;\n+    }\n+\n+    @Override\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public ResultType getResultType() {\n+        return ResultType.STRING;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.valueOf(getValue());\n+    }\n+}"
        },
        {
            "sha": "a88b72b40ef71348f766ea73dcfa506c12bae877",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/BooleanCastEvaluator.java",
            "status": "added",
            "additions": 50,
            "deletions": 0,
            "changes": 50,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fcast%2FBooleanCastEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fcast%2FBooleanCastEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fcast%2FBooleanCastEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.cast;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+\n+public class BooleanCastEvaluator extends BooleanEvaluator {\n+\n+    private final StringEvaluator subjectEvaluator;\n+\n+    public BooleanCastEvaluator(final StringEvaluator subjectEvaluator) {\n+        this.subjectEvaluator = subjectEvaluator;\n+    }\n+\n+    @Override\n+    public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {\n+        final QueryResult<String> result = subjectEvaluator.evaluate(attributes);\n+        if (result.getValue() == null) {\n+            return new BooleanQueryResult(null);\n+        }\n+\n+        return new BooleanQueryResult(Boolean.valueOf(result.getValue().trim()));\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subjectEvaluator;\n+    }\n+\n+}"
        },
        {
            "sha": "b6d758cbec0bec08f1b53c9c70868abf4ac813c6",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/DateCastEvaluator.java",
            "status": "added",
            "additions": 115,
            "deletions": 0,
            "changes": 115,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fcast%2FDateCastEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fcast%2FDateCastEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fcast%2FDateCastEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.cast;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.DateEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.DateQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+import org.apache.nifi.attribute.expression.language.exception.AttributeExpressionLanguageException;\n+import org.apache.nifi.attribute.expression.language.exception.AttributeExpressionLanguageParsingException;\n+import org.apache.nifi.expression.AttributeExpression.ResultType;\n+\n+public class DateCastEvaluator extends DateEvaluator {\n+\n+    public static final String DATE_TO_STRING_FORMAT = \"EEE MMM dd HH:mm:ss zzz yyyy\";\n+    public static final Pattern DATE_TO_STRING_PATTERN = Pattern.compile(\"(?:[a-zA-Z]{3} ){2}\\\\d{2} \\\\d{2}\\\\:\\\\d{2}\\\\:\\\\d{2} (?:.*?) \\\\d{4}\");\n+\n+    public static final String ALTERNATE_FORMAT_WITHOUT_MILLIS = \"yyyy/MM/dd HH:mm:ss\";\n+    public static final String ALTERNATE_FORMAT_WITH_MILLIS = \"yyyy/MM/dd HH:mm:ss.SSS\";\n+    public static final Pattern ALTERNATE_PATTERN = Pattern.compile(\"\\\\d{4}/\\\\d{2}/\\\\d{2} \\\\d{2}\\\\:\\\\d{2}\\\\:\\\\d{2}(\\\\.\\\\d{3})?\");\n+\n+    public static final Pattern NUMBER_PATTERN = Pattern.compile(\"\\\\d+\");\n+\n+    private final Evaluator<?> subjectEvaluator;\n+\n+    public DateCastEvaluator(final Evaluator<?> subjectEvaluator) {\n+        if (subjectEvaluator.getResultType() == ResultType.BOOLEAN) {\n+            throw new AttributeExpressionLanguageParsingException(\"Cannot implicitly convert Data Type \" + subjectEvaluator.getResultType() + \" to \" + ResultType.DATE);\n+        }\n+\n+        this.subjectEvaluator = subjectEvaluator;\n+    }\n+\n+    @Override\n+    public QueryResult<Date> evaluate(final Map<String, String> attributes) {\n+        final QueryResult<?> result = subjectEvaluator.evaluate(attributes);\n+        if (result.getValue() == null) {\n+            return new DateQueryResult(null);\n+        }\n+\n+        switch (result.getResultType()) {\n+            case DATE:\n+                return (DateQueryResult) result;\n+            case STRING:\n+                final String value = ((StringQueryResult) result).getValue().trim();\n+                if (DATE_TO_STRING_PATTERN.matcher(value).matches()) {\n+                    final SimpleDateFormat sdf = new SimpleDateFormat(DATE_TO_STRING_FORMAT);\n+\n+                    try {\n+                        final Date date = sdf.parse(value);\n+                        return new DateQueryResult(date);\n+                    } catch (final ParseException pe) {\n+                        throw new AttributeExpressionLanguageException(\"Could not parse input as date\", pe);\n+                    }\n+                } else if (NUMBER_PATTERN.matcher(value).matches()) {\n+                    return new DateQueryResult(new Date(Long.valueOf(value)));\n+                } else {\n+                    final Matcher altMatcher = ALTERNATE_PATTERN.matcher(value);\n+                    if (altMatcher.matches()) {\n+                        final String millisValue = altMatcher.group(1);\n+\n+                        final String format;\n+                        if (millisValue == null) {\n+                            format = ALTERNATE_FORMAT_WITHOUT_MILLIS;\n+                        } else {\n+                            format = ALTERNATE_FORMAT_WITH_MILLIS;\n+                        }\n+\n+                        final SimpleDateFormat sdf = new SimpleDateFormat(format);\n+\n+                        try {\n+                            final Date date = sdf.parse(value);\n+                            return new DateQueryResult(date);\n+                        } catch (final ParseException pe) {\n+                            throw new AttributeExpressionLanguageException(\"Could not parse input as date\", pe);\n+                        }\n+                    } else {\n+                        throw new AttributeExpressionLanguageException(\"Could not implicitly convert input to DATE: \" + value);\n+                    }\n+                }\n+            case NUMBER:\n+                return new DateQueryResult(new Date((Long) result.getValue()));\n+            default:\n+                return new DateQueryResult(null);\n+        }\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subjectEvaluator;\n+    }\n+\n+}"
        },
        {
            "sha": "0447d483a8e59f72bdd2b8f66edc4edd8dddba01",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/NumberCastEvaluator.java",
            "status": "added",
            "additions": 72,
            "deletions": 0,
            "changes": 72,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fcast%2FNumberCastEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fcast%2FNumberCastEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fcast%2FNumberCastEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.cast;\n+\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.DateQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+import org.apache.nifi.attribute.expression.language.exception.AttributeExpressionLanguageParsingException;\n+import org.apache.nifi.expression.AttributeExpression.ResultType;\n+\n+public class NumberCastEvaluator extends NumberEvaluator {\n+\n+    private final Evaluator<?> subjectEvaluator;\n+    private static final Pattern NUMBER_PATTERN = Pattern.compile(\"-?\\\\d+\");\n+\n+    public NumberCastEvaluator(final Evaluator<?> subjectEvaluator) {\n+        if (subjectEvaluator.getResultType() == ResultType.BOOLEAN) {\n+            throw new AttributeExpressionLanguageParsingException(\"Cannot implicitly convert Data Type \" + subjectEvaluator.getResultType() + \" to \" + ResultType.NUMBER);\n+        }\n+        this.subjectEvaluator = subjectEvaluator;\n+    }\n+\n+    @Override\n+    public QueryResult<Long> evaluate(final Map<String, String> attributes) {\n+        final QueryResult<?> result = subjectEvaluator.evaluate(attributes);\n+        if (result.getValue() == null) {\n+            return new NumberQueryResult(null);\n+        }\n+\n+        switch (result.getResultType()) {\n+            case NUMBER:\n+                return (NumberQueryResult) result;\n+            case STRING:\n+                final String trimmed = ((StringQueryResult) result).getValue().trim();\n+                if (NUMBER_PATTERN.matcher(trimmed).matches()) {\n+                    return new NumberQueryResult(Long.valueOf(trimmed));\n+                } else {\n+                    return new NumberQueryResult(null);\n+                }\n+            case DATE:\n+                return new NumberQueryResult(((DateQueryResult) result).getValue().getTime());\n+            default:\n+                return new NumberQueryResult(null);\n+        }\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subjectEvaluator;\n+    }\n+\n+}"
        },
        {
            "sha": "1a3732a25d76c378143fd1c81b5a73c57be93f75",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/StringCastEvaluator.java",
            "status": "added",
            "additions": 49,
            "deletions": 0,
            "changes": 49,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fcast%2FStringCastEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fcast%2FStringCastEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fcast%2FStringCastEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.cast;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+\n+public class StringCastEvaluator extends StringEvaluator {\n+\n+    private final Evaluator<?> subjectEvaluator;\n+\n+    public StringCastEvaluator(final Evaluator<?> subjectEvaluator) {\n+        this.subjectEvaluator = subjectEvaluator;\n+    }\n+\n+    @Override\n+    public QueryResult<String> evaluate(final Map<String, String> attributes) {\n+        final QueryResult<?> result = subjectEvaluator.evaluate(attributes);\n+        if (result.getValue() == null) {\n+            return new StringQueryResult(null);\n+        }\n+\n+        return new StringQueryResult(String.valueOf(result.getValue()));\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subjectEvaluator;\n+    }\n+\n+}"
        },
        {
            "sha": "9ed8f065162a9567f4e528e6e6d06926124239c0",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/AndEvaluator.java",
            "status": "added",
            "additions": 60,
            "deletions": 0,
            "changes": 60,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FAndEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FAndEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FAndEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+\n+public class AndEvaluator extends BooleanEvaluator {\n+\n+    private final BooleanEvaluator subjectEvaluator;\n+    private final BooleanEvaluator rhsEvaluator;\n+\n+    public AndEvaluator(final BooleanEvaluator subjectEvaluator, final BooleanEvaluator rhsEvaluator) {\n+        this.subjectEvaluator = subjectEvaluator;\n+        this.rhsEvaluator = rhsEvaluator;\n+    }\n+\n+    @Override\n+    public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {\n+        final QueryResult<Boolean> subjectValue = subjectEvaluator.evaluate(attributes);\n+        if (subjectValue == null) {\n+            return new BooleanQueryResult(null);\n+        }\n+\n+        if (Boolean.FALSE.equals(subjectValue.getValue())) {\n+            return new BooleanQueryResult(false);\n+        }\n+\n+        final QueryResult<Boolean> rhsValue = rhsEvaluator.evaluate(attributes);\n+        if (rhsValue == null) {\n+            return new BooleanQueryResult(false);\n+        }\n+\n+        return new BooleanQueryResult(rhsValue.getValue());\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subjectEvaluator;\n+    }\n+\n+}"
        },
        {
            "sha": "bd5e81a087d887e1aa6aca23a240cb7e110d846b",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/AppendEvaluator.java",
            "status": "added",
            "additions": 50,
            "deletions": 0,
            "changes": 50,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FAppendEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FAppendEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FAppendEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+\n+public class AppendEvaluator extends StringEvaluator {\n+\n+    private final StringEvaluator subject;\n+    private final StringEvaluator appendEvaluator;\n+\n+    public AppendEvaluator(final StringEvaluator subject, final StringEvaluator append) {\n+        this.subject = subject;\n+        this.appendEvaluator = append;\n+    }\n+\n+    @Override\n+    public QueryResult<String> evaluate(final Map<String, String> attributes) {\n+        final String subjectValue = subject.evaluate(attributes).getValue();\n+        final String appendValue = appendEvaluator.evaluate(attributes).getValue();\n+\n+        final String result = (subjectValue == null ? \"\" : subjectValue)\n+                + (appendValue == null ? \"\" : appendValue);\n+        return new StringQueryResult(result);\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+}"
        },
        {
            "sha": "1b4b74ecce259037e5a3e3c9f936ecc097d324e1",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/AttributeEvaluator.java",
            "status": "added",
            "additions": 45,
            "deletions": 0,
            "changes": 45,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FAttributeEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FAttributeEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FAttributeEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+\n+public class AttributeEvaluator extends StringEvaluator {\n+\n+    private final StringEvaluator nameEvaluator;\n+\n+    public AttributeEvaluator(final StringEvaluator nameEvaluator) {\n+        this.nameEvaluator = nameEvaluator;\n+    }\n+\n+    @Override\n+    public QueryResult<String> evaluate(final Map<String, String> attributes) {\n+        final String nameValue = nameEvaluator.evaluate(attributes).getValue();\n+        final String attributeValue = attributes.get(nameValue);\n+        return new StringQueryResult(attributeValue);\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return null;\n+    }\n+}"
        },
        {
            "sha": "99802f63470ddc88a078a40fa1abe0202070174d",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/ContainsEvaluator.java",
            "status": "added",
            "additions": 53,
            "deletions": 0,
            "changes": 53,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FContainsEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FContainsEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FContainsEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+\n+public class ContainsEvaluator extends BooleanEvaluator {\n+\n+    private final StringEvaluator subject;\n+    private final StringEvaluator search;\n+\n+    public ContainsEvaluator(final StringEvaluator subject, final StringEvaluator search) {\n+        this.subject = subject;\n+        this.search = search;\n+    }\n+\n+    @Override\n+    public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {\n+        final String subjectValue = subject.evaluate(attributes).getValue();\n+        if (subjectValue == null) {\n+            return new BooleanQueryResult(false);\n+        }\n+\n+        final String searchString = search.evaluate(attributes).getValue();\n+        return new BooleanQueryResult(searchString == null ? false : subjectValue.contains(searchString));\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "0594c4a882d1a457068fc256e4ab69ac0f622d63",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/DateToNumberEvaluator.java",
            "status": "added",
            "additions": 50,
            "deletions": 0,
            "changes": 50,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FDateToNumberEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FDateToNumberEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FDateToNumberEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Date;\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.DateEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+\n+public class DateToNumberEvaluator extends NumberEvaluator {\n+\n+    private final DateEvaluator subjectEvaluator;\n+\n+    public DateToNumberEvaluator(final DateEvaluator subjectEvaluator) {\n+        this.subjectEvaluator = subjectEvaluator;\n+    }\n+\n+    @Override\n+    public QueryResult<Long> evaluate(final Map<String, String> attributes) {\n+        final QueryResult<Date> subjectResult = subjectEvaluator.evaluate(attributes);\n+        if (subjectResult.getValue() == null) {\n+            return new NumberQueryResult(null);\n+        }\n+\n+        return new NumberQueryResult(subjectResult.getValue().getTime());\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subjectEvaluator;\n+    }\n+}"
        },
        {
            "sha": "c7583cbb75177f146a01aba48b749db9998bf961",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/DivideEvaluator.java",
            "status": "added",
            "additions": 57,
            "deletions": 0,
            "changes": 57,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FDivideEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FDivideEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FDivideEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+\n+public class DivideEvaluator extends NumberEvaluator {\n+\n+    private final NumberEvaluator subject;\n+    private final NumberEvaluator divideValue;\n+\n+    public DivideEvaluator(final NumberEvaluator subject, final NumberEvaluator divideValue) {\n+        this.subject = subject;\n+        this.divideValue = divideValue;\n+    }\n+\n+    @Override\n+    public QueryResult<Long> evaluate(final Map<String, String> attributes) {\n+        final Long subjectValue = subject.evaluate(attributes).getValue();\n+        if (subjectValue == null) {\n+            return new NumberQueryResult(null);\n+        }\n+\n+        final Long divide = divideValue.evaluate(attributes).getValue();\n+        if (divide == null) {\n+            return new NumberQueryResult(null);\n+        }\n+\n+        final long result = subjectValue / divide;\n+        return new NumberQueryResult(result);\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "c31c2b12302395c3a19d738a0e19b9d80602840a",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/EndsWithEvaluator.java",
            "status": "added",
            "additions": 53,
            "deletions": 0,
            "changes": 53,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FEndsWithEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FEndsWithEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FEndsWithEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+\n+public class EndsWithEvaluator extends BooleanEvaluator {\n+\n+    private final StringEvaluator subject;\n+    private final StringEvaluator search;\n+\n+    public EndsWithEvaluator(final StringEvaluator subject, final StringEvaluator search) {\n+        this.subject = subject;\n+        this.search = search;\n+    }\n+\n+    @Override\n+    public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {\n+        final String subjectValue = subject.evaluate(attributes).getValue();\n+        if (subjectValue == null) {\n+            return new BooleanQueryResult(false);\n+        }\n+\n+        final String searchString = search.evaluate(attributes).getValue();\n+        return new BooleanQueryResult(searchString == null ? false : subjectValue.endsWith(searchString));\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "ec67b0feb9c20a912e314decf37090e6b9e1cade",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/EqualsEvaluator.java",
            "status": "added",
            "additions": 89,
            "deletions": 0,
            "changes": 89,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FEqualsEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FEqualsEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FEqualsEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Date;\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.expression.AttributeExpression.ResultType;\n+\n+public class EqualsEvaluator extends BooleanEvaluator {\n+\n+    private final Evaluator<?> subject;\n+    private final Evaluator<?> compareTo;\n+\n+    public EqualsEvaluator(final Evaluator<?> subject, final Evaluator<?> compareTo) {\n+        this.subject = subject;\n+        this.compareTo = compareTo;\n+    }\n+\n+    @Override\n+    public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {\n+        final Object a = subject.evaluate(attributes).getValue();\n+        if (a == null) {\n+            return new BooleanQueryResult(false);\n+        }\n+\n+        final Object b = compareTo.evaluate(attributes).getValue();\n+        if (b == null) {\n+            return new BooleanQueryResult(false);\n+        }\n+\n+        if (subject.getResultType() == compareTo.getResultType()) {\n+            return new BooleanQueryResult(a.equals(b));\n+        }\n+\n+        final String normalizedSubjectValue = normalizeValue(subject.getResultType(), a);\n+        if (normalizedSubjectValue == null) {\n+            return new BooleanQueryResult(false);\n+        }\n+\n+        final String normalizedCompareToValue = normalizeValue(compareTo.getResultType(), b);\n+        if (normalizedCompareToValue == null) {\n+            return new BooleanQueryResult(false);\n+        }\n+\n+        return new BooleanQueryResult(normalizedSubjectValue.equals(normalizedCompareToValue));\n+    }\n+\n+    private String normalizeValue(final ResultType type, final Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        switch (type) {\n+            case STRING:\n+                return (String) value;\n+            case DATE:\n+                return String.valueOf(((Date) value).getTime());\n+            case BOOLEAN:\n+            case NUMBER:\n+            default:\n+                return String.valueOf(value);\n+        }\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "344395b00aa1f73c9bc7c59637cc408883dfdfc9",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/EqualsIgnoreCaseEvaluator.java",
            "status": "added",
            "additions": 60,
            "deletions": 0,
            "changes": 60,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FEqualsIgnoreCaseEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FEqualsIgnoreCaseEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FEqualsIgnoreCaseEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+\n+public class EqualsIgnoreCaseEvaluator extends BooleanEvaluator {\n+\n+    private final Evaluator<?> subject;\n+    private final Evaluator<?> compareTo;\n+\n+    public EqualsIgnoreCaseEvaluator(final Evaluator<?> subject, final Evaluator<?> compareTo) {\n+        this.subject = subject;\n+        this.compareTo = compareTo;\n+    }\n+\n+    @Override\n+    public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {\n+        final Object a = subject.evaluate(attributes).getValue();\n+        if (a == null) {\n+            return new BooleanQueryResult(false);\n+        }\n+\n+        final Object b = compareTo.evaluate(attributes).getValue();\n+        if (b == null) {\n+            return new BooleanQueryResult(false);\n+        }\n+\n+        if (a instanceof String && b instanceof String) {\n+            return new BooleanQueryResult(((String) a).equalsIgnoreCase((String) b));\n+        }\n+\n+        return new BooleanQueryResult(a.equals(b));\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "b377c4ad3e5a4e7648b00d2042bccd65b72fd0a1",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/FindEvaluator.java",
            "status": "added",
            "additions": 72,
            "deletions": 0,
            "changes": 72,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FFindEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FFindEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FFindEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.literals.StringLiteralEvaluator;\n+\n+public class FindEvaluator extends BooleanEvaluator {\n+\n+    private final StringEvaluator subject;\n+    private final StringEvaluator search;\n+\n+    private final Pattern compiledPattern;\n+\n+    public FindEvaluator(final StringEvaluator subject, final StringEvaluator search) {\n+        this.subject = subject;\n+        this.search = search;\n+\n+        // if the search string is a literal, we don't need to evaluate it each time; we can just\n+        // pre-compile it. Otherwise, it must be compiled every time.\n+        if (search instanceof StringLiteralEvaluator) {\n+            this.compiledPattern = Pattern.compile(search.evaluate(null).getValue());\n+        } else {\n+            this.compiledPattern = null;\n+        }\n+    }\n+\n+    @Override\n+    public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {\n+        final String subjectValue = subject.evaluate(attributes).getValue();\n+        if (subjectValue == null) {\n+            return new BooleanQueryResult(false);\n+        }\n+        final Pattern pattern;\n+        if (compiledPattern == null) {\n+            pattern = Pattern.compile(search.evaluate(attributes).getValue());\n+        } else {\n+            pattern = compiledPattern;\n+        }\n+\n+        final boolean found = pattern.matcher(subjectValue).find();\n+\n+        return new BooleanQueryResult(found);\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "ccb1a89d9e727ac2698791a577fe3819826e9d90",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/FormatEvaluator.java",
            "status": "added",
            "additions": 60,
            "deletions": 0,
            "changes": 60,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FFormatEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FFormatEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FFormatEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.DateEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+\n+public class FormatEvaluator extends StringEvaluator {\n+\n+    private final DateEvaluator subject;\n+    private final StringEvaluator format;\n+\n+    public FormatEvaluator(final DateEvaluator subject, final StringEvaluator format) {\n+        this.subject = subject;\n+        this.format = format;\n+    }\n+\n+    @Override\n+    public QueryResult<String> evaluate(final Map<String, String> attributes) {\n+        final Date subjectValue = subject.evaluate(attributes).getValue();\n+        if (subjectValue == null) {\n+            return new StringQueryResult(null);\n+        }\n+\n+        final QueryResult<String> formatResult = format.evaluate(attributes);\n+        final String format = formatResult.getValue();\n+        if (format == null) {\n+            return null;\n+        }\n+\n+        return new StringQueryResult(new SimpleDateFormat(format).format(subjectValue));\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "6c712bbda081fd78ef2edbe940a981f92b714b93",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/GreaterThanEvaluator.java",
            "status": "added",
            "additions": 60,
            "deletions": 0,
            "changes": 60,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FGreaterThanEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FGreaterThanEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FGreaterThanEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+\n+public class GreaterThanEvaluator extends BooleanEvaluator {\n+\n+    private final NumberEvaluator subject;\n+    private final NumberEvaluator comparison;\n+\n+    public GreaterThanEvaluator(final NumberEvaluator subject, final NumberEvaluator comparison) {\n+        this.subject = subject;\n+        this.comparison = comparison;\n+    }\n+\n+    @Override\n+    public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {\n+        final Long subjectValue = subject.evaluate(attributes).getValue();\n+        if (subjectValue == null) {\n+            return new BooleanQueryResult(false);\n+        }\n+\n+        final Long comparisonValue = comparison.evaluate(attributes).getValue();\n+        if (comparisonValue == null) {\n+            return new BooleanQueryResult(false);\n+        }\n+\n+        return new BooleanQueryResult(subjectValue > comparisonValue);\n+    }\n+\n+    ;\n+    \n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "98951f27e10b5e3f23eb2fb9c9dd119a629536cb",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/GreaterThanOrEqualEvaluator.java",
            "status": "added",
            "additions": 60,
            "deletions": 0,
            "changes": 60,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FGreaterThanOrEqualEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FGreaterThanOrEqualEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FGreaterThanOrEqualEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+\n+public class GreaterThanOrEqualEvaluator extends BooleanEvaluator {\n+\n+    private final NumberEvaluator subject;\n+    private final NumberEvaluator comparison;\n+\n+    public GreaterThanOrEqualEvaluator(final NumberEvaluator subject, final NumberEvaluator comparison) {\n+        this.subject = subject;\n+        this.comparison = comparison;\n+    }\n+\n+    @Override\n+    public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {\n+        final Long subjectValue = subject.evaluate(attributes).getValue();\n+        if (subjectValue == null) {\n+            return new BooleanQueryResult(false);\n+        }\n+\n+        final Long comparisonValue = comparison.evaluate(attributes).getValue();\n+        if (comparisonValue == null) {\n+            return new BooleanQueryResult(false);\n+        }\n+\n+        return new BooleanQueryResult(subjectValue >= comparisonValue);\n+    }\n+\n+    ;\n+    \n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "c0b113459645070f0dc0cc6423e2e8eba76887d7",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/HostnameEvaluator.java",
            "status": "added",
            "additions": 58,
            "deletions": 0,
            "changes": 58,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FHostnameEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FHostnameEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FHostnameEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+\n+public class HostnameEvaluator extends StringEvaluator {\n+\n+    private final StringQueryResult hostname;\n+\n+    public HostnameEvaluator(final boolean preferFQDN) throws UnknownHostException {\n+        String address;\n+\n+        if (preferFQDN) {\n+            try {\n+                address = InetAddress.getLocalHost().getCanonicalHostName();\n+            } catch (final Exception e) {\n+                address = InetAddress.getLocalHost().getHostName();\n+            }\n+        } else {\n+            address = InetAddress.getLocalHost().getHostName();\n+        }\n+\n+        hostname = new StringQueryResult(address);\n+    }\n+\n+    @Override\n+    public QueryResult<String> evaluate(final Map<String, String> attributes) {\n+        return hostname;\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return null;\n+    }\n+\n+}"
        },
        {
            "sha": "21f9fe808013036870030e4b92f7755aa69674d9",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/IPEvaluator.java",
            "status": "added",
            "additions": 46,
            "deletions": 0,
            "changes": 46,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FIPEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FIPEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FIPEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+\n+public class IPEvaluator extends StringEvaluator {\n+\n+    private final StringQueryResult ipAddress;\n+\n+    public IPEvaluator() throws UnknownHostException {\n+        ipAddress = new StringQueryResult(InetAddress.getLocalHost().getHostAddress());\n+    }\n+\n+    @Override\n+    public QueryResult<String> evaluate(final Map<String, String> attributes) {\n+        return ipAddress;\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return null;\n+    }\n+\n+}"
        },
        {
            "sha": "80422cb67b8f451aef9848bc049fe8b53ae0481c",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/IndexOfEvaluator.java",
            "status": "added",
            "additions": 53,
            "deletions": 0,
            "changes": 53,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FIndexOfEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FIndexOfEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FIndexOfEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+\n+public class IndexOfEvaluator extends NumberEvaluator {\n+\n+    private final StringEvaluator subject;\n+    private final StringEvaluator indexEvaluator;\n+\n+    public IndexOfEvaluator(final StringEvaluator subject, final StringEvaluator indexEvaluator) {\n+        this.subject = subject;\n+        this.indexEvaluator = indexEvaluator;\n+    }\n+\n+    @Override\n+    public QueryResult<Long> evaluate(final Map<String, String> attributes) {\n+        final String subjectValue = subject.evaluate(attributes).getValue();\n+        if (subjectValue == null) {\n+            return new NumberQueryResult(-1L);\n+        }\n+        final String indexEvalValue = indexEvaluator.evaluate(attributes).getValue();\n+\n+        return new NumberQueryResult((long) subjectValue.indexOf(indexEvalValue));\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "a9d678c790fcc928500262e46764c78a47981792",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/IsNullEvaluator.java",
            "status": "added",
            "additions": 45,
            "deletions": 0,
            "changes": 45,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FIsNullEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FIsNullEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FIsNullEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+\n+public class IsNullEvaluator extends BooleanEvaluator {\n+\n+    private final Evaluator<?> subject;\n+\n+    public IsNullEvaluator(final Evaluator<?> subject) {\n+        this.subject = subject;\n+    }\n+\n+    @Override\n+    public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {\n+        final Object subjectValue = subject.evaluate(attributes).getValue();\n+        return new BooleanQueryResult(subjectValue == null);\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "2b670935b15014289675ce23bd7251834560ff91",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/LastIndexOfEvaluator.java",
            "status": "added",
            "additions": 53,
            "deletions": 0,
            "changes": 53,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FLastIndexOfEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FLastIndexOfEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FLastIndexOfEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+\n+public class LastIndexOfEvaluator extends NumberEvaluator {\n+\n+    private final StringEvaluator subject;\n+    private final StringEvaluator indexEvaluator;\n+\n+    public LastIndexOfEvaluator(final StringEvaluator subject, final StringEvaluator indexEvaluator) {\n+        this.subject = subject;\n+        this.indexEvaluator = indexEvaluator;\n+    }\n+\n+    @Override\n+    public QueryResult<Long> evaluate(final Map<String, String> attributes) {\n+        final String subjectValue = subject.evaluate(attributes).getValue();\n+        if (subjectValue == null) {\n+            return new NumberQueryResult(-1L);\n+        }\n+        final String indexEvalValue = indexEvaluator.evaluate(attributes).getValue();\n+\n+        return new NumberQueryResult((long) subjectValue.lastIndexOf(indexEvalValue));\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "dec1f8f4b5b48bb6b24473fce2d96cee37875171",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/LengthEvaluator.java",
            "status": "added",
            "additions": 46,
            "deletions": 0,
            "changes": 46,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FLengthEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FLengthEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FLengthEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+\n+public class LengthEvaluator extends NumberEvaluator {\n+\n+    private final StringEvaluator subject;\n+\n+    public LengthEvaluator(final StringEvaluator subject) {\n+        this.subject = subject;\n+    }\n+\n+    @Override\n+    public QueryResult<Long> evaluate(final Map<String, String> attributes) {\n+        final String subjectValue = subject.evaluate(attributes).getValue();\n+        return new NumberQueryResult((long) ((subjectValue == null) ? 0 : subjectValue.length()));\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "9a589103c670460e15f21d78919a736149a924d6",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/LessThanEvaluator.java",
            "status": "added",
            "additions": 60,
            "deletions": 0,
            "changes": 60,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FLessThanEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FLessThanEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FLessThanEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+\n+public class LessThanEvaluator extends BooleanEvaluator {\n+\n+    private final NumberEvaluator subject;\n+    private final NumberEvaluator comparison;\n+\n+    public LessThanEvaluator(final NumberEvaluator subject, final NumberEvaluator comparison) {\n+        this.subject = subject;\n+        this.comparison = comparison;\n+    }\n+\n+    @Override\n+    public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {\n+        final Long subjectValue = subject.evaluate(attributes).getValue();\n+        if (subjectValue == null) {\n+            return new BooleanQueryResult(false);\n+        }\n+\n+        final Long comparisonValue = comparison.evaluate(attributes).getValue();\n+        if (comparisonValue == null) {\n+            return new BooleanQueryResult(false);\n+        }\n+\n+        return new BooleanQueryResult(subjectValue < comparisonValue);\n+    }\n+\n+    ;\n+    \n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "10f3f6aad8135ad144bbcffe1f4da421ca406d2c",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/LessThanOrEqualEvaluator.java",
            "status": "added",
            "additions": 60,
            "deletions": 0,
            "changes": 60,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FLessThanOrEqualEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FLessThanOrEqualEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FLessThanOrEqualEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+\n+public class LessThanOrEqualEvaluator extends BooleanEvaluator {\n+\n+    private final NumberEvaluator subject;\n+    private final NumberEvaluator comparison;\n+\n+    public LessThanOrEqualEvaluator(final NumberEvaluator subject, final NumberEvaluator comparison) {\n+        this.subject = subject;\n+        this.comparison = comparison;\n+    }\n+\n+    @Override\n+    public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {\n+        final Long subjectValue = subject.evaluate(attributes).getValue();\n+        if (subjectValue == null) {\n+            return new BooleanQueryResult(false);\n+        }\n+\n+        final Long comparisonValue = comparison.evaluate(attributes).getValue();\n+        if (comparisonValue == null) {\n+            return new BooleanQueryResult(false);\n+        }\n+\n+        return new BooleanQueryResult(subjectValue <= comparisonValue);\n+    }\n+\n+    ;\n+    \n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "1bb86a5c34fa191bd0741ea8935aaf18a5ff7703",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/MatchesEvaluator.java",
            "status": "added",
            "additions": 71,
            "deletions": 0,
            "changes": 71,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FMatchesEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FMatchesEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FMatchesEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.literals.StringLiteralEvaluator;\n+\n+public class MatchesEvaluator extends BooleanEvaluator {\n+\n+    private final StringEvaluator subject;\n+    private final StringEvaluator search;\n+\n+    private final Pattern compiledPattern;\n+\n+    public MatchesEvaluator(final StringEvaluator subject, final StringEvaluator search) {\n+        this.subject = subject;\n+        this.search = search;\n+\n+        // if the search string is a literal, we don't need to evaluate it each time; we can just\n+        // pre-compile it. Otherwise, it must be compiled every time.\n+        if (search instanceof StringLiteralEvaluator) {\n+            this.compiledPattern = Pattern.compile(search.evaluate(null).getValue());\n+        } else {\n+            this.compiledPattern = null;\n+        }\n+    }\n+\n+    @Override\n+    public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {\n+        final String subjectValue = subject.evaluate(attributes).getValue();\n+        if (subjectValue == null) {\n+            return new BooleanQueryResult(false);\n+        }\n+        final Pattern pattern;\n+        if (compiledPattern == null) {\n+            pattern = Pattern.compile(search.evaluate(attributes).getValue());\n+        } else {\n+            pattern = compiledPattern;\n+        }\n+\n+        final boolean matches = pattern.matcher(subjectValue).matches();\n+        return new BooleanQueryResult(matches);\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "066597966dd69554e9bb50783fe5c59f7b55cc81",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/MinusEvaluator.java",
            "status": "added",
            "additions": 57,
            "deletions": 0,
            "changes": 57,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FMinusEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FMinusEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FMinusEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+\n+public class MinusEvaluator extends NumberEvaluator {\n+\n+    private final NumberEvaluator subject;\n+    private final NumberEvaluator minusValue;\n+\n+    public MinusEvaluator(final NumberEvaluator subject, final NumberEvaluator minusValue) {\n+        this.subject = subject;\n+        this.minusValue = minusValue;\n+    }\n+\n+    @Override\n+    public QueryResult<Long> evaluate(final Map<String, String> attributes) {\n+        final Long subjectValue = subject.evaluate(attributes).getValue();\n+        if (subjectValue == null) {\n+            return new NumberQueryResult(null);\n+        }\n+\n+        final Long minus = minusValue.evaluate(attributes).getValue();\n+        if (minus == null) {\n+            return new NumberQueryResult(null);\n+        }\n+\n+        final long result = subjectValue - minus;\n+        return new NumberQueryResult(result);\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "6b7b8388df82138311d7765249a4e23a8612f36e",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/ModEvaluator.java",
            "status": "added",
            "additions": 57,
            "deletions": 0,
            "changes": 57,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FModEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FModEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FModEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+\n+public class ModEvaluator extends NumberEvaluator {\n+\n+    private final NumberEvaluator subject;\n+    private final NumberEvaluator modValue;\n+\n+    public ModEvaluator(final NumberEvaluator subject, final NumberEvaluator modValue) {\n+        this.subject = subject;\n+        this.modValue = modValue;\n+    }\n+\n+    @Override\n+    public QueryResult<Long> evaluate(final Map<String, String> attributes) {\n+        final Long subjectValue = subject.evaluate(attributes).getValue();\n+        if (subjectValue == null) {\n+            return new NumberQueryResult(null);\n+        }\n+\n+        final Long mod = modValue.evaluate(attributes).getValue();\n+        if (mod == null) {\n+            return new NumberQueryResult(null);\n+        }\n+\n+        final long result = subjectValue % mod;\n+        return new NumberQueryResult(result);\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "a3b03ed94e736444a74688a91648e6c2ae883fc2",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/MultiplyEvaluator.java",
            "status": "added",
            "additions": 57,
            "deletions": 0,
            "changes": 57,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FMultiplyEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FMultiplyEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FMultiplyEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+\n+public class MultiplyEvaluator extends NumberEvaluator {\n+\n+    private final NumberEvaluator subject;\n+    private final NumberEvaluator multiplyValue;\n+\n+    public MultiplyEvaluator(final NumberEvaluator subject, final NumberEvaluator multiplyValue) {\n+        this.subject = subject;\n+        this.multiplyValue = multiplyValue;\n+    }\n+\n+    @Override\n+    public QueryResult<Long> evaluate(final Map<String, String> attributes) {\n+        final Long subjectValue = subject.evaluate(attributes).getValue();\n+        if (subjectValue == null) {\n+            return new NumberQueryResult(null);\n+        }\n+\n+        final Long multiply = multiplyValue.evaluate(attributes).getValue();\n+        if (multiply == null) {\n+            return new NumberQueryResult(null);\n+        }\n+\n+        final long result = subjectValue * multiply;\n+        return new NumberQueryResult(result);\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "327e62089065c7ed83815e1e599b20643ef4adc7",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/NotEvaluator.java",
            "status": "added",
            "additions": 49,
            "deletions": 0,
            "changes": 49,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FNotEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FNotEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FNotEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+\n+public class NotEvaluator extends BooleanEvaluator {\n+\n+    private final BooleanEvaluator subjectEvaluator;\n+\n+    public NotEvaluator(final BooleanEvaluator subjectEvaluator) {\n+        this.subjectEvaluator = subjectEvaluator;\n+    }\n+\n+    @Override\n+    public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {\n+        final QueryResult<Boolean> subjectValue = subjectEvaluator.evaluate(attributes);\n+        if (subjectValue == null) {\n+            return new BooleanQueryResult(null);\n+        }\n+\n+        return new BooleanQueryResult(!subjectValue.getValue());\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subjectEvaluator;\n+    }\n+\n+}"
        },
        {
            "sha": "126fbfa6a5723fa1a39c807e388018a219947993",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/NotNullEvaluator.java",
            "status": "added",
            "additions": 45,
            "deletions": 0,
            "changes": 45,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FNotNullEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FNotNullEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FNotNullEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+\n+public class NotNullEvaluator extends BooleanEvaluator {\n+\n+    private final Evaluator<?> subject;\n+\n+    public NotNullEvaluator(final Evaluator<?> subject) {\n+        this.subject = subject;\n+    }\n+\n+    @Override\n+    public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {\n+        final Object subjectValue = subject.evaluate(attributes).getValue();\n+        return new BooleanQueryResult(subjectValue != null);\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "bfde6b0cb1b160a971270fc6ec9c93aa8a14a89d",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/NowEvaluator.java",
            "status": "added",
            "additions": 39,
            "deletions": 0,
            "changes": 39,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FNowEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FNowEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FNowEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Date;\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.DateEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.DateQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+\n+public class NowEvaluator extends DateEvaluator {\n+\n+    @Override\n+    public QueryResult<Date> evaluate(final Map<String, String> attributes) {\n+        return new DateQueryResult(new Date());\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return null;\n+    }\n+\n+}"
        },
        {
            "sha": "672d855dc9a9594f3bbf496639cf70ce2a681c73",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/NumberToDateEvaluator.java",
            "status": "added",
            "additions": 52,
            "deletions": 0,
            "changes": 52,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FNumberToDateEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FNumberToDateEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FNumberToDateEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Date;\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.DateEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.DateQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+\n+public class NumberToDateEvaluator extends DateEvaluator {\n+\n+    private final NumberEvaluator subject;\n+\n+    public NumberToDateEvaluator(final NumberEvaluator subject) {\n+        this.subject = subject;\n+    }\n+\n+    @Override\n+    public QueryResult<Date> evaluate(final Map<String, String> attributes) {\n+        final QueryResult<Long> result = subject.evaluate(attributes);\n+        final Long value = result.getValue();\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        return new DateQueryResult(new Date(value));\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "11d3fa9d7c715824f8c64612731b74ab2313d2e2",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/OneUpSequenceEvaluator.java",
            "status": "added",
            "additions": 41,
            "deletions": 0,
            "changes": 41,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FOneUpSequenceEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FOneUpSequenceEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FOneUpSequenceEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+\n+public class OneUpSequenceEvaluator extends NumberEvaluator {\n+\n+    private static final AtomicLong value = new AtomicLong(0L);\n+\n+    @Override\n+    public QueryResult<Long> evaluate(final Map<String, String> attributes) {\n+        return new NumberQueryResult(value.getAndIncrement());\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return null;\n+    }\n+\n+}"
        },
        {
            "sha": "ab3a16ce1c12c66d638c443c867ee157b86230c0",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/OrEvaluator.java",
            "status": "added",
            "additions": 60,
            "deletions": 0,
            "changes": 60,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FOrEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FOrEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FOrEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+\n+public class OrEvaluator extends BooleanEvaluator {\n+\n+    private final BooleanEvaluator subjectEvaluator;\n+    private final BooleanEvaluator rhsEvaluator;\n+\n+    public OrEvaluator(final BooleanEvaluator subjectEvaluator, final BooleanEvaluator rhsEvaluator) {\n+        this.subjectEvaluator = subjectEvaluator;\n+        this.rhsEvaluator = rhsEvaluator;\n+    }\n+\n+    @Override\n+    public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {\n+        final QueryResult<Boolean> subjectValue = subjectEvaluator.evaluate(attributes);\n+        if (subjectValue == null) {\n+            return new BooleanQueryResult(null);\n+        }\n+\n+        if (Boolean.TRUE.equals(subjectValue.getValue())) {\n+            return new BooleanQueryResult(true);\n+        }\n+\n+        final QueryResult<Boolean> rhsValue = rhsEvaluator.evaluate(attributes);\n+        if (rhsValue == null) {\n+            return new BooleanQueryResult(false);\n+        }\n+\n+        return new BooleanQueryResult(rhsValue.getValue());\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subjectEvaluator;\n+    }\n+\n+}"
        },
        {
            "sha": "dff693dd0a67f7cb56de6e7f3fb4ae1d8075ca77",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/PlusEvaluator.java",
            "status": "added",
            "additions": 57,
            "deletions": 0,
            "changes": 57,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FPlusEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FPlusEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FPlusEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+\n+public class PlusEvaluator extends NumberEvaluator {\n+\n+    private final NumberEvaluator subject;\n+    private final NumberEvaluator plusValue;\n+\n+    public PlusEvaluator(final NumberEvaluator subject, final NumberEvaluator plusValue) {\n+        this.subject = subject;\n+        this.plusValue = plusValue;\n+    }\n+\n+    @Override\n+    public QueryResult<Long> evaluate(final Map<String, String> attributes) {\n+        final Long subjectValue = subject.evaluate(attributes).getValue();\n+        if (subjectValue == null) {\n+            return new NumberQueryResult(null);\n+        }\n+\n+        final Long plus = plusValue.evaluate(attributes).getValue();\n+        if (plus == null) {\n+            return new NumberQueryResult(null);\n+        }\n+\n+        final long result = subjectValue + plus;\n+        return new NumberQueryResult(result);\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "5b66b8fcaa2dc264f84e31561434d4fbeab731d8",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/PrependEvaluator.java",
            "status": "added",
            "additions": 50,
            "deletions": 0,
            "changes": 50,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FPrependEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FPrependEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FPrependEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+\n+public class PrependEvaluator extends StringEvaluator {\n+\n+    private final StringEvaluator subject;\n+    private final StringEvaluator prependEvaluator;\n+\n+    public PrependEvaluator(final StringEvaluator subject, final StringEvaluator prepend) {\n+        this.subject = subject;\n+        this.prependEvaluator = prepend;\n+    }\n+\n+    @Override\n+    public QueryResult<String> evaluate(final Map<String, String> attributes) {\n+        final String subjectValue = subject.evaluate(attributes).getValue();\n+        final String prependValue = prependEvaluator.evaluate(attributes).getValue();\n+\n+        final String result = (prependValue == null ? \"\" : prependValue) + (subjectValue == null ? \"\" : subjectValue);\n+        return new StringQueryResult(result);\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "19ed63ef711f5a94785c059ec4539ae57e87c628",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/ReplaceAllEvaluator.java",
            "status": "added",
            "additions": 55,
            "deletions": 0,
            "changes": 55,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FReplaceAllEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FReplaceAllEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FReplaceAllEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+\n+public class ReplaceAllEvaluator extends StringEvaluator {\n+\n+    private final StringEvaluator subject;\n+    private final StringEvaluator search;\n+    private final StringEvaluator replacement;\n+\n+    public ReplaceAllEvaluator(final StringEvaluator subject, final StringEvaluator search, final StringEvaluator replacement) {\n+        this.subject = subject;\n+        this.search = search;\n+        this.replacement = replacement;\n+    }\n+\n+    @Override\n+    public QueryResult<String> evaluate(final Map<String, String> attributes) {\n+        final String subjectValue = subject.evaluate(attributes).getValue();\n+        if (subjectValue == null) {\n+            return new StringQueryResult(null);\n+        }\n+        final String searchValue = search.evaluate(attributes).getValue();\n+        final String replacementValue = replacement.evaluate(attributes).getValue();\n+\n+        return new StringQueryResult(subjectValue.replaceAll(searchValue, replacementValue));\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "d6a7c5b7cc0ecd11dd41867900d34a606b77c49a",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/ReplaceEvaluator.java",
            "status": "added",
            "additions": 55,
            "deletions": 0,
            "changes": 55,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FReplaceEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FReplaceEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FReplaceEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+\n+public class ReplaceEvaluator extends StringEvaluator {\n+\n+    private final StringEvaluator subject;\n+    private final StringEvaluator search;\n+    private final StringEvaluator replacement;\n+\n+    public ReplaceEvaluator(final StringEvaluator subject, final StringEvaluator search, final StringEvaluator replacement) {\n+        this.subject = subject;\n+        this.search = search;\n+        this.replacement = replacement;\n+    }\n+\n+    @Override\n+    public QueryResult<String> evaluate(final Map<String, String> attributes) {\n+        final String subjectValue = subject.evaluate(attributes).getValue();\n+        if (subjectValue == null) {\n+            return new StringQueryResult(null);\n+        }\n+        final String searchValue = search.evaluate(attributes).getValue();\n+        final String replacementValue = replacement.evaluate(attributes).getValue();\n+\n+        return new StringQueryResult(subjectValue.replace(searchValue, replacementValue));\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "91333b727ba96703be78b99a5af12389b3aba9c9",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/ReplaceNullEvaluator.java",
            "status": "added",
            "additions": 47,
            "deletions": 0,
            "changes": 47,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FReplaceNullEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FReplaceNullEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FReplaceNullEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+\n+public class ReplaceNullEvaluator extends StringEvaluator {\n+\n+    private final StringEvaluator subject;\n+    private final StringEvaluator resultEvaluator;\n+\n+    public ReplaceNullEvaluator(final StringEvaluator subject, final StringEvaluator resultEvaluator) {\n+        this.subject = subject;\n+        this.resultEvaluator = resultEvaluator;\n+    }\n+\n+    @Override\n+    public QueryResult<String> evaluate(final Map<String, String> attributes) {\n+        final String subjectValue = subject.evaluate(attributes).getValue();\n+        return new StringQueryResult(subjectValue == null ? resultEvaluator.evaluate(attributes).getValue() : subjectValue);\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "c6a7eb7c725748ff09b363038c33d626eaf5efa6",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/StartsWithEvaluator.java",
            "status": "added",
            "additions": 53,
            "deletions": 0,
            "changes": 53,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FStartsWithEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FStartsWithEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FStartsWithEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+\n+public class StartsWithEvaluator extends BooleanEvaluator {\n+\n+    private final StringEvaluator subject;\n+    private final StringEvaluator search;\n+\n+    public StartsWithEvaluator(final StringEvaluator subject, final StringEvaluator search) {\n+        this.subject = subject;\n+        this.search = search;\n+    }\n+\n+    @Override\n+    public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {\n+        final String subjectValue = subject.evaluate(attributes).getValue();\n+        if (subjectValue == null) {\n+            return new BooleanQueryResult(false);\n+        }\n+\n+        final String searchString = search.evaluate(attributes).getValue();\n+        return new BooleanQueryResult(searchString == null ? false : subjectValue.startsWith(searchString));\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "a4e21a44a7726e73df4221340216231b10ab51f5",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/StringToDateEvaluator.java",
            "status": "added",
            "additions": 64,
            "deletions": 0,
            "changes": 64,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FStringToDateEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FStringToDateEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FStringToDateEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.DateEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.DateQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.exception.IllegalAttributeException;\n+\n+public class StringToDateEvaluator extends DateEvaluator {\n+\n+    private final StringEvaluator subject;\n+    private final StringEvaluator format;\n+\n+    public StringToDateEvaluator(final StringEvaluator subject, final StringEvaluator format) {\n+        this.subject = subject;\n+        this.format = format;\n+    }\n+\n+    @Override\n+    public QueryResult<Date> evaluate(final Map<String, String> attributes) {\n+        final String subjectValue = subject.evaluate(attributes).getValue();\n+        final String formatValue = format.evaluate(attributes).getValue();\n+        if (subjectValue == null || formatValue == null) {\n+            return new DateQueryResult(null);\n+        }\n+\n+        try {\n+            return new DateQueryResult(new SimpleDateFormat(formatValue).parse(subjectValue));\n+        } catch (final ParseException e) {\n+            throw new IllegalAttributeException(\"Cannot parse attribute value as a date; date format: \"\n+                    + formatValue + \"; attribute value: \" + subjectValue);\n+        } catch (final IllegalArgumentException e) {\n+            throw new IllegalAttributeException(\"Invalid date format: \" + formatValue);\n+        }\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "a8b7357d94833b9a077cc1f8256cd907fa0037cf",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/SubstringAfterEvaluator.java",
            "status": "added",
            "additions": 59,
            "deletions": 0,
            "changes": 59,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FSubstringAfterEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FSubstringAfterEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FSubstringAfterEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+\n+public class SubstringAfterEvaluator extends StringEvaluator {\n+\n+    private final StringEvaluator subject;\n+    private final StringEvaluator afterEvaluator;\n+\n+    public SubstringAfterEvaluator(final StringEvaluator subject, final StringEvaluator afterEvaluator) {\n+        this.subject = subject;\n+        this.afterEvaluator = afterEvaluator;\n+    }\n+\n+    @Override\n+    public QueryResult<String> evaluate(final Map<String, String> attributes) {\n+        final String subjectValue = subject.evaluate(attributes).getValue();\n+        if (subjectValue == null) {\n+            return new StringQueryResult(\"\");\n+        }\n+        final String afterValue = afterEvaluator.evaluate(attributes).getValue();\n+        if (afterValue == null || afterValue.length() == 0) {\n+            return new StringQueryResult(subjectValue);\n+        }\n+\n+        final int index = subjectValue.indexOf(afterValue);\n+        if (index < 0) {\n+            return new StringQueryResult(subjectValue);\n+        }\n+        return new StringQueryResult(subjectValue.substring(index + afterValue.length()));\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "3dac40ebe933efc4cd7b76e417a919263acb39d9",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/SubstringAfterLastEvaluator.java",
            "status": "added",
            "additions": 55,
            "deletions": 0,
            "changes": 55,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FSubstringAfterLastEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FSubstringAfterLastEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FSubstringAfterLastEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+\n+public class SubstringAfterLastEvaluator extends StringEvaluator {\n+\n+    private final StringEvaluator subject;\n+    private final StringEvaluator afterEvaluator;\n+\n+    public SubstringAfterLastEvaluator(final StringEvaluator subject, final StringEvaluator afterEvaluator) {\n+        this.subject = subject;\n+        this.afterEvaluator = afterEvaluator;\n+    }\n+\n+    @Override\n+    public QueryResult<String> evaluate(final Map<String, String> attributes) {\n+        final String subjectValue = subject.evaluate(attributes).getValue();\n+        if (subjectValue == null) {\n+            return new StringQueryResult(\"\");\n+        }\n+        final String afterValue = afterEvaluator.evaluate(attributes).getValue();\n+        final int index = subjectValue.lastIndexOf(afterValue);\n+        if (index < 0 || index >= subjectValue.length()) {\n+            return new StringQueryResult(subjectValue);\n+        }\n+        return new StringQueryResult(subjectValue.substring(index + afterValue.length()));\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "92b136cd837858e3ffed042358cb0392d46d7758",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/SubstringBeforeEvaluator.java",
            "status": "added",
            "additions": 58,
            "deletions": 0,
            "changes": 58,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FSubstringBeforeEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FSubstringBeforeEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FSubstringBeforeEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+\n+public class SubstringBeforeEvaluator extends StringEvaluator {\n+\n+    private final StringEvaluator subject;\n+    private final StringEvaluator beforeEvaluator;\n+\n+    public SubstringBeforeEvaluator(final StringEvaluator subject, final StringEvaluator beforeEvaluator) {\n+        this.subject = subject;\n+        this.beforeEvaluator = beforeEvaluator;\n+    }\n+\n+    @Override\n+    public QueryResult<String> evaluate(final Map<String, String> attributes) {\n+        final String subjectValue = subject.evaluate(attributes).getValue();\n+        if (subjectValue == null) {\n+            return new StringQueryResult(\"\");\n+        }\n+        final String beforeValue = beforeEvaluator.evaluate(attributes).getValue();\n+        if (beforeValue == null || beforeValue.length() == 0) {\n+            return new StringQueryResult(subjectValue);\n+        }\n+        final int index = subjectValue.indexOf(beforeValue);\n+        if (index < 0) {\n+            return new StringQueryResult(subjectValue);\n+        }\n+        return new StringQueryResult(subjectValue.substring(0, index));\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "818a3dc9f005cf3336ae86ff5d6aa5e78adae465",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/SubstringBeforeLastEvaluator.java",
            "status": "added",
            "additions": 55,
            "deletions": 0,
            "changes": 55,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FSubstringBeforeLastEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FSubstringBeforeLastEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FSubstringBeforeLastEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+\n+public class SubstringBeforeLastEvaluator extends StringEvaluator {\n+\n+    private final StringEvaluator subject;\n+    private final StringEvaluator beforeEvaluator;\n+\n+    public SubstringBeforeLastEvaluator(final StringEvaluator subject, final StringEvaluator beforeEvaluator) {\n+        this.subject = subject;\n+        this.beforeEvaluator = beforeEvaluator;\n+    }\n+\n+    @Override\n+    public QueryResult<String> evaluate(final Map<String, String> attributes) {\n+        final String subjectValue = subject.evaluate(attributes).getValue();\n+        if (subjectValue == null) {\n+            return new StringQueryResult(\"\");\n+        }\n+        final String beforeValue = beforeEvaluator.evaluate(attributes).getValue();\n+        final int index = subjectValue.lastIndexOf(beforeValue);\n+        if (index < 0) {\n+            return new StringQueryResult(subjectValue);\n+        }\n+        return new StringQueryResult(subjectValue.substring(0, index));\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "da11c45464a56f8ef8a2d193a854d4d724ca628d",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/SubstringEvaluator.java",
            "status": "added",
            "additions": 65,
            "deletions": 0,
            "changes": 65,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FSubstringEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FSubstringEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FSubstringEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+\n+public class SubstringEvaluator extends StringEvaluator {\n+\n+    private final StringEvaluator subject;\n+    private final NumberEvaluator startIndex;\n+    private final NumberEvaluator endIndex;\n+\n+    public SubstringEvaluator(final StringEvaluator subject, final NumberEvaluator startIndex, final NumberEvaluator endIndex) {\n+        this.subject = subject;\n+        this.startIndex = startIndex;\n+        this.endIndex = endIndex;\n+    }\n+\n+    public SubstringEvaluator(final StringEvaluator subject, final NumberEvaluator startIndex) {\n+        this.subject = subject;\n+        this.startIndex = startIndex;\n+        this.endIndex = null;\n+    }\n+\n+    @Override\n+    public QueryResult<String> evaluate(final Map<String, String> attributes) {\n+        final String subjectValue = subject.evaluate(attributes).getValue();\n+        if (subjectValue == null) {\n+            return new StringQueryResult(\"\");\n+        }\n+        final int startIndexValue = startIndex.evaluate(attributes).getValue().intValue();\n+        if (endIndex == null) {\n+            return new StringQueryResult(subjectValue.substring(startIndexValue));\n+        } else {\n+            final int endIndexValue = endIndex.evaluate(attributes).getValue().intValue();\n+            return new StringQueryResult(subjectValue.substring(startIndexValue, endIndexValue));\n+        }\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "7de01eb2f3f725591b0d4f424bf88a077996f74a",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/ToLowerEvaluator.java",
            "status": "added",
            "additions": 45,
            "deletions": 0,
            "changes": 45,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FToLowerEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FToLowerEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FToLowerEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+\n+public class ToLowerEvaluator extends StringEvaluator {\n+\n+    private final StringEvaluator subject;\n+\n+    public ToLowerEvaluator(final StringEvaluator subject) {\n+        this.subject = subject;\n+    }\n+\n+    @Override\n+    public QueryResult<String> evaluate(final Map<String, String> attributes) {\n+        final String subjectValue = subject.evaluate(attributes).getValue();\n+        return new StringQueryResult((subjectValue == null) ? null : subjectValue.toLowerCase());\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "1d4664acfed824698f95772bcd986b5e24544718",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/ToNumberEvaluator.java",
            "status": "added",
            "additions": 46,
            "deletions": 0,
            "changes": 46,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FToNumberEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FToNumberEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FToNumberEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+\n+public class ToNumberEvaluator extends NumberEvaluator {\n+\n+    private final StringEvaluator subject;\n+\n+    public ToNumberEvaluator(final StringEvaluator subject) {\n+        this.subject = subject;\n+    }\n+\n+    @Override\n+    public QueryResult<Long> evaluate(final Map<String, String> attributes) {\n+        final String subjectValue = subject.evaluate(attributes).getValue();\n+        return new NumberQueryResult((subjectValue == null || subjectValue.trim().isEmpty()) ? null : Long.valueOf(subjectValue));\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "aab094dcc5acc5984fd3273d4df2e0338d0c0719",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/ToRadixEvaluator.java",
            "status": "added",
            "additions": 77,
            "deletions": 0,
            "changes": 77,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FToRadixEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FToRadixEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FToRadixEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+\n+public class ToRadixEvaluator extends StringEvaluator {\n+\n+    private final NumberEvaluator numberEvaluator;\n+    private final NumberEvaluator radixEvaluator;\n+    private final NumberEvaluator minimumWidthEvaluator;\n+\n+    public ToRadixEvaluator(final NumberEvaluator subject, final NumberEvaluator radixEvaluator) {\n+        this(subject, radixEvaluator, null);\n+    }\n+\n+    public ToRadixEvaluator(final NumberEvaluator subject, final NumberEvaluator radixEvaluator, final NumberEvaluator minimumWidthEvaluator) {\n+        this.numberEvaluator = subject;\n+        this.radixEvaluator = radixEvaluator;\n+        this.minimumWidthEvaluator = minimumWidthEvaluator;\n+    }\n+\n+    @Override\n+    public QueryResult<String> evaluate(final Map<String, String> attributes) {\n+        final Long result = numberEvaluator.evaluate(attributes).getValue();\n+        if (result == null) {\n+            return new StringQueryResult(null);\n+        }\n+\n+        final Long radix = radixEvaluator.evaluate(attributes).getValue();\n+        if (radix == null) {\n+            return new StringQueryResult(null);\n+        }\n+\n+        String stringValue = Long.toString(result.longValue(), radix.intValue());\n+        if (minimumWidthEvaluator != null) {\n+            final Long minimumWidth = minimumWidthEvaluator.evaluate(attributes).getValue();\n+            if (minimumWidth != null) {\n+                final int paddingWidth = minimumWidth.intValue() - stringValue.length();\n+                if (paddingWidth > 0) {\n+                    final char[] padChars = new char[paddingWidth];\n+                    Arrays.fill(padChars, '0');\n+                    stringValue = String.valueOf(padChars) + stringValue;\n+                }\n+            }\n+        }\n+\n+        return new StringQueryResult(stringValue);\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return numberEvaluator;\n+    }\n+\n+}"
        },
        {
            "sha": "2f7fbe360f3e46e68814d9b06ba99f95733bbc36",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/ToStringEvaluator.java",
            "status": "added",
            "additions": 45,
            "deletions": 0,
            "changes": 45,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FToStringEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FToStringEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FToStringEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+\n+public class ToStringEvaluator extends StringEvaluator {\n+\n+    private final Evaluator<?> subject;\n+\n+    public ToStringEvaluator(final Evaluator<?> subject) {\n+        this.subject = subject;\n+    }\n+\n+    @Override\n+    public QueryResult<String> evaluate(final Map<String, String> attributes) {\n+        final Object result = subject.evaluate(attributes).getValue();\n+        return new StringQueryResult(result == null ? null : result.toString());\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "29bc61d9a42f14fdf7b52e3bccebee457c92604f",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/ToUpperEvaluator.java",
            "status": "added",
            "additions": 45,
            "deletions": 0,
            "changes": 45,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FToUpperEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FToUpperEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FToUpperEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+\n+public class ToUpperEvaluator extends StringEvaluator {\n+\n+    private final StringEvaluator subject;\n+\n+    public ToUpperEvaluator(final StringEvaluator subject) {\n+        this.subject = subject;\n+    }\n+\n+    @Override\n+    public QueryResult<String> evaluate(final Map<String, String> attributes) {\n+        final String subjectValue = subject.evaluate(attributes).getValue();\n+        return new StringQueryResult((subjectValue == null) ? null : subjectValue.toUpperCase());\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "b9926d7e34f766333f4f46b1fbf3a80bd04def80",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/TrimEvaluator.java",
            "status": "added",
            "additions": 45,
            "deletions": 0,
            "changes": 45,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FTrimEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FTrimEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FTrimEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+\n+public class TrimEvaluator extends StringEvaluator {\n+\n+    private final StringEvaluator subject;\n+\n+    public TrimEvaluator(final StringEvaluator subject) {\n+        this.subject = subject;\n+    }\n+\n+    @Override\n+    public QueryResult<String> evaluate(Map<String, String> attributes) {\n+        final String subjectValue = subject.evaluate(attributes).getValue();\n+        return new StringQueryResult(subjectValue == null ? null : subjectValue.trim());\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "6c3ba14bc6fa0eae8994d4a928f16beb9def5f00",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/UrlDecodeEvaluator.java",
            "status": "added",
            "additions": 55,
            "deletions": 0,
            "changes": 55,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FUrlDecodeEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FUrlDecodeEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FUrlDecodeEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLDecoder;\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+\n+public class UrlDecodeEvaluator extends StringEvaluator {\n+\n+    private final StringEvaluator subject;\n+\n+    public UrlDecodeEvaluator(final StringEvaluator subject) {\n+        this.subject = subject;\n+    }\n+\n+    @Override\n+    public QueryResult<String> evaluate(final Map<String, String> attributes) {\n+        final String subjectValue = subject.evaluate(attributes).getValue();\n+        if (subjectValue == null) {\n+            return new StringQueryResult(null);\n+        }\n+\n+        try {\n+            return new StringQueryResult(URLDecoder.decode(subjectValue, \"UTF-8\"));\n+        } catch (UnsupportedEncodingException e) {\n+            return null;    // won't happen. It's UTF-8\n+        }\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "d1e2caa5b654f1b373c817ff1ec16271798dc6b0",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/UrlEncodeEvaluator.java",
            "status": "added",
            "additions": 55,
            "deletions": 0,
            "changes": 55,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FUrlEncodeEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FUrlEncodeEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FUrlEncodeEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+\n+public class UrlEncodeEvaluator extends StringEvaluator {\n+\n+    private final StringEvaluator subject;\n+\n+    public UrlEncodeEvaluator(final StringEvaluator subject) {\n+        this.subject = subject;\n+    }\n+\n+    @Override\n+    public QueryResult<String> evaluate(final Map<String, String> attributes) {\n+        final String subjectValue = subject.evaluate(attributes).getValue();\n+        if (subjectValue == null) {\n+            return new StringQueryResult(null);\n+        }\n+\n+        try {\n+            return new StringQueryResult(URLEncoder.encode(subjectValue, \"UTF-8\"));\n+        } catch (UnsupportedEncodingException e) {\n+            return null;    // won't happen. It's UTF-8\n+        }\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return subject;\n+    }\n+\n+}"
        },
        {
            "sha": "faa8f0ade1b615e0727467f3a64ae0409e456be4",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/UuidEvaluator.java",
            "status": "added",
            "additions": 39,
            "deletions": 0,
            "changes": 39,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FUuidEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FUuidEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Ffunctions%2FUuidEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.functions;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+\n+public class UuidEvaluator extends StringEvaluator {\n+\n+    @Override\n+    public QueryResult<String> evaluate(final Map<String, String> attributes) {\n+        return new StringQueryResult(UUID.randomUUID().toString());\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return null;\n+    }\n+\n+}"
        },
        {
            "sha": "a0854233969c5810e31dd00556f203fa812da13d",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/literals/BooleanLiteralEvaluator.java",
            "status": "added",
            "additions": 44,
            "deletions": 0,
            "changes": 44,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fliterals%2FBooleanLiteralEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fliterals%2FBooleanLiteralEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fliterals%2FBooleanLiteralEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.literals;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+\n+public class BooleanLiteralEvaluator extends BooleanEvaluator {\n+\n+    private final boolean value;\n+\n+    public BooleanLiteralEvaluator(final boolean value) {\n+        this.value = value;\n+    }\n+\n+    @Override\n+    public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {\n+        return new BooleanQueryResult(value);\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return null;\n+    }\n+\n+}"
        },
        {
            "sha": "d7569e026f7c48298faad9bfdbd6bcafd0e9114c",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/literals/NumberLiteralEvaluator.java",
            "status": "added",
            "additions": 44,
            "deletions": 0,
            "changes": 44,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fliterals%2FNumberLiteralEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fliterals%2FNumberLiteralEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fliterals%2FNumberLiteralEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.literals;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.NumberQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+\n+public class NumberLiteralEvaluator extends NumberEvaluator {\n+\n+    private final long literal;\n+\n+    public NumberLiteralEvaluator(final String value) {\n+        this.literal = Long.parseLong(value);\n+    }\n+\n+    @Override\n+    public QueryResult<Long> evaluate(final Map<String, String> attributes) {\n+        return new NumberQueryResult(literal);\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return null;\n+    }\n+\n+}"
        },
        {
            "sha": "d739ac7c68f1d6fa2102d51af0b1d29760bd0bcb",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/literals/StringLiteralEvaluator.java",
            "status": "added",
            "additions": 77,
            "deletions": 0,
            "changes": 77,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fliterals%2FStringLiteralEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fliterals%2FStringLiteralEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fliterals%2FStringLiteralEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.literals;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+\n+public class StringLiteralEvaluator extends StringEvaluator {\n+\n+    private final String value;\n+\n+    public StringLiteralEvaluator(final String value) {\n+        // need to escape characters after backslashes\n+        final StringBuilder sb = new StringBuilder();\n+        boolean lastCharIsBackslash = false;\n+        for (int i = 0; i < value.length(); i++) {\n+            final char c = value.charAt(i);\n+\n+            if (lastCharIsBackslash) {\n+                switch (c) {\n+                    case 'n':\n+                        sb.append(\"\\n\");\n+                        break;\n+                    case 'r':\n+                        sb.append(\"\\r\");\n+                        break;\n+                    case '\\\\':\n+                        sb.append(\"\\\\\");\n+                        break;\n+                    case 't':\n+                        sb.append(\"\\\\t\");\n+                        break;\n+                    default:\n+                        sb.append(\"\\\\\").append(c);\n+                        break;\n+                }\n+\n+                lastCharIsBackslash = false;\n+            } else if (c == '\\\\') {\n+                lastCharIsBackslash = true;\n+            } else {\n+                sb.append(c);\n+            }\n+        }\n+\n+        this.value = sb.toString();\n+    }\n+\n+    @Override\n+    public QueryResult<String> evaluate(final Map<String, String> attributes) {\n+        return new StringQueryResult(value);\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return null;\n+    }\n+\n+}"
        },
        {
            "sha": "d9dd4d3a1ba6fc7701f64e1492133731738d95a2",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/selection/AllAttributesEvaluator.java",
            "status": "added",
            "additions": 68,
            "deletions": 0,
            "changes": 68,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fselection%2FAllAttributesEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fselection%2FAllAttributesEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fselection%2FAllAttributesEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.selection;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+\n+public class AllAttributesEvaluator extends BooleanEvaluator {\n+\n+    private final BooleanEvaluator booleanEvaluator;\n+    private final MultiAttributeEvaluator multiAttributeEvaluator;\n+\n+    public AllAttributesEvaluator(final BooleanEvaluator booleanEvaluator, final MultiAttributeEvaluator multiAttributeEvaluator) {\n+        this.booleanEvaluator = booleanEvaluator;\n+        this.multiAttributeEvaluator = multiAttributeEvaluator;\n+    }\n+\n+    @Override\n+    public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {\n+        QueryResult<Boolean> attributeValueQuery = booleanEvaluator.evaluate(attributes);\n+        Boolean result = attributeValueQuery.getValue();\n+        if (result == null) {\n+            return new BooleanQueryResult(false);\n+        }\n+\n+        if (!result) {\n+            return new BooleanQueryResult(false);\n+        }\n+\n+        while (multiAttributeEvaluator.getEvaluationsRemaining() > 0) {\n+            attributeValueQuery = booleanEvaluator.evaluate(attributes);\n+            result = attributeValueQuery.getValue();\n+            if (result != null && !result) {\n+                return attributeValueQuery;\n+            }\n+        }\n+\n+        return new BooleanQueryResult(true);\n+    }\n+\n+    @Override\n+    public int getEvaluationsRemaining() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return null;\n+    }\n+}"
        },
        {
            "sha": "9192958164e54065ae79df80b3de8ec81eff6c3c",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/selection/AnyAttributeEvaluator.java",
            "status": "added",
            "additions": 68,
            "deletions": 0,
            "changes": 68,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fselection%2FAnyAttributeEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fselection%2FAnyAttributeEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fselection%2FAnyAttributeEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.selection;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+\n+public class AnyAttributeEvaluator extends BooleanEvaluator {\n+\n+    private final BooleanEvaluator booleanEvaluator;\n+    private final MultiAttributeEvaluator multiAttributeEvaluator;\n+\n+    public AnyAttributeEvaluator(final BooleanEvaluator booleanEvaluator, final MultiAttributeEvaluator multiAttributeEvaluator) {\n+        this.booleanEvaluator = booleanEvaluator;\n+        this.multiAttributeEvaluator = multiAttributeEvaluator;\n+    }\n+\n+    @Override\n+    public QueryResult<Boolean> evaluate(final Map<String, String> attributes) {\n+        QueryResult<Boolean> attributeValueQuery = booleanEvaluator.evaluate(attributes);\n+        Boolean result = attributeValueQuery.getValue();\n+        if (result == null) {\n+            return new BooleanQueryResult(false);\n+        }\n+\n+        if (result) {\n+            return new BooleanQueryResult(true);\n+        }\n+\n+        while (multiAttributeEvaluator.getEvaluationsRemaining() > 0) {\n+            attributeValueQuery = booleanEvaluator.evaluate(attributes);\n+            result = attributeValueQuery.getValue();\n+            if (result != null && result) {\n+                return attributeValueQuery;\n+            }\n+        }\n+\n+        return new BooleanQueryResult(false);\n+    }\n+\n+    @Override\n+    public int getEvaluationsRemaining() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return null;\n+    }\n+}"
        },
        {
            "sha": "8c07278c3a6e8306abc526830b488fd731ea52fc",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/selection/AnyMatchingAttributeEvaluator.java",
            "status": "added",
            "additions": 21,
            "deletions": 0,
            "changes": 21,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fselection%2FAnyMatchingAttributeEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fselection%2FAnyMatchingAttributeEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fselection%2FAnyMatchingAttributeEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,21 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.selection;\n+\n+public class AnyMatchingAttributeEvaluator {\n+\n+}"
        },
        {
            "sha": "209c86f3a5b901a41b8968fc39dcb869b3e6fa5c",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/selection/DelineatedAttributeEvaluator.java",
            "status": "added",
            "additions": 83,
            "deletions": 0,
            "changes": 83,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fselection%2FDelineatedAttributeEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fselection%2FDelineatedAttributeEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fselection%2FDelineatedAttributeEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.selection;\n+\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+\n+public class DelineatedAttributeEvaluator extends MultiAttributeEvaluator {\n+\n+    private final StringEvaluator subjectEvaluator;\n+    private final StringEvaluator delimiterEvaluator;\n+    private final int evaluationType;\n+    private String[] delineatedValues;\n+    private int evaluationCount = 0;\n+    private int evaluationsLeft = 1;\n+\n+    public DelineatedAttributeEvaluator(final StringEvaluator subjectEvaluator, final StringEvaluator delimiterEvaluator, final int evaluationType) {\n+        this.subjectEvaluator = subjectEvaluator;\n+        this.delimiterEvaluator = delimiterEvaluator;\n+        this.evaluationType = evaluationType;\n+    }\n+\n+    @Override\n+    public QueryResult<String> evaluate(final Map<String, String> attributes) {\n+        if (delineatedValues == null) {\n+            final QueryResult<String> subjectValue = subjectEvaluator.evaluate(attributes);\n+            if (subjectValue.getValue() == null) {\n+                evaluationsLeft = 0;\n+                return new StringQueryResult(null);\n+            }\n+\n+            final QueryResult<String> delimiterValue = delimiterEvaluator.evaluate(attributes);\n+            if (subjectValue.getValue() == null) {\n+                evaluationsLeft = 0;\n+                return new StringQueryResult(null);\n+            }\n+\n+            delineatedValues = subjectValue.getValue().split(delimiterValue.getValue());\n+        }\n+\n+        if (evaluationCount > delineatedValues.length) {\n+            evaluationsLeft = 0;\n+            return new StringQueryResult(null);\n+        }\n+\n+        evaluationsLeft = delineatedValues.length - evaluationCount - 1;\n+\n+        return new StringQueryResult(delineatedValues[evaluationCount++]);\n+    }\n+\n+    @Override\n+    public int getEvaluationsRemaining() {\n+        return evaluationsLeft;\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return null;\n+    }\n+\n+    @Override\n+    public int getEvaluationType() {\n+        return evaluationType;\n+    }\n+}"
        },
        {
            "sha": "f80ed972b91647e330cbe90e3334cdbe6f49d4ec",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/selection/MultiAttributeEvaluator.java",
            "status": "added",
            "additions": 24,
            "deletions": 0,
            "changes": 24,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fselection%2FMultiAttributeEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fselection%2FMultiAttributeEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fselection%2FMultiAttributeEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,24 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.selection;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;\n+\n+public abstract class MultiAttributeEvaluator extends StringEvaluator {\n+\n+    public abstract int getEvaluationType();\n+}"
        },
        {
            "sha": "9a441ce35b8a1c57bce3f7f476e6b69100cf53bf",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/selection/MultiMatchAttributeEvaluator.java",
            "status": "added",
            "additions": 82,
            "deletions": 0,
            "changes": 82,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fselection%2FMultiMatchAttributeEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fselection%2FMultiMatchAttributeEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fselection%2FMultiMatchAttributeEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.selection;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+\n+public class MultiMatchAttributeEvaluator extends MultiAttributeEvaluator {\n+\n+    private final List<Pattern> attributePatterns;\n+    private final int evaluationType;\n+    private final List<String> attributeNames = new ArrayList<>();\n+    private int evaluationCount = 0;\n+\n+    public MultiMatchAttributeEvaluator(final List<String> attributeRegexes, final int evaluationType) {\n+        this.attributePatterns = new ArrayList<>();\n+        for (final String regex : attributeRegexes) {\n+            attributePatterns.add(Pattern.compile(regex));\n+        }\n+\n+        this.evaluationType = evaluationType;\n+    }\n+\n+    /**\n+     * Can be called only after the first call to evaluate\n+     *\n+     * @return\n+     */\n+    @Override\n+    public int getEvaluationsRemaining() {\n+        return attributeNames.size() - evaluationCount;\n+    }\n+\n+    @Override\n+    public QueryResult<String> evaluate(final Map<String, String> attributes) {\n+        if (evaluationCount == 0) {\n+            for (final Pattern pattern : attributePatterns) {\n+                for (final String attrName : attributes.keySet()) {\n+                    if (pattern.matcher(attrName).matches()) {\n+                        attributeNames.add(attrName);\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (evaluationCount >= attributeNames.size()) {\n+            return new StringQueryResult(null);\n+        }\n+\n+        return new StringQueryResult(attributes.get(attributeNames.get(evaluationCount++)));\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return null;\n+    }\n+\n+    @Override\n+    public int getEvaluationType() {\n+        return evaluationType;\n+    }\n+}"
        },
        {
            "sha": "6dabc0abe3fca1dac9848b1f469ae86108aba4af",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/selection/MultiNamedAttributeEvaluator.java",
            "status": "added",
            "additions": 64,
            "deletions": 0,
            "changes": 64,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fselection%2FMultiNamedAttributeEvaluator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fselection%2FMultiNamedAttributeEvaluator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fevaluation%2Fselection%2FMultiNamedAttributeEvaluator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.evaluation.selection;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;\n+\n+public class MultiNamedAttributeEvaluator extends MultiAttributeEvaluator {\n+\n+    private final List<String> attributeNames;\n+    private final int evaluationType;\n+    private int evaluationCount = 0;\n+    private List<String> matchingAttributeNames = null;\n+\n+    public MultiNamedAttributeEvaluator(final List<String> attributeNames, final int evaluationType) {\n+        this.attributeNames = attributeNames;\n+        this.evaluationType = evaluationType;\n+    }\n+\n+    @Override\n+    public QueryResult<String> evaluate(final Map<String, String> attributes) {\n+        matchingAttributeNames = new ArrayList<>(attributeNames);\n+\n+        if (matchingAttributeNames.size() <= evaluationCount) {\n+            return new StringQueryResult(null);\n+        }\n+\n+        return new StringQueryResult(attributes.get(matchingAttributeNames.get(evaluationCount++)));\n+    }\n+\n+    @Override\n+    public int getEvaluationsRemaining() {\n+        return matchingAttributeNames.size() - evaluationCount;\n+    }\n+\n+    @Override\n+    public Evaluator<?> getSubjectEvaluator() {\n+        return null;\n+    }\n+\n+    @Override\n+    public int getEvaluationType() {\n+        return evaluationType;\n+    }\n+}"
        },
        {
            "sha": "47d42cb7ff955f274823b8730b141d5d4dee70aa",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/exception/AttributeExpressionLanguageException.java",
            "status": "added",
            "additions": 34,
            "deletions": 0,
            "changes": 34,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fexception%2FAttributeExpressionLanguageException.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fexception%2FAttributeExpressionLanguageException.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fexception%2FAttributeExpressionLanguageException.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.exception;\n+\n+public class AttributeExpressionLanguageException extends RuntimeException {\n+\n+    private static final long serialVersionUID = -5637284498692447901L;\n+\n+    public AttributeExpressionLanguageException(final String explanation) {\n+        super(explanation);\n+    }\n+\n+    public AttributeExpressionLanguageException(final String explanation, final Throwable t) {\n+        super(explanation, t);\n+    }\n+\n+    public AttributeExpressionLanguageException(final Throwable t) {\n+        super(t);\n+    }\n+}"
        },
        {
            "sha": "f8531cb052b07ba83ccfcbdd95a6ac763f5f185c",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/exception/AttributeExpressionLanguageParsingException.java",
            "status": "added",
            "additions": 34,
            "deletions": 0,
            "changes": 34,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fexception%2FAttributeExpressionLanguageParsingException.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fexception%2FAttributeExpressionLanguageParsingException.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fexception%2FAttributeExpressionLanguageParsingException.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.exception;\n+\n+public class AttributeExpressionLanguageParsingException extends AttributeExpressionLanguageException {\n+\n+    private static final long serialVersionUID = 7422163230677064726L;\n+\n+    public AttributeExpressionLanguageParsingException(final String explanation) {\n+        super(explanation);\n+    }\n+\n+    public AttributeExpressionLanguageParsingException(final String explanation, final Throwable t) {\n+        super(explanation, t);\n+    }\n+\n+    public AttributeExpressionLanguageParsingException(final Throwable t) {\n+        super(t);\n+    }\n+}"
        },
        {
            "sha": "4a9a9c50b909841860e85c0c82a353ff16d21eeb",
            "filename": "commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/exception/IllegalAttributeException.java",
            "status": "added",
            "additions": 28,
            "deletions": 0,
            "changes": 28,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fexception%2FIllegalAttributeException.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fexception%2FIllegalAttributeException.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2Fexception%2FIllegalAttributeException.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language.exception;\n+\n+public class IllegalAttributeException extends RuntimeException {\n+\n+    public IllegalAttributeException() {\n+        super();\n+    }\n+\n+    public IllegalAttributeException(final String explanation) {\n+        super(explanation);\n+    }\n+}"
        },
        {
            "sha": "a2b72141bb3b7f13d28bb6c990f41565ea98707b",
            "filename": "commons/nifi-expression-language/src/test/java/org/apache/nifi/attribute/expression/language/TestQuery.java",
            "status": "added",
            "additions": 1068,
            "deletions": 0,
            "changes": 1068,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2FTestQuery.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2FTestQuery.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2FTestQuery.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,1068 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.nifi.attribute.expression.language.Query.Range;\n+import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;\n+import org.apache.nifi.attribute.expression.language.exception.AttributeExpressionLanguageParsingException;\n+import org.apache.nifi.expression.AttributeExpression.ResultType;\n+import org.apache.nifi.flowfile.FlowFile;\n+\n+import org.antlr.runtime.tree.Tree;\n+import org.junit.Assert;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+public class TestQuery {\n+\n+    @Test\n+    public void testCompilation() {\n+        assertInvalid(\"${attr:uuid()}\");\n+        assertInvalid(\"${attr:indexOf(length())}\");\n+        assertValid(\"${UUID()}\");\n+        assertInvalid(\"${UUID():nextInt()}\");\n+        assertValid(\"${nextInt()}\");\n+        assertValid(\"${now():format('yyyy/MM/dd')}\");\n+        assertInvalid(\"${attr:times(3)}\");\n+        assertValid(\"${attr:toNumber():multiply(3)}\");\n+        // left here because it's convenient for looking at the output\n+        //System.out.println(Query.compile(\"\").evaluate(null));\n+    }\n+    \n+    private void assertValid(final String query) {\n+        try {\n+            Query.compile(query);\n+        } catch (final Exception e) {\n+            e.printStackTrace();\n+            Assert.fail(\"Expected query to be valid, but it failed to compile due to \" + e);\n+        }\n+    }\n+    \n+    private void assertInvalid(final String query) {\n+        try {\n+            Query.compile(query);\n+            Assert.fail(\"Expected query to be invalid, but it did compile\");\n+        } catch (final Exception e) {\n+        }\n+    }\n+    \n+    @Test\n+    public void testIsValidExpression() {\n+        Query.validateExpression(\"${abc:substring(${xyz:length()})}\", false);\n+        Query.isValidExpression(\"${now():format('yyyy-MM-dd')}\");\n+        \n+        \n+        try {\n+            Query.validateExpression(\"$${attr}\", false);\n+            Assert.fail(\"invalid query validated\");\n+        } catch (final AttributeExpressionLanguageParsingException e) {\n+        }\n+        \n+        Query.validateExpression(\"$${attr}\", true);\n+        \n+        Query.validateExpression(\"${filename:startsWith('T8MTXBC')\\n\" \n+            + \":or( ${filename:startsWith('C4QXABC')} )\\n\"\n+            + \":or( ${filename:startsWith('U6CXEBC')} )\"\n+            + \":or( ${filename:startsWith('KYM3ABC')} )}\", false);\n+    }\n+\n+    \n+    @Test\n+    public void testCompileEmbedded() {\n+        final String expression = \"${x:equals( ${y} )}\";\n+        final Query query = Query.compile(expression);\n+        final Tree tree = query.getTree();\n+        System.out.println( printTree(tree) );\n+        \n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"x\", \"x\");\n+        attributes.put(\"y\", \"x\");\n+        final String result = Query.evaluateExpressions(expression, attributes, null);\n+        assertEquals(\"true\", result);\n+        \n+        Query.validateExpression(expression, false);\n+    }\n+    \n+    private String printTree(final Tree tree) {\n+        final StringBuilder sb = new StringBuilder();\n+        printTree(tree, 0, sb);\n+        \n+        return sb.toString();\n+    }\n+    \n+    private void printTree(final Tree tree, final int spaces, final StringBuilder sb) {\n+        for (int i=0; i < spaces; i++) {\n+            sb.append(\" \");\n+        }\n+        \n+        if ( tree.getText().trim().isEmpty() ) {\n+            sb.append(tree.toString()).append(\"\\n\");\n+        } else {\n+            sb.append(tree.getText()).append(\"\\n\");\n+        }\n+        \n+        for (int i=0; i < tree.getChildCount(); i++) {\n+            printTree(tree.getChild(i), spaces + 2, sb);\n+        }\n+    }\n+\n+    @Test\n+    public void testEscape() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"attr\", \"My Value\");\n+        attributes.put(\"${xx}\", \"hello\");\n+        \n+        assertEquals(\"My Value\", evaluateQueryForEscape(\"${attr}\", attributes));\n+        assertEquals(\"${attr}\", evaluateQueryForEscape(\"$${attr}\", attributes));\n+        assertEquals(\"$My Value\", evaluateQueryForEscape(\"$$${attr}\", attributes));\n+        assertEquals(\"$${attr}\", evaluateQueryForEscape(\"$$$${attr}\", attributes));\n+        assertEquals(\"$$My Value\", evaluateQueryForEscape(\"$$$$${attr}\", attributes));\n+    }\n+\n+    @Test\n+    public void testWithBackSlashes() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"x\", \"C:\\\\test\\\\1.txt\");\n+        attributes.put(\"y\", \"y\\ny\");\n+        \n+        final String query = \"${x:substringAfterLast( '/' ):substringAfterLast( '\\\\\\\\' )}\";\n+        verifyEquals(query, attributes, \"1.txt\");\n+        attributes.put(\"x\", \"C:/test/1.txt\");\n+        verifyEquals(query, attributes, \"1.txt\");\n+        \n+        verifyEquals(\"${y:equals('y\\\\ny')}\", attributes, Boolean.TRUE);\n+    }\n+    \n+    @Test\n+    public void testWithTicksOutside() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"attr\", \"My Value\");\n+\n+        assertEquals(1, Query.extractExpressionRanges(\"\\\"${attr}\").size());\n+        assertEquals(1, Query.extractExpressionRanges(\"'${attr}\").size());\n+        assertEquals(1, Query.extractExpressionRanges(\"'${attr}'\").size());\n+        assertEquals(1, Query.extractExpressionRanges(\"${attr}\").size());\n+\n+        assertEquals(\"'My Value'\", Query.evaluateExpressions(\"'${attr}'\", attributes, null));\n+        assertEquals(\"'My Value\", Query.evaluateExpressions(\"'${attr}\", attributes, null));\n+    }\n+\n+    \n+    @Test\n+    @Ignore(\"Depends on TimeZone\")\n+    public void testDateToNumber() {\n+        final Query query = Query.compile(\"${dateTime:toDate('yyyy/MM/dd HH:mm:ss.SSS'):toNumber()}\");\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"dateTime\", \"2013/11/18 10:22:27.678\");\n+        \n+        final QueryResult<?> result = query.evaluate(attributes);\n+        assertEquals(ResultType.NUMBER, result.getResultType());\n+        assertEquals(1384788147678L, result.getValue());\n+    }\n+\n+    @Test\n+    public void testAddOneDayToDate() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"dateTime\", \"2013/11/18 10:22:27.678\");\n+\n+        verifyEquals(\"${dateTime:toDate('yyyy/MM/dd HH:mm:ss.SSS'):toNumber():plus(86400000):toDate():format('yyyy/MM/dd HH:mm:ss.SSS')}\", attributes, \"2013/11/19 10:22:27.678\");\n+    }\n+\n+    @Test\n+    public void implicitDateConversion() {\n+        final Date date = new Date();\n+        final Query query = Query.compile(\"${dateTime:format('yyyy/MM/dd HH:mm:ss.SSS')}\");\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"dateTime\", date.toString());\n+        \n+        // the date.toString() above will end up truncating the milliseconds. So remove millis from the Date before\n+        // formatting it\n+        final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss.SSS\");\n+        final long millis = date.getTime() % 1000L;\n+        final Date roundedToNearestSecond = new Date(date.getTime() - millis);\n+        final String formatted = sdf.format(roundedToNearestSecond);\n+        \n+        final QueryResult<?> result = query.evaluate(attributes);\n+        assertEquals(ResultType.STRING, result.getResultType());\n+        assertEquals(formatted, result.getValue());\n+    }\n+\n+    \n+    @Test\n+    public void testEmbeddedExpressionsAndQuotes() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"x\", \"abc\");\n+        attributes.put(\"a\", \"abc\");\n+        \n+        verifyEquals(\"${x:equals(${a})}\", attributes, true);\n+        \n+        Query.validateExpression(\"${x:equals('${a}')}\", false);\n+        assertEquals(\"true\", Query.evaluateExpressions(\"${x:equals('${a}')}\", attributes, null));\n+        \n+        Query.validateExpression(\"${x:equals(\\\"${a}\\\")}\", false);\n+        assertEquals(\"true\", Query.evaluateExpressions(\"${x:equals(\\\"${a}\\\")}\", attributes, null));\n+    }\n+    \n+    \n+    @Test\n+    public void testCurlyBracesInQuotes() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"attr\", \"My Valuee\");\n+        \n+        assertEquals(\"Val\", evaluateQueryForEscape(\"${attr:replaceAll('My (Val)ue{1,2}', '$1')}\", attributes));\n+        assertEquals(\"Val\", evaluateQueryForEscape(\"${attr:replaceAll(\\\"My (Val)ue{1,2}\\\", '$1')}\", attributes));\n+    }\n+    \n+    \n+    private String evaluateQueryForEscape(final String queryString, final Map<String, String> attributes) {\n+        FlowFile mockFlowFile = Mockito.mock(FlowFile.class);\n+        Mockito.when(mockFlowFile.getAttributes()).thenReturn(attributes);\n+        Mockito.when(mockFlowFile.getId()).thenReturn(1L);\n+        Mockito.when(mockFlowFile.getEntryDate()).thenReturn(System.currentTimeMillis());\n+        Mockito.when(mockFlowFile.getSize()).thenReturn(1L);\n+        Mockito.when(mockFlowFile.getLineageIdentifiers()).thenReturn(new HashSet<String>());\n+        Mockito.when(mockFlowFile.getLineageStartDate()).thenReturn(System.currentTimeMillis());\n+        return Query.evaluateExpressions(queryString, mockFlowFile);\n+    }\n+    \n+    \n+    @Test\n+    public void testGetAttributeValue() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"attr\", \"My Value\");\n+        verifyEquals(\"${attr}\", attributes, \"My Value\");\n+    }\n+    \n+    @Test\n+    public void testGetAttributeValueEmbedded() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"attr\", \"XX \");\n+        attributes.put(\"XX\", \"My Value\");\n+        verifyEquals(\"${${attr:trim()}}\", attributes, \"My Value\");\n+    }\n+    \n+    @Test\n+    public void testSimpleSubstring() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"attr\", \"My Value\");\n+        verifyEquals(\"${attr:substring(2, 5)}\", attributes, \" Va\");\n+    }\n+    \n+    @Test\n+    public void testCallToFunctionWithSubjectResultOfAnotherFunctionCall() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"attr\", \"   My Value   \");\n+        verifyEquals(\"${attr:trim():substring(2, 5)}\", attributes, \" Va\");\n+    }\n+\n+    @Test\n+    public void testProblematic1() {\n+        // There was a bug that prevented this expression from compiling. This test just verifies that it now compiles.\n+        final String queryString = \"${xx:append( \\\"120101\\\" ):toDate( 'yyMMddHHmmss' ):format( \\\"yy-MM-dd\u2019T\u2019HH:mm:ss\\\") }\";\n+        Query.compile(queryString);\n+    }\n+\n+    @Test\n+    public void testEquals() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"attr\", \" XX    \");\n+        verifyEquals(\"${attr:trim():equals('XX')}\", attributes, true);\n+    }\n+    \n+    @Test\n+    public void testDeeplyEmbedded() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"x\", \"false\");\n+        attributes.put(\"abc\", \"a\");\n+        attributes.put(\"a\", \"a\");\n+        \n+        verifyEquals(\"${x:or( ${${abc}:length():equals(1)} )}\", attributes, true);\n+    }\n+    \n+    \n+    @Test\n+    public void testExtractExpressionRanges() {\n+        List<Range> ranges = Query.extractExpressionRanges(\"hello\");\n+        assertTrue(ranges.isEmpty());\n+        \n+        ranges = Query.extractExpressionRanges(\"${hello\");\n+        assertTrue(ranges.isEmpty());\n+        \n+        ranges = Query.extractExpressionRanges(\"hello}\");\n+        assertTrue(ranges.isEmpty());\n+        \n+        ranges = Query.extractExpressionRanges(\"$${hello\");\n+        assertTrue(ranges.isEmpty());\n+\n+        ranges = Query.extractExpressionRanges(\"$he{ll}o\");\n+        assertTrue(ranges.isEmpty());\n+\n+        ranges = Query.extractExpressionRanges(\"${hello}\");\n+        assertEquals(1, ranges.size());\n+        Range range = ranges.get(0);\n+        assertEquals(0, range.getStart());\n+        assertEquals(7, range.getEnd());\n+        \n+        ranges = Query.extractExpressionRanges(\"${hello:equals( ${goodbye} )}\");\n+        assertEquals(1, ranges.size());\n+        range = ranges.get(0);\n+        assertEquals(0, range.getStart());\n+        assertEquals(28, range.getEnd());\n+        \n+        ranges = Query.extractExpressionRanges(\"${hello:equals( $${goodbye} )}\");\n+        assertEquals(1, ranges.size());\n+        range = ranges.get(0);\n+        assertEquals(0, range.getStart());\n+        assertEquals(29, range.getEnd());\n+        \n+        ranges = Query.extractExpressionRanges(\"${hello:equals( $${goodbye} )} or just hi, ${bob:or(${jerry})}\");\n+        assertEquals(2, ranges.size());\n+        range = ranges.get(0);\n+        assertEquals(0, range.getStart());\n+        assertEquals(29, range.getEnd());\n+        \n+        range = ranges.get(1);\n+        assertEquals(43, range.getStart());\n+        assertEquals(61, range.getEnd());\n+        \n+        \n+        ranges = Query.extractExpressionRanges(\"${hello:equals( ${goodbye} )} or just hi, ${bob}, are you ${bob.age:toNumber()} yet? $$$${bob}\");\n+        assertEquals(3, ranges.size());\n+        range = ranges.get(0);\n+        assertEquals(0, range.getStart());\n+        assertEquals(28, range.getEnd());\n+        \n+        range = ranges.get(1);\n+        assertEquals(42, range.getStart());\n+        assertEquals(47, range.getEnd());\n+        \n+        range = ranges.get(2);\n+        assertEquals(58, range.getStart());\n+        assertEquals(78, range.getEnd());\n+        \n+        ranges = Query.extractExpressionRanges(\"${x:matches( '.{4}' )}\");\n+        assertEquals(1, ranges.size());\n+        range = ranges.get(0);\n+        assertEquals(0, range.getStart());\n+        assertEquals(21, range.getEnd());\n+    }\n+    \n+    \n+    @Test\n+    public void testExtractExpressionTypes() {\n+        List<ResultType> types = Query.extractResultTypes(\"${hello:equals( ${goodbye} )} or just hi, ${bob}, are you ${bob.age:toNumber()} yet? $$$${bob}\");\n+        assertEquals(3, types.size());\n+        assertEquals(ResultType.BOOLEAN, types.get(0));\n+        assertEquals(ResultType.STRING, types.get(1));\n+        assertEquals(ResultType.NUMBER, types.get(2));\n+    }\n+    \n+    \n+    @Test\n+    public void testEqualsEmbedded() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"x\", \"hello\");\n+        attributes.put(\"y\", \"good-bye\");\n+        \n+        verifyEquals(\"${x:equals( ${y} )}\", attributes, false);\n+        \n+        attributes.put(\"y\", \"hello\");\n+        verifyEquals(\"${x:equals( ${y} )}\", attributes, true);\n+        \n+        attributes.put(\"x\", \"4\");\n+        attributes.put(\"y\", \"3\");\n+        attributes.put(\"z\", \"1\");\n+        attributes.put(\"h\", \"100\");\n+        verifyEquals(\"${x:toNumber():lt( ${y:toNumber():plus( ${h:toNumber()} )} )}\", attributes, true);\n+        verifyEquals(\"${h:toNumber():ge( ${y:toNumber():plus( ${z:toNumber()} )} )}\", attributes, true);\n+        verifyEquals(\"${x:toNumber():equals( ${y:toNumber():plus( ${z:toNumber()} )} )}\", attributes, true);\n+\n+        attributes.put(\"x\", \"88\");\n+        verifyEquals(\"${x:toNumber():gt( ${y:toNumber():plus( ${z:toNumber()} )} )}\", attributes, true);\n+\n+        attributes.put(\"y\", \"88\");\n+        assertEquals(\"true\", Query.evaluateExpressions(\"${x:equals( '${y}' )}\", attributes, null));\n+    }\n+    \n+    \n+    @Test\n+    public void testComplicatedEmbeddedExpressions() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"fox\", \"quick, brown\");\n+        attributes.put(\"dog\", \"lazy\");\n+        \n+        verifyEquals(\"${fox:substring( ${ 'dog' :substring(2):length()}, 5 ):equals( 'ick' )}\", attributes, true);\n+        verifyEquals(\"${fox:substring( ${ 'dog' :substring(2):length()}, 5 ):equals( 'ick' )}\", attributes, true);\n+    }\n+    \n+    @Test\n+    public void testQuotingQuotes() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"xx\", \"say 'hi'\");\n+\n+        String query = \"${xx:replaceAll( \\\"'.*'\\\", '\\\\\\\"hello\\\\\\\"' )}\";\n+        verifyEquals(query, attributes, \"say \\\"hello\\\"\");\n+\n+        query = \"${xx:replace( \\\"'\\\", '\\\"')}\";\n+        verifyEquals(query, attributes, \"say \\\"hi\\\"\");\n+\n+        query = \"${xx:replace( '\\\\'', '\\\"')}\";\n+        System.out.println(query);\n+        verifyEquals(query, attributes, \"say \\\"hi\\\"\");\n+    }\n+    \n+    @Test\n+    public void testDoubleQuotesWithinSingleQuotes() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"xx\", \"say 'hi'\");\n+\n+        String query = \"${xx:replace( \\\"'hi'\\\", '\\\\\\\"hello\\\\\\\"' )}\";\n+        System.out.println(query);\n+        verifyEquals(query, attributes, \"say \\\"hello\\\"\");\n+    }\n+    \n+    @Test\n+    public void testEscapeQuotes() {\n+        final long timestamp = 1403620278642L;\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"date\", String.valueOf(timestamp));\n+        \n+        final String format = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\";\n+        \n+        final String query = \"startDateTime=\\\"${date:toNumber():toDate():format(\\\"\" + format + \"\\\")}\\\"\";\n+        final String result = Query.evaluateExpressions(query, attributes, null);\n+        \n+        final String expectedTime = new SimpleDateFormat(format).format(timestamp);\n+        assertEquals(\"startDateTime=\\\"\" + expectedTime + \"\\\"\", result);\n+        \n+        final List<Range> ranges = Query.extractExpressionRanges(query);\n+        assertEquals(1, ranges.size());\n+    }\n+    \n+    @Test\n+    public void testDateConversion() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"date\", \"1403620278642\");\n+        \n+        verifyEquals(\"${date:format('yyyy')}\", attributes, \"2014\");\n+        verifyEquals(\"${date:toDate():format('yyyy')}\", attributes, \"2014\");\n+        verifyEquals(\"${date:toNumber():format('yyyy')}\", attributes, \"2014\");\n+        verifyEquals(\"${date:toNumber():toDate():format('yyyy')}\", attributes, \"2014\");\n+        verifyEquals(\"${date:toDate():toNumber():format('yyyy')}\", attributes, \"2014\");\n+        verifyEquals(\"${date:toDate():toNumber():toDate():toNumber():toDate():toNumber():format('yyyy')}\", attributes, \"2014\");\n+    }\n+    \n+    @Test\n+    public void testSingleLetterAttribute() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"A\", \"0123456789\");\n+        \n+        verifyEquals(\"${A}\", attributes, \"0123456789\");\n+        verifyEquals(\"${'A'}\", attributes, \"0123456789\");\n+    }\n+\n+    \n+    @Test\n+    public void testImplicitConversions() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"A\", \"0123456789\");\n+        attributes.put(\"b\", \"true\");\n+        attributes.put(\"c\", \"false\");\n+        attributes.put(\"d\", \"Quick Brown Fox\");\n+        attributes.put(\"F\", \"-48\");\n+        attributes.put(\"n\", \"2014/04/04 00:00:00\");\n+        \n+        final Calendar cal = Calendar.getInstance();\n+        cal.set(Calendar.YEAR, 2014);\n+        cal.set(Calendar.MONTH, 3);\n+        cal.set(Calendar.DAY_OF_MONTH, 4);\n+        cal.set(Calendar.HOUR, 0);\n+        cal.set(Calendar.MINUTE, 0);\n+        cal.set(Calendar.SECOND, 45);\n+        \n+        final String dateString = cal.getTime().toString();\n+        attributes.put(\"z\", dateString);\n+\n+        \n+        verifyEquals(\"${A:plus(4)}\", attributes, 123456793L);\n+        verifyEquals(\"${A:plus( ${F} )}\", attributes, 123456741L);\n+\n+        verifyEquals(\"${F:lt( ${A} )}\", attributes, true);\n+        verifyEquals(\"${A:substring(2,3):plus(21):substring(1,2):plus(0)}\", attributes, 3L);\n+        verifyEquals(\"${n:format( 'yyyy' )}\", attributes, \"2014\");\n+        verifyEquals(\"${z:format( 'yyyy' )}\", attributes, \"2014\");\n+        \n+        attributes.put(\"n\", \"2014/04/04 00:00:00.045\");\n+        verifyEquals(\"${n:format( 'yyyy' ):append(','):append( ${n:format( 'SSS' )} )}\", attributes, \"2014,045\");\n+    }\n+    \n+    @Test\n+    public void testNewLinesAndTabsInQuery() {\n+        final String query = \"${ abc:equals('abc'):or( \\n\\t${xx:isNull()}\\n) }\";\n+        assertEquals(ResultType.BOOLEAN, Query.getResultType(query));\n+        Query.validateExpression(query, false);\n+        assertEquals(\"true\", Query.evaluateExpressions(query));\n+    }\n+    \n+    @Test\n+    public void testAttributeReferencesWithWhiteSpace() {\n+        final Map<String, String> attrs = new HashMap<>();\n+        attrs.put(\"a b c,d\", \"abc\");\n+        \n+        final String query = \"${ 'a b c,d':equals('abc') }\";\n+        verifyEquals(query, attrs, true);\n+    }\n+\n+    @Test\n+    public void testComments() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"abc\", \"xyz\");\n+\n+        final String expression = \n+            \"# hello, world\\n\" + \n+            \"${# ref attr\\n\" +\n+            \"\\t\" +\n+                \"abc\" +\n+            \"\\t\" +\n+                \"#end ref attr\\n\" +\n+            \"}\";\n+\n+        Query query = Query.compile(expression);\n+        QueryResult<?> result = query.evaluate(attributes);\n+        assertEquals(ResultType.STRING, result.getResultType());\n+        assertEquals(\"xyz\", result.getValue());\n+        \n+        query = Query.compile(\"${abc:append('# hello') #good-bye \\n}\");\n+        result = query.evaluate(attributes);\n+        assertEquals(ResultType.STRING, result.getResultType());\n+        assertEquals(\"xyz# hello\", result.getValue());\n+    }\n+    \n+    @Test\n+    public void testAppendPrepend() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"attr\", \"XX\");\n+        attributes.put(\"YXXX\", \"bingo\");\n+        \n+        verifyEquals(\"${${attr:append('X'):prepend('Y')}}\", attributes, \"bingo\");\n+    }\n+    \n+    @Test\n+    public void testIsNull() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        verifyEquals(\"${attr:isNull()}\", attributes, true);\n+    }\n+    \n+    @Test\n+    public void testNotNull() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"attr\", \"\");\n+        \n+        verifyEquals(\"${attr:notNull()}\", attributes, true);\n+    }\n+    \n+    @Test\n+    public void testIsNullOrLengthEquals0() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"abc\", \"\");\n+        attributes.put(\"xyz\", \"xyz\");\n+        attributes.put(\"xx\", \"  \");\n+        \n+        verifyEquals(\"${abc:isNull():or( ${abc:length():equals(0)} )}\", attributes, true);\n+        verifyEquals(\"${xyz:isNull():or( ${xyz:length():equals(0)} )}\", attributes, false);\n+        verifyEquals(\"${none:isNull():or( ${none:length():equals(0)} )}\", attributes, true);\n+        verifyEquals(\"${xx:isNull():or( ${xx:trim():length():equals(0)} )}\", attributes, true);\n+    }\n+    \n+    @Test\n+    public void testReplaceNull() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        verifyEquals(\"${attr:replaceNull('hello')}\", attributes, \"hello\");\n+    }\n+    \n+    @Test\n+    public void testReplace() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"attr\", \"hello\");\n+        verifyEquals(\"${attr:replace('hell', 'yell')}\", attributes, \"yello\");\n+    }\n+\n+    @Test\n+    public void testReplaceAll() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"attr\", \"hello\");\n+        attributes.put(\"xyz\", \"00-00TEST.2014_01_01_000000_value\");\n+        \n+        verifyEquals(\"${xyz:replaceAll(\\\"^([^.]+)\\\\.([0-9]{4})_([0-9]{2})_([0-9]{2}).*$\\\", \\\"$3\\\")}\", attributes, \"01\");\n+        verifyEquals(\"${attr:replaceAll('l+', 'r')}\", attributes, \"hero\");\n+        \n+        attributes.clear();\n+        attributes.put(\"filename1\", \"abc.gz\");\n+        attributes.put(\"filename2\", \"abc.g\");\n+        attributes.put(\"filename3\", \"abc.gz.gz\");\n+        attributes.put(\"filename4\", \"abc.gz.g\");\n+        attributes.put(\"abc\", \"hello world\");\n+\n+        verifyEquals(\"${filename3:replaceAll('\\\\\\\\\\\\.gz$', '')}\", attributes, \"abc.gz.gz\");\n+        verifyEquals(\"${filename3:replaceAll('\\\\\\\\\\\\\\\\.gz$', '')}\", attributes, \"abc.gz.gz\");\n+        verifyEquals(\"${filename1:replaceAll('\\\\.gz$', '')}\", attributes, \"abc\");\n+        verifyEquals(\"${filename2:replaceAll('\\\\.gz$', '')}\", attributes, \"abc.g\");\n+        verifyEquals(\"${filename4:replaceAll('\\\\\\\\.gz$', '')}\", attributes, \"abc.gz.g\");\n+\n+        verifyEquals(\"${abc:replaceAll( 'lo wor(ld)', '$0')}\", attributes, \"hello world\");\n+        verifyEquals(\"${abc:replaceAll( 'he(llo) world', '$1')}\", attributes, \"llo\");\n+        verifyEquals(\"${abc:replaceAll( 'xx', '$0')}\", attributes, \"hello world\");\n+        verifyEquals(\"${abc:replaceAll( '(xx)', '$1')}\", attributes, \"hello world\");\n+        verifyEquals(\"${abc:replaceAll( 'lo wor(ld)', '$1')}\", attributes, \"helld\");\n+        \n+    }\n+    \n+    \n+    @Test\n+    public void testReplaceAllWithOddNumberOfBackslashPairs() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"filename\", \"C:\\\\temp\\\\.txt\");\n+\n+        verifyEquals(\"${filename:replace('\\\\\\\\', '/')}\", attributes, \"C:/temp/.txt\");\n+        verifyEquals(\"${filename:replaceAll('\\\\\\\\\\\\\\\\', '/')}\", attributes, \"C:/temp/.txt\");\n+        verifyEquals(\"${filename:replaceAll('\\\\\\\\\\\\.txt$', '')}\", attributes, \"C:\\\\temp\");\n+    }\n+    \n+    @Test\n+    public void testReplaceAllWithMatchingGroup() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"attr\", \"hello\");\n+        \n+        verifyEquals(\"${attr:replaceAll('.*?(l+).*', '$1')}\", attributes, \"ll\");\n+    }\n+    \n+    @Test\n+    public void testMathOperations() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"one\", \"1\");\n+        attributes.put(\"two\", \"2\");\n+        attributes.put(\"three\", \"3\");\n+        attributes.put(\"four\", \"4\");\n+        attributes.put(\"five\", \"5\");\n+        attributes.put(\"hundred\", \"100\");\n+\n+        verifyEquals(\"${hundred:toNumber():multiply(2):divide(3):plus(1):mod(5)}\", attributes, 2L);\n+    }\n+\n+    @Test\n+    public void testIndexOf() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"attr\", \"https://abc.go\");\n+        verifyEquals(\"${attr:indexOf('/')}\", attributes, 6L);\n+    }\n+    \n+    @Test\n+    public void testDate() {\n+        final Calendar now = Calendar.getInstance();\n+        final int year = now.get(Calendar.YEAR);\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"entryDate\", String.valueOf(now.getTimeInMillis()));\n+        \n+        verifyEquals(\"${entryDate:toNumber():toDate():format('yyyy')}\", attributes, String.valueOf(year));\n+        \n+        attributes.clear();\n+        attributes.put(\"month\", \"3\");\n+        attributes.put(\"day\", \"4\");\n+        attributes.put(\"year\", \"2013\");\n+        assertEquals(\"63\", Query.evaluateExpressions(\"${year:append('/'):append(${month}):append('/'):append(${day}):toDate('yyyy/MM/dd'):format('D')}\", attributes, null));\n+        assertEquals(\"63\", Query.evaluateExpressions(\"${year:append('/'):append('${month}'):append('/'):append('${day}'):toDate('yyyy/MM/dd'):format('D')}\", attributes, null));\n+\n+        verifyEquals(\"${year:append('/'):append(${month}):append('/'):append(${day}):toDate('yyyy/MM/dd'):format('D')}\", attributes, \"63\");\n+    }\n+    \n+    @Test\n+    public void testSystemProperty() {\n+        System.setProperty(\"hello\", \"good-bye\");\n+        assertEquals(\"good-bye\", Query.evaluateExpressions(\"${hello}\"));\n+        assertEquals(\"good-bye\", Query.compile(\"${hello}\").evaluate().getValue());\n+    }\n+    \n+    @Test\n+    public void testAnyAttribute() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"abc\", \"zzz\");\n+        attributes.put(\"xyz\", \"abc\");\n+        \n+        verifyEquals(\"${anyAttribute('abc', 'xyz', 'missingAttr'):substring(1,2):equals('b')}\", attributes, true);\n+        verifyEquals(\"${anyAttribute('abc', 'xyz'):substring(1,2):equals('b')}\", attributes, true);\n+        verifyEquals(\"${anyAttribute('xyz', 'abc'):substring(1,2):equals('b')}\", attributes, true);\n+        verifyEquals(\"${anyAttribute('zz'):substring(1,2):equals('b')}\", attributes, false);\n+        verifyEquals(\"${anyAttribute('abc', 'zz'):isNull()}\", attributes, true);\n+    }\n+    \n+    @Test\n+    public void testAnyMatchingAttribute() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"abc\", \"zzz\");\n+        attributes.put(\"xyz\", \"abc\");\n+        attributes.put(\"123.cba\", \"hello\");\n+        \n+        verifyEquals(\"${anyMatchingAttribute('.{2}x', '.{2}z'):substring(1,2):equals('b')}\", attributes, true);\n+        verifyEquals(\"${anyMatchingAttribute('.*'):substring(1,2):equals('b')}\", attributes, true);\n+        verifyEquals(\"${anyMatchingAttribute('x{44}'):substring(1,2):equals('b')}\", attributes, false);\n+        verifyEquals(\"${anyMatchingAttribute('abc'):substring(1,2):equals('b')}\", attributes, false);\n+        verifyEquals(\"${anyMatchingAttribute('xyz'):substring(1,2):equals('b')}\", attributes, true);\n+        verifyEquals(\"${anyMatchingAttribute('xyz'):notNull()}\", attributes, true);\n+        verifyEquals(\"${anyMatchingAttribute('xyz'):isNull()}\", attributes, false);\n+        verifyEquals(\"${anyMatchingAttribute('xxxxxxxxx'):notNull()}\", attributes, false);\n+        verifyEquals(\"${anyMatchingAttribute('123\\\\.c.*'):matches('hello')}\", attributes, true);\n+        verifyEquals(\"${anyMatchingAttribute('123\\\\.c.*|a.c'):matches('zzz')}\", attributes, true);\n+    }\n+    \n+    \n+    @Test\n+    public void testAnyDelineatedValue() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"abc\", \"a,b,c\");\n+        attributes.put(\"xyz\", \"abc\");\n+        \n+        final String query = \"${anyDelineatedValue('${abc}', ','):equals('b')}\";\n+        assertEquals(ResultType.BOOLEAN, Query.getResultType(query));\n+        \n+        assertEquals(\"true\", Query.evaluateExpressions(query, attributes, null));\n+        assertEquals(\"true\", Query.evaluateExpressions(\"${anyDelineatedValue('${abc}', ','):equals('a')}\", attributes, null));\n+        assertEquals(\"true\", Query.evaluateExpressions(\"${anyDelineatedValue('${abc}', ','):equals('c')}\", attributes, null));\n+        assertEquals(\"false\", Query.evaluateExpressions(\"${anyDelineatedValue('${abc}', ','):equals('d')}\", attributes, null));\n+        \n+        verifyEquals(\"${anyDelineatedValue(${abc}, ','):equals('b')}\", attributes, true);\n+        verifyEquals(\"${anyDelineatedValue(${abc}, ','):equals('a')}\", attributes, true);\n+        verifyEquals(\"${anyDelineatedValue(${abc}, ','):equals('c')}\", attributes, true);\n+        verifyEquals(\"${anyDelineatedValue(${abc}, ','):equals('d')}\", attributes, false);\n+    }\n+    \n+    @Test\n+    public void testAllDelineatedValues() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"abc\", \"a,b,c\");\n+        attributes.put(\"xyz\", \"abc\");\n+        \n+        final String query = \"${allDelineatedValues('${abc}', ','):matches('[abc]')}\";\n+        \n+        assertEquals(ResultType.BOOLEAN, Query.getResultType(query));\n+        assertEquals(\"true\", Query.evaluateExpressions(query, attributes, null));\n+        assertEquals(\"true\", Query.evaluateExpressions(query, attributes, null));\n+        assertEquals(\"false\", Query.evaluateExpressions(\"${allDelineatedValues('${abc}', ','):matches('[abd]')}\", attributes, null));\n+        assertEquals(\"false\", Query.evaluateExpressions(\"${allDelineatedValues('${abc}', ','):equals('a'):not()}\", attributes, null));\n+        \n+        verifyEquals(\"${allDelineatedValues(${abc}, ','):matches('[abc]')}\", attributes, true);\n+        verifyEquals(\"${allDelineatedValues(${abc}, ','):matches('[abd]')}\", attributes, false);\n+        verifyEquals(\"${allDelineatedValues(${abc}, ','):equals('a'):not()}\", attributes, false);\n+    }\n+    \n+    \n+    @Test\n+    public void testAllAttributes() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"abc\", \"1234\");\n+        attributes.put(\"xyz\", \"4132\");\n+        attributes.put(\"hello\", \"world!\");\n+\n+        verifyEquals(\"${allAttributes('abc', 'xyz'):matches('\\\\d+')}\", attributes, true);\n+        verifyEquals(\"${allAttributes('abc', 'xyz'):toNumber():lt(99999)}\", attributes, true);\n+        verifyEquals(\"${allAttributes('abc', 'hello'):length():gt(3)}\", attributes, true);\n+        verifyEquals(\"${allAttributes('abc', 'hello'):length():equals(4)}\", attributes, false);\n+        verifyEquals(\"${allAttributes('abc', 'xyz'):length():equals(4)}\", attributes, true);\n+        verifyEquals(\"${allAttributes('abc', 'xyz', 'other'):isNull()}\", attributes, false);\n+        \n+        try {\n+            Query.compile(\"${allAttributes('#ah'):equals('hello')\");\n+            Assert.fail(\"Was able to compile with allAttributes and an invalid attribute name\");\n+        } catch (final AttributeExpressionLanguageParsingException e) {\n+            // expected behavior\n+        }\n+    }\n+    \n+    \n+    @Test\n+    public void testMathOperators() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"abc\", \"1234\");\n+        attributes.put(\"xyz\", \"4132\");\n+        attributes.put(\"hello\", \"world!\");\n+\n+        verifyEquals(\"${xyz:toNumber():gt( ${abc:toNumber()} )}\", attributes, true);\n+    }\n+    \n+    @Test\n+    public void testAllMatchingAttributes() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"abc\", \"1234\");\n+        attributes.put(\"xyz\", \"4132\");\n+        attributes.put(\"hello\", \"world!\");\n+        attributes.put(\"123.cba\", \"hell.o\");\n+\n+        System.out.println( printTree(Query.compile(\"${allMatchingAttributes('(abc|xyz)'):matches('\\\\\\\\d+')}\").getTree()) );\n+        \n+        verifyEquals(\"${'123.cba':matches('hell\\\\.o')}\", attributes, true);\n+        verifyEquals(\"${allMatchingAttributes('123\\\\.cba'):equals('hell.o')}\", attributes, true);\n+        verifyEquals(\"${allMatchingAttributes('(abc|xyz)'):matches('\\\\d+')}\", attributes, true);\n+        verifyEquals(\"${allMatchingAttributes('[ax].*'):toNumber():lt(99999)}\", attributes, true);\n+        verifyEquals(\"${allMatchingAttributes('hell.'):length():gt(3)}\", attributes, true);\n+        \n+        verifyEquals(\"${allMatchingAttributes('123\\\\.cba'):equals('no')}\", attributes, false);\n+    }\n+    \n+    @Test\n+    public void testMatches() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"abc\", \"1234xyz4321\");\n+        attributes.put(\"end\", \"xyz\");\n+        attributes.put(\"xyz\", \"4132\");\n+        attributes.put(\"hello\", \"world!\");\n+        attributes.put(\"dotted\", \"abc.xyz\");\n+\n+        final String evaluated = Query.evaluateExpressions(\"${abc:matches('1234${end}4321')}\", attributes, null);\n+        assertEquals(\"true\", evaluated);\n+        \n+        attributes.put(\"end\", \"888\");\n+        final String secondEvaluation = Query.evaluateExpressions(\"${abc:matches('1234${end}4321')}\", attributes, null);\n+        assertEquals(\"false\", secondEvaluation);\n+        \n+        verifyEquals(\"${dotted:matches('abc\\\\.xyz')}\", attributes, true);\n+   }\n+    \n+    \n+    @Test\n+    public void testFind() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"abc\", \"1234xyz4321\");\n+        attributes.put(\"end\", \"xyz\");\n+        attributes.put(\"xyz\", \"4132\");\n+        attributes.put(\"hello\", \"world!\");\n+        attributes.put(\"dotted\", \"abc.xyz\");\n+\n+        final String evaluated = Query.evaluateExpressions(\"${abc:find('1234${end}4321')}\", attributes, null);\n+        assertEquals(\"true\", evaluated);\n+        \n+        attributes.put(\"end\", \"888\");\n+        final String secondEvaluation = Query.evaluateExpressions(\"${abc:find('${end}4321')}\", attributes, null);\n+        assertEquals(\"false\", secondEvaluation);\n+        \n+        verifyEquals(\"${dotted:find('\\\\.')}\", attributes, true);\n+   }\n+    \n+    @Test\n+    public void testSubstringAfter() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"filename\", \"file-255\");\n+        \n+        verifyEquals(\"${filename:substringAfter('')}\", attributes, \"file-255\");\n+        verifyEquals(\"${filename:substringAfterLast('')}\", attributes, \"file-255\");\n+        verifyEquals(\"${filename:substringBefore('')}\", attributes, \"file-255\");\n+        verifyEquals(\"${filename:substringBeforeLast('')}\", attributes, \"file-255\");\n+        verifyEquals(\"${filename:substringBefore('file')}\", attributes, \"\");\n+        \n+        attributes.put(\"uri\", \"sftp://some.uri\");\n+        verifyEquals(\"${uri:substringAfter('sftp')}\", attributes, \"://some.uri\");\n+    }\n+    \n+    @Test\n+    public void testSubstringAfterLast() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"filename\", \"file-file-255\");\n+        \n+        verifyEquals(\"${filename:substringAfterLast('file-')}\", attributes, \"255\");\n+        verifyEquals(\"${filename:substringAfterLast('5')}\", attributes, \"\");\n+        verifyEquals(\"${filename:substringAfterLast('x')}\", attributes, \"file-file-255\");\n+    }\n+    \n+    @Test\n+    public void testSubstringBefore() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"something\", \"some {} or other\");\n+        \n+        verifyEquals(\"${something:substringBefore('}')}\", attributes, \"some {\");\n+    }\n+    \n+    @Test\n+    public void testSubstring() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"filename\", \"file-255\");\n+        \n+        verifyEquals(\"${filename:substring(1, 2)}\", attributes, \"i\");\n+        verifyEquals(\"${filename:substring(4)}\", attributes, \"-255\");\n+    }\n+    \n+    @Test\n+    public void testToRadix() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"filename\", \"file-255\");\n+        attributes.put(\"filename2\", \"file-99999\");\n+\n+\n+        verifyEquals(\"${filename:substringAfter('-'):toNumber():toRadix(16):toUpper()}\", attributes, \"FF\");\n+        verifyEquals(\"${filename:substringAfter('-'):toNumber():toRadix(16, 4):toUpper()}\", attributes, \"00FF\");\n+        verifyEquals(\"${filename:substringAfter('-'):toNumber():toRadix(36, 3):toUpper()}\", attributes, \"073\");\n+    }\n+    \n+    @Test\n+    public void testDateFormatConversion() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"blue\", \"20130917162643\");\n+        verifyEquals(\"${blue:toDate('yyyyMMddHHmmss'):format(\\\"yyyy/MM/dd HH:mm:ss.SSS'Z'\\\")}\", attributes, \"2013/09/17 16:26:43.000Z\");\n+    }\n+\n+    \n+    @Test\n+    public void testNot() {\n+        verifyEquals(\"${ab:notNull():not()}\", new HashMap<String, String>(), true);\n+    }\n+    \n+    @Test\n+    public void testAttributesWithSpaces() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"ab\", \"abc\");\n+        attributes.put(\"a  b\", \"abc\");\n+        \n+        verifyEquals(\"${ab}\", attributes, \"abc\");\n+        verifyEquals(\"${'a  b'}\", attributes, \"abc\");\n+        verifyEquals(\"${'a b':replaceNull('')}\", attributes, \"\");\n+    }\n+    \n+    @Test\n+    public void testOr() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"filename1\", \"xabc\");\n+        attributes.put(\"filename2\", \"yabc\");\n+        attributes.put(\"filename3\", \"abcxy\");\n+\n+        verifyEquals(\"${filename1:startsWith('x'):or(true)}\", attributes, true);\n+        verifyEquals(\"${filename1:startsWith('x'):or( ${filename1:startsWith('y')} )}\", attributes, true);\n+        verifyEquals(\"${filename2:startsWith('x'):or( ${filename2:startsWith('y')} )}\", attributes, true);\n+        verifyEquals(\"${filename3:startsWith('x'):or( ${filename3:startsWith('y')} )}\", attributes, false);\n+        verifyEquals(\"${filename1:startsWith('x'):or( ${filename2:startsWith('y')} )}\", attributes, true);\n+        verifyEquals(\"${filename2:startsWith('x'):or( ${filename1:startsWith('y')} )}\", attributes, false);\n+    }\n+    \n+    @Test\n+    public void testAnd() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"filename1\", \"xabc\");\n+        attributes.put(\"filename2\", \"yabc\");\n+        attributes.put(\"filename 3\", \"abcxy\");\n+\n+        verifyEquals(\"${filename1:startsWith('x'):and(true)}\", attributes, true);\n+        verifyEquals(\"${filename1:startsWith('x') : and( false )}\", attributes, false);\n+        verifyEquals(\"${filename1:startsWith('x'):and( ${filename1:startsWith('y')} )}\", attributes, false);\n+        verifyEquals(\"${filename2:startsWith('x'):and( ${filename2:startsWith('y')} )}\", attributes, false);\n+        verifyEquals(\"${filename3:startsWith('x'):and( ${filename3:startsWith('y')} )}\", attributes, false);\n+        verifyEquals(\"${filename1:startsWith('x'):and( ${filename2:startsWith('y')} )}\", attributes, true);\n+        verifyEquals(\"${filename2:startsWith('x'):and( ${filename1:startsWith('y')} )}\", attributes, false);\n+        verifyEquals(\"${filename1:startsWith('x'):and( ${'filename 3':endsWith('y')} )}\", attributes, true);\n+    }\n+    \n+    @Test\n+    public void testAndOrNot() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"filename1\", \"xabc\");\n+        attributes.put(\"filename2\", \"yabc\");\n+        attributes.put(\"filename 3\", \"abcxy\");\n+\n+        final String query = \n+            \"${\" +\n+            \"     'non-existing':notNull():not():and(\" +                                        // true AND (\n+            \"     ${filename1:startsWith('y')\" +                                                    // false\n+            \"     :or(\" +                                                                           // or\n+            \"       ${ filename1:startsWith('x'):and(false) }\" +                                    // false\n+            \"     ):or(\" +                                                                          // or\n+            \"       ${ filename2:endsWith('xxxx'):or( ${'filename 3':length():gt(1)} ) }\" +         // true )\n+            \"     )}\" +\n+            \"     )\" +\n+            \"}\";\n+        \n+        System.out.println(query);\n+        verifyEquals(query, attributes, true);\n+    }\n+    \n+    @Test\n+    public void testAndOrLogicWithAnyAll() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"filename1\", \"xabc\");\n+        attributes.put(\"filename2\", \"yabc\");\n+        attributes.put(\"filename 3\", \"abcxy\");\n+        \n+        verifyEquals(\"${anyMatchingAttribute('filename.*'):contains('abc'):and( ${filename2:equals('yabc')} )}\", attributes, true);\n+        verifyEquals(\"${anyMatchingAttribute('filename.*'):contains('abc'):and( ${filename2:equals('xabc')} )}\", attributes, false);\n+        verifyEquals(\"${anyMatchingAttribute('filename.*'):contains('abc'):not():or( ${filename2:equals('yabc')} )}\", attributes, true);\n+        verifyEquals(\"${anyMatchingAttribute('filename.*'):contains('abc'):not():or( ${filename2:equals('xabc')} )}\", attributes, false);\n+    }\n+    \n+    @Test\n+    public void testKeywords() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"UUID\", \"123\");\n+        verifyEquals(\"${ 'UUID':toNumber():equals(123) }\", attributes, true);\n+    }\n+    \n+    @Test\n+    public void testEqualsNumber() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"abc\", \"123\");\n+        verifyEquals(\"${ abc:toNumber():equals(123) }\", attributes, true);\n+    }\n+    \n+    @Test\n+    public void testSubjectAsEmbeddedExpressionWithSurroundChars() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"b\", \"x\");\n+        attributes.put(\"abcxcba\", \"hello\");\n+        \n+        final String evaluated = Query.evaluateExpressions(\"${ 'abc${b}cba':substring(0, 1) }\", attributes, null);\n+        assertEquals(\"h\", evaluated);\n+    }\n+    \n+    @Test\n+    public void testToNumberFunctionReturnsNumberType() {\n+        assertEquals(ResultType.NUMBER, Query.getResultType(\"${header.size:toNumber()}\"));\n+    }\n+    \n+    \n+    private void verifyEquals(final String expression, final Map<String, String> attributes, final Object expectedResult) {\n+        Query.validateExpression(expression, false);\n+        assertEquals(String.valueOf(expectedResult), Query.evaluateExpressions(expression, attributes, null));\n+        \n+        Query query = Query.compile(expression);\n+        QueryResult<?> result = query.evaluate(attributes);\n+        \n+        if ( expectedResult instanceof Number ) {\n+            assertEquals(ResultType.NUMBER, result.getResultType());\n+        } else if ( expectedResult instanceof Boolean ) {\n+            assertEquals(ResultType.BOOLEAN, result.getResultType());\n+        } else {\n+            assertEquals(ResultType.STRING, result.getResultType());\n+        }\n+        \n+        assertEquals(expectedResult, result.getValue());\n+    }\n+}"
        },
        {
            "sha": "398a23b640e2f33097a04bd8142b9d24594dc75f",
            "filename": "commons/nifi-expression-language/src/test/java/org/apache/nifi/attribute/expression/language/TestStandardPreparedQuery.java",
            "status": "added",
            "additions": 92,
            "deletions": 0,
            "changes": 92,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2FTestStandardPreparedQuery.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-expression-language%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2FTestStandardPreparedQuery.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-expression-language%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fattribute%2Fexpression%2Flanguage%2FTestStandardPreparedQuery.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.attribute.expression.language;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+public class TestStandardPreparedQuery {\n+\n+    @Test\n+    public void testSimpleReference() {\n+        final Map<String, String> attrs = new HashMap<>();\n+        attrs.put(\"xx\", \"world\");\n+        \n+        assertEquals(\"world\", evaluate(\"${xx}\", attrs));\n+        assertEquals(\"hello, world!\", evaluate(\"hello, ${xx}!\", attrs));\n+    }\n+    \n+    @Test\n+    public void testEmbeddedReference() {\n+        final Map<String, String> attrs = new HashMap<>();\n+        attrs.put(\"xx\", \"yy\");\n+        attrs.put(\"yy\", \"world\");\n+        \n+        assertEquals(\"world\", evaluate(\"${${xx}}\", attrs));\n+    }\n+    \n+    @Test\n+    public void test10MIterations() {\n+        final Map<String, String> attrs = new HashMap<>();\n+        attrs.put(\"xx\", \"world\");\n+        \n+        final StandardPreparedQuery prepared = (StandardPreparedQuery) Query.prepare(\"${xx}\");\n+        final long start = System.nanoTime();\n+        for (int i=0; i < 10000000; i++) {\n+            assertEquals( \"world\", prepared.evaluateExpressions(attrs, null) );\n+        }\n+        final long nanos = System.nanoTime() - start;\n+        System.out.println(TimeUnit.NANOSECONDS.toMillis(nanos));\n+    }\n+    \n+    @Test\n+    @Ignore(\"Takes too long\")\n+    public void test10MIterationsWithQuery() {\n+        final Map<String, String> attrs = new HashMap<>();\n+        attrs.put(\"xx\", \"world\");\n+\n+        final long start = System.nanoTime();\n+        for (int i=0; i < 10000000; i++) {\n+            assertEquals( \"world\", Query.evaluateExpressions(\"${xx}\", attrs) );\n+        }\n+        final long nanos = System.nanoTime() - start;\n+        System.out.println(TimeUnit.NANOSECONDS.toMillis(nanos));\n+\n+    }\n+    \n+    @Test\n+    public void testSeveralSequentialExpressions() {\n+        final Map<String, String> attributes = new HashMap<>();\n+        attributes.put(\"audience\", \"World\");\n+        attributes.put(\"comma\", \",\");\n+        attributes.put(\"question\", \" how are you?\");\n+        assertEquals(\"Hello, World, how are you?!\", evaluate(\"Hello, ${audience}${comma}${question}!\", attributes));\n+\n+    }\n+    \n+    private String evaluate(final String query, final Map<String, String> attrs) {\n+        final String evaluated = ((StandardPreparedQuery) Query.prepare(query)).evaluateExpressions(attrs, null);\n+        return evaluated;\n+    }\n+    \n+}"
        },
        {
            "sha": "e3cf792a393e87974fe865f2344730d71913aa51",
            "filename": "commons/nifi-file-utils/pom.xml",
            "status": "added",
            "additions": 35,
            "deletions": 0,
            "changes": 35,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-file-utils%2Fpom.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-file-utils%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-file-utils%2Fpom.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,35 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <!--\n+      Licensed to the Apache Software Foundation (ASF) under one or more\n+      contributor license agreements.  See the NOTICE file distributed with\n+      this work for additional information regarding copyright ownership.\n+      The ASF licenses this file to You under the Apache License, Version 2.0\n+      (the \"License\"); you may not use this file except in compliance with\n+      the License.  You may obtain a copy of the License at\n+          http://www.apache.org/licenses/LICENSE-2.0\n+      Unless required by applicable law or agreed to in writing, software\n+      distributed under the License is distributed on an \"AS IS\" BASIS,\n+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+      See the License for the specific language governing permissions and\n+      limitations under the License.\n+    -->\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.apache.nifi</groupId>\n+        <artifactId>nifi-parent</artifactId>\n+        <version>0.0.1-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>nifi-file-utils</artifactId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <packaging>jar</packaging>\n+    <name>NiFi File Utils</name>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>commons-codec</groupId>\n+            <artifactId>commons-codec</artifactId>\n+            <version>1.10</version>\n+        </dependency>\n+    </dependencies>\n+</project>"
        },
        {
            "sha": "8920493a1679753b9a0a84417dc8565e8f450da2",
            "filename": "commons/nifi-file-utils/src/main/java/org/apache/nifi/file/FileUtils.java",
            "status": "added",
            "additions": 612,
            "deletions": 0,
            "changes": 612,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-file-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Ffile%2FFileUtils.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-file-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Ffile%2FFileUtils.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-file-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Ffile%2FFileUtils.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,612 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.file;\n+\n+import java.io.BufferedInputStream;\n+import java.io.Closeable;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.FilenameFilter;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.FileLock;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.commons.codec.digest.DigestUtils;\n+\n+import org.slf4j.Logger;\n+\n+/**\n+ * A utility class containing a few useful static methods to do typical IO\n+ * operations.\n+ *\n+ * @author unattributed\n+ */\n+public class FileUtils {\n+\n+    public static final long TRANSFER_CHUNK_SIZE_BYTES = 1024 * 1024 * 8; //8 MB chunks\n+    public static final long MILLIS_BETWEEN_ATTEMPTS = 50L;\n+\n+    /**\n+     * Closes the given closeable quietly - no logging, no exceptions...\n+     *\n+     * @param closeable\n+     */\n+    public static void closeQuietly(final Closeable closeable) {\n+        if (null != closeable) {\n+            try {\n+                closeable.close();\n+            } catch (final IOException io) {/*IGNORE*/\n+\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Releases the given lock quietly - no logging, no exception\n+     *\n+     * @param lock\n+     */\n+    public static void releaseQuietly(final FileLock lock) {\n+        if (null != lock) {\n+            try {\n+                lock.release();\n+            } catch (final IOException io) {\n+                /*IGNORE*/\n+            }\n+        }\n+    }\n+\n+    public static void ensureDirectoryExistAndCanAccess(final File dir) throws IOException {\n+        if (dir.exists() && !dir.isDirectory()) {\n+            throw new IOException(dir.getAbsolutePath() + \" is not a directory\");\n+        } else if (!dir.exists()) {\n+            final boolean made = dir.mkdirs();\n+            if (!made) {\n+                throw new IOException(dir.getAbsolutePath() + \" could not be created\");\n+            }\n+        }\n+        if (!(dir.canRead() && dir.canWrite())) {\n+            throw new IOException(dir.getAbsolutePath() + \" directory does not have read/write privilege\");\n+        }\n+    }\n+\n+    /**\n+     * Deletes the given file. If the given file exists but could not be deleted\n+     * this will be printed as a warning to the given logger\n+     *\n+     * @param file\n+     * @param logger\n+     * @return \n+     */\n+    public static boolean deleteFile(final File file, final Logger logger) {\n+        return FileUtils.deleteFile(file, logger, 1);\n+    }\n+\n+    /**\n+     * Deletes the given file. If the given file exists but could not be deleted\n+     * this will be printed as a warning to the given logger\n+     *\n+     * @param file\n+     * @param logger\n+     * @param attempts indicates how many times an attempt to delete should be\n+     * made\n+     * @return true if given file no longer exists\n+     */\n+    public static boolean deleteFile(final File file, final Logger logger, final int attempts) {\n+        if(file == null){\n+            return false;\n+        }\n+        boolean isGone = false;\n+        try {\n+            if (file.exists()) {\n+                final int effectiveAttempts = Math.max(1, attempts);\n+                for (int i = 0; i < effectiveAttempts && !isGone; i++) {\n+                    isGone = file.delete() || !file.exists();\n+                    if (!isGone && (effectiveAttempts - i) > 1) {\n+                        FileUtils.sleepQuietly(MILLIS_BETWEEN_ATTEMPTS);\n+                    }\n+                }\n+                if (!isGone && logger != null) {\n+                    logger.warn(\"File appears to exist but unable to delete file: \" + file.getAbsolutePath());\n+                }\n+            }\n+        } catch (final Throwable t) {\n+            if (logger != null) {\n+                logger.warn(\"Unable to delete file: '\" + file.getAbsolutePath() + \"' due to \" + t);\n+            }\n+        }\n+        return isGone;\n+    }\n+\n+    /**\n+     * Deletes all of the given files. If any exist and cannot be deleted that\n+     * will be printed at warn to the given logger.\n+     *\n+     * @param files can be null\n+     * @param logger can be null\n+     */\n+    public static void deleteFile(final List<File> files, final Logger logger) {\n+        FileUtils.deleteFile(files, logger, 1);\n+    }\n+\n+    /**\n+     * Deletes all of the given files. If any exist and cannot be deleted that\n+     * will be printed at warn to the given logger.\n+     *\n+     * @param files can be null\n+     * @param logger can be null\n+     * @param attempts indicates how many times an attempt should be made to\n+     * delete each file\n+     */\n+    public static void deleteFile(final List<File> files, final Logger logger, final int attempts) {\n+        if (null == files || files.isEmpty()) {\n+            return;\n+        }\n+        final int effectiveAttempts = Math.max(1, attempts);\n+        for (final File file : files) {\n+            try {\n+                boolean isGone = false;\n+                for (int i = 0; i < effectiveAttempts && !isGone; i++) {\n+                    isGone = file.delete() || !file.exists();\n+                    if (!isGone && (effectiveAttempts - i) > 1) {\n+                        FileUtils.sleepQuietly(MILLIS_BETWEEN_ATTEMPTS);\n+                    }\n+                }\n+                if (!isGone && logger != null) {\n+                    logger.warn(\"File appears to exist but unable to delete file: \" + file.getAbsolutePath());\n+                }\n+            } catch (final Throwable t) {\n+                if (null != logger) {\n+                    logger.warn(\"Unable to delete file given from path: '\" + file.getPath() + \"' due to \" + t);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Deletes all files (not directories..) in the given directory (non\n+     * recursive) that match the given filename filter. If any file cannot be\n+     * deleted then this is printed at warn to the given logger.\n+     *\n+     * @param directory\n+     * @param filter if null then no filter is used\n+     * @param logger\n+     */\n+    public static void deleteFilesInDir(final File directory, final FilenameFilter filter, final Logger logger) {\n+        FileUtils.deleteFilesInDir(directory, filter, logger, false);\n+    }\n+\n+    /**\n+     * Deletes all files (not directories) in the given directory (recursive)\n+     * that match the given filename filter. If any file cannot be deleted then\n+     * this is printed at warn to the given logger.\n+     *\n+     * @param directory\n+     * @param filter if null then no filter is used\n+     * @param logger\n+     * @param recurse\n+     */\n+    public static void deleteFilesInDir(final File directory, final FilenameFilter filter, final Logger logger, final boolean recurse) {\n+        FileUtils.deleteFilesInDir(directory, filter, logger, recurse, false);\n+    }\n+\n+    /**\n+     * Deletes all files (not directories) in the given directory (recursive)\n+     * that match the given filename filter. If any file cannot be deleted then\n+     * this is printed at warn to the given logger.\n+     *\n+     * @param directory\n+     * @param filter if null then no filter is used\n+     * @param logger\n+     * @param recurse\n+     * @param deleteEmptyDirectories default is false; if true will delete\n+     * directories found that are empty\n+     */\n+    public static void deleteFilesInDir(final File directory, final FilenameFilter filter, final Logger logger, final boolean recurse, final boolean deleteEmptyDirectories) {\n+        // ensure the specified directory is actually a directory and that it exists\n+        if (null != directory && directory.isDirectory()) {\n+            final File ingestFiles[] = directory.listFiles();\n+            for (File ingestFile : ingestFiles) {\n+                boolean process = (filter == null) ? true : filter.accept(directory, ingestFile.getName());\n+                if (ingestFile.isFile() && process) {\n+                    FileUtils.deleteFile(ingestFile, logger, 3);\n+                }\n+                if (ingestFile.isDirectory() && recurse) {\n+                    FileUtils.deleteFilesInDir(ingestFile, filter, logger, recurse, deleteEmptyDirectories);\n+                    if (deleteEmptyDirectories && ingestFile.list().length == 0) {\n+                        FileUtils.deleteFile(ingestFile, logger, 3);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Deletes given files.\n+     *\n+     * @param files\n+     * @param recurse will recurse\n+     * @throws IOException\n+     */\n+    public static void deleteFiles(final Collection<File> files, final boolean recurse) throws IOException {\n+        for (final File file : files) {\n+            FileUtils.deleteFile(file, recurse);\n+        }\n+    }\n+\n+    public static void deleteFile(final File file, final boolean recurse) throws IOException {\n+        if (file.isDirectory() && recurse) {\n+            FileUtils.deleteFiles(Arrays.asList(file.listFiles()), recurse);\n+        }\n+        //now delete the file itself regardless of whether it is plain file or a directory\n+        if (!FileUtils.deleteFile(file, null, 5)) {\n+            throw new IOException(\"Unable to delete \" + file.getAbsolutePath());\n+        }\n+    }\n+\n+    /**\n+     * Randomly generates a sequence of bytes and overwrites the contents of the\n+     * file a number of times. The file is then deleted.\n+     *\n+     * @param file File to be overwritten a number of times and, ultimately,\n+     * deleted\n+     * @param passes Number of times file should be overwritten\n+     * @throws IOException if something makes shredding or deleting a problem\n+     */\n+    public static void shredFile(final File file, final int passes)\n+            throws IOException {\n+        final Random generator = new Random();\n+        final long fileLength = file.length();\n+        final int byteArraySize = (int) Math.min(fileLength, 1048576); // 1MB\n+        final byte[] b = new byte[byteArraySize];\n+        final long numOfRandomWrites = (fileLength / b.length) + 1;\n+        final FileOutputStream fos = new FileOutputStream(file);\n+        try {\n+            // Over write file contents (passes) times\n+            final FileChannel channel = fos.getChannel();\n+            for (int i = 0; i < passes; i++) {\n+                generator.nextBytes(b);\n+                for (int j = 0; j <= numOfRandomWrites; j++) {\n+                    fos.write(b);\n+                }\n+                fos.flush();\n+                channel.position(0);\n+            }\n+            // Write out \"0\" for each byte in the file\n+            Arrays.fill(b, (byte) 0);\n+            for (int j = 0; j < numOfRandomWrites; j++) {\n+                fos.write(b);\n+            }\n+            fos.flush();\n+            fos.close();\n+            // Try to delete the file a few times\n+            if (!FileUtils.deleteFile(file, null, 5)) {\n+                throw new IOException(\"Failed to delete file after shredding\");\n+            }\n+\n+        } finally {\n+            FileUtils.closeQuietly(fos);\n+        }\n+    }\n+\n+    public static long copy(final InputStream in, final OutputStream out) throws IOException {\n+        final byte[] buffer = new byte[65536];\n+        long copied = 0L;\n+        int len;\n+        while ((len = in.read(buffer)) > 0) {\n+            out.write(buffer, 0, len);\n+            copied += len;\n+        }\n+\n+        return copied;\n+    }\n+\n+    public static long copyBytes(final byte[] bytes, final File destination, final boolean lockOutputFile) throws FileNotFoundException, IOException {\n+        FileOutputStream fos = null;\n+        FileLock outLock = null;\n+        long fileSize = 0L;\n+        try {\n+            fos = new FileOutputStream(destination);\n+            final FileChannel out = fos.getChannel();\n+            if (lockOutputFile) {\n+                outLock = out.tryLock(0, Long.MAX_VALUE, false);\n+                if (null == outLock) {\n+                    throw new IOException(\"Unable to obtain exclusive file lock for: \" + destination.getAbsolutePath());\n+                }\n+            }\n+            fos.write(bytes);\n+            fos.flush();\n+            fileSize = bytes.length;\n+        } finally {\n+            FileUtils.releaseQuietly(outLock);\n+            FileUtils.closeQuietly(fos);\n+        }\n+        return fileSize;\n+    }\n+\n+    /**\n+     * Copies the given source file to the given destination file. The given\n+     * destination will be overwritten if it already exists.\n+     *\n+     * @param source\n+     * @param destination\n+     * @param lockInputFile if true will lock input file during copy; if false\n+     * will not\n+     * @param lockOutputFile if true will lock output file during copy; if false\n+     * will not\n+     * @param move if true will perform what is effectively a move operation\n+     * rather than a pure copy. This allows for potentially highly efficient\n+     * movement of the file but if not possible this will revert to a copy then\n+     * delete behavior. If false, then the file is copied and the source file is\n+     * retained. If a true rename/move occurs then no lock is held during that\n+     * time.\n+     * @param logger if failures occur, they will be logged to this logger if\n+     * possible. If this logger is null, an IOException will instead be thrown,\n+     * indicating the problem.\n+     * @return long number of bytes copied\n+     * @throws FileNotFoundException if the source file could not be found\n+     * @throws IOException\n+     * @throws SecurityException if a security manager denies the needed file\n+     * operations\n+     */\n+    public static long copyFile(final File source, final File destination, final boolean lockInputFile, final boolean lockOutputFile, final boolean move, final Logger logger) throws FileNotFoundException, IOException {\n+\n+        FileInputStream fis = null;\n+        FileOutputStream fos = null;\n+        FileLock inLock = null;\n+        FileLock outLock = null;\n+        long fileSize = 0L;\n+        if (!source.canRead()) {\n+            throw new IOException(\"Must at least have read permission\");\n+\n+        }\n+        if (move && source.renameTo(destination)) {\n+            fileSize = destination.length();\n+        } else {\n+            try {\n+                fis = new FileInputStream(source);\n+                fos = new FileOutputStream(destination);\n+                final FileChannel in = fis.getChannel();\n+                final FileChannel out = fos.getChannel();\n+                if (lockInputFile) {\n+                    inLock = in.tryLock(0, Long.MAX_VALUE, true);\n+                    if (null == inLock) {\n+                        throw new IOException(\"Unable to obtain shared file lock for: \" + source.getAbsolutePath());\n+                    }\n+                }\n+                if (lockOutputFile) {\n+                    outLock = out.tryLock(0, Long.MAX_VALUE, false);\n+                    if (null == outLock) {\n+                        throw new IOException(\"Unable to obtain exclusive file lock for: \" + destination.getAbsolutePath());\n+                    }\n+                }\n+                long bytesWritten = 0;\n+                do {\n+                    bytesWritten += out.transferFrom(in, bytesWritten, TRANSFER_CHUNK_SIZE_BYTES);\n+                    fileSize = in.size();\n+                } while (bytesWritten < fileSize);\n+                out.force(false);\n+                FileUtils.closeQuietly(fos);\n+                FileUtils.closeQuietly(fis);\n+                fos = null;\n+                fis = null;\n+                if (move && !FileUtils.deleteFile(source, null, 5)) {\n+                    if (logger == null) {\n+                        FileUtils.deleteFile(destination, null, 5);\n+                        throw new IOException(\"Could not remove file \" + source.getAbsolutePath());\n+                    } else {\n+                        logger.warn(\"Configured to delete source file when renaming/move not successful.  However, unable to delete file at: \" + source.getAbsolutePath());\n+                    }\n+                }\n+            } finally {\n+                FileUtils.releaseQuietly(inLock);\n+                FileUtils.releaseQuietly(outLock);\n+                FileUtils.closeQuietly(fos);\n+                FileUtils.closeQuietly(fis);\n+            }\n+        }\n+        return fileSize;\n+    }\n+\n+    /**\n+     * Copies the given source file to the given destination file. The given\n+     * destination will be overwritten if it already exists.\n+     *\n+     * @param source\n+     * @param destination\n+     * @param lockInputFile if true will lock input file during copy; if false\n+     * will not\n+     * @param lockOutputFile if true will lock output file during copy; if false\n+     * will not\n+     * @param logger\n+     * @return long number of bytes copied\n+     * @throws FileNotFoundException if the source file could not be found\n+     * @throws IOException\n+     * @throws SecurityException if a security manager denies the needed file\n+     * operations\n+     */\n+    public static long copyFile(final File source, final File destination, final boolean lockInputFile, final boolean lockOutputFile, final Logger logger) throws FileNotFoundException, IOException {\n+        return FileUtils.copyFile(source, destination, lockInputFile, lockOutputFile, false, logger);\n+    }\n+\n+    public static long copyFile(final File source, final OutputStream stream, final boolean closeOutputStream, final boolean lockInputFile) throws FileNotFoundException, IOException {\n+        FileInputStream fis = null;\n+        FileLock inLock = null;\n+        long fileSize = 0L;\n+        try {\n+            fis = new FileInputStream(source);\n+            final FileChannel in = fis.getChannel();\n+            if (lockInputFile) {\n+                inLock = in.tryLock(0, Long.MAX_VALUE, true);\n+                if (inLock == null) {\n+                    throw new IOException(\"Unable to obtain exclusive file lock for: \" + source.getAbsolutePath());\n+                }\n+\n+            }\n+\n+            byte[] buffer = new byte[1 << 18]; //256 KB\n+            int bytesRead = -1;\n+            while ((bytesRead = fis.read(buffer)) != -1) {\n+                stream.write(buffer, 0, bytesRead);\n+            }\n+            in.force(false);\n+            stream.flush();\n+            fileSize = in.size();\n+        } finally {\n+            FileUtils.releaseQuietly(inLock);\n+            FileUtils.closeQuietly(fis);\n+            if (closeOutputStream) {\n+                FileUtils.closeQuietly(stream);\n+            }\n+        }\n+        return fileSize;\n+    }\n+\n+    public static long copyFile(final InputStream stream, final File destination, final boolean closeInputStream, final boolean lockOutputFile) throws FileNotFoundException, IOException {\n+        final Path destPath = destination.toPath();\n+        final long size = Files.copy(stream, destPath);\n+        if (closeInputStream) {\n+            stream.close();\n+        }\n+        return size;\n+    }\n+\n+    /**\n+     * Renames the given file from the source path to the destination path. This\n+     * handles multiple attempts. This should only be used to rename within a\n+     * given directory. Renaming across directories might not work well. See the\n+     * <code>File.renameTo</code> for more information.\n+     *\n+     * @param source the file to rename\n+     * @param destination the file path to rename to\n+     * @param maxAttempts the max number of attempts to attempt the rename\n+     * @throws IOException if rename isn't successful\n+     */\n+    public static void renameFile(final File source, final File destination, final int maxAttempts) throws IOException {\n+        FileUtils.renameFile(source, destination, maxAttempts, false);\n+    }\n+\n+    /**\n+     * Renames the given file from the source path to the destination path. This\n+     * handles multiple attempts. This should only be used to rename within a\n+     * given directory. Renaming across directories might not work well. See the\n+     * <code>File.renameTo</code> for more information.\n+     *\n+     * @param source the file to rename\n+     * @param destination the file path to rename to\n+     * @param maxAttempts the max number of attempts to attempt the rename\n+     * @param replace if true and a rename attempt fails will check if a file is\n+     * already at the destination path. If so it will delete that file and\n+     * attempt the rename according the remaining maxAttempts. If false, any\n+     * conflicting files will be left as they were and the rename attempts will\n+     * fail if conflicting.\n+     * @throws IOException if rename isn't successful\n+     */\n+    public static void renameFile(final File source, final File destination, final int maxAttempts, final boolean replace) throws IOException {\n+        final int attempts = (replace || maxAttempts < 1) ? Math.max(2, maxAttempts) : maxAttempts;\n+        boolean renamed = false;\n+        for (int i = 0; i < attempts; i++) {\n+            renamed = source.renameTo(destination);\n+            if (!renamed) {\n+                FileUtils.deleteFile(destination, null, 5);\n+            } else {\n+                break; //rename has succeeded\n+            }\n+        }\n+        if (!renamed) {\n+            throw new IOException(\"Attempted \" + maxAttempts + \" times but unable to rename from \\'\" + source.getPath() + \"\\' to \\'\" + destination.getPath() + \"\\'\");\n+\n+        }\n+    }\n+\n+    public static void sleepQuietly(final long millis) {\n+        try {\n+            Thread.sleep(millis);\n+        } catch (final InterruptedException ex) {\n+            /* do nothing */\n+        }\n+    }\n+\n+    /**\n+     * Syncs a primary copy of a file with the copy in the restore directory. If\n+     * the restore directory does not have a file and the primary has a file,\n+     * the the primary's file is copied to the restore directory. Else if the\n+     * restore directory has a file, but the primary does not, then the\n+     * restore's file is copied to the primary directory. Else if the primary\n+     * file is different than the restore file, then an IllegalStateException is\n+     * thrown. Otherwise, if neither file exists, then no syncing is performed.\n+     *\n+     * @param primaryFile the primary file\n+     * @param restoreFile the restore file\n+     * @param logger a logger\n+     * @throws IOException if an I/O problem was encountered during syncing\n+     * @throws IllegalStateException if the primary and restore copies exist but\n+     * are different\n+     */\n+    public static void syncWithRestore(final File primaryFile, final File restoreFile, final Logger logger)\n+            throws IOException {\n+\n+        if (primaryFile.exists() && !restoreFile.exists()) {\n+            // copy primary file to restore\n+            copyFile(primaryFile, restoreFile, false, false, logger);\n+        } else if (restoreFile.exists() && !primaryFile.exists()) {\n+            // copy restore file to primary\n+            copyFile(restoreFile, primaryFile, false, false, logger);\n+        } else if (primaryFile.exists() && restoreFile.exists() && !isSame(primaryFile, restoreFile)) {\n+            throw new IllegalStateException(String.format(\"Primary file '%s' is different than restore file '%s'\",\n+                    primaryFile.getAbsoluteFile(), restoreFile.getAbsolutePath()));\n+        }\n+    }\n+\n+    /**\n+     * Returns true if the given files are the same according to their MD5 hash.\n+     *\n+     * @param file1 a file\n+     * @param file2 a file\n+     * @return true if the files are the same; false otherwise\n+     * @throws IOException if the MD5 hash could not be computed\n+     */\n+    public static boolean isSame(final File file1, final File file2) throws IOException {\n+        return Arrays.equals(computeMd5Digest(file1), computeMd5Digest(file2));\n+    }\n+\n+    /**\n+     * Returns the MD5 hash of the given file.\n+     *\n+     * @param file a file\n+     * @return the MD5 hash\n+     * @throws IOException if the MD5 hash could not be computed\n+     */\n+    public static byte[] computeMd5Digest(final File file) throws IOException {\n+        BufferedInputStream bis = null;\n+        try {\n+            bis = new BufferedInputStream(new FileInputStream(file));\n+            return DigestUtils.md5(bis);\n+        } finally {\n+            FileUtils.closeQuietly(bis);\n+        }\n+    }\n+}"
        },
        {
            "sha": "ce5064b82f37a83cf27c441906cce11381af3bf5",
            "filename": "commons/nifi-logging-utils/pom.xml",
            "status": "added",
            "additions": 35,
            "deletions": 0,
            "changes": 35,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-logging-utils%2Fpom.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-logging-utils%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-logging-utils%2Fpom.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,35 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements.  See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to You under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License.  You may obtain a copy of the License at\n+      http://www.apache.org/licenses/LICENSE-2.0\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.apache.nifi</groupId>\n+        <artifactId>nifi-parent</artifactId>\n+        <version>0.0.1-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>nifi-logging-utils</artifactId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <name>NiFi Logging Utils</name>\n+    <description>Utilities for logging</description>\n+    \n+\t<dependencies>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-api</artifactId>\n+        </dependency>\n+    </dependencies>\n+</project>"
        },
        {
            "sha": "7c71d8569b29905059b72e52ed3d46b617b06474",
            "filename": "commons/nifi-logging-utils/src/main/java/org/apache/nifi/logging/NiFiLog.java",
            "status": "added",
            "additions": 367,
            "deletions": 0,
            "changes": 367,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-logging-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Flogging%2FNiFiLog.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-logging-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Flogging%2FNiFiLog.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-logging-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Flogging%2FNiFiLog.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,367 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.logging;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.Marker;\n+\n+/**\n+ *\n+ * @author unattributed\n+ */\n+public class NiFiLog implements Logger {\n+\n+    private final Logger logger;\n+\n+    public NiFiLog(final Logger logger) {\n+        this.logger = logger;\n+    }\n+\n+    public Logger getWrappedLog() {\n+        return logger;\n+    }\n+\n+    @Override\n+    public void warn(Marker marker, String string, Throwable thrwbl) {\n+        if (logger.isDebugEnabled()) {\n+            logger.warn(marker, string, thrwbl);\n+        } else {\n+            logger.warn(marker, string);\n+        }\n+    }\n+\n+    @Override\n+    public void warn(Marker marker, String string, Object[] os) {\n+        logger.warn(marker, string, os);\n+    }\n+\n+    @Override\n+    public void warn(Marker marker, String string, Object o, Object o1) {\n+        logger.warn(marker, string, o, o1);\n+    }\n+\n+    @Override\n+    public void warn(Marker marker, String string, Object o) {\n+        logger.warn(marker, string, o);\n+    }\n+\n+    @Override\n+    public void warn(Marker marker, String string) {\n+        logger.warn(marker, string);\n+    }\n+\n+    @Override\n+    public void warn(String string, Throwable thrwbl) {\n+        if (logger.isDebugEnabled()) {\n+            logger.warn(string, thrwbl);\n+        } else {\n+            logger.warn(string);\n+        }\n+    }\n+\n+    @Override\n+    public void warn(String string, Object o, Object o1) {\n+        logger.warn(string, o, o1);\n+    }\n+\n+    @Override\n+    public void warn(String string, Object[] os) {\n+        logger.warn(string, os);\n+    }\n+\n+    @Override\n+    public void warn(String string, Object o) {\n+        logger.warn(string, o);\n+    }\n+\n+    @Override\n+    public void warn(String string) {\n+        logger.warn(string);\n+    }\n+\n+    @Override\n+    public void trace(Marker marker, String string, Throwable thrwbl) {\n+        logger.trace(marker, string, thrwbl);\n+    }\n+\n+    @Override\n+    public void trace(Marker marker, String string, Object[] os) {\n+        logger.trace(marker, string, os);\n+    }\n+\n+    @Override\n+    public void trace(Marker marker, String string, Object o, Object o1) {\n+        logger.trace(marker, string, o, o1);\n+    }\n+\n+    @Override\n+    public void trace(Marker marker, String string, Object o) {\n+        logger.trace(marker, string, o);\n+    }\n+\n+    @Override\n+    public void trace(Marker marker, String string) {\n+        logger.trace(marker, string);\n+    }\n+\n+    @Override\n+    public void trace(String string, Throwable thrwbl) {\n+        logger.trace(string, thrwbl);\n+    }\n+\n+    @Override\n+    public void trace(String string, Object[] os) {\n+        logger.trace(string, os);\n+    }\n+\n+    @Override\n+    public void trace(String string, Object o, Object o1) {\n+        logger.trace(string, o, o1);\n+    }\n+\n+    @Override\n+    public void trace(String string, Object o) {\n+        logger.trace(string, o);\n+    }\n+\n+    @Override\n+    public void trace(String string) {\n+        logger.trace(string);\n+    }\n+\n+    @Override\n+    public boolean isWarnEnabled(Marker marker) {\n+        return logger.isWarnEnabled(marker);\n+    }\n+\n+    @Override\n+    public boolean isWarnEnabled() {\n+        return logger.isWarnEnabled();\n+    }\n+\n+    @Override\n+    public boolean isTraceEnabled(Marker marker) {\n+        return logger.isTraceEnabled(marker);\n+    }\n+\n+    @Override\n+    public boolean isTraceEnabled() {\n+        return logger.isTraceEnabled();\n+    }\n+\n+    @Override\n+    public boolean isInfoEnabled(Marker marker) {\n+        return logger.isInfoEnabled(marker);\n+    }\n+\n+    @Override\n+    public boolean isInfoEnabled() {\n+        return logger.isInfoEnabled();\n+    }\n+\n+    @Override\n+    public boolean isErrorEnabled(Marker marker) {\n+        return logger.isErrorEnabled(marker);\n+    }\n+\n+    @Override\n+    public boolean isErrorEnabled() {\n+        return logger.isErrorEnabled();\n+    }\n+\n+    @Override\n+    public boolean isDebugEnabled(Marker marker) {\n+        return logger.isDebugEnabled(marker);\n+    }\n+\n+    @Override\n+    public boolean isDebugEnabled() {\n+        return logger.isDebugEnabled();\n+    }\n+\n+    @Override\n+    public void info(Marker marker, String string, Throwable thrwbl) {\n+        if (logger.isDebugEnabled()) {\n+            logger.info(marker, string, thrwbl);\n+        } else {\n+            logger.info(marker, string);\n+        }\n+    }\n+\n+    @Override\n+    public void info(Marker marker, String string, Object[] os) {\n+        logger.info(marker, string, os);\n+    }\n+\n+    @Override\n+    public void info(Marker marker, String string, Object o, Object o1) {\n+        logger.info(marker, string, o, o1);\n+    }\n+\n+    @Override\n+    public void info(Marker marker, String string, Object o) {\n+        logger.info(marker, string, o);\n+    }\n+\n+    @Override\n+    public void info(Marker marker, String string) {\n+        logger.info(marker, string);\n+    }\n+\n+    @Override\n+    public void info(String string, Throwable thrwbl) {\n+        if (logger.isDebugEnabled()) {\n+            logger.info(string, thrwbl);\n+        } else {\n+            logger.info(string);\n+        }\n+    }\n+\n+    @Override\n+    public void info(String string, Object[] os) {\n+        logger.info(string, os);\n+    }\n+\n+    @Override\n+    public void info(String string, Object o, Object o1) {\n+        logger.info(string, o, o1);\n+    }\n+\n+    @Override\n+    public void info(String string, Object o) {\n+        logger.info(string, o);\n+    }\n+\n+    @Override\n+    public void info(String string) {\n+        logger.info(string);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return logger.getName();\n+    }\n+\n+    @Override\n+    public void error(Marker marker, String string, Throwable thrwbl) {\n+        if (logger.isDebugEnabled()) {\n+            logger.error(marker, string, thrwbl);\n+        } else {\n+            logger.error(marker, string);\n+        }\n+    }\n+\n+    @Override\n+    public void error(Marker marker, String string, Object[] os) {\n+        logger.error(marker, string, os);\n+    }\n+\n+    @Override\n+    public void error(Marker marker, String string, Object o, Object o1) {\n+        logger.error(marker, string, o, o1);\n+    }\n+\n+    @Override\n+    public void error(Marker marker, String string, Object o) {\n+        logger.error(marker, string, o);\n+    }\n+\n+    @Override\n+    public void error(Marker marker, String string) {\n+        logger.error(marker, string);\n+    }\n+\n+    @Override\n+    public void error(String string, Throwable thrwbl) {\n+        if (logger.isDebugEnabled()) {\n+            logger.error(string, thrwbl);\n+        } else {\n+            logger.error(string);\n+        }\n+    }\n+\n+    @Override\n+    public void error(String string, Object[] os) {\n+        logger.error(string, os);\n+    }\n+\n+    @Override\n+    public void error(String string, Object o, Object o1) {\n+        logger.error(string, o, o1);\n+    }\n+\n+    @Override\n+    public void error(String string, Object o) {\n+        logger.error(string, o);\n+    }\n+\n+    @Override\n+    public void error(String string) {\n+        logger.error(string);\n+    }\n+\n+    @Override\n+    public void debug(Marker marker, String string, Throwable thrwbl) {\n+        logger.debug(marker, string, thrwbl);\n+    }\n+\n+    @Override\n+    public void debug(Marker marker, String string, Object[] os) {\n+        logger.debug(marker, string, os);\n+    }\n+\n+    @Override\n+    public void debug(Marker marker, String string, Object o, Object o1) {\n+        logger.debug(marker, string, o, o1);\n+    }\n+\n+    @Override\n+    public void debug(Marker marker, String string, Object o) {\n+        logger.debug(marker, string, o);\n+    }\n+\n+    @Override\n+    public void debug(Marker marker, String string) {\n+        logger.debug(marker, string);\n+    }\n+\n+    @Override\n+    public void debug(String string, Throwable thrwbl) {\n+        logger.debug(string, thrwbl);\n+    }\n+\n+    @Override\n+    public void debug(String string, Object[] os) {\n+        logger.debug(string, os);\n+    }\n+\n+    @Override\n+    public void debug(String string, Object o, Object o1) {\n+        logger.debug(string, o, o1);\n+    }\n+\n+    @Override\n+    public void debug(String string, Object o) {\n+        logger.debug(string, o);\n+    }\n+\n+    @Override\n+    public void debug(String string) {\n+        logger.debug(string);\n+    }\n+\n+}"
        },
        {
            "sha": "7684d53c52767d7035fb4c9805b94c9e75d8ab42",
            "filename": "commons/nifi-parent/pom.xml",
            "status": "added",
            "additions": 217,
            "deletions": 0,
            "changes": 217,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-parent%2Fpom.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-parent%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-parent%2Fpom.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,217 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements.  See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to You under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License.  You may obtain a copy of the License at\n+      http://www.apache.org/licenses/LICENSE-2.0\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <groupId>org.apache.nifi</groupId>\n+    <artifactId>nifi-parent</artifactId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <packaging>pom</packaging>\n+    <name>NiFi Parent</name>\n+\n+    <description>A helpful parent pom which can be used for all NiFi components.  Helps establish the basic requirements/depdencies.</description>\n+\t\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <org.slf4j.version>1.7.7</org.slf4j.version>\n+    </properties>\n+\n+    <build>\n+        <pluginManagement>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.codehaus.mojo</groupId>\n+                    <artifactId>findbugs-maven-plugin</artifactId>\n+                    <version>3.0.0</version>\n+                    <configuration>\n+                        <effort>Max</effort>\n+                        <threshold>Medium</threshold>\n+                        <xmlOutput>true</xmlOutput>\n+                    </configuration>\n+                    <executions>\n+                        <execution>\n+                            <goals>\n+                                <goal>check</goal>\n+                            </goals>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </pluginManagement>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.nifi</groupId>\n+                <artifactId>nar-maven-plugin</artifactId>\n+                <version>0.0.1-SNAPSHOT</version>\n+                <extensions>true</extensions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <configuration>\n+                    <source>1.7</source>\n+                    <target>1.7</target>\n+                    <fork>true</fork>\n+                </configuration>\n+                <version>3.2</version>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <version>2.5</version>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-war-plugin</artifactId>\n+                <version>2.5</version>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-dependency-plugin</artifactId>\n+                <version>2.9</version>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-resources-plugin</artifactId>\n+                <version>2.7</version>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>2.18</version>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-assembly-plugin</artifactId>\n+                <version>2.5.2</version>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-release-plugin</artifactId>\n+                <version>2.5.1</version>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>jaxb2-maven-plugin</artifactId>\n+                <version>1.6</version>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-source-plugin</artifactId>\n+                <version>2.4</version>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>exec-maven-plugin</artifactId>\n+                <version>1.3.2</version>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-site-plugin</artifactId>\n+                <version>3.4</version>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-javadoc-plugin</artifactId>\n+                <version>2.10.1</version>\n+                <configuration>\n+                    <failOnError>false</failOnError>\n+                    <quiet>true</quiet>\n+                    <show>private</show>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+    <dependencyManagement>\n+        <dependencies>\n+            <dependency>\n+                <groupId>ch.qos.logback</groupId>\n+                <artifactId>logback-classic</artifactId>\n+                <version>1.1.2</version>\n+                <scope>provided</scope>\n+                <exclusions>\n+                    <exclusion>\n+                        <groupId>org.slf4j</groupId>\n+                        <artifactId>slf4j-api</artifactId>\n+                    </exclusion>\n+                </exclusions>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.slf4j</groupId>\n+                <artifactId>jcl-over-slf4j</artifactId>\n+                <version>${org.slf4j.version}</version>\n+                <scope>provided</scope>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.slf4j</groupId>\n+                <artifactId>jul-to-slf4j</artifactId>\n+                <version>${org.slf4j.version}</version>\n+                <scope>provided</scope>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.slf4j</groupId>\n+                <artifactId>slf4j-api</artifactId>\n+                <version>${org.slf4j.version}</version>\n+                <scope>provided</scope>\n+            </dependency>\n+        </dependencies>\n+    </dependencyManagement>\n+    <dependencies>\n+        <!-- required for libraries using commons-loggings -->\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <version>4.11</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.mockito</groupId>\n+            <artifactId>mockito-core</artifactId>\n+            <version>1.10.8</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-simple</artifactId>\n+            <version>${org.slf4j.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+    <!-- All projects use the same distrubution Manager for publishing artifacts \n+    but for obtaining them this is specified in the settings.xml file for each \n+    user -->\n+    <distributionManagement>\n+        <repository>\n+            <id>nifi-releases</id>\n+            <url>${nifi.repo.url}</url>\n+        </repository>\n+        <snapshotRepository>\n+            <id>nifi-snapshots</id>\n+            <url>${nifi.snapshot.repo.url}</url>\n+        </snapshotRepository>\n+    </distributionManagement>\n+    <reporting>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>findbugs-maven-plugin</artifactId>\n+                <version>3.0.0</version>\n+                <configuration>\n+                    <effort>Max</effort>\n+                    <threshold>Medium</threshold>\n+                    <xmlOutput>true</xmlOutput>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </reporting>\n+</project>"
        },
        {
            "sha": "073c9faaea1087430e21319c1e5c49dcd91fb7b9",
            "filename": "commons/nifi-properties/.gitignore",
            "status": "added",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-properties%2F.gitignore",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-properties%2F.gitignore",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-properties%2F.gitignore?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,3 @@\n+/target\n+/target\n+/target"
        },
        {
            "sha": "70f90aa0b7f580f3aa100a1d4fef8080195382f1",
            "filename": "commons/nifi-properties/pom.xml",
            "status": "added",
            "additions": 29,
            "deletions": 0,
            "changes": 29,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-properties%2Fpom.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-properties%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-properties%2Fpom.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements.  See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to You under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License.  You may obtain a copy of the License at\n+      http://www.apache.org/licenses/LICENSE-2.0\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.apache.nifi</groupId>\n+        <artifactId>nifi-parent</artifactId>\n+        <version>0.0.1-SNAPSHOT</version>\n+    </parent>\n+    <artifactId>nifi-properties</artifactId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <name>NiFi Properties</name>\n+\n+    <dependencies>\n+    </dependencies>\n+</project>"
        },
        {
            "sha": "15208146a6fe7480c17135efb79c205c2fc8fb71",
            "filename": "commons/nifi-properties/src/main/java/org/apache/nifi/util/NiFiProperties.java",
            "status": "added",
            "additions": 882,
            "deletions": 0,
            "changes": 882,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-properties%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FNiFiProperties.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-properties%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FNiFiProperties.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-properties%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FNiFiProperties.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,882 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.util;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.net.InetSocketAddress;\n+import java.nio.file.InvalidPathException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+public class NiFiProperties extends Properties {\n+\n+    private static final long serialVersionUID = 2119177359005492702L;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(NiFiProperties.class);\n+    private static NiFiProperties instance = null;\n+\n+    // core properties\n+    public static final String PROPERTIES_FILE_PATH = \"nifi.properties.file.path\";\n+    public static final String FLOW_CONFIGURATION_FILE = \"nifi.flow.configuration.file\";\n+    public static final String FLOW_CONFIGURATION_ARCHIVE_FILE = \"nifi.flow.configuration.archive.file\";\n+    public static final String TASK_CONFIGURATION_FILE = \"nifi.reporting.task.configuration.file\";\n+    public static final String SERVICE_CONFIGURATION_FILE = \"nifi.controller.service.configuration.file\";\n+    public static final String AUTHORITY_PROVIDER_CONFIGURATION_FILE = \"nifi.authority.provider.configuration.file\";\n+    public static final String REPOSITORY_DATABASE_DIRECTORY = \"nifi.database.directory\";\n+    public static final String RESTORE_DIRECTORY = \"nifi.restore.directory\";\n+    public static final String VERSION = \"nifi.version\";\n+    public static final String WRITE_DELAY_INTERVAL = \"nifi.flowservice.writedelay.interval\";\n+    public static final String AUTO_RESUME_STATE = \"nifi.flowcontroller.autoResumeState\";\n+    public static final String FLOW_CONTROLLER_GRACEFUL_SHUTDOWN_PERIOD = \"nifi.flowcontroller.graceful.shutdown.period\";\n+    public static final String NAR_LIBRARY_DIRECTORY = \"nifi.nar.library.directory\";\n+    public static final String NAR_WORKING_DIRECTORY = \"nifi.nar.working.directory\";\n+    public static final String COMPONENT_DOCS_DIRECTORY = \"nifi.documentation.working.directory\";\n+    public static final String SENSITIVE_PROPS_KEY = \"nifi.sensitive.props.key\";\n+    public static final String SENSITIVE_PROPS_ALGORITHM = \"nifi.sensitive.props.algorithm\";\n+    public static final String SENSITIVE_PROPS_PROVIDER = \"nifi.sensitive.props.provider\";\n+    public static final String H2_URL_APPEND = \"nifi.h2.url.append\";\n+    public static final String REMOTE_INPUT_PORT = \"nifi.remote.input.socket.port\";\n+    public static final String SITE_TO_SITE_SECURE = \"nifi.remote.input.secure\";\n+    public static final String TEMPLATE_DIRECTORY = \"nifi.templates.directory\";\n+    public static final String ADMINISTRATIVE_YIELD_DURATION = \"nifi.administrative.yield.duration\";\n+    public static final String PERSISTENT_STATE_DIRECTORY = \"nifi.persistent.state.directory\";\n+\n+    // content repository properties\n+    public static final String REPOSITORY_CONTENT_PREFIX = \"nifi.content.repository.directory.\";\n+    public static final String CONTENT_REPOSITORY_IMPLEMENTATION = \"nifi.content.repository.implementation\";\n+    public static final String MAX_APPENDABLE_CLAIM_SIZE = \"nifi.content.claim.max.appendable.size\";\n+    public static final String MAX_FLOWFILES_PER_CLAIM = \"nifi.content.claim.max.flow.files\";\n+    public static final String CONTENT_ARCHIVE_MAX_RETENTION_PERIOD = \"nifi.content.repository.archive.max.retention.period\";\n+    public static final String CONTENT_ARCHIVE_MAX_USAGE_PERCENTAGE = \"nifi.content.repository.archive.max.usage.percentage\";\n+    public static final String CONTENT_ARCHIVE_BACK_PRESSURE_PERCENTAGE = \"nifi.content.repository.archive.backpressure.percentage\";\n+    public static final String CONTENT_ARCHIVE_ENABLED = \"nifi.content.repository.archive.enabled\";\n+    public static final String CONTENT_ARCHIVE_CLEANUP_FREQUENCY = \"nifi.content.repository.archive.cleanup.frequency\";\n+    public static final String CONTENT_VIEWER_URL = \"nifi.content.viewer.url\";\n+\n+    // flowfile repository properties\n+    public static final String FLOWFILE_REPOSITORY_IMPLEMENTATION = \"nifi.flowfile.repository.implementation\";\n+    public static final String FLOWFILE_REPOSITORY_ALWAYS_SYNC = \"nifi.flowfile.repository.always.sync\";\n+    public static final String FLOWFILE_REPOSITORY_DIRECTORY = \"nifi.flowfile.repository.directory\";\n+    public static final String FLOWFILE_REPOSITORY_PARTITIONS = \"nifi.flowfile.repository.partitions\";\n+    public static final String FLOWFILE_REPOSITORY_CHECKPOINT_INTERVAL = \"nifi.flowfile.repository.checkpoint.interval\";\n+    public static final String FLOWFILE_SWAP_MANAGER_IMPLEMENTATION = \"nifi.swap.manager.implementation\";\n+    public static final String QUEUE_SWAP_THRESHOLD = \"nifi.queue.swap.threshold\";\n+    public static final String SWAP_STORAGE_LOCATION = \"nifi.swap.storage.directory\";\n+    public static final String SWAP_IN_THREADS = \"nifi.swap.in.threads\";\n+    public static final String SWAP_IN_PERIOD = \"nifi.swap.in.period\";\n+    public static final String SWAP_OUT_THREADS = \"nifi.swap.out.threads\";\n+    public static final String SWAP_OUT_PERIOD = \"nifi.swap.out.period\";\n+\n+    // provenance properties\n+    public static final String PROVENANCE_REPO_IMPLEMENTATION_CLASS = \"nifi.provenance.repository.implementation\";\n+    public static final String PROVENANCE_REPO_DIRECTORY_PREFIX = \"nifi.provenance.repository.directory.\";\n+    public static final String PROVENANCE_MAX_STORAGE_TIME = \"nifi.provenance.repository.max.storage.time\";\n+    public static final String PROVENANCE_MAX_STORAGE_SIZE = \"nifi.provenance.repository.max.storage.size\";\n+    public static final String PROVENANCE_ROLLOVER_TIME = \"nifi.provenance.repository.rollover.time\";\n+    public static final String PROVENANCE_ROLLOVER_SIZE = \"nifi.provenance.repository.rollover.size\";\n+    public static final String PROVENANCE_QUERY_THREAD_POOL_SIZE = \"nifi.provenance.repository.query.threads\";\n+    public static final String PROVENANCE_COMPRESS_ON_ROLLOVER = \"nifi.provenance.repository.compress.on.rollover\";\n+    public static final String PROVENANCE_INDEXED_FIELDS = \"nifi.provenance.repository.indexed.fields\";\n+    public static final String PROVENANCE_INDEXED_ATTRIBUTES = \"nifi.provenance.repository.indexed.attributes\";\n+    public static final String PROVENANCE_INDEX_SHARD_SIZE = \"nifi.provenance.repository.index.shard.size\";\n+    public static final String PROVENANCE_JOURNAL_COUNT = \"nifi.provenance.repository.journal.count\";\n+\n+    // component status repository properties\n+    public static final String COMPONENT_STATUS_REPOSITORY_IMPLEMENTATION = \"nifi.components.status.repository.implementation\";\n+    public static final String COMPONENT_STATUS_SNAPSHOT_FREQUENCY = \"nifi.components.status.snapshot.frequency\";\n+\n+    // encryptor properties\n+    public static final String NF_SENSITIVE_PROPS_KEY = \"nifi.sensitive.props.key\";\n+    public static final String NF_SENSITIVE_PROPS_ALGORITHM = \"nifi.sensitive.props.algorithm\";\n+    public static final String NF_SENSITIVE_PROPS_PROVIDER = \"nifi.sensitive.props.provider\";\n+\n+    // security properties\n+    public static final String SECURITY_KEYSTORE = \"nifi.security.keystore\";\n+    public static final String SECURITY_KEYSTORE_TYPE = \"nifi.security.keystoreType\";\n+    public static final String SECURITY_KEYSTORE_PASSWD = \"nifi.security.keystorePasswd\";\n+    public static final String SECURITY_KEY_PASSWD = \"nifi.security.keyPasswd\";\n+    public static final String SECURITY_TRUSTSTORE = \"nifi.security.truststore\";\n+    public static final String SECURITY_TRUSTSTORE_TYPE = \"nifi.security.truststoreType\";\n+    public static final String SECURITY_TRUSTSTORE_PASSWD = \"nifi.security.truststorePasswd\";\n+    public static final String SECURITY_NEED_CLIENT_AUTH = \"nifi.security.needClientAuth\";\n+    public static final String SECURITY_USER_AUTHORITY_PROVIDER = \"nifi.security.user.authority.provider\";\n+    public static final String SECURITY_CLUSTER_AUTHORITY_PROVIDER_PORT = \"nifi.security.cluster.authority.provider.port\";\n+    public static final String SECURITY_CLUSTER_AUTHORITY_PROVIDER_THREADS = \"nifi.security.cluster.authority.provider.threads\";\n+    public static final String SECURITY_USER_CREDENTIAL_CACHE_DURATION = \"nifi.security.user.credential.cache.duration\";\n+    public static final String SECURITY_SUPPORT_NEW_ACCOUNT_REQUESTS = \"nifi.security.support.new.account.requests\";\n+    public static final String SECURITY_DEFAULT_USER_ROLES = \"nifi.security.default.user.roles\";\n+    public static final String SECURITY_OCSP_RESPONDER_URL = \"nifi.security.ocsp.responder.url\";\n+    public static final String SECURITY_OCSP_RESPONDER_CERTIFICATE = \"nifi.security.ocsp.responder.certificate\";\n+\n+    // web properties\n+    public static final String WEB_WAR_DIR = \"nifi.web.war.directory\";\n+    public static final String WEB_HTTP_PORT = \"nifi.web.http.port\";\n+    public static final String WEB_HTTP_HOST = \"nifi.web.http.host\";\n+    public static final String WEB_HTTPS_PORT = \"nifi.web.https.port\";\n+    public static final String WEB_HTTPS_HOST = \"nifi.web.https.host\";\n+    public static final String WEB_WORKING_DIR = \"nifi.web.jetty.working.directory\";\n+\n+    // ui properties\n+    public static final String UI_BANNER_TEXT = \"nifi.ui.banner.text\";\n+    public static final String UI_AUTO_REFRESH_INTERVAL = \"nifi.ui.autorefresh.interval\";\n+\n+    // cluster common properties\n+    public static final String CLUSTER_PROTOCOL_HEARTBEAT_INTERVAL = \"nifi.cluster.protocol.heartbeat.interval\";\n+    public static final String CLUSTER_PROTOCOL_IS_SECURE = \"nifi.cluster.protocol.is.secure\";\n+    public static final String CLUSTER_PROTOCOL_SOCKET_TIMEOUT = \"nifi.cluster.protocol.socket.timeout\";\n+    public static final String CLUSTER_PROTOCOL_CONNECTION_HANDSHAKE_TIMEOUT = \"nifi.cluster.protocol.connection.handshake.timeout\";\n+    public static final String CLUSTER_PROTOCOL_USE_MULTICAST = \"nifi.cluster.protocol.use.multicast\";\n+    public static final String CLUSTER_PROTOCOL_MULTICAST_ADDRESS = \"nifi.cluster.protocol.multicast.address\";\n+    public static final String CLUSTER_PROTOCOL_MULTICAST_PORT = \"nifi.cluster.protocol.multicast.port\";\n+    public static final String CLUSTER_PROTOCOL_MULTICAST_SERVICE_BROADCAST_DELAY = \"nifi.cluster.protocol.multicast.service.broadcast.delay\";\n+    public static final String CLUSTER_PROTOCOL_MULTICAST_SERVICE_LOCATOR_ATTEMPTS = \"nifi.cluster.protocol.multicast.service.locator.attempts\";\n+    public static final String CLUSTER_PROTOCOL_MULTICAST_SERVICE_LOCATOR_ATTEMPTS_DELAY = \"nifi.cluster.protocol.multicast.service.locator.attempts.delay\";\n+\n+    // cluster node properties\n+    public static final String CLUSTER_IS_NODE = \"nifi.cluster.is.node\";\n+    public static final String CLUSTER_NODE_ADDRESS = \"nifi.cluster.node.address\";\n+    public static final String CLUSTER_NODE_PROTOCOL_PORT = \"nifi.cluster.node.protocol.port\";\n+    public static final String CLUSTER_NODE_PROTOCOL_THREADS = \"nifi.cluster.node.protocol.threads\";\n+    public static final String CLUSTER_NODE_UNICAST_MANAGER_ADDRESS = \"nifi.cluster.node.unicast.manager.address\";\n+    public static final String CLUSTER_NODE_UNICAST_MANAGER_PROTOCOL_PORT = \"nifi.cluster.node.unicast.manager.protocol.port\";\n+\n+    // cluster manager properties\n+    public static final String CLUSTER_IS_MANAGER = \"nifi.cluster.is.manager\";\n+    public static final String CLUSTER_MANAGER_ADDRESS = \"nifi.cluster.manager.address\";\n+    public static final String CLUSTER_MANAGER_PROTOCOL_PORT = \"nifi.cluster.manager.protocol.port\";\n+    public static final String CLUSTER_MANAGER_NODE_FIREWALL_FILE = \"nifi.cluster.manager.node.firewall.file\";\n+    public static final String CLUSTER_MANAGER_NODE_EVENT_HISTORY_SIZE = \"nifi.cluster.manager.node.event.history.size\";\n+    public static final String CLUSTER_MANAGER_NODE_API_CONNECTION_TIMEOUT = \"nifi.cluster.manager.node.api.connection.timeout\";\n+    public static final String CLUSTER_MANAGER_NODE_API_READ_TIMEOUT = \"nifi.cluster.manager.node.api.read.timeout\";\n+    public static final String CLUSTER_MANAGER_NODE_API_REQUEST_THREADS = \"nifi.cluster.manager.node.api.request.threads\";\n+    public static final String CLUSTER_MANAGER_FLOW_RETRIEVAL_DELAY = \"nifi.cluster.manager.flow.retrieval.delay\";\n+    public static final String CLUSTER_MANAGER_PROTOCOL_THREADS = \"nifi.cluster.manager.protocol.threads\";\n+    public static final String CLUSTER_MANAGER_SAFEMODE_DURATION = \"nifi.cluster.manager.safemode.duration\";\n+\n+    // defaults\n+    public static final String DEFAULT_TITLE = \"NiFi\";\n+    public static final Boolean DEFAULT_AUTO_RESUME_STATE = true;\n+    public static final String DEFAULT_AUTHORITY_PROVIDER_CONFIGURATION_FILE = \"conf/authority-providers.xml\";\n+    public static final String DEFAULT_USER_CREDENTIAL_CACHE_DURATION = \"24 hours\";\n+    public static final Integer DEFAULT_REMOTE_INPUT_PORT = null;\n+    public static final Path DEFAULT_TEMPLATE_DIRECTORY = Paths.get(\"conf\", \"templates\");\n+    public static final String DEFAULT_WEB_WORKING_DIR = \"./work/jetty\";\n+    public static final String DEFAULT_NAR_WORKING_DIR = \"./work/nar\";\n+    public static final String DEFAULT_COMPONENT_DOCS_DIRECTORY = \"./work/docs/components\";\n+    public static final String DEFAULT_NAR_LIBRARY_DIR = \"./lib\";\n+    public static final String DEFAULT_FLOWFILE_REPO_PARTITIONS = \"256\";\n+    public static final String DEFAULT_FLOWFILE_CHECKPOINT_INTERVAL = \"2 min\";\n+    public static final int DEFAULT_MAX_FLOWFILES_PER_CLAIM = 100;\n+    public static final int DEFAULT_QUEUE_SWAP_THRESHOLD = 20000;\n+    public static final String DEFAULT_SWAP_STORAGE_LOCATION = \"./flowfile_repository/swap\";\n+    public static final String DEFAULT_SWAP_IN_PERIOD = \"1 sec\";\n+    public static final String DEFAULT_SWAP_OUT_PERIOD = \"5 sec\";\n+    public static final int DEFAULT_SWAP_IN_THREADS = 4;\n+    public static final int DEFAULT_SWAP_OUT_THREADS = 4;\n+    public static final String DEFAULT_ADMINISTRATIVE_YIELD_DURATION = \"30 sec\";\n+    public static final String DEFAULT_PERSISTENT_STATE_DIRECTORY = \"./conf/state\";\n+    public static final String DEFAULT_COMPONENT_STATUS_SNAPSHOT_FREQUENCY = \"5 mins\";\n+\n+    // cluster common defaults\n+    public static final String DEFAULT_CLUSTER_PROTOCOL_HEARTBEAT_INTERVAL = \"5 sec\";\n+    public static final String DEFAULT_CLUSTER_PROTOCOL_MULTICAST_SERVICE_BROADCAST_DELAY = \"500 ms\";\n+    public static final int DEFAULT_CLUSTER_PROTOCOL_MULTICAST_SERVICE_LOCATOR_ATTEMPTS = 3;\n+    public static final String DEFAULT_CLUSTER_PROTOCOL_MULTICAST_SERVICE_LOCATOR_ATTEMPTS_DELAY = \"1 sec\";\n+    public static final String DEFAULT_CLUSTER_PROTOCOL_SOCKET_TIMEOUT = \"30 sec\";\n+    public static final String DEFAULT_CLUSTER_PROTOCOL_CONNECTION_HANDSHAKE_TIMEOUT = \"45 sec\";\n+\n+    // cluster node defaults\n+    public static final int DEFAULT_CLUSTER_NODE_PROTOCOL_THREADS = 2;\n+\n+    // cluster manager defaults\n+    public static final int DEFAULT_CLUSTER_MANAGER_NODE_EVENT_HISTORY_SIZE = 10;\n+    public static final String DEFAULT_CLUSTER_MANAGER_NODE_API_CONNECTION_TIMEOUT = \"30 sec\";\n+    public static final String DEFAULT_CLUSTER_MANAGER_NODE_API_READ_TIMEOUT = \"30 sec\";\n+    public static final int DEFAULT_CLUSTER_MANAGER_NODE_API_NUM_REQUEST_THREADS = 10;\n+    public static final String DEFAULT_CLUSTER_MANAGER_FLOW_RETRIEVAL_DELAY = \"5 sec\";\n+    public static final int DEFAULT_CLUSTER_MANAGER_PROTOCOL_THREADS = 10;\n+    public static final String DEFAULT_CLUSTER_MANAGER_SAFEMODE_DURATION = \"0 sec\";\n+\n+    private NiFiProperties() {\n+        super();\n+    }\n+\n+    /**\n+     * This is the method through which the NiFiProperties object should be\n+     * obtained.\n+     *\n+     * @return the NiFiProperties object to use\n+     * @throws RuntimeException if unable to load properties file\n+     */\n+    public static synchronized NiFiProperties getInstance() {\n+        if (null == instance) {\n+            final NiFiProperties suspectInstance = new NiFiProperties();\n+            final String nfPropertiesFilePath = System.getProperty(NiFiProperties.PROPERTIES_FILE_PATH);\n+            if (null == nfPropertiesFilePath || nfPropertiesFilePath.trim().length() == 0) {\n+                throw new RuntimeException(\"Requires a system property called \\'\" + NiFiProperties.PROPERTIES_FILE_PATH + \"\\' and this is not set or has no value\");\n+            }\n+            final File propertiesFile = new File(nfPropertiesFilePath);\n+            if (!propertiesFile.exists()) {\n+                throw new RuntimeException(\"Properties file doesn't exist \\'\" + propertiesFile.getAbsolutePath() + \"\\'\");\n+            }\n+            if (!propertiesFile.canRead()) {\n+                throw new RuntimeException(\"Properties file exists but cannot be read \\'\" + propertiesFile.getAbsolutePath() + \"\\'\");\n+            }\n+            InputStream inStream = null;\n+            try {\n+                inStream = new BufferedInputStream(new FileInputStream(propertiesFile));\n+                suspectInstance.load(inStream);\n+            } catch (final Exception ex) {\n+                LOG.error(\"Cannot load properties file due to \" + ex.getLocalizedMessage());\n+                throw new RuntimeException(\"Cannot load properties file due to \" + ex.getLocalizedMessage(), ex);\n+            } finally {\n+                if (null != inStream) {\n+                    try {\n+                        inStream.close();\n+                    } catch (final Exception ex) {\n+                        /**\n+                         * do nothing *\n+                         */\n+                    }\n+                }\n+            }\n+            instance = suspectInstance;\n+        }\n+        return instance;\n+    }\n+\n+    // getters for core properties //\n+    public File getFlowConfigurationFile() {\n+        try {\n+            return new File(getProperty(FLOW_CONFIGURATION_FILE));\n+        } catch (Exception ex) {\n+            return null;\n+        }\n+    }\n+\n+    public File getFlowConfigurationFileDir() {\n+        try {\n+            return getFlowConfigurationFile().getParentFile();\n+        } catch (Exception ex) {\n+            return null;\n+        }\n+    }\n+\n+    private Integer getPropertyAsPort(final String propertyName, final Integer defaultValue) {\n+        final String port = getProperty(propertyName);\n+        if (StringUtils.isEmpty(port)) {\n+            return defaultValue;\n+        }\n+        try {\n+            final int val = Integer.parseInt(port);\n+            if (val <= 0 || val > 65535) {\n+                throw new RuntimeException(\"Valid port range is 0 - 65535 but got \" + val);\n+            }\n+            return val;\n+        } catch (final NumberFormatException e) {\n+            return defaultValue;\n+        }\n+    }\n+\n+    public int getQueueSwapThreshold() {\n+        final String thresholdValue = getProperty(QUEUE_SWAP_THRESHOLD);\n+        if (thresholdValue == null) {\n+            return DEFAULT_QUEUE_SWAP_THRESHOLD;\n+        }\n+\n+        try {\n+            return Integer.parseInt(thresholdValue);\n+        } catch (final NumberFormatException e) {\n+            return DEFAULT_QUEUE_SWAP_THRESHOLD;\n+        }\n+    }\n+\n+    public File getSwapStorageLocation() {\n+        final String location = getProperty(SWAP_STORAGE_LOCATION);\n+        if (location == null) {\n+            return new File(DEFAULT_SWAP_STORAGE_LOCATION);\n+        } else {\n+            return new File(location);\n+        }\n+    }\n+\n+    public Integer getIntegerProperty(final String propertyName, final Integer defaultValue) {\n+        final String value = getProperty(propertyName);\n+        if (value == null) {\n+            return defaultValue;\n+        }\n+\n+        try {\n+            return Integer.parseInt(getProperty(propertyName));\n+        } catch (final Exception e) {\n+            return defaultValue;\n+        }\n+    }\n+\n+    public int getSwapInThreads() {\n+        return getIntegerProperty(SWAP_IN_THREADS, DEFAULT_SWAP_IN_THREADS);\n+    }\n+\n+    public int getSwapOutThreads() {\n+        final String value = getProperty(SWAP_OUT_THREADS);\n+        if (value == null) {\n+            return DEFAULT_SWAP_OUT_THREADS;\n+        }\n+\n+        try {\n+            return Integer.parseInt(getProperty(SWAP_OUT_THREADS));\n+        } catch (final Exception e) {\n+            return DEFAULT_SWAP_OUT_THREADS;\n+        }\n+    }\n+\n+    public String getSwapInPeriod() {\n+        return getProperty(SWAP_IN_PERIOD, DEFAULT_SWAP_IN_PERIOD);\n+    }\n+\n+    public String getSwapOutPeriod() {\n+        return getProperty(SWAP_OUT_PERIOD, DEFAULT_SWAP_OUT_PERIOD);\n+    }\n+\n+    public String getAdministrativeYieldDuration() {\n+        return getProperty(ADMINISTRATIVE_YIELD_DURATION, DEFAULT_ADMINISTRATIVE_YIELD_DURATION);\n+    }\n+\n+    /**\n+     * The socket port to listen on for a Remote Input Port.\n+     *\n+     * @return\n+     */\n+    public Integer getRemoteInputPort() {\n+        return getPropertyAsPort(REMOTE_INPUT_PORT, DEFAULT_REMOTE_INPUT_PORT);\n+    }\n+\n+    public Boolean isSiteToSiteSecure() {\n+        final String secureVal = getProperty(SITE_TO_SITE_SECURE);\n+        if (secureVal == null) {\n+            return null;\n+        }\n+\n+        if (\"true\".equalsIgnoreCase(secureVal)) {\n+            return true;\n+        }\n+        if (\"false\".equalsIgnoreCase(secureVal)) {\n+            return false;\n+        }\n+\n+        throw new IllegalStateException(\"Property value for \" + SITE_TO_SITE_SECURE + \" is \" + secureVal + \"; expected 'true' or 'false'\");\n+    }\n+\n+    /**\n+     * Returns the directory to which Templates are to be persisted\n+     *\n+     * @return\n+     */\n+    public Path getTemplateDirectory() {\n+        final String strVal = getProperty(TEMPLATE_DIRECTORY);\n+        return (strVal == null) ? DEFAULT_TEMPLATE_DIRECTORY : Paths.get(strVal);\n+    }\n+\n+    /**\n+     * Get the flow service write delay.\n+     *\n+     * @return The write delay\n+     */\n+    public String getFlowServiceWriteDelay() {\n+        return getProperty(WRITE_DELAY_INTERVAL);\n+    }\n+\n+    /**\n+     * Returns whether the processors should be started automatically when the\n+     * application loads.\n+     *\n+     * @return Whether to auto start the processors or not\n+     */\n+    public boolean getAutoResumeState() {\n+        final String rawAutoResumeState = getProperty(AUTO_RESUME_STATE, DEFAULT_AUTO_RESUME_STATE.toString());\n+        return Boolean.parseBoolean(rawAutoResumeState);\n+    }\n+\n+    /**\n+     * Returns the number of partitions that should be used for the FlowFile\n+     * Repository\n+     *\n+     * @return\n+     */\n+    public int getFlowFileRepositoryPartitions() {\n+        final String rawProperty = getProperty(FLOWFILE_REPOSITORY_PARTITIONS, DEFAULT_FLOWFILE_REPO_PARTITIONS);\n+        return Integer.parseInt(rawProperty);\n+    }\n+\n+    /**\n+     * Returns the number of milliseconds between FlowFileRepository\n+     * checkpointing\n+     *\n+     * @return\n+     */\n+    public String getFlowFileRepositoryCheckpointInterval() {\n+        return getProperty(FLOWFILE_REPOSITORY_CHECKPOINT_INTERVAL, DEFAULT_FLOWFILE_CHECKPOINT_INTERVAL);\n+    }\n+\n+    /**\n+     * @return the restore directory or null if not configured\n+     */\n+    public File getRestoreDirectory() {\n+        final String value = getProperty(RESTORE_DIRECTORY);\n+        if (StringUtils.isBlank(value)) {\n+            return null;\n+        } else {\n+            return new File(value);\n+        }\n+    }\n+\n+    /**\n+     * @return the user authorities file\n+     */\n+    public File getAuthorityProviderConfiguraitonFile() {\n+        final String value = getProperty(AUTHORITY_PROVIDER_CONFIGURATION_FILE);\n+        if (StringUtils.isBlank(value)) {\n+            return new File(DEFAULT_AUTHORITY_PROVIDER_CONFIGURATION_FILE);\n+        } else {\n+            return new File(value);\n+        }\n+    }\n+\n+    /**\n+     * Will default to true unless the value is explicitly set to false.\n+     *\n+     * @return Whether client auth is required\n+     */\n+    public boolean getNeedClientAuth() {\n+        boolean needClientAuth = true;\n+        String rawNeedClientAuth = getProperty(SECURITY_NEED_CLIENT_AUTH);\n+        if (\"false\".equalsIgnoreCase(rawNeedClientAuth)) {\n+            needClientAuth = false;\n+        }\n+        return needClientAuth;\n+    }\n+\n+    public String getUserCredentialCacheDuration() {\n+        return getProperty(SECURITY_USER_CREDENTIAL_CACHE_DURATION, DEFAULT_USER_CREDENTIAL_CACHE_DURATION);\n+    }\n+\n+    public boolean getSupportNewAccountRequests() {\n+        boolean shouldSupport = true;\n+        String rawShouldSupport = getProperty(SECURITY_SUPPORT_NEW_ACCOUNT_REQUESTS);\n+        if (\"false\".equalsIgnoreCase(rawShouldSupport)) {\n+            shouldSupport = false;\n+        }\n+        return shouldSupport;\n+    }\n+\n+    // getters for web properties //\n+    public Integer getPort() {\n+        Integer port = null;\n+        try {\n+            port = Integer.parseInt(getProperty(WEB_HTTP_PORT));\n+        } catch (NumberFormatException nfe) {\n+        }\n+        return port;\n+    }\n+\n+    public Integer getSslPort() {\n+        Integer sslPort = null;\n+        try {\n+            sslPort = Integer.parseInt(getProperty(WEB_HTTPS_PORT));\n+        } catch (NumberFormatException nfe) {\n+        }\n+        return sslPort;\n+    }\n+\n+    public File getWebWorkingDirectory() {\n+        return new File(getProperty(WEB_WORKING_DIR, DEFAULT_WEB_WORKING_DIR));\n+    }\n+\n+    public File getComponentDocumentationWorkingDirectory() {\n+        return new File(getProperty(COMPONENT_DOCS_DIRECTORY, DEFAULT_COMPONENT_DOCS_DIRECTORY));\n+    }\n+\n+    public File getNarWorkingDirectory() {\n+        return new File(getProperty(NAR_WORKING_DIRECTORY, DEFAULT_NAR_WORKING_DIR));\n+    }\n+\n+    public File getFrameworkWorkingDirectory() {\n+        return new File(getNarWorkingDirectory(), \"framework\");\n+    }\n+\n+    public File getExtensionsWorkingDirectory() {\n+        return new File(getNarWorkingDirectory(), \"extensions\");\n+    }\n+\n+    public File getNarLibraryDirectory() {\n+        return new File(getProperty(NAR_LIBRARY_DIRECTORY, DEFAULT_NAR_LIBRARY_DIR));\n+    }\n+\n+    // getters for ui properties //\n+    /**\n+     * Get the title for the UI.\n+     *\n+     * @return The UI title\n+     */\n+    public String getUiTitle() {\n+        return this.getProperty(VERSION, DEFAULT_TITLE);\n+    }\n+\n+    /**\n+     * Get the banner text.\n+     *\n+     * @return The banner text\n+     */\n+    public String getBannerText() {\n+        return this.getProperty(UI_BANNER_TEXT, StringUtils.EMPTY);\n+    }\n+\n+    /**\n+     * Returns the auto refresh interval in seconds.\n+     *\n+     * @return\n+     */\n+    public String getAutoRefreshInterval() {\n+        return getProperty(UI_AUTO_REFRESH_INTERVAL);\n+    }\n+\n+    // getters for cluster protocol properties //\n+    public String getClusterProtocolHeartbeatInterval() {\n+        return getProperty(CLUSTER_PROTOCOL_HEARTBEAT_INTERVAL, DEFAULT_CLUSTER_PROTOCOL_HEARTBEAT_INTERVAL);\n+    }\n+\n+    public String getNodeHeartbeatInterval() {\n+        return getClusterProtocolHeartbeatInterval();\n+    }\n+\n+    public String getClusterProtocolSocketTimeout() {\n+        return getProperty(CLUSTER_PROTOCOL_SOCKET_TIMEOUT, DEFAULT_CLUSTER_PROTOCOL_SOCKET_TIMEOUT);\n+    }\n+\n+    public String getClusterProtocolConnectionHandshakeTimeout() {\n+        return getProperty(CLUSTER_PROTOCOL_CONNECTION_HANDSHAKE_TIMEOUT, DEFAULT_CLUSTER_PROTOCOL_CONNECTION_HANDSHAKE_TIMEOUT);\n+    }\n+\n+    public boolean getClusterProtocolUseMulticast() {\n+        return Boolean.parseBoolean(getProperty(CLUSTER_PROTOCOL_USE_MULTICAST));\n+    }\n+\n+    public InetSocketAddress getClusterProtocolMulticastAddress() {\n+        try {\n+            String multicastAddress = getProperty(CLUSTER_PROTOCOL_MULTICAST_ADDRESS);\n+            int multicastPort = Integer.parseInt(getProperty(CLUSTER_PROTOCOL_MULTICAST_PORT));\n+            return new InetSocketAddress(multicastAddress, multicastPort);\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\"Invalid multicast address/port due to: \" + ex, ex);\n+        }\n+    }\n+\n+    public String getClusterProtocolMulticastServiceBroadcastDelay() {\n+        return getProperty(CLUSTER_PROTOCOL_MULTICAST_SERVICE_BROADCAST_DELAY);\n+    }\n+\n+    public File getPersistentStateDirectory() {\n+        final String dirName = getProperty(PERSISTENT_STATE_DIRECTORY, DEFAULT_PERSISTENT_STATE_DIRECTORY);\n+        final File file = new File(dirName);\n+        if (!file.exists()) {\n+            file.mkdirs();\n+        }\n+        return file;\n+    }\n+\n+    public int getClusterProtocolMulticastServiceLocatorAttempts() {\n+        try {\n+            return Integer.parseInt(getProperty(CLUSTER_PROTOCOL_MULTICAST_SERVICE_LOCATOR_ATTEMPTS));\n+        } catch (NumberFormatException nfe) {\n+            return DEFAULT_CLUSTER_PROTOCOL_MULTICAST_SERVICE_LOCATOR_ATTEMPTS;\n+        }\n+    }\n+\n+    public String getClusterProtocolMulticastServiceLocatorAttemptsDelay() {\n+        return getProperty(CLUSTER_PROTOCOL_MULTICAST_SERVICE_LOCATOR_ATTEMPTS_DELAY, DEFAULT_CLUSTER_PROTOCOL_MULTICAST_SERVICE_LOCATOR_ATTEMPTS_DELAY);\n+    }\n+\n+    // getters for cluster node properties //\n+    public boolean isNode() {\n+        return Boolean.parseBoolean(getProperty(CLUSTER_IS_NODE));\n+    }\n+\n+    public InetSocketAddress getClusterNodeProtocolAddress() {\n+        try {\n+            String socketAddress = getProperty(CLUSTER_NODE_ADDRESS);\n+            if (StringUtils.isBlank(socketAddress)) {\n+                socketAddress = \"localhost\";\n+            }\n+            int socketPort = getClusterNodeProtocolPort();\n+            return InetSocketAddress.createUnresolved(socketAddress, socketPort);\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\"Invalid node protocol address/port due to: \" + ex, ex);\n+        }\n+    }\n+\n+    public Integer getClusterNodeProtocolPort() {\n+        try {\n+            return Integer.parseInt(getProperty(CLUSTER_NODE_PROTOCOL_PORT));\n+        } catch (NumberFormatException nfe) {\n+            return null;\n+        }\n+    }\n+\n+    public int getClusterNodeProtocolThreads() {\n+        try {\n+            return Integer.parseInt(getProperty(CLUSTER_NODE_PROTOCOL_THREADS));\n+        } catch (NumberFormatException nfe) {\n+            return DEFAULT_CLUSTER_NODE_PROTOCOL_THREADS;\n+        }\n+    }\n+\n+    public InetSocketAddress getClusterNodeUnicastManagerProtocolAddress() {\n+        try {\n+            String socketAddress = getProperty(CLUSTER_NODE_UNICAST_MANAGER_ADDRESS);\n+            if (StringUtils.isBlank(socketAddress)) {\n+                socketAddress = \"localhost\";\n+            }\n+            int socketPort = Integer.parseInt(getProperty(CLUSTER_NODE_UNICAST_MANAGER_PROTOCOL_PORT));\n+            return InetSocketAddress.createUnresolved(socketAddress, socketPort);\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\"Invalid unicast manager address/port due to: \" + ex, ex);\n+        }\n+    }\n+\n+    // getters for cluster manager properties //\n+    public boolean isClusterManager() {\n+        return Boolean.parseBoolean(getProperty(CLUSTER_IS_MANAGER));\n+    }\n+\n+    public InetSocketAddress getClusterManagerProtocolAddress() {\n+        try {\n+            String socketAddress = getProperty(CLUSTER_MANAGER_ADDRESS);\n+            if (StringUtils.isBlank(socketAddress)) {\n+                socketAddress = \"localhost\";\n+            }\n+            int socketPort = getClusterManagerProtocolPort();\n+            return InetSocketAddress.createUnresolved(socketAddress, socketPort);\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\"Invalid manager protocol address/port due to: \" + ex, ex);\n+        }\n+    }\n+\n+    public Integer getClusterManagerProtocolPort() {\n+        try {\n+            return Integer.parseInt(getProperty(CLUSTER_MANAGER_PROTOCOL_PORT));\n+        } catch (NumberFormatException nfe) {\n+            return null;\n+        }\n+    }\n+\n+    public File getClusterManagerNodeFirewallFile() {\n+        final String firewallFile = getProperty(CLUSTER_MANAGER_NODE_FIREWALL_FILE);\n+        if (StringUtils.isBlank(firewallFile)) {\n+            return null;\n+        } else {\n+            return new File(firewallFile);\n+        }\n+    }\n+\n+    public int getClusterManagerNodeEventHistorySize() {\n+        try {\n+            return Integer.parseInt(getProperty(CLUSTER_MANAGER_NODE_EVENT_HISTORY_SIZE));\n+        } catch (NumberFormatException nfe) {\n+            return DEFAULT_CLUSTER_MANAGER_NODE_EVENT_HISTORY_SIZE;\n+        }\n+    }\n+\n+    public String getClusterManagerNodeApiConnectionTimeout() {\n+        return getProperty(CLUSTER_MANAGER_NODE_API_CONNECTION_TIMEOUT, DEFAULT_CLUSTER_MANAGER_NODE_API_CONNECTION_TIMEOUT);\n+    }\n+\n+    public String getClusterManagerNodeApiReadTimeout() {\n+        return getProperty(CLUSTER_MANAGER_NODE_API_READ_TIMEOUT, DEFAULT_CLUSTER_MANAGER_NODE_API_READ_TIMEOUT);\n+    }\n+\n+    public int getClusterManagerNodeApiRequestThreads() {\n+        try {\n+            return Integer.parseInt(getProperty(CLUSTER_MANAGER_NODE_API_REQUEST_THREADS));\n+        } catch (NumberFormatException nfe) {\n+            return DEFAULT_CLUSTER_MANAGER_NODE_API_NUM_REQUEST_THREADS;\n+        }\n+    }\n+\n+    public String getClusterManagerFlowRetrievalDelay() {\n+        return getProperty(CLUSTER_MANAGER_FLOW_RETRIEVAL_DELAY, DEFAULT_CLUSTER_MANAGER_FLOW_RETRIEVAL_DELAY);\n+    }\n+\n+    public int getClusterManagerProtocolThreads() {\n+        try {\n+            return Integer.parseInt(getProperty(CLUSTER_MANAGER_PROTOCOL_THREADS));\n+        } catch (NumberFormatException nfe) {\n+            return DEFAULT_CLUSTER_MANAGER_PROTOCOL_THREADS;\n+        }\n+    }\n+\n+    public String getClusterManagerSafeModeDuration() {\n+        return getProperty(CLUSTER_MANAGER_SAFEMODE_DURATION, DEFAULT_CLUSTER_MANAGER_SAFEMODE_DURATION);\n+    }\n+\n+    public String getClusterProtocolManagerToNodeApiScheme() {\n+        final String isSecureProperty = getProperty(CLUSTER_PROTOCOL_IS_SECURE);\n+        if (Boolean.valueOf(isSecureProperty)) {\n+            return \"https\";\n+        } else {\n+            return \"http\";\n+        }\n+    }\n+\n+    public InetSocketAddress getNodeApiAddress() {\n+\n+        final String rawScheme = getClusterProtocolManagerToNodeApiScheme();\n+        final String scheme = (rawScheme == null) ? \"http\" : rawScheme;\n+\n+        final String host;\n+        final int port;\n+        if (\"http\".equalsIgnoreCase(scheme)) {\n+            // get host\n+            if (StringUtils.isBlank(getProperty(WEB_HTTP_HOST))) {\n+                host = \"localhost\";\n+            } else {\n+                host = getProperty(WEB_HTTP_HOST);\n+            }\n+            // get port\n+            port = getPort();\n+        } else {\n+            // get host\n+            if (StringUtils.isBlank(getProperty(WEB_HTTPS_HOST))) {\n+                host = \"localhost\";\n+            } else {\n+                host = getProperty(WEB_HTTPS_HOST);\n+            }\n+            // get port\n+            port = getSslPort();\n+        }\n+\n+        return InetSocketAddress.createUnresolved(host, port);\n+\n+    }\n+\n+    /**\n+     * Returns the database repository path. It simply returns the value\n+     * configured. No directories will be created as a result of this operation.\n+     *\n+     * @return database repository path\n+     * @throws InvalidPathException If the configured path is invalid\n+     */\n+    public Path getDatabaseRepositoryPath() {\n+        return Paths.get(getProperty(REPOSITORY_DATABASE_DIRECTORY));\n+    }\n+\n+    /**\n+     * Returns the flow file repository path. It simply returns the value\n+     * configured. No directories will be created as a result of this operation.\n+     *\n+     * @return database repository path\n+     * @throws InvalidPathException If the configured path is invalid\n+     */\n+    public Path getFlowFileRepositoryPath() {\n+        return Paths.get(getProperty(FLOWFILE_REPOSITORY_DIRECTORY));\n+    }\n+\n+    /**\n+     * Returns the content repository paths. This method returns a mapping of\n+     * file repository name to file repository paths. It simply returns the\n+     * values configured. No directories will be created as a result of this\n+     * operation.\n+     *\n+     * @return file repositories paths\n+     * @throws InvalidPathException If any of the configured paths are invalid\n+     */\n+    public Map<String, Path> getContentRepositoryPaths() {\n+        final Map<String, Path> contentRepositoryPaths = new HashMap<>();\n+\n+        // go through each property\n+        for (String propertyName : stringPropertyNames()) {\n+            // determine if the property is a file repository path\n+            if (StringUtils.startsWith(propertyName, REPOSITORY_CONTENT_PREFIX)) {\n+                // get the repository key\n+                final String key = StringUtils.substringAfter(propertyName, REPOSITORY_CONTENT_PREFIX);\n+\n+                // attempt to resolve the path specified\n+                contentRepositoryPaths.put(key, Paths.get(getProperty(propertyName)));\n+            }\n+        }\n+        return contentRepositoryPaths;\n+    }\n+\n+    /**\n+     * Returns the provenance repository paths. This method returns a mapping of\n+     * file repository name to file repository paths. It simply returns the\n+     * values configured. No directories will be created as a result of this\n+     * operation.\n+     *\n+     * @return\n+     */\n+    public Map<String, Path> getProvenanceRepositoryPaths() {\n+        final Map<String, Path> provenanceRepositoryPaths = new HashMap<>();\n+\n+        // go through each property\n+        for (String propertyName : stringPropertyNames()) {\n+            // determine if the property is a file repository path\n+            if (StringUtils.startsWith(propertyName, PROVENANCE_REPO_DIRECTORY_PREFIX)) {\n+                // get the repository key\n+                final String key = StringUtils.substringAfter(propertyName, PROVENANCE_REPO_DIRECTORY_PREFIX);\n+\n+                // attempt to resolve the path specified\n+                provenanceRepositoryPaths.put(key, Paths.get(getProperty(propertyName)));\n+            }\n+        }\n+        return provenanceRepositoryPaths;\n+    }\n+\n+    public int getMaxFlowFilesPerClaim() {\n+        try {\n+            return Integer.parseInt(getProperty(MAX_FLOWFILES_PER_CLAIM));\n+        } catch (NumberFormatException nfe) {\n+            return DEFAULT_MAX_FLOWFILES_PER_CLAIM;\n+        }\n+    }\n+\n+    public String getMaxAppendableClaimSize() {\n+        return getProperty(MAX_APPENDABLE_CLAIM_SIZE);\n+    }\n+\n+    @Override\n+    public String getProperty(final String key, final String defaultValue) {\n+        final String value = super.getProperty(key, defaultValue);\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        if (value.trim().isEmpty()) {\n+            return defaultValue;\n+        }\n+        return value;\n+    }\n+\n+}"
        },
        {
            "sha": "aa6f8f305f1a0b0518f313513fbe112e5efb02e3",
            "filename": "commons/nifi-properties/src/main/java/org/apache/nifi/util/StringUtils.java",
            "status": "added",
            "additions": 66,
            "deletions": 0,
            "changes": 66,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-properties%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FStringUtils.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-properties%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FStringUtils.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-properties%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FStringUtils.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.util;\n+\n+/**\n+ * String Utils based on the Apache Commons Lang String Utils.\n+ * These simple util methods here allow us to avoid a dependency in the core\n+ */\n+public class StringUtils {\n+\n+    public static final String EMPTY = \"\";\n+\n+    public static boolean isBlank(final String str) {\n+        if (str == null || str.isEmpty()) {\n+            return true;\n+        }\n+        for (int i = 0; i < str.length(); i++) {\n+            if (!Character.isWhitespace(str.charAt(i))) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public static boolean isEmpty(final String str) {\n+        return str == null || str.isEmpty();\n+    }\n+\n+    public static boolean startsWith(final String str, final String prefix) {\n+        if (str == null || prefix == null) {\n+            return (str == null && prefix == null);\n+        }\n+        if (prefix.length() > str.length()) {\n+            return false;\n+        }\n+        return str.regionMatches(false, 0, prefix, 0, prefix.length());\n+    }\n+\n+    public static String substringAfter(final String str, final String separator) {\n+        if (isEmpty(str)) {\n+            return str;\n+        }\n+        if (separator == null) {\n+            return EMPTY;\n+        }\n+        int pos = str.indexOf(separator);\n+        if (pos == -1) {\n+            return EMPTY;\n+        }\n+        return str.substring(pos + separator.length());\n+    }\n+}"
        },
        {
            "sha": "76e9ac16a44f9fcfb7ac974d76a350013d5ad648",
            "filename": "commons/nifi-security-utils/pom.xml",
            "status": "added",
            "additions": 40,
            "deletions": 0,
            "changes": 40,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-security-utils%2Fpom.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-security-utils%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-security-utils%2Fpom.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,40 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+    <!--\n+      Licensed to the Apache Software Foundation (ASF) under one or more\n+      contributor license agreements.  See the NOTICE file distributed with\n+      this work for additional information regarding copyright ownership.\n+      The ASF licenses this file to You under the Apache License, Version 2.0\n+      (the \"License\"); you may not use this file except in compliance with\n+      the License.  You may obtain a copy of the License at\n+          http://www.apache.org/licenses/LICENSE-2.0\n+      Unless required by applicable law or agreed to in writing, software\n+      distributed under the License is distributed on an \"AS IS\" BASIS,\n+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+      See the License for the specific language governing permissions and\n+      limitations under the License.\n+    -->\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.apache.nifi</groupId>\n+        <artifactId>nifi-parent</artifactId>\n+        <version>0.0.1-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>nifi-security-utils</artifactId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <name>NiFi Security Utils</name>\n+    <description>Contains security functionality.</description>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-api</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-lang3</artifactId>\n+            <version>3.3.2</version>\n+        </dependency>\n+    </dependencies>\n+</project>\n+"
        },
        {
            "sha": "087d891d29a1583737b402abc8771de49bf6c14d",
            "filename": "commons/nifi-security-utils/src/main/java/org/apache/nifi/security/util/CertificateUtils.java",
            "status": "added",
            "additions": 158,
            "deletions": 0,
            "changes": 158,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-security-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fsecurity%2Futil%2FCertificateUtils.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-security-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fsecurity%2Futil%2FCertificateUtils.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-security-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fsecurity%2Futil%2FCertificateUtils.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.security.util;\n+\n+import java.io.BufferedInputStream;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.security.KeyStore;\n+import java.security.cert.CertificateParsingException;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class CertificateUtils {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(CertificateUtils.class);\n+\n+    /**\n+     * Returns true if the given keystore can be loaded using the given keystore\n+     * type and password. Returns false otherwise.\n+     * @param keystore\n+     * @param keystoreType\n+     * @param password\n+     * @return \n+     */\n+    public static boolean isStoreValid(final URL keystore, final KeystoreType keystoreType, final char[] password) {\n+\n+        if (keystore == null) {\n+            throw new IllegalArgumentException(\"keystore may not be null\");\n+        } else if (keystoreType == null) {\n+            throw new IllegalArgumentException(\"keystore type may not be null\");\n+        } else if (password == null) {\n+            throw new IllegalArgumentException(\"password may not be null\");\n+        }\n+\n+        BufferedInputStream bis = null;\n+        final KeyStore ks;\n+        try {\n+\n+            // load the keystore\n+            bis = new BufferedInputStream(keystore.openStream());\n+            ks = KeyStore.getInstance(keystoreType.name());\n+            ks.load(bis, password);\n+\n+            return true;\n+\n+        } catch (Exception e) {\n+            return false;\n+        } finally {\n+            if (bis != null) {\n+                try {\n+                    bis.close();\n+                } catch (final IOException ioe) {\n+                    logger.warn(\"Failed to close input stream\", ioe);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Extracts the username from the specified DN. If the username cannot be\n+     * extracted because the CN is in an unrecognized format, the entire CN is\n+     * returned. If the CN cannot be extracted because the DN is in an\n+     * unrecognized format, the entire DN is returned.\n+     *\n+     * @param dn\n+     * @return\n+     */\n+    public static String extractUsername(String dn) {\n+        String username = dn;\n+        String cn = \"\";\n+\n+        // ensure the dn is specified\n+        if (StringUtils.isNotBlank(dn)) {\n+\n+            // attempt to locate the cn\n+            if (dn.startsWith(\"CN=\")) {\n+                cn = StringUtils.substringBetween(dn, \"CN=\", \",\");\n+            } else if (dn.startsWith(\"/CN=\")) {\n+                cn = StringUtils.substringBetween(dn, \"CN=\", \"/\");\n+            } else if (dn.startsWith(\"C=\") || dn.startsWith(\"/C=\")) {\n+                cn = StringUtils.substringAfter(dn, \"CN=\");\n+            } else if (dn.startsWith(\"/\") && StringUtils.contains(dn, \"CN=\")) {\n+                cn = StringUtils.substringAfter(dn, \"CN=\");\n+            }\n+\n+            // attempt to get the username from the cn\n+            if (StringUtils.isNotBlank(cn)) {\n+                if (cn.endsWith(\")\")) {\n+                    username = StringUtils.substringBetween(cn, \"(\", \")\");\n+                } else if (cn.contains(\" \")) {\n+                    username = StringUtils.substringAfterLast(cn, \" \");\n+                } else {\n+                    username = cn;\n+                }\n+            }\n+        }\n+\n+        return username;\n+    }\n+\n+    /**\n+     * Returns a list of subject alternative names. Any name that is represented\n+     * as a String by X509Certificate.getSubjectAlternativeNames() is converted\n+     * to lowercase and returned.\n+     *\n+     * @param certificate a certificate\n+     * @return a list of subject alternative names; list is never null\n+     * @throws CertificateParsingException if parsing the certificate failed\n+     */\n+    public static List<String> getSubjectAlternativeNames(final X509Certificate certificate) throws CertificateParsingException {\n+\n+        final Collection<List<?>> altNames = certificate.getSubjectAlternativeNames();\n+        if (altNames == null) {\n+            return new ArrayList<>();\n+        }\n+\n+        final List<String> result = new ArrayList<>();\n+        for (final List<?> generalName : altNames) {\n+            /* \n+             * generalName has the name type as the first element a String or \n+             * byte array for the second element.  We return any general names \n+             * that are String types.\n+             * \n+             * We don't inspect the numeric name type because some certificates\n+             * incorrectly put IPs and DNS names under the wrong name types.\n+             */\n+            final Object value = generalName.get(1);\n+            if (value instanceof String) {\n+                result.add(((String) value).toLowerCase());\n+            }\n+\n+        }\n+\n+        return result;\n+    }\n+\n+    private CertificateUtils() {\n+    }\n+}"
        },
        {
            "sha": "741fdde79272d240be16873cb083453298aba9e9",
            "filename": "commons/nifi-security-utils/src/main/java/org/apache/nifi/security/util/EncryptionMethod.java",
            "status": "added",
            "additions": 84,
            "deletions": 0,
            "changes": 84,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-security-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fsecurity%2Futil%2FEncryptionMethod.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-security-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fsecurity%2Futil%2FEncryptionMethod.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-security-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fsecurity%2Futil%2FEncryptionMethod.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.security.util;\n+\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+import org.apache.commons.lang3.builder.ToStringStyle;\n+\n+/**\n+ * Enumeration capturing essential information about the various encryption\n+ * methods that might be supported.\n+ *\n+ * @author none\n+ */\n+public enum EncryptionMethod {\n+\n+    MD5_128AES(\"PBEWITHMD5AND128BITAES-CBC-OPENSSL\", \"BC\", false),\n+    MD5_256AES(\"PBEWITHMD5AND256BITAES-CBC-OPENSSL\", \"BC\", false),\n+    SHA1_RC2(\"PBEWITHSHA1ANDRC2\", \"BC\", false),\n+    SHA1_DES(\"PBEWITHSHA1ANDDES\", \"BC\", false),\n+    MD5_192AES(\"PBEWITHMD5AND192BITAES-CBC-OPENSSL\", \"BC\", false),\n+    MD5_DES(\"PBEWITHMD5ANDDES\", \"BC\", false),\n+    MD5_RC2(\"PBEWITHMD5ANDRC2\", \"BC\", false),\n+    SHA_192AES(\"PBEWITHSHAAND192BITAES-CBC-BC\", \"BC\", true),\n+    SHA_40RC4(\"PBEWITHSHAAND40BITRC4\", \"BC\", true),\n+    SHA256_128AES(\"PBEWITHSHA256AND128BITAES-CBC-BC\", \"BC\", true),\n+    SHA_128RC2(\"PBEWITHSHAAND128BITRC2-CBC\", \"BC\", true),\n+    SHA_128AES(\"PBEWITHSHAAND128BITAES-CBC-BC\", \"BC\", true),\n+    SHA256_192AES(\"PBEWITHSHA256AND192BITAES-CBC-BC\", \"BC\", true),\n+    SHA_2KEYTRIPLEDES(\"PBEWITHSHAAND2-KEYTRIPLEDES-CBC\", \"BC\", true),\n+    SHA256_256AES(\"PBEWITHSHA256AND256BITAES-CBC-BC\", \"BC\", true),\n+    SHA_40RC2(\"PBEWITHSHAAND40BITRC2-CBC\", \"BC\", true),\n+    SHA_256AES(\"PBEWITHSHAAND256BITAES-CBC-BC\", \"BC\", true),\n+    SHA_3KEYTRIPLEDES(\"PBEWITHSHAAND3-KEYTRIPLEDES-CBC\", \"BC\", true),\n+    SHA_TWOFISH(\"PBEWITHSHAANDTWOFISH-CBC\", \"BC\", true),\n+    SHA_128RC4(\"PBEWITHSHAAND128BITRC4\", \"BC\", true);\n+    private final String algorithm;\n+    private final String provider;\n+    private final boolean unlimitedStrength;\n+\n+    EncryptionMethod(String algorithm, String provider, boolean unlimitedStrength) {\n+        this.algorithm = algorithm;\n+        this.provider = provider;\n+        this.unlimitedStrength = unlimitedStrength;\n+    }\n+\n+    public String getProvider() {\n+        return provider;\n+    }\n+\n+    public String getAlgorithm() {\n+        return algorithm;\n+    }\n+\n+    /**\n+     * @return true if algorithm requires unlimited strength policies\n+     */\n+    public boolean isUnlimitedStrength() {\n+        return unlimitedStrength;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        final ToStringBuilder builder = new ToStringBuilder(this);\n+        ToStringBuilder.setDefaultStyle(ToStringStyle.SHORT_PREFIX_STYLE);\n+        builder.append(\"algorithm name\", algorithm);\n+        builder.append(\"Requires unlimited strength JCE policy\", unlimitedStrength);\n+        builder.append(\"Algorithm Provider\", provider);\n+        return builder.toString();\n+    }\n+}"
        },
        {
            "sha": "18574bb0bdb3b1e98a132053d78eea2674d0d051",
            "filename": "commons/nifi-security-utils/src/main/java/org/apache/nifi/security/util/KeystoreType.java",
            "status": "added",
            "additions": 26,
            "deletions": 0,
            "changes": 26,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-security-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fsecurity%2Futil%2FKeystoreType.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-security-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fsecurity%2Futil%2FKeystoreType.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-security-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fsecurity%2Futil%2FKeystoreType.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.security.util;\n+\n+/**\n+ * Keystore types.\n+ */\n+public enum KeystoreType {\n+\n+    PKCS12,\n+    JKS;\n+}"
        },
        {
            "sha": "9abfcc3ccd0dcec3c8d84b92f90a7c81b2ac5d90",
            "filename": "commons/nifi-security-utils/src/main/java/org/apache/nifi/security/util/SecurityStoreTypes.java",
            "status": "added",
            "additions": 144,
            "deletions": 0,
            "changes": 144,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-security-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fsecurity%2Futil%2FSecurityStoreTypes.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-security-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fsecurity%2Futil%2FSecurityStoreTypes.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-security-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fsecurity%2Futil%2FSecurityStoreTypes.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.security.util;\n+\n+import java.io.PrintWriter;\n+import java.io.Writer;\n+\n+/**\n+ * Types of security stores and their related Java system properties.\n+ */\n+public enum SecurityStoreTypes {\n+\n+    TRUSTSTORE(\n+            \"javax.net.ssl.trustStore\",\n+            \"javax.net.ssl.trustStorePassword\",\n+            \"javax.net.ssl.trustStoreType\"),\n+    KEYSTORE(\n+            \"javax.net.ssl.keyStore\",\n+            \"javax.net.ssl.keyStorePassword\",\n+            \"javax.net.ssl.keyStoreType\");\n+\n+    /**\n+     * Logs the keystore and truststore Java system property values to the given\n+     * writer. It logPasswords is true, then the keystore and truststore\n+     * password property values are logged.\n+     *\n+     * @param writer a writer to log to\n+     *\n+     * @param logPasswords true if passwords should be logged; false otherwise\n+     */\n+    public static void logProperties(final Writer writer,\n+            final boolean logPasswords) {\n+        if (writer == null) {\n+            return;\n+        }\n+\n+        PrintWriter pw = new PrintWriter(writer);\n+\n+        // keystore properties\n+        pw.println(\n+                KEYSTORE.getStoreProperty() + \" = \" + System.getProperty(KEYSTORE.getStoreProperty()));\n+\n+        if (logPasswords) {\n+            pw.println(\n+                    KEYSTORE.getStorePasswordProperty() + \" = \"\n+                    + System.getProperty(KEYSTORE.getStoreProperty()));\n+        }\n+\n+        pw.println(\n+                KEYSTORE.getStoreTypeProperty() + \" = \"\n+                + System.getProperty(KEYSTORE.getStoreTypeProperty()));\n+\n+        // truststore properties\n+        pw.println(\n+                TRUSTSTORE.getStoreProperty() + \" = \"\n+                + System.getProperty(TRUSTSTORE.getStoreProperty()));\n+\n+        if (logPasswords) {\n+            pw.println(\n+                    TRUSTSTORE.getStorePasswordProperty() + \" = \"\n+                    + System.getProperty(TRUSTSTORE.getStoreProperty()));\n+        }\n+\n+        pw.println(\n+                TRUSTSTORE.getStoreTypeProperty() + \" = \"\n+                + System.getProperty(TRUSTSTORE.getStoreTypeProperty()));\n+        pw.flush();\n+    }\n+\n+    /**\n+     * the Java system property for setting the keystore (or truststore) path\n+     */\n+    private String storeProperty = \"\";\n+\n+    /**\n+     * the Java system property for setting the keystore (or truststore)\n+     * password\n+     */\n+    private String storePasswordProperty = \"\";\n+\n+    /**\n+     * the Java system property for setting the keystore (or truststore) type\n+     */\n+    private String storeTypeProperty = \"\";\n+\n+    /**\n+     * Creates an instance.\n+     *\n+     * @param storeProperty the Java system property for setting the keystore (\n+     * or truststore) path\n+     * @param storePasswordProperty the Java system property for setting the\n+     * keystore (or truststore) password\n+     * @param storeTypeProperty the Java system property for setting the\n+     * keystore (or truststore) type\n+     */\n+    SecurityStoreTypes(final String storeProperty,\n+            final String storePasswordProperty,\n+            final String storeTypeProperty) {\n+        this.storeProperty = storeProperty;\n+        this.storePasswordProperty = storePasswordProperty;\n+        this.storeTypeProperty = storeTypeProperty;\n+    }\n+\n+    /**\n+     * Returns the keystore (or truststore) property.\n+     *\n+     * @return the keystore (or truststore) property\n+     */\n+    public String getStoreProperty() {\n+        return storeProperty;\n+    }\n+\n+    /**\n+     * Returns the keystore (or truststore) password property.\n+     *\n+     * @return the keystore (or truststore) password property\n+     */\n+    public String getStorePasswordProperty() {\n+        return storePasswordProperty;\n+    }\n+\n+    /**\n+     * Returns the keystore (or truststore) type property.\n+     *\n+     * @return the keystore (or truststore) type property\n+     */\n+    public String getStoreTypeProperty() {\n+        return storeTypeProperty;\n+    }\n+}"
        },
        {
            "sha": "2371b0c1383b9d0a2a73a17ccc51fad0c00a088e",
            "filename": "commons/nifi-security-utils/src/main/java/org/apache/nifi/security/util/SslContextFactory.java",
            "status": "added",
            "additions": 180,
            "deletions": 0,
            "changes": 180,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-security-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fsecurity%2Futil%2FSslContextFactory.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-security-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fsecurity%2Futil%2FSslContextFactory.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-security-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fsecurity%2Futil%2FSslContextFactory.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,180 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.security.util;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.SecureRandom;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+\n+import javax.net.ssl.KeyManager;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+\n+/**\n+ * A factory for creating SSL contexts using the application's security\n+ * properties.\n+ *\n+ * @author unattributed\n+ */\n+public final class SslContextFactory {\n+\n+    public static enum ClientAuth {\n+\n+        WANT,\n+        REQUIRED,\n+        NONE\n+    }\n+\n+    /**\n+     * Creates a SSLContext instance using the given information.\n+     *\n+     * @param keystore the full path to the keystore\n+     * @param keystorePasswd the keystore password\n+     * @param keystoreType the type of keystore (e.g., PKCS12, JKS)\n+     * @param truststore the full path to the truststore\n+     * @param truststorePasswd the truststore password\n+     * @param truststoreType the type of truststore (e.g., PKCS12, JKS)\n+     * @param clientAuth the type of client authentication\n+     *\n+     * @return a SSLContext instance\n+     * @throws java.security.KeyStoreException\n+     * @throws java.io.IOException\n+     * @throws java.security.NoSuchAlgorithmException\n+     * @throws java.security.cert.CertificateException\n+     * @throws java.security.UnrecoverableKeyException\n+     * @throws java.security.KeyManagementException\n+     */\n+    public static SSLContext createSslContext(\n+            final String keystore, final char[] keystorePasswd, final String keystoreType,\n+            final String truststore, final char[] truststorePasswd, final String truststoreType,\n+            final ClientAuth clientAuth)\n+            throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException,\n+            UnrecoverableKeyException, KeyManagementException {\n+\n+        // prepare the keystore\n+        final KeyStore keyStore = KeyStore.getInstance(keystoreType);\n+        try (final InputStream keyStoreStream = new FileInputStream(keystore)) {\n+            keyStore.load(keyStoreStream, keystorePasswd);\n+        }\n+        final KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+        keyManagerFactory.init(keyStore, keystorePasswd);\n+\n+        // prepare the truststore\n+        final KeyStore trustStore = KeyStore.getInstance(truststoreType);\n+        try (final InputStream trustStoreStream = new FileInputStream(truststore)) {\n+            trustStore.load(trustStoreStream, truststorePasswd);\n+        }\n+        final TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+        trustManagerFactory.init(trustStore);\n+\n+        // initialize the ssl context\n+        final SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n+        sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), new SecureRandom());\n+        if (ClientAuth.REQUIRED == clientAuth) {\n+            sslContext.getDefaultSSLParameters().setNeedClientAuth(true);\n+        } else if (ClientAuth.WANT == clientAuth) {\n+            sslContext.getDefaultSSLParameters().setWantClientAuth(true);\n+        } else {\n+            sslContext.getDefaultSSLParameters().setWantClientAuth(false);\n+        }\n+\n+        return sslContext;\n+\n+    }\n+\n+    /**\n+     * Creates a SSLContext instance using the given information.\n+     *\n+     * @param keystore the full path to the keystore\n+     * @param keystorePasswd the keystore password\n+     * @param keystoreType the type of keystore (e.g., PKCS12, JKS)\n+     *\n+     * @return a SSLContext instance\n+     * @throws java.security.KeyStoreException\n+     * @throws java.io.IOException\n+     * @throws java.security.NoSuchAlgorithmException\n+     * @throws java.security.cert.CertificateException\n+     * @throws java.security.UnrecoverableKeyException\n+     * @throws java.security.KeyManagementException\n+     */\n+    public static SSLContext createSslContext(\n+            final String keystore, final char[] keystorePasswd, final String keystoreType)\n+            throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException,\n+            UnrecoverableKeyException, KeyManagementException {\n+\n+        // prepare the keystore\n+        final KeyStore keyStore = KeyStore.getInstance(keystoreType);\n+        try (final InputStream keyStoreStream = new FileInputStream(keystore)) {\n+            keyStore.load(keyStoreStream, keystorePasswd);\n+        }\n+        final KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+        keyManagerFactory.init(keyStore, keystorePasswd);\n+\n+        // initialize the ssl context\n+        final SSLContext ctx = SSLContext.getInstance(\"TLS\");\n+        ctx.init(keyManagerFactory.getKeyManagers(), new TrustManager[0], new SecureRandom());\n+\n+        return ctx;\n+\n+    }\n+\n+    /**\n+     * Creates a SSLContext instance using the given information.\n+     *\n+     * @param truststore the full path to the truststore\n+     * @param truststorePasswd the truststore password\n+     * @param truststoreType the type of truststore (e.g., PKCS12, JKS)\n+     *\n+     * @return a SSLContext instance\n+     * @throws java.security.KeyStoreException\n+     * @throws java.io.IOException\n+     * @throws java.security.NoSuchAlgorithmException\n+     * @throws java.security.cert.CertificateException\n+     * @throws java.security.UnrecoverableKeyException\n+     * @throws java.security.KeyManagementException\n+     */\n+    public static SSLContext createTrustSslContext(\n+            final String truststore, final char[] truststorePasswd, final String truststoreType)\n+            throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException,\n+            UnrecoverableKeyException, KeyManagementException {\n+\n+        // prepare the truststore\n+        final KeyStore trustStore = KeyStore.getInstance(truststoreType);\n+        try (final InputStream trustStoreStream = new FileInputStream(truststore)) {\n+            trustStore.load(trustStoreStream, truststorePasswd);\n+        }\n+        final TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+        trustManagerFactory.init(trustStore);\n+\n+        // initialize the ssl context\n+        final SSLContext ctx = SSLContext.getInstance(\"TLS\");\n+        ctx.init(new KeyManager[0], trustManagerFactory.getTrustManagers(), new SecureRandom());\n+\n+        return ctx;\n+\n+    }\n+\n+}"
        },
        {
            "sha": "8e064339ef9fe1ab839cf4ba79819440ceb6da4f",
            "filename": "commons/nifi-socket-utils/pom.xml",
            "status": "added",
            "additions": 65,
            "deletions": 0,
            "changes": 65,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fpom.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fpom.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,65 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements.  See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to You under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License.  You may obtain a copy of the License at\n+      http://www.apache.org/licenses/LICENSE-2.0\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.apache.nifi</groupId>\n+        <artifactId>nifi-parent</artifactId>\n+        <version>0.0.1-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>nifi-socket-utils</artifactId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <name>NiFi Socket Utils</name>\n+    <description>Utilities for socket communication</description>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-api</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>nifi-utils</artifactId>\n+            <version>0.0.1-SNAPSHOT</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>nifi-logging-utils</artifactId>\n+            <version>0.0.1-SNAPSHOT</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-net</groupId>\n+            <artifactId>commons-net</artifactId>\n+            <version>3.3</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-lang3</artifactId>\n+            <version>3.3.2</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-io</groupId>\n+            <artifactId>commons-io</artifactId>\n+            <version>2.4</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>nifi-properties</artifactId>\n+            <version>0.0.1-SNAPSHOT</version>\n+        </dependency>\n+    </dependencies>\n+</project>"
        },
        {
            "sha": "172c593995a5027e0fba4fab4acae40ed8b621f0",
            "filename": "commons/nifi-socket-utils/src/main/java/org/apache/nifi/io/nio/AbstractChannelReader.java",
            "status": "added",
            "additions": 166,
            "deletions": 0,
            "changes": 166,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2FAbstractChannelReader.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2FAbstractChannelReader.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2FAbstractChannelReader.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,166 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.nio;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.SelectionKey;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.apache.nifi.io.nio.consumer.StreamConsumer;\n+import org.apache.nifi.io.nio.consumer.StreamConsumerFactory;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+import org.apache.commons.lang3.builder.ToStringStyle;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * @author none\n+ */\n+public abstract class AbstractChannelReader implements Runnable {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractChannelReader.class);\n+    private final String uniqueId;\n+    private final SelectionKey key;\n+    private final BufferPool bufferPool;\n+    private final StreamConsumer consumer;\n+    private final AtomicBoolean isClosed = new AtomicBoolean(false);\n+    private final AtomicReference<ScheduledFuture<?>> future = new AtomicReference<>(null);//the future on which this reader runs...\n+\n+    public AbstractChannelReader(final String id, final SelectionKey key, final BufferPool empties, final StreamConsumerFactory consumerFactory) {\n+        this.uniqueId = id;\n+        this.key = key;\n+        this.bufferPool = empties;\n+        this.consumer = consumerFactory.newInstance(id);\n+        consumer.setReturnBufferQueue(bufferPool);\n+    }\n+\n+    protected void setScheduledFuture(final ScheduledFuture<?> future) {\n+        this.future.set(future);\n+    }\n+\n+    protected ScheduledFuture<?> getScheduledFuture() {\n+        return future.get();\n+    }\n+\n+    protected SelectionKey getSelectionKey() {\n+        return key;\n+    }\n+\n+    public boolean isClosed() {\n+        return isClosed.get();\n+    }\n+\n+    private void closeStream() {\n+        if (isClosed.get()) {\n+            return;\n+        }\n+        try {\n+            isClosed.set(true);\n+            future.get().cancel(false);\n+            key.cancel();\n+            key.channel().close();\n+        } catch (final IOException ioe) {\n+            LOGGER.warn(\"Unable to cleanly close stream due to \" + ioe);\n+        } finally {\n+            consumer.signalEndOfStream();\n+        }\n+    }\n+\n+    /**\n+     * Allows a subclass to specifically handle how it reads from the given\n+     * key's channel into the given buffer.\n+     *\n+     * @param key\n+     * @param buffer\n+     * @return the number of bytes read in the final read cycle. A value of zero\n+     * or more indicates the channel is still open but a value of -1 indicates\n+     * end of stream.\n+     * @throws IOException\n+     */\n+    protected abstract int fillBuffer(SelectionKey key, ByteBuffer buffer) throws IOException;\n+\n+    @Override\n+    public final void run() {\n+        if (!key.isValid() || consumer.isConsumerFinished()) {\n+            closeStream();\n+            return;\n+        }\n+        if (!key.isReadable()) {\n+            return;//there is nothing available to read...or we aren't allow to read due to throttling\n+        }\n+        ByteBuffer buffer = null;\n+        try {\n+            buffer = bufferPool.poll();\n+            if (buffer == null) {\n+                return; // no buffers available - come back later\n+            }\n+            final int bytesRead = fillBuffer(key, buffer);\n+            buffer.flip();\n+            if (buffer.remaining() > 0) {\n+                consumer.addFilledBuffer(buffer);\n+                buffer = null; //clear the reference - is now the consumer's responsiblity\n+            } else {\n+                buffer.clear();\n+                bufferPool.returnBuffer(buffer, 0);\n+                buffer = null; //clear the reference - is now back to the queue\n+            }\n+            if (bytesRead < 0) { //we've reached the end\n+                closeStream();\n+            }\n+        } catch (final Exception ioe) {\n+            closeStream();\n+            LOGGER.error(\"Closed channel reader \" + this + \" due to \" + ioe);\n+        } finally {\n+            if (buffer != null) {\n+                buffer.clear();\n+                bufferPool.returnBuffer(buffer, 0);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public final boolean equals(final Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj.getClass() != getClass()) {\n+            return false;\n+        }\n+        AbstractChannelReader rhs = (AbstractChannelReader) obj;\n+        return new EqualsBuilder().appendSuper(super.equals(obj)).append(uniqueId, rhs.uniqueId).isEquals();\n+    }\n+\n+    @Override\n+    public final int hashCode() {\n+        return new HashCodeBuilder(17, 37).append(uniqueId).toHashCode();\n+    }\n+\n+    @Override\n+    public final String toString() {\n+        return new ToStringBuilder(this, ToStringStyle.NO_FIELD_NAMES_STYLE).append(uniqueId).toString();\n+    }\n+}"
        },
        {
            "sha": "a413ad26abef4af390ae15993e1fb3fae18d310f",
            "filename": "commons/nifi-socket-utils/src/main/java/org/apache/nifi/io/nio/BufferPool.java",
            "status": "added",
            "additions": 114,
            "deletions": 0,
            "changes": 114,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2FBufferPool.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2FBufferPool.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2FBufferPool.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.nio;\n+\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.List;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingDeque;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * @author none\n+ */\n+public class BufferPool implements Runnable {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(BufferPool.class);\n+    final BlockingQueue<ByteBuffer> bufferPool;\n+    private final static double ONE_MB = 1 << 20;\n+    private Calendar lastRateSampleTime = Calendar.getInstance();\n+    private final Calendar startTime = Calendar.getInstance();\n+    double lastRateSampleMBps = -1.0;\n+    double overallMBps = -1.0;\n+    private long totalBytesExtracted = 0L;\n+    private long lastTotalBytesExtracted = 0L;\n+    final double maxRateMBps;\n+\n+    public BufferPool(final int bufferCount, final int bufferCapacity, final boolean allocateDirect, final double maxRateMBps) {\n+        bufferPool = new LinkedBlockingDeque<>(BufferPool.createBuffers(bufferCount, bufferCapacity, allocateDirect));\n+        this.maxRateMBps = maxRateMBps;\n+    }\n+\n+    /**\n+     * Returns the given buffer to the pool - and clears it.\n+     *\n+     * @param buffer\n+     * @param bytesProcessed\n+     * @return\n+     */\n+    public synchronized boolean returnBuffer(ByteBuffer buffer, final int bytesProcessed) {\n+        totalBytesExtracted += bytesProcessed;\n+        buffer.clear();\n+        return bufferPool.add(buffer);\n+    }\n+\n+    //here we enforce the desired rate we want by restricting access to buffers when we're over rate\n+    public synchronized ByteBuffer poll() {\n+        computeRate();\n+        final double weightedAvg = (lastRateSampleMBps * 0.7) + (overallMBps * 0.3);\n+        if (overallMBps >= maxRateMBps || weightedAvg >= maxRateMBps) {\n+            return null;\n+        }\n+        return bufferPool.poll();\n+    }\n+\n+    public int size() {\n+        return bufferPool.size();\n+    }\n+\n+    private synchronized void computeRate() {\n+        final Calendar now = Calendar.getInstance();\n+        final long measurementDurationMillis = now.getTimeInMillis() - lastRateSampleTime.getTimeInMillis();\n+        final double duractionSecs = ((double) measurementDurationMillis) / 1000.0;\n+        if (duractionSecs >= 0.75) { //recompute every 3/4 second or when we're too fast\n+            final long totalDuractionMillis = now.getTimeInMillis() - startTime.getTimeInMillis();\n+            final double totalDurationSecs = ((double) totalDuractionMillis) / 1000.0;\n+            final long differenceBytes = totalBytesExtracted - lastTotalBytesExtracted;\n+            lastTotalBytesExtracted = totalBytesExtracted;\n+            lastRateSampleTime = now;\n+            final double bps = ((double) differenceBytes) / duractionSecs;\n+            final double totalBps = ((double) totalBytesExtracted / totalDurationSecs);\n+            lastRateSampleMBps = bps / ONE_MB;\n+            overallMBps = totalBps / ONE_MB;\n+        }\n+    }\n+\n+    public static List<ByteBuffer> createBuffers(final int bufferCount, final int bufferCapacity, final boolean allocateDirect) {\n+        final List<ByteBuffer> buffers = new ArrayList<>();\n+        for (int i = 0; i < bufferCount; i++) {\n+            final ByteBuffer buffer = (allocateDirect) ? ByteBuffer.allocateDirect(bufferCapacity) : ByteBuffer.allocate(bufferCapacity);\n+            buffers.add(buffer);\n+        }\n+        return buffers;\n+    }\n+\n+    private void logChannelReadRates() {\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(String.format(\"Overall rate= %,.4f MB/s / Current Rate= %,.4f MB/s / Total Bytes Read= %d\", overallMBps, lastRateSampleMBps, totalBytesExtracted));\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        computeRate();\n+        logChannelReadRates();\n+    }\n+}"
        },
        {
            "sha": "2ae2c07d003adadddc46f52c0d90b2a9e01f161d",
            "filename": "commons/nifi-socket-utils/src/main/java/org/apache/nifi/io/nio/ChannelDispatcher.java",
            "status": "added",
            "additions": 160,
            "deletions": 0,
            "changes": 160,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2FChannelDispatcher.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2FChannelDispatcher.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2FChannelDispatcher.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.nio;\n+\n+import java.io.IOException;\n+import java.nio.channels.DatagramChannel;\n+import java.nio.channels.SelectableChannel;\n+import java.nio.channels.SelectionKey;\n+import java.nio.channels.Selector;\n+import java.nio.channels.ServerSocketChannel;\n+import java.nio.channels.SocketChannel;\n+import java.util.Iterator;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.apache.nifi.io.nio.consumer.StreamConsumerFactory;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * @author none\n+ */\n+public final class ChannelDispatcher implements Runnable {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ChannelDispatcher.class);\n+    private final Selector serverSocketSelector;\n+    private final Selector socketChannelSelector;\n+    private final ScheduledExecutorService executor;\n+    private final BufferPool emptyBuffers;\n+    private final StreamConsumerFactory factory;\n+    private final AtomicLong channelReaderFrequencyMilliseconds = new AtomicLong(DEFAULT_CHANNEL_READER_PERIOD_MILLISECONDS);\n+    private final long timeout;\n+    private volatile boolean stop = false;\n+    public static final long DEFAULT_CHANNEL_READER_PERIOD_MILLISECONDS = 100L;\n+\n+    public ChannelDispatcher(final Selector serverSocketSelector, final Selector socketChannelSelector, final ScheduledExecutorService service,\n+            final StreamConsumerFactory factory, final BufferPool buffers, final long timeout, final TimeUnit unit) {\n+        this.serverSocketSelector = serverSocketSelector;\n+        this.socketChannelSelector = socketChannelSelector;\n+        this.executor = service;\n+        this.factory = factory;\n+        emptyBuffers = buffers;\n+        this.timeout = TimeUnit.MILLISECONDS.convert(timeout, unit);\n+    }\n+\n+    public void setChannelReaderFrequency(final long period, final TimeUnit timeUnit) {\n+        channelReaderFrequencyMilliseconds.set(TimeUnit.MILLISECONDS.convert(period, timeUnit));\n+    }\n+\n+    @Override\n+    public void run() {\n+        while (!stop) {\n+            try {\n+                selectServerSocketKeys();\n+                selectSocketChannelKeys();\n+            } catch (final Exception ex) {\n+                LOGGER.warn(\"Key selection failed: {} Normal during shutdown.\", new Object[]{ex});\n+            }\n+        }\n+    }\n+\n+    /*\n+     * When serverSocketsChannels are registered with the selector, want each invoke of this method to loop through all\n+     * channels' keys.\n+     * \n+     * @throws IOException\n+     */\n+    private void selectServerSocketKeys() throws IOException {\n+        int numSelected = serverSocketSelector.select(timeout);\n+        if (numSelected == 0) {\n+            return;\n+        }\n+\n+        // for each registered server socket - see if any connections are waiting to be established\n+        final Iterator<SelectionKey> itr = serverSocketSelector.selectedKeys().iterator();\n+        while (itr.hasNext()) {\n+            SelectionKey serverSocketkey = itr.next();\n+            final SelectableChannel channel = serverSocketkey.channel();\n+            AbstractChannelReader reader = null;\n+            if (serverSocketkey.isValid() && serverSocketkey.isAcceptable()) {\n+                final ServerSocketChannel ssChannel = (ServerSocketChannel) serverSocketkey.channel();\n+                final SocketChannel sChannel = ssChannel.accept();\n+                if (sChannel != null) {\n+                    sChannel.configureBlocking(false);\n+                    final SelectionKey socketChannelKey = sChannel.register(socketChannelSelector, SelectionKey.OP_READ);\n+                    final String readerId = sChannel.socket().toString();\n+                    reader = new SocketChannelReader(readerId, socketChannelKey, emptyBuffers, factory);\n+                    final ScheduledFuture<?> readerFuture = executor.scheduleWithFixedDelay(reader, 10L,\n+                            channelReaderFrequencyMilliseconds.get(), TimeUnit.MILLISECONDS);\n+                    reader.setScheduledFuture(readerFuture);\n+                    socketChannelKey.attach(reader);\n+                }\n+            }\n+            itr.remove(); // do this so that the next select operation returns a positive value; otherwise, it will return 0.\n+            if (reader != null && LOGGER.isDebugEnabled()) {\n+                LOGGER.debug(this + \" New Connection established.  Server channel: \" + channel + \" Reader: \" + reader);\n+            }\n+        }\n+    }\n+\n+    /*\n+     * When invoking this method, only want to iterate through the selected keys once. When a key is entered into the selectors\n+     * selected key set, select will return a positive value. The next select will return 0 if nothing has changed. Note that\n+     * the selected key set is not manually changed via a remove operation.\n+     * \n+     * @throws IOException\n+     */\n+    private void selectSocketChannelKeys() throws IOException {\n+        // once a channel associated with a key in this selector is 'ready', it causes this select to immediately return.\n+        // thus, for each trip through the run() we only get hit with one real timeout...the one in selectServerSocketKeys.\n+        int numSelected = socketChannelSelector.select(timeout);\n+        if (numSelected == 0) {\n+            return;\n+        }\n+\n+        for (SelectionKey socketChannelKey : socketChannelSelector.selectedKeys()) {\n+            final SelectableChannel channel = socketChannelKey.channel();\n+            AbstractChannelReader reader = null;\n+            // there are 2 kinds of channels in this selector, both which have their own readers and are executed in their own\n+            // threads. We will get here whenever a new SocketChannel is created due to an incoming connection. However,\n+            // for a DatagramChannel we don't want to create a new reader unless it is a new DatagramChannel. The only\n+            // way to tell if it's new is the lack of an attachment. \n+            if (channel instanceof DatagramChannel && socketChannelKey.attachment() == null) {\n+                reader = new DatagramChannelReader(UUID.randomUUID().toString(), socketChannelKey, emptyBuffers, factory);\n+                socketChannelKey.attach(reader);\n+                final ScheduledFuture<?> readerFuture = executor.scheduleWithFixedDelay(reader, 10L, channelReaderFrequencyMilliseconds.get(),\n+                        TimeUnit.MILLISECONDS);\n+                reader.setScheduledFuture(readerFuture);\n+            }\n+            if (reader != null && LOGGER.isDebugEnabled()) {\n+                LOGGER.debug(this + \" New Connection established.  Server channel: \" + channel + \" Reader: \" + reader);\n+            }\n+        }\n+\n+    }\n+\n+    public void stop() {\n+        stop = true;\n+    }\n+\n+}"
        },
        {
            "sha": "b0a1cfba2d19089169eb6bfc11ff7fbe95257242",
            "filename": "commons/nifi-socket-utils/src/main/java/org/apache/nifi/io/nio/ChannelListener.java",
            "status": "added",
            "additions": 228,
            "deletions": 0,
            "changes": 228,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2FChannelListener.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2FChannelListener.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2FChannelListener.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,228 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.nio;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.StandardSocketOptions;\n+import java.nio.channels.DatagramChannel;\n+import java.nio.channels.SelectionKey;\n+import java.nio.channels.Selector;\n+import java.nio.channels.ServerSocketChannel;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.nifi.io.nio.consumer.StreamConsumerFactory;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This class provides the entry point to NIO based socket listeners for NiFi\n+ * processors and services. There are 2 supported types of Listeners, Datagram\n+ * (UDP based transmissions) and ServerSocket (TCP based transmissions). This\n+ * will create the ChannelDispatcher, which is a Runnable and is controlled via\n+ * the ScheduledExecutorService, which is also created by this class. The\n+ * ChannelDispatcher handles connections to the ServerSocketChannels and creates\n+ * the readers associated with the resulting SocketChannels. Additionally, this\n+ * creates and manages two Selectors, one for ServerSocketChannels and another\n+ * for SocketChannels and DatagramChannels.\n+ *\n+ * The threading model for this consists of one thread for the\n+ * ChannelDispatcher, one thread per added SocketChannel reader, one thread per\n+ * added DatagramChannel reader. The ChannelDispatcher is not scheduled with\n+ * fixed delay as the others are. It is throttled by the provided timeout value.\n+ * Within the ChannelDispatcher there are two blocking operations which will\n+ * block for the given timeout each time through the enclosing loop.\n+ *\n+ * All channels are cached in one of the two Selectors via their SelectionKey.\n+ * The serverSocketSelector maintains all the added ServerSocketChannels; the\n+ * socketChannelSelector maintains the all the add DatagramChannels and the\n+ * created SocketChannels. Further, the SelectionKey of the DatagramChannel and\n+ * the SocketChannel is injected with the channel's associated reader.\n+ *\n+ * All ChannelReaders will get throttled by the unavailability of buffers in the\n+ * provided BufferPool. This is designed to create back pressure.\n+ *\n+ * @author none\n+ */\n+public final class ChannelListener {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ChannelListener.class);\n+    private final ScheduledExecutorService executor;\n+    private final Selector serverSocketSelector; // used to listen for new connections\n+    private final Selector socketChannelSelector; // used to listen on existing connections\n+    private final ChannelDispatcher channelDispatcher;\n+    private final BufferPool bufferPool;\n+    private final int initialBufferPoolSize;\n+    private volatile long channelReaderFrequencyMSecs = 50;\n+\n+    public ChannelListener(final int threadPoolSize, final StreamConsumerFactory consumerFactory, final BufferPool bufferPool, int timeout,\n+            TimeUnit unit) throws IOException {\n+        this.executor = Executors.newScheduledThreadPool(threadPoolSize + 1); // need to allow for long running ChannelDispatcher thread\n+        this.serverSocketSelector = Selector.open();\n+        this.socketChannelSelector = Selector.open();\n+        this.bufferPool = bufferPool;\n+        this.initialBufferPoolSize = bufferPool.size();\n+        channelDispatcher = new ChannelDispatcher(serverSocketSelector, socketChannelSelector, executor, consumerFactory, bufferPool,\n+                timeout, unit);\n+        executor.schedule(channelDispatcher, 50, TimeUnit.MILLISECONDS);\n+    }\n+\n+    public void setChannelReaderSchedulingPeriod(final long period, final TimeUnit unit) {\n+        channelReaderFrequencyMSecs = TimeUnit.MILLISECONDS.convert(period, unit);\n+        channelDispatcher.setChannelReaderFrequency(period, unit);\n+    }\n+\n+    /**\n+     * Adds a server socket channel for listening to connections.\n+     *\n+     * @param nicIPAddress - if null binds to wildcard address\n+     * @param port - port to bind to\n+     * @param receiveBufferSize - size of OS receive buffer to request. If less\n+     * than 0 then will not be set and OS default will win.\n+     * @throws IOException\n+     */\n+    public void addServerSocket(final InetAddress nicIPAddress, final int port, final int receiveBufferSize)\n+            throws IOException {\n+        final ServerSocketChannel ssChannel = ServerSocketChannel.open();\n+        ssChannel.configureBlocking(false);\n+        if (receiveBufferSize > 0) {\n+            ssChannel.setOption(StandardSocketOptions.SO_RCVBUF, receiveBufferSize);\n+            final int actualReceiveBufSize = ssChannel.getOption(StandardSocketOptions.SO_RCVBUF);\n+            if (actualReceiveBufSize < receiveBufferSize) {\n+                LOGGER.warn(this + \" attempted to set TCP Receive Buffer Size to \"\n+                        + receiveBufferSize + \" bytes but could only set to \" + actualReceiveBufSize\n+                        + \"bytes. You may want to consider changing the Operating System's \"\n+                        + \"maximum receive buffer\");\n+            }\n+        }\n+        ssChannel.setOption(StandardSocketOptions.SO_REUSEADDR, true);\n+        ssChannel.bind(new InetSocketAddress(nicIPAddress, port));\n+        ssChannel.register(serverSocketSelector, SelectionKey.OP_ACCEPT);\n+    }\n+\n+    /**\n+     * Binds to listen for data grams on the given local IPAddress/port\n+     *\n+     * @param nicIPAddress - if null will listen on wildcard address, which\n+     * means datagrams will be received on all local network interfaces.\n+     * Otherwise, will bind to the provided IP address associated with some NIC.\n+     * @param port - the port to listen on\n+     * @param receiveBufferSize - the number of bytes to request for a receive\n+     * buffer from OS\n+     * @throws IOException\n+     */\n+    public void addDatagramChannel(final InetAddress nicIPAddress, final int port, final int receiveBufferSize)\n+            throws IOException {\n+        final DatagramChannel dChannel = createAndBindDatagramChannel(nicIPAddress, port, receiveBufferSize);\n+        dChannel.register(socketChannelSelector, SelectionKey.OP_READ);\n+    }\n+\n+    /**\n+     * Binds to listen for data grams on the given local IPAddress/port and\n+     * restricts receipt of datagrams to those from the provided host and port,\n+     * must specify both. This improves performance for datagrams coming from a\n+     * sender that is known a-priori.\n+     *\n+     * @param nicIPAddress - if null will listen on wildcard address, which\n+     * means datagrams will be received on all local network interfaces.\n+     * Otherwise, will bind to the provided IP address associated with some NIC.\n+     * @param port - the port to listen on. This is used to provide a well-known\n+     * destination for a sender.\n+     * @param receiveBufferSize - the number of bytes to request for a receive\n+     * buffer from OS\n+     * @param sendingHost - the hostname, or IP address, of the sender of\n+     * datagrams. Only datagrams from this host will be received. If this is\n+     * null the wildcard ip is used, which means datagrams may be received from\n+     * any network interface on the local host.\n+     * @param sendingPort - the port used by the sender of datagrams. Only\n+     * datagrams from this port will be received.\n+     * @throws IOException\n+     */\n+    public void addDatagramChannel(final InetAddress nicIPAddress, final int port, final int receiveBufferSize, final String sendingHost,\n+            final Integer sendingPort) throws IOException {\n+\n+        if (sendingHost == null || sendingPort == null) {\n+            addDatagramChannel(nicIPAddress, port, receiveBufferSize);\n+            return;\n+        }\n+        final DatagramChannel dChannel = createAndBindDatagramChannel(nicIPAddress, port, receiveBufferSize);\n+        dChannel.connect(new InetSocketAddress(sendingHost, sendingPort));\n+        dChannel.register(socketChannelSelector, SelectionKey.OP_READ);\n+    }\n+\n+    private DatagramChannel createAndBindDatagramChannel(final InetAddress nicIPAddress, final int port, final int receiveBufferSize)\n+            throws IOException {\n+        final DatagramChannel dChannel = DatagramChannel.open();\n+        dChannel.configureBlocking(false);\n+        if (receiveBufferSize > 0) {\n+            dChannel.setOption(StandardSocketOptions.SO_RCVBUF, receiveBufferSize);\n+            final int actualReceiveBufSize = dChannel.getOption(StandardSocketOptions.SO_RCVBUF);\n+            if (actualReceiveBufSize < receiveBufferSize) {\n+                LOGGER.warn(this + \" attempted to set UDP Receive Buffer Size to \"\n+                        + receiveBufferSize + \" bytes but could only set to \" + actualReceiveBufSize\n+                        + \"bytes. You may want to consider changing the Operating System's \"\n+                        + \"maximum receive buffer\");\n+            }\n+        }\n+        dChannel.setOption(StandardSocketOptions.SO_REUSEADDR, true);\n+        dChannel.bind(new InetSocketAddress(nicIPAddress, port));\n+        return dChannel;\n+    }\n+\n+    public void shutdown(final long period, final TimeUnit timeUnit) {\n+        channelDispatcher.stop();\n+        for (SelectionKey selectionKey : socketChannelSelector.keys()) {\n+            final AbstractChannelReader reader = (AbstractChannelReader) selectionKey.attachment();\n+            selectionKey.cancel();\n+            if (reader != null) {\n+                while (!reader.isClosed()) {\n+                    try {\n+                        Thread.sleep(channelReaderFrequencyMSecs);\n+                    } catch (InterruptedException e) {\n+                    }\n+                }\n+                final ScheduledFuture<?> readerFuture = reader.getScheduledFuture();\n+                readerFuture.cancel(false);\n+            }\n+            IOUtils.closeQuietly(selectionKey.channel()); // should already be closed via reader, but if reader did not exist...\n+        }\n+        IOUtils.closeQuietly(socketChannelSelector);\n+\n+        for (SelectionKey selectionKey : serverSocketSelector.keys()) {\n+            selectionKey.cancel();\n+            IOUtils.closeQuietly(selectionKey.channel());\n+        }\n+        IOUtils.closeQuietly(serverSocketSelector);\n+        executor.shutdown();\n+        try {\n+            executor.awaitTermination(period, timeUnit);\n+        } catch (final InterruptedException ex) {\n+            LOGGER.warn(\"Interrupted while trying to shutdown executor\");\n+        }\n+        final int currentBufferPoolSize = bufferPool.size();\n+        final String warning = (currentBufferPoolSize != initialBufferPoolSize) ? \"Initial buffer count=\" + initialBufferPoolSize\n+                + \" Current buffer count=\" + currentBufferPoolSize\n+                + \" Could indicate a buffer leak.  Ensure all consumers are executed until they complete.\" : \"\";\n+        LOGGER.info(\"Channel listener shutdown. \" + warning);\n+    }\n+}"
        },
        {
            "sha": "1eb5c7e3c987877952df96ee65353fb5c2fad85b",
            "filename": "commons/nifi-socket-utils/src/main/java/org/apache/nifi/io/nio/DatagramChannelReader.java",
            "status": "added",
            "additions": 59,
            "deletions": 0,
            "changes": 59,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2FDatagramChannelReader.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2FDatagramChannelReader.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2FDatagramChannelReader.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.nio;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.DatagramChannel;\n+import java.nio.channels.SelectionKey;\n+\n+import org.apache.nifi.io.nio.consumer.StreamConsumerFactory;\n+\n+/**\n+ *\n+ * @author none\n+ */\n+public final class DatagramChannelReader extends AbstractChannelReader {\n+\n+    public static final int MAX_UDP_PACKET_SIZE = 65507;\n+\n+    public DatagramChannelReader(final String id, final SelectionKey key, final BufferPool empties, final StreamConsumerFactory consumerFactory) {\n+        super(id, key, empties, consumerFactory);\n+    }\n+\n+    /**\n+     * Will receive UDP data from channel and won't receive anything unless the\n+     * given buffer has enough space for at least one full max udp packet.\n+     *\n+     * @param key\n+     * @param buffer\n+     * @return\n+     * @throws IOException\n+     */\n+    @Override\n+    protected int fillBuffer(final SelectionKey key, final ByteBuffer buffer) throws IOException {\n+        final DatagramChannel dChannel = (DatagramChannel) key.channel();\n+        final int initialBufferPosition = buffer.position();\n+        while (buffer.remaining() > MAX_UDP_PACKET_SIZE && key.isValid() && key.isReadable()) {\n+            if (dChannel.receive(buffer) == null) {\n+                break;\n+            }\n+        }\n+        return buffer.position() - initialBufferPosition;\n+    }\n+\n+}"
        },
        {
            "sha": "db2c102cbd4f5022fff51f12632cacdeb6f902a3",
            "filename": "commons/nifi-socket-utils/src/main/java/org/apache/nifi/io/nio/SocketChannelReader.java",
            "status": "added",
            "additions": 55,
            "deletions": 0,
            "changes": 55,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2FSocketChannelReader.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2FSocketChannelReader.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2FSocketChannelReader.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.nio;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.SelectionKey;\n+import java.nio.channels.SocketChannel;\n+import org.apache.nifi.io.nio.consumer.StreamConsumerFactory;\n+\n+/**\n+ *\n+ * @author none\n+ */\n+public final class SocketChannelReader extends AbstractChannelReader {\n+\n+    public SocketChannelReader(final String id, final SelectionKey key, final BufferPool empties, final StreamConsumerFactory consumerFactory) {\n+        super(id, key, empties, consumerFactory);\n+    }\n+\n+    /**\n+     * Receives TCP data from the socket channel for the given key.\n+     *\n+     * @param key\n+     * @param buffer\n+     * @return\n+     * @throws IOException\n+     */\n+    @Override\n+    protected int fillBuffer(final SelectionKey key, final ByteBuffer buffer) throws IOException {\n+        int bytesRead = 0;\n+        final SocketChannel sChannel = (SocketChannel) key.channel();\n+        while (key.isValid() && key.isReadable()) {\n+            bytesRead = sChannel.read(buffer);\n+            if (bytesRead <= 0) {\n+                break;\n+            }\n+        }\n+        return bytesRead;\n+    }\n+}"
        },
        {
            "sha": "fce59c60ab09da09752688abf064ecda69e803ba",
            "filename": "commons/nifi-socket-utils/src/main/java/org/apache/nifi/io/nio/consumer/AbstractStreamConsumer.java",
            "status": "added",
            "additions": 132,
            "deletions": 0,
            "changes": 132,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2Fconsumer%2FAbstractStreamConsumer.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2Fconsumer%2FAbstractStreamConsumer.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2Fconsumer%2FAbstractStreamConsumer.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.nio.consumer;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.nifi.io.nio.BufferPool;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+import org.apache.commons.lang3.builder.ToStringStyle;\n+\n+/**\n+ *\n+ * @author none\n+ */\n+public abstract class AbstractStreamConsumer implements StreamConsumer {\n+\n+    private final String uniqueId;\n+    private BufferPool bufferPool = null;\n+    private final BlockingQueue<ByteBuffer> filledBuffers = new LinkedBlockingQueue<>();\n+    private final AtomicBoolean streamEnded = new AtomicBoolean(false);\n+    private final AtomicBoolean consumerEnded = new AtomicBoolean(false);\n+\n+    public AbstractStreamConsumer(final String id) {\n+        uniqueId = id;\n+    }\n+\n+    @Override\n+    public final void setReturnBufferQueue(final BufferPool returnQueue) {\n+        bufferPool = returnQueue;\n+    }\n+\n+    @Override\n+    public final void addFilledBuffer(final ByteBuffer buffer) {\n+        if (isConsumerFinished()) {\n+            buffer.clear();\n+            bufferPool.returnBuffer(buffer, buffer.remaining());\n+        } else {\n+            filledBuffers.add(buffer);\n+        }\n+    }\n+\n+    @Override\n+    public final void process() throws IOException {\n+        if (isConsumerFinished()) {\n+            return;\n+        }\n+        if (streamEnded.get() && filledBuffers.isEmpty()) {\n+            consumerEnded.set(true);\n+            onConsumerDone();\n+            return;\n+        }\n+        final ByteBuffer buffer = filledBuffers.poll();\n+        if (buffer != null) {\n+            final int bytesToProcess = buffer.remaining();\n+            try {\n+                processBuffer(buffer);\n+            } finally {\n+                buffer.clear();\n+                bufferPool.returnBuffer(buffer, bytesToProcess);\n+            }\n+        }\n+    }\n+\n+    protected abstract void processBuffer(ByteBuffer buffer) throws IOException;\n+\n+    @Override\n+    public final void signalEndOfStream() {\n+        streamEnded.set(true);\n+    }\n+\n+    /**\n+     * Convenience method that is called when the consumer is done processing\n+     * based on being told the signal is end of stream and has processed all\n+     * given buffers.\n+     */\n+    protected void onConsumerDone() {\n+    }\n+\n+    @Override\n+    public final boolean isConsumerFinished() {\n+        return consumerEnded.get();\n+    }\n+\n+    @Override\n+    public final String getId() {\n+        return uniqueId;\n+    }\n+\n+    @Override\n+    public final boolean equals(final Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj.getClass() != getClass()) {\n+            return false;\n+        }\n+        AbstractStreamConsumer rhs = (AbstractStreamConsumer) obj;\n+        return new EqualsBuilder().appendSuper(super.equals(obj)).append(uniqueId, rhs.uniqueId).isEquals();\n+    }\n+\n+    @Override\n+    public final int hashCode() {\n+        return new HashCodeBuilder(19, 23).append(uniqueId).toHashCode();\n+    }\n+\n+    @Override\n+    public final String toString() {\n+        return new ToStringBuilder(this, ToStringStyle.NO_FIELD_NAMES_STYLE).append(uniqueId).toString();\n+    }\n+}"
        },
        {
            "sha": "d75b7d7a0b31277d5487d5d7ef67ace5e594039c",
            "filename": "commons/nifi-socket-utils/src/main/java/org/apache/nifi/io/nio/consumer/StreamConsumer.java",
            "status": "added",
            "additions": 80,
            "deletions": 0,
            "changes": 80,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2Fconsumer%2FStreamConsumer.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2Fconsumer%2FStreamConsumer.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2Fconsumer%2FStreamConsumer.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.nio.consumer;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import org.apache.nifi.io.nio.BufferPool;\n+\n+/**\n+ * A StreamConsumer must be thread safe. It may be accessed concurrently by a\n+ * thread providing data to process and another thread that is processing that\n+ * data.\n+ *\n+ * @author none\n+ */\n+public interface StreamConsumer {\n+\n+    /**\n+     * Will be called once just after construction. It provides the queue to\n+     * which processed and emptied and cleared buffers must be returned. For\n+     * each time <code>addFilledBuffer</code> is called there should be an\n+     * associated add to this given queue. If not, buffers will run out and all\n+     * stream processing will halt. READ THIS!!!\n+     *\n+     * @param returnQueue\n+     */\n+    void setReturnBufferQueue(BufferPool returnQueue);\n+\n+    /**\n+     * Will be called by the thread that produces byte buffers with available\n+     * data to be processed. If the consumer is finished this should simply\n+     * return the given buffer to the return buffer queue (after it is cleared)\n+     *\n+     * @param buffer\n+     */\n+    void addFilledBuffer(ByteBuffer buffer);\n+\n+    /**\n+     * Will be called by the thread that executes the consumption of data. May\n+     * be called many times though once <code>isConsumerFinished</code> returns\n+     * true this method will likely do nothing.\n+     * @throws java.io.IOException\n+     */\n+    void process() throws IOException;\n+\n+    /**\n+     * Called once the end of the input stream is detected\n+     */\n+    void signalEndOfStream();\n+\n+    /**\n+     * If true signals the consumer is done consuming data and will not process\n+     * any more buffers.\n+     *\n+     * @return\n+     */\n+    boolean isConsumerFinished();\n+\n+    /**\n+     * Uniquely identifies the consumer\n+     *\n+     * @return\n+     */\n+    String getId();\n+\n+}"
        },
        {
            "sha": "df298d57efc80276deb4964a455ebdc9f38b68c3",
            "filename": "commons/nifi-socket-utils/src/main/java/org/apache/nifi/io/nio/consumer/StreamConsumerFactory.java",
            "status": "added",
            "additions": 27,
            "deletions": 0,
            "changes": 27,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2Fconsumer%2FStreamConsumerFactory.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2Fconsumer%2FStreamConsumerFactory.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2Fconsumer%2FStreamConsumerFactory.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.nio.consumer;\n+\n+/**\n+ *\n+ * @author none\n+ */\n+public interface StreamConsumerFactory {\n+\n+    StreamConsumer newInstance(String streamId);\n+\n+}"
        },
        {
            "sha": "7ed5ad431362bb2dd51d16b5490454ab543ce9ed",
            "filename": "commons/nifi-socket-utils/src/main/java/org/apache/nifi/io/socket/SSLContextFactory.java",
            "status": "added",
            "additions": 102,
            "deletions": 0,
            "changes": 102,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2FSSLContextFactory.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2FSSLContextFactory.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2FSSLContextFactory.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.socket;\n+\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.SecureRandom;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+\n+import javax.net.ssl.KeyManager;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+\n+import org.apache.nifi.util.NiFiProperties;\n+\n+public class SSLContextFactory {\n+\n+    private final String keystore;\n+    private final char[] keystorePass;\n+    private final String keystoreType;\n+    private final String truststore;\n+    private final char[] truststorePass;\n+    private final String truststoreType;\n+\n+    private final KeyManager[] keyManagers;\n+    private final TrustManager[] trustManagers;\n+\n+    public SSLContextFactory(final NiFiProperties properties) throws NoSuchAlgorithmException, CertificateException, FileNotFoundException, IOException, KeyStoreException, UnrecoverableKeyException {\n+        keystore = properties.getProperty(NiFiProperties.SECURITY_KEYSTORE);\n+        keystorePass = getPass(properties.getProperty(NiFiProperties.SECURITY_KEYSTORE_PASSWD));\n+        keystoreType = properties.getProperty(NiFiProperties.SECURITY_KEYSTORE_TYPE);\n+\n+        truststore = properties.getProperty(NiFiProperties.SECURITY_TRUSTSTORE);\n+        truststorePass = getPass(properties.getProperty(NiFiProperties.SECURITY_TRUSTSTORE_PASSWD));\n+        truststoreType = properties.getProperty(NiFiProperties.SECURITY_TRUSTSTORE_TYPE);\n+\n+        // prepare the keystore\n+        final KeyStore keyStore = KeyStore.getInstance(keystoreType);\n+        keyStore.load(new FileInputStream(keystore), keystorePass);\n+        final KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+        keyManagerFactory.init(keyStore, keystorePass);\n+\n+        // prepare the truststore\n+        final KeyStore trustStore = KeyStore.getInstance(truststoreType);\n+        trustStore.load(new FileInputStream(truststore), truststorePass);\n+        final TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+        trustManagerFactory.init(trustStore);\n+\n+        keyManagers = keyManagerFactory.getKeyManagers();\n+        trustManagers = trustManagerFactory.getTrustManagers();\n+    }\n+\n+    private static char[] getPass(final String password) {\n+        return password == null ? null : password.toCharArray();\n+    }\n+\n+    /**\n+     * Creates a SSLContext instance using the given information.\n+     *\n+     *\n+     * @return a SSLContext instance\n+     * @throws java.security.KeyStoreException\n+     * @throws java.io.IOException\n+     * @throws java.security.NoSuchAlgorithmException\n+     * @throws java.security.cert.CertificateException\n+     * @throws java.security.UnrecoverableKeyException\n+     * @throws java.security.KeyManagementException\n+     */\n+    public SSLContext createSslContext() throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException,\n+            UnrecoverableKeyException, KeyManagementException {\n+\n+        // initialize the ssl context\n+        final SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n+        sslContext.init(keyManagers, trustManagers, new SecureRandom());\n+        sslContext.getDefaultSSLParameters().setNeedClientAuth(true);\n+\n+        return sslContext;\n+\n+    }\n+}"
        },
        {
            "sha": "fc279fbc3cdec391224889e35159015768e01bbe",
            "filename": "commons/nifi-socket-utils/src/main/java/org/apache/nifi/io/socket/ServerSocketConfiguration.java",
            "status": "added",
            "additions": 83,
            "deletions": 0,
            "changes": 83,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2FServerSocketConfiguration.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2FServerSocketConfiguration.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2FServerSocketConfiguration.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.socket;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.security.KeyManagementException;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+\n+import javax.net.ssl.SSLContext;\n+\n+/**\n+ * @author unattributed\n+ */\n+public final class ServerSocketConfiguration {\n+\n+    private boolean needClientAuth;\n+    private Integer socketTimeout;\n+    private Boolean reuseAddress;\n+    private Integer receiveBufferSize;\n+    private SSLContextFactory sslContextFactory;\n+\n+    public ServerSocketConfiguration() {\n+    }\n+\n+    public SSLContext createSSLContext() throws KeyManagementException, NoSuchAlgorithmException, UnrecoverableKeyException, KeyStoreException, CertificateException, FileNotFoundException, IOException {\n+        return sslContextFactory == null ? null : sslContextFactory.createSslContext();\n+    }\n+\n+    public void setSSLContextFactory(final SSLContextFactory sslContextFactory) {\n+        this.sslContextFactory = sslContextFactory;\n+    }\n+\n+    public Integer getSocketTimeout() {\n+        return socketTimeout;\n+    }\n+\n+    public void setSocketTimeout(Integer socketTimeout) {\n+        this.socketTimeout = socketTimeout;\n+    }\n+\n+    public boolean getNeedClientAuth() {\n+        return needClientAuth;\n+    }\n+\n+    public void setNeedClientAuth(boolean needClientAuth) {\n+        this.needClientAuth = needClientAuth;\n+    }\n+\n+    public Boolean getReuseAddress() {\n+        return reuseAddress;\n+    }\n+\n+    public void setReuseAddress(Boolean reuseAddress) {\n+        this.reuseAddress = reuseAddress;\n+    }\n+\n+    public Integer getReceiveBufferSize() {\n+        return receiveBufferSize;\n+    }\n+\n+    public void setReceiveBufferSize(Integer receiveBufferSize) {\n+        this.receiveBufferSize = receiveBufferSize;\n+    }\n+\n+}"
        },
        {
            "sha": "c24b540cba84dbe5fa9da1be2067b9fc585413fe",
            "filename": "commons/nifi-socket-utils/src/main/java/org/apache/nifi/io/socket/SocketConfiguration.java",
            "status": "added",
            "additions": 116,
            "deletions": 0,
            "changes": 116,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2FSocketConfiguration.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2FSocketConfiguration.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2FSocketConfiguration.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.socket;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.security.KeyManagementException;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+\n+import javax.net.ssl.SSLContext;\n+\n+/**\n+ * @author unattributed\n+ */\n+public final class SocketConfiguration {\n+\n+    private Integer socketTimeout;\n+    private Integer receiveBufferSize;\n+    private Integer sendBufferSize;\n+    private Boolean reuseAddress;\n+    private Boolean keepAlive;\n+    private Boolean oobInline;\n+    private Boolean tcpNoDelay;\n+    private Integer trafficClass;\n+    private SSLContextFactory sslContextFactory;\n+\n+    public SSLContext createSSLContext() throws KeyManagementException, NoSuchAlgorithmException, UnrecoverableKeyException, KeyStoreException, CertificateException, FileNotFoundException, IOException {\n+        return sslContextFactory == null ? null : sslContextFactory.createSslContext();\n+    }\n+\n+    public void setSSLContextFactory(final SSLContextFactory sslContextFactory) {\n+        this.sslContextFactory = sslContextFactory;\n+    }\n+\n+    public Integer getSocketTimeout() {\n+        return socketTimeout;\n+    }\n+\n+    public void setSocketTimeout(Integer socketTimeout) {\n+        this.socketTimeout = socketTimeout;\n+    }\n+\n+    public Boolean getReuseAddress() {\n+        return reuseAddress;\n+    }\n+\n+    public void setReuseAddress(Boolean reuseAddress) {\n+        this.reuseAddress = reuseAddress;\n+    }\n+\n+    public Boolean getKeepAlive() {\n+        return keepAlive;\n+    }\n+\n+    public void setKeepAlive(Boolean keepAlive) {\n+        this.keepAlive = keepAlive;\n+    }\n+\n+    public Boolean getOobInline() {\n+        return oobInline;\n+    }\n+\n+    public void setOobInline(Boolean oobInline) {\n+        this.oobInline = oobInline;\n+    }\n+\n+    public Integer getReceiveBufferSize() {\n+        return receiveBufferSize;\n+    }\n+\n+    public void setReceiveBufferSize(Integer receiveBufferSize) {\n+        this.receiveBufferSize = receiveBufferSize;\n+    }\n+\n+    public Integer getSendBufferSize() {\n+        return sendBufferSize;\n+    }\n+\n+    public void setSendBufferSize(Integer sendBufferSize) {\n+        this.sendBufferSize = sendBufferSize;\n+    }\n+\n+    public Boolean getTcpNoDelay() {\n+        return tcpNoDelay;\n+    }\n+\n+    public void setTcpNoDelay(Boolean tcpNoDelay) {\n+        this.tcpNoDelay = tcpNoDelay;\n+    }\n+\n+    public Integer getTrafficClass() {\n+        return trafficClass;\n+    }\n+\n+    public void setTrafficClass(Integer trafficClass) {\n+        this.trafficClass = trafficClass;\n+    }\n+\n+}"
        },
        {
            "sha": "e02791af07ffa95ee5eb2bdbd8bb25b68ef345d4",
            "filename": "commons/nifi-socket-utils/src/main/java/org/apache/nifi/io/socket/SocketListener.java",
            "status": "added",
            "additions": 211,
            "deletions": 0,
            "changes": 211,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2FSocketListener.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2FSocketListener.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2FSocketListener.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,211 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.socket;\n+\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.net.SocketException;\n+import java.net.SocketTimeoutException;\n+import java.security.KeyManagementException;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.apache.nifi.logging.NiFiLog;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Implements a listener for TCP/IP messages sent over unicast socket.\n+ *\n+ * @author unattributed\n+ */\n+public abstract class SocketListener {\n+\n+    private static final int DEFAULT_SHUTDOWN_LISTENER_SECONDS = 5;\n+    private static final Logger logger = new NiFiLog(LoggerFactory.getLogger(SocketListener.class));\n+    private volatile ExecutorService executorService;  // volatile to guarantee most current value is visible\n+    private volatile ServerSocket serverSocket;        // volatile to guarantee most current value is visible\n+    private final int numThreads;\n+    private final int port;\n+    private final ServerSocketConfiguration configuration;\n+    private final AtomicInteger shutdownListenerSeconds = new AtomicInteger(DEFAULT_SHUTDOWN_LISTENER_SECONDS);\n+\n+    public SocketListener(\n+            final int numThreads,\n+            final int port,\n+            final ServerSocketConfiguration configuration) {\n+\n+        if (numThreads <= 0) {\n+            throw new IllegalArgumentException(\"Number of threads may not be less than or equal to zero.\");\n+        } else if (configuration == null) {\n+            throw new IllegalArgumentException(\"Server socket configuration may not be null.\");\n+        }\n+\n+        this.numThreads = numThreads;\n+        this.port = port;\n+        this.configuration = configuration;\n+    }\n+\n+    /**\n+     * Implements the action to perform when a new socket request is received.\n+     * This class will close the socket.\n+     *\n+     * @param socket the socket\n+     */\n+    public abstract void dispatchRequest(final Socket socket);\n+\n+    public void start() throws IOException {\n+\n+        if (isRunning()) {\n+            return;\n+        }\n+\n+        try {\n+            serverSocket = SocketUtils.createServerSocket(port, configuration);\n+        } catch (KeyManagementException | UnrecoverableKeyException | NoSuchAlgorithmException | KeyStoreException | CertificateException e) {\n+            throw new IOException(e);\n+        }\n+\n+        final ThreadFactory defaultThreadFactory = Executors.defaultThreadFactory();\n+        executorService = Executors.newFixedThreadPool(numThreads, new ThreadFactory() {\n+            private final AtomicLong threadCounter = new AtomicLong(0L);\n+\n+            @Override\n+            public Thread newThread(final Runnable r) {\n+                final Thread newThread = defaultThreadFactory.newThread(r);\n+                newThread.setName(\"Process NCM Request-\" + threadCounter.incrementAndGet());\n+                return newThread;\n+            }\n+        });\n+\n+        final ExecutorService runnableExecServiceRef = executorService;\n+        final ServerSocket runnableServerSocketRef = serverSocket;\n+\n+        final Thread t = new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                while (runnableExecServiceRef.isShutdown() == false) {\n+                    Socket socket = null;\n+                    try {\n+                        try {\n+                            socket = runnableServerSocketRef.accept();\n+                            if (configuration.getSocketTimeout() != null) {\n+                                socket.setSoTimeout(configuration.getSocketTimeout());\n+                            }\n+                        } catch (final SocketTimeoutException ste) {\n+                            // nobody connected to us. Go ahead and call closeQuietly just to make sure we don't leave\n+                            // any sockets lingering\n+                            SocketUtils.closeQuietly(socket);\n+                            continue;\n+                        } catch (final SocketException se) {\n+                            logger.warn(\"Failed to communicate with \" + (socket == null ? \"Unknown Host\" : socket.getInetAddress().getHostName()) + \" due to \" + se, se);\n+                            SocketUtils.closeQuietly(socket);\n+                            continue;\n+                        } catch (final Throwable t) {\n+                            logger.warn(\"Socket Listener encountered exception: \" + t, t);\n+                            SocketUtils.closeQuietly(socket);\n+                            continue;\n+                        }\n+\n+                        final Socket finalSocket = socket;\n+                        runnableExecServiceRef.execute(new Runnable() {\n+                            @Override\n+                            public void run() {\n+                                try {\n+                                    dispatchRequest(finalSocket);\n+                                } catch (final Throwable t) {\n+                                    logger.warn(\"Dispatching socket request encountered exception due to: \" + t, t);\n+                                } finally {\n+                                    SocketUtils.closeQuietly(finalSocket);\n+                                }\n+                            }\n+                        });\n+                    } catch (final Throwable t) {\n+                        logger.error(\"Socket Listener encountered exception: \" + t, t);\n+                        SocketUtils.closeQuietly(socket);\n+                    }\n+                }\n+            }\n+        });\n+        t.setName(\"Cluster Socket Listener\");\n+        t.start();\n+    }\n+\n+    public boolean isRunning() {\n+        return (executorService != null && executorService.isShutdown() == false);\n+    }\n+\n+    public void stop() throws IOException {\n+\n+        if (isRunning() == false) {\n+            return;\n+        }\n+\n+        // shutdown executor service\n+        try {\n+            if (getShutdownListenerSeconds() <= 0) {\n+                executorService.shutdownNow();\n+            } else {\n+                executorService.shutdown();\n+            }\n+            executorService.awaitTermination(getShutdownListenerSeconds(), TimeUnit.SECONDS);\n+        } catch (final InterruptedException ex) {\n+            Thread.currentThread().interrupt();\n+        } finally {\n+            if (executorService.isTerminated()) {\n+                logger.info(\"Socket Listener has been terminated successfully.\");\n+            } else {\n+                logger.warn(\"Socket Listener has not terminated properly.  There exists an uninterruptable thread that will take an indeterminate amount of time to stop.\");\n+            }\n+        }\n+\n+        // shutdown server socket\n+        SocketUtils.closeQuietly(serverSocket);\n+\n+    }\n+\n+    public int getShutdownListenerSeconds() {\n+        return shutdownListenerSeconds.get();\n+    }\n+\n+    public void setShutdownListenerSeconds(final int shutdownListenerSeconds) {\n+        this.shutdownListenerSeconds.set(shutdownListenerSeconds);\n+    }\n+\n+    public ServerSocketConfiguration getConfiguration() {\n+        return configuration;\n+    }\n+\n+    public int getPort() {\n+        if (isRunning()) {\n+            return serverSocket.getLocalPort();\n+        } else {\n+            return port;\n+        }\n+    }\n+\n+}"
        },
        {
            "sha": "fb6a00c6ac8dace4d0f0e74e9996d361e9fc291b",
            "filename": "commons/nifi-socket-utils/src/main/java/org/apache/nifi/io/socket/SocketUtils.java",
            "status": "added",
            "additions": 169,
            "deletions": 0,
            "changes": 169,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2FSocketUtils.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2FSocketUtils.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2FSocketUtils.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.socket;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.security.KeyManagementException;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLServerSocket;\n+import javax.net.ssl.SSLSocket;\n+\n+import org.apache.nifi.logging.NiFiLog;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author unattributed\n+ */\n+public final class SocketUtils {\n+\n+    private static final Logger logger = new NiFiLog(LoggerFactory.getLogger(SocketUtils.class));\n+\n+    public static Socket createSocket(final InetSocketAddress address, final SocketConfiguration config) throws IOException {\n+        if (address == null) {\n+            throw new IllegalArgumentException(\"Socket address may not be null.\");\n+        } else if (config == null) {\n+            throw new IllegalArgumentException(\"Configuration may not be null.\");\n+        }\n+\n+        final Socket socket;\n+\n+        final SSLContext sslContext;\n+        try {\n+            sslContext = config.createSSLContext();\n+        } catch (final Exception e) {\n+            throw new IOException(\"Could not create SSLContext\", e);\n+        }\n+\n+        if (sslContext == null) {\n+            socket = new Socket(address.getHostName(), address.getPort());\n+        } else {\n+            socket = sslContext.getSocketFactory().createSocket(address.getHostName(), address.getPort());\n+        }\n+\n+        if (config.getSocketTimeout() != null) {\n+            socket.setSoTimeout(config.getSocketTimeout());\n+        }\n+\n+        if (config.getReuseAddress() != null) {\n+            socket.setReuseAddress(config.getReuseAddress());\n+        }\n+\n+        if (config.getReceiveBufferSize() != null) {\n+            socket.setReceiveBufferSize(config.getReceiveBufferSize());\n+        }\n+\n+        if (config.getSendBufferSize() != null) {\n+            socket.setSendBufferSize(config.getSendBufferSize());\n+        }\n+\n+        if (config.getTrafficClass() != null) {\n+            socket.setTrafficClass(config.getTrafficClass());\n+        }\n+\n+        if (config.getKeepAlive() != null) {\n+            socket.setKeepAlive(config.getKeepAlive());\n+        }\n+\n+        if (config.getOobInline() != null) {\n+            socket.setOOBInline(config.getOobInline());\n+        }\n+\n+        if (config.getTcpNoDelay() != null) {\n+            socket.setTcpNoDelay(config.getTcpNoDelay());\n+        }\n+\n+        return socket;\n+    }\n+\n+    public static ServerSocket createServerSocket(final int port, final ServerSocketConfiguration config) throws IOException, KeyManagementException, UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException, CertificateException {\n+        if (config == null) {\n+            throw new NullPointerException(\"Configuration may not be null.\");\n+        }\n+\n+        final SSLContext sslContext = config.createSSLContext();\n+        final ServerSocket serverSocket;\n+        if (sslContext == null) {\n+            serverSocket = new ServerSocket(port);\n+        } else {\n+            serverSocket = sslContext.getServerSocketFactory().createServerSocket(port);\n+            ((SSLServerSocket) serverSocket).setNeedClientAuth(config.getNeedClientAuth());\n+        }\n+\n+        if (config.getSocketTimeout() != null) {\n+            serverSocket.setSoTimeout(config.getSocketTimeout());\n+        }\n+\n+        if (config.getReuseAddress() != null) {\n+            serverSocket.setReuseAddress(config.getReuseAddress());\n+        }\n+\n+        if (config.getReceiveBufferSize() != null) {\n+            serverSocket.setReceiveBufferSize(config.getReceiveBufferSize());\n+        }\n+\n+        return serverSocket;\n+    }\n+\n+    public static void closeQuietly(final Socket socket) {\n+        if (socket == null) {\n+            return;\n+        }\n+\n+        try {\n+            try {\n+                // can't shudown input/output individually with secure sockets\n+                if ((socket instanceof SSLSocket) == false) {\n+                    if (socket.isInputShutdown() == false) {\n+                        socket.shutdownInput();\n+                    }\n+                    if (socket.isOutputShutdown() == false) {\n+                        socket.shutdownOutput();\n+                    }\n+                }\n+            } finally {\n+                if (socket.isClosed() == false) {\n+                    socket.close();\n+                }\n+            }\n+        } catch (final Exception ex) {\n+            logger.debug(\"Failed to close socket due to: \" + ex, ex);\n+        }\n+    }\n+\n+    public static void closeQuietly(final ServerSocket serverSocket) {\n+        if (serverSocket == null) {\n+            return;\n+        }\n+\n+        try {\n+            serverSocket.close();\n+        } catch (final Exception ex) {\n+            logger.debug(\"Failed to close server socket due to: \" + ex, ex);\n+        }\n+    }\n+\n+}"
        },
        {
            "sha": "7a62813222a2269b65ac83b572c2f4be1e07a765",
            "filename": "commons/nifi-socket-utils/src/main/java/org/apache/nifi/io/socket/multicast/DiscoverableService.java",
            "status": "added",
            "additions": 43,
            "deletions": 0,
            "changes": 43,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FDiscoverableService.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FDiscoverableService.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FDiscoverableService.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.socket.multicast;\n+\n+import java.net.InetSocketAddress;\n+\n+/**\n+ * A service that may be discovered at runtime. A service is defined as having a\n+ * unique case-sensitive service name and a socket address where it is\n+ * available.\n+ *\n+ * @author unattributed\n+ */\n+public interface DiscoverableService {\n+\n+    /**\n+     * The service's name. Two services are considered equal if they have the\n+     * same case sensitive service name.\n+     *\n+     * @return the service's name\n+     */\n+    String getServiceName();\n+\n+    /**\n+     * @return the service's address\n+     */\n+    InetSocketAddress getServiceAddress();\n+\n+}"
        },
        {
            "sha": "5f378b94ef502938be1070eff2867e60458b51d9",
            "filename": "commons/nifi-socket-utils/src/main/java/org/apache/nifi/io/socket/multicast/DiscoverableServiceImpl.java",
            "status": "added",
            "additions": 78,
            "deletions": 0,
            "changes": 78,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FDiscoverableServiceImpl.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FDiscoverableServiceImpl.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FDiscoverableServiceImpl.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.socket.multicast;\n+\n+import java.net.InetSocketAddress;\n+import org.apache.commons.lang3.StringUtils;\n+\n+/**\n+ * A basic implementation of the DiscoverableService interface. To services are\n+ * considered equal if they have the same case-sensitive service name.\n+ *\n+ * @author unattributed\n+ */\n+public class DiscoverableServiceImpl implements DiscoverableService {\n+\n+    private final String serviceName;\n+\n+    private final InetSocketAddress serviceAddress;\n+\n+    public DiscoverableServiceImpl(final String serviceName, final InetSocketAddress serviceAddress) {\n+        if (StringUtils.isBlank(serviceName)) {\n+            throw new IllegalArgumentException(\"Service name may not be null or empty.\");\n+        } else if (serviceAddress == null) {\n+            throw new IllegalArgumentException(\"Service address may not be null.\");\n+        }\n+        this.serviceName = serviceName;\n+        this.serviceAddress = serviceAddress;\n+    }\n+\n+    @Override\n+    public InetSocketAddress getServiceAddress() {\n+        return serviceAddress;\n+    }\n+\n+    @Override\n+    public String getServiceName() {\n+        return serviceName;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"[Discoverable Service: %s available at %s:%d]\", serviceName, serviceAddress.getHostName(), serviceAddress.getPort());\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (!(obj instanceof DiscoverableService)) {\n+            return false;\n+        }\n+        final DiscoverableService other = (DiscoverableService) obj;\n+        return !((this.serviceName == null) ? (other.getServiceName() != null) : !this.serviceName.equals(other.getServiceName()));\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 5;\n+        hash = 53 * hash + (this.serviceName != null ? this.serviceName.hashCode() : 0);\n+        return hash;\n+    }\n+\n+}"
        },
        {
            "sha": "ea0b72a7d8e5b1af6e291d20580f021e60ea5dc8",
            "filename": "commons/nifi-socket-utils/src/main/java/org/apache/nifi/io/socket/multicast/MulticastConfiguration.java",
            "status": "added",
            "additions": 99,
            "deletions": 0,
            "changes": 99,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FMulticastConfiguration.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FMulticastConfiguration.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FMulticastConfiguration.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.socket.multicast;\n+\n+/**\n+ * @author unattributed\n+ */\n+public final class MulticastConfiguration {\n+\n+    private MulticastTimeToLive ttl = DEFAULT_MULTICAST_TTL;\n+\n+    private Integer socketTimeout;\n+\n+    private Integer receiveBufferSize;\n+\n+    private Integer sendBufferSize;\n+\n+    private Boolean reuseAddress;\n+\n+    private Integer trafficClass;\n+\n+    private Boolean loopbackMode;\n+\n+    public static final MulticastTimeToLive DEFAULT_MULTICAST_TTL = MulticastTimeToLive.SAME_SUBNET;\n+\n+    public MulticastTimeToLive getTtl() {\n+        return ttl;\n+    }\n+\n+    public void setTtl(final MulticastTimeToLive ttl) {\n+        if (ttl == null) {\n+            throw new NullPointerException(\"Multicast TTL may not be null.\");\n+        }\n+        this.ttl = ttl;\n+    }\n+\n+    public Integer getSocketTimeout() {\n+        return socketTimeout;\n+    }\n+\n+    public void setSocketTimeout(Integer socketTimeout) {\n+        this.socketTimeout = socketTimeout;\n+    }\n+\n+    public Boolean getReuseAddress() {\n+        return reuseAddress;\n+    }\n+\n+    public void setReuseAddress(Boolean reuseAddress) {\n+        this.reuseAddress = reuseAddress;\n+    }\n+\n+    public Integer getReceiveBufferSize() {\n+        return receiveBufferSize;\n+    }\n+\n+    public void setReceiveBufferSize(Integer receiveBufferSize) {\n+        this.receiveBufferSize = receiveBufferSize;\n+    }\n+\n+    public Integer getSendBufferSize() {\n+        return sendBufferSize;\n+    }\n+\n+    public void setSendBufferSize(Integer sendBufferSize) {\n+        this.sendBufferSize = sendBufferSize;\n+    }\n+\n+    public Integer getTrafficClass() {\n+        return trafficClass;\n+    }\n+\n+    public void setTrafficClass(Integer trafficClass) {\n+        this.trafficClass = trafficClass;\n+    }\n+\n+    public Boolean getLoopbackMode() {\n+        return loopbackMode;\n+    }\n+\n+    public void setLoopbackMode(Boolean loopbackMode) {\n+        this.loopbackMode = loopbackMode;\n+    }\n+\n+}"
        },
        {
            "sha": "e562c25fcd7da4b2af55a002241715760698a057",
            "filename": "commons/nifi-socket-utils/src/main/java/org/apache/nifi/io/socket/multicast/MulticastListener.java",
            "status": "added",
            "additions": 193,
            "deletions": 0,
            "changes": 193,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FMulticastListener.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FMulticastListener.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FMulticastListener.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.socket.multicast;\n+\n+import java.io.IOException;\n+import java.net.DatagramPacket;\n+import java.net.InetSocketAddress;\n+import java.net.MulticastSocket;\n+import java.net.SocketException;\n+import java.net.SocketTimeoutException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Implements a listener for protocol messages sent over multicast. If a message\n+ * is of type MulticastProtocolMessage, then the underlying protocol message is\n+ * passed to the handler. If the receiving handler produces a message response,\n+ * then the message is wrapped with a MulticastProtocolMessage before being sent\n+ * to the originator.\n+ *\n+ * @author unattributed\n+ */\n+public abstract class MulticastListener {\n+\n+    // constants\n+    private static final int DEFAULT_SHUTDOWN_LISTENER_SECONDS = 5;\n+    private static final int DEFAULT_MAX_PACKET_SIZE_BYTES = 512;\n+\n+    private static final Logger logger = new org.apache.nifi.logging.NiFiLog(LoggerFactory.getLogger(MulticastListener.class));\n+\n+    // immutable members\n+    private final int numThreads;\n+    private final InetSocketAddress multicastAddress;\n+    private final MulticastConfiguration configuration;\n+\n+    private volatile ExecutorService executorService;     // volatile to guarantee most current value is visible\n+    private volatile MulticastSocket multicastSocket;     // volatile to guarantee most current value is visible\n+\n+    private int shutdownListenerSeconds = DEFAULT_SHUTDOWN_LISTENER_SECONDS;\n+    private int maxPacketSizeBytes = DEFAULT_MAX_PACKET_SIZE_BYTES;\n+\n+    public MulticastListener(\n+            final int numThreads,\n+            final InetSocketAddress multicastAddress,\n+            final MulticastConfiguration configuration) {\n+\n+        if (numThreads <= 0) {\n+            throw new IllegalArgumentException(\"Number of threads may not be less than or equal to zero.\");\n+        } else if (multicastAddress == null) {\n+            throw new IllegalArgumentException(\"Multicast address may not be null.\");\n+        } else if (multicastAddress.getAddress().isMulticastAddress() == false) {\n+            throw new IllegalArgumentException(\"Multicast group must be a Class D address.\");\n+        } else if (configuration == null) {\n+            throw new IllegalArgumentException(\"Multicast configuration may not be null.\");\n+        }\n+\n+        this.numThreads = numThreads;\n+        this.multicastAddress = multicastAddress;\n+        this.configuration = configuration;\n+    }\n+\n+    /**\n+     * Implements the action to perform when a new datagram is received. This\n+     * class must not close the multicast socket.\n+     *\n+     * @param multicastSocket\n+     * @param packet the datagram socket\n+     */\n+    public abstract void dispatchRequest(final MulticastSocket multicastSocket, final DatagramPacket packet);\n+\n+    public void start() throws IOException {\n+\n+        if (isRunning()) {\n+            return;\n+        }\n+\n+        multicastSocket = MulticastUtils.createMulticastSocket(multicastAddress.getPort(), configuration);\n+        multicastSocket.joinGroup(multicastAddress.getAddress());\n+\n+        executorService = Executors.newFixedThreadPool(numThreads);\n+\n+        final ExecutorService runnableExecServiceRef = executorService;\n+        final MulticastSocket runnableMulticastSocketRef = multicastSocket;\n+\n+        new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                while (runnableExecServiceRef.isShutdown() == false) {\n+                    try {\n+                        final byte[] buf = new byte[maxPacketSizeBytes];\n+                        final DatagramPacket packet = new DatagramPacket(buf, maxPacketSizeBytes);\n+                        runnableMulticastSocketRef.receive(packet);\n+                        runnableExecServiceRef.execute(new Runnable() {\n+                            @Override\n+                            public void run() {\n+                                dispatchRequest(multicastSocket, packet);\n+                            }\n+                        });\n+                    } catch (final SocketException | SocketTimeoutException ste) {\n+                        /* ignore so that we can accept connections in approximately a non-blocking fashion */\n+                    } catch (final Exception e) {\n+                        logger.warn(\"Cluster protocol receiver encountered exception: \" + e, e);\n+                    }\n+                }\n+            }\n+        }).start();\n+    }\n+\n+    public boolean isRunning() {\n+        return (executorService != null && executorService.isShutdown() == false);\n+    }\n+\n+    public void stop() throws IOException {\n+\n+        if (isRunning() == false) {\n+            return;\n+        }\n+\n+        // shutdown executor service\n+        try {\n+            if (getShutdownListenerSeconds() <= 0) {\n+                executorService.shutdownNow();\n+            } else {\n+                executorService.shutdown();\n+            }\n+            executorService.awaitTermination(getShutdownListenerSeconds(), TimeUnit.SECONDS);\n+        } catch (final InterruptedException ex) {\n+            Thread.currentThread().interrupt();\n+        } finally {\n+            if (executorService.isTerminated()) {\n+                logger.info(\"Multicast Listener has been terminated successfully.\");\n+            } else {\n+                logger.warn(\"Multicast Listener has not terminated properly.  There exists an uninterruptable thread that will take an indeterminate amount of time to stop.\");\n+            }\n+        }\n+\n+        // shutdown server socket\n+        if (multicastSocket.isClosed() == false) {\n+            multicastSocket.leaveGroup(multicastAddress.getAddress());\n+            multicastSocket.close();\n+        }\n+\n+    }\n+\n+    public int getShutdownListenerSeconds() {\n+        return shutdownListenerSeconds;\n+    }\n+\n+    public void setShutdownListenerSeconds(final int shutdownListenerSeconds) {\n+        this.shutdownListenerSeconds = shutdownListenerSeconds;\n+    }\n+\n+    public int getMaxPacketSizeBytes() {\n+        return maxPacketSizeBytes;\n+    }\n+\n+    public void setMaxPacketSizeBytes(int maxPacketSizeBytes) {\n+        if (maxPacketSizeBytes <= 0) {\n+            throw new IllegalArgumentException(\"Max packet size must be greater than zero bytes.\");\n+        }\n+        this.maxPacketSizeBytes = maxPacketSizeBytes;\n+    }\n+\n+    public MulticastConfiguration getConfiguration() {\n+        return configuration;\n+    }\n+\n+    public InetSocketAddress getMulticastAddress() {\n+        return multicastAddress;\n+    }\n+\n+    public int getNumThreads() {\n+        return numThreads;\n+    }\n+\n+}"
        },
        {
            "sha": "c254c117e0d1274189101b98521e8554d29c852e",
            "filename": "commons/nifi-socket-utils/src/main/java/org/apache/nifi/io/socket/multicast/MulticastServiceDiscovery.java",
            "status": "added",
            "additions": 34,
            "deletions": 0,
            "changes": 34,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FMulticastServiceDiscovery.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FMulticastServiceDiscovery.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FMulticastServiceDiscovery.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.socket.multicast;\n+\n+import java.net.InetSocketAddress;\n+\n+/**\n+ * Defines the interface for discovering services based on name. Services are\n+ * expected to be exposed via socket address and port.\n+ *\n+ * @author unattributed\n+ */\n+public interface MulticastServiceDiscovery extends ServiceDiscovery {\n+\n+    /**\n+     * @return the multicast address\n+     */\n+    InetSocketAddress getMulticastAddress();\n+\n+}"
        },
        {
            "sha": "a3cff9b451ddc216b61f016df207016d56fd311b",
            "filename": "commons/nifi-socket-utils/src/main/java/org/apache/nifi/io/socket/multicast/MulticastServicesBroadcaster.java",
            "status": "added",
            "additions": 33,
            "deletions": 0,
            "changes": 33,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FMulticastServicesBroadcaster.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FMulticastServicesBroadcaster.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FMulticastServicesBroadcaster.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.socket.multicast;\n+\n+import java.net.InetSocketAddress;\n+\n+/**\n+ * Defines the interface for broadcasting a service via multicast.\n+ *\n+ * @author unattributed\n+ */\n+public interface MulticastServicesBroadcaster extends ServicesBroadcaster {\n+\n+    /**\n+     * @return the multicast address\n+     */\n+    InetSocketAddress getMulticastAddress();\n+\n+}"
        },
        {
            "sha": "dad117331c791ba6698c76a6f24f02c2c7847c45",
            "filename": "commons/nifi-socket-utils/src/main/java/org/apache/nifi/io/socket/multicast/MulticastTimeToLive.java",
            "status": "added",
            "additions": 50,
            "deletions": 0,
            "changes": 50,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FMulticastTimeToLive.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FMulticastTimeToLive.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FMulticastTimeToLive.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.socket.multicast;\n+\n+/**\n+ * @author unattributed\n+ */\n+public enum MulticastTimeToLive {\n+\n+    SAME_HOST(0),\n+    SAME_SUBNET(1),\n+    SAME_SITE(32),\n+    SAME_REGION(64),\n+    SAME_CONTINENT(128),\n+    UNRESTRICTED(255);\n+\n+    private final int ttl;\n+\n+    MulticastTimeToLive(final int ttl) {\n+        this.ttl = ttl;\n+    }\n+\n+    public int getTtl() {\n+        return ttl;\n+    }\n+\n+    public MulticastTimeToLive valueOfByTtl(final int ttl) {\n+        for (final MulticastTimeToLive value : values()) {\n+            if (value.getTtl() == ttl) {\n+                return value;\n+            }\n+        }\n+        return null;\n+    }\n+\n+}"
        },
        {
            "sha": "8a8b7c034cf3a278b0a10f6d37f52bccbffcab17",
            "filename": "commons/nifi-socket-utils/src/main/java/org/apache/nifi/io/socket/multicast/MulticastUtils.java",
            "status": "added",
            "additions": 109,
            "deletions": 0,
            "changes": 109,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FMulticastUtils.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FMulticastUtils.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FMulticastUtils.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.socket.multicast;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.MulticastSocket;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author unattributed\n+ */\n+public final class MulticastUtils {\n+\n+    private static final Logger logger = new org.apache.nifi.logging.NiFiLog(LoggerFactory.getLogger(MulticastUtils.class));\n+\n+    public static MulticastSocket createMulticastSocket(final MulticastConfiguration config) throws IOException {\n+        return createMulticastSocket(0, config);\n+    }\n+\n+    public static MulticastSocket createMulticastSocket(final int port, final MulticastConfiguration config) throws IOException {\n+        if (config == null) {\n+            throw new IllegalArgumentException(\"Configuration may not be null.\");\n+        }\n+\n+        final MulticastSocket socket;\n+        if (port <= 0) {\n+            socket = new MulticastSocket();\n+        } else {\n+            socket = new MulticastSocket(port);\n+        }\n+        socket.setTimeToLive(config.getTtl().getTtl());\n+\n+        if (config.getSocketTimeout() != null) {\n+            socket.setSoTimeout(config.getSocketTimeout());\n+        }\n+\n+        if (config.getReuseAddress() != null) {\n+            socket.setReuseAddress(config.getReuseAddress());\n+        }\n+\n+        if (config.getReceiveBufferSize() != null) {\n+            socket.setReceiveBufferSize(config.getReceiveBufferSize());\n+        }\n+\n+        if (config.getSendBufferSize() != null) {\n+            socket.setSendBufferSize(config.getSendBufferSize());\n+        }\n+\n+        if (config.getTrafficClass() != null) {\n+            socket.setTrafficClass(config.getTrafficClass());\n+        }\n+\n+        if (config.getLoopbackMode() != null) {\n+            socket.setLoopbackMode(config.getLoopbackMode());\n+        }\n+\n+        return socket;\n+    }\n+\n+    public static void closeQuietly(final MulticastSocket socket) {\n+\n+        if (socket == null) {\n+            return;\n+        }\n+\n+        try {\n+            socket.close();\n+        } catch (final Exception ex) {\n+            logger.debug(\"Failed to close multicast socket due to: \" + ex, ex);\n+        }\n+\n+    }\n+\n+    public static void closeQuietly(final MulticastSocket socket, final InetAddress groupAddress) {\n+\n+        if (socket == null) {\n+            return;\n+        }\n+\n+        try {\n+            socket.leaveGroup(groupAddress);\n+        } catch (final Exception ex) {\n+            logger.debug(\"Failed to leave multicast group due to: \" + ex, ex);\n+        }\n+\n+        try {\n+            socket.close();\n+        } catch (final Exception ex) {\n+            logger.debug(\"Failed to close multicast socket due to: \" + ex, ex);\n+        }\n+\n+    }\n+}"
        },
        {
            "sha": "173146ecffdb6dc1f26c20430c8c5e06eb24e926",
            "filename": "commons/nifi-socket-utils/src/main/java/org/apache/nifi/io/socket/multicast/ServiceDiscovery.java",
            "status": "added",
            "additions": 31,
            "deletions": 0,
            "changes": 31,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FServiceDiscovery.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FServiceDiscovery.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FServiceDiscovery.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.socket.multicast;\n+\n+/**\n+ * Defines a generic interface for discovering services.\n+ *\n+ * @author unattributed\n+ */\n+public interface ServiceDiscovery {\n+\n+    /**\n+     * @return the discovered service\n+     */\n+    DiscoverableService getService();\n+\n+}"
        },
        {
            "sha": "86260d888249426fca649016018db648fa5515fe",
            "filename": "commons/nifi-socket-utils/src/main/java/org/apache/nifi/io/socket/multicast/ServicesBroadcaster.java",
            "status": "added",
            "additions": 56,
            "deletions": 0,
            "changes": 56,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FServicesBroadcaster.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FServicesBroadcaster.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fsocket%2Fmulticast%2FServicesBroadcaster.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.socket.multicast;\n+\n+import java.util.Set;\n+\n+/**\n+ * Defines the interface for broadcasting a collection of services for client\n+ * discovery.\n+ *\n+ * @author unattributed\n+ */\n+public interface ServicesBroadcaster {\n+\n+    /**\n+     * @return the delay in milliseconds to wait between successive broadcasts\n+     */\n+    int getBroadcastDelayMs();\n+\n+    /**\n+     * @return the broadcasted services\n+     */\n+    Set<DiscoverableService> getServices();\n+\n+    /**\n+     * Adds the given service to the set of broadcasted services.\n+     *\n+     * @param service a service\n+     * @return true if the service was added to the set; false a service with\n+     * the given service name already exists in the set.\n+     */\n+    boolean addService(DiscoverableService service);\n+\n+    /**\n+     * Removes the service with the given service name from the set.\n+     *\n+     * @param serviceName a service name\n+     * @return true if the service was removed; false otherwise\n+     */\n+    boolean removeService(String serviceName);\n+\n+}"
        },
        {
            "sha": "b5240c948b13ad2071c4900731bc1abff56fd48f",
            "filename": "commons/nifi-socket-utils/src/test/java/org/apache/nifi/io/nio/example/ServerMain.java",
            "status": "added",
            "additions": 141,
            "deletions": 0,
            "changes": 141,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2Fexample%2FServerMain.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2Fexample%2FServerMain.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2Fexample%2FServerMain.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.nio.example;\n+\n+import java.io.IOException;\n+import java.util.Calendar;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.nifi.io.nio.BufferPool;\n+import org.apache.nifi.io.nio.ChannelListener;\n+import org.apache.nifi.io.nio.consumer.StreamConsumer;\n+import org.apache.nifi.io.nio.consumer.StreamConsumerFactory;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * @author none\n+ */\n+public final class ServerMain {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ServerMain.class);\n+\n+    public static void main(final String[] args) throws IOException {\n+        System.setProperty(\"org.slf4j.simpleLogger.defaultLogLevel\", \"info\");\n+        System.setProperty(\"org.slf4j.simpleLogger.log.nifi.io.nio\", \"debug\");\n+\n+        final ScheduledExecutorService executor = Executors.newScheduledThreadPool(10);\n+        final Map<StreamConsumer, ScheduledFuture<?>> consumerMap = new ConcurrentHashMap<>();\n+        final BufferPool bufferPool = new BufferPool(10, 5 << 20, false, 40.0);\n+        ChannelListener listener = null;\n+        try {\n+            executor.scheduleWithFixedDelay(bufferPool, 0L, 5L, TimeUnit.SECONDS);\n+            listener = new ChannelListener(5, new ExampleStreamConsumerFactory(executor, consumerMap), bufferPool, 5, TimeUnit.MILLISECONDS);\n+            listener.setChannelReaderSchedulingPeriod(50L, TimeUnit.MILLISECONDS);\n+            listener.addDatagramChannel(null, 20000, 32 << 20);\n+            LOGGER.info(\"Listening for UDP data on port 20000\");\n+            listener.addServerSocket(null, 20001, 64 << 20);\n+            LOGGER.info(\"listening for TCP connections on port 20001\");\n+            listener.addServerSocket(null, 20002, 64 << 20);\n+            LOGGER.info(\"listening for TCP connections on port 20002\");\n+            final Calendar endTime = Calendar.getInstance();\n+            endTime.add(Calendar.MINUTE, 30);\n+            while (true) {\n+                processAllConsumers(consumerMap);\n+                if (endTime.before(Calendar.getInstance())) {\n+                    break; // time to shut down\n+                }\n+            }\n+        } finally {\n+            if (listener != null) {\n+                LOGGER.info(\"Shutting down server....\");\n+                listener.shutdown(1L, TimeUnit.SECONDS);\n+                LOGGER.info(\"Consumer map size = \" + consumerMap.size());\n+                while (consumerMap.size() > 0) {\n+                    processAllConsumers(consumerMap);\n+                }\n+                LOGGER.info(\"Consumer map size = \" + consumerMap.size());\n+            }\n+            executor.shutdown();\n+        }\n+    }\n+\n+    private static void processAllConsumers(final Map<StreamConsumer, ScheduledFuture<?>> consumerMap) {\n+        final Set<StreamConsumer> deadConsumers = new HashSet<>();\n+        for (final Map.Entry<StreamConsumer, ScheduledFuture<?>> entry : consumerMap.entrySet()) {\n+            if (entry.getKey().isConsumerFinished()) {\n+                entry.getValue().cancel(true);\n+                deadConsumers.add(entry.getKey());\n+            }\n+        }\n+        for (final StreamConsumer consumer : deadConsumers) {\n+            LOGGER.debug(\"removing consumer \" + consumer);\n+            consumerMap.remove(consumer);\n+        }\n+    }\n+\n+    public static final class ConsumerRunner implements Runnable {\n+\n+        private final StreamConsumer consumer;\n+\n+        public ConsumerRunner(final StreamConsumer consumer) {\n+            this.consumer = consumer;\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (consumer.isConsumerFinished()) {\n+                return;\n+            }\n+            try {\n+                consumer.process();\n+            } catch (IOException ex) {\n+                LOGGER.error(\"\", ex);\n+            }\n+        }\n+    }\n+\n+    public static final class ExampleStreamConsumerFactory implements StreamConsumerFactory {\n+\n+        final ScheduledExecutorService executor;\n+        final Map<StreamConsumer, ScheduledFuture<?>> consumerMap;\n+\n+        public ExampleStreamConsumerFactory(final ScheduledExecutorService executor, final Map<StreamConsumer, ScheduledFuture<?>> consumerMap) {\n+            this.executor = executor;\n+            this.consumerMap = consumerMap;\n+        }\n+\n+        @Override\n+        public StreamConsumer newInstance(final String streamId) {\n+            final StreamConsumer consumer = new UselessStreamConsumer(streamId);\n+            final ScheduledFuture<?> future = executor.scheduleWithFixedDelay(new ConsumerRunner(consumer), 0L, 10L, TimeUnit.MILLISECONDS);\n+            consumerMap.put(consumer, future);\n+            LOGGER.info(\"Added consumer: \" + consumer);\n+            return consumer;\n+        }\n+    }\n+\n+}"
        },
        {
            "sha": "b3d214e8e77de656681069ce56786769bae74c58",
            "filename": "commons/nifi-socket-utils/src/test/java/org/apache/nifi/io/nio/example/TCPClient.java",
            "status": "added",
            "additions": 86,
            "deletions": 0,
            "changes": 86,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2Fexample%2FTCPClient.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2Fexample%2FTCPClient.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2Fexample%2FTCPClient.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.nio.example;\n+\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.net.SocketException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author none\n+ */\n+public class TCPClient {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(TCPClient.class);\n+\n+    public static void main(final String[] args) throws Exception {\n+        final byte[] bytes = TCPClient.makeBytes();\n+        Thread first = new Thread(new Runnable() {\n+\n+            @Override\n+            public void run() {\n+                try {\n+                    for (int i = 0; i < 10; i++) {\n+                        sendData(20001, bytes);\n+                    }\n+                } catch (Exception e) {\n+                    logger.error(\"Blew exception\", e);\n+                }\n+            }\n+        });\n+        Thread second = new Thread(new Runnable() {\n+\n+            @Override\n+            public void run() {\n+                try {\n+                    for (int i = 0; i < 10; i++) {\n+                        sendData(20002, bytes);\n+                    }\n+                } catch (Exception e) {\n+                    logger.error(\"Blew exception\", e);\n+                }\n+            }\n+        });\n+        first.start();\n+        second.start();\n+    }\n+\n+    public static byte[] makeBytes() {\n+        byte[] bytes = new byte[2 << 20];\n+        return bytes;\n+    }\n+\n+    private static void sendData(final int port, final byte[] bytes) throws SocketException, IOException, InterruptedException {\n+        long totalBytes;\n+        try (Socket sock = new Socket(\"localhost\", port)) {\n+            sock.setTcpNoDelay(true);\n+            sock.setSoTimeout(2000);\n+            totalBytes = 0L;\n+            logger.info(\"socket established \" + sock + \" to port \" + port + \" now waiting 5 seconds to send anything...\");\n+            Thread.sleep(5000L);\n+            for (int i = 0; i < 1000; i++) {\n+                sock.getOutputStream().write(bytes);\n+                totalBytes += bytes.length;\n+            }   sock.getOutputStream().flush();\n+        }\n+        logger.info(\"Total bytes sent: \" + totalBytes + \" to port \" + port);\n+    }\n+\n+}"
        },
        {
            "sha": "90f4c42015a8af47a388766ca55116a602374bea",
            "filename": "commons/nifi-socket-utils/src/test/java/org/apache/nifi/io/nio/example/UDPClient.java",
            "status": "added",
            "additions": 51,
            "deletions": 0,
            "changes": 51,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2Fexample%2FUDPClient.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2Fexample%2FUDPClient.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2Fexample%2FUDPClient.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.nio.example;\n+\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetSocketAddress;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author none\n+ */\n+public class UDPClient {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UDPClient.class);\n+\n+    public static void main(final String[] args) throws Exception {\n+        final byte[] buffer = UDPClient.makeBytes();\n+        final DatagramPacket packet = new DatagramPacket(buffer, buffer.length, new InetSocketAddress(\"localhost\", 20000));\n+        final DatagramSocket socket = new DatagramSocket();\n+        final long startTime = System.nanoTime();\n+        for (int i = 0; i < 819200; i++) { // 100 MB\n+            socket.send(packet);\n+        }\n+        final long endTime = System.nanoTime();\n+        final long durationMillis = (endTime - startTime) / 1000000;\n+        LOGGER.info(\"Sent all UDP packets without any obvious errors | duration ms= \" + durationMillis);\n+    }\n+\n+    public static byte[] makeBytes() {\n+        byte[] bytes = new byte[128];\n+        return bytes;\n+    }\n+\n+}"
        },
        {
            "sha": "9ec26e9401bc5903987ead9ba802ef3dae1f6752",
            "filename": "commons/nifi-socket-utils/src/test/java/org/apache/nifi/io/nio/example/UselessStreamConsumer.java",
            "status": "added",
            "additions": 43,
            "deletions": 0,
            "changes": 43,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2Fexample%2FUselessStreamConsumer.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2Fexample%2FUselessStreamConsumer.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fnio%2Fexample%2FUselessStreamConsumer.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.nio.example;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import org.apache.nifi.io.nio.consumer.AbstractStreamConsumer;\n+\n+/**\n+ *\n+ * @author none\n+ */\n+public class UselessStreamConsumer extends AbstractStreamConsumer {\n+\n+    public UselessStreamConsumer(final String id) {\n+        super(id);\n+    }\n+\n+    @Override\n+    protected void processBuffer(final ByteBuffer buffer) throws IOException {\n+    }\n+\n+    @Override\n+    protected void onConsumerDone() {\n+        System.err.println(\"IN consumer done\");\n+    }\n+\n+}"
        },
        {
            "sha": "8e9376901fd87e38c3a92044bfe880bf42b40c66",
            "filename": "commons/nifi-socket-utils/src/test/resources/log4j.xml",
            "status": "added",
            "additions": 36,
            "deletions": 0,
            "changes": 36,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Ftest%2Fresources%2Flog4j.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-socket-utils%2Fsrc%2Ftest%2Fresources%2Flog4j.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-socket-utils%2Fsrc%2Ftest%2Fresources%2Flog4j.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,36 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements.  See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to You under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License.  You may obtain a copy of the License at\n+      http://www.apache.org/licenses/LICENSE-2.0\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n+\n+<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\n+\n+    <!-- Appender for printing formatted log statements to the console. -->\n+    <appender name=\"console\" class=\"org.apache.log4j.ConsoleAppender\">\n+        <layout class=\"org.apache.log4j.PatternLayout\">\n+            <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %40.40c - %m%n\"/>\n+        </layout>\n+    </appender>\n+\n+    <!-- Logger for managing logging statements for nifi -->\n+    <logger name=\"nifi\">\n+        <level value=\"debug\"/>\n+    </logger>\n+\n+    <root>\n+        <level value=\"warn\"/>\n+        <appender-ref ref=\"console\"/>\n+    </root>\n+</log4j:configuration>\n\\ No newline at end of file"
        },
        {
            "sha": "ea8c4bf7f35f6f77f75d92ad8ce8349f6e81ddba",
            "filename": "commons/nifi-stream-utils/.gitignore",
            "status": "added",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2F.gitignore",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2F.gitignore",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-stream-utils%2F.gitignore?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1 @@\n+/target"
        },
        {
            "sha": "04135759b322f721d483b546b4db6b38d209e33f",
            "filename": "commons/nifi-stream-utils/pom.xml",
            "status": "added",
            "additions": 42,
            "deletions": 0,
            "changes": 42,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fpom.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-stream-utils%2Fpom.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,42 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements.  See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to You under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License.  You may obtain a copy of the License at\n+      http://www.apache.org/licenses/LICENSE-2.0\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.apache.nifi</groupId>\n+        <artifactId>nifi-parent</artifactId>\n+        <version>0.0.1-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>nifi-stream-utils</artifactId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <packaging>jar</packaging>\n+    <name>NiFi Stream Utils</name>\n+    \n+    <build>\n+        <plugins>\n+            <!-- Enforce 1.6 compliance -->\n+            <plugin>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <configuration>\n+                    <source>1.6</source>\n+                    <target>1.6</target>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+    \n+</project>"
        },
        {
            "sha": "57adb8c726c8b955b3bc4219da3f12dd1e861e7b",
            "filename": "commons/nifi-stream-utils/src/main/java/org/apache/nifi/io/BufferedInputStream.java",
            "status": "added",
            "additions": 37,
            "deletions": 0,
            "changes": 37,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FBufferedInputStream.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FBufferedInputStream.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FBufferedInputStream.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io;\n+\n+import java.io.InputStream;\n+\n+/**\n+ * This class is a slight modification of the BufferedInputStream in the java.io\n+ * package. The modification is that this implementation does not provide\n+ * synchronization on method calls, which means that this class is not suitable\n+ * for use by multiple threads. However, the absence of these synchronized\n+ * blocks results in potentially much better performance.\n+ */\n+public class BufferedInputStream extends java.io.BufferedInputStream {\n+\n+    public BufferedInputStream(final InputStream in) {\n+        super(in);\n+    }\n+\n+    public BufferedInputStream(final InputStream in, final int size) {\n+        super(in, size);\n+    }\n+}"
        },
        {
            "sha": "56caf655a8a6b2bfd8893afceabb501218a35f51",
            "filename": "commons/nifi-stream-utils/src/main/java/org/apache/nifi/io/BufferedOutputStream.java",
            "status": "added",
            "additions": 140,
            "deletions": 0,
            "changes": 140,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FBufferedOutputStream.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FBufferedOutputStream.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FBufferedOutputStream.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io;\n+\n+import java.io.FilterOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+/**\n+ * This class is a slight modification of the\n+ * {@link java.io.BufferedOutputStream} class. This implementation differs in\n+ * that it does not mark methods as synchronized. This means that this class is\n+ * not suitable for writing by multiple concurrent threads. However, the removal\n+ * of the synchronized keyword results in potentially much better performance.\n+ */\n+public class BufferedOutputStream extends FilterOutputStream {\n+\n+    /**\n+     * The internal buffer where data is stored.\n+     */\n+    protected byte buf[];\n+\n+    /**\n+     * The number of valid bytes in the buffer. This value is always in the\n+     * range <tt>0</tt> through <tt>buf.length</tt>; elements\n+     * <tt>buf[0]</tt> through <tt>buf[count-1]</tt> contain valid byte data.\n+     */\n+    protected int count;\n+\n+    /**\n+     * Creates a new buffered output stream to write data to the specified\n+     * underlying output stream.\n+     *\n+     * @param out the underlying output stream.\n+     */\n+    public BufferedOutputStream(OutputStream out) {\n+        this(out, 8192);\n+    }\n+\n+    /**\n+     * Creates a new buffered output stream to write data to the specified\n+     * underlying output stream with the specified buffer size.\n+     *\n+     * @param out the underlying output stream.\n+     * @param size the buffer size.\n+     * @exception IllegalArgumentException if size &lt;= 0.\n+     */\n+    public BufferedOutputStream(OutputStream out, int size) {\n+        super(out);\n+        if (size <= 0) {\n+            throw new IllegalArgumentException(\"Buffer size <= 0\");\n+        }\n+        buf = new byte[size];\n+    }\n+\n+    /**\n+     * Flush the internal buffer\n+     */\n+    private void flushBuffer() throws IOException {\n+        if (count > 0) {\n+            out.write(buf, 0, count);\n+            count = 0;\n+        }\n+    }\n+\n+    /**\n+     * Writes the specified byte to this buffered output stream.\n+     *\n+     * @param b the byte to be written.\n+     * @exception IOException if an I/O error occurs.\n+     */\n+    @Override\n+    public void write(int b) throws IOException {\n+        if (count >= buf.length) {\n+            flushBuffer();\n+        }\n+        buf[count++] = (byte) b;\n+    }\n+\n+    /**\n+     * Writes <code>len</code> bytes from the specified byte array starting at\n+     * offset <code>off</code> to this buffered output stream.\n+     *\n+     * <p>\n+     * Ordinarily this method stores bytes from the given array into this\n+     * stream's buffer, flushing the buffer to the underlying output stream as\n+     * needed. If the requested length is at least as large as this stream's\n+     * buffer, however, then this method will flush the buffer and write the\n+     * bytes directly to the underlying output stream. Thus redundant\n+     * <code>BufferedOutputStream</code>s will not copy data unnecessarily.\n+     *\n+     * @param b the data.\n+     * @param off the start offset in the data.\n+     * @param len the number of bytes to write.\n+     * @exception IOException if an I/O error occurs.\n+     */\n+    @Override\n+    public void write(byte b[], int off, int len) throws IOException {\n+        if (len >= buf.length) {\n+            /* If the request length exceeds the size of the output buffer,\n+             flush the output buffer and then write the data directly.\n+             In this way buffered streams will cascade harmlessly. */\n+            flushBuffer();\n+            out.write(b, off, len);\n+            return;\n+        }\n+        if (len >= buf.length - count) {\n+            flushBuffer();\n+        }\n+        System.arraycopy(b, off, buf, count, len);\n+        count += len;\n+    }\n+\n+    /**\n+     * Flushes this buffered output stream. This forces any buffered output\n+     * bytes to be written out to the underlying output stream.\n+     *\n+     * @exception IOException if an I/O error occurs.\n+     * @see java.io.FilterOutputStream#out\n+     */\n+    @Override\n+    public void flush() throws IOException {\n+        flushBuffer();\n+        out.flush();\n+    }\n+}"
        },
        {
            "sha": "9defab4281e56a261d1348896fb423f1a6927496",
            "filename": "commons/nifi-stream-utils/src/main/java/org/apache/nifi/io/ByteArrayInputStream.java",
            "status": "added",
            "additions": 250,
            "deletions": 0,
            "changes": 250,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FByteArrayInputStream.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FByteArrayInputStream.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FByteArrayInputStream.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,250 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io;\n+\n+import java.io.InputStream;\n+\n+/**\n+ * This class performs the same function as java.io.ByteArrayInputStream but\n+ * does not mark its methods as synchronized\n+ */\n+public class ByteArrayInputStream extends InputStream {\n+\n+    /**\n+     * An array of bytes that was provided by the creator of the stream.\n+     * Elements <code>buf[0]</code> through <code>buf[count-1]</code> are the\n+     * only bytes that can ever be read from the stream; element\n+     * <code>buf[pos]</code> is the next byte to be read.\n+     */\n+    protected byte buf[];\n+\n+    /**\n+     * The index of the next character to read from the input stream buffer.\n+     * This value should always be nonnegative and not larger than the value of\n+     * <code>count</code>. The next byte to be read from the input stream buffer\n+     * will be <code>buf[pos]</code>.\n+     */\n+    protected int pos;\n+\n+    /**\n+     * The currently marked position in the stream. ByteArrayInputStream objects\n+     * are marked at position zero by default when constructed. They may be\n+     * marked at another position within the buffer by the <code>mark()</code>\n+     * method. The current buffer position is set to this point by the\n+     * <code>reset()</code> method.\n+     * <p>\n+     * If no mark has been set, then the value of mark is the offset passed to\n+     * the constructor (or 0 if the offset was not supplied).\n+     *\n+     * @since JDK1.1\n+     */\n+    protected int mark = 0;\n+\n+    /**\n+     * The index one greater than the last valid character in the input stream\n+     * buffer. This value should always be nonnegative and not larger than the\n+     * length of <code>buf</code>. It is one greater than the position of the\n+     * last byte within <code>buf</code> that can ever be read from the input\n+     * stream buffer.\n+     */\n+    protected int count;\n+\n+    /**\n+     * Creates a <code>ByteArrayInputStream</code> so that it uses\n+     * <code>buf</code> as its buffer array. The buffer array is not copied. The\n+     * initial value of <code>pos</code> is <code>0</code> and the initial value\n+     * of  <code>count</code> is the length of <code>buf</code>.\n+     *\n+     * @param buf the input buffer.\n+     */\n+    public ByteArrayInputStream(byte buf[]) {\n+        this.buf = buf;\n+        this.pos = 0;\n+        this.count = buf.length;\n+    }\n+\n+    /**\n+     * Creates <code>ByteArrayInputStream</code> that uses <code>buf</code> as\n+     * its buffer array. The initial value of <code>pos</code> is\n+     * <code>offset</code> and the initial value of <code>count</code> is the\n+     * minimum of <code>offset+length</code> and <code>buf.length</code>. The\n+     * buffer array is not copied. The buffer's mark is set to the specified\n+     * offset.\n+     *\n+     * @param buf the input buffer.\n+     * @param offset the offset in the buffer of the first byte to read.\n+     * @param length the maximum number of bytes to read from the buffer.\n+     */\n+    public ByteArrayInputStream(byte buf[], int offset, int length) {\n+        this.buf = buf;\n+        this.pos = offset;\n+        this.count = Math.min(offset + length, buf.length);\n+        this.mark = offset;\n+    }\n+\n+    /**\n+     * Reads the next byte of data from this input stream. The value byte is\n+     * returned as an <code>int</code> in the range <code>0</code> to\n+     * <code>255</code>. If no byte is available because the end of the stream\n+     * has been reached, the value <code>-1</code> is returned.\n+     * <p>\n+     * This <code>read</code> method cannot block.\n+     *\n+     * @return the next byte of data, or <code>-1</code> if the end of the\n+     * stream has been reached.\n+     */\n+    @Override\n+    public int read() {\n+        return (pos < count) ? (buf[pos++] & 0xff) : -1;\n+    }\n+\n+    /**\n+     * Reads up to <code>len</code> bytes of data into an array of bytes from\n+     * this input stream. If <code>pos</code> equals <code>count</code>, then\n+     * <code>-1</code> is returned to indicate end of file. Otherwise, the\n+     * number <code>k</code> of bytes read is equal to the smaller of\n+     * <code>len</code> and <code>count-pos</code>. If <code>k</code> is\n+     * positive, then bytes <code>buf[pos]</code> through\n+     * <code>buf[pos+k-1]</code> are copied into <code>b[off]</code> through\n+     * <code>b[off+k-1]</code> in the manner performed by\n+     * <code>System.arraycopy</code>. The value <code>k</code> is added into\n+     * <code>pos</code> and <code>k</code> is returned.\n+     * <p>\n+     * This <code>read</code> method cannot block.\n+     *\n+     * @param b the buffer into which the data is read.\n+     * @param off the start offset in the destination array <code>b</code>\n+     * @param len the maximum number of bytes read.\n+     * @return the total number of bytes read into the buffer, or\n+     * <code>-1</code> if there is no more data because the end of the stream\n+     * has been reached.\n+     * @exception NullPointerException If <code>b</code> is <code>null</code>.\n+     * @exception IndexOutOfBoundsException If <code>off</code> is negative,\n+     * <code>len</code> is negative, or <code>len</code> is greater than\n+     * <code>b.length - off</code>\n+     */\n+    @Override\n+    public int read(byte b[], int off, int len) {\n+        if (b == null) {\n+            throw new NullPointerException();\n+        } else if (off < 0 || len < 0 || len > b.length - off) {\n+            throw new IndexOutOfBoundsException();\n+        }\n+\n+        if (pos >= count) {\n+            return -1;\n+        }\n+\n+        int avail = count - pos;\n+        if (len > avail) {\n+            len = avail;\n+        }\n+        if (len <= 0) {\n+            return 0;\n+        }\n+        System.arraycopy(buf, pos, b, off, len);\n+        pos += len;\n+        return len;\n+    }\n+\n+    /**\n+     * Skips <code>n</code> bytes of input from this input stream. Fewer bytes\n+     * might be skipped if the end of the input stream is reached. The actual\n+     * number <code>k</code> of bytes to be skipped is equal to the smaller of\n+     * <code>n</code> and  <code>count-pos</code>. The value <code>k</code> is\n+     * added into <code>pos</code> and <code>k</code> is returned.\n+     *\n+     * @param n the number of bytes to be skipped.\n+     * @return the actual number of bytes skipped.\n+     */\n+    @Override\n+    public long skip(long n) {\n+        long k = count - pos;\n+        if (n < k) {\n+            k = n < 0 ? 0 : n;\n+        }\n+\n+        pos += k;\n+        return k;\n+    }\n+\n+    /**\n+     * Returns the number of remaining bytes that can be read (or skipped over)\n+     * from this input stream.\n+     * <p>\n+     * The value returned is <code>count&nbsp;- pos</code>, which is the number\n+     * of bytes remaining to be read from the input buffer.\n+     *\n+     * @return the number of remaining bytes that can be read (or skipped over)\n+     * from this input stream without blocking.\n+     */\n+    @Override\n+    public int available() {\n+        return count - pos;\n+    }\n+\n+    /**\n+     * Tests if this <code>InputStream</code> supports mark/reset. The\n+     * <code>markSupported</code> method of <code>ByteArrayInputStream</code>\n+     * always returns <code>true</code>.\n+     *\n+     * @since JDK1.1\n+     */\n+    @Override\n+    public boolean markSupported() {\n+        return true;\n+    }\n+\n+    /**\n+     * Set the current marked position in the stream. ByteArrayInputStream\n+     * objects are marked at position zero by default when constructed. They may\n+     * be marked at another position within the buffer by this method.\n+     * <p>\n+     * If no mark has been set, then the value of the mark is the offset passed\n+     * to the constructor (or 0 if the offset was not supplied).\n+     *\n+     * <p>\n+     * Note: The <code>readAheadLimit</code> for this class has no meaning.\n+     *\n+     * @since JDK1.1\n+     */\n+    @Override\n+    public void mark(int readAheadLimit) {\n+        mark = pos;\n+    }\n+\n+    /**\n+     * Resets the buffer to the marked position. The marked position is 0 unless\n+     * another position was marked or an offset was specified in the\n+     * constructor.\n+     */\n+    @Override\n+    public void reset() {\n+        pos = mark;\n+    }\n+\n+    /**\n+     * Closing a <tt>ByteArrayInputStream</tt> has no effect. The methods in\n+     * this class can be called after the stream has been closed without\n+     * generating an <tt>IOException</tt>.\n+     * <p>\n+     */\n+    @Override\n+    public void close() {\n+    }\n+\n+}"
        },
        {
            "sha": "b504c235f56eca360dc581a309eb368ba151732a",
            "filename": "commons/nifi-stream-utils/src/main/java/org/apache/nifi/io/ByteArrayOutputStream.java",
            "status": "added",
            "additions": 250,
            "deletions": 0,
            "changes": 250,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FByteArrayOutputStream.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FByteArrayOutputStream.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FByteArrayOutputStream.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,250 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.UnsupportedEncodingException;\n+import java.util.Arrays;\n+\n+/**\n+ * This class provides a more efficient implementation of the\n+ * java.io.ByteArrayOutputStream. The efficiency is gained in two ways:\n+ * <ul>\n+ * <li>The write methods are not synchronized</li>\n+ * <li>The class provides {@link #getUnderlyingBuffer()} and\n+ * {@link #getBufferLength()}, which can be used to access the underlying byte\n+ * array directly, rather than the System.arraycopy that {@link #toByteArray()}\n+ * uses\n+ * </ul>\n+ *\n+ */\n+public class ByteArrayOutputStream extends OutputStream {\n+\n+    /**\n+     * The buffer where data is stored.\n+     */\n+    protected byte buf[];\n+\n+    /**\n+     * The number of valid bytes in the buffer.\n+     */\n+    protected int count;\n+\n+    /**\n+     * Creates a new byte array output stream. The buffer capacity is initially\n+     * 32 bytes, though its size increases if necessary.\n+     */\n+    public ByteArrayOutputStream() {\n+        this(32);\n+    }\n+\n+    /**\n+     * Creates a new byte array output stream, with a buffer capacity of the\n+     * specified size, in bytes.\n+     *\n+     * @param size the initial size.\n+     * @exception IllegalArgumentException if size is negative.\n+     */\n+    public ByteArrayOutputStream(int size) {\n+        if (size < 0) {\n+            throw new IllegalArgumentException(\"Negative initial size: \"\n+                    + size);\n+        }\n+        buf = new byte[size];\n+    }\n+\n+    /**\n+     * Increases the capacity if necessary to ensure that it can hold at least\n+     * the number of elements specified by the minimum capacity argument.\n+     *\n+     * @param minCapacity the desired minimum capacity\n+     * @throws OutOfMemoryError if {@code minCapacity < 0}. This is interpreted\n+     * as a request for the unsatisfiably large capacity\n+     * {@code (long) Integer.MAX_VALUE + (minCapacity - Integer.MAX_VALUE)}.\n+     */\n+    private void ensureCapacity(int minCapacity) {\n+        // overflow-conscious code\n+        if (minCapacity - buf.length > 0) {\n+            grow(minCapacity);\n+        }\n+    }\n+\n+    /**\n+     * Increases the capacity to ensure that it can hold at least the number of\n+     * elements specified by the minimum capacity argument.\n+     *\n+     * @param minCapacity the desired minimum capacity\n+     */\n+    private void grow(int minCapacity) {\n+        // overflow-conscious code\n+        int oldCapacity = buf.length;\n+        int newCapacity = oldCapacity << 1;\n+        if (newCapacity - minCapacity < 0) {\n+            newCapacity = minCapacity;\n+        }\n+        if (newCapacity < 0) {\n+            if (minCapacity < 0) // overflow\n+            {\n+                throw new OutOfMemoryError();\n+            }\n+            newCapacity = Integer.MAX_VALUE;\n+        }\n+        buf = Arrays.copyOf(buf, newCapacity);\n+    }\n+\n+    /**\n+     * Writes the specified byte to this byte array output stream.\n+     *\n+     * @param b the byte to be written.\n+     */\n+    @Override\n+    public void write(int b) {\n+        ensureCapacity(count + 1);\n+        buf[count] = (byte) b;\n+        count += 1;\n+    }\n+\n+    /**\n+     * Writes <code>len</code> bytes from the specified byte array starting at\n+     * offset <code>off</code> to this byte array output stream.\n+     *\n+     * @param b the data.\n+     * @param off the start offset in the data.\n+     * @param len the number of bytes to write.\n+     */\n+    @Override\n+    public void write(byte b[], int off, int len) {\n+        if ((off < 0) || (off > b.length) || (len < 0)\n+                || ((off + len) - b.length > 0)) {\n+            throw new IndexOutOfBoundsException();\n+        }\n+        ensureCapacity(count + len);\n+        System.arraycopy(b, off, buf, count, len);\n+        count += len;\n+    }\n+\n+    /**\n+     * Writes the complete contents of this byte array output stream to the\n+     * specified output stream argument, as if by calling the output stream's\n+     * write method using <code>out.write(buf, 0, count)</code>.\n+     *\n+     * @param out the output stream to which to write the data.\n+     * @exception IOException if an I/O error occurs.\n+     */\n+    public void writeTo(OutputStream out) throws IOException {\n+        out.write(buf, 0, count);\n+    }\n+\n+    /**\n+     * Resets the <code>count</code> field of this byte array output stream to\n+     * zero, so that all currently accumulated output in the output stream is\n+     * discarded. The output stream can be used again, reusing the already\n+     * allocated buffer space.\n+     *\n+     * @see java.io.ByteArrayInputStream#count\n+     */\n+    public void reset() {\n+        count = 0;\n+    }\n+\n+    /**\n+     * Creates a newly allocated byte array. Its size is the current size of\n+     * this output stream and the valid contents of the buffer have been copied\n+     * into it.\n+     *\n+     * @return the current contents of this output stream, as a byte array.\n+     * @see java.io.ByteArrayOutputStream#size()\n+     */\n+    public byte toByteArray   () \n+        [] {\n+        return Arrays.copyOf(buf, count);\n+    }\n+\n+    /**\n+     * Returns the current size of the buffer.\n+     *\n+     * @return the value of the <code>count</code> field, which is the number of\n+     * valid bytes in this output stream.\n+     * @see java.io.ByteArrayOutputStream#count\n+     */\n+    public int size() {\n+        return count;\n+    }\n+\n+    /**\n+     * Converts the buffer's contents into a string decoding bytes using the\n+     * platform's default character set. The length of the new <tt>String</tt>\n+     * is a function of the character set, and hence may not be equal to the\n+     * size of the buffer.\n+     *\n+     * <p>\n+     * This method always replaces malformed-input and unmappable-character\n+     * sequences with the default replacement string for the platform's default\n+     * character set. The {@linkplain java.nio.charset.CharsetDecoder} class\n+     * should be used when more control over the decoding process is required.\n+     *\n+     * @return String decoded from the buffer's contents.\n+     * @since JDK1.1\n+     */\n+    @Override\n+    public String toString() {\n+        return new String(buf, 0, count);\n+    }\n+\n+    /**\n+     * Converts the buffer's contents into a string by decoding the bytes using\n+     * the specified {@link java.nio.charset.Charset charsetName}. The length of\n+     * the new <tt>String</tt> is a function of the charset, and hence may not\n+     * be equal to the length of the byte array.\n+     *\n+     * <p>\n+     * This method always replaces malformed-input and unmappable-character\n+     * sequences with this charset's default replacement string. The {@link\n+     * java.nio.charset.CharsetDecoder} class should be used when more control\n+     * over the decoding process is required.\n+     *\n+     * @param charsetName the name of a supported\n+     *              {@linkplain java.nio.charset.Charset <code>charset</code>}\n+     * @return String decoded from the buffer's contents.\n+     * @exception UnsupportedEncodingException If the named charset is not\n+     * supported\n+     * @since JDK1.1\n+     */\n+    public String toString(String charsetName) throws UnsupportedEncodingException {\n+        return new String(buf, 0, count, charsetName);\n+    }\n+\n+    /**\n+     * Closing a <tt>ByteArrayOutputStream</tt> has no effect. The methods in\n+     * this class can be called after the stream has been closed without\n+     * generating an <tt>IOException</tt>.\n+     * <p>\n+     *\n+     */\n+    @Override\n+    public void close() {\n+    }\n+\n+    public byte[] getUnderlyingBuffer() {\n+        return buf;\n+    }\n+\n+    public int getBufferLength() {\n+        return count;\n+    }\n+}"
        },
        {
            "sha": "792cc32a1029009eea79bc193cb7ea12b93654f4",
            "filename": "commons/nifi-stream-utils/src/main/java/org/apache/nifi/io/ByteCountingInputStream.java",
            "status": "added",
            "additions": 104,
            "deletions": 0,
            "changes": 104,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FByteCountingInputStream.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FByteCountingInputStream.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FByteCountingInputStream.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+public class ByteCountingInputStream extends InputStream {\n+\n+    private final InputStream in;\n+    private long bytesRead = 0L;\n+    private long bytesSkipped = 0L;\n+\n+    private long bytesSinceMark = 0L;\n+\n+    public ByteCountingInputStream(final InputStream in) {\n+        this.in = in;\n+    }\n+\n+    @Override\n+    public int read() throws IOException {\n+        final int fromSuper = in.read();\n+        if (fromSuper >= 0) {\n+            bytesRead++;\n+            bytesSinceMark++;\n+        }\n+        return fromSuper;\n+    }\n+\n+    @Override\n+    public int read(byte[] b, int off, int len) throws IOException {\n+        final int fromSuper = in.read(b, off, len);\n+        if (fromSuper >= 0) {\n+            bytesRead += fromSuper;\n+            bytesSinceMark += fromSuper;\n+        }\n+\n+        return fromSuper;\n+    }\n+\n+    @Override\n+    public int read(byte[] b) throws IOException {\n+        return read(b, 0, b.length);\n+    }\n+\n+    @Override\n+    public long skip(final long n) throws IOException {\n+        final long skipped = in.skip(n);\n+        if (skipped >= 0) {\n+            bytesSkipped += skipped;\n+            bytesSinceMark += skipped;\n+        }\n+        return skipped;\n+    }\n+\n+    public long getBytesRead() {\n+        return bytesRead;\n+    }\n+\n+    public long getBytesSkipped() {\n+        return bytesSkipped;\n+    }\n+\n+    public long getBytesConsumed() {\n+        return getBytesRead() + getBytesSkipped();\n+    }\n+\n+    @Override\n+    public void mark(final int readlimit) {\n+        in.mark(readlimit);\n+\n+        bytesSinceMark = 0L;\n+    }\n+\n+    @Override\n+    public boolean markSupported() {\n+        return in.markSupported();\n+    }\n+\n+    @Override\n+    public void reset() throws IOException {\n+        in.reset();\n+        bytesRead -= bytesSinceMark;\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        in.close();\n+    }\n+}"
        },
        {
            "sha": "c7b77ffb59a5d2ba69907099168d0555e6ea6a66",
            "filename": "commons/nifi-stream-utils/src/main/java/org/apache/nifi/io/ByteCountingOutputStream.java",
            "status": "added",
            "additions": 63,
            "deletions": 0,
            "changes": 63,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FByteCountingOutputStream.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FByteCountingOutputStream.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FByteCountingOutputStream.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+public class ByteCountingOutputStream extends OutputStream {\n+\n+    private final OutputStream out;\n+    private long bytesWritten = 0L;\n+\n+    public ByteCountingOutputStream(final OutputStream out) {\n+        this.out = out;\n+    }\n+\n+    @Override\n+    public void write(int b) throws IOException {\n+        out.write(b);\n+        bytesWritten++;\n+    }\n+\n+    @Override\n+    public void write(byte[] b) throws IOException {\n+        write(b, 0, b.length);\n+    }\n+\n+    ;\n+    \n+    @Override\n+    public void write(byte[] b, int off, int len) throws IOException {\n+        out.write(b, off, len);\n+        bytesWritten += len;\n+    }\n+\n+    public long getBytesWritten() {\n+        return bytesWritten;\n+    }\n+\n+    @Override\n+    public void flush() throws IOException {\n+        out.flush();\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        out.close();\n+    }\n+}"
        },
        {
            "sha": "6af06d3c8795c7e6463ee3b12734872d3231436d",
            "filename": "commons/nifi-stream-utils/src/main/java/org/apache/nifi/io/DataOutputStream.java",
            "status": "added",
            "additions": 417,
            "deletions": 0,
            "changes": 417,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FDataOutputStream.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FDataOutputStream.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FDataOutputStream.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,417 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io;\n+\n+import java.io.DataOutput;\n+import java.io.FilterOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.UTFDataFormatException;\n+\n+/**\n+ * This class is different from java.io.DataOutputStream in that it does\n+ * synchronize on its methods.\n+ */\n+public class DataOutputStream extends FilterOutputStream implements DataOutput {\n+\n+    /**\n+     * The number of bytes written to the data output stream so far. If this\n+     * counter overflows, it will be wrapped to Integer.MAX_VALUE.\n+     */\n+    protected int written;\n+\n+    /**\n+     * bytearr is initialized on demand by writeUTF\n+     */\n+    private byte[] bytearr = null;\n+\n+    /**\n+     * Creates a new data output stream to write data to the specified\n+     * underlying output stream. The counter <code>written</code> is set to\n+     * zero.\n+     *\n+     * @param out the underlying output stream, to be saved for later use.\n+     * @see java.io.FilterOutputStream#out\n+     */\n+    public DataOutputStream(OutputStream out) {\n+        super(out);\n+    }\n+\n+    /**\n+     * Increases the written counter by the specified value until it reaches\n+     * Integer.MAX_VALUE.\n+     */\n+    private void incCount(int value) {\n+        int temp = written + value;\n+        if (temp < 0) {\n+            temp = Integer.MAX_VALUE;\n+        }\n+        written = temp;\n+    }\n+\n+    /**\n+     * Writes the specified byte (the low eight bits of the argument\n+     * <code>b</code>) to the underlying output stream. If no exception is\n+     * thrown, the counter <code>written</code> is incremented by\n+     * <code>1</code>.\n+     * <p>\n+     * Implements the <code>write</code> method of <code>OutputStream</code>.\n+     *\n+     * @param b the <code>byte</code> to be written.\n+     * @exception IOException if an I/O error occurs.\n+     * @see java.io.FilterOutputStream#out\n+     */\n+    @Override\n+    public void write(int b) throws IOException {\n+        out.write(b);\n+        incCount(1);\n+    }\n+\n+    /**\n+     * Writes <code>len</code> bytes from the specified byte array starting at\n+     * offset <code>off</code> to the underlying output stream. If no exception\n+     * is thrown, the counter <code>written</code> is incremented by\n+     * <code>len</code>.\n+     *\n+     * @param b the data.\n+     * @param off the start offset in the data.\n+     * @param len the number of bytes to write.\n+     * @exception IOException if an I/O error occurs.\n+     * @see java.io.FilterOutputStream#out\n+     */\n+    @Override\n+    public void write(byte b[], int off, int len) throws IOException {\n+        out.write(b, off, len);\n+        incCount(len);\n+    }\n+\n+    /**\n+     * Flushes this data output stream. This forces any buffered output bytes to\n+     * be written out to the stream.\n+     * <p>\n+     * The <code>flush</code> method of <code>DataOutputStream</code> calls the\n+     * <code>flush</code> method of its underlying output stream.\n+     *\n+     * @exception IOException if an I/O error occurs.\n+     * @see java.io.FilterOutputStream#out\n+     * @see java.io.OutputStream#flush()\n+     */\n+    @Override\n+    public void flush() throws IOException {\n+        out.flush();\n+    }\n+\n+    /**\n+     * Writes a <code>boolean</code> to the underlying output stream as a 1-byte\n+     * value. The value <code>true</code> is written out as the value\n+     * <code>(byte)1</code>; the value <code>false</code> is written out as the\n+     * value <code>(byte)0</code>. If no exception is thrown, the counter\n+     * <code>written</code> is incremented by <code>1</code>.\n+     *\n+     * @param v a <code>boolean</code> value to be written.\n+     * @exception IOException if an I/O error occurs.\n+     * @see java.io.FilterOutputStream#out\n+     */\n+    @Override\n+    public final void writeBoolean(boolean v) throws IOException {\n+        out.write(v ? 1 : 0);\n+        incCount(1);\n+    }\n+\n+    /**\n+     * Writes out a <code>byte</code> to the underlying output stream as a\n+     * 1-byte value. If no exception is thrown, the counter <code>written</code>\n+     * is incremented by <code>1</code>.\n+     *\n+     * @param v a <code>byte</code> value to be written.\n+     * @exception IOException if an I/O error occurs.\n+     * @see java.io.FilterOutputStream#out\n+     */\n+    @Override\n+    public final void writeByte(int v) throws IOException {\n+        out.write(v);\n+        incCount(1);\n+    }\n+\n+    /**\n+     * Writes a <code>short</code> to the underlying output stream as two bytes,\n+     * high byte first. If no exception is thrown, the counter\n+     * <code>written</code> is incremented by <code>2</code>.\n+     *\n+     * @param v a <code>short</code> to be written.\n+     * @exception IOException if an I/O error occurs.\n+     * @see java.io.FilterOutputStream#out\n+     */\n+    @Override\n+    public final void writeShort(int v) throws IOException {\n+        out.write((v >>> 8) & 0xFF);\n+        out.write((v) & 0xFF);\n+        incCount(2);\n+    }\n+\n+    /**\n+     * Writes a <code>char</code> to the underlying output stream as a 2-byte\n+     * value, high byte first. If no exception is thrown, the counter\n+     * <code>written</code> is incremented by <code>2</code>.\n+     *\n+     * @param v a <code>char</code> value to be written.\n+     * @exception IOException if an I/O error occurs.\n+     * @see java.io.FilterOutputStream#out\n+     */\n+    @Override\n+    public final void writeChar(int v) throws IOException {\n+        out.write((v >>> 8) & 0xFF);\n+        out.write((v) & 0xFF);\n+        incCount(2);\n+    }\n+\n+    /**\n+     * Writes an <code>int</code> to the underlying output stream as four bytes,\n+     * high byte first. If no exception is thrown, the counter\n+     * <code>written</code> is incremented by <code>4</code>.\n+     *\n+     * @param v an <code>int</code> to be written.\n+     * @exception IOException if an I/O error occurs.\n+     * @see java.io.FilterOutputStream#out\n+     */\n+    @Override\n+    public final void writeInt(int v) throws IOException {\n+        out.write((v >>> 24) & 0xFF);\n+        out.write((v >>> 16) & 0xFF);\n+        out.write((v >>> 8) & 0xFF);\n+        out.write((v) & 0xFF);\n+        incCount(4);\n+    }\n+\n+    private final byte writeBuffer[] = new byte[8];\n+\n+    /**\n+     * Writes a <code>long</code> to the underlying output stream as eight\n+     * bytes, high byte first. In no exception is thrown, the counter\n+     * <code>written</code> is incremented by <code>8</code>.\n+     *\n+     * @param v a <code>long</code> to be written.\n+     * @exception IOException if an I/O error occurs.\n+     * @see java.io.FilterOutputStream#out\n+     */\n+    @Override\n+    public final void writeLong(long v) throws IOException {\n+        writeBuffer[0] = (byte) (v >>> 56);\n+        writeBuffer[1] = (byte) (v >>> 48);\n+        writeBuffer[2] = (byte) (v >>> 40);\n+        writeBuffer[3] = (byte) (v >>> 32);\n+        writeBuffer[4] = (byte) (v >>> 24);\n+        writeBuffer[5] = (byte) (v >>> 16);\n+        writeBuffer[6] = (byte) (v >>> 8);\n+        writeBuffer[7] = (byte) (v);\n+        out.write(writeBuffer, 0, 8);\n+        incCount(8);\n+    }\n+\n+    /**\n+     * Converts the float argument to an <code>int</code> using the\n+     * <code>floatToIntBits</code> method in class <code>Float</code>, and then\n+     * writes that <code>int</code> value to the underlying output stream as a\n+     * 4-byte quantity, high byte first. If no exception is thrown, the counter\n+     * <code>written</code> is incremented by <code>4</code>.\n+     *\n+     * @param v a <code>float</code> value to be written.\n+     * @exception IOException if an I/O error occurs.\n+     * @see java.io.FilterOutputStream#out\n+     * @see java.lang.Float#floatToIntBits(float)\n+     */\n+    @Override\n+    public final void writeFloat(float v) throws IOException {\n+        writeInt(Float.floatToIntBits(v));\n+    }\n+\n+    /**\n+     * Converts the double argument to a <code>long</code> using the\n+     * <code>doubleToLongBits</code> method in class <code>Double</code>, and\n+     * then writes that <code>long</code> value to the underlying output stream\n+     * as an 8-byte quantity, high byte first. If no exception is thrown, the\n+     * counter <code>written</code> is incremented by <code>8</code>.\n+     *\n+     * @param v a <code>double</code> value to be written.\n+     * @exception IOException if an I/O error occurs.\n+     * @see java.io.FilterOutputStream#out\n+     * @see java.lang.Double#doubleToLongBits(double)\n+     */\n+    @Override\n+    public final void writeDouble(double v) throws IOException {\n+        writeLong(Double.doubleToLongBits(v));\n+    }\n+\n+    /**\n+     * Writes out the string to the underlying output stream as a sequence of\n+     * bytes. Each character in the string is written out, in sequence, by\n+     * discarding its high eight bits. If no exception is thrown, the counter\n+     * <code>written</code> is incremented by the length of <code>s</code>.\n+     *\n+     * @param s a string of bytes to be written.\n+     * @exception IOException if an I/O error occurs.\n+     * @see java.io.FilterOutputStream#out\n+     */\n+    @Override\n+    public final void writeBytes(String s) throws IOException {\n+        int len = s.length();\n+        for (int i = 0; i < len; i++) {\n+            out.write((byte) s.charAt(i));\n+        }\n+        incCount(len);\n+    }\n+\n+    /**\n+     * Writes a string to the underlying output stream as a sequence of\n+     * characters. Each character is written to the data output stream as if by\n+     * the <code>writeChar</code> method. If no exception is thrown, the counter\n+     * <code>written</code> is incremented by twice the length of\n+     * <code>s</code>.\n+     *\n+     * @param s a <code>String</code> value to be written.\n+     * @exception IOException if an I/O error occurs.\n+     * @see java.io.DataOutputStream#writeChar(int)\n+     * @see java.io.FilterOutputStream#out\n+     */\n+    @Override\n+    public final void writeChars(String s) throws IOException {\n+        int len = s.length();\n+        for (int i = 0; i < len; i++) {\n+            int v = s.charAt(i);\n+            out.write((v >>> 8) & 0xFF);\n+            out.write((v) & 0xFF);\n+        }\n+        incCount(len * 2);\n+    }\n+\n+    /**\n+     * Writes a string to the underlying output stream using\n+     * <a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>\n+     * encoding in a machine-independent manner.\n+     * <p>\n+     * First, two bytes are written to the output stream as if by the\n+     * <code>writeShort</code> method giving the number of bytes to follow. This\n+     * value is the number of bytes actually written out, not the length of the\n+     * string. Following the length, each character of the string is output, in\n+     * sequence, using the modified UTF-8 encoding for the character. If no\n+     * exception is thrown, the counter <code>written</code> is incremented by\n+     * the total number of bytes written to the output stream. This will be at\n+     * least two plus the length of <code>str</code>, and at most two plus\n+     * thrice the length of <code>str</code>.\n+     *\n+     * @param str a string to be written.\n+     * @exception IOException if an I/O error occurs.\n+     */\n+    @Override\n+    public final void writeUTF(String str) throws IOException {\n+        writeUTF(str, this);\n+    }\n+\n+    /**\n+     * Writes a string to the specified DataOutput using\n+     * <a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>\n+     * encoding in a machine-independent manner.\n+     * <p>\n+     * First, two bytes are written to out as if by the <code>writeShort</code>\n+     * method giving the number of bytes to follow. This value is the number of\n+     * bytes actually written out, not the length of the string. Following the\n+     * length, each character of the string is output, in sequence, using the\n+     * modified UTF-8 encoding for the character. If no exception is thrown, the\n+     * counter <code>written</code> is incremented by the total number of bytes\n+     * written to the output stream. This will be at least two plus the length\n+     * of <code>str</code>, and at most two plus thrice the length of\n+     * <code>str</code>.\n+     *\n+     * @param str a string to be written.\n+     * @param out destination to write to\n+     * @return The number of bytes written out.\n+     * @exception IOException if an I/O error occurs.\n+     */\n+    static int writeUTF(String str, DataOutput out) throws IOException {\n+        int strlen = str.length();\n+        int utflen = 0;\n+        int c, count = 0;\n+\n+        /* use charAt instead of copying String to char array */\n+        for (int i = 0; i < strlen; i++) {\n+            c = str.charAt(i);\n+            if ((c >= 0x0001) && (c <= 0x007F)) {\n+                utflen++;\n+            } else if (c > 0x07FF) {\n+                utflen += 3;\n+            } else {\n+                utflen += 2;\n+            }\n+        }\n+\n+        if (utflen > 65535) {\n+            throw new UTFDataFormatException(\"encoded string too long: \" + utflen + \" bytes\");\n+        }\n+\n+        byte[] bytearr = null;\n+        if (out instanceof DataOutputStream) {\n+            DataOutputStream dos = (DataOutputStream) out;\n+            if (dos.bytearr == null || (dos.bytearr.length < (utflen + 2))) {\n+                dos.bytearr = new byte[(utflen * 2) + 2];\n+            }\n+            bytearr = dos.bytearr;\n+        } else {\n+            bytearr = new byte[utflen + 2];\n+        }\n+\n+        bytearr[count++] = (byte) ((utflen >>> 8) & 0xFF);\n+        bytearr[count++] = (byte) ((utflen) & 0xFF);\n+\n+        int i = 0;\n+        for (i = 0; i < strlen; i++) {\n+            c = str.charAt(i);\n+            if (!((c >= 0x0001) && (c <= 0x007F))) {\n+                break;\n+            }\n+            bytearr[count++] = (byte) c;\n+        }\n+\n+        for (; i < strlen; i++) {\n+            c = str.charAt(i);\n+            if ((c >= 0x0001) && (c <= 0x007F)) {\n+                bytearr[count++] = (byte) c;\n+\n+            } else if (c > 0x07FF) {\n+                bytearr[count++] = (byte) (0xE0 | ((c >> 12) & 0x0F));\n+                bytearr[count++] = (byte) (0x80 | ((c >> 6) & 0x3F));\n+                bytearr[count++] = (byte) (0x80 | ((c) & 0x3F));\n+            } else {\n+                bytearr[count++] = (byte) (0xC0 | ((c >> 6) & 0x1F));\n+                bytearr[count++] = (byte) (0x80 | ((c) & 0x3F));\n+            }\n+        }\n+        out.write(bytearr, 0, utflen + 2);\n+        return utflen + 2;\n+    }\n+\n+    /**\n+     * Returns the current value of the counter <code>written</code>, the number\n+     * of bytes written to this data output stream so far. If the counter\n+     * overflows, it will be wrapped to Integer.MAX_VALUE.\n+     *\n+     * @return the value of the <code>written</code> field.\n+     * @see java.io.DataOutputStream#written\n+     */\n+    public final int size() {\n+        return written;\n+    }\n+}"
        },
        {
            "sha": "875b838209ee36fe0df86f48f9ec4b6070ad9854",
            "filename": "commons/nifi-stream-utils/src/main/java/org/apache/nifi/io/GZIPOutputStream.java",
            "status": "added",
            "additions": 41,
            "deletions": 0,
            "changes": 41,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FGZIPOutputStream.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FGZIPOutputStream.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FGZIPOutputStream.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+/**\n+ * <p>\n+ * This class extends the {@link java.util.zip.GZIPOutputStream} by allowing the\n+ * constructor to provide a compression level, and uses a default value of 1,\n+ * rather than 5.\n+ * </p>\n+ */\n+public class GZIPOutputStream extends java.util.zip.GZIPOutputStream {\n+\n+    public static final int DEFAULT_COMPRESSION_LEVEL = 1;\n+\n+    public GZIPOutputStream(final OutputStream out) throws IOException {\n+        this(out, DEFAULT_COMPRESSION_LEVEL);\n+    }\n+\n+    public GZIPOutputStream(final OutputStream out, final int compressionLevel) throws IOException {\n+        super(out);\n+        def.setLevel(compressionLevel);\n+    }\n+}"
        },
        {
            "sha": "0ebe16dd620fb521bd233f126ed4aef751307b3e",
            "filename": "commons/nifi-stream-utils/src/main/java/org/apache/nifi/io/LeakyBucketStreamThrottler.java",
            "status": "added",
            "additions": 324,
            "deletions": 0,
            "changes": 324,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FLeakyBucketStreamThrottler.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FLeakyBucketStreamThrottler.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FLeakyBucketStreamThrottler.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,324 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+public class LeakyBucketStreamThrottler implements StreamThrottler {\n+\n+    private final int maxBytesPerSecond;\n+    private final BlockingQueue<Request> requestQueue = new LinkedBlockingQueue<Request>();\n+    private final ScheduledExecutorService executorService;\n+    private final AtomicBoolean shutdown = new AtomicBoolean(false);\n+\n+    public LeakyBucketStreamThrottler(final int maxBytesPerSecond) {\n+        this.maxBytesPerSecond = maxBytesPerSecond;\n+\n+        executorService = Executors.newSingleThreadScheduledExecutor();\n+        final Runnable task = new Drain();\n+        executorService.scheduleAtFixedRate(task, 0, 1000, TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Override\n+    public void close() {\n+        this.shutdown.set(true);\n+\n+        executorService.shutdown();\n+        try {\n+            // Should not take more than 2 seconds because we run every second. If it takes more than\n+            // 2 seconds, it is because the Runnable thread is blocking on a write; in this case,\n+            // we will just ignore it and return\n+            executorService.awaitTermination(2, TimeUnit.SECONDS);\n+        } catch (InterruptedException e) {\n+        }\n+    }\n+\n+    @Override\n+    public OutputStream newThrottledOutputStream(final OutputStream toWrap) {\n+        return new OutputStream() {\n+            @Override\n+            public void write(final int b) throws IOException {\n+                write(new byte[]{(byte) b}, 0, 1);\n+            }\n+\n+            @Override\n+            public void write(byte[] b) throws IOException {\n+                write(b, 0, b.length);\n+            }\n+\n+            @Override\n+            public void write(byte[] b, int off, int len) throws IOException {\n+                final InputStream in = new ByteArrayInputStream(b, off, len);\n+                LeakyBucketStreamThrottler.this.copy(in, toWrap);\n+            }\n+\n+            @Override\n+            public void close() throws IOException {\n+                toWrap.close();\n+            }\n+\n+            @Override\n+            public void flush() throws IOException {\n+                toWrap.flush();\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public InputStream newThrottledInputStream(final InputStream toWrap) {\n+        return new InputStream() {\n+            final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+            @Override\n+            public int read() throws IOException {\n+                final ByteArrayOutputStream baos = new ByteArrayOutputStream(1);\n+                LeakyBucketStreamThrottler.this.copy(toWrap, baos, 1L);\n+                if (baos.getBufferLength() < 1) {\n+                    return -1;\n+                }\n+\n+                return baos.getUnderlyingBuffer()[0] & 0xFF;\n+            }\n+\n+            @Override\n+            public int read(final byte[] b) throws IOException {\n+                if(b.length == 0){\n+                    return 0;\n+                }\n+                return read(b, 0, b.length);\n+            }\n+\n+            @Override\n+            public int read(byte[] b, int off, int len) throws IOException {\n+                baos.reset();\n+                final int copied = (int) LeakyBucketStreamThrottler.this.copy(toWrap, baos, len);\n+                if (copied == 0) {\n+                    return -1;\n+                }\n+                System.arraycopy(baos.getUnderlyingBuffer(), 0, b, off, copied);\n+                return copied;\n+            }\n+\n+            @Override\n+            public void close() throws IOException {\n+                toWrap.close();\n+            }\n+\n+            @Override\n+            public int available() throws IOException {\n+                return toWrap.available();\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public long copy(final InputStream in, final OutputStream out) throws IOException {\n+        return copy(in, out, -1);\n+    }\n+\n+    @Override\n+    public long copy(final InputStream in, final OutputStream out, final long maxBytes) throws IOException {\n+        long totalBytesCopied = 0;\n+        boolean finished = false;\n+        while (!finished) {\n+            final long requestMax = (maxBytes < 0) ? Long.MAX_VALUE : maxBytes - totalBytesCopied;\n+            final Request request = new Request(in, out, requestMax);\n+            boolean transferred = false;\n+            while (!transferred) {\n+                if (shutdown.get()) {\n+                    throw new IOException(\"Throttler shutdown\");\n+                }\n+\n+                try {\n+                    transferred = requestQueue.offer(request, 1000, TimeUnit.MILLISECONDS);\n+                } catch (final InterruptedException e) {\n+                    throw new IOException(\"Interrupted\", e);\n+                }\n+            }\n+\n+            final BlockingQueue<Response> responseQueue = request.getResponseQueue();\n+            Response response = null;\n+            while (response == null) {\n+                try {\n+                    if (shutdown.get()) {\n+                        throw new IOException(\"Throttler shutdown\");\n+                    }\n+                    response = responseQueue.poll(1000L, TimeUnit.MILLISECONDS);\n+                } catch (InterruptedException e) {\n+                    throw new IOException(\"Interrupted\", e);\n+                }\n+            }\n+\n+            if (!response.isSuccess()) {\n+                throw response.getError();\n+            }\n+\n+            totalBytesCopied += response.getBytesCopied();\n+            finished = (response.getBytesCopied() == 0) || (totalBytesCopied >= maxBytes && maxBytes > 0);\n+        }\n+\n+        return totalBytesCopied;\n+    }\n+\n+    /**\n+     * This class is responsible for draining water from the leaky bucket. I.e.,\n+     * it actually moves the data\n+     */\n+    private class Drain implements Runnable {\n+\n+        private final byte[] buffer;\n+\n+        public Drain() {\n+            final int bufferSize = Math.min(4096, maxBytesPerSecond);\n+            buffer = new byte[bufferSize];\n+        }\n+\n+        @Override\n+        public void run() {\n+            final long start = System.currentTimeMillis();\n+\n+            int bytesTransferred = 0;\n+            while (bytesTransferred < maxBytesPerSecond) {\n+                final long maxMillisToWait = 1000 - (System.currentTimeMillis() - start);\n+                if (maxMillisToWait < 1) {\n+                    return;\n+                }\n+\n+                try {\n+                    final Request request = requestQueue.poll(maxMillisToWait, TimeUnit.MILLISECONDS);\n+                    if (request == null) {\n+                        return;\n+                    }\n+\n+                    final BlockingQueue<Response> responseQueue = request.getResponseQueue();\n+\n+                    final OutputStream out = request.getOutputStream();\n+                    final InputStream in = request.getInputStream();\n+\n+                    try {\n+                        final long requestMax = request.getMaxBytesToCopy();\n+                        long maxBytesToTransfer;\n+                        if (requestMax < 0) {\n+                            maxBytesToTransfer = Math.min(buffer.length, maxBytesPerSecond - bytesTransferred);\n+                        } else {\n+                            maxBytesToTransfer = Math.min(requestMax,\n+                                    Math.min(buffer.length, maxBytesPerSecond - bytesTransferred));\n+                        }\n+                        maxBytesToTransfer = Math.max(1L, maxBytesToTransfer);\n+\n+                        final int bytesCopied = fillBuffer(in, maxBytesToTransfer);\n+                        out.write(buffer, 0, bytesCopied);\n+\n+                        final Response response = new Response(true, bytesCopied);\n+                        responseQueue.put(response);\n+                        bytesTransferred += bytesCopied;\n+                    } catch (final IOException e) {\n+                        final Response response = new Response(e);\n+                        responseQueue.put(response);\n+                    }\n+                } catch (InterruptedException e) {\n+                }\n+            }\n+        }\n+\n+        private int fillBuffer(final InputStream in, final long maxBytes) throws IOException {\n+            int bytesRead = 0;\n+            int len;\n+            while (bytesRead < maxBytes && (len = in.read(buffer, bytesRead, (int) Math.min(maxBytes - bytesRead, buffer.length - bytesRead))) > 0) {\n+                bytesRead += len;\n+            }\n+\n+            return bytesRead;\n+        }\n+    }\n+\n+    private static class Response {\n+\n+        private final boolean success;\n+        private final IOException error;\n+        private final int bytesCopied;\n+\n+        public Response(final boolean success, final int bytesCopied) {\n+            this.success = success;\n+            this.bytesCopied = bytesCopied;\n+            this.error = null;\n+        }\n+\n+        public Response(final IOException error) {\n+            this.success = false;\n+            this.error = error;\n+            this.bytesCopied = -1;\n+        }\n+\n+        public boolean isSuccess() {\n+            return success;\n+        }\n+\n+        public IOException getError() {\n+            return error;\n+        }\n+\n+        public int getBytesCopied() {\n+            return bytesCopied;\n+        }\n+    }\n+\n+    private static class Request {\n+\n+        private final OutputStream out;\n+        private final InputStream in;\n+        private final long maxBytesToCopy;\n+        private final BlockingQueue<Response> responseQueue;\n+\n+        public Request(final InputStream in, final OutputStream out, final long maxBytesToCopy) {\n+            this.out = out;\n+            this.in = in;\n+            this.maxBytesToCopy = maxBytesToCopy;\n+            this.responseQueue = new LinkedBlockingQueue<Response>(1);\n+        }\n+\n+        public BlockingQueue<Response> getResponseQueue() {\n+            return this.responseQueue;\n+        }\n+\n+        public OutputStream getOutputStream() {\n+            return out;\n+        }\n+\n+        public InputStream getInputStream() {\n+            return in;\n+        }\n+\n+        public long getMaxBytesToCopy() {\n+            return maxBytesToCopy;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"Request[maxBytes=\" + maxBytesToCopy + \"]\";\n+        }\n+    }\n+\n+}"
        },
        {
            "sha": "1fbb093fddf94dd5ad1043a6ac9c52fb66d45d8a",
            "filename": "commons/nifi-stream-utils/src/main/java/org/apache/nifi/io/NonCloseableInputStream.java",
            "status": "added",
            "additions": 56,
            "deletions": 0,
            "changes": 56,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FNonCloseableInputStream.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FNonCloseableInputStream.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FNonCloseableInputStream.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io;\n+\n+import java.io.FilterInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * Wraps and InputStream so that the underlying InputStream cannot be closed.\n+ * This is used so that the InputStream can be wrapped with yet another\n+ * InputStream and prevent the outer layer from closing the inner InputStream\n+ */\n+public class NonCloseableInputStream extends FilterInputStream {\n+\n+    private final InputStream toWrap;\n+\n+    public NonCloseableInputStream(final InputStream toWrap) {\n+        super(toWrap);\n+        this.toWrap = toWrap;\n+    }\n+\n+    @Override\n+    public int read() throws IOException {\n+        return toWrap.read();\n+    }\n+\n+    @Override\n+    public int read(byte[] b) throws IOException {\n+        return toWrap.read(b);\n+    }\n+\n+    @Override\n+    public int read(byte[] b, int off, int len) throws IOException {\n+        return toWrap.read(b, off, len);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        // do nothing\n+    }\n+}"
        },
        {
            "sha": "731e409aea936815c28837a685051b56ac499a60",
            "filename": "commons/nifi-stream-utils/src/main/java/org/apache/nifi/io/NonCloseableOutputStream.java",
            "status": "added",
            "additions": 51,
            "deletions": 0,
            "changes": 51,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FNonCloseableOutputStream.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FNonCloseableOutputStream.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FNonCloseableOutputStream.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io;\n+\n+import java.io.FilterOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+public class NonCloseableOutputStream extends FilterOutputStream {\n+\n+    private final OutputStream out;\n+\n+    public NonCloseableOutputStream(final OutputStream out) {\n+        super(out);\n+        this.out = out;\n+    }\n+\n+    @Override\n+    public void write(byte[] b) throws IOException {\n+        out.write(b);\n+    }\n+\n+    @Override\n+    public void write(byte[] b, int off, int len) throws IOException {\n+        out.write(b, off, len);\n+    }\n+\n+    @Override\n+    public void write(int b) throws IOException {\n+        out.write(b);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        out.flush();\n+    }\n+}"
        },
        {
            "sha": "60475d457ef6681432babaf321f21322130d6479",
            "filename": "commons/nifi-stream-utils/src/main/java/org/apache/nifi/io/NullOutputStream.java",
            "status": "added",
            "additions": 46,
            "deletions": 0,
            "changes": 46,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FNullOutputStream.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FNullOutputStream.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FNullOutputStream.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+/**\n+ * OutputStream that throws away all data, just like as if writing to /dev/null\n+ */\n+public class NullOutputStream extends OutputStream {\n+\n+    @Override\n+    public void write(final int b) throws IOException {\n+    }\n+\n+    @Override\n+    public void write(final byte[] b) throws IOException {\n+    }\n+\n+    @Override\n+    public void write(final byte[] b, int off, int len) throws IOException {\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+    }\n+\n+    @Override\n+    public void flush() throws IOException {\n+    }\n+}"
        },
        {
            "sha": "8c2aa80047f39e8a5c0ad9e78be57f221f5537bd",
            "filename": "commons/nifi-stream-utils/src/main/java/org/apache/nifi/io/StreamThrottler.java",
            "status": "added",
            "additions": 33,
            "deletions": 0,
            "changes": 33,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FStreamThrottler.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FStreamThrottler.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FStreamThrottler.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+public interface StreamThrottler extends Closeable {\n+\n+    long copy(InputStream in, OutputStream out) throws IOException;\n+\n+    long copy(InputStream in, OutputStream out, long maxBytes) throws IOException;\n+\n+    InputStream newThrottledInputStream(final InputStream toWrap);\n+\n+    OutputStream newThrottledOutputStream(final OutputStream toWrap);\n+}"
        },
        {
            "sha": "15960142919597a56deb0b50e9846620ac3b56a3",
            "filename": "commons/nifi-stream-utils/src/main/java/org/apache/nifi/io/StreamUtils.java",
            "status": "added",
            "additions": 257,
            "deletions": 0,
            "changes": 257,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FStreamUtils.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FStreamUtils.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FStreamUtils.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,257 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.nifi.io.exception.BytePatternNotFoundException;\n+import org.apache.nifi.io.util.NonThreadSafeCircularBuffer;\n+\n+public class StreamUtils {\n+\n+    public static long copy(final InputStream source, final OutputStream destination) throws IOException {\n+        final byte[] buffer = new byte[8192];\n+        int len;\n+        long totalCount = 0L;\n+        while ((len = source.read(buffer)) > 0) {\n+            destination.write(buffer, 0, len);\n+            totalCount += len;\n+        }\n+        return totalCount;\n+    }\n+\n+    /**\n+     * Copies <code>numBytes</code> from <code>source</code> to\n+     * <code>destination</code>. If <code>numBytes</code> are not available from\n+     * <code>source</code>, throws EOFException\n+     *\n+     * @param source\n+     * @param destination\n+     * @param numBytes\n+     * @throws IOException\n+     */\n+    public static void copy(final InputStream source, final OutputStream destination, final long numBytes) throws IOException {\n+        final byte[] buffer = new byte[8192];\n+        int len;\n+        long bytesLeft = numBytes;\n+        while ((len = source.read(buffer, 0, (int) Math.min(bytesLeft, buffer.length))) > 0) {\n+            destination.write(buffer, 0, len);\n+            bytesLeft -= len;\n+        }\n+\n+        if (bytesLeft > 0) {\n+            throw new EOFException(\"Attempted to copy \" + numBytes + \" bytes but only \" + (numBytes - bytesLeft) + \" bytes were available\");\n+        }\n+    }\n+\n+    /**\n+     * Reads data from the given input stream, copying it to the destination\n+     * byte array. If the InputStream has less data than the given byte array,\n+     * throws an EOFException\n+     *\n+     * @param source\n+     * @param destination\n+     * @throws IOException\n+     */\n+    public static void fillBuffer(final InputStream source, final byte[] destination) throws IOException {\n+        fillBuffer(source, destination, true);\n+    }\n+\n+    /**\n+     * Reads data from the given input stream, copying it to the destination\n+     * byte array. If the InputStream has less data than the given byte array,\n+     * throws an EOFException if <code>ensureCapacity</code> is true and\n+     * otherwise returns the number of bytes copied\n+     *\n+     * @param source\n+     * @param destination\n+     * @param ensureCapacity whether or not to enforce that the InputStream have\n+     * at least as much data as the capacity of the destination byte array\n+     * @return \n+     * @throws IOException\n+     */\n+    public static int fillBuffer(final InputStream source, final byte[] destination, final boolean ensureCapacity) throws IOException {\n+        int bytesRead = 0;\n+        int len;\n+        while (bytesRead < destination.length) {\n+            len = source.read(destination, bytesRead, destination.length - bytesRead);\n+            if (len < 0) {\n+                if (ensureCapacity) {\n+                    throw new EOFException();\n+                } else {\n+                    break;\n+                }\n+            }\n+\n+            bytesRead += len;\n+        }\n+\n+        return bytesRead;\n+    }\n+\n+    /**\n+     * Copies data from in to out until either we are out of data (returns null)\n+     * or we hit one of the byte patterns identified by the\n+     * <code>stoppers</code> parameter (returns the byte pattern matched). The\n+     * bytes in the stopper will be copied.\n+     *\n+     * @param in\n+     * @param out\n+     * @param maxBytes\n+     * @param stoppers\n+     * @return the byte array matched, or null if end of stream was reached\n+     * @throws IOException\n+     */\n+    public static byte[] copyInclusive(final InputStream in, final OutputStream out, final int maxBytes, final byte[]... stoppers) throws IOException {\n+        if (stoppers.length == 0) {\n+            return null;\n+        }\n+\n+        final List<NonThreadSafeCircularBuffer> circularBuffers = new ArrayList<NonThreadSafeCircularBuffer>();\n+        for (final byte[] stopper : stoppers) {\n+            circularBuffers.add(new NonThreadSafeCircularBuffer(stopper));\n+        }\n+\n+        long bytesRead = 0;\n+        while (true) {\n+            final int next = in.read();\n+            if (next == -1) {\n+                return null;\n+            } else if (maxBytes > 0 && ++bytesRead >= maxBytes) {\n+                throw new BytePatternNotFoundException(\"Did not encounter any byte pattern that was expected; data does not appear to be in the expected format\");\n+            }\n+\n+            out.write(next);\n+\n+            for (final NonThreadSafeCircularBuffer circ : circularBuffers) {\n+                if (circ.addAndCompare((byte) next)) {\n+                    return circ.getByteArray();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Copies data from in to out until either we are out of data (returns null)\n+     * or we hit one of the byte patterns identified by the\n+     * <code>stoppers</code> parameter (returns the byte pattern matched). The\n+     * byte pattern matched will NOT be copied to the output and will be un-read\n+     * from the input.\n+     *\n+     * @param in\n+     * @param out\n+     * @param maxBytes\n+     * @param stoppers\n+     * @return the byte array matched, or null if end of stream was reached\n+     * @throws IOException\n+     */\n+    public static byte[] copyExclusive(final InputStream in, final OutputStream out, final int maxBytes, final byte[]... stoppers) throws IOException {\n+        if (stoppers.length == 0) {\n+            return null;\n+        }\n+\n+        int longest = 0;\n+        NonThreadSafeCircularBuffer longestBuffer = null;\n+        final List<NonThreadSafeCircularBuffer> circularBuffers = new ArrayList<NonThreadSafeCircularBuffer>();\n+        for (final byte[] stopper : stoppers) {\n+            final NonThreadSafeCircularBuffer circularBuffer = new NonThreadSafeCircularBuffer(stopper);\n+            if (stopper.length > longest) {\n+                longest = stopper.length;\n+                longestBuffer = circularBuffer;\n+                circularBuffers.add(0, circularBuffer);\n+            } else {\n+                circularBuffers.add(circularBuffer);\n+            }\n+        }\n+\n+        long bytesRead = 0;\n+        while (true) {\n+            final int next = in.read();\n+            if (next == -1) {\n+                return null;\n+            } else if (maxBytes > 0 && bytesRead++ > maxBytes) {\n+                throw new BytePatternNotFoundException(\"Did not encounter any byte pattern that was expected; data does not appear to be in the expected format\");\n+            }\n+\n+            for (final NonThreadSafeCircularBuffer circ : circularBuffers) {\n+                if (circ.addAndCompare((byte) next)) {\n+                    // The longest buffer has some data that may not have been written out yet; we need to make sure\n+                    // that we copy out those bytes.\n+                    final int bytesToCopy = longest - circ.getByteArray().length;\n+                    for (int i = 0; i < bytesToCopy; i++) {\n+                        final int oldestByte = longestBuffer.getOldestByte();\n+                        if (oldestByte != -1) {\n+                            out.write(oldestByte);\n+                            longestBuffer.addAndCompare((byte) 0);\n+                        }\n+                    }\n+\n+                    return circ.getByteArray();\n+                }\n+            }\n+\n+            if (longestBuffer.isFilled()) {\n+                out.write(longestBuffer.getOldestByte());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Skips the specified number of bytes from the InputStream\n+     *\n+     * If unable to skip that number of bytes, throws EOFException\n+     *\n+     * @param stream\n+     * @param bytesToSkip\n+     * @throws IOException\n+     */\n+    public static void skip(final InputStream stream, final long bytesToSkip) throws IOException {\n+        if (bytesToSkip <= 0) {\n+            return;\n+        }\n+        long totalSkipped = 0L;\n+\n+        // If we have a FileInputStream, calling skip(1000000) will return 1000000 even if the file is only\n+        // 3 bytes. As a result, we will skip 1 less than the number requested, and then read the last\n+        // byte in order to make sure that we've consumed the number of bytes requested. We then check that\n+        // the final byte, which we read, is not -1.\n+        final long actualBytesToSkip = bytesToSkip - 1;\n+        while (totalSkipped < actualBytesToSkip) {\n+            final long skippedThisIteration = stream.skip(actualBytesToSkip - totalSkipped);\n+            if (skippedThisIteration == 0) {\n+                final int nextByte = stream.read();\n+                if (nextByte == -1) {\n+                    throw new EOFException();\n+                } else {\n+                    totalSkipped++;\n+                }\n+            }\n+\n+            totalSkipped += skippedThisIteration;\n+        }\n+\n+        final int lastByte = stream.read();\n+        if (lastByte == -1) {\n+            throw new EOFException();\n+        }\n+    }\n+}"
        },
        {
            "sha": "f2857207bbda9f0d1606a1c27e1b1f62067e899d",
            "filename": "commons/nifi-stream-utils/src/main/java/org/apache/nifi/io/ZipOutputStream.java",
            "status": "added",
            "additions": 38,
            "deletions": 0,
            "changes": 38,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FZipOutputStream.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FZipOutputStream.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FZipOutputStream.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io;\n+\n+import java.io.OutputStream;\n+\n+/**\n+ * This class extends the {@link java.util.zip.ZipOutputStream} by providing a\n+ * constructor that allows the user to specify the compression level. The\n+ * default compression level is 1, as opposed to Java's default of 5.\n+ */\n+public class ZipOutputStream extends java.util.zip.ZipOutputStream {\n+\n+    public static final int DEFAULT_COMPRESSION_LEVEL = 1;\n+\n+    public ZipOutputStream(final OutputStream out) {\n+        this(out, DEFAULT_COMPRESSION_LEVEL);\n+    }\n+\n+    public ZipOutputStream(final OutputStream out, final int compressionLevel) {\n+        super(out);\n+        def.setLevel(compressionLevel);\n+    }\n+}"
        },
        {
            "sha": "8935767d17c2cbc5571876bc93a765a2e1fcfa20",
            "filename": "commons/nifi-stream-utils/src/main/java/org/apache/nifi/io/exception/BytePatternNotFoundException.java",
            "status": "added",
            "additions": 28,
            "deletions": 0,
            "changes": 28,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fexception%2FBytePatternNotFoundException.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fexception%2FBytePatternNotFoundException.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Fexception%2FBytePatternNotFoundException.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.exception;\n+\n+import java.io.IOException;\n+\n+public class BytePatternNotFoundException extends IOException {\n+\n+    private static final long serialVersionUID = -4128911284318513973L;\n+\n+    public BytePatternNotFoundException(final String explanation) {\n+        super(explanation);\n+    }\n+}"
        },
        {
            "sha": "1b874889e64b5b42d2967f186538e0e7a24ae53c",
            "filename": "commons/nifi-stream-utils/src/main/java/org/apache/nifi/io/util/NonThreadSafeCircularBuffer.java",
            "status": "added",
            "additions": 69,
            "deletions": 0,
            "changes": 69,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Futil%2FNonThreadSafeCircularBuffer.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Futil%2FNonThreadSafeCircularBuffer.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-stream-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2Futil%2FNonThreadSafeCircularBuffer.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io.util;\n+\n+import java.util.Arrays;\n+\n+public class NonThreadSafeCircularBuffer {\n+\n+    private final byte[] lookingFor;\n+    private final int[] buffer;\n+    private int insertionPointer = 0;\n+    private int bufferSize = 0;\n+\n+    public NonThreadSafeCircularBuffer(final byte[] lookingFor) {\n+        this.lookingFor = lookingFor;\n+        buffer = new int[lookingFor.length];\n+        Arrays.fill(buffer, -1);\n+    }\n+\n+    public byte[] getByteArray() {\n+        return lookingFor;\n+    }\n+\n+    /**\n+     * Returns the oldest byte in the buffer\n+     *\n+     * @return\n+     */\n+    public int getOldestByte() {\n+        return buffer[insertionPointer];\n+    }\n+\n+    public boolean isFilled() {\n+        return bufferSize >= buffer.length;\n+    }\n+\n+    public boolean addAndCompare(final byte data) {\n+        buffer[insertionPointer] = data;\n+        insertionPointer = (insertionPointer + 1) % lookingFor.length;\n+\n+        bufferSize++;\n+        if (bufferSize < lookingFor.length) {\n+            return false;\n+        }\n+\n+        for (int i = 0; i < lookingFor.length; i++) {\n+            final byte compare = (byte) buffer[(insertionPointer + i) % lookingFor.length];\n+            if (compare != lookingFor[i]) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+}"
        },
        {
            "sha": "12e1801b251724d2b4107b8f44e1d420d8c596ed",
            "filename": "commons/nifi-stream-utils/src/test/java/org/apache/nifi/io/TestLeakyBucketThrottler.java",
            "status": "added",
            "additions": 144,
            "deletions": 0,
            "changes": 144,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FTestLeakyBucketThrottler.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FTestLeakyBucketThrottler.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-stream-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FTestLeakyBucketThrottler.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013",
            "patch": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.io;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+@Ignore(\"Tests are time-based\")\n+public class TestLeakyBucketThrottler {\n+\n+    @Test(timeout = 10000)\n+    public void testOutputStreamInterface() throws IOException {\n+        // throttle rate at 1 MB/sec\n+        final LeakyBucketStreamThrottler throttler = new LeakyBucketStreamThrottler(1024 * 1024);\n+\n+        final byte[] data = new byte[1024 * 1024 * 4];\n+        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        final OutputStream throttledOut = throttler.newThrottledOutputStream(baos);\n+\n+        final long start = System.currentTimeMillis();\n+        throttledOut.write(data);\n+        throttler.close();\n+        final long millis = System.currentTimeMillis() - start;\n+        // should take 4 sec give or take\n+        assertTrue(millis > 3000);\n+        assertTrue(millis < 6000);\n+    }\n+\n+    @Test(timeout = 10000)\n+    public void testInputStreamInterface() throws IOException {\n+        // throttle rate at 1 MB/sec\n+        final LeakyBucketStreamThrottler throttler = new LeakyBucketStreamThrottler(1024 * 1024);\n+\n+        final byte[] data = new byte[1024 * 1024 * 4];\n+        final ByteArrayInputStream bais = new ByteArrayInputStream(data);\n+        final InputStream throttledIn = throttler.newThrottledInputStream(bais);\n+\n+        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+        final byte[] buffer = new byte[4096];\n+        final long start = System.currentTimeMillis();\n+        int len;\n+        while ((len = throttledIn.read(buffer)) > 0) {\n+            baos.write(buffer, 0, len);\n+        }\n+        throttler.close();\n+        final long millis = System.currentTimeMillis() - start;\n+        // should take 4 sec give or take\n+        assertTrue(millis > 3000);\n+        assertTrue(millis < 6000);\n+        baos.close();\n+    }\n+\n+    @Test(timeout = 10000)\n+    public void testDirectInterface() throws IOException, InterruptedException {\n+        // throttle rate at 1 MB/sec\n+        final LeakyBucketStreamThrottler throttler = new LeakyBucketStreamThrottler(1024 * 1024);\n+\n+        // create 3 threads, each sending ~2 MB\n+        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        final List<Thread> threads = new ArrayList<Thread>();\n+        for (int i = 0; i < 3; i++) {\n+            final Thread t = new WriterThread(i, throttler, baos);\n+            threads.add(t);\n+        }\n+\n+        final long start = System.currentTimeMillis();\n+        for (final Thread t : threads) {\n+            t.start();\n+        }\n+\n+        for (final Thread t : threads) {\n+            t.join();\n+        }\n+        final long elapsed = System.currentTimeMillis() - start;\n+\n+        throttler.close();\n+\n+        // To send 15 MB, it should have taken at least 5 seconds and no more than 7 seconds, to\n+        // allow for busy-ness and the fact that we could write a tiny bit more than the limit.\n+        assertTrue(elapsed > 5000);\n+        assertTrue(elapsed < 7000);\n+\n+        // ensure bytes were copied out appropriately\n+        assertEquals(3 * (2 * 1024 * 1024 + 1), baos.getBufferLength());\n+        assertEquals((byte) 'A', baos.getUnderlyingBuffer()[baos.getBufferLength() - 1]);\n+    }\n+\n+    private static class WriterThread extends Thread {\n+\n+        private final int idx;\n+        private final byte[] data = new byte[1024 * 1024 * 2 + 1];\n+        private final LeakyBucketStreamThrottler throttler;\n+        private final OutputStream out;\n+\n+        public WriterThread(final int idx, final LeakyBucketStreamThrottler throttler, final OutputStream out) {\n+            this.idx = idx;\n+            this.throttler = throttler;\n+            this.out = out;\n+            this.data[this.data.length - 1] = (byte) 'A';\n+        }\n+\n+        @Override\n+        public void run() {\n+            long startMillis = System.currentTimeMillis();\n+            long bytesWritten = 0L;\n+            try {\n+                throttler.copy(new ByteArrayInputStream(data), out);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+                return;\n+            }\n+            long now = System.currentTimeMillis();\n+            long millisElapsed = now - startMillis;\n+            bytesWritten += data.length;\n+            float bytesPerSec = (float) bytesWritten / (float) millisElapsed * 1000F;\n+            System.out.println(idx + \" : copied data at a rate of \" + bytesPerSec + \" bytes/sec\");\n+        }\n+    }\n+\n+}"
        },
        {
            "sha": "0f3f60c3094f0a72137f7127589499e24cc2146e",
            "filename": "commons/nifi-stream-utils/src/test/resources/logback-test.xml",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Ftest%2Fresources%2Flogback-test.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-stream-utils%2Fsrc%2Ftest%2Fresources%2Flogback-test.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-stream-utils%2Fsrc%2Ftest%2Fresources%2Flogback-test.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "12c52313002ee7be3f97b2796ebceeb74d25deae",
            "filename": "commons/nifi-utils/.gitignore",
            "status": "added",
            "additions": 8,
            "deletions": 0,
            "changes": 8,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2F.gitignore",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2F.gitignore",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-utils%2F.gitignore?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "8aeccd7b60e027b588d16e8c244aff07a8c9f42a",
            "filename": "commons/nifi-utils/pom.xml",
            "status": "added",
            "additions": 28,
            "deletions": 0,
            "changes": 28,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fpom.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-utils%2Fpom.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "e22032bf6eca46061059a9c9c773c7089a66fe2b",
            "filename": "commons/nifi-utils/src/main/java/org/apache/nifi/io/CompoundUpdateMonitor.java",
            "status": "added",
            "additions": 115,
            "deletions": 0,
            "changes": 115,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FCompoundUpdateMonitor.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FCompoundUpdateMonitor.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FCompoundUpdateMonitor.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "f4464652e9b2e9a92b808407b4ecfe2301920952",
            "filename": "commons/nifi-utils/src/main/java/org/apache/nifi/io/LastModifiedMonitor.java",
            "status": "added",
            "additions": 30,
            "deletions": 0,
            "changes": 30,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FLastModifiedMonitor.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FLastModifiedMonitor.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FLastModifiedMonitor.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "1326c2aad591921a72b7492218ef878e6b23ef74",
            "filename": "commons/nifi-utils/src/main/java/org/apache/nifi/io/MD5SumMonitor.java",
            "status": "added",
            "additions": 49,
            "deletions": 0,
            "changes": 49,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FMD5SumMonitor.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FMD5SumMonitor.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FMD5SumMonitor.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "785f1ace27237dcb6b2f6fc0f9e6b0411ff3edd9",
            "filename": "commons/nifi-utils/src/main/java/org/apache/nifi/io/SynchronousFileWatcher.java",
            "status": "added",
            "additions": 123,
            "deletions": 0,
            "changes": 123,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FSynchronousFileWatcher.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FSynchronousFileWatcher.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FSynchronousFileWatcher.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "33fb4442429433f871b05021763f10362298dc66",
            "filename": "commons/nifi-utils/src/main/java/org/apache/nifi/io/UpdateMonitor.java",
            "status": "added",
            "additions": 25,
            "deletions": 0,
            "changes": 25,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FUpdateMonitor.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FUpdateMonitor.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fio%2FUpdateMonitor.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "92061e087571a8e31956cfd4636a3900828ff875",
            "filename": "commons/nifi-utils/src/main/java/org/apache/nifi/util/BooleanHolder.java",
            "status": "added",
            "additions": 25,
            "deletions": 0,
            "changes": 25,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FBooleanHolder.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FBooleanHolder.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FBooleanHolder.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "9954bfb09f70b90b914b1ad2b870f7417d4df5b7",
            "filename": "commons/nifi-utils/src/main/java/org/apache/nifi/util/FormatUtils.java",
            "status": "added",
            "additions": 204,
            "deletions": 0,
            "changes": 204,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FFormatUtils.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FFormatUtils.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FFormatUtils.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "213bbc0443999a39e4440260899e73b271fbe335",
            "filename": "commons/nifi-utils/src/main/java/org/apache/nifi/util/IntegerHolder.java",
            "status": "added",
            "additions": 54,
            "deletions": 0,
            "changes": 54,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FIntegerHolder.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FIntegerHolder.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FIntegerHolder.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "ef70ce805a7cc71a9897885ea33405ad4d1eea0d",
            "filename": "commons/nifi-utils/src/main/java/org/apache/nifi/util/LongHolder.java",
            "status": "added",
            "additions": 60,
            "deletions": 0,
            "changes": 60,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FLongHolder.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FLongHolder.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FLongHolder.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "a58ec6a10e746f9cd2b370a42ff9f5691fe23442",
            "filename": "commons/nifi-utils/src/main/java/org/apache/nifi/util/ObjectHolder.java",
            "status": "added",
            "additions": 39,
            "deletions": 0,
            "changes": 39,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FObjectHolder.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FObjectHolder.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FObjectHolder.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "c0bb83077097641069a92e89f5e1131415b2eb9b",
            "filename": "commons/nifi-utils/src/main/java/org/apache/nifi/util/RingBuffer.java",
            "status": "added",
            "additions": 292,
            "deletions": 0,
            "changes": 292,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FRingBuffer.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FRingBuffer.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FRingBuffer.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "cd119305f39ada6245f99a50f647ef2859c9daa4",
            "filename": "commons/nifi-utils/src/main/java/org/apache/nifi/util/StopWatch.java",
            "status": "added",
            "additions": 127,
            "deletions": 0,
            "changes": 127,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FStopWatch.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FStopWatch.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FStopWatch.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "63736ed2f6fa4e3b67ee87036b32a60bac993166",
            "filename": "commons/nifi-utils/src/main/java/org/apache/nifi/util/Tuple.java",
            "status": "added",
            "additions": 83,
            "deletions": 0,
            "changes": 83,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FTuple.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FTuple.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2FTuple.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "a8d7e8265026be7c33b1858ab9a56d07df799286",
            "filename": "commons/nifi-utils/src/main/java/org/apache/nifi/util/concurrency/DebugDisabledTimedLock.java",
            "status": "added",
            "additions": 67,
            "deletions": 0,
            "changes": 67,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Fconcurrency%2FDebugDisabledTimedLock.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Fconcurrency%2FDebugDisabledTimedLock.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Fconcurrency%2FDebugDisabledTimedLock.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "f0821685821c29f064a58e56ba015da457a1c608",
            "filename": "commons/nifi-utils/src/main/java/org/apache/nifi/util/concurrency/DebugEnabledTimedLock.java",
            "status": "added",
            "additions": 136,
            "deletions": 0,
            "changes": 136,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Fconcurrency%2FDebugEnabledTimedLock.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Fconcurrency%2FDebugEnabledTimedLock.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Fconcurrency%2FDebugEnabledTimedLock.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "69da6e8cfe3343083260b01a532559e7a52b2bee",
            "filename": "commons/nifi-utils/src/main/java/org/apache/nifi/util/concurrency/DebuggableTimedLock.java",
            "status": "added",
            "additions": 30,
            "deletions": 0,
            "changes": 30,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Fconcurrency%2FDebuggableTimedLock.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Fconcurrency%2FDebuggableTimedLock.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Fconcurrency%2FDebuggableTimedLock.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "532d3c3d04d6db21d37a0eb529bc2fd3617ff288",
            "filename": "commons/nifi-utils/src/main/java/org/apache/nifi/util/concurrency/TimedLock.java",
            "status": "added",
            "additions": 59,
            "deletions": 0,
            "changes": 59,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Fconcurrency%2FTimedLock.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Fconcurrency%2FTimedLock.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Fconcurrency%2FTimedLock.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "2b958971fcd3b496c9306a9b6c996cca9d3d6f76",
            "filename": "commons/nifi-utils/src/main/java/org/apache/nifi/util/timebuffer/EntityAccess.java",
            "status": "added",
            "additions": 26,
            "deletions": 0,
            "changes": 26,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Ftimebuffer%2FEntityAccess.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Ftimebuffer%2FEntityAccess.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Ftimebuffer%2FEntityAccess.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "193abc60e20b2565751e137553e193fc8c085a33",
            "filename": "commons/nifi-utils/src/main/java/org/apache/nifi/util/timebuffer/LongEntityAccess.java",
            "status": "added",
            "additions": 43,
            "deletions": 0,
            "changes": 43,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Ftimebuffer%2FLongEntityAccess.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Ftimebuffer%2FLongEntityAccess.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Ftimebuffer%2FLongEntityAccess.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "dd8e5232c45660de5ed2a11ab71cc6629bc882a4",
            "filename": "commons/nifi-utils/src/main/java/org/apache/nifi/util/timebuffer/TimedBuffer.java",
            "status": "added",
            "additions": 114,
            "deletions": 0,
            "changes": 114,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Ftimebuffer%2FTimedBuffer.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Ftimebuffer%2FTimedBuffer.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Ftimebuffer%2FTimedBuffer.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "07d31ea5aa96e36a59d8aa92a3eb031686206eee",
            "filename": "commons/nifi-utils/src/main/java/org/apache/nifi/util/timebuffer/TimestampedLong.java",
            "status": "added",
            "additions": 35,
            "deletions": 0,
            "changes": 35,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Ftimebuffer%2FTimestampedLong.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Ftimebuffer%2FTimestampedLong.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Ftimebuffer%2FTimestampedLong.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "c796a96935c96bf0b1aa6438cbe2f3ddc22846c7",
            "filename": "commons/nifi-utils/src/test/java/org/apache/nifi/util/timebuffer/TestCompoundUpdateMonitor.java",
            "status": "added",
            "additions": 75,
            "deletions": 0,
            "changes": 75,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Ftimebuffer%2FTestCompoundUpdateMonitor.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Ftimebuffer%2FTestCompoundUpdateMonitor.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Ftimebuffer%2FTestCompoundUpdateMonitor.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "fafffdd24b2e8921ce9d376f8e62a4d26ca423d7",
            "filename": "commons/nifi-utils/src/test/java/org/apache/nifi/util/timebuffer/TestRingBuffer.java",
            "status": "added",
            "additions": 182,
            "deletions": 0,
            "changes": 182,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Ftimebuffer%2FTestRingBuffer.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Ftimebuffer%2FTestRingBuffer.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Ftimebuffer%2FTestRingBuffer.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "4b2c0d587bdd13e005630ee578447916f4ea18e1",
            "filename": "commons/nifi-utils/src/test/java/org/apache/nifi/util/timebuffer/TestSynchronousFileWatcher.java",
            "status": "added",
            "additions": 64,
            "deletions": 0,
            "changes": 64,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Ftimebuffer%2FTestSynchronousFileWatcher.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Ftimebuffer%2FTestSynchronousFileWatcher.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Ftimebuffer%2FTestSynchronousFileWatcher.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "39ca3302f8781c8605d55b6e8665bfe5ff99b9e4",
            "filename": "commons/nifi-utils/src/test/java/org/apache/nifi/util/timebuffer/TestTimedBuffer.java",
            "status": "added",
            "additions": 106,
            "deletions": 0,
            "changes": 106,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Ftimebuffer%2FTestTimedBuffer.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Ftimebuffer%2FTestTimedBuffer.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Ftimebuffer%2FTestTimedBuffer.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "434e1a3d3957074dd3b5631bb57c776006616da2",
            "filename": "commons/nifi-web-utils/pom.xml",
            "status": "added",
            "additions": 56,
            "deletions": 0,
            "changes": 56,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-web-utils%2Fpom.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-web-utils%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-web-utils%2Fpom.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "8c0b1f4363ab4c28cc86fd5e780de2a546fab3a6",
            "filename": "commons/nifi-web-utils/src/main/java/org/apache/nifi/web/util/ClientUtils.java",
            "status": "added",
            "additions": 132,
            "deletions": 0,
            "changes": 132,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-web-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fweb%2Futil%2FClientUtils.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-web-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fweb%2Futil%2FClientUtils.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-web-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fweb%2Futil%2FClientUtils.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "4e7f5b6dfd351dd01306266630fb4d23266305e0",
            "filename": "commons/nifi-web-utils/src/main/java/org/apache/nifi/web/util/ObjectMapperResolver.java",
            "status": "added",
            "additions": 48,
            "deletions": 0,
            "changes": 48,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-web-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fweb%2Futil%2FObjectMapperResolver.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-web-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fweb%2Futil%2FObjectMapperResolver.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-web-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fweb%2Futil%2FObjectMapperResolver.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "587b3d8eac6825a156555b8656d596307387f13a",
            "filename": "commons/nifi-web-utils/src/main/java/org/apache/nifi/web/util/WebUtils.java",
            "status": "added",
            "additions": 198,
            "deletions": 0,
            "changes": 198,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-web-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fweb%2Futil%2FWebUtils.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fnifi-web-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fweb%2Futil%2FWebUtils.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fnifi-web-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fweb%2Futil%2FWebUtils.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "0519b7ffb50b80250a2a7e62a0270578bb0cca2c",
            "filename": "commons/processor-utilities/pom.xml",
            "status": "added",
            "additions": 47,
            "deletions": 0,
            "changes": 47,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fprocessor-utilities%2Fpom.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fprocessor-utilities%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fprocessor-utilities%2Fpom.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "1f770930067c8a94c4294cacba25abac7f002ce7",
            "filename": "commons/processor-utilities/src/main/java/org/apache/nifi/processor/util/FlowFileFilters.java",
            "status": "added",
            "additions": 65,
            "deletions": 0,
            "changes": 65,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fprocessor-utilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprocessor%2Futil%2FFlowFileFilters.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fprocessor-utilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprocessor%2Futil%2FFlowFileFilters.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fprocessor-utilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprocessor%2Futil%2FFlowFileFilters.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "0d66df51f88b504a19fa571de8474b85624d3f0f",
            "filename": "commons/processor-utilities/src/main/java/org/apache/nifi/processor/util/SSLProperties.java",
            "status": "added",
            "additions": 226,
            "deletions": 0,
            "changes": 226,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fprocessor-utilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprocessor%2Futil%2FSSLProperties.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fprocessor-utilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprocessor%2Futil%2FSSLProperties.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fprocessor-utilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprocessor%2Futil%2FSSLProperties.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "10748fe0af701789c9ef484d5a2ad5d8f08e9be6",
            "filename": "commons/processor-utilities/src/main/java/org/apache/nifi/processor/util/StandardValidators.java",
            "status": "added",
            "additions": 544,
            "deletions": 0,
            "changes": 544,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fprocessor-utilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprocessor%2Futil%2FStandardValidators.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fprocessor-utilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprocessor%2Futil%2FStandardValidators.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fprocessor-utilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fprocessor%2Futil%2FStandardValidators.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "359def2a9046494e4d663bedf0113433ea0647a6",
            "filename": "commons/processor-utilities/src/test/java/org/apache/nifi/processor/TestFormatUtils.java",
            "status": "added",
            "additions": 40,
            "deletions": 0,
            "changes": 40,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fprocessor-utilities%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fprocessor%2FTestFormatUtils.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fprocessor-utilities%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fprocessor%2FTestFormatUtils.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fprocessor-utilities%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fprocessor%2FTestFormatUtils.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "2ae50c91c7cd9f6893d478a467f67e16334a3526",
            "filename": "commons/processor-utilities/src/test/java/org/apache/nifi/processor/util/TestStandardValidators.java",
            "status": "added",
            "additions": 54,
            "deletions": 0,
            "changes": 54,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fprocessor-utilities%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fprocessor%2Futil%2FTestStandardValidators.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fprocessor-utilities%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fprocessor%2Futil%2FTestStandardValidators.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fprocessor-utilities%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fprocessor%2Futil%2FTestStandardValidators.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "5e5ebc1779733b6684b25a122ed94ddcfd3dcb8b",
            "filename": "commons/remote-communications-utils/pom.xml",
            "status": "added",
            "additions": 29,
            "deletions": 0,
            "changes": 29,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fpom.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fremote-communications-utils%2Fpom.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "77c34c93c187fea884fe3cce15afb1851864034f",
            "filename": "commons/remote-communications-utils/src/main/java/org/apache/nifi/remote/StandardVersionNegotiator.java",
            "status": "added",
            "additions": 81,
            "deletions": 0,
            "changes": 81,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2FStandardVersionNegotiator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2FStandardVersionNegotiator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2FStandardVersionNegotiator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "74f9b3dbdfadd7381c42c1b7e98fde92653c707f",
            "filename": "commons/remote-communications-utils/src/main/java/org/apache/nifi/remote/VersionNegotiator.java",
            "status": "added",
            "additions": 65,
            "deletions": 0,
            "changes": 65,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2FVersionNegotiator.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2FVersionNegotiator.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2FVersionNegotiator.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "05fd915af1a97b56a92db0bba22d085a14ebf111",
            "filename": "commons/remote-communications-utils/src/main/java/org/apache/nifi/remote/exception/TransmissionDisabledException.java",
            "status": "added",
            "additions": 25,
            "deletions": 0,
            "changes": 25,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fexception%2FTransmissionDisabledException.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fexception%2FTransmissionDisabledException.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fexception%2FTransmissionDisabledException.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "71cf894daff719f223cc4f8bcb2e2d49ecdffb67",
            "filename": "commons/remote-communications-utils/src/main/java/org/apache/nifi/remote/io/CompressionInputStream.java",
            "status": "added",
            "additions": 184,
            "deletions": 0,
            "changes": 184,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2FCompressionInputStream.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2FCompressionInputStream.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2FCompressionInputStream.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "bc46b0ff7bd39d755ab9fce793a3b375dd826184",
            "filename": "commons/remote-communications-utils/src/main/java/org/apache/nifi/remote/io/CompressionOutputStream.java",
            "status": "added",
            "additions": 147,
            "deletions": 0,
            "changes": 147,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2FCompressionOutputStream.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2FCompressionOutputStream.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2FCompressionOutputStream.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "e03dfbf131408e4e001216df44191e0251436f46",
            "filename": "commons/remote-communications-utils/src/main/java/org/apache/nifi/remote/io/InterruptableInputStream.java",
            "status": "added",
            "additions": 117,
            "deletions": 0,
            "changes": 117,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2FInterruptableInputStream.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2FInterruptableInputStream.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2FInterruptableInputStream.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "cba5be620ed5fa14bb1a570a2333fca501aae208",
            "filename": "commons/remote-communications-utils/src/main/java/org/apache/nifi/remote/io/InterruptableOutputStream.java",
            "status": "added",
            "additions": 81,
            "deletions": 0,
            "changes": 81,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2FInterruptableOutputStream.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2FInterruptableOutputStream.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2FInterruptableOutputStream.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "68913bdc85e55b6146047f7165775afb1216c922",
            "filename": "commons/remote-communications-utils/src/main/java/org/apache/nifi/remote/io/socket/BufferStateManager.java",
            "status": "added",
            "additions": 111,
            "deletions": 0,
            "changes": 111,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2Fsocket%2FBufferStateManager.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2Fsocket%2FBufferStateManager.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2Fsocket%2FBufferStateManager.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "32a3f26bc5f5a4f87eb44741edc9d90a0cf2e2a4",
            "filename": "commons/remote-communications-utils/src/main/java/org/apache/nifi/remote/io/socket/SocketChannelInputStream.java",
            "status": "added",
            "additions": 157,
            "deletions": 0,
            "changes": 157,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2Fsocket%2FSocketChannelInputStream.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2Fsocket%2FSocketChannelInputStream.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2Fsocket%2FSocketChannelInputStream.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "77049ad1ad34f295e32eef9b2e394ad0effdd506",
            "filename": "commons/remote-communications-utils/src/main/java/org/apache/nifi/remote/io/socket/SocketChannelOutputStream.java",
            "status": "added",
            "additions": 113,
            "deletions": 0,
            "changes": 113,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2Fsocket%2FSocketChannelOutputStream.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2Fsocket%2FSocketChannelOutputStream.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2Fsocket%2FSocketChannelOutputStream.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "581048819aceea8fe4635e547348ce62684a657f",
            "filename": "commons/remote-communications-utils/src/main/java/org/apache/nifi/remote/io/socket/ssl/SSLSocketChannel.java",
            "status": "added",
            "additions": 602,
            "deletions": 0,
            "changes": 602,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2Fsocket%2Fssl%2FSSLSocketChannel.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2Fsocket%2Fssl%2FSSLSocketChannel.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2Fsocket%2Fssl%2FSSLSocketChannel.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "154bd0895ff6d0bb030cf2ad00a616894a4049ee",
            "filename": "commons/remote-communications-utils/src/main/java/org/apache/nifi/remote/io/socket/ssl/SSLSocketChannelInputStream.java",
            "status": "added",
            "additions": 62,
            "deletions": 0,
            "changes": 62,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2Fsocket%2Fssl%2FSSLSocketChannelInputStream.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2Fsocket%2Fssl%2FSSLSocketChannelInputStream.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2Fsocket%2Fssl%2FSSLSocketChannelInputStream.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "ce4e4200fc5f83f7b36368bb9f0afc1aa35100d1",
            "filename": "commons/remote-communications-utils/src/main/java/org/apache/nifi/remote/io/socket/ssl/SSLSocketChannelOutputStream.java",
            "status": "added",
            "additions": 53,
            "deletions": 0,
            "changes": 53,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2Fsocket%2Fssl%2FSSLSocketChannelOutputStream.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2Fsocket%2Fssl%2FSSLSocketChannelOutputStream.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fremote-communications-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2Fsocket%2Fssl%2FSSLSocketChannelOutputStream.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "bd30a966b6b1663fe982b9a96146b0defc98a333",
            "filename": "commons/remote-communications-utils/src/test/java/org/apache/nifi/remote/io/TestCompressionInputOutputStreams.java",
            "status": "added",
            "additions": 153,
            "deletions": 0,
            "changes": 153,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2FTestCompressionInputOutputStreams.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fremote-communications-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2FTestCompressionInputOutputStreams.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fremote-communications-utils%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fremote%2Fio%2FTestCompressionInputOutputStreams.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "569958fc7e0ca0158e0d5dd940b571697dd39c6a",
            "filename": "commons/search-utils/pom.xml",
            "status": "added",
            "additions": 32,
            "deletions": 0,
            "changes": 32,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fsearch-utils%2Fpom.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fsearch-utils%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fsearch-utils%2Fpom.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "59b444a457519c5a3d00bc8e0451971ca467cc51",
            "filename": "commons/search-utils/src/main/java/org/apache/nifi/util/search/Search.java",
            "status": "added",
            "additions": 57,
            "deletions": 0,
            "changes": 57,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fsearch-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Fsearch%2FSearch.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fsearch-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Fsearch%2FSearch.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fsearch-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Fsearch%2FSearch.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "62de964b9fa02d7f437105b0d28ac342fcd57ba8",
            "filename": "commons/search-utils/src/main/java/org/apache/nifi/util/search/SearchTerm.java",
            "status": "added",
            "additions": 141,
            "deletions": 0,
            "changes": 141,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fsearch-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Fsearch%2FSearchTerm.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fsearch-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Fsearch%2FSearchTerm.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fsearch-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Fsearch%2FSearchTerm.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "3b8afaf39cfbdd475ad5848eac7506bd464e10ca",
            "filename": "commons/search-utils/src/main/java/org/apache/nifi/util/search/ahocorasick/AhoCorasick.java",
            "status": "added",
            "additions": 155,
            "deletions": 0,
            "changes": 155,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fsearch-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Fsearch%2Fahocorasick%2FAhoCorasick.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fsearch-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Fsearch%2Fahocorasick%2FAhoCorasick.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fsearch-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Fsearch%2Fahocorasick%2FAhoCorasick.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "0ac325cf563211c06cb798028603a307aaf8cdbf",
            "filename": "commons/search-utils/src/main/java/org/apache/nifi/util/search/ahocorasick/Node.java",
            "status": "added",
            "additions": 72,
            "deletions": 0,
            "changes": 72,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fsearch-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Fsearch%2Fahocorasick%2FNode.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fsearch-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Fsearch%2Fahocorasick%2FNode.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fsearch-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Fsearch%2Fahocorasick%2FNode.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "6d36ad0f4f1b25e07de4ebf4ccbf51195d63243e",
            "filename": "commons/search-utils/src/main/java/org/apache/nifi/util/search/ahocorasick/SearchState.java",
            "status": "added",
            "additions": 63,
            "deletions": 0,
            "changes": 63,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fsearch-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Fsearch%2Fahocorasick%2FSearchState.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fsearch-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Fsearch%2Fahocorasick%2FSearchState.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fsearch-utils%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Futil%2Fsearch%2Fahocorasick%2FSearchState.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "19f2e002ce4b64ea5d8ee046e9587984ed33e630",
            "filename": "commons/wali/.gitignore",
            "status": "added",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fwali%2F.gitignore",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fwali%2F.gitignore",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fwali%2F.gitignore?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "ce04973a1e17cda4c28d9f246d0af01b4a60524c",
            "filename": "commons/wali/pom.xml",
            "status": "added",
            "additions": 42,
            "deletions": 0,
            "changes": 42,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fwali%2Fpom.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fwali%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fwali%2Fpom.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "95cf4da06c532b0317c04dd0091098b5f3d63407",
            "filename": "commons/wali/src/main/java/org/wali/MinimalLockingWriteAheadLog.java",
            "status": "added",
            "additions": 1008,
            "deletions": 0,
            "changes": 1008,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fwali%2Fsrc%2Fmain%2Fjava%2Forg%2Fwali%2FMinimalLockingWriteAheadLog.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fwali%2Fsrc%2Fmain%2Fjava%2Forg%2Fwali%2FMinimalLockingWriteAheadLog.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fwali%2Fsrc%2Fmain%2Fjava%2Forg%2Fwali%2FMinimalLockingWriteAheadLog.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "bbc7efb8ae68b6de21d618e552ac233ed9aa5104",
            "filename": "commons/wali/src/main/java/org/wali/SerDe.java",
            "status": "added",
            "additions": 128,
            "deletions": 0,
            "changes": 128,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fwali%2Fsrc%2Fmain%2Fjava%2Forg%2Fwali%2FSerDe.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fwali%2Fsrc%2Fmain%2Fjava%2Forg%2Fwali%2FSerDe.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fwali%2Fsrc%2Fmain%2Fjava%2Forg%2Fwali%2FSerDe.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "ffb11cadfccd4121d5015cd80ac7685284253989",
            "filename": "commons/wali/src/main/java/org/wali/SyncListener.java",
            "status": "added",
            "additions": 62,
            "deletions": 0,
            "changes": 62,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fwali%2Fsrc%2Fmain%2Fjava%2Forg%2Fwali%2FSyncListener.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fwali%2Fsrc%2Fmain%2Fjava%2Forg%2Fwali%2FSyncListener.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fwali%2Fsrc%2Fmain%2Fjava%2Forg%2Fwali%2FSyncListener.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "1b039f82fcbbf90e15ac9de355af2499aaf3af1a",
            "filename": "commons/wali/src/main/java/org/wali/UpdateType.java",
            "status": "added",
            "additions": 49,
            "deletions": 0,
            "changes": 49,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fwali%2Fsrc%2Fmain%2Fjava%2Forg%2Fwali%2FUpdateType.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fwali%2Fsrc%2Fmain%2Fjava%2Forg%2Fwali%2FUpdateType.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fwali%2Fsrc%2Fmain%2Fjava%2Forg%2Fwali%2FUpdateType.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "4567872f6d65802dcad2150c3634fd79d63f599f",
            "filename": "commons/wali/src/main/java/org/wali/WriteAheadRepository.java",
            "status": "added",
            "additions": 122,
            "deletions": 0,
            "changes": 122,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fwali%2Fsrc%2Fmain%2Fjava%2Forg%2Fwali%2FWriteAheadRepository.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fwali%2Fsrc%2Fmain%2Fjava%2Forg%2Fwali%2FWriteAheadRepository.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fwali%2Fsrc%2Fmain%2Fjava%2Forg%2Fwali%2FWriteAheadRepository.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "e0f7f969aa978930ecccf314920f0089a6679014",
            "filename": "commons/wali/src/test/java/org/wali/DummyRecord.java",
            "status": "added",
            "additions": 61,
            "deletions": 0,
            "changes": 61,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fwali%2Fsrc%2Ftest%2Fjava%2Forg%2Fwali%2FDummyRecord.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fwali%2Fsrc%2Ftest%2Fjava%2Forg%2Fwali%2FDummyRecord.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fwali%2Fsrc%2Ftest%2Fjava%2Forg%2Fwali%2FDummyRecord.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "8cc786061060b79acb346fb4e2d3fca34248b150",
            "filename": "commons/wali/src/test/java/org/wali/DummyRecordSerde.java",
            "status": "added",
            "additions": 107,
            "deletions": 0,
            "changes": 107,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fwali%2Fsrc%2Ftest%2Fjava%2Forg%2Fwali%2FDummyRecordSerde.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fwali%2Fsrc%2Ftest%2Fjava%2Forg%2Fwali%2FDummyRecordSerde.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fwali%2Fsrc%2Ftest%2Fjava%2Forg%2Fwali%2FDummyRecordSerde.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "57f3495b709e878137191822f611851d85921d16",
            "filename": "commons/wali/src/test/java/org/wali/TestMinimalLockingWriteAheadLog.java",
            "status": "added",
            "additions": 298,
            "deletions": 0,
            "changes": 298,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fwali%2Fsrc%2Ftest%2Fjava%2Forg%2Fwali%2FTestMinimalLockingWriteAheadLog.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/commons%2Fwali%2Fsrc%2Ftest%2Fjava%2Forg%2Fwali%2FTestMinimalLockingWriteAheadLog.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/commons%2Fwali%2Fsrc%2Ftest%2Fjava%2Forg%2Fwali%2FTestMinimalLockingWriteAheadLog.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "f8d823f6eae6edfc9df9da14450699bb4c4ec205",
            "filename": "extensions/file-authorization-provider/pom.xml",
            "status": "added",
            "additions": 90,
            "deletions": 0,
            "changes": 90,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/extensions%2Ffile-authorization-provider%2Fpom.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/extensions%2Ffile-authorization-provider%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/extensions%2Ffile-authorization-provider%2Fpom.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "55f59ba6c90b4ba5921d4411b792d4d6bdf02cb1",
            "filename": "extensions/file-authorization-provider/src/main/java/org/apache/nifi/authorization/FileAuthorizationProvider.java",
            "status": "added",
            "additions": 568,
            "deletions": 0,
            "changes": 568,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/extensions%2Ffile-authorization-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fauthorization%2FFileAuthorizationProvider.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/extensions%2Ffile-authorization-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fauthorization%2FFileAuthorizationProvider.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/extensions%2Ffile-authorization-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fauthorization%2FFileAuthorizationProvider.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "93d2941bc414ef40e5e066092fc750d89d923f30",
            "filename": "extensions/file-authorization-provider/src/main/resources/META-INF/services/org.apache.nifi.authorization.AuthorityProvider",
            "status": "added",
            "additions": 15,
            "deletions": 0,
            "changes": 15,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/extensions%2Ffile-authorization-provider%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fservices%2Forg.apache.nifi.authorization.AuthorityProvider",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/extensions%2Ffile-authorization-provider%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fservices%2Forg.apache.nifi.authorization.AuthorityProvider",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/extensions%2Ffile-authorization-provider%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fservices%2Forg.apache.nifi.authorization.AuthorityProvider?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "4ee1e17226ab8bffdf6ce096b4ddd9cb37d1f069",
            "filename": "extensions/file-authorization-provider/src/main/xsd/users.xsd",
            "status": "added",
            "additions": 64,
            "deletions": 0,
            "changes": 64,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/extensions%2Ffile-authorization-provider%2Fsrc%2Fmain%2Fxsd%2Fusers.xsd",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/extensions%2Ffile-authorization-provider%2Fsrc%2Fmain%2Fxsd%2Fusers.xsd",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/extensions%2Ffile-authorization-provider%2Fsrc%2Fmain%2Fxsd%2Fusers.xsd?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "3d0196dbe1f4f603294958e23386458cd0a1038b",
            "filename": "extensions/file-authorization-provider/src/test/java/org/apache/nifi/authorization/FileAuthorizationProviderTest.java",
            "status": "added",
            "additions": 127,
            "deletions": 0,
            "changes": 127,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/extensions%2Ffile-authorization-provider%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fauthorization%2FFileAuthorizationProviderTest.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/extensions%2Ffile-authorization-provider%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fauthorization%2FFileAuthorizationProviderTest.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/extensions%2Ffile-authorization-provider%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fnifi%2Fauthorization%2FFileAuthorizationProviderTest.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "855321a312a62317ab5f5b172ae085b54e0616c1",
            "filename": "misc/build-order.sh",
            "status": "added",
            "additions": 79,
            "deletions": 0,
            "changes": 79,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/misc%2Fbuild-order.sh",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/misc%2Fbuild-order.sh",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/misc%2Fbuild-order.sh?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "3888df39ff903fd90ae0aece808a34587cf3585b",
            "filename": "misc/nar-maven-plugin/pom.xml",
            "status": "added",
            "additions": 83,
            "deletions": 0,
            "changes": 83,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/misc%2Fnar-maven-plugin%2Fpom.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/misc%2Fnar-maven-plugin%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/misc%2Fnar-maven-plugin%2Fpom.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "263fe8820ed1868a0dc3b81332ea417e7d334f92",
            "filename": "misc/nar-maven-plugin/src/main/java/nifi/NarMojo.java",
            "status": "added",
            "additions": 610,
            "deletions": 0,
            "changes": 610,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/misc%2Fnar-maven-plugin%2Fsrc%2Fmain%2Fjava%2Fnifi%2FNarMojo.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/misc%2Fnar-maven-plugin%2Fsrc%2Fmain%2Fjava%2Fnifi%2FNarMojo.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/misc%2Fnar-maven-plugin%2Fsrc%2Fmain%2Fjava%2Fnifi%2FNarMojo.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "0680d18e23a50280f9a6e4a57d655daa5ff3a97e",
            "filename": "misc/nar-maven-plugin/src/main/resources/META-INF/plexus/components.xml",
            "status": "added",
            "additions": 52,
            "deletions": 0,
            "changes": 52,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/misc%2Fnar-maven-plugin%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fplexus%2Fcomponents.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/misc%2Fnar-maven-plugin%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fplexus%2Fcomponents.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/misc%2Fnar-maven-plugin%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fplexus%2Fcomponents.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "6280349ae0ea70f2694728ef50a7ed45124095f8",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-client-service/pom.xml",
            "status": "added",
            "additions": 67,
            "deletions": 0,
            "changes": 67,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-client-service%2Fpom.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-client-service%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-client-service%2Fpom.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "f838c2f0d79e6760fe19466860da2ce7aeb19d50",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-client-service/src/main/java/org/apache/nifi/distributed/cache/client/CommsSession.java",
            "status": "added",
            "additions": 46,
            "deletions": 0,
            "changes": 46,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-client-service%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fclient%2FCommsSession.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-client-service%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fclient%2FCommsSession.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-client-service%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fclient%2FCommsSession.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "ee96660a2dd9abd418098d824160166d9f9176c5",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-client-service/src/main/java/org/apache/nifi/distributed/cache/client/DistributedMapCacheClientService.java",
            "status": "added",
            "additions": 301,
            "deletions": 0,
            "changes": 301,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-client-service%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fclient%2FDistributedMapCacheClientService.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-client-service%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fclient%2FDistributedMapCacheClientService.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-client-service%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fclient%2FDistributedMapCacheClientService.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "1d7c94c2e5af0b150d602cb098b035ac6600a6bc",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-client-service/src/main/java/org/apache/nifi/distributed/cache/client/DistributedSetCacheClientService.java",
            "status": "added",
            "additions": 212,
            "deletions": 0,
            "changes": 212,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-client-service%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fclient%2FDistributedSetCacheClientService.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-client-service%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fclient%2FDistributedSetCacheClientService.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-client-service%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fclient%2FDistributedSetCacheClientService.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "c8be082facddea5a1a0ce9926dd94713a3061271",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-client-service/src/main/java/org/apache/nifi/distributed/cache/client/SSLCommsSession.java",
            "status": "added",
            "additions": 106,
            "deletions": 0,
            "changes": 106,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-client-service%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fclient%2FSSLCommsSession.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-client-service%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fclient%2FSSLCommsSession.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-client-service%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fclient%2FSSLCommsSession.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "bbe2917e9f836e47ac109063f7c7b5ca5fef5986",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-client-service/src/main/java/org/apache/nifi/distributed/cache/client/StandardCommsSession.java",
            "status": "added",
            "additions": 124,
            "deletions": 0,
            "changes": 124,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-client-service%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fclient%2FStandardCommsSession.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-client-service%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fclient%2FStandardCommsSession.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-client-service%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fclient%2FStandardCommsSession.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "a91f7ee4f40e969a4b4b985d684d946f16bfe002",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-client-service/src/main/resources/META-INF/services/org.apache.nifi.controller.ControllerService",
            "status": "added",
            "additions": 16,
            "deletions": 0,
            "changes": 16,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-client-service%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fservices%2Forg.apache.nifi.controller.ControllerService",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-client-service%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fservices%2Forg.apache.nifi.controller.ControllerService",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-client-service%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fservices%2Forg.apache.nifi.controller.ControllerService?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "d5f359567e51b6b620bfbd2083606377668fd8b5",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-client-service/src/main/resources/docs/org.apache.nifi.distributed.cache.client.DistributedMapCacheClientService/index.html",
            "status": "added",
            "additions": 78,
            "deletions": 0,
            "changes": 78,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-client-service%2Fsrc%2Fmain%2Fresources%2Fdocs%2Forg.apache.nifi.distributed.cache.client.DistributedMapCacheClientService%2Findex.html",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-client-service%2Fsrc%2Fmain%2Fresources%2Fdocs%2Forg.apache.nifi.distributed.cache.client.DistributedMapCacheClientService%2Findex.html",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-client-service%2Fsrc%2Fmain%2Fresources%2Fdocs%2Forg.apache.nifi.distributed.cache.client.DistributedMapCacheClientService%2Findex.html?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-client-service/src/main/resources/docs/org.apache.nifi.distributed.cache.client.DistributedSetCacheClientService/index.html",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-client-service%2Fsrc%2Fmain%2Fresources%2Fdocs%2Forg.apache.nifi.distributed.cache.client.DistributedSetCacheClientService%2Findex.html",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-client-service%2Fsrc%2Fmain%2Fresources%2Fdocs%2Forg.apache.nifi.distributed.cache.client.DistributedSetCacheClientService%2Findex.html",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-client-service%2Fsrc%2Fmain%2Fresources%2Fdocs%2Forg.apache.nifi.distributed.cache.client.DistributedSetCacheClientService%2Findex.html?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "bc612aeb86e1184aa8ecda2b737d555a6115bb53",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-protocol/pom.xml",
            "status": "added",
            "additions": 39,
            "deletions": 0,
            "changes": 39,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-protocol%2Fpom.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-protocol%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-protocol%2Fpom.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "da2acade493f5fa43c40e64ca736bd8a74e388b9",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-protocol/src/main/java/org/apache/nifi/distributed/cache/protocol/ProtocolHandshake.java",
            "status": "added",
            "additions": 119,
            "deletions": 0,
            "changes": 119,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fprotocol%2FProtocolHandshake.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fprotocol%2FProtocolHandshake.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fprotocol%2FProtocolHandshake.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "8049d42b20fdef6accb4f86401cc53ffc188782f",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-protocol/src/main/java/org/apache/nifi/distributed/cache/protocol/exception/HandshakeException.java",
            "status": "added",
            "additions": 27,
            "deletions": 0,
            "changes": 27,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fprotocol%2Fexception%2FHandshakeException.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fprotocol%2Fexception%2FHandshakeException.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fprotocol%2Fexception%2FHandshakeException.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "5dec322595b8d12efbb02c19dddb9b5088772b3c",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-server/pom.xml",
            "status": "added",
            "additions": 81,
            "deletions": 0,
            "changes": 81,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fpom.xml",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fpom.xml?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "9b4e70ef3bffb5f7807eb02c374e87f83d6a756c",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-server/src/main/java/org/apache/nifi/distributed/cache/server/AbstractCacheServer.java",
            "status": "added",
            "additions": 199,
            "deletions": 0,
            "changes": 199,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2FAbstractCacheServer.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2FAbstractCacheServer.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2FAbstractCacheServer.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "71ac56d0d293170c0b164bd5414b9cb991d6a671",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-server/src/main/java/org/apache/nifi/distributed/cache/server/CacheRecord.java",
            "status": "added",
            "additions": 57,
            "deletions": 0,
            "changes": 57,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2FCacheRecord.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2FCacheRecord.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2FCacheRecord.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "2c85cd85da4364b616596ecd7886893f90ee7b1c",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-server/src/main/java/org/apache/nifi/distributed/cache/server/CacheServer.java",
            "status": "added",
            "additions": 26,
            "deletions": 0,
            "changes": 26,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2FCacheServer.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2FCacheServer.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2FCacheServer.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "0f962d0249ab5f2000494708d954bc303e8cfead",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-server/src/main/java/org/apache/nifi/distributed/cache/server/DistributedCacheServer.java",
            "status": "added",
            "additions": 107,
            "deletions": 0,
            "changes": 107,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2FDistributedCacheServer.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2FDistributedCacheServer.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2FDistributedCacheServer.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "426573fdaf62f7f56ea324838e5d250bdd0b212b",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-server/src/main/java/org/apache/nifi/distributed/cache/server/DistributedSetCacheServer.java",
            "status": "added",
            "additions": 68,
            "deletions": 0,
            "changes": 68,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2FDistributedSetCacheServer.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2FDistributedSetCacheServer.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2FDistributedSetCacheServer.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "60bd2c19fde0f457327ddbce5778421a9934c462",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-server/src/main/java/org/apache/nifi/distributed/cache/server/EvictionPolicy.java",
            "status": "added",
            "additions": 73,
            "deletions": 0,
            "changes": 73,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2FEvictionPolicy.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2FEvictionPolicy.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2FEvictionPolicy.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "5d2c0f6248c7fc876f6e0ce4b1390209ca4e7b09",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-server/src/main/java/org/apache/nifi/distributed/cache/server/SetCacheServer.java",
            "status": "added",
            "additions": 104,
            "deletions": 0,
            "changes": 104,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2FSetCacheServer.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2FSetCacheServer.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2FSetCacheServer.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "920529de830b88b92302d7e0bd3ca67d0dffcd4a",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-server/src/main/java/org/apache/nifi/distributed/cache/server/map/DistributedMapCacheServer.java",
            "status": "added",
            "additions": 71,
            "deletions": 0,
            "changes": 71,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2Fmap%2FDistributedMapCacheServer.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2Fmap%2FDistributedMapCacheServer.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2Fmap%2FDistributedMapCacheServer.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "534cb0b2045260282ae25c9d3f5d1bdb58ed5576",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-server/src/main/java/org/apache/nifi/distributed/cache/server/map/MapCache.java",
            "status": "added",
            "additions": 29,
            "deletions": 0,
            "changes": 29,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2Fmap%2FMapCache.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2Fmap%2FMapCache.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2Fmap%2FMapCache.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "b0ab0c4003f4da82089463fc584c2f1b960b7bf1",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-server/src/main/java/org/apache/nifi/distributed/cache/server/map/MapCacheRecord.java",
            "status": "added",
            "additions": 58,
            "deletions": 0,
            "changes": 58,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2Fmap%2FMapCacheRecord.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2Fmap%2FMapCacheRecord.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2Fmap%2FMapCacheRecord.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "3e8dd0e2480af88329571558166ffde25776d676",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-server/src/main/java/org/apache/nifi/distributed/cache/server/map/MapCacheServer.java",
            "status": "added",
            "additions": 145,
            "deletions": 0,
            "changes": 145,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2Fmap%2FMapCacheServer.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2Fmap%2FMapCacheServer.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2Fmap%2FMapCacheServer.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "29695eb32ab7dd716b5790748184c1bdf384c710",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-server/src/main/java/org/apache/nifi/distributed/cache/server/map/MapPutResult.java",
            "status": "added",
            "additions": 59,
            "deletions": 0,
            "changes": 59,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2Fmap%2FMapPutResult.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2Fmap%2FMapPutResult.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2Fmap%2FMapPutResult.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "77fb77db0c64645a42e18ed17e393c4690551e6b",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-server/src/main/java/org/apache/nifi/distributed/cache/server/map/PersistentMapCache.java",
            "status": "added",
            "additions": 210,
            "deletions": 0,
            "changes": 210,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2Fmap%2FPersistentMapCache.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2Fmap%2FPersistentMapCache.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2Fmap%2FPersistentMapCache.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "10139f149bb117ca64ba0aa032f97123037dfbf7",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-server/src/main/java/org/apache/nifi/distributed/cache/server/map/SimpleMapCache.java",
            "status": "added",
            "additions": 165,
            "deletions": 0,
            "changes": 165,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2Fmap%2FSimpleMapCache.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2Fmap%2FSimpleMapCache.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2Fmap%2FSimpleMapCache.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        },
        {
            "sha": "4d75fc00d6304984a31a7860c086670bb1278a1d",
            "filename": "nar-bundles/distributed-cache-services-bundle/distributed-cache-server/src/main/java/org/apache/nifi/distributed/cache/server/set/PersistentSetCache.java",
            "status": "added",
            "additions": 194,
            "deletions": 0,
            "changes": 194,
            "blob_url": "https://github.com/apache/nifi/blob/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2Fset%2FPersistentSetCache.java",
            "raw_url": "https://github.com/apache/nifi/raw/4d998c12c95a6e5ce3d66c0d861e75e33b5cf013/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2Fset%2FPersistentSetCache.java",
            "contents_url": "https://api.github.com/repos/apache/nifi/contents/nar-bundles%2Fdistributed-cache-services-bundle%2Fdistributed-cache-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fnifi%2Fdistributed%2Fcache%2Fserver%2Fset%2FPersistentSetCache.java?ref=4d998c12c95a6e5ce3d66c0d861e75e33b5cf013"
        }
    ]
}