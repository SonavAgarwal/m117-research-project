{
    "sha": "26ff65ccf13111c42942d8652e9e616e91e1fd08",
    "node_id": "MDY6Q29tbWl0NjY1MDUzOToyNmZmNjVjY2YxMzExMWM0Mjk0MmQ4NjUyZTllNjE2ZTkxZTFmZDA4",
    "commit": {
        "author": {
            "name": "Henrik Nyman",
            "email": "henrik.nyman@neotechnology.com",
            "date": "2016-08-30T11:33:50Z"
        },
        "committer": {
            "name": "Henrik Nyman",
            "email": "henrik.nyman@neotechnology.com",
            "date": "2016-08-31T14:25:37Z"
        },
        "message": "Support StartTLS for authorization using system account",
        "tree": {
            "sha": "4aa83bfcaadd625eb7a1f9b78272f30f7557ec3f",
            "url": "https://api.github.com/repos/neo4j/neo4j/git/trees/4aa83bfcaadd625eb7a1f9b78272f30f7557ec3f"
        },
        "url": "https://api.github.com/repos/neo4j/neo4j/git/commits/26ff65ccf13111c42942d8652e9e616e91e1fd08",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/neo4j/neo4j/commits/26ff65ccf13111c42942d8652e9e616e91e1fd08",
    "html_url": "https://github.com/neo4j/neo4j/commit/26ff65ccf13111c42942d8652e9e616e91e1fd08",
    "comments_url": "https://api.github.com/repos/neo4j/neo4j/commits/26ff65ccf13111c42942d8652e9e616e91e1fd08/comments",
    "author": {
        "login": "henriknyman",
        "id": 13960026,
        "node_id": "MDQ6VXNlcjEzOTYwMDI2",
        "avatar_url": "https://avatars.githubusercontent.com/u/13960026?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/henriknyman",
        "html_url": "https://github.com/henriknyman",
        "followers_url": "https://api.github.com/users/henriknyman/followers",
        "following_url": "https://api.github.com/users/henriknyman/following{/other_user}",
        "gists_url": "https://api.github.com/users/henriknyman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/henriknyman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/henriknyman/subscriptions",
        "organizations_url": "https://api.github.com/users/henriknyman/orgs",
        "repos_url": "https://api.github.com/users/henriknyman/repos",
        "events_url": "https://api.github.com/users/henriknyman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/henriknyman/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "henriknyman",
        "id": 13960026,
        "node_id": "MDQ6VXNlcjEzOTYwMDI2",
        "avatar_url": "https://avatars.githubusercontent.com/u/13960026?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/henriknyman",
        "html_url": "https://github.com/henriknyman",
        "followers_url": "https://api.github.com/users/henriknyman/followers",
        "following_url": "https://api.github.com/users/henriknyman/following{/other_user}",
        "gists_url": "https://api.github.com/users/henriknyman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/henriknyman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/henriknyman/subscriptions",
        "organizations_url": "https://api.github.com/users/henriknyman/orgs",
        "repos_url": "https://api.github.com/users/henriknyman/repos",
        "events_url": "https://api.github.com/users/henriknyman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/henriknyman/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "1b74de13fa49bba04fee9056de456fe936f4dee0",
            "url": "https://api.github.com/repos/neo4j/neo4j/commits/1b74de13fa49bba04fee9056de456fe936f4dee0",
            "html_url": "https://github.com/neo4j/neo4j/commit/1b74de13fa49bba04fee9056de456fe936f4dee0"
        }
    ],
    "stats": {
        "total": 97,
        "additions": 76,
        "deletions": 21
    },
    "files": [
        {
            "sha": "d0a65d9830ebd9e4c4c9f9a84c5ef4cd5515a2d8",
            "filename": "enterprise/security/src/main/java/org/neo4j/server/security/enterprise/auth/LdapRealm.java",
            "status": "modified",
            "additions": 61,
            "deletions": 19,
            "changes": 80,
            "blob_url": "https://github.com/neo4j/neo4j/blob/26ff65ccf13111c42942d8652e9e616e91e1fd08/enterprise%2Fsecurity%2Fsrc%2Fmain%2Fjava%2Forg%2Fneo4j%2Fserver%2Fsecurity%2Fenterprise%2Fauth%2FLdapRealm.java",
            "raw_url": "https://github.com/neo4j/neo4j/raw/26ff65ccf13111c42942d8652e9e616e91e1fd08/enterprise%2Fsecurity%2Fsrc%2Fmain%2Fjava%2Forg%2Fneo4j%2Fserver%2Fsecurity%2Fenterprise%2Fauth%2FLdapRealm.java",
            "contents_url": "https://api.github.com/repos/neo4j/neo4j/contents/enterprise%2Fsecurity%2Fsrc%2Fmain%2Fjava%2Forg%2Fneo4j%2Fserver%2Fsecurity%2Fenterprise%2Fauth%2FLdapRealm.java?ref=26ff65ccf13111c42942d8652e9e616e91e1fd08",
            "patch": "@@ -21,6 +21,7 @@\n \n import org.apache.shiro.authc.AuthenticationInfo;\n import org.apache.shiro.authc.AuthenticationToken;\n+import org.apache.shiro.authz.AuthorizationException;\n import org.apache.shiro.authz.AuthorizationInfo;\n import org.apache.shiro.authz.Permission;\n import org.apache.shiro.authz.SimpleAuthorizationInfo;\n@@ -130,43 +131,60 @@ protected AuthenticationInfo queryForAuthenticationInfo( AuthenticationToken tok\n     protected AuthenticationInfo queryForAuthenticationInfoUsingStartTls( AuthenticationToken token,\n             LdapContextFactory ldapContextFactory ) throws NamingException\n     {\n-        JndiLdapContextFactory jndiLdapContextFactory = (JndiLdapContextFactory) ldapContextFactory;\n-        Object principal = token.getPrincipal();\n+        Object principal = getLdapPrincipal(token);\n         Object credentials = token.getCredentials();\n \n-        principal = getLdapPrincipal(token);\n-\n         LdapContext ctx = null;\n+\n+        try {\n+            ctx = getLdapContextUsingStartTls( ldapContextFactory, principal, credentials );\n+\n+            return createAuthenticationInfo(token, principal, credentials, ctx);\n+        }\n+        finally\n+        {\n+            LdapUtils.closeContext( ctx );\n+        }\n+    }\n+\n+    private LdapContext getLdapContextUsingStartTls( LdapContextFactory ldapContextFactory,\n+            Object principal, Object credentials ) throws NamingException\n+    {\n+        JndiLdapContextFactory jndiLdapContextFactory = (JndiLdapContextFactory) ldapContextFactory;\n         Hashtable<String, Object> env = new Hashtable<>();\n         env.put( Context.INITIAL_CONTEXT_FACTORY, jndiLdapContextFactory.getContextFactoryClassName() );\n         env.put( Context.PROVIDER_URL, jndiLdapContextFactory.getUrl() );\n \n-        try {\n+        LdapContext ctx = null;\n+\n+        try\n+        {\n             ctx = new InitialLdapContext( env, null );\n \n             StartTlsRequest startTlsRequest = new StartTlsRequest();\n             StartTlsResponse tls = (StartTlsResponse) ctx.extendedOperation( startTlsRequest );\n-            try\n-            {\n-                tls.negotiate();\n-            }\n-            catch ( IOException e )\n-            {\n-                log.error( \"Failed to negotiate TLS connection\", e );\n-                throw new CommunicationException( e.getMessage() );\n-            }\n \n-            ctx.addToEnvironment( Context.SECURITY_AUTHENTICATION, ((JndiLdapContextFactory) ldapContextFactory).getAuthenticationMechanism() );\n+            tls.negotiate();\n+\n+            ctx.addToEnvironment( Context.SECURITY_AUTHENTICATION,\n+                    jndiLdapContextFactory.getAuthenticationMechanism() );\n             ctx.addToEnvironment( Context.SECURITY_PRINCIPAL, principal );\n             ctx.addToEnvironment( Context.SECURITY_CREDENTIALS, credentials );\n \n             ctx.reconnect( ctx.getConnectControls() );\n \n-            return createAuthenticationInfo(token, principal, credentials, ctx);\n+            return ctx;\n         }\n-        finally\n+        catch ( IOException e )\n         {\n             LdapUtils.closeContext( ctx );\n+            log.error( \"Failed to negotiate TLS connection\", e );\n+            throw new CommunicationException( e.getMessage() );\n+        }\n+        catch ( Throwable throwable )\n+        {\n+            LdapUtils.closeContext( ctx );\n+            throw throwable;\n         }\n     }\n \n@@ -181,7 +199,8 @@ protected AuthorizationInfo queryForAuthorizationInfo( PrincipalCollection princ\n             if ( useSystemAccountForAuthorization )\n             {\n                 // Perform context search using the system context\n-                LdapContext ldapContext = ldapContextFactory.getSystemLdapContext();\n+                LdapContext ldapContext = useStartTls ? getSystemLdapContextUsingStartTls( ldapContextFactory ) :\n+                                          ldapContextFactory.getSystemLdapContext();\n \n                 Set<String> roleNames;\n                 try\n@@ -211,6 +230,14 @@ protected AuthorizationInfo queryForAuthorizationInfo( PrincipalCollection princ\n         return null;\n     }\n \n+    private LdapContext getSystemLdapContextUsingStartTls( LdapContextFactory ldapContextFactory )\n+            throws NamingException\n+    {\n+        JndiLdapContextFactory jndiLdapContextFactory = (JndiLdapContextFactory) ldapContextFactory;\n+        return getLdapContextUsingStartTls( ldapContextFactory, jndiLdapContextFactory.getSystemUsername(),\n+                jndiLdapContextFactory.getSystemPassword() );\n+    }\n+\n     @Override\n     protected AuthenticationInfo createAuthenticationInfo( AuthenticationToken token, Object ldapPrincipal,\n             Object ldapCredentials, LdapContext ldapContext )\n@@ -243,6 +270,20 @@ protected void clearCachedAuthorizationInfo( PrincipalCollection principals )\n         authorizationInfoCache.remove( username );\n     }\n \n+    @Override\n+    protected AuthorizationInfo doGetAuthorizationInfo( PrincipalCollection principals )\n+    {\n+        try\n+        {\n+            return super.doGetAuthorizationInfo( principals );\n+        }\n+        catch ( AuthorizationException e )\n+        {\n+            log.error( \"%s Caused by: %s\", e.getMessage(), e.getCause().getMessage() );\n+            throw e;\n+        }\n+    }\n+\n     private void cacheAuthorizationInfo( String username, Set<String> roleNames )\n     {\n         // Ideally we would like to use the existing authorizationCache in our base class,\n@@ -298,7 +339,8 @@ private void configureRealm( Config config )\n \n     private String parseLdapServerUrl( String rawLdapServer )\n     {\n-        return rawLdapServer.contains( \"://\" ) ? rawLdapServer : \"ldap://\" + rawLdapServer;\n+        return (rawLdapServer == null) ? null :\n+               rawLdapServer.contains( \"://\" ) ? rawLdapServer : \"ldap://\" + rawLdapServer;\n     }\n \n     Map<String,Collection<String>> parseGroupToRoleMapping( String groupToRoleMappingString )"
        },
        {
            "sha": "1e2aa7def748f2a03939a5fcd54bfc4c6bb35541",
            "filename": "enterprise/security/src/main/java/org/neo4j/server/security/enterprise/auth/SecuritySettings.java",
            "status": "modified",
            "additions": 6,
            "deletions": 2,
            "changes": 8,
            "blob_url": "https://github.com/neo4j/neo4j/blob/26ff65ccf13111c42942d8652e9e616e91e1fd08/enterprise%2Fsecurity%2Fsrc%2Fmain%2Fjava%2Forg%2Fneo4j%2Fserver%2Fsecurity%2Fenterprise%2Fauth%2FSecuritySettings.java",
            "raw_url": "https://github.com/neo4j/neo4j/raw/26ff65ccf13111c42942d8652e9e616e91e1fd08/enterprise%2Fsecurity%2Fsrc%2Fmain%2Fjava%2Forg%2Fneo4j%2Fserver%2Fsecurity%2Fenterprise%2Fauth%2FSecuritySettings.java",
            "contents_url": "https://api.github.com/repos/neo4j/neo4j/contents/enterprise%2Fsecurity%2Fsrc%2Fmain%2Fjava%2Forg%2Fneo4j%2Fserver%2Fsecurity%2Fenterprise%2Fauth%2FSecuritySettings.java?ref=26ff65ccf13111c42942d8652e9e616e91e1fd08",
            "patch": "@@ -64,7 +64,9 @@ public class SecuritySettings\n     public static final Setting<Boolean> plugin_authorization_enabled =\n             setting( \"dbms.security.realms.plugin.authorization_enabled\", BOOLEAN, \"false\" );\n \n-    @Description( \"Hostname and port of LDAP server to use for authentication and authorization.\" )\n+    @Description( \"URL of LDAP server (with protocol, hostname and port) to use for authentication and authorization. \" +\n+                  \"If no protocol is specified the default will be 'ldap://'. To use LDAPS, \" +\n+                  \"set the protocol and port, e.g. 'ldaps://ldap.example.com:636'\" )\n     public static final Setting<String> ldap_server =\n             setting( \"dbms.security.realms.ldap.host\", STRING, \"0.0.0.0:389\" );\n \n@@ -104,7 +106,9 @@ public class SecuritySettings\n \n     @Description(\n             \"An LDAP system account username to use for authorization searches when \" +\n-            \"`dbms.security.realms.ldap.authorization.use_system_account` is `true`.\" )\n+            \"`dbms.security.realms.ldap.authorization.use_system_account` is `true`. \" +\n+            \"Note that the `dbms.security.realms.ldap.user_dn_template` will not be applied to this username, \" +\n+            \"so you may have to specify a full DN.\" )\n     public static final Setting<String> ldap_system_username =\n             setting( \"dbms.security.realms.ldap.system_username\", STRING, NO_DEFAULT );\n "
        },
        {
            "sha": "db9f159a619a597e2c16c0b6b4cdb8bc03a15954",
            "filename": "enterprise/security/src/test/java/org/neo4j/server/security/enterprise/auth/integration/bolt/LdapAuthenticationIT.java",
            "status": "modified",
            "additions": 9,
            "deletions": 0,
            "changes": 9,
            "blob_url": "https://github.com/neo4j/neo4j/blob/26ff65ccf13111c42942d8652e9e616e91e1fd08/enterprise%2Fsecurity%2Fsrc%2Ftest%2Fjava%2Forg%2Fneo4j%2Fserver%2Fsecurity%2Fenterprise%2Fauth%2Fintegration%2Fbolt%2FLdapAuthenticationIT.java",
            "raw_url": "https://github.com/neo4j/neo4j/raw/26ff65ccf13111c42942d8652e9e616e91e1fd08/enterprise%2Fsecurity%2Fsrc%2Ftest%2Fjava%2Forg%2Fneo4j%2Fserver%2Fsecurity%2Fenterprise%2Fauth%2Fintegration%2Fbolt%2FLdapAuthenticationIT.java",
            "contents_url": "https://api.github.com/repos/neo4j/neo4j/contents/enterprise%2Fsecurity%2Fsrc%2Ftest%2Fjava%2Forg%2Fneo4j%2Fserver%2Fsecurity%2Fenterprise%2Fauth%2Fintegration%2Fbolt%2FLdapAuthenticationIT.java?ref=26ff65ccf13111c42942d8652e9e616e91e1fd08",
            "patch": "@@ -356,6 +356,8 @@ public void shouldBeAbleToLoginWithLdapAndAuthorizeInternally() throws Throwable\n     @Test\n     public void shouldBeAbleToLoginAndAuthorizeReaderWithLdapOnlyUsingLDAPS() throws Throwable\n     {\n+        getLdapServer().setConfidentialityRequired( true );\n+\n         try( EmbeddedTestCertificates ignore = new EmbeddedTestCertificates() )\n         {\n             // When\n@@ -371,6 +373,8 @@ public void shouldBeAbleToLoginAndAuthorizeReaderWithLdapOnlyUsingLDAPS() throws\n     @Test\n     public void shouldBeAbleToLoginAndAuthorizeReaderWithUserLdapContextUsingLDAPS() throws Throwable\n     {\n+        getLdapServer().setConfidentialityRequired( true );\n+\n         try( EmbeddedTestCertificates ignore = new EmbeddedTestCertificates() )\n         {\n             // When\n@@ -387,6 +391,8 @@ public void shouldBeAbleToLoginAndAuthorizeReaderWithUserLdapContextUsingLDAPS()\n     @Test\n     public void shouldBeAbleToLoginAndAuthorizeReaderWithLdapOnlyUsingStartTls() throws Throwable\n     {\n+        getLdapServer().setConfidentialityRequired( true );\n+\n         try( EmbeddedTestCertificates ignore = new EmbeddedTestCertificates() )\n         {\n             // When\n@@ -403,6 +409,8 @@ public void shouldBeAbleToLoginAndAuthorizeReaderWithLdapOnlyUsingStartTls() thr\n     @Test\n     public void shouldBeAbleToLoginAndAuthorizeReaderWithLdapUserContextUsingStartTls() throws Throwable\n     {\n+        getLdapServer().setConfidentialityRequired( true );\n+\n         try( EmbeddedTestCertificates ignore = new EmbeddedTestCertificates() )\n         {\n             // When\n@@ -546,6 +554,7 @@ public void shouldBeAbleToLoginAndAuthorizeReaderWithUserLdapContextUsingStartTl\n     public void setup()\n     {\n         this.client = cf.newInstance();\n+        getLdapServer().setConfidentialityRequired( false );\n     }\n \n     @After"
        }
    ]
}