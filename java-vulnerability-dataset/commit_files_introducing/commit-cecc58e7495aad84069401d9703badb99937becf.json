{
    "sha": "cecc58e7495aad84069401d9703badb99937becf",
    "node_id": "MDY6Q29tbWl0ODMyNjc2OmNlY2M1OGU3NDk1YWFkODQwNjk0MDFkOTcwM2JhZGI5OTkzN2JlY2Y=",
    "commit": {
        "author": {
            "name": "Grzegorz Grzybek",
            "email": "gr.grzybek@gmail.com",
            "date": "2016-02-19T17:47:15Z"
        },
        "committer": {
            "name": "Guillaume Nodet",
            "email": "gnodet@apache.org",
            "date": "2016-02-22T13:12:45Z"
        },
        "message": "[KARAF-4351] Optimize ConfigAdmin access in bulk RBAC calls",
        "tree": {
            "sha": "efd3ff4b59533df77ae646499ad6e8ffc66a93f2",
            "url": "https://api.github.com/repos/apache/karaf/git/trees/efd3ff4b59533df77ae646499ad6e8ffc66a93f2"
        },
        "url": "https://api.github.com/repos/apache/karaf/git/commits/cecc58e7495aad84069401d9703badb99937becf",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/karaf/commits/cecc58e7495aad84069401d9703badb99937becf",
    "html_url": "https://github.com/apache/karaf/commit/cecc58e7495aad84069401d9703badb99937becf",
    "comments_url": "https://api.github.com/repos/apache/karaf/commits/cecc58e7495aad84069401d9703badb99937becf/comments",
    "author": {
        "login": "grgrzybek",
        "id": 306565,
        "node_id": "MDQ6VXNlcjMwNjU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/306565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/grgrzybek",
        "html_url": "https://github.com/grgrzybek",
        "followers_url": "https://api.github.com/users/grgrzybek/followers",
        "following_url": "https://api.github.com/users/grgrzybek/following{/other_user}",
        "gists_url": "https://api.github.com/users/grgrzybek/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/grgrzybek/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/grgrzybek/subscriptions",
        "organizations_url": "https://api.github.com/users/grgrzybek/orgs",
        "repos_url": "https://api.github.com/users/grgrzybek/repos",
        "events_url": "https://api.github.com/users/grgrzybek/events{/privacy}",
        "received_events_url": "https://api.github.com/users/grgrzybek/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "gnodet",
        "id": 84022,
        "node_id": "MDQ6VXNlcjg0MDIy",
        "avatar_url": "https://avatars.githubusercontent.com/u/84022?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gnodet",
        "html_url": "https://github.com/gnodet",
        "followers_url": "https://api.github.com/users/gnodet/followers",
        "following_url": "https://api.github.com/users/gnodet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gnodet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gnodet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gnodet/subscriptions",
        "organizations_url": "https://api.github.com/users/gnodet/orgs",
        "repos_url": "https://api.github.com/users/gnodet/repos",
        "events_url": "https://api.github.com/users/gnodet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gnodet/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "655639ac1e19750053a565ea6c3fc6aeab5024a8",
            "url": "https://api.github.com/repos/apache/karaf/commits/655639ac1e19750053a565ea6c3fc6aeab5024a8",
            "html_url": "https://github.com/apache/karaf/commit/655639ac1e19750053a565ea6c3fc6aeab5024a8"
        }
    ],
    "stats": {
        "total": 356,
        "additions": 290,
        "deletions": 66
    },
    "files": [
        {
            "sha": "b112c2f95c2bcfd787d5690a5f46e48e94e6e9b5",
            "filename": "management/server/src/main/java/org/apache/karaf/management/KarafMBeanServerGuard.java",
            "status": "modified",
            "additions": 93,
            "deletions": 46,
            "changes": 139,
            "blob_url": "https://github.com/apache/karaf/blob/cecc58e7495aad84069401d9703badb99937becf/management%2Fserver%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fkaraf%2Fmanagement%2FKarafMBeanServerGuard.java",
            "raw_url": "https://github.com/apache/karaf/raw/cecc58e7495aad84069401d9703badb99937becf/management%2Fserver%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fkaraf%2Fmanagement%2FKarafMBeanServerGuard.java",
            "contents_url": "https://api.github.com/repos/apache/karaf/contents/management%2Fserver%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fkaraf%2Fmanagement%2FKarafMBeanServerGuard.java?ref=cecc58e7495aad84069401d9703badb99937becf",
            "patch": "@@ -16,20 +16,19 @@\n  */\n package org.apache.karaf.management;\n \n+import org.apache.karaf.management.internal.BulkRequestContext;\n import org.apache.karaf.service.guard.tools.ACLConfigurationParser;\n import org.apache.karaf.util.jaas.JaasHelper;\n-import org.osgi.framework.InvalidSyntaxException;\n-import org.osgi.service.cm.Configuration;\n import org.osgi.service.cm.ConfigurationAdmin;\n \n import javax.management.*;\n import java.io.IOException;\n import java.lang.reflect.InvocationHandler;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.Comparator;\n+import java.util.Dictionary;\n import java.util.Enumeration;\n import java.util.Iterator;\n import java.util.List;\n@@ -95,25 +94,39 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl\n      * @throws IOException\n      */\n     public boolean canInvoke(MBeanServer mbeanServer, ObjectName objectName) throws JMException, IOException {\n+        return canInvoke(null, mbeanServer, objectName);\n+    }\n+\n+    /**\n+     * Returns whether there is any method that the current user can invoke.\n+     *\n+     * @param context {@link BulkRequestContext} for optimized ConfigAdmin access, may be <code>null</code>\n+     * @param mbeanServer the MBeanServer where the object is registered.\n+     * @param objectName the ObjectName to check.\n+     * @return {@code true} if there is a method on the object that can be invoked, {@code false} else.\n+     * @throws JMException\n+     * @throws IOException\n+     */\n+    public boolean canInvoke(BulkRequestContext context, MBeanServer mbeanServer, ObjectName objectName) throws JMException, IOException {\n         MBeanInfo info = mbeanServer.getMBeanInfo(objectName);\n \n         for (MBeanOperationInfo operation : info.getOperations()) {\n             List<String> sig = new ArrayList<String>();\n             for (MBeanParameterInfo param : operation.getSignature()) {\n                 sig.add(param.getType());\n             }\n-            if (canInvoke(objectName, operation.getName(), sig.toArray(new String[] {}))) {\n+            if (canInvoke(context, objectName, operation.getName(), sig.toArray(new String[] {}))) {\n                 return true;\n             }\n         }\n \n         for (MBeanAttributeInfo attr : info.getAttributes()) {\n             if (attr.isReadable()) {\n-                if (canInvoke(objectName, attr.isIs() ? \"is\" : \"get\" + attr.getName(), new String[] {}))\n+                if (canInvoke(context, objectName, attr.isIs() ? \"is\" : \"get\" + attr.getName(), new String[] {}))\n                     return true;\n             }\n             if (attr.isWritable()) {\n-                if (canInvoke(objectName, \"set\" + attr.getName(), new String[]{attr.getType()}))\n+                if (canInvoke(context, objectName, \"set\" + attr.getName(), new String[]{attr.getType()}))\n                     return true;\n             }\n         }\n@@ -132,6 +145,21 @@ public boolean canInvoke(MBeanServer mbeanServer, ObjectName objectName) throws\n      * @throws IOException\n      */\n     public boolean canInvoke(MBeanServer mbeanServer, ObjectName objectName, String methodName) throws JMException, IOException {\n+        return canInvoke(null, mbeanServer, objectName, methodName);\n+    }\n+\n+    /**\n+     * Returns whether there is any overload of the specified method that can be invoked by the current user.\n+     *\n+     * @param context {@link BulkRequestContext} for optimized ConfigAdmin access, may be <code>null</code>\n+     * @param mbeanServer the MBeanServer where the object is registered.\n+     * @param objectName the MBean ObjectName.\n+     * @param methodName the name of the method.\n+     * @return {@code true} if there is an overload of the method that can be invoked by the current user.\n+     * @throws JMException\n+     * @throws IOException\n+     */\n+    public boolean canInvoke(BulkRequestContext context, MBeanServer mbeanServer, ObjectName objectName, String methodName) throws JMException, IOException {\n         methodName = methodName.trim();\n         MBeanInfo info = mbeanServer.getMBeanInfo(objectName);\n \n@@ -144,18 +172,18 @@ public boolean canInvoke(MBeanServer mbeanServer, ObjectName objectName, String\n             for (MBeanParameterInfo param : op.getSignature()) {\n                 sig.add(param.getType());\n             }\n-            if (canInvoke(objectName, op.getName(), sig.toArray(new String[] {}))) {\n+            if (canInvoke(context, objectName, op.getName(), sig.toArray(new String[] {}))) {\n                 return true;\n             }\n         }\n \n         for (MBeanAttributeInfo attr : info.getAttributes()) {\n             String attrName = attr.getName();\n             if (methodName.equals(\"is\" + attrName) || methodName.equals(\"get\" + attrName)) {\n-                return canInvoke(objectName, methodName, new String[] {});\n+                return canInvoke(context, objectName, methodName, new String[] {});\n             }\n             if (methodName.equals(\"set\" + attrName)) {\n-                return canInvoke(objectName, methodName, new String[] { attr.getType() });\n+                return canInvoke(context, objectName, methodName, new String[] { attr.getType() });\n             }\n         }\n \n@@ -176,15 +204,36 @@ public boolean canInvoke(MBeanServer mbeanServer, ObjectName objectName, String\n      * @throws IOException\n      */\n     public boolean canInvoke(MBeanServer mbeanServer, ObjectName objectName, String methodName, String[] signature) throws IOException {\n+        return canInvoke(null, mbeanServer, objectName, methodName, signature);\n+    }\n+\n+    /**\n+     * Returns true if the method on the MBean with the specified signature can be invoked.\n+     *\n+     * @param context {@link BulkRequestContext} for optimized ConfigAdmin access, may be <code>null</code>\n+     * @param mbeanServer the MBeanServer where the object is registered.\n+     * @param objectName the MBean ObjectName.\n+     * @param methodName the name of the method.\n+     * @param signature the signature of the method.\n+     * @return {@code true} if the method can be invoked, {@code false} else. Note that if a method name or signature\n+     *      is provided that does not exist on the MBean, the behaviour of this method is undefined. In other words,\n+     *      if you ask whether a method that does not exist can be invoked, the method may return {@code true} but\n+     *      actually invoking that method will obviously not work.\n+     * @throws IOException\n+     */\n+    public boolean canInvoke(BulkRequestContext context, MBeanServer mbeanServer, ObjectName objectName, String methodName, String[] signature) throws IOException {\n         // no checking done on the MBeanServer of whether the method actually exists...\n-        return canInvoke(objectName, methodName, signature);\n+        return canInvoke(context, objectName, methodName, signature);\n     }\n \n-    private boolean canInvoke(ObjectName objectName, String methodName, String[] signature) throws IOException {\n-        if (canBypassRBAC(objectName, methodName)) {\n+    private boolean canInvoke(BulkRequestContext context, ObjectName objectName, String methodName, String[] signature) throws IOException {\n+        if (context == null) {\n+            context = BulkRequestContext.newContext(configAdmin);\n+        }\n+        if (canBypassRBAC(context, objectName, methodName)) {\n             return true;\n         }\n-        for (String role : getRequiredRoles(objectName, methodName, signature)) {\n+        for (String role : getRequiredRoles(context, objectName, methodName, signature)) {\n             if (JaasHelper.currentUserHasRole(role))\n                 return true;\n         }\n@@ -203,7 +252,7 @@ private void handleGetAttribute(MBeanServer proxy, ObjectName objectName, String\n         if (prefix == null) {\n             LOG.debug(\"Attribute \" + attributeName + \" can not be found for MBean \" + objectName.toString());\n         } else {\n-            handleInvoke(objectName, prefix + attributeName, new Object[]{}, new String[]{});\n+            handleInvoke(null, objectName, prefix + attributeName, new Object[]{}, new String[]{});\n         }\n     }\n \n@@ -226,7 +275,7 @@ private void handleSetAttribute(MBeanServer proxy, ObjectName objectName, Attrib\n         if (dataType == null)\n             throw new IllegalStateException(\"Attribute data type can not be found\");\n \n-        handleInvoke(objectName, \"set\" + attribute.getName(), new Object[]{ attribute.getValue() }, new String[]{ dataType });\n+        handleInvoke(null, objectName, \"set\" + attribute.getName(), new Object[]{ attribute.getValue() }, new String[]{ dataType });\n     }\n \n     private void handleSetAttributes(MBeanServer proxy, ObjectName objectName, AttributeList attributes) throws JMException, IOException {\n@@ -235,24 +284,17 @@ private void handleSetAttributes(MBeanServer proxy, ObjectName objectName, Attri\n         }\n     }\n     \n-    private boolean canBypassRBAC(ObjectName objectName, String operationName) {\n+    private boolean canBypassRBAC(BulkRequestContext context, ObjectName objectName, String operationName) {\n         List<String> allBypassObjectName = new ArrayList<String>();\n-        try {\n-            Configuration[] configs = configAdmin.listConfigurations(\"(service.pid=\" + JMX_ACL_WHITELIST + \")\");\n-            if (configs != null) {\n-                for (Configuration config : configs) {\n-                    Enumeration<String> keys = config.getProperties().keys();\n-                    while (keys.hasMoreElements()) {\n-                        String element = keys.nextElement();\n-                        allBypassObjectName.add(element);\n-                    }\n-                }\n+\n+        List<Dictionary<String, Object>> configs = context.getWhitelistProperties();\n+        for (Dictionary<String, Object> config : configs) {\n+            Enumeration<String> keys = config.keys();\n+            while (keys.hasMoreElements()) {\n+                String element = keys.nextElement();\n+                allBypassObjectName.add(element);\n             }\n-        } catch (InvalidSyntaxException ise) {\n-            throw new RuntimeException(ise);\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        } \n+        }\n \n         for (String pid : iterateDownPids(getNameSegments(objectName))) {\n             if (!pid.equals(\"jmx.acl\"))  {\n@@ -276,37 +318,42 @@ private boolean canBypassRBAC(ObjectName objectName, String operationName) {\n     }\n \n     void handleInvoke(ObjectName objectName, String operationName, Object[] params, String[] signature) throws IOException {\n-        if (canBypassRBAC(objectName, operationName)) {\n+        handleInvoke(null, objectName, operationName, params, signature);\n+    }\n+\n+    void handleInvoke(BulkRequestContext context, ObjectName objectName, String operationName, Object[] params, String[] signature) throws IOException {\n+        if (context == null) {\n+            context = BulkRequestContext.newContext(configAdmin);\n+        }\n+        if (canBypassRBAC(context, objectName, operationName)) {\n             return;\n         }\n-        for (String role : getRequiredRoles(objectName, operationName, params, signature)) {\n+        for (String role : getRequiredRoles(context, objectName, operationName, params, signature)) {\n             if (JaasHelper.currentUserHasRole(role))\n                 return;\n         }\n         throw new SecurityException(\"Insufficient roles/credentials for operation\");\n     }\n \n     List<String> getRequiredRoles(ObjectName objectName, String methodName, String[] signature) throws IOException {\n-        return getRequiredRoles(objectName, methodName, null, signature);\n+        return getRequiredRoles(BulkRequestContext.newContext(configAdmin), objectName, methodName, null, signature);\n     }\n \n-    List<String> getRequiredRoles(ObjectName objectName, String methodName, Object[] params, String[] signature) throws IOException {\n+    List<String> getRequiredRoles(BulkRequestContext context, ObjectName objectName, String methodName, String[] signature) throws IOException {\n+        return getRequiredRoles(context, objectName, methodName, null, signature);\n+    }\n \n-        List<String> allPids = new ArrayList<String>();\n-        try {\n-            for (Configuration config : configAdmin.listConfigurations(\"(service.pid=jmx.acl*)\")) {\n-                allPids.add(config.getPid());\n-            }\n-        } catch (InvalidSyntaxException ise) {\n-            throw new RuntimeException(ise);\n-        }\n+    List<String> getRequiredRoles(ObjectName objectName, String methodName, Object[] params, String[] signature) throws IOException {\n+        return getRequiredRoles(BulkRequestContext.newContext(configAdmin), objectName, methodName, params, signature);\n+    }\n \n+    List<String> getRequiredRoles(BulkRequestContext context, ObjectName objectName, String methodName, Object[] params, String[] signature) throws IOException {\n         for (String pid : iterateDownPids(getNameSegments(objectName))) {\n-            String generalPid = getGeneralPid(allPids, pid);\n+            String generalPid = getGeneralPid(context.getAllPids(), pid);\n             if (generalPid.length() > 0) {\n-                Configuration config = configAdmin.getConfiguration(generalPid, null);\n+                Dictionary<String, Object> config = context.getConfiguration(generalPid);\n                 List<String> roles = new ArrayList<String>();\n-                ACLConfigurationParser.Specificity s = ACLConfigurationParser.getRolesForInvocation(methodName, params, signature, config.getProperties(), roles);\n+                ACLConfigurationParser.Specificity s = ACLConfigurationParser.getRolesForInvocation(methodName, params, signature, config, roles);\n                 if (s != ACLConfigurationParser.Specificity.NO_MATCH) {\n                     return roles;\n                 }"
        },
        {
            "sha": "1c72a6061493700ec94cf9badafdb3595cf770a8",
            "filename": "management/server/src/main/java/org/apache/karaf/management/internal/BulkRequestContext.java",
            "status": "added",
            "additions": 100,
            "deletions": 0,
            "changes": 100,
            "blob_url": "https://github.com/apache/karaf/blob/cecc58e7495aad84069401d9703badb99937becf/management%2Fserver%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fkaraf%2Fmanagement%2Finternal%2FBulkRequestContext.java",
            "raw_url": "https://github.com/apache/karaf/raw/cecc58e7495aad84069401d9703badb99937becf/management%2Fserver%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fkaraf%2Fmanagement%2Finternal%2FBulkRequestContext.java",
            "contents_url": "https://api.github.com/repos/apache/karaf/contents/management%2Fserver%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fkaraf%2Fmanagement%2Finternal%2FBulkRequestContext.java?ref=cecc58e7495aad84069401d9703badb99937becf",
            "patch": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.karaf.management.internal;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.osgi.framework.InvalidSyntaxException;\n+import org.osgi.service.cm.Configuration;\n+import org.osgi.service.cm.ConfigurationAdmin;\n+\n+/**\n+ * <p>Class to optimize ConfigAdmin access with the lifecycle of single\n+ * {@link org.apache.karaf.management.JMXSecurityMBean#canInvoke(Map) bulk query invocation}. This prevents countless\n+ * {@link org.osgi.service.cm.ConfigurationAdmin#listConfigurations(String) listings of ConfigAdmin configurations}\n+ * for each checked MBean/method.</p>\n+ * <p>Access to this object doesn't have to be synchronized, as it is passed down the <code>canInvoke</code> chain.</p>\n+ */\n+public class BulkRequestContext {\n+\n+    private List<String> allPids = new ArrayList<String>();\n+    private List<Dictionary<String, Object>> whiteListProperties = new ArrayList<Dictionary<String, Object>>();\n+\n+    private ConfigurationAdmin configAdmin;\n+\n+    // cache with lifecycle bound to BulkRequestContext instance\n+    private Map<String, Dictionary<String, Object>> cachedConfigurations = new HashMap<String, Dictionary<String, Object>>();\n+\n+    private BulkRequestContext() {}\n+\n+    public static BulkRequestContext newContext(ConfigurationAdmin configAdmin) throws IOException {\n+        BulkRequestContext context = new BulkRequestContext();\n+        context.configAdmin = configAdmin;\n+        try {\n+            // list available ACL configs - valid for this instance only\n+            for (Configuration config : configAdmin.listConfigurations(\"(service.pid=jmx.acl*)\")) {\n+                context.allPids.add(config.getPid());\n+            }\n+            // list available ACT whitelist configs\n+            Configuration[] configs = configAdmin.listConfigurations(\"(service.pid=jmx.acl.whitelist)\");\n+            if (configs != null) {\n+                for (Configuration config : configs) {\n+                    context.whiteListProperties.add(config.getProperties());\n+                }\n+            }\n+        } catch (InvalidSyntaxException ise) {\n+            throw new RuntimeException(ise);\n+        }\n+\n+        return context;\n+    }\n+\n+    /**\n+     * Returns list of PIDs related to RBAC/ACL\n+     * @return\n+     */\n+    public List<String> getAllPids() {\n+        return allPids;\n+    }\n+\n+    /**\n+     * Returns list of configurations from\n+     * @return\n+     */\n+    public List<Dictionary<String,Object>> getWhitelistProperties() {\n+        return whiteListProperties;\n+    }\n+\n+    /**\n+     * Returns {@link Configuration ConfigAdmin configuration} - may be cached in this instance of\n+     * {@link BulkRequestContext context}\n+     * @param generalPid\n+     * @return\n+     */\n+    public Dictionary<String, Object> getConfiguration(String generalPid) throws IOException {\n+        if (!cachedConfigurations.containsKey(generalPid)) {\n+            cachedConfigurations.put(generalPid, configAdmin.getConfiguration(generalPid, null).getProperties());\n+        }\n+        return cachedConfigurations.get(generalPid);\n+    }\n+\n+}"
        },
        {
            "sha": "683be51dbf3f131d65d85a818c5977d90985ef01",
            "filename": "management/server/src/main/java/org/apache/karaf/management/internal/JMXSecurityMBeanImpl.java",
            "status": "modified",
            "additions": 22,
            "deletions": 8,
            "changes": 30,
            "blob_url": "https://github.com/apache/karaf/blob/cecc58e7495aad84069401d9703badb99937becf/management%2Fserver%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fkaraf%2Fmanagement%2Finternal%2FJMXSecurityMBeanImpl.java",
            "raw_url": "https://github.com/apache/karaf/raw/cecc58e7495aad84069401d9703badb99937becf/management%2Fserver%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fkaraf%2Fmanagement%2Finternal%2FJMXSecurityMBeanImpl.java",
            "contents_url": "https://api.github.com/repos/apache/karaf/contents/management%2Fserver%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fkaraf%2Fmanagement%2Finternal%2FJMXSecurityMBeanImpl.java?ref=cecc58e7495aad84069401d9703badb99937becf",
            "patch": "@@ -41,36 +41,50 @@ public JMXSecurityMBeanImpl() throws NotCompliantMBeanException {\n     }\n \n     public boolean canInvoke(String objectName) throws Exception {\n+        return canInvoke((BulkRequestContext) null, objectName);\n+    }\n+\n+    public boolean canInvoke(String objectName, String methodName) throws Exception {\n+        return canInvoke(null, objectName, methodName);\n+    }\n+\n+    public boolean canInvoke(String objectName, String methodName, String[] argumentTypes) throws Exception {\n+        return canInvoke(null, objectName, methodName, argumentTypes);\n+    }\n+\n+    private boolean canInvoke(BulkRequestContext context, String objectName) throws Exception {\n         if (guard == null)\n             return true;\n \n-        return guard.canInvoke(mbeanServer, new ObjectName(objectName));\n+        return guard.canInvoke(context, mbeanServer, new ObjectName(objectName));\n     }\n \n-    public boolean canInvoke(String objectName, String methodName) throws Exception {\n+    private boolean canInvoke(BulkRequestContext context, String objectName, String methodName) throws Exception {\n         if (guard == null)\n             return true;\n \n-        return guard.canInvoke(mbeanServer, new ObjectName(objectName), methodName);\n+        return guard.canInvoke(context, mbeanServer, new ObjectName(objectName), methodName);\n     }\n \n-    public boolean canInvoke(String objectName, String methodName, String[] argumentTypes) throws Exception {\n+    private boolean canInvoke(BulkRequestContext context, String objectName, String methodName, String[] argumentTypes) throws Exception {\n         ObjectName on = new ObjectName(objectName);\n \n         if (guard == null)\n             return true;\n \n-        return guard.canInvoke(mbeanServer, on, methodName, argumentTypes);\n+        return guard.canInvoke(context, mbeanServer, on, methodName, argumentTypes);\n     }\n \n     public TabularData canInvoke(Map<String, List<String>> bulkQuery) throws Exception {\n         TabularData table = new TabularDataSupport(CAN_INVOKE_TABULAR_TYPE);\n \n+        BulkRequestContext context = BulkRequestContext.newContext(guard.getConfigAdmin());\n+\n         for (Map.Entry<String, List<String>> entry : bulkQuery.entrySet()) {\n             String objectName = entry.getKey();\n             List<String> methods = entry.getValue();\n             if (methods.size() == 0) {\n-                boolean res = canInvoke(objectName);\n+                boolean res = canInvoke(context, objectName);\n                 CompositeData data = new CompositeDataSupport(CAN_INVOKE_RESULT_ROW_TYPE, CAN_INVOKE_RESULT_COLUMNS, new Object[]{ objectName, \"\", res });\n                 table.put(data);\n             } else {\n@@ -80,9 +94,9 @@ public TabularData canInvoke(Map<String, List<String>> bulkQuery) throws Excepti\n \n                     boolean res;\n                     if (name.equals(method)) {\n-                        res = canInvoke(objectName, name);\n+                        res = canInvoke(context, objectName, name);\n                     } else {\n-                        res = canInvoke(objectName, name, argTypes.toArray(new String[]{}));\n+                        res = canInvoke(context, objectName, name, argTypes.toArray(new String[]{}));\n                     }\n                     CompositeData data = new CompositeDataSupport(CAN_INVOKE_RESULT_ROW_TYPE, CAN_INVOKE_RESULT_COLUMNS, new Object[]{ objectName, method, res });\n                     table.put(data);"
        },
        {
            "sha": "c77c48488c5a4dee44bc417281e79d5b03cf32f0",
            "filename": "management/server/src/test/java/org/apache/karaf/management/internal/JMXSecurityMBeanImplTestCase.java",
            "status": "modified",
            "additions": 75,
            "deletions": 12,
            "changes": 87,
            "blob_url": "https://github.com/apache/karaf/blob/cecc58e7495aad84069401d9703badb99937becf/management%2Fserver%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fkaraf%2Fmanagement%2Finternal%2FJMXSecurityMBeanImplTestCase.java",
            "raw_url": "https://github.com/apache/karaf/raw/cecc58e7495aad84069401d9703badb99937becf/management%2Fserver%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fkaraf%2Fmanagement%2Finternal%2FJMXSecurityMBeanImplTestCase.java",
            "contents_url": "https://api.github.com/repos/apache/karaf/contents/management%2Fserver%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fkaraf%2Fmanagement%2Finternal%2FJMXSecurityMBeanImplTestCase.java?ref=cecc58e7495aad84069401d9703badb99937becf",
            "patch": "@@ -19,6 +19,8 @@\n import junit.framework.TestCase;\n import org.apache.karaf.management.KarafMBeanServerGuard;\n import org.easymock.EasyMock;\n+import org.osgi.service.cm.Configuration;\n+import org.osgi.service.cm.ConfigurationAdmin;\n \n import javax.management.MBeanServer;\n import javax.management.ObjectName;\n@@ -44,7 +46,7 @@ public void testCanInvokeMBean() throws Exception {\n \n         String objectName = \"foo.bar.testing:type=SomeMBean\";\n         KarafMBeanServerGuard testGuard = EasyMock.createMock(KarafMBeanServerGuard.class);\n-        EasyMock.expect(testGuard.canInvoke(mbs, new ObjectName(objectName))).andReturn(true);\n+        EasyMock.expect(testGuard.canInvoke(null, mbs, new ObjectName(objectName))).andReturn(true);\n         EasyMock.replay(testGuard);\n \n         JMXSecurityMBeanImpl mb = new JMXSecurityMBeanImpl();\n@@ -59,7 +61,7 @@ public void testCanInvokeMBean2() throws Exception {\n \n         String objectName = \"foo.bar.testing:type=SomeMBean\";\n         KarafMBeanServerGuard testGuard = EasyMock.createMock(KarafMBeanServerGuard.class);\n-        EasyMock.expect(testGuard.canInvoke(mbs, new ObjectName(objectName))).andReturn(false);\n+        EasyMock.expect(testGuard.canInvoke(null, mbs, new ObjectName(objectName))).andReturn(false);\n         EasyMock.replay(testGuard);\n \n         JMXSecurityMBeanImpl mb = new JMXSecurityMBeanImpl();\n@@ -75,7 +77,7 @@ public void testCanInvokeMBeanThrowsException() throws Exception {\n \n             String objectName = \"foo.bar.testing:type=SomeMBean\";\n             KarafMBeanServerGuard testGuard = EasyMock.createMock(KarafMBeanServerGuard.class);\n-            EasyMock.expect(testGuard.canInvoke(mbs, new ObjectName(objectName))).andThrow(new IOException());\n+            EasyMock.expect(testGuard.canInvoke(null, mbs, new ObjectName(objectName))).andThrow(new IOException());\n             EasyMock.replay(testGuard);\n \n             JMXSecurityMBeanImpl mb = new JMXSecurityMBeanImpl();\n@@ -102,9 +104,9 @@ public void testCanInvokeMethod() throws Exception {\n         String[] la = new String[]{\"long\"};\n         String[] sa = new String[]{\"java.lang.String\"};\n         String[] sa2 = new String[]{\"java.lang.String\", \"java.lang.String\"};\n-        EasyMock.expect(testGuard.canInvoke(mbs, new ObjectName(objectName), \"testMethod\", la)).andReturn(true);\n-        EasyMock.expect(testGuard.canInvoke(mbs, new ObjectName(objectName), \"testMethod\", sa)).andReturn(true);\n-        EasyMock.expect(testGuard.canInvoke(mbs, new ObjectName(objectName), \"otherMethod\", sa2)).andReturn(false);\n+        EasyMock.expect(testGuard.canInvoke(null, mbs, new ObjectName(objectName), \"testMethod\", la)).andReturn(true);\n+        EasyMock.expect(testGuard.canInvoke(null, mbs, new ObjectName(objectName), \"testMethod\", sa)).andReturn(true);\n+        EasyMock.expect(testGuard.canInvoke(null, mbs, new ObjectName(objectName), \"otherMethod\", sa2)).andReturn(false);\n         EasyMock.replay(testGuard);\n \n         JMXSecurityMBeanImpl mb = new JMXSecurityMBeanImpl();\n@@ -123,7 +125,7 @@ public void testCanInvokeMethodException() throws Exception {\n             String objectName = \"foo.bar.testing:type=SomeMBean\";\n             KarafMBeanServerGuard testGuard = EasyMock.createMock(KarafMBeanServerGuard.class);\n             String[] ea = new String[]{};\n-            EasyMock.expect(testGuard.canInvoke(mbs, new ObjectName(objectName), \"testMethod\", ea)).andThrow(new IOException());\n+            EasyMock.expect(testGuard.canInvoke(null, mbs, new ObjectName(objectName), \"testMethod\", ea)).andThrow(new IOException());\n             EasyMock.replay(testGuard);\n \n             JMXSecurityMBeanImpl mb = new JMXSecurityMBeanImpl();\n@@ -145,17 +147,25 @@ public void testCanInvokeBulk() throws Exception {\n         MBeanServer mbs = EasyMock.createMock(MBeanServer.class);\n         EasyMock.replay(mbs);\n \n+        ConfigurationAdmin testConfigAdmin = EasyMock.createMock(ConfigurationAdmin.class);\n+        EasyMock.expect(testConfigAdmin.listConfigurations(EasyMock.eq(\"(service.pid=jmx.acl*)\")))\n+                .andReturn(new Configuration[0]).anyTimes();\n+        EasyMock.expect(testConfigAdmin.listConfigurations(EasyMock.eq(\"(service.pid=jmx.acl.whitelist)\")))\n+                .andReturn(new Configuration[0]).once();\n+        EasyMock.replay(testConfigAdmin);\n+\n         KarafMBeanServerGuard testGuard = EasyMock.createMock(KarafMBeanServerGuard.class);\n         String objectName = \"foo.bar.testing:type=SomeMBean\";\n         final String[] la = new String[]{\"long\"};\n         final String[] sa = new String[]{\"java.lang.String\"};\n-        EasyMock.expect(testGuard.canInvoke(EasyMock.eq(mbs), EasyMock.eq(new ObjectName(objectName)), EasyMock.eq(\"testMethod\"), EasyMock.aryEq(la))).andReturn(true).anyTimes();\n-        EasyMock.expect(testGuard.canInvoke(EasyMock.eq(mbs), EasyMock.eq(new ObjectName(objectName)), EasyMock.eq(\"testMethod\"), EasyMock.aryEq(sa))).andReturn(false).anyTimes();\n-        EasyMock.expect(testGuard.canInvoke(EasyMock.eq(mbs), EasyMock.eq(new ObjectName(objectName)), EasyMock.eq(\"otherMethod\"))).andReturn(true).anyTimes();\n+        EasyMock.expect(testGuard.getConfigAdmin()).andReturn(testConfigAdmin).anyTimes();\n+        EasyMock.expect(testGuard.canInvoke(EasyMock.anyObject(BulkRequestContext.class), EasyMock.eq(mbs), EasyMock.eq(new ObjectName(objectName)), EasyMock.eq(\"testMethod\"), EasyMock.aryEq(la))).andReturn(true).anyTimes();\n+        EasyMock.expect(testGuard.canInvoke(EasyMock.anyObject(BulkRequestContext.class), EasyMock.eq(mbs), EasyMock.eq(new ObjectName(objectName)), EasyMock.eq(\"testMethod\"), EasyMock.aryEq(sa))).andReturn(false).anyTimes();\n+        EasyMock.expect(testGuard.canInvoke(EasyMock.anyObject(BulkRequestContext.class), EasyMock.eq(mbs), EasyMock.eq(new ObjectName(objectName)), EasyMock.eq(\"otherMethod\"))).andReturn(true).anyTimes();\n         String objectName2 = \"foo.bar.testing:type=SomeOtherMBean\";\n-        EasyMock.expect(testGuard.canInvoke(EasyMock.eq(mbs), EasyMock.eq(new ObjectName(objectName2)))).andReturn(true).anyTimes();\n+        EasyMock.expect(testGuard.canInvoke(EasyMock.anyObject(BulkRequestContext.class), EasyMock.eq(mbs), EasyMock.eq(new ObjectName(objectName2)))).andReturn(true).anyTimes();\n         String objectName3 = \"foo.bar.foo.testing:type=SomeOtherMBean\";\n-        EasyMock.expect(testGuard.canInvoke(EasyMock.eq(mbs), EasyMock.eq(new ObjectName(objectName3)))).andReturn(false).anyTimes();\n+        EasyMock.expect(testGuard.canInvoke(EasyMock.anyObject(BulkRequestContext.class), EasyMock.eq(mbs), EasyMock.eq(new ObjectName(objectName3)))).andReturn(false).anyTimes();\n         EasyMock.replay(testGuard);\n \n         JMXSecurityMBeanImpl mb = new JMXSecurityMBeanImpl();\n@@ -190,4 +200,57 @@ public void testCanInvokeBulk() throws Exception {\n         assertEquals(false, cd5.get(\"CanInvoke\"));\n     }\n \n+    public void testCanInvokeBulkCacheConfigAdmin() throws Exception {\n+        MBeanServer mbs = EasyMock.createMock(MBeanServer.class);\n+        EasyMock.replay(mbs);\n+\n+        Configuration fooWildcardTesting = EasyMock.createMock(Configuration.class);\n+        EasyMock.expect(fooWildcardTesting.getPid()).andReturn(\"jmx.acl.foo._.testing\").once();\n+        EasyMock.replay(fooWildcardTesting);\n+\n+        Dictionary<String, Object> fooBarProperties = new Hashtable<>();\n+        // using '*' frees us from mocking JAAS\n+        fooBarProperties.put(\"testMethod(java.lang.String)\", \"*\");\n+        fooBarProperties.put(\"testMethod(long)\", \"*\");\n+        Configuration fooBarTesting = EasyMock.createMock(Configuration.class);\n+        EasyMock.expect(fooBarTesting.getPid()).andReturn(\"jmx.acl.foo.bar.testing\").once();\n+        EasyMock.expect(fooBarTesting.getProperties()).andReturn(fooBarProperties).once();\n+        EasyMock.replay(fooBarTesting);\n+\n+        ConfigurationAdmin testConfigAdmin = EasyMock.createMock(ConfigurationAdmin.class);\n+        EasyMock.expect(testConfigAdmin.listConfigurations(EasyMock.eq(\"(service.pid=jmx.acl*)\")))\n+                .andReturn(new Configuration[] { fooWildcardTesting, fooBarTesting }).once();\n+        EasyMock.expect(testConfigAdmin.listConfigurations(EasyMock.eq(\"(service.pid=jmx.acl.whitelist)\")))\n+                .andReturn(new Configuration[0]).once();\n+        EasyMock.expect(testConfigAdmin.getConfiguration(EasyMock.eq(\"jmx.acl.foo.bar.testing\"), EasyMock.isNull(String.class)))\n+                .andReturn(fooBarTesting).once();\n+        EasyMock.replay(testConfigAdmin);\n+\n+        KarafMBeanServerGuard guard = new KarafMBeanServerGuard();\n+        guard.setConfigAdmin(testConfigAdmin);\n+\n+        String objectName = \"foo.bar.testing:type=SomeMBean\";\n+        String objectName2 = \"foo.bar.testing:type=SomeOtherMBean\";\n+\n+        JMXSecurityMBeanImpl mb = new JMXSecurityMBeanImpl();\n+        mb.setMBeanServer(mbs);\n+        mb.setGuard(guard);\n+        Map<String, List<String>> query = new HashMap<String, List<String>>();\n+        query.put(objectName, Collections.singletonList(\"testMethod(java.lang.String)\"));\n+        query.put(objectName2, Collections.singletonList(\"testMethod(long)\"));\n+        TabularData result = mb.canInvoke(query);\n+        assertEquals(2, result.size());\n+\n+        CompositeData cd2 = result.get(new Object[]{objectName, \"testMethod(java.lang.String)\"});\n+        assertEquals(objectName, cd2.get(\"ObjectName\"));\n+        assertEquals(\"testMethod(java.lang.String)\", cd2.get(\"Method\"));\n+        assertEquals(true, cd2.get(\"CanInvoke\"));\n+        CompositeData cd4 = result.get(new Object[]{objectName2, \"testMethod(long)\"});\n+        assertEquals(objectName2, cd4.get(\"ObjectName\"));\n+        assertEquals(\"testMethod(long)\", cd4.get(\"Method\"));\n+        assertEquals(true, cd4.get(\"CanInvoke\"));\n+\n+        EasyMock.verify(testConfigAdmin, fooWildcardTesting, fooBarTesting);\n+    }\n+\n }"
        }
    ]
}