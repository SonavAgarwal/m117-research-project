{
    "sha": "cd942abfb08004766db8b9f553774fc1c08b69d5",
    "node_id": "MDY6Q29tbWl0MzM4MjE5NTpjZDk0MmFiZmIwODAwNDc2NmRiOGI5ZjU1Mzc3NGZjMWMwOGI2OWQ1",
    "commit": {
        "author": {
            "name": "Madhura Bhave",
            "email": "mbhave@pivotal.io",
            "date": "2016-07-21T21:23:25Z"
        },
        "committer": {
            "name": "Jeanie Jung",
            "email": "jeaniejung@berkeley.edu",
            "date": "2016-07-21T21:23:25Z"
        },
        "message": "Return appropriate error on invalid email in InvitationsEndpoint API\n\n[#126090479] https://www.pivotaltracker.com/story/show/126090479\n\nSigned-off-by: Madhura Bhave <mbhave@pivotal.io>\nSigned-off-by: Jeanie Jung <jeaniejung@berkeley.edu>",
        "tree": {
            "sha": "700854cd2015f6afc16784bc8c9f16e4beca1b19",
            "url": "https://api.github.com/repos/cloudfoundry/uaa/git/trees/700854cd2015f6afc16784bc8c9f16e4beca1b19"
        },
        "url": "https://api.github.com/repos/cloudfoundry/uaa/git/commits/cd942abfb08004766db8b9f553774fc1c08b69d5",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/cloudfoundry/uaa/commits/cd942abfb08004766db8b9f553774fc1c08b69d5",
    "html_url": "https://github.com/cloudfoundry/uaa/commit/cd942abfb08004766db8b9f553774fc1c08b69d5",
    "comments_url": "https://api.github.com/repos/cloudfoundry/uaa/commits/cd942abfb08004766db8b9f553774fc1c08b69d5/comments",
    "author": {
        "login": "mbhave",
        "id": 1761408,
        "node_id": "MDQ6VXNlcjE3NjE0MDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1761408?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mbhave",
        "html_url": "https://github.com/mbhave",
        "followers_url": "https://api.github.com/users/mbhave/followers",
        "following_url": "https://api.github.com/users/mbhave/following{/other_user}",
        "gists_url": "https://api.github.com/users/mbhave/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mbhave/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mbhave/subscriptions",
        "organizations_url": "https://api.github.com/users/mbhave/orgs",
        "repos_url": "https://api.github.com/users/mbhave/repos",
        "events_url": "https://api.github.com/users/mbhave/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mbhave/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "jeaniejung",
        "id": 8151282,
        "node_id": "MDQ6VXNlcjgxNTEyODI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8151282?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jeaniejung",
        "html_url": "https://github.com/jeaniejung",
        "followers_url": "https://api.github.com/users/jeaniejung/followers",
        "following_url": "https://api.github.com/users/jeaniejung/following{/other_user}",
        "gists_url": "https://api.github.com/users/jeaniejung/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jeaniejung/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jeaniejung/subscriptions",
        "organizations_url": "https://api.github.com/users/jeaniejung/orgs",
        "repos_url": "https://api.github.com/users/jeaniejung/repos",
        "events_url": "https://api.github.com/users/jeaniejung/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jeaniejung/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "732605dd235f7345e33ab051ccd96ef835bbfbfe",
            "url": "https://api.github.com/repos/cloudfoundry/uaa/commits/732605dd235f7345e33ab051ccd96ef835bbfbfe",
            "html_url": "https://github.com/cloudfoundry/uaa/commit/732605dd235f7345e33ab051ccd96ef835bbfbfe"
        }
    ],
    "stats": {
        "total": 74,
        "additions": 49,
        "deletions": 25
    },
    "files": [
        {
            "sha": "82b5e43e3e273534fd88f8003fda5f42dd6f3af9",
            "filename": "server/src/main/java/org/cloudfoundry/identity/uaa/invitations/InvitationsEndpoint.java",
            "status": "modified",
            "additions": 31,
            "deletions": 25,
            "changes": 56,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/cd942abfb08004766db8b9f553774fc1c08b69d5/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Finvitations%2FInvitationsEndpoint.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/cd942abfb08004766db8b9f553774fc1c08b69d5/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Finvitations%2FInvitationsEndpoint.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Finvitations%2FInvitationsEndpoint.java?ref=cd942abfb08004766db8b9f553774fc1c08b69d5",
            "patch": "@@ -31,6 +31,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.regex.Pattern;\n \n import static org.cloudfoundry.identity.uaa.codestore.ExpiringCodeType.INVITATION;\n import static org.cloudfoundry.identity.uaa.constants.OriginKeys.ORIGIN;\n@@ -47,6 +48,7 @@ public class InvitationsEndpoint {\n     private IdentityProviderProvisioning providers;\n     private ClientDetailsService clients;\n     private ExpiringCodeStore expiringCodeStore;\n+    private Pattern emailPattern = Pattern.compile(\"^(.+)@(.+)\\\\.(.+)$\");\n \n     public InvitationsEndpoint(ScimUserProvisioning users,\n                                IdentityProviderProvisioning providers,\n@@ -78,32 +80,36 @@ public ResponseEntity<InvitationsResponse> inviteUsers(@RequestBody InvitationsR\n         ClientDetails client = clients.loadClientByClientId(clientId);\n         for (String email : invitations.getEmails()) {\n             try {\n-                List<IdentityProvider> providers = filter(activeProviders, client, email);\n-                if (providers.size() == 1) {\n-                    ScimUser user = findOrCreateUser(email, providers.get(0).getOriginKey());\n-\n-                    String accountsUrl = UaaUrlUtils.getUaaUrl(\"/invitations/accept\");\n-\n-                    Map<String, String> data = new HashMap<>();\n-                    data.put(InvitationConstants.USER_ID, user.getId());\n-                    data.put(InvitationConstants.EMAIL, user.getPrimaryEmail());\n-                    data.put(CLIENT_ID, clientId);\n-                    data.put(REDIRECT_URI, redirectUri);\n-                    data.put(ORIGIN, user.getOrigin());\n-                    Timestamp expiry = new Timestamp(System.currentTimeMillis() + (INVITATION_EXPIRY_DAYS * 24 * 60 * 60 * 1000));\n-                    ExpiringCode code = expiringCodeStore.generateCode(JsonUtils.writeValueAsString(data), expiry, INVITATION.name());\n-\n-                    String invitationLink = accountsUrl + \"?code=\" + code.getCode();\n-                    try {\n-                        URL inviteLink = new URL(invitationLink);\n-                        invitationsResponse.getNewInvites().add(InvitationsResponse.success(user.getPrimaryEmail(), user.getId(), user.getOrigin(), inviteLink));\n-                    } catch (MalformedURLException mue) {\n-                        invitationsResponse.getFailedInvites().add(InvitationsResponse.failure(email, \"invitation.exception.url\", String.format(\"Malformed url\", invitationLink)));\n+                if (email!=null && emailPattern.matcher(email).matches()) {\n+                    List<IdentityProvider> providers = filter(activeProviders, client, email);\n+                    if (providers.size() == 1) {\n+                        ScimUser user = findOrCreateUser(email, providers.get(0).getOriginKey());\n+\n+                        String accountsUrl = UaaUrlUtils.getUaaUrl(\"/invitations/accept\");\n+\n+                        Map<String, String> data = new HashMap<>();\n+                        data.put(InvitationConstants.USER_ID, user.getId());\n+                        data.put(InvitationConstants.EMAIL, user.getPrimaryEmail());\n+                        data.put(CLIENT_ID, clientId);\n+                        data.put(REDIRECT_URI, redirectUri);\n+                        data.put(ORIGIN, user.getOrigin());\n+                        Timestamp expiry = new Timestamp(System.currentTimeMillis() + (INVITATION_EXPIRY_DAYS * 24 * 60 * 60 * 1000));\n+                        ExpiringCode code = expiringCodeStore.generateCode(JsonUtils.writeValueAsString(data), expiry, INVITATION.name());\n+\n+                        String invitationLink = accountsUrl + \"?code=\" + code.getCode();\n+                        try {\n+                            URL inviteLink = new URL(invitationLink);\n+                            invitationsResponse.getNewInvites().add(InvitationsResponse.success(user.getPrimaryEmail(), user.getId(), user.getOrigin(), inviteLink));\n+                        } catch (MalformedURLException mue) {\n+                            invitationsResponse.getFailedInvites().add(InvitationsResponse.failure(email, \"invitation.exception.url\", String.format(\"Malformed url\", invitationLink)));\n+                        }\n+                    } else if (providers.size() == 0) {\n+                        invitationsResponse.getFailedInvites().add(InvitationsResponse.failure(email, \"provider.non-existent\", \"No authentication provider found.\"));\n+                    } else {\n+                        invitationsResponse.getFailedInvites().add(InvitationsResponse.failure(email, \"provider.ambiguous\", \"Multiple authentication providers found.\"));\n                     }\n-                } else if (providers.size() == 0) {\n-                    invitationsResponse.getFailedInvites().add(InvitationsResponse.failure(email, \"provider.non-existent\", \"No authentication provider found.\"));\n-                } else {\n-                    invitationsResponse.getFailedInvites().add(InvitationsResponse.failure(email, \"provider.ambiguous\", \"Multiple authentication providers found.\"));\n+                } else{\n+                    invitationsResponse.getFailedInvites().add(InvitationsResponse.failure(email, \"email.invalid\", String.format(email + \" is invalid email.\")));\n                 }\n             } catch (ScimResourceConflictException x) {\n                 invitationsResponse.getFailedInvites().add(InvitationsResponse.failure(email, \"user.ambiguous\", \"Multiple users with the same origin matched to the email address.\"));"
        },
        {
            "sha": "2dcdbb6c5b7fb3232016258aefa1c582dba7185e",
            "filename": "uaa/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsEndpointMockMvcTests.java",
            "status": "modified",
            "additions": 18,
            "deletions": 0,
            "changes": 18,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/cd942abfb08004766db8b9f553774fc1c08b69d5/uaa%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Finvitations%2FInvitationsEndpointMockMvcTests.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/cd942abfb08004766db8b9f553774fc1c08b69d5/uaa%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Finvitations%2FInvitationsEndpointMockMvcTests.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Finvitations%2FInvitationsEndpointMockMvcTests.java?ref=cd942abfb08004766db8b9f553774fc1c08b69d5",
            "patch": "@@ -153,6 +153,24 @@ public void multiple_Users_Email_Exists_With_One_Origin() throws Exception {\n         assertEquals(\"user.ambiguous\", response.getFailedInvites().get(0).getErrorCode());\n     }\n \n+    @Test\n+    public void invite_User_With_Invalid_Emails() throws Exception {\n+        String invalidEmail1 = \"user1example.\";\n+        String invalidEmail2 = \"user1example@\";\n+        String invalidEmail3 = \"user1example@invalid\";\n+        String redirectUrl = \"test.com\";\n+        InvitationsResponse response = sendRequestWithTokenAndReturnResponse(scimInviteToken, null, clientId, redirectUrl, invalidEmail1, invalidEmail2, invalidEmail3);\n+        assertEquals(0, response.getNewInvites().size());\n+        assertEquals(3, response.getFailedInvites().size());\n+\n+        assertEquals(\"email.invalid\", response.getFailedInvites().get(0).getErrorCode());\n+        assertEquals(\"email.invalid\", response.getFailedInvites().get(1).getErrorCode());\n+        assertEquals(\"email.invalid\", response.getFailedInvites().get(2).getErrorCode());\n+        assertEquals(invalidEmail1 + \" is invalid email.\", response.getFailedInvites().get(0).getErrorMessage());\n+        assertEquals(invalidEmail2 + \" is invalid email.\", response.getFailedInvites().get(1).getErrorMessage());\n+        assertEquals(invalidEmail3 + \" is invalid email.\", response.getFailedInvites().get(2).getErrorMessage());\n+    }\n+\n     @Test\n     public void accept_Invitation_Email_With_Default_CompanyName() throws Exception {\n         ((MockEnvironment) getWebApplicationContext().getEnvironment()).setProperty(\"login.branding.companyName\", \"\");"
        }
    ]
}