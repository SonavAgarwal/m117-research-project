{
    "sha": "b67a6e80598b9ec728997e12bbc13d56bb23ba1c",
    "node_id": "MDY6Q29tbWl0MTA1OTQzMDpiNjdhNmU4MDU5OGI5ZWM3Mjg5OTdlMTJiYmMxM2Q1NmJiMjNiYTFj",
    "commit": {
        "author": {
            "name": "Bela Ban",
            "email": "belaban@yahoo.com",
            "date": "2010-12-02T14:50:07Z"
        },
        "committer": {
            "name": "Bela Ban",
            "email": "belaban@yahoo.com",
            "date": "2010-12-02T14:50:07Z"
        },
        "message": "added rejection of merge if authentication fails (https://jira.jboss.org/browse/JGRP-1255)",
        "tree": {
            "sha": "c9360ccaba125e72e401bfe2b555dff186a7a7da",
            "url": "https://api.github.com/repos/belaban/JGroups/git/trees/c9360ccaba125e72e401bfe2b555dff186a7a7da"
        },
        "url": "https://api.github.com/repos/belaban/JGroups/git/commits/b67a6e80598b9ec728997e12bbc13d56bb23ba1c",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/belaban/JGroups/commits/b67a6e80598b9ec728997e12bbc13d56bb23ba1c",
    "html_url": "https://github.com/belaban/JGroups/commit/b67a6e80598b9ec728997e12bbc13d56bb23ba1c",
    "comments_url": "https://api.github.com/repos/belaban/JGroups/commits/b67a6e80598b9ec728997e12bbc13d56bb23ba1c/comments",
    "author": {
        "login": "belaban",
        "id": 457949,
        "node_id": "MDQ6VXNlcjQ1Nzk0OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/457949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/belaban",
        "html_url": "https://github.com/belaban",
        "followers_url": "https://api.github.com/users/belaban/followers",
        "following_url": "https://api.github.com/users/belaban/following{/other_user}",
        "gists_url": "https://api.github.com/users/belaban/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/belaban/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/belaban/subscriptions",
        "organizations_url": "https://api.github.com/users/belaban/orgs",
        "repos_url": "https://api.github.com/users/belaban/repos",
        "events_url": "https://api.github.com/users/belaban/events{/privacy}",
        "received_events_url": "https://api.github.com/users/belaban/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "belaban",
        "id": 457949,
        "node_id": "MDQ6VXNlcjQ1Nzk0OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/457949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/belaban",
        "html_url": "https://github.com/belaban",
        "followers_url": "https://api.github.com/users/belaban/followers",
        "following_url": "https://api.github.com/users/belaban/following{/other_user}",
        "gists_url": "https://api.github.com/users/belaban/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/belaban/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/belaban/subscriptions",
        "organizations_url": "https://api.github.com/users/belaban/orgs",
        "repos_url": "https://api.github.com/users/belaban/repos",
        "events_url": "https://api.github.com/users/belaban/events{/privacy}",
        "received_events_url": "https://api.github.com/users/belaban/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "fb1ebda65acc668b0be670e34e5c3172fbfd5568",
            "url": "https://api.github.com/repos/belaban/JGroups/commits/fb1ebda65acc668b0be670e34e5c3172fbfd5568",
            "html_url": "https://github.com/belaban/JGroups/commit/fb1ebda65acc668b0be670e34e5c3172fbfd5568"
        }
    ],
    "stats": {
        "total": 104,
        "additions": 62,
        "deletions": 42
    },
    "files": [
        {
            "sha": "3fb5abf7ba16685e29fef1c831658540e9a8b614",
            "filename": "src/org/jgroups/protocols/AUTH.java",
            "status": "modified",
            "additions": 54,
            "deletions": 42,
            "changes": 96,
            "blob_url": "https://github.com/belaban/JGroups/blob/b67a6e80598b9ec728997e12bbc13d56bb23ba1c/src%2Forg%2Fjgroups%2Fprotocols%2FAUTH.java",
            "raw_url": "https://github.com/belaban/JGroups/raw/b67a6e80598b9ec728997e12bbc13d56bb23ba1c/src%2Forg%2Fjgroups%2Fprotocols%2FAUTH.java",
            "contents_url": "https://api.github.com/repos/belaban/JGroups/contents/src%2Forg%2Fjgroups%2Fprotocols%2FAUTH.java?ref=b67a6e80598b9ec728997e12bbc13d56bb23ba1c",
            "patch": "@@ -63,30 +63,7 @@ public void init() throws Exception {\n         auth_plugin.init();\n     }\n \n-    /**\n-     * Used to create a failed JOIN_RSP message to pass back down the stack\n-     * @param joiner The Address of the requesting member\n-     * @param message The failure message to send back to the joiner\n-     * @return An Event containing a GmsHeader with a JoinRsp object\n-     */\n-    private Event createFailureEvent(Address joiner, String message){\n-        Message msg = new Message(joiner, null, null);\n-\n-        if(log.isDebugEnabled()){\n-            log.debug(\"Creating JoinRsp with failure message - \" + message);\n-        }\n-        JoinRsp joinRes = new JoinRsp(message);\n-        //need to specify the error message on the JoinRsp object once it's been changed\n \n-        GMS.GmsHeader gmsHeader = new GMS.GmsHeader(GMS.GmsHeader.JOIN_RSP, joinRes);\n-        msg.putHeader(gms_id, gmsHeader);\n-\n-        if(log.isDebugEnabled()){\n-            log.debug(\"GMSHeader created for failure JOIN_RSP\");\n-        }\n-\n-        return new Event(Event.MSG, msg);\n-    }\n \n     /**\n      * An event was received from the layer below. Usually the current layer will want to examine\n@@ -98,11 +75,13 @@ private Event createFailureEvent(Address joiner, String message){\n      * the stack using <code>up_prot.up()</code>.\n      */\n     public Object up(Event evt) {\n-        GMS.GmsHeader hdr=isJoinMessage(evt);\n-        if((hdr != null) && (hdr.getType() == GMS.GmsHeader.JOIN_REQ || hdr.getType() == GMS.GmsHeader.JOIN_REQ_WITH_STATE_TRANSFER)) {\n-            //we found a join message - now try and get the AUTH Header\n-            Message msg=(Message)evt.getArg();\n+        GMS.GmsHeader hdr=getGMSHeader(evt);\n+        if(hdr == null)\n+            return up_prot.up(evt);\n \n+        if(hdr.getType() == GMS.GmsHeader.JOIN_REQ || hdr.getType() == GMS.GmsHeader.JOIN_REQ_WITH_STATE_TRANSFER\n+          || hdr.getType() == GMS.GmsHeader.MERGE_REQ) { // we found a join or merge message - now try and get the AUTH Header\n+            Message msg=(Message)evt.getArg();\n             if((msg.getHeader(this.id) != null) && (msg.getHeader(this.id) instanceof AuthHeader)) {\n                 AuthHeader authHeader=(AuthHeader)msg.getHeader(this.id);\n \n@@ -114,32 +93,63 @@ public Object up(Event evt) {\n                     else {\n                         if(log.isWarnEnabled())\n                             log.warn(\"failed to validate AuthHeader token\");\n-                        sendRejectionMessage(msg.getSrc(), createFailureEvent(msg.getSrc(), \"Authentication failed\"));\n+                        sendRejectionMessage(hdr.getType(), msg.getSrc(), \"Authentication failed\");\n+                        return null;\n                     }\n                 }\n                 else {\n                     //Invalid AUTH Header - need to send failure message\n-                    if(log.isWarnEnabled()) {\n+                    if(log.isWarnEnabled())\n                         log.warn(\"AUTH failed to get valid AuthHeader from Message\");\n-                    }\n-                    sendRejectionMessage(msg.getSrc(), createFailureEvent(msg.getSrc(), \"Failed to find valid AuthHeader in Message\"));\n+                    sendRejectionMessage(hdr.getType(), msg.getSrc(), \"Failed to find valid AuthHeader in Message\");\n+                    return null;\n                 }\n             }\n             else {\n-                sendRejectionMessage(msg.getSrc(), createFailureEvent(msg.getSrc(), \"Failed to find an AuthHeader in Message\"));\n+                sendRejectionMessage(hdr.getType(), msg.getSrc(), \"Failed to find an AuthHeader in Message\");\n+                return null;\n             }\n         }\n-        else {\n-            return up_prot.up(evt);\n-        }\n-        return null;\n+        return up_prot.up(evt);\n     }\n \n \n-    private void sendRejectionMessage(Address dest, Event join_rsp) {\n+\n+    protected void sendRejectionMessage(byte type, Address dest, String error_msg) {\n+        switch(type) {\n+            case GMS.GmsHeader.JOIN_REQ:\n+            case GMS.GmsHeader.JOIN_REQ_WITH_STATE_TRANSFER:\n+                sendJoinRejectionMessage(dest, error_msg);\n+                break;\n+            case GMS.GmsHeader.MERGE_REQ:\n+                sendMergeRejectionMessage(dest, error_msg);\n+                break;\n+            default:\n+                log.error(\"type \" + type + \" unknown\");\n+                break;\n+        }\n+    }\n+\n+    protected void sendJoinRejectionMessage(Address dest, String error_msg) {\n         if(dest == null)\n             return;\n-        down_prot.down(join_rsp);\n+\n+        Message msg = new Message(dest, null, null);\n+        JoinRsp joinRes=new JoinRsp(error_msg); // specify the error message on the JoinRsp\n+\n+        GMS.GmsHeader gmsHeader=new GMS.GmsHeader(GMS.GmsHeader.JOIN_RSP, joinRes);\n+        msg.putHeader(gms_id, gmsHeader);\n+        down_prot.down(new Event(Event.MSG, msg));\n+    }\n+\n+    protected void sendMergeRejectionMessage(Address dest, String error_msg) {\n+        Message msg=new Message(dest, null, null);\n+        msg.setFlag(Message.OOB);\n+        GMS.GmsHeader hdr=new GMS.GmsHeader(GMS.GmsHeader.MERGE_RSP);\n+        hdr.setMergeRejected(true);\n+        msg.putHeader(gms_id, hdr);\n+        if(log.isDebugEnabled()) log.debug(\"merge response=\" + hdr);\n+        down_prot.down(new Event(Event.MSG, msg));\n     }\n \n     /**\n@@ -151,8 +161,10 @@ private void sendRejectionMessage(Address dest, Event join_rsp) {\n      * a new response event back up the stack using <code>up_prot.up()</code>.\n      */\n     public Object down(Event evt) {\n-        GMS.GmsHeader hdr = isJoinMessage(evt);\n-        if((hdr != null) && (hdr.getType() == GMS.GmsHeader.JOIN_REQ || hdr.getType() == GMS.GmsHeader.JOIN_REQ_WITH_STATE_TRANSFER)){\n+        GMS.GmsHeader hdr = getGMSHeader(evt);\n+        if((hdr != null) && (hdr.getType() == GMS.GmsHeader.JOIN_REQ\n+          || hdr.getType() == GMS.GmsHeader.JOIN_REQ_WITH_STATE_TRANSFER\n+          || hdr.getType() == GMS.GmsHeader.MERGE_REQ)) {\n             //we found a join request message - now add an AUTH Header\n             Message msg = (Message)evt.getArg();\n             AuthHeader authHeader = new AuthHeader();\n@@ -163,11 +175,11 @@ public Object down(Event evt) {\n     }\n \n     /**\n-     * Used to check if the message type is a Gms message\n+     * Get the header from a GMS message\n      * @param evt The event object passed in to AUTH\n      * @return A GmsHeader object or null if the event contains a message of a different type\n      */\n-    private static GMS.GmsHeader isJoinMessage(Event evt){\n+    private static GMS.GmsHeader getGMSHeader(Event evt){\n         Message msg;\n         switch(evt.getType()){\n           case Event.MSG:"
        },
        {
            "sha": "9c952cb9479943a198a1ab34dc3582b4814bb0e4",
            "filename": "src/org/jgroups/protocols/pbcast/GMS.java",
            "status": "modified",
            "additions": 8,
            "deletions": 0,
            "changes": 8,
            "blob_url": "https://github.com/belaban/JGroups/blob/b67a6e80598b9ec728997e12bbc13d56bb23ba1c/src%2Forg%2Fjgroups%2Fprotocols%2Fpbcast%2FGMS.java",
            "raw_url": "https://github.com/belaban/JGroups/raw/b67a6e80598b9ec728997e12bbc13d56bb23ba1c/src%2Forg%2Fjgroups%2Fprotocols%2Fpbcast%2FGMS.java",
            "contents_url": "https://api.github.com/repos/belaban/JGroups/contents/src%2Forg%2Fjgroups%2Fprotocols%2Fpbcast%2FGMS.java?ref=b67a6e80598b9ec728997e12bbc13d56bb23ba1c",
            "patch": "@@ -1065,6 +1065,14 @@ public void setMergeId(MergeId merge_id) {\n             this.merge_id=merge_id;\n         }\n \n+        public boolean isMergeRejected() {\n+            return merge_rejected;\n+        }\n+\n+        public void setMergeRejected(boolean merge_rejected) {\n+            this.merge_rejected=merge_rejected;\n+        }\n+\n         public String toString() {\n             StringBuilder sb=new StringBuilder(\"GmsHeader\");\n             sb.append('[' + type2String(type) + ']');"
        }
    ]
}