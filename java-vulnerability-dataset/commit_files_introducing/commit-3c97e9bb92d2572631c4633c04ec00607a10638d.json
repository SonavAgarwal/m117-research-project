{
    "sha": "3c97e9bb92d2572631c4633c04ec00607a10638d",
    "node_id": "MDY6Q29tbWl0MjQ5MzkwNDozYzk3ZTliYjkyZDI1NzI2MzFjNDYzM2MwNGVjMDA2MDdhMTA2Mzhk",
    "commit": {
        "author": {
            "name": "Mark Thomas",
            "email": "markt@apache.org",
            "date": "2015-06-10T20:02:11Z"
        },
        "committer": {
            "name": "Mark Thomas",
            "email": "markt@apache.org",
            "date": "2015-06-10T20:02:11Z"
        },
        "message": "Add a test for closure of idle streams and fix the bugs it identified.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1684757 13f79535-47bb-0310-9956-ffa450edef68",
        "tree": {
            "sha": "231ea7181e6ad5bcfc74e432f5afc68bd3013f08",
            "url": "https://api.github.com/repos/apache/tomcat/git/trees/231ea7181e6ad5bcfc74e432f5afc68bd3013f08"
        },
        "url": "https://api.github.com/repos/apache/tomcat/git/commits/3c97e9bb92d2572631c4633c04ec00607a10638d",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/tomcat/commits/3c97e9bb92d2572631c4633c04ec00607a10638d",
    "html_url": "https://github.com/apache/tomcat/commit/3c97e9bb92d2572631c4633c04ec00607a10638d",
    "comments_url": "https://api.github.com/repos/apache/tomcat/commits/3c97e9bb92d2572631c4633c04ec00607a10638d/comments",
    "author": {
        "login": "markt-asf",
        "id": 4690029,
        "node_id": "MDQ6VXNlcjQ2OTAwMjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4690029?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markt-asf",
        "html_url": "https://github.com/markt-asf",
        "followers_url": "https://api.github.com/users/markt-asf/followers",
        "following_url": "https://api.github.com/users/markt-asf/following{/other_user}",
        "gists_url": "https://api.github.com/users/markt-asf/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markt-asf/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markt-asf/subscriptions",
        "organizations_url": "https://api.github.com/users/markt-asf/orgs",
        "repos_url": "https://api.github.com/users/markt-asf/repos",
        "events_url": "https://api.github.com/users/markt-asf/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markt-asf/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "markt-asf",
        "id": 4690029,
        "node_id": "MDQ6VXNlcjQ2OTAwMjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4690029?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markt-asf",
        "html_url": "https://github.com/markt-asf",
        "followers_url": "https://api.github.com/users/markt-asf/followers",
        "following_url": "https://api.github.com/users/markt-asf/following{/other_user}",
        "gists_url": "https://api.github.com/users/markt-asf/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markt-asf/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markt-asf/subscriptions",
        "organizations_url": "https://api.github.com/users/markt-asf/orgs",
        "repos_url": "https://api.github.com/users/markt-asf/repos",
        "events_url": "https://api.github.com/users/markt-asf/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markt-asf/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "f86e4022e126f55c19b3f1dbc68cc7b23e531874",
            "url": "https://api.github.com/repos/apache/tomcat/commits/f86e4022e126f55c19b3f1dbc68cc7b23e531874",
            "html_url": "https://github.com/apache/tomcat/commit/f86e4022e126f55c19b3f1dbc68cc7b23e531874"
        }
    ],
    "stats": {
        "total": 51,
        "additions": 46,
        "deletions": 5
    },
    "files": [
        {
            "sha": "24030b83636a94d6619046c5ff7f900639cc4adc",
            "filename": "java/org/apache/coyote/http2/Http2UpgradeHandler.java",
            "status": "modified",
            "additions": 4,
            "deletions": 2,
            "changes": 6,
            "blob_url": "https://github.com/apache/tomcat/blob/3c97e9bb92d2572631c4633c04ec00607a10638d/java%2Forg%2Fapache%2Fcoyote%2Fhttp2%2FHttp2UpgradeHandler.java",
            "raw_url": "https://github.com/apache/tomcat/raw/3c97e9bb92d2572631c4633c04ec00607a10638d/java%2Forg%2Fapache%2Fcoyote%2Fhttp2%2FHttp2UpgradeHandler.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java%2Forg%2Fapache%2Fcoyote%2Fhttp2%2FHttp2UpgradeHandler.java?ref=3c97e9bb92d2572631c4633c04ec00607a10638d",
            "patch": "@@ -119,7 +119,8 @@ public class Http2UpgradeHandler extends AbstractStream implements InternalHttpU\n     private final Map<Integer,Stream> streams = new HashMap<>();\n     private volatile int activeRemoteStreamCount = 0;\n     private volatile int maxRemoteStreamId = 0;\n-    private volatile int maxActiveRemoteStreamId = 0;\n+    // Start at -1 so the 'add 2' logic in closeIdleStreams() works\n+    private volatile int maxActiveRemoteStreamId = -1;\n \n     // Tracking for when the connection is blocked (windowSize < 1)\n     private final Object backLogLock = new Object();\n@@ -141,6 +142,7 @@ public Http2UpgradeHandler(Adapter adapter, Request coyoteRequest) {\n             Stream stream = new Stream(key, this, coyoteRequest);\n             streams.put(key, stream);\n             maxRemoteStreamId = 1;\n+            maxActiveRemoteStreamId = 1;\n             activeRemoteStreamCount = 1;\n         }\n     }\n@@ -803,7 +805,7 @@ public HeaderEmitter headersStart(int streamId) throws Http2Exception {\n \n     private void closeIdleStreams(int newMaxActiveRemoteStreamId) throws Http2Exception {\n         for (int i = maxActiveRemoteStreamId + 2; i < newMaxActiveRemoteStreamId; i += 2) {\n-            Stream stream = getStream(newMaxActiveRemoteStreamId, false);\n+            Stream stream = getStream(i, false);\n             if (stream != null) {\n                 stream.closeIfIdle();\n             }"
        },
        {
            "sha": "92fd11c68b997bd390cc0760e2f3ba510bccc077",
            "filename": "test/org/apache/coyote/http2/Http2TestBase.java",
            "status": "modified",
            "additions": 20,
            "deletions": 1,
            "changes": 21,
            "blob_url": "https://github.com/apache/tomcat/blob/3c97e9bb92d2572631c4633c04ec00607a10638d/test%2Forg%2Fapache%2Fcoyote%2Fhttp2%2FHttp2TestBase.java",
            "raw_url": "https://github.com/apache/tomcat/raw/3c97e9bb92d2572631c4633c04ec00607a10638d/test%2Forg%2Fapache%2Fcoyote%2Fhttp2%2FHttp2TestBase.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test%2Forg%2Fapache%2Fcoyote%2Fhttp2%2FHttp2TestBase.java?ref=3c97e9bb92d2572631c4633c04ec00607a10638d",
            "patch": "@@ -43,7 +43,6 @@\n import org.apache.tomcat.util.codec.binary.Base64;\n import org.apache.tomcat.util.http.MimeHeaders;\n \n-\n /**\n  * Tests for compliance with the <a href=\"https://tools.ietf.org/html/rfc7540\">\n  * HTTP/2 specification</a>.\n@@ -409,6 +408,26 @@ void sendData(int streamId, byte[] payload) throws IOException {\n         os.flush();\n     }\n \n+\n+    void sendPriority(int streamId, int streamDependencyId, int weight) throws IOException {\n+        byte[] priorityFrame = new byte[14];\n+        // length\n+        ByteUtil.setThreeBytes(priorityFrame, 0, 5);\n+        // type\n+        priorityFrame[3] = FrameType.PRIORITY.getIdByte();\n+        // No flags\n+        // Stream ID\n+        ByteUtil.set31Bits(priorityFrame, 5, streamId);\n+\n+        // Payload\n+        ByteUtil.set31Bits(priorityFrame, 9, streamDependencyId);\n+        ByteUtil.setOneBytes(priorityFrame, 13, weight);\n+\n+        os.write(priorityFrame);\n+        os.flush();\n+    }\n+\n+\n     private static class TestInput implements Http2Parser.Input {\n \n         private final InputStream is;"
        },
        {
            "sha": "75f8b38473c1d3be091faa93deb0207dd0c196c0",
            "filename": "test/org/apache/coyote/http2/TestHttp2Section_5_1.java",
            "status": "modified",
            "additions": 22,
            "deletions": 2,
            "changes": 24,
            "blob_url": "https://github.com/apache/tomcat/blob/3c97e9bb92d2572631c4633c04ec00607a10638d/test%2Forg%2Fapache%2Fcoyote%2Fhttp2%2FTestHttp2Section_5_1.java",
            "raw_url": "https://github.com/apache/tomcat/raw/3c97e9bb92d2572631c4633c04ec00607a10638d/test%2Forg%2Fapache%2Fcoyote%2Fhttp2%2FTestHttp2Section_5_1.java",
            "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test%2Forg%2Fapache%2Fcoyote%2Fhttp2%2FTestHttp2Section_5_1.java?ref=3c97e9bb92d2572631c4633c04ec00607a10638d",
            "patch": "@@ -178,11 +178,31 @@ public void testClientSendOldStream() throws Exception {\n         Assert.assertTrue(output.getTrace(),\n                 output.getTrace().startsWith(\"0-Goaway-[2147483647]-[\" +\n                         Http2Error.PROTOCOL_ERROR.getCode() + \"]-[\"));\n-\n     }\n \n \n-    // TODO Remaining 5.1.1 tests\n+    @Test\n+    public void testImplicitClose() throws Exception {\n+        hpackEncoder = new HpackEncoder(ConnectionSettings.DEFAULT_HEADER_TABLE_SIZE);\n+        http2Connect();\n+\n+        sendPriority(3, 0, 16);\n+        sendPriority(5, 0, 16);\n+\n+        sendSimpleRequest(5);\n+        readSimpleResponse();\n+        Assert.assertEquals(getSimpleResponseTrace(5), output.getTrace());\n+        output.clearTrace();\n+\n+        // Should trigger an error since stream 3 should have been implicitly\n+        // closed.\n+        sendSimpleRequest(3);\n+\n+        parser.readFrame(true);\n \n+        Assert.assertTrue(output.getTrace(),\n+                output.getTrace().startsWith(\"0-Goaway-[2147483647]-[\" +\n+                        Http2Error.PROTOCOL_ERROR.getCode() + \"]-[\"));\n+    }\n     // TODO 5.1.2 tests\n }"
        }
    ]
}