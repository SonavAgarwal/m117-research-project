{
    "sha": "1c9dcb152130b0b8de59f9df4256fa349c695f25",
    "node_id": "MDY6Q29tbWl0Mzk4NjcyNjc6MWM5ZGNiMTUyMTMwYjBiOGRlNTlmOWRmNDI1NmZhMzQ5YzY5NWYyNQ==",
    "commit": {
        "author": {
            "name": "Paul LeBeau",
            "email": "paul.lebeau@gmail.com",
            "date": "2018-01-31T08:06:32Z"
        },
        "committer": {
            "name": "Paul LeBeau",
            "email": "paul.lebeau@gmail.com",
            "date": "2018-01-31T08:06:32Z"
        },
        "message": "Support both SAXPsrser and XmlPullParser depending on whether we want to support entity expansion or not.",
        "tree": {
            "sha": "b19ce42897b201aeb6f8c69545a39c9c92433c27",
            "url": "https://api.github.com/repos/BigBadaboom/androidsvg/git/trees/b19ce42897b201aeb6f8c69545a39c9c92433c27"
        },
        "url": "https://api.github.com/repos/BigBadaboom/androidsvg/git/commits/1c9dcb152130b0b8de59f9df4256fa349c695f25",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/BigBadaboom/androidsvg/commits/1c9dcb152130b0b8de59f9df4256fa349c695f25",
    "html_url": "https://github.com/BigBadaboom/androidsvg/commit/1c9dcb152130b0b8de59f9df4256fa349c695f25",
    "comments_url": "https://api.github.com/repos/BigBadaboom/androidsvg/commits/1c9dcb152130b0b8de59f9df4256fa349c695f25/comments",
    "author": {
        "login": "BigBadaboom",
        "id": 840288,
        "node_id": "MDQ6VXNlcjg0MDI4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/840288?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BigBadaboom",
        "html_url": "https://github.com/BigBadaboom",
        "followers_url": "https://api.github.com/users/BigBadaboom/followers",
        "following_url": "https://api.github.com/users/BigBadaboom/following{/other_user}",
        "gists_url": "https://api.github.com/users/BigBadaboom/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/BigBadaboom/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/BigBadaboom/subscriptions",
        "organizations_url": "https://api.github.com/users/BigBadaboom/orgs",
        "repos_url": "https://api.github.com/users/BigBadaboom/repos",
        "events_url": "https://api.github.com/users/BigBadaboom/events{/privacy}",
        "received_events_url": "https://api.github.com/users/BigBadaboom/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "BigBadaboom",
        "id": 840288,
        "node_id": "MDQ6VXNlcjg0MDI4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/840288?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BigBadaboom",
        "html_url": "https://github.com/BigBadaboom",
        "followers_url": "https://api.github.com/users/BigBadaboom/followers",
        "following_url": "https://api.github.com/users/BigBadaboom/following{/other_user}",
        "gists_url": "https://api.github.com/users/BigBadaboom/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/BigBadaboom/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/BigBadaboom/subscriptions",
        "organizations_url": "https://api.github.com/users/BigBadaboom/orgs",
        "repos_url": "https://api.github.com/users/BigBadaboom/repos",
        "events_url": "https://api.github.com/users/BigBadaboom/events{/privacy}",
        "received_events_url": "https://api.github.com/users/BigBadaboom/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "319fd9bd57d7585c9a3a54453b96df58c7c5d23c",
            "url": "https://api.github.com/repos/BigBadaboom/androidsvg/commits/319fd9bd57d7585c9a3a54453b96df58c7c5d23c",
            "html_url": "https://github.com/BigBadaboom/androidsvg/commit/319fd9bd57d7585c9a3a54453b96df58c7c5d23c"
        }
    ],
    "stats": {
        "total": 837,
        "additions": 535,
        "deletions": 302
    },
    "files": [
        {
            "sha": "152eef67f956f2fdc0bb14b8d8ea22c905bdb50b",
            "filename": "androidsvg/src/main/java/com/caverock/androidsvg/CSSParser.java",
            "status": "modified",
            "additions": 26,
            "deletions": 28,
            "changes": 54,
            "blob_url": "https://github.com/BigBadaboom/androidsvg/blob/1c9dcb152130b0b8de59f9df4256fa349c695f25/androidsvg%2Fsrc%2Fmain%2Fjava%2Fcom%2Fcaverock%2Fandroidsvg%2FCSSParser.java",
            "raw_url": "https://github.com/BigBadaboom/androidsvg/raw/1c9dcb152130b0b8de59f9df4256fa349c695f25/androidsvg%2Fsrc%2Fmain%2Fjava%2Fcom%2Fcaverock%2Fandroidsvg%2FCSSParser.java",
            "contents_url": "https://api.github.com/repos/BigBadaboom/androidsvg/contents/androidsvg%2Fsrc%2Fmain%2Fjava%2Fcom%2Fcaverock%2Fandroidsvg%2FCSSParser.java?ref=1c9dcb152130b0b8de59f9df4256fa349c695f25",
            "patch": "@@ -16,19 +16,17 @@\n \r\n package com.caverock.androidsvg;\r\n \r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-import java.util.Locale;\r\n-\r\n-import org.xml.sax.SAXException;\r\n-\r\n import android.util.Log;\r\n \r\n import com.caverock.androidsvg.SVG.SvgContainer;\r\n import com.caverock.androidsvg.SVG.SvgElementBase;\r\n import com.caverock.androidsvg.SVG.SvgObject;\r\n import com.caverock.androidsvg.SVGParser.TextScanner;\r\n \r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import java.util.Locale;\r\n+\r\n /**\r\n  * A very simple CSS parser that is not very compliant with the CSS spec but\r\n  * hopefully parses almost all the CSS we are likely to strike in an SVG file.\r\n@@ -283,7 +281,7 @@ public String toString()\n    }\r\n \r\n \r\n-   Ruleset  parse(String sheet) throws SAXException\r\n+   Ruleset  parse(String sheet) throws SVGParseException\r\n    {\r\n       CSSTextScanner  scan = new CSSTextScanner(sheet);\r\n       scan.skipWhitespace();\r\n@@ -292,13 +290,13 @@ Ruleset  parse(String sheet) throws SAXException\n    }\r\n \r\n \r\n-   static boolean mediaMatches(String mediaListStr, MediaType rendererMediaType) throws SAXException\r\n+   static boolean mediaMatches(String mediaListStr, MediaType rendererMediaType) throws SVGParseException\r\n    {\r\n       CSSTextScanner  scan = new CSSTextScanner(mediaListStr);\r\n       scan.skipWhitespace();\r\n       List<MediaType>  mediaList = parseMediaList(scan);\r\n       if (!scan.empty())\r\n-         throw new SAXException(\"Invalid @media type list\");\r\n+         throw new SVGParseException(\"Invalid @media type list\");\r\n       return mediaMatches(mediaList, rendererMediaType);\r\n    }\r\n \r\n@@ -379,7 +377,7 @@ private int  scanForIdentifier()\n        * Returns true if it found one.\r\n        * Returns false if there was an error or the input is empty.\r\n        */\r\n-      boolean  nextSimpleSelector(Selector selector) throws SAXException\r\n+      boolean  nextSimpleSelector(Selector selector) throws SVGParseException\r\n       {\r\n          if (empty())\r\n             return false;\r\n@@ -418,7 +416,7 @@ boolean  nextSimpleSelector(Selector selector) throws SAXException\n                   selectorPart = new SimpleSelector(combinator, null);\r\n                String  value = nextIdentifier();\r\n                if (value == null)\r\n-                  throw new SAXException(\"Invalid \\\".class\\\" selector in <style> element\");\r\n+                  throw new SVGParseException(\"Invalid \\\".class\\\" selector in <style> element\");\r\n                selectorPart.addAttrib(CLASS, AttribOp.EQUALS, value);\r\n                selector.addedAttributeOrPseudo();\r\n                continue;\r\n@@ -431,7 +429,7 @@ boolean  nextSimpleSelector(Selector selector) throws SAXException\n                   selectorPart = new SimpleSelector(combinator, null);\r\n                String  value = nextIdentifier();\r\n                if (value == null)\r\n-                  throw new SAXException(\"Invalid \\\"#id\\\" selector in <style> element\");\r\n+                  throw new SVGParseException(\"Invalid \\\"#id\\\" selector in <style> element\");\r\n                selectorPart.addAttrib(ID, AttribOp.EQUALS, value);\r\n                selector.addedIdAttribute();\r\n             }\r\n@@ -446,7 +444,7 @@ boolean  nextSimpleSelector(Selector selector) throws SAXException\n                String  attrName = nextIdentifier();\r\n                String  attrValue = null;\r\n                if (attrName == null)\r\n-                  throw new SAXException(\"Invalid attribute selector in <style> element\");\r\n+                  throw new SVGParseException(\"Invalid attribute selector in <style> element\");\r\n                skipWhitespace();\r\n                AttribOp  op = null;\r\n                if (consume('='))\r\n@@ -459,11 +457,11 @@ else if (consume(\"|=\"))\n                   skipWhitespace();\r\n                   attrValue = nextAttribValue();\r\n                   if (attrValue == null)\r\n-                     throw new SAXException(\"Invalid attribute selector in <style> element\");\r\n+                     throw new SVGParseException(\"Invalid attribute selector in <style> element\");\r\n                   skipWhitespace();\r\n                }\r\n                if (!consume(']'))\r\n-                  throw new SAXException(\"Invalid attribute selector in <style> element\");\r\n+                  throw new SVGParseException(\"Invalid attribute selector in <style> element\");\r\n                selectorPart.addAttrib(attrName, (op == null) ? AttribOp.EXISTS : op, attrValue);\r\n                selector.addedAttributeOrPseudo();\r\n                continue;\r\n@@ -556,15 +554,15 @@ private static boolean mediaMatches(List<MediaType> mediaList, MediaType rendere\n    }\r\n \r\n \r\n-   private static List<MediaType> parseMediaList(CSSTextScanner scan) throws SAXException\r\n+   private static List<MediaType> parseMediaList(CSSTextScanner scan) throws SVGParseException\r\n    {\r\n       ArrayList<MediaType>  typeList = new ArrayList<>();\r\n       while (!scan.empty()) {\r\n          String  type = scan.nextToken(',');\r\n          try {\r\n             typeList.add(MediaType.valueOf(type));\r\n          } catch (IllegalArgumentException e) {\r\n-            throw new SAXException(\"Invalid @media type list\");\r\n+            throw new SVGParseException(\"Invalid @media type list\");\r\n          }\r\n          // If there is a comma, keep looping, otherwise break\r\n          if (!scan.skipCommaWhitespace())\r\n@@ -574,17 +572,17 @@ private static List<MediaType> parseMediaList(CSSTextScanner scan) throws SAXExc\n    }\r\n \r\n \r\n-   private void  parseAtRule(Ruleset ruleset, CSSTextScanner scan) throws SAXException\r\n+   private void  parseAtRule(Ruleset ruleset, CSSTextScanner scan) throws SVGParseException\r\n    {\r\n       String  atKeyword = scan.nextIdentifier();\r\n       scan.skipWhitespace();\r\n       if (atKeyword == null)\r\n-         throw new SAXException(\"Invalid '@' rule in <style> element\");\r\n+         throw new SVGParseException(\"Invalid '@' rule in <style> element\");\r\n       if (!inMediaRule && atKeyword.equals(\"media\"))\r\n       {\r\n          List<MediaType>  mediaList = parseMediaList(scan);\r\n          if (!scan.consume('{'))\r\n-            throw new SAXException(\"Invalid @media rule: missing rule set\");\r\n+            throw new SVGParseException(\"Invalid @media rule: missing rule set\");\r\n             \r\n          scan.skipWhitespace();\r\n          if (mediaMatches(mediaList, rendererMediaType)) {\r\n@@ -596,7 +594,7 @@ private void  parseAtRule(Ruleset ruleset, CSSTextScanner scan) throws SAXExcept\n          }\r\n \r\n          if (!scan.consume('}'))\r\n-            throw new SAXException(\"Invalid @media rule: expected '}' at end of rule set\");\r\n+            throw new SVGParseException(\"Invalid @media rule: expected '}' at end of rule set\");\r\n \r\n       //} else if (atKeyword.equals(\"charset\")) {\r\n       //} else if (atKeyword.equals(\"import\")) {\r\n@@ -630,7 +628,7 @@ else if (ch == '}' && depth > 0) {\n    }\r\n \r\n \r\n-   private Ruleset  parseRuleset(CSSTextScanner scan) throws SAXException\r\n+   private Ruleset  parseRuleset(CSSTextScanner scan) throws SVGParseException\r\n    {\r\n       Ruleset  ruleset = new Ruleset(); \r\n       while (!scan.empty())\r\n@@ -654,13 +652,13 @@ private Ruleset  parseRuleset(CSSTextScanner scan) throws SAXException\n    }\r\n \r\n \r\n-   private boolean  parseRule(Ruleset ruleset, CSSTextScanner scan) throws SAXException\r\n+   private boolean  parseRule(Ruleset ruleset, CSSTextScanner scan) throws SVGParseException\r\n    {\r\n       List<Selector>  selectors = parseSelectorGroup(scan);\r\n       if (selectors != null && !selectors.isEmpty())\r\n       {\r\n          if (!scan.consume('{'))\r\n-            throw new SAXException(\"Malformed rule block in <style> element: missing '{'\");\r\n+            throw new SVGParseException(\"Malformed rule block in <style> element: missing '{'\");\r\n          scan.skipWhitespace();\r\n          SVG.Style  ruleStyle = parseDeclarations(scan);\r\n          scan.skipWhitespace();\r\n@@ -679,7 +677,7 @@ private boolean  parseRule(Ruleset ruleset, CSSTextScanner scan) throws SAXExcep\n    /*\r\n     * Parse a selector group (eg. E, F, G). In many/most cases there will be only one entry.\r\n     */\r\n-   private List<Selector>  parseSelectorGroup(CSSTextScanner scan) throws SAXException\r\n+   private List<Selector>  parseSelectorGroup(CSSTextScanner scan) throws SVGParseException\r\n    {\r\n       if (scan.empty())\r\n          return null;\r\n@@ -707,7 +705,7 @@ private List<Selector>  parseSelectorGroup(CSSTextScanner scan) throws SAXExcept\n \r\n \r\n    // Parse a list of\r\n-   private SVG.Style  parseDeclarations(CSSTextScanner scan) throws SAXException\r\n+   private SVG.Style  parseDeclarations(CSSTextScanner scan) throws SVGParseException\r\n    {\r\n       SVG.Style  ruleStyle = new SVG.Style();\r\n       while (true)\r\n@@ -725,7 +723,7 @@ private SVG.Style  parseDeclarations(CSSTextScanner scan) throws SAXException\n          if (scan.consume('!')) {\r\n             scan.skipWhitespace();\r\n             if (!scan.consume(\"important\")) {\r\n-               throw new SAXException(\"Malformed rule set in <style> element: found unexpected '!'\");\r\n+               throw new SVGParseException(\"Malformed rule set in <style> element: found unexpected '!'\");\r\n             }\r\n             // We don't do anything with these. We just ignore them.\r\n             scan.skipWhitespace();\r\n@@ -738,7 +736,7 @@ private SVG.Style  parseDeclarations(CSSTextScanner scan) throws SAXException\n          if (scan.empty())\r\n             break;\r\n       }\r\n-      throw new SAXException(\"Malformed rule set in <style> element\");\r\n+      throw new SVGParseException(\"Malformed rule set in <style> element\");\r\n    }\r\n \r\n \r"
        },
        {
            "sha": "10d7afe440a0f9872ef69f6513583817393012de",
            "filename": "androidsvg/src/main/java/com/caverock/androidsvg/SVG.java",
            "status": "modified",
            "additions": 55,
            "deletions": 24,
            "changes": 79,
            "blob_url": "https://github.com/BigBadaboom/androidsvg/blob/1c9dcb152130b0b8de59f9df4256fa349c695f25/androidsvg%2Fsrc%2Fmain%2Fjava%2Fcom%2Fcaverock%2Fandroidsvg%2FSVG.java",
            "raw_url": "https://github.com/BigBadaboom/androidsvg/raw/1c9dcb152130b0b8de59f9df4256fa349c695f25/androidsvg%2Fsrc%2Fmain%2Fjava%2Fcom%2Fcaverock%2Fandroidsvg%2FSVG.java",
            "contents_url": "https://api.github.com/repos/BigBadaboom/androidsvg/contents/androidsvg%2Fsrc%2Fmain%2Fjava%2Fcom%2Fcaverock%2Fandroidsvg%2FSVG.java?ref=1c9dcb152130b0b8de59f9df4256fa349c695f25",
            "patch": "@@ -27,8 +27,6 @@\n \r\n import com.caverock.androidsvg.CSSParser.Ruleset;\r\n \r\n-import org.xml.sax.SAXException;\r\n-\r\n import java.io.ByteArrayInputStream;\r\n import java.io.IOException;\r\n import java.io.InputStream;\r\n@@ -85,7 +83,10 @@ public class SVG\n \r\n    private static final double  SQRT2 = 1.414213562373095;\r\n \r\n+   // Parser configuration\r\n+   private static boolean  enableInternalEntities = true;\r\n \r\n+   // The root svg element\r\n    private Svg     rootElement = null;\r\n \r\n    // Metadata\r\n@@ -128,6 +129,7 @@ enum GradientSpread\n    }\r\n \r\n \r\n+   /* package private */\r\n    SVG()\r\n    {\r\n    }\r\n@@ -144,7 +146,7 @@ enum GradientSpread\n    public static SVG  getFromInputStream(InputStream is) throws SVGParseException\r\n    {\r\n       SVGParser  parser = new SVGParser();\r\n-      return parser.parse(is);\r\n+      return parser.parse(is, enableInternalEntities);\r\n    }\r\n \r\n \r\n@@ -159,7 +161,7 @@ public static SVG  getFromInputStream(InputStream is) throws SVGParseException\n    public static SVG  getFromString(String svg) throws SVGParseException\r\n    {\r\n       SVGParser  parser = new SVGParser();\r\n-      return parser.parse(new ByteArrayInputStream(svg.getBytes()));\r\n+      return parser.parse(new ByteArrayInputStream(svg.getBytes()), enableInternalEntities);\r\n    }\r\n \r\n \r\n@@ -192,7 +194,7 @@ public static SVG  getFromResource(Resources resources, int resourceId) throws S\n       SVGParser    parser = new SVGParser();\r\n       InputStream  is = resources.openRawResource(resourceId);\r\n       try {\r\n-         return parser.parse(is);\r\n+         return parser.parse(is, enableInternalEntities);\r\n       } finally {\r\n          try {\r\n            is.close();\r\n@@ -218,7 +220,7 @@ public static SVG  getFromAsset(AssetManager assetManager, String filename) thro\n       SVGParser    parser = new SVGParser();\r\n       InputStream  is = assetManager.open(filename);\r\n       try {\r\n-         return parser.parse(is);\r\n+         return parser.parse(is, enableInternalEntities);\r\n       } finally {\r\n          try {\r\n            is.close();\r\n@@ -232,6 +234,43 @@ public static SVG  getFromAsset(AssetManager assetManager, String filename) thro\n    //===============================================================================\r\n \r\n \r\n+   /**\r\n+    * Tells the parser whether to allow the expansion of internal entities.\r\n+    * An example of document containing an internal entities is:\r\n+    *\r\n+    * {@code\r\n+    * <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.0//EN\" \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\" [\r\n+    *   <!ENTITY hello \"Hello World!\">\r\n+    * ]>\r\n+    * <svg>\r\n+    *    <text>&hello;</text>\r\n+    * </svg>\r\n+    * }\r\n+    *\r\n+    * Entities are useful in some circumstances, but SVG files that use them are quite rare.  Note\r\n+    * also that enabling entity expansion makes you vulnerable to the\r\n+    * <a href=\"https://en.wikipedia.org/wiki/Billion_laughs_attack\">Billion Laughs Attack</a>\r\n+    *\r\n+    * Entity expansion is enabled by default.\r\n+    *\r\n+    * @param enable Set true if you want to enable entity expansion by the parser.\r\n+    * @since 1.3\r\n+    */\r\n+   public static void  setInternalEntitiesEnabled(boolean enable)\r\n+   {\r\n+      enableInternalEntities = enable;\r\n+   }\r\n+\r\n+   /**\r\n+    * @return true if internal entity expansion is enabled in the parser\r\n+    * @since 1.3\r\n+    */\r\n+   public static boolean  isInternalEntitiesEnabled()\r\n+   {\r\n+      return enableInternalEntities;\r\n+   }\r\n+\r\n+\r\n    /**\r\n     * Register an {@link SVGExternalFileResolver} instance that the renderer should use when resolving\r\n     * external references such as images and fonts.\r\n@@ -629,11 +668,7 @@ public void  setDocumentWidth(String value) throws SVGParseException\n       if (this.rootElement == null)\r\n          throw new IllegalArgumentException(\"SVG document is empty\");\r\n \r\n-      try {\r\n-        this.rootElement.width = SVGParser.parseLength(value);\r\n-      } catch (SAXException e) {\r\n-         throw new SVGParseException(e.getMessage());\r\n-      }\r\n+      this.rootElement.width = SVGParser.parseLength(value);\r\n    }\r\n \r\n \r\n@@ -690,11 +725,7 @@ public void  setDocumentHeight(String value) throws SVGParseException\n       if (this.rootElement == null)\r\n          throw new IllegalArgumentException(\"SVG document is empty\");\r\n \r\n-      try {\r\n-        this.rootElement.height = SVGParser.parseLength(value);\r\n-      } catch (SAXException e) {\r\n-         throw new SVGParseException(e.getMessage());\r\n-      }\r\n+      this.rootElement.height = SVGParser.parseLength(value);\r\n    }\r\n \r\n \r\n@@ -1525,7 +1556,7 @@ static class  SvgConditionalElement extends SvgElement implements SvgConditional\n    interface SvgContainer\r\n    {\r\n       List<SvgObject>  getChildren();\r\n-      void             addChild(SvgObject elem) throws SAXException;\r\n+      void             addChild(SvgObject elem) throws SVGParseException;\r\n    }\r\n \r\n \r\n@@ -1542,7 +1573,7 @@ static class SvgConditionalContainer extends SvgElement implements SvgContainer,\n       @Override\r\n       public List<SvgObject>  getChildren() { return children; }\r\n       @Override\r\n-      public void addChild(SvgObject elem) throws SAXException  { children.add(elem); }\r\n+      public void addChild(SvgObject elem) throws SVGParseException  { children.add(elem); }\r\n \r\n       @Override\r\n       public void setRequiredFeatures(Set<String> features) { this.requiredFeatures = features; }\r\n@@ -1709,12 +1740,12 @@ interface  TextChild\n    static class  TextContainer extends SvgConditionalContainer\r\n    {\r\n       @Override\r\n-      public void  addChild(SvgObject elem) throws SAXException\r\n+      public void  addChild(SvgObject elem) throws SVGParseException\r\n       {\r\n          if (elem instanceof TextChild)\r\n             children.add(elem);\r\n          else\r\n-            throw new SAXException(\"Text content elements cannot contain \"+elem+\" elements.\");\r\n+            throw new SVGParseException(\"Text content elements cannot contain \"+elem+\" elements.\");\r\n       }\r\n    }\r\n \r\n@@ -1836,12 +1867,12 @@ public List<SvgObject> getChildren()\n       }\r\n \r\n       @Override\r\n-      public void addChild(SvgObject elem) throws SAXException\r\n+      public void addChild(SvgObject elem) throws SVGParseException\r\n       {\r\n          if (elem instanceof Stop)\r\n             children.add(elem);\r\n          else\r\n-            throw new SAXException(\"Gradient elements cannot contain \"+elem+\" elements.\");\r\n+            throw new SVGParseException(\"Gradient elements cannot contain \"+elem+\" elements.\");\r\n       }\r\n    }\r\n \r\n@@ -1855,7 +1886,7 @@ static class Stop extends SvgElementBase implements SvgContainer\n       @Override\r\n       public List<SvgObject> getChildren() { return Collections.emptyList(); }\r\n       @Override\r\n-      public void addChild(SvgObject elem) throws SAXException { /* do nothing */ }\r\n+      public void addChild(SvgObject elem) throws SVGParseException { /* do nothing */ }\r\n    }\r\n \r\n \r\n@@ -1938,7 +1969,7 @@ static class SolidColor extends SvgElementBase implements SvgContainer\n       @Override\r\n       public List<SvgObject> getChildren() { return Collections.emptyList(); }\r\n       @Override\r\n-      public void addChild(SvgObject elem) throws SAXException { /* do nothing */ }\r\n+      public void addChild(SvgObject elem) throws SVGParseException { /* do nothing */ }\r\n    }\r\n \r\n \r"
        },
        {
            "sha": "2c1a81ff166967b6f4a0756697af3ce44ae2de69",
            "filename": "androidsvg/src/main/java/com/caverock/androidsvg/SVGParseException.java",
            "status": "modified",
            "additions": 5,
            "deletions": 2,
            "changes": 7,
            "blob_url": "https://github.com/BigBadaboom/androidsvg/blob/1c9dcb152130b0b8de59f9df4256fa349c695f25/androidsvg%2Fsrc%2Fmain%2Fjava%2Fcom%2Fcaverock%2Fandroidsvg%2FSVGParseException.java",
            "raw_url": "https://github.com/BigBadaboom/androidsvg/raw/1c9dcb152130b0b8de59f9df4256fa349c695f25/androidsvg%2Fsrc%2Fmain%2Fjava%2Fcom%2Fcaverock%2Fandroidsvg%2FSVGParseException.java",
            "contents_url": "https://api.github.com/repos/BigBadaboom/androidsvg/contents/androidsvg%2Fsrc%2Fmain%2Fjava%2Fcom%2Fcaverock%2Fandroidsvg%2FSVGParseException.java?ref=1c9dcb152130b0b8de59f9df4256fa349c695f25",
            "patch": "@@ -16,18 +16,21 @@\n \r\n package com.caverock.androidsvg;\r\n \r\n+import org.xml.sax.SAXException;\r\n+\r\n /**\r\n  * Thrown by the parser if a problem is found in the SVG file.\r\n+ * Extends SAXException rather than Exception to avoid unnecessary casts in the SAX parser handling code.\r\n  */\r\n \r\n-public class SVGParseException extends Exception\r\n+public class SVGParseException extends SAXException\r\n {\r\n    SVGParseException(String msg)\r\n    {\r\n       super(msg);\r\n    }\r\n \r\n-   SVGParseException(String msg, Throwable cause)\r\n+   SVGParseException(String msg, Exception cause)\r\n    {\r\n       super(msg, cause);\r\n    }\r"
        },
        {
            "sha": "2b2fa2ec29d706b3cd096021f57860ff94aabc4b",
            "filename": "androidsvg/src/main/java/com/caverock/androidsvg/SVGParser.java",
            "status": "modified",
            "additions": 449,
            "deletions": 248,
            "changes": 697,
            "blob_url": "https://github.com/BigBadaboom/androidsvg/blob/1c9dcb152130b0b8de59f9df4256fa349c695f25/androidsvg%2Fsrc%2Fmain%2Fjava%2Fcom%2Fcaverock%2Fandroidsvg%2FSVGParser.java",
            "raw_url": "https://github.com/BigBadaboom/androidsvg/raw/1c9dcb152130b0b8de59f9df4256fa349c695f25/androidsvg%2Fsrc%2Fmain%2Fjava%2Fcom%2Fcaverock%2Fandroidsvg%2FSVGParser.java",
            "contents_url": "https://api.github.com/repos/BigBadaboom/androidsvg/contents/androidsvg%2Fsrc%2Fmain%2Fjava%2Fcom%2Fcaverock%2Fandroidsvg%2FSVGParser.java?ref=1c9dcb152130b0b8de59f9df4256fa349c695f25",
            "patch": "@@ -18,6 +18,7 @@\n \r\n import android.graphics.Matrix;\r\n import android.util.Log;\r\n+import android.util.Xml;\r\n \r\n import com.caverock.androidsvg.CSSParser.MediaType;\r\n import com.caverock.androidsvg.SVG.Box;\r\n@@ -43,8 +44,12 @@\n import org.xml.sax.Attributes;\r\n import org.xml.sax.InputSource;\r\n import org.xml.sax.SAXException;\r\n+import org.xml.sax.SAXNotRecognizedException;\r\n+import org.xml.sax.SAXNotSupportedException;\r\n import org.xml.sax.XMLReader;\r\n import org.xml.sax.ext.DefaultHandler2;\r\n+import org.xmlpull.v1.XmlPullParser;\r\n+import org.xmlpull.v1.XmlPullParserException;\r\n \r\n import java.io.BufferedInputStream;\r\n import java.io.IOException;\r\n@@ -62,15 +67,12 @@\n import javax.xml.parsers.SAXParser;\r\n import javax.xml.parsers.SAXParserFactory;\r\n \r\n-import static android.R.attr.alpha;\r\n-import static com.caverock.androidsvg.SVGAndroidRenderer.colourWithOpacity;\r\n-\r\n \r\n /*\r\n  * SVG parser code. Used by SVG class. Should not be called directly.\r\n  */\r\n \r\n-class SVGParser extends DefaultHandler2\r\n+class SVGParser\r\n {\r\n    private static final String  TAG = \"SVGParser\";\r\n \r\n@@ -573,7 +575,7 @@ static PreserveAspectRatio.Alignment get(String aspectRatio) {\n    //=========================================================================\r\n \r\n \r\n-   SVG  parse(InputStream is) throws SVGParseException\r\n+   SVG  parse(InputStream is, boolean enableInternalEntities) throws SVGParseException\r\n    {\r\n       // Transparently handle zipped files (.svgz)\r\n       if (!is.markSupported()) {\r\n@@ -595,20 +597,30 @@ SVG  parse(InputStream is) throws SVGParseException\n          // Not a zipped SVG. Fall through and try parsing it normally.\r\n       }\r\n \r\n-      // Invoke the SAX XML parser on the input.\r\n-      SAXParserFactory  spf = SAXParserFactory.newInstance();\r\n       try\r\n       {\r\n-         SAXParser sp = spf.newSAXParser();\r\n-         XMLReader xr = sp.getXMLReader();\r\n-         xr.setContentHandler(this);\r\n-         xr.setProperty(\"http://xml.org/sax/properties/lexical-handler\", this);\r\n-         xr.parse(new InputSource(is));\r\n+         if (enableInternalEntities)\r\n+         {\r\n+            // Use the SAXParser, which supports entities, but is slower and\r\n+            // is vulnerable to the \"Billion laughs\" entity expansion problem.\r\n+            parseUsingSAX(is);\r\n+         }\r\n+         else\r\n+         {\r\n+            // Use XmlPullParser, which is faster, but doesn't support entity expansion.\r\n+            parseUsingXmlPullParser(is);\r\n+         }\r\n+\r\n+      }\r\n+      catch (XmlPullParserException e)\r\n+      {\r\n+         throw new SVGParseException(\"XML parser problem\", e);\r\n       }\r\n       catch (IOException e)\r\n       {\r\n          throw new SVGParseException(\"Stream error\", e);\r\n       }\r\n+      // Thrown by SAX parser\r\n       catch (ParserConfigurationException e)\r\n       {\r\n          throw new SVGParseException(\"XML parser problem\", e);\r\n@@ -629,20 +641,203 @@ SVG  parse(InputStream is) throws SVGParseException\n    }\r\n \r\n \r\n+\r\n+   //=========================================================================\r\n+   // XmlPullParser parsing\r\n+   //=========================================================================\r\n+\r\n+\r\n+   /*\r\n+    * Implements the SAX Attributes class so that our parser can share a common attributes object\r\n+    */\r\n+   private class  XPPAttributesWrapper  implements Attributes\r\n+   {\r\n+      private XmlPullParser  parser;\r\n+\r\n+      public XPPAttributesWrapper(XmlPullParser parser)\r\n+      {\r\n+         this.parser = parser;\r\n+      }\r\n+\r\n+      @Override\r\n+      public int getLength()\r\n+      {\r\n+         return parser.getAttributeCount();\r\n+      }\r\n+\r\n+      @Override\r\n+      public String getURI(int index)\r\n+      {\r\n+         return parser.getAttributeNamespace(index);\r\n+      }\r\n+\r\n+      @Override\r\n+      public String getLocalName(int index)\r\n+      {\r\n+         return parser.getAttributeName(index);\r\n+      }\r\n+\r\n+      @Override\r\n+      public String getQName(int index)\r\n+      {\r\n+         String qName = parser.getAttributeName(index);\r\n+         if (parser.getAttributePrefix(index) != null)\r\n+            qName = parser.getAttributePrefix(index) + ':' + qName;\r\n+         return qName;\r\n+      }\r\n+\r\n+      @Override\r\n+      public String getValue(int index)\r\n+      {\r\n+         return parser.getAttributeValue(index);\r\n+      }\r\n+\r\n+      // Not used, and not implemented\r\n+      @Override\r\n+      public String getType(int index) { return null; }\r\n+      @Override\r\n+      public int getIndex(String uri, String localName) { return -1; }\r\n+      @Override\r\n+      public int getIndex(String qName) { return -1; }\r\n+      @Override\r\n+      public String getType(String uri, String localName) { return null; }\r\n+      @Override\r\n+      public String getType(String qName) { return null; }\r\n+      @Override\r\n+      public String getValue(String uri, String localName) { return null; }\r\n+      @Override\r\n+      public String getValue(String qName) { return null; }\r\n+   };\r\n+\r\n+\r\n+   private void parseUsingXmlPullParser(InputStream is) throws XmlPullParserException, IOException, SVGParseException\r\n+   {\r\n+      XmlPullParser         parser = Xml.newPullParser();\r\n+      XPPAttributesWrapper  attributes = new XPPAttributesWrapper(parser);\r\n+\r\n+      parser.setFeature(XmlPullParser.FEATURE_PROCESS_DOCDECL, false);\r\n+      parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, true);\r\n+      parser.setInput(is, null);\r\n+\r\n+      int  eventType = parser.getEventType();\r\n+      while (eventType != XmlPullParser.END_DOCUMENT)\r\n+      {\r\n+         switch(eventType) {\r\n+            case XmlPullParser.START_DOCUMENT:\r\n+               startDocument();\r\n+               break;\r\n+            case XmlPullParser.START_TAG:\r\n+               String qName = parser.getName();\r\n+               if (parser.getPrefix() != null)\r\n+                  qName = parser.getPrefix() + ':' + qName;\r\n+               startElement(parser.getNamespace(), parser.getName(), qName, attributes);\r\n+               break;\r\n+            case XmlPullParser.END_TAG:\r\n+               qName = parser.getName();\r\n+               if (parser.getPrefix() != null)\r\n+                  qName = parser.getPrefix() + ':' + qName;\r\n+               endElement(parser.getNamespace(), parser.getName(), qName);\r\n+               break;\r\n+            case XmlPullParser.TEXT:\r\n+               int[] startAndLength = new int[2];\r\n+               char[] text = parser.getTextCharacters(startAndLength);\r\n+               text(text, startAndLength[0], startAndLength[1]);\r\n+               break;\r\n+            //case XmlPullParser.COMMENT:\r\n+            //   text(parser.getText());\r\n+            //   break;\r\n+         }\r\n+         eventType = parser.next();\r\n+      }\r\n+      endDocument();\r\n+   }\r\n+\r\n+\r\n+   //=========================================================================\r\n+   // SAX parsing method and handler class\r\n+   //=========================================================================\r\n+\r\n+\r\n+   private void parseUsingSAX(InputStream is) throws IOException, ParserConfigurationException, SAXException, SAXNotRecognizedException, SAXNotSupportedException\r\n+   {\r\n+      // Invoke the SAX XML parser on the input.\r\n+      SAXParserFactory  spf = SAXParserFactory.newInstance();\r\n+\r\n+      // Disable external entity resolving\r\n+      spf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\r\n+      spf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\r\n+\r\n+      SAXParser sp = spf.newSAXParser();\r\n+      XMLReader xr = sp.getXMLReader();\r\n+\r\n+      SAXHandler  handler = new SAXHandler();\r\n+      xr.setContentHandler(handler);\r\n+      xr.setProperty(\"http://xml.org/sax/properties/lexical-handler\", handler);\r\n+\r\n+      xr.parse(new InputSource(is));\r\n+   }\r\n+\r\n+\r\n+   private class  SAXHandler  extends DefaultHandler2\r\n+   {\r\n+      @Override\r\n+      public void startDocument() throws SAXException\r\n+      {\r\n+         SVGParser.this.startDocument();\r\n+      }\r\n+\r\n+\r\n+      @Override\r\n+      public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException\r\n+      {\r\n+         SVGParser.this.startElement(uri, localName, qName, attributes);\r\n+      }\r\n+\r\n+\r\n+      @Override\r\n+      public void characters(char[] ch, int start, int length) throws SAXException\r\n+      {\r\n+         SVGParser.this.text(new String(ch, start, length));\r\n+      }\r\n+\r\n+\r\n+      /*\r\n+      @Override\r\n+      public void comment(char[] ch, int start, int length) throws SAXException\r\n+      {\r\n+         SVGParser.this.text(new String(ch, start, length));\r\n+      }\r\n+      */\r\n+\r\n+\r\n+      @Override\r\n+      public void endElement(String uri, String localName, String qName) throws SAXException\r\n+      {\r\n+         SVGParser.this.endElement(uri, localName, qName);\r\n+      }\r\n+\r\n+\r\n+      @Override\r\n+      public void endDocument() throws SAXException\r\n+      {\r\n+         SVGParser.this.endDocument();\r\n+      }\r\n+\r\n+   }\r\n+\r\n+\r\n    //=========================================================================\r\n-   // SAX methods\r\n+   // Parser event classes used by both XML parser implementations\r\n    //=========================================================================\r\n \r\n \r\n-   @Override\r\n-   public void startDocument() throws SAXException\r\n+   public void startDocument()\r\n    {\r\n-      svgDocument = new SVG();\r\n+      SVGParser.this.svgDocument = new SVG();\r\n    }\r\n \r\n \r\n-   @Override\r\n-   public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException\r\n+   public void startElement(String uri, String localName, String qName, Attributes attributes) throws SVGParseException\r\n    {\r\n       if (ignoring) {\r\n          ignoreDepth++;\r\n@@ -727,66 +922,73 @@ public void startElement(String uri, String localName, String qName, Attributes\n    }\r\n \r\n \r\n-   @Override\r\n-   public void characters(char[] ch, int start, int length) throws SAXException\r\n+   public void  text(String characters) throws SVGParseException\r\n    {\r\n       if (ignoring)\r\n          return;\r\n \r\n       if (inMetadataElement)\r\n       {\r\n          if (metadataElementContents == null)\r\n-            metadataElementContents = new StringBuilder(length);\r\n-         metadataElementContents.append(ch, start, length);\r\n-         return;\r\n+            metadataElementContents = new StringBuilder(characters.length());\r\n+         metadataElementContents.append(characters);\r\n       }\r\n-\r\n-      if (inStyleElement)\r\n+      else if (inStyleElement)\r\n       {\r\n          if (styleElementContents == null)\r\n-            styleElementContents = new StringBuilder(length);\r\n-         styleElementContents.append(ch, start, length);\r\n-         return;\r\n+            styleElementContents = new StringBuilder(characters.length());\r\n+         styleElementContents.append(characters);\r\n       }\r\n-\r\n-      if (currentElement instanceof SVG.TextContainer)\r\n+      else if (currentElement instanceof SVG.TextContainer)\r\n       {\r\n-         // The SAX parser can pass us several text nodes in a row. If this happens, we\r\n-         // want to collapse them all into one SVG.TextSequence node\r\n-         SVG.SvgConditionalContainer  parent = (SVG.SvgConditionalContainer) currentElement;\r\n-         int  numOlderSiblings = parent.children.size();\r\n-         SVG.SvgObject  previousSibling = (numOlderSiblings == 0) ? null : parent.children.get(numOlderSiblings-1);\r\n-         if (previousSibling instanceof SVG.TextSequence) {\r\n-            // Last sibling was a TextSequence also, so merge them.\r\n-            ((SVG.TextSequence) previousSibling).text += new String(ch, start, length);\r\n-         } else {\r\n-            // Add a new TextSequence to the child node list\r\n-            currentElement.addChild(new SVG.TextSequence( new String(ch, start, length) ));\r\n-         }\r\n+         appendToTextContainer(characters);\r\n       }\r\n-\r\n    }\r\n \r\n \r\n-   @Override\r\n-   public void comment(char[] ch, int start, int length) throws SAXException\r\n+   public void  text(char[] ch, int start, int length) throws SVGParseException\r\n    {\r\n       if (ignoring)\r\n          return;\r\n \r\n-      // It is legal for the contents of the <style> element to be enclosed in XML comments (ie. \"<!--\" and \"-->\").\r\n-      // So we need to include the contents of the comment in the text sent to the CSS parser.\r\n-      if (inStyleElement)\r\n+      if (inMetadataElement)\r\n+      {\r\n+         if (metadataElementContents == null)\r\n+            metadataElementContents = new StringBuilder(length);\r\n+         metadataElementContents.append(ch, start, length);\r\n+      }\r\n+      else if (inStyleElement)\r\n       {\r\n          if (styleElementContents == null)\r\n             styleElementContents = new StringBuilder(length);\r\n          styleElementContents.append(ch, start, length);\r\n       }\r\n+      else if (currentElement instanceof SVG.TextContainer)\r\n+      {\r\n+         appendToTextContainer(new String(ch, start, length));\r\n+      }\r\n+\r\n+   }\r\n+\r\n+\r\n+   private void  appendToTextContainer(String characters) throws SVGParseException\r\n+   {\r\n+      // The parser can pass us several text nodes in a row. If this happens, we\r\n+      // want to collapse them all into one SVG.TextSequence node\r\n+      SVG.SvgConditionalContainer  parent = (SVG.SvgConditionalContainer) currentElement;\r\n+      int  numOlderSiblings = parent.children.size();\r\n+      SVG.SvgObject  previousSibling = (numOlderSiblings == 0) ? null : parent.children.get(numOlderSiblings-1);\r\n+      if (previousSibling instanceof SVG.TextSequence) {\r\n+         // Last sibling was a TextSequence also, so merge them.\r\n+         ((SVG.TextSequence) previousSibling).text += characters;\r\n+      } else {\r\n+         // Add a new TextSequence to the child node list\r\n+         currentElement.addChild(new SVG.TextSequence( characters ));\r\n+      }\r\n    }\r\n \r\n \r\n-   @Override\r\n-   public void endElement(String uri, String localName, String qName) throws SAXException\r\n+   public void  endElement(String uri, String localName, String qName) throws SVGParseException\r\n    {\r\n       if (ignoring) {\r\n          if (--ignoreDepth == 0) {\r\n@@ -852,17 +1054,19 @@ else if (metadataTag == SVGElem.desc)\n \r\n    }\r\n \r\n-   \r\n-   @Override\r\n-   public void endDocument() throws SAXException\r\n+\r\n+   public void  endDocument()\r\n    {\r\n       // Dump document\r\n       if (LibConfig.DEBUG)\r\n          dumpNode(svgDocument.getRootElement(), \"\");\r\n    }\r\n \r\n \r\n-   private void dumpNode(SVG.SvgObject elem, String indent)\r\n+   //=========================================================================\r\n+\r\n+\r\n+   private void  dumpNode(SVG.SvgObject elem, String indent)\r\n    {\r\n       Log.d(TAG, indent+elem);\r\n       if (elem instanceof SVG.SvgConditionalContainer) {\r\n@@ -874,9 +1078,6 @@ private void dumpNode(SVG.SvgObject elem, String indent)\n    }\r\n \r\n \r\n-   //==============================================================================\r\n-\r\n-\r\n    private void  debug(String format, Object... args)\r\n    {\r\n       if (LibConfig.DEBUG)\r\n@@ -889,7 +1090,7 @@ private void  debug(String format, Object... args)\n    //=========================================================================\r\n    // <svg> element\r\n \r\n-   private void  svg(Attributes attributes) throws SAXException\r\n+   private void  svg(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<svg>\");\r\n \r\n@@ -910,7 +1111,7 @@ private void  svg(Attributes attributes) throws SAXException\n    }\r\n \r\n    \r\n-   private void  parseAttributesSVG(SVG.Svg obj, Attributes attributes) throws SAXException\r\n+   private void  parseAttributesSVG(SVG.Svg obj, Attributes attributes) throws SVGParseException\r\n    {\r\n       for (int i=0; i<attributes.getLength(); i++)\r\n       {\r\n@@ -926,12 +1127,12 @@ private void  parseAttributesSVG(SVG.Svg obj, Attributes attributes) throws SAXE\n             case width:\r\n                obj.width = parseLength(val);\r\n                if (obj.width.isNegative())\r\n-                  throw new SAXException(\"Invalid <svg> element. width cannot be negative\");\r\n+                  throw new SVGParseException(\"Invalid <svg> element. width cannot be negative\");\r\n                break;\r\n             case height:\r\n                obj.height = parseLength(val);\r\n                if (obj.height.isNegative())\r\n-                  throw new SAXException(\"Invalid <svg> element. height cannot be negative\");\r\n+                  throw new SVGParseException(\"Invalid <svg> element. height cannot be negative\");\r\n                break;\r\n             case version:\r\n                obj.version = val;\r\n@@ -947,12 +1148,12 @@ private void  parseAttributesSVG(SVG.Svg obj, Attributes attributes) throws SAXE\n    // <g> group element\r\n \r\n \r\n-   private void  g(Attributes attributes) throws SAXException\r\n+   private void  g(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<g>\");\r\n \r\n       if (currentElement == null)\r\n-         throw new SAXException(\"Invalid document. Root element must be <svg>\");\r\n+         throw new SVGParseException(\"Invalid document. Root element must be <svg>\");\r\n       SVG.Group  obj = new SVG.Group();\r\n       obj.document = svgDocument;\r\n       obj.parent = currentElement;\r\n@@ -969,12 +1170,12 @@ private void  g(Attributes attributes) throws SAXException\n    // <defs> group element\r\n \r\n \r\n-   private void  defs(Attributes attributes) throws SAXException\r\n+   private void  defs(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<defs>\");\r\n \r\n       if (currentElement == null)\r\n-         throw new SAXException(\"Invalid document. Root element must be <svg>\");\r\n+         throw new SVGParseException(\"Invalid document. Root element must be <svg>\");\r\n       SVG.Defs  obj = new SVG.Defs();\r\n       obj.document = svgDocument;\r\n       obj.parent = currentElement;\r\n@@ -990,12 +1191,12 @@ private void  defs(Attributes attributes) throws SAXException\n    // <use> group element\r\n \r\n \r\n-   private void  use(Attributes attributes) throws SAXException\r\n+   private void  use(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<use>\");\r\n \r\n       if (currentElement == null)\r\n-         throw new SAXException(\"Invalid document. Root element must be <svg>\");\r\n+         throw new SVGParseException(\"Invalid document. Root element must be <svg>\");\r\n       SVG.Use  obj = new SVG.Use();\r\n       obj.document = svgDocument;\r\n       obj.parent = currentElement;\r\n@@ -1009,7 +1210,7 @@ private void  use(Attributes attributes) throws SAXException\n    }\r\n \r\n \r\n-   private void  parseAttributesUse(SVG.Use obj, Attributes attributes) throws SAXException\r\n+   private void  parseAttributesUse(SVG.Use obj, Attributes attributes) throws SVGParseException\r\n    {\r\n       for (int i=0; i<attributes.getLength(); i++)\r\n       {\r\n@@ -1025,12 +1226,12 @@ private void  parseAttributesUse(SVG.Use obj, Attributes attributes) throws SAXE\n             case width:\r\n                obj.width = parseLength(val);\r\n                if (obj.width.isNegative())\r\n-                  throw new SAXException(\"Invalid <use> element. width cannot be negative\");\r\n+                  throw new SVGParseException(\"Invalid <use> element. width cannot be negative\");\r\n                break;\r\n             case height:\r\n                obj.height = parseLength(val);\r\n                if (obj.height.isNegative())\r\n-                  throw new SAXException(\"Invalid <use> element. height cannot be negative\");\r\n+                  throw new SVGParseException(\"Invalid <use> element. height cannot be negative\");\r\n                break;\r\n             case href:\r\n                if (\"\".equals(attributes.getURI(i)) || XLINK_NAMESPACE.equals(attributes.getURI(i)))\r\n@@ -1047,12 +1248,12 @@ private void  parseAttributesUse(SVG.Use obj, Attributes attributes) throws SAXE\n    // <image> element\r\n \r\n \r\n-   private void  image(Attributes attributes) throws SAXException\r\n+   private void  image(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<image>\");\r\n \r\n       if (currentElement == null)\r\n-         throw new SAXException(\"Invalid document. Root element must be <svg>\");\r\n+         throw new SVGParseException(\"Invalid document. Root element must be <svg>\");\r\n       SVG.Image  obj = new SVG.Image();\r\n       obj.document = svgDocument;\r\n       obj.parent = currentElement;\r\n@@ -1066,7 +1267,7 @@ private void  image(Attributes attributes) throws SAXException\n    }\r\n \r\n \r\n-   private void  parseAttributesImage(SVG.Image obj, Attributes attributes) throws SAXException\r\n+   private void  parseAttributesImage(SVG.Image obj, Attributes attributes) throws SVGParseException\r\n    {\r\n       for (int i=0; i<attributes.getLength(); i++)\r\n       {\r\n@@ -1082,12 +1283,12 @@ private void  parseAttributesImage(SVG.Image obj, Attributes attributes) throws\n             case width:\r\n                obj.width = parseLength(val);\r\n                if (obj.width.isNegative())\r\n-                  throw new SAXException(\"Invalid <use> element. width cannot be negative\");\r\n+                  throw new SVGParseException(\"Invalid <use> element. width cannot be negative\");\r\n                break;\r\n             case height:\r\n                obj.height = parseLength(val);\r\n                if (obj.height.isNegative())\r\n-                  throw new SAXException(\"Invalid <use> element. height cannot be negative\");\r\n+                  throw new SVGParseException(\"Invalid <use> element. height cannot be negative\");\r\n                break;\r\n             case href:\r\n                if (\"\".equals(attributes.getURI(i)) || XLINK_NAMESPACE.equals(attributes.getURI(i)))\r\n@@ -1107,12 +1308,12 @@ private void  parseAttributesImage(SVG.Image obj, Attributes attributes) throws\n    // <path> element\r\n \r\n \r\n-   private void  path(Attributes attributes) throws SAXException\r\n+   private void  path(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<path>\");\r\n \r\n       if (currentElement == null)\r\n-         throw new SAXException(\"Invalid document. Root element must be <svg>\");\r\n+         throw new SVGParseException(\"Invalid document. Root element must be <svg>\");\r\n       SVG.Path  obj = new SVG.Path();\r\n       obj.document = svgDocument;\r\n       obj.parent = currentElement;\r\n@@ -1125,7 +1326,7 @@ private void  path(Attributes attributes) throws SAXException\n    }\r\n \r\n \r\n-   private void  parseAttributesPath(SVG.Path obj, Attributes attributes) throws SAXException\r\n+   private void  parseAttributesPath(SVG.Path obj, Attributes attributes) throws SVGParseException\r\n    {\r\n       for (int i=0; i<attributes.getLength(); i++)\r\n       {\r\n@@ -1138,7 +1339,7 @@ private void  parseAttributesPath(SVG.Path obj, Attributes attributes) throws SA\n             case pathLength:\r\n                obj.pathLength = parseFloat(val);\r\n                if (obj.pathLength < 0f)\r\n-                  throw new SAXException(\"Invalid <path> element. pathLength cannot be negative\");\r\n+                  throw new SVGParseException(\"Invalid <path> element. pathLength cannot be negative\");\r\n                break;\r\n             default:\r\n                break;\r\n@@ -1151,12 +1352,12 @@ private void  parseAttributesPath(SVG.Path obj, Attributes attributes) throws SA\n    // <rect> element\r\n \r\n \r\n-   private void  rect(Attributes attributes) throws SAXException\r\n+   private void  rect(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<rect>\");\r\n \r\n       if (currentElement == null)\r\n-         throw new SAXException(\"Invalid document. Root element must be <svg>\");\r\n+         throw new SVGParseException(\"Invalid document. Root element must be <svg>\");\r\n       SVG.Rect  obj = new SVG.Rect();\r\n       obj.document = svgDocument;\r\n       obj.parent = currentElement;\r\n@@ -1169,7 +1370,7 @@ private void  rect(Attributes attributes) throws SAXException\n    }\r\n \r\n \r\n-   private void  parseAttributesRect(SVG.Rect obj, Attributes attributes) throws SAXException\r\n+   private void  parseAttributesRect(SVG.Rect obj, Attributes attributes) throws SVGParseException\r\n    {\r\n       for (int i=0; i<attributes.getLength(); i++)\r\n       {\r\n@@ -1185,22 +1386,22 @@ private void  parseAttributesRect(SVG.Rect obj, Attributes attributes) throws SA\n             case width:\r\n                obj.width = parseLength(val);\r\n                if (obj.width.isNegative())\r\n-                  throw new SAXException(\"Invalid <rect> element. width cannot be negative\");\r\n+                  throw new SVGParseException(\"Invalid <rect> element. width cannot be negative\");\r\n                break;\r\n             case height:\r\n                obj.height = parseLength(val);\r\n                if (obj.height.isNegative())\r\n-                  throw new SAXException(\"Invalid <rect> element. height cannot be negative\");\r\n+                  throw new SVGParseException(\"Invalid <rect> element. height cannot be negative\");\r\n                break;\r\n             case rx:\r\n                obj.rx = parseLength(val);\r\n                if (obj.rx.isNegative())\r\n-                  throw new SAXException(\"Invalid <rect> element. rx cannot be negative\");\r\n+                  throw new SVGParseException(\"Invalid <rect> element. rx cannot be negative\");\r\n                break;\r\n             case ry:\r\n                obj.ry = parseLength(val);\r\n                if (obj.ry.isNegative())\r\n-                  throw new SAXException(\"Invalid <rect> element. ry cannot be negative\");\r\n+                  throw new SVGParseException(\"Invalid <rect> element. ry cannot be negative\");\r\n                break;\r\n             default:\r\n                break;\r\n@@ -1213,12 +1414,12 @@ private void  parseAttributesRect(SVG.Rect obj, Attributes attributes) throws SA\n    // <circle> element\r\n \r\n \r\n-   private void  circle(Attributes attributes) throws SAXException\r\n+   private void  circle(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<circle>\");\r\n \r\n       if (currentElement == null)\r\n-         throw new SAXException(\"Invalid document. Root element must be <svg>\");\r\n+         throw new SVGParseException(\"Invalid document. Root element must be <svg>\");\r\n       SVG.Circle  obj = new SVG.Circle();\r\n       obj.document = svgDocument;\r\n       obj.parent = currentElement;\r\n@@ -1231,7 +1432,7 @@ private void  circle(Attributes attributes) throws SAXException\n    }\r\n \r\n \r\n-   private void  parseAttributesCircle(SVG.Circle obj, Attributes attributes) throws SAXException\r\n+   private void  parseAttributesCircle(SVG.Circle obj, Attributes attributes) throws SVGParseException\r\n    {\r\n       for (int i=0; i<attributes.getLength(); i++)\r\n       {\r\n@@ -1247,7 +1448,7 @@ private void  parseAttributesCircle(SVG.Circle obj, Attributes attributes) throw\n             case r:\r\n                obj.r = parseLength(val);\r\n                if (obj.r.isNegative())\r\n-                  throw new SAXException(\"Invalid <circle> element. r cannot be negative\");\r\n+                  throw new SVGParseException(\"Invalid <circle> element. r cannot be negative\");\r\n                break;\r\n             default:\r\n                break;\r\n@@ -1260,12 +1461,12 @@ private void  parseAttributesCircle(SVG.Circle obj, Attributes attributes) throw\n    // <ellipse> element\r\n \r\n \r\n-   private void  ellipse(Attributes attributes) throws SAXException\r\n+   private void  ellipse(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<ellipse>\");\r\n \r\n       if (currentElement == null)\r\n-         throw new SAXException(\"Invalid document. Root element must be <svg>\");\r\n+         throw new SVGParseException(\"Invalid document. Root element must be <svg>\");\r\n       SVG.Ellipse  obj = new SVG.Ellipse();\r\n       obj.document = svgDocument;\r\n       obj.parent = currentElement;\r\n@@ -1278,7 +1479,7 @@ private void  ellipse(Attributes attributes) throws SAXException\n    }\r\n \r\n \r\n-   private void  parseAttributesEllipse(SVG.Ellipse obj, Attributes attributes) throws SAXException\r\n+   private void  parseAttributesEllipse(SVG.Ellipse obj, Attributes attributes) throws SVGParseException\r\n    {\r\n       for (int i=0; i<attributes.getLength(); i++)\r\n       {\r\n@@ -1294,12 +1495,12 @@ private void  parseAttributesEllipse(SVG.Ellipse obj, Attributes attributes) thr\n             case rx:\r\n                obj.rx = parseLength(val);\r\n                if (obj.rx.isNegative())\r\n-                  throw new SAXException(\"Invalid <ellipse> element. rx cannot be negative\");\r\n+                  throw new SVGParseException(\"Invalid <ellipse> element. rx cannot be negative\");\r\n                break;\r\n             case ry:\r\n                obj.ry = parseLength(val);\r\n                if (obj.ry.isNegative())\r\n-                  throw new SAXException(\"Invalid <ellipse> element. ry cannot be negative\");\r\n+                  throw new SVGParseException(\"Invalid <ellipse> element. ry cannot be negative\");\r\n                break;\r\n             default:\r\n                break;\r\n@@ -1312,12 +1513,12 @@ private void  parseAttributesEllipse(SVG.Ellipse obj, Attributes attributes) thr\n    // <line> element\r\n \r\n \r\n-   private void  line(Attributes attributes) throws SAXException\r\n+   private void  line(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<line>\");\r\n \r\n       if (currentElement == null)\r\n-         throw new SAXException(\"Invalid document. Root element must be <svg>\");\r\n+         throw new SVGParseException(\"Invalid document. Root element must be <svg>\");\r\n       SVG.Line  obj = new SVG.Line();\r\n       obj.document = svgDocument;\r\n       obj.parent = currentElement;\r\n@@ -1330,7 +1531,7 @@ private void  line(Attributes attributes) throws SAXException\n    }\r\n \r\n \r\n-   private void  parseAttributesLine(SVG.Line obj, Attributes attributes) throws SAXException\r\n+   private void  parseAttributesLine(SVG.Line obj, Attributes attributes) throws SVGParseException\r\n    {\r\n       for (int i=0; i<attributes.getLength(); i++)\r\n       {\r\n@@ -1360,12 +1561,12 @@ private void  parseAttributesLine(SVG.Line obj, Attributes attributes) throws SA\n    // <polyline> element\r\n \r\n \r\n-   private void  polyline(Attributes attributes) throws SAXException\r\n+   private void  polyline(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<polyline>\");\r\n \r\n       if (currentElement == null)\r\n-         throw new SAXException(\"Invalid document. Root element must be <svg>\");\r\n+         throw new SVGParseException(\"Invalid document. Root element must be <svg>\");\r\n       SVG.PolyLine  obj = new SVG.PolyLine();\r\n       obj.document = svgDocument;\r\n       obj.parent = currentElement;\r\n@@ -1381,7 +1582,7 @@ private void  polyline(Attributes attributes) throws SAXException\n    /*\r\n     *  Parse the \"points\" attribute. Used by both <polyline> and <polygon>.\r\n     */\r\n-   private void  parseAttributesPolyLine(SVG.PolyLine obj, Attributes attributes, String tag) throws SAXException\r\n+   private void  parseAttributesPolyLine(SVG.PolyLine obj, Attributes attributes, String tag) throws SVGParseException\r\n    {\r\n       for (int i=0; i<attributes.getLength(); i++)\r\n       {\r\n@@ -1394,11 +1595,11 @@ private void  parseAttributesPolyLine(SVG.PolyLine obj, Attributes attributes, S\n             while (!scan.empty()) {\r\n                float x = scan.nextFloat();\r\n                if (Float.isNaN(x))\r\n-                  throw new SAXException(\"Invalid <\"+tag+\"> points attribute. Non-coordinate content found in list.\");\r\n+                  throw new SVGParseException(\"Invalid <\"+tag+\"> points attribute. Non-coordinate content found in list.\");\r\n                scan.skipCommaWhitespace();\r\n                float y = scan.nextFloat();\r\n                if (Float.isNaN(y))\r\n-                  throw new SAXException(\"Invalid <\"+tag+\"> points attribute. There should be an even number of coordinates.\");\r\n+                  throw new SVGParseException(\"Invalid <\"+tag+\"> points attribute. There should be an even number of coordinates.\");\r\n                scan.skipCommaWhitespace();\r\n                points.add(x);\r\n                points.add(y);\r\n@@ -1417,12 +1618,12 @@ private void  parseAttributesPolyLine(SVG.PolyLine obj, Attributes attributes, S\n    // <polygon> element\r\n \r\n \r\n-   private void  polygon(Attributes attributes) throws SAXException\r\n+   private void  polygon(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<polygon>\");\r\n \r\n       if (currentElement == null)\r\n-         throw new SAXException(\"Invalid document. Root element must be <svg>\");\r\n+         throw new SVGParseException(\"Invalid document. Root element must be <svg>\");\r\n       SVG.Polygon  obj = new SVG.Polygon();\r\n       obj.document = svgDocument;\r\n       obj.parent = currentElement;\r\n@@ -1439,12 +1640,12 @@ private void  polygon(Attributes attributes) throws SAXException\n    // <text> element\r\n \r\n \r\n-   private void  text(Attributes attributes) throws SAXException\r\n+   private void  text(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<text>\");\r\n \r\n       if (currentElement == null)\r\n-         throw new SAXException(\"Invalid document. Root element must be <svg>\");\r\n+         throw new SVGParseException(\"Invalid document. Root element must be <svg>\");\r\n       SVG.Text  obj = new SVG.Text();\r\n       obj.document = svgDocument;\r\n       obj.parent = currentElement;\r\n@@ -1458,7 +1659,7 @@ private void  text(Attributes attributes) throws SAXException\n    }\r\n \r\n \r\n-   private void  parseAttributesTextPosition(TextPositionedContainer obj, Attributes attributes) throws SAXException\r\n+   private void  parseAttributesTextPosition(TextPositionedContainer obj, Attributes attributes) throws SVGParseException\r\n    {\r\n       for (int i=0; i<attributes.getLength(); i++)\r\n       {\r\n@@ -1488,14 +1689,14 @@ private void  parseAttributesTextPosition(TextPositionedContainer obj, Attribute\n    // <tspan> element\r\n \r\n \r\n-   private void  tspan(Attributes attributes) throws SAXException\r\n+   private void  tspan(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<tspan>\");\r\n \r\n       if (currentElement == null)\r\n-         throw new SAXException(\"Invalid document. Root element must be <svg>\");\r\n+         throw new SVGParseException(\"Invalid document. Root element must be <svg>\");\r\n       if (!(currentElement instanceof SVG.TextContainer))\r\n-         throw new SAXException(\"Invalid document. <tspan> elements are only valid inside <text> or other <tspan> elements.\");\r\n+         throw new SVGParseException(\"Invalid document. <tspan> elements are only valid inside <text> or other <tspan> elements.\");\r\n       SVG.TSpan  obj = new SVG.TSpan();\r\n       obj.document = svgDocument;\r\n       obj.parent = currentElement;\r\n@@ -1516,14 +1717,14 @@ private void  tspan(Attributes attributes) throws SAXException\n    // <tref> element\r\n \r\n \r\n-   private void  tref(Attributes attributes) throws SAXException\r\n+   private void  tref(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<tref>\");\r\n \r\n       if (currentElement == null)\r\n-         throw new SAXException(\"Invalid document. Root element must be <svg>\");\r\n+         throw new SVGParseException(\"Invalid document. Root element must be <svg>\");\r\n       if (!(currentElement instanceof SVG.TextContainer))\r\n-         throw new SAXException(\"Invalid document. <tref> elements are only valid inside <text> or <tspan> elements.\");\r\n+         throw new SVGParseException(\"Invalid document. <tref> elements are only valid inside <text> or <tspan> elements.\");\r\n       SVG.TRef  obj = new SVG.TRef();\r\n       obj.document = svgDocument;\r\n       obj.parent = currentElement;\r\n@@ -1539,7 +1740,7 @@ private void  tref(Attributes attributes) throws SAXException\n    }\r\n \r\n \r\n-   private void  parseAttributesTRef(SVG.TRef obj, Attributes attributes) throws SAXException\r\n+   private void  parseAttributesTRef(SVG.TRef obj, Attributes attributes) throws SVGParseException\r\n    {\r\n       for (int i=0; i<attributes.getLength(); i++)\r\n       {\r\n@@ -1561,12 +1762,12 @@ private void  parseAttributesTRef(SVG.TRef obj, Attributes attributes) throws SA\n    // <switch> element\r\n \r\n \r\n-   private void  zwitch(Attributes attributes) throws SAXException\r\n+   private void  zwitch(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<switch>\");\r\n \r\n       if (currentElement == null)\r\n-         throw new SAXException(\"Invalid document. Root element must be <svg>\");\r\n+         throw new SVGParseException(\"Invalid document. Root element must be <svg>\");\r\n       SVG.Switch  obj = new SVG.Switch();\r\n       obj.document = svgDocument;\r\n       obj.parent = currentElement;\r\n@@ -1579,7 +1780,7 @@ private void  zwitch(Attributes attributes) throws SAXException\n    }\r\n \r\n \r\n-   private void  parseAttributesConditional(SVG.SvgConditional obj, Attributes attributes) throws SAXException\r\n+   private void  parseAttributesConditional(SVG.SvgConditional obj, Attributes attributes) throws SVGParseException\r\n    {\r\n       for (int i=0; i<attributes.getLength(); i++)\r\n       {\r\n@@ -1614,12 +1815,12 @@ private void  parseAttributesConditional(SVG.SvgConditional obj, Attributes attr\n    // <symbol> element\r\n \r\n \r\n-   private void  symbol(Attributes attributes) throws SAXException\r\n+   private void  symbol(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<symbol>\");\r\n \r\n       if (currentElement == null)\r\n-         throw new SAXException(\"Invalid document. Root element must be <svg>\");\r\n+         throw new SVGParseException(\"Invalid document. Root element must be <svg>\");\r\n       SVG.Symbol  obj = new SVG.Symbol();\r\n       obj.document = svgDocument;\r\n       obj.parent = currentElement;\r\n@@ -1636,12 +1837,12 @@ private void  symbol(Attributes attributes) throws SAXException\n    // <marker> element\r\n \r\n \r\n-   private void  marker(Attributes attributes) throws SAXException\r\n+   private void  marker(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<marker>\");\r\n \r\n       if (currentElement == null)\r\n-         throw new SAXException(\"Invalid document. Root element must be <svg>\");\r\n+         throw new SVGParseException(\"Invalid document. Root element must be <svg>\");\r\n       SVG.Marker  obj = new SVG.Marker();\r\n       obj.document = svgDocument;\r\n       obj.parent = currentElement;\r\n@@ -1655,7 +1856,7 @@ private void  marker(Attributes attributes) throws SAXException\n    }\r\n \r\n \r\n-   private void  parseAttributesMarker(SVG.Marker obj, Attributes attributes) throws SAXException\r\n+   private void  parseAttributesMarker(SVG.Marker obj, Attributes attributes) throws SVGParseException\r\n    {\r\n       for (int i=0; i<attributes.getLength(); i++)\r\n       {\r\n@@ -1671,20 +1872,20 @@ private void  parseAttributesMarker(SVG.Marker obj, Attributes attributes) throw\n             case markerWidth:\r\n                obj.markerWidth = parseLength(val);\r\n                if (obj.markerWidth.isNegative())\r\n-                  throw new SAXException(\"Invalid <marker> element. markerWidth cannot be negative\");\r\n+                  throw new SVGParseException(\"Invalid <marker> element. markerWidth cannot be negative\");\r\n                break;\r\n             case markerHeight:\r\n                obj.markerHeight = parseLength(val);\r\n                if (obj.markerHeight.isNegative())\r\n-                  throw new SAXException(\"Invalid <marker> element. markerHeight cannot be negative\");\r\n+                  throw new SVGParseException(\"Invalid <marker> element. markerHeight cannot be negative\");\r\n                break;\r\n             case markerUnits:\r\n                if (\"strokeWidth\".equals(val)) {\r\n                   obj.markerUnitsAreUser = false;\r\n                } else if (\"userSpaceOnUse\".equals(val)) {\r\n                   obj.markerUnitsAreUser = true;\r\n                } else {\r\n-                  throw new SAXException(\"Invalid value for attribute markerUnits\");\r\n+                  throw new SVGParseException(\"Invalid value for attribute markerUnits\");\r\n                } \r\n                break;\r\n             case orient:\r\n@@ -1705,12 +1906,12 @@ private void  parseAttributesMarker(SVG.Marker obj, Attributes attributes) throw\n    // <linearGradient> element\r\n \r\n \r\n-   private void  linearGradient(Attributes attributes) throws SAXException\r\n+   private void  linearGradient(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<linearGradient>\");\r\n \r\n       if (currentElement == null)\r\n-         throw new SAXException(\"Invalid document. Root element must be <svg>\");\r\n+         throw new SVGParseException(\"Invalid document. Root element must be <svg>\");\r\n       SVG.SvgLinearGradient  obj = new SVG.SvgLinearGradient();\r\n       obj.document = svgDocument;\r\n       obj.parent = currentElement;\r\n@@ -1723,7 +1924,7 @@ private void  linearGradient(Attributes attributes) throws SAXException\n    }\r\n \r\n \r\n-   private void  parseAttributesGradient(SVG.GradientElement obj, Attributes attributes) throws SAXException\r\n+   private void  parseAttributesGradient(SVG.GradientElement obj, Attributes attributes) throws SVGParseException\r\n    {\r\n       for (int i=0; i<attributes.getLength(); i++)\r\n       {\r\n@@ -1736,7 +1937,7 @@ private void  parseAttributesGradient(SVG.GradientElement obj, Attributes attrib\n                } else if (\"userSpaceOnUse\".equals(val)) {\r\n                   obj.gradientUnitsAreUser = true;\r\n                } else {\r\n-                  throw new SAXException(\"Invalid value for attribute gradientUnits\");\r\n+                  throw new SVGParseException(\"Invalid value for attribute gradientUnits\");\r\n                } \r\n                break;\r\n             case gradientTransform:\r\n@@ -1749,7 +1950,7 @@ private void  parseAttributesGradient(SVG.GradientElement obj, Attributes attrib\n                } \r\n                catch (IllegalArgumentException e)\r\n                {\r\n-                  throw new SAXException(\"Invalid spreadMethod attribute. \\\"\"+val+\"\\\" is not a valid value.\");\r\n+                  throw new SVGParseException(\"Invalid spreadMethod attribute. \\\"\"+val+\"\\\" is not a valid value.\");\r\n                }\r\n                break;\r\n             case href:\r\n@@ -1763,7 +1964,7 @@ private void  parseAttributesGradient(SVG.GradientElement obj, Attributes attrib\n    }\r\n \r\n \r\n-   private void  parseAttributesLinearGradient(SVG.SvgLinearGradient obj, Attributes attributes) throws SAXException\r\n+   private void  parseAttributesLinearGradient(SVG.SvgLinearGradient obj, Attributes attributes) throws SVGParseException\r\n    {\r\n       for (int i=0; i<attributes.getLength(); i++)\r\n       {\r\n@@ -1793,12 +1994,12 @@ private void  parseAttributesLinearGradient(SVG.SvgLinearGradient obj, Attribute\n    // <radialGradient> element\r\n \r\n \r\n-   private void  radialGradient(Attributes attributes) throws SAXException\r\n+   private void  radialGradient(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<radialGradient>\");\r\n \r\n       if (currentElement == null)\r\n-         throw new SAXException(\"Invalid document. Root element must be <svg>\");\r\n+         throw new SVGParseException(\"Invalid document. Root element must be <svg>\");\r\n       SVG.SvgRadialGradient  obj = new SVG.SvgRadialGradient();\r\n       obj.document = svgDocument;\r\n       obj.parent = currentElement;\r\n@@ -1811,7 +2012,7 @@ private void  radialGradient(Attributes attributes) throws SAXException\n    }\r\n \r\n \r\n-   private void  parseAttributesRadialGradient(SVG.SvgRadialGradient obj, Attributes attributes) throws SAXException\r\n+   private void  parseAttributesRadialGradient(SVG.SvgRadialGradient obj, Attributes attributes) throws SVGParseException\r\n    {\r\n       for (int i=0; i<attributes.getLength(); i++)\r\n       {\r\n@@ -1827,7 +2028,7 @@ private void  parseAttributesRadialGradient(SVG.SvgRadialGradient obj, Attribute\n             case r:\r\n                obj.r = parseLength(val);\r\n                if (obj.r.isNegative())\r\n-                  throw new SAXException(\"Invalid <radialGradient> element. r cannot be negative\");\r\n+                  throw new SVGParseException(\"Invalid <radialGradient> element. r cannot be negative\");\r\n                break;\r\n             case fx:\r\n                obj.fx = parseLength(val);\r\n@@ -1846,14 +2047,14 @@ private void  parseAttributesRadialGradient(SVG.SvgRadialGradient obj, Attribute\n    // Gradient <stop> element\r\n \r\n \r\n-   private void  stop(Attributes attributes) throws SAXException\r\n+   private void  stop(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<stop>\");\r\n \r\n       if (currentElement == null)\r\n-         throw new SAXException(\"Invalid document. Root element must be <svg>\");\r\n+         throw new SVGParseException(\"Invalid document. Root element must be <svg>\");\r\n       if (!(currentElement instanceof SVG.GradientElement))\r\n-         throw new SAXException(\"Invalid document. <stop> elements are only valid inside <linearGradient> or <radialGradient> elements.\");\r\n+         throw new SVGParseException(\"Invalid document. <stop> elements are only valid inside <linearGradient> or <radialGradient> elements.\");\r\n       SVG.Stop  obj = new SVG.Stop();\r\n       obj.document = svgDocument;\r\n       obj.parent = currentElement;\r\n@@ -1865,7 +2066,7 @@ private void  stop(Attributes attributes) throws SAXException\n    }\r\n \r\n \r\n-   private void  parseAttributesStop(SVG.Stop obj, Attributes attributes) throws SAXException\r\n+   private void  parseAttributesStop(SVG.Stop obj, Attributes attributes) throws SVGParseException\r\n    {\r\n       for (int i=0; i<attributes.getLength(); i++)\r\n       {\r\n@@ -1882,10 +2083,10 @@ private void  parseAttributesStop(SVG.Stop obj, Attributes attributes) throws SA\n    }\r\n \r\n \r\n-   private Float  parseGradientOffset(String val) throws SAXException\r\n+   private Float  parseGradientOffset(String val) throws SVGParseException\r\n    {\r\n       if (val.length() == 0)\r\n-         throw new SAXException(\"Invalid offset value in <stop> (empty string)\");\r\n+         throw new SVGParseException(\"Invalid offset value in <stop> (empty string)\");\r\n       int      end = val.length();\r\n       boolean  isPercent = false;\r\n \r\n@@ -1902,7 +2103,7 @@ private Float  parseGradientOffset(String val) throws SAXException\n       }\r\n       catch (NumberFormatException e)\r\n       {\r\n-         throw new SAXException(\"Invalid offset value in <stop>: \"+val, e);\r\n+         throw new SVGParseException(\"Invalid offset value in <stop>: \"+val, e);\r\n       }\r\n    }\r\n \r\n@@ -1911,12 +2112,12 @@ private Float  parseGradientOffset(String val) throws SAXException\n    // <solidColor> element\r\n \r\n \r\n-   private void  solidColor(Attributes attributes) throws SAXException\r\n+   private void  solidColor(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<solidColor>\");\r\n \r\n       if (currentElement == null)\r\n-         throw new SAXException(\"Invalid document. Root element must be <svg>\");\r\n+         throw new SVGParseException(\"Invalid document. Root element must be <svg>\");\r\n       SVG.SolidColor  obj = new SVG.SolidColor();\r\n       obj.document = svgDocument;\r\n       obj.parent = currentElement;\r\n@@ -1931,12 +2132,12 @@ private void  solidColor(Attributes attributes) throws SAXException\n    // <clipPath> element\r\n \r\n \r\n-   private void  clipPath(Attributes attributes) throws SAXException\r\n+   private void  clipPath(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<clipPath>\");\r\n \r\n       if (currentElement == null)\r\n-         throw new SAXException(\"Invalid document. Root element must be <svg>\");\r\n+         throw new SVGParseException(\"Invalid document. Root element must be <svg>\");\r\n       SVG.ClipPath  obj = new SVG.ClipPath();\r\n       obj.document = svgDocument;\r\n       obj.parent = currentElement;\r\n@@ -1950,7 +2151,7 @@ private void  clipPath(Attributes attributes) throws SAXException\n    }\r\n \r\n \r\n-   private void  parseAttributesClipPath(SVG.ClipPath obj, Attributes attributes) throws SAXException\r\n+   private void  parseAttributesClipPath(SVG.ClipPath obj, Attributes attributes) throws SVGParseException\r\n    {\r\n       for (int i=0; i<attributes.getLength(); i++)\r\n       {\r\n@@ -1963,7 +2164,7 @@ private void  parseAttributesClipPath(SVG.ClipPath obj, Attributes attributes) t\n                } else if (\"userSpaceOnUse\".equals(val)) {\r\n                   obj.clipPathUnitsAreUser = true;\r\n                } else {\r\n-                  throw new SAXException(\"Invalid value for attribute clipPathUnits\");\r\n+                  throw new SVGParseException(\"Invalid value for attribute clipPathUnits\");\r\n                }\r\n                break;\r\n             default:\r\n@@ -1977,12 +2178,12 @@ private void  parseAttributesClipPath(SVG.ClipPath obj, Attributes attributes) t\n    // <textPath> element\r\n \r\n \r\n-   private void textPath(Attributes attributes) throws SAXException\r\n+   private void textPath(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<textPath>\");\r\n \r\n       if (currentElement == null)\r\n-         throw new SAXException(\"Invalid document. Root element must be <svg>\");\r\n+         throw new SVGParseException(\"Invalid document. Root element must be <svg>\");\r\n       SVG.TextPath  obj = new SVG.TextPath();\r\n       obj.document = svgDocument;\r\n       obj.parent = currentElement;\r\n@@ -1999,7 +2200,7 @@ private void textPath(Attributes attributes) throws SAXException\n    }\r\n \r\n \r\n-   private void  parseAttributesTextPath(SVG.TextPath obj, Attributes attributes) throws SAXException\r\n+   private void  parseAttributesTextPath(SVG.TextPath obj, Attributes attributes) throws SVGParseException\r\n    {\r\n       for (int i=0; i<attributes.getLength(); i++)\r\n       {\r\n@@ -2024,12 +2225,12 @@ private void  parseAttributesTextPath(SVG.TextPath obj, Attributes attributes) t\n    // <pattern> element\r\n \r\n \r\n-   private void pattern(Attributes attributes) throws SAXException\r\n+   private void pattern(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<pattern>\");\r\n \r\n       if (currentElement == null)\r\n-         throw new SAXException(\"Invalid document. Root element must be <svg>\");\r\n+         throw new SVGParseException(\"Invalid document. Root element must be <svg>\");\r\n       SVG.Pattern  obj = new SVG.Pattern();\r\n       obj.document = svgDocument;\r\n       obj.parent = currentElement;\r\n@@ -2043,7 +2244,7 @@ private void pattern(Attributes attributes) throws SAXException\n    }\r\n \r\n \r\n-   private void  parseAttributesPattern(SVG.Pattern obj, Attributes attributes) throws SAXException\r\n+   private void  parseAttributesPattern(SVG.Pattern obj, Attributes attributes) throws SVGParseException\r\n    {\r\n       for (int i=0; i<attributes.getLength(); i++)\r\n       {\r\n@@ -2056,7 +2257,7 @@ private void  parseAttributesPattern(SVG.Pattern obj, Attributes attributes) thr\n                } else if (\"userSpaceOnUse\".equals(val)) {\r\n                   obj.patternUnitsAreUser = true;\r\n                } else {\r\n-                  throw new SAXException(\"Invalid value for attribute patternUnits\");\r\n+                  throw new SVGParseException(\"Invalid value for attribute patternUnits\");\r\n                } \r\n                break;\r\n             case patternContentUnits:\r\n@@ -2065,7 +2266,7 @@ private void  parseAttributesPattern(SVG.Pattern obj, Attributes attributes) thr\n                } else if (\"userSpaceOnUse\".equals(val)) {\r\n                   obj.patternContentUnitsAreUser = true;\r\n                } else {\r\n-                  throw new SAXException(\"Invalid value for attribute patternContentUnits\");\r\n+                  throw new SVGParseException(\"Invalid value for attribute patternContentUnits\");\r\n                } \r\n                break;\r\n             case patternTransform:\r\n@@ -2080,12 +2281,12 @@ private void  parseAttributesPattern(SVG.Pattern obj, Attributes attributes) thr\n             case width:\r\n                obj.width = parseLength(val);\r\n                if (obj.width.isNegative())\r\n-                  throw new SAXException(\"Invalid <pattern> element. width cannot be negative\");\r\n+                  throw new SVGParseException(\"Invalid <pattern> element. width cannot be negative\");\r\n                break;\r\n             case height:\r\n                obj.height = parseLength(val);\r\n                if (obj.height.isNegative())\r\n-                  throw new SAXException(\"Invalid <pattern> element. height cannot be negative\");\r\n+                  throw new SVGParseException(\"Invalid <pattern> element. height cannot be negative\");\r\n                break;\r\n             case href:\r\n                if (\"\".equals(attributes.getURI(i)) || XLINK_NAMESPACE.equals(attributes.getURI(i)))\r\n@@ -2102,12 +2303,12 @@ private void  parseAttributesPattern(SVG.Pattern obj, Attributes attributes) thr\n    // <view> element\r\n \r\n \r\n-   private void  view(Attributes attributes) throws SAXException\r\n+   private void  view(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<view>\");\r\n \r\n       if (currentElement == null)\r\n-         throw new SAXException(\"Invalid document. Root element must be <svg>\");\r\n+         throw new SVGParseException(\"Invalid document. Root element must be <svg>\");\r\n       SVG.View  obj = new SVG.View();\r\n       obj.document = svgDocument;\r\n       obj.parent = currentElement;\r\n@@ -2123,12 +2324,12 @@ private void  view(Attributes attributes) throws SAXException\n    // <mask> element\r\n \r\n \r\n-   private void mask(Attributes attributes) throws SAXException\r\n+   private void mask(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<mask>\");\r\n \r\n       if (currentElement == null)\r\n-         throw new SAXException(\"Invalid document. Root element must be <svg>\");\r\n+         throw new SVGParseException(\"Invalid document. Root element must be <svg>\");\r\n       SVG.Mask  obj = new SVG.Mask();\r\n       obj.document = svgDocument;\r\n       obj.parent = currentElement;\r\n@@ -2141,7 +2342,7 @@ private void mask(Attributes attributes) throws SAXException\n    }\r\n \r\n \r\n-   private void  parseAttributesMask(SVG.Mask obj, Attributes attributes) throws SAXException\r\n+   private void  parseAttributesMask(SVG.Mask obj, Attributes attributes) throws SVGParseException\r\n    {\r\n       for (int i=0; i<attributes.getLength(); i++)\r\n       {\r\n@@ -2154,7 +2355,7 @@ private void  parseAttributesMask(SVG.Mask obj, Attributes attributes) throws SA\n                } else if (\"userSpaceOnUse\".equals(val)) {\r\n                   obj.maskUnitsAreUser = true;\r\n                } else {\r\n-                  throw new SAXException(\"Invalid value for attribute maskUnits\");\r\n+                  throw new SVGParseException(\"Invalid value for attribute maskUnits\");\r\n                } \r\n                break;\r\n             case maskContentUnits:\r\n@@ -2163,7 +2364,7 @@ private void  parseAttributesMask(SVG.Mask obj, Attributes attributes) throws SA\n                } else if (\"userSpaceOnUse\".equals(val)) {\r\n                   obj.maskContentUnitsAreUser = true;\r\n                } else {\r\n-                  throw new SAXException(\"Invalid value for attribute maskContentUnits\");\r\n+                  throw new SVGParseException(\"Invalid value for attribute maskContentUnits\");\r\n                } \r\n                break;\r\n             case x:\r\n@@ -2175,12 +2376,12 @@ private void  parseAttributesMask(SVG.Mask obj, Attributes attributes) throws SA\n             case width:\r\n                obj.width = parseLength(val);\r\n                if (obj.width.isNegative())\r\n-                  throw new SAXException(\"Invalid <mask> element. width cannot be negative\");\r\n+                  throw new SVGParseException(\"Invalid <mask> element. width cannot be negative\");\r\n                break;\r\n             case height:\r\n                obj.height = parseLength(val);\r\n                if (obj.height.isNegative())\r\n-                  throw new SAXException(\"Invalid <mask> element. height cannot be negative\");\r\n+                  throw new SVGParseException(\"Invalid <mask> element. height cannot be negative\");\r\n                break;\r\n             default:\r\n                break;\r\n@@ -2554,7 +2755,7 @@ String  restOfText()\n    //=========================================================================\r\n \r\n \r\n-   private void  parseAttributesCore(SvgElementBase obj, Attributes attributes) throws SAXException\r\n+   private void  parseAttributesCore(SvgElementBase obj, Attributes attributes) throws SVGParseException\r\n    {\r\n       for (int i=0; i<attributes.getLength(); i++)\r\n       {\r\n@@ -2571,7 +2772,7 @@ else if (qname.equals(\"xml:space\")) {\n             } else if (\"preserve\".equals(val)) {\r\n                obj.spacePreserve = Boolean.TRUE;\r\n             } else {\r\n-               throw new SAXException(\"Invalid value for \\\"xml:space\\\" attribute: \"+val);\r\n+               throw new SVGParseException(\"Invalid value for \\\"xml:space\\\" attribute: \"+val);\r\n             }\r\n             break;\r\n          }\r\n@@ -2582,7 +2783,7 @@ else if (qname.equals(\"xml:space\")) {\n    /*\r\n     * Parse the style attributes for an element.\r\n     */\r\n-   private void  parseAttributesStyle(SvgElementBase obj, Attributes attributes) throws SAXException\r\n+   private void  parseAttributesStyle(SvgElementBase obj, Attributes attributes) throws SVGParseException\r\n    {\r\n       for (int i=0; i<attributes.getLength(); i++)\r\n       {\r\n@@ -2615,7 +2816,7 @@ private void  parseAttributesStyle(SvgElementBase obj, Attributes attributes) th\n    /*\r\n     * Parse the 'style' attribute.\r\n     */\r\n-   private static void  parseStyle(SvgElementBase obj, String style) throws SAXException\r\n+   private static void  parseStyle(SvgElementBase obj, String style) throws SVGParseException\r\n    {\r\n       TextScanner  scan = new TextScanner(style.replaceAll(\"/\\\\*.*?\\\\*/\", \"\"));  // regex strips block comments\r\n \r\n@@ -2641,7 +2842,7 @@ private static void  parseStyle(SvgElementBase obj, String style) throws SAXExce\n    }\r\n \r\n \r\n-   static void  processStyleProperty(Style style, String localName, String val) throws SAXException\r\n+   static void  processStyleProperty(Style style, String localName, String val) throws SVGParseException\r\n    {\r\n       if (val.length() == 0) { // The spec doesn't say how to handle empty style attributes.\r\n          return;               // Our strategy is just to ignore them.\r\n@@ -2802,14 +3003,14 @@ static void  processStyleProperty(Style style, String localName, String val) thr\n \r\n          case display:\r\n             if (val.indexOf('|') >= 0 || !VALID_DISPLAY_VALUES.contains('|'+val+'|'))\r\n-               throw new SAXException(\"Invalid value for \\\"display\\\" attribute: \"+val);\r\n+               throw new SVGParseException(\"Invalid value for \\\"display\\\" attribute: \"+val);\r\n             style.display = !val.equals(NONE);\r\n             style.specifiedFlags |= SVG.SPECIFIED_DISPLAY;\r\n             break;\r\n \r\n          case visibility:\r\n             if (val.indexOf('|') >= 0 || !VALID_VISIBILITY_VALUES.contains('|'+val+'|'))\r\n-               throw new SAXException(\"Invalid value for \\\"visibility\\\" attribute: \"+val);\r\n+               throw new SVGParseException(\"Invalid value for \\\"visibility\\\" attribute: \"+val);\r\n             style.visibility = val.equals(\"visible\");\r\n             style.specifiedFlags |= SVG.SPECIFIED_VISIBILITY;\r\n             break;\r\n@@ -2910,7 +3111,7 @@ static void  processStyleProperty(Style style, String localName, String val) thr\n    }\r\n \r\n \r\n-   private void  parseAttributesViewBox(SVG.SvgViewBoxContainer obj, Attributes attributes) throws SAXException\r\n+   private void  parseAttributesViewBox(SVG.SvgViewBoxContainer obj, Attributes attributes) throws SVGParseException\r\n    {\r\n       for (int i=0; i<attributes.getLength(); i++)\r\n       {\r\n@@ -2930,7 +3131,7 @@ private void  parseAttributesViewBox(SVG.SvgViewBoxContainer obj, Attributes att\n    }\r\n \r\n \r\n-   private void  parseAttributesTransform(SVG.HasTransform obj, Attributes attributes) throws SAXException\r\n+   private void  parseAttributesTransform(SVG.HasTransform obj, Attributes attributes) throws SVGParseException\r\n    {\r\n       for (int i=0; i<attributes.getLength(); i++)\r\n       {\r\n@@ -2942,7 +3143,7 @@ private void  parseAttributesTransform(SVG.HasTransform obj, Attributes attribut\n    }\r\n \r\n \r\n-   private Matrix  parseTransformList(String val) throws SAXException\r\n+   private Matrix  parseTransformList(String val) throws SVGParseException\r\n    {\r\n       Matrix  matrix = new Matrix();\r\n \r\n@@ -2954,7 +3155,7 @@ private Matrix  parseTransformList(String val) throws SAXException\n          String  cmd = scan.nextFunction();\r\n \r\n          if (cmd == null)\r\n-            throw new SAXException(\"Bad transform function encountered in transform list: \"+val);\r\n+            throw new SVGParseException(\"Bad transform function encountered in transform list: \"+val);\r\n \r\n          switch (cmd) {\r\n             case \"matrix\":\r\n@@ -2973,7 +3174,7 @@ private Matrix  parseTransformList(String val) throws SAXException\n                scan.skipWhitespace();\r\n \r\n                if (Float.isNaN(f) || !scan.consume(')'))\r\n-                  throw new SAXException(\"Invalid transform list: \" + val);\r\n+                  throw new SVGParseException(\"Invalid transform list: \" + val);\r\n \r\n                Matrix m = new Matrix();\r\n                m.setValues(new float[]{a, c, e, b, d, f, 0, 0, 1});\r\n@@ -2987,7 +3188,7 @@ private Matrix  parseTransformList(String val) throws SAXException\n                scan.skipWhitespace();\r\n \r\n                if (Float.isNaN(tx) || !scan.consume(')'))\r\n-                  throw new SAXException(\"Invalid transform list: \" + val);\r\n+                  throw new SVGParseException(\"Invalid transform list: \" + val);\r\n \r\n                if (Float.isNaN(ty))\r\n                   matrix.preTranslate(tx, 0f);\r\n@@ -3002,7 +3203,7 @@ private Matrix  parseTransformList(String val) throws SAXException\n                scan.skipWhitespace();\r\n \r\n                if (Float.isNaN(sx) || !scan.consume(')'))\r\n-                  throw new SAXException(\"Invalid transform list: \" + val);\r\n+                  throw new SVGParseException(\"Invalid transform list: \" + val);\r\n \r\n                if (Float.isNaN(sy))\r\n                   matrix.preScale(sx, sx);\r\n@@ -3018,14 +3219,14 @@ private Matrix  parseTransformList(String val) throws SAXException\n                scan.skipWhitespace();\r\n \r\n                if (Float.isNaN(ang) || !scan.consume(')'))\r\n-                  throw new SAXException(\"Invalid transform list: \" + val);\r\n+                  throw new SVGParseException(\"Invalid transform list: \" + val);\r\n \r\n                if (Float.isNaN(cx)) {\r\n                   matrix.preRotate(ang);\r\n                } else if (!Float.isNaN(cy)) {\r\n                   matrix.preRotate(ang, cx, cy);\r\n                } else {\r\n-                  throw new SAXException(\"Invalid transform list: \" + val);\r\n+                  throw new SVGParseException(\"Invalid transform list: \" + val);\r\n                }\r\n                break;\r\n             }\r\n@@ -3036,7 +3237,7 @@ private Matrix  parseTransformList(String val) throws SAXException\n                scan.skipWhitespace();\r\n \r\n                if (Float.isNaN(ang) || !scan.consume(')'))\r\n-                  throw new SAXException(\"Invalid transform list: \" + val);\r\n+                  throw new SVGParseException(\"Invalid transform list: \" + val);\r\n \r\n                matrix.preSkew((float) Math.tan(Math.toRadians(ang)), 0f);\r\n                break;\r\n@@ -3048,14 +3249,14 @@ private Matrix  parseTransformList(String val) throws SAXException\n                scan.skipWhitespace();\r\n \r\n                if (Float.isNaN(ang) || !scan.consume(')'))\r\n-                  throw new SAXException(\"Invalid transform list: \" + val);\r\n+                  throw new SVGParseException(\"Invalid transform list: \" + val);\r\n \r\n                matrix.preSkew(0f, (float) Math.tan(Math.toRadians(ang)));\r\n                break;\r\n             }\r\n \r\n             default:\r\n-               throw new SAXException(\"Invalid transform list fn: \" + cmd + \")\");\r\n+               throw new SVGParseException(\"Invalid transform list fn: \" + cmd + \")\");\r\n          }\r\n \r\n          if (scan.empty())\r\n@@ -3076,10 +3277,10 @@ private Matrix  parseTransformList(String val) throws SAXException\n     * Parse an SVG 'Length' value (usually a coordinate).\r\n     * Spec says: length ::= number (\"em\" | \"ex\" | \"px\" | \"in\" | \"cm\" | \"mm\" | \"pt\" | \"pc\" | \"%\")?\r\n     */\r\n-   static Length  parseLength(String val) throws SAXException\r\n+   static Length  parseLength(String val) throws SVGParseException\r\n    {\r\n       if (val.length() == 0)\r\n-         throw new SAXException(\"Invalid length value (empty string)\");\r\n+         throw new SVGParseException(\"Invalid length value (empty string)\");\r\n       int   end = val.length();\r\n       Unit  unit = Unit.px;\r\n       char  lastChar = val.charAt(end-1);\r\n@@ -3093,7 +3294,7 @@ static Length  parseLength(String val) throws SAXException\n          try {\r\n             unit = Unit.valueOf(unitStr.toLowerCase(Locale.US));\r\n          } catch (IllegalArgumentException e) {\r\n-            throw new SAXException(\"Invalid length unit specifier: \"+val);\r\n+            throw new SVGParseException(\"Invalid length unit specifier: \"+val);\r\n          }\r\n       }\r\n       try\r\n@@ -3103,18 +3304,18 @@ static Length  parseLength(String val) throws SAXException\n       }\r\n       catch (NumberFormatException e)\r\n       {\r\n-         throw new SAXException(\"Invalid length value: \"+val, e);\r\n+         throw new SVGParseException(\"Invalid length value: \"+val, e);\r\n       }\r\n    }\r\n \r\n \r\n    /*\r\n     * Parse a list of Length/Coords\r\n     */\r\n-   private static List<Length>  parseLengthList(String val) throws SAXException\r\n+   private static List<Length>  parseLengthList(String val) throws SVGParseException\r\n    {\r\n       if (val.length() == 0)\r\n-         throw new SAXException(\"Invalid length list (empty string)\");\r\n+         throw new SVGParseException(\"Invalid length list (empty string)\");\r\n \r\n       List<Length>  coords = new ArrayList<>(1);\r\n \r\n@@ -3125,7 +3326,7 @@ private static List<Length>  parseLengthList(String val) throws SAXException\n       {\r\n          float scalar = scan.nextFloat();\r\n          if (Float.isNaN(scalar))\r\n-            throw new SAXException(\"Invalid length list value: \"+scan.ahead());\r\n+            throw new SVGParseException(\"Invalid length list value: \"+scan.ahead());\r\n          Unit  unit = scan.nextUnit();\r\n          if (unit == null)\r\n             unit = Unit.px;\r\n@@ -3139,30 +3340,30 @@ private static List<Length>  parseLengthList(String val) throws SAXException\n    /*\r\n     * Parse a generic float value.\r\n     */\r\n-   private static float  parseFloat(String val) throws SAXException\r\n+   private static float  parseFloat(String val) throws SVGParseException\r\n    {\r\n       int  len = val.length();\r\n       if (len == 0)\r\n-         throw new SAXException(\"Invalid float value (empty string)\");\r\n+         throw new SVGParseException(\"Invalid float value (empty string)\");\r\n       return parseFloat(val, 0, len);\r\n    }\r\n \r\n-   private static float  parseFloat(String val, int offset, int len) throws SAXException\r\n+   private static float  parseFloat(String val, int offset, int len) throws SVGParseException\r\n    {\r\n       NumberParser np = new NumberParser();\r\n       float  num = np.parseNumber(val, offset, len);\r\n       if (!Float.isNaN(num)) {\r\n          return num;\r\n       } else {\r\n-         throw new SAXException(\"Invalid float value: \"+val);\r\n+         throw new SVGParseException(\"Invalid float value: \"+val);\r\n       }\r\n    }\r\n \r\n \r\n    /*\r\n     * Parse an opacity value (a float clamped to the range 0..1).\r\n     */\r\n-   private static float  parseOpacity(String val) throws SAXException\r\n+   private static float  parseOpacity(String val) throws SVGParseException\r\n    {\r\n       float  o = parseFloat(val);\r\n       return (o < 0f) ? 0f : (o > 1f) ? 1f : o;\r\n@@ -3172,7 +3373,7 @@ private static float  parseOpacity(String val) throws SAXException\n    /*\r\n     * Parse a viewBox attribute.\r\n     */\r\n-   private static Box  parseViewBox(String val) throws SAXException\r\n+   private static Box  parseViewBox(String val) throws SVGParseException\r\n    {\r\n       TextScanner scan = new TextScanner(val);\r\n       scan.skipWhitespace();\r\n@@ -3186,11 +3387,11 @@ private static Box  parseViewBox(String val) throws SAXException\n       float height = scan.nextFloat();\r\n \r\n       if (Float.isNaN(minX) || Float.isNaN(minY) || Float.isNaN(width) || Float.isNaN(height))\r\n-         throw new SAXException(\"Invalid viewBox definition - should have four numbers\");\r\n+         throw new SVGParseException(\"Invalid viewBox definition - should have four numbers\");\r\n       if (width < 0)\r\n-         throw new SAXException(\"Invalid viewBox. width cannot be negative\");\r\n+         throw new SVGParseException(\"Invalid viewBox. width cannot be negative\");\r\n       if (height < 0)\r\n-         throw new SAXException(\"Invalid viewBox. height cannot be negative\");\r\n+         throw new SVGParseException(\"Invalid viewBox. height cannot be negative\");\r\n \r\n       return new SVG.Box(minX, minY, width, height);\r\n    }\r\n@@ -3199,7 +3400,7 @@ private static Box  parseViewBox(String val) throws SAXException\n    /*\r\n     * \r\n     */\r\n-   private static void  parsePreserveAspectRatio(SVG.SvgPreserveAspectRatioContainer obj, String val) throws SAXException\r\n+   private static void  parsePreserveAspectRatio(SVG.SvgPreserveAspectRatioContainer obj, String val) throws SVGParseException\r\n    {\r\n       TextScanner scan = new TextScanner(val);\r\n       scan.skipWhitespace();\r\n@@ -3223,7 +3424,7 @@ private static void  parsePreserveAspectRatio(SVG.SvgPreserveAspectRatioContaine\n             case \"slice\":\r\n                scale = PreserveAspectRatio.Scale.Slice; break;\r\n             default:\r\n-               throw new SAXException(\"Invalid preserveAspectRatio definition: \" + val);\r\n+               throw new SVGParseException(\"Invalid preserveAspectRatio definition: \" + val);\r\n          }\r\n       }\r\n       obj.preserveAspectRatio = new PreserveAspectRatio(align, scale);\r\n@@ -3427,7 +3628,7 @@ private static Colour  parseColourKeyword(String nameLowerCase) throws SVGParseE\n \r\n    // Parse a font attribute\r\n    // [ [ <'font-style'> || <'font-variant'> || <'font-weight'> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'> ] | caption | icon | menu | message-box | small-caption | status-bar | inherit\r\n-   private static void  parseFont(Style style, String val) throws SAXException\r\n+   private static void  parseFont(Style style, String val) throws SVGParseException\r\n    {\r\n       Integer          fontWeight = null;\r\n       Style.FontStyle  fontStyle = null;\r\n@@ -3445,7 +3646,7 @@ private static void  parseFont(Style style, String val) throws SAXException\n          item = scan.nextToken('/');\r\n          scan.skipWhitespace();\r\n          if (item == null)\r\n-            throw new SAXException(\"Invalid font style attribute: missing font size and family\");\r\n+            throw new SVGParseException(\"Invalid font style attribute: missing font size and family\");\r\n          if (fontWeight != null && fontStyle != null)\r\n             break;\r\n          if (item.equals(\"normal\"))  // indeterminate which of these this refers to\r\n@@ -3478,7 +3679,7 @@ private static void  parseFont(Style style, String val) throws SAXException\n          scan.skipWhitespace();\r\n          item = scan.nextToken();\r\n          if (item == null)\r\n-            throw new SAXException(\"Invalid font style attribute: missing line-height\");\r\n+            throw new SVGParseException(\"Invalid font style attribute: missing line-height\");\r\n          parseLength(item);\r\n          scan.skipWhitespace();\r\n       }\r\n@@ -3493,7 +3694,7 @@ private static void  parseFont(Style style, String val) throws SAXException\n \r\n \r\n    // Parse a font family list\r\n-   private static List<String>  parseFontFamily(String val) throws SAXException\r\n+   private static List<String>  parseFontFamily(String val) throws SVGParseException\r\n    {\r\n       List<String> fonts = null;\r\n       TextScanner  scan = new TextScanner(val);\r\n@@ -3516,7 +3717,7 @@ private static List<String>  parseFontFamily(String val) throws SAXException\n \r\n \r\n    // Parse a font size keyword or numerical value\r\n-   private static Length  parseFontSize(String val) throws SAXException\r\n+   private static Length  parseFontSize(String val) throws SVGParseException\r\n    {\r\n       Length  size = FontSizeKeywords.get(val);\r\n       if (size == null) {\r\n@@ -3527,24 +3728,24 @@ private static Length  parseFontSize(String val) throws SAXException\n \r\n \r\n    // Parse a font weight keyword or numerical value\r\n-   private static Integer  parseFontWeight(String val) throws SAXException\r\n+   private static Integer  parseFontWeight(String val) throws SVGParseException\r\n    {\r\n       Integer  wt = FontWeightKeywords.get(val);\r\n       if (wt == null) {\r\n-         throw new SAXException(\"Invalid font-weight property: \"+val);\r\n+         throw new SVGParseException(\"Invalid font-weight property: \"+val);\r\n       }\r\n       return wt;\r\n    }\r\n \r\n \r\n    // Parse a font style keyword\r\n-   private static Style.FontStyle  parseFontStyle(String val) throws SAXException\r\n+   private static Style.FontStyle  parseFontStyle(String val) throws SVGParseException\r\n    {\r\n       Style.FontStyle  fs = fontStyleKeyword(val);\r\n       if (fs != null)\r\n          return fs;\r\n       else\r\n-         throw new SAXException(\"Invalid font-style property: \"+val);\r\n+         throw new SVGParseException(\"Invalid font-style property: \"+val);\r\n    }\r\n \r\n \r\n@@ -3564,7 +3765,7 @@ else if (\"oblique\".equals(val))\n \r\n \r\n    // Parse a text decoration keyword\r\n-   private static TextDecoration  parseTextDecoration(String val) throws SAXException\r\n+   private static TextDecoration  parseTextDecoration(String val) throws SVGParseException\r\n    {\r\n       if (NONE.equals(val))\r\n          return Style.TextDecoration.None;\r\n@@ -3576,60 +3777,60 @@ private static TextDecoration  parseTextDecoration(String val) throws SAXExcepti\n          return Style.TextDecoration.LineThrough;\r\n       if (\"blink\".equals(val))\r\n          return Style.TextDecoration.Blink;\r\n-      throw new SAXException(\"Invalid text-decoration property: \"+val);\r\n+      throw new SVGParseException(\"Invalid text-decoration property: \"+val);\r\n    }\r\n \r\n \r\n    // Parse a text decoration keyword\r\n-   private static TextDirection  parseTextDirection(String val) throws SAXException\r\n+   private static TextDirection  parseTextDirection(String val) throws SVGParseException\r\n    {\r\n       if (\"ltr\".equals(val))\r\n          return Style.TextDirection.LTR;\r\n       if (\"rtl\".equals(val))\r\n          return Style.TextDirection.RTL;\r\n-      throw new SAXException(\"Invalid direction property: \"+val);\r\n+      throw new SVGParseException(\"Invalid direction property: \"+val);\r\n    }\r\n \r\n \r\n    // Parse fill rule\r\n-   private static Style.FillRule  parseFillRule(String val) throws SAXException\r\n+   private static Style.FillRule  parseFillRule(String val) throws SVGParseException\r\n    {\r\n       if (\"nonzero\".equals(val))\r\n          return Style.FillRule.NonZero;\r\n       if (\"evenodd\".equals(val))\r\n          return Style.FillRule.EvenOdd;\r\n-      throw new SAXException(\"Invalid fill-rule property: \"+val);\r\n+      throw new SVGParseException(\"Invalid fill-rule property: \"+val);\r\n    }\r\n \r\n \r\n    // Parse stroke-linecap\r\n-   private static Style.LineCaps  parseStrokeLineCap(String val) throws SAXException\r\n+   private static Style.LineCaps  parseStrokeLineCap(String val) throws SVGParseException\r\n    {\r\n       if (\"butt\".equals(val))\r\n          return Style.LineCaps.Butt;\r\n       if (\"round\".equals(val))\r\n          return Style.LineCaps.Round;\r\n       if (\"square\".equals(val))\r\n          return Style.LineCaps.Square;\r\n-      throw new SAXException(\"Invalid stroke-linecap property: \"+val);\r\n+      throw new SVGParseException(\"Invalid stroke-linecap property: \"+val);\r\n    }\r\n \r\n \r\n    // Parse stroke-linejoin\r\n-   private static Style.LineJoin  parseStrokeLineJoin(String val) throws SAXException\r\n+   private static Style.LineJoin  parseStrokeLineJoin(String val) throws SVGParseException\r\n    {\r\n       if (\"miter\".equals(val))\r\n          return Style.LineJoin.Miter;\r\n       if (\"round\".equals(val))\r\n          return Style.LineJoin.Round;\r\n       if (\"bevel\".equals(val))\r\n          return Style.LineJoin.Bevel;\r\n-      throw new SAXException(\"Invalid stroke-linejoin property: \"+val);\r\n+      throw new SVGParseException(\"Invalid stroke-linejoin property: \"+val);\r\n    }\r\n \r\n \r\n    // Parse stroke-dasharray\r\n-   private static Length[]  parseStrokeDashArray(String val) throws SAXException\r\n+   private static Length[]  parseStrokeDashArray(String val) throws SVGParseException\r\n    {\r\n       TextScanner scan = new TextScanner(val);\r\n       scan.skipWhitespace();\r\n@@ -3641,7 +3842,7 @@ private static Length[]  parseStrokeDashArray(String val) throws SAXException\n       if (dash == null)\r\n          return null;\r\n       if (dash.isNegative())\r\n-         throw new SAXException(\"Invalid stroke-dasharray. Dash segemnts cannot be negative: \"+val);\r\n+         throw new SVGParseException(\"Invalid stroke-dasharray. Dash segemnts cannot be negative: \"+val);\r\n \r\n       float sum = dash.floatValue();\r\n \r\n@@ -3652,9 +3853,9 @@ private static Length[]  parseStrokeDashArray(String val) throws SAXException\n          scan.skipCommaWhitespace();\r\n          dash = scan.nextLength();\r\n          if (dash == null)  // must have hit something unexpected\r\n-            throw new SAXException(\"Invalid stroke-dasharray. Non-Length content found: \"+val);\r\n+            throw new SVGParseException(\"Invalid stroke-dasharray. Non-Length content found: \"+val);\r\n          if (dash.isNegative())\r\n-            throw new SAXException(\"Invalid stroke-dasharray. Dash segemnts cannot be negative: \"+val);\r\n+            throw new SVGParseException(\"Invalid stroke-dasharray. Dash segemnts cannot be negative: \"+val);\r\n          dashes.add(dash);\r\n          sum += dash.floatValue();\r\n       }\r\n@@ -3669,36 +3870,36 @@ private static Length[]  parseStrokeDashArray(String val) throws SAXException\n \r\n \r\n    // Parse a text anchor keyword\r\n-   private static Style.TextAnchor  parseTextAnchor(String val) throws SAXException\r\n+   private static Style.TextAnchor  parseTextAnchor(String val) throws SVGParseException\r\n    {\r\n       if (\"start\".equals(val))\r\n          return Style.TextAnchor.Start;\r\n       if (\"middle\".equals(val))\r\n          return Style.TextAnchor.Middle;\r\n       if (\"end\".equals(val))\r\n          return Style.TextAnchor.End;\r\n-      throw new SAXException(\"Invalid text-anchor property: \"+val);\r\n+      throw new SVGParseException(\"Invalid text-anchor property: \"+val);\r\n    }\r\n \r\n \r\n    // Parse a text anchor keyword\r\n-   private static Boolean  parseOverflow(String val) throws SAXException\r\n+   private static Boolean  parseOverflow(String val) throws SVGParseException\r\n    {\r\n       if (\"visible\".equals(val) || \"auto\".equals(val))\r\n          return Boolean.TRUE;\r\n       if (\"hidden\".equals(val) || \"scroll\".equals(val))\r\n          return Boolean.FALSE;\r\n-      throw new SAXException(\"Invalid toverflow property: \"+val);\r\n+      throw new SVGParseException(\"Invalid toverflow property: \"+val);\r\n    }\r\n \r\n \r\n    // Parse CSS clip shape (always a rect())\r\n-   private static CSSClipRect  parseClip(String val) throws SAXException\r\n+   private static CSSClipRect  parseClip(String val) throws SVGParseException\r\n    {\r\n       if (\"auto\".equals(val))\r\n          return null;\r\n       if (!val.toLowerCase(Locale.US).startsWith(\"rect(\"))\r\n-         throw new SAXException(\"Invalid clip attribute shape. Only rect() is supported.\");\r\n+         throw new SVGParseException(\"Invalid clip attribute shape. Only rect() is supported.\");\r\n \r\n       TextScanner scan = new TextScanner(val.substring(5));\r\n       scan.skipWhitespace();\r\n@@ -3713,7 +3914,7 @@ private static CSSClipRect  parseClip(String val) throws SAXException\n \r\n       scan.skipWhitespace();\r\n       if (!scan.consume(')'))\r\n-         throw new SAXException(\"Bad rect() clip definition: \"+val);\r\n+         throw new SVGParseException(\"Bad rect() clip definition: \"+val);\r\n \r\n       return new CSSClipRect(top, right, bottom, left);\r\n    }\r\n@@ -3729,34 +3930,34 @@ private static Length parseLengthOrAuto(TextScanner scan)\n \r\n \r\n    // Parse a vector effect keyword\r\n-   private static VectorEffect  parseVectorEffect(String val) throws SAXException\r\n+   private static VectorEffect  parseVectorEffect(String val) throws SVGParseException\r\n    {\r\n       if (NONE.equals(val))\r\n          return Style.VectorEffect.None;\r\n       if (\"non-scaling-stroke\".equals(val))\r\n          return Style.VectorEffect.NonScalingStroke;\r\n-      throw new SAXException(\"Invalid vector-effect property: \"+val);\r\n+      throw new SVGParseException(\"Invalid vector-effect property: \"+val);\r\n    }\r\n \r\n \r\n    // Parse a rendering quality property\r\n-   private static RenderQuality  parseRenderQuality(String val, String attrName) throws SAXException\r\n+   private static RenderQuality  parseRenderQuality(String val, String attrName) throws SVGParseException\r\n    {\r\n       if (\"auto\".equals(val))\r\n          return RenderQuality.auto;\r\n       if (\"optimizeQuality\".equals(val))\r\n          return RenderQuality.optimizeQuality;\r\n       if (\"optimizeSpeed\".equals(val))\r\n          return RenderQuality.optimizeSpeed;\r\n-      throw new SAXException(\"Invalid \" + attrName + \" property: \"+val);\r\n+      throw new SVGParseException(\"Invalid \" + attrName + \" property: \"+val);\r\n    }\r\n \r\n \r\n    //=========================================================================\r\n \r\n \r\n    // Parse the string that defines a path.\r\n-   private static SVG.PathDefinition  parsePath(String val) throws SAXException\r\n+   private static SVG.PathDefinition  parsePath(String val) throws SVGParseException\r\n    {\r\n       TextScanner  scan = new TextScanner(val);\r\n \r\n@@ -4007,7 +4208,7 @@ private static SVG.PathDefinition  parsePath(String val) throws SAXException\n    \r\n    // Parse the attribute that declares the list of SVG features that must be\r\n    // supported if we are to render this element\r\n-   private static Set<String>  parseRequiredFeatures(String val) throws SAXException\r\n+   private static Set<String>  parseRequiredFeatures(String val) throws SVGParseException\r\n    {\r\n       TextScanner      scan = new TextScanner(val);\r\n       HashSet<String>  result = new HashSet<>();\r\n@@ -4031,7 +4232,7 @@ private static Set<String>  parseRequiredFeatures(String val) throws SAXExceptio\n \r\n    // Parse the attribute that declares the list of languages, one of which\r\n    // must be supported if we are to render this element\r\n-   private static Set<String>  parseSystemLanguage(String val) throws SAXException\r\n+   private static Set<String>  parseSystemLanguage(String val) throws SVGParseException\r\n    {\r\n       TextScanner      scan = new TextScanner(val);\r\n       HashSet<String>  result = new HashSet<>();\r\n@@ -4054,7 +4255,7 @@ private static Set<String>  parseSystemLanguage(String val) throws SAXException\n \r\n    // Parse the attribute that declares the list of MIME types that must be\r\n    // supported if we are to render this element\r\n-   private static Set<String>  parseRequiredFormats(String val) throws SAXException\r\n+   private static Set<String>  parseRequiredFormats(String val) throws SVGParseException\r\n    {\r\n       TextScanner      scan = new TextScanner(val);\r\n       HashSet<String>  result = new HashSet<>();\r\n@@ -4069,12 +4270,12 @@ private static Set<String>  parseRequiredFormats(String val) throws SAXException\n    }\r\n \r\n \r\n-   private static String  parseFunctionalIRI(String val, String attrName) throws SAXException\r\n+   private static String  parseFunctionalIRI(String val, String attrName) throws SVGParseException\r\n    {\r\n       if (val.equals(NONE))\r\n          return null;\r\n       if (!val.startsWith(\"url(\") || !val.endsWith(\")\"))\r\n-         throw new SAXException(\"Bad \"+attrName+\" attribute. Expected \\\"none\\\" or \\\"url()\\\" format\");\r\n+         throw new SVGParseException(\"Bad \"+attrName+\" attribute. Expected \\\"none\\\" or \\\"url()\\\" format\");\r\n \r\n       return val.substring(4, val.length()-1).trim();\r\n       // Unlike CSS, the SVG spec seems to indicate that quotes are not allowed in \"url()\" references\r\n@@ -4086,12 +4287,12 @@ private static String  parseFunctionalIRI(String val, String attrName) throws SA\n    //=========================================================================\r\n \r\n \r\n-   private void  style(Attributes attributes) throws SAXException\r\n+   private void  style(Attributes attributes) throws SVGParseException\r\n    {\r\n       debug(\"<style>\");\r\n \r\n       if (currentElement == null)\r\n-         throw new SAXException(\"Invalid document. Root element must be <svg>\");\r\n+         throw new SVGParseException(\"Invalid document. Root element must be <svg>\");\r\n \r\n       // Check style sheet is in CSS format\r\n       boolean  isTextCSS = true;\r\n@@ -4122,7 +4323,7 @@ private void  style(Attributes attributes) throws SAXException\n    }\r\n \r\n \r\n-   private void  parseCSSStyleSheet(String sheet) throws SAXException\r\n+   private void  parseCSSStyleSheet(String sheet) throws SVGParseException\r\n    {\r\n       CSSParser  cssp = new CSSParser(MediaType.screen);\r\n       svgDocument.addCSSRules(cssp.parse(sheet));\r"
        }
    ]
}