{
    "sha": "8cfe32cf4f61d218439e57e134ccc3413aa98f89",
    "node_id": "MDY6Q29tbWl0Mjg3Mzg0NDc6OGNmZTMyY2Y0ZjYxZDIxODQzOWU1N2UxMzRjY2MzNDEzYWE5OGY4OQ==",
    "commit": {
        "author": {
            "name": "kyotoYaho",
            "email": "nju_yaho@apache.org",
            "date": "2018-12-19T02:29:38Z"
        },
        "committer": {
            "name": "kyotoYaho",
            "email": "nju_yaho@apache.org",
            "date": "2018-12-25T01:28:57Z"
        },
        "message": "KYLIN-3540 move queryService of CubeController to CubeService",
        "tree": {
            "sha": "adb7d2c1be5972b7dcba607492bbdef32c8f9e72",
            "url": "https://api.github.com/repos/apache/kylin/git/trees/adb7d2c1be5972b7dcba607492bbdef32c8f9e72"
        },
        "url": "https://api.github.com/repos/apache/kylin/git/commits/8cfe32cf4f61d218439e57e134ccc3413aa98f89",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/kylin/commits/8cfe32cf4f61d218439e57e134ccc3413aa98f89",
    "html_url": "https://github.com/apache/kylin/commit/8cfe32cf4f61d218439e57e134ccc3413aa98f89",
    "comments_url": "https://api.github.com/repos/apache/kylin/commits/8cfe32cf4f61d218439e57e134ccc3413aa98f89/comments",
    "author": {
        "login": "kyotoYaho",
        "id": 18194100,
        "node_id": "MDQ6VXNlcjE4MTk0MTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/18194100?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kyotoYaho",
        "html_url": "https://github.com/kyotoYaho",
        "followers_url": "https://api.github.com/users/kyotoYaho/followers",
        "following_url": "https://api.github.com/users/kyotoYaho/following{/other_user}",
        "gists_url": "https://api.github.com/users/kyotoYaho/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kyotoYaho/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kyotoYaho/subscriptions",
        "organizations_url": "https://api.github.com/users/kyotoYaho/orgs",
        "repos_url": "https://api.github.com/users/kyotoYaho/repos",
        "events_url": "https://api.github.com/users/kyotoYaho/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kyotoYaho/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "kyotoYaho",
        "id": 18194100,
        "node_id": "MDQ6VXNlcjE4MTk0MTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/18194100?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kyotoYaho",
        "html_url": "https://github.com/kyotoYaho",
        "followers_url": "https://api.github.com/users/kyotoYaho/followers",
        "following_url": "https://api.github.com/users/kyotoYaho/following{/other_user}",
        "gists_url": "https://api.github.com/users/kyotoYaho/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kyotoYaho/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kyotoYaho/subscriptions",
        "organizations_url": "https://api.github.com/users/kyotoYaho/orgs",
        "repos_url": "https://api.github.com/users/kyotoYaho/repos",
        "events_url": "https://api.github.com/users/kyotoYaho/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kyotoYaho/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "0c92d1cbbb22ffa222b7f3e476e5441bac50f756",
            "url": "https://api.github.com/repos/apache/kylin/commits/0c92d1cbbb22ffa222b7f3e476e5441bac50f756",
            "html_url": "https://github.com/apache/kylin/commit/0c92d1cbbb22ffa222b7f3e476e5441bac50f756"
        }
    ],
    "stats": {
        "total": 159,
        "additions": 78,
        "deletions": 81
    },
    "files": [
        {
            "sha": "11753eca476ac42f15e75122241de580a126cac7",
            "filename": "server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java",
            "status": "modified",
            "additions": 5,
            "deletions": 66,
            "changes": 71,
            "blob_url": "https://github.com/apache/kylin/blob/8cfe32cf4f61d218439e57e134ccc3413aa98f89/server-base%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fkylin%2Frest%2Fcontroller%2FCubeController.java",
            "raw_url": "https://github.com/apache/kylin/raw/8cfe32cf4f61d218439e57e134ccc3413aa98f89/server-base%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fkylin%2Frest%2Fcontroller%2FCubeController.java",
            "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fkylin%2Frest%2Fcontroller%2FCubeController.java?ref=8cfe32cf4f61d218439e57e134ccc3413aa98f89",
            "patch": "@@ -56,8 +56,6 @@\n import org.apache.kylin.metadata.model.SegmentRange.TSRange;\n import org.apache.kylin.metadata.project.ProjectInstance;\n import org.apache.kylin.metadata.realization.RealizationStatusEnum;\n-import org.apache.kylin.metrics.MetricsManager;\n-import org.apache.kylin.metrics.property.QueryCubePropertyEnum;\n import org.apache.kylin.rest.exception.BadRequestException;\n import org.apache.kylin.rest.exception.ForbiddenException;\n import org.apache.kylin.rest.exception.InternalErrorException;\n@@ -70,7 +68,6 @@\n import org.apache.kylin.rest.request.JobBuildRequest2;\n import org.apache.kylin.rest.request.JobOptimizeRequest;\n import org.apache.kylin.rest.request.LookupSnapshotBuildRequest;\n-import org.apache.kylin.rest.request.SQLRequest;\n import org.apache.kylin.rest.response.CubeInstanceResponse;\n import org.apache.kylin.rest.response.CuboidTreeResponse;\n import org.apache.kylin.rest.response.EnvelopeResponse;\n@@ -80,7 +77,6 @@\n import org.apache.kylin.rest.service.CubeService;\n import org.apache.kylin.rest.service.JobService;\n import org.apache.kylin.rest.service.ProjectService;\n-import org.apache.kylin.rest.service.QueryService;\n import org.apache.kylin.rest.util.ValidateUtil;\n import org.apache.kylin.source.kafka.util.KafkaClient;\n import org.slf4j.Logger;\n@@ -124,10 +120,6 @@ public class CubeController extends BasicController {\n     @Qualifier(\"projectService\")\n     private ProjectService projectService;\n \n-    @Autowired\n-    @Qualifier(\"queryService\")\n-    private QueryService queryService;\n-\n     @RequestMapping(value = \"/validate/{cubeName}\", method = RequestMethod.GET, produces = { \"application/json\" })\n     @ResponseBody\n     public EnvelopeResponse<Boolean> validateModelName(@PathVariable String cubeName) {\n@@ -873,7 +865,7 @@ public CuboidTreeResponse getCurrentCuboids(@PathVariable String cubeName) {\n         Map<Long, Long> queryMatchMap = null;\n         try {\n             hitFrequencyMap = getTargetCuboidHitFrequency(cubeName);\n-            queryMatchMap = getCuboidQueryMatchCount(cubeName);\n+            queryMatchMap = cubeService.getCuboidQueryMatchCount(cubeName);\n         } catch (Exception e) {\n             logger.warn(\"Fail to query on system cube due to \" + e);\n         }\n@@ -899,7 +891,7 @@ public CuboidTreeResponse getRecommendCuboids(@PathVariable String cubeName) thr\n         // Get cuboid target info for displaying heat map of cuboid hit\n         Map<Long, Long> displayHitFrequencyMap = getTargetCuboidHitFrequency(cubeName);\n         // Get exactly matched cuboid query count\n-        Map<Long, Long> queryMatchMap = getCuboidQueryMatchCount(cubeName);\n+        Map<Long, Long> queryMatchMap = cubeService.getCuboidQueryMatchCount(cubeName);\n \n         Set<Long> currentCuboidSet = cube.getCuboidScheduler().getAllCuboidIds();\n         return cubeService.getCuboidTreeResponse(cuboidScheduler, recommendCuboidStatsMap, displayHitFrequencyMap,\n@@ -909,69 +901,16 @@ public CuboidTreeResponse getRecommendCuboids(@PathVariable String cubeName) thr\n     private Map<Long, Long> getRecommendCuboidList(CubeInstance cube) throws IOException {\n         // Get cuboid source info\n         Map<Long, Long> optimizeHitFrequencyMap = getSourceCuboidHitFrequency(cube.getName());\n-        Map<Long, Map<Long, Long>> rollingUpCountSourceMap = getCuboidRollingUpCount(cube.getName());\n+        Map<Long, Map<Long, Long>> rollingUpCountSourceMap = cubeService.getCuboidRollingUpStats(cube.getName());\n         return cubeService.getRecommendCuboidStatistics(cube, optimizeHitFrequencyMap, rollingUpCountSourceMap);\n     }\n \n     private Map<Long, Long> getSourceCuboidHitFrequency(String cubeName) {\n-        return getCuboidHitFrequency(cubeName, true);\n+        return cubeService.getCuboidHitFrequency(cubeName, true);\n     }\n \n     private Map<Long, Long> getTargetCuboidHitFrequency(String cubeName) {\n-        return getCuboidHitFrequency(cubeName, false);\n-    }\n-\n-    private Map<Long, Long> getCuboidHitFrequency(String cubeName, boolean isCuboidSource) {\n-        SQLRequest sqlRequest = new SQLRequest();\n-        sqlRequest.setProject(MetricsManager.SYSTEM_PROJECT);\n-        String cuboidColumn = QueryCubePropertyEnum.CUBOID_SOURCE.toString();\n-        if (!isCuboidSource) {\n-            cuboidColumn = QueryCubePropertyEnum.CUBOID_TARGET.toString();\n-        }\n-        String hitMeasure = QueryCubePropertyEnum.WEIGHT_PER_HIT.toString();\n-        String table = cubeService.getMetricsManager()\n-                .getSystemTableFromSubject(cubeService.getConfig().getKylinMetricsSubjectQueryCube());\n-        String sql = \"select \" + cuboidColumn + \", sum(\" + hitMeasure + \") \" //\n-                + \"from \" + table//\n-                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = '\" + cubeName + \"' \" //\n-                + \"group by \" + cuboidColumn;\n-        sqlRequest.setSql(sql);\n-        List<List<String>> orgHitFrequency = queryService.doQueryWithCache(sqlRequest).getResults();\n-        return cubeService.formatQueryCount(orgHitFrequency);\n-    }\n-\n-    private Map<Long, Map<Long, Long>> getCuboidRollingUpCount(String cubeName) {\n-        SQLRequest sqlRequest = new SQLRequest();\n-        sqlRequest.setProject(MetricsManager.SYSTEM_PROJECT);\n-        String cuboidSource = QueryCubePropertyEnum.CUBOID_SOURCE.toString();\n-        String cuboidTarget = QueryCubePropertyEnum.CUBOID_TARGET.toString();\n-        String aggCount = QueryCubePropertyEnum.AGGR_COUNT.toString();\n-        String table = cubeService.getMetricsManager()\n-                .getSystemTableFromSubject(cubeService.getConfig().getKylinMetricsSubjectQueryCube());\n-        String sql = \"select \" + cuboidSource + \", \" + cuboidTarget + \", sum(\" + aggCount + \")/count(*) \" //\n-                + \"from \" + table //\n-                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = '\" + cubeName + \"' \" //\n-                + \"group by \" + cuboidSource + \", \" + cuboidTarget;\n-        sqlRequest.setSql(sql);\n-        List<List<String>> orgRollingUpCount = queryService.doQueryWithCache(sqlRequest).getResults();\n-        return cubeService.formatRollingUpCount(orgRollingUpCount);\n-    }\n-\n-    private Map<Long, Long> getCuboidQueryMatchCount(String cubeName) {\n-        SQLRequest sqlRequest = new SQLRequest();\n-        sqlRequest.setProject(MetricsManager.SYSTEM_PROJECT);\n-        String cuboidSource = QueryCubePropertyEnum.CUBOID_SOURCE.toString();\n-        String hitMeasure = QueryCubePropertyEnum.WEIGHT_PER_HIT.toString();\n-        String table = cubeService.getMetricsManager()\n-                .getSystemTableFromSubject(cubeService.getConfig().getKylinMetricsSubjectQueryCube());\n-        String sql = \"select \" + cuboidSource + \", sum(\" + hitMeasure + \") \" //\n-                + \"from \" + table //\n-                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = '\" + cubeName + \"' and \"\n-                + QueryCubePropertyEnum.IF_MATCH.toString() + \" = true \" //\n-                + \"group by \" + cuboidSource;\n-        sqlRequest.setSql(sql);\n-        List<List<String>> orgMatchHitFrequency = queryService.doQueryWithCache(sqlRequest).getResults();\n-        return cubeService.formatQueryCount(orgMatchHitFrequency);\n+        return cubeService.getCuboidHitFrequency(cubeName, false);\n     }\n \n     /**"
        },
        {
            "sha": "e24e9de5d3bd5a1a2bbb0d9f38d12681173992b1",
            "filename": "server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java",
            "status": "modified",
            "additions": 73,
            "deletions": 15,
            "changes": 88,
            "blob_url": "https://github.com/apache/kylin/blob/8cfe32cf4f61d218439e57e134ccc3413aa98f89/server-base%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fkylin%2Frest%2Fservice%2FCubeService.java",
            "raw_url": "https://github.com/apache/kylin/raw/8cfe32cf4f61d218439e57e134ccc3413aa98f89/server-base%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fkylin%2Frest%2Fservice%2FCubeService.java",
            "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fkylin%2Frest%2Fservice%2FCubeService.java?ref=8cfe32cf4f61d218439e57e134ccc3413aa98f89",
            "patch": "@@ -65,13 +65,16 @@\n import org.apache.kylin.metadata.project.RealizationEntry;\n import org.apache.kylin.metadata.realization.RealizationStatusEnum;\n import org.apache.kylin.metadata.realization.RealizationType;\n+import org.apache.kylin.metrics.MetricsManager;\n+import org.apache.kylin.metrics.property.QueryCubePropertyEnum;\n import org.apache.kylin.rest.constant.Constant;\n import org.apache.kylin.rest.exception.BadRequestException;\n import org.apache.kylin.rest.exception.ForbiddenException;\n import org.apache.kylin.rest.exception.InternalErrorException;\n import org.apache.kylin.rest.msg.Message;\n import org.apache.kylin.rest.msg.MsgPicker;\n import org.apache.kylin.rest.request.MetricsRequest;\n+import org.apache.kylin.rest.request.SQLRequest;\n import org.apache.kylin.rest.response.CubeInstanceResponse;\n import org.apache.kylin.rest.response.CuboidTreeResponse;\n import org.apache.kylin.rest.response.CuboidTreeResponse.NodeInfo;\n@@ -120,6 +123,10 @@ public class CubeService extends BasicService implements InitializingBean {\n     @Qualifier(\"modelMgmtService\")\n     private ModelService modelService;\n \n+    @Autowired\n+    @Qualifier(\"queryService\")\n+    private QueryService queryService;\n+\n     @Autowired\n     private AclEvaluate aclEvaluate;\n \n@@ -472,7 +479,8 @@ public HBaseResponse getHTableInfo(String cubeName, String tableName) throws IOE\n \n         hr = new HBaseResponse();\n         CubeInstance cube = CubeManager.getInstance(getConfig()).getCube(cubeName);\n-        if (cube.getStorageType() == IStorageAware.ID_HBASE || cube.getStorageType() == IStorageAware.ID_SHARDED_HBASE) {\n+        if (cube.getStorageType() == IStorageAware.ID_HBASE\n+                || cube.getStorageType() == IStorageAware.ID_SHARDED_HBASE) {\n             try {\n                 logger.debug(\"Loading HTable info \" + cubeName + \", \" + tableName);\n \n@@ -547,9 +555,9 @@ public CubeInstance deleteSegment(CubeInstance cube, String segmentName) throws\n     }\n \n     public boolean isOrphonSegment(CubeInstance cube, String segId) {\n-        List<JobInstance> jobInstances = jobService.searchJobsByCubeName(cube.getName(),\n-                cube.getProject(), Lists.newArrayList(JobStatusEnum.NEW, JobStatusEnum.PENDING, JobStatusEnum.RUNNING,\n-                        JobStatusEnum.ERROR, JobStatusEnum.STOPPED),\n+        List<JobInstance> jobInstances = jobService.searchJobsByCubeName(\n+                cube.getName(), cube.getProject(), Lists.newArrayList(JobStatusEnum.NEW, JobStatusEnum.PENDING,\n+                        JobStatusEnum.RUNNING, JobStatusEnum.ERROR, JobStatusEnum.STOPPED),\n                 JobTimeFilterEnum.ALL, JobService.JobSearchMode.CUBING_ONLY);\n         for (JobInstance jobInstance : jobInstances) {\n             // if there are segment related jobs, can not delete this segment.\n@@ -886,6 +894,12 @@ private NodeInfo generateNodeInfo(long cuboidId, int dimensionCount, long cubeQu\n     }\n \n     /** cube planner services */\n+    public Map<Long, Long> getRecommendCuboidStatistics(CubeInstance cube, Map<Long, Long> hitFrequencyMap,\n+            Map<Long, Map<Long, Long>> rollingUpCountSourceMap) throws IOException {\n+        aclEvaluate.checkProjectAdminPermission(cube.getProject());\n+        return CuboidRecommenderUtil.getRecommendCuboidList(cube, hitFrequencyMap, rollingUpCountSourceMap);\n+    }\n+\n     public Map<Long, Long> formatQueryCount(List<List<String>> orgQueryCount) {\n         Map<Long, Long> formattedQueryCount = Maps.newLinkedHashMap();\n         for (List<String> hit : orgQueryCount) {\n@@ -894,20 +908,64 @@ public Map<Long, Long> formatQueryCount(List<List<String>> orgQueryCount) {\n         return formattedQueryCount;\n     }\n \n-    public Map<Long, Map<Long, Long>> formatRollingUpCount(List<List<String>> orgRollingUpCount) {\n-        Map<Long, Map<Long, Long>> formattedRollingUpCount = Maps.newLinkedHashMap();\n+    public Map<Long, Map<Long, Long>> formatRollingUpStats(List<List<String>> orgRollingUpCount) {\n+        Map<Long, Map<Long, Long>> formattedRollingUpStats = Maps.newLinkedHashMap();\n         for (List<String> rollingUp : orgRollingUpCount) {\n             Map<Long, Long> childMap = Maps.newLinkedHashMap();\n             childMap.put(Long.parseLong(rollingUp.get(1)), (long) Double.parseDouble(rollingUp.get(2)));\n-            formattedRollingUpCount.put(Long.parseLong(rollingUp.get(0)), childMap);\n-        }\n-        return formattedRollingUpCount;\n-    }\n-\n-    public Map<Long, Long> getRecommendCuboidStatistics(CubeInstance cube, Map<Long, Long> hitFrequencyMap,\n-            Map<Long, Map<Long, Long>> rollingUpCountSourceMap) throws IOException {\n-        aclEvaluate.checkProjectAdminPermission(cube.getProject());\n-        return CuboidRecommenderUtil.getRecommendCuboidList(cube, hitFrequencyMap, rollingUpCountSourceMap);\n+            formattedRollingUpStats.put(Long.parseLong(rollingUp.get(0)), childMap);\n+        }\n+        return formattedRollingUpStats;\n+    }\n+\n+    public Map<Long, Long> getCuboidHitFrequency(String cubeName, boolean isCuboidSource) {\n+        SQLRequest sqlRequest = new SQLRequest();\n+        sqlRequest.setProject(MetricsManager.SYSTEM_PROJECT);\n+        String cuboidColumn = QueryCubePropertyEnum.CUBOID_SOURCE.toString();\n+        if (!isCuboidSource) {\n+            cuboidColumn = QueryCubePropertyEnum.CUBOID_TARGET.toString();\n+        }\n+        String hitMeasure = QueryCubePropertyEnum.WEIGHT_PER_HIT.toString();\n+        String table = getMetricsManager().getSystemTableFromSubject(getConfig().getKylinMetricsSubjectQueryCube());\n+        String sql = \"select \" + cuboidColumn + \", sum(\" + hitMeasure + \")\" //\n+                + \" from \" + table//\n+                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = '\" + cubeName + \"' \" //\n+                + \" group by \" + cuboidColumn;\n+        sqlRequest.setSql(sql);\n+        List<List<String>> orgHitFrequency = queryService.doQueryWithCache(sqlRequest).getResults();\n+        return formatQueryCount(orgHitFrequency);\n+    }\n+\n+    public Map<Long, Map<Long, Long>> getCuboidRollingUpStats(String cubeName) {\n+        SQLRequest sqlRequest = new SQLRequest();\n+        sqlRequest.setProject(MetricsManager.SYSTEM_PROJECT);\n+        String cuboidSource = QueryCubePropertyEnum.CUBOID_SOURCE.toString();\n+        String cuboidTarget = QueryCubePropertyEnum.CUBOID_TARGET.toString();\n+        String aggCount = QueryCubePropertyEnum.AGGR_COUNT.toString();\n+        String table = getMetricsManager().getSystemTableFromSubject(getConfig().getKylinMetricsSubjectQueryCube());\n+        String sql = \"select \" + cuboidSource + \", \" + cuboidTarget + \", sum(\" + aggCount + \")/count(*)\" //\n+                + \" from \" + table //\n+                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = '\" + cubeName + \"' \" //\n+                + \" group by \" + cuboidSource + \", \" + cuboidTarget;\n+        sqlRequest.setSql(sql);\n+        List<List<String>> orgRollingUpCount = queryService.doQueryWithCache(sqlRequest).getResults();\n+        return formatRollingUpStats(orgRollingUpCount);\n+    }\n+\n+    public Map<Long, Long> getCuboidQueryMatchCount(String cubeName) {\n+        SQLRequest sqlRequest = new SQLRequest();\n+        sqlRequest.setProject(MetricsManager.SYSTEM_PROJECT);\n+        String cuboidSource = QueryCubePropertyEnum.CUBOID_SOURCE.toString();\n+        String hitMeasure = QueryCubePropertyEnum.WEIGHT_PER_HIT.toString();\n+        String table = getMetricsManager().getSystemTableFromSubject(getConfig().getKylinMetricsSubjectQueryCube());\n+        String sql = \"select \" + cuboidSource + \", sum(\" + hitMeasure + \")\" //\n+                + \" from \" + table //\n+                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = '\" + cubeName + \"'\" //\n+                + \" and \" + QueryCubePropertyEnum.IF_MATCH.toString() + \" = true\" //\n+                + \" group by \" + cuboidSource;\n+        sqlRequest.setSql(sql);\n+        List<List<String>> orgMatchHitFrequency = queryService.doQueryWithCache(sqlRequest).getResults();\n+        return formatQueryCount(orgMatchHitFrequency);\n     }\n \n     @PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN"
        }
    ]
}