{
    "sha": "787c9b47d801b0cf08d35bca4805986c43f56836",
    "node_id": "MDY6Q29tbWl0MjEwODQ4MTo3ODdjOWI0N2Q4MDFiMGNmMDhkMzViY2E0ODA1OTg2YzQzZjU2ODM2",
    "commit": {
        "author": {
            "name": "Dave Syer",
            "email": "dsyer@gopivotal.com",
            "date": "2014-03-17T16:14:03Z"
        },
        "committer": {
            "name": "Dave Syer",
            "email": "dsyer@gopivotal.com",
            "date": "2014-04-03T18:14:15Z"
        },
        "message": "Add support for ApprovalStore in @EnableAuthorizationServer\n\nIf user defines a @Bean of type ApprovalStore the AuthorizationEndpoint and\nWhitelabelApprovalEndpoint change their behaviour accordingly.",
        "tree": {
            "sha": "369d054005869e4fda31721131e6b790e7c7985a",
            "url": "https://api.github.com/repos/spring-attic/spring-security-oauth/git/trees/369d054005869e4fda31721131e6b790e7c7985a"
        },
        "url": "https://api.github.com/repos/spring-attic/spring-security-oauth/git/commits/787c9b47d801b0cf08d35bca4805986c43f56836",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/spring-attic/spring-security-oauth/commits/787c9b47d801b0cf08d35bca4805986c43f56836",
    "html_url": "https://github.com/spring-attic/spring-security-oauth/commit/787c9b47d801b0cf08d35bca4805986c43f56836",
    "comments_url": "https://api.github.com/repos/spring-attic/spring-security-oauth/commits/787c9b47d801b0cf08d35bca4805986c43f56836/comments",
    "author": null,
    "committer": null,
    "parents": [
        {
            "sha": "bcdedc4187ba3dfadff0ba8ebcbfac92680e0738",
            "url": "https://api.github.com/repos/spring-attic/spring-security-oauth/commits/bcdedc4187ba3dfadff0ba8ebcbfac92680e0738",
            "html_url": "https://github.com/spring-attic/spring-security-oauth/commit/bcdedc4187ba3dfadff0ba8ebcbfac92680e0738"
        }
    ],
    "stats": {
        "total": 484,
        "additions": 346,
        "deletions": 138
    },
    "files": [
        {
            "sha": "41b7b999a17891b3695d4aeaa893c88a1c5bc73a",
            "filename": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/AuthorizationServerConfiguration.java",
            "status": "modified",
            "additions": 42,
            "deletions": 22,
            "changes": 64,
            "blob_url": "https://github.com/spring-attic/spring-security-oauth/blob/787c9b47d801b0cf08d35bca4805986c43f56836/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fconfig%2Fannotation%2Fweb%2Fconfiguration%2FAuthorizationServerConfiguration.java",
            "raw_url": "https://github.com/spring-attic/spring-security-oauth/raw/787c9b47d801b0cf08d35bca4805986c43f56836/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fconfig%2Fannotation%2Fweb%2Fconfiguration%2FAuthorizationServerConfiguration.java",
            "contents_url": "https://api.github.com/repos/spring-attic/spring-security-oauth/contents/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fconfig%2Fannotation%2Fweb%2Fconfiguration%2FAuthorizationServerConfiguration.java?ref=787c9b47d801b0cf08d35bca4805986c43f56836",
            "patch": "@@ -18,6 +18,8 @@\n import java.util.Collections;\n import java.util.List;\n \n+import javax.annotation.PostConstruct;\n+\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -36,14 +38,15 @@\n import org.springframework.security.oauth2.provider.OAuth2RequestFactory;\n import org.springframework.security.oauth2.provider.OAuth2RequestValidator;\n import org.springframework.security.oauth2.provider.TokenGranter;\n+import org.springframework.security.oauth2.provider.approval.ApprovalStore;\n import org.springframework.security.oauth2.provider.approval.UserApprovalHandler;\n import org.springframework.security.oauth2.provider.code.AuthorizationCodeServices;\n import org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpoint;\n import org.springframework.security.oauth2.provider.endpoint.FrameworkEndpointHandlerMapping;\n import org.springframework.security.oauth2.provider.endpoint.TokenEndpoint;\n import org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpoint;\n+import org.springframework.security.oauth2.provider.endpoint.WhitelabelErrorEndpoint;\n import org.springframework.security.oauth2.provider.implicit.ImplicitGrantService;\n-import org.springframework.security.oauth2.provider.token.AuthorizationServerTokenServices;\n import org.springframework.security.oauth2.provider.token.ConsumerTokenServices;\n import org.springframework.security.oauth2.provider.token.TokenStore;\n \n@@ -63,9 +66,6 @@ public class AuthorizationServerConfiguration extends WebSecurityConfigurerAdapt\n \t@Autowired\n \tprivate ClientDetailsService clientDetailsService;\n \t\n-\t@Autowired\n-\tprivate AuthorizationEndpoint authorizationEndpoint;\n-\n \t@Configuration\n \tprotected static class ClientDetailsAuthenticationManagerConfiguration extends\n \t\t\tGlobalAuthenticationConfigurerAdapter {\n@@ -115,6 +115,35 @@ public AuthorizationEndpoint authorizationEndpoint() throws Exception {\n \t\tauthorizationEndpoint.setImplicitGrantService(implicitGrantService());\n \t\treturn authorizationEndpoint;\n \t}\n+\t\n+\t@Configuration\n+\tprotected static class EndpointsConfiguration {\n+\t\t\n+\t\t@Autowired\n+\t\tprivate AuthorizationEndpoint authorizationEndpoint;\n+\t\t\n+\t\t@Autowired(required=false)\n+\t\tprivate ApprovalStore approvalStore;\n+\t\t\n+\t\t@Autowired\n+\t\tprivate FrameworkEndpointHandlerMapping mapping;\n+\t\t\n+\t\t@PostConstruct\n+\t\tpublic void init() {\n+\t\t\tauthorizationEndpoint.setApprovalStore(approvalStore);\t\t\t\n+\t\t\tauthorizationEndpoint.setUserApprovalPage(extractPath(mapping, \"/oauth/confirm_access\"));\n+\t\t\tauthorizationEndpoint.setErrorPage(extractPath(mapping, \"/oauth/error\"));\n+\t\t}\n+\n+\t\tprivate String extractPath(FrameworkEndpointHandlerMapping mapping, String page) {\n+\t\t\tString path = mapping.getPath(page);\n+\t\t\tif (path.contains(\":\")) {\n+\t\t\t\treturn path;\n+\t\t\t}\n+\t\t\treturn \"forward:\" + path;\n+\t\t}\n+\n+\t}\n \n \t@Bean\n \t@Lazy\n@@ -157,44 +186,35 @@ public OAuth2RequestValidator oauth2RequestValidator() throws Exception {\n \t@Bean\n \t@Lazy\n \t@Scope(proxyMode = ScopedProxyMode.INTERFACES)\n-\tpublic TokenStore tokenStore() throws Exception {\n-\t\treturn authorizationServerConfigurer().getTokenStore();\n+\tpublic UserApprovalHandler userApprovalHandler() throws Exception {\n+\t\treturn authorizationServerConfigurer().getUserApprovalHandler();\n \t}\n \n \t@Bean\n \t@Lazy\n \t@Scope(proxyMode = ScopedProxyMode.INTERFACES)\n-\tpublic UserApprovalHandler userApprovalHandler() throws Exception {\n-\t\treturn authorizationServerConfigurer().getUserApprovalHandler();\n+\tpublic TokenStore tokenStore() throws Exception {\n+\t\treturn authorizationServerConfigurer().getTokenStore();\n \t}\n \n-\tprotected AuthorizationServerTokenServices tokenServices() throws Exception {\n-\t\treturn authorizationServerConfigurer().getTokenServices();\n+\t@Bean\n+\tpublic WhitelabelApprovalEndpoint whitelabelApprovalEndpoint() {\n+\t\treturn new WhitelabelApprovalEndpoint();\n \t}\n \n \t@Bean\n-\tpublic WhitelabelApprovalEndpoint approvalEndpoint() {\n-\t\treturn new WhitelabelApprovalEndpoint();\n+\tpublic WhitelabelErrorEndpoint whitelabelErrorEndpoint() {\n+\t\treturn new WhitelabelErrorEndpoint();\n \t}\n \n \t@Bean\n \t@Lazy\n \t@Scope(proxyMode = ScopedProxyMode.TARGET_CLASS)\n \tpublic FrameworkEndpointHandlerMapping oauth2EndpointHandlerMapping() throws Exception {\n \t\tFrameworkEndpointHandlerMapping mapping = authorizationServerConfigurer().getFrameworkEndpointHandlerMapping();\n-\t\tauthorizationEndpoint.setUserApprovalPage(extractPath(mapping, \"/oauth/confirm_access\"));\n-\t\tauthorizationEndpoint.setErrorPage(extractPath(mapping, \"/oauth/error\"));\n \t\treturn mapping;\n \t}\n \n-\tprivate String extractPath(FrameworkEndpointHandlerMapping mapping, String page) {\n-\t\tString path = mapping.getPath(page);\n-\t\tif (path.contains(\":\")) {\n-\t\t\treturn path;\n-\t\t}\n-\t\treturn \"forward:\" + path;\n-\t}\n-\n \t@Bean\n \t@Lazy\n \t@Scope(proxyMode = ScopedProxyMode.INTERFACES)"
        },
        {
            "sha": "83467ac361da7690a191cf3eef04968f85a5df59",
            "filename": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/OAuth2AuthorizationServerConfigurer.java",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/spring-attic/spring-security-oauth/blob/787c9b47d801b0cf08d35bca4805986c43f56836/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fconfig%2Fannotation%2Fweb%2Fconfigurers%2FOAuth2AuthorizationServerConfigurer.java",
            "raw_url": "https://github.com/spring-attic/spring-security-oauth/raw/787c9b47d801b0cf08d35bca4805986c43f56836/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fconfig%2Fannotation%2Fweb%2Fconfigurers%2FOAuth2AuthorizationServerConfigurer.java",
            "contents_url": "https://api.github.com/repos/spring-attic/spring-security-oauth/contents/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fconfig%2Fannotation%2Fweb%2Fconfigurers%2FOAuth2AuthorizationServerConfigurer.java?ref=787c9b47d801b0cf08d35bca4805986c43f56836",
            "patch": "@@ -133,7 +133,7 @@ public OAuth2RequestValidator getOAuth2RequestValidator() {\n \tpublic UserApprovalHandler getUserApprovalHandler() {\n \t\treturn userApprovalHandler;\n \t}\n-\n+\t\n \tpublic OAuth2AuthorizationServerConfigurer allowFormAuthenticationForClients() {\n \t\tthis.allowFormAuthenticationForClients = true;\n \t\treturn this;"
        },
        {
            "sha": "4baedc3e2d60265decebd3b138a19ed138458b48",
            "filename": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/AuthorizationEndpoint.java",
            "status": "modified",
            "additions": 33,
            "deletions": 4,
            "changes": 37,
            "blob_url": "https://github.com/spring-attic/spring-security-oauth/blob/787c9b47d801b0cf08d35bca4805986c43f56836/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FAuthorizationEndpoint.java",
            "raw_url": "https://github.com/spring-attic/spring-security-oauth/raw/787c9b47d801b0cf08d35bca4805986c43f56836/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FAuthorizationEndpoint.java",
            "contents_url": "https://api.github.com/repos/spring-attic/spring-security-oauth/contents/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FAuthorizationEndpoint.java?ref=787c9b47d801b0cf08d35bca4805986c43f56836",
            "patch": "@@ -44,8 +44,11 @@\n import org.springframework.security.oauth2.provider.OAuth2Request;\n import org.springframework.security.oauth2.provider.OAuth2RequestValidator;\n import org.springframework.security.oauth2.provider.TokenRequest;\n+import org.springframework.security.oauth2.provider.approval.Approval;\n+import org.springframework.security.oauth2.provider.approval.ApprovalStore;\n import org.springframework.security.oauth2.provider.approval.DefaultUserApprovalHandler;\n import org.springframework.security.oauth2.provider.approval.UserApprovalHandler;\n+import org.springframework.security.oauth2.provider.approval.Approval.ApprovalStatus;\n import org.springframework.security.oauth2.provider.code.AuthorizationCodeServices;\n import org.springframework.security.oauth2.provider.code.InMemoryAuthorizationCodeServices;\n import org.springframework.security.oauth2.provider.implicit.ImplicitGrantService;\n@@ -105,6 +108,18 @@ public class AuthorizationEndpoint extends AbstractEndpoint {\n \n \tprivate String errorPage = \"forward:/oauth/error\";\n \n+\tprivate ApprovalStore approvalStore;\n+\n+\t/**\n+\t * Optional approval store (if one is available) will result in approval information being added to the model for\n+\t * the confirmation page, and therefore potentially the user being able to approve individual scopes.\n+\t * \n+\t * @param approvalStore the approvalStore to set\n+\t */\n+\tpublic void setApprovalStore(ApprovalStore approvalStore) {\n+\t\tthis.approvalStore = approvalStore;\n+\t}\n+\n \tpublic void setSessionAttributeStore(SessionAttributeStore sessionAttributeStore) {\n \t\tthis.sessionAttributeStore = sessionAttributeStore;\n \t}\n@@ -179,7 +194,7 @@ public ModelAndView authorize(Map<String, Object> model, @RequestParam\n \t\t\t// so any auth request parameters passed to approveOrDeny will be ignored and retrieved from the session.\n \t\t\tmodel.put(\"authorizationRequest\", authorizationRequest);\n \n-\t\t\treturn getUserApprovalPageResponse(model, authorizationRequest);\n+\t\t\treturn getUserApprovalPageResponse(model, authorizationRequest, principal, client);\n \n \t\t}\n \t\tcatch (RuntimeException e) {\n@@ -240,10 +255,23 @@ public View approveOrDeny(@RequestParam\n \n \t// We need explicit approval from the user.\n \tprivate ModelAndView getUserApprovalPageResponse(Map<String, Object> model,\n-\t\t\tAuthorizationRequest authorizationRequest) {\n+\t\t\tAuthorizationRequest authorizationRequest, Principal principal, ClientDetails client) {\n \t\tlogger.debug(\"Loading user approval page: \" + userApprovalPage);\n \t\t// In case of a redirect we might want the request parameters to be included\n \t\tmodel.putAll(authorizationRequest.getRequestParameters());\n+\t\tif (approvalStore != null) {\n+\t\t\tMap<String, String> scopes = new LinkedHashMap<String, String>();\n+\t\t\tfor (String scope : authorizationRequest.getScope()) {\n+\t\t\t\tscopes.put(OAuth2Utils.SCOPE_PREFIX + scope, \"false\");\n+\t\t\t}\n+\t\t\tfor (Approval approval : approvalStore.getApprovals(principal.getName(), client.getClientId())) {\n+\t\t\t\tif (authorizationRequest.getScope().contains(approval.getScope())) {\n+\t\t\t\t\tscopes.put(OAuth2Utils.SCOPE_PREFIX + approval.getScope(),\n+\t\t\t\t\t\t\tapproval.getStatus() == ApprovalStatus.APPROVED ? \"true\" : \"false\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tmodel.put(\"scopes\", scopes);\n+\t\t}\n \t\treturn new ModelAndView(userApprovalPage, model);\n \t}\n \n@@ -396,10 +424,11 @@ private String getUnsuccessfulRedirect(AuthorizationRequest authorizationRequest\n \t\t\t\tquery.put(additionalInfo.getKey(), additionalInfo.getValue());\n \t\t\t}\n \t\t}\n-\t\t\n+\n \t\tif (fragment) {\n \t\t\ttemplate.fragment(values.toString());\n-\t\t} else {\n+\t\t}\n+\t\telse {\n \t\t\ttemplate.query(values.toString());\n \t\t}\n "
        },
        {
            "sha": "5e17e68b9a0114fb47f4bbd692efbb2af8cbe4c0",
            "filename": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/SpelView.java",
            "status": "added",
            "additions": 73,
            "deletions": 0,
            "changes": 73,
            "blob_url": "https://github.com/spring-attic/spring-security-oauth/blob/787c9b47d801b0cf08d35bca4805986c43f56836/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FSpelView.java",
            "raw_url": "https://github.com/spring-attic/spring-security-oauth/raw/787c9b47d801b0cf08d35bca4805986c43f56836/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FSpelView.java",
            "contents_url": "https://api.github.com/repos/spring-attic/spring-security-oauth/contents/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FSpelView.java?ref=787c9b47d801b0cf08d35bca4805986c43f56836",
            "patch": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2013-2014 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.springframework.security.oauth2.provider.endpoint;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.context.expression.MapAccessor;\n+import org.springframework.expression.Expression;\n+import org.springframework.expression.spel.standard.SpelExpressionParser;\n+import org.springframework.expression.spel.support.StandardEvaluationContext;\n+import org.springframework.util.PropertyPlaceholderHelper;\n+import org.springframework.util.PropertyPlaceholderHelper.PlaceholderResolver;\n+import org.springframework.web.servlet.View;\n+\n+/**\n+ * Simple String template renderer.\n+ * \n+ */\n+class SpelView implements View {\n+\n+\tprivate final String template;\n+\n+\tprivate final SpelExpressionParser parser = new SpelExpressionParser();\n+\n+\tprivate final StandardEvaluationContext context = new StandardEvaluationContext();\n+\n+\tprivate PropertyPlaceholderHelper helper;\n+\n+\tprivate PlaceholderResolver resolver;\n+\n+\tpublic SpelView(String template) {\n+\t\tthis.template = template;\n+\t\tthis.context.addPropertyAccessor(new MapAccessor());\n+\t\tthis.helper = new PropertyPlaceholderHelper(\"${\", \"}\");\n+\t\tthis.resolver = new PlaceholderResolver() {\n+\t\t\tpublic String resolvePlaceholder(String name) {\n+\t\t\t\tExpression expression = parser.parseExpression(name);\n+\t\t\t\tObject value = expression.getValue(context);\n+\t\t\t\treturn value == null ? null : value.toString();\n+\t\t\t}\n+\t\t};\n+\t}\n+\n+\tpublic String getContentType() {\n+\t\treturn \"text/html\";\n+\t}\n+\n+\tpublic void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response)\n+\t\t\tthrows Exception {\n+\t\tMap<String, Object> map = new HashMap<String, Object>(model);\n+\t\tmap.put(\"path\", (Object) request.getContextPath());\n+\t\tcontext.setRootObject(map);\n+\t\tString result = helper.replacePlaceholders(template, resolver);\n+\t\tresponse.setContentType(getContentType());\n+\t\tresponse.getWriter().append(result);\n+\t}\n+\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "73a643f5b4495b6111f7df42f1a0d18e56415c87",
            "filename": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelApprovalEndpoint.java",
            "status": "modified",
            "additions": 39,
            "deletions": 65,
            "changes": 104,
            "blob_url": "https://github.com/spring-attic/spring-security-oauth/blob/787c9b47d801b0cf08d35bca4805986c43f56836/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FWhitelabelApprovalEndpoint.java",
            "raw_url": "https://github.com/spring-attic/spring-security-oauth/raw/787c9b47d801b0cf08d35bca4805986c43f56836/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FWhitelabelApprovalEndpoint.java",
            "contents_url": "https://api.github.com/repos/spring-attic/spring-security-oauth/contents/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FWhitelabelApprovalEndpoint.java?ref=787c9b47d801b0cf08d35bca4805986c43f56836",
            "patch": "@@ -1,24 +1,15 @@\n package org.springframework.security.oauth2.provider.endpoint;\n \n-import java.util.HashMap;\n import java.util.Map;\n \n import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n \n-import org.springframework.context.expression.MapAccessor;\n-import org.springframework.expression.Expression;\n-import org.springframework.expression.spel.standard.SpelExpressionParser;\n-import org.springframework.expression.spel.support.StandardEvaluationContext;\n-import org.springframework.util.PropertyPlaceholderHelper;\n-import org.springframework.util.PropertyPlaceholderHelper.PlaceholderResolver;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.SessionAttributes;\n import org.springframework.web.servlet.ModelAndView;\n-import org.springframework.web.servlet.View;\n \n /**\n- * Controller for displaying the approval and error pages for the authorization server.\n+ * Controller for displaying the approval page for the authorization server.\n  * \n  * @author Dave Syer\n  */\n@@ -28,73 +19,56 @@ public class WhitelabelApprovalEndpoint {\n \n \t@RequestMapping(\"/oauth/confirm_access\")\n \tpublic ModelAndView getAccessConfirmation(Map<String, Object> model, HttpServletRequest request) throws Exception {\n-\t\tif (request.getAttribute(\"_csrf\")!=null) {\n+\t\tString template = createTemplate(model, request);\n+\t\tif (request.getAttribute(\"_csrf\") != null) {\n \t\t\tmodel.put(\"_csrf\", request.getAttribute(\"_csrf\"));\n \t\t}\n-\t\treturn new ModelAndView(new SpelView(APPROVAL), model);\n+\t\treturn new ModelAndView(new SpelView(template), model);\n \t}\n \n-\t@RequestMapping(\"/oauth/error\")\n-\tpublic ModelAndView handleError(HttpServletRequest request) {\n-\t\tMap<String, Object> model = new HashMap<String, Object>();\n-\t\tmodel.put(\"error\", request.getAttribute(\"error\"));\n-\t\treturn new ModelAndView(new SpelView(ERROR), model);\n-\t}\n-\n-\t/**\n-\t * Simple String template renderer.\n-\t * \n-\t */\n-\tprivate static class SpelView implements View {\n-\n-\t\tprivate final String template;\n-\n-\t\tprivate final SpelExpressionParser parser = new SpelExpressionParser();\n-\n-\t\tprivate final StandardEvaluationContext context = new StandardEvaluationContext();\n-\n-\t\tprivate PropertyPlaceholderHelper helper;\n-\n-\t\tprivate PlaceholderResolver resolver;\n-\n-\t\tpublic SpelView(String template) {\n-\t\t\tthis.template = template;\n-\t\t\tthis.context.addPropertyAccessor(new MapAccessor());\n-\t\t\tthis.helper = new PropertyPlaceholderHelper(\"${\", \"}\");\n-\t\t\tthis.resolver = new PlaceholderResolver() {\n-\t\t\t\tpublic String resolvePlaceholder(String name) {\n-\t\t\t\t\tExpression expression = parser.parseExpression(name);\n-\t\t\t\t\tObject value = expression.getValue(context);\n-\t\t\t\t\treturn value == null ? null : value.toString();\n-\t\t\t\t}\n-\t\t\t};\n+\tprotected String createTemplate(Map<String, Object> model, HttpServletRequest request) {\n+\t\tString template = TEMPLATE;\n+\t\tif (model.containsKey(\"scopes\") || request.getAttribute(\"scopes\") != null) {\n+\t\t\ttemplate = template.replace(\"%scopes%\", createScopes(model, request)).replace(\"%denial%\", \"\");\n \t\t}\n-\n-\t\tpublic String getContentType() {\n-\t\t\treturn \"text/html\";\n+\t\telse {\n+\t\t\ttemplate = template.replace(\"%scopes%\", \"\").replace(\"%denial%\", DENIAL);\n \t\t}\n-\n-\t\tpublic void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response)\n-\t\t\t\tthrows Exception {\n-\t\t\tMap<String, Object> map = new HashMap<String, Object>(model);\n-\t\t\tmap.put(\"path\", (Object) request.getContextPath());\n-\t\t\tcontext.setRootObject(map);\n-\t\t\tString result = helper.replacePlaceholders(template, resolver);\n-\t\t\tresponse.setContentType(getContentType());\n-\t\t\tresponse.getWriter().append(result);\n+\t\tif (model.containsKey(\"_csrf\") || request.getAttribute(\"_csrf\") != null) {\n+\t\t\ttemplate = template.replace(\"%csrf%\", CSRF);\n+\t\t}\n+\t\telse {\n+\t\t\ttemplate = template.replace(\"%csrf%\", \"\");\n \t\t}\n+\t\treturn template;\n+\t}\n \n+\tprivate CharSequence createScopes(Map<String, Object> model, HttpServletRequest request) {\n+\t\tStringBuilder builder = new StringBuilder(\"<ul>\");\n+\t\t@SuppressWarnings(\"unchecked\")\n+\t\tMap<String, String> scopes = (Map<String, String>) (model.containsKey(\"scopes\") ? model.get(\"scopes\") : request\n+\t\t\t\t.getAttribute(\"scopes\"));\n+\t\tfor (String scope : scopes.keySet()) {\n+\t\t\tString approved = \"true\".equals(scopes.get(scope)) ? \" checked\" : \"\";\n+\t\t\tString denied = !\"true\".equals(scopes.get(scope)) ? \" checked\" : \"\";\n+\t\t\tString value = SCOPE.replace(\"%scope%\", scope).replace(\"%key%\", scope).replace(\"%approved%\", approved)\n+\t\t\t\t\t.replace(\"%denied%\", denied);\n+\t\t\tbuilder.append(value);\n+\t\t}\n+\t\tbuilder.append(\"</ul>\");\n+\t\treturn builder.toString();\n \t}\n \n-\tprivate static String CSRF = \"${#root['_csrf']!=null ? '<input type=\\\"hidden\\\" name=\\\"' + _csrf.parameterName + '\\\"\"\n-\t\t\t+ \" value=\\\"' + _csrf.token + '\\\" />' : ''}\";\n+\tprivate static String CSRF = \"<input type='hidden' name='${_csrf.parameterName}' value='${_csrf.token}' />\";\n+\n+\tprivate static String DENIAL = \"<form id='denialForm' name='denialForm' action='${path}/oauth/authorize' method='post'><input name='user_oauth_approval' value='false' type='hidden'/>%csrf%<label><input name='deny' value='Deny' type='submit'/></label></form>\";\n \n-\tprivate static String APPROVAL = \"<html><body><h1>OAuth Approval</h1>\"\n+\tprivate static String TEMPLATE = \"<html><body><h1>OAuth Approval</h1>\"\n \t\t\t+ \"<p>Do you authorize '${authorizationRequest.clientId}' to access your protected resources?</p>\"\n-\t\t\t+ \"<form id='confirmationForm' name='confirmationForm' action='${path}/oauth/authorize' method='post'><input name='user_oauth_approval' value='true' type='hidden'/><label><input name='authorize' value='Authorize' type='submit'></label>\"+CSRF+\"</form>\"\n-\t\t\t+ \"<form id='denialForm' name='denialForm' action='${path}/oauth/authorize' method='post'><input name='user_oauth_approval' value='false' type='hidden'/><label><input name='deny' value='Deny' type='submit'></label>\"+CSRF+\"</form>\"\n-\t\t\t+ \"</body></html>\";\n+\t\t\t+ \"<form id='confirmationForm' name='confirmationForm' action='${path}/oauth/authorize' method='post'><input name='user_oauth_approval' value='true' type='hidden'/>%csrf%%scopes%<label><input name='authorize' value='Authorize' type='submit'/></label></form>\"\n+\t\t\t+ \"%denial%</body></html>\";\n \n-\tprivate static String ERROR = \"<html><body><h1>OAuth Error</h1><p>${error.summary}</p></body></html>\";\n+\tprivate static String SCOPE = \"<li><div class='form-group'>%scope%: <input type='radio' name='%key%'\"\n+\t\t\t+ \" value='true'%approved%>Approve</input> <input type='radio' name='%key%' value='false'%denied%>Deny</input></div></li>\";\n \n }"
        },
        {
            "sha": "2035093d9fae7b68b8bc320afce8afaa3d3d326d",
            "filename": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelErrorEndpoint.java",
            "status": "added",
            "additions": 28,
            "deletions": 0,
            "changes": 28,
            "blob_url": "https://github.com/spring-attic/spring-security-oauth/blob/787c9b47d801b0cf08d35bca4805986c43f56836/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FWhitelabelErrorEndpoint.java",
            "raw_url": "https://github.com/spring-attic/spring-security-oauth/raw/787c9b47d801b0cf08d35bca4805986c43f56836/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FWhitelabelErrorEndpoint.java",
            "contents_url": "https://api.github.com/repos/spring-attic/spring-security-oauth/contents/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FWhitelabelErrorEndpoint.java?ref=787c9b47d801b0cf08d35bca4805986c43f56836",
            "patch": "@@ -0,0 +1,28 @@\n+package org.springframework.security.oauth2.provider.endpoint;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.servlet.ModelAndView;\n+\n+/**\n+ * Controller for displaying the error page for the authorization server.\n+ * \n+ * @author Dave Syer\n+ */\n+@FrameworkEndpoint\n+public class WhitelabelErrorEndpoint {\n+\n+\t@RequestMapping(\"/oauth/error\")\n+\tpublic ModelAndView handleError(HttpServletRequest request) {\n+\t\tMap<String, Object> model = new HashMap<String, Object>();\n+\t\tmodel.put(\"error\", request.getAttribute(\"error\"));\n+\t\treturn new ModelAndView(new SpelView(ERROR), model);\n+\t}\n+\n+\tprivate static String ERROR = \"<html><body><h1>OAuth Error</h1><p>${error.summary}</p></body></html>\";\n+\n+}"
        },
        {
            "sha": "bf3887d58ce9f4b91c411282d1dbfd62b271d9df",
            "filename": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/request/DefaultOAuth2RequestFactory.java",
            "status": "modified",
            "additions": 36,
            "deletions": 39,
            "changes": 75,
            "blob_url": "https://github.com/spring-attic/spring-security-oauth/blob/787c9b47d801b0cf08d35bca4805986c43f56836/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Frequest%2FDefaultOAuth2RequestFactory.java",
            "raw_url": "https://github.com/spring-attic/spring-security-oauth/raw/787c9b47d801b0cf08d35bca4805986c43f56836/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Frequest%2FDefaultOAuth2RequestFactory.java",
            "contents_url": "https://api.github.com/repos/spring-attic/spring-security-oauth/contents/spring-security-oauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Frequest%2FDefaultOAuth2RequestFactory.java?ref=787c9b47d801b0cf08d35bca4805986c43f56836",
            "patch": "@@ -69,50 +69,24 @@ public void setCheckUserScopes(boolean checkUserScopes) {\n \tpublic AuthorizationRequest createAuthorizationRequest(Map<String, String> authorizationParameters) {\n \n \t\tString clientId = authorizationParameters.get(OAuth2Utils.CLIENT_ID);\n-\t\tSet<String> scopes = OAuth2Utils.parseParameterList(authorizationParameters.get(OAuth2Utils.SCOPE));\n \t\tString state = authorizationParameters.get(OAuth2Utils.STATE);\n \t\tString redirectUri = authorizationParameters.get(OAuth2Utils.REDIRECT_URI);\n \t\tSet<String> responseTypes = OAuth2Utils.parseParameterList(authorizationParameters\n \t\t\t\t.get(OAuth2Utils.RESPONSE_TYPE));\n \n-\t\tClientDetails clientDetails = clientDetailsService.loadClientByClientId(clientId);\n-\n-\t\tif ((scopes == null || scopes.isEmpty())) {\n-\t\t\t// If no scopes are specified in the incoming data, use the default values registered with the client\n-\t\t\t// (the spec allows us to choose between this option and rejecting the request completely, so we'll take the\n-\t\t\t// least obnoxious choice as a default).\n-\t\t\tscopes = clientDetails.getScope();\n-\t\t}\n-\n-\t\tif (checkUserScopes) {\n-\t\t\tscopes = checkUserScopes(scopes, clientDetails);\n-\t\t}\n-\n+\t\tSet<String> scopes = extractScopes(authorizationParameters, clientId);\n+\t\t\n \t\tAuthorizationRequest request = new AuthorizationRequest(authorizationParameters,\n \t\t\t\tCollections.<String, String> emptyMap(), clientId, scopes, null, null, false, state, redirectUri,\n \t\t\t\tresponseTypes);\n \n+\t\tClientDetails clientDetails = clientDetailsService.loadClientByClientId(clientId);\t\t\n \t\trequest.setResourceIdsAndAuthoritiesFromClientDetails(clientDetails);\n \n \t\treturn request;\n \n \t}\n \n-\tprivate Set<String> checkUserScopes(Set<String> scopes, ClientDetails clientDetails) {\n-\t\tif (!securityContextAccessor.isUser()) {\n-\t\t\treturn scopes;\n-\t\t}\n-\t\tSet<String> result = new LinkedHashSet<String>();\n-\t\tSet<String> authorities = AuthorityUtils.authorityListToSet(securityContextAccessor.getAuthorities());\n-\t\tfor (String scope : scopes) {\n-\t\t\tif (authorities.contains(scope) || authorities.contains(scope.toUpperCase())\n-\t\t\t\t\t|| authorities.contains(\"ROLE_\" + scope.toUpperCase())) {\n-\t\t\t\tresult.add(scope);\n-\t\t\t}\n-\t\t}\n-\t\treturn result;\n-\t}\n-\n \tpublic OAuth2Request createOAuth2Request(AuthorizationRequest request) {\n \t\treturn request.createOAuth2Request();\n \t}\n@@ -130,18 +104,9 @@ public TokenRequest createTokenRequest(Map<String, String> requestParameters, Cl\n \t\t\t\tthrow new InvalidClientException(\"Given client ID does not match authenticated client\");\n \t\t\t}\n \t\t}\n-\t\tSet<String> scopes = OAuth2Utils.parseParameterList(requestParameters.get(OAuth2Utils.SCOPE));\n \t\tString grantType = requestParameters.get(OAuth2Utils.GRANT_TYPE);\n \n-\t\tClientDetails clientDetails = clientDetailsService.loadClientByClientId(clientId);\n-\n-\t\tif ((scopes == null || scopes.isEmpty())) {\n-\t\t\t// If no scopes are specified in the incoming data, use the default values registered with the client\n-\t\t\t// (the spec allows us to choose between this option and rejecting the request completely, so we'll take the\n-\t\t\t// least obnoxious choice as a default).\n-\t\t\tscopes = clientDetails.getScope();\n-\t\t}\n-\n+\t\tSet<String> scopes = extractScopes(requestParameters, clientId);\n \t\tTokenRequest tokenRequest = new TokenRequest(requestParameters, clientId, scopes, grantType);\n \n \t\treturn tokenRequest;\n@@ -157,4 +122,36 @@ public OAuth2Request createOAuth2Request(ClientDetails client, TokenRequest toke\n \t\treturn tokenRequest.createOAuth2Request(client);\n \t}\n \n+\tprivate Set<String> extractScopes(Map<String, String> requestParameters, String clientId) {\n+\t\tSet<String> scopes = OAuth2Utils.parseParameterList(requestParameters.get(OAuth2Utils.SCOPE));\n+\t\tClientDetails clientDetails = clientDetailsService.loadClientByClientId(clientId);\n+\n+\t\tif ((scopes == null || scopes.isEmpty())) {\n+\t\t\t// If no scopes are specified in the incoming data, use the default values registered with the client\n+\t\t\t// (the spec allows us to choose between this option and rejecting the request completely, so we'll take the\n+\t\t\t// least obnoxious choice as a default).\n+\t\t\tscopes = clientDetails.getScope();\n+\t\t}\n+\n+\t\tif (checkUserScopes) {\n+\t\t\tscopes = checkUserScopes(scopes, clientDetails);\n+\t\t}\n+\t\treturn scopes;\n+\t}\n+\n+\tprivate Set<String> checkUserScopes(Set<String> scopes, ClientDetails clientDetails) {\n+\t\tif (!securityContextAccessor.isUser()) {\n+\t\t\treturn scopes;\n+\t\t}\n+\t\tSet<String> result = new LinkedHashSet<String>();\n+\t\tSet<String> authorities = AuthorityUtils.authorityListToSet(securityContextAccessor.getAuthorities());\n+\t\tfor (String scope : scopes) {\n+\t\t\tif (authorities.contains(scope) || authorities.contains(scope.toUpperCase())\n+\t\t\t\t\t|| authorities.contains(\"ROLE_\" + scope.toUpperCase())) {\n+\t\t\t\tresult.add(scope);\n+\t\t\t}\n+\t\t}\n+\t\treturn result;\n+\t}\n+\n }"
        },
        {
            "sha": "184e114e4d665aa541700f46ee264d4c76327f5f",
            "filename": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/AuthorizationEndpointTests.java",
            "status": "modified",
            "additions": 10,
            "deletions": 0,
            "changes": 10,
            "blob_url": "https://github.com/spring-attic/spring-security-oauth/blob/787c9b47d801b0cf08d35bca4805986c43f56836/spring-security-oauth2%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FAuthorizationEndpointTests.java",
            "raw_url": "https://github.com/spring-attic/spring-security-oauth/raw/787c9b47d801b0cf08d35bca4805986c43f56836/spring-security-oauth2%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FAuthorizationEndpointTests.java",
            "contents_url": "https://api.github.com/repos/spring-attic/spring-security-oauth/contents/spring-security-oauth2%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FAuthorizationEndpointTests.java?ref=787c9b47d801b0cf08d35bca4805986c43f56836",
            "patch": "@@ -44,6 +44,7 @@\n import org.springframework.security.oauth2.provider.TokenGranter;\n import org.springframework.security.oauth2.provider.TokenRequest;\n import org.springframework.security.oauth2.provider.approval.DefaultUserApprovalHandler;\n+import org.springframework.security.oauth2.provider.approval.InMemoryApprovalStore;\n import org.springframework.security.oauth2.provider.approval.UserApprovalHandler;\n import org.springframework.security.oauth2.provider.client.BaseClientDetails;\n import org.springframework.security.oauth2.provider.code.AuthorizationCodeServices;\n@@ -126,6 +127,15 @@ public void testStartAuthorizationCodeFlow() throws Exception {\n \t\tassertEquals(\"forward:/oauth/confirm_access\", result.getViewName());\n \t}\n \n+\t@Test\n+\tpublic void testApprovalStoreAddsScopes() throws Exception {\n+\t\tendpoint.setApprovalStore(new InMemoryApprovalStore());\n+\t\tModelAndView result = endpoint.authorize(model, getAuthorizationRequest(\"foo\", null, null, \"read\", Collections.singleton(\"code\"))\n+\t\t\t\t.getRequestParameters(), sessionStatus, principal);\n+\t\tassertEquals(\"forward:/oauth/confirm_access\", result.getViewName());\n+\t\tassertTrue(result.getModel().containsKey(\"scopes\"));\n+\t}\n+\n \t@Test(expected = OAuth2Exception.class)\n \tpublic void testStartAuthorizationCodeFlowForClientCredentialsFails() throws Exception {\n \t\tclient.setAuthorizedGrantTypes(Collections.singleton(\"client_credentials\"));"
        },
        {
            "sha": "bd05b33834bec363dff3455a6dca6435e42a7140",
            "filename": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelApprovalEndpointTests.java",
            "status": "modified",
            "additions": 30,
            "deletions": 6,
            "changes": 36,
            "blob_url": "https://github.com/spring-attic/spring-security-oauth/blob/787c9b47d801b0cf08d35bca4805986c43f56836/spring-security-oauth2%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FWhitelabelApprovalEndpointTests.java",
            "raw_url": "https://github.com/spring-attic/spring-security-oauth/raw/787c9b47d801b0cf08d35bca4805986c43f56836/spring-security-oauth2%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FWhitelabelApprovalEndpointTests.java",
            "contents_url": "https://api.github.com/repos/spring-attic/spring-security-oauth/contents/spring-security-oauth2%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FWhitelabelApprovalEndpointTests.java?ref=787c9b47d801b0cf08d35bca4805986c43f56836",
            "patch": "@@ -23,9 +23,9 @@\n import org.junit.Test;\n import org.springframework.mock.web.MockHttpServletRequest;\n import org.springframework.mock.web.MockHttpServletResponse;\n-import org.springframework.security.oauth2.common.exceptions.InvalidClientException;\n import org.springframework.security.oauth2.common.util.OAuth2Utils;\n import org.springframework.security.oauth2.provider.AuthorizationRequest;\n+import org.springframework.security.web.csrf.DefaultCsrfToken;\n import org.springframework.web.servlet.ModelAndView;\n \n /**\n@@ -61,17 +61,41 @@ public void testApprovalPage() throws Exception {\n \t\tassertTrue(\"Wrong content: \" + content, content.contains(\"<form\"));\n \t\tassertTrue(\"Wrong content: \" + content, content.contains(\"/foo/oauth/authorize\"));\n \t\tassertTrue(\"Wrong content: \" + content, !content.contains(\"${\"));\n+\t\tassertTrue(\"Wrong content: \" + content, !content.contains(\"_csrf\"));\n+\t\tassertTrue(\"Wrong content: \" + content, !content.contains(\"%\"));\n \t}\n \n \t@Test\n-\tpublic void testErrorPage() throws Exception {\n+\tpublic void testApprovalPageWithScopes() throws Exception {\n \t\trequest.setContextPath(\"/foo\");\n-\t\trequest.setAttribute(\"error\", new InvalidClientException(\"FOO\"));\n-\t\tModelAndView result = endpoint.handleError(request);\n+\t\tparameters.put(\"client_id\", \"client\");\n+\t\tHashMap<String, Object> model = new HashMap<String, Object>();\n+\t\tmodel.put(\"authorizationRequest\", createFromParameters(parameters));\n+\t\tmodel.put(\"scopes\", Collections.singletonMap(\"scope.read\", \"true\"));\n+\t\tModelAndView result = endpoint.getAccessConfirmation(model, request);\n+\t\tresult.getView().render(result.getModel(), request , response);\n+\t\tString content = response.getContentAsString();\n+\t\tassertTrue(\"Wrong content: \" + content, content.contains(\"scope.read\"));\n+\t\tassertTrue(\"Wrong content: \" + content, content.contains(\"checked\"));\n+\t\tassertTrue(\"Wrong content: \" + content, content.contains(\"/foo/oauth/authorize\"));\n+\t\tassertTrue(\"Wrong content: \" + content, !content.contains(\"${\"));\n+\t\tassertTrue(\"Wrong content: \" + content, !content.contains(\"_csrf\"));\n+\t\tassertTrue(\"Wrong content: \" + content, !content.contains(\"%\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testApprovalPageWithCsrf() throws Exception {\n+\t\trequest.setContextPath(\"/foo\");\n+\t\trequest.setAttribute(\"_csrf\", new DefaultCsrfToken(\"X-CSRF-TOKEN\", \"_csrf\", \"FOO\"));\n+\t\tparameters.put(\"client_id\", \"client\");\n+\t\tHashMap<String, Object> model = new HashMap<String, Object>();\n+\t\tmodel.put(\"authorizationRequest\", createFromParameters(parameters));\n+\t\tModelAndView result = endpoint.getAccessConfirmation(model, request);\n \t\tresult.getView().render(result.getModel(), request , response);\n \t\tString content = response.getContentAsString();\n-\t\tassertTrue(\"Wrong content: \" + content, content.contains(\"OAuth Error\"));\n-\t\tassertTrue(\"Wrong content: \" + content, content.contains(\"invalid_client\"));\n+\t\tassertTrue(\"Wrong content: \" + content, content.contains(\"_csrf\"));\n+\t\tassertTrue(\"Wrong content: \" + content, content.contains(\"/foo/oauth/authorize\"));\n+\t\tassertTrue(\"Wrong content: \" + content, !content.contains(\"${\"));\n \t}\n \n }"
        },
        {
            "sha": "e03f816879ca0b1398244b4c3cd02f72b9d290f9",
            "filename": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelErrorEndpointTests.java",
            "status": "added",
            "additions": 46,
            "deletions": 0,
            "changes": 46,
            "blob_url": "https://github.com/spring-attic/spring-security-oauth/blob/787c9b47d801b0cf08d35bca4805986c43f56836/spring-security-oauth2%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FWhitelabelErrorEndpointTests.java",
            "raw_url": "https://github.com/spring-attic/spring-security-oauth/raw/787c9b47d801b0cf08d35bca4805986c43f56836/spring-security-oauth2%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FWhitelabelErrorEndpointTests.java",
            "contents_url": "https://api.github.com/repos/spring-attic/spring-security-oauth/contents/spring-security-oauth2%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Fendpoint%2FWhitelabelErrorEndpointTests.java?ref=787c9b47d801b0cf08d35bca4805986c43f56836",
            "patch": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2006-2011 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+\n+package org.springframework.security.oauth2.provider.endpoint;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Test;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import org.springframework.security.oauth2.common.exceptions.InvalidClientException;\n+import org.springframework.web.servlet.ModelAndView;\n+\n+/**\n+ * @author Dave Syer\n+ *\n+ */\n+public class WhitelabelErrorEndpointTests {\n+\t\n+\tprivate WhitelabelErrorEndpoint endpoint = new WhitelabelErrorEndpoint();\n+\tprivate MockHttpServletRequest request = new MockHttpServletRequest();\n+\tprivate MockHttpServletResponse response = new MockHttpServletResponse();\n+\n+\t@Test\n+\tpublic void testErrorPage() throws Exception {\n+\t\trequest.setContextPath(\"/foo\");\n+\t\trequest.setAttribute(\"error\", new InvalidClientException(\"FOO\"));\n+\t\tModelAndView result = endpoint.handleError(request);\n+\t\tresult.getView().render(result.getModel(), request , response);\n+\t\tString content = response.getContentAsString();\n+\t\tassertTrue(\"Wrong content: \" + content, content.contains(\"OAuth Error\"));\n+\t\tassertTrue(\"Wrong content: \" + content, content.contains(\"invalid_client\"));\n+\t}\n+\n+}"
        },
        {
            "sha": "623a997443acf909053325f3f34dc0106c93465b",
            "filename": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/request/DefaultAuthorizationRequestFactoryTests.java",
            "status": "renamed",
            "additions": 8,
            "deletions": 1,
            "changes": 9,
            "blob_url": "https://github.com/spring-attic/spring-security-oauth/blob/787c9b47d801b0cf08d35bca4805986c43f56836/spring-security-oauth2%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Frequest%2FDefaultAuthorizationRequestFactoryTests.java",
            "raw_url": "https://github.com/spring-attic/spring-security-oauth/raw/787c9b47d801b0cf08d35bca4805986c43f56836/spring-security-oauth2%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Frequest%2FDefaultAuthorizationRequestFactoryTests.java",
            "contents_url": "https://api.github.com/repos/spring-attic/spring-security-oauth/contents/spring-security-oauth2%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fsecurity%2Foauth2%2Fprovider%2Frequest%2FDefaultAuthorizationRequestFactoryTests.java?ref=787c9b47d801b0cf08d35bca4805986c43f56836",
            "patch": "@@ -27,14 +27,15 @@\n import org.springframework.security.oauth2.provider.AuthorizationRequest;\n import org.springframework.security.oauth2.provider.ClientDetails;\n import org.springframework.security.oauth2.provider.ClientDetailsService;\n+import org.springframework.security.oauth2.provider.TokenRequest;\n import org.springframework.security.oauth2.provider.client.BaseClientDetails;\n import org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory;\n \n /**\n  * @author Dave Syer\n  * \n  */\n-public class DefaultAuthorizationRequestManagerTests {\n+public class DefaultAuthorizationRequestFactoryTests {\n \n \tprivate BaseClientDetails client = new BaseClientDetails();\n \n@@ -61,6 +62,12 @@ public void testCreateAuthorizationRequest() {\n \t\tassertEquals(\"foo\", request.getClientId());\n \t}\n \n+\t@Test\n+\tpublic void testCreateTokenRequest() {\n+\t\tTokenRequest request = factory.createTokenRequest(Collections.singletonMap(\"client_id\", \"foo\"), client);\n+\t\tassertEquals(\"foo\", request.getClientId());\n+\t}\n+\n \t@Test\n \tpublic void testCreateAuthorizationRequestWithDefaultScopes() {\n \t\tAuthorizationRequest request = factory.createAuthorizationRequest(Collections.singletonMap(\"client_id\", \"foo\"));",
            "previous_filename": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/request/DefaultAuthorizationRequestManagerTests.java"
        }
    ]
}