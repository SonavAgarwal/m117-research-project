{
    "sha": "62b42bf27589fd8128f6d1a202455c5731c890c2",
    "node_id": "MDY6Q29tbWl0NTE1MjI4NTo2MmI0MmJmMjc1ODlmZDgxMjhmNmQxYTIwMjQ1NWM1NzMxYzg5MGMy",
    "commit": {
        "author": {
            "name": "jwilson",
            "email": "jwilson@squareup.com",
            "date": "2016-02-02T01:02:07Z"
        },
        "committer": {
            "name": "jwilson",
            "email": "jwilson@squareup.com",
            "date": "2016-02-06T18:51:18Z"
        },
        "message": "Start using CertificateAuthorityCouncil in CertificatePinner.\n\nThe wiring is definitely a bit more awkward than I would like. The\nCertificateAuthorityCountil is a non-public class, and this change\nsneaks an instance into the CertificatePinner that couples it to\nthe OkHttp client's SSLSocketFactory.\n\nA nicer solution is to expose CertificateAuthorityCouncil as a public\nAPI type, and add it to Address.java. Unfortunately that's currently\npretty awkward, especially because I'm not ready to commit to the\nname CertificateAuthorityCouncil or its API.\n\nCloses: https://github.com/square/okhttp/issues/1699\n\nConflicts:\n\tokhttp/src/main/java/com/squareup/okhttp/CertificatePinner.java\n\tokhttp/src/main/java/okhttp3/OkHttpClient.java",
        "tree": {
            "sha": "41da379c7623c5f8abddef985aa9c529aac370b7",
            "url": "https://api.github.com/repos/square/okhttp/git/trees/41da379c7623c5f8abddef985aa9c529aac370b7"
        },
        "url": "https://api.github.com/repos/square/okhttp/git/commits/62b42bf27589fd8128f6d1a202455c5731c890c2",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/square/okhttp/commits/62b42bf27589fd8128f6d1a202455c5731c890c2",
    "html_url": "https://github.com/square/okhttp/commit/62b42bf27589fd8128f6d1a202455c5731c890c2",
    "comments_url": "https://api.github.com/repos/square/okhttp/commits/62b42bf27589fd8128f6d1a202455c5731c890c2/comments",
    "author": {
        "login": "squarejesse",
        "id": 183887076,
        "node_id": "U_kgDOCvXk5A",
        "avatar_url": "https://avatars.githubusercontent.com/u/183887076?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/squarejesse",
        "html_url": "https://github.com/squarejesse",
        "followers_url": "https://api.github.com/users/squarejesse/followers",
        "following_url": "https://api.github.com/users/squarejesse/following{/other_user}",
        "gists_url": "https://api.github.com/users/squarejesse/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/squarejesse/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/squarejesse/subscriptions",
        "organizations_url": "https://api.github.com/users/squarejesse/orgs",
        "repos_url": "https://api.github.com/users/squarejesse/repos",
        "events_url": "https://api.github.com/users/squarejesse/events{/privacy}",
        "received_events_url": "https://api.github.com/users/squarejesse/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "squarejesse",
        "id": 183887076,
        "node_id": "U_kgDOCvXk5A",
        "avatar_url": "https://avatars.githubusercontent.com/u/183887076?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/squarejesse",
        "html_url": "https://github.com/squarejesse",
        "followers_url": "https://api.github.com/users/squarejesse/followers",
        "following_url": "https://api.github.com/users/squarejesse/following{/other_user}",
        "gists_url": "https://api.github.com/users/squarejesse/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/squarejesse/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/squarejesse/subscriptions",
        "organizations_url": "https://api.github.com/users/squarejesse/orgs",
        "repos_url": "https://api.github.com/users/squarejesse/repos",
        "events_url": "https://api.github.com/users/squarejesse/events{/privacy}",
        "received_events_url": "https://api.github.com/users/squarejesse/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "ddbabf77803112fe804d1f44e5071244b00b9cfb",
            "url": "https://api.github.com/repos/square/okhttp/commits/ddbabf77803112fe804d1f44e5071244b00b9cfb",
            "html_url": "https://github.com/square/okhttp/commit/ddbabf77803112fe804d1f44e5071244b00b9cfb"
        }
    ],
    "stats": {
        "total": 51,
        "additions": 27,
        "deletions": 24
    },
    "files": [
        {
            "sha": "aabc2d2debd107c175d74f0a9b7601d3dbf549db",
            "filename": "okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java",
            "status": "modified",
            "additions": 0,
            "deletions": 22,
            "changes": 22,
            "blob_url": "https://github.com/square/okhttp/blob/62b42bf27589fd8128f6d1a202455c5731c890c2/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2FOkHttpClient.java",
            "raw_url": "https://github.com/square/okhttp/raw/62b42bf27589fd8128f6d1a202455c5731c890c2/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2FOkHttpClient.java",
            "contents_url": "https://api.github.com/repos/square/okhttp/contents/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2FOkHttpClient.java?ref=62b42bf27589fd8128f6d1a202455c5731c890c2",
            "patch": "@@ -17,7 +17,6 @@\n \n import com.squareup.okhttp.internal.Internal;\n import com.squareup.okhttp.internal.InternalCache;\n-import com.squareup.okhttp.internal.Platform;\n import com.squareup.okhttp.internal.RouteDatabase;\n import com.squareup.okhttp.internal.Util;\n import com.squareup.okhttp.internal.http.AuthenticatorAdapter;\n@@ -39,7 +38,6 @@\n import javax.net.ssl.SSLContext;\n import javax.net.ssl.SSLSocket;\n import javax.net.ssl.SSLSocketFactory;\n-import javax.net.ssl.X509TrustManager;\n \n /**\n  * Configures and creates HTTP connections. Most applications can use a single\n@@ -118,7 +116,6 @@ public void apply(ConnectionSpec tlsConfiguration, SSLSocket sslSocket, boolean\n \n   /** Lazily-initialized. */\n   private static SSLSocketFactory defaultSslSocketFactory;\n-  private static X509TrustManager defaultTrustManager;\n \n   private final RouteDatabase routeDatabase;\n   private Dispatcher dispatcher;\n@@ -136,7 +133,6 @@ public void apply(ConnectionSpec tlsConfiguration, SSLSocket sslSocket, boolean\n \n   private SocketFactory socketFactory;\n   private SSLSocketFactory sslSocketFactory;\n-  private X509TrustManager trustManager;\n   private HostnameVerifier hostnameVerifier;\n   private CertificatePinner certificatePinner;\n   private Authenticator authenticator;\n@@ -168,7 +164,6 @@ private OkHttpClient(OkHttpClient okHttpClient) {\n     this.internalCache = cache != null ? cache.internalCache : okHttpClient.internalCache;\n     this.socketFactory = okHttpClient.socketFactory;\n     this.sslSocketFactory = okHttpClient.sslSocketFactory;\n-    this.trustManager = okHttpClient.trustManager;\n     this.hostnameVerifier = okHttpClient.hostnameVerifier;\n     this.certificatePinner = okHttpClient.certificatePinner;\n     this.authenticator = okHttpClient.authenticator;\n@@ -348,11 +343,6 @@ public SocketFactory getSocketFactory() {\n    */\n   public OkHttpClient setSslSocketFactory(SSLSocketFactory sslSocketFactory) {\n     this.sslSocketFactory = sslSocketFactory;\n-    this.trustManager = Platform.get().trustManager(sslSocketFactory);\n-    if (this.trustManager == null) {\n-      throw new IllegalStateException(\"Unable to extract the trust manager on \" + Platform.get()\n-          + \", sslSocketFactory is \" + sslSocketFactory.getClass());\n-    }\n     return this;\n   }\n \n@@ -599,7 +589,6 @@ OkHttpClient copyWithDefaults() {\n     }\n     if (result.sslSocketFactory == null) {\n       result.sslSocketFactory = getDefaultSSLSocketFactory();\n-      result.trustManager = getDefaultTrustManager();\n     }\n     if (result.hostnameVerifier == null) {\n       result.hostnameVerifier = OkHostnameVerifier.INSTANCE;\n@@ -649,17 +638,6 @@ private synchronized SSLSocketFactory getDefaultSSLSocketFactory() {\n     return defaultSslSocketFactory;\n   }\n \n-  private synchronized X509TrustManager getDefaultTrustManager() {\n-    if (defaultTrustManager == null) {\n-      defaultTrustManager = Platform.get().trustManager(defaultSslSocketFactory);\n-      if (defaultTrustManager == null) {\n-        throw new IllegalStateException(\"Unable to extract the trust manager on \" + Platform.get()\n-            + \", sslSocketFactory is \" + defaultSslSocketFactory.getClass());\n-      }\n-    }\n-    return defaultTrustManager;\n-  }\n-\n   /** Returns a shallow copy of this OkHttpClient. */\n   @Override public OkHttpClient clone() {\n     return new OkHttpClient(this);"
        },
        {
            "sha": "c9c60595568d138248cf0be41e13fa1f1ed3fd8d",
            "filename": "okhttp/src/main/java/com/squareup/okhttp/internal/io/RealConnection.java",
            "status": "modified",
            "additions": 27,
            "deletions": 2,
            "changes": 29,
            "blob_url": "https://github.com/square/okhttp/blob/62b42bf27589fd8128f6d1a202455c5731c890c2/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2Finternal%2Fio%2FRealConnection.java",
            "raw_url": "https://github.com/square/okhttp/raw/62b42bf27589fd8128f6d1a202455c5731c890c2/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2Finternal%2Fio%2FRealConnection.java",
            "contents_url": "https://api.github.com/repos/square/okhttp/contents/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2Finternal%2Fio%2FRealConnection.java?ref=62b42bf27589fd8128f6d1a202455c5731c890c2",
            "patch": "@@ -35,6 +35,7 @@\n import com.squareup.okhttp.internal.http.OkHeaders;\n import com.squareup.okhttp.internal.http.RouteException;\n import com.squareup.okhttp.internal.http.StreamAllocation;\n+import com.squareup.okhttp.internal.tls.CertificateAuthorityCouncil;\n import com.squareup.okhttp.internal.tls.OkHostnameVerifier;\n import java.io.IOException;\n import java.lang.ref.Reference;\n@@ -43,13 +44,15 @@\n import java.net.Socket;\n import java.net.SocketTimeoutException;\n import java.net.UnknownServiceException;\n+import java.security.cert.Certificate;\n import java.security.cert.X509Certificate;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n import javax.net.ssl.SSLPeerUnverifiedException;\n import javax.net.ssl.SSLSocket;\n import javax.net.ssl.SSLSocketFactory;\n+import javax.net.ssl.X509TrustManager;\n import okio.BufferedSink;\n import okio.BufferedSource;\n import okio.Okio;\n@@ -198,8 +201,11 @@ private void connectTls(int readTimeout, int writeTimeout,\n       }\n \n       // Check that the certificate pinner is satisfied by the certificates presented.\n-      address.getCertificatePinner().check(address.getUriHost(),\n-          unverifiedHandshake.peerCertificates());\n+      if (address.getCertificatePinner() != CertificatePinner.DEFAULT) {\n+        List<Certificate> certificates = certificateAuthorityCouncil(address.getSslSocketFactory())\n+            .normalizeCertificateChain(unverifiedHandshake.peerCertificates());\n+        address.getCertificatePinner().check(address.getUriHost(), certificates);\n+      }\n \n       // Success! Save the handshake and the ALPN protocol.\n       String maybeProtocol = connectionSpec.supportsTlsExtensions()\n@@ -226,6 +232,25 @@ private void connectTls(int readTimeout, int writeTimeout,\n     }\n   }\n \n+  private static SSLSocketFactory lastSslSocketFactory;\n+  private static CertificateAuthorityCouncil lastCertificateAuthorityCouncil;\n+\n+  /**\n+   * Returns a certificate authority council for {@code sslSocketFactory}. This uses a static,\n+   * single-element cache to avoid redoing reflection and SSL indexing in the common case where most\n+   * SSL connections use the same SSL socket factory.\n+   */\n+  private static synchronized CertificateAuthorityCouncil certificateAuthorityCouncil(\n+      SSLSocketFactory sslSocketFactory) {\n+    if (sslSocketFactory != lastSslSocketFactory) {\n+      X509TrustManager trustManager = Platform.get().trustManager(sslSocketFactory);\n+      lastCertificateAuthorityCouncil = new CertificateAuthorityCouncil(\n+          trustManager.getAcceptedIssuers());\n+      lastSslSocketFactory = sslSocketFactory;\n+    }\n+    return lastCertificateAuthorityCouncil;\n+  }\n+\n   /**\n    * To make an HTTPS connection over an HTTP proxy, send an unencrypted\n    * CONNECT request to create the proxy connection. This may need to be"
        }
    ]
}