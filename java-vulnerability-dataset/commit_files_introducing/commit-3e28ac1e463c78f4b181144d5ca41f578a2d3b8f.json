{
    "sha": "3e28ac1e463c78f4b181144d5ca41f578a2d3b8f",
    "node_id": "MDY6Q29tbWl0MTExMjU1ODk6M2UyOGFjMWU0NjNjNzhmNGIxODExNDRkNWNhNDFmNTc4YTJkM2I4Zg==",
    "commit": {
        "author": {
            "name": "Bill Burke",
            "email": "bburke@redhat.com",
            "date": "2016-10-24T19:36:37Z"
        },
        "committer": {
            "name": "Bill Burke",
            "email": "bburke@redhat.com",
            "date": "2016-10-24T19:36:37Z"
        },
        "message": "user spi cache policy",
        "tree": {
            "sha": "f1c32eb965aba16dcc6c22508b21c74e34c97cb3",
            "url": "https://api.github.com/repos/keycloak/keycloak/git/trees/f1c32eb965aba16dcc6c22508b21c74e34c97cb3"
        },
        "url": "https://api.github.com/repos/keycloak/keycloak/git/commits/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/keycloak/keycloak/commits/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f",
    "html_url": "https://github.com/keycloak/keycloak/commit/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f",
    "comments_url": "https://api.github.com/repos/keycloak/keycloak/commits/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f/comments",
    "author": {
        "login": "patriot1burke",
        "id": 704239,
        "node_id": "MDQ6VXNlcjcwNDIzOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/704239?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/patriot1burke",
        "html_url": "https://github.com/patriot1burke",
        "followers_url": "https://api.github.com/users/patriot1burke/followers",
        "following_url": "https://api.github.com/users/patriot1burke/following{/other_user}",
        "gists_url": "https://api.github.com/users/patriot1burke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/patriot1burke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/patriot1burke/subscriptions",
        "organizations_url": "https://api.github.com/users/patriot1burke/orgs",
        "repos_url": "https://api.github.com/users/patriot1burke/repos",
        "events_url": "https://api.github.com/users/patriot1burke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/patriot1burke/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "patriot1burke",
        "id": 704239,
        "node_id": "MDQ6VXNlcjcwNDIzOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/704239?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/patriot1burke",
        "html_url": "https://github.com/patriot1burke",
        "followers_url": "https://api.github.com/users/patriot1burke/followers",
        "following_url": "https://api.github.com/users/patriot1burke/following{/other_user}",
        "gists_url": "https://api.github.com/users/patriot1burke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/patriot1burke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/patriot1burke/subscriptions",
        "organizations_url": "https://api.github.com/users/patriot1burke/orgs",
        "repos_url": "https://api.github.com/users/patriot1burke/repos",
        "events_url": "https://api.github.com/users/patriot1burke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/patriot1burke/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "fd86f3bda8b2ca2224dc7fac1a87f6bd59dc425a",
            "url": "https://api.github.com/repos/keycloak/keycloak/commits/fd86f3bda8b2ca2224dc7fac1a87f6bd59dc425a",
            "html_url": "https://github.com/keycloak/keycloak/commit/fd86f3bda8b2ca2224dc7fac1a87f6bd59dc425a"
        }
    ],
    "stats": {
        "total": 671,
        "additions": 633,
        "deletions": 38
    },
    "files": [
        {
            "sha": "ad1ba26fabcde3c2c0f3950c0383c88323aa0b6d",
            "filename": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
            "status": "modified",
            "additions": 7,
            "deletions": 1,
            "changes": 8,
            "blob_url": "https://github.com/keycloak/keycloak/blob/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f/model%2Finfinispan%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fcache%2Finfinispan%2FCacheManager.java",
            "raw_url": "https://github.com/keycloak/keycloak/raw/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f/model%2Finfinispan%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fcache%2Finfinispan%2FCacheManager.java",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/model%2Finfinispan%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fcache%2Finfinispan%2FCacheManager.java?ref=3e28ac1e463c78f4b181144d5ca41f578a2d3b8f",
            "patch": "@@ -13,6 +13,7 @@\n import java.util.Iterator;\n import java.util.Map;\n import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n import java.util.function.Predicate;\n \n /**\n@@ -126,6 +127,10 @@ protected void bumpVersion(String id) {\n     }\n \n     public void addRevisioned(Revisioned object, long startupRevision) {\n+        addRevisioned(object, startupRevision, -1);\n+    }\n+\n+    public void addRevisioned(Revisioned object, long startupRevision, long lifespan) {\n         //startRevisionBatch();\n         String id = object.getId();\n         try {\n@@ -164,7 +169,8 @@ public void addRevisioned(Revisioned object, long startupRevision) {\n             // revisions cache has a lower value than the object.revision, so update revision and add it to cache\n             if (id.endsWith(\"realm.clients\")) RealmCacheManager.logger.tracev(\"adding Object.revision {0} rev {1}\", object.getRevision(), rev);\n             revisions.put(id, object.getRevision());\n-            cache.putForExternalRead(id, object);\n+            if (lifespan < 0) cache.putForExternalRead(id, object);\n+            else cache.putForExternalRead(id, object, lifespan, TimeUnit.MILLISECONDS);\n         } finally {\n             endRevisionBatch();\n         }"
        },
        {
            "sha": "72a1e771183a1b609db490ad0e2d154c5a290740",
            "filename": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
            "status": "modified",
            "additions": 144,
            "deletions": 25,
            "changes": 169,
            "blob_url": "https://github.com/keycloak/keycloak/blob/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f/model%2Finfinispan%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fcache%2Finfinispan%2FUserCacheSession.java",
            "raw_url": "https://github.com/keycloak/keycloak/raw/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f/model%2Finfinispan%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fcache%2Finfinispan%2FUserCacheSession.java",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/model%2Finfinispan%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fcache%2Finfinispan%2FUserCacheSession.java?ref=3e28ac1e463c78f4b181144d5ca41f578a2d3b8f",
            "patch": "@@ -20,9 +20,9 @@\n import org.jboss.logging.Logger;\n import org.keycloak.cluster.ClusterProvider;\n import org.keycloak.common.constants.ServiceAccountConstants;\n+import org.keycloak.common.util.Time;\n import org.keycloak.component.ComponentModel;\n import org.keycloak.models.ClientModel;\n-import org.keycloak.models.CredentialValidationOutput;\n import org.keycloak.models.FederatedIdentityModel;\n import org.keycloak.models.GroupModel;\n import org.keycloak.models.KeycloakSession;\n@@ -31,7 +31,6 @@\n import org.keycloak.models.RealmModel;\n import org.keycloak.models.RoleModel;\n import org.keycloak.models.UserConsentModel;\n-import org.keycloak.models.UserCredentialModel;\n import org.keycloak.models.UserFederationProviderModel;\n import org.keycloak.models.UserModel;\n import org.keycloak.models.UserProvider;\n@@ -43,8 +42,13 @@\n import org.keycloak.models.cache.infinispan.entities.CachedUserConsent;\n import org.keycloak.models.cache.infinispan.entities.CachedUserConsents;\n import org.keycloak.models.cache.infinispan.entities.UserListQuery;\n+import org.keycloak.storage.StorageId;\n import org.keycloak.storage.UserStorageProvider;\n+import org.keycloak.storage.UserStorageProviderModel;\n \n+import java.text.DateFormat;\n+import java.util.Calendar;\n+import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.LinkedList;\n@@ -177,22 +181,19 @@ public UserModel getUserById(String id, RealmModel realm) {\n         }\n \n         CachedUser cached = cache.get(id, CachedUser.class);\n-        UserModel delegate = null;\n-        boolean wasCached = cached != null;\n+        UserModel adapter = null;\n         if (cached == null) {\n             logger.trace(\"not cached\");\n             Long loaded = cache.getCurrentRevision(id);\n-            delegate = getDelegate().getUserById(id, realm);\n+            UserModel delegate = getDelegate().getUserById(id, realm);\n             if (delegate == null) {\n                 logger.trace(\"delegate returning null\");\n                 return null;\n             }\n-            cached = new CachedUser(loaded, realm, delegate);\n-            cache.addRevisioned(cached, startupRevision);\n+            adapter = cacheUser(realm, delegate, loaded);\n+        } else {\n+            adapter = validateCache(realm, cached);\n         }\n-        logger.trace(\"returning new cache adapter\");\n-        UserAdapter adapter = new UserAdapter(cached, this, session, realm);\n-        if (!wasCached) onCache(realm, adapter, delegate);\n         managedUsers.put(id, adapter);\n         return adapter;\n     }\n@@ -238,15 +239,17 @@ public UserModel getUserByUsername(String username, RealmModel realm) {\n                 return null;\n             }\n             userId = model.getId();\n-            query = new UserListQuery(loaded, cacheKey, realm, model.getId());\n-            cache.addRevisioned(query, startupRevision);\n             if (invalidations.contains(userId)) return model;\n             if (managedUsers.containsKey(userId)) {\n                 logger.tracev(\"return managed user\");\n                 return managedUsers.get(userId);\n             }\n \n-            UserAdapter adapter = getUserAdapter(realm, userId, loaded, model);\n+            UserModel adapter = getUserAdapter(realm, userId, loaded, model);\n+            if (adapter instanceof UserAdapter) { // this was cached, so we can cache query too\n+                query = new UserListQuery(loaded, cacheKey, realm, model.getId());\n+                cache.addRevisioned(query, startupRevision);\n+            }\n             managedUsers.put(userId, adapter);\n             return adapter;\n         } else {\n@@ -261,21 +264,132 @@ public UserModel getUserByUsername(String username, RealmModel realm) {\n         }\n     }\n \n-    protected UserAdapter getUserAdapter(RealmModel realm, String userId, Long loaded, UserModel delegate) {\n+    protected UserModel getUserAdapter(RealmModel realm, String userId, Long loaded, UserModel delegate) {\n         CachedUser cached = cache.get(userId, CachedUser.class);\n-        boolean wasCached = cached != null;\n         if (cached == null) {\n-            cached = new CachedUser(loaded, realm, delegate);\n+            return cacheUser(realm, delegate, loaded);\n+        } else {\n+            return validateCache(realm, cached);\n+        }\n+    }\n+\n+    protected UserModel validateCache(RealmModel realm, CachedUser cached) {\n+        StorageId storageId = new StorageId(cached.getId());\n+        if (!storageId.isLocal()) {\n+            ComponentModel component = realm.getComponent(storageId.getProviderId());\n+            UserStorageProviderModel model = new UserStorageProviderModel(component);\n+            UserStorageProviderModel.CachePolicy policy = model.getCachePolicy();\n+            // although we do set a timeout, Infinispan has no guarantees when the user will be evicted\n+            // its also hard to test stuff\n+            boolean invalidate = false;\n+            if (policy != null) {\n+                String currentTime = DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL).format(new Date(Time.currentTimeMillis()));\n+                if (policy == UserStorageProviderModel.CachePolicy.NO_CACHE) {\n+                    invalidate = true;\n+                } else if (cached.getCacheTimestamp() < model.getCacheInvalidBefore()) {\n+                    invalidate = true;\n+                } else if (policy == UserStorageProviderModel.CachePolicy.EVICT_DAILY) {\n+                    long dailyTimeout = dailyTimeout(model.getEvictionHour(), model.getEvictionMinute());\n+                    dailyTimeout = dailyTimeout - (24 * 60 * 60 * 1000);\n+                    //String timeout = DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL).format(new Date(dailyTimeout));\n+                    //String stamp = DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL).format(new Date(cached.getCacheTimestamp()));\n+                    if (cached.getCacheTimestamp() <= dailyTimeout) {\n+                        invalidate = true;\n+                    }\n+                } else if (policy == UserStorageProviderModel.CachePolicy.EVICT_WEEKLY) {\n+                    int oneWeek = 7 * 24 * 60 * 60 * 1000;\n+                    long weeklyTimeout = weeklyTimeout(model.getEvictionDay(), model.getEvictionHour(), model.getEvictionMinute());\n+                    long lastTimeout = weeklyTimeout - oneWeek;\n+                    String timeout = DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL).format(new Date(weeklyTimeout));\n+                    String stamp = DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL).format(new Date(cached.getCacheTimestamp()));\n+                    if (cached.getCacheTimestamp() <= lastTimeout) {\n+                        invalidate = true;\n+                    }\n+                }\n+            }\n+            if (invalidate) {\n+                registerUserInvalidation(realm, cached);\n+                return getDelegate().getUserById(cached.getId(), realm);\n+            }\n+        }\n+        return new UserAdapter(cached, this, session, realm);\n+    }\n+\n+    protected UserModel cacheUser(RealmModel realm, UserModel delegate, Long revision) {\n+        StorageId storageId = new StorageId(delegate.getId());\n+        CachedUser cached = null;\n+        if (!storageId.isLocal()) {\n+            ComponentModel component = realm.getComponent(storageId.getProviderId());\n+            UserStorageProviderModel model = new UserStorageProviderModel(component);\n+            UserStorageProviderModel.CachePolicy policy = model.getCachePolicy();\n+            if (policy != null && policy == UserStorageProviderModel.CachePolicy.NO_CACHE) {\n+                return delegate;\n+            }\n+            cached = new CachedUser(revision, realm, delegate);\n+            if (policy == null || policy == UserStorageProviderModel.CachePolicy.DEFAULT) {\n+                cache.addRevisioned(cached, startupRevision);\n+            } else {\n+                long lifespan = -1;\n+                if (policy == UserStorageProviderModel.CachePolicy.EVICT_DAILY) {\n+                    if (model.getEvictionHour() > -1 && model.getEvictionMinute() > -1) {\n+                        lifespan = dailyTimeout(model.getEvictionHour(), model.getEvictionMinute()) - Time.currentTimeMillis();\n+                    }\n+                } else if (policy == UserStorageProviderModel.CachePolicy.EVICT_WEEKLY) {\n+                    if (model.getEvictionDay() > 0 && model.getEvictionHour() > -1 && model.getEvictionMinute() > -1) {\n+                        lifespan = weeklyTimeout(model.getEvictionDay(), model.getEvictionHour(), model.getEvictionMinute()) - Time.currentTimeMillis();\n+                    }\n+                } else if (policy == UserStorageProviderModel.CachePolicy.MAX_LIFESPAN) {\n+                    lifespan = model.getMaxLifespan();\n+                }\n+                if (lifespan > 0) {\n+                    cache.addRevisioned(cached, startupRevision, lifespan);\n+                } else {\n+                    cache.addRevisioned(cached, startupRevision);\n+                }\n+            }\n+        } else {\n+            cached = new CachedUser(revision, realm, delegate);\n             cache.addRevisioned(cached, startupRevision);\n         }\n         UserAdapter adapter = new UserAdapter(cached, this, session, realm);\n-        if (!wasCached) {\n-            onCache(realm, adapter, delegate);\n-        }\n+        onCache(realm, adapter, delegate);\n         return adapter;\n \n     }\n \n+\n+    public static long dailyTimeout(int hour, int minute) {\n+        Calendar cal = Calendar.getInstance();\n+        Calendar cal2 = Calendar.getInstance();\n+        cal.setTimeInMillis(Time.currentTimeMillis());\n+        cal2.setTimeInMillis(Time.currentTimeMillis());\n+        cal2.set(Calendar.HOUR_OF_DAY, hour);\n+        cal2.set(Calendar.MINUTE, minute);\n+        if (cal2.getTimeInMillis() < cal.getTimeInMillis()) {\n+            int add = (24 * 60 * 60 * 1000);\n+            cal.add(Calendar.MILLISECOND, add);\n+        } else {\n+            cal.add(Calendar.MILLISECOND, (int)(cal2.getTimeInMillis() - cal.getTimeInMillis()));\n+        }\n+        return cal.getTimeInMillis();\n+    }\n+\n+    public static long weeklyTimeout(int day, int hour, int minute) {\n+        Calendar cal = Calendar.getInstance();\n+        Calendar cal2 = Calendar.getInstance();\n+        cal.setTimeInMillis(Time.currentTimeMillis());\n+        cal2.setTimeInMillis(Time.currentTimeMillis());\n+        cal2.set(Calendar.HOUR_OF_DAY, hour);\n+        cal2.set(Calendar.MINUTE, minute);\n+        cal2.set(Calendar.DAY_OF_WEEK, day);\n+        if (cal2.getTimeInMillis() < cal.getTimeInMillis()) {\n+            int add = (7 * 24 * 60 * 60 * 1000);\n+            cal2.add(Calendar.MILLISECOND, add);\n+        }\n+\n+        return cal2.getTimeInMillis();\n+    }\n+\n     private void onCache(RealmModel realm, UserAdapter adapter, UserModel delegate) {\n         ((OnUserCache)getDelegate()).onCache(realm, adapter, delegate);\n         ((OnUserCache)session.userCredentialManager()).onCache(realm, adapter, delegate);\n@@ -300,12 +414,14 @@ public UserModel getUserByEmail(String email, RealmModel realm) {\n             UserModel model = getDelegate().getUserByEmail(email, realm);\n             if (model == null) return null;\n             userId = model.getId();\n-            query = new UserListQuery(loaded, cacheKey, realm, model.getId());\n-            cache.addRevisioned(query, startupRevision);\n             if (invalidations.contains(userId)) return model;\n             if (managedUsers.containsKey(userId)) return managedUsers.get(userId);\n \n-            UserAdapter adapter = getUserAdapter(realm, userId, loaded, model);\n+            UserModel adapter = getUserAdapter(realm, userId, loaded, model);\n+            if (adapter instanceof UserAdapter) {\n+                query = new UserListQuery(loaded, cacheKey, realm, model.getId());\n+                cache.addRevisioned(query, startupRevision);\n+            }\n             managedUsers.put(userId, adapter);\n             return adapter;\n         } else {\n@@ -343,12 +459,15 @@ public UserModel getUserByFederatedIdentity(FederatedIdentityModel socialLink, R\n             UserModel model = getDelegate().getUserByFederatedIdentity(socialLink, realm);\n             if (model == null) return null;\n             userId = model.getId();\n-            query = new UserListQuery(loaded, cacheKey, realm, userId);\n-            cache.addRevisioned(query, startupRevision);\n             if (invalidations.contains(userId)) return model;\n             if (managedUsers.containsKey(userId)) return managedUsers.get(userId);\n \n-            UserAdapter adapter = getUserAdapter(realm, userId, loaded, model);\n+            UserModel adapter = getUserAdapter(realm, userId, loaded, model);\n+            if (adapter instanceof UserAdapter) {\n+                query = new UserListQuery(loaded, cacheKey, realm, model.getId());\n+                cache.addRevisioned(query, startupRevision);\n+            }\n+\n             managedUsers.put(userId, adapter);\n             return adapter;\n         } else {"
        },
        {
            "sha": "22fef962c4b73a2992f64a0cc1637384b0bf9614",
            "filename": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/keycloak/keycloak/blob/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f/model%2Finfinispan%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fcache%2Finfinispan%2Fentities%2FAbstractRevisioned.java",
            "raw_url": "https://github.com/keycloak/keycloak/raw/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f/model%2Finfinispan%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fcache%2Finfinispan%2Fentities%2FAbstractRevisioned.java",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/model%2Finfinispan%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fcache%2Finfinispan%2Fentities%2FAbstractRevisioned.java?ref=3e28ac1e463c78f4b181144d5ca41f578a2d3b8f",
            "patch": "@@ -1,5 +1,7 @@\n package org.keycloak.models.cache.infinispan.entities;\n \n+import org.keycloak.common.util.Time;\n+\n import java.io.Serializable;\n \n /**\n@@ -9,7 +11,7 @@\n public class AbstractRevisioned implements Revisioned, Serializable {\n     private String id;\n     private Long revision;\n-    private final long cacheTimestamp = System.currentTimeMillis();\n+    private final long cacheTimestamp = Time.currentTimeMillis();\n \n     public AbstractRevisioned(Long revision, String id) {\n         this.revision = revision;"
        },
        {
            "sha": "44637953f11684fbda05806d6bbd7d7edb10866c",
            "filename": "model/infinispan/src/test/java/org/keycloak/models/sessions/infinispan/initializer/InitializerStateTest.java",
            "status": "modified",
            "additions": 31,
            "deletions": 0,
            "changes": 31,
            "blob_url": "https://github.com/keycloak/keycloak/blob/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f/model%2Finfinispan%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fsessions%2Finfinispan%2Finitializer%2FInitializerStateTest.java",
            "raw_url": "https://github.com/keycloak/keycloak/raw/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f/model%2Finfinispan%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fsessions%2Finfinispan%2Finitializer%2FInitializerStateTest.java",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/model%2Finfinispan%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fsessions%2Finfinispan%2Finitializer%2FInitializerStateTest.java?ref=3e28ac1e463c78f4b181144d5ca41f578a2d3b8f",
            "patch": "@@ -19,7 +19,11 @@\n \n import org.junit.Assert;\n import org.junit.Test;\n+import org.keycloak.models.cache.infinispan.UserCacheSession;\n \n+import java.text.DateFormat;\n+import java.util.Calendar;\n+import java.util.Date;\n import java.util.List;\n \n /**\n@@ -59,4 +63,31 @@ private void assertContains(List<Integer> segments, int expectedLength, int... e\n             Assert.assertTrue(segments.contains(i));\n         }\n     }\n+\n+    @Test\n+    public void testDailyTimeout() throws Exception {\n+        Date date = new Date(UserCacheSession.dailyTimeout(10, 30));\n+        System.out.println(DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL).format(date));\n+        date = new Date(UserCacheSession.dailyTimeout(17, 45));\n+        System.out.println(DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL).format(date));\n+        date = new Date(UserCacheSession.weeklyTimeout(Calendar.MONDAY, 13, 45));\n+        System.out.println(DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL).format(date));\n+        date = new Date(UserCacheSession.weeklyTimeout(Calendar.THURSDAY, 13, 45));\n+        System.out.println(DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL).format(date));\n+        System.out.println(\"----\");\n+        Calendar cal = Calendar.getInstance();\n+        cal.add(Calendar.HOUR, 1);\n+        int hour = cal.get(Calendar.HOUR_OF_DAY);\n+        int min = cal.get(Calendar.MINUTE);\n+        date = new Date(cal.getTimeInMillis());\n+        System.out.println(DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL).format(date));\n+        date = new Date(UserCacheSession.dailyTimeout(hour, min));\n+        System.out.println(DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL).format(date));\n+        cal = Calendar.getInstance();\n+        cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);\n+        date = new Date(cal.getTimeInMillis());\n+        System.out.println(DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL).format(date));\n+\n+\n+    }\n }"
        },
        {
            "sha": "139e309a1ff715b10875c4e75784829a6cf3d122",
            "filename": "server-spi/src/main/java/org/keycloak/models/utils/ModelToRepresentation.java",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/keycloak/keycloak/blob/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f/server-spi%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Futils%2FModelToRepresentation.java",
            "raw_url": "https://github.com/keycloak/keycloak/raw/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f/server-spi%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Futils%2FModelToRepresentation.java",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/server-spi%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Futils%2FModelToRepresentation.java?ref=3e28ac1e463c78f4b181144d5ca41f578a2d3b8f",
            "patch": "@@ -810,6 +810,8 @@ public static ComponentRepresentation toRepresentation(KeycloakSession session,\n                     } else {\n                         config.put(e.getKey(), e.getValue());\n                     }\n+                } else {\n+                    config.put(e.getKey(), e.getValue());\n                 }\n             }\n "
        },
        {
            "sha": "1205561dc733194295fa12e8354babb738640e9c",
            "filename": "server-spi/src/main/java/org/keycloak/models/utils/RepresentationToModel.java",
            "status": "modified",
            "additions": 0,
            "deletions": 9,
            "changes": 9,
            "blob_url": "https://github.com/keycloak/keycloak/blob/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f/server-spi%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Futils%2FRepresentationToModel.java",
            "raw_url": "https://github.com/keycloak/keycloak/raw/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f/server-spi%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Futils%2FRepresentationToModel.java",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/server-spi%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Futils%2FRepresentationToModel.java?ref=3e28ac1e463c78f4b181144d5ca41f578a2d3b8f",
            "patch": "@@ -1757,18 +1757,9 @@ public static void updateComponent(KeycloakSession session, ComponentRepresentat\n             component.setSubType(rep.getSubType());\n         }\n \n-        Map<String, ProviderConfigProperty> providerConfiguration = null;\n-        if (!internal) {\n-            providerConfiguration = ComponentUtil.getComponentConfigProperties(session, component);\n-        }\n-\n         if (rep.getConfig() != null) {\n             Set<String> keys = new HashSet<>(rep.getConfig().keySet());\n             for (String k : keys) {\n-                if (!internal && !providerConfiguration.containsKey(k)) {\n-                    break;\n-                }\n-\n                 List<String> values = rep.getConfig().get(k);\n                 if (values == null || values.isEmpty() || values.get(0) == null || values.get(0).trim().isEmpty()) {\n                     component.getConfig().remove(k);"
        },
        {
            "sha": "fbbc406857a1e4c13dd02f6f13b58bb5f12ce4a2",
            "filename": "server-spi/src/main/java/org/keycloak/storage/StorageId.java",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/keycloak/keycloak/blob/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f/server-spi%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fstorage%2FStorageId.java",
            "raw_url": "https://github.com/keycloak/keycloak/raw/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f/server-spi%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fstorage%2FStorageId.java",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/server-spi%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fstorage%2FStorageId.java?ref=3e28ac1e463c78f4b181144d5ca41f578a2d3b8f",
            "patch": "@@ -78,6 +78,10 @@ public static boolean isLocalStorage(UserModel user) {\n     public static boolean isLocalStorage(String userId) {\n         return new StorageId(userId).getProviderId() == null;\n     }\n+    public boolean isLocal() {\n+        return getProviderId() == null;\n+\n+    }\n \n     public String getId() {\n         return id;"
        },
        {
            "sha": "3fd0791853112ef829f2f328cc7fca3475274fe4",
            "filename": "server-spi/src/main/java/org/keycloak/storage/UserStorageProviderModel.java",
            "status": "modified",
            "additions": 108,
            "deletions": 0,
            "changes": 108,
            "blob_url": "https://github.com/keycloak/keycloak/blob/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f/server-spi%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fstorage%2FUserStorageProviderModel.java",
            "raw_url": "https://github.com/keycloak/keycloak/raw/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f/server-spi%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fstorage%2FUserStorageProviderModel.java",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/server-spi%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fstorage%2FUserStorageProviderModel.java?ref=3e28ac1e463c78f4b181144d5ca41f578a2d3b8f",
            "patch": "@@ -28,6 +28,14 @@\n  */\n public class UserStorageProviderModel extends PrioritizedComponentModel {\n \n+    public static enum CachePolicy {\n+        NO_CACHE,\n+        DEFAULT,\n+        EVICT_DAILY,\n+        EVICT_WEEKLY,\n+        MAX_LIFESPAN\n+    }\n+\n     public UserStorageProviderModel() {\n         setProviderType(UserStorageProvider.class.getName());\n     }\n@@ -40,6 +48,104 @@ public UserStorageProviderModel(ComponentModel copy) {\n     private transient Integer changedSyncPeriod;\n     private transient Integer lastSync;\n     private transient Boolean importEnabled;\n+    private transient CachePolicy cachePolicy;\n+    private transient long maxLifespan = -1;\n+    private transient int evictionHour = -1;\n+    private transient int evictionMinute = -1;\n+    private transient int evictionDay = -1;\n+    private transient long cacheInvalidBefore = -1;\n+\n+    public CachePolicy getCachePolicy() {\n+        if (cachePolicy == null) {\n+            String str = getConfig().getFirst(\"cachePolicy\");\n+            if (str == null) return null;\n+            cachePolicy = CachePolicy.valueOf(str);\n+        }\n+        return cachePolicy;\n+    }\n+\n+    public void setCachePolicy(CachePolicy cachePolicy) {\n+        this.cachePolicy = cachePolicy;\n+        if (cachePolicy == null) {\n+            getConfig().remove(\"cachePolicy\");\n+\n+        } else {\n+            getConfig().putSingle(\"cachePolicy\", cachePolicy.name());\n+        }\n+    }\n+\n+    public long getMaxLifespan() {\n+        if (maxLifespan < 0) {\n+            String str = getConfig().getFirst(\"maxLifespan\");\n+            if (str == null) return -1;\n+            maxLifespan = Long.valueOf(str);\n+        }\n+        return maxLifespan;\n+    }\n+\n+    public void setMaxLifespan(long maxLifespan) {\n+        this.maxLifespan = maxLifespan;\n+        getConfig().putSingle(\"maxLifespan\", Long.toString(maxLifespan));\n+    }\n+\n+    public int getEvictionHour() {\n+        if (evictionHour < 0) {\n+            String str = getConfig().getFirst(\"evictionHour\");\n+            if (str == null) return -1;\n+            evictionHour = Integer.valueOf(str);\n+        }\n+        return evictionHour;\n+    }\n+\n+    public void setEvictionHour(int evictionHour) {\n+        if (evictionHour > 23 || evictionHour < 0) throw new IllegalArgumentException(\"Must be between 0 and 23\");\n+        this.evictionHour = evictionHour;\n+        getConfig().putSingle(\"evictionHour\", Integer.toString(evictionHour));\n+    }\n+\n+    public int getEvictionMinute() {\n+        if (evictionMinute < 0) {\n+            String str = getConfig().getFirst(\"evictionMinute\");\n+            if (str == null) return -1;\n+            evictionMinute = Integer.valueOf(str);\n+        }\n+        return evictionMinute;\n+    }\n+\n+    public void setEvictionMinute(int evictionMinute) {\n+        if (evictionMinute > 59 || evictionMinute < 0) throw new IllegalArgumentException(\"Must be between 0 and 59\");\n+        this.evictionMinute = evictionMinute;\n+        getConfig().putSingle(\"evictionMinute\", Integer.toString(evictionMinute));\n+    }\n+\n+    public int getEvictionDay() {\n+        if (evictionDay < 0) {\n+            String str = getConfig().getFirst(\"evictionDay\");\n+            if (str == null) return -1;\n+            evictionDay = Integer.valueOf(str);\n+        }\n+        return evictionDay;\n+    }\n+\n+    public void setEvictionDay(int evictionDay) {\n+        if (evictionDay > 7 || evictionDay < 1) throw new IllegalArgumentException(\"Must be between 1 and 7\");\n+        this.evictionDay = evictionDay;\n+        getConfig().putSingle(\"evictionDay\", Integer.toString(evictionDay));\n+    }\n+\n+    public long getCacheInvalidBefore() {\n+        if (cacheInvalidBefore < 0) {\n+            String str = getConfig().getFirst(\"cacheInvalidBefore\");\n+            if (str == null) return -1;\n+            cacheInvalidBefore = Long.valueOf(str);\n+        }\n+        return cacheInvalidBefore;\n+    }\n+\n+    public void setCacheInvalidBefore(long cacheInvalidBefore) {\n+        this.cacheInvalidBefore = cacheInvalidBefore;\n+        getConfig().putSingle(\"cacheInvalidBefore\", Long.toString(cacheInvalidBefore));\n+    }\n \n     public boolean isImportEnabled() {\n         if (importEnabled == null) {\n@@ -54,6 +160,8 @@ public boolean isImportEnabled() {\n \n     }\n \n+\n+\n     public void setImportEnabled(boolean flag) {\n         importEnabled = flag;\n         getConfig().putSingle(\"importEnabled\", Boolean.toString(flag));"
        },
        {
            "sha": "39e2bae346df687f785c6b822ea586a6108adab3",
            "filename": "services/src/main/java/org/keycloak/services/resources/admin/ComponentResource.java",
            "status": "modified",
            "additions": 5,
            "deletions": 1,
            "changes": 6,
            "blob_url": "https://github.com/keycloak/keycloak/blob/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2Fadmin%2FComponentResource.java",
            "raw_url": "https://github.com/keycloak/keycloak/raw/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2Fadmin%2FComponentResource.java",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2Fadmin%2FComponentResource.java?ref=3e28ac1e463c78f4b181144d5ca41f578a2d3b8f",
            "patch": "@@ -17,6 +17,7 @@\n package org.keycloak.services.resources.admin;\n \n import org.jboss.logging.Logger;\n+import org.jboss.resteasy.annotations.cache.NoCache;\n import org.jboss.resteasy.spi.NotFoundException;\n import org.keycloak.common.ClientConnection;\n import org.keycloak.component.ComponentModel;\n@@ -88,6 +89,7 @@ public ComponentResource(RealmModel realm, RealmAuth auth, AdminEventBuilder adm\n \n     @GET\n     @Produces(MediaType.APPLICATION_JSON)\n+    @NoCache\n     public List<ComponentRepresentation> getComponents(@QueryParam(\"parent\") String parent, @QueryParam(\"type\") String type) {\n         auth.requireView();\n         List<ComponentModel> components = Collections.EMPTY_LIST;\n@@ -129,13 +131,15 @@ public Response create(ComponentRepresentation rep) {\n     @GET\n     @Path(\"{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n+    @NoCache\n     public ComponentRepresentation getComponent(@PathParam(\"id\") String id) {\n         auth.requireManage();\n         ComponentModel model = realm.getComponent(id);\n         if (model == null) {\n             throw new NotFoundException(\"Could not find component\");\n         }\n-        return ModelToRepresentation.toRepresentation(session, model, false);\n+        ComponentRepresentation rep = ModelToRepresentation.toRepresentation(session, model, false);\n+        return rep;\n     }\n \n     @PUT"
        },
        {
            "sha": "6e79d69aa1cd56f3fba777a08bf459216caaf5db",
            "filename": "testsuite/integration/src/test/java/org/keycloak/testsuite/federation/storage/UserStorageTest.java",
            "status": "modified",
            "additions": 124,
            "deletions": 0,
            "changes": 124,
            "blob_url": "https://github.com/keycloak/keycloak/blob/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f/testsuite%2Fintegration%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Ffederation%2Fstorage%2FUserStorageTest.java",
            "raw_url": "https://github.com/keycloak/keycloak/raw/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f/testsuite%2Fintegration%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Ffederation%2Fstorage%2FUserStorageTest.java",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Ffederation%2Fstorage%2FUserStorageTest.java?ref=3e28ac1e463c78f4b181144d5ca41f578a2d3b8f",
            "patch": "@@ -16,18 +16,21 @@\n  */\n package org.keycloak.testsuite.federation.storage;\n \n+import org.junit.After;\n import org.junit.Assert;\n import org.junit.ClassRule;\n import org.junit.Rule;\n import org.junit.Test;\n import org.keycloak.OAuth2Constants;\n+import org.keycloak.common.util.Time;\n import org.keycloak.component.ComponentModel;\n import org.keycloak.models.GroupModel;\n import org.keycloak.models.KeycloakSession;\n import org.keycloak.models.RealmModel;\n import org.keycloak.models.RoleModel;\n import org.keycloak.models.UserCredentialModel;\n import org.keycloak.models.UserModel;\n+import org.keycloak.models.cache.CachedUserModel;\n import org.keycloak.models.cache.infinispan.UserAdapter;\n import org.keycloak.services.managers.RealmManager;\n import org.keycloak.storage.StorageId;\n@@ -40,6 +43,7 @@\n import org.keycloak.testsuite.rule.WebRule;\n import org.openqa.selenium.WebDriver;\n \n+import java.util.Calendar;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -122,6 +126,126 @@ public void testLoginSuccess() {\n         loginBadPassword(\"tbrady\");\n     }\n \n+    @After\n+    public void resetTimeoffset() {\n+        Time.setOffset(0);\n+\n+    }\n+\n+    @Test\n+    public void testIDE() throws Exception {\n+        Thread.sleep(100000000);\n+    }\n+\n+    @Test\n+    public void testDailyEviction() {\n+        Calendar cal = Calendar.getInstance();\n+        cal.add(Calendar.HOUR, 1);\n+        int hour = cal.get(Calendar.HOUR_OF_DAY);\n+        int min = cal.get(Calendar.MINUTE);\n+\n+        UserStorageProviderModel model = new UserStorageProviderModel(writableProvider);\n+        model.setCachePolicy(UserStorageProviderModel.CachePolicy.EVICT_DAILY);\n+        model.setEvictionHour(cal.get(Calendar.HOUR_OF_DAY));\n+        model.setEvictionMinute(cal.get(Calendar.MINUTE));\n+\n+        KeycloakSession session = keycloakRule.startSession();\n+        RealmModel realm = session.realms().getRealmByName(\"test\");\n+        CachedUserModel thor = (CachedUserModel)session.users().getUserByUsername(\"thor\", realm);\n+        long thorTimestamp = thor.getCacheTimestamp();\n+        realm.updateComponent(model);\n+        keycloakRule.stopSession(session, true);\n+\n+        Time.setOffset(60 * 2 * 60); // 2 hours\n+\n+        session = keycloakRule.startSession();\n+        realm = session.realms().getRealmByName(\"test\");\n+        UserModel thor2 = session.users().getUserByUsername(\"thor\", realm);\n+        Assert.assertFalse(thor2 instanceof CachedUserModel);\n+        model.getConfig().remove(\"cachePolicy\");\n+        model.getConfig().remove(\"evictionHour\");\n+        model.getConfig().remove(\"evictionMinute\");\n+        realm.updateComponent(model);\n+        keycloakRule.stopSession(session, true);\n+    }\n+\n+    @Test\n+    public void testWeeklyEviction() {\n+        Calendar cal = Calendar.getInstance();\n+\n+        // sets day of the week to 4 days from now\n+        cal.add(Calendar.HOUR, 4 * 24);\n+\n+        UserStorageProviderModel model = new UserStorageProviderModel(writableProvider);\n+        model.setCachePolicy(UserStorageProviderModel.CachePolicy.EVICT_WEEKLY);\n+        model.setEvictionDay(cal.get(Calendar.DAY_OF_WEEK));\n+        model.setEvictionHour(cal.get(Calendar.HOUR_OF_DAY));\n+        model.setEvictionMinute(cal.get(Calendar.MINUTE));\n+\n+        KeycloakSession session = keycloakRule.startSession();\n+        RealmModel realm = session.realms().getRealmByName(\"test\");\n+        CachedUserModel thor = (CachedUserModel)session.users().getUserByUsername(\"thor\", realm);\n+        realm.updateComponent(model);\n+        keycloakRule.stopSession(session, true);\n+\n+        Time.setOffset(60 * 60 * 24 * 2); // 2 days in future, should be cached still\n+\n+        session = keycloakRule.startSession();\n+        realm = session.realms().getRealmByName(\"test\");\n+        // test still\n+        UserModel thor2 = session.users().getUserByUsername(\"thor\", realm);\n+        Assert.assertTrue(thor2 instanceof CachedUserModel);\n+        keycloakRule.stopSession(session, true);\n+        Time.setOffset(Time.getOffset() + 60 * 60 * 24 * 3); // 3 days into future, cache will be invalidated\n+\n+        session = keycloakRule.startSession();\n+        realm = session.realms().getRealmByName(\"test\");\n+        thor2 = session.users().getUserByUsername(\"thor\", realm);\n+        Assert.assertFalse(thor2 instanceof CachedUserModel);\n+        model.getConfig().remove(\"cachePolicy\");\n+        model.getConfig().remove(\"evictionHour\");\n+        model.getConfig().remove(\"evictionMinute\");\n+        model.getConfig().remove(\"evictionDay\");\n+        realm.updateComponent(model);\n+        keycloakRule.stopSession(session, true);\n+    }\n+\n+    @Test\n+    public void testNoCache() {\n+        UserStorageProviderModel model = new UserStorageProviderModel(writableProvider);\n+        model.setCachePolicy(UserStorageProviderModel.CachePolicy.NO_CACHE);\n+        KeycloakSession session = keycloakRule.startSession();\n+        RealmModel realm = session.realms().getRealmByName(\"test\");\n+        CachedUserModel thor = (CachedUserModel)session.users().getUserByUsername(\"thor\", realm);\n+        realm.updateComponent(model);\n+        keycloakRule.stopSession(session, true);\n+\n+\n+        session = keycloakRule.startSession();\n+        realm = session.realms().getRealmByName(\"test\");\n+        // test still\n+        UserModel thor2 = session.users().getUserByUsername(\"thor\", realm);\n+        Assert.assertFalse(thor2 instanceof CachedUserModel);\n+        keycloakRule.stopSession(session, true);\n+\n+        session = keycloakRule.startSession();\n+        realm = session.realms().getRealmByName(\"test\");\n+        thor2 = session.users().getUserByUsername(\"thor\", realm);\n+        Assert.assertFalse(thor2 instanceof CachedUserModel);\n+        model.getConfig().remove(\"cachePolicy\");\n+        model.getConfig().remove(\"evictionHour\");\n+        model.getConfig().remove(\"evictionMinute\");\n+        model.getConfig().remove(\"evictionDay\");\n+        realm.updateComponent(model);\n+        keycloakRule.stopSession(session, true);\n+\n+        session = keycloakRule.startSession();\n+        realm = session.realms().getRealmByName(\"test\");\n+        thor = (CachedUserModel)session.users().getUserByUsername(\"thor\", realm);\n+        keycloakRule.stopSession(session, true);\n+\n+    }\n+\n     @Test\n     public void testUpdate() {\n         KeycloakSession session = keycloakRule.startSession();"
        },
        {
            "sha": "4943c3846904a6ac3247c23b8507bce813498d56",
            "filename": "themes/src/main/resources/theme/base/admin/messages/admin-messages_en.properties",
            "status": "modified",
            "additions": 28,
            "deletions": 1,
            "changes": 29,
            "blob_url": "https://github.com/keycloak/keycloak/blob/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f/themes%2Fsrc%2Fmain%2Fresources%2Ftheme%2Fbase%2Fadmin%2Fmessages%2Fadmin-messages_en.properties",
            "raw_url": "https://github.com/keycloak/keycloak/raw/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f/themes%2Fsrc%2Fmain%2Fresources%2Ftheme%2Fbase%2Fadmin%2Fmessages%2Fadmin-messages_en.properties",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/themes%2Fsrc%2Fmain%2Fresources%2Ftheme%2Fbase%2Fadmin%2Fmessages%2Fadmin-messages_en.properties?ref=3e28ac1e463c78f4b181144d5ca41f578a2d3b8f",
            "patch": "@@ -1178,4 +1178,31 @@ keystores=Keystores\n add-keystore=Add Keystore\n add-keystore.placeholder=Add keystore...\n view=View\n-active=Active\n\\ No newline at end of file\n+active=Active\n+\n+Sunday=Sunday\n+Monday=Monday\n+Tuesday=Tuesday\n+Wednesday=Wednesday\n+Thursday=Thursday\n+Friday=Friday\n+Saturday=Saturday\n+\n+user-strage-cache=Cache Settings\n+userStorage.cachePolicy=Cache Policy\n+userStorage.cachePolicy.option.DEFAULT=DEFAULT\n+userStorage.cachePolicy.option.EVICT_WEEKLY=EVICT_WEEKLY\n+userStorage.cachePolicy.option.EVICT_DAILY=EVICT_DAILY\n+userStorage.cachePolicy.option.MAX_LIFESPAN=MAX_LIFESPAN\n+userStorage.cachePolicy.option.NO_CACHE=NO_CACHE\n+userStorage.cachePolicy.tooltip=Cache Policy for this storage provider.  'DEFAULT' is whatever the default settings are for the global user cache.  'EVICT_DAILY' is a time of day every day that the user cache will be invalidated.  'EVICT_WEEKLY' is a day of the week and time the cache will be invalidated.  'MAX-LIFESPAN' is the time in milliseconds that will be the lifespan of a cache entry.\n+userStorage.cachePolicy.evictionDay=Eviction Day\n+userStorage.cachePolicy.evictionDay.tooltip=Day of the week the entry will become invalid on\n+userStorage.cachePolicy.evictionHour=Eviction Hour\n+userStorage.cachePolicy.evictionHour.tooltip=Hour of day the entry will become invalid on.\n+userStorage.cachePolicy.evictionMinute=Eviction Minute\n+userStorage.cachePolicy.evictionMinute.tooltip=Minute of day the entry will become invalid on.\n+userStorage.cachePolicy.maxLifespan=Max Lifespan\n+userStorage.cachePolicy.maxLifespan.tooltip=Max lifespan of a user cache entry in milliseconds.\n+\n+"
        },
        {
            "sha": "9ffe6270560d9696a4a1d542130967ad607df8d0",
            "filename": "themes/src/main/resources/theme/base/admin/resources/js/controllers/users.js",
            "status": "modified",
            "additions": 30,
            "deletions": 0,
            "changes": 30,
            "blob_url": "https://github.com/keycloak/keycloak/blob/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f/themes%2Fsrc%2Fmain%2Fresources%2Ftheme%2Fbase%2Fadmin%2Fresources%2Fjs%2Fcontrollers%2Fusers.js",
            "raw_url": "https://github.com/keycloak/keycloak/raw/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f/themes%2Fsrc%2Fmain%2Fresources%2Ftheme%2Fbase%2Fadmin%2Fresources%2Fjs%2Fcontrollers%2Fusers.js",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/themes%2Fsrc%2Fmain%2Fresources%2Ftheme%2Fbase%2Fadmin%2Fresources%2Fjs%2Fcontrollers%2Fusers.js?ref=3e28ac1e463c78f4b181144d5ca41f578a2d3b8f",
            "patch": "@@ -653,6 +653,9 @@ module.controller('UserFederationCtrl', function($scope, $location, $route, real\n         if (instance.isUserFederationProvider) {\n             return instance.priority;\n         } else {\n+            if (!instance.config['priority']) {\n+                console.log('getInstancePriority is undefined');\n+            }\n             return instance.config['priority'][0];\n         }\n     }\n@@ -740,6 +743,12 @@ module.controller('GenericUserStorageCtrl', function($scope, $location, Notifica\n             if (providerFactory.metadata.synchronizable) {\n                 instance.config['fullSyncPeriod'] = ['-1'];\n                 instance.config['changedSyncPeriod'] = ['-1'];\n+                instance.config['cachePolicy'] = ['DEFAULT'];\n+                instance.config['evictionDay'] = [''];\n+                instance.config['evictionHour'] = [''];\n+                instance.config['evictionMinute'] = [''];\n+                instance.config['maxLifespan'] = [''];\n+\n             }\n             if (providerFactory.properties) {\n \n@@ -769,6 +778,27 @@ module.controller('GenericUserStorageCtrl', function($scope, $location, Notifica\n \n                 }\n             }\n+            if (!instance.config['cachePolicy']) {\n+                instance.config['cachePolicy'] = ['DEFAULT'];\n+\n+            }\n+            if (!instance.config['evictionDay']) {\n+                instance.config['evictionDay'] = [''];\n+\n+            }\n+            if (!instance.config['evictionHour']) {\n+                instance.config['evictionHour'] = [''];\n+\n+            }\n+            if (!instance.config['evictionMinute']) {\n+                instance.config['evictionMinute'] = [''];\n+\n+            }\n+            if (!instance.config['maxLifespan']) {\n+                instance.config['maxLifespan'] = [''];\n+\n+            }\n+\n             /*\n             console.log('Manage instance');\n             console.log(instance.name);"
        },
        {
            "sha": "e9d72022150d93614715a4df4ff23cfe0358424e",
            "filename": "themes/src/main/resources/theme/base/admin/resources/partials/user-storage-generic.html",
            "status": "modified",
            "additions": 147,
            "deletions": 0,
            "changes": 147,
            "blob_url": "https://github.com/keycloak/keycloak/blob/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f/themes%2Fsrc%2Fmain%2Fresources%2Ftheme%2Fbase%2Fadmin%2Fresources%2Fpartials%2Fuser-storage-generic.html",
            "raw_url": "https://github.com/keycloak/keycloak/raw/3e28ac1e463c78f4b181144d5ca41f578a2d3b8f/themes%2Fsrc%2Fmain%2Fresources%2Ftheme%2Fbase%2Fadmin%2Fresources%2Fpartials%2Fuser-storage-generic.html",
            "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/themes%2Fsrc%2Fmain%2Fresources%2Ftheme%2Fbase%2Fadmin%2Fresources%2Fpartials%2Fuser-storage-generic.html?ref=3e28ac1e463c78f4b181144d5ca41f578a2d3b8f",
            "patch": "@@ -68,6 +68,153 @@\n         </fieldset>\n \n \n+        <fieldset>\n+            <legend><span class=\"text\">{{:: 'user-storage-cache-policy' | translate}}</span></legend>\n+            <div class=\"form-group\">\n+                <label for=\"cachePolicy\" class=\"col-md-2 control-label\">{{:: 'userStorage.cachePolicy' | translate}}</label>\n+                <div class=\"col-md-2\">\n+                    <div>\n+                        <select id=\"cachePolicy\" ng-model=\"instance.config['cachePolicy'][0]\" class=\"form-control\">\n+                            <option value=\"DEFAULT\">{{:: 'userStorage.cachePolicy.option.DEFAULT' | translate}}</option>\n+                            <option value=\"EVICT_DAILY\">{{:: 'userStorage.cachePolicy.option.EVICT_DAILY' | translate}}</option>\n+                            <option value=\"EVICT_WEEKLY\">{{:: 'userStorage.cachePolicy.option.EVICT_WEEKLY' | translate}}</option>\n+                            <option value=\"MAX_LIFESPAN\">{{:: 'userStorage.cachePolicy.option.MAX_LIFESPAN' | translate}}</option>\n+                            <option value=\"NO_CACHE\">{{:: 'userStorage.cachePolicy.option.NO_CACHE' | translate}}</option>\n+                        </select>\n+                    </div>\n+                </div>\n+                <kc-tooltip>{{:: 'userStorage.cachePolicy.tooltip' | translate}}</kc-tooltip>\n+            </div>\n+            <div class=\"form-group\" data-ng-show=\"instance.config['cachePolicy'][0] == 'EVICT_WEEKLY'\">\n+                <label for=\"evictionDay\" class=\"col-md-2 control-label\">{{:: 'userStorage.evictionDay' | translate}}</label>\n+                <div class=\"col-md-2\">\n+                    <div>\n+                        <select id=\"evictionDay\" ng-model=\"instance.config['evictionDay'][0]\" class=\"form-control\">\n+                            <option value=\"1\">{{:: 'Sunday' | translate}}</option>\n+                            <option value=\"2\">{{:: 'Monday' | translate}}</option>\n+                            <option value=\"3\">{{:: 'Tuesday' | translate}}</option>\n+                            <option value=\"4\">{{:: 'Wednesday' | translate}}</option>\n+                            <option value=\"5\">{{:: 'Thursday' | translate}}</option>\n+                            <option value=\"6\">{{:: 'Friday' | translate}}</option>\n+                            <option value=\"7\">{{:: 'Saturday' | translate}}</option>\n+                        </select>\n+                    </div>\n+                </div>\n+                <kc-tooltip>{{:: 'userStorage.cachePolicy.evictionDay.tooltip' | translate}}</kc-tooltip>\n+            </div>\n+            <div class=\"form-group clearfix\" data-ng-show=\"instance.config['cachePolicy'][0] == 'EVICT_WEEKLY' || instance.config['cachePolicy'][0] == 'EVICT_DAILY'\">\n+                <label class=\"col-md-2 control-label\" for=\"evictionHour\">{{:: 'userStorage.cachePolicy.evictionHour' | translate}}</label>\n+                <div class=\"col-md-2\">\n+                    <div>\n+                        <select id=\"evictionHour\" ng-model=\"instance.config['evictionHour'][0]\" class=\"form-control\">\n+                            <option value=\"0\">00</option>\n+                            <option value=\"1\">01</option>\n+                            <option value=\"2\">02</option>\n+                            <option value=\"3\">03</option>\n+                            <option value=\"4\">04</option>\n+                            <option value=\"5\">05</option>\n+                            <option value=\"6\">06</option>\n+                            <option value=\"7\">07</option>\n+                            <option value=\"8\">08</option>\n+                            <option value=\"9\">09</option>\n+                            <option value=\"10\">10</option>\n+                            <option value=\"11\">11</option>\n+                            <option value=\"12\">12</option>\n+                            <option value=\"13\">13</option>\n+                            <option value=\"14\">14</option>\n+                            <option value=\"15\">15</option>\n+                            <option value=\"16\">16</option>\n+                            <option value=\"17\">17</option>\n+                            <option value=\"18\">18</option>\n+                            <option value=\"19\">19</option>\n+                            <option value=\"20\">20</option>\n+                            <option value=\"21\">21</option>\n+                            <option value=\"22\">22</option>\n+                            <option value=\"23\">23</option>\n+                        </select>\n+                    </div>\n+                </div>\n+                <kc-tooltip>{{:: 'userStorage.cachePolicy.evictionHour.tooltip' | translate}}</kc-tooltip>\n+            </div>\n+            <div class=\"form-group clearfix\" data-ng-show=\"instance.config['cachePolicy'][0] == 'EVICT_WEEKLY' || instance.config['cachePolicy'][0] == 'EVICT_DAILY'\">\n+                <label class=\"col-md-2 control-label\" for=\"evictionMinute\">{{:: 'userStorage.cachePolicy.evictionMinute' | translate}}</label>\n+                <div class=\"col-md-2\">\n+                    <div>\n+                        <select id=\"evictionMinute\" ng-model=\"instance.config['evictionMinute'][0]\" class=\"form-control\">\n+                            <option value=\"0\">00</option>\n+                            <option value=\"1\">01</option>\n+                            <option value=\"2\">02</option>\n+                            <option value=\"3\">03</option>\n+                            <option value=\"4\">04</option>\n+                            <option value=\"5\">05</option>\n+                            <option value=\"6\">06</option>\n+                            <option value=\"7\">07</option>\n+                            <option value=\"8\">08</option>\n+                            <option value=\"9\">09</option>\n+                            <option value=\"10\">10</option>\n+                            <option value=\"11\">11</option>\n+                            <option value=\"12\">12</option>\n+                            <option value=\"13\">13</option>\n+                            <option value=\"14\">14</option>\n+                            <option value=\"15\">15</option>\n+                            <option value=\"16\">16</option>\n+                            <option value=\"17\">17</option>\n+                            <option value=\"18\">18</option>\n+                            <option value=\"19\">19</option>\n+                            <option value=\"20\">20</option>\n+                            <option value=\"21\">21</option>\n+                            <option value=\"22\">22</option>\n+                            <option value=\"23\">23</option>\n+                            <option value=\"24\">24</option>\n+                            <option value=\"25\">25</option>\n+                            <option value=\"26\">26</option>\n+                            <option value=\"27\">27</option>\n+                            <option value=\"28\">28</option>\n+                            <option value=\"29\">29</option>\n+                            <option value=\"30\">30</option>\n+                            <option value=\"31\">31</option>\n+                            <option value=\"32\">32</option>\n+                            <option value=\"33\">33</option>\n+                            <option value=\"34\">34</option>\n+                            <option value=\"35\">35</option>\n+                            <option value=\"36\">36</option>\n+                            <option value=\"37\">37</option>\n+                            <option value=\"38\">38</option>\n+                            <option value=\"39\">39</option>\n+                            <option value=\"40\">40</option>\n+                            <option value=\"41\">41</option>\n+                            <option value=\"42\">42</option>\n+                            <option value=\"43\">43</option>\n+                            <option value=\"44\">44</option>\n+                            <option value=\"45\">45</option>\n+                            <option value=\"46\">46</option>\n+                            <option value=\"47\">47</option>\n+                            <option value=\"48\">48</option>\n+                            <option value=\"49\">49</option>\n+                            <option value=\"50\">50</option>\n+                            <option value=\"51\">51</option>\n+                            <option value=\"52\">52</option>\n+                            <option value=\"53\">53</option>\n+                            <option value=\"54\">54</option>\n+                            <option value=\"55\">55</option>\n+                            <option value=\"56\">56</option>\n+                            <option value=\"57\">57</option>\n+                            <option value=\"58\">58</option>\n+                            <option value=\"59\">59</option>\n+                        </select>\n+                    </div>\n+                    <kc-tooltip>{{:: 'userStorage.cachePolicy.evictionMinute.tooltip' | translate}}</kc-tooltip>\n+            </div>\n+            <div class=\"form-group clearfix\" data-ng-show=\"instance.config['cachePolicy'][0] == 'MAX_LIFESPAN'\">\n+                <label class=\"col-md-2 control-label\" for=\"maxLifespan\">{{:: 'userStorage.cachePolicy.maxLifespan' | translate}}</label>\n+                <div class=\"col-md-6\">\n+                    <input class=\"form-control\" type=\"text\"  ng-model=\"instance.config['maxLifespan'][0]\" id=\"maxLifespan\" />\n+                </div>\n+                <kc-tooltip>{{:: 'userStorage.cachePolicy.maxLifespan.tooltip' | translate}}</kc-tooltip>\n+            </div>\n+        </fieldset>\n+\n+\n         <div class=\"form-group\">\n             <div class=\"col-md-10 col-md-offset-2\" data-ng-show=\"create && access.manageUsers\">\n                 <button kc-save>{{:: 'save' | translate}}</button>"
        }
    ]
}