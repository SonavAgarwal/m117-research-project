{
    "sha": "22109eea84e4ea5ab773f58baad2b366b1858591",
    "node_id": "MDY6Q29tbWl0MTA4OTE0OToyMjEwOWVlYTg0ZTRlYTVhYjc3M2Y1OGJhYWQyYjM2NmIxODU4NTkx",
    "commit": {
        "author": {
            "name": "Marten Deinum",
            "email": "mdeinum@gmail.com",
            "date": "2016-03-07T08:19:57Z"
        },
        "committer": {
            "name": "Michael Minella",
            "email": "mminella@pivotal.io",
            "date": "2016-04-19T17:54:59Z"
        },
        "message": "This commit adds a ExecutionContextSerializer based on Jackson2.\n\nIt has been tested with Jackson 2.3.3 which is the Jackson version\nused with the Spring dependency.\n\nTests have been updated to use Hamcrest matchers and made a bit more reusable.",
        "tree": {
            "sha": "4e031eb6ee3eac0348e78ab1dafaec61fe64beaa",
            "url": "https://api.github.com/repos/spring-projects/spring-batch/git/trees/4e031eb6ee3eac0348e78ab1dafaec61fe64beaa"
        },
        "url": "https://api.github.com/repos/spring-projects/spring-batch/git/commits/22109eea84e4ea5ab773f58baad2b366b1858591",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/spring-projects/spring-batch/commits/22109eea84e4ea5ab773f58baad2b366b1858591",
    "html_url": "https://github.com/spring-projects/spring-batch/commit/22109eea84e4ea5ab773f58baad2b366b1858591",
    "comments_url": "https://api.github.com/repos/spring-projects/spring-batch/commits/22109eea84e4ea5ab773f58baad2b366b1858591/comments",
    "author": {
        "login": "mdeinum",
        "id": 606761,
        "node_id": "MDQ6VXNlcjYwNjc2MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/606761?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mdeinum",
        "html_url": "https://github.com/mdeinum",
        "followers_url": "https://api.github.com/users/mdeinum/followers",
        "following_url": "https://api.github.com/users/mdeinum/following{/other_user}",
        "gists_url": "https://api.github.com/users/mdeinum/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mdeinum/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mdeinum/subscriptions",
        "organizations_url": "https://api.github.com/users/mdeinum/orgs",
        "repos_url": "https://api.github.com/users/mdeinum/repos",
        "events_url": "https://api.github.com/users/mdeinum/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mdeinum/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "mminella",
        "id": 630743,
        "node_id": "MDQ6VXNlcjYzMDc0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/630743?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mminella",
        "html_url": "https://github.com/mminella",
        "followers_url": "https://api.github.com/users/mminella/followers",
        "following_url": "https://api.github.com/users/mminella/following{/other_user}",
        "gists_url": "https://api.github.com/users/mminella/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mminella/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mminella/subscriptions",
        "organizations_url": "https://api.github.com/users/mminella/orgs",
        "repos_url": "https://api.github.com/users/mminella/repos",
        "events_url": "https://api.github.com/users/mminella/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mminella/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "b160996576fd46cf68f76b90edc5f2ea3e8fa17e",
            "url": "https://api.github.com/repos/spring-projects/spring-batch/commits/b160996576fd46cf68f76b90edc5f2ea3e8fa17e",
            "html_url": "https://github.com/spring-projects/spring-batch/commit/b160996576fd46cf68f76b90edc5f2ea3e8fa17e"
        }
    ],
    "stats": {
        "total": 601,
        "additions": 307,
        "deletions": 294
    },
    "files": [
        {
            "sha": "e16bd59fdd1d0f8be955f5de08b58b8c493657c1",
            "filename": "build.gradle",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/spring-projects/spring-batch/blob/22109eea84e4ea5ab773f58baad2b366b1858591/build.gradle",
            "raw_url": "https://github.com/spring-projects/spring-batch/raw/22109eea84e4ea5ab773f58baad2b366b1858591/build.gradle",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-batch/contents/build.gradle?ref=22109eea84e4ea5ab773f58baad2b366b1858591",
            "patch": "@@ -70,6 +70,7 @@ allprojects {\n \t\thsqldbVersion = '2.3.2'\n \t\tibatisVersion = '2.3.4.726'\n \t\tjacksonVersion = '1.9.13'\n+\t\tjackson2Version = \"2.3.3\"\n \t\tjavaMailVersion = '1.4.7'\n \t\tjavaxBatchApiVersion = '1.0'\n \t\tjavaxInjectVersion = '1'\n@@ -276,6 +277,7 @@ project('spring-batch-core') {\n \t\toptional \"org.springframework:spring-jdbc:$springVersion\"\n \t\toptional \"org.slf4j:slf4j-log4j12:$slf4jVersion\"\n \t\toptional \"log4j:log4j:$log4jVersion\"\n+\t\toptional \"com.fasterxml.jackson.core:jackson-databind:${jackson2Version}\"\n \n \t\toptional \"javax.batch:javax.batch-api:$javaxBatchApiVersion\"\n \t}"
        },
        {
            "sha": "753f990eced9ea919f59115d6e5eb06f9eb84320",
            "filename": "spring-batch-core/src/main/java/org/springframework/batch/core/repository/dao/Jackson2ExecutionContextStringSerializer.java",
            "status": "added",
            "additions": 68,
            "deletions": 0,
            "changes": 68,
            "blob_url": "https://github.com/spring-projects/spring-batch/blob/22109eea84e4ea5ab773f58baad2b366b1858591/spring-batch-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fbatch%2Fcore%2Frepository%2Fdao%2FJackson2ExecutionContextStringSerializer.java",
            "raw_url": "https://github.com/spring-projects/spring-batch/raw/22109eea84e4ea5ab773f58baad2b366b1858591/spring-batch-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fbatch%2Fcore%2Frepository%2Fdao%2FJackson2ExecutionContextStringSerializer.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-batch/contents/spring-batch-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fbatch%2Fcore%2Frepository%2Fdao%2FJackson2ExecutionContextStringSerializer.java?ref=22109eea84e4ea5ab773f58baad2b366b1858591",
            "patch": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2008-2016 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.batch.core.repository.dao;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.batch.core.repository.ExecutionContextSerializer;\n+import org.springframework.util.Assert;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Implementation that uses Jackson2 to provide (de)serialization.\n+ *\n+ * @author Marten Deinum\n+ * @since 3.0.7\n+ *\n+ * @see ExecutionContextSerializer\n+ */\n+public class Jackson2ExecutionContextStringSerializer implements ExecutionContextSerializer {\n+\n+    private ObjectMapper objectMapper;\n+\n+    public Jackson2ExecutionContextStringSerializer() {\n+        this.objectMapper = new ObjectMapper();\n+        this.objectMapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false);\n+        this.objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true);\n+        this.objectMapper.enableDefaultTyping();\n+    }\n+\n+    public void setObjectMapper(ObjectMapper objectMapper) {\n+        Assert.notNull(objectMapper, \"ObjectMapper must not be null\");\n+        this.objectMapper = objectMapper;\n+    }\n+\n+    public Map<String, Object> deserialize(InputStream in) throws IOException {\n+\n+        TypeReference<HashMap<String,Object>> typeRef = new TypeReference<HashMap<String,Object>>() {};\n+        return objectMapper.readValue(in, typeRef);\n+    }\n+\n+    public void serialize(Map<String, Object> context, OutputStream out) throws IOException {\n+\n+        Assert.notNull(context);\n+        Assert.notNull(out);\n+\n+        objectMapper.writeValue(out, context);\n+    }\n+}"
        },
        {
            "sha": "fa1dfb56fdfca7b26b07efcd691246bc8a7b7e36",
            "filename": "spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/AbstractExecutionContextSerializerTests.java",
            "status": "added",
            "additions": 185,
            "deletions": 0,
            "changes": 185,
            "blob_url": "https://github.com/spring-projects/spring-batch/blob/22109eea84e4ea5ab773f58baad2b366b1858591/spring-batch-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fbatch%2Fcore%2Frepository%2Fdao%2FAbstractExecutionContextSerializerTests.java",
            "raw_url": "https://github.com/spring-projects/spring-batch/raw/22109eea84e4ea5ab773f58baad2b366b1858591/spring-batch-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fbatch%2Fcore%2Frepository%2Fdao%2FAbstractExecutionContextSerializerTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-batch/contents/spring-batch-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fbatch%2Fcore%2Frepository%2Fdao%2FAbstractExecutionContextSerializerTests.java?ref=22109eea84e4ea5ab773f58baad2b366b1858591",
            "patch": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright 2012-2016 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.batch.core.repository.dao;\n+\n+import org.junit.Test;\n+import org.springframework.batch.core.repository.ExecutionContextSerializer;\n+\n+import java.io.*;\n+import java.math.BigDecimal;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasEntry;\n+\n+/**\n+ * Abstract test class for {@code ExecutionContextSerializer} implementations. Provides a minimum on test methods\n+ * that should pass for each {@code ExecutionContextSerializer} implementation.\n+ *\n+ * @author Thomas Risberg\n+ * @author Michael Minella\n+ * @author Marten Deinum\n+ */\n+public abstract class AbstractExecutionContextSerializerTests {\n+\n+    @Test\n+    public void testSerializeAMap() throws Exception {\n+        Map<String, Object> m1 = new HashMap<String, Object>();\n+        m1.put(\"object1\", Long.valueOf(12345L));\n+        m1.put(\"object2\", \"OBJECT TWO\");\n+        // Use a date after 1971 (otherwise daylight saving screws up)...\n+        m1.put(\"object3\", new Date(123456790123L));\n+        m1.put(\"object4\", new Double(1234567.1234D));\n+\n+        Map<String, Object> m2 = serializationRoundTrip(m1);\n+\n+        compareContexts(m1, m2);\n+    }\n+\n+    @Test\n+    public void testComplexObject() throws Exception {\n+        Map<String, Object> m1 = new HashMap<String, Object>();\n+        ComplexObject o1 = new ComplexObject();\n+        o1.setName(\"02345\");\n+        Map<String, Object> m = new HashMap<String, Object>();\n+        m.put(\"object1\", Long.valueOf(12345L));\n+        m.put(\"object2\", \"OBJECT TWO\");\n+        o1.setMap(m);\n+        o1.setNumber(new BigDecimal(\"12345.67\"));\n+        ComplexObject o2 = new ComplexObject();\n+        o2.setName(\"Inner Object\");\n+        o2.setMap(m);\n+        o2.setNumber(new BigDecimal(\"98765.43\"));\n+        o1.setObj(o2);\n+        m1.put(\"co\", o1);\n+\n+        Map<String, Object> m2 = serializationRoundTrip(m1);\n+\n+        compareContexts(m1, m2);\n+    }\n+\n+    @Test (expected=IllegalArgumentException.class)\n+    public void testNullSerialization() throws Exception {\n+        getSerializer().serialize(null, null);\n+    }\n+\n+    protected void compareContexts(Map<String, Object> m1, Map<String, Object> m2) {\n+\n+        for (Map.Entry<String, Object> entry : m1.entrySet()) {\n+            assertThat(m2, hasEntry(entry.getKey(), entry.getValue()));\n+        }\n+    }\n+\n+    protected Map<String, Object> serializationRoundTrip(Map<String, Object> m1) throws IOException {\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        getSerializer().serialize(m1, out);\n+\n+        String s = new String(out.toByteArray(), \"ISO-8859-1\");\n+\n+        InputStream in = new ByteArrayInputStream(s.getBytes(\"ISO-8859-1\"));\n+        Map<String, Object> m2 = getSerializer().deserialize(in);\n+        return m2;\n+    }\n+\n+\n+    protected abstract ExecutionContextSerializer getSerializer();\n+\n+    public static class ComplexObject implements Serializable {\n+        private static final long serialVersionUID = 1L;\n+        private String name;\n+        private BigDecimal number;\n+        private ComplexObject obj;\n+        private Map<String,Object> map;\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public void setName(String name) {\n+            this.name = name;\n+        }\n+\n+        public BigDecimal getNumber() {\n+            return number;\n+        }\n+\n+        public void setNumber(BigDecimal number) {\n+            this.number = number;\n+        }\n+\n+        public ComplexObject getObj() {\n+            return obj;\n+        }\n+\n+        public void setObj(ComplexObject obj) {\n+            this.obj = obj;\n+        }\n+\n+        public Map<String,Object> getMap() {\n+            return map;\n+        }\n+\n+        public void setMap(Map<String,Object> map) {\n+            this.map = map;\n+        }\n+\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) {\n+                return true;\n+            }\n+            if (o == null || getClass() != o.getClass()) {\n+                return false;\n+            }\n+\n+            ComplexObject that = (ComplexObject) o;\n+\n+            if (map != null ? !map.equals(that.map) : that.map != null) {\n+                return false;\n+            }\n+            if (name != null ? !name.equals(that.name) : that.name != null) {\n+                return false;\n+            }\n+            if (number != null ? !number.equals(that.number) : that.number != null) {\n+                return false;\n+            }\n+            if (obj != null ? !obj.equals(that.obj) : that.obj != null) {\n+                return false;\n+            }\n+\n+            return true;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            int result;\n+            result = (name != null ? name.hashCode() : 0);\n+            result = 31 * result + (number != null ? number.hashCode() : 0);\n+            result = 31 * result + (obj != null ? obj.hashCode() : 0);\n+            result = 31 * result + (map != null ? map.hashCode() : 0);\n+            return result;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"ComplexObject [name=\" + name + \", number=\" + number + \"]\";\n+        }\n+    }\n+\n+}"
        },
        {
            "sha": "32b85ff403a3b7376dbe5ad5e149a98b53b6dea2",
            "filename": "spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/DefaultExecutionContextSerializerTests.java",
            "status": "modified",
            "additions": 8,
            "deletions": 140,
            "changes": 148,
            "blob_url": "https://github.com/spring-projects/spring-batch/blob/22109eea84e4ea5ab773f58baad2b366b1858591/spring-batch-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fbatch%2Fcore%2Frepository%2Fdao%2FDefaultExecutionContextSerializerTests.java",
            "raw_url": "https://github.com/spring-projects/spring-batch/raw/22109eea84e4ea5ab773f58baad2b366b1858591/spring-batch-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fbatch%2Fcore%2Frepository%2Fdao%2FDefaultExecutionContextSerializerTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-batch/contents/spring-batch-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fbatch%2Fcore%2Frepository%2Fdao%2FDefaultExecutionContextSerializerTests.java?ref=22109eea84e4ea5ab773f58baad2b366b1858591",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2014 the original author or authors.\n+ * Copyright 2012-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -15,26 +15,19 @@\n  */\n package org.springframework.batch.core.repository.dao;\n \n-import static org.junit.Assert.assertEquals;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.batch.core.repository.ExecutionContextSerializer;\n \n-import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.Serializable;\n-import java.math.BigDecimal;\n-import java.util.Date;\n import java.util.HashMap;\n import java.util.Map;\n \n-import org.junit.Before;\n-import org.junit.Test;\n-\n /**\n  * @author Michael Minella\n  *\n  */\n-public class DefaultExecutionContextSerializerTests {\n+public class DefaultExecutionContextSerializerTests extends AbstractExecutionContextSerializerTests {\n \n \tprivate DefaultExecutionContextSerializer serializer;\n \n@@ -46,19 +39,6 @@ public void setUp() throws Exception {\n \t\tserializer = new DefaultExecutionContextSerializer();\n \t}\n \n-\t@Test\n-\tpublic void testSerializeAMap() throws Exception {\n-\t\tMap<String, Object> m1 = new HashMap<String, Object>();\n-\t\tm1.put(\"object1\", Long.valueOf(12345L));\n-\t\tm1.put(\"object2\", \"OBJECT TWO\");\n-\t\t// Use a date after 1971 (otherwise daylight saving screws up)...\n-\t\tm1.put(\"object3\", new Date(123456790123L));\n-\t\tm1.put(\"object4\", new Double(1234567.1234D));\n-\n-\t\tMap<String, Object> m2 = serializationRoundTrip(m1);\n-\n-\t\tcompareContexts(m1, m2);\n-\t}\n \n \t@Test(expected = IllegalArgumentException.class)\n \tpublic void testSerializeNonSerializable() throws Exception {\n@@ -68,120 +48,8 @@ public void testSerializeNonSerializable() throws Exception {\n \t\tserializer.serialize(m1, new ByteArrayOutputStream());\n \t}\n \n-\t@Test\n-\tpublic void testComplexObject() throws Exception {\n-\t\tMap<String, Object> m1 = new HashMap<String, Object>();\n-\t\tComplexObject o1 = new ComplexObject();\n-\t\to1.setName(\"02345\");\n-\t\tMap<String, Object> m = new HashMap<String, Object>();\n-\t\tm.put(\"object1\", Long.valueOf(12345L));\n-\t\tm.put(\"object2\", \"OBJECT TWO\");\n-\t\to1.setMap(m);\n-\t\to1.setNumber(new BigDecimal(\"12345.67\"));\n-\t\tComplexObject o2 = new ComplexObject();\n-\t\to2.setName(\"Inner Object\");\n-\t\to2.setMap(m);\n-\t\to2.setNumber(new BigDecimal(\"98765.43\"));\n-\t\to1.setObj(o2);\n-\t\tm1.put(\"co\", o1);\n-\n-\t\tMap<String, Object> m2 = serializationRoundTrip(m1);\n-\n-\t\tcompareContexts(m1, m2);\n-\t}\n-\n-\t@Test (expected=IllegalArgumentException.class)\n-\tpublic void testNullSerialization() throws Exception {\n-\t\tserializer.serialize(null, null);\n-\t}\n-\n-\tprivate void compareContexts(Map<String, Object> m1, Map<String, Object> m2) {\n-\t\tfor (String key : m1.keySet()) {\n-\t\t\tassertEquals(\"Bad key/value for \" + key, m1.get(key), m2.get(key));\n-\t\t}\n-\t}\n-\n-\tprivate Map<String, Object> serializationRoundTrip(Map<String, Object> m1) throws IOException {\n-\t\tByteArrayOutputStream out = new ByteArrayOutputStream();\n-\t\tserializer.serialize(m1, out);\n-\n-\t\tString s = new String(out.toByteArray(), \"ISO-8859-1\");\n-\n-\t\tInputStream in = new ByteArrayInputStream(s.getBytes(\"ISO-8859-1\"));\n-\t\tMap<String, Object> m2 = serializer.deserialize(in);\n-\t\treturn m2;\n-\t}\n-\n-\t@SuppressWarnings(\"unused\")\n-\tprivate static class ComplexObject implements Serializable {\n-\t\tprivate static final long serialVersionUID = 1L;\n-\t\tprivate String name;\n-\t\tprivate BigDecimal number;\n-\t\tprivate ComplexObject obj;\n-\t\tprivate Map<String,Object> map;\n-\n-\t\tpublic String getName() {\n-\t\t\treturn name;\n-\t\t}\n-\n-\t\tpublic void setName(String name) {\n-\t\t\tthis.name = name;\n-\t\t}\n-\n-\t\tpublic BigDecimal getNumber() {\n-\t\t\treturn number;\n-\t\t}\n-\n-\t\tpublic void setNumber(BigDecimal number) {\n-\t\t\tthis.number = number;\n-\t\t}\n-\n-\t\tpublic ComplexObject getObj() {\n-\t\t\treturn obj;\n-\t\t}\n-\n-\t\tpublic void setObj(ComplexObject obj) {\n-\t\t\tthis.obj = obj;\n-\t\t}\n-\n-\t\tpublic Map<String,Object> getMap() {\n-\t\t\treturn map;\n-\t\t}\n-\n-\t\tpublic void setMap(Map<String,Object> map) {\n-\t\t\tthis.map = map;\n-\t\t}\n-\n-\n-\t\t@Override\n-\t\tpublic boolean equals(Object o) {\n-\t\t\tif (this == o) return true;\n-\t\t\tif (o == null || getClass() != o.getClass()) return false;\n-\n-\t\t\tComplexObject that = (ComplexObject) o;\n-\n-\t\t\tif (map != null ? !map.equals(that.map) : that.map != null) return false;\n-\t\t\tif (name != null ? !name.equals(that.name) : that.name != null) return false;\n-\t\t\tif (number != null ? !number.equals(that.number) : that.number != null) return false;\n-\t\t\tif (obj != null ? !obj.equals(that.obj) : that.obj != null) return false;\n-\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic int hashCode() {\n-\t\t\tint result;\n-\t\t\tresult = (name != null ? name.hashCode() : 0);\n-\t\t\tresult = 31 * result + (number != null ? number.hashCode() : 0);\n-\t\t\tresult = 31 * result + (obj != null ? obj.hashCode() : 0);\n-\t\t\tresult = 31 * result + (map != null ? map.hashCode() : 0);\n-\t\t\treturn result;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic String toString() {\n-\t\t\treturn \"ComplexObject [name=\" + name + \", number=\" + number + \"]\";\n-\t\t}\n-\n+\t@Override\n+\tprotected ExecutionContextSerializer getSerializer() {\n+\t\treturn this.serializer;\n \t}\n }"
        },
        {
            "sha": "0e545826ae1390fb471d7034c6dbc6fca67ea8d1",
            "filename": "spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/Jackson2ExecutionContextStringSerializerTests.java",
            "status": "added",
            "additions": 39,
            "deletions": 0,
            "changes": 39,
            "blob_url": "https://github.com/spring-projects/spring-batch/blob/22109eea84e4ea5ab773f58baad2b366b1858591/spring-batch-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fbatch%2Fcore%2Frepository%2Fdao%2FJackson2ExecutionContextStringSerializerTests.java",
            "raw_url": "https://github.com/spring-projects/spring-batch/raw/22109eea84e4ea5ab773f58baad2b366b1858591/spring-batch-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fbatch%2Fcore%2Frepository%2Fdao%2FJackson2ExecutionContextStringSerializerTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-batch/contents/spring-batch-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fbatch%2Fcore%2Frepository%2Fdao%2FJackson2ExecutionContextStringSerializerTests.java?ref=22109eea84e4ea5ab773f58baad2b366b1858591",
            "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2008-2016 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.batch.core.repository.dao;\n+\n+import org.junit.Before;\n+import org.springframework.batch.core.repository.ExecutionContextSerializer;\n+\n+/**\n+ * @author Marten Deinum\n+ */\n+public class Jackson2ExecutionContextStringSerializerTests extends AbstractExecutionContextSerializerTests {\n+\n+\tExecutionContextSerializer serializer;\n+\n+\t@Before\n+\tpublic void onSetUp() throws Exception {\n+\t\tJackson2ExecutionContextStringSerializer serializerDeserializer = new Jackson2ExecutionContextStringSerializer();\n+\n+\t\tserializer = serializerDeserializer;\n+\t}\n+\n+\t@Override\n+\tprotected ExecutionContextSerializer getSerializer() {\n+\t\treturn this.serializer;\n+\t}\n+}"
        },
        {
            "sha": "1bd4d322eae3db318b91c9f4cc3b08941483fa5b",
            "filename": "spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/XStreamExecutionContextStringSerializerTests.java",
            "status": "modified",
            "additions": 5,
            "deletions": 154,
            "changes": 159,
            "blob_url": "https://github.com/spring-projects/spring-batch/blob/22109eea84e4ea5ab773f58baad2b366b1858591/spring-batch-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fbatch%2Fcore%2Frepository%2Fdao%2FXStreamExecutionContextStringSerializerTests.java",
            "raw_url": "https://github.com/spring-projects/spring-batch/raw/22109eea84e4ea5ab773f58baad2b366b1858591/spring-batch-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fbatch%2Fcore%2Frepository%2Fdao%2FXStreamExecutionContextStringSerializerTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-batch/contents/spring-batch-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fbatch%2Fcore%2Frepository%2Fdao%2FXStreamExecutionContextStringSerializerTests.java?ref=22109eea84e4ea5ab773f58baad2b366b1858591",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2008-2014 the original author or authors.\n+ * Copyright 2008-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -15,25 +15,14 @@\n  */\n package org.springframework.batch.core.repository.dao;\n \n-import static org.junit.Assert.assertEquals;\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.math.BigDecimal;\n-import java.util.Date;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n import org.junit.Before;\n-import org.junit.Test;\n import org.springframework.batch.core.repository.ExecutionContextSerializer;\n \n /**\n  * @author Thomas Risberg\n  * @author Michael Minella\n  */\n-public class XStreamExecutionContextStringSerializerTests {\n+public class XStreamExecutionContextStringSerializerTests extends AbstractExecutionContextSerializerTests {\n \n \tExecutionContextSerializer serializer;\n \n@@ -45,146 +34,8 @@ public void onSetUp() throws Exception {\n \t\tserializer = serializerDeserializer;\n \t}\n \n-\t@Test\n-\tpublic void testSerializeAMap() throws Exception {\n-\t\tMap<String, Object> m1 = new HashMap<String, Object>();\n-\t\tm1.put(\"object1\", Long.valueOf(12345L));\n-\t\tm1.put(\"object2\", \"OBJECT TWO\");\n-\t\t// Use a date after 1971 (otherwise daylight saving screws up)...\n-\t\tm1.put(\"object3\", new Date(123456790123L));\n-\t\tm1.put(\"object4\", new Double(1234567.1234D));\n-\n-\t\tMap<String, Object> m2 = serializationRoundTrip(m1);\n-\n-\t\tcompareContexts(m1, m2);\n-\t}\n-\n-\t@Test\n-\tpublic void testComplexObject() throws Exception {\n-\t\tMap<String, Object> m1 = new HashMap<String, Object>();\n-\t\tComplexObject o1 = new ComplexObject();\n-\t\to1.setName(\"02345\");\n-\t\tMap<String, Object> m = new HashMap<String, Object>();\n-\t\tm.put(\"object1\", Long.valueOf(12345L));\n-\t\tm.put(\"object2\", \"OBJECT TWO\");\n-\t\to1.setMap(m);\n-\t\to1.setNumber(new BigDecimal(\"12345.67\"));\n-\t\tComplexObject o2 = new ComplexObject();\n-\t\to2.setName(\"Inner Object\");\n-\t\to2.setMap(m);\n-\t\to2.setNumber(new BigDecimal(\"98765.43\"));\n-\t\to1.setObj(o2);\n-\t\tm1.put(\"co\", o1);\n-\n-\t\tMap<String, Object> m2 = serializationRoundTrip(m1);\n-\n-\t\tcompareContexts(m1, m2);\n-\t}\n-\n-\t@Test (expected=IllegalArgumentException.class)\n-\tpublic void testNullSerialization() throws Exception {\n-\t\tserializer.serialize(null, null);\n-\t}\n-\n-\tprivate void compareContexts(Map<String, Object> m1, Map<String, Object> m2) {\n-\t\tfor (String key : m1.keySet()) {\n-\t\t\tSystem.out.println(\"m1 = \" + m1 + \" m2 = \" + m2);\n-\t\t\tassertEquals(\"Bad key/value for \" + key, m1.get(key), m2.get(key));\n-\t\t}\n-\t}\n-\n-\tprivate Map<String, Object> serializationRoundTrip(Map<String, Object> m1) throws IOException {\n-\t\tByteArrayOutputStream out = new ByteArrayOutputStream();\n-\t\tserializer.serialize(m1, out);\n-\n-\t\tString s = out.toString();\n-\n-\t\tByteArrayInputStream in = new ByteArrayInputStream(s.getBytes());\n-\t\tMap<String, Object> m2 = serializer.deserialize(in);\n-\t\treturn m2;\n-\t}\n-\n-\t@SuppressWarnings(\"unused\")\n-\tprivate static class ComplexObject {\n-\t\tprivate String name;\n-\t\tprivate BigDecimal number;\n-\t\tprivate ComplexObject obj;\n-\t\tprivate Map<String,Object> map;\n-\n-\t\tpublic String getName() {\n-\t\t\treturn name;\n-\t\t}\n-\n-\t\tpublic void setName(String name) {\n-\t\t\tthis.name = name;\n-\t\t}\n-\n-\t\tpublic BigDecimal getNumber() {\n-\t\t\treturn number;\n-\t\t}\n-\n-\t\tpublic void setNumber(BigDecimal number) {\n-\t\t\tthis.number = number;\n-\t\t}\n-\n-\t\tpublic ComplexObject getObj() {\n-\t\t\treturn obj;\n-\t\t}\n-\n-\t\tpublic void setObj(ComplexObject obj) {\n-\t\t\tthis.obj = obj;\n-\t\t}\n-\n-\t\tpublic Map<String,Object> getMap() {\n-\t\t\treturn map;\n-\t\t}\n-\n-\t\tpublic void setMap(Map<String,Object> map) {\n-\t\t\tthis.map = map;\n-\t\t}\n-\n-\n-\t\t@Override\n-\t\tpublic boolean equals(Object o) {\n-\t\t\tif (this == o) {\n-\t\t\t\treturn true;\n-\t\t\t}\n-\t\t\tif (o == null || getClass() != o.getClass()) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\n-\t\t\tComplexObject that = (ComplexObject) o;\n-\n-\t\t\tif (map != null ? !map.equals(that.map) : that.map != null) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t\tif (name != null ? !name.equals(that.name) : that.name != null) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t\tif (number != null ? !number.equals(that.number) : that.number != null) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t\tif (obj != null ? !obj.equals(that.obj) : that.obj != null) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic int hashCode() {\n-\t\t\tint result;\n-\t\t\tresult = (name != null ? name.hashCode() : 0);\n-\t\t\tresult = 31 * result + (number != null ? number.hashCode() : 0);\n-\t\t\tresult = 31 * result + (obj != null ? obj.hashCode() : 0);\n-\t\t\tresult = 31 * result + (map != null ? map.hashCode() : 0);\n-\t\t\treturn result;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic String toString() {\n-\t\t\treturn \"ComplexObject [name=\" + name + \", number=\" + number + \"]\";\n-\t\t}\n+\t@Override\n+\tprotected ExecutionContextSerializer getSerializer() {\n+\t\treturn this.serializer;\n \t}\n-\n }"
        }
    ]
}