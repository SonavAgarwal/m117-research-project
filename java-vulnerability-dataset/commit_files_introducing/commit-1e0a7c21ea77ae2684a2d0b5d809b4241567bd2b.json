{
    "sha": "1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b",
    "node_id": "MDY6Q29tbWl0MzEwMDYxNTg6MWUwYTdjMjFlYTc3YWUyNjg0YTJkMGI1ZDgwOWI0MjQxNTY3YmQyYg==",
    "commit": {
        "author": {
            "name": "dmitrievanthony",
            "email": "dmitrievanthony@gmail.com",
            "date": "2019-02-01T10:04:44Z"
        },
        "committer": {
            "name": "Yury Babak",
            "email": "ybabak@gridgain.com",
            "date": "2019-02-01T10:04:44Z"
        },
        "message": "IGNITE-11138: [ML] Predict from SQL\n\nThis closes #5977",
        "tree": {
            "sha": "4b05db5a52db0a461532b3753d31616539785619",
            "url": "https://api.github.com/repos/apache/ignite/git/trees/4b05db5a52db0a461532b3753d31616539785619"
        },
        "url": "https://api.github.com/repos/apache/ignite/git/commits/1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/ignite/commits/1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b",
    "html_url": "https://github.com/apache/ignite/commit/1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b",
    "comments_url": "https://api.github.com/repos/apache/ignite/commits/1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b/comments",
    "author": {
        "login": "dmitrievanthony",
        "id": 1028969,
        "node_id": "MDQ6VXNlcjEwMjg5Njk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1028969?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dmitrievanthony",
        "html_url": "https://github.com/dmitrievanthony",
        "followers_url": "https://api.github.com/users/dmitrievanthony/followers",
        "following_url": "https://api.github.com/users/dmitrievanthony/following{/other_user}",
        "gists_url": "https://api.github.com/users/dmitrievanthony/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dmitrievanthony/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dmitrievanthony/subscriptions",
        "organizations_url": "https://api.github.com/users/dmitrievanthony/orgs",
        "repos_url": "https://api.github.com/users/dmitrievanthony/repos",
        "events_url": "https://api.github.com/users/dmitrievanthony/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dmitrievanthony/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "ybabak",
        "id": 22320581,
        "node_id": "MDQ6VXNlcjIyMzIwNTgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22320581?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ybabak",
        "html_url": "https://github.com/ybabak",
        "followers_url": "https://api.github.com/users/ybabak/followers",
        "following_url": "https://api.github.com/users/ybabak/following{/other_user}",
        "gists_url": "https://api.github.com/users/ybabak/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ybabak/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ybabak/subscriptions",
        "organizations_url": "https://api.github.com/users/ybabak/orgs",
        "repos_url": "https://api.github.com/users/ybabak/repos",
        "events_url": "https://api.github.com/users/ybabak/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ybabak/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "751ab2a488eeb5af32280125673907adb3ac9262",
            "url": "https://api.github.com/repos/apache/ignite/commits/751ab2a488eeb5af32280125673907adb3ac9262",
            "html_url": "https://github.com/apache/ignite/commit/751ab2a488eeb5af32280125673907adb3ac9262"
        }
    ],
    "stats": {
        "total": 775,
        "additions": 592,
        "deletions": 183
    },
    "files": [
        {
            "sha": "c8f05963884036c02b638291ee51f3624f4aea9d",
            "filename": "examples/src/main/java/org/apache/ignite/examples/ml/sql/DecisionTreeClassificationTrainerSQLInferenceExample.java",
            "status": "modified",
            "additions": 12,
            "deletions": 151,
            "changes": 163,
            "blob_url": "https://github.com/apache/ignite/blob/1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b/examples%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fexamples%2Fml%2Fsql%2FDecisionTreeClassificationTrainerSQLInferenceExample.java",
            "raw_url": "https://github.com/apache/ignite/raw/1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b/examples%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fexamples%2Fml%2Fsql%2FDecisionTreeClassificationTrainerSQLInferenceExample.java",
            "contents_url": "https://api.github.com/repos/apache/ignite/contents/examples%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fexamples%2Fml%2Fsql%2FDecisionTreeClassificationTrainerSQLInferenceExample.java?ref=1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b",
            "patch": "@@ -17,36 +17,18 @@\n \n package org.apache.ignite.examples.ml.sql;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n-import java.io.Serializable;\n import java.util.List;\n import org.apache.ignite.Ignite;\n import org.apache.ignite.IgniteCache;\n import org.apache.ignite.Ignition;\n-import org.apache.ignite.binary.BinaryObject;\n import org.apache.ignite.cache.query.QueryCursor;\n import org.apache.ignite.cache.query.SqlFieldsQuery;\n-import org.apache.ignite.cache.query.annotations.QuerySqlFunction;\n import org.apache.ignite.configuration.CacheConfiguration;\n import org.apache.ignite.internal.util.IgniteUtils;\n-import org.apache.ignite.ml.IgniteModel;\n-import org.apache.ignite.ml.dataset.impl.cache.CacheBasedDatasetBuilder;\n-import org.apache.ignite.ml.inference.Model;\n-import org.apache.ignite.ml.inference.ModelDescriptor;\n-import org.apache.ignite.ml.inference.ModelSignature;\n-import org.apache.ignite.ml.inference.builder.SingleModelBuilder;\n-import org.apache.ignite.ml.inference.parser.IgniteModelParser;\n-import org.apache.ignite.ml.inference.reader.ModelStorageModelReader;\n-import org.apache.ignite.ml.inference.storage.descriptor.ModelDescriptorStorage;\n-import org.apache.ignite.ml.inference.storage.descriptor.ModelDescriptorStorageFactory;\n-import org.apache.ignite.ml.inference.storage.model.ModelStorage;\n-import org.apache.ignite.ml.inference.storage.model.ModelStorageFactory;\n-import org.apache.ignite.ml.math.primitives.vector.Vector;\n-import org.apache.ignite.ml.math.primitives.vector.VectorUtils;\n+import org.apache.ignite.ml.inference.IgniteModelStorageUtil;\n+import org.apache.ignite.ml.sql.SQLFeatureLabelExtractor;\n+import org.apache.ignite.ml.sql.SQLFunctions;\n+import org.apache.ignite.ml.sql.SqlDatasetBuilder;\n import org.apache.ignite.ml.tree.DecisionTreeClassificationTrainer;\n import org.apache.ignite.ml.tree.DecisionTreeNode;\n \n@@ -65,7 +47,7 @@ public class DecisionTreeClassificationTrainerSQLInferenceExample {\n     private static final String TEST_DATA_RES = \"examples/src/main/resources/datasets/titanik_test.csv\";\n \n     /** Run example. */\n-    public static void main(String[] args) throws IOException {\n+    public static void main(String[] args) {\n         System.out.println(\">>> Decision tree classification trainer example started.\");\n \n         // Start ignite grid.\n@@ -122,59 +104,25 @@ public static void main(String[] args) throws IOException {\n             DecisionTreeClassificationTrainer trainer = new DecisionTreeClassificationTrainer(4, 0);\n \n             System.out.println(\">>> Perform training...\");\n-            IgniteCache<Integer, BinaryObject> titanicTrainCache = ignite.cache(\"SQL_PUBLIC_TITANIK_TRAIN\");\n             DecisionTreeNode mdl = trainer.fit(\n-                // We have to specify \".withKeepBinary(true)\" because SQL caches contains only binary objects and this\n-                // information has to be passed into the trainer.\n-                new CacheBasedDatasetBuilder<>(ignite, titanicTrainCache).withKeepBinary(true),\n-                (k, v) -> VectorUtils.of(\n-                    // We have to handle null values here to avoid NpE during unboxing.\n-                    replaceNull(v.<Integer>field(\"pclass\")),\n-                    \"male\".equals(v.<String>field(\"sex\")) ? 1 : 0,\n-                    replaceNull(v.<Double>field(\"age\")),\n-                    replaceNull(v.<Integer>field(\"sibsp\")),\n-                    replaceNull(v.<Integer>field(\"parch\")),\n-                    replaceNull(v.<Double>field(\"fare\"))\n-                ),\n-                (k, v) -> replaceNull(v.<Integer>field(\"survived\"))\n+                new SqlDatasetBuilder(ignite, \"SQL_PUBLIC_TITANIK_TRAIN\"),\n+                new SQLFeatureLabelExtractor()\n+                    .withFeatureFields(\"pclass\", \"age\", \"sibsp\", \"parch\", \"fare\")\n+                    .withFeatureField(\"sex\", e -> \"male\".equals(e) ? 1 : 0)\n+                    .withLabelField(\"survived\")\n             );\n \n             System.out.println(\">>> Saving model...\");\n \n             // Model storage is used to store raw serialized model.\n             System.out.println(\"Saving model into model storage...\");\n-            byte[] serializedMdl = serialize((IgniteModel<byte[], byte[]>)i -> {\n-                // Here we need to wrap model so that it accepts and returns byte array.\n-                try {\n-                    Vector input = deserialize(i);\n-                    return serialize(mdl.predict(input));\n-                }\n-                catch (IOException | ClassNotFoundException e) {\n-                    throw new RuntimeException(e);\n-                }\n-            });\n-\n-            ModelStorage storage = new ModelStorageFactory().getModelStorage(ignite);\n-            storage.mkdirs(\"/\");\n-            storage.putFile(\"/my_model\", serializedMdl);\n-\n-            // Model descriptor storage that is used to store model metadata.\n-            System.out.println(\"Saving model descriptor into model descriptor storage...\");\n-            ModelDescriptor desc = new ModelDescriptor(\n-                \"MyModel\",\n-                \"My Cool Model\",\n-                new ModelSignature(\"\", \"\", \"\"),\n-                new ModelStorageModelReader(\"/my_model\"),\n-                new IgniteModelParser<>()\n-            );\n-            ModelDescriptorStorage descStorage = new ModelDescriptorStorageFactory().getModelDescriptorStorage(ignite);\n-            descStorage.put(\"my_model\", desc);\n+            IgniteModelStorageUtil.saveModel(mdl, \"titanik_model_tree\");\n \n             // Making inference using saved model.\n             System.out.println(\"Inference...\");\n             try (QueryCursor<List<?>> cursor = cache.query(new SqlFieldsQuery(\"select \" +\n                 \"survived as truth, \" +\n-                \"predict('my_model', pclass, case sex when 'male' then 1 else 0 end, age, sibsp, parch, fare) as prediction \" +\n+                \"predict('titanik_model_tree', pclass, age, sibsp, parch, fare, case sex when 'male' then 1 else 0 end) as prediction \" +\n                 \"from titanik_train\"))) {\n                 // Print inference result.\n                 System.out.println(\"| Truth | Prediction |\");\n@@ -184,91 +132,4 @@ public static void main(String[] args) throws IOException {\n             }\n         }\n     }\n-\n-    /**\n-     * Replaces NULL values by 0.\n-     *\n-     * @param obj Input value.\n-     * @param <T> Type of value.\n-     * @return Input value of 0 if value is null.\n-     */\n-    private static <T extends Number> double replaceNull(T obj) {\n-        if (obj == null)\n-            return 0;\n-\n-        return obj.doubleValue();\n-    }\n-\n-    /**\n-     * SQL functions that should be defined and passed into cache configuration to extend list of functions available\n-     * in SQL interface.\n-     */\n-    public static class SQLFunctions {\n-        /**\n-         * Makes prediction using specified model name to extract model from model storage and specified input values\n-         * as input object for prediction.\n-         *\n-         * @param mdl Pretrained model.\n-         * @param x Input values.\n-         * @return Prediction.\n-         */\n-        @QuerySqlFunction\n-        public static double predict(String mdl, Double... x) {\n-            // Pretrained models work with vector of doubles so we need to replace null by 0 (or any other double).\n-            for (int i = 0; i < x.length; i++)\n-                if (x[i] == null)\n-                    x[i] = 0.0;\n-\n-            Ignite ignite = Ignition.ignite();\n-\n-            ModelDescriptorStorage descStorage = new ModelDescriptorStorageFactory().getModelDescriptorStorage(ignite);\n-            ModelDescriptor desc = descStorage.get(mdl);\n-\n-            Model<byte[], byte[]> infMdl = new SingleModelBuilder().build(desc.getReader(), desc.getParser());\n-\n-            Vector input = VectorUtils.of(x);\n-\n-            try {\n-                return deserialize(infMdl.predict(serialize(input)));\n-            }\n-            catch (IOException | ClassNotFoundException e) {\n-                throw new RuntimeException(e);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Serialized the specified object.\n-     *\n-     * @param o Object to be serialized.\n-     * @return Serialized object as byte array.\n-     * @throws IOException In case of exception.\n-     */\n-    private static <T extends Serializable> byte[] serialize(T o) throws IOException {\n-        try (ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-             ObjectOutputStream oos = new ObjectOutputStream(baos)) {\n-            oos.writeObject(o);\n-            oos.flush();\n-\n-            return baos.toByteArray();\n-        }\n-    }\n-\n-    /**\n-     * Deserialized object represented as a byte array.\n-     *\n-     * @param o Serialized object.\n-     * @param <T> Type of serialized object.\n-     * @return Deserialized object.\n-     * @throws IOException In case of exception.\n-     * @throws ClassNotFoundException In case of exception.\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    private static <T extends Serializable> T deserialize(byte[] o) throws IOException, ClassNotFoundException {\n-        try (ByteArrayInputStream bais = new ByteArrayInputStream(o);\n-             ObjectInputStream ois = new ObjectInputStream(bais)) {\n-\n-            return (T)ois.readObject();\n-        }\n-    }\n }"
        },
        {
            "sha": "a4f9a2dbd2def069160060aff099965ab63d6667",
            "filename": "examples/src/main/java/org/apache/ignite/examples/ml/sql/DecisionTreeClassificationTrainerSQLTableExample.java",
            "status": "modified",
            "additions": 28,
            "deletions": 32,
            "changes": 60,
            "blob_url": "https://github.com/apache/ignite/blob/1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b/examples%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fexamples%2Fml%2Fsql%2FDecisionTreeClassificationTrainerSQLTableExample.java",
            "raw_url": "https://github.com/apache/ignite/raw/1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b/examples%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fexamples%2Fml%2Fsql%2FDecisionTreeClassificationTrainerSQLTableExample.java",
            "contents_url": "https://api.github.com/repos/apache/ignite/contents/examples%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fexamples%2Fml%2Fsql%2FDecisionTreeClassificationTrainerSQLTableExample.java?ref=1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b",
            "patch": "@@ -21,14 +21,14 @@\n import org.apache.ignite.Ignite;\n import org.apache.ignite.IgniteCache;\n import org.apache.ignite.Ignition;\n-import org.apache.ignite.binary.BinaryObject;\n import org.apache.ignite.cache.query.QueryCursor;\n import org.apache.ignite.cache.query.SqlFieldsQuery;\n import org.apache.ignite.configuration.CacheConfiguration;\n import org.apache.ignite.internal.util.IgniteUtils;\n-import org.apache.ignite.ml.dataset.impl.cache.CacheBasedDatasetBuilder;\n import org.apache.ignite.ml.math.primitives.vector.Vector;\n import org.apache.ignite.ml.math.primitives.vector.VectorUtils;\n+import org.apache.ignite.ml.sql.SQLFeatureLabelExtractor;\n+import org.apache.ignite.ml.sql.SqlDatasetBuilder;\n import org.apache.ignite.ml.tree.DecisionTreeClassificationTrainer;\n import org.apache.ignite.ml.tree.DecisionTreeNode;\n \n@@ -102,21 +102,12 @@ public static void main(String[] args) {\n             DecisionTreeClassificationTrainer trainer = new DecisionTreeClassificationTrainer(4, 0);\n \n             System.out.println(\">>> Perform training...\");\n-            IgniteCache<Integer, BinaryObject> titanicTrainCache = ignite.cache(\"SQL_PUBLIC_TITANIK_TRAIN\");\n             DecisionTreeNode mdl = trainer.fit(\n-                // We have to specify \".withKeepBinary(true)\" because SQL caches contains only binary objects and this\n-                // information has to be passed into the trainer.\n-                new CacheBasedDatasetBuilder<>(ignite, titanicTrainCache).withKeepBinary(true),\n-                (k, v) -> VectorUtils.of(\n-                    // We have to handle null values here to avoid NpE during unboxing.\n-                    replaceNull(v.<Integer>field(\"pclass\")),\n-                    \"male\".equals(v.<String>field(\"sex\")) ? 1 : 0,\n-                    replaceNull(v.<Double>field(\"age\")),\n-                    replaceNull(v.<Integer>field(\"sibsp\")),\n-                    replaceNull(v.<Integer>field(\"parch\")),\n-                    replaceNull(v.<Double>field(\"fare\"))\n-                ),\n-                (k, v) -> replaceNull(v.<Integer>field(\"survived\"))\n+                new SqlDatasetBuilder(ignite, \"SQL_PUBLIC_TITANIK_TRAIN\"),\n+                new SQLFeatureLabelExtractor()\n+                    .withFeatureFields(\"pclass\", \"age\", \"sibsp\", \"parch\", \"fare\")\n+                    .withFeatureField(\"sex\", e -> \"male\".equals(e) ? 1 : 0)\n+                    .withLabelField(\"survived\")\n             );\n \n             System.out.println(\">>> Perform inference...\");\n@@ -128,15 +119,14 @@ public static void main(String[] args) {\n                 \"parch, \" +\n                 \"fare from titanik_test\"))) {\n                 for (List<?> passenger : cursor) {\n-                    Vector input = VectorUtils.of(\n-                        // We have to handle null values here to avoid NpE during unboxing.\n-                        replaceNull((Integer)passenger.get(0)),\n-                        \"male\".equals(passenger.get(1)) ? 1 : 0,\n-                        replaceNull((Double)passenger.get(2)),\n-                        replaceNull((Integer)passenger.get(3)),\n-                        replaceNull((Integer)passenger.get(4)),\n-                        replaceNull((Double)passenger.get(5))\n-                    );\n+                    Vector input = VectorUtils.of(new Double[]{\n+                        asDouble(passenger.get(0)),\n+                        \"male\".equals(passenger.get(1)) ? 1.0 : 0.0,\n+                        asDouble(passenger.get(2)),\n+                        asDouble(passenger.get(3)),\n+                        asDouble(passenger.get(4)),\n+                        asDouble(passenger.get(5))\n+                    });\n \n                     double prediction = mdl.predict(input);\n \n@@ -149,16 +139,22 @@ public static void main(String[] args) {\n     }\n \n     /**\n-     * Replaces NULL values by 0.\n+     * Converts specified number into double.\n      *\n-     * @param obj Input value.\n-     * @param <T> Type of value.\n-     * @return Input value of 0 if value is null.\n+     * @param obj Number.\n+     * @param <T> Type of number.\n+     * @return Double.\n      */\n-    private static <T extends Number> double replaceNull(T obj) {\n+    private static <T extends Number> Double asDouble(Object obj) {\n         if (obj == null)\n-            return 0;\n+            return null;\n \n-        return obj.doubleValue();\n+        if (obj instanceof Number) {\n+            Number num = (Number) obj;\n+\n+            return num.doubleValue();\n+        }\n+\n+        throw new IllegalArgumentException(\"Object is expected to be a number [obj=\" + obj + \"]\");\n     }\n }"
        },
        {
            "sha": "af0a1a560385f1ff065d598eb4162be523e439ec",
            "filename": "modules/ml/src/main/java/org/apache/ignite/ml/inference/IgniteModelStorageUtil.java",
            "status": "added",
            "additions": 257,
            "deletions": 0,
            "changes": 257,
            "blob_url": "https://github.com/apache/ignite/blob/1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b/modules%2Fml%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fml%2Finference%2FIgniteModelStorageUtil.java",
            "raw_url": "https://github.com/apache/ignite/raw/1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b/modules%2Fml%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fml%2Finference%2FIgniteModelStorageUtil.java",
            "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules%2Fml%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fml%2Finference%2FIgniteModelStorageUtil.java?ref=1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b",
            "patch": "@@ -0,0 +1,257 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.ml.inference;\n+\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.Ignition;\n+import org.apache.ignite.ml.IgniteModel;\n+import org.apache.ignite.ml.inference.builder.AsyncModelBuilder;\n+import org.apache.ignite.ml.inference.builder.SingleModelBuilder;\n+import org.apache.ignite.ml.inference.builder.SyncModelBuilder;\n+import org.apache.ignite.ml.inference.parser.IgniteModelParser;\n+import org.apache.ignite.ml.inference.reader.ModelStorageModelReader;\n+import org.apache.ignite.ml.inference.storage.descriptor.ModelDescriptorStorage;\n+import org.apache.ignite.ml.inference.storage.descriptor.ModelDescriptorStorageFactory;\n+import org.apache.ignite.ml.inference.storage.model.ModelStorage;\n+import org.apache.ignite.ml.inference.storage.model.ModelStorageFactory;\n+import org.apache.ignite.ml.math.primitives.vector.Vector;\n+import org.apache.ignite.ml.util.Utils;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Utils class that helps to operate with model storage and Ignite models.\n+ */\n+public class IgniteModelStorageUtil {\n+    /** Folder to be used to store Ignite models. */\n+    private static final String IGNITE_MDL_FOLDER = \"/ignite_models\";\n+\n+    /**\n+     * Saved specified model with specified name.\n+     *\n+     * @param mdl Model to be saved.\n+     * @param name Model name to be used.\n+     */\n+    public static void saveModel(IgniteModel<Vector, Double> mdl, String name) {\n+        IgniteModel<byte[], byte[]> mdlWrapper = wrapIgniteModel(mdl);\n+        byte[] serializedMdl = Utils.serialize(mdlWrapper);\n+        UUID mdlId = UUID.randomUUID();\n+\n+        saveModelStorage(serializedMdl, mdlId);\n+        saveModelDescriptorStorage(name, mdlId);\n+    }\n+\n+    /**\n+     * Retrieves Ignite model by name using {@link SingleModelBuilder}.\n+     *\n+     * @param name Model name.\n+     * @return Synchronous model built using {@link SingleModelBuilder}.\n+     */\n+    public static Model<Vector, Double> getModel(String name) {\n+        return getSyncModel(name, new SingleModelBuilder());\n+    }\n+\n+    /**\n+     * Retrieves Ignite model by name using synchronous model builder.\n+     *\n+     * @param name Model name.\n+     * @param mdlBldr Synchronous model builder.\n+     * @return Synchronous model built using specified model builder.\n+     */\n+    public static Model<Vector, Double> getSyncModel(String name, SyncModelBuilder mdlBldr) {\n+        ModelDescriptor desc = Objects.requireNonNull(getModelDescriptor(name), \"Model not found [name=\" + name + \"]\");\n+\n+        Model<byte[], byte[]> infMdl = mdlBldr.build(desc.getReader(), desc.getParser());\n+\n+        return unwrapIgniteSyncModel(infMdl);\n+    }\n+\n+    /**\n+     * Retrieves Ignite model by name using asynchronous model builder.\n+     *\n+     * @param name Model name.\n+     * @param mdlBldr Asynchronous model builder.\n+     * @return Asynchronous model built using specified model builder.\n+     */\n+    public static Model<Vector, Future<Double>> getAsyncModel(String name, AsyncModelBuilder mdlBldr) {\n+        ModelDescriptor desc = Objects.requireNonNull(getModelDescriptor(name), \"Model not found [name=\" + name + \"]\");\n+\n+        Model<byte[], Future<byte[]>> infMdl = mdlBldr.build(desc.getReader(), desc.getParser());\n+\n+        return unwrapIgniteAsyncModel(infMdl);\n+    }\n+\n+    /**\n+     * Saves specified serialized model into storage as a file.\n+     *\n+     * @param serializedMdl Serialized model represented as a byte array.\n+     * @param mdlId Model identifier.\n+     */\n+    private static void saveModelStorage(byte[] serializedMdl, UUID mdlId) {\n+        Ignite ignite = Ignition.ignite();\n+\n+        ModelStorage storage = new ModelStorageFactory().getModelStorage(ignite);\n+        storage.mkdirs(IGNITE_MDL_FOLDER);\n+        storage.putFile(IGNITE_MDL_FOLDER + \"/\" + mdlId, serializedMdl);\n+    }\n+\n+    /**\n+     * Saves model descriptor into descriptor storage.\n+     *\n+     * @param name Model name.\n+     * @param mdlId Model identifier used to find model in model storage (only with {@link ModelStorageModelReader}).\n+     */\n+    private static void saveModelDescriptorStorage(String name, UUID mdlId) {\n+        Ignite ignite = Ignition.ignite();\n+\n+        ModelDescriptorStorage descStorage = new ModelDescriptorStorageFactory().getModelDescriptorStorage(ignite);\n+        descStorage.put(name, new ModelDescriptor(\n+            name,\n+            null,\n+            new ModelSignature(null, null, null),\n+            new ModelStorageModelReader(IGNITE_MDL_FOLDER + \"/\" + mdlId),\n+            new IgniteModelParser<>()\n+        ));\n+    }\n+\n+    /**\n+     * Retirieves model descriptor.\n+     *\n+     * @param name Model name.\n+     * @return Model descriptor.\n+     */\n+    private static ModelDescriptor getModelDescriptor(String name) {\n+        Ignite ignite = Ignition.ignite();\n+\n+        ModelDescriptorStorage descStorage = new ModelDescriptorStorageFactory().getModelDescriptorStorage(ignite);\n+\n+        return descStorage.get(name);\n+    }\n+\n+    /**\n+     * Wraps Ignite model so that model accepts and returns serialized objects (byte arrays).\n+     *\n+     * @param mdl Ignite model.\n+     * @return Ignite model that accepts and returns serialized objects (byte arrays).\n+     */\n+    private static IgniteModel<byte[], byte[]> wrapIgniteModel(IgniteModel<Vector, Double> mdl) {\n+        return input -> {\n+            Vector deserializedInput = Utils.deserialize(input);\n+            Double output = mdl.predict(deserializedInput);\n+\n+            return Utils.serialize(output);\n+        };\n+    }\n+\n+    /**\n+     * Unwraps Ignite model so that model accepts and returns deserialized objects ({@link Vector} and {@link Double}).\n+     *\n+     * @param mdl Ignite model.\n+     * @return Ignite model that accepts and returns deserialized objects ({@link Vector} and {@link Double}).\n+     */\n+    private static Model<Vector, Double> unwrapIgniteSyncModel(Model<byte[], byte[]> mdl) {\n+        return new Model<Vector, Double>() {\n+            /** {@inheritDoc} */\n+            @Override public Double predict(Vector input) {\n+                byte[] serializedInput = Utils.serialize(input);\n+                byte[] serializedOutput = mdl.predict(serializedInput);\n+\n+                return Utils.deserialize(serializedOutput);\n+            }\n+\n+            /** {@inheritDoc} */\n+            @Override public void close() {\n+                mdl.close();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Unwraps Ignite model so that model accepts and returns deserialized objects ({@link Vector} and {@link Double}).\n+     *\n+     * @param mdl Ignite model.\n+     * @return Ignite model that accepts and returns deserialized objects ({@link Vector} and {@link Double}).\n+     */\n+    private static Model<Vector, Future<Double>> unwrapIgniteAsyncModel(Model<byte[], Future<byte[]>> mdl) {\n+        return new Model<Vector, Future<Double>>() {\n+            /** {@inheritDoc} */\n+            @Override public Future<Double> predict(Vector input) {\n+                byte[] serializedInput = Utils.serialize(input);\n+                Future<byte[]> serializedOutput = mdl.predict(serializedInput);\n+\n+                return new FutureDeserializationWrapper<>(serializedOutput);\n+            }\n+\n+            /** {@inheritDoc} */\n+            @Override public void close() {\n+                mdl.close();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Future deserialization wrapper that accepts future that returns serialized object and turns it into future that\n+     * returns deserialized object.\n+     *\n+     * @param <T> Type of return value.\n+     */\n+    private static class FutureDeserializationWrapper<T> implements Future<T> {\n+        /** Delegate. */\n+        private final Future<byte[]> delegate;\n+\n+        /**\n+         * Constructs a new instance of future deserialization wrapper.\n+         *\n+         * @param delegate Delegate.\n+         */\n+        public FutureDeserializationWrapper(Future<byte[]> delegate) {\n+            this.delegate = delegate;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public boolean cancel(boolean mayInterruptIfRunning) {\n+            return delegate.cancel(mayInterruptIfRunning);\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public boolean isCancelled() {\n+            return delegate.isCancelled();\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public boolean isDone() {\n+            return delegate.isDone();\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public T get() throws InterruptedException, ExecutionException {\n+            return (T)Utils.deserialize(delegate.get());\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public T get(long timeout, @NotNull TimeUnit unit) throws InterruptedException, ExecutionException,\n+            TimeoutException {\n+            return (T)Utils.deserialize(delegate.get(timeout, unit));\n+        }\n+    }\n+}"
        },
        {
            "sha": "4ed3a6acd1fb86a905222e6190163e28d80992d4",
            "filename": "modules/ml/src/main/java/org/apache/ignite/ml/sql/SQLFeatureLabelExtractor.java",
            "status": "added",
            "additions": 122,
            "deletions": 0,
            "changes": 122,
            "blob_url": "https://github.com/apache/ignite/blob/1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b/modules%2Fml%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fml%2Fsql%2FSQLFeatureLabelExtractor.java",
            "raw_url": "https://github.com/apache/ignite/raw/1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b/modules%2Fml%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fml%2Fsql%2FSQLFeatureLabelExtractor.java",
            "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules%2Fml%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fml%2Fsql%2FSQLFeatureLabelExtractor.java?ref=1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b",
            "patch": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.ml.sql;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+import org.apache.ignite.binary.BinaryObject;\n+import org.apache.ignite.ml.math.primitives.vector.Vector;\n+import org.apache.ignite.ml.math.primitives.vector.impl.DenseVector;\n+import org.apache.ignite.ml.structures.LabeledVector;\n+import org.apache.ignite.ml.trainers.FeatureLabelExtractor;\n+\n+/**\n+ * SQL feature label extractor that should be used to extract features and label from binary objects in SQL table.\n+ */\n+public class SQLFeatureLabelExtractor implements FeatureLabelExtractor<Object, BinaryObject, Double> {\n+    /** Feature extractors for each needed fields as a list of functions. */\n+    private final List<Function<BinaryObject, Number>> featureExtractors = new ArrayList<>();\n+\n+    /** Label extractor as a function. */\n+    private Function<BinaryObject, Number> lbExtractor;\n+\n+    /** {@inheritDoc} */\n+    @Override public LabeledVector<Double> extract(Object o, BinaryObject obj) {\n+        Vector features = new DenseVector(featureExtractors.size());\n+\n+        int i = 0;\n+        for (Function<BinaryObject, Number> featureExtractor : featureExtractors) {\n+            Number val = featureExtractor.apply(obj);\n+\n+            if (val != null)\n+                features.set(i, val.doubleValue());\n+\n+            i++;\n+        }\n+\n+        Number lb = lbExtractor.apply(obj);\n+\n+        return new LabeledVector<>(features, lb == null ? null : lb.doubleValue());\n+    }\n+\n+    /**\n+     * Adds feature extractor for the field with specified name and value transformer.\n+     *\n+     * @param name Field name.\n+     * @param transformer Field value transformer.\n+     * @param <T> Field type.\n+     * @return This SQL feature label extractor.\n+     */\n+    public <T> SQLFeatureLabelExtractor withFeatureField(String name, Function<T, Number> transformer) {\n+        featureExtractors.add(obj -> transformer.apply(obj.<T>field(name)));\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Adds feature extractor for the field with specified name. Field should be numeric (subclass of {@link Number}).\n+     *\n+     * @param name Field name.\n+     * @return This SQL feature label extractor.\n+     */\n+    public SQLFeatureLabelExtractor withFeatureField(String name) {\n+        featureExtractors.add(obj -> obj.field(name));\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Adds feature extractor for the field with specified name. Field should be numeric (subclass of {@link Number}).\n+     *\n+     * @param names Field names.\n+     * @return This SQL feature label extractor.\n+     */\n+    public SQLFeatureLabelExtractor withFeatureFields(String... names) {\n+        for (String name : names)\n+            withFeatureField(name);\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Adds label extractor.\n+     *\n+     * @param name Field name.\n+     * @return This SQL feature label extractor.\n+     */\n+    public SQLFeatureLabelExtractor withLabelField(String name) {\n+        lbExtractor = obj -> obj.field(name);\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Adds label extractor.\n+     *\n+     * @param name Field name.\n+     * @param transformer Field value transformer.\n+     * @param <T> Type of field.\n+     * @return This SQL feature label extractor.\n+     */\n+    public <T> SQLFeatureLabelExtractor withLabelField(String name, Function<T, Number> transformer) {\n+        lbExtractor = obj -> transformer.apply(obj.<T>field(name));\n+\n+        return this;\n+    }\n+}"
        },
        {
            "sha": "a12d69bdc15d5a11b6f39103dc99dc3e309f1a4f",
            "filename": "modules/ml/src/main/java/org/apache/ignite/ml/sql/SQLFunctions.java",
            "status": "added",
            "additions": 48,
            "deletions": 0,
            "changes": 48,
            "blob_url": "https://github.com/apache/ignite/blob/1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b/modules%2Fml%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fml%2Fsql%2FSQLFunctions.java",
            "raw_url": "https://github.com/apache/ignite/raw/1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b/modules%2Fml%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fml%2Fsql%2FSQLFunctions.java",
            "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules%2Fml%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fml%2Fsql%2FSQLFunctions.java?ref=1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b",
            "patch": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.ml.sql;\n+\n+import java.util.Arrays;\n+import org.apache.ignite.cache.query.annotations.QuerySqlFunction;\n+import org.apache.ignite.ml.inference.IgniteModelStorageUtil;\n+import org.apache.ignite.ml.inference.Model;\n+import org.apache.ignite.ml.math.primitives.vector.Vector;\n+import org.apache.ignite.ml.math.primitives.vector.VectorUtils;\n+\n+/**\n+ * SQL functions that should be defined and passed into cache configuration to extend list of functions available\n+ * in SQL interface.\n+ */\n+public class SQLFunctions {\n+    /**\n+     * Makes prediction using specified model name to extract model from model storage and specified input values\n+     * as input object for prediction.\n+     *\n+     * @param mdl Pretrained model.\n+     * @param x Input values.\n+     * @return Prediction.\n+     */\n+    @QuerySqlFunction\n+    public static double predict(String mdl, Double... x) {\n+        System.out.println(\"Prediction for \" + Arrays.toString(x));\n+\n+        try (Model<Vector, Double> infMdl = IgniteModelStorageUtil.getModel(mdl)) {\n+            return infMdl.predict(VectorUtils.of(x));\n+        }\n+    }\n+}"
        },
        {
            "sha": "4d31ca3b98336e241281d8d7e93440b6ec20ca89",
            "filename": "modules/ml/src/main/java/org/apache/ignite/ml/sql/SqlDatasetBuilder.java",
            "status": "added",
            "additions": 64,
            "deletions": 0,
            "changes": 64,
            "blob_url": "https://github.com/apache/ignite/blob/1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b/modules%2Fml%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fml%2Fsql%2FSqlDatasetBuilder.java",
            "raw_url": "https://github.com/apache/ignite/raw/1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b/modules%2Fml%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fml%2Fsql%2FSqlDatasetBuilder.java",
            "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules%2Fml%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fml%2Fsql%2FSqlDatasetBuilder.java?ref=1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b",
            "patch": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.ml.sql;\n+\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.binary.BinaryObject;\n+import org.apache.ignite.lang.IgniteBiPredicate;\n+import org.apache.ignite.ml.dataset.UpstreamTransformerBuilder;\n+import org.apache.ignite.ml.dataset.impl.cache.CacheBasedDataset;\n+import org.apache.ignite.ml.dataset.impl.cache.CacheBasedDatasetBuilder;\n+\n+/**\n+ * Subclass of {@link CacheBasedDatasetBuilder} that should be used to work with SQL tables.\n+ */\n+public class SqlDatasetBuilder extends CacheBasedDatasetBuilder<Object, BinaryObject> {\n+    /**\n+     * Constructs a new instance of cache based dataset builder that makes {@link CacheBasedDataset} with default\n+     * predicate that passes all upstream entries to dataset.\n+     *\n+     * @param ignite Ignite instance.\n+     * @param upstreamCache Name of Ignite Cache with {@code upstream} data.\n+     */\n+    public SqlDatasetBuilder(Ignite ignite, String upstreamCache) {\n+        this(ignite, upstreamCache, (a, b) -> true);\n+    }\n+\n+    /**\n+     * Constructs a new instance of cache based dataset builder that makes {@link CacheBasedDataset}.\n+     *\n+     * @param ignite Ignite instance.\n+     * @param upstreamCache Name of Ignite Cache with {@code upstream} data.\n+     * @param filter Filter for {@code upstream} data.\n+     */\n+    public SqlDatasetBuilder(Ignite ignite, String upstreamCache, IgniteBiPredicate<Object, BinaryObject> filter) {\n+        this(ignite, upstreamCache, filter, UpstreamTransformerBuilder.identity());\n+    }\n+\n+    /**\n+     * Constructs a new instance of cache based dataset builder that makes {@link CacheBasedDataset}.\n+     *\n+     * @param ignite Ignite instance.\n+     * @param upstreamCache Name of Ignite Cache with {@code upstream} data.\n+     * @param filter Filter for {@code upstream} data.\n+     */\n+    public SqlDatasetBuilder(Ignite ignite, String upstreamCache, IgniteBiPredicate<Object, BinaryObject> filter,\n+        UpstreamTransformerBuilder transformerBuilder) {\n+        super(ignite, ignite.cache(upstreamCache), filter, transformerBuilder, true);\n+    }\n+}"
        },
        {
            "sha": "9bc590d1a213e7be9292cb6d89c8f3b7c24cb659",
            "filename": "modules/ml/src/main/java/org/apache/ignite/ml/sql/package-info.java",
            "status": "added",
            "additions": 22,
            "deletions": 0,
            "changes": 22,
            "blob_url": "https://github.com/apache/ignite/blob/1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b/modules%2Fml%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fml%2Fsql%2Fpackage-info.java",
            "raw_url": "https://github.com/apache/ignite/raw/1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b/modules%2Fml%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fml%2Fsql%2Fpackage-info.java",
            "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules%2Fml%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fml%2Fsql%2Fpackage-info.java?ref=1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b",
            "patch": "@@ -0,0 +1,22 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/**\n+ * <!-- Package description. -->\n+ * Contains util classes that help to work with machine learning models in SQL and train models on data from SQL tables.\n+ */\n+package org.apache.ignite.ml.sql;\n\\ No newline at end of file"
        },
        {
            "sha": "016c4681f54cbfa43875db7f4c3829b04ef03057",
            "filename": "modules/ml/src/main/java/org/apache/ignite/ml/util/Utils.java",
            "status": "modified",
            "additions": 39,
            "deletions": 0,
            "changes": 39,
            "blob_url": "https://github.com/apache/ignite/blob/1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b/modules%2Fml%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fml%2Futil%2FUtils.java",
            "raw_url": "https://github.com/apache/ignite/raw/1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b/modules%2Fml%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fml%2Futil%2FUtils.java",
            "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules%2Fml%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fignite%2Fml%2Futil%2FUtils.java?ref=1e0a7c21ea77ae2684a2d0b5d809b4241567bd2b",
            "patch": "@@ -22,6 +22,7 @@\n import java.io.IOException;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n import java.util.Iterator;\n import java.util.Random;\n import java.util.Spliterator;\n@@ -130,4 +131,42 @@ public static <T> Stream<T> asStream(Iterator<T> iter) {\n                 Spliterators.spliteratorUnknownSize(iter, Spliterator.ORDERED),\n                 false);\n     }\n+\n+    /**\n+     * Serialized the specified object.\n+     *\n+     * @param o Object to be serialized.\n+     * @return Serialized object as byte array.\n+     */\n+    public static <T extends Serializable> byte[] serialize(T o) {\n+        try (ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+             ObjectOutputStream oos = new ObjectOutputStream(baos)) {\n+            oos.writeObject(o);\n+            oos.flush();\n+\n+            return baos.toByteArray();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    /**\n+     * Deserialized object represented as a byte array.\n+     *\n+     * @param o Serialized object.\n+     * @param <T> Type of serialized object.\n+     * @return Deserialized object.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T extends Serializable> T deserialize(byte[] o) {\n+        try (ByteArrayInputStream bais = new ByteArrayInputStream(o);\n+             ObjectInputStream ois = new ObjectInputStream(bais)) {\n+\n+            return (T)ois.readObject();\n+        }\n+        catch (IOException | ClassNotFoundException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n }"
        }
    ]
}