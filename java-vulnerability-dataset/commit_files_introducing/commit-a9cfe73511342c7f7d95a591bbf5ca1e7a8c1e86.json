{
    "sha": "a9cfe73511342c7f7d95a591bbf5ca1e7a8c1e86",
    "node_id": "MDY6Q29tbWl0MTA3Mjg0NTphOWNmZTczNTExMzQyYzdmN2Q5NWE1OTFiYmY1Y2ExZTdhOGMxZTg2",
    "commit": {
        "author": {
            "name": "Oliver Gierke",
            "email": "ogierke@vmware.com",
            "date": "2012-08-29T15:16:33Z"
        },
        "committer": {
            "name": "Oliver Gierke",
            "email": "ogierke@vmware.com",
            "date": "2012-08-29T15:16:33Z"
        },
        "message": "DATAJPA-252 - Applying sort to manually defined queries considers joins.\n\nIf a manually defined query uses outer joins, prefixing the sort criteria handed to the execution of the method causes an additional join being added as the JPA considers path expressions to be inner joins always (see Sect. 4.4.4, JPA 2.0 spec).\n\nWe now parse the outer join aliases potentially used in a manually defined JPQL query and do not prefix the query with the root entity's alias.",
        "tree": {
            "sha": "26df54c23f7d3c95f213f944658f49650e663fe4",
            "url": "https://api.github.com/repos/spring-projects/spring-data-jpa/git/trees/26df54c23f7d3c95f213f944658f49650e663fe4"
        },
        "url": "https://api.github.com/repos/spring-projects/spring-data-jpa/git/commits/a9cfe73511342c7f7d95a591bbf5ca1e7a8c1e86",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/spring-projects/spring-data-jpa/commits/a9cfe73511342c7f7d95a591bbf5ca1e7a8c1e86",
    "html_url": "https://github.com/spring-projects/spring-data-jpa/commit/a9cfe73511342c7f7d95a591bbf5ca1e7a8c1e86",
    "comments_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/commits/a9cfe73511342c7f7d95a591bbf5ca1e7a8c1e86/comments",
    "author": {
        "login": "odrotbohm",
        "id": 128577,
        "node_id": "MDQ6VXNlcjEyODU3Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/128577?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/odrotbohm",
        "html_url": "https://github.com/odrotbohm",
        "followers_url": "https://api.github.com/users/odrotbohm/followers",
        "following_url": "https://api.github.com/users/odrotbohm/following{/other_user}",
        "gists_url": "https://api.github.com/users/odrotbohm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/odrotbohm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/odrotbohm/subscriptions",
        "organizations_url": "https://api.github.com/users/odrotbohm/orgs",
        "repos_url": "https://api.github.com/users/odrotbohm/repos",
        "events_url": "https://api.github.com/users/odrotbohm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/odrotbohm/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "odrotbohm",
        "id": 128577,
        "node_id": "MDQ6VXNlcjEyODU3Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/128577?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/odrotbohm",
        "html_url": "https://github.com/odrotbohm",
        "followers_url": "https://api.github.com/users/odrotbohm/followers",
        "following_url": "https://api.github.com/users/odrotbohm/following{/other_user}",
        "gists_url": "https://api.github.com/users/odrotbohm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/odrotbohm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/odrotbohm/subscriptions",
        "organizations_url": "https://api.github.com/users/odrotbohm/orgs",
        "repos_url": "https://api.github.com/users/odrotbohm/repos",
        "events_url": "https://api.github.com/users/odrotbohm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/odrotbohm/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "0e6c4fd36a845f27b82e8be12a442ca12e419e7d",
            "url": "https://api.github.com/repos/spring-projects/spring-data-jpa/commits/0e6c4fd36a845f27b82e8be12a442ca12e419e7d",
            "html_url": "https://github.com/spring-projects/spring-data-jpa/commit/0e6c4fd36a845f27b82e8be12a442ca12e419e7d"
        }
    ],
    "stats": {
        "total": 140,
        "additions": 129,
        "deletions": 11
    },
    "files": [
        {
            "sha": "4405e024d45f58b9379ce735b70e3881ee038005",
            "filename": "src/main/java/org/springframework/data/jpa/repository/query/QueryUtils.java",
            "status": "modified",
            "additions": 64,
            "deletions": 6,
            "changes": 70,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/a9cfe73511342c7f7d95a591bbf5ca1e7a8c1e86/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FQueryUtils.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/a9cfe73511342c7f7d95a591bbf5ca1e7a8c1e86/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FQueryUtils.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Fmain%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FQueryUtils.java?ref=a9cfe73511342c7f7d95a591bbf5ca1e7a8c1e86",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2008-2011 the original author or authors.\n+ * Copyright 2008-2012 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -18,9 +18,11 @@\n import static java.util.regex.Pattern.*;\n \n import java.util.ArrayList;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Locale;\n+import java.util.Set;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n@@ -38,6 +40,7 @@\n import org.springframework.data.domain.Sort.Order;\n import org.springframework.data.mapping.PropertyPath;\n import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n \n /**\n  * Simple utility class to create JPA queries.\n@@ -60,6 +63,9 @@ public abstract class QueryUtils {\n \tprivate static final String IDENTIFIER = \"[\\\\p{Alnum}._$]+\";\n \tprivate static final String IDENTIFIER_GROUP = String.format(\"(%s)\", IDENTIFIER);\n \n+\tprivate static final String LEFT_JOIN = \"left (outer )?join \" + IDENTIFIER + \" (as )?\" + IDENTIFIER_GROUP;\n+\tprivate static final Pattern LEFT_JOIN_PATTERN = Pattern.compile(LEFT_JOIN, Pattern.CASE_INSENSITIVE);\n+\n \tstatic {\n \n \t\tStringBuilder builder = new StringBuilder();\n@@ -128,24 +134,76 @@ public static String applySorting(String query, Sort sort, String alias) {\n \n \t\tAssert.hasText(query);\n \n-\t\tif (null == sort) {\n+\t\tif (null == sort || !sort.iterator().hasNext()) {\n \t\t\treturn query;\n \t\t}\n \n \t\tStringBuilder builder = new StringBuilder(query);\n-\t\tbuilder.append(\" order by\");\n+\n+\t\tif (!query.contains(\"order by\")) {\n+\t\t\tbuilder.append(\" order by \");\n+\t\t} else {\n+\t\t\tbuilder.append(\", \");\n+\t\t}\n+\n+\t\tSet<String> aliases = getOuterJoinAliases(query);\n \n \t\tfor (Order order : sort) {\n-\t\t\tbuilder.append(String.format(\" %s.%s %s,\", alias, order.getProperty(), toJpaDirection(order)));\n+\t\t\tbuilder.append(getOrderClause(aliases, alias, order));\n \t\t}\n \n-\t\tbuilder.deleteCharAt(builder.length() - 1);\n+\t\tbuilder.delete(builder.length() - 2, builder.length());\n \n \t\treturn builder.toString();\n \t}\n \n-\tpublic static String toJpaDirection(Order order) {\n+\t/**\n+\t * Returns the order clause for the given {@link Order}. Will prefix the clause with the given alias if the referenced\n+\t * property refers to a join alias.\n+\t * \n+\t * @param joinAliases the join aliases of the original query.\n+\t * @param alias the alias for the root entity.\n+\t * @param order the order object to build the clause for.\n+\t * @return\n+\t */\n+\tprivate static String getOrderClause(Set<String> joinAliases, String alias, Order order) {\n+\n+\t\tString property = order.getProperty();\n+\t\tboolean qualifyReference = true;\n+\n+\t\tfor (String joinAlias : joinAliases) {\n+\t\t\tif (property.startsWith(joinAlias)) {\n+\t\t\t\tqualifyReference = false;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn String.format(\"%s%s %s, \", qualifyReference ? alias + \".\" : \"\", property, toJpaDirection(order));\n+\t}\n+\n+\t/**\n+\t * Returns the aliases used for {@code left (outer) join}s.\n+\t * \n+\t * @param query\n+\t * @return\n+\t */\n+\tstatic Set<String> getOuterJoinAliases(String query) {\n+\n+\t\tSet<String> result = new HashSet<String>();\n+\t\tMatcher matcher = LEFT_JOIN_PATTERN.matcher(query);\n+\n+\t\twhile (matcher.find()) {\n+\n+\t\t\tString alias = matcher.group(3);\n+\t\t\tif (StringUtils.hasText(alias)) {\n+\t\t\t\tresult.add(alias);\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn result;\n+\t}\n \n+\tprivate static String toJpaDirection(Order order) {\n \t\treturn order.getDirection().name().toLowerCase(Locale.US);\n \t}\n "
        },
        {
            "sha": "90571a87ee1bd409b60031aea35fb24ce238336d",
            "filename": "src/test/java/org/springframework/data/jpa/repository/UserRepositoryTests.java",
            "status": "modified",
            "additions": 13,
            "deletions": 0,
            "changes": 13,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/a9cfe73511342c7f7d95a591bbf5ca1e7a8c1e86/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2FUserRepositoryTests.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/a9cfe73511342c7f7d95a591bbf5ca1e7a8c1e86/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2FUserRepositoryTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2FUserRepositoryTests.java?ref=a9cfe73511342c7f7d95a591bbf5ca1e7a8c1e86",
            "patch": "@@ -921,6 +921,19 @@ public void ordersByReferencedEntityCorrectly() {\n \t\tassertThat(all.getContent().isEmpty(), is(false));\r\n \t}\r\n \r\n+\t/**\r\n+\t * @see DATAJPA-252\r\n+\t */\r\n+\t@Test\r\n+\tpublic void bindsSortingToOuterJoinCorrectly() {\r\n+\r\n+\t\tflushTestUsers();\r\n+\r\n+\t\t// Managers not set, make sure adding the sort does not rule out those Users\r\n+\t\tPage<User> result = repository.findAllPaged(new PageRequest(0, 10, new Sort(\"manager.lastname\")));\r\n+\t\tassertThat(result.getContent(), hasSize((int) repository.count()));\r\n+\t}\r\n+\r\n \tprivate Page<User> executeSpecWithSort(Sort sort) {\r\n \r\n \t\tflushTestUsers();\r"
        },
        {
            "sha": "2c144ca09d469c9c3225eaea63bebfffac159ab2",
            "filename": "src/test/java/org/springframework/data/jpa/repository/query/QueryUtilsUnitTests.java",
            "status": "modified",
            "additions": 50,
            "deletions": 3,
            "changes": 53,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/a9cfe73511342c7f7d95a591bbf5ca1e7a8c1e86/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FQueryUtilsUnitTests.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/a9cfe73511342c7f7d95a591bbf5ca1e7a8c1e86/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FQueryUtilsUnitTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fquery%2FQueryUtilsUnitTests.java?ref=a9cfe73511342c7f7d95a591bbf5ca1e7a8c1e86",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2008-2011 the original author or authors.\n+ * Copyright 2008-2012 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -15,12 +15,15 @@\n  */\n package org.springframework.data.jpa.repository.query;\n \n-import static org.hamcrest.CoreMatchers.*;\n+import static org.hamcrest.Matchers.*;\n import static org.junit.Assert.*;\n import static org.springframework.data.jpa.repository.query.QueryUtils.*;\n \n+import java.util.Set;\n+\n import org.hamcrest.Matcher;\n import org.junit.Test;\n+import org.springframework.data.domain.Sort;\n \n /**\n  * Unit test for {@link QueryUtils}.\n@@ -131,8 +134,52 @@ public void allowsFullyQualifiedEntityNamesInQuery() {\n \t\tassertCountQuery(FQ_QUERY, \"select count(u) from org.acme.domain.User$Foo_Bar u\");\n \t}\n \n-\tprivate void assertCountQuery(String originalQuery, String countQuery) {\n+\t/**\n+\t * @see DATAJPA-252\n+\t */\n+\t@Test\n+\tpublic void detectsJoinAliasesCorrectly() {\n+\n+\t\tSet<String> aliases = getOuterJoinAliases(\"select p from Person p left outer join x.foo b2_$ar where \u2026\");\n+\t\tassertThat(aliases, hasSize(1));\n+\t\tassertThat(aliases, hasItems(\"b2_$ar\"));\n \n+\t\taliases = getOuterJoinAliases(\"select p from Person p left join x.foo b2_$ar where \u2026\");\n+\t\tassertThat(aliases, hasSize(1));\n+\t\tassertThat(aliases, hasItems(\"b2_$ar\"));\n+\n+\t\taliases = getOuterJoinAliases(\"select p from Person p left outer join x.foo as b2_$ar, left join x.bar as foo where \u2026\");\n+\t\tassertThat(aliases, hasSize(2));\n+\t\tassertThat(aliases, hasItems(\"b2_$ar\", \"foo\"));\n+\n+\t\taliases = getOuterJoinAliases(\"select p from Person p left join x.foo as b2_$ar, left outer join x.bar foo where \u2026\");\n+\t\tassertThat(aliases, hasSize(2));\n+\t\tassertThat(aliases, hasItems(\"b2_$ar\", \"foo\"));\n+\t}\n+\n+\t/**\n+\t * @see DATAJPA-252\n+\t */\n+\t@Test\n+\tpublic void doesNotPrefixOrderReferenceIfOuterJoinAliasDetected() {\n+\n+\t\tString query = \"select p from Person p left join p.address address\";\n+\t\tassertThat(applySorting(query, new Sort(\"address.city\")), endsWith(\"order by address.city asc\"));\n+\t\tassertThat(applySorting(query, new Sort(\"address.city\", \"lastname\"), \"p\"),\n+\t\t\t\tendsWith(\"order by address.city asc, p.lastname asc\"));\n+\t}\n+\n+\t/**\n+\t * @see DATAJPA-252\n+\t */\n+\t@Test\n+\tpublic void extendsExistingOrderByClausesCorrectly() {\n+\n+\t\tString query = \"select p from Person p order by p.lastname asc\";\n+\t\tassertThat(applySorting(query, new Sort(\"firstname\"), \"p\"), endsWith(\"order by p.lastname asc, p.firstname asc\"));\n+\t}\n+\n+\tprivate void assertCountQuery(String originalQuery, String countQuery) {\n \t\tassertThat(createCountQueryFor(originalQuery), is(countQuery));\n \t}\n }"
        },
        {
            "sha": "af36e4650782d37e62508578025b9580335cb3ea",
            "filename": "src/test/java/org/springframework/data/jpa/repository/sample/UserRepository.java",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/spring-projects/spring-data-jpa/blob/a9cfe73511342c7f7d95a591bbf5ca1e7a8c1e86/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsample%2FUserRepository.java",
            "raw_url": "https://github.com/spring-projects/spring-data-jpa/raw/a9cfe73511342c7f7d95a591bbf5ca1e7a8c1e86/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsample%2FUserRepository.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-data-jpa/contents/src%2Ftest%2Fjava%2Forg%2Fspringframework%2Fdata%2Fjpa%2Frepository%2Fsample%2FUserRepository.java?ref=a9cfe73511342c7f7d95a591bbf5ca1e7a8c1e86",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2008-2011 the original author or authors.\n+ * Copyright 2008-2012 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -68,7 +68,7 @@ public interface UserRepository extends JpaRepository<User, Integer>, JpaSpecifi\n \t */\n \tUser findByEmailAddress(String emailAddress);\n \n-\t@Query(\"select u from User u \")\n+\t@Query(\"select u from User u left outer join u.manager as manager\")\n \tPage<User> findAllPaged(Pageable pageable);\n \n \t/**"
        }
    ]
}