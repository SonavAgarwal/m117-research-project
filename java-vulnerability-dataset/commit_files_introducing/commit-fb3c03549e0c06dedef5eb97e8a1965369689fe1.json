{
    "sha": "fb3c03549e0c06dedef5eb97e8a1965369689fe1",
    "node_id": "MDY6Q29tbWl0Njk2NjYxOTpmYjNjMDM1NDllMGMwNmRlZGVmNWViOTdlOGExOTY1MzY5Njg5ZmUx",
    "commit": {
        "author": {
            "name": "James Strachan",
            "email": "james.strachan@gmail.com",
            "date": "2014-10-14T14:56:32Z"
        },
        "committer": {
            "name": "James Strachan",
            "email": "james.strachan@gmail.com",
            "date": "2014-10-14T14:57:33Z"
        },
        "message": "add support for uploading of files into the wiki. fixes #1664",
        "tree": {
            "sha": "9e24808c62c2ad9bccd6c910146547a6601deafd",
            "url": "https://api.github.com/repos/hawtio/hawtio/git/trees/9e24808c62c2ad9bccd6c910146547a6601deafd"
        },
        "url": "https://api.github.com/repos/hawtio/hawtio/git/commits/fb3c03549e0c06dedef5eb97e8a1965369689fe1",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/hawtio/hawtio/commits/fb3c03549e0c06dedef5eb97e8a1965369689fe1",
    "html_url": "https://github.com/hawtio/hawtio/commit/fb3c03549e0c06dedef5eb97e8a1965369689fe1",
    "comments_url": "https://api.github.com/repos/hawtio/hawtio/commits/fb3c03549e0c06dedef5eb97e8a1965369689fe1/comments",
    "author": {
        "login": "jstrachan",
        "id": 30140,
        "node_id": "MDQ6VXNlcjMwMTQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/30140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jstrachan",
        "html_url": "https://github.com/jstrachan",
        "followers_url": "https://api.github.com/users/jstrachan/followers",
        "following_url": "https://api.github.com/users/jstrachan/following{/other_user}",
        "gists_url": "https://api.github.com/users/jstrachan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jstrachan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jstrachan/subscriptions",
        "organizations_url": "https://api.github.com/users/jstrachan/orgs",
        "repos_url": "https://api.github.com/users/jstrachan/repos",
        "events_url": "https://api.github.com/users/jstrachan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jstrachan/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "jstrachan",
        "id": 30140,
        "node_id": "MDQ6VXNlcjMwMTQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/30140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jstrachan",
        "html_url": "https://github.com/jstrachan",
        "followers_url": "https://api.github.com/users/jstrachan/followers",
        "following_url": "https://api.github.com/users/jstrachan/following{/other_user}",
        "gists_url": "https://api.github.com/users/jstrachan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jstrachan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jstrachan/subscriptions",
        "organizations_url": "https://api.github.com/users/jstrachan/orgs",
        "repos_url": "https://api.github.com/users/jstrachan/repos",
        "events_url": "https://api.github.com/users/jstrachan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jstrachan/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "0e975fbba454ebba5507f581331013c1bf93200c",
            "url": "https://api.github.com/repos/hawtio/hawtio/commits/0e975fbba454ebba5507f581331013c1bf93200c",
            "html_url": "https://github.com/hawtio/hawtio/commit/0e975fbba454ebba5507f581331013c1bf93200c"
        }
    ],
    "stats": {
        "total": 518,
        "additions": 474,
        "deletions": 44
    },
    "files": [
        {
            "sha": "8cea2efe78b210c79bf89eeb79b33f153cf6929e",
            "filename": "hawtio-base/src/main/webapp/WEB-INF/web.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/hawtio/hawtio/blob/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-base%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml",
            "raw_url": "https://github.com/hawtio/hawtio/raw/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-base%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml",
            "contents_url": "https://api.github.com/repos/hawtio/hawtio/contents/hawtio-base%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=fb3c03549e0c06dedef5eb97e8a1965369689fe1",
            "patch": "@@ -190,7 +190,7 @@\n -->\n   <servlet>\n     <servlet-name>gitServlet</servlet-name>\n-    <servlet-class>io.hawt.git.GitServlet</servlet-class>\n+    <servlet-class>io.hawt.web.GitServlet</servlet-class>\n     <load-on-startup>1</load-on-startup>\n   </servlet>\n   <servlet-mapping>"
        },
        {
            "sha": "beab8f9fa7ef70d6bf8880fc4e21c625d10ec49c",
            "filename": "hawtio-git/src/main/java/io/hawt/git/GitFacade.java",
            "status": "modified",
            "additions": 1,
            "deletions": 2,
            "changes": 3,
            "blob_url": "https://github.com/hawtio/hawtio/blob/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-git%2Fsrc%2Fmain%2Fjava%2Fio%2Fhawt%2Fgit%2FGitFacade.java",
            "raw_url": "https://github.com/hawtio/hawtio/raw/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-git%2Fsrc%2Fmain%2Fjava%2Fio%2Fhawt%2Fgit%2FGitFacade.java",
            "contents_url": "https://api.github.com/repos/hawtio/hawtio/contents/hawtio-git%2Fsrc%2Fmain%2Fjava%2Fio%2Fhawt%2Fgit%2FGitFacade.java?ref=fb3c03549e0c06dedef5eb97e8a1965369689fe1",
            "patch": "@@ -327,7 +327,7 @@ public T call() throws Exception {\n         });\n     }\n \n-    public <T> T writeFile(final String branch, final String pathOrEmpty, final Function<File,T> callback) throws IOException, GitAPIException {\n+    public <T> T writeFile(final String branch, final String pathOrEmpty, final WriteCallback<T> callback) throws IOException, GitAPIException {\n         return gitOperation(getStashPersonIdent(), new Callable<T>() {\n             @Override\n             public String toString() {\n@@ -919,5 +919,4 @@ protected boolean localBranchExists(String branch) throws GitAPIException {\n         return localBranchExists;\n     }\n \n-\n }\n\\ No newline at end of file"
        },
        {
            "sha": "c3af219491b9c2179f7690201792ac6d739814b0",
            "filename": "hawtio-git/src/main/java/io/hawt/git/GitFacadeSupport.java",
            "status": "modified",
            "additions": 16,
            "deletions": 2,
            "changes": 18,
            "blob_url": "https://github.com/hawtio/hawtio/blob/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-git%2Fsrc%2Fmain%2Fjava%2Fio%2Fhawt%2Fgit%2FGitFacadeSupport.java",
            "raw_url": "https://github.com/hawtio/hawtio/raw/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-git%2Fsrc%2Fmain%2Fjava%2Fio%2Fhawt%2Fgit%2FGitFacadeSupport.java",
            "contents_url": "https://api.github.com/repos/hawtio/hawtio/contents/hawtio-git%2Fsrc%2Fmain%2Fjava%2Fio%2Fhawt%2Fgit%2FGitFacadeSupport.java?ref=fb3c03549e0c06dedef5eb97e8a1965369689fe1",
            "patch": "@@ -453,11 +453,25 @@ protected <T> T doReadFile(Git git, File rootDir, String branch, String pathOrEm\n     /**\n      * Performs a write operation on the file\n      */\n-    protected <T> T doWriteFile(Git git, File rootDir, String branch, String pathOrEmpty, Function<File, T> callback) throws IOException, GitAPIException {\n+    protected <T> T doWriteFile(Git git, File rootDir, String branch, String pathOrEmpty, WriteCallback callback) throws Exception {\n         checkoutBranch(git, branch);\n         String path = Strings.isBlank(pathOrEmpty) ? \"/\" : pathOrEmpty;\n         File file = getFile(rootDir, path);\n-        T results = callback.apply(file);\n+        WriteContext context = new WriteContext(git, rootDir, file);\n+        T results = (T) callback.apply(context);\n+        if (context.isRequiresCommit()) {\n+            PersonIdent author = context.getAuthor();\n+            String message = context.getMessage();\n+            if (Strings.isBlank(message)) {\n+                message = \"Updated \" + Files.getRelativePath(rootDir, file);\n+            }\n+            CommitCommand command = git.commit().setAll(true).setMessage(message);\n+            if (author != null) {\n+                command = command.setAuthor(author);\n+            }\n+            RevCommit revCommit = commitThenPush(git, branch, command);\n+            createCommitInfo(revCommit);\n+        }\n         return results;\n     }\n "
        },
        {
            "sha": "aecaf48c51594d1358bba17b6a7d7b91c1b590ef",
            "filename": "hawtio-git/src/main/java/io/hawt/git/WriteCallback.java",
            "status": "added",
            "additions": 29,
            "deletions": 0,
            "changes": 29,
            "blob_url": "https://github.com/hawtio/hawtio/blob/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-git%2Fsrc%2Fmain%2Fjava%2Fio%2Fhawt%2Fgit%2FWriteCallback.java",
            "raw_url": "https://github.com/hawtio/hawtio/raw/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-git%2Fsrc%2Fmain%2Fjava%2Fio%2Fhawt%2Fgit%2FWriteCallback.java",
            "contents_url": "https://api.github.com/repos/hawtio/hawtio/contents/hawtio-git%2Fsrc%2Fmain%2Fjava%2Fio%2Fhawt%2Fgit%2FWriteCallback.java?ref=fb3c03549e0c06dedef5eb97e8a1965369689fe1",
            "patch": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (C) 2013 the original author or authors.\n+ * See the notice.md file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.hawt.git;\n+\n+import org.eclipse.jgit.api.errors.GitAPIException;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A callback to perform write operations on a git repository.\n+ */\n+public interface WriteCallback<T> {\n+    T apply(WriteContext context) throws IOException, GitAPIException;\n+}"
        },
        {
            "sha": "cff2f2d1eaab12283c08b39be2303200bfa1d675",
            "filename": "hawtio-git/src/main/java/io/hawt/git/WriteContext.java",
            "status": "added",
            "additions": 98,
            "deletions": 0,
            "changes": 98,
            "blob_url": "https://github.com/hawtio/hawtio/blob/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-git%2Fsrc%2Fmain%2Fjava%2Fio%2Fhawt%2Fgit%2FWriteContext.java",
            "raw_url": "https://github.com/hawtio/hawtio/raw/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-git%2Fsrc%2Fmain%2Fjava%2Fio%2Fhawt%2Fgit%2FWriteContext.java",
            "contents_url": "https://api.github.com/repos/hawtio/hawtio/contents/hawtio-git%2Fsrc%2Fmain%2Fjava%2Fio%2Fhawt%2Fgit%2FWriteContext.java?ref=fb3c03549e0c06dedef5eb97e8a1965369689fe1",
            "patch": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (C) 2013 the original author or authors.\n+ * See the notice.md file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.hawt.git;\n+\n+import io.hawt.util.Files;\n+import org.eclipse.jgit.api.AddCommand;\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.api.errors.GitAPIException;\n+import org.eclipse.jgit.lib.PersonIdent;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import static io.hawt.git.GitFacadeSupport.getFilePattern;\n+\n+/**\n+ * The context when performing reads and writes within git\n+ */\n+public class WriteContext {\n+    private final Git git;\n+    private final File rootDir;\n+    private final File file;\n+    private boolean requiresCommit;\n+    private PersonIdent author;\n+    private String message;\n+\n+    public WriteContext(Git git, File rootDir, File file) {\n+        this.git = git;\n+        this.rootDir = rootDir;\n+        this.file = file;\n+    }\n+\n+\n+    /**\n+     * Adds the given file to git\n+     */\n+    public void addFile(File file) throws IOException, GitAPIException {\n+        String path = Files.getRelativePath(rootDir, file);\n+        String filePattern = getFilePattern(path);\n+        AddCommand add = git.add().addFilepattern(filePattern).addFilepattern(\".\");\n+        add.call();\n+        requiresCommit = true;\n+    }\n+\n+    // Properties\n+    //-------------------------------------------------------------------------\n+\n+    public Git getGit() {\n+        return git;\n+    }\n+\n+    public File getRootDir() {\n+        return rootDir;\n+    }\n+\n+    public File getFile() {\n+        return file;\n+    }\n+\n+    public boolean isRequiresCommit() {\n+        return requiresCommit;\n+    }\n+\n+    public void setRequiresCommit(boolean requiresCommit) {\n+        this.requiresCommit = requiresCommit;\n+    }\n+\n+    public PersonIdent getAuthor() {\n+        return author;\n+    }\n+\n+    public void setAuthor(PersonIdent author) {\n+        this.author = author;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public void setMessage(String message) {\n+        this.message = message;\n+    }\n+}"
        },
        {
            "sha": "acb5911d6e5511c42131ba078f70e128f9c46276",
            "filename": "hawtio-system/pom.xml",
            "status": "modified",
            "additions": 23,
            "deletions": 6,
            "changes": 29,
            "blob_url": "https://github.com/hawtio/hawtio/blob/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-system%2Fpom.xml",
            "raw_url": "https://github.com/hawtio/hawtio/raw/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-system%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/hawtio/hawtio/contents/hawtio-system%2Fpom.xml?ref=fb3c03549e0c06dedef5eb97e8a1965369689fe1",
            "patch": "@@ -27,6 +27,29 @@\n       <artifactId>hawtio-core</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>\n+      <groupId>io.hawt</groupId>\n+      <artifactId>hawtio-git</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.eclipse.jgit</groupId>\n+      <artifactId>org.eclipse.jgit</artifactId>\n+      <version>${jgit-version}</version>\n+      <scope>provided</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.gitective</groupId>\n+      <artifactId>gitective-core</artifactId>\n+      <version>${gitective-version}</version>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.eclipse.jgit</groupId>\n+          <artifactId>org.eclipse.jgit</artifactId>\n+        </exclusion>\n+      </exclusions>\n+      <scope>provided</scope>\n+    </dependency>\n \n     <dependency>\n       <groupId>org.jolokia</groupId>\n@@ -67,12 +90,6 @@\n     </dependency>\n \n     <!-- testing -->\n-    <dependency>\n-      <groupId>io.hawt</groupId>\n-      <artifactId>hawtio-git</artifactId>\n-      <version>${project.version}</version>\n-      <scope>test</scope>\n-    </dependency>\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>"
        },
        {
            "sha": "ece9ea158353bdfa1f1361c64a0c1e03577efd84",
            "filename": "hawtio-system/src/main/java/io/hawt/web/GitServlet.java",
            "status": "renamed",
            "additions": 99,
            "deletions": 26,
            "changes": 125,
            "blob_url": "https://github.com/hawtio/hawtio/blob/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-system%2Fsrc%2Fmain%2Fjava%2Fio%2Fhawt%2Fweb%2FGitServlet.java",
            "raw_url": "https://github.com/hawtio/hawtio/raw/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-system%2Fsrc%2Fmain%2Fjava%2Fio%2Fhawt%2Fweb%2FGitServlet.java",
            "contents_url": "https://api.github.com/repos/hawtio/hawtio/contents/hawtio-system%2Fsrc%2Fmain%2Fjava%2Fio%2Fhawt%2Fweb%2FGitServlet.java?ref=fb3c03549e0c06dedef5eb97e8a1965369689fe1",
            "patch": "@@ -15,11 +15,15 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package io.hawt.git;\n+package io.hawt.web;\n \n+import io.hawt.git.GitFacade;\n+import io.hawt.git.WriteCallback;\n+import io.hawt.git.WriteContext;\n import io.hawt.util.Files;\n import io.hawt.util.Function;\n import io.hawt.util.IOHelper;\n+import org.eclipse.jgit.api.Git;\n import org.eclipse.jgit.api.errors.GitAPIException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -29,12 +33,13 @@\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import java.io.File;\n-import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n import java.io.IOException;\n+import java.util.List;\n \n /**\n  */\n-public class GitServlet extends HttpServlet {\n+public class GitServlet extends UploadServlet {\n     private static final transient Logger LOG = LoggerFactory.getLogger(GitServlet.class);\n \n     private static final int DEFAULT_BUFFER_SIZE = 10240; // 10KB.\n@@ -45,31 +50,12 @@ protected void doGet(HttpServletRequest req, final HttpServletResponse resp) thr\n         if (gitFacade == null) {\n             throw new ServletException(\"No GitFacade object available!\");\n         }\n-        String requested = req.getPathInfo();\n-\n-        LOG.debug(\"Requested file : \" + requested);\n-\n-        if (requested == null) {\n-            notFound(resp);\n-            return;\n-        }\n-        while (requested.startsWith(\"/\")) {\n-            requested = requested.substring(1);\n-        }\n-        int idx = requested.indexOf('/');\n-        if (idx < 0) {\n-            notFound(resp);\n+        Params params = parsePararams(req, resp);\n+        if (params == null) {\n             return;\n         }\n-        String branch = requested.substring(0, idx);\n-        if (branch.length() <= 0) {\n-            resp.getWriter().println(\"No branch specified!\");\n-            notFound(resp);\n-        }\n-        String path = requested.substring(idx + 1);\n-        if (path == null || path.length() == 0) {\n-            path = \"/\";\n-        }\n+        String branch = params.getBranch();\n+        String path = params.getPath();\n \n         Function<File, Object> callback = new Function<File, Object>() {\n             @Override\n@@ -102,7 +88,94 @@ public Object apply(File file) {\n         }\n     }\n \n+\n+    @Override\n+    protected void doPost(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException {\n+        GitFacade gitFacade = GitFacade.getSingleton();\n+        if (gitFacade == null) {\n+            throw new ServletException(\"No GitFacade object available!\");\n+        }\n+        Params params = parsePararams(req, resp);\n+        if (params == null) {\n+            return;\n+        }\n+        String branch = params.getBranch();\n+        String path = params.getPath();\n+\n+        WriteCallback<Object> callback = new WriteCallback<Object>() {\n+            @Override\n+            public Object apply(WriteContext context) throws IOException, GitAPIException {\n+                File file = context.getFile();\n+                List<File> uploadedFiles = null;\n+                try {\n+                    uploadedFiles = uploadFiles(req, resp, file);\n+                } catch (ServletException e) {\n+                    throw new IOException(e);\n+                }\n+                if (uploadedFiles != null) {\n+                    for (File uploadedFile : uploadedFiles) {\n+                        LOG.info(\"Adding to folder: \" + file + \" file: \" + uploadedFile + \" to git\");\n+                        context.addFile(uploadedFile);\n+                    }\n+                }\n+                return null;\n+            }\n+        };\n+        try {\n+            gitFacade.writeFile(branch, path, callback);\n+        } catch (GitAPIException e) {\n+            throw new ServletException(\"Failed to read file: \" + path + \" on branch \" + branch + \". \" + e, e);\n+        }\n+    }\n+\n+\n+    protected Params parsePararams(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n+        String requested = req.getPathInfo();\n+        LOG.debug(\"Requested file : \" + requested);\n+        if (requested == null) {\n+            notFound(resp);\n+            return null;\n+        }\n+        while (requested.startsWith(\"/\")) {\n+            requested = requested.substring(1);\n+        }\n+        int idx = requested.indexOf('/');\n+        if (idx < 0) {\n+            notFound(resp);\n+            return null;\n+        }\n+        String branch = requested.substring(0, idx);\n+        if (branch.length() <= 0) {\n+            resp.getWriter().println(\"No branch specified!\");\n+            notFound(resp);\n+        }\n+        String path = requested.substring(idx + 1);\n+        if (path == null || path.length() == 0) {\n+            path = \"/\";\n+        }\n+        return new Params(branch, path);\n+    }\n+\n+\n     protected void notFound(HttpServletResponse resp) throws IOException {\n         resp.sendError(HttpServletResponse.SC_NOT_FOUND);\n     }\n+\n+    protected static class Params {\n+        private final String branch;\n+        private final String path;\n+\n+        public Params(String branch, String path) {\n+            this.branch = branch;\n+            this.path = path;\n+        }\n+\n+        public String getBranch() {\n+            return branch;\n+        }\n+\n+        public String getPath() {\n+            return path;\n+        }\n+    }\n }",
            "previous_filename": "hawtio-git/src/main/java/io/hawt/git/GitServlet.java"
        },
        {
            "sha": "157fdc926177b3df6349debcf742fd444904e493",
            "filename": "hawtio-system/src/main/java/io/hawt/web/UploadServlet.java",
            "status": "modified",
            "additions": 13,
            "deletions": 5,
            "changes": 18,
            "blob_url": "https://github.com/hawtio/hawtio/blob/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-system%2Fsrc%2Fmain%2Fjava%2Fio%2Fhawt%2Fweb%2FUploadServlet.java",
            "raw_url": "https://github.com/hawtio/hawtio/raw/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-system%2Fsrc%2Fmain%2Fjava%2Fio%2Fhawt%2Fweb%2FUploadServlet.java",
            "contents_url": "https://api.github.com/repos/hawtio/hawtio/contents/hawtio-system%2Fsrc%2Fmain%2Fjava%2Fio%2Fhawt%2Fweb%2FUploadServlet.java?ref=fb3c03549e0c06dedef5eb97e8a1965369689fe1",
            "patch": "@@ -31,14 +31,19 @@ public class UploadServlet extends HttpServlet {\n \n     @Override\n     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n+        String uploadDirectory = UploadManager.UPLOAD_DIRECTORY;\n+        File uploadDir = new File(uploadDirectory);\n \n+        uploadFiles(request, response, uploadDir);\n+    }\n+\n+    protected List<File> uploadFiles(HttpServletRequest request, HttpServletResponse response, File uploadDir) throws IOException, ServletException {\n         response.setContentType(\"text/html\");\n         final PrintWriter out = response.getWriter();\n-\n+        List<File> uploadedFiles = new ArrayList<>();\n         boolean isMultipart = ServletFileUpload.isMultipartContent(request);\n         if (isMultipart) {\n             ServletContext context = this.getServletConfig().getServletContext();\n-            File uploadDir = new File(UploadManager.UPLOAD_DIRECTORY);\n             if (!uploadDir.exists()) {\n                 LOG.info(\"Creating directory {}\" + uploadDir);\n                 if (!uploadDir.mkdirs()) {\n@@ -71,7 +76,6 @@ public void update(long pBytesRead, long pContentLength, int pItems) {\n \n             try {\n                 List<FileItem> items = upload.parseRequest(request);\n-\n                 for (FileItem item : items) {\n                     if (item.isFormField()) {\n                         String name = item.getFieldName();\n@@ -94,8 +98,7 @@ public void update(long pBytesRead, long pContentLength, int pItems) {\n                             LOG.info(\"Skipping field \" + fieldName + \" no filename given\");\n                             continue;\n                         }\n-\n-                        File target = new File(UploadManager.UPLOAD_DIRECTORY + File.separator + fileName);\n+                        File target = new File(uploadDir, fileName);\n \n                         try {\n                             item.write(target);\n@@ -126,13 +129,18 @@ public void update(long pBytesRead, long pContentLength, int pItems) {\n                     LOG.info(\"Renaming {} to {}\", file, dest);\n                     if (!file.renameTo(dest)) {\n                         LOG.warn(\"Failed to rename {} to {}\", file, dest);\n+                    } else {\n+                        uploadedFiles.add(dest);\n                     }\n                 }\n+            } else {\n+                uploadedFiles = files;\n             }\n \n         } else {\n             super.doPost(request, response);\n         }\n+        return uploadedFiles;\n     }\n \n }"
        },
        {
            "sha": "43fdfdde4f99be1027af884f44e0e354d4f26e49",
            "filename": "hawtio-web/src/main/webapp/WEB-INF/web.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/hawtio/hawtio/blob/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-web%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml",
            "raw_url": "https://github.com/hawtio/hawtio/raw/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-web%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml",
            "contents_url": "https://api.github.com/repos/hawtio/hawtio/contents/hawtio-web%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=fb3c03549e0c06dedef5eb97e8a1965369689fe1",
            "patch": "@@ -248,7 +248,7 @@\n     </servlet-mapping>\n     <servlet>\n         <servlet-name>gitServlet</servlet-name>\n-        <servlet-class>io.hawt.git.GitServlet</servlet-class>\n+        <servlet-class>io.hawt.web.GitServlet</servlet-class>\n         <load-on-startup>1</load-on-startup>\n     </servlet>\n     <servlet-mapping>"
        },
        {
            "sha": "d29cc5c31b0343662b18560ffd7fadd018cf43b3",
            "filename": "hawtio-web/src/main/webapp/app/kubernetes/js/kubernetesJsonDirective.ts",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/hawtio/hawtio/blob/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-web%2Fsrc%2Fmain%2Fwebapp%2Fapp%2Fkubernetes%2Fjs%2FkubernetesJsonDirective.ts",
            "raw_url": "https://github.com/hawtio/hawtio/raw/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-web%2Fsrc%2Fmain%2Fwebapp%2Fapp%2Fkubernetes%2Fjs%2FkubernetesJsonDirective.ts",
            "contents_url": "https://api.github.com/repos/hawtio/hawtio/contents/hawtio-web%2Fsrc%2Fmain%2Fwebapp%2Fapp%2Fkubernetes%2Fjs%2FkubernetesJsonDirective.ts?ref=fb3c03549e0c06dedef5eb97e8a1965369689fe1",
            "patch": "@@ -1,4 +1,5 @@\n /// <reference path=\"kubernetesPlugin.ts\"/>\n+/// <reference path=\"../../wiki/js/wikiHelpers.ts\"/>\n module Kubernetes {\n \n   export var KubernetesJsonDirective = _module.directive(\"kubernetesJson\", [() => {\n@@ -21,7 +22,7 @@ module Kubernetes {\n         function pathToURL(path:string):string {\n           if (path) {\n             var branch = parentScope[\"branch\"] || \"master\";\n-            return Core.url(\"/git/\" + branch + (path.startsWith(\"/\") ? \"\" : \"/\") + path);\n+            return Wiki.gitRestURL(branch, path);\n           } else {\n             return null;\n           }"
        },
        {
            "sha": "bd9eb92bf41b2b62c0a2032eb6d1596e2dea3bbd",
            "filename": "hawtio-web/src/main/webapp/app/wiki-drop/html/deploy.html",
            "status": "added",
            "additions": 53,
            "deletions": 0,
            "changes": 53,
            "blob_url": "https://github.com/hawtio/hawtio/blob/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-web%2Fsrc%2Fmain%2Fwebapp%2Fapp%2Fwiki-drop%2Fhtml%2Fdeploy.html",
            "raw_url": "https://github.com/hawtio/hawtio/raw/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-web%2Fsrc%2Fmain%2Fwebapp%2Fapp%2Fwiki-drop%2Fhtml%2Fdeploy.html",
            "contents_url": "https://api.github.com/repos/hawtio/hawtio/contents/hawtio-web%2Fsrc%2Fmain%2Fwebapp%2Fapp%2Fwiki-drop%2Fhtml%2Fdeploy.html?ref=fb3c03549e0c06dedef5eb97e8a1965369689fe1",
            "patch": "@@ -0,0 +1,53 @@\n+<div>\n+\n+  <script type=\"text/ng-template\" id=\"fileUpload.html\">\n+    <div ng-hide=\"artifactUploader.isHTML5\">\n+      <input type=\"file\" nv-file-select=\"\" uploader=\"artifactUploader\" multiple>\n+    </div>\n+    <div class=\"file-drop-zone\" nv-file-drop=\"\" uploader=\"artifactUploader\">\n+      <div class=\"alert alert-info\" ng-show=\"artifactUploader.queue.length == 0\">\n+        Drag files and App zips here to install them.\n+      </div>\n+      <div ng-repeat=\"item in artifactUploader.queue\">\n+      <div>\n+        <i ng-show=\"item.isUploading\" class=\"icon-spinner icon-spin\"></i>\n+        <i ng-show=\"item.isUploaded\" class=\"icon-ok\"></i>\n+        {{item.file.name}}\n+        <span ng-show=\"artifactUploader.isHTML5 && item.progress\"> - {{(item.fileSizeMB/item.progress)*100|number:2}}MB / {{item.fileSizeMB}}MB</span>\n+\n+        </div>\n+        <!--\n+        <div ng-show=\"artifactUploader.isHTML5\" \n+             class=\"inline-block progress progress-striped no-bottom-margin\" \n+             ng-class=\"{ 'active': item.isUploading }\">\n+          <div class=\"bar\" ng-style=\"{ 'width': item.progress + '%' }\"></div>\n+          </div>\n+          -->\n+      </div>\n+    </div>\n+    <div>\n+      <!--\n+      <div>\n+        Queue progress:\n+        <div class=\"progress\" style=\"\">\n+          <div class=\"progress-bar\" role=\"progressbar\" ng-style=\"{ 'width': artifactUploader.progress + '%' }\"></div>\n+        </div>\n+      </div>\n+      -->\n+      <!--\n+      <button type=\"button\" class=\"btn btn-warning btn-s\" ng-click=\"artifactUploader.cancelAll()\" ng-disabled=\"!artifactUploader.isUploading\">\n+        <span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel all\n+      </button>\n+      <button type=\"button\" class=\"btn btn-danger btn-s\" ng-click=\"artifactUploader.clearQueue()\" ng-disabled=\"!artifactUploader.queue.length\">\n+        <span class=\"glyphicon glyphicon-trash\"></span> Remove all\n+      </button>\n+      <button type=\"button\" class=\"btn btn-success btn-s\" ng-click=\"doUpload()\" ng-disabled=\"!artifactUploader.getNotUploadedItems().length\">\n+        <span class=\"glyphicon glyphicon-upload\"></span> Upload all\n+      </button>\n+      -->\n+    </div>\n+  </script>\n+\n+  <div compile=\"artifactTemplate\"></div>\n+\n+</div>"
        },
        {
            "sha": "bb3bf6f0b15d26f6b579236bf75c6826eab97cf5",
            "filename": "hawtio-web/src/main/webapp/app/wiki-drop/js/deploy.ts",
            "status": "added",
            "additions": 93,
            "deletions": 0,
            "changes": 93,
            "blob_url": "https://github.com/hawtio/hawtio/blob/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-web%2Fsrc%2Fmain%2Fwebapp%2Fapp%2Fwiki-drop%2Fjs%2Fdeploy.ts",
            "raw_url": "https://github.com/hawtio/hawtio/raw/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-web%2Fsrc%2Fmain%2Fwebapp%2Fapp%2Fwiki-drop%2Fjs%2Fdeploy.ts",
            "contents_url": "https://api.github.com/repos/hawtio/hawtio/contents/hawtio-web%2Fsrc%2Fmain%2Fwebapp%2Fapp%2Fwiki-drop%2Fjs%2Fdeploy.ts?ref=fb3c03549e0c06dedef5eb97e8a1965369689fe1",
            "patch": "@@ -0,0 +1,93 @@\n+/// <reference path=\"wikiDropPlugin.ts\"/>\n+/// <reference path=\"../../helpers/js/urlHelpers.ts\"/>\n+/// <reference path=\"../../wiki/js/wikiHelpers.ts\"/>\n+module WikiDrop {\n+\n+  export var DropFile = _module.directive(\"wikiDropFile\", [() => {\n+    log.debug(\"Creating wiki drop directive...\");\n+    return {\n+      restrict: 'A',\n+      replace: true,\n+      scope: {\n+        branch: '@',\n+        path: '@'\n+      },\n+      templateUrl: WikiDrop.templatePath + \"deploy.html\",\n+      controller: [\"$scope\", \"$element\", \"FileUploader\", \"jolokiaUrl\", \"$templateCache\", \"jolokia\", \"userDetails\", ($scope, $element, FileUploader:any, jolokiaUrl, $templateCache, jolokia, userDetails:Core.UserDetails) => {\n+\n+        $scope.artifactTemplate = '';\n+\n+\n+        function updateURL() {\n+          var uploadURI = Wiki.gitRestURL($scope.branch, $scope.path);\n+          log.info(\"Upload URI: \" + uploadURI);\n+\n+          var uploader = $scope.artifactUploader = new FileUploader({\n+            headers: {\n+              'Authorization': Core.authHeaderValue(userDetails)\n+            },\n+            autoUpload: true,\n+            withCredentials: true,\n+            method: 'POST',\n+            url: uploadURI\n+          });\n+\n+          $scope.doUpload = () => {\n+            uploader.uploadAll();\n+          };\n+\n+          uploader.onWhenAddingFileFailed = function (item /*{File|FileLikeObject}*/, filter, options) {\n+            log.debug('onWhenAddingFileFailed', item, filter, options);\n+          };\n+          uploader.onAfterAddingFile = function (fileItem) {\n+            log.debug('onAfterAddingFile', fileItem);\n+          };\n+          uploader.onAfterAddingAll = function (addedFileItems) {\n+            log.debug('onAfterAddingAll', addedFileItems);\n+          };\n+          uploader.onBeforeUploadItem = function (item) {\n+            if ('file' in item) {\n+              item.fileSizeMB = (item.file.size / 1024 / 1024).toFixed(2);\n+            } else {\n+              item.fileSizeMB = 0;\n+            }\n+            //item.url = UrlHelpers.join(uploadURI, item.file.name);\n+            item.url = uploadURI;\n+            log.info(\"Loading files to \" + uploadURI);\n+            log.debug('onBeforeUploadItem', item);\n+          };\n+          uploader.onProgressItem = function (fileItem, progress) {\n+            log.debug('onProgressItem', fileItem, progress);\n+          };\n+          uploader.onProgressAll = function (progress) {\n+            log.debug('onProgressAll', progress);\n+          };\n+          uploader.onSuccessItem = function (fileItem, response, status, headers) {\n+            log.debug('onSuccessItem', fileItem, response, status, headers);\n+          };\n+          uploader.onErrorItem = function (fileItem, response, status, headers) {\n+            log.debug('onErrorItem', fileItem, response, status, headers);\n+          };\n+          uploader.onCancelItem = function (fileItem, response, status, headers) {\n+            log.debug('onCancelItem', fileItem, response, status, headers);\n+          };\n+          uploader.onCompleteItem = function (fileItem, response, status, headers) {\n+            log.debug('onCompleteItem', fileItem, response, status, headers);\n+          };\n+          uploader.onCompleteAll = function () {\n+            log.debug('onCompleteAll');\n+            uploader.clearQueue();\n+          };\n+\n+          log.debug('uploader', uploader);\n+          $scope.artifactTemplate = $templateCache.get('fileUpload.html');\n+          Core.$apply($scope);\n+        }\n+\n+        $scope.$watch(\"branch\", updateURL);\n+        $scope.$watch(\"path\", updateURL);\n+      }]\n+    };\n+  }]);\n+\n+}"
        },
        {
            "sha": "8589759f4d1bb3f0f45c6860abc88ced34d35167",
            "filename": "hawtio-web/src/main/webapp/app/wiki-drop/js/wikiDropPlugin.ts",
            "status": "added",
            "additions": 35,
            "deletions": 0,
            "changes": 35,
            "blob_url": "https://github.com/hawtio/hawtio/blob/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-web%2Fsrc%2Fmain%2Fwebapp%2Fapp%2Fwiki-drop%2Fjs%2FwikiDropPlugin.ts",
            "raw_url": "https://github.com/hawtio/hawtio/raw/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-web%2Fsrc%2Fmain%2Fwebapp%2Fapp%2Fwiki-drop%2Fjs%2FwikiDropPlugin.ts",
            "contents_url": "https://api.github.com/repos/hawtio/hawtio/contents/hawtio-web%2Fsrc%2Fmain%2Fwebapp%2Fapp%2Fwiki-drop%2Fjs%2FwikiDropPlugin.ts?ref=fb3c03549e0c06dedef5eb97e8a1965369689fe1",
            "patch": "@@ -0,0 +1,35 @@\n+/// <reference path=\"../../baseHelpers.ts\"/>\n+/// <reference path=\"../../fabric/js/fabricPlugin.ts\"/>\n+module WikiDrop {\n+\n+  export var log:Logging.Logger = Logger.get('WikiDrop');\n+  export var pluginName = 'wiki-drop';\n+  export var templatePath = 'app/' + pluginName + '/html/';\n+\n+  export var _module = angular.module(pluginName, ['bootstrap', 'wiki']);\n+\n+  _module.config(['$routeProvider', ($routeProvider) => {\n+    $routeProvider\n+      .when('/wiki/drop', { templateUrl: templatePath + 'deploy.html' });\n+  }]);\n+\n+  _module.run(['viewRegistry', 'layoutFull', 'workspace', (viewRegistry, layoutFull, workspace) => {\n+\n+    //viewRegistry['fabric/deploy'] = layoutFull;\n+\n+    /*\n+    workspace.topLevelTabs.push({\n+      id: 'fabric.deploy',\n+      content: 'Deploy',\n+      title: 'Deploy artifacts to this fabric',\n+      isValid: (workspace) => Fabric.isFMCContainer(workspace),\n+      href: () => '#/fabric/deploy',\n+      isActive: (workspace:Workspace) => workspace.isLinkActive('fabric/deploy')\n+    });\n+    */\n+  \n+    log.debug(\"started\");\n+  }]);\n+\n+  hawtioPluginLoader.addModule(pluginName);\n+}"
        },
        {
            "sha": "9e8e0d869900e00a70558a4c68ce1172d5fe1294",
            "filename": "hawtio-web/src/main/webapp/app/wiki/js/wikiHelpers.ts",
            "status": "modified",
            "additions": 10,
            "deletions": 0,
            "changes": 10,
            "blob_url": "https://github.com/hawtio/hawtio/blob/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-web%2Fsrc%2Fmain%2Fwebapp%2Fapp%2Fwiki%2Fjs%2FwikiHelpers.ts",
            "raw_url": "https://github.com/hawtio/hawtio/raw/fb3c03549e0c06dedef5eb97e8a1965369689fe1/hawtio-web%2Fsrc%2Fmain%2Fwebapp%2Fapp%2Fwiki%2Fjs%2FwikiHelpers.ts",
            "contents_url": "https://api.github.com/repos/hawtio/hawtio/contents/hawtio-web%2Fsrc%2Fmain%2Fwebapp%2Fapp%2Fwiki%2Fjs%2FwikiHelpers.ts?ref=fb3c03549e0c06dedef5eb97e8a1965369689fe1",
            "patch": "@@ -483,6 +483,16 @@ module Wiki {\n     return name;\n   }\n \n+  /**\n+   * Returns the URL to perform a GET or POST for the given branch name and path\n+   */\n+  export function gitRestURL(branch: string, path: string) {\n+    if (!branch) branch = \"master\";\n+    if (!path) path = \"/\";\n+    return Core.url(\"/git/\" + branch + (path.startsWith(\"/\") ? \"\" : \"/\") + path);\n+  }\n+\n+\n   /**\n    * Takes a row containing the entity object; or can take the entity directly.\n    *"
        }
    ]
}