{
    "sha": "c3179e839d2f031efac7545bfd259fa31a3bcdcb",
    "node_id": "MDY6Q29tbWl0ODE5OTA3OmMzMTc5ZTgzOWQyZjAzMWVmYWM3NTQ1YmZkMjU5ZmEzMWEzYmNkY2I=",
    "commit": {
        "author": {
            "name": "Jozef Hartinger",
            "email": "jharting@redhat.com",
            "date": "2013-11-26T14:46:42Z"
        },
        "committer": {
            "name": "Jozef Hartinger",
            "email": "jharting@redhat.com",
            "date": "2013-12-19T12:02:02Z"
        },
        "message": "WELD-1559 Lazy conversation context",
        "tree": {
            "sha": "44d2d691bc6e8a46bee713792507fa8a5dd5e817",
            "url": "https://api.github.com/repos/weld/core/git/trees/44d2d691bc6e8a46bee713792507fa8a5dd5e817"
        },
        "url": "https://api.github.com/repos/weld/core/git/commits/c3179e839d2f031efac7545bfd259fa31a3bcdcb",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/weld/core/commits/c3179e839d2f031efac7545bfd259fa31a3bcdcb",
    "html_url": "https://github.com/weld/core/commit/c3179e839d2f031efac7545bfd259fa31a3bcdcb",
    "comments_url": "https://api.github.com/repos/weld/core/commits/c3179e839d2f031efac7545bfd259fa31a3bcdcb/comments",
    "author": {
        "login": "jharting",
        "id": 167352,
        "node_id": "MDQ6VXNlcjE2NzM1Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/167352?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jharting",
        "html_url": "https://github.com/jharting",
        "followers_url": "https://api.github.com/users/jharting/followers",
        "following_url": "https://api.github.com/users/jharting/following{/other_user}",
        "gists_url": "https://api.github.com/users/jharting/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jharting/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jharting/subscriptions",
        "organizations_url": "https://api.github.com/users/jharting/orgs",
        "repos_url": "https://api.github.com/users/jharting/repos",
        "events_url": "https://api.github.com/users/jharting/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jharting/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "jharting",
        "id": 167352,
        "node_id": "MDQ6VXNlcjE2NzM1Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/167352?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jharting",
        "html_url": "https://github.com/jharting",
        "followers_url": "https://api.github.com/users/jharting/followers",
        "following_url": "https://api.github.com/users/jharting/following{/other_user}",
        "gists_url": "https://api.github.com/users/jharting/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jharting/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jharting/subscriptions",
        "organizations_url": "https://api.github.com/users/jharting/orgs",
        "repos_url": "https://api.github.com/users/jharting/repos",
        "events_url": "https://api.github.com/users/jharting/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jharting/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "0e93092a7a9a085be699c9113b9d561dc2c2a91e",
            "url": "https://api.github.com/repos/weld/core/commits/0e93092a7a9a085be699c9113b9d561dc2c2a91e",
            "html_url": "https://github.com/weld/core/commit/0e93092a7a9a085be699c9113b9d561dc2c2a91e"
        }
    ],
    "stats": {
        "total": 461,
        "additions": 398,
        "deletions": 63
    },
    "files": [
        {
            "sha": "9dd6a21ea0b6693219be213f7d23b7a4e3d9bcc8",
            "filename": "docs/reference/src/main/docbook/en-US/scopescontexts.xml",
            "status": "modified",
            "additions": 36,
            "deletions": 0,
            "changes": 36,
            "blob_url": "https://github.com/weld/core/blob/c3179e839d2f031efac7545bfd259fa31a3bcdcb/docs%2Freference%2Fsrc%2Fmain%2Fdocbook%2Fen-US%2Fscopescontexts.xml",
            "raw_url": "https://github.com/weld/core/raw/c3179e839d2f031efac7545bfd259fa31a3bcdcb/docs%2Freference%2Fsrc%2Fmain%2Fdocbook%2Fen-US%2Fscopescontexts.xml",
            "contents_url": "https://api.github.com/repos/weld/core/contents/docs%2Freference%2Fsrc%2Fmain%2Fdocbook%2Fen-US%2Fscopescontexts.xml?ref=c3179e839d2f031efac7545bfd259fa31a3bcdcb",
            "patch": "@@ -361,12 +361,48 @@ public class OrderBuilder {\n       <para>\n          The mapping of the <literal>CDI Conversation Filter</literal> determines when Weld reads the <literal>cid</literal> request parameter. This process forces request body parsing. If your application relies on setting a custom character encoding for the request or parsing the request body\n          itself by reading an <literal>InputStream</literal> or <literal>Reader</literal>, make sure that this is performed in a filter that executes before the CDI Conversation Filter is executed. See <ulink url=\"http://weld.cdi-spec.org/documentation/#3\">this FAQ page for details</ulink>.\n+         Alternatively, the lazy conversation context initialization (see below) may be used.\n       </para>\n    </tip>\n \n       </section>\n+      <section>\n+         <title>Lazy and eager conversation context initialization</title>\n+         <para>\n+            Conversation context may be initialized lazily or eagerly.\n+         </para>\n+\n+      <para>\n+         When initialized lazily, the conversation context (no matter if transient or long-running) is only initialized when a <literal>@ConversationScoped</literal> bean is accessed for the first time. At that point, the <literal>cid</literal> parameter is read\n+         and the conversation is restored. The conversation context may not be initialized at all throughout the request processing if no conversation state is accessed. Note that if a problem\n+         occurs during this delayed initialization, the conversation state access (bean method invocation) may result in <literal>BusyConversationException</literal> or <literal>NonexistentConversationException</literal>\n+         being thrown.\n+      </para>\n \n+      <para>\n+         When initialized eagerly, the conversation context is initialized at a predefined time. Either at the beginning of the request processing before any listener, filter or servlet is invoked or, if the <literal>CDI Conversation Filter</literal> is mapped, during execution of this filter.\n+      </para>\n \n+      <para>\n+         Conversation context initialization mode may be configured using the <literal>org.jboss.weld.context.conversation.lazy</literal> init parameter.\n+      </para>\n+\n+      <programlisting role=\"XML\"><![CDATA[<context-param>\n+   <param-name>org.jboss.weld.context.conversation.lazy</param-name>\n+   <param-value>true</param-value>\n+</context-param>]]></programlisting>\n+\n+      <para>\n+         If the init parameter is not set, the following default behavior applies:\n+      </para>\n+         <itemizedlist>\n+            <listitem>If the <literal>CDI Conversation Filter</literal> is mapped, the conversation context is initialized eagerly within this filter</listitem>\n+            <listitem>\n+               If an observer for <literal>@Initialized(ConversationScoped.class)</literal> or <literal>@Destroyed(ConversationScoped.class)</literal> event \n+               exists in the application, the conversation context is initialized eagerly</listitem>\n+            <listitem>Otherwise, the conversation context is initialized lazily</listitem>\n+         </itemizedlist>\n+      </section>\n    </section>\n    \n    <section>"
        },
        {
            "sha": "9dbac371f805d6d61cbd8083577393447e6acbca",
            "filename": "impl/src/main/java/org/jboss/weld/bootstrap/WeldStartup.java",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/weld/core/blob/c3179e839d2f031efac7545bfd259fa31a3bcdcb/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fbootstrap%2FWeldStartup.java",
            "raw_url": "https://github.com/weld/core/raw/c3179e839d2f031efac7545bfd259fa31a3bcdcb/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fbootstrap%2FWeldStartup.java",
            "contents_url": "https://api.github.com/repos/weld/core/contents/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fbootstrap%2FWeldStartup.java?ref=c3179e839d2f031efac7545bfd259fa31a3bcdcb",
            "patch": "@@ -81,13 +81,13 @@\n import org.jboss.weld.context.ejb.EjbRequestContext;\n import org.jboss.weld.context.ejb.EjbRequestContextImpl;\n import org.jboss.weld.context.http.HttpConversationContext;\n-import org.jboss.weld.context.http.HttpConversationContextImpl;\n import org.jboss.weld.context.http.HttpLiteral;\n import org.jboss.weld.context.http.HttpRequestContext;\n import org.jboss.weld.context.http.HttpRequestContextImpl;\n import org.jboss.weld.context.http.HttpSessionContext;\n import org.jboss.weld.context.http.HttpSessionContextImpl;\n import org.jboss.weld.context.http.HttpSessionDestructionContext;\n+import org.jboss.weld.context.http.LazyHttpConversationContextImpl;\n import org.jboss.weld.context.unbound.ApplicationContextImpl;\n import org.jboss.weld.context.unbound.DependentContextImpl;\n import org.jboss.weld.context.unbound.RequestContextImpl;\n@@ -469,7 +469,7 @@ protected Collection<ContextHolder<? extends Context>> createContexts(ServiceReg\n             // Register the Http contexts if not in\n             contexts.add(new ContextHolder<HttpSessionContext>(new HttpSessionContextImpl(contextId), HttpSessionContext.class, HttpLiteral.INSTANCE));\n             contexts.add(new ContextHolder<HttpSessionDestructionContext>(new HttpSessionDestructionContext(contextId), HttpSessionDestructionContext.class, HttpLiteral.INSTANCE));\n-            contexts.add(new ContextHolder<HttpConversationContext>(new HttpConversationContextImpl(contextId), HttpConversationContext.class, HttpLiteral.INSTANCE));\n+            contexts.add(new ContextHolder<HttpConversationContext>(new LazyHttpConversationContextImpl(contextId), HttpConversationContext.class, HttpLiteral.INSTANCE));\n             contexts.add(new ContextHolder<HttpRequestContext>(new HttpRequestContextImpl(contextId), HttpRequestContext.class, HttpLiteral.INSTANCE));\n         }\n "
        },
        {
            "sha": "2d1f70772596072e2753f4ae2faa9b6715177b59",
            "filename": "impl/src/main/java/org/jboss/weld/context/AbstractContext.java",
            "status": "modified",
            "additions": 10,
            "deletions": 0,
            "changes": 10,
            "blob_url": "https://github.com/weld/core/blob/c3179e839d2f031efac7545bfd259fa31a3bcdcb/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fcontext%2FAbstractContext.java",
            "raw_url": "https://github.com/weld/core/raw/c3179e839d2f031efac7545bfd259fa31a3bcdcb/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fcontext%2FAbstractContext.java",
            "contents_url": "https://api.github.com/repos/weld/core/contents/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fcontext%2FAbstractContext.java?ref=c3179e839d2f031efac7545bfd259fa31a3bcdcb",
            "patch": "@@ -65,11 +65,13 @@ public AbstractContext(String contextId, boolean multithreaded) {\n      * @throws ContextNotActiveException if the context is not active\n      * @see javax.enterprise.context.spi.Context#get(BaseBean, boolean)\n      */\n+    @Override\n     @SuppressWarnings(value = \"UL_UNRELEASED_LOCK\", justification = \"False positive from FindBugs\")\n     public <T> T get(Contextual<T> contextual, CreationalContext<T> creationalContext) {\n         if (!isActive()) {\n             throw new ContextNotActiveException();\n         }\n+        checkContextInitialized();\n         BeanStore beanStore = getBeanStore();\n         if (beanStore == null) {\n             return null;\n@@ -107,6 +109,7 @@ public <T> T get(Contextual<T> contextual, CreationalContext<T> creationalContex\n         }\n     }\n \n+    @Override\n     public <T> T get(Contextual<T> contextual) {\n         return get(contextual, null);\n     }\n@@ -116,6 +119,7 @@ public void destroy(Contextual<?> contextual) {\n         if (!isActive()) {\n             throw new ContextNotActiveException();\n         }\n+        checkContextInitialized();\n         if (contextual == null) {\n             throw ContextLogger.LOG.contextualIsNull();\n         }\n@@ -181,4 +185,10 @@ protected ServiceRegistry getServiceRegistry() {\n         return serviceRegistry;\n     }\n \n+    /**\n+     * Allows contexts that are initialized lazily to plug in additional logic.\n+     */\n+    protected void checkContextInitialized() {\n+    }\n+\n }"
        },
        {
            "sha": "ad4e729e6baeed9600f92f587a12f200b0e98725",
            "filename": "impl/src/main/java/org/jboss/weld/context/AbstractConversationContext.java",
            "status": "modified",
            "additions": 35,
            "deletions": 28,
            "changes": 63,
            "blob_url": "https://github.com/weld/core/blob/c3179e839d2f031efac7545bfd259fa31a3bcdcb/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fcontext%2FAbstractConversationContext.java",
            "raw_url": "https://github.com/weld/core/raw/c3179e839d2f031efac7545bfd259fa31a3bcdcb/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fcontext%2FAbstractConversationContext.java",
            "contents_url": "https://api.github.com/repos/weld/core/contents/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fcontext%2FAbstractConversationContext.java?ref=c3179e839d2f031efac7545bfd259fa31a3bcdcb",
            "patch": "@@ -186,11 +186,6 @@ public void sessionCreated(R request) {\n     }\n \n \n-    @Override\n-    public void activate() {\n-        this.activate(null);\n-    }\n-\n     protected void associateRequestWithNewConversation() {\n         ManagedConversation conversation = new ConversationImpl(manager);\n         lock(conversation);\n@@ -210,38 +205,47 @@ protected void associateRequest(ManagedConversation conversation) {\n         getBeanStore().attach();\n     }\n \n+    @Override\n+    public void activate() {\n+        this.activate(null);\n+    }\n+\n     @Override\n     public void activate(String cid) {\n-        if (getBeanStore() == null) {\n+        if (!isActive()) {\n             if (!isAssociated()) {\n                 throw ConversationLogger.LOG.mustCallAssociateBeforeActivate();\n             }\n             // Activate the context\n             super.setActive(true);\n \n-            // Attach the conversation\n-            // WELD-1315 Don't try to restore the long-running conversation if cid param is empty\n-            if (cid != null && !cid.isEmpty()) {\n-                ManagedConversation conversation = getConversation(cid);\n-                if (conversation != null && !isExpired(conversation)) {\n-                    boolean lock = lock(conversation);\n-                    if (lock) {\n-                        associateRequest(conversation);\n-                    } else {\n-                        // CDI 6.7.4 we must activate a new transient conversation before we throw the exception\n-                        associateRequestWithNewConversation();\n-                        throw ConversationLogger.LOG.conversationLockTimedout(cid);\n-                    }\n+            initialize(cid);\n+        } else {\n+            throw ConversationLogger.LOG.contextAlreadyActive();\n+        }\n+    }\n+\n+    protected void initialize(String cid) {\n+        // Attach the conversation\n+        // WELD-1315 Don't try to restore the long-running conversation if cid param is empty\n+        if (cid != null && !cid.isEmpty()) {\n+            ManagedConversation conversation = getConversation(cid);\n+            if (conversation != null && !isExpired(conversation)) {\n+                boolean lock = lock(conversation);\n+                if (lock) {\n+                    associateRequest(conversation);\n                 } else {\n                     // CDI 6.7.4 we must activate a new transient conversation before we throw the exception\n                     associateRequestWithNewConversation();\n-                    throw ConversationLogger.LOG.noConversationFoundToRestore(cid);\n+                    throw ConversationLogger.LOG.conversationLockTimedout(cid);\n                 }\n             } else {\n+                // CDI 6.7.4 we must activate a new transient conversation before we throw the exception\n                 associateRequestWithNewConversation();\n+                throw ConversationLogger.LOG.noConversationFoundToRestore(cid);\n             }\n         } else {\n-            throw ConversationLogger.LOG.contextAlreadyActive();\n+            associateRequestWithNewConversation();\n         }\n     }\n \n@@ -252,7 +256,7 @@ private boolean lock(ManagedConversation conversation) {\n     @Override\n     public void deactivate() {\n         // Disassociate from the current conversation\n-        if (getBeanStore() != null) {\n+        if (isActive()) {\n             if (!isAssociated()) {\n                 throw ConversationLogger.LOG.mustCallAssociateBeforeDeactivate();\n             }\n@@ -321,6 +325,7 @@ public boolean destroy(S session) {\n         // the context may be active\n         // if it is, we need to re-attach the bean store once the other conversations are destroyed\n         BoundBeanStore beanStore = getBeanStore();\n+        final boolean active = isActive();\n         if (beanStore != null) {\n             beanStore.detach();\n         }\n@@ -347,10 +352,10 @@ public boolean destroy(S session) {\n             return true;\n         } finally {\n             setBeanStore(beanStore);\n-            setActive(beanStore != null);\n-            if (isActive()) {\n+            setActive(active);\n+            if (beanStore != null) {\n                 getBeanStore().attach();\n-            } else {\n+            } else if (!isActive()){\n                 cleanup();\n             }\n         }\n@@ -383,6 +388,7 @@ public String generateConversationId() {\n         if (!(getRequestAttribute(getRequest(), CONVERSATION_ID_GENERATOR_ATTRIBUTE_NAME) instanceof ConversationIdGenerator)) {\n             throw ConversationLogger.LOG.conversationIdGeneratorNotFound();\n         }\n+        checkContextInitialized();\n         ConversationIdGenerator generator = (ConversationIdGenerator) getRequestAttribute(getRequest(), CONVERSATION_ID_GENERATOR_ATTRIBUTE_NAME);\n         return generator.call();\n     }\n@@ -409,6 +415,7 @@ private void checkIsAssociated() {\n \n     private Map<String, ManagedConversation> getConversationMap() {\n         checkIsAssociated();\n+        checkContextInitialized();\n         if (!(getRequestAttribute(getRequest(), CONVERSATIONS_ATTRIBUTE_NAME) instanceof Map<?, ?>)) {\n             throw ConversationLogger.LOG.unableToLoadCurrentConversations();\n         }\n@@ -418,6 +425,7 @@ private Map<String, ManagedConversation> getConversationMap() {\n     @Override\n     public ManagedConversation getCurrentConversation() {\n         checkIsAssociated();\n+        checkContextInitialized();\n         if (!(getRequestAttribute(getRequest(), CURRENT_CONVERSATION_ATTRIBUTE_NAME) instanceof ManagedConversation)) {\n             throw ConversationLogger.LOG.unableToLoadCurrentConversations();\n         }\n@@ -503,7 +511,7 @@ public Class<? extends Annotation> getScope() {\n      *\n      * @return true if the context is associated\n      */\n-    private boolean isAssociated() {\n+    protected boolean isAssociated() {\n         return associated.get() != null;\n     }\n \n@@ -512,8 +520,7 @@ private boolean isAssociated() {\n      *\n      * @return the request\n      */\n-    private R getRequest() {\n+    protected R getRequest() {\n         return associated.get();\n     }\n-\n }"
        },
        {
            "sha": "7a8e7a4295a859cea2c05d9be63864e375d518b0",
            "filename": "impl/src/main/java/org/jboss/weld/context/http/HttpConversationContextImpl.java",
            "status": "modified",
            "additions": 0,
            "deletions": 2,
            "changes": 2,
            "blob_url": "https://github.com/weld/core/blob/c3179e839d2f031efac7545bfd259fa31a3bcdcb/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fcontext%2Fhttp%2FHttpConversationContextImpl.java",
            "raw_url": "https://github.com/weld/core/raw/c3179e839d2f031efac7545bfd259fa31a3bcdcb/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fcontext%2Fhttp%2FHttpConversationContextImpl.java",
            "contents_url": "https://api.github.com/repos/weld/core/contents/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fcontext%2Fhttp%2FHttpConversationContextImpl.java?ref=c3179e839d2f031efac7545bfd259fa31a3bcdcb",
            "patch": "@@ -66,6 +66,4 @@ protected Object getSessionAttributeFromSession(HttpSession session, String name\n     protected HttpSession getSessionFromRequest(HttpServletRequest request, boolean create) {\n         return SessionHolder.getSession(request, create);\n     }\n-\n-\n }"
        },
        {
            "sha": "0c3f8380267fda5bbe1e6be7f7ef9ac823686812",
            "filename": "impl/src/main/java/org/jboss/weld/context/http/LazyHttpConversationContextImpl.java",
            "status": "added",
            "additions": 95,
            "deletions": 0,
            "changes": 95,
            "blob_url": "https://github.com/weld/core/blob/c3179e839d2f031efac7545bfd259fa31a3bcdcb/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fcontext%2Fhttp%2FLazyHttpConversationContextImpl.java",
            "raw_url": "https://github.com/weld/core/raw/c3179e839d2f031efac7545bfd259fa31a3bcdcb/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fcontext%2Fhttp%2FLazyHttpConversationContextImpl.java",
            "contents_url": "https://api.github.com/repos/weld/core/contents/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fcontext%2Fhttp%2FLazyHttpConversationContextImpl.java?ref=c3179e839d2f031efac7545bfd259fa31a3bcdcb",
            "patch": "@@ -0,0 +1,95 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2013, Red Hat, Inc., and individual contributors\n+ * by the @authors tag. See the copyright.txt in the distribution for a\n+ * full listing of individual contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.weld.context.http;\n+\n+import javax.enterprise.context.BusyConversationException;\n+import javax.enterprise.context.ConversationScoped;\n+import javax.enterprise.context.NonexistentConversationException;\n+import javax.servlet.http.HttpSession;\n+\n+import org.jboss.weld.logging.ConversationLogger;\n+import org.jboss.weld.servlet.ConversationContextActivator;\n+\n+/**\n+ * An implementation of {@link HttpConversationContext} that is capable of lazy initialization. By default, the context is associated with a request and the active flag\n+ * is set to true in the beginning of the request processing but the context is not initialized (cid not read and the state not restored) until the conversation context is first\n+ * accessed. As a result, {@link BusyConversationException} or {@link NonexistentConversationException} may be thrown late in the request processing and any component invoking\n+ * methods on {@link ConversationScoped} beans should be ready to catch these exceptions.\n+ *\n+ * Lazy initialization is mostly a workaround for https://issues.jboss.org/browse/CDI-411.\n+ *\n+ * @author Jozef Hartinger\n+ *\n+ */\n+public class LazyHttpConversationContextImpl extends HttpConversationContextImpl {\n+\n+    private final ThreadLocal<Object> initialized;\n+\n+    public LazyHttpConversationContextImpl(String contextId) {\n+        super(contextId);\n+        this.initialized = new ThreadLocal<Object>();\n+    }\n+\n+    @Override\n+    public void activate() {\n+        if (!isActive()) {\n+            if (!isAssociated()) {\n+                throw ConversationLogger.LOG.mustCallAssociateBeforeActivate();\n+            }\n+            // Activate the context\n+            super.setActive(true);\n+        } else {\n+            throw ConversationLogger.LOG.contextAlreadyActive();\n+        }\n+    }\n+\n+    public boolean isInitialized() {\n+        return initialized.get() != null;\n+    }\n+\n+    @Override\n+    protected void initialize(String cid) {\n+        this.initialized.set(Boolean.TRUE);\n+        super.initialize(cid);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        if (isInitialized()) {\n+            try {\n+                super.deactivate();\n+            } finally {\n+                this.initialized.remove();\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean destroy(HttpSession session) {\n+        if (isAssociated()) {\n+            checkContextInitialized();\n+        }\n+        return super.destroy(session);\n+    }\n+\n+    @Override\n+    protected void checkContextInitialized() {\n+        if (!isInitialized()) {\n+            initialize(ConversationContextActivator.determineConversationId(getRequest(), getParameterName()));\n+        }\n+    }\n+}"
        },
        {
            "sha": "9c895488f709e634ba8cac23371ee6c10d79eaad",
            "filename": "impl/src/main/java/org/jboss/weld/servlet/ConversationContextActivator.java",
            "status": "modified",
            "additions": 45,
            "deletions": 27,
            "changes": 72,
            "blob_url": "https://github.com/weld/core/blob/c3179e839d2f031efac7545bfd259fa31a3bcdcb/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fservlet%2FConversationContextActivator.java",
            "raw_url": "https://github.com/weld/core/raw/c3179e839d2f031efac7545bfd259fa31a3bcdcb/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fservlet%2FConversationContextActivator.java",
            "contents_url": "https://api.github.com/repos/weld/core/contents/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fservlet%2FConversationContextActivator.java?ref=c3179e839d2f031efac7545bfd259fa31a3bcdcb",
            "patch": "@@ -24,6 +24,7 @@\n import org.jboss.weld.context.http.HttpConversationContext;\n import org.jboss.weld.context.http.HttpRequestContext;\n import org.jboss.weld.context.http.HttpRequestContextImpl;\n+import org.jboss.weld.context.http.LazyHttpConversationContextImpl;\n import org.jboss.weld.event.FastEvent;\n import org.jboss.weld.literal.DestroyedLiteral;\n import org.jboss.weld.literal.InitializedLiteral;\n@@ -46,6 +47,7 @@ public class ConversationContextActivator {\n     private static final String NO_CID = \"nocid\";\n     private static final String CONVERSATION_PROPAGATION = \"conversationPropagation\";\n     private static final String CONVERSATION_PROPAGATION_NONE = \"none\";\n+\n     private static final String CONTEXT_ACTIVATED_IN_REQUEST = ConversationContextActivator.class.getName() + \"CONTEXT_ACTIVATED_IN_REQUEST\";\n \n     private final BeanManagerImpl beanManager;\n@@ -55,10 +57,13 @@ public class ConversationContextActivator {\n     private final FastEvent<HttpServletRequest> conversationInitializedEvent;\n     private final FastEvent<HttpServletRequest> conversationDestroyedEvent;\n \n-    protected ConversationContextActivator(BeanManagerImpl beanManager) {\n+    private final boolean lazy;\n+\n+    protected ConversationContextActivator(BeanManagerImpl beanManager, boolean lazy) {\n         this.beanManager = beanManager;\n         conversationInitializedEvent = FastEvent.of(HttpServletRequest.class, beanManager, InitializedLiteral.CONVERSATION);\n         conversationDestroyedEvent = FastEvent.of(HttpServletRequest.class, beanManager, DestroyedLiteral.CONVERSATION);\n+        this.lazy = lazy;\n     }\n \n     private HttpConversationContext httpConversationContext() {\n@@ -89,53 +94,40 @@ public void stopConversationContext(HttpServletRequest request) {\n \n     protected void activateConversationContext(HttpServletRequest request) {\n         HttpConversationContext conversationContext = httpConversationContext();\n-        String cid = getConversationId(request, httpConversationContext());\n-        ConversationLogger.LOG.resumingConversation(cid);\n \n         /*\n          * Don't try to reactivate the ConversationContext if we have already activated it for this request WELD-877\n          */\n         if (!isContextActivatedInRequest(request)) {\n             setContextActivatedInRequest(request);\n-            conversationContext.activate(cid);\n-            if (cid == null) { // transient conversation\n-                conversationInitializedEvent.fire(request);\n-            }\n+            activate(conversationContext, request);\n         } else {\n             /*\n              * We may have previously been associated with a ConversationContext, but the reference to that context may have been lost during a Servlet forward\n              * WELD-877\n              */\n             conversationContext.dissociate(request);\n             conversationContext.associate(request);\n+            activate(conversationContext, request);\n+        }\n+    }\n+\n+    private void activate(HttpConversationContext conversationContext, HttpServletRequest request) {\n+        if (lazy) {\n+            conversationContext.activate();\n+        } else {\n+            String cid = determineConversationId(request, conversationContext.getParameterName());\n             conversationContext.activate(cid);\n+            if (cid == null) { // transient conversation\n+                conversationInitializedEvent.fire(request);\n+            }\n         }\n     }\n \n     protected void associateConversationContext(HttpServletRequest request) {\n         httpConversationContext().associate(request);\n     }\n \n-    /**\n-     * Gets the propagated conversation id parameter from the request\n-     *\n-     * @return The conversation id (or null if not found)\n-     */\n-    private static String getConversationId(HttpServletRequest request, ConversationContext conversationContext) {\n-        if (request.getParameter(NO_CID) != null) {\n-            return null; // ignore cid; WELD-919\n-        }\n-\n-        if (CONVERSATION_PROPAGATION_NONE.equals(request.getParameter(CONVERSATION_PROPAGATION))) {\n-            return null; // conversationPropagation=none (CDI-135)\n-        }\n-\n-        String cidName = conversationContext.getParameterName();\n-        String cid = request.getParameter(cidName);\n-        ConversationLogger.LOG.foundConversationFromRequest(cid);\n-        return cid;\n-    }\n-\n     private void setContextActivatedInRequest(HttpServletRequest request) {\n         request.setAttribute(CONTEXT_ACTIVATED_IN_REQUEST, true);\n     }\n@@ -152,6 +144,14 @@ protected void deactivateConversationContext(HttpServletRequest request) {\n         ConversationContext conversationContext = httpConversationContext();\n         if (conversationContext.isActive()) {\n             // Only deactivate the context if one is already active, otherwise we get Exceptions\n+            if (conversationContext instanceof LazyHttpConversationContextImpl) {\n+                LazyHttpConversationContextImpl lazyConversationContext = (LazyHttpConversationContextImpl) conversationContext;\n+                if (!lazyConversationContext.isInitialized()) {\n+                    // if this lazy conversation has not been touched yet, just deactivate it\n+                    lazyConversationContext.deactivate();\n+                    return;\n+                }\n+            }\n             boolean isTransient = conversationContext.getCurrentConversation().isTransient();\n             if (ConversationLogger.LOG.isTraceEnabled()) {\n                 if (isTransient) {\n@@ -187,4 +187,22 @@ public void sessionCreated(HttpSession session) {\n             abstractConversationContext.sessionCreated(request);\n         }\n     }\n+\n+    public static String determineConversationId(HttpServletRequest request, String parameterName) {\n+        if (request == null) {\n+            throw ConversationLogger.LOG.mustCallAssociateBeforeActivate();\n+        }\n+        if (request.getParameter(NO_CID) != null) {\n+            return null; // ignore cid; WELD-919\n+        }\n+\n+        if (CONVERSATION_PROPAGATION_NONE.equals(request.getParameter(CONVERSATION_PROPAGATION))) {\n+            return null; // conversationPropagation=none (CDI-135)\n+        }\n+\n+        String cidName = parameterName;\n+        String cid = request.getParameter(cidName);\n+        ConversationLogger.LOG.foundConversationFromRequest(cid);\n+        return cid;\n+    }\n }"
        },
        {
            "sha": "bc51aecae1fad5375af81a08338447058f2479d9",
            "filename": "impl/src/main/java/org/jboss/weld/servlet/ConversationFilter.java",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/weld/core/blob/c3179e839d2f031efac7545bfd259fa31a3bcdcb/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fservlet%2FConversationFilter.java",
            "raw_url": "https://github.com/weld/core/raw/c3179e839d2f031efac7545bfd259fa31a3bcdcb/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fservlet%2FConversationFilter.java",
            "contents_url": "https://api.github.com/repos/weld/core/contents/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fservlet%2FConversationFilter.java?ref=c3179e839d2f031efac7545bfd259fa31a3bcdcb",
            "patch": "@@ -54,7 +54,7 @@ public class ConversationFilter implements Filter {\n \n     @Override\n     public void init(FilterConfig filterConfig) throws ServletException {\n-        this.conversationContextActivator = new ConversationContextActivator(manager);\n+        this.conversationContextActivator = new ConversationContextActivator(manager, false);\n         filterConfig.getServletContext().setAttribute(CONVERSATION_FILTER_REGISTERED, Boolean.TRUE);\n         contextActivationFilter = ServletUtils.getContextActivationFilter(manager, filterConfig.getServletContext());\n     }"
        },
        {
            "sha": "c10f5f49c0f69add04e287cbf9ece10e0e362c5a",
            "filename": "impl/src/main/java/org/jboss/weld/servlet/HttpContextLifecycle.java",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/weld/core/blob/c3179e839d2f031efac7545bfd259fa31a3bcdcb/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fservlet%2FHttpContextLifecycle.java",
            "raw_url": "https://github.com/weld/core/raw/c3179e839d2f031efac7545bfd259fa31a3bcdcb/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fservlet%2FHttpContextLifecycle.java",
            "contents_url": "https://api.github.com/repos/weld/core/contents/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fservlet%2FHttpContextLifecycle.java?ref=c3179e839d2f031efac7545bfd259fa31a3bcdcb",
            "patch": "@@ -72,9 +72,9 @@ public class HttpContextLifecycle implements Service {\n \n     private final ServletApiAbstraction servletApi;\n \n-    public HttpContextLifecycle(BeanManagerImpl beanManager, HttpContextActivationFilter contextActivationFilter, boolean ignoreForwards, boolean ignoreIncludes) {\n+    public HttpContextLifecycle(BeanManagerImpl beanManager, HttpContextActivationFilter contextActivationFilter, boolean ignoreForwards, boolean ignoreIncludes, boolean lazyConversationContext) {\n         this.beanManager = beanManager;\n-        this.conversationContextActivator = new ConversationContextActivator(beanManager);\n+        this.conversationContextActivator = new ConversationContextActivator(beanManager, lazyConversationContext);\n         this.conversationActivationEnabled = null;\n         this.ignoreForwards = ignoreForwards;\n         this.ignoreIncludes = ignoreIncludes;"
        },
        {
            "sha": "b82724a30a11e05f3b67c96e23d8785982fc86f3",
            "filename": "impl/src/main/java/org/jboss/weld/servlet/WeldInitialListener.java",
            "status": "modified",
            "additions": 19,
            "deletions": 1,
            "changes": 20,
            "blob_url": "https://github.com/weld/core/blob/c3179e839d2f031efac7545bfd259fa31a3bcdcb/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fservlet%2FWeldInitialListener.java",
            "raw_url": "https://github.com/weld/core/raw/c3179e839d2f031efac7545bfd259fa31a3bcdcb/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fservlet%2FWeldInitialListener.java",
            "contents_url": "https://api.github.com/repos/weld/core/contents/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fservlet%2FWeldInitialListener.java?ref=c3179e839d2f031efac7545bfd259fa31a3bcdcb",
            "patch": "@@ -34,6 +34,9 @@\n \n import org.jboss.weld.Container;\n import org.jboss.weld.bean.builtin.BeanManagerProxy;\n+import org.jboss.weld.event.ObserverNotifier;\n+import org.jboss.weld.literal.DestroyedLiteral;\n+import org.jboss.weld.literal.InitializedLiteral;\n import org.jboss.weld.logging.ServletLogger;\n import org.jboss.weld.manager.BeanManagerImpl;\n import org.jboss.weld.servlet.api.InitParameters;\n@@ -58,6 +61,8 @@\n  */\n public class WeldInitialListener extends AbstractServletListener {\n \n+    private static final String LAZY_CONVERSATION_CONTEXT_PARAM = \"org.jboss.weld.context.conversation.lazy\";\n+\n     @Inject\n     private BeanManagerImpl beanManager;\n     private HttpContextLifecycle lifecycle;\n@@ -82,7 +87,8 @@ public void contextInitialized(ServletContextEvent sce) {\n         HttpContextActivationFilter filter = ServletUtils.getContextActivationFilter(beanManager, ctx);\n         final boolean ignoreForwards = getBooleanInitParameter(ctx, InitParameters.CONTEXT_IGNORE_FORWARD, true);\n         final boolean ignoreIncludes = getBooleanInitParameter(ctx, InitParameters.CONTEXT_IGNORE_INCLUDE, true);\n-        this.lifecycle = new HttpContextLifecycle(beanManager, filter, ignoreForwards, ignoreIncludes);\n+        final boolean lazyConversationContext = initLazyConversationContext(beanManager, ctx);\n+        this.lifecycle = new HttpContextLifecycle(beanManager, filter, ignoreForwards, ignoreIncludes, lazyConversationContext);\n         if (Boolean.valueOf(ctx.getInitParameter(CONVERSATION_FILTER_REGISTERED))) {\n             this.lifecycle.setConversationActivationEnabled(false);\n         }\n@@ -97,6 +103,18 @@ private boolean getBooleanInitParameter(ServletContext ctx, String parameterName\n         return Boolean.valueOf(value);\n     }\n \n+    /**\n+     * The lazy conversation context can be configured to be enabled or disabled in web.xml. If not configured, the default behavior depends on whether an\n+     * observer for the Initialized(ConversationScoped.class) event is present or not. If an observer is present, the lazy conversation context is disabled by\n+     * default. Otherwise, it is enabled.\n+     */\n+    private boolean initLazyConversationContext(BeanManagerImpl manager, ServletContext ctx) {\n+        ObserverNotifier notifier = manager.getAccessibleLenientObserverNotifier();\n+        boolean noObservers = notifier.resolveObserverMethods(notifier.buildEventResolvable(HttpServletRequest.class, InitializedLiteral.CONVERSATION)).isEmpty()\n+                && notifier.resolveObserverMethods(notifier.buildEventResolvable(HttpServletRequest.class, DestroyedLiteral.CONVERSATION)).isEmpty();\n+        return getBooleanInitParameter(ctx, LAZY_CONVERSATION_CONTEXT_PARAM, noObservers);\n+    }\n+\n     @Override\n     public void contextDestroyed(ServletContextEvent sce) {\n         lifecycle.contextDestroyed(sce.getServletContext());"
        },
        {
            "sha": "66aa352fdee2c3c72c508940d9a8e98e0c496bdf",
            "filename": "tests-arquillian/src/test/java/org/jboss/weld/tests/contexts/conversation/weld1559/Foo.java",
            "status": "added",
            "additions": 29,
            "deletions": 0,
            "changes": 29,
            "blob_url": "https://github.com/weld/core/blob/c3179e839d2f031efac7545bfd259fa31a3bcdcb/tests-arquillian%2Fsrc%2Ftest%2Fjava%2Forg%2Fjboss%2Fweld%2Ftests%2Fcontexts%2Fconversation%2Fweld1559%2FFoo.java",
            "raw_url": "https://github.com/weld/core/raw/c3179e839d2f031efac7545bfd259fa31a3bcdcb/tests-arquillian%2Fsrc%2Ftest%2Fjava%2Forg%2Fjboss%2Fweld%2Ftests%2Fcontexts%2Fconversation%2Fweld1559%2FFoo.java",
            "contents_url": "https://api.github.com/repos/weld/core/contents/tests-arquillian%2Fsrc%2Ftest%2Fjava%2Forg%2Fjboss%2Fweld%2Ftests%2Fcontexts%2Fconversation%2Fweld1559%2FFoo.java?ref=c3179e839d2f031efac7545bfd259fa31a3bcdcb",
            "patch": "@@ -0,0 +1,29 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2013, Red Hat, Inc., and individual contributors\n+ * by the @authors tag. See the copyright.txt in the distribution for a\n+ * full listing of individual contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.weld.tests.contexts.conversation.weld1559;\n+\n+import java.io.Serializable;\n+\n+import javax.enterprise.context.ConversationScoped;\n+\n+@SuppressWarnings(\"serial\")\n+@ConversationScoped\n+public class Foo implements Serializable {\n+\n+    public void ping() {\n+    }\n+}"
        },
        {
            "sha": "a63a8fb0b533a854a05ea29e5b70113dc4b97926",
            "filename": "tests-arquillian/src/test/java/org/jboss/weld/tests/contexts/conversation/weld1559/LazyConversationContextTest.java",
            "status": "added",
            "additions": 55,
            "deletions": 0,
            "changes": 55,
            "blob_url": "https://github.com/weld/core/blob/c3179e839d2f031efac7545bfd259fa31a3bcdcb/tests-arquillian%2Fsrc%2Ftest%2Fjava%2Forg%2Fjboss%2Fweld%2Ftests%2Fcontexts%2Fconversation%2Fweld1559%2FLazyConversationContextTest.java",
            "raw_url": "https://github.com/weld/core/raw/c3179e839d2f031efac7545bfd259fa31a3bcdcb/tests-arquillian%2Fsrc%2Ftest%2Fjava%2Forg%2Fjboss%2Fweld%2Ftests%2Fcontexts%2Fconversation%2Fweld1559%2FLazyConversationContextTest.java",
            "contents_url": "https://api.github.com/repos/weld/core/contents/tests-arquillian%2Fsrc%2Ftest%2Fjava%2Forg%2Fjboss%2Fweld%2Ftests%2Fcontexts%2Fconversation%2Fweld1559%2FLazyConversationContextTest.java?ref=c3179e839d2f031efac7545bfd259fa31a3bcdcb",
            "patch": "@@ -0,0 +1,55 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2013, Red Hat, Inc., and individual contributors\n+ * by the @authors tag. See the copyright.txt in the distribution for a\n+ * full listing of individual contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.weld.tests.contexts.conversation.weld1559;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+\n+import junit.framework.Assert;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.jboss.weld.tests.category.Integration;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(Arquillian.class)\n+@Category(Integration.class)\n+public class LazyConversationContextTest {\n+\n+    @ArquillianResource\n+    URL url;\n+\n+    @Deployment(testable = false)\n+    public static Archive<?> getDeployment() {\n+        return ShrinkWrap.create(WebArchive.class, \"lazyConvContext.war\").addClasses(Foo.class, SimpleFilter.class).addAsWebInfResource(LazyConversationContextTest.class.getPackage(), \"web.xml\", \"web.xml\");\n+    }\n+\n+    @Test\n+    public void testCidParameterReadLazily() throws IOException {\n+        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+        con.setRequestMethod(\"POST\");\n+        int responseCode = con.getResponseCode();\n+        Assert.assertEquals(200, responseCode);\n+    }\n+}"
        },
        {
            "sha": "9f04e23435ea0047694ba5ddfb71d7015720e913",
            "filename": "tests-arquillian/src/test/java/org/jboss/weld/tests/contexts/conversation/weld1559/SimpleFilter.java",
            "status": "added",
            "additions": 58,
            "deletions": 0,
            "changes": 58,
            "blob_url": "https://github.com/weld/core/blob/c3179e839d2f031efac7545bfd259fa31a3bcdcb/tests-arquillian%2Fsrc%2Ftest%2Fjava%2Forg%2Fjboss%2Fweld%2Ftests%2Fcontexts%2Fconversation%2Fweld1559%2FSimpleFilter.java",
            "raw_url": "https://github.com/weld/core/raw/c3179e839d2f031efac7545bfd259fa31a3bcdcb/tests-arquillian%2Fsrc%2Ftest%2Fjava%2Forg%2Fjboss%2Fweld%2Ftests%2Fcontexts%2Fconversation%2Fweld1559%2FSimpleFilter.java",
            "contents_url": "https://api.github.com/repos/weld/core/contents/tests-arquillian%2Fsrc%2Ftest%2Fjava%2Forg%2Fjboss%2Fweld%2Ftests%2Fcontexts%2Fconversation%2Fweld1559%2FSimpleFilter.java?ref=c3179e839d2f031efac7545bfd259fa31a3bcdcb",
            "patch": "@@ -0,0 +1,58 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2013, Red Hat, Inc., and individual contributors\n+ * by the @authors tag. See the copyright.txt in the distribution for a\n+ * full listing of individual contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.weld.tests.contexts.conversation.weld1559;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+\n+import javax.inject.Inject;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.annotation.WebFilter;\n+import javax.servlet.http.HttpServletResponse;\n+\n+@WebFilter(\"/*\")\n+public class SimpleFilter implements Filter {\n+\n+    @Inject\n+    private Foo foo;\n+\n+    @Override\n+    public void init(FilterConfig filterConfig) throws ServletException {\n+    }\n+\n+    @Override\n+    public void doFilter(ServletRequest request, ServletResponse resp, FilterChain chain) throws IOException, ServletException {\n+        HttpServletResponse response = (HttpServletResponse) resp;\n+        try {\n+            request.setCharacterEncoding(\"BlahBlah\"); // should fail if the body has not been read yet\n+            response.setStatus(500);\n+        } catch (UnsupportedEncodingException expected) {\n+            foo.ping();\n+            response.setStatus(200);\n+        }\n+    }\n+\n+    @Override\n+    public void destroy() {\n+    }\n+\n+}"
        },
        {
            "sha": "93c7125a6141db861157c475c7358684ed8ac5c7",
            "filename": "tests-arquillian/src/test/resources/org/jboss/weld/tests/contexts/conversation/weld1559/web.xml",
            "status": "added",
            "additions": 11,
            "deletions": 0,
            "changes": 11,
            "blob_url": "https://github.com/weld/core/blob/c3179e839d2f031efac7545bfd259fa31a3bcdcb/tests-arquillian%2Fsrc%2Ftest%2Fresources%2Forg%2Fjboss%2Fweld%2Ftests%2Fcontexts%2Fconversation%2Fweld1559%2Fweb.xml",
            "raw_url": "https://github.com/weld/core/raw/c3179e839d2f031efac7545bfd259fa31a3bcdcb/tests-arquillian%2Fsrc%2Ftest%2Fresources%2Forg%2Fjboss%2Fweld%2Ftests%2Fcontexts%2Fconversation%2Fweld1559%2Fweb.xml",
            "contents_url": "https://api.github.com/repos/weld/core/contents/tests-arquillian%2Fsrc%2Ftest%2Fresources%2Forg%2Fjboss%2Fweld%2Ftests%2Fcontexts%2Fconversation%2Fweld1559%2Fweb.xml?ref=c3179e839d2f031efac7545bfd259fa31a3bcdcb",
            "patch": "@@ -0,0 +1,11 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<web-app version=\"3.0\" xmlns=\"http://java.sun.com/xml/ns/javaee\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\">\n+\n+    <context-param>\n+        <param-name>org.jboss.weld.context.conversation.lazy</param-name>\n+        <param-value>true</param-value>\n+    </context-param>\n+\n+</web-app>"
        }
    ]
}