{
    "sha": "ee87a184c7ccbfe03234782ebd6cc76c954a4a3c",
    "node_id": "MDY6Q29tbWl0MTA2Mzc4OTY6ZWU4N2ExODRjN2NjYmZlMDMyMzQ3ODJlYmQ2Y2M3NmM5NTRhNGEzYw==",
    "commit": {
        "author": {
            "name": "Gary Gregory",
            "email": "ggregory@apache.org",
            "date": "2016-09-21T23:19:43Z"
        },
        "committer": {
            "name": "Gary Gregory",
            "email": "ggregory@apache.org",
            "date": "2016-09-21T23:19:43Z"
        },
        "message": "[LOG4J2-1604] Log4j2 TcpSocketServer in background.",
        "tree": {
            "sha": "09ac2067096ac291249bf37dc023c6e81ec5644f",
            "url": "https://api.github.com/repos/apache/logging-log4j2/git/trees/09ac2067096ac291249bf37dc023c6e81ec5644f"
        },
        "url": "https://api.github.com/repos/apache/logging-log4j2/git/commits/ee87a184c7ccbfe03234782ebd6cc76c954a4a3c",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/logging-log4j2/commits/ee87a184c7ccbfe03234782ebd6cc76c954a4a3c",
    "html_url": "https://github.com/apache/logging-log4j2/commit/ee87a184c7ccbfe03234782ebd6cc76c954a4a3c",
    "comments_url": "https://api.github.com/repos/apache/logging-log4j2/commits/ee87a184c7ccbfe03234782ebd6cc76c954a4a3c/comments",
    "author": {
        "login": "garydgregory",
        "id": 1187639,
        "node_id": "MDQ6VXNlcjExODc2Mzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1187639?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/garydgregory",
        "html_url": "https://github.com/garydgregory",
        "followers_url": "https://api.github.com/users/garydgregory/followers",
        "following_url": "https://api.github.com/users/garydgregory/following{/other_user}",
        "gists_url": "https://api.github.com/users/garydgregory/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/garydgregory/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/garydgregory/subscriptions",
        "organizations_url": "https://api.github.com/users/garydgregory/orgs",
        "repos_url": "https://api.github.com/users/garydgregory/repos",
        "events_url": "https://api.github.com/users/garydgregory/events{/privacy}",
        "received_events_url": "https://api.github.com/users/garydgregory/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "garydgregory",
        "id": 1187639,
        "node_id": "MDQ6VXNlcjExODc2Mzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1187639?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/garydgregory",
        "html_url": "https://github.com/garydgregory",
        "followers_url": "https://api.github.com/users/garydgregory/followers",
        "following_url": "https://api.github.com/users/garydgregory/following{/other_user}",
        "gists_url": "https://api.github.com/users/garydgregory/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/garydgregory/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/garydgregory/subscriptions",
        "organizations_url": "https://api.github.com/users/garydgregory/orgs",
        "repos_url": "https://api.github.com/users/garydgregory/repos",
        "events_url": "https://api.github.com/users/garydgregory/events{/privacy}",
        "received_events_url": "https://api.github.com/users/garydgregory/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "8729b28d01d4335566f390bd788886abc8728745",
            "url": "https://api.github.com/repos/apache/logging-log4j2/commits/8729b28d01d4335566f390bd788886abc8728745",
            "html_url": "https://github.com/apache/logging-log4j2/commit/8729b28d01d4335566f390bd788886abc8728745"
        }
    ],
    "stats": {
        "total": 389,
        "additions": 277,
        "deletions": 112
    },
    "files": [
        {
            "sha": "120404bcac991cdd7591bc0a0528aae110959289",
            "filename": "log4j-core/pom.xml",
            "status": "modified",
            "additions": 6,
            "deletions": 0,
            "changes": 6,
            "blob_url": "https://github.com/apache/logging-log4j2/blob/ee87a184c7ccbfe03234782ebd6cc76c954a4a3c/log4j-core%2Fpom.xml",
            "raw_url": "https://github.com/apache/logging-log4j2/raw/ee87a184c7ccbfe03234782ebd6cc76c954a4a3c/log4j-core%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core%2Fpom.xml?ref=ee87a184c7ccbfe03234782ebd6cc76c954a4a3c",
            "patch": "@@ -144,6 +144,12 @@\n       <artifactId>commons-csv</artifactId>\n       <optional>true</optional>\n     </dependency>\n+    <!-- Command line for TCP and UDP servers -->\n+    <dependency>\n+      <groupId>com.beust</groupId>\n+      <artifactId>jcommander</artifactId>\n+      <optional>true</optional>\n+    </dependency>\n \n     <!-- TEST DEPENDENCIES -->\n "
        },
        {
            "sha": "8e24c25634f9433b0695d33a7ea4ef06c429a138",
            "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/net/server/AbstractSocketServer.java",
            "status": "modified",
            "additions": 88,
            "deletions": 5,
            "changes": 93,
            "blob_url": "https://github.com/apache/logging-log4j2/blob/ee87a184c7ccbfe03234782ebd6cc76c954a4a3c/log4j-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Flogging%2Flog4j%2Fcore%2Fnet%2Fserver%2FAbstractSocketServer.java",
            "raw_url": "https://github.com/apache/logging-log4j2/raw/ee87a184c7ccbfe03234782ebd6cc76c954a4a3c/log4j-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Flogging%2Flog4j%2Fcore%2Fnet%2Fserver%2FAbstractSocketServer.java",
            "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Flogging%2Flog4j%2Fcore%2Fnet%2Fserver%2FAbstractSocketServer.java?ref=ee87a184c7ccbfe03234782ebd6cc76c954a4a3c",
            "patch": "@@ -21,6 +21,7 @@\n import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.net.InetAddress;\n import java.net.MalformedURLException;\n import java.net.URI;\n import java.net.URL;\n@@ -34,18 +35,85 @@\n import org.apache.logging.log4j.core.config.ConfigurationSource;\n import org.apache.logging.log4j.core.config.xml.XmlConfiguration;\n import org.apache.logging.log4j.core.config.xml.XmlConfigurationFactory;\n+import org.apache.logging.log4j.core.util.InetAddressConverter;\n import org.apache.logging.log4j.core.util.Log4jThread;\n import org.apache.logging.log4j.util.Strings;\n \n+import com.beust.jcommander.JCommander;\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.validators.PositiveInteger;\n+\n /**\n  * Abstract socket server for TCP and UDP implementations.\n  * \n- * @param <T> The kind of input stream read\n+ * @param <T>\n+ *            The kind of input stream read\n  * \n- * TODO Make a LifeCycle\n+ *            TODO Make a LifeCycle\n  */\n public abstract class AbstractSocketServer<T extends InputStream> extends LogEventListener implements Runnable {\n \n+    protected static class CommandLineArguments {\n+\n+        @Parameter(names = { \"--config\", \"-c\" }, description = \"Log4j configuration file location (path or URL).\")\n+        private String configLocation;\n+\n+        @Parameter(names = { \"--help\", \"-?\", \"-h\" }, help = true, description = \"Prints this help.\")\n+        private boolean help;\n+\n+        @Parameter(names = { \"--interactive\",\n+                \"-i\" }, description = \"Accepts commands on standard input (\\\"exit\\\" is the only command).\")\n+        private boolean interactive;\n+\n+        @Parameter(names = { \"--port\",\n+                \"-p\" }, validateWith = PositiveInteger.class, description = \"Server socket port.\")\n+        private int port;\n+\n+        @Parameter(names = { \"--localbindaddress\",\n+                \"-a\" }, converter = InetAddressConverter.class, description = \"Server socket local bind address.\")\n+        private InetAddress localBindAddress;\n+\n+        String getConfigLocation() {\n+            return configLocation;\n+        }\n+\n+        int getPort() {\n+            return port;\n+        }\n+\n+        boolean isHelp() {\n+            return help;\n+        }\n+\n+        protected boolean isInteractive() {\n+            return interactive;\n+        }\n+\n+        void setConfigLocation(final String configLocation) {\n+            this.configLocation = configLocation;\n+        }\n+\n+        void setHelp(final boolean help) {\n+            this.help = help;\n+        }\n+\n+        void setInteractive(final boolean interactive) {\n+            this.interactive = interactive;\n+        }\n+\n+        void setPort(final int port) {\n+            this.port = port;\n+        }\n+\n+        InetAddress getLocalBindAddress() {\n+            return localBindAddress;\n+        }\n+\n+        void setLocalBindAddress(InetAddress localBindAddress) {\n+            this.localBindAddress = localBindAddress;\n+        }\n+    }\n+\n     /**\n      * Factory that creates a Configuration for the server.\n      */\n@@ -58,7 +126,8 @@ public ServerConfigurationFactory(final String path) {\n         }\n \n         @Override\n-        public Configuration getConfiguration(final LoggerContext loggerContext, final String name, final URI configLocation) {\n+        public Configuration getConfiguration(final LoggerContext loggerContext, final String name,\n+                final URI configLocation) {\n             if (Strings.isNotEmpty(path)) {\n                 File file = null;\n                 ConfigurationSource source = null;\n@@ -95,6 +164,18 @@ public Configuration getConfiguration(final LoggerContext loggerContext, final S\n \n     protected static final int MAX_PORT = 65534;\n \n+    static <T extends CommandLineArguments> T parseCommandLine(final String[] mainArgs, final Class<?> clazz,\n+            final T args) {\n+        final JCommander jCommander = new JCommander(args);\n+        jCommander.setProgramName(clazz.getName());\n+        jCommander.setCaseSensitiveOptions(false);\n+        jCommander.parse(mainArgs);\n+        if (args.isHelp()) {\n+            jCommander.usage();\n+        }\n+        return args;\n+    }\n+\n     private volatile boolean active = true;\n \n     protected final LogEventBridge<T> logEventInput;\n@@ -104,8 +185,10 @@ public Configuration getConfiguration(final LoggerContext loggerContext, final S\n     /**\n      * Creates a new socket server.\n      * \n-     * @param port listen to this port\n-     * @param logEventInput Use this input to read log events.\n+     * @param port\n+     *            listen to this port\n+     * @param logEventInput\n+     *            Use this input to read log events.\n      */\n     public AbstractSocketServer(final int port, final LogEventBridge<T> logEventInput) {\n         this.logger = LogManager.getLogger(this.getClass().getName() + '.' + port);"
        },
        {
            "sha": "72845bf68117d205ff5593df311fa819e8ed3c1e",
            "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/net/server/TcpSocketServer.java",
            "status": "modified",
            "additions": 118,
            "deletions": 62,
            "changes": 180,
            "blob_url": "https://github.com/apache/logging-log4j2/blob/ee87a184c7ccbfe03234782ebd6cc76c954a4a3c/log4j-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Flogging%2Flog4j%2Fcore%2Fnet%2Fserver%2FTcpSocketServer.java",
            "raw_url": "https://github.com/apache/logging-log4j2/raw/ee87a184c7ccbfe03234782ebd6cc76c954a4a3c/log4j-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Flogging%2Flog4j%2Fcore%2Fnet%2Fserver%2FTcpSocketServer.java",
            "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Flogging%2Flog4j%2Fcore%2Fnet%2Fserver%2FTcpSocketServer.java?ref=ee87a184c7ccbfe03234782ebd6cc76c954a4a3c",
            "patch": "@@ -23,6 +23,7 @@\n import java.io.InputStreamReader;\n import java.io.ObjectInputStream;\n import java.io.OptionalDataException;\n+import java.net.InetAddress;\n import java.net.ServerSocket;\n import java.net.Socket;\n import java.nio.charset.Charset;\n@@ -34,14 +35,35 @@\n import org.apache.logging.log4j.core.util.Log4jThread;\n import org.apache.logging.log4j.message.EntryMessage;\n \n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.validators.PositiveInteger;\n+\n /**\n- * Listens for events over a socket connection.\n+ * Listens for Log4j events on a TCP server socket and passes them on to Log4j.\n  * \n  * @param <T>\n  *        The kind of input stream read\n+ * @see #main(String[])\n  */\n public class TcpSocketServer<T extends InputStream> extends AbstractSocketServer<T> {\n \n+    protected static class CommandLineArguments extends AbstractSocketServer.CommandLineArguments {\n+        \n+        @Parameter(names = { \"--backlog\",\n+                \"-b\" }, validateWith = PositiveInteger.class, description = \"Server socket backlog.\")\n+        // Same default as ServerSocket\n+        private int backlog = 50;\n+\n+        int getBacklog() {\n+            return backlog;\n+        }\n+\n+        void setBacklog(final int backlog) {\n+            this.backlog = backlog;\n+        }        \n+\n+    }\n+\n     /**\n      * Thread that processes the events.\n      */\n@@ -90,42 +112,6 @@ public void shutdown() {\n         }\n     }\n \n-    private final ConcurrentMap<Long, SocketHandler> handlers = new ConcurrentHashMap<>();\n-\n-    private final ServerSocket serverSocket;\n-\n-    /**\n-     * Constructor.\n-     * \n-     * @param port\n-     *        to listen.\n-     * @param logEventInput\n-     *        the log even input\n-     * @throws IOException\n-     *         if an I/O error occurs when opening the socket.\n-     */\n-    public TcpSocketServer(final int port, final LogEventBridge<T> logEventInput) throws IOException {\n-        this(port, logEventInput, new ServerSocket(port));\n-    }\n-\n-    /**\n-     * Constructor.\n-     * \n-     * @param port\n-     *        to listen.\n-     * @param logEventInput\n-     *        the log even input\n-     * @param serverSocket\n-     *        the socket server\n-     * @throws IOException\n-     *         if an I/O error occurs when opening the socket.\n-     */\n-    public TcpSocketServer(final int port, final LogEventBridge<T> logEventInput, final ServerSocket serverSocket)\n-            throws IOException {\n-        super(port, logEventInput);\n-        this.serverSocket = serverSocket;\n-    }\n-\n     /**\n      * Creates a socket server that reads JSON log events.\n      * \n@@ -156,6 +142,24 @@ public static TcpSocketServer<ObjectInputStream> createSerializedSocketServer(fi\n         return LOGGER.exit(socketServer);\n     }\n \n+    /**\n+     * Creates a socket server that reads serialized log events.\n+     * \n+     * @param port the port to listen\n+     * @param localBindAddress The server socket's local bin address\n+     * @return a new a socket server\n+     * @throws IOException\n+     *         if an I/O error occurs when opening the socket.\n+     * @since 2.7\n+     */\n+    public static TcpSocketServer<ObjectInputStream> createSerializedSocketServer(final int port, final int backlog,\n+            InetAddress localBindAddress) throws IOException {\n+        LOGGER.entry(port);\n+        final TcpSocketServer<ObjectInputStream> socketServer = new TcpSocketServer<>(port, backlog, localBindAddress,\n+                new ObjectInputStreamLogEventBridge());\n+        return LOGGER.exit(socketServer);\n+    }\n+\n     /**\n      * Creates a socket server that reads XML log events.\n      * \n@@ -172,46 +176,97 @@ public static TcpSocketServer<InputStream> createXmlSocketServer(final int port)\n     }\n \n     /**\n-     * Main startup for the server.\n+     * Main startup for the server. Run with \"--help\" for to print command line help on the console.\n      * \n      * @param args\n      *        The command line arguments.\n      * @throws Exception\n      *         if an error occurs.\n      */\n     public static void main(final String[] args) throws Exception {\n-        if (args.length < 1 || args.length > 2) {\n-            System.err.println(\"Incorrect number of arguments: \" + args.length);\n-            printUsage();\n-            return;\n-        }\n-        final int port = Integer.parseInt(args[0]);\n-        if (port <= 0 || port >= MAX_PORT) {\n-            System.err.println(\"Invalid port number: \" + port);\n-            printUsage();\n+        final CommandLineArguments cla = parseCommandLine(args, TcpSocketServer.class, new CommandLineArguments());\n+        if (cla.isHelp()) {\n             return;\n         }\n-        if (args.length == 2 && args[1].length() > 0) {\n-            ConfigurationFactory.setConfigurationFactory(new ServerConfigurationFactory(args[1]));\n+        if (cla.getConfigLocation() != null) {\n+            ConfigurationFactory.setConfigurationFactory(new ServerConfigurationFactory(cla.getConfigLocation()));\n         }\n-        final TcpSocketServer<ObjectInputStream> socketServer = TcpSocketServer.createSerializedSocketServer(port);\n+        final TcpSocketServer<ObjectInputStream> socketServer = TcpSocketServer\n+                .createSerializedSocketServer(cla.getPort(), cla.getBacklog(), cla.getLocalBindAddress());\n         final Thread serverThread = new Log4jThread(socketServer);\n         serverThread.start();\n-        final Charset enc = Charset.defaultCharset();\n-        final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in, enc));\n-        while (true) {\n-            final String line = reader.readLine();\n-            if (line == null || line.equalsIgnoreCase(\"Quit\") || line.equalsIgnoreCase(\"Stop\")\n-                    || line.equalsIgnoreCase(\"Exit\")) {\n-                socketServer.shutdown();\n-                serverThread.join();\n-                break;\n+        if (cla.isInteractive()) {\n+            final Charset enc = Charset.defaultCharset();\n+            final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in, enc));\n+            while (true) {\n+                final String line = reader.readLine();\n+                if (line == null || line.equalsIgnoreCase(\"Quit\") || line.equalsIgnoreCase(\"Stop\")\n+                        || line.equalsIgnoreCase(\"Exit\")) {\n+                    socketServer.shutdown();\n+                    serverThread.join();\n+                    break;\n+                }\n             }\n         }\n     }\n \n-    private static void printUsage() {\n-        System.out.println(\"Usage: ServerSocket port configFilePath\");\n+    private final ConcurrentMap<Long, SocketHandler> handlers = new ConcurrentHashMap<>();\n+\n+    private final ServerSocket serverSocket;\n+\n+    /**\n+     * Constructor.\n+     * \n+     * @param port\n+     *        The server socket port.\n+     * @param backlog\n+     *        The server socket backlog.\n+     * @param localBindAddress TODO\n+     * @param logEventInput\n+     *        the log even input\n+     * @throws IOException\n+     *         if an I/O error occurs when opening the socket.\n+     * @since 2.7\n+     */\n+    @SuppressWarnings(\"resource\")\n+    public TcpSocketServer(final int port, final int backlog, InetAddress localBindAddress, final LogEventBridge<T> logEventInput) throws IOException {\n+        this(port, logEventInput, new ServerSocket(port, backlog, localBindAddress));\n+    }\n+\n+    /**\n+     * Constructor.\n+     * \n+     * @param port\n+     *        to listen.\n+     * @param logEventInput\n+     *        the log even input\n+     * @throws IOException\n+     *         if an I/O error occurs when opening the socket.\n+     */\n+    public TcpSocketServer(final int port, final LogEventBridge<T> logEventInput) throws IOException {\n+        this(port, logEventInput, extracted(port));\n+    }\n+\n+    private static ServerSocket extracted(final int port) throws IOException {\n+        return new ServerSocket(port);\n+    }\n+\n+    /**\n+     * Constructor.\n+     * \n+     * @param port\n+     *        to listen.\n+     * @param logEventInput\n+     *        the log even input\n+     * @param serverSocket\n+     *        the socket server\n+     * @throws IOException\n+     *         if an I/O error occurs when opening the socket.\n+     */\n+    public TcpSocketServer(final int port, final LogEventBridge<T> logEventInput, final ServerSocket serverSocket)\n+            throws IOException {\n+        super(port, logEventInput);\n+        this.serverSocket = serverSocket;\n     }\n \n     /**\n@@ -226,8 +281,9 @@ public void run() {\n             }\n             try {\n                 // Accept incoming connections.\n-                logger.debug(\"Socket accept()...\");\n+                logger.debug(\"Listening for a connection {}...\", serverSocket);\n                 final Socket clientSocket = serverSocket.accept();\n+                logger.debug(\"Acepted connection on {}...\", serverSocket);\n                 logger.debug(\"Socket accepted: {}\", clientSocket);\n                 clientSocket.setSoLinger(true, 0);\n "
        },
        {
            "sha": "74829bc63a0d68c3ffc0bcfaa9fff7e829db895e",
            "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/net/server/UdpSocketServer.java",
            "status": "modified",
            "additions": 38,
            "deletions": 45,
            "changes": 83,
            "blob_url": "https://github.com/apache/logging-log4j2/blob/ee87a184c7ccbfe03234782ebd6cc76c954a4a3c/log4j-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Flogging%2Flog4j%2Fcore%2Fnet%2Fserver%2FUdpSocketServer.java",
            "raw_url": "https://github.com/apache/logging-log4j2/raw/ee87a184c7ccbfe03234782ebd6cc76c954a4a3c/log4j-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Flogging%2Flog4j%2Fcore%2Fnet%2Fserver%2FUdpSocketServer.java",
            "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Flogging%2Flog4j%2Fcore%2Fnet%2Fserver%2FUdpSocketServer.java?ref=ee87a184c7ccbfe03234782ebd6cc76c954a4a3c",
            "patch": "@@ -31,32 +31,14 @@\n import org.apache.logging.log4j.core.util.Log4jThread;\n \n /**\n- * Listens for events over a socket connection.\n+ * Listens for Log4j events on a datagram socket and passes them on to Log4j. \n  * \n  * @param <T>\n  *            The kind of input stream read\n+ * @see #main(String[])\n  */\n public class UdpSocketServer<T extends InputStream> extends AbstractSocketServer<T> {\n \n-    private final DatagramSocket datagramSocket;\n-\n-    // max size so we only have to deal with one packet\n-    private final int maxBufferSize = 1024 * 65 + 1024;\n-\n-    /**\n-     * Constructor.\n-     * \n-     * @param port\n-     *            to listen on.\n-     * @param logEventInput\n-     * @throws IOException\n-     *             If an error occurs.\n-     */\n-    public UdpSocketServer(final int port, final LogEventBridge<T> logEventInput) throws IOException {\n-        super(port, logEventInput);\n-        this.datagramSocket = new DatagramSocket(port);\n-    }\n-\n     /**\n      * Creates a socket server that reads JSON log events.\n      * \n@@ -97,45 +79,56 @@ public static UdpSocketServer<InputStream> createXmlSocketServer(final int port)\n     }\n \n     /**\n-     * Main startup for the server.\n+     * Main startup for the server. Run with \"--help\" for to print command line help on the console.\n      * \n      * @param args\n      *            The command line arguments.\n      * @throws Exception\n      *             if an error occurs.\n      */\n     public static void main(final String[] args) throws Exception {\n-        if (args.length < 1 || args.length > 2) {\n-            System.err.println(\"Incorrect number of arguments: \" + args.length);\n-            printUsage();\n+        final CommandLineArguments cla = parseCommandLine(args, UdpSocketServer.class, new CommandLineArguments());\n+        if (cla.isHelp()) {\n             return;\n         }\n-        final int port = Integer.parseInt(args[0]);\n-        if (port <= 0 || port >= MAX_PORT) {\n-            System.err.println(\"Invalid port number:\" + port);\n-            printUsage();\n-            return;\n+        if (cla.getConfigLocation() != null) {\n+            ConfigurationFactory.setConfigurationFactory(new ServerConfigurationFactory(cla.getConfigLocation()));\n         }\n-        if (args.length == 2 && args[1].length() > 0) {\n-            ConfigurationFactory.setConfigurationFactory(new ServerConfigurationFactory(args[1]));\n-        }\n-        final UdpSocketServer<ObjectInputStream> socketServer = UdpSocketServer.createSerializedSocketServer(port);\n-        final Thread server = new Log4jThread(socketServer);\n-        server.start();\n-        final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n-        while (true) {\n-            final String line = reader.readLine();\n-            if (line == null || line.equalsIgnoreCase(\"Quit\") || line.equalsIgnoreCase(\"Stop\")\n-                    || line.equalsIgnoreCase(\"Exit\")) {\n-                socketServer.shutdown();\n-                server.join();\n-                break;\n+        final UdpSocketServer<ObjectInputStream> socketServer = UdpSocketServer\n+                .createSerializedSocketServer(cla.getPort());\n+        final Thread serverThread = new Log4jThread(socketServer);\n+        serverThread.start();\n+        if (cla.isInteractive()) {\n+            final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n+            while (true) {\n+                final String line = reader.readLine();\n+                if (line == null || line.equalsIgnoreCase(\"Quit\") || line.equalsIgnoreCase(\"Stop\")\n+                        || line.equalsIgnoreCase(\"Exit\")) {\n+                    socketServer.shutdown();\n+                    serverThread.join();\n+                    break;\n+                }\n             }\n         }\n     }\n \n-    private static void printUsage() {\n-        System.out.println(\"Usage: ServerSocket port configFilePath\");\n+    private final DatagramSocket datagramSocket;\n+\n+    // max size so we only have to deal with one packet\n+    private final int maxBufferSize = 1024 * 65 + 1024;\n+\n+    /**\n+     * Constructor.\n+     * \n+     * @param port\n+     *            to listen on.\n+     * @param logEventInput\n+     * @throws IOException\n+     *             If an error occurs.\n+     */\n+    public UdpSocketServer(final int port, final LogEventBridge<T> logEventInput) throws IOException {\n+        super(port, logEventInput);\n+        this.datagramSocket = new DatagramSocket(port);\n     }\n \n     /**"
        },
        {
            "sha": "e14f512d3d31eb8d6f58489f999ea0f415b4dd8c",
            "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/util/InetAddressConverter.java",
            "status": "added",
            "additions": 19,
            "deletions": 0,
            "changes": 19,
            "blob_url": "https://github.com/apache/logging-log4j2/blob/ee87a184c7ccbfe03234782ebd6cc76c954a4a3c/log4j-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Flogging%2Flog4j%2Fcore%2Futil%2FInetAddressConverter.java",
            "raw_url": "https://github.com/apache/logging-log4j2/raw/ee87a184c7ccbfe03234782ebd6cc76c954a4a3c/log4j-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Flogging%2Flog4j%2Fcore%2Futil%2FInetAddressConverter.java",
            "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Flogging%2Flog4j%2Fcore%2Futil%2FInetAddressConverter.java?ref=ee87a184c7ccbfe03234782ebd6cc76c954a4a3c",
            "patch": "@@ -0,0 +1,19 @@\n+package org.apache.logging.log4j.core.util;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+\n+import com.beust.jcommander.IStringConverter;\n+\n+public class InetAddressConverter implements IStringConverter<InetAddress> {\n+\n+    @Override\n+    public InetAddress convert(String host) {\n+        try {\n+            return InetAddress.getByName(host);\n+        } catch (UnknownHostException e) {\n+            throw new IllegalArgumentException(host, e);\n+        }\n+    }\n+\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "b6dab176a81e4c091411c4a5e79077defbb79972",
            "filename": "pom.xml",
            "status": "modified",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/apache/logging-log4j2/blob/ee87a184c7ccbfe03234782ebd6cc76c954a4a3c/pom.xml",
            "raw_url": "https://github.com/apache/logging-log4j2/raw/ee87a184c7ccbfe03234782ebd6cc76c954a4a3c/pom.xml",
            "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/pom.xml?ref=ee87a184c7ccbfe03234782ebd6cc76c954a4a3c",
            "patch": "@@ -290,6 +290,11 @@\n         <artifactId>commons-lang3</artifactId>\n         <version>3.4</version>\n       </dependency>\n+      <dependency>\n+        <groupId>com.beust</groupId>\n+        <artifactId>jcommander</artifactId>\n+        <version>1.48</version>\n+      </dependency>\n       <dependency>\n         <groupId>ch.qos.logback</groupId>\n         <artifactId>logback-classic</artifactId>"
        },
        {
            "sha": "036e633e080826195622f0f68401f70f7fb3e8cb",
            "filename": "src/changes/changes.xml",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/apache/logging-log4j2/blob/ee87a184c7ccbfe03234782ebd6cc76c954a4a3c/src%2Fchanges%2Fchanges.xml",
            "raw_url": "https://github.com/apache/logging-log4j2/raw/ee87a184c7ccbfe03234782ebd6cc76c954a4a3c/src%2Fchanges%2Fchanges.xml",
            "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src%2Fchanges%2Fchanges.xml?ref=ee87a184c7ccbfe03234782ebd6cc76c954a4a3c",
            "patch": "@@ -258,6 +258,9 @@\n       <action issue=\"LOG4J2-1577\" dev=\"ggregory\" type=\"add\">\n         Add a Builder to the RoutingAppender and deprecate factory method.\n       </action>\n+      <action issue=\"LOG4J2-1604\" dev=\"ggregory\" type=\"update\" due-to=\"Colin Hillman\">\n+        Log4j2 TcpSocketServer in background.\n+      </action>\n       <action issue=\"LOG4J2-1574\" dev=\"ggregory\" type=\"update\">\n         Allow the RollingFileAppender to use default pattern layout.\n       </action>"
        }
    ]
}