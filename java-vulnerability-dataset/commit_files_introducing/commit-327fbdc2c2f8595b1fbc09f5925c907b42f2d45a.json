{
    "sha": "327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
    "node_id": "MDY6Q29tbWl0MzM4MjE5NTozMjdmYmRjMmMyZjg1OTViMWZiYzA5ZjU5MjVjOTA3YjQyZjJkNDVh",
    "commit": {
        "author": {
            "name": "Filip Hanik",
            "email": "fhanik@pivotal.io",
            "date": "2014-11-07T01:36:57Z"
        },
        "committer": {
            "name": "Filip Hanik",
            "email": "fhanik@pivotal.io",
            "date": "2014-11-24T00:02:59Z"
        },
        "message": "[skip ci]\nInitial merger of Login Server and UAA\nWhat remains is swap all controllers in the Login Server to use beans instead of rest templates\n\n[skip ci]",
        "tree": {
            "sha": "9686e2c583c0fbccd8d9a020fafac6172b3a5cbb",
            "url": "https://api.github.com/repos/cloudfoundry/uaa/git/trees/9686e2c583c0fbccd8d9a020fafac6172b3a5cbb"
        },
        "url": "https://api.github.com/repos/cloudfoundry/uaa/git/commits/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/cloudfoundry/uaa/commits/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
    "html_url": "https://github.com/cloudfoundry/uaa/commit/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
    "comments_url": "https://api.github.com/repos/cloudfoundry/uaa/commits/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/comments",
    "author": {
        "login": "fhanik",
        "id": 607429,
        "node_id": "MDQ6VXNlcjYwNzQyOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/607429?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fhanik",
        "html_url": "https://github.com/fhanik",
        "followers_url": "https://api.github.com/users/fhanik/followers",
        "following_url": "https://api.github.com/users/fhanik/following{/other_user}",
        "gists_url": "https://api.github.com/users/fhanik/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fhanik/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fhanik/subscriptions",
        "organizations_url": "https://api.github.com/users/fhanik/orgs",
        "repos_url": "https://api.github.com/users/fhanik/repos",
        "events_url": "https://api.github.com/users/fhanik/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fhanik/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "fhanik",
        "id": 607429,
        "node_id": "MDQ6VXNlcjYwNzQyOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/607429?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fhanik",
        "html_url": "https://github.com/fhanik",
        "followers_url": "https://api.github.com/users/fhanik/followers",
        "following_url": "https://api.github.com/users/fhanik/following{/other_user}",
        "gists_url": "https://api.github.com/users/fhanik/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fhanik/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fhanik/subscriptions",
        "organizations_url": "https://api.github.com/users/fhanik/orgs",
        "repos_url": "https://api.github.com/users/fhanik/repos",
        "events_url": "https://api.github.com/users/fhanik/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fhanik/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "391b2ab9a6c3e1b5d2089ff42a265ae956c3c096",
            "url": "https://api.github.com/repos/cloudfoundry/uaa/commits/391b2ab9a6c3e1b5d2089ff42a265ae956c3c096",
            "html_url": "https://github.com/cloudfoundry/uaa/commit/391b2ab9a6c3e1b5d2089ff42a265ae956c3c096"
        }
    ],
    "stats": {
        "total": 34072,
        "additions": 33993,
        "deletions": 79
    },
    "files": [
        {
            "sha": "fc751efd257bc8ccb29bb04a70b4dac320c2303c",
            "filename": "build.gradle",
            "status": "modified",
            "additions": 4,
            "deletions": 1,
            "changes": 5,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/build.gradle",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/build.gradle",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/build.gradle?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -60,7 +60,7 @@ allprojects {\n     }\n \n     rewriteInstrumentedLibs = {\n-      Boolean instrumentable = it.name.startsWith(\"cloudfoundry-identity-common-\") || it.name.startsWith(\"cloudfoundry-identity-scim-\")\n+      Boolean instrumentable = it.name.startsWith(\"cloudfoundry-identity-common-\") || it.name.startsWith(\"cloudfoundry-identity-scim-\") || it.name.startsWith(\"cloudfoundry-identity-login-\")\n       if (instrumentable) {\n         file(it.absolutePath.replaceFirst(\"libs\", \"instrumented_libs\"))\n       } else {\n@@ -234,18 +234,21 @@ apply plugin: 'coveralls'\n \n Project identityCommon = subprojects.find { it.name.equals('cloudfoundry-identity-common') }\n Project identityScim = subprojects.find { it.name.equals('cloudfoundry-identity-scim') }\n+Project identityLogin = subprojects.find { it.name.equals('cloudfoundry-identity-login') }\n Project identityUaa = subprojects.find { it.name.equals('cloudfoundry-identity-uaa') }\n \n cobertura {\n   coverageFormats = ['xml', 'html']\n   coverageSourceDirs = [\n     identityCommon.sourceSets.main.java.srcDirs,\n     identityScim.sourceSets.main.java.srcDirs,\n+    identityLogin.sourceSets.main.java.srcDirs,\n     identityUaa.sourceSets.main.java.srcDirs\n   ]\n   coverageMergeDatafiles = [\n     new File(\"common/build/cobertura/cobertura.ser\"),\n     new File(\"scim/build/cobertura/cobertura.ser\"),\n+    new File(\"login/build/cobertura/cobertura.ser\"),\n     new File(\"uaa/build/cobertura/cobertura.ser\"),\n     integrationCoverageFile\n   ]"
        },
        {
            "sha": "f3484fb6b516cf0421fae062a19e0a74ed91bf16",
            "filename": "common/src/main/java/org/cloudfoundry/identity/uaa/UaaConfiguration.java",
            "status": "modified",
            "additions": 13,
            "deletions": 0,
            "changes": 13,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2FUaaConfiguration.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2FUaaConfiguration.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2FUaaConfiguration.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -69,6 +69,19 @@ public class UaaConfiguration {\n     @Valid\n     public Map<String,Object> ldap;\n \n+    @Valid\n+    public Map<String,Object> login;\n+    @Valid\n+    public Map<String,Object> links;\n+    @Valid\n+    public Map<String,Object> smtp;\n+    @Valid\n+    public Map<String,Object> tiles;\n+    @Valid\n+    public Map<String,Object> notifications;\n+    @Valid\n+    public String assetBaseUrl;\n+\n     public static class CloudController {\n         @Valid\n         public Database database;"
        },
        {
            "sha": "0c78ed080d01347937f72c490ac220e243ecfb32",
            "filename": "common/src/main/java/org/cloudfoundry/identity/uaa/authentication/login/LoginInfoEndpoint.java",
            "status": "modified",
            "additions": 60,
            "deletions": 1,
            "changes": 61,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fauthentication%2Flogin%2FLoginInfoEndpoint.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fauthentication%2Flogin%2FLoginInfoEndpoint.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fauthentication%2Flogin%2FLoginInfoEndpoint.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -13,11 +13,14 @@\n package org.cloudfoundry.identity.uaa.authentication.login;\n \n import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n import java.security.Principal;\n import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Date;\n+import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n@@ -42,6 +45,12 @@ public class LoginInfoEndpoint {\n \n     private Properties buildProperties = new Properties();\n \n+    private Map<String, String> links = new HashMap<String, String>();\n+\n+    private String baseUrl;\n+\n+    private String uaaHost;\n+\n     public LoginInfoEndpoint() {\n         try {\n             gitProperties = PropertiesLoaderUtils.loadAllProperties(\"git.properties\");\n@@ -62,7 +71,7 @@ public void setPrompts(List<Prompt> prompts) {\n         this.prompts = prompts;\n     }\n \n-    @RequestMapping(value = { \"/\", \"/login\" })\n+    @RequestMapping(value = {\"/login\" })\n     public String login(Model model, Principal principal) {\n         Map<String, String[]> map = new LinkedHashMap<String, String[]>();\n         for (Prompt prompt : prompts) {\n@@ -75,6 +84,7 @@ public String login(Model model, Principal principal) {\n                         gitProperties.getProperty(\"git.commit.time\",\n                                         new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\").format(new Date())));\n         model.addAttribute(\"app\", UaaStringUtils.getMapFromProperties(buildProperties, \"build.\"));\n+        model.addAttribute(\"links\", getLinksInfo());\n \n         if (principal == null) {\n             return \"login\";\n@@ -97,4 +107,53 @@ public String info(Model model, Principal principal) {\n         return result;\n     }\n \n+    protected Map<String, ?> getLinksInfo() {\n+        Map<String, Object> model = new HashMap<String, Object>();\n+        model.put(\"uaa\", getUaaBaseUrl());\n+        model.put(\"login\", getUaaBaseUrl().replaceAll(\"uaa\", \"login\"));\n+        model.putAll(getLinks());\n+        return model;\n+    }\n+\n+    public void setUaaBaseUrl(String baseUrl) {\n+        this.baseUrl = baseUrl;\n+        try {\n+            URI uri = new URI(baseUrl);\n+            setUaaHost(uri.getHost());\n+            if (uri.getPort()!=443 && uri.getPort()!=80 && uri.getPort()>0) {\n+                //append non standard ports to the hostname\n+                setUaaHost(getUaaHost()+\":\"+uri.getPort());\n+            }\n+        } catch (URISyntaxException e) {\n+            throw new IllegalArgumentException(\"Could not extract host from URI: \" + baseUrl);\n+        }\n+    }\n+\n+    public Map<String, String> getLinks() {\n+        return links;\n+    }\n+\n+    public void setLinks(Map<String, String> links) {\n+        this.links = links;\n+    }\n+\n+    public String getBaseUrl() {\n+        return baseUrl;\n+    }\n+\n+    public void setBaseUrl(String baseUrl) {\n+        this.baseUrl = baseUrl;\n+    }\n+\n+    protected String getUaaBaseUrl() {\n+        return baseUrl;\n+    }\n+\n+    public String getUaaHost() {\n+        return uaaHost;\n+    }\n+\n+    public void setUaaHost(String uaaHost) {\n+        this.uaaHost = uaaHost;\n+    }\n }"
        },
        {
            "sha": "c9347b7779d11f2200d752d901b489483eaec8be",
            "filename": "common/src/main/java/org/cloudfoundry/identity/uaa/config/YamlServletProfileInitializer.java",
            "status": "modified",
            "additions": 8,
            "deletions": 6,
            "changes": 14,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fconfig%2FYamlServletProfileInitializer.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fconfig%2FYamlServletProfileInitializer.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fconfig%2FYamlServletProfileInitializer.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -16,6 +16,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n \n import javax.servlet.ServletConfig;\n import javax.servlet.ServletContext;\n@@ -86,12 +87,13 @@ public void initialize(ConfigurableWebApplicationContext applicationContext) {\n \n             List<Resource> resources = new ArrayList<Resource>();\n \n-            String defaultLocation = servletConfig == null ? null : servletConfig\n-                            .getInitParameter(PROFILE_CONFIG_FILE_DEFAULT);\n-            if (defaultLocation != null) {\n-                Resource defaultResource = new ClassPathResource(defaultLocation);\n-                if (defaultResource.exists()) {\n-                    resources.add(defaultResource);\n+            Set<String> defaultLocation = StringUtils.commaDelimitedListToSet(servletConfig == null ? null : servletConfig.getInitParameter(PROFILE_CONFIG_FILE_DEFAULT));\n+            if (defaultLocation != null && defaultLocation.size()>0) {\n+                for (String s : defaultLocation) {\n+                    Resource defaultResource = new ClassPathResource(s);\n+                    if (defaultResource.exists()) {\n+                        resources.add(defaultResource);\n+                    }\n                 }\n             }\n "
        },
        {
            "sha": "e5ca82d61afa206c4a1d6a66ebd4d4649280ba18",
            "filename": "common/src/main/java/org/cloudfoundry/identity/uaa/login/XFrameOptionsFilter.java",
            "status": "added",
            "additions": 18,
            "deletions": 0,
            "changes": 18,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FXFrameOptionsFilter.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FXFrameOptionsFilter.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FXFrameOptionsFilter.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,18 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.springframework.web.filter.OncePerRequestFilter;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+public class XFrameOptionsFilter extends OncePerRequestFilter {\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n+        response.addHeader(\"X-Frame-Options\", \"DENY\");\n+        filterChain.doFilter(request, response);\n+    }\n+}"
        },
        {
            "sha": "f93fbb2a9c02a52b9f23486150233d770df9971a",
            "filename": "login/build.gradle",
            "status": "added",
            "additions": 50,
            "deletions": 0,
            "changes": 50,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fbuild.gradle",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fbuild.gradle",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fbuild.gradle?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,50 @@\n+Project identityCommon = parent.subprojects.find { it.name.equals('cloudfoundry-identity-common') }\n+Project identityScim = parent.subprojects.find { it.name.equals('cloudfoundry-identity-scim') }\n+\n+description = 'CloudFoundry Identity Login'\n+\n+dependencies {\n+  compile(identityCommon) {\n+    exclude(module: 'jna')\n+  }\n+  compile(identityScim) {\n+    exclude(module: 'jna')\n+  }\n+\n+  compile group: 'org.springframework', name: 'spring-context-support', version:springVersion\n+  compile group: 'org.springframework.security', name: 'spring-security-openid', version:springSecurityVersion\n+  compile(group: 'org.springframework.security.extensions', name: 'spring-security-saml2-core', version:'1.0.0.RELEASE') {\n+    exclude(module: 'bcprov-jdk15')\n+  }\n+  provided group: 'javax.servlet', name: 'javax.servlet-api', version:'3.0.1'\n+\n+  testCompile identityCommon.configurations.testCompile.dependencies\n+  testCompile identityCommon.sourceSets.test.output\n+\n+  compile group: 'org.springframework.security', name: 'spring-security-openid', version:springSecurityVersion\n+  compile(group: 'org.springframework.security.extensions', name: 'spring-security-saml2-core', version:'1.0.0.RELEASE') {\n+    exclude(module: 'bcprov-jdk15')\n+  }\n+  compile group: 'org.thymeleaf', name: 'thymeleaf-spring4', version:'2.1.2.RELEASE'\n+  compile group: 'nz.net.ultraq.thymeleaf', name: 'thymeleaf-layout-dialect', version:'1.2.3'\n+  compile group: 'org.thymeleaf.extras', name: 'thymeleaf-extras-springsecurity3', version:'2.1.1.RELEASE'\n+  compile group: 'javax.mail', name: 'mail', version:'1.4.7'\n+\n+  testCompile group: 'org.seleniumhq.selenium', name: 'selenium-java', version:'2.42.2'\n+  testCompile group: 'com.github.detro.ghostdriver', name: 'phantomjsdriver', version:'1.1.0'\n+  testCompile group: 'dumbster', name: 'dumbster', version:'1.6'\n+}\n+\n+test.dependsOn identityCommon.instrumentedJar\n+\n+processResources {\n+    filter { line -> line.contains('${project.artifactId}') ? line.replace('${project.artifactId}','cloudfoundry-identity-login') : line }\n+}\n+\n+project.gradle.taskGraph.whenReady { TaskExecutionGraph graph ->\n+  if (runningWithCoverage()) {\n+    test {\n+      classpath = files(test.classpath.collect(rewriteInstrumentedLibs))\n+    }\n+  }\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "4299c5d881be69e661dd6ab12e8743be01d0c921",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/AbstractControllerInfo.java",
            "status": "added",
            "additions": 162,
            "deletions": 0,
            "changes": 162,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAbstractControllerInfo.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAbstractControllerInfo.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAbstractControllerInfo.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,162 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.cloudfoundry.identity.uaa.util.UaaStringUtils;\n+import org.springframework.core.io.support.PropertiesLoaderUtils;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.ui.Model;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URLDecoder;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+import javax.servlet.http.HttpServletRequest;\n+\n+/**\n+ * Contains basic information used by the\n+ * login-server controllers.\n+ * \n+ * @author fhanik\n+ * \n+ */\n+public abstract class AbstractControllerInfo {\n+    private final Log logger = LogFactory.getLog(getClass());\n+    private Map<String, String> links = new HashMap<String, String>();\n+    private static String DEFAULT_BASE_UAA_URL = \"https://uaa.cloudfoundry.com\";\n+    protected static final String HOST = \"Host\";\n+    protected static final String AUTHORIZATON = \"Authorization\";\n+\n+    private Properties gitProperties = new Properties();\n+\n+    private Properties buildProperties = new Properties();\n+\n+    private String baseUrl;\n+\n+    private String uaaHost;\n+\n+    /**\n+     * @param links the links to set\n+     */\n+    public void setLinks(Map<String, String> links) {\n+        this.links = links;\n+    }\n+\n+    public Map<String, String> getLinks() {\n+        return links;\n+    }\n+\n+    protected void initProperties() {\n+        setUaaBaseUrl(DEFAULT_BASE_UAA_URL);\n+        try {\n+            gitProperties = PropertiesLoaderUtils.loadAllProperties(\"git.properties\");\n+        } catch (IOException e) {\n+            // Ignore\n+        }\n+        try {\n+            buildProperties = PropertiesLoaderUtils.loadAllProperties(\"build.properties\");\n+        } catch (IOException e) {\n+            // Ignore\n+        }\n+\n+    }\n+\n+    /**\n+     * @param baseUrl the base uaa url\n+     */\n+    public void setUaaBaseUrl(String baseUrl) {\n+        this.baseUrl = baseUrl;\n+        try {\n+            URI uri = new URI(baseUrl);\n+            this.uaaHost = uri.getHost();\n+            if (uri.getPort()!=443 && uri.getPort()!=80 && uri.getPort()>0) {\n+                //append non standard ports to the hostname\n+                this.uaaHost += \":\"+uri.getPort();\n+            }\n+        } catch (URISyntaxException e) {\n+            throw new IllegalArgumentException(\"Could not extract host from URI: \" + baseUrl);\n+        }\n+    }\n+\n+    protected String getUaaBaseUrl() {\n+        return baseUrl;\n+    }\n+\n+    protected String getUaaHost() {\n+        return uaaHost;\n+    }\n+\n+    protected Map<String, ?> getLinksInfo() {\n+        Map<String, Object> model = new HashMap<String, Object>();\n+        model.put(\"uaa\", getUaaBaseUrl());\n+        model.put(\"login\", getUaaBaseUrl().replaceAll(\"uaa\", \"login\"));\n+        model.putAll(getLinks());\n+        return model;\n+    }\n+\n+    protected HttpHeaders getRequestHeaders(HttpHeaders headers) {\n+        // Some of the headers coming back are poisonous apparently\n+        // (content-length?)...\n+        HttpHeaders outgoingHeaders = new HttpHeaders();\n+        outgoingHeaders.putAll(headers);\n+        outgoingHeaders.remove(HOST);\n+        outgoingHeaders.remove(HOST.toLowerCase());\n+        outgoingHeaders.set(HOST, getUaaHost());\n+        logger.debug(\"Outgoing headers: \" + outgoingHeaders);\n+        return outgoingHeaders;\n+    }\n+\n+    protected String extractPath(HttpServletRequest request) {\n+        String query = request.getQueryString();\n+        try {\n+            query = query == null ? \"\" : \"?\" + URLDecoder.decode(query, \"UTF-8\");\n+        } catch (UnsupportedEncodingException e) {\n+            throw new IllegalStateException(\"Cannot decode query string: \" + query);\n+        }\n+        String path = request.getRequestURI() + query;\n+        String context = request.getContextPath();\n+        path = path.substring(context.length());\n+        if (path.startsWith(\"/\")) {\n+            // In the root context we have to remove this as well\n+            path = path.substring(1);\n+        }\n+        logger.debug(\"Path: \" + path);\n+        return path;\n+    }\n+\n+    protected void populateBuildAndLinkInfo(Model model) {\n+        Map<String, Object> attributes = new HashMap<String, Object>();\n+        attributes.put(\"links\", getLinksInfo());\n+        model.addAllAttributes(attributes);\n+        model.addAttribute(\"links\", getLinks());\n+    }\n+\n+    protected void setCommitInfo(Map<String, Object> model) {\n+        model.put(\"commit_id\", gitProperties.getProperty(\"git.commit.id.abbrev\", \"UNKNOWN\"));\n+        model.put(\n+            \"timestamp\",\n+            gitProperties.getProperty(\"git.commit.time\",\n+                new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\").format(new Date())));\n+        model.put(\"app\", UaaStringUtils.getMapFromProperties(buildProperties, \"build.\"));\n+\n+    }\n+}"
        },
        {
            "sha": "6a34aa62337214f8a9482cfa8b67aff0ad3a38e9",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/AccountCreationService.java",
            "status": "added",
            "additions": 115,
            "deletions": 0,
            "changes": 115,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAccountCreationService.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAccountCreationService.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAccountCreationService.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,115 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.cloudfoundry.identity.uaa.scim.ScimUser;\n+import org.codehaus.jackson.annotate.JsonProperty;\n+\n+import java.io.IOException;\n+\n+public interface AccountCreationService {\n+    void beginActivation(String email, String password, String clientId);\n+\n+    AccountCreationResponse completeActivation(String code) throws IOException;\n+\n+    void resendVerificationCode(String email, String clientId);\n+\n+    ScimUser createUser(String username, String password);\n+\n+    public static class ExistingUserResponse {\n+        @JsonProperty\n+        private String error;\n+\n+        @JsonProperty\n+        private String message;\n+\n+        @JsonProperty(\"user_id\")\n+        private String userId;\n+\n+        @JsonProperty\n+        private Boolean verified;\n+\n+        @JsonProperty\n+        private Boolean active;\n+\n+        public String getError() {\n+            return error;\n+        }\n+\n+        public void setError(String error) {\n+            this.error = error;\n+        }\n+\n+        public String getMessage() {\n+            return message;\n+        }\n+\n+        public void setMessage(String message) {\n+            this.message = message;\n+        }\n+\n+        public Boolean getVerified() {\n+            return verified;\n+        }\n+\n+        public void setVerified(Boolean verified) {\n+            this.verified = verified;\n+        }\n+\n+        public Boolean getActive() {\n+            return active;\n+        }\n+\n+        public void setActive(Boolean active) {\n+            this.active = active;\n+        }\n+\n+        public String getUserId() {\n+            return userId;\n+        }\n+\n+        public void setUserId(String userId) {\n+            this.userId = userId;\n+        }\n+    }\n+\n+    public static class AccountCreationResponse {\n+        @JsonProperty(\"user_id\")\n+        private String userId;\n+        private String username;\n+        private String email;\n+        @JsonProperty(\"redirect_location\")\n+        private String redirectLocation;\n+\n+        public AccountCreationResponse() {}\n+\n+        public AccountCreationResponse(String userId, String username, String email, String redirectLocation) {\n+            this.userId = userId;\n+            this.username = username;\n+            this.email = email;\n+            this.redirectLocation = redirectLocation;\n+        }\n+\n+        public String getUserId() {\n+            return userId;\n+        }\n+\n+        public void setUserId(String userId) {\n+            this.userId = userId;\n+        }\n+\n+        public String getUsername() {\n+            return username;\n+        }\n+\n+        public void setUsername(String username) {\n+            this.username = username;\n+        }\n+\n+        public String getRedirectLocation() {\n+            return redirectLocation;\n+        }\n+\n+        public String getEmail() {\n+            return email;\n+        }\n+    }\n+}"
        },
        {
            "sha": "811b1848db9af0d8f10e84bc66a0288078bd918b",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/AccountsController.java",
            "status": "added",
            "additions": 125,
            "deletions": 0,
            "changes": 125,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAccountsController.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAccountsController.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAccountsController.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,125 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.cloudfoundry.identity.uaa.authentication.Origin;\n+import org.cloudfoundry.identity.uaa.authentication.UaaPrincipal;\n+import org.cloudfoundry.identity.uaa.error.UaaException;\n+import org.cloudfoundry.identity.uaa.user.UaaAuthority;\n+import org.hibernate.validator.constraints.Email;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.validation.BindingResult;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.client.HttpClientErrorException;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import javax.validation.Valid;\n+\n+import java.io.IOException;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.GET;\n+import static org.springframework.web.bind.annotation.RequestMethod.POST;\n+\n+@Controller\n+public class AccountsController {\n+\n+    private final AccountCreationService accountCreationService;\n+\n+    public AccountsController(AccountCreationService accountCreationService) {\n+        this.accountCreationService = accountCreationService;\n+    }\n+\n+    @RequestMapping(value = \"/create_account\", method = GET)\n+    public String activationEmail(Model model,\n+                                  @RequestParam(value = \"client_id\", defaultValue = \"login\") String clientId) {\n+        model.addAttribute(\"client_id\", clientId);\n+        return \"accounts/new_activation_email\";\n+    }\n+\n+    @RequestMapping(value = \"/create_account.do\", method = POST)\n+    public String sendActivationEmail(Model model, HttpServletResponse response,\n+                                      @RequestParam(\"client_id\") String clientId,\n+                                      @Valid @ModelAttribute(\"email\") ValidEmail email, BindingResult result,\n+                                      @RequestParam(\"password\") String password,\n+                                      @RequestParam(\"password_confirmation\") String passwordConfirmation) {\n+        if(result.hasErrors()) {\n+            return handleUnprocessableEntity(model, response, \"invalid_email\");\n+        }\n+        ChangePasswordValidation validation = new ChangePasswordValidation(password, passwordConfirmation);\n+        if (!validation.valid()) {\n+            return handleUnprocessableEntity(model, response, validation.getMessageCode());\n+        }\n+        try {\n+            accountCreationService.beginActivation(email.getEmail(), password, clientId);\n+        } catch (UaaException e) {\n+            return handleUnprocessableEntity(model, response, \"username_exists\");\n+        }\n+        return \"redirect:accounts/email_sent\";\n+    }\n+\n+    @RequestMapping(value = \"/accounts/email_sent\", method = RequestMethod.GET)\n+    public String emailSent() {\n+        return \"accounts/email_sent\";\n+    }\n+\n+    @RequestMapping(value = \"/verify_user\", method = GET)\n+    public String verifyUser(Model model,\n+                                @RequestParam(\"code\") String code,\n+                                HttpServletResponse response) throws IOException {\n+\n+        AccountCreationService.AccountCreationResponse accountCreation;\n+        try {\n+            accountCreation = accountCreationService.completeActivation(code);\n+        } catch (HttpClientErrorException e) {\n+            model.addAttribute(\"error_message_code\", \"code_expired\");\n+            response.setStatus(HttpStatus.UNPROCESSABLE_ENTITY.value());\n+            return \"accounts/new_activation_email\";\n+        }\n+\n+        UaaPrincipal uaaPrincipal = new UaaPrincipal(accountCreation.getUserId(), accountCreation.getUsername(), accountCreation.getEmail(), Origin.UAA, null);\n+        UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(uaaPrincipal, null, UaaAuthority.USER_AUTHORITIES);\n+        SecurityContextHolder.getContext().setAuthentication(token);\n+\n+        String redirectLocation = accountCreation.getRedirectLocation();\n+        if (redirectLocation == null) {\n+            redirectLocation = \"home\";\n+        }\n+        return \"redirect:\" + redirectLocation;\n+    }\n+\n+    private String handleUnprocessableEntity(Model model, HttpServletResponse response, String errorMessage) {\n+        model.addAttribute(\"error_message_code\", errorMessage);\n+        response.setStatus(HttpStatus.UNPROCESSABLE_ENTITY.value());\n+        return \"accounts/new_activation_email\";\n+    }\n+\n+    public static class ValidEmail {\n+        @Email\n+        String email;\n+\n+        public String getEmail() {\n+            return email;\n+        }\n+\n+        public void setEmail(String email) {\n+            this.email = email;\n+        }\n+    }\n+}"
        },
        {
            "sha": "1ccdc2c08e3f338b149f1e7f54928db076327ca7",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/AnalyticsInterceptor.java",
            "status": "added",
            "additions": 65,
            "deletions": 0,
            "changes": 65,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAnalyticsInterceptor.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAnalyticsInterceptor.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAnalyticsInterceptor.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,65 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.web.servlet.ModelAndView;\n+import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\n+\n+/**\n+ * @author Dave Syer\n+ * \n+ */\n+public class AnalyticsInterceptor extends HandlerInterceptorAdapter {\n+\n+    private Analytics analytics;\n+\n+    /**\n+     * @param analytics the analytics to set\n+     */\n+    public void setAnalytics(Analytics analytics) {\n+        this.analytics = analytics;\n+    }\n+\n+    @Override\n+    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,\n+                    ModelAndView modelAndView) throws Exception {\n+        if (modelAndView != null && modelAndView.hasView() && analytics != null) {\n+            modelAndView.addObject(\"analytics\", analytics);\n+        }\n+    }\n+\n+    public static class Analytics {\n+        private String code;\n+        private String domain;\n+\n+        public String getCode() {\n+            return code;\n+        }\n+\n+        public void setCode(String code) {\n+            this.code = code;\n+        }\n+\n+        public String getDomain() {\n+            return domain;\n+        }\n+\n+        public void setDomain(String domain) {\n+            this.domain = domain;\n+        }\n+    }\n+}"
        },
        {
            "sha": "eefa7a7874bef9d244224f04be28486a8dd49533",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/ApprovalsService.java",
            "status": "added",
            "additions": 24,
            "deletions": 0,
            "changes": 24,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FApprovalsService.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FApprovalsService.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FApprovalsService.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,24 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+public interface ApprovalsService {\n+    Map<String, List<UaaApprovalsService.DescribedApproval>> getCurrentApprovalsByClientId();\n+\n+    void updateApprovals(List<UaaApprovalsService.DescribedApproval> approvals);\n+\n+    void deleteApprovalsForClient(String clientId);\n+}"
        },
        {
            "sha": "d860367fa2c0d89b364bab5fd5866206fee4d1d3",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/AutologinAuthenticationManager.java",
            "status": "added",
            "additions": 148,
            "deletions": 0,
            "changes": 148,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAutologinAuthenticationManager.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAutologinAuthenticationManager.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAutologinAuthenticationManager.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,148 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.cloudfoundry.identity.uaa.authentication.AuthzAuthenticationRequest;\n+import org.cloudfoundry.identity.uaa.authentication.Origin;\n+import org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationDetails;\n+import org.cloudfoundry.identity.uaa.authentication.UaaPrincipal;\n+import org.cloudfoundry.identity.uaa.client.SocialClientUserDetails;\n+import org.cloudfoundry.identity.uaa.codestore.ExpiringCode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.web.client.RestTemplate;\n+\n+/**\n+ * @author Dave Syer\n+ * \n+ */\n+public class AutologinAuthenticationManager implements AuthenticationManager {\n+\n+    private Log logger = LogFactory.getLog(getClass());\n+\n+    private RestTemplate authorizationTemplate;\n+    private String uaaBaseUrl;\n+\n+    public String getUaaBaseUrl() {\n+        return uaaBaseUrl;\n+    }\n+\n+    public void setUaaBaseUrl(String uaaBaseUrl) {\n+        this.uaaBaseUrl = uaaBaseUrl;\n+    }\n+\n+    public RestTemplate getAuthorizationTemplate() {\n+        return authorizationTemplate;\n+    }\n+\n+    public void setAuthorizationTemplate(RestTemplate authorizationTemplate) {\n+        this.authorizationTemplate = authorizationTemplate;\n+    }\n+\n+    public ExpiringCode doRetrieveCode(String code) {\n+        HttpHeaders requestHeaders = new HttpHeaders();\n+        requestHeaders.add(\"Accept\", MediaType.APPLICATION_JSON_VALUE);\n+\n+        HttpEntity<ExpiringCode> requestEntity = new HttpEntity<ExpiringCode>(null, requestHeaders);\n+\n+        ResponseEntity<ExpiringCode> response = authorizationTemplate.exchange(getUaaBaseUrl() + \"/Codes/\" + code,\n+                        HttpMethod.GET,\n+                        requestEntity, ExpiringCode.class);\n+\n+        if (response.getStatusCode().equals(HttpStatus.NOT_FOUND)) {\n+            return null;\n+        } else if (response.getStatusCode() != HttpStatus.OK) {\n+            logger.warn(\"Request failed: \" + requestEntity);\n+            // TODO throw exception with the correct error\n+            throw new RuntimeException(String.valueOf(response.getStatusCode()));\n+        }\n+\n+        return response.getBody();\n+    }\n+\n+    @Override\n+    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n+\n+        if (!(authentication instanceof AuthzAuthenticationRequest)) {\n+            return null;\n+        }\n+\n+        AuthzAuthenticationRequest request = (AuthzAuthenticationRequest) authentication;\n+        Map<String, String> info = request.getInfo();\n+        String code = info.get(\"code\");\n+\n+        ExpiringCode ec = doRetrieveCode(code);\n+        SocialClientUserDetails user = null;\n+        try {\n+            if (ec != null) {\n+                user = new ObjectMapper().readValue(ec.getData(), SocialClientUserDetails.class);\n+            }\n+        } catch (IOException x) {\n+            throw new BadCredentialsException(\"JsonConversion error\", x);\n+        }\n+\n+        if (user == null) {\n+            throw new BadCredentialsException(\"Cannot redeem provided code for user\");\n+        }\n+\n+        // ensure that we stored clientId\n+        String clientId = null;\n+        String origin = null;\n+        String userId = null;\n+        Object principal = user.getUsername();\n+        if (user.getDetails() instanceof String) {\n+            clientId = (String) user.getDetails();\n+        } else if (user.getDetails() instanceof Map) {\n+            Map<String,String> map = (Map<String,String>)user.getDetails();\n+            clientId = map.get(\"client_id\");\n+            origin = map.get(Origin.ORIGIN);\n+            userId = map.get(\"user_id\");\n+            principal = new UaaPrincipal(userId,user.getUsername(),null,origin,null);\n+        }\n+        if (clientId == null) {\n+            throw new BadCredentialsException(\"Cannot redeem provided code for user, client id missing\");\n+        }\n+\n+        // validate the client Id\n+        if (!(authentication.getDetails() instanceof UaaAuthenticationDetails)) {\n+            throw new BadCredentialsException(\"Cannot redeem provided code for user, auth details missing\");\n+        }\n+\n+        UaaAuthenticationDetails details = (UaaAuthenticationDetails) authentication.getDetails();\n+        if (!clientId.equals(details.getClientId())) {\n+            throw new BadCredentialsException(\"Cannot redeem provided code for user, client mismatch\");\n+        }\n+\n+        UsernamePasswordAuthenticationToken result = new UsernamePasswordAuthenticationToken(principal, null, user.getAuthorities());\n+        result.setDetails(authentication.getDetails());\n+        return result;\n+\n+    }\n+\n+}"
        },
        {
            "sha": "86bcca4e49525f933bf1589ce80ee038c6cc4b4e",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/AutologinRequest.java",
            "status": "added",
            "additions": 46,
            "deletions": 0,
            "changes": 46,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAutologinRequest.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAutologinRequest.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAutologinRequest.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,46 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.codehaus.jackson.map.annotate.JsonSerialize;\n+import org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion;\n+\n+@JsonSerialize(include = Inclusion.NON_EMPTY)\n+public class AutologinRequest {\n+\n+    private String username;\n+\n+    private String password;\n+\n+    public String getUsername() {\n+        return this.username;\n+    }\n+\n+    public void setUsername(String username) {\n+        this.username = username;\n+    }\n+\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    public void setPassword(String password) {\n+        this.password = password;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"AutologinRequest [username=\" + username + \", password=\" + password + \"]\";\n+    }\n+\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "668b2e8496d1c9e7dd27a6a8785287d168557490",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/AutologinRequestConverter.java",
            "status": "added",
            "additions": 64,
            "deletions": 0,
            "changes": 64,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAutologinRequestConverter.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAutologinRequestConverter.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAutologinRequestConverter.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,64 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+import org.springframework.http.HttpInputMessage;\n+import org.springframework.http.HttpOutputMessage;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.converter.AbstractHttpMessageConverter;\n+import org.springframework.http.converter.FormHttpMessageConverter;\n+import org.springframework.http.converter.HttpMessageNotReadableException;\n+import org.springframework.http.converter.HttpMessageNotWritableException;\n+import org.springframework.util.MultiValueMap;\n+\n+public class AutologinRequestConverter extends AbstractHttpMessageConverter<AutologinRequest> {\n+\n+    private FormHttpMessageConverter converter = new FormHttpMessageConverter();\n+\n+    public AutologinRequestConverter() {\n+        setSupportedMediaTypes(Arrays.asList(MediaType.APPLICATION_FORM_URLENCODED));\n+    }\n+\n+    @Override\n+    protected boolean supports(Class<?> clazz) {\n+        return AutologinRequest.class.isAssignableFrom(clazz);\n+    }\n+\n+    @Override\n+    protected AutologinRequest readInternal(Class<? extends AutologinRequest> clazz, HttpInputMessage inputMessage)\n+                    throws IOException, HttpMessageNotReadableException {\n+        MultiValueMap<String, String> map = converter.read(null, inputMessage);\n+        String username = map.getFirst(\"username\");\n+        String password = map.getFirst(\"password\");\n+        AutologinRequest result = new AutologinRequest();\n+        result.setUsername(username);\n+        result.setPassword(password);\n+        return result;\n+    }\n+\n+    @Override\n+    protected void writeInternal(AutologinRequest t, HttpOutputMessage outputMessage) throws IOException,\n+                    HttpMessageNotWritableException {\n+        MultiValueMap<String, String> map = new LinkedMaskingMultiValueMap<String, String>(\"password\");\n+        if (t.getUsername() != null) {\n+            map.set(\"username\", t.getUsername());\n+        }\n+        if (t.getPassword() != null) {\n+            map.set(\"password\", t.getPassword());\n+        }\n+        converter.write(map, MediaType.APPLICATION_FORM_URLENCODED, outputMessage);\n+    }\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "01bb802e7a6379c78b8ff17dd39227cb2d52c310",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/AutologinResponse.java",
            "status": "added",
            "additions": 31,
            "deletions": 0,
            "changes": 31,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAutologinResponse.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAutologinResponse.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAutologinResponse.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,31 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+public class AutologinResponse {\n+\n+    private String code;\n+\n+    public AutologinResponse(String code) {\n+        this.code = code;\n+    }\n+\n+    public String getPath() {\n+        return \"/oauth/authorize\";\n+    }\n+\n+    public String getCode() {\n+        return code;\n+    }\n+\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "aa652e8249cc93fa60e411c3154611da8984983b",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/BuildInfo.java",
            "status": "added",
            "additions": 73,
            "deletions": 0,
            "changes": 73,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FBuildInfo.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FBuildInfo.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FBuildInfo.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,73 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.core.io.support.PropertiesLoaderUtils;\n+import org.springframework.util.Assert;\n+\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Properties;\n+\n+public class BuildInfo implements InitializingBean {\n+    private final Log logger = LogFactory.getLog(getClass());\n+\n+    @Value(\"${uaa.url:http://localhost:8080/uaa}\")\n+    private String uaaUrl;\n+    private String version;\n+    private String commitId;\n+    private String timestamp;\n+\n+    @Override\n+    public void afterPropertiesSet() {\n+        try {\n+            Properties gitProperties = PropertiesLoaderUtils.loadAllProperties(\"git.properties\");\n+            commitId = gitProperties.getProperty(\"git.commit.id.abbrev\", \"UNKNOWN\");\n+            String currentTime = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\").format(new Date());\n+            timestamp = gitProperties.getProperty(\"git.commit.time\", currentTime);\n+        } catch (IOException e) {\n+            logger.debug(\"Exception loading git.properties\", e);\n+        }\n+        try {\n+            Properties buildProperties = PropertiesLoaderUtils.loadAllProperties(\"build.properties\");\n+            version = buildProperties.getProperty(\"build.version\");\n+        } catch (IOException e) {\n+            logger.debug(\"Exception loading build.properties\", e);\n+        }\n+        Assert.hasText(uaaUrl);\n+        Assert.hasText(version);\n+        Assert.hasText(commitId);\n+        Assert.hasText(timestamp);\n+    }\n+\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    public String getCommitId() {\n+        return commitId;\n+    }\n+\n+    public String getTimestamp() {\n+        return timestamp;\n+    }\n+\n+    public String getUaaUrl() {\n+        return uaaUrl;\n+    }\n+}"
        },
        {
            "sha": "a3ba3616eded540acaabf02d05f1a31e865541e7",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/ChainedAuthenticationManager.java",
            "status": "added",
            "additions": 106,
            "deletions": 0,
            "changes": 106,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChainedAuthenticationManager.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChainedAuthenticationManager.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChainedAuthenticationManager.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,106 @@\n+/*\n+ * ******************************************************************************\n+ *      Cloud Foundry \n+ *      Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *      This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *      You may not use this product except in compliance with the License.\n+ *\n+ *      This product includes a number of subcomponents with\n+ *      separate copyright notices and license terms. Your use of these\n+ *      subcomponents is subject to the terms and conditions of the\n+ *      subcomponent's license, as noted in the LICENSE file.\n+ * ******************************************************************************\n+ */\n+\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.AuthenticationException;\n+\n+/**\n+ * Authentication filter translating a generic Authentication into a\n+ * UsernamePasswordAuthenticationToken.\n+ * \n+ * @author Dave Syer\n+ * \n+ */\n+public class ChainedAuthenticationManager implements AuthenticationManager {\n+\n+    protected final Log logger = LogFactory.getLog(getClass());\n+\n+    private final AuthenticationManager[] delegates;\n+\n+    /**\n+     * @param delegate\n+     */\n+    public ChainedAuthenticationManager(AuthenticationManager delegate) {\n+        super();\n+        this.delegates = new AuthenticationManager[] {delegate};\n+    }\n+\n+    public ChainedAuthenticationManager(AuthenticationManager delegate1, AuthenticationManager delegate2) {\n+        super();\n+        this.delegates = new AuthenticationManager[] {delegate1, delegate2};\n+    }\n+\n+    public ChainedAuthenticationManager(AuthenticationManager[] delegates) {\n+        super();\n+        this.delegates = delegates;\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     * @see org.springframework.security.authentication.AuthenticationManager#\n+     * authenticate(org.springframework.security.core.Authentication)\n+     */\n+    @Override\n+    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n+        if (authentication == null) {\n+            return authentication;\n+        }\n+        UsernamePasswordAuthenticationToken output = null;\n+        if (authentication instanceof UsernamePasswordAuthenticationToken) {\n+            output = (UsernamePasswordAuthenticationToken) authentication;\n+        } else {\n+            output = new UsernamePasswordAuthenticationToken(authentication.getPrincipal(), authentication.getCredentials(),\n+                            authentication.getAuthorities());\n+            output.setAuthenticated(authentication.isAuthenticated());\n+            output.setDetails(authentication.getDetails());\n+        }\n+        boolean authenticated = false;\n+        Authentication auth = null;\n+        AuthenticationException lastException = null;\n+        for (int i=0; i<delegates.length && (!authenticated); i++) {\n+            try {\n+                if (logger.isDebugEnabled()) {\n+                    logger.debug(\"Attempting chained authentication of \"+output+ \" with manager:\"+delegates[i]);\n+                }\n+                auth = delegates[i].authenticate(output);\n+                authenticated = auth.isAuthenticated();\n+            } catch (AuthenticationException x) {\n+                if (logger.isDebugEnabled()) {\n+                    logger.debug(\"Chained authentication exception:\", x);\n+                }\n+                lastException = x;\n+            }\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"Chained Authentication status of \"+output+ \" with manager:\"+delegates[i]+\"; Authenticated:\"+authenticated);\n+            }\n+        }\n+        if (authenticated) {\n+            return auth;\n+        } else if (lastException!=null) {\n+            //we had at least one authentication exception, throw it\n+            throw lastException;\n+        } else {\n+            //not authenticated, but return the last of the result\n+            return auth;\n+        }\n+    }\n+\n+}"
        },
        {
            "sha": "f3a67915fc8ad5c27bc928c93845bc9b2f021e53",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/ChangeEmailController.java",
            "status": "added",
            "additions": 118,
            "deletions": 0,
            "changes": 118,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangeEmailController.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangeEmailController.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangeEmailController.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,118 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.cloudfoundry.identity.uaa.authentication.Origin;\n+import org.cloudfoundry.identity.uaa.authentication.UaaPrincipal;\n+import org.cloudfoundry.identity.uaa.error.UaaException;\n+import org.cloudfoundry.identity.uaa.user.UaaAuthority;\n+import org.hibernate.validator.constraints.Email;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.authentication.AnonymousAuthenticationToken;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.context.SecurityContext;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.validation.BindingResult;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.servlet.mvc.support.RedirectAttributes;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import javax.validation.Valid;\n+import java.util.Map;\n+\n+\n+@Controller\n+public class ChangeEmailController {\n+\n+    private final ChangeEmailService changeEmailService;\n+\n+    public ChangeEmailController(ChangeEmailService changeEmailService) {\n+        this.changeEmailService = changeEmailService;\n+    }\n+\n+    @RequestMapping(value = \"/change_email\", method = RequestMethod.GET)\n+    public String changeEmailPage(Model model, @RequestParam(value = \"client_id\", required = false) String clientId) {\n+        SecurityContext securityContext = SecurityContextHolder.getContext();\n+        model.addAttribute(\"email\", ((UaaPrincipal)securityContext.getAuthentication().getPrincipal()).getEmail());\n+        model.addAttribute(\"client_id\", clientId);\n+        return \"change_email\";\n+    }\n+\n+    @RequestMapping(value = \"/change_email.do\", method = RequestMethod.POST)\n+    public String changeEmail(Model model, @Valid @ModelAttribute(\"newEmail\") ValidEmail newEmail, BindingResult result, @RequestParam(\"client_id\") String clientId, RedirectAttributes redirectAttributes, HttpServletResponse response) {\n+        SecurityContext securityContext = SecurityContextHolder.getContext();\n+\n+        if(result.hasErrors()) {\n+            model.addAttribute(\"error_message_code\", \"invalid_email\");\n+            model.addAttribute(\"email\", ((UaaPrincipal)securityContext.getAuthentication().getPrincipal()).getEmail());\n+            response.setStatus(HttpStatus.UNPROCESSABLE_ENTITY.value());\n+            return \"change_email\";\n+        }\n+        String origin = ((UaaPrincipal)securityContext.getAuthentication().getPrincipal()).getOrigin();\n+        if (!origin.equals(Origin.UAA)) {\n+            redirectAttributes.addAttribute(\"error_message_code\", \"email_change.non-uaa-origin\");\n+            return \"redirect:profile\";\n+        }\n+\n+        String userId = ((UaaPrincipal)securityContext.getAuthentication().getPrincipal()).getId();\n+        String userEmail = ((UaaPrincipal)securityContext.getAuthentication().getPrincipal()).getName();\n+\n+        try {\n+            changeEmailService.beginEmailChange(userId, userEmail, newEmail.getNewEmail(), clientId);\n+        } catch (UaaException e) {\n+            if (e.getHttpStatus() == 409) {\n+                model.addAttribute(\"error_message_code\", \"username_exists\");\n+                model.addAttribute(\"email\", ((UaaPrincipal)securityContext.getAuthentication().getPrincipal()).getEmail());\n+                response.setStatus(HttpStatus.UNPROCESSABLE_ENTITY.value());\n+                return \"change_email\";\n+            }\n+        }\n+\n+        return \"redirect:email_sent?code=email_change\";\n+    }\n+\n+    @RequestMapping(value = \"/verify_email\", method = RequestMethod.GET)\n+    public String verifyEmail(Model model, @RequestParam(\"code\") String code, RedirectAttributes redirectAttributes, HttpServletResponse httpServletResponse) {\n+        Map<String,String> response;\n+\n+        try {\n+            response = changeEmailService.completeVerification(code);\n+        } catch (UaaException e) {\n+            if (SecurityContextHolder.getContext().getAuthentication() instanceof AnonymousAuthenticationToken) {\n+                model.addAttribute(\"error_message_code\", \"email_change.invalid_code\");\n+                httpServletResponse.setStatus(422);\n+                return \"error\";\n+            }\n+            else {\n+                return \"redirect:profile?error_message_code=email_change.invalid_code\";\n+            }\n+        }\n+\n+        UaaPrincipal uaaPrincipal = new UaaPrincipal(response.get(\"userId\"), response.get(\"username\"), response.get(\"email\"), Origin.UAA, null);\n+        UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(uaaPrincipal, null, UaaAuthority.USER_AUTHORITIES);\n+        SecurityContextHolder.getContext().setAuthentication(token);\n+\n+        String redirectLocation = response.get(\"redirect_url\");\n+        if (redirectLocation == null) {\n+            redirectLocation = \"profile\";\n+            redirectAttributes.addAttribute(\"success_message_code\", \"email_change.success\");\n+        }\n+        return \"redirect:\" + redirectLocation;\n+    }\n+\n+    public static class ValidEmail {\n+        @Email\n+        String newEmail;\n+\n+        public String getNewEmail() {\n+            return newEmail;\n+        }\n+\n+        public void setNewEmail(String email) {\n+            this.newEmail = email;\n+        }\n+    }\n+}"
        },
        {
            "sha": "0516515c62e156586347f53259fad1d707ec52c1",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/ChangeEmailService.java",
            "status": "added",
            "additions": 11,
            "deletions": 0,
            "changes": 11,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangeEmailService.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangeEmailService.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangeEmailService.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,11 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import java.util.Map;\n+\n+public interface ChangeEmailService {\n+\n+    public void beginEmailChange(String userId, String userEmail, String newEmail, String clientId);\n+\n+    public Map<String, String> completeVerification(String code);\n+\n+}"
        },
        {
            "sha": "0b4502f41556983a870020d29624389b570417d5",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/ChangePasswordController.java",
            "status": "added",
            "additions": 70,
            "deletions": 0,
            "changes": 70,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangePasswordController.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangePasswordController.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangePasswordController.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,70 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.GET;\n+import static org.springframework.web.bind.annotation.RequestMethod.POST;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.core.context.SecurityContext;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.client.RestClientException;\n+\n+import javax.servlet.http.HttpServletResponse;\n+\n+@Controller\n+public class ChangePasswordController {\n+\n+    private final ChangePasswordService changePasswordService;\n+\n+    public ChangePasswordController(ChangePasswordService changePasswordService) {\n+        this.changePasswordService = changePasswordService;\n+    }\n+\n+    @RequestMapping(value=\"/change_password\", method = GET)\n+    public String changePasswordPage() {\n+        return \"change_password\";\n+    }\n+\n+    @RequestMapping(value=\"/change_password.do\", method = POST)\n+    public String changePassword(\n+            Model model,\n+            @RequestParam(\"current_password\") String currentPassword,\n+            @RequestParam(\"new_password\") String newPassword,\n+            @RequestParam(\"confirm_password\") String confirmPassword,\n+            HttpServletResponse response) {\n+\n+        ChangePasswordValidation validation = new ChangePasswordValidation(newPassword, confirmPassword);\n+        if (!validation.valid()) {\n+            model.addAttribute(\"message_code\", validation.getMessageCode());\n+            response.setStatus(HttpStatus.UNPROCESSABLE_ENTITY.value());\n+            return \"change_password\";\n+        }\n+\n+        SecurityContext securityContext = SecurityContextHolder.getContext();\n+        String username = securityContext.getAuthentication().getName();\n+\n+        try {\n+            changePasswordService.changePassword(username, currentPassword, newPassword);\n+            return \"redirect:profile\";\n+        } catch (RestClientException e) {\n+            model.addAttribute(\"message_code\", \"unauthorized\");\n+        }\n+        response.setStatus(HttpStatus.UNPROCESSABLE_ENTITY.value());\n+        return \"change_password\";\n+    }\n+}"
        },
        {
            "sha": "af3c8b21dfc13fd51056a046ba76399ba6a8da99",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/ChangePasswordService.java",
            "status": "added",
            "additions": 17,
            "deletions": 0,
            "changes": 17,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangePasswordService.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangePasswordService.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangePasswordService.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,17 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+public interface ChangePasswordService {\n+    public void changePassword(String username, String currentPassword, String newPassword);\n+}"
        },
        {
            "sha": "4dab2ab54d63deb6c072e5a39c853167cf4b064d",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/ChangePasswordValidation.java",
            "status": "added",
            "additions": 33,
            "deletions": 0,
            "changes": 33,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangePasswordValidation.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangePasswordValidation.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangePasswordValidation.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,33 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.springframework.util.StringUtils;\n+\n+public class ChangePasswordValidation {\n+    private final String password;\n+    private final String passwordConfirmation;\n+\n+    public ChangePasswordValidation(String password, String passwordConfirmation) {\n+        this.password = password;\n+        this.passwordConfirmation = passwordConfirmation;\n+    }\n+\n+    public boolean valid() {\n+        return StringUtils.hasText(password) && StringUtils.hasText(passwordConfirmation) && password.equals(passwordConfirmation);\n+    }\n+\n+    public String getMessageCode() {\n+        return \"form_error\";\n+    }\n+}"
        },
        {
            "sha": "32636975c9e58e1d71d0d29f19aa4ed74f12f0dd",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/ClientInfoAuthenticationFilter.java",
            "status": "added",
            "additions": 180,
            "deletions": 0,
            "changes": 180,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FClientInfoAuthenticationFilter.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FClientInfoAuthenticationFilter.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FClientInfoAuthenticationFilter.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,180 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.authority.AuthorityUtils;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.oauth2.provider.client.BaseClientDetails;\n+import org.springframework.security.oauth2.provider.ClientDetails;\n+import org.springframework.security.web.AuthenticationEntryPoint;\n+import org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.client.RestOperations;\n+import org.springframework.web.client.RestTemplate;\n+\n+/**\n+ * Authentication filter accepting basic authorization header and using it to\n+ * relay to a remote <code>/clientinfo</code> endpoint. Allows rejecting of\n+ * clients based on id or authorized grant type.\n+ * \n+ * @author Dave Syer\n+ * \n+ */\n+public class ClientInfoAuthenticationFilter implements Filter {\n+\n+    protected final Log logger = LogFactory.getLog(getClass());\n+\n+    private Set<String> allowedClients = Collections.singleton(\".*\");\n+\n+    private Set<String> allowedGrantTypes = Collections.singleton(\".*\");\n+\n+    private RestOperations restTemplate = new RestTemplate();\n+\n+    private String clientInfoUrl;\n+\n+    private AuthenticationEntryPoint authenticationEntryPoint = new BasicAuthenticationEntryPoint();\n+\n+    public void setRestTemplate(RestOperations restTemplate) {\n+        this.restTemplate = restTemplate;\n+    }\n+\n+    public void setClientInfoUrl(String clientInfoUrl) {\n+        this.clientInfoUrl = clientInfoUrl;\n+    }\n+\n+    /**\n+     * @param allowedClients the allowedClients to set\n+     */\n+    public void setAllowedClients(Set<String> allowedClients) {\n+        this.allowedClients = new HashSet<String>(allowedClients);\n+    }\n+\n+    /**\n+     * @param allowedGrantTypes the allowedGrantTypes to set\n+     */\n+    public void setAllowedGrantTypes(Set<String> allowedGrantTypes) {\n+        this.allowedGrantTypes = allowedGrantTypes;\n+    }\n+\n+    /**\n+     * @param authenticationEntryPoint the authenticationEntryPoint to set\n+     */\n+    public void setAuthenticationEntryPoint(AuthenticationEntryPoint authenticationEntryPoint) {\n+        this.authenticationEntryPoint = authenticationEntryPoint;\n+    }\n+\n+    /**\n+     * Populates the Spring Security context with a\n+     * {@link UsernamePasswordAuthenticationToken} referring to the client\n+     * that authenticates using the basic authorization header.\n+     */\n+    @Override\n+    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException,\n+                    ServletException {\n+\n+        HttpServletRequest servletRequest = (HttpServletRequest) request;\n+        String header = servletRequest.getHeader(\"Authorization\");\n+        if (header == null || !header.startsWith(\"Basic \")) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+\n+        HttpHeaders headers = new HttpHeaders();\n+        headers.set(\"Authorization\", header);\n+\n+        try {\n+\n+            ResponseEntity<BaseClientDetails> result = restTemplate.exchange(clientInfoUrl, HttpMethod.GET,\n+                            new HttpEntity<Void>(headers), BaseClientDetails.class);\n+\n+            ClientDetails client = result.getBody();\n+            String clientId = client.getClientId();\n+            validateClient(client);\n+\n+            Authentication authResult = new UsernamePasswordAuthenticationToken(clientId, \"<NONE>\",\n+                            client.getAuthorities());\n+            SecurityContextHolder.getContext().setAuthentication(authResult);\n+\n+        } catch (RuntimeException e) {\n+            logger.debug(\"Authentication failed\");\n+            authenticationEntryPoint.commence(servletRequest, (HttpServletResponse) response,\n+                            new BadCredentialsException(\"Could not authenticate\", e));\n+            return;\n+        }\n+\n+        chain.doFilter(request, response);\n+\n+    }\n+\n+    protected void validateClient(ClientDetails client) {\n+        String clientId = client.getClientId();\n+        for (String pattern : allowedClients) {\n+            if (!clientId.matches(pattern)) {\n+                throw new BadCredentialsException(\"Client not permitted: \" + clientId);\n+            }\n+        }\n+        Set<String> grantTypes = client.getAuthorizedGrantTypes();\n+        boolean matched = false;\n+        for (String pattern : allowedGrantTypes) {\n+            for (String grantType : grantTypes) {\n+                if (grantType.matches(pattern)) {\n+                    matched = true;\n+                }\n+            }\n+        }\n+        if (!matched) {\n+            throw new BadCredentialsException(\"Client not permitted (wrong grant type): \" + clientId);\n+        }\n+    }\n+\n+    protected List<GrantedAuthority> getAuthorities(Collection<String> authorities) {\n+        return AuthorityUtils.commaSeparatedStringToAuthorityList(StringUtils\n+                        .collectionToCommaDelimitedString(authorities));\n+    }\n+\n+    @Override\n+    public void init(FilterConfig filterConfig) throws ServletException {\n+    }\n+\n+    @Override\n+    public void destroy() {\n+    }\n+\n+}"
        },
        {
            "sha": "ae3468e57a77617d8e00359724fce38a73f21425",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/ConfigMetadataProvider.java",
            "status": "added",
            "additions": 36,
            "deletions": 0,
            "changes": 36,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FConfigMetadataProvider.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FConfigMetadataProvider.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FConfigMetadataProvider.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,36 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.opensaml.saml2.metadata.provider.AbstractMetadataProvider;\n+import org.opensaml.saml2.metadata.provider.MetadataProviderException;\n+import org.opensaml.xml.XMLObject;\n+import org.opensaml.xml.io.UnmarshallingException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+\n+public class ConfigMetadataProvider extends AbstractMetadataProvider {\n+\n+    private final Logger log = LoggerFactory.getLogger(ConfigMetadataProvider.class);\n+\n+    private String metadata;\n+\n+    public ConfigMetadataProvider(String metadata) {\n+        this.metadata = metadata;\n+    }\n+\n+    @Override\n+    protected XMLObject doGetMetadata() throws MetadataProviderException {\n+\n+        InputStream stream = new ByteArrayInputStream(metadata.getBytes(StandardCharsets.UTF_8));\n+\n+        try {\n+            return unmarshallMetadata(stream);\n+        } catch (UnmarshallingException e) {\n+            log.error(\"Unable to unmarshall metadata\", e);\n+            throw new MetadataProviderException(e);\n+        }\n+    }\n+}"
        },
        {
            "sha": "2b186518855094d469fb3ffbc3153d54de6d24bb",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/EmailAccountCreationService.java",
            "status": "added",
            "additions": 150,
            "deletions": 0,
            "changes": 150,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailAccountCreationService.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailAccountCreationService.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailAccountCreationService.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,150 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.cloudfoundry.identity.uaa.authentication.Origin;\n+import org.cloudfoundry.identity.uaa.codestore.ExpiringCode;\n+import org.cloudfoundry.identity.uaa.error.UaaException;\n+import org.cloudfoundry.identity.uaa.scim.ScimUser;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.codehaus.jackson.type.TypeReference;\n+import org.springframework.security.oauth2.provider.ClientDetails;\n+import org.springframework.security.oauth2.provider.client.BaseClientDetails;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.RestClientException;\n+import org.springframework.web.client.RestTemplate;\n+import org.thymeleaf.context.Context;\n+import org.thymeleaf.spring4.SpringTemplateEngine;\n+\n+import java.io.IOException;\n+import java.sql.Timestamp;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class EmailAccountCreationService implements AccountCreationService {\n+\n+    public static final String SIGNUP_REDIRECT_URL = \"signup_redirect_url\";\n+\n+    private final Log logger = LogFactory.getLog(getClass());\n+\n+    private final SpringTemplateEngine templateEngine;\n+    private final MessageService messageService;\n+    private final RestTemplate uaaTemplate;\n+    private final String uaaBaseUrl;\n+    private final String brand;\n+    private final ObjectMapper objectMapper;\n+    private final String baseUrl;\n+\n+    public EmailAccountCreationService(ObjectMapper objectMapper, SpringTemplateEngine templateEngine, MessageService messageService, RestTemplate uaaTemplate, String uaaBaseUrl, String brand, String baseUrl) {\n+        this.objectMapper = objectMapper;\n+        this.templateEngine = templateEngine;\n+        this.messageService = messageService;\n+        this.uaaTemplate = uaaTemplate;\n+        this.uaaBaseUrl = uaaBaseUrl;\n+        this.brand = brand;\n+        this.baseUrl = baseUrl;\n+    }\n+\n+    @Override\n+    public void beginActivation(String email, String password, String clientId) {\n+\n+        String subject = getSubjectText();\n+        try {\n+            ScimUser scimUser = createUser(email, password);\n+            generateAndSendCode(email, clientId, subject, scimUser.getId());\n+        } catch (HttpClientErrorException e) {\n+            String uaaResponse = e.getResponseBodyAsString();\n+            try {\n+                ExistingUserResponse existingUserResponse = new ObjectMapper().readValue(uaaResponse, ExistingUserResponse.class);\n+                if (existingUserResponse.getVerified()) {\n+                    throw new UaaException(e.getStatusText(), e.getStatusCode().value());\n+                }\n+                generateAndSendCode(email, clientId, subject, existingUserResponse.getUserId());\n+            } catch (IOException ioe) {\n+                ioe.printStackTrace();\n+            }\n+        } catch (RestClientException e) {\n+            logger.error(\"Exception raised while creating account activation email for \" + email, e);\n+        } catch (IOException e) {\n+            logger.error(\"Exception raised while creating account activation email for \" + email, e);\n+        }\n+    }\n+\n+    private void generateAndSendCode(String email, String clientId, String subject, String userId) throws IOException {\n+        Timestamp expiresAt = new Timestamp(System.currentTimeMillis() + (60 * 60 * 1000)); // 1 hour\n+        ExpiringCode expiringCodeForPost = getExpiringCode(userId, clientId, expiresAt);\n+        ExpiringCode expiringCode = uaaTemplate.postForObject(uaaBaseUrl + \"/Codes\", expiringCodeForPost, ExpiringCode.class);\n+        String htmlContent = getEmailHtml(expiringCode.getCode(), email);\n+\n+        messageService.sendMessage(userId, email, MessageType.CREATE_ACCOUNT_CONFIRMATION, subject, htmlContent);\n+    }\n+\n+    private ExpiringCode getExpiringCode(String userId, String clientId, Timestamp expiresAt) throws IOException {\n+        Map<String, String> codeData = new HashMap<>();\n+        codeData.put(\"user_id\", userId);\n+        codeData.put(\"client_id\", clientId);\n+        String codeDataString = objectMapper.writeValueAsString(codeData);\n+        return new ExpiringCode(null, expiresAt, codeDataString);\n+    }\n+\n+    @Override\n+    public AccountCreationResponse completeActivation(String code) throws IOException {\n+\n+        ExpiringCode expiringCode = uaaTemplate.getForObject(uaaBaseUrl + \"/Codes/\"+ code, ExpiringCode.class);\n+        Map<String, String> data = objectMapper.readValue(expiringCode.getData(), new TypeReference<Map<String, String>>() {});\n+        ScimUser user = uaaTemplate.getForObject(uaaBaseUrl + \"/Users/\" + data.get(\"user_id\") + \"/verify\", ScimUser.class);\n+\n+        ClientDetails clientDetails = uaaTemplate.getForObject(uaaBaseUrl + \"/oauth/clients/\" + data.get(\"client_id\"), BaseClientDetails.class);\n+        String redirectLocation = (String) clientDetails.getAdditionalInformation().get(SIGNUP_REDIRECT_URL);\n+\n+        return new AccountCreationResponse(user.getId(), user.getUserName(), user.getUserName(), redirectLocation);\n+    }\n+\n+    @Override\n+    public void resendVerificationCode(String email, String clientId) {\n+        String url = uaaBaseUrl + \"/ids/Users?attributes=id&filter=userName eq \\\"\" + email + \"\\\" and origin eq \\\"\" + Origin.UAA + \"\\\"\";\n+        Map<String,Object> response = uaaTemplate.getForObject(url, Map.class);\n+        List<Map<String,String>> resources = (ArrayList)response.get(\"resources\");\n+        String userId = resources.get(0).get(\"id\");\n+\n+        try {\n+            generateAndSendCode(email, clientId, getSubjectText(), userId);\n+        } catch (IOException e) {\n+            logger.error(\"Exception raised while resending activation email for \" + email, e);\n+        }\n+    }\n+    \n+    \n+    @Override\n+    public ScimUser createUser(String username, String password) {\n+        ScimUser scimUser = new ScimUser();\n+        scimUser.setUserName(username);\n+        ScimUser.Email email = new ScimUser.Email();\n+        email.setPrimary(true);\n+        email.setValue(username);\n+        scimUser.setEmails(Arrays.asList(email));\n+        scimUser.setOrigin(Origin.UAA);\n+        scimUser.setPassword(password);\n+        ScimUser userResponse = uaaTemplate.postForObject(uaaBaseUrl + \"/Users\", scimUser, ScimUser.class);\n+        return userResponse;\n+    }\n+    \n+    private String getSubjectText() {\n+        return brand.equals(\"pivotal\") ? \"Activate your Pivotal ID\" : \"Activate your account\";\n+    }\n+\n+    private String getEmailHtml(String code, String email) {\n+        String accountsUrl = baseUrl + \"/verify_user\";\n+\n+        final Context ctx = new Context();\n+        ctx.setVariable(\"serviceName\", brand.equals(\"pivotal\") ? \"Pivotal\" : \"Cloud Foundry\");\n+        ctx.setVariable(\"servicePhrase\", brand.equals(\"pivotal\") ? \"a Pivotal ID\" : \"an account\");\n+        ctx.setVariable(\"code\", code);\n+        ctx.setVariable(\"email\", email);\n+        ctx.setVariable(\"accountsUrl\", accountsUrl);\n+        return templateEngine.process(\"activate\", ctx);\n+    }\n+}"
        },
        {
            "sha": "e06a1ca1434569500b253ccf0aa02c246e173b0d",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/EmailChangeEmailService.java",
            "status": "added",
            "additions": 83,
            "deletions": 0,
            "changes": 83,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailChangeEmailService.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailChangeEmailService.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailChangeEmailService.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,83 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.cloudfoundry.identity.uaa.error.UaaException;\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n+import org.thymeleaf.TemplateEngine;\n+import org.thymeleaf.context.Context;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.springframework.http.HttpMethod.POST;\n+\n+public class EmailChangeEmailService implements ChangeEmailService {\n+\n+    private final TemplateEngine templateEngine;\n+    private final MessageService messageService;\n+    private final RestTemplate uaaTemplate;\n+    private final String uaaBaseUrl;\n+    private final String brand;\n+\n+    public EmailChangeEmailService(TemplateEngine templateEngine, MessageService messageService, RestTemplate uaaTemplate, String uaaBaseUrl, String brand) {\n+        this.templateEngine = templateEngine;\n+        this.messageService = messageService;\n+        this.uaaTemplate = uaaTemplate;\n+        this.uaaBaseUrl = uaaBaseUrl;\n+        this.brand = brand;\n+    }\n+\n+    @Override\n+    public void beginEmailChange(String userId, String email, String newEmail, String clientId) {\n+        Map<String,String> request = new HashMap<>();\n+        request.put(\"userId\", userId);\n+        request.put(\"email\", newEmail);\n+        request.put(\"client_id\", clientId);\n+        String expiringCode;\n+        try {\n+            expiringCode = uaaTemplate.postForObject(uaaBaseUrl + \"/email_verifications\", request, String.class);\n+        } catch (HttpClientErrorException e) {\n+            throw new UaaException(e.getStatusText(), e.getStatusCode().value());\n+        }\n+        String subject = getSubjectText();\n+        String htmlContent = getEmailChangeEmailHtml(email, newEmail, expiringCode);\n+\n+        if(htmlContent != null) {\n+            messageService.sendMessage(null, newEmail, MessageType.CHANGE_EMAIL, subject, htmlContent);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, String> completeVerification(String code) {\n+        ResponseEntity<Map<String, String>> responseEntity;\n+        try {\n+            responseEntity = uaaTemplate.exchange(uaaBaseUrl + \"/email_changes\", POST, new HttpEntity<>(code), new ParameterizedTypeReference<Map<String, String>>() {\n+                });\n+        } catch (HttpClientErrorException e) {\n+            throw new UaaException(e.getStatusText(), e.getStatusCode().value());\n+        }\n+        return responseEntity.getBody();\n+    }\n+\n+    private String getSubjectText() {\n+        return \"Email change verification\";\n+    }\n+\n+    private String getEmailChangeEmailHtml(String email, String newEmail, String code) {\n+        String verifyUrl = ServletUriComponentsBuilder.fromCurrentContextPath().path(\"/verify_email\").build().toUriString();\n+\n+        final Context ctx = new Context();\n+        ctx.setVariable(\"serviceName\", brand.equals(\"pivotal\") ? \"Pivotal \" : \"Cloud Foundry\");\n+        ctx.setVariable(\"servicePhrase\", brand.equals(\"pivotal\") ? \"a Pivotal ID\" : \"an account\");\n+        ctx.setVariable(\"code\", code);\n+        ctx.setVariable(\"newEmail\", newEmail);\n+        ctx.setVariable(\"email\", email);\n+        ctx.setVariable(\"verifyUrl\", verifyUrl);\n+        return templateEngine.process(\"verify_email\", ctx);\n+    }\n+\n+}"
        },
        {
            "sha": "7015cd56aa4bc07107f0a4eac019a06d6faba657",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/EmailInvitationsService.java",
            "status": "added",
            "additions": 128,
            "deletions": 0,
            "changes": 128,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailInvitationsService.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailInvitationsService.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailInvitationsService.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,128 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.cloudfoundry.identity.uaa.error.UaaException;\n+import org.cloudfoundry.identity.uaa.login.AccountCreationService.ExistingUserResponse;\n+import org.cloudfoundry.identity.uaa.message.PasswordChangeRequest;\n+import org.cloudfoundry.identity.uaa.scim.ScimUser;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.oauth2.provider.ClientDetails;\n+import org.springframework.security.oauth2.provider.client.BaseClientDetails;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.RestClientException;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n+import org.thymeleaf.context.Context;\n+import org.thymeleaf.spring4.SpringTemplateEngine;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+@Service\n+public class EmailInvitationsService implements InvitationsService {\n+    private final Log logger = LogFactory.getLog(getClass());\n+\n+    public static final String INVITATION_REDIRECT_URL = \"invitation_redirect_url\";\n+    public static final int INVITATION_EXPIRY_DAYS = 365;\n+\n+    private final SpringTemplateEngine templateEngine;\n+    private final MessageService messageService;\n+    private final String uaaBaseUrl;\n+\n+    private String brand;\n+\n+    public EmailInvitationsService(SpringTemplateEngine templateEngine, MessageService messageService, String brand, String uaaBaseUrl) {\n+        this.templateEngine = templateEngine;\n+        this.messageService = messageService;\n+        this.brand = brand;\n+        this.uaaBaseUrl = uaaBaseUrl;\n+    }\n+\n+    public void setBrand(String brand) {\n+        this.brand = brand;\n+    }\n+    \n+    @Autowired\n+    private AccountCreationService accountCreationService;\n+\n+    @Autowired\n+    private ExpiringCodeService expiringCodeService;\n+\n+    @Autowired\n+    private RestTemplate authorizationTemplate;\n+\n+    private void sendInvitationEmail(String email, String userId, String currentUser, String code) {\n+        String subject = getSubjectText();\n+        try {\n+            String htmlContent = getEmailHtml(currentUser, code);\n+                messageService.sendMessage(userId, email, MessageType.INVITATION, subject, htmlContent);\n+        } catch (RestClientException e) {\n+            logger.info(\"Exception raised while creating invitation email from \" + email, e);\n+        }\n+    }\n+\n+    private String getSubjectText() {\n+        return brand.equals(\"pivotal\") ? \"Invitation to join Pivotal\" : \"Invitation to join Cloud Foundry\";\n+    }\n+\n+    private String getEmailHtml(String currentUser, String code) {\n+        String accountsUrl = ServletUriComponentsBuilder.fromCurrentContextPath().path(\"/invitations/accept\").build().toUriString();\n+        final Context ctx = new Context();\n+        ctx.setVariable(\"serviceName\", brand.equals(\"pivotal\") ? \"Pivotal\" : \"Cloud Foundry\");\n+        ctx.setVariable(\"code\", code);\n+        ctx.setVariable(\"currentUser\", currentUser);\n+        ctx.setVariable(\"accountsUrl\", accountsUrl);\n+        return templateEngine.process(\"invite\", ctx);\n+    }\n+\n+    @Override\n+    public void inviteUser(String email, String currentUser) {\n+        try {\n+            ScimUser user = accountCreationService.createUser(email, null);\n+            Map<String,String> data = new HashMap<>();\n+            data.put(\"user_id\", user.getId());\n+            data.put(\"email\", email);\n+            String code = expiringCodeService.generateCode(data, INVITATION_EXPIRY_DAYS, TimeUnit.DAYS);\n+            sendInvitationEmail(email, user.getId(), currentUser, code);\n+        } catch (HttpClientErrorException e) {\n+            String uaaResponse = e.getResponseBodyAsString();\n+            try {\n+                ExistingUserResponse existingUserResponse = new ObjectMapper().readValue(uaaResponse, ExistingUserResponse.class);\n+                if (existingUserResponse.getVerified()) {\n+                    throw new UaaException(e.getStatusText(), e.getStatusCode().value());\n+                }\n+                Map<String,String> data = new HashMap<>();\n+                data.put(\"user_id\", existingUserResponse.getUserId());\n+                data.put(\"email\", email);\n+                String code = expiringCodeService.generateCode(data, INVITATION_EXPIRY_DAYS, TimeUnit.DAYS);\n+                sendInvitationEmail(email, existingUserResponse.getUserId(), currentUser, code);\n+            } catch (IOException ioe) {\n+            \tlogger.warn(\"couldn't invite user\",ioe);\n+            }\n+        } catch (IOException e) {\n+            logger.warn(\"couldn't invite user\",e);\n+        }\n+    }\n+\n+    @Override\n+    public String acceptInvitation(String userId, String email, String password, String clientId) {\n+        authorizationTemplate.getForEntity(uaaBaseUrl + \"/Users/\" + userId + \"/verify\",Object.class);\n+\n+        PasswordChangeRequest request = new PasswordChangeRequest();\n+        request.setPassword(password);\n+        authorizationTemplate.put(uaaBaseUrl + \"/Users/\" + userId + \"/password\", request);\n+\n+        String redirectLocation = null;\n+        if (clientId != null && !clientId.equals(\"\")) {\n+            ClientDetails clientDetails = authorizationTemplate.getForObject(uaaBaseUrl + \"/oauth/clients/\" + clientId, BaseClientDetails.class);\n+            redirectLocation = (String) clientDetails.getAdditionalInformation().get(INVITATION_REDIRECT_URL);\n+        }\n+\n+        return redirectLocation;\n+    }\n+}"
        },
        {
            "sha": "3bb65579ed72571a601da80e3a3ff326d5a0760a",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/EmailResetPasswordService.java",
            "status": "added",
            "additions": 138,
            "deletions": 0,
            "changes": 138,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailResetPasswordService.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailResetPasswordService.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailResetPasswordService.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,138 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.cloudfoundry.identity.uaa.authentication.Origin;\n+import org.cloudfoundry.identity.uaa.error.UaaException;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.codehaus.jackson.type.TypeReference;\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.core.env.Environment;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.RestClientException;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n+import org.thymeleaf.TemplateEngine;\n+import org.thymeleaf.context.Context;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class EmailResetPasswordService implements ResetPasswordService {\n+\n+    private final Log logger = LogFactory.getLog(getClass());\n+\n+    private final TemplateEngine templateEngine;\n+    private final MessageService messageService;\n+    private final RestTemplate uaaTemplate;\n+    private final String uaaBaseUrl;\n+    private final String brand;\n+\n+    public EmailResetPasswordService(TemplateEngine templateEngine, MessageService messageService, RestTemplate uaaTemplate, String uaaBaseUrl, String brand) {\n+        this.templateEngine = templateEngine;\n+        this.messageService = messageService;\n+        this.uaaTemplate = uaaTemplate;\n+        this.uaaBaseUrl = uaaBaseUrl;\n+        this.brand = brand;\n+    }\n+\n+    @Override\n+    public void forgotPassword(String email) {\n+        String subject = getSubjectText();\n+        String htmlContent = null;\n+        String userId = null;\n+        try {\n+            ResponseEntity<Map<String,String>> response = uaaTemplate.exchange(uaaBaseUrl + \"/password_resets\", HttpMethod.POST, new HttpEntity<>(email), new ParameterizedTypeReference<Map<String, String>>() {\n+            });\n+            htmlContent = getCodeSentEmailHtml(response.getBody().get(\"code\"), email);\n+            userId = response.getBody().get(\"user_id\");\n+        } catch (HttpClientErrorException e) {\n+            if (e.getStatusCode() == HttpStatus.CONFLICT) {\n+                htmlContent = getResetUnavailableEmailHtml(email);\n+                try {\n+                    Map<String, String> body = new ObjectMapper().readValue(e.getResponseBodyAsString(), new TypeReference<Map<String, String>>() {\n+                    });\n+                    userId = body.get(\"user_id\");\n+                } catch (IOException ioe) {\n+                    logger.error(\"Bad response from UAA\", ioe);\n+                }\n+\n+            } else {\n+                logger.info(\"Exception raised while creating password reset for \" + email, e);\n+            }\n+        } catch (RestClientException e) {\n+            logger.error(\"Exception raised while creating password reset for \" + email, e);\n+        }\n+\n+        if (htmlContent != null && userId != null) {\n+            messageService.sendMessage(userId, email, MessageType.PASSWORD_RESET, subject, htmlContent);\n+        }\n+    }\n+\n+    private String getSubjectText() {\n+        return brand.equals(\"pivotal\") ? \"Pivotal account password reset request\" : \"Account password reset request\";\n+    }\n+\n+    @Override\n+    public Map<String, String> resetPassword(String code, String newPassword) {\n+        Map<String, String> uriVariables = new HashMap<>();\n+        uriVariables.put(\"baseUrl\", uaaBaseUrl);\n+\n+        Map<String, String> formData = new HashMap<>();\n+        formData.put(\"code\", code);\n+        formData.put(\"new_password\", newPassword);\n+\n+        try {\n+            ResponseEntity<Map<String, String>> responseEntity = uaaTemplate.exchange(\n+                \"{baseUrl}/password_change\",\n+                HttpMethod.POST,\n+                new HttpEntity<>(formData),\n+                new ParameterizedTypeReference<Map<String, String>>() {\n+                },\n+                uriVariables\n+            );\n+            return responseEntity.getBody();\n+        } catch (RestClientException e) {\n+            throw new UaaException(e.getMessage());\n+        }\n+    }\n+\n+\n+    private String getCodeSentEmailHtml(String code, String email) {\n+        String resetUrl = ServletUriComponentsBuilder.fromCurrentContextPath().path(\"/reset_password\").build().toUriString();\n+\n+        final Context ctx = new Context();\n+        ctx.setVariable(\"serviceName\", brand.equals(\"pivotal\") ? \"Pivotal \" : \"\");\n+        ctx.setVariable(\"code\", code);\n+        ctx.setVariable(\"email\", email);\n+        ctx.setVariable(\"resetUrl\", resetUrl);\n+        return templateEngine.process(\"reset_password\", ctx);\n+    }\n+\n+    private String getResetUnavailableEmailHtml(String email) {\n+        String hostname = ServletUriComponentsBuilder.fromCurrentContextPath().build().getHost();\n+\n+        final Context ctx = new Context();\n+        ctx.setVariable(\"serviceName\", brand.equals(\"pivotal\") ? \"Pivotal \" : \"\");\n+        ctx.setVariable(\"email\", email);\n+        ctx.setVariable(\"hostname\", hostname);\n+        return templateEngine.process(\"reset_password_unavailable\", ctx);\n+    }\n+}"
        },
        {
            "sha": "60ef8aea4c87ff75ab970dfb7935f075f00ae22d",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/EmailService.java",
            "status": "added",
            "additions": 51,
            "deletions": 0,
            "changes": 51,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailService.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailService.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailService.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,51 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.springframework.mail.javamail.JavaMailSender;\n+import org.springframework.web.util.UriComponentsBuilder;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.internet.AddressException;\n+import javax.mail.internet.InternetAddress;\n+import javax.mail.internet.MimeMessage;\n+import java.io.UnsupportedEncodingException;\n+\n+public class EmailService implements MessageService {\n+    private final Log logger = LogFactory.getLog(getClass());\n+\n+    private final JavaMailSender mailSender;\n+    private final String loginUrl;\n+    private final String brand;\n+\n+    public EmailService(JavaMailSender mailSender, String loginUrl, String brand) {\n+        this.mailSender = mailSender;\n+        this.loginUrl = loginUrl;\n+        this.brand = brand;\n+    }\n+\n+    private Address[] getSenderAddresses() throws AddressException, UnsupportedEncodingException {\n+        String host = UriComponentsBuilder.fromHttpUrl(loginUrl).build().getHost();\n+        String name = brand.equals(\"pivotal\") ? \"Pivotal\" : \"Cloud Foundry\";\n+        return new Address[]{new InternetAddress(\"admin@\" + host, name)};\n+    }\n+\n+    @Override\n+    public void sendMessage(String userId, String email, MessageType messageType, String subject, String htmlContent) {\n+        MimeMessage message = mailSender.createMimeMessage();\n+        try {\n+            message.addFrom(getSenderAddresses());\n+            message.addRecipients(Message.RecipientType.TO, email);\n+            message.setSubject(subject);\n+            message.setContent(htmlContent, \"text/html\");\n+        } catch (MessagingException e) {\n+            logger.error(\"Exception raised while sending message to \" + email, e);\n+        } catch (UnsupportedEncodingException e) {\n+            logger.error(\"Exception raised while sending message to \" + email, e);\n+        }\n+\n+        mailSender.send(message);\n+    }\n+}"
        },
        {
            "sha": "6a208ee55d612a89f8ca8c099e493471a70a7c6e",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/ExpiringCodeService.java",
            "status": "added",
            "additions": 39,
            "deletions": 0,
            "changes": 39,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FExpiringCodeService.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FExpiringCodeService.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FExpiringCodeService.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,39 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public interface ExpiringCodeService {\n+    String generateCode(Object data, int expiryTime, TimeUnit timeUnit) throws IOException;\n+    <T> T verifyCode(Class<T> clazz, String code) throws CodeNotFoundException, IOException;\n+    Map<String, String> verifyCode(String code) throws CodeNotFoundException, IOException;\n+    \n+    public class CodeNotFoundException extends Exception {\n+\n+        public CodeNotFoundException() {\n+            super();\n+        }\n+\n+\n+        public CodeNotFoundException(String message, Throwable cause) {\n+            super(message, cause);\n+        }\n+\n+        public CodeNotFoundException(String message) {\n+            super(message);\n+        }\n+\n+        public CodeNotFoundException(Throwable cause) {\n+            super(cause);\n+        }\n+\n+        /**\n+         * \n+         */\n+        private static final long serialVersionUID = -7579875965452686646L;\n+        \n+    }\n+\n+\n+}"
        },
        {
            "sha": "eda062d05b107cc914ee002775dfecb6b18630ba",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/HomeController.java",
            "status": "added",
            "additions": 63,
            "deletions": 0,
            "changes": 63,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FHomeController.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FHomeController.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FHomeController.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,63 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import java.security.Principal;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.env.Environment;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+\n+@Controller\n+public class HomeController extends AbstractControllerInfo {\n+    private final Log logger = LogFactory.getLog(getClass());\n+    protected final Environment environment;\n+    @Autowired\n+    private TileInfo tileInfo;\n+\n+    public HomeController(Environment environment) {\n+        this.environment = environment;\n+    }\n+\n+    @RequestMapping(value = { \"/\", \"/home\" })\n+    public String home(Model model, Principal principal) {\n+        model.addAttribute(\"principal\", principal);\n+        model.addAttribute(\"tiles\", tileInfo.getLoginTiles());\n+        boolean invitationsEnabled = \"true\".equalsIgnoreCase(environment.getProperty(\"login.invitationsEnabled\"));\n+        if (invitationsEnabled) {\n+            model.addAttribute(\"invitationsLink\", \"/invitations/new\");\n+        }\n+        populateBuildAndLinkInfo(model);\n+        return \"home\";\n+    }\n+\n+    @RequestMapping(\"/error500\")\n+    public String error500(Model model, HttpServletRequest request) {\n+        logger.error(\"Internal error\", (Throwable) request.getAttribute(\"javax.servlet.error.exception\"));\n+\n+        populateBuildAndLinkInfo(model);\n+        return \"error\";\n+    }\n+\n+    @RequestMapping(\"/error404\")\n+    public String error404(Model model) {\n+        populateBuildAndLinkInfo(model);\n+        return \"error\";\n+    }\n+}"
        },
        {
            "sha": "7cf8a5fab8791e44ef71fc3a732f6fc5caf6d9de",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/InvitationsController.java",
            "status": "added",
            "additions": 122,
            "deletions": 0,
            "changes": 122,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FInvitationsController.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FInvitationsController.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FInvitationsController.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,122 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.cloudfoundry.identity.uaa.authentication.Origin;\n+import org.cloudfoundry.identity.uaa.authentication.UaaPrincipal;\n+import org.cloudfoundry.identity.uaa.error.UaaException;\n+import org.cloudfoundry.identity.uaa.login.ExpiringCodeService.CodeNotFoundException;\n+import org.cloudfoundry.identity.uaa.user.UaaAuthority;\n+import org.hibernate.validator.constraints.Email;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.validation.BindingResult;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import javax.validation.Valid;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.GET;\n+import static org.springframework.web.bind.annotation.RequestMethod.POST;\n+\n+\n+@Controller\n+@RequestMapping(\"/invitations\")\n+public class InvitationsController {\n+    private InvitationsService invitationsService;\n+    @Autowired\n+    private ExpiringCodeService expiringCodeService;\n+\n+    public InvitationsController(InvitationsService invitationsService) {\n+        this.invitationsService = invitationsService;\n+    }\n+\n+    @RequestMapping(value = \"/new\", method = GET)\n+    public String newInvitePage(Model model) {\n+        return \"invitations/new_invite\";\n+    }\n+    \n+\n+    @RequestMapping(value = \"/new.do\", method = POST, params = {\"email\"})\n+    public String sendInvitationEmail(@Valid @ModelAttribute(\"email\") ValidEmail email, BindingResult result, Model model, HttpServletResponse response) {\n+        if (result.hasErrors()) {\n+            return handleUnprocessableEntity(model, response, \"invalid_email\", \"invitations/new_invite\");\n+        }\n+\n+        UaaPrincipal p = ((UaaPrincipal) SecurityContextHolder.getContext().getAuthentication().getPrincipal());\n+        String currentUser = p.getName();\n+        try {\n+        \tinvitationsService.inviteUser(email.getEmail(), currentUser);\n+        } catch (UaaException e) {\n+        \treturn handleUnprocessableEntity(model, response, \"existing_user\", \"invitations/new_invite\");\n+        }\n+        return \"redirect:sent\";\n+    }\n+    \n+    @RequestMapping(value = \"sent\", method = GET)\n+    public String inviteSentPage(Model model) {\n+        return \"invitations/invite_sent\";\n+    }\n+    \n+    @RequestMapping(value = \"/accept\", method = GET, params = {\"code\"})\n+    public String acceptInvitePage(@RequestParam String code, Model model, HttpServletResponse response) throws IOException {\n+\t\ttry {\n+\t\t\tMap<String, String> codeData = expiringCodeService.verifyCode(code);\n+\t        UaaPrincipal uaaPrincipal = new UaaPrincipal(codeData.get(\"user_id\"), codeData.get(\"email\"), codeData.get(\"email\"), Origin.UAA, null);\n+\t        UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(uaaPrincipal, null, UaaAuthority.USER_AUTHORITIES);\n+\t        SecurityContextHolder.getContext().setAuthentication(token);\n+\t    \tmodel.addAllAttributes(codeData);\n+\t    \treturn \"invitations/accept_invite\";\n+        } catch (CodeNotFoundException e) {\n+            return handleUnprocessableEntity(model, response, \"code_expired\", \"invitations/accept_invite\");\n+\t\t}\n+    }\n+\n+    @RequestMapping(value = \"/accept.do\", method = POST)\n+    public String acceptInvitation(@RequestParam(\"password\") String password,\n+                                   @RequestParam(\"password_confirmation\") String passwordConfirmation,\n+                                   @RequestParam(\"client_id\") String clientId,\n+                                   Model model, HttpServletResponse servletResponse) throws IOException {\n+\n+        ChangePasswordValidation validation = new ChangePasswordValidation(password, passwordConfirmation);\n+\n+        UaaPrincipal principal =  (UaaPrincipal) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n+\n+        if (!validation.valid()) {\n+            model.addAttribute(\"email\", principal.getEmail());\n+            return handleUnprocessableEntity(model, servletResponse, validation.getMessageCode(), \"invitations/accept_invite\");\n+        }\n+        String redirectLocation = invitationsService.acceptInvitation(principal.getId(), principal.getEmail(), password, clientId);\n+\n+        if (redirectLocation != null) {\n+            return \"redirect:\" + redirectLocation;\n+        }\n+        return \"redirect:/home\";\n+    }\n+\n+    private String handleUnprocessableEntity(Model model, HttpServletResponse response, String errorMessage, String view) {\n+        model.addAttribute(\"error_message_code\", errorMessage);\n+        response.setStatus(HttpStatus.UNPROCESSABLE_ENTITY.value());\n+        return view;\n+    }\n+\n+    public static class ValidEmail {\n+        @Email\n+        String email;\n+\n+        public String getEmail() {\n+            return email;\n+        }\n+\n+        public void setEmail(String email) {\n+            this.email = email;\n+        }\n+    }\n+}"
        },
        {
            "sha": "bc2f5675f6732e97b8177411b3c9bacc387f286e",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/InvitationsService.java",
            "status": "added",
            "additions": 7,
            "deletions": 0,
            "changes": 7,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FInvitationsService.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FInvitationsService.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FInvitationsService.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,7 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+public interface InvitationsService {\n+    void inviteUser(String email, String currentUser);\n+\n+    String acceptInvitation(String userId, String email, String password, String clientId);\n+}"
        },
        {
            "sha": "4108dd6c9dd518bb9d5ebb61a61aaaae5c865643",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/LinkedMaskingMultiValueMap.java",
            "status": "added",
            "additions": 269,
            "deletions": 0,
            "changes": 269,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FLinkedMaskingMultiValueMap.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FLinkedMaskingMultiValueMap.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FLinkedMaskingMultiValueMap.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,269 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import java.io.Serializable;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.springframework.util.MultiValueMap;\n+\n+/**\n+ * Simple implementation of {@link MultiValueMap} that wraps a\n+ * {@link LinkedHashMap},\n+ * storing multiple values in a {@link LinkedList}.\n+ * \n+ * <p>\n+ * This Map implementation is generally not thread-safe. It is primarily\n+ * designed for data structures exposed from request objects, for use in a\n+ * single thread only.\n+ * \n+ * Enhancements from Spring Core is that we can mask values from sensitive\n+ * attributes such as passwords and other credentials. It also supports cyclic\n+ * references in the toString and hashCode methods\n+ * \n+ * @author Arjen Poutsma\n+ * @author Juergen Hoeller\n+ * @author fhanik\n+ * @since 3.0\n+ */\n+public class LinkedMaskingMultiValueMap<K, V> implements MultiValueMap<K, V>, Serializable {\n+\n+    private static final long serialVersionUID = 3801124242820219132L;\n+\n+    private final Map<K, List<V>> targetMap;\n+\n+    private final Set<K> maskedAttributeSet = new HashSet<K>();\n+\n+    /**\n+     * Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}.\n+     */\n+    public LinkedMaskingMultiValueMap() {\n+        this.targetMap = new LinkedHashMap<K, List<V>>();\n+    }\n+\n+    public LinkedMaskingMultiValueMap(K maskedAttribute) {\n+        this.targetMap = new LinkedHashMap<K, List<V>>();\n+        this.maskedAttributeSet.add(maskedAttribute);\n+    }\n+\n+    /**\n+     * Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}.\n+     */\n+    public LinkedMaskingMultiValueMap(Set<K> maskedAttributes) {\n+        this.targetMap = new LinkedHashMap<K, List<V>>();\n+        this.maskedAttributeSet.addAll(maskedAttributes);\n+    }\n+\n+    /**\n+     * Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap} with\n+     * the given initial capacity.\n+     * \n+     * @param initialCapacity the initial capacity\n+     */\n+    public LinkedMaskingMultiValueMap(int initialCapacity) {\n+        this.targetMap = new LinkedHashMap<K, List<V>>(initialCapacity);\n+    }\n+\n+    /**\n+     * Copy constructor: Create a new LinkedMultiValueMap with the same mappings\n+     * as the specified Map.\n+     * \n+     * @param otherMap the Map whose mappings are to be placed in this Map\n+     */\n+    public LinkedMaskingMultiValueMap(Map<K, List<V>> otherMap) {\n+        this.targetMap = new LinkedHashMap<K, List<V>>(otherMap);\n+    }\n+\n+    // masked attributes\n+\n+    // MultiValueMap implementation\n+\n+    @Override\n+    public void add(K key, V value) {\n+        List<V> values = this.targetMap.get(key);\n+        if (values == null) {\n+            values = new LinkedList<V>();\n+            this.targetMap.put(key, values);\n+        }\n+        values.add(value);\n+    }\n+\n+    @Override\n+    public V getFirst(K key) {\n+        List<V> values = this.targetMap.get(key);\n+        return (values != null ? values.get(0) : null);\n+    }\n+\n+    @Override\n+    public void set(K key, V value) {\n+        List<V> values = new LinkedList<V>();\n+        values.add(value);\n+        this.targetMap.put(key, values);\n+    }\n+\n+    @Override\n+    public void setAll(Map<K, V> values) {\n+        for (Entry<K, V> entry : values.entrySet()) {\n+            set(entry.getKey(), entry.getValue());\n+        }\n+    }\n+\n+    @Override\n+    public Map<K, V> toSingleValueMap() {\n+        LinkedHashMap<K, V> singleValueMap = new LinkedHashMap<K, V>(this.targetMap.size());\n+        for (Entry<K, List<V>> entry : targetMap.entrySet()) {\n+            singleValueMap.put(entry.getKey(), entry.getValue().get(0));\n+        }\n+        return singleValueMap;\n+    }\n+\n+    // Map implementation\n+\n+    @Override\n+    public int size() {\n+        return this.targetMap.size();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return this.targetMap.isEmpty();\n+    }\n+\n+    @Override\n+    public boolean containsKey(Object key) {\n+        return this.targetMap.containsKey(key);\n+    }\n+\n+    @Override\n+    public boolean containsValue(Object value) {\n+        return this.targetMap.containsValue(value);\n+    }\n+\n+    @Override\n+    public List<V> get(Object key) {\n+        return this.targetMap.get(key);\n+    }\n+\n+    @Override\n+    public List<V> put(K key, List<V> value) {\n+        return this.targetMap.put(key, value);\n+    }\n+\n+    @Override\n+    public List<V> remove(Object key) {\n+        return this.targetMap.remove(key);\n+    }\n+\n+    @Override\n+    public void putAll(Map<? extends K, ? extends List<V>> m) {\n+        this.targetMap.putAll(m);\n+    }\n+\n+    @Override\n+    public void clear() {\n+        this.targetMap.clear();\n+    }\n+\n+    @Override\n+    public Set<K> keySet() {\n+        return this.targetMap.keySet();\n+    }\n+\n+    @Override\n+    public Collection<List<V>> values() {\n+        return this.targetMap.values();\n+    }\n+\n+    @Override\n+    public Set<Entry<K, List<V>>> entrySet() {\n+        return this.targetMap.entrySet();\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        return this.targetMap.equals(obj);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int h = 0;\n+        Iterator<Entry<K, List<V>>> i = entrySet().iterator();\n+        while (i.hasNext()) {\n+            int keyHash = 1;\n+            Entry<K, List<V>> entry = i.next();\n+            if (entry.getKey() == null || entry.getKey() == this) {\n+                // no op - don't modify the hash\n+            } else {\n+                keyHash += entry.getKey().hashCode();\n+            }\n+            List<V> value = entry.getValue();\n+            int valueHash = 1;\n+            for (V v : value) {\n+                valueHash = 31 * valueHash + (v == null ? 0 : v == this ? 0 : v.hashCode());\n+            }\n+\n+            h += (keyHash ^ valueHash);\n+        }\n+        return h;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        Iterator<Entry<K, List<V>>> i = targetMap.entrySet().iterator();\n+        if (!i.hasNext())\n+            return \"{}\";\n+\n+        StringBuilder sb = new StringBuilder();\n+        sb.append('{');\n+\n+        while (i.hasNext()) {\n+\n+            Entry<K, List<V>> e = i.next();\n+            List<V> value = e.getValue();\n+\n+            K key = e.getKey();\n+            sb.append(key == this ? \"(this map)\" : key);\n+            sb.append('=');\n+\n+            if (maskedAttributeSet.contains(key)) {\n+                sb.append(\"[PROTECTED]\");\n+            } else if (value == null) {\n+                sb.append(\"[]\");\n+            } else {\n+                Iterator<V> it = value.iterator();\n+                sb.append('[');\n+                while (it.hasNext()) {\n+                    V v = it.next();\n+                    sb.append(v == this ? \"(this map)\" : v);\n+                    if (it.hasNext()) {\n+                        sb.append(',').append(' ');\n+                    }\n+                }\n+                sb.append(']');\n+            }\n+\n+            if (i.hasNext()) {\n+                sb.append(',').append(' ');\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+}"
        },
        {
            "sha": "98c5bd2b877f812b41649f047faa7631c0b21a3d",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/LoginServerConfig.java",
            "status": "added",
            "additions": 45,
            "deletions": 0,
            "changes": 45,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FLoginServerConfig.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FLoginServerConfig.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FLoginServerConfig.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,45 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.springframework.context.annotation.*;\n+import org.springframework.core.env.Environment;\n+import org.springframework.core.type.AnnotatedTypeMetadata;\n+\n+@Configuration\n+public class LoginServerConfig {\n+\n+    @Bean\n+    @Conditional(CreateAccountCondition.class)\n+    public AccountsController accountsController(AccountCreationService accountCreationService) {\n+        return new AccountsController(accountCreationService);\n+    }\n+\n+    public static class CreateAccountCondition implements Condition {\n+        @Override\n+        public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n+            return !\"false\".equalsIgnoreCase(context.getEnvironment().getProperty(\"login.signupsEnabled\"));\n+        }\n+    }\n+\n+    @Bean\n+    @Conditional(InviteUsersCondition.class)\n+    public InvitationsController invitationsController(InvitationsService invitationsService) {\n+        return new InvitationsController(invitationsService);\n+    }\n+\n+    public static class InviteUsersCondition implements Condition {\n+        @Override\n+        public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n+            return \"true\".equalsIgnoreCase(context.getEnvironment().getProperty(\"login.invitationsEnabled\"));\n+        }\n+    }\n+\n+    @Bean\n+    public MessageService messageService(EmailService emailService, NotificationsService notificationsService, Environment environment) {\n+        if (environment.getProperty(\"notifications.url\") != null && !environment.getProperty(\"notifications.url\").equals(\"\")) {\n+            return notificationsService;\n+        }\n+        else {\n+            return emailService;\n+        }\n+    }\n+}"
        },
        {
            "sha": "c310fc876d9f52981b75886902fcac3e9380f816",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/LoginServerSamlUserDetailsService.java",
            "status": "added",
            "additions": 63,
            "deletions": 0,
            "changes": 63,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FLoginServerSamlUserDetailsService.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FLoginServerSamlUserDetailsService.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FLoginServerSamlUserDetailsService.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,63 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import org.cloudfoundry.identity.uaa.user.UaaAuthority;\n+import org.opensaml.saml2.core.Attribute;\n+import org.opensaml.xml.XMLObject;\n+import org.opensaml.xml.schema.XSString;\n+import org.springframework.security.core.userdetails.UsernameNotFoundException;\n+import org.springframework.security.saml.SAMLCredential;\n+import org.springframework.security.saml.userdetails.SAMLUserDetailsService;\n+\n+/**\n+ * UserDetailsService that extracts the user's groups\n+ * \n+ * @author jdsa\n+ * \n+ */\n+public class LoginServerSamlUserDetailsService implements SAMLUserDetailsService {\n+\n+    @Override\n+    public Object loadUserBySAML(SAMLCredential credential) throws UsernameNotFoundException {\n+        String username = credential.getNameID().getValue();\n+        String password = null;\n+        boolean enabled = true;\n+        boolean accountNonExpired = false;\n+        boolean credentialsNonExpired = true;\n+        boolean accountNonLocked = true;\n+        Collection<SamlUserAuthority> authorities = null;\n+\n+        for (Attribute attribute : credential.getAttributes()) {\n+            if ((\"Groups\".equals(attribute.getName())) || (\"Groups\".equals(attribute.getFriendlyName()))) {\n+                if (attribute.getAttributeValues() != null && attribute.getAttributeValues().size() > 0) {\n+                    authorities = new ArrayList<SamlUserAuthority>();\n+                    for (XMLObject group : attribute.getAttributeValues()) {\n+                        authorities.add(new SamlUserAuthority(((XSString) group).getValue()));\n+                    }\n+                }\n+                break;\n+            }\n+        }\n+\n+        SamlUserDetails userDetails = new SamlUserDetails(username, password, enabled, accountNonExpired,\n+                        credentialsNonExpired, accountNonLocked, authorities == null ? UaaAuthority.USER_AUTHORITIES\n+                                        : authorities);\n+\n+        return userDetails;\n+    }\n+\n+}"
        },
        {
            "sha": "08c7fd227f230483dff6387d0be9da10184ac9a1",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/MessageService.java",
            "status": "added",
            "additions": 7,
            "deletions": 0,
            "changes": 7,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FMessageService.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FMessageService.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FMessageService.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,7 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+public interface MessageService {\n+\n+    public void sendMessage(String userId, String email, MessageType messageType, String subject, String htmlContent);\n+\n+}"
        },
        {
            "sha": "1fd79ee46d3912b9e77e12bb3d2dd1f30f6686c4",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/MessageType.java",
            "status": "added",
            "additions": 8,
            "deletions": 0,
            "changes": 8,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FMessageType.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FMessageType.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FMessageType.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,8 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+public enum MessageType {\n+    CHANGE_EMAIL,\n+    CREATE_ACCOUNT_CONFIRMATION,\n+    INVITATION,\n+    PASSWORD_RESET\n+}"
        },
        {
            "sha": "1baf137ae3554a23ff11edc19436ffe0d7e3e8e8",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/NotificationsService.java",
            "status": "added",
            "additions": 64,
            "deletions": 0,
            "changes": 64,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FNotificationsService.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FNotificationsService.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FNotificationsService.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,64 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class NotificationsService implements MessageService {\n+    private final RestTemplate notificationsTemplate;\n+    private final RestTemplate uaaTemplate;\n+    private final String notificationsUrl;\n+    private final Map<MessageType,HashMap<String, Object>> notifications;\n+    private final String uaaUrl;\n+\n+    private Boolean isNotificationsRegistered = false;\n+    public Boolean getIsNotificationsRegistered() {\n+        return isNotificationsRegistered;\n+    }\n+\n+    public NotificationsService(RestTemplate notificationsTemplate, String notificationsUrl, Map<MessageType, HashMap<String, Object>> notifications, RestTemplate uaaTemplate, String uaaUrl) {\n+        this.notificationsTemplate = notificationsTemplate;\n+        this.notificationsUrl = notificationsUrl;\n+        this.notifications = notifications;\n+        this.uaaTemplate = uaaTemplate;\n+        this.uaaUrl = uaaUrl;\n+    }\n+\n+    @Override\n+    public void sendMessage(String userId, String email, MessageType messageType, String subject, String htmlContent) {\n+        if (!getIsNotificationsRegistered()) {\n+            registerNotifications();\n+        }\n+\n+        Map<String,String> request = new HashMap<>();\n+        String url;\n+\n+        if (userId != null) {\n+            String kindId = (String)notifications.get(messageType).get(\"id\");\n+            request.put(\"kind_id\", kindId);\n+            request.put(\"subject\", subject);\n+            request.put(\"html\", htmlContent);\n+            url = notificationsUrl + \"/users/\" + userId;\n+        } else {\n+            request.put(\"to\", email);\n+            request.put(\"subject\", subject);\n+            request.put(\"html\", htmlContent);\n+            url = notificationsUrl + \"/emails\";\n+        }\n+\n+        HttpEntity<Map<String,String>> requestEntity = new HttpEntity<>(request);\n+        notificationsTemplate.exchange(url, HttpMethod.POST, requestEntity, Void.class);\n+    }\n+\n+    private void registerNotifications() {\n+        HashMap<String, Object> request = new HashMap<>();\n+        request.put(\"source_description\", \"CF_Identity\");\n+        request.put(\"kinds\", notifications.values());\n+\n+        notificationsTemplate.put(notificationsUrl + \"/registration\", request);\n+        isNotificationsRegistered = true;\n+    }\n+}"
        },
        {
            "sha": "47e3dd0aeeae0bc29c3484021a96703bd8bf77b9",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/PasscodeAuthenticationFilter.java",
            "status": "added",
            "additions": 223,
            "deletions": 0,
            "changes": 223,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FPasscodeAuthenticationFilter.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FPasscodeAuthenticationFilter.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FPasscodeAuthenticationFilter.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,223 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.cloudfoundry.identity.uaa.authentication.AuthzAuthenticationRequest;\n+import org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationDetails;\n+import org.cloudfoundry.identity.uaa.client.SocialClientUserDetails;\n+import org.cloudfoundry.identity.uaa.codestore.ExpiringCode;\n+import org.cloudfoundry.identity.uaa.user.UaaAuthority;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.codehaus.jackson.type.TypeReference;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint;\n+import org.springframework.security.web.AuthenticationEntryPoint;\n+import org.springframework.web.client.RestTemplate;\n+\n+/**\n+ * Authentication filter to verify one time passwords with what's cached in the\n+ * one time password store.\n+ * \n+ * @author jdsa\n+ * \n+ */\n+public class PasscodeAuthenticationFilter implements Filter {\n+\n+    private final Log logger = LogFactory.getLog(getClass());\n+\n+    private List<String> parameterNames = Collections.emptyList();\n+\n+    private final Set<String> methods = Collections.singleton(HttpMethod.POST.toString());\n+\n+    private final AuthenticationEntryPoint authenticationEntryPoint = new OAuth2AuthenticationEntryPoint();\n+\n+    private final ObjectMapper mapper = new ObjectMapper();\n+\n+    private AuthenticationManager authenticationManager;\n+\n+    private RestTemplate authorizationTemplate;\n+\n+    private String uaaBaseUrl;\n+\n+    public String getUaaBaseUrl() {\n+        return uaaBaseUrl;\n+    }\n+\n+    public void setUaaBaseUrl(String uaaBaseUrl) {\n+        this.uaaBaseUrl = uaaBaseUrl;\n+    }\n+\n+    public RestTemplate getAuthorizationTemplate() {\n+        return authorizationTemplate;\n+    }\n+\n+    public void setAuthorizationTemplate(RestTemplate authorizationTemplate) {\n+        this.authorizationTemplate = authorizationTemplate;\n+    }\n+\n+    @Override\n+    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException,\n+                    ServletException {\n+\n+        HttpServletRequest req = (HttpServletRequest) request;\n+        HttpServletResponse res = (HttpServletResponse) response;\n+\n+        Map<String, String> loginInfo = getCredentials(req);\n+\n+        String username = loginInfo.get(\"username\");\n+        String password = loginInfo.get(\"password\");\n+        String passcode = loginInfo.get(\"passcode\");\n+\n+        if (loginInfo.isEmpty()) {\n+            throw new BadCredentialsException(\"Request does not contain credentials.\");\n+        } else if (null == password && null != passcode) {\n+            // Validate passcode\n+            logger.debug(\"Located credentials in request, with keys: \" + loginInfo.keySet());\n+            if (methods != null && !methods.contains(req.getMethod().toUpperCase())) {\n+                throw new BadCredentialsException(\"Credentials must be sent by (one of methods): \" + methods);\n+            }\n+\n+            ExpiringCode eCode = doRetrieveCode(passcode);\n+            PasscodeInformation pi = null;\n+            if (eCode != null && eCode.getData() != null) {\n+                pi = new ObjectMapper().readValue(eCode.getData(), PasscodeInformation.class);\n+            }\n+\n+            if (pi != null) {\n+                logger.info(\"Successful authentication request for \" + username);\n+\n+                Collection<GrantedAuthority> externalAuthorities = null;\n+\n+                if (null != pi.getAuthorizationParameters()) {\n+                    externalAuthorities = (Collection<GrantedAuthority>) pi.getAuthorizationParameters().get(\n+                                    \"authorities\");\n+                }\n+                SocialClientUserDetails principal = new SocialClientUserDetails(pi.getUsername(), pi.getSamlAuthorities());\n+                principal.setSource(pi.getOrigin());\n+                Authentication result = new UsernamePasswordAuthenticationToken(\n+                    principal,\n+                    null,\n+                    externalAuthorities == null ? UaaAuthority.USER_AUTHORITIES : externalAuthorities\n+                );\n+\n+                SecurityContextHolder.getContext().setAuthentication(result);\n+            } else {\n+                authenticationEntryPoint.commence(req, res, new BadCredentialsException(\"Invalid passcode\"));\n+            }\n+        } else {\n+            // Authenticate user against the UAA\n+            logger.debug(\"Located credentials in request, with keys: \" + loginInfo.keySet());\n+            if (methods != null && !methods.contains(req.getMethod().toUpperCase())) {\n+                throw new BadCredentialsException(\"Credentials must be sent by (one of methods): \" + methods);\n+            }\n+            Authentication result = authenticationManager.authenticate(new AuthzAuthenticationRequest(loginInfo,\n+                            new UaaAuthenticationDetails(req)));\n+            SecurityContextHolder.getContext().setAuthentication(result);\n+        }\n+\n+        chain.doFilter(request, response);\n+    }\n+\n+    public ExpiringCode doRetrieveCode(String code) {\n+        HttpHeaders requestHeaders = new HttpHeaders();\n+        requestHeaders.add(\"Accept\", MediaType.APPLICATION_JSON_VALUE);\n+\n+        HttpEntity<ExpiringCode> requestEntity = new HttpEntity<ExpiringCode>(null, requestHeaders);\n+\n+        ResponseEntity<ExpiringCode> response = authorizationTemplate.exchange(getUaaBaseUrl() + \"/Codes/\" + code,\n+                        HttpMethod.GET,\n+                        requestEntity, ExpiringCode.class);\n+\n+        if (response.getStatusCode().equals(HttpStatus.NOT_FOUND)) {\n+            return null;\n+        } else if (response.getStatusCode() != HttpStatus.OK) {\n+            logger.warn(\"Request failed: \" + requestEntity);\n+            // TODO throw exception with the correct error\n+            throw new BadCredentialsException(\"Unable to retrieve passcode:\" + String.valueOf(response.getStatusCode()));\n+        }\n+\n+        return response.getBody();\n+    }\n+\n+    private Map<String, String> getCredentials(HttpServletRequest request) {\n+        Map<String, String> credentials = new HashMap<String, String>();\n+\n+        for (String paramName : parameterNames) {\n+            String value = request.getParameter(paramName);\n+            if (value != null) {\n+                if (value.startsWith(\"{\")) {\n+                    try {\n+                        Map<String, String> jsonCredentials = mapper.readValue(value,\n+                                        new TypeReference<Map<String, String>>() {\n+                                        });\n+                        credentials.putAll(jsonCredentials);\n+                    } catch (IOException e) {\n+                        logger.warn(\"Unknown format of value for request param: \" + paramName + \". Ignoring.\");\n+                    }\n+                }\n+                else {\n+                    credentials.put(paramName, value);\n+                }\n+            }\n+        }\n+\n+        return credentials;\n+    }\n+\n+    @Override\n+    public void init(FilterConfig filterConfig) throws ServletException {\n+    }\n+\n+    @Override\n+    public void destroy() {\n+    }\n+\n+    public void setParameterNames(List<String> parameterNames) {\n+        this.parameterNames = parameterNames;\n+    }\n+\n+    public PasscodeAuthenticationFilter(AuthenticationManager authenticationManager) {\n+        this.authenticationManager = authenticationManager;\n+    }\n+\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "d535fb8ddf29701b461d15c7a9ae3829dc6721e7",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/PasscodeInformation.java",
            "status": "added",
            "additions": 124,
            "deletions": 0,
            "changes": 124,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FPasscodeInformation.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FPasscodeInformation.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FPasscodeInformation.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,124 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.codehaus.jackson.annotate.JsonCreator;\n+import org.codehaus.jackson.annotate.JsonIgnore;\n+import org.codehaus.jackson.annotate.JsonProperty;\n+\n+//TODO - make object serialize/deserialize properly with JSON\n+public class PasscodeInformation {\n+\n+    private String userId;\n+    private String username;\n+    private String passcode;\n+    private Map<String, Object> authorizationParameters;\n+    private String origin;\n+\n+    public PasscodeInformation(\n+        String userId,\n+        String username,\n+        String passcode,\n+        String origin,\n+        Map<String, Object> authorizationParameters) {\n+\n+        setUserId(userId);\n+        setUsername(username);\n+        setPasscode(passcode);\n+        setAuthorizationParameters(authorizationParameters);\n+        setOrigin(origin);\n+    }\n+\n+    @JsonCreator\n+    public PasscodeInformation(\n+        @JsonProperty(\"userId\") String userId,\n+        @JsonProperty(\"username\") String username,\n+        @JsonProperty(\"passcode\") String passcode,\n+        @JsonProperty(\"origin\") String origin,\n+        @JsonProperty(\"samlAuthorities\") ArrayList<SamlUserAuthority> authorities) {\n+\n+        setUserId(userId);\n+        setUsername(username);\n+        setPasscode(passcode);\n+        authorizationParameters = new LinkedHashMap<String, Object>();\n+        setSamlAuthorities(authorities);\n+        setOrigin(origin);\n+    }\n+\n+    public PasscodeInformation(String username) {\n+        this.username = username;\n+    }\n+\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    public void setUsername(String username) {\n+        this.username = username;\n+    }\n+\n+    @JsonProperty(\"samlAuthorities\")\n+    public ArrayList<SamlUserAuthority> getSamlAuthorities() {\n+        ArrayList<SamlUserAuthority> list = new ArrayList<SamlUserAuthority>();\n+        if (authorizationParameters != null && authorizationParameters.containsKey(\"authorities\")) {\n+            Set<SamlUserAuthority> set = (Set<SamlUserAuthority>) authorizationParameters.get(\"authorities\");\n+            list.addAll(set);\n+        }\n+        return list;\n+    }\n+\n+    public void setSamlAuthorities(ArrayList<SamlUserAuthority> authorities) {\n+        Set<SamlUserAuthority> set = new HashSet<SamlUserAuthority>();\n+        set.addAll(authorities);\n+        authorizationParameters.put(\"authorities\", set);\n+    }\n+\n+    @JsonIgnore\n+    public Map<String, Object> getAuthorizationParameters() {\n+        return authorizationParameters;\n+    }\n+\n+    public void setAuthorizationParameters(Map<String, Object> authorizationParameters) {\n+        this.authorizationParameters = authorizationParameters;\n+    }\n+\n+    public String getPasscode() {\n+        return passcode;\n+    }\n+\n+    public void setPasscode(String passcode) {\n+        this.passcode = passcode;\n+    }\n+\n+    public String getOrigin() {\n+        return origin;\n+    }\n+\n+    public void setOrigin(String origin) {\n+        this.origin = origin;\n+    }\n+\n+    public String getUserId() {\n+        return userId;\n+    }\n+\n+    public void setUserId(String userId) {\n+        this.userId = userId;\n+    }\n+}"
        },
        {
            "sha": "c1620f8d10f03761fe3b989bfff7b7dc36007a68",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/ProfileController.java",
            "status": "added",
            "additions": 97,
            "deletions": 0,
            "changes": 97,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FProfileController.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FProfileController.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FProfileController.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,97 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.cloudfoundry.identity.uaa.authentication.Origin;\n+import org.cloudfoundry.identity.uaa.authentication.UaaPrincipal;\n+import org.cloudfoundry.identity.uaa.oauth.approval.Approval;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * @author Vidya Valmikinathan\n+ */\n+@Controller\n+public class ProfileController {\n+\n+    private final ApprovalsService approvalsService;\n+\n+    @Autowired\n+    public ProfileController(ApprovalsService approvalsService) {\n+        this.approvalsService = approvalsService;\n+    }\n+\n+    /**\n+     * Display the current user's approvals\n+     */\n+    @RequestMapping(value = \"/profile\", method = RequestMethod.GET)\n+    public String get(Authentication authentication, Model model) {\n+        Map<String, List<UaaApprovalsService.DescribedApproval>> approvals = approvalsService.getCurrentApprovalsByClientId();\n+        model.addAttribute(\"approvals\", approvals);\n+        model.addAttribute(\"isUaaManagedUser\", isUaaManagedUser(authentication));\n+        return \"approvals\";\n+    }\n+\n+    /**\n+     * Handle form post for revoking chosen approvals\n+     */\n+    @RequestMapping(value = \"/profile\", method = RequestMethod.POST)\n+    public String post(@RequestParam(required = false) Collection<String> checkedScopes,\n+                       @RequestParam(required = false) String update,\n+                       @RequestParam(required = false) String delete,\n+                       @RequestParam(required = false) String clientId) {\n+\n+        if (null != update) {\n+            Map<String, List<UaaApprovalsService.DescribedApproval>> approvalsByClientId = approvalsService.getCurrentApprovalsByClientId();\n+\n+            List<UaaApprovalsService.DescribedApproval> allApprovals = new ArrayList<UaaApprovalsService.DescribedApproval>();\n+            for (List<UaaApprovalsService.DescribedApproval> clientApprovals : approvalsByClientId.values()) {\n+                allApprovals.addAll(clientApprovals);\n+            }\n+\n+            for (Approval approval : allApprovals) {\n+                String namespacedScope = approval.getClientId() + \"-\" + approval.getScope();\n+                if (checkedScopes != null && checkedScopes.contains(namespacedScope)) {\n+                    approval.setStatus(Approval.ApprovalStatus.APPROVED);\n+                } else {\n+                    approval.setStatus(Approval.ApprovalStatus.DENIED);\n+                }\n+            }\n+\n+            approvalsService.updateApprovals(allApprovals);\n+        }\n+        else if (null != delete) {\n+            approvalsService.deleteApprovalsForClient(clientId);\n+        }\n+\n+        return \"redirect:profile\";\n+    }\n+\n+    private boolean isUaaManagedUser(Authentication authentication) {\n+        if (authentication.getPrincipal() instanceof UaaPrincipal) {\n+            UaaPrincipal principal = (UaaPrincipal) authentication.getPrincipal();\n+            return Origin.UAA.equals(principal.getOrigin());\n+        }\n+        return false;\n+    }\n+}"
        },
        {
            "sha": "bfdadac4993ef5a10f10a476b518d712939f4eb6",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/ResetPasswordController.java",
            "status": "added",
            "additions": 102,
            "deletions": 0,
            "changes": 102,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FResetPasswordController.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FResetPasswordController.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FResetPasswordController.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,102 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.cloudfoundry.identity.uaa.authentication.Origin;\n+import org.cloudfoundry.identity.uaa.authentication.UaaPrincipal;\n+import org.cloudfoundry.identity.uaa.error.UaaException;\n+import org.cloudfoundry.identity.uaa.user.UaaAuthority;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+import javax.servlet.http.HttpServletResponse;\n+\n+@Controller\n+public class ResetPasswordController {\n+\n+    private final ResetPasswordService resetPasswordService;\n+    private final Pattern emailPattern;\n+\n+    public ResetPasswordController(ResetPasswordService resetPasswordService) {\n+        this.resetPasswordService = resetPasswordService;\n+        emailPattern = Pattern.compile(\"^\\\\S+@\\\\S+\\\\.\\\\S+$\");\n+    }\n+\n+    @RequestMapping(value = \"/forgot_password\", method = RequestMethod.GET)\n+    public String forgotPasswordPage() {\n+        return \"forgot_password\";\n+    }\n+\n+    @RequestMapping(value = \"/forgot_password.do\", method = RequestMethod.POST)\n+    public String forgotPassword(Model model, @RequestParam(\"email\") String email, HttpServletResponse response) {\n+        if (emailPattern.matcher(email).matches()) {\n+            resetPasswordService.forgotPassword(email);\n+            return \"redirect:email_sent?code=reset_password\";\n+        } else {\n+            model.addAttribute(\"message_code\", \"form_error\");\n+            response.setStatus(HttpStatus.UNPROCESSABLE_ENTITY.value());\n+            return \"forgot_password\";\n+        }\n+    }\n+\n+    @RequestMapping(value = \"/email_sent\", method = RequestMethod.GET)\n+    public String emailSentPage(@ModelAttribute(\"code\") String code) {\n+        return \"email_sent\";\n+    }\n+\n+    @RequestMapping(value = \"/reset_password\", method = RequestMethod.GET, params = { \"email\", \"code\" })\n+    public String resetPasswordPage() {\n+        return \"reset_password\";\n+    }\n+\n+    @RequestMapping(value = \"/reset_password.do\", method = RequestMethod.POST)\n+    public String resetPassword(Model model,\n+                                @RequestParam(\"code\") String code,\n+                                @RequestParam(\"email\") String email,\n+                                @RequestParam(\"password\") String password,\n+                                @RequestParam(\"password_confirmation\") String passwordConfirmation,\n+                                HttpServletResponse response) {\n+\n+        ChangePasswordValidation validation = new ChangePasswordValidation(password, passwordConfirmation);\n+        if (!validation.valid()) {\n+            model.addAttribute(\"message_code\", validation.getMessageCode());\n+            model.addAttribute(\"email\", email);\n+            model.addAttribute(\"code\", code);\n+            response.setStatus(HttpStatus.UNPROCESSABLE_ENTITY.value());\n+            return \"reset_password\";\n+        }\n+\n+        try {\n+            Map<String,String> resetResponse = resetPasswordService.resetPassword(code, password);\n+\n+            UaaPrincipal uaaPrincipal = new UaaPrincipal(resetResponse.get(\"user_id\"), resetResponse.get(\"username\"), resetResponse.get(\"username\"), Origin.UAA, null);\n+            UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(uaaPrincipal, null, UaaAuthority.USER_AUTHORITIES);\n+            SecurityContextHolder.getContext().setAuthentication(token);\n+\n+            return \"redirect:home\";\n+        } catch (UaaException e) {\n+            model.addAttribute(\"message_code\", \"bad_code\");\n+            response.setStatus(HttpStatus.UNPROCESSABLE_ENTITY.value());\n+            return \"forgot_password\";\n+        }\n+    }\n+}"
        },
        {
            "sha": "c6d3e608876a8c556f73e2648be0885515ed0a1d",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/ResetPasswordService.java",
            "status": "added",
            "additions": 20,
            "deletions": 0,
            "changes": 20,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FResetPasswordService.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FResetPasswordService.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FResetPasswordService.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,20 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import java.util.Map;\n+\n+public interface ResetPasswordService {\n+    void forgotPassword(String username);\n+    Map<String, String> resetPassword(String code, String password);\n+}"
        },
        {
            "sha": "96086339cfba0531cca4f72d34c5c05e0b10f9c3",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/SamlLoginServerKeyManager.java",
            "status": "added",
            "additions": 134,
            "deletions": 0,
            "changes": 134,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FSamlLoginServerKeyManager.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FSamlLoginServerKeyManager.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FSamlLoginServerKeyManager.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,134 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStreamReader;\n+import java.security.KeyPair;\n+import java.security.KeyStore;\n+import java.security.Security;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+import org.bouncycastle.openssl.PEMReader;\n+import org.bouncycastle.openssl.PasswordFinder;\n+import org.opensaml.xml.security.CriteriaSet;\n+import org.opensaml.xml.security.SecurityException;\n+import org.opensaml.xml.security.credential.Credential;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.saml.key.JKSKeyManager;\n+import org.springframework.security.saml.key.KeyManager;\n+\n+public class SamlLoginServerKeyManager implements KeyManager {\n+\n+    protected final static Logger logger = LoggerFactory.getLogger(SamlLoginServerKeyManager.class);\n+    private JKSKeyManager keyManager = null;\n+\n+    public SamlLoginServerKeyManager(String key, String password, String certificate) {\n+        Security.addProvider(new BouncyCastleProvider());\n+\n+        if (null == password) {\n+            password = \"\";\n+        }\n+\n+        try {\n+            PEMReader reader = new PEMReader(new InputStreamReader(new ByteArrayInputStream(certificate.getBytes())));\n+            X509Certificate cert = (X509Certificate) reader.readObject();\n+\n+            reader = new PEMReader(new InputStreamReader(new ByteArrayInputStream(key.getBytes())),\n+                            new StringPasswordFinder(password));\n+            KeyPair pkey = (KeyPair) reader.readObject();\n+\n+            KeyStore keystore = KeyStore.getInstance(\"JKS\");\n+            keystore.load(null);\n+            keystore.setCertificateEntry(\"service-provider-cert\", cert);\n+            keystore.setKeyEntry(\"service-provider-cert\", pkey.getPrivate(), password.toCharArray(),\n+                            new Certificate[] { cert });\n+\n+            KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n+            kmf.init(keystore, password.toCharArray());\n+\n+            keyManager = new JKSKeyManager(keystore, Collections.singletonMap(\"service-provider-cert\", password),\n+                            \"service-provider-cert\");\n+\n+            if (null == keyManager) {\n+                throw new IllegalArgumentException(\n+                                \"Could not load service provider certificate. Check serviceProviderKey and certificate parameters\");\n+            }\n+\n+            logger.info(\"Loaded service provider certificate \" + keyManager.getDefaultCredentialName());\n+        } catch (Throwable t) {\n+            logger.error(\"Could not load certificate\", t);\n+            throw new IllegalArgumentException(\n+                            \"Could not load service provider certificate. Check serviceProviderKey and certificate parameters\",\n+                            t);\n+        }\n+    }\n+\n+    private class StringPasswordFinder implements PasswordFinder {\n+\n+        private String password = null;\n+\n+        public StringPasswordFinder(String password) {\n+            this.password = password;\n+        }\n+\n+        @Override\n+        public char[] getPassword() {\n+            return password.toCharArray();\n+        }\n+\n+    }\n+\n+    @Override\n+    public Iterable<Credential> resolve(CriteriaSet criteria) throws SecurityException {\n+        return keyManager.resolve(criteria);\n+    }\n+\n+    @Override\n+    public Credential resolveSingle(CriteriaSet criteria) throws SecurityException {\n+        return keyManager.resolveSingle(criteria);\n+    }\n+\n+    @Override\n+    public Credential getCredential(String keyName) {\n+        return keyManager.getCredential(keyName);\n+    }\n+\n+    @Override\n+    public Credential getDefaultCredential() {\n+        return keyManager.getDefaultCredential();\n+    }\n+\n+    @Override\n+    public String getDefaultCredentialName() {\n+        return keyManager.getDefaultCredentialName();\n+    }\n+\n+    @Override\n+    public Set<String> getAvailableCredentials() {\n+        return keyManager.getAvailableCredentials();\n+    }\n+\n+    @Override\n+    public X509Certificate getCertificate(String alias) {\n+        return keyManager.getCertificate(alias);\n+    }\n+\n+}"
        },
        {
            "sha": "0ede539bfce3cd1c7946ff309933450da55fbc43",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/SamlUserAuthority.java",
            "status": "added",
            "additions": 34,
            "deletions": 0,
            "changes": 34,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FSamlUserAuthority.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FSamlUserAuthority.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FSamlUserAuthority.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,34 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.codehaus.jackson.annotate.JsonCreator;\n+import org.codehaus.jackson.annotate.JsonProperty;\n+import org.springframework.security.core.GrantedAuthority;\n+\n+@SuppressWarnings(\"serial\")\n+public class SamlUserAuthority implements GrantedAuthority {\n+\n+    private final String authority;\n+\n+    @JsonCreator\n+    public SamlUserAuthority(@JsonProperty(\"authority\") String authority) {\n+        this.authority = authority;\n+    }\n+\n+    @Override\n+    public String getAuthority() {\n+        return authority;\n+    }\n+\n+}"
        },
        {
            "sha": "f7ec447d7bc79159c2a479c544c24498a8e024b7",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/SamlUserDetails.java",
            "status": "added",
            "additions": 30,
            "deletions": 0,
            "changes": 30,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FSamlUserDetails.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FSamlUserDetails.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FSamlUserDetails.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,30 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import java.util.Collection;\n+\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.userdetails.User;\n+\n+@SuppressWarnings(\"serial\")\n+public class SamlUserDetails extends User {\n+\n+    public SamlUserDetails(String username, String password, boolean enabled, boolean accountNonExpired,\n+                    boolean credentialsNonExpired, boolean accountNonLocked,\n+                    Collection<? extends GrantedAuthority> authorities) {\n+        super(username, password == null ? \"\" : password, enabled, accountNonExpired, credentialsNonExpired,\n+                        accountNonLocked, authorities);\n+    }\n+\n+}"
        },
        {
            "sha": "57a69cb2b9f1134aa19feaba4e9a7c9102c2d1b9",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/SavedRequestAwareAuthenticationDetails.java",
            "status": "added",
            "additions": 60,
            "deletions": 0,
            "changes": 60,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FSavedRequestAwareAuthenticationDetails.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FSavedRequestAwareAuthenticationDetails.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FSavedRequestAwareAuthenticationDetails.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,60 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.springframework.security.web.authentication.WebAuthenticationDetails;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpSession;\n+import java.io.Serializable;\n+\n+public class SavedRequestAwareAuthenticationDetails extends WebAuthenticationDetails implements Serializable {\n+\n+    private static final long serialVersionUID = 3801124242820219132L;\n+\n+    private Object savedRequest;\n+\n+    public SavedRequestAwareAuthenticationDetails(HttpServletRequest request) {\n+        super(request);\n+\n+        HttpSession session = request.getSession(false);\n+        if (session != null) {\n+            savedRequest = session.getAttribute(\"SPRING_SECURITY_SAVED_REQUEST\");\n+        }\n+    }\n+\n+    public Object getSavedRequest() {\n+        return savedRequest;\n+    }\n+\n+    public void setSavedRequest(Object savedRequest) {\n+        this.savedRequest = savedRequest;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (!(o instanceof SavedRequestAwareAuthenticationDetails)) return false;\n+        if (!super.equals(o)) return false;\n+\n+        SavedRequestAwareAuthenticationDetails that = (SavedRequestAwareAuthenticationDetails) o;\n+\n+        if (savedRequest != null ? !savedRequest.equals(that.savedRequest) : that.savedRequest != null) return false;\n+\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int result = super.hashCode();\n+        result = 31 * result + (savedRequest != null ? savedRequest.hashCode() : 0);\n+        return result;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(super.toString()).append(\": \");\n+        sb.append(\"SavedRequest: \").append(this.getSavedRequest());\n+\n+        return sb.toString();\n+    }\n+}"
        },
        {
            "sha": "37dc0e307f1a5002ee3daff332cfaa3ea59c64f8",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/SavedRequestAwareAuthenticationDetailsSource.java",
            "status": "added",
            "additions": 12,
            "deletions": 0,
            "changes": 12,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FSavedRequestAwareAuthenticationDetailsSource.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FSavedRequestAwareAuthenticationDetailsSource.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FSavedRequestAwareAuthenticationDetailsSource.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,12 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.springframework.security.authentication.AuthenticationDetailsSource;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+public class SavedRequestAwareAuthenticationDetailsSource implements AuthenticationDetailsSource<HttpServletRequest, SavedRequestAwareAuthenticationDetails> {\n+    @Override\n+    public SavedRequestAwareAuthenticationDetails buildDetails(HttpServletRequest context) {\n+        return new SavedRequestAwareAuthenticationDetails(context);\n+    }\n+}"
        },
        {
            "sha": "c8c8317d95e062ec1746c8040e21a2fce0847459",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/TileInfo.java",
            "status": "added",
            "additions": 42,
            "deletions": 0,
            "changes": 42,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FTileInfo.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FTileInfo.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FTileInfo.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,42 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.env.Environment;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class TileInfo {\n+\n+    private ArrayList<LinkedHashMap<String,String>> tiles;\n+\n+    @Autowired\n+    public TileInfo(Environment environment) {\n+        tiles = environment.getProperty(\"tiles\", ArrayList.class, new ArrayList<LinkedHashMap<String,String>>());\n+    }\n+\n+    public List<Map<String,String>> getLoginTiles() {\n+        List<Map<String,String>> loginTiles = new ArrayList<>();\n+        for (Map<String,String> tile : tiles) {\n+            if (!StringUtils.isEmpty(tile.get(\"login-link\"))) {\n+                loginTiles.add(tile);\n+            }\n+        }\n+        return loginTiles;\n+    }\n+}"
        },
        {
            "sha": "7d5baa5cb9921d779af856d765f06cef5da7f94a",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/UaaApprovalsService.java",
            "status": "added",
            "additions": 108,
            "deletions": 0,
            "changes": 108,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FUaaApprovalsService.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FUaaApprovalsService.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FUaaApprovalsService.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,108 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.cloudfoundry.identity.uaa.oauth.approval.Approval;\n+import org.codehaus.jackson.annotate.JsonIgnore;\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.client.RestOperations;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class UaaApprovalsService implements ApprovalsService {\n+\n+    private final Log logger = LogFactory.getLog(getClass());\n+\n+    private final RestOperations restTemplate;\n+    private final String approvalsUrl;\n+\n+    public UaaApprovalsService(RestOperations restTemplate, String approvalsUrl) {\n+        this.restTemplate = restTemplate;\n+        this.approvalsUrl = approvalsUrl;\n+    }\n+\n+    @Override\n+    public Map<String, List<DescribedApproval>> getCurrentApprovalsByClientId() {\n+        Map<String, List<DescribedApproval>> result = new HashMap<>();\n+        ResponseEntity<Set<DescribedApproval>> approvalsResponse = restTemplate.exchange(approvalsUrl, HttpMethod.GET, null, new ParameterizedTypeReference<Set<DescribedApproval>>() {});\n+        Set<DescribedApproval> approvals = approvalsResponse.getBody();\n+\n+        for (DescribedApproval approval : approvals) {\n+            List<DescribedApproval> clientApprovals = result.get(approval.getClientId());\n+            if (clientApprovals == null) {\n+                clientApprovals = new ArrayList<>();\n+                result.put(approval.getClientId(), clientApprovals);\n+            }\n+\n+            String scope = approval.getScope();\n+            if (!scope.contains(\".\")) {\n+                approval.setDescription(\"Access your data with scope '\" + scope + \"'\");\n+                clientApprovals.add(approval);\n+            } else {\n+                String resource = scope.substring(0, scope.lastIndexOf(\".\"));\n+                if (\"uaa\".equals(resource)) {\n+                    // special case: don't need to prompt for internal uaa\n+                    // scopes\n+                    continue;\n+                }\n+                String access = scope.substring(scope.lastIndexOf(\".\") + 1);\n+                approval.setDescription(\"Access your '\" + resource + \"' resources with scope '\" + access + \"'\");\n+                clientApprovals.add(approval);\n+            }\n+        }\n+        for (List<DescribedApproval> approvalList : result.values()) {\n+            Collections.sort(approvalList, new Comparator<DescribedApproval>() {\n+                @Override\n+                public int compare(DescribedApproval o1, DescribedApproval o2) {\n+                    return o1.getScope().compareTo(o2.getScope());\n+                }\n+            });\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public void updateApprovals(List<DescribedApproval> approvals) {\n+        restTemplate.put(approvalsUrl, approvals);\n+    }\n+\n+    @Override\n+    public void deleteApprovalsForClient(String clientId) {\n+        ResponseEntity<String> response = restTemplate.exchange(approvalsUrl + \"?clientId=\" + clientId,\n+                HttpMethod.DELETE, null, String.class);\n+        logger.debug(\"Delete approvals request for client \" + clientId + \" resulted in \" + response);\n+    }\n+\n+    public static class DescribedApproval extends Approval {\n+        private String description;\n+\n+        @JsonIgnore\n+        public String getDescription() {\n+            return description;\n+        }\n+\n+        public void setDescription(String description) {\n+            this.description = description;\n+        }\n+    }\n+}"
        },
        {
            "sha": "7fc893acc157b3c30c9ed36c0dec7d56249b5626",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/UaaChangePasswordService.java",
            "status": "added",
            "additions": 39,
            "deletions": 0,
            "changes": 39,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FUaaChangePasswordService.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FUaaChangePasswordService.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FUaaChangePasswordService.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,39 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class UaaChangePasswordService implements ChangePasswordService {\n+\n+    private final RestTemplate uaaTemplate;\n+    private final String uaaBaseUrl;\n+\n+    public UaaChangePasswordService(RestTemplate authorizationTemplate, String uaaBaseUrl) {\n+        this.uaaTemplate = authorizationTemplate;\n+        this.uaaBaseUrl = uaaBaseUrl;\n+    }\n+\n+    @Override\n+    public void changePassword(String username, String currentPassword, String newPassword) {\n+        Map<String, String> formData = new HashMap<String, String>();\n+        formData.put(\"username\", username);\n+        formData.put(\"current_password\", currentPassword);\n+        formData.put(\"new_password\", newPassword);\n+\n+        uaaTemplate.postForObject(uaaBaseUrl + \"/password_change\", formData, String.class);\n+    }\n+}"
        },
        {
            "sha": "f8b11b77d044fbc952dd5f51b33cc2766c8809ba",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/UaaExpiringCodeService.java",
            "status": "added",
            "additions": 59,
            "deletions": 0,
            "changes": 59,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FUaaExpiringCodeService.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FUaaExpiringCodeService.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FUaaExpiringCodeService.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,59 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import java.io.IOException;\n+import java.sql.Timestamp;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.cloudfoundry.identity.uaa.codestore.ExpiringCode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.codehaus.jackson.type.TypeReference;\n+\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.RestTemplate;\n+\n+@Component\n+public class UaaExpiringCodeService implements ExpiringCodeService {\n+    \n+    private RestTemplate uaaTemplate;\n+    \n+    private ObjectMapper objectMapper = new ObjectMapper();\n+    \n+    private String uaaBaseUrl;\n+\n+    public UaaExpiringCodeService(RestTemplate uaaTemplate, String uaaBaseUrl) {\n+        this.uaaTemplate = uaaTemplate;\n+        this.uaaBaseUrl = uaaBaseUrl;\n+    }\n+\n+    @Override\n+    public String generateCode(Object data, int expiryTime, TimeUnit timeUnit) throws IOException {\n+        Timestamp expiry = new Timestamp(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(expiryTime, timeUnit));\n+        String dataJsonString = objectMapper.writeValueAsString(data);\n+        ExpiringCode expiringCode = new ExpiringCode(null, expiry, dataJsonString);\n+        expiringCode = uaaTemplate.postForObject(uaaBaseUrl + \"/Codes\", expiringCode, ExpiringCode.class);\n+        return expiringCode.getCode();\n+    }\n+\n+    @Override\n+    public <T> T verifyCode(Class<T> clazz, String code) throws IOException, CodeNotFoundException {\n+        try {\n+            ExpiringCode expiringCode = uaaTemplate.getForObject(uaaBaseUrl + \"/Codes/\"+ code, ExpiringCode.class);\n+            return objectMapper.readValue(expiringCode.getData(), clazz);\n+        } catch (HttpClientErrorException e) {\n+            throw new CodeNotFoundException();\n+        }\n+    }\n+    \n+    @Override\n+    public Map<String,String> verifyCode(String code) throws IOException, CodeNotFoundException {\n+        try {\n+            ExpiringCode expiringCode = uaaTemplate.getForObject(uaaBaseUrl + \"/Codes/\"+ code, ExpiringCode.class);\n+            return objectMapper.readValue(expiringCode.getData(), new TypeReference<Map<String,String>>() {});\n+        } catch (HttpClientErrorException e) {\n+            throw new CodeNotFoundException();\n+        }\n+    }\n+\n+}"
        },
        {
            "sha": "171a0cf8cb5cec35e2d190c81d5ca9c7983a62f3",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/UsernamePasswordExtractingAuthenticationManager.java",
            "status": "added",
            "additions": 66,
            "deletions": 0,
            "changes": 66,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FUsernamePasswordExtractingAuthenticationManager.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FUsernamePasswordExtractingAuthenticationManager.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FUsernamePasswordExtractingAuthenticationManager.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,66 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.AuthenticationException;\n+\n+/**\n+ * Authentication filter translating a generic Authentication into a\n+ * UsernamePasswordAuthenticationToken.\n+ * \n+ * @author Dave Syer\n+ * \n+ */\n+public class UsernamePasswordExtractingAuthenticationManager implements AuthenticationManager {\n+\n+    protected final Log logger = LogFactory.getLog(getClass());\n+\n+    private final AuthenticationManager delegate;\n+\n+    /**\n+     * @param delegate\n+     */\n+    public UsernamePasswordExtractingAuthenticationManager(AuthenticationManager delegate) {\n+        super();\n+        this.delegate = delegate;\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     * @see org.springframework.security.authentication.AuthenticationManager#\n+     * authenticate(org.springframework.security.core.Authentication)\n+     */\n+    @Override\n+    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n+        if (authentication == null) {\n+            return authentication;\n+        }\n+        UsernamePasswordAuthenticationToken output = null;\n+        if (authentication instanceof UsernamePasswordAuthenticationToken) {\n+            output = (UsernamePasswordAuthenticationToken) authentication;\n+        } else {\n+            output = new UsernamePasswordAuthenticationToken(authentication, authentication.getCredentials(),\n+                            authentication.getAuthorities());\n+            output.setAuthenticated(authentication.isAuthenticated());\n+            output.setDetails(authentication.getDetails());\n+        }\n+        return delegate.authenticate(output);\n+    }\n+\n+}"
        },
        {
            "sha": "8f415eae993149f4d8818e97c40fc506b8849a0d",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/saml/IdentityProviderConfigurator.java",
            "status": "added",
            "additions": 272,
            "deletions": 0,
            "changes": 272,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Fsaml%2FIdentityProviderConfigurator.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Fsaml%2FIdentityProviderConfigurator.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Fsaml%2FIdentityProviderConfigurator.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,272 @@\n+/*******************************************************************************\n+ *     Cloud Foundry\n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.saml;\n+\n+import org.apache.commons.httpclient.HttpClient;\n+import org.apache.commons.httpclient.protocol.ProtocolSocketFactory;\n+import org.cloudfoundry.identity.uaa.login.ConfigMetadataProvider;\n+import org.cloudfoundry.identity.uaa.login.ssl.FixedHttpMetaDataProvider;\n+import org.cloudfoundry.identity.uaa.login.util.FileLocator;\n+import org.opensaml.saml2.metadata.provider.FilesystemMetadataProvider;\n+import org.opensaml.saml2.metadata.provider.MetadataProviderException;\n+import org.opensaml.xml.parse.BasicParserPool;\n+import org.springframework.security.saml.metadata.ExtendedMetadata;\n+import org.springframework.security.saml.metadata.ExtendedMetadataDelegate;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.Timer;\n+\n+public class IdentityProviderConfigurator {\n+\n+\n+    private String legacyIdpIdentityAlias;\n+    private String legacyIdpMetaData;\n+    private String legacyNameId;\n+    private int legacyAssertionConsumerIndex;\n+    private boolean legacyMetadataTrustCheck = true;\n+    private boolean legacyShowSamlLink = true;\n+    private List<IdentityProviderDefinition> identityProviders = new LinkedList<>();\n+    private Timer metadataFetchingHttpClientTimer;\n+    private HttpClient httpClient;\n+    private BasicParserPool parserPool;\n+\n+    public List<IdentityProviderDefinition> getIdentityProviderDefinitions() {\n+        List<IdentityProviderDefinition> providerDefinitions = new LinkedList<>(identityProviders);\n+        if (getLegacyIdpMetaData()!=null) {\n+            IdentityProviderDefinition def = new IdentityProviderDefinition();\n+            def.setMetaDataLocation(getLegacyIdpMetaData());\n+            def.setMetadataTrustCheck(isLegacyMetadataTrustCheck());\n+            def.setNameID(getLegacyNameId());\n+            def.setAssertionConsumerIndex(getLegacyAssertionConsumerIndex());\n+            String alias = getLegacyIdpIdentityAlias();\n+            if (alias==null) {\n+                throw new IllegalArgumentException(\"Invalid IDP - Alias must be not null for deprecated IDP.\");\n+            }\n+            def.setIdpEntityAlias(alias);\n+            def.setShowSamlLink(isLegacyShowSamlLink());\n+            def.setLinkText(\"Use your corporate credentials\");\n+            providerDefinitions.add(def);\n+        }\n+        Set<String> uniqueAlias = new HashSet<>();\n+        for (IdentityProviderDefinition def : providerDefinitions) {\n+            String alias = def.getIdpEntityAlias();\n+            if (uniqueAlias.contains(alias)) {\n+                throw new IllegalStateException(\"Duplicate IDP alias found:\"+alias);\n+            }\n+            uniqueAlias.add(alias);\n+        }\n+        return providerDefinitions;\n+    }\n+\n+    public List<ExtendedMetadataDelegate> getIdentityProviders() {\n+\n+        List<ExtendedMetadataDelegate> result = new LinkedList<>();\n+        for (IdentityProviderDefinition def : getIdentityProviderDefinitions()) {\n+            switch (def.getType()) {\n+                case DATA: {\n+                    result.add(configureXMLMetadata(def));\n+                    break;\n+                }\n+                case FILE: {\n+                    result.add(configureFileMetadata(def));\n+                    break;\n+                }\n+                case URL: {\n+                    result.add(configureURLMetadata(def));\n+                    break;\n+                }\n+                default: {\n+                    throw new IllegalArgumentException(\"Invalid metadata type for alias[\"+def.getIdpEntityAlias()+\"]:\"+def.getMetaDataLocation());\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+\n+    protected ExtendedMetadataDelegate configureXMLMetadata(IdentityProviderDefinition def) {\n+        ConfigMetadataProvider configMetadataProvider = new ConfigMetadataProvider(def.getMetaDataLocation());\n+        configMetadataProvider.setParserPool(getParserPool());\n+        ExtendedMetadata extendedMetadata = new ExtendedMetadata();\n+        extendedMetadata.setLocal(false);\n+        extendedMetadata.setAlias(def.getIdpEntityAlias());\n+        ExtendedMetadataDelegate delegate = new ExtendedMetadataDelegate(configMetadataProvider, extendedMetadata);\n+        delegate.setMetadataTrustCheck(def.isMetadataTrustCheck());\n+\n+        return delegate;\n+    }\n+\n+    protected ExtendedMetadataDelegate configureFileMetadata(IdentityProviderDefinition def) {\n+        try {\n+            File metadataFile = FileLocator.locate(def.getMetaDataLocation());\n+            FilesystemMetadataProvider filesystemMetadataProvider = new FilesystemMetadataProvider(metadataFile);\n+            filesystemMetadataProvider.setParserPool(getParserPool());\n+            ExtendedMetadata extendedMetadata = new ExtendedMetadata();\n+            extendedMetadata.setAlias(def.getIdpEntityAlias());\n+            extendedMetadata.setLocal(false);\n+            ExtendedMetadataDelegate delegate = new ExtendedMetadataDelegate(filesystemMetadataProvider, extendedMetadata);\n+            delegate.setMetadataTrustCheck(def.isMetadataTrustCheck());\n+            return delegate;\n+        } catch (MetadataProviderException e) {\n+            throw new IllegalArgumentException(\"Invalid metadata for alias[\"+def.getIdpEntityAlias()+\"]:\"+def.getMetaDataLocation());\n+        } catch (IOException e) {\n+            throw new IllegalArgumentException(\"Invalid metadata file for alias[\"+def.getIdpEntityAlias()+\"]:\"+def.getMetaDataLocation());\n+        }\n+\n+    }\n+\n+    protected ExtendedMetadataDelegate configureURLMetadata(IdentityProviderDefinition def) {\n+        Class<ProtocolSocketFactory> socketFactory = null;\n+        try {\n+            socketFactory = (Class<ProtocolSocketFactory>) Class.forName(def.getSocketFactoryClassName());\n+            ExtendedMetadata extendedMetadata = new ExtendedMetadata();\n+            extendedMetadata.setAlias(def.getIdpEntityAlias());\n+            FixedHttpMetaDataProvider fixedHttpMetaDataProvider = new FixedHttpMetaDataProvider(getMetadataFetchingHttpClientTimer(), getHttpClient(), def.getMetaDataLocation());\n+            fixedHttpMetaDataProvider.setParserPool(getParserPool());\n+            fixedHttpMetaDataProvider.setSocketFactory(socketFactory.newInstance());\n+            ExtendedMetadataDelegate delegate = new ExtendedMetadataDelegate(fixedHttpMetaDataProvider, extendedMetadata);\n+            delegate.setMetadataTrustCheck(def.isMetadataTrustCheck());\n+            return delegate;\n+        } catch (ClassNotFoundException e) {\n+            throw new IllegalArgumentException(\"Invalid socket factory:\"+def.getSocketFactoryClassName(), e);\n+        } catch (InstantiationException e) {\n+            throw new IllegalArgumentException(\"Invalid socket factory:\"+def.getSocketFactoryClassName(), e);\n+        } catch (IllegalAccessException e) {\n+            throw new IllegalArgumentException(\"Invalid socket factory:\"+def.getSocketFactoryClassName(), e);\n+        } catch (MetadataProviderException e) {\n+            throw new IllegalArgumentException(\"Invalid meta data\", e);\n+        }\n+    }\n+\n+    public void setIdentityProviders(Map<String, Map<String, Object>> providers) {\n+        identityProviders.clear();\n+        if (providers == null) {\n+            return;\n+        }\n+\n+        for (Map.Entry entry : providers.entrySet()) {\n+            String alias = (String)entry.getKey();\n+            Map<String, Object> saml = (Map<String, Object>)entry.getValue();\n+            String metaDataLocation = (String)saml.get(\"idpMetadata\");\n+            String nameID = (String)saml.get(\"nameID\");\n+            Integer assertionIndex = (Integer)saml.get(\"assertionConsumerIndex\");\n+            Boolean trustCheck = (Boolean)saml.get(\"metadataTrustCheck\");\n+            Boolean showLink = (Boolean)((Map)entry.getValue()).get(\"showSamlLoginLink\");\n+            String socketFactoryClassName = (String)saml.get(\"socketFactoryClassName\");\n+            String linkText = (String)((Map)entry.getValue()).get(\"linkText\");\n+            String iconUrl  = (String)((Map)entry.getValue()).get(\"iconUrl\");\n+            IdentityProviderDefinition def = new IdentityProviderDefinition();\n+            if (alias==null) {\n+                throw new IllegalArgumentException(\"Invalid IDP - alias must not be null [\"+metaDataLocation+\"]\");\n+            }\n+            if (metaDataLocation==null) {\n+                throw new IllegalArgumentException(\"Invalid IDP - metaDataLocation must not be null [\"+alias+\"]\");\n+            }\n+            def.setIdpEntityAlias(alias);\n+            def.setAssertionConsumerIndex(assertionIndex==null?0:assertionIndex);\n+            def.setMetaDataLocation(metaDataLocation);\n+            def.setNameID(nameID);\n+            def.setMetadataTrustCheck(trustCheck==null?true:trustCheck);\n+            def.setShowSamlLink(showLink==null?true:showLink);\n+            def.setSocketFactoryClassName(socketFactoryClassName);\n+            def.setLinkText(linkText);\n+            def.setIconUrl(iconUrl);\n+            identityProviders.add(def);\n+        }\n+    }\n+\n+    public String getLegacyIdpIdentityAlias() {\n+        return legacyIdpIdentityAlias;\n+    }\n+\n+    public void setLegacyIdpIdentityAlias(String legacyIdpIdentityAlias) {\n+        if (\"null\".equals(legacyIdpIdentityAlias)) {\n+            this.legacyIdpIdentityAlias = null;\n+        } else {\n+            this.legacyIdpIdentityAlias = legacyIdpIdentityAlias;\n+        }\n+    }\n+\n+    public String getLegacyIdpMetaData() {\n+        return legacyIdpMetaData;\n+    }\n+\n+    public void setLegacyIdpMetaData(String legacyIdpMetaData) {\n+        if (\"null\".equals(legacyIdpMetaData)) {\n+            this.legacyIdpMetaData = null;\n+        } else {\n+            this.legacyIdpMetaData = legacyIdpMetaData;\n+        }\n+    }\n+\n+    public String getLegacyNameId() {\n+        return legacyNameId;\n+    }\n+\n+    public void setLegacyNameId(String legacyNameId) {\n+        this.legacyNameId = legacyNameId;\n+    }\n+\n+    public int getLegacyAssertionConsumerIndex() {\n+        return legacyAssertionConsumerIndex;\n+    }\n+\n+    public void setLegacyAssertionConsumerIndex(int legacyAssertionConsumerIndex) {\n+        this.legacyAssertionConsumerIndex = legacyAssertionConsumerIndex;\n+    }\n+\n+    public boolean isLegacyMetadataTrustCheck() {\n+        return legacyMetadataTrustCheck;\n+    }\n+\n+    public void setLegacyMetadataTrustCheck(boolean legacyMetadataTrustCheck) {\n+        this.legacyMetadataTrustCheck = legacyMetadataTrustCheck;\n+    }\n+\n+    public Timer getMetadataFetchingHttpClientTimer() {\n+        return metadataFetchingHttpClientTimer;\n+    }\n+\n+    public void setMetadataFetchingHttpClientTimer(Timer metadataFetchingHttpClientTimer) {\n+        this.metadataFetchingHttpClientTimer = metadataFetchingHttpClientTimer;\n+    }\n+\n+    public HttpClient getHttpClient() {\n+        return httpClient;\n+    }\n+\n+    public void setHttpClient(HttpClient httpClient) {\n+        this.httpClient = httpClient;\n+    }\n+\n+    public BasicParserPool getParserPool() {\n+        return parserPool;\n+    }\n+\n+    public void setParserPool(BasicParserPool parserPool) {\n+        this.parserPool = parserPool;\n+    }\n+\n+    public boolean isLegacyShowSamlLink() {\n+        return legacyShowSamlLink;\n+    }\n+\n+    public void setLegacyShowSamlLink(boolean legacyShowSamlLink) {\n+        this.legacyShowSamlLink = legacyShowSamlLink;\n+    }\n+}"
        },
        {
            "sha": "3e875bea04bfc73a25a797865f65bcc53dccbbbb",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/saml/IdentityProviderDefinition.java",
            "status": "added",
            "additions": 163,
            "deletions": 0,
            "changes": 163,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Fsaml%2FIdentityProviderDefinition.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Fsaml%2FIdentityProviderDefinition.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Fsaml%2FIdentityProviderDefinition.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,163 @@\n+/*******************************************************************************\n+ *     Cloud Foundry\n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.saml;\n+\n+import org.apache.commons.httpclient.protocol.ProtocolSocketFactory;\n+import org.cloudfoundry.identity.uaa.login.util.FileLocator;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+public class IdentityProviderDefinition {\n+\n+    public static enum MetadataLocation {\n+        URL,\n+        FILE,\n+        DATA,\n+        UNKNOWN\n+    };\n+\n+    private String metaDataLocation;\n+    private String idpEntityAlias;\n+    private String nameID;\n+    private int assertionConsumerIndex;\n+    private boolean metadataTrustCheck;\n+    private boolean showSamlLink;\n+    private String socketFactoryClassName;\n+    private String linkText;\n+    private String iconUrl;\n+\n+    public MetadataLocation getType() {\n+        if (metaDataLocation.startsWith(\"<?xml\")) {\n+            return MetadataLocation.DATA;\n+        } else if (metaDataLocation.startsWith(\"http\")) {\n+            return MetadataLocation.URL;\n+        } else {\n+            try {\n+                File f = FileLocator.locate(metaDataLocation);\n+                if (f.exists() && f.canRead()) {\n+                    return MetadataLocation.FILE;\n+                }\n+            } catch (IOException x) {\n+                //file not found\n+            }\n+            return MetadataLocation.UNKNOWN;\n+        }\n+    }\n+\n+    public String getMetaDataLocation() {\n+        return metaDataLocation;\n+    }\n+\n+    public void setMetaDataLocation(String metaDataLocation) {\n+        this.metaDataLocation = metaDataLocation;\n+    }\n+\n+    public String getIdpEntityAlias() {\n+        return idpEntityAlias;\n+    }\n+\n+    public void setIdpEntityAlias(String idpEntityAlias) {\n+        if (idpEntityAlias==null) {\n+            throw new NullPointerException(\"Alias can not be null\");\n+        }\n+\n+        this.idpEntityAlias = idpEntityAlias;\n+    }\n+\n+    public String getNameID() {\n+        return nameID;\n+    }\n+\n+    public void setNameID(String nameID) {\n+        this.nameID = nameID;\n+    }\n+\n+    public int getAssertionConsumerIndex() {\n+        return assertionConsumerIndex;\n+    }\n+\n+    public void setAssertionConsumerIndex(int assertionConsumerIndex) {\n+        this.assertionConsumerIndex = assertionConsumerIndex;\n+    }\n+\n+    public boolean isMetadataTrustCheck() {\n+        return metadataTrustCheck;\n+    }\n+\n+    public void setMetadataTrustCheck(boolean metadataTrustCheck) {\n+        this.metadataTrustCheck = metadataTrustCheck;\n+    }\n+\n+    public boolean isShowSamlLink() {\n+        return showSamlLink;\n+    }\n+\n+    public void setShowSamlLink(boolean showSamlLink) {\n+        this.showSamlLink = showSamlLink;\n+    }\n+\n+    public String getSocketFactoryClassName() {\n+        if (socketFactoryClassName!=null && socketFactoryClassName.trim().length()>0) {\n+            return socketFactoryClassName;\n+        }\n+\n+\n+        if (getMetaDataLocation()==null || getMetaDataLocation().trim().length()==0) {\n+            throw new IllegalStateException(\"Invalid meta data URL[\" + getMetaDataLocation() + \"] cannot determine socket factory.\");\n+        }\n+        if (getMetaDataLocation().startsWith(\"https\")) {\n+            return \"org.apache.commons.httpclient.contrib.ssl.EasySSLProtocolSocketFactory\";\n+        } else {\n+            return \"org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory\";\n+        }\n+    }\n+\n+    public void setSocketFactoryClassName(String socketFactoryClassName) {\n+        this.socketFactoryClassName = socketFactoryClassName;\n+        if (socketFactoryClassName!=null && socketFactoryClassName.trim().length()>0) {\n+            try {\n+                ProtocolSocketFactory test = (ProtocolSocketFactory)Class.forName(\n+                    socketFactoryClassName,\n+                    true,\n+                    Thread.currentThread().getContextClassLoader()\n+                ).newInstance();\n+            } catch (InstantiationException e) {\n+                throw new IllegalArgumentException(e);\n+            } catch (IllegalAccessException e) {\n+                throw new IllegalArgumentException(e);\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalArgumentException(e);\n+            } catch (ClassCastException e) {\n+                throw new IllegalArgumentException(e);\n+            }\n+        }\n+    }\n+\n+    public String getLinkText() {\n+        return linkText;\n+    }\n+\n+    public void setLinkText(String linkText) {\n+        this.linkText = linkText;\n+    }\n+\n+    public String getIconUrl() {\n+        return iconUrl;\n+    }\n+\n+    public void setIconUrl(String iconUrl) {\n+        this.iconUrl = iconUrl;\n+    }\n+\n+}"
        },
        {
            "sha": "42bc1aed90e5f84a0edbf26eca275b37e049f316",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/saml/LoginSamlAuthenticationProvider.java",
            "status": "added",
            "additions": 53,
            "deletions": 0,
            "changes": 53,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Fsaml%2FLoginSamlAuthenticationProvider.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Fsaml%2FLoginSamlAuthenticationProvider.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Fsaml%2FLoginSamlAuthenticationProvider.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,53 @@\n+/*******************************************************************************\n+ *     Cloud Foundry\n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.saml;\n+\n+\n+import org.cloudfoundry.identity.uaa.authentication.UaaPrincipal;\n+import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.providers.ExpiringUsernameAuthenticationToken;\n+import org.springframework.security.saml.SAMLAuthenticationProvider;\n+import org.springframework.security.saml.SAMLAuthenticationToken;\n+import org.springframework.security.saml.context.SAMLMessageContext;\n+\n+public class LoginSamlAuthenticationProvider extends SAMLAuthenticationProvider {\n+\n+    private AuthenticationManager authenticationManager;\n+\n+    public AuthenticationManager getAuthenticationManager() {\n+        return authenticationManager;\n+    }\n+\n+    public void setAuthenticationManager(AuthenticationManager authenticationManager) {\n+        this.authenticationManager = authenticationManager;\n+    }\n+\n+    @Override\n+    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n+        if (!supports(authentication.getClass())) {\n+            throw new IllegalArgumentException(\"Only SAMLAuthenticationToken is supported, \" + authentication.getClass() + \" was attempted\");\n+        }\n+        SAMLAuthenticationToken token = (SAMLAuthenticationToken) authentication;\n+        SAMLMessageContext context = token.getCredentials();\n+        String alias = context.getPeerExtendedMetadata().getAlias();\n+        ExpiringUsernameAuthenticationToken result = (ExpiringUsernameAuthenticationToken)super.authenticate(authentication);\n+        LoginSamlAuthenticationToken samlAuthenticationToken = new LoginSamlAuthenticationToken(result, alias);\n+        UaaPrincipal principal = new UaaPrincipal(\"NaN\", result.getName(), null, alias, result.getName());\n+        getAuthenticationManager().authenticate(new UsernamePasswordAuthenticationToken(principal, null, result.getAuthorities()));\n+        //TODO - Consolidate the different authentication objects we actually store in memory\n+        return samlAuthenticationToken;\n+    }\n+}"
        },
        {
            "sha": "d649643da580f0061b7dc5464a89a476e3c4934d",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/saml/LoginSamlAuthenticationToken.java",
            "status": "added",
            "additions": 32,
            "deletions": 0,
            "changes": 32,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Fsaml%2FLoginSamlAuthenticationToken.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Fsaml%2FLoginSamlAuthenticationToken.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Fsaml%2FLoginSamlAuthenticationToken.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,32 @@\n+/*******************************************************************************\n+ *     Cloud Foundry\n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.saml;\n+\n+import org.springframework.security.providers.ExpiringUsernameAuthenticationToken;\n+\n+import javax.validation.constraints.NotNull;\n+\n+\n+public class LoginSamlAuthenticationToken extends ExpiringUsernameAuthenticationToken {\n+\n+    private final String idpAlias;\n+\n+    public LoginSamlAuthenticationToken(ExpiringUsernameAuthenticationToken token, @NotNull String alias) {\n+        super(token.getTokenExpiration(), token.getPrincipal(), token.getCredentials(), token.getAuthorities());\n+        this.idpAlias = alias;\n+    }\n+\n+    public String getIdpAlias() {\n+        return idpAlias;\n+    }\n+}"
        },
        {
            "sha": "acee7200799377c0020ad3aa5224905d617a4222",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/saml/LoginSamlDiscovery.java",
            "status": "added",
            "additions": 75,
            "deletions": 0,
            "changes": 75,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Fsaml%2FLoginSamlDiscovery.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Fsaml%2FLoginSamlDiscovery.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Fsaml%2FLoginSamlDiscovery.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,75 @@\n+/*******************************************************************************\n+ *     Cloud Foundry\n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.saml;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import java.util.Set;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.opensaml.saml2.metadata.provider.MetadataProviderException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.saml.SAMLDiscovery;\n+import org.springframework.security.saml.SAMLEntryPoint;\n+import org.springframework.security.saml.context.SAMLContextProvider;\n+import org.springframework.security.saml.metadata.ExtendedMetadata;\n+import org.springframework.security.saml.metadata.MetadataManager;\n+\n+public class LoginSamlDiscovery extends SAMLDiscovery {\n+\n+    private static final Log logger = LogFactory.getLog(LoginSamlDiscovery.class);\n+\n+    private MetadataManager metadata;\n+\n+    @Override\n+    protected String getPassiveIDP(HttpServletRequest request) {\n+        String paramName = request.getParameter(RETURN_ID_PARAM);\n+        //we have received the alias in our request\n+        //so we need to translate that into an entityID\n+        String idpAlias = request.getParameter(paramName==null?\"idp\":paramName);\n+        if ( idpAlias!=null ) {\n+            Set<String> idps = metadata.getIDPEntityNames();\n+            for (String idp : idps) {\n+                try {\n+                    ExtendedMetadata emd = metadata.getExtendedMetadata(idp);\n+                    if (emd!=null && idpAlias.equals(emd.getAlias())) {\n+                        return idp;\n+                    }\n+                } catch (MetadataProviderException e) {\n+                    logger.warn(\"Unable to read extended metadata for alias[\"+idpAlias+\"] IDP[\"+idp+\"]\", e);\n+                }\n+            }\n+        }\n+        return super.getPassiveIDP(request);\n+    }\n+\n+    @Override\n+    @Autowired\n+    public void setMetadata(MetadataManager metadata) {\n+        super.setMetadata(metadata);\n+        this.metadata = metadata;\n+    }\n+\n+    @Override\n+    @Autowired(required = false)\n+    public void setSamlEntryPoint(SAMLEntryPoint samlEntryPoint) {\n+        super.setSamlEntryPoint(samlEntryPoint);\n+    }\n+\n+    @Override\n+    @Autowired\n+    public void setContextProvider(SAMLContextProvider contextProvider) {\n+        super.setContextProvider(contextProvider);\n+    }\n+}"
        },
        {
            "sha": "07fe273f5e6389d6ebe063764812527a0076af91",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/ssl/FixedHttpMetaDataProvider.java",
            "status": "added",
            "additions": 92,
            "deletions": 0,
            "changes": 92,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Fssl%2FFixedHttpMetaDataProvider.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Fssl%2FFixedHttpMetaDataProvider.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Fssl%2FFixedHttpMetaDataProvider.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,92 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+\n+package org.cloudfoundry.identity.uaa.login.ssl;\n+\n+import java.net.URISyntaxException;\n+import java.util.Timer;\n+\n+import org.apache.commons.httpclient.HttpClient;\n+import org.apache.commons.httpclient.protocol.ProtocolSocketFactory;\n+import org.opensaml.saml2.metadata.provider.HTTPMetadataProvider;\n+import org.opensaml.saml2.metadata.provider.MetadataProviderException;\n+\n+/**\n+ * This class works around the problem described in {@link https\n+ * ://issues.apache.org/jira/browse/HTTPCLIENT-646} when a socket factory is set\n+ * on the OpenSAML\n+ * {@link HTTPMetadataProvider#setSocketFactory(ProtocolSocketFactory)} all\n+ * subsequent GET Methods should be executed using a relative URL, otherwise the\n+ * HttpClient\n+ * resets the underlying socket factory.\n+ * \n+ * @author Filip Hanik\n+ * \n+ */\n+public class FixedHttpMetaDataProvider extends HTTPMetadataProvider {\n+\n+    /**\n+     * Track if we have a custom socket factory\n+     */\n+    private boolean socketFactorySet = false;\n+\n+    public FixedHttpMetaDataProvider(Timer backgroundTaskTimer, HttpClient client,\n+                    String metadataURL) throws MetadataProviderException {\n+        super(backgroundTaskTimer, client, metadataURL);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void setSocketFactory(ProtocolSocketFactory newSocketFactory) {\n+        // TODO Auto-generated method stub\n+        super.setSocketFactory(newSocketFactory);\n+        if (newSocketFactory != null) {\n+            socketFactorySet = true;\n+        } else {\n+            socketFactorySet = false;\n+        }\n+    }\n+\n+    /**\n+     * If a custom socket factory has been set, only\n+     * return a relative URL so that the custom factory is retained.\n+     * This works around\n+     * https://issues.apache.org/jira/browse/HTTPCLIENT-646 {@inheritDoc}\n+     */\n+    @Override\n+    public String getMetadataURI() {\n+        if (isSocketFactorySet()) {\n+            java.net.URI uri;\n+            try {\n+                uri = new java.net.URI(super.getMetadataURI());\n+                String result = uri.getPath();\n+                if (uri.getQuery() != null && uri.getQuery().trim().length() > 0) {\n+                    result = result + \"?\" + uri.getQuery();\n+                }\n+                return result;\n+            } catch (URISyntaxException e) {\n+                // this can never happen, satisfy compiler\n+                throw new IllegalArgumentException(e);\n+            }\n+        } else {\n+            return super.getMetadataURI();\n+        }\n+    }\n+\n+    public boolean isSocketFactorySet() {\n+        return socketFactorySet;\n+    }\n+\n+}"
        },
        {
            "sha": "360efc7b3d2ef7c7dee86824a47f6408cb543150",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/util/FileLocator.java",
            "status": "added",
            "additions": 35,
            "deletions": 0,
            "changes": 35,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Futil%2FFileLocator.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Futil%2FFileLocator.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Futil%2FFileLocator.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,35 @@\n+/*******************************************************************************\n+ *     Cloud Foundry\n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.util;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.net.URL;\n+\n+public class FileLocator {\n+\n+    public static File locate(String filename) throws IOException {\n+        File f = new File(filename);\n+        //try file system\n+        if (f.exists()) {\n+            return f;\n+        }\n+        //try classloader\n+        URL url = Thread.currentThread().getContextClassLoader().getResource( filename );\n+        if ( url != null && url.getFile() != null && (new File(url.getFile()).exists()) ) {\n+            return new File(url.getFile());\n+        }\n+        throw new FileNotFoundException( \"Cannot find resource on file system or classpath: '\" + filename + \"'\" );\n+    }\n+}"
        },
        {
            "sha": "d6f274914c0e97c699b1b4a58c930ceab083d0a3",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/util/IndirectBeanCreator.java",
            "status": "added",
            "additions": 22,
            "deletions": 0,
            "changes": 22,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Futil%2FIndirectBeanCreator.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Futil%2FIndirectBeanCreator.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Futil%2FIndirectBeanCreator.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,22 @@\n+/*******************************************************************************\n+ *     Cloud Foundry\n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.util;\n+\n+/**\n+ * @see http://forum.spring.io/forum/spring-projects/container/74457-move-bean-s-class-attribute-value-to-external-properties\n+ */\n+public class IndirectBeanCreator {\n+    public static <T> T getBean(final Class<T> clazz) throws IllegalAccessException, InstantiationException {\n+        return clazz.newInstance();\n+    }\n+}"
        },
        {
            "sha": "e688f002ea494302b75993561c6a1add76b006fe",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/openid2/OpenIdUserDetailsService.java",
            "status": "added",
            "additions": 97,
            "deletions": 0,
            "changes": 97,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fopenid2%2FOpenIdUserDetailsService.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fopenid2%2FOpenIdUserDetailsService.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fopenid2%2FOpenIdUserDetailsService.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,97 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+\n+package org.cloudfoundry.identity.uaa.openid2;\n+\n+import java.util.List;\n+\n+import org.cloudfoundry.identity.uaa.user.UaaUser;\n+import org.springframework.security.core.userdetails.AuthenticationUserDetailsService;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.security.oauth2.common.util.RandomValueStringGenerator;\n+import org.springframework.security.openid.OpenIDAttribute;\n+import org.springframework.security.openid.OpenIDAuthenticationToken;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Custom UserDetailsService which accepts any OpenID user, \"registering\" new\n+ * users in a map so they can be welcomed\n+ * back to the site on subsequent logins.\n+ * \n+ * @author Luke Taylor\n+ * @author Dave Syer\n+ * \n+ * @since 3.1\n+ */\n+public class OpenIdUserDetailsService implements AuthenticationUserDetailsService<OpenIDAuthenticationToken> {\n+\n+    private RandomValueStringGenerator generator = new RandomValueStringGenerator();\n+\n+    /**\n+     * Implementation of {@code AuthenticationUserDetailsService} which allows\n+     * full access to the submitted {@code Authentication} object. Used by the\n+     * OpenIDAuthenticationProvider.\n+     */\n+    @Override\n+    public UserDetails loadUserDetails(OpenIDAuthenticationToken token) {\n+        // String id = token.getIdentityUrl();\n+\n+        String email = null;\n+        String firstName = null;\n+        String lastName = null;\n+        String fullName = null;\n+\n+        List<OpenIDAttribute> attributes = token.getAttributes();\n+\n+        for (OpenIDAttribute attribute : attributes) {\n+            if (attribute.getName().equals(\"email\")) {\n+                email = attribute.getValues().get(0);\n+            }\n+\n+            if (attribute.getName().equals(\"firstname\")) {\n+                firstName = attribute.getValues().get(0);\n+            }\n+\n+            if (attribute.getName().equals(\"lastname\")) {\n+                lastName = attribute.getValues().get(0);\n+            }\n+\n+            if (attribute.getName().equals(\"fullname\")) {\n+                fullName = attribute.getValues().get(0);\n+            }\n+        }\n+\n+        if (firstName == null && StringUtils.hasText(fullName)) {\n+            String[] names = fullName.split(\" \");\n+            firstName = names[0];\n+        }\n+\n+        if (lastName == null && StringUtils.hasText(fullName)) {\n+            String[] names = fullName.split(\" \");\n+            lastName = names.length > 1 ? names[1] : \"User\";\n+        }\n+\n+        if (firstName == null && StringUtils.hasText(email)) {\n+            String[] names = email.split(\"@\");\n+            firstName = names[0];\n+        }\n+\n+        if (lastName == null && StringUtils.hasText(email)) {\n+            String[] names = email.split(\"@\");\n+            lastName = names.length > 1 ? names[1] : \"User\";\n+        }\n+\n+        UaaUser user = new UaaUser(email, generator.generate(), email, firstName, lastName);\n+        return new UaaUserDetails(user);\n+    }\n+}"
        },
        {
            "sha": "620cfd18b8c9d84953f5333601d7ca9c7fb18665",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/openid2/UaaUserDetails.java",
            "status": "added",
            "additions": 44,
            "deletions": 0,
            "changes": 44,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fopenid2%2FUaaUserDetails.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fopenid2%2FUaaUserDetails.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fopenid2%2FUaaUserDetails.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,44 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+\n+package org.cloudfoundry.identity.uaa.openid2;\n+\n+import java.util.List;\n+\n+import org.cloudfoundry.identity.uaa.user.UaaAuthority;\n+import org.cloudfoundry.identity.uaa.user.UaaUser;\n+import org.springframework.security.core.userdetails.User;\n+\n+/**\n+ * User details adapting a {@link UaaUser} instance with a random password and\n+ * all boolean flags set to on.\n+ * \n+ * @author Dave Syer\n+ * \n+ */\n+public class UaaUserDetails extends User {\n+\n+    private static final List<UaaAuthority> DEFAULT_AUTHORITIES = UaaAuthority.USER_AUTHORITIES;\n+\n+    private final UaaUser user;\n+\n+    public UaaUserDetails(UaaUser user) {\n+        super(user.getUsername(), user.getPassword(), true, true, true, true, DEFAULT_AUTHORITIES);\n+        this.user = user;\n+    }\n+\n+    public UaaUser getUser() {\n+        return user;\n+    }\n+\n+}"
        },
        {
            "sha": "6fa08314e9b761bcb2558ba80addd651523e6f77",
            "filename": "login/src/main/java/org/cloudfoundry/identity/web/FixHttpsSchemeRequest.java",
            "status": "added",
            "additions": 74,
            "deletions": 0,
            "changes": 74,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fweb%2FFixHttpsSchemeRequest.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fweb%2FFixHttpsSchemeRequest.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fweb%2FFixHttpsSchemeRequest.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+\n+package org.cloudfoundry.identity.web;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class FixHttpsSchemeRequest extends HttpServletRequestWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(FixHttpsSchemeRequest.class);\n+\n+    @Override\n+    public String getScheme() {\n+        String scheme = super.getScheme();\n+        logger.debug(\"Request X-Forwarded-Proto \" + super.getHeader(\"X-Forwarded-Proto\"));\n+\n+        if (\"http\".equals(scheme) &&\n+                        \"https\".equals(super.getHeader(\"X-Forwarded-Proto\"))) {\n+            scheme = \"https\";\n+        }\n+        return scheme;\n+    }\n+\n+    @Override\n+    public int getServerPort() {\n+        int port = super.getServerPort();\n+        String scheme = super.getScheme();\n+        if (\"http\".equals(scheme) &&\n+                        \"https\".equals(super.getHeader(\"X-Forwarded-Proto\"))) {\n+            port = 443;\n+        }\n+        return port;\n+    }\n+\n+    @Override\n+    public StringBuffer getRequestURL() {\n+        StringBuffer url = new StringBuffer();\n+        String scheme = getScheme();\n+        int port = getServerPort();\n+        if (port < 0) {\n+            port = 80;\n+        }\n+\n+        url.append(scheme);\n+        url.append(\"://\");\n+        url.append(getServerName());\n+        if ((scheme.equals(\"http\") && (port != 80))\n+                        || (scheme.equals(\"https\") && (port != 443))) {\n+            url.append(':');\n+            url.append(port);\n+        }\n+        url.append(getRequestURI());\n+\n+        return url;\n+    }\n+\n+    public FixHttpsSchemeRequest(HttpServletRequest request) {\n+        super(request);\n+    }\n+}"
        },
        {
            "sha": "7d4cf0f01f3a99137cd447d918d8d61b6bc6893f",
            "filename": "login/src/main/java/org/cloudfoundry/identity/web/HttpsHeaderFilter.java",
            "status": "added",
            "additions": 49,
            "deletions": 0,
            "changes": 49,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fweb%2FHttpsHeaderFilter.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fweb%2FHttpsHeaderFilter.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fweb%2FHttpsHeaderFilter.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,49 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+\n+package org.cloudfoundry.identity.web;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class HttpsHeaderFilter implements Filter {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(HttpsHeaderFilter.class);\n+\n+    @Override\n+    public void doFilter(ServletRequest request, ServletResponse response,\n+                    FilterChain chain) throws IOException, ServletException {\n+        FixHttpsSchemeRequest modifiedRequest = new FixHttpsSchemeRequest((HttpServletRequest) request);\n+        chain.doFilter(modifiedRequest, response);\n+    }\n+\n+    @Override\n+    public void init(FilterConfig arg0) throws ServletException {\n+        logger.info(\"Filter inited\");\n+    }\n+\n+    @Override\n+    public void destroy() {\n+    }\n+\n+}"
        },
        {
            "sha": "571fe6c10672283519afa9483f959e55d846e445",
            "filename": "login/src/main/java/org/cloudfoundry/identity/web/NoOpFilter.java",
            "status": "added",
            "additions": 32,
            "deletions": 0,
            "changes": 32,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fweb%2FNoOpFilter.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fweb%2FNoOpFilter.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fweb%2FNoOpFilter.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,32 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.web;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+\n+import org.springframework.web.filter.GenericFilterBean;\n+\n+public class NoOpFilter extends GenericFilterBean {\n+\n+    @Override\n+    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+                    throws IOException, ServletException {\n+        chain.doFilter(request, response);\n+    }\n+\n+}"
        },
        {
            "sha": "21956cf5eb4e88a16db732af55140adc9224702a",
            "filename": "login/src/main/java/org/cloudfoundry/identity/web/Prompt.java",
            "status": "added",
            "additions": 38,
            "deletions": 0,
            "changes": 38,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fweb%2FPrompt.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fweb%2FPrompt.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fweb%2FPrompt.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,38 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.web;\n+\n+/**\n+ * @author Dave Syer\n+ * \n+ */\n+public class Prompt {\n+\n+    private final String name;\n+    private final String text;\n+    private final String type;\n+\n+    public Prompt(String name, String type, String text) {\n+        this.name = name;\n+        this.type = type;\n+        this.text = text;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String[] getDetails() {\n+        return new String[] { type, text };\n+    }\n+}"
        },
        {
            "sha": "31a527031369eabe827891dc0eb11e066f725e2a",
            "filename": "login/src/main/resources/idp.xml",
            "status": "added",
            "additions": 45,
            "deletions": 0,
            "changes": 45,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Fidp.xml",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Fidp.xml",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Fidp.xml?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,45 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n+<EntityDescriptor entityID=\"http://openam.example.com:8181/openam\" xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\">\n+    <IDPSSODescriptor WantAuthnRequestsSigned=\"false\" protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n+        <KeyDescriptor use=\"signing\">\n+            <ds:KeyInfo xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n+                <ds:X509Data>\n+                    <ds:X509Certificate>\n+MIICQDCCAakCBEeNB0swDQYJKoZIhvcNAQEEBQAwZzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNh\n+bGlmb3JuaWExFDASBgNVBAcTC1NhbnRhIENsYXJhMQwwCgYDVQQKEwNTdW4xEDAOBgNVBAsTB09w\n+ZW5TU08xDTALBgNVBAMTBHRlc3QwHhcNMDgwMTE1MTkxOTM5WhcNMTgwMTEyMTkxOTM5WjBnMQsw\n+CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEUMBIGA1UEBxMLU2FudGEgQ2xhcmExDDAK\n+BgNVBAoTA1N1bjEQMA4GA1UECxMHT3BlblNTTzENMAsGA1UEAxMEdGVzdDCBnzANBgkqhkiG9w0B\n+AQEFAAOBjQAwgYkCgYEArSQc/U75GB2AtKhbGS5piiLkmJzqEsp64rDxbMJ+xDrye0EN/q1U5Of+\n+RkDsaN/igkAvV1cuXEgTL6RlafFPcUX7QxDhZBhsYF9pbwtMzi4A4su9hnxIhURebGEmxKW9qJNY\n+Js0Vo5+IgjxuEWnjnnVgHTs1+mq5QYTA7E6ZyL8CAwEAATANBgkqhkiG9w0BAQQFAAOBgQB3Pw/U\n+QzPKTPTYi9upbFXlrAKMwtFf2OW4yvGWWvlcwcNSZJmTJ8ARvVYOMEVNbsT4OFcfu2/PeYoAdiDA\n+cGy/F2Zuj8XJJpuQRSE6PtQqBuDEHjjmOQJ0rV/r8mO1ZCtHRhpZ5zYRjhRC9eCbjx9VrFax0JDC\n+/FfwWigmrW0Y0Q==\n+                    </ds:X509Certificate>\n+                </ds:X509Data>\n+            </ds:KeyInfo>\n+        </KeyDescriptor>\n+        <ArtifactResolutionService index=\"0\" isDefault=\"true\" Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"http://openam.example.com:8181/openam/ArtifactResolver/metaAlias/idp\"/>\n+        <SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"http://openam.example.com:8181/openam/IDPSloRedirect/metaAlias/idp\" ResponseLocation=\"http://openam.example.com:8181/openam/IDPSloRedirect/metaAlias/idp\"/>\n+        <SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"http://openam.example.com:8181/openam/IDPSloPOST/metaAlias/idp\" ResponseLocation=\"http://openam.example.com:8181/openam/IDPSloPOST/metaAlias/idp\"/>\n+        <SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"http://openam.example.com:8181/openam/IDPSloSoap/metaAlias/idp\"/>\n+        <ManageNameIDService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"http://openam.example.com:8181/openam/IDPMniRedirect/metaAlias/idp\" ResponseLocation=\"http://openam.example.com:8181/openam/IDPMniRedirect/metaAlias/idp\"/>\n+        <ManageNameIDService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"http://openam.example.com:8181/openam/IDPMniPOST/metaAlias/idp\" ResponseLocation=\"http://openam.example.com:8181/openam/IDPMniPOST/metaAlias/idp\"/>\n+        <ManageNameIDService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"http://openam.example.com:8181/openam/IDPMniSoap/metaAlias/idp\"/>\n+        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</NameIDFormat>\n+        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</NameIDFormat>\n+        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</NameIDFormat>\n+        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</NameIDFormat>\n+        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName</NameIDFormat>\n+        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos</NameIDFormat>\n+        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName</NameIDFormat>\n+        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"http://openam.example.com:8181/openam/SSORedirect/metaAlias/idp\"/>\n+        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"http://openam.example.com:8181/openam/SSOPOST/metaAlias/idp\"/>\n+        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"http://openam.example.com:8181/openam/SSOSoap/metaAlias/idp\"/>\n+        <NameIDMappingService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"http://openam.example.com:8181/openam/NIMSoap/metaAlias/idp\"/>\n+        <AssertionIDRequestService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"http://openam.example.com:8181/openam/AIDReqSoap/IDPRole/metaAlias/idp\"/>\n+        <AssertionIDRequestService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:URI\" Location=\"http://openam.example.com:8181/openam/AIDReqUri/IDPRole/metaAlias/idp\"/>\n+    </IDPSSODescriptor>\n+</EntityDescriptor>\n+"
        },
        {
            "sha": "0902e55b6f49d9535aa49de7692df37dcdedb8f2",
            "filename": "login/src/main/resources/login-ui.xml",
            "status": "added",
            "additions": 440,
            "deletions": 0,
            "changes": 440,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Flogin-ui.xml",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Flogin-ui.xml",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Flogin-ui.xml?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,440 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+<!--\n+    Cloud Foundry \n+    Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+\n+    This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+    You may not use this product except in compliance with the License.\n+\n+    This product includes a number of subcomponents with\n+    separate copyright notices and license terms. Your use of these\n+    subcomponents is subject to the terms and conditions of the\n+    subcomponent's license, as noted in the LICENSE file.\n+\n+-->\n+\n+<beans\n+  xmlns=\"http://www.springframework.org/schema/beans\"\n+  xmlns:security=\"http://www.springframework.org/schema/security\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xmlns:context=\"http://www.springframework.org/schema/context\"\n+  xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n+  xmlns:oauth=\"http://www.springframework.org/schema/security/oauth2\"\n+  xmlns:util=\"http://www.springframework.org/schema/util\"\n+  xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n+    http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd\n+    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\n+    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd\n+    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd\n+    http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd\">\n+\n+    <authentication-manager xmlns=\"http://www.springframework.org/schema/security\" />\n+    <oauth:rest-template id=\"notificationsTemplate\" resource=\"uaa\" />\n+    <oauth:rest-template id=\"authorizationTemplate\" resource=\"uaa\" />\n+    <oauth:rest-template id=\"remoteAuthManagerAuthorizationTemplate\" resource=\"uaa\" />\n+\n+    <context:annotation-config />\n+\n+    <bean id=\"uaaUrl\" class=\"java.lang.String\">\n+        <constructor-arg value=\"${uaa.url:http://localhost:8080/uaa}\"/>\n+    </bean>\n+\n+    <bean id=\"notificationsUrl\" class=\"java.lang.String\">\n+        <constructor-arg value=\"${notifications.url:}\"/>\n+    </bean>\n+\n+    <!-- Pattern:/autologin -->\n+    <http name=\"autologinSecurity\" pattern=\"/autologin\" create-session=\"stateless\" entry-point-ref=\"basicAuthenticationEntryPoint\"\n+        xmlns=\"http://www.springframework.org/schema/security\" authentication-manager-ref=\"emptyAuthenticationManager\">\n+        <intercept-url pattern=\"/**\" access=\"IS_AUTHENTICATED_FULLY\" />\n+        <anonymous enabled=\"false\" />\n+        <custom-filter ref=\"clientAuthenticationFilter\" position=\"BASIC_AUTH_FILTER\" />\n+    </http>\n+\n+    <bean id=\"backwardsCompatibleScopeParameter\" class=\"org.cloudfoundry.identity.uaa.oauth.BackwardsCompatibleScopeParsingFilter\"/>\n+\n+    <http name=\"uiSecurity\" request-matcher-ref=\"uiRequestMatcher\" access-denied-page=\"/\"\n+          authentication-manager-ref=\"authzAuthenticationMgr\" xmlns=\"http://www.springframework.org/schema/security\">\n+      <intercept-url pattern=\"/login**\" access=\"IS_AUTHENTICATED_ANONYMOUSLY\" />\n+      <intercept-url pattern=\"/**\" access=\"IS_AUTHENTICATED_FULLY\" />\n+      <form-login login-page=\"/login\" username-parameter=\"username\" password-parameter=\"password\"\n+                           login-processing-url=\"/login.do\" authentication-failure-handler-ref=\"loginAuthenticationFailureHandler\" authentication-details-source-ref=\"authenticationDetailsSource\"/>\n+      <logout logout-url=\"/logout.do\" success-handler-ref=\"logoutHandler\" />\n+    </http>\n+\n+\n+    <bean id=\"savedRequestAwareAuthenticationDetailsSource\" class=\"org.cloudfoundry.identity.uaa.login.SavedRequestAwareAuthenticationDetailsSource\"/>\n+\n+    <bean id=\"loginAuthenticationFailureHandler\" class=\"org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler\">\n+        <property name=\"exceptionMappings\">\n+            <map>\n+                <entry key=\"org.cloudfoundry.identity.uaa.authentication.AccountNotVerifiedException\" value=\"/login?error=account_not_verified\" />\n+            </map>\n+        </property>\n+        <property name=\"defaultFailureUrl\" value=\"/login?error=login_failure\" />\n+    </bean>\n+\n+    <security:http name=\"resetPasswordSecurity\" pattern=\"/reset_password.do\" disable-url-rewriting=\"true\"\n+                   entry-point-ref=\"loginEntryPoint\">\n+        <security:intercept-url pattern=\"/reset_password.do\" access=\"IS_AUTHENTICATED_ANONYMOUSLY\" />\n+        <security:anonymous enabled=\"true\" />\n+    </security:http>\n+\n+    <security:http name=\"verifyEmailSecurity\" pattern=\"/verify_email\" disable-url-rewriting=\"true\"\n+                   entry-point-ref=\"loginEntryPoint\">\n+        <security:intercept-url pattern=\"/verify_email\" access=\"IS_AUTHENTICATED_ANONYMOUSLY\" />\n+        <security:anonymous enabled=\"true\" />\n+    </security:http>\n+\n+    <security:http name=\"verifyUserSecurity\" pattern=\"/verify_user\" disable-url-rewriting=\"true\"\n+                   entry-point-ref=\"loginEntryPoint\">\n+        <security:intercept-url pattern=\"/**\" access=\"IS_AUTHENTICATED_ANONYMOUSLY\" />\n+        <security:anonymous enabled=\"true\" />\n+    </security:http>\n+\n+    <security:http name=\"acceptInvitationSecurity\" pattern=\"/invitations/accept\" disable-url-rewriting=\"true\"\n+                   entry-point-ref=\"loginEntryPoint\">\n+        <security:intercept-url pattern=\"/**\" access=\"IS_AUTHENTICATED_ANONYMOUSLY\" />\n+        <security:anonymous enabled=\"true\" />\n+    </security:http>\n+\n+    <!-- Owner password flow for external authentication (SAML) -->\n+    <!-- Pattern: /oauth/token parameters:{grant_type=password,passcode= -->\n+    <http name=\"tokenEndpointSecurityForPasscodes\" request-matcher-ref=\"passcodeTokenMatcher\" create-session=\"stateless\"\n+        entry-point-ref=\"basicAuthenticationEntryPoint\" xmlns=\"http://www.springframework.org/schema/security\"  authentication-manager-ref=\"emptyAuthenticationManager\">\n+        <intercept-url pattern=\"/**\" access=\"IS_AUTHENTICATED_FULLY\" />\n+        <anonymous enabled=\"false\" />\n+        <custom-filter ref=\"passcodeAuthenticationFilter\" position=\"FORM_LOGIN_FILTER\" />\n+        <access-denied-handler ref=\"oauthAccessDeniedHandler\" />\n+    </http>\n+\n+    <bean id=\"passcodeTokenMatcher\" class=\"org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcher\">\n+        <constructor-arg value=\"/oauth/token\" />\n+        <property name=\"accept\">\n+            <list>\n+                <value>application/json</value>\n+                <value>application/x-www-form-urlencoded</value>\n+            </list>\n+        </property>\n+        <property name=\"parameters\">\n+            <map>\n+                <entry key=\"grant_type\" value=\"password\" />\n+                <entry key=\"passcode\" value=\"\" />\n+            </map>\n+        </property>\n+    </bean>\n+\n+    <security:http name=\"openIdSecurity\">\n+        <security:intercept-url pattern=\"/**\" access=\"IS_AUTHENTICATED_FULLY\" />\n+        <security:custom-filter before=\"FIRST\" ref=\"metadataGeneratorFilter\" />\n+        <security:custom-filter after=\"FIRST\" ref=\"httpsHeaderFilter\" />\n+        <security:custom-filter after=\"BASIC_AUTH_FILTER\" ref=\"samlFilter\" />\n+        <security:custom-filter ref=\"oauth2ClientFilter\" after=\"EXCEPTION_TRANSLATION_FILTER\" />\n+        <security:logout logout-url=\"/logout\" success-handler-ref=\"logoutHandler\" />\n+        <security:openid-login login-page=\"/login\" user-service-ref=\"openIdUserDetailsService\"\n+            authentication-failure-url=\"/login?error=true\">\n+            <security:attribute-exchange identifier-match=\".*myopenid.com.*\">\n+                <security:openid-attribute name=\"email\" type=\"http://schema.openid.net/contact/email\"\n+                    required=\"true\" />\n+                <security:openid-attribute name=\"fullname\" type=\"http://schema.openid.net/namePerson\"\n+                    required=\"true\" />\n+            </security:attribute-exchange>\n+            <security:attribute-exchange identifier-match=\".*\">\n+                <security:openid-attribute name=\"email\" type=\"http://axschema.org/contact/email\"\n+                    required=\"true\" count=\"1\" />\n+                <security:openid-attribute name=\"firstname\" type=\"http://axschema.org/namePerson/first\"\n+                    required=\"true\" />\n+                <security:openid-attribute name=\"lastname\" type=\"http://axschema.org/namePerson/last\"\n+                    required=\"true\" />\n+                <security:openid-attribute name=\"fullname\" type=\"http://axschema.org/namePerson\"\n+                    required=\"true\" />\n+            </security:attribute-exchange>\n+        </security:openid-login>\n+        <security:anonymous enabled=\"false\" />\n+    </security:http>\n+\n+    <bean id=\"passcodeAuthenticationFilter\" class=\"org.cloudfoundry.identity.uaa.login.PasscodeAuthenticationFilter\">\n+        <constructor-arg name=\"authenticationManager\" ref=\"authzAuthenticationMgr\" />\n+        <property name=\"authorizationTemplate\" ref=\"authorizationTemplate\" />\n+        <property name=\"uaaBaseUrl\" ref=\"uaaUrl\" />\n+        <property name=\"parameterNames\">\n+            <list>\n+                <value>username</value>\n+                <value>password</value>\n+                <value>passcode</value>\n+                <value>credentials</value>\n+                <value>origin</value>\n+                <value>user_id</value>\n+            </list>\n+        </property>\n+    </bean>\n+\n+    <bean id=\"httpsHeaderFilter\" class=\"org.cloudfoundry.identity.web.HttpsHeaderFilter\" />\n+\n+    <!-- this bean will be overwritten in the saml profile -->\n+    <bean id=\"metadataGeneratorFilter\" class=\"org.cloudfoundry.identity.web.NoOpFilter\" />\n+    <!-- this bean will be overwritten in the saml profile -->\n+    <bean id=\"samlFilter\" class=\"org.cloudfoundry.identity.web.NoOpFilter\" />\n+\n+\n+  <bean id=\"loginEntryPoint\" class=\"org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint\">\n+    <constructor-arg value=\"/login\" />\n+  </bean>\n+\n+  <bean id=\"logoutHandler\" class=\"org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler\">\n+    <property name=\"targetUrlParameter\" value=\"redirect\" />\n+    <property name=\"defaultTargetUrl\" value=\"/login\" />\n+  </bean>\n+\n+  <!--<mvc:resources location=\"/\" mapping=\"/**\" />-->\n+\n+  <mvc:default-servlet-handler />\n+\n+  <util:map id=\"links\">\n+    <entry key=\"passwd\" value=\"${links.passwd:}\" />\n+    <entry key=\"register\" value=\"${links.signup:/create_account}\" />\n+  </util:map>\n+\n+  <bean id=\"homeController\" class=\"org.cloudfoundry.identity.uaa.login.HomeController\">\n+    <constructor-arg ref=\"environment\" />\n+    <property name=\"uaaBaseUrl\" value=\"${uaa.url:http://localhost:8080/uaa}\" />\n+    <property name=\"links\" ref=\"links\" />\n+  </bean>\n+\n+  <oauth:resource id=\"uaa\" access-token-uri=\"${uaa.token.url:http://localhost:8080/uaa/oauth/token}\"\n+                  client-id=\"login\" client-secret=\"${LOGIN_SECRET:loginsecret}\" type=\"client_credentials\" />\n+\n+  <!--apply the oauth client context -->\n+  <oauth:client id=\"oauth2ClientFilter\" />\n+\n+  <oauth:rest-template id=\"restTemplate\" resource=\"userApprovals\" />\n+\n+  <!--define an oauth 2 resource for api access -->\n+  <oauth:resource id=\"userApprovals\" type=\"authorization_code\" client-id=\"login\" client-secret=\"${LOGIN_SECRET:loginsecret}\"\n+                  access-token-uri=\"${uaa.token.url:http://localhost:8080/uaa/oauth/token}\" user-authorization-uri=\"${login.authorize.url:http://localhost:8080/login/oauth/authorize}\" />\n+\n+  <oauth:web-expression-handler id=\"oauthWebExpressionHandler\" />\n+\n+  <bean id=\"approvalsService\" class=\"org.cloudfoundry.identity.uaa.login.UaaApprovalsService\">\n+    <constructor-arg ref=\"restTemplate\"/>\n+    <constructor-arg value=\"${uaa.approvals.url:http://localhost:8080/uaa/approvals}\"/>\n+  </bean>\n+\n+  <bean id=\"approvalsController\" class=\"org.cloudfoundry.identity.uaa.login.ProfileController\" />\n+\n+    <util:map id=\"notifications\" key-type=\"org.cloudfoundry.identity.uaa.login.MessageType\">\n+        <entry key=\"CREATE_ACCOUNT_CONFIRMATION\">\n+            <map>\n+                <entry key=\"description\" value=\"Send activation code\"/>\n+                <entry key=\"id\" value=\"f7a85fdc-d920-41f0-b3a4-55db08e408ce\"/>\n+                <entry key=\"critical\" value=\"true\" value-type=\"java.lang.Boolean\"/>\n+            </map>\n+        </entry>\n+        <entry key=\"PASSWORD_RESET\">\n+            <map>\n+                <entry key=\"description\" value=\"Reset Password\"/>\n+                <entry key=\"id\" value=\"141200f6-93bd-4761-a721-941ab511ba2c\"/>\n+                <entry key=\"critical\" value=\"true\" value-type=\"java.lang.Boolean\"/>\n+            </map>\n+        </entry>\n+        <entry key=\"CHANGE_EMAIL\">\n+            <map>\n+                <entry key=\"description\" value=\"Change Email\"/>\n+                <entry key=\"id\" value=\"712de257-a7fa-44cb-b1ac-8a6588d1be23\"/>\n+                <entry key=\"critical\" value=\"true\" value-type=\"java.lang.Boolean\"/>\n+            </map>\n+        </entry>\n+        <entry key=\"INVITATION\">\n+            <map>\n+                <entry key=\"description\" value=\"Invitation\"/>\n+                <entry key=\"id\" value=\"e6722687-3f0f-4e7a-9925-839a04712cea\"/>\n+                <entry key=\"critical\" value=\"true\" value-type=\"java.lang.Boolean\"/>\n+            </map>\n+        </entry>\n+    </util:map>\n+\n+    <mvc:annotation-driven>\n+        <mvc:message-converters>\n+            <bean class=\"org.cloudfoundry.identity.uaa.login.AutologinRequestConverter\" />\n+        </mvc:message-converters>\n+    </mvc:annotation-driven>\n+\n+    <bean id=\"autologinAuthenticationFilter\" class=\"org.cloudfoundry.identity.uaa.authentication.AuthzAuthenticationFilter\">\n+        <constructor-arg ref=\"autologinAuthenticationManager\" />\n+        <property name=\"parameterNames\">\n+            <list>\n+                <value>code</value>\n+                <value>response_type</value>\n+            </list>\n+        </property>\n+        <property name=\"methods\">\n+            <set>\n+                <value>GET</value>\n+                <value>POST</value>\n+            </set>\n+        </property>\n+    </bean>\n+\n+    <bean id=\"autologinAuthenticationManager\" class=\"org.cloudfoundry.identity.uaa.login.AutologinAuthenticationManager\">\n+        <property name=\"uaaBaseUrl\" ref=\"uaaUrl\" />\n+        <property name=\"authorizationTemplate\" ref=\"authorizationTemplate\" />\n+    </bean>\n+\n+    <!-- Pattern: /oauth/authorize parameters:{response_type=code,code=?} -->\n+    <bean id=\"autologinAuthorizeRequestMatcher\" class=\"org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcher\">\n+        <constructor-arg value=\"/oauth/authorize\" />\n+        <property name=\"parameters\">\n+            <map>\n+                <entry key=\"response_type\" value=\"code\" />\n+                <entry key=\"code\" value=\"\" />\n+            </map>\n+        </property>\n+    </bean>\n+\n+    <!-- Handler deciding where to redirect user after successful login -->\n+    <bean id=\"successRedirectHandler\" class=\"org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler\" />\n+\n+    <bean id=\"openIdUserDetailsService\" class=\"org.cloudfoundry.identity.uaa.openid2.OpenIdUserDetailsService\" />\n+\n+    <context:annotation-config />\n+    <bean id=\"loginServerConfig\" class=\"org.cloudfoundry.identity.uaa.login.LoginServerConfig\" />\n+\n+    <mvc:resources mapping=\"/resources/**\" location=\"/resources/\" />\n+    <mvc:annotation-driven />\n+    <mvc:default-servlet-handler />\n+\n+    <bean id=\"springResourceResourceResolver\"\n+          class=\"org.thymeleaf.spring4.resourceresolver.SpringResourceResourceResolver\"/>\n+\n+    <bean id=\"webTemplateResolver\" class=\"org.thymeleaf.templateresolver.TemplateResolver\">\n+        <property name=\"resourceResolver\" ref=\"springResourceResourceResolver\"/>\n+        <property name=\"prefix\" value=\"classpath:/templates/web/\" />\n+        <property name=\"suffix\" value=\".html\"/>\n+        <property name=\"templateMode\" value=\"HTML5\"/>\n+    </bean>\n+\n+    <bean id=\"mailTemplateResolver\" class=\"org.thymeleaf.templateresolver.TemplateResolver\">\n+        <property name=\"resourceResolver\" ref=\"springResourceResourceResolver\"/>\n+        <property name=\"prefix\" value=\"classpath:/templates/mail/\" />\n+        <property name=\"suffix\" value=\".html\" />\n+        <property name=\"templateMode\" value=\"HTML5\" />\n+    </bean>\n+\n+    <bean id=\"webTemplateEngine\" class=\"org.thymeleaf.spring4.SpringTemplateEngine\">\n+        <property name=\"templateResolver\" ref=\"webTemplateResolver\" />\n+        <property name=\"additionalDialects\">\n+            <set>\n+                <bean class=\"nz.net.ultraq.thymeleaf.LayoutDialect\" />\n+                <bean class=\"org.thymeleaf.extras.springsecurity3.dialect.SpringSecurityDialect\"/>\n+            </set>\n+        </property>\n+    </bean>\n+\n+    <bean id=\"mailTemplateEngine\" class=\"org.thymeleaf.spring4.SpringTemplateEngine\">\n+        <property name=\"templateResolver\" ref=\"mailTemplateResolver\" />\n+    </bean>\n+\n+    <bean id=\"viewResolver\" class=\"org.springframework.web.servlet.view.ContentNegotiatingViewResolver\">\n+        <property name=\"mediaTypes\">\n+            <map>\n+                <entry key=\"json\" value=\"application/json\" />\n+            </map>\n+        </property>\n+        <property name=\"viewResolvers\">\n+            <list>\n+                <bean class=\"org.thymeleaf.spring4.view.ThymeleafViewResolver\">\n+                    <property name=\"templateEngine\" ref=\"webTemplateEngine\" />\n+                </bean>\n+                <bean class=\"org.springframework.web.servlet.view.BeanNameViewResolver\" />\n+            </list>\n+        </property>\n+        <property name=\"defaultViews\">\n+            <bean class=\"org.springframework.web.servlet.view.json.MappingJacksonJsonView\">\n+                <property name=\"extractValueFromSingleKeyModel\" value=\"true\" />\n+            </bean>\n+        </property>\n+    </bean>\n+\n+    <bean id=\"buildInfo\" class=\"org.cloudfoundry.identity.uaa.login.BuildInfo\" />\n+\n+    <bean id=\"tileInfo\" class=\"org.cloudfoundry.identity.uaa.login.TileInfo\" />\n+\n+    <bean id=\"emailService\" class=\"org.cloudfoundry.identity.uaa.login.EmailService\">\n+        <constructor-arg>\n+            <bean class=\"org.springframework.mail.javamail.JavaMailSenderImpl\">\n+                <property name=\"host\" value=\"${smtp.host:localhost}\"/>\n+                <property name=\"port\" value=\"${smtp.port:25}\"/>\n+                <property name=\"username\" value=\"${smtp.user:}\"/>\n+                <property name=\"password\" value=\"${smtp.password:}\"/>\n+            </bean>\n+        </constructor-arg>\n+        <constructor-arg value=\"${login.url:http://localhost:8080/login}\"/>\n+        <constructor-arg value=\"${login.brand:oss}\"/>\n+    </bean>\n+\n+    <bean id=\"notificationsService\" class=\"org.cloudfoundry.identity.uaa.login.NotificationsService\">\n+        <constructor-arg ref=\"notificationsTemplate\"/>\n+        <constructor-arg ref=\"notificationsUrl\"/>\n+        <constructor-arg ref=\"notifications\"/>\n+        <constructor-arg ref=\"authorizationTemplate\"/>\n+        <constructor-arg ref=\"uaaUrl\"/>\n+    </bean>\n+\n+    <bean id=\"accountCreationService\" class=\"org.cloudfoundry.identity.uaa.login.EmailAccountCreationService\">\n+        <constructor-arg>\n+            <bean class=\"org.codehaus.jackson.map.ObjectMapper\"/>\n+        </constructor-arg>\n+        <constructor-arg ref=\"mailTemplateEngine\"/>\n+        <constructor-arg ref=\"messageService\"/>\n+        <constructor-arg ref=\"authorizationTemplate\"/>\n+        <constructor-arg ref=\"uaaUrl\"/>\n+        <constructor-arg value=\"${login.brand:oss}\"/>\n+        <constructor-arg value=\"${login.url:http://localhost:8080/login}\"/>\n+    </bean>\n+\n+    <bean id=\"invitationsService\" class=\"org.cloudfoundry.identity.uaa.login.EmailInvitationsService\">\n+        <constructor-arg ref=\"mailTemplateEngine\"/>\n+        <constructor-arg ref=\"messageService\"/>\n+        <constructor-arg value=\"${login.brand:oss}\"/>\n+        <constructor-arg value=\"${uaa.url:http://localhost:8080/uaa}\"/>\n+    </bean>\n+\n+    <bean id=\"changePasswordService\" class=\"org.cloudfoundry.identity.uaa.login.UaaChangePasswordService\">\n+        <constructor-arg ref=\"authorizationTemplate\"/>\n+        <constructor-arg ref=\"uaaUrl\"/>\n+    </bean>\n+\n+    <bean id=\"changePasswordController\" class=\"org.cloudfoundry.identity.uaa.login.ChangePasswordController\">\n+        <constructor-arg ref=\"changePasswordService\"/>\n+    </bean>\n+\n+    <bean id=\"resetPasswordService\" class=\"org.cloudfoundry.identity.uaa.login.EmailResetPasswordService\">\n+        <constructor-arg ref=\"mailTemplateEngine\"/>\n+        <constructor-arg ref=\"messageService\"/>\n+        <constructor-arg ref=\"authorizationTemplate\"/>\n+        <constructor-arg ref=\"uaaUrl\"/>\n+        <constructor-arg value=\"${login.brand:oss}\"/>\n+    </bean>\n+\n+    <bean id=\"changeEmailService\" class=\"org.cloudfoundry.identity.uaa.login.EmailChangeEmailService\">\n+        <constructor-arg ref=\"mailTemplateEngine\"/>\n+        <constructor-arg ref=\"messageService\"/>\n+        <constructor-arg ref=\"authorizationTemplate\"/>\n+        <constructor-arg ref=\"uaaUrl\"/>\n+        <constructor-arg value=\"${login.brand:oss}\"/>\n+    </bean>\n+\n+    <bean id=\"resetPasswordController\" class=\"org.cloudfoundry.identity.uaa.login.ResetPasswordController\">\n+        <constructor-arg ref=\"resetPasswordService\"/>\n+    </bean>\n+\n+    <bean id=\"changeEmailController\" class=\"org.cloudfoundry.identity.uaa.login.ChangeEmailController\">\n+        <constructor-arg ref=\"changeEmailService\"/>\n+    </bean>\n+    \n+    <bean class=\"org.cloudfoundry.identity.uaa.login.UaaExpiringCodeService\">\n+        <constructor-arg ref=\"authorizationTemplate\"/>\n+        <constructor-arg value=\"${uaa.url:http://localhost:8080/uaa}\"/>\n+    </bean>\n+\n+</beans>"
        },
        {
            "sha": "954b2218e431bf4669c796b2075abfa9bc00c98a",
            "filename": "login/src/main/resources/login.yml",
            "status": "added",
            "additions": 163,
            "deletions": 0,
            "changes": 163,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Flogin.yml",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Flogin.yml",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Flogin.yml?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,163 @@\n+---\n+# Cloud Foundry 2012.02.03 Beta\n+# Copyright (c) [2009-2012] VMware, Inc. All Rights Reserved.\n+#\n+# This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+# You may not use this product except in compliance with the License.\n+#\n+# This product includes a number of subcomponents with\n+# separate copyright notices and license terms. Your use of these\n+# subcomponents is subject to the terms and conditions of the\n+# subcomponent's license, as noted in the LICENSE file.\n+\n+# customize static asset source, provides control over visual branding\n+# (defaults to /resources/oss)\n+#assetBaseUrl: /resources/pivotal\n+\n+#tiles:\n+#  - name: Pivotal Network\n+#    login-link: https://network.gopivotal.com/login\n+#    image: /resources/pivotal/images/network-logo-gray.png\n+#    image-hover: /resources/pivotal/images/network-logo-teal.png\n+#  - name: Pivotal Web Services\n+#    login-link: https://console.10.244.0.34.xip.io\n+#    image: /resources/pivotal/images/pws-logo-gray.png\n+#    image-hover: /resources/pivotal/images/pws-logo-teal.png\n+#  - name: Pivotal Partners\n+#    login-link: https://partners.gopivotal.com/login\n+#    image: /resources/pivotal/images/partners-logo-gray.png\n+#    image-hover: /resources/pivotal/images/partners-logo-teal.png\n+\n+links:\n+  # Custom external create account link\n+  #signup: http://some-oauth-client.example.com/signup\n+  passwd: http://localhost:8080/login/forgot_password\n+\n+#notifications:\n+#  url: http://localhost:3001\n+\n+login:\n+  # Enable create account on the Login Server (enabled by default)\n+  # - links.signup will still be used if present\n+  #signupsEnabled: false\n+  # Enable sending invitations on the Login Server (disabled by default)\n+  # invitationsEnabled: true\n+  # the brand to use for password reset emails and page titles\n+  # (defaults to oss)\n+  #brand: pivotal\n+  #base URL that the login server can be reached at\n+  url: http://localhost:8080/login\n+\n+  # SAML Key Configuration\n+  # The location and credentials of the certificate for this SP\n+  # See README.md for details on how to create this.\n+  serviceProviderKey: |\n+    -----BEGIN RSA PRIVATE KEY-----\n+    Proc-Type: 4,ENCRYPTED\n+    DEK-Info: DES-EDE3-CBC,231BD428AF94D4C8\n+    0Nmo90pX8byVS7ZlakMIoXdJSLlxqzi1pN0g1ye2U+9HgTLTLuMwWaPknZ/2NFtK\n+    rO72ss8uc7xBAoMkOvcMTZCg5P4JDlmuQ31IabzRyOQcAxCPZedgarRnwxT6GUim\n+    JtkzNPmAAgf1bfUTu/LNt2o01dW+qq+2qiwUxgUBM2xLBmadIWqqTOZbkFc9Xjvl\n+    /IEnJgp/c49sNh68EpXPlsGJfW7jAh90nlA13H1fpvTsSg2/6wKbRsxxNkpVg0Nq\n+    bQURQIO6htOLZBPMMpoPILp/KtKkd1zpaZJnbZGDo9AdwfAh9dUbEw8ukJwRg3Xl\n+    lsptHoMGsGdvgViWZhCB/pAHYLh31G8oVMA/qPB9PNJYIK2aQZdm7yiAdf+m8Jxb\n+    Do2xBH6XUeHkg2F0LWnC/FjaMRpLuliI9vvJVB7YCQKkMdgNVV0SCx39IiX0rEm5\n+    8vuuoAH3b7b+maWp5+ffriNIcEFSlcmTPIgqZBboIORBNXZnHTUG7nGIML+nlOK9\n+    zdvF2vAxchqOKroc6+SGFLNvNQd9S/nLH3vP+aX9iStL55G11+p2tL+bIGMWZj0h\n+    Z+qqQoogtngRFbjcVoKYerFXbKG6xXzXUc4O3EbvAKvEi0HJodYccP3L7wIer1aY\n+    VaMF2M05g5KedHosEfvvhU17xS9L4u2SRMZIQ3K8iLNEhZ6bOw6EnzTaKWeffrYr\n+    UOjfMEgswcHfpxx1iD5T4RTwxuKOgtFhd1QM4enXPsU6uRU5PGSiB/0t6jal6ClF\n+    PhtIrTwhx0vBR4rySx4raXdLClxxt5vLe826C3uwo/6HTdUsnDvIXA==\n+    -----END RSA PRIVATE KEY-----\n+  serviceProviderKeyPassword: password\n+  serviceProviderCertificate: |\n+    -----BEGIN CERTIFICATE-----\n+    MIIBzzCCATgCCQDTMCX3wJYrVDANBgkqhkiG9w0BAQUFADAsMSowKAYDVQQDFCFz\n+    YW1sX2xvZ2luLE9VPXRlc3QsTz12bXdhcmUsTz1jb20wHhcNMTMwNzAyMjMzOTU4\n+    WhcNMTQwNzAyMjMzOTU4WjAsMSowKAYDVQQDFCFzYW1sX2xvZ2luLE9VPXRlc3Qs\n+    Tz12bXdhcmUsTz1jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBANYBRuep\n+    WaoNA7/RsOUVlmOzxbhtfW8AstGXjsWbAmmg8NSruRlNuMz1WdCeESM3zBqLSyp8\n+    Vf3j3ExzB2qquDbPXNA1k4EqgNya2E+6n3KsgVLCWQm4W46Pd7C6QswrR6JgUKaW\n+    6KI8BgyJQ9wjL/nR8uqZouJJyRSLuIaGXIuXAgMBAAEwDQYJKoZIhvcNAQEFBQAD\n+    gYEAXOojarkGv5nVZqTuY8BRM/TRt1oby3i0VRG70l0PcDlWft52aSvCd3t8ds2S\n+    h92cXLz8nvHEBaBTkxTLtf2/h5x2KQhXyHoU1UU+JjOegoF+LD6KdmaVk2l35Na5\n+    1V2AHsj+yDrJ9aKwt86jbBbcFkRphdkn5ivq71GCWRfcpZE=\n+    -----END CERTIFICATE-----\n+\n+  # SAML - The entity base url is the location of this application\n+  # (The host and port of the application that will accept assertions)\n+  entityBaseURL: http://localhost:8080/login\n+  # The entityID of this SP\n+  entityID: cloudfoundry-saml-login\n+  saml:\n+    #Default nameID\n+    nameID: 'urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified'\n+    #Default assertionConsumerIndex\n+    assertionConsumerIndex: 0\n+    #Local/SP metadata - sign metadata\n+    signMetaData: true\n+    #Local/SP metadata - requests signed\n+    signRequest: true\n+    #Local/SP metadata - sign metadata\n+    socket:\n+      # URL metadata fetch - pool timeout\n+      connectionManagerTimeout: 10000\n+      # URL metadata fetch - read timeout\n+      soTimeout: 10000\n+#BEGIN SAML PROVIDERS\n+#    providers:\n+#      okta-local:\n+#        idpMetadata: sample-okta-localhost.xml\n+#        nameID: urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\n+#        assertionConsumerIndex: 0\n+#        metadataTrustCheck: true\n+#        showSamlLoginLink: true\n+#        linkText: 'Okta Preview 1'\n+#        iconUrl: 'http://link.to/icon.jpg'\n+#      okta-local-2:\n+#        idpMetadata: |\n+#          <?xml version=\"1.0\" encoding=\"UTF-8\"?><md:EntityDescriptor xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\" entityID=\"http://www.okta.com/k2lw4l5bPODCMIIDBRYZ\"><md:IDPSSODescriptor WantAuthnRequestsSigned=\"true\" protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\"><md:KeyDescriptor use=\"signing\"><ds:KeyInfo xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"><ds:X509Data><ds:X509Certificate>MIICmTCCAgKgAwIBAgIGAUPATqmEMA0GCSqGSIb3DQEBBQUAMIGPMQswCQYDVQQGEwJVUzETMBEG\n+#          A1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEU\n+#          MBIGA1UECwwLU1NPUHJvdmlkZXIxEDAOBgNVBAMMB1Bpdm90YWwxHDAaBgkqhkiG9w0BCQEWDWlu\n+#          Zm9Ab2t0YS5jb20wHhcNMTQwMTIzMTgxMjM3WhcNNDQwMTIzMTgxMzM3WjCBjzELMAkGA1UEBhMC\n+#          VVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDVNhbiBGcmFuY2lzY28xDTALBgNVBAoM\n+#          BE9rdGExFDASBgNVBAsMC1NTT1Byb3ZpZGVyMRAwDgYDVQQDDAdQaXZvdGFsMRwwGgYJKoZIhvcN\n+#          AQkBFg1pbmZvQG9rdGEuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCeil67/TLOiTZU\n+#          WWgW2XEGgFZ94bVO90v5J1XmcHMwL8v5Z/8qjdZLpGdwI7Ph0CyXMMNklpaR/Ljb8fsls3amdT5O\n+#          Bw92Zo8ulcpjw2wuezTwL0eC0wY/GQDAZiXL59npE6U+fH1lbJIq92hx0HJSru/0O1q3+A/+jjZL\n+#          3tL/SwIDAQABMA0GCSqGSIb3DQEBBQUAA4GBAI5BoWZoH6Mz9vhypZPOJCEKa/K+biZQsA4Zqsuk\n+#          vvphhSERhqk/Nv76Vkl8uvJwwHbQrR9KJx4L3PRkGCG24rix71jEuXVGZUsDNM3CUKnARx4MEab6\n+#          GFHNkZ6DmoT/PFagngecHu+EwmuDtaG0rEkFrARwe+d8Ru0BN558abFb</ds:X509Certificate></ds:X509Data></ds:KeyInfo></md:KeyDescriptor><md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</md:NameIDFormat><md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</md:NameIDFormat><md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://pivotal.oktapreview.com/app/pivotal_pivotalcfstaging_1/k2lw4l5bPODCMIIDBRYZ/sso/saml\"/><md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://pivotal.oktapreview.com/app/pivotal_pivotalcfstaging_1/k2lw4l5bPODCMIIDBRYZ/sso/saml\"/></md:IDPSSODescriptor></md:EntityDescriptor>#      saml:\n+#        nameID: urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\n+#        assertionConsumerIndex: 0\n+#        metadataTrustCheck: true\n+#        showSamlLoginLink: true\n+#        linkText: 'Okta Preview 2'\n+#      vsphere.local:\n+#        idpMetadata: https://win2012-sso2.localdomain:7444/websso/SAML2/Metadata/vsphere.local\n+#        nameID: urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\n+#        assertionConsumerIndex: 0\n+#        showSamlLoginLink: true\n+#        linkText: 'Log in with vCenter SSO'\n+#      openam-local:\n+#        idpMetadata: http://localhost:8081/openam/saml2/jsp/exportmetadata.jsp?entityid=http://localhost:8081/openam\n+#        nameID: urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\n+#        assertionConsumerIndex: 0\n+#        signMetaData: false\n+#        signRequest: false\n+#        showSamlLoginLink: true\n+#        linkText: 'Log in with OpenAM'\n+#END SAML PROVIDERS\n+\n+# The secret that this login server will use to authenticate to the uaa\n+\n+# Google Analytics\n+#analytics:\n+#  code: secret_code\n+#  domain: example.com\n+\n+smtp:\n+  host: localhost\n+  port: 2525\n+  user:\n+  password:"
        },
        {
            "sha": "1a80252c6477f00bbb093ffe5771338c2a1b38a8",
            "filename": "login/src/main/resources/sample-okta-localhost-2.xml",
            "status": "added",
            "additions": 12,
            "deletions": 0,
            "changes": 12,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Fsample-okta-localhost-2.xml",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Fsample-okta-localhost-2.xml",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Fsample-okta-localhost-2.xml?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,12 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?><md:EntityDescriptor xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\" entityID=\"http://www.okta.com/k2lw4l5bPODCMIIDBRYZ\"><md:IDPSSODescriptor WantAuthnRequestsSigned=\"true\" protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\"><md:KeyDescriptor use=\"signing\"><ds:KeyInfo xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"><ds:X509Data><ds:X509Certificate>MIICmTCCAgKgAwIBAgIGAUPATqmEMA0GCSqGSIb3DQEBBQUAMIGPMQswCQYDVQQGEwJVUzETMBEG\n+  A1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEU\n+  MBIGA1UECwwLU1NPUHJvdmlkZXIxEDAOBgNVBAMMB1Bpdm90YWwxHDAaBgkqhkiG9w0BCQEWDWlu\n+  Zm9Ab2t0YS5jb20wHhcNMTQwMTIzMTgxMjM3WhcNNDQwMTIzMTgxMzM3WjCBjzELMAkGA1UEBhMC\n+  VVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDVNhbiBGcmFuY2lzY28xDTALBgNVBAoM\n+  BE9rdGExFDASBgNVBAsMC1NTT1Byb3ZpZGVyMRAwDgYDVQQDDAdQaXZvdGFsMRwwGgYJKoZIhvcN\n+  AQkBFg1pbmZvQG9rdGEuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCeil67/TLOiTZU\n+  WWgW2XEGgFZ94bVO90v5J1XmcHMwL8v5Z/8qjdZLpGdwI7Ph0CyXMMNklpaR/Ljb8fsls3amdT5O\n+  Bw92Zo8ulcpjw2wuezTwL0eC0wY/GQDAZiXL59npE6U+fH1lbJIq92hx0HJSru/0O1q3+A/+jjZL\n+  3tL/SwIDAQABMA0GCSqGSIb3DQEBBQUAA4GBAI5BoWZoH6Mz9vhypZPOJCEKa/K+biZQsA4Zqsuk\n+  vvphhSERhqk/Nv76Vkl8uvJwwHbQrR9KJx4L3PRkGCG24rix71jEuXVGZUsDNM3CUKnARx4MEab6\n+  GFHNkZ6DmoT/PFagngecHu+EwmuDtaG0rEkFrARwe+d8Ru0BN558abFb</ds:X509Certificate></ds:X509Data></ds:KeyInfo></md:KeyDescriptor><md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</md:NameIDFormat><md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</md:NameIDFormat><md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://pivotal.oktapreview.com/app/pivotal_pivotalcfstaging_1/k2lw4l5bPODCMIIDBRYZ/sso/saml\"/><md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://pivotal.oktapreview.com/app/pivotal_pivotalcfstaging_1/k2lw4l5bPODCMIIDBRYZ/sso/saml\"/></md:IDPSSODescriptor></md:EntityDescriptor>\n\\ No newline at end of file"
        },
        {
            "sha": "c2066de1a543a02c50f4ece3e5d20412e9908697",
            "filename": "login/src/main/resources/sample-okta-localhost.xml",
            "status": "added",
            "additions": 12,
            "deletions": 0,
            "changes": 12,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Fsample-okta-localhost.xml",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Fsample-okta-localhost.xml",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Fsample-okta-localhost.xml?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,12 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?><md:EntityDescriptor xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\" entityID=\"http://www.okta.com/k2lvtem0VAJDMINKEYJW\"><md:IDPSSODescriptor WantAuthnRequestsSigned=\"true\" protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\"><md:KeyDescriptor use=\"signing\"><ds:KeyInfo xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"><ds:X509Data><ds:X509Certificate>MIICmTCCAgKgAwIBAgIGAUPATqmEMA0GCSqGSIb3DQEBBQUAMIGPMQswCQYDVQQGEwJVUzETMBEG\n+  A1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEU\n+  MBIGA1UECwwLU1NPUHJvdmlkZXIxEDAOBgNVBAMMB1Bpdm90YWwxHDAaBgkqhkiG9w0BCQEWDWlu\n+  Zm9Ab2t0YS5jb20wHhcNMTQwMTIzMTgxMjM3WhcNNDQwMTIzMTgxMzM3WjCBjzELMAkGA1UEBhMC\n+  VVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDVNhbiBGcmFuY2lzY28xDTALBgNVBAoM\n+  BE9rdGExFDASBgNVBAsMC1NTT1Byb3ZpZGVyMRAwDgYDVQQDDAdQaXZvdGFsMRwwGgYJKoZIhvcN\n+  AQkBFg1pbmZvQG9rdGEuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCeil67/TLOiTZU\n+  WWgW2XEGgFZ94bVO90v5J1XmcHMwL8v5Z/8qjdZLpGdwI7Ph0CyXMMNklpaR/Ljb8fsls3amdT5O\n+  Bw92Zo8ulcpjw2wuezTwL0eC0wY/GQDAZiXL59npE6U+fH1lbJIq92hx0HJSru/0O1q3+A/+jjZL\n+  3tL/SwIDAQABMA0GCSqGSIb3DQEBBQUAA4GBAI5BoWZoH6Mz9vhypZPOJCEKa/K+biZQsA4Zqsuk\n+  vvphhSERhqk/Nv76Vkl8uvJwwHbQrR9KJx4L3PRkGCG24rix71jEuXVGZUsDNM3CUKnARx4MEab6\n+  GFHNkZ6DmoT/PFagngecHu+EwmuDtaG0rEkFrARwe+d8Ru0BN558abFb</ds:X509Certificate></ds:X509Data></ds:KeyInfo></md:KeyDescriptor><md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</md:NameIDFormat><md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</md:NameIDFormat><md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://pivotal.oktapreview.com/app/pivotal_pivotalcfdevelopment_1/k2lvtem0VAJDMINKEYJW/sso/saml\"/><md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://pivotal.oktapreview.com/app/pivotal_pivotalcfdevelopment_1/k2lvtem0VAJDMINKEYJW/sso/saml\"/></md:IDPSSODescriptor></md:EntityDescriptor>\n\\ No newline at end of file"
        },
        {
            "sha": "9654a2332189a14a68ce27b36f6e6e89ff77314f",
            "filename": "login/src/main/resources/templates/mail/activate.html",
            "status": "added",
            "additions": 23,
            "deletions": 0,
            "changes": 23,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fmail%2Factivate.html",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fmail%2Factivate.html",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fmail%2Factivate.html?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,23 @@\n+<!DOCTYPE html>\n+<html xmlns:th=\"http://www.thymeleaf.org\">\n+<head lang=\"en\">\n+    <meta charset=\"UTF-8\" />\n+</head>\n+<body>\n+<p>\n+    A request has been made to activate <th:block th:text=\"${servicePhrase}\">an ExampleService</th:block> for: <th:block th:text=\"${email}\">user@example.com</th:block>\n+</p>\n+<p>\n+    <a href=\"http://login.example.com/accounts?code=some_code&amp;email=user%40example.com\"\n+       th:href=\"@{${accountsUrl}(code=${code},email=${email})}\">Activate your account</a>\n+    to continue the registration process.\n+</p>\n+<p>\n+    If you did not make this request, simply ignore this message.\n+</p>\n+<p>\n+    Thank you,<br />\n+    <th:block th:text=\"${serviceName}\">The Administration</th:block>\n+</p>\n+</body>\n+</html>"
        },
        {
            "sha": "4e708dc8b9082b79a9ef19a32059656ec6edb3d6",
            "filename": "login/src/main/resources/templates/mail/invite.html",
            "status": "added",
            "additions": 20,
            "deletions": 0,
            "changes": 20,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fmail%2Finvite.html",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fmail%2Finvite.html",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fmail%2Finvite.html?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,20 @@\n+<!DOCTYPE html>\n+<html xmlns:th=\"http://www.thymeleaf.org\">\n+<head lang=\"en\">\n+    <meta charset=\"UTF-8\" />\n+</head>\n+<body>\n+<p>\n+   <th:block th:text=\"${currentUser}\"></th:block> has invited you to join <th:block th:text=\"${serviceName}\"></th:block>\n+</p>\n+<p>\n+    <a href=\"http://login.example.com/invitations/accept\"\n+       th:href=\"@{${accountsUrl}(code=${code})}\">Accept Invite</a>\n+    to continue the registration process.\n+</p>\n+<p>\n+    Thank you,<br />\n+    <th:block th:text=\"${serviceName}\">The Administration</th:block>\n+</p>\n+</body>\n+</html>"
        },
        {
            "sha": "fbe484326da509790d12b816c66605d3bcc3df2d",
            "filename": "login/src/main/resources/templates/mail/reset_password.html",
            "status": "added",
            "additions": 18,
            "deletions": 0,
            "changes": 18,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fmail%2Freset_password.html",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fmail%2Freset_password.html",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fmail%2Freset_password.html?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,18 @@\n+<!DOCTYPE html>\n+<html xmlns:th=\"http://www.thymeleaf.org\">\n+<head lang=\"en\">\n+    <meta charset=\"UTF-8\" />\n+</head>\n+<body>\n+<p>\n+    A request has been made to reset your <th:block th:text=\"${serviceName}\">ExampleService </th:block>account password for <th:block th:text=\"${email}\">user@example.com</th:block>.\n+</p>\n+<p>\n+    <a href=\"http://login.example.com/login/reset_password?code=some_code&amp;email=user%40example.com\"\n+       th:href=\"@{${resetUrl}(code=${code},email=${email})}\">Reset your password</a>\n+</p>\n+<p>\n+    If you did not make this request, simply ignore this message and your old password will continue to work.\n+</p>\n+</body>\n+</html>"
        },
        {
            "sha": "fc17ca4d159b0884375ac9f2a94b42f803e7cca0",
            "filename": "login/src/main/resources/templates/mail/reset_password_unavailable.html",
            "status": "added",
            "additions": 14,
            "deletions": 0,
            "changes": 14,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fmail%2Freset_password_unavailable.html",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fmail%2Freset_password_unavailable.html",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fmail%2Freset_password_unavailable.html?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,14 @@\n+<!DOCTYPE html>\n+<html xmlns:th=\"http://www.thymeleaf.org\">\n+<head lang=\"en\">\n+    <meta charset=\"UTF-8\" />\n+</head>\n+<body>\n+<p>\n+    A request has been made to reset your <th:block th:text=\"${serviceName}\">ExampleService </th:block>account password for <th:block th:text=\"${email}\">user@example.com</th:block>.\n+</p>\n+<p>\n+    Your account credentials for <th:block th:text=\"${hostname}\">localhost</th:block> are managed by an external service. Please contact your administrator for password recovery requests.\n+</p>\n+</body>\n+</html>"
        },
        {
            "sha": "126f55c789c4379b5f808d8e9f479b8e375b2f86",
            "filename": "login/src/main/resources/templates/mail/verify_email.html",
            "status": "added",
            "additions": 23,
            "deletions": 0,
            "changes": 23,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fmail%2Fverify_email.html",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fmail%2Fverify_email.html",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fmail%2Fverify_email.html?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,23 @@\n+<!DOCTYPE html>\n+<html xmlns:th=\"http://www.thymeleaf.org\">\n+<head lang=\"en\">\n+    <meta charset=\"UTF-8\" />\n+</head>\n+<body>\n+<p>\n+    A request has been made to change the email for <th:block th:text=\"${servicePhrase}\">an ExampleService</th:block> from <th:block th:text=\"${email}\">user@example.com</th:block> to <th:block th:text=\"${newEmail}\">new@example.com</th:block>.\n+</p>\n+<p>\n+    Click <a href=\"http://login.example.com/login/verify_email?code=some_code\"\n+       th:href=\"@{${verifyUrl}(code=${code})}\">Verify your email</a>\n+    for the new email to be verified and the for the change to be reflected on your account.\n+</p>\n+<p>\n+    If you did not make this request, simply ignore this message and your old email will continue to work.\n+</p>\n+<p>\n+    Thank you,<br />\n+    <th:block th:text=\"${serviceName}\">The Administration</th:block>\n+</p>\n+</body>\n+</html>"
        },
        {
            "sha": "318f8a0840093232a567c90f562c69fe8bc562e6",
            "filename": "login/src/main/resources/templates/web/access_confirmation.html",
            "status": "added",
            "additions": 76,
            "deletions": 0,
            "changes": 76,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Faccess_confirmation.html",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Faccess_confirmation.html",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Faccess_confirmation.html?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,76 @@\n+<!DOCTYPE html>\n+<html xmlns=\"http://www.w3.org/1999/html\"\n+      xmlns:th=\"http://www.thymeleaf.org\"\n+      xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n+      layout:decorator=\"layouts/main\">\n+<head>\n+    <th:block layout:include=\"nav :: head\"></th:block>\n+</head>\n+<body>\n+<div class=\"header\" layout:fragment=\"page-header\">\n+    <th:block layout:include=\"nav :: nav\"></th:block>\n+</div>\n+<div class=\"panel-container\" layout:fragment=\"page-content\">\n+    <div class=\"panel\">\n+        <h1>Application Authorization</h1>\n+        <form id=\"application_authorization\" action=\"/oauth/authorize\" th:action=\"@{/oauth/authorize}\" method=\"POST\" class=\"panel-content\">\n+            <h2 th:text=\"${client_id}\">Cloudbees</h2>\n+            <a class=\"application-link\"\n+               href=\"https://cloudfoundry.cloudbees.com/authenticate\"\n+               th:href=\"${redirect_uri}\"\n+               th:text=\"${redirect_uri}\">https://cloudfoundry.cloudbees.com/authenticate</a>\n+            <p>\n+                <th:block th:text=\"${client_id}\">Cloudbees</th:block> has requested permission to\n+                access your Pivotal account. If you do not recognize this application or\n+                its URL, you should click deny. The application will not see your password.\n+            </p>\n+            <ul class=\"application-scopes\">\n+                <th:block th:each=\"scope, iter : ${undecided_scopes}\">\n+                    <th:block th:with=\"index=${iter.index},code=${scope.get('code')}\">\n+                        <li class=\"undecided\">\n+                            <input type=\"checkbox\" checked=\"checked\" name=\"scope.0\" id=\"scope.0\" th:name=\"|scope.${index}|\" th:value=\"${code}\" th:id=\"|scope.${index}|\"/>\n+                            <label for=\"scope.0\" th:for=\"|scope.${index}|\" th:utext=\"${#messages.msgOrNull(code) ?: code}\">Something new.</label>\n+                        </li>\n+                    </th:block>\n+                </th:block>\n+                <th:block th:each=\"scope, iter : ${approved_scopes}\">\n+                    <th:block th:with=\"index=${iter.index + undecided_scopes.size()},code=${scope.get('code')}\">\n+                        <li>\n+                            <input type=\"checkbox\" checked=\"checked\" name=\"scope.1\" id=\"scope.1\" th:name=\"|scope.${index}|\" th:value=\"${code}\" th:id=\"|scope.${index}|\"/>\n+                            <label for=\"scope.1\" th:for=\"|scope.${index}|\" th:utext=\"${#messages.msgOrNull(code) ?: code}\">Something already approved.</label>\n+                        </li>\n+                    </th:block>\n+                </th:block>\n+                <th:block th:each=\"scope, iter : ${denied_scopes}\">\n+                    <th:block th:with=\"index=${iter.index + undecided_scopes.size() + approved_scopes.size()},code=${scope.get('code')}\">\n+                        <li>\n+                            <input type=\"checkbox\" name=\"scope.2\" id=\"scope.2\" th:name=\"|scope.${index}|\" th:value=\"${code}\" th:id=\"|scope.${index}|\"/>\n+                            <label for=\"scope.2\" th:for=\"|scope.${index}|\" th:utext=\"${#messages.msgOrNull(code) ?: code}\">Something previously denied.</label>\n+                        </li>\n+                    </th:block>\n+                </th:block>\n+            </ul>\n+            <p>\n+                You can change your approval of permissions or revoke access for this application\n+                at any time from account settings. By approving access, you agree to\n+                <th:block th:text=\"${client_id}\">Cloudbees</th:block>'s terms of service and privacy policy.\n+            </p>\n+            <div class=\"actions\">\n+                <button id=\"deny\"\n+                        type=\"submit\"\n+                        name=\"user_oauth_approval\"\n+                        th:name=\"${options.get('deny').get('key')}\"\n+                        value=\"false\"\n+                        class=\"btn btn-lowlight\">Deny</button>\n+                <button id=\"authorize\"\n+                        type=\"submit\"\n+                        name=\"user_oauth_approval\"\n+                        th:name=\"${options.get('confirm').get('key')}\"\n+                        value=\"true\"\n+                        class=\"btn btn-primary\">Authorize</button>\n+            </div>\n+        </form>\n+    </div>\n+</div>\n+</body>\n+</html>\n\\ No newline at end of file"
        },
        {
            "sha": "cf1ffd6b8b1d79792f49579c553f074ae8177101",
            "filename": "login/src/main/resources/templates/web/accounts/email_sent.html",
            "status": "added",
            "additions": 30,
            "deletions": 0,
            "changes": 30,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Faccounts%2Femail_sent.html",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Faccounts%2Femail_sent.html",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Faccounts%2Femail_sent.html?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,30 @@\n+<!DOCTYPE html>\n+<html xmlns:th=\"http://www.thymeleaf.org\"\n+      xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n+      layout:decorator=\"layouts/main\"\n+      th:with=\"pivotal=${@environment.getProperty('login.brand') == 'pivotal'}\">\n+<head>\n+    <link rel=\"stylesheet\" href=\"/resources/font-awesome/css/font-awesome.min.css\" th:href=\"@{/resources/font-awesome/css/font-awesome.min.css}\" />\n+</head>\n+<body>\n+    <div class=\"island-landscape\" layout:fragment=\"page-content\">\n+        <div class=\"island-title\">\n+            <h1>Create your <th:block th:text=\"${pivotal ? 'Pivotal ID' : 'account'}\">account</th:block></h1>\n+            <p th:if=\"${pivotal}\">\n+                A <strong>Pivotal ID</strong> lets you sign in to Pivotal products\n+                using a single username and password.\n+            </p>\n+        </div>\n+        <div class=\"island-content\">\n+            <i class=\"fa fa-envelope-o\"></i>\n+            <p class=\"instructions-sent\" th:text=\"#{'email_sent.activation'}\">\n+                Check email for an activation link\n+            </p>\n+            <input type=\"submit\" value=\"Email successfully sent\" class=\"island-button\" disabled=\"disabled\"/>\n+        </div>\n+        <div class=\"island-footer\">\n+            <a href=\"/create_account\" th:href=\"@{/create_account}\" class=\"link-lowlight\">Resend activation email</a>\n+        </div>\n+    </div>\n+</body>\n+</html>\n\\ No newline at end of file"
        },
        {
            "sha": "68111c7c50756ff49db7ad76b96d0890c2707248",
            "filename": "login/src/main/resources/templates/web/accounts/new_activation_email.html",
            "status": "added",
            "additions": 34,
            "deletions": 0,
            "changes": 34,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Faccounts%2Fnew_activation_email.html",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Faccounts%2Fnew_activation_email.html",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Faccounts%2Fnew_activation_email.html?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,34 @@\n+<!DOCTYPE html>\n+<html xmlns:th=\"http://www.thymeleaf.org\"\n+      xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n+      layout:decorator=\"layouts/main\"\n+      th:with=\"pivotal=${@environment.getProperty('login.brand') == 'pivotal'}\">\n+<head>\n+</head>\n+<body>\n+<div class=\"island-landscape\" layout:fragment=\"page-content\">\n+    <div class=\"island-title\">\n+        <h1>Create your <th:block th:text=\"${pivotal ? 'Pivotal ID' : 'account'}\">account</th:block></h1>\n+        <p th:if=\"${pivotal}\">\n+            A <strong>Pivotal ID</strong> lets you sign in to Pivotal products\n+            using a single username and password.\n+        </p>\n+    </div>\n+    <div class=\"island-content\">\n+        <form th:action=\"@{/create_account.do}\" method=\"post\" novalidate=\"novalidate\">\n+            <div th:if=\"${error_message_code}\" class=\"alert alert-error\">\n+                <p th:text=\"#{'create_account.' + ${error_message_code}}\">Error Message</p>\n+            </div>\n+            <input type=\"hidden\" name=\"client_id\" th:value=\"${client_id}\"/>\n+            <input name=\"email\" type=\"email\" placeholder=\"Enter your email\" autofocus=\"autofocus\" required=\"required\" class=\"form-control\"/>\n+            <input name=\"password\" type=\"password\" required=\"required\" placeholder=\"Password\" autocomplete=\"off\" class=\"form-control\"/>\n+            <input name=\"password_confirmation\" type=\"password\" required=\"required\" placeholder=\"Confirm\" autocomplete=\"off\" class=\"form-control\"/>\n+            <input type=\"submit\" value=\"Send activation link\" class=\"island-button\"/>\n+        </form>\n+    </div>\n+    <div class=\"island-footer\">\n+        <a href=\"/login\" th:href=\"@{/login}\" class=\"link-lowlight\">Already joined? Sign in.</a>\n+    </div>\n+</div>\n+</body>\n+</html>\n\\ No newline at end of file"
        },
        {
            "sha": "310ac6198d18459b53c1e2c675fea2baa0fe6565",
            "filename": "login/src/main/resources/templates/web/approvals.html",
            "status": "added",
            "additions": 96,
            "deletions": 0,
            "changes": 96,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Fapprovals.html",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Fapprovals.html",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Fapprovals.html?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,96 @@\n+<!DOCTYPE html>\n+<html xmlns=\"http://www.w3.org/1999/html\"\n+      xmlns:th=\"http://www.thymeleaf.org\"\n+      xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n+      xmlns:sec=\"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3\"\n+      layout:decorator=\"layouts/main\">\n+<head>\n+    <th:block layout:include=\"nav :: head\"></th:block>\n+    <script type=\"text/javascript\">\n+        $(document).ready(function() {\n+            $('.revoke-link').click(function(e) {\n+                e.preventDefault();\n+                var clientId = $(this).attr('data-client-id');\n+                $('#'+clientId+'-scrim').show();\n+            });\n+\n+            $('.revocation-cancel').click(function(e) {\n+                e.preventDefault();\n+                $(this).parents('.revocation-scrim').hide();\n+            });\n+        });\n+    </script>\n+</head>\n+<body>\n+<div class=\"header\" layout:fragment=\"page-header\">\n+    <th:block layout:include=\"nav :: nav\"></th:block>\n+</div>\n+<div class=\"panel-container\" layout:fragment=\"page-content\">\n+    <div class=\"panel\">\n+        <div th:if=\"${param.success_message_code}\" class=\"alert alert-success\">\n+            <p th:text=\"#{${param.success_message_code[0]}}\">Success Message</p>\n+        </div>\n+        <div th:if=\"${param.error_message_code}\" class=\"alert alert-error\">\n+            <p th:text=\"#{${param.error_message_code[0]}}\">Error Message</p>\n+        </div>\n+        <h1>Account Settings</h1>\n+        <div class=\"panel-content\">\n+            <h2>Profile</h2>\n+            <p class=\"profile\">\n+                <span class=\"email\" sec:authentication=\"principal.email\">user@example.com</span><a href=\"/change_email\" th:href=\"@{/change_email}\" th:if=\"${isUaaManagedUser}\">Change Email</a>\n+                <span class=\"password\">********</span><a href=\"/change_password\" th:href=\"@{/change_password}\" th:if=\"${isUaaManagedUser}\">Change Password</a>\n+            </p>\n+            <h2>Third Party Access</h2>\n+            <p th:text=\"${approvals.size() > 0 ? 'These applications have been granted access to your account.' : 'You have not yet authorized any third party applications.'}\">\n+                These applications have been granted access to your account.\n+            </p>\n+            <th:block th:each=\"client : ${approvals}\">\n+                <form action=\"/profile\" th:action=\"@{/profile}\" method=\"POST\"\n+                      th:id=\"${client.key} + '-form'\" class=\"panel-content client-scopes\">\n+                    <input type=\"hidden\" name=\"clientId\" th:value=\"${client.key}\"/>\n+                    <div class=\"application-scopes\">\n+                        <div class=\"application-label\">\n+                            <h3 th:text=\"${client.key}\">\n+                                Cloudbees\n+                            </h3><a href=\"#\" th:href=\"|revoke?client=${client.key}|\" th:attr=\"data-client-id=${client.key}\" class=\"revoke-link\">\n+                                Revoke Access\n+                            </a>\n+                        </div>\n+                        <ul>\n+                            <th:block th:each=\"approval, iter : ${client.value}\" th:with=\"code=${'scope.' + approval.scope}\">\n+                                <li>\n+                                    <input type=\"checkbox\"\n+                                           name=\"checkedScopes\"\n+                                           id=\"scope.0\"\n+                                           th:id=\"|scope.${iter.index}|\"\n+                                           th:value=\"|${approval.clientId}-${approval.scope}|\"\n+                                           th:checked=\"${approval.status.toString() == 'APPROVED'}\" />\n+                                    <label for=\"scope.0\"\n+                                           th:for=\"|scope.${iter.index}|\"\n+                                           th:utext=\"${#messages.msgOrNull(code) ?: approval.description}\">Something new.</label>\n+                                </li>\n+                            </th:block>\n+                        </ul>\n+                        <button type=\"submit\" name=\"update\" class=\"btn btn-primary\">Update</button>\n+                        <div class=\"revocation-scrim\" th:id=\"${client.key} + '-scrim'\">\n+                            <div class=\"revocation-modal\">\n+                                <div class=\"revocation-modal-header\">\n+                                    <h3>Revoke Access</h3><div class=\"close-icon revocation-cancel\">&#x2716;</div>\n+                                </div>\n+                                <p>\n+                                    Are you sure you want to revoke access to <th:block th:text=\"${client.key}\">Cloudbees</th:block>?\n+                                </p>\n+                                <div class=\"revocation-actions\">\n+                                    <button type=\"button\" class=\"revocation-cancel btn btn-lowlight\">Go Back</button>\n+                                    <button type=\"submit\" class=\"revocation-confirm btn btn-primary\" name=\"delete\">Yes</button>\n+                                </div>\n+                            </div>\n+                        </div>\n+                    </div>\n+                </form>\n+            </th:block>\n+        </div>\n+    </div>\n+</div>\n+</body>\n+</html>\n\\ No newline at end of file"
        },
        {
            "sha": "4c4b06ec1e5e7176528ca7fcd932329f76a7de7f",
            "filename": "login/src/main/resources/templates/web/change_email.html",
            "status": "added",
            "additions": 27,
            "deletions": 0,
            "changes": 27,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Fchange_email.html",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Fchange_email.html",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Fchange_email.html?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,27 @@\n+<!DOCTYPE html>\n+<html xmlns:th=\"http://www.thymeleaf.org\"\n+      xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n+      layout:decorator=\"layouts/main\">\n+<head>\n+    <th:block layout:include=\"nav :: head\"></th:block>\n+</head>\n+<body>\n+<div class=\"header\" layout:fragment=\"page-header\">\n+    <th:block layout:include=\"nav :: nav\"></th:block>\n+</div>\n+<div class=\"island\" layout:fragment=\"page-content\">\n+    <h1>Change Email</h1>\n+    <div class=\"island-content\">\n+        <div th:text=\"|Current Email Address: ${email}|\" class=\"email-display\">Current Email Address: user@example.com</div>\n+        <form th:action=\"@{/change_email.do}\" method=\"post\" novalidate=\"novalidate\">\n+            <div th:if=\"${error_message_code}\" class=\"alert alert-error\">\n+                <p th:text=\"#{'email_change.' + ${error_message_code}}\">Error Message</p>\n+            </div>\n+            <input type=\"hidden\" name=\"client_id\" th:value=\"${client_id}\"/>\n+            <input name=\"newEmail\" type=\"email\" placeholder=\"New Email Address\" autocomplete=\"off\" class=\"form-control\"/>\n+            <input type=\"submit\" value=\"Send Verification Link\" class=\"island-button\"/>\n+        </form>\n+    </div>\n+</div>\n+</body>\n+</html>\n\\ No newline at end of file"
        },
        {
            "sha": "be5492f11f9a4fab502ad4f63c913a51d1c0b0dc",
            "filename": "login/src/main/resources/templates/web/change_password.html",
            "status": "added",
            "additions": 26,
            "deletions": 0,
            "changes": 26,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Fchange_password.html",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Fchange_password.html",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Fchange_password.html?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,26 @@\n+<!DOCTYPE html>\n+<html xmlns:th=\"http://www.thymeleaf.org\"\n+      xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n+      layout:decorator=\"layouts/main\">\n+<head>\n+    <th:block layout:include=\"nav :: head\"></th:block>\n+</head>\n+<body>\n+    <div class=\"header\" layout:fragment=\"page-header\">\n+        <th:block layout:include=\"nav :: nav\"></th:block>\n+    </div>\n+    <div class=\"island\" layout:fragment=\"page-content\">\n+        <h1>Change Password</h1>\n+        <div class=\"island-content\">\n+            <form th:action=\"@{/change_password.do}\" method=\"post\" novalidate=\"novalidate\">\n+                <div th:if=\"${message}\" th:text=\"${message}\" class=\"error-message\"></div>\n+                <div th:if=\"${message_code}\" th:text=\"#{'change_password.' + ${message_code}}\" class=\"error-message\"></div>\n+                <input name=\"current_password\" type=\"password\" placeholder=\"Current password\" autocomplete=\"off\" autofocus=\"autofocus\" class=\"form-control\"/>\n+                <input name=\"new_password\" type=\"password\" placeholder=\"New password\" autocomplete=\"off\" class=\"form-control\"/>\n+                <input name=\"confirm_password\" type=\"password\" placeholder=\"Confirm new password\" autocomplete=\"off\" class=\"form-control\"/>\n+                <input type=\"submit\" value=\"Change password\" class=\"island-button\"/>\n+            </form>\n+        </div>\n+    </div>\n+</body>\n+</html>\n\\ No newline at end of file"
        },
        {
            "sha": "746e076090998617dbcfff74f63474450c37e9f8",
            "filename": "login/src/main/resources/templates/web/email_sent.html",
            "status": "added",
            "additions": 18,
            "deletions": 0,
            "changes": 18,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Femail_sent.html",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Femail_sent.html",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Femail_sent.html?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,18 @@\n+<!DOCTYPE html>\n+<html xmlns:th=\"http://www.thymeleaf.org\" xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\" layout:decorator=\"layouts/main\">\n+<head>\n+    <link rel=\"stylesheet\" href=\"/resources/font-awesome/css/font-awesome.min.css\" th:href=\"@{/resources/font-awesome/css/font-awesome.min.css}\" />\n+</head>\n+<body>\n+    <div class=\"island\" layout:fragment=\"page-content\">\n+        <h1>Instructions Sent</h1>\n+        <div class=\"island-content\">\n+            <i class=\"fa fa-envelope-o\"></i>\n+            <p class=\"instructions-sent\" th:text=\"#{'email_sent.' + ${code}}\">\n+                Check your email for instructions.\n+            </p>\n+            <a href=\"/login\" th:href=\"@{/login}\" class=\"link-lowlight\">Back to Sign In</a>\n+        </div>\n+    </div>\n+</body>\n+</html>\n\\ No newline at end of file"
        },
        {
            "sha": "04dc1d43ef6e5f744b7d2f2d675198ebf4e8cf19",
            "filename": "login/src/main/resources/templates/web/error.html",
            "status": "added",
            "additions": 19,
            "deletions": 0,
            "changes": 19,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Ferror.html",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Ferror.html",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Ferror.html?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,19 @@\n+<!DOCTYPE html>\n+<html xmlns:th=\"http://www.thymeleaf.org\" xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\" layout:decorator=\"layouts/main\">\n+<head>\n+</head>\n+<body>\n+    <div class=\"island\" layout:fragment=\"page-content\">\n+        <div class=\"island-content\">\n+            <div th:if=\"${error_message_code}\" class=\"alert alert-error\">\n+                <p th:text=\"#{${error_message_code}}\">Error Message</p>\n+            </div>\n+            <img src=\"/resources/images/sad_cloud.png\" th:src=\"@{/resources/images/sad_cloud.png}\" role=\"presentation\" />\n+        </div>\n+        <h2>\n+            Uh oh.<br />\n+            Something went amiss.\n+        </h2>\n+    </div>\n+</body>\n+</html>\n\\ No newline at end of file"
        },
        {
            "sha": "0c4110ba795afbc619d59a09a92727e349ee3c63",
            "filename": "login/src/main/resources/templates/web/forgot_password.html",
            "status": "added",
            "additions": 18,
            "deletions": 0,
            "changes": 18,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Fforgot_password.html",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Fforgot_password.html",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Fforgot_password.html?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,18 @@\n+<!DOCTYPE html>\n+<html xmlns:th=\"http://www.thymeleaf.org\" xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\" layout:decorator=\"layouts/main\">\n+<head>\n+</head>\n+<body>\n+<div class=\"island\" layout:fragment=\"page-content\">\n+    <h1>Reset Password</h1>\n+    <div class=\"island-content\">\n+        <form th:action=\"@{/forgot_password.do}\" method=\"post\" novalidate=\"novalidate\">\n+            <div th:if=\"${message_code}\" th:text=\"#{'forgot_password.' + ${message_code}}\" class=\"error-message\"></div>\n+            <input name=\"email\" type=\"email\" placeholder=\"Email\" autofocus=\"autofocus\" class=\"form-control\"/>\n+            <input type=\"submit\" value=\"Send reset password link\" class=\"forgot-password-button\"/>\n+        </form>\n+        <a href=\"/login\" th:href=\"@{/login}\" class=\"link-lowlight\">Back to Sign In</a>\n+    </div>\n+</div>\n+</body>\n+</html>\n\\ No newline at end of file"
        },
        {
            "sha": "3c4f0084b99e36170d7c91688566d97d11e868b2",
            "filename": "login/src/main/resources/templates/web/home.html",
            "status": "added",
            "additions": 24,
            "deletions": 0,
            "changes": 24,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Fhome.html",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Fhome.html",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Fhome.html?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,24 @@\n+<!DOCTYPE html>\n+<html xmlns:th=\"http://www.thymeleaf.org\"\n+      xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n+      layout:decorator=\"layouts/main\">\n+<head>\n+    <th:block layout:include=\"nav :: head\"></th:block>\n+    <style th:each=\"tile,status : ${tiles}\" th:text=\"'.tile-' + ${status.count} + ' {background-image: url(' + @{${tile.get('image')}} + ')} .tile-' + ${status.count} + ':hover {background-image: url(' + @{${tile.get('image-hover')}} + ')}'\"></style>\n+</head>\n+<body>\n+    <div class=\"header\" layout:fragment=\"page-header\">\n+        <th:block layout:include=\"nav :: nav\"></th:block>\n+    </div>\n+    <div class=\"island\" layout:fragment=\"page-content\">\n+        <h1>Where to?</h1>\n+        <ul class=\"tiles\">\n+            <li th:each=\"tile,status : ${tiles}\">\n+                <a href=\"http://network.gopivotal.com\" th:href=\"${tile.get('login-link')}\" th:text=\"${tile.get('name')}\" th:class=\"'tile-' + ${status.count}\">Pivotal Network</a>\n+            </li>\n+        </ul>\n+        <div th:each=\"tile : ${tiles}\" class=\"image-preload\" th:style=\"'background-image: url(' + @{${tile.get('image-hover')}} + ')'\"></div>\n+        <a th:unless=\"${#strings.isEmpty(invitationsLink)}\" href=\"/invitations/new\" th:href=\"@{${invitationsLink}}\">Invite Users</a>\n+    </div>\n+</body>\n+</html>\n\\ No newline at end of file"
        },
        {
            "sha": "0132293bce3421b16b040be307bd7029127b2b15",
            "filename": "login/src/main/resources/templates/web/invitations/accept_invite.html",
            "status": "added",
            "additions": 28,
            "deletions": 0,
            "changes": 28,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Finvitations%2Faccept_invite.html",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Finvitations%2Faccept_invite.html",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Finvitations%2Faccept_invite.html?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,28 @@\n+<!DOCTYPE html>\n+<html xmlns:th=\"http://www.thymeleaf.org\"\n+      xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n+      layout:decorator=\"layouts/main\"\n+      th:with=\"pivotal=${@environment.getProperty('login.brand') == 'pivotal'}\">\n+<head>\n+</head>\n+<body>\n+<div class=\"island-landscape\" layout:fragment=\"page-content\">\n+    <div class=\"island-title\">\n+        <h1>Create your <th:block th:text=\"${pivotal ? 'Pivotal ID' : 'account'}\">account</th:block></h1>\n+        <p th:if=\"${pivotal}\">A <strong>Pivotal ID</strong> lets you sign in to many Pivotal products using a single username and password.</p>\n+    </div>\n+    <div class=\"island-content\">\n+        <div th:text=\"|Email: ${email}|\" th:unless=\"${error_message_code == 'code_expired'}\" class=\"email-display\">Email: user@example.com</div>\n+        <div th:if=\"${error_message_code}\" class=\"alert alert-error\">\n+            <p th:text=\"#{'account_activation.' + ${error_message_code}}\">Error Message</p>\n+        </div>\n+        <form th:action=\"@{/invitations/accept.do}\" th:unless=\"${error_message_code == 'code_expired'}\" method=\"post\" novalidate=\"novalidate\">\n+            <input name=\"client_id\" type=\"hidden\" value=\"login\" th:value=\"${client_id}\"/>\n+            <input name=\"password\" type=\"password\" placeholder=\"Password\" autocomplete=\"off\" class=\"form-control\"/>\n+            <input name=\"password_confirmation\" type=\"password\" placeholder=\"Confirm\" autocomplete=\"off\" class=\"form-control\"/>\n+            <input type=\"submit\" th:value=\"${pivotal ? 'Create Pivotal ID' : 'Create account'}\" class=\"island-button\"/>\n+        </form>\n+    </div>\n+</div>\n+</body>\n+</html>\n\\ No newline at end of file"
        },
        {
            "sha": "037c12c3d8c705e1b171a91b42c93cb47c84e35f",
            "filename": "login/src/main/resources/templates/web/invitations/invite_sent.html",
            "status": "added",
            "additions": 18,
            "deletions": 0,
            "changes": 18,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Finvitations%2Finvite_sent.html",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Finvitations%2Finvite_sent.html",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Finvitations%2Finvite_sent.html?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,18 @@\n+<!DOCTYPE html>\n+<html xmlns:th=\"http://www.thymeleaf.org\" xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\" layout:decorator=\"layouts/main\">\n+<head>\n+    <th:block layout:include=\"nav :: head\"></th:block>\n+    <link rel=\"stylesheet\" href=\"/resources/font-awesome/css/font-awesome.min.css\" th:href=\"@{/resources/font-awesome/css/font-awesome.min.css}\" />\n+</head>\n+<body>\n+<div class=\"header\" layout:fragment=\"page-header\">\n+    <th:block layout:include=\"nav :: nav\"></th:block>\n+</div>\n+<div class=\"island\" layout:fragment=\"page-content\">\n+    <h1>Invite sent</h1>\n+    <div class=\"island-content\">\n+        <i class=\"fa fa-envelope-o\"></i>\n+    </div>\n+</div>\n+</body>\n+</html>\n\\ No newline at end of file"
        },
        {
            "sha": "604be5e23b56ef922089f9561eaae3292b4ecff3",
            "filename": "login/src/main/resources/templates/web/invitations/new_invite.html",
            "status": "added",
            "additions": 28,
            "deletions": 0,
            "changes": 28,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Finvitations%2Fnew_invite.html",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Finvitations%2Fnew_invite.html",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Finvitations%2Fnew_invite.html?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,28 @@\n+<!DOCTYPE html>\n+<html xmlns:th=\"http://www.thymeleaf.org\"\n+      xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n+      layout:decorator=\"layouts/main\"\n+      th:with=\"pivotal=${@environment.getProperty('login.brand') == 'pivotal'}\">\n+<head>\n+    <th:block layout:include=\"nav :: head\"></th:block>\n+</head>\n+<body>\n+<div class=\"header\" layout:fragment=\"page-header\">\n+    <th:block layout:include=\"nav :: nav\"></th:block>\n+</div>\n+<div class=\"island-landscape\" layout:fragment=\"page-content\">\n+    <div class=\"island-title\">\n+        <h1>Send an invite</h1>\n+    </div>\n+    <div class=\"island-content\">\n+        <form th:action=\"@{/invitations/new.do}\" method=\"post\" novalidate=\"novalidate\">\n+            <div th:if=\"${error_message_code}\" class=\"alert alert-error\">\n+                <p th:text=\"#{'new_invite.' + ${error_message_code}}\">Error Message</p>\n+            </div>\n+            <input name=\"email\" type=\"email\" placeholder=\"Enter email\" autofocus=\"autofocus\" class=\"form-control\"/>\n+            <input type=\"submit\" value=\"Send invite\" class=\"island-button\"/>\n+        </form>\n+    </div>\n+</div>\n+</body>\n+</html>\n\\ No newline at end of file"
        },
        {
            "sha": "2818f4f5c2ab7f8ab5e0c3725bb207a327daacc3",
            "filename": "login/src/main/resources/templates/web/layouts/main.html",
            "status": "added",
            "additions": 52,
            "deletions": 0,
            "changes": 52,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Flayouts%2Fmain.html",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Flayouts%2Fmain.html",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Flayouts%2Fmain.html?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,52 @@\n+<!DOCTYPE html>\n+<html xmlns:th=\"http://www.thymeleaf.org\" xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\" dir=\"ltr\" lang=\"en\" th:with=\"assetBaseUrl=${@environment.getProperty('assetBaseUrl','/resources/oss')}\">\n+<head>\n+    <title th:inline=\"text\">[[${@environment.getProperty('login.brand') == 'pivotal' ? 'Pivotal' : 'Cloud Foundry'}]]</title>\n+    <link href='/resources/pivotal/images/favicon.ico' th:href=\"@{${assetBaseUrl}+'/images/favicon.ico'}\" rel='shortcut icon' />\n+    <meta charset='utf-8' />\n+    <meta name='author' content='Pivotal Software, Inc' />\n+    <meta name='copyright' content='Copyright 2014 Pivotal Software, Inc. All Rights Reserved.' />\n+    <meta name='robots' content='all' />\n+    <meta name='Description' content=\"\"/>\n+    <meta name='keywords' content=\"\"/>\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n+    <link href=\"/vendor/font-awesome/css/font-awesome.min.css\" th:href=\"@{/vendor/font-awesome/css/font-awesome.min.css}\" rel=\"stylesheet\"/>\n+    <link href=\"/resources/pivotal/stylesheets/application.css\" th:href=\"@{${assetBaseUrl}+'/stylesheets/application.css'}\" rel=\"stylesheet\"/>\n+</head>\n+<body>\n+<div class=\"content\">\n+    <div class=\"header\" th:style=\"|background-image: url(@{${assetBaseUrl}+'/images/logo.png'});|\" layout:fragment=\"page-header\"></div>\n+    <div layout:fragment=\"page-content\"></div>\n+    <div class=\"footer-spacer\"></div>\n+</div>\n+<div class=\"footer\">\n+    <div class=\"copyright\"\n+         th:title=\"|Version: ${@buildInfo.version}, Commit: ${@buildInfo.commitId}, Timestamp: ${@buildInfo.timestamp}, UAA: ${@buildInfo.uaaUrl}|\"\n+         th:utext=\"|&#169; ${#dates.year(#dates.createNow())} Pivotal Software, Inc. All Rights Reserved.|\">\n+        &#169; 2014 Pivotal Software, Inc. All Rights Reserved.\n+    </div>\n+</div>\n+\n+<th:block th:with=\"code=${@environment.getProperty('analytics.code')},domain=${@environment.getProperty('analytics.domain')}\">\n+    <th:block th:if=\"${code} and ${domain}\">\n+        <script>\n+            (function(i, s, o, g, r, a, m) {\n+                i['GoogleAnalyticsObject'] = r;\n+                i[r] = i[r] || function() {\n+                    (i[r].q = i[r].q || []).push(arguments)\n+                }, i[r].l = 1 * new Date();\n+                a = s.createElement(o), m = s.getElementsByTagName(o)[0];\n+                a.async = 1;\n+                a.src = g;\n+                m.parentNode.insertBefore(a, m)\n+            })(window, document, 'script',\n+                    '//www.google-analytics.com/analytics.js', 'ga');\n+        </script>\n+        <script th:utext=\"|ga('create', '${code}','${domain}');|\"></script>\n+        <script>\n+            ga('send', 'pageview');\n+        </script>\n+    </th:block>\n+</th:block>\n+</body>\n+</html>\n\\ No newline at end of file"
        },
        {
            "sha": "c36615b885a46144f7d984e4f1f13af7965de268",
            "filename": "login/src/main/resources/templates/web/login.html",
            "status": "added",
            "additions": 37,
            "deletions": 0,
            "changes": 37,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Flogin.html",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Flogin.html",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Flogin.html?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,37 @@\n+<!DOCTYPE html>\n+<html xmlns:th=\"http://www.thymeleaf.org\" xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\" layout:decorator=\"layouts/main\">\n+<head>\n+</head>\n+<body>\n+    <div class=\"island\" layout:fragment=\"page-content\">\n+        <h1>Welcome!</h1>\n+        <div class=\"island-content\">\n+            <form th:action=\"@{/login.do}\" method=\"post\" novalidate=\"novalidate\">\n+                <div th:if=\"${param.error}\" class=\"alert alert-error\">\n+                    <p th:text=\"#{'login.' + ${param.error[0]}}\">Error Message</p>\n+                </div>\n+                <input th:each=\"prompt,iter : ${prompts}\"\n+                       th:name=\"${prompt.key}\"\n+                       th:type=\"${prompt.value[0]}\"\n+                       th:placeholder=\"${prompt.value[1]}\"\n+                       th:autocomplete=\"${prompt.value[0] != 'password'}\"\n+                       th:autofocus=\"${iter.index} == 0\"\n+                       class=\"form-control\"/>\n+                <input type=\"submit\" value=\"Sign in\" class=\"island-button\"/>\n+            </form>\n+\n+            <div class=\"saml-login\">\n+                <p th:if=\"${showSamlLoginLinks}\">or Sign in with: </p>\n+                <div th:each=\"idp : ${idpDefinitions}\" th:if=\"${idp.showSamlLink}\">\n+                    <a href=\"\" th:href=\"@{saml/discovery(returnIDParam=idp,entityID=${entityID},idp=${idp.idpEntityAlias},isPassive=true)}\" th:text=\"${idp.linkText}\" class=\"saml-login-link\">Use your corporate credentials</a>\n+                </div>\n+            </div>\n+            <span class=\"left\">\n+                <a th:unless=\"${#strings.isEmpty(createAccountLink)}\" href=\"/create_account\" th:href=\"@{${createAccountLink}}\" class=\"link-lowlight\">Create account</a>\n+            </span><span class=\"right\" th:unless=\"${#strings.isEmpty(links.get('passwd'))}\">\n+                <a href=\"/forgot_password\" th:href=\"${links.get('passwd')}\" class=\"link-lowlight\">Reset password</a>\n+            </span>\n+        </div>\n+    </div>\n+</body>\n+</html>\n\\ No newline at end of file"
        },
        {
            "sha": "1fede3986a1d14d467357b1bdbd5d7f2295ddcc6",
            "filename": "login/src/main/resources/templates/web/nav.html",
            "status": "added",
            "additions": 25,
            "deletions": 0,
            "changes": 25,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Fnav.html",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Fnav.html",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Fnav.html?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,25 @@\n+<!DOCTYPE html>\n+<html xmlns:th=\"http://www.thymeleaf.org\"\n+      xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n+      xmlns:sec=\"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3\">\n+<head>\n+    <th:block layout:fragment=\"head\">\n+        <script type=\"text/javascript\" src=\"/vendor/jquery/javascripts/jquery.js\" th:src=\"@{'/vendor/jquery/javascripts/jquery.js'}\"></script>\n+        <script type=\"text/javascript\" src=\"/resources/javascripts/nav.js\" th:src=\"@{'/resources/javascripts/nav.js'}\"></script>\n+    </th:block>\n+</head>\n+<body>\n+    <th:block layout:fragment=\"nav\">\n+        <div class=\"nav\">\n+            <div class=\"dropdown-trigger\">\n+                <span sec:authentication=\"name\">user@example.com</span>\n+                <i class=\"fa fa-chevron-down\"></i>\n+            </div>\n+            <ul class=\"dropdown-content\">\n+                <li><a href=\"/profile\" th:href=\"@{/profile}\">Account Settings</a></li>\n+                <li><a href=\"/logout.do\" th:href=\"@{/logout.do}\">Sign Out</a></li>\n+            </ul>\n+        </div>\n+    </th:block>\n+</body>\n+</html>\n\\ No newline at end of file"
        },
        {
            "sha": "65e7200c3b8a3e2619d96524b948946a26e4f141",
            "filename": "login/src/main/resources/templates/web/passcode.html",
            "status": "added",
            "additions": 17,
            "deletions": 0,
            "changes": 17,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Fpasscode.html",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Fpasscode.html",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Fpasscode.html?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,17 @@\n+<!DOCTYPE html>\n+<html xmlns:th=\"http://www.thymeleaf.org\"\n+      xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n+      layout:decorator=\"layouts/main\">\n+<head>\n+    <th:block layout:include=\"nav :: head\"></th:block>\n+</head>\n+<body>\n+<div class=\"header\" layout:fragment=\"page-header\">\n+    <th:block layout:include=\"nav :: nav\"></th:block>\n+</div>\n+<div class=\"island\" layout:fragment=\"page-content\">\n+    <h1>Temporary Authentication Code</h1>\n+    <h2 th:text=\"${passcode}\">my-code</h2>\n+</div>\n+</body>\n+</html>\n\\ No newline at end of file"
        },
        {
            "sha": "dd05a5fb394c3654b6c1f6d4ac8f0b17b1a4c8f1",
            "filename": "login/src/main/resources/templates/web/pivotal_links.html",
            "status": "added",
            "additions": 27,
            "deletions": 0,
            "changes": 27,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Fpivotal_links.html",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Fpivotal_links.html",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Fpivotal_links.html?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,27 @@\n+<!DOCTYPE html>\n+<html xmlns:th=\"http://www.thymeleaf.org\"\n+      xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\">\n+<head>\n+    <th:block layout:fragment=\"style\">\n+        <style th:inline=\"text\">\n+            #network-link {\n+                background-image: url([[@{/resources/pivotal/images/network-logo-gray.png}]]);\n+            }\n+\n+            #network-link:hover, #network-link-preload {\n+                background-image: url([[@{/resources/pivotal/images/network-logo-teal.png}]]);\n+            }\n+\n+            #web-services-link {\n+                background-image: url([[@{/resources/pivotal/images/pws-logo-gray.png}]]);\n+            }\n+\n+            #web-services-link:hover, #web-services-link-preload {\n+                background-image: url([[@{/resources/pivotal/images/pws-logo-teal.png}]]);\n+            }\n+        </style>\n+    </th:block>\n+</head>\n+<body>\n+</body>\n+</html>\n\\ No newline at end of file"
        },
        {
            "sha": "2f57d9ecfb7fbe685e4bad8f68eb6ddfbcd26c46",
            "filename": "login/src/main/resources/templates/web/reset_password.html",
            "status": "added",
            "additions": 23,
            "deletions": 0,
            "changes": 23,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Freset_password.html",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Freset_password.html",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fresources%2Ftemplates%2Fweb%2Freset_password.html?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,23 @@\n+<!DOCTYPE html>\n+<html xmlns:th=\"http://www.thymeleaf.org\"\n+      xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n+      layout:decorator=\"layouts/main\">\n+<head>\n+</head>\n+<body>\n+<div class=\"island\" layout:fragment=\"page-content\">\n+    <h1>Reset Password</h1>\n+    <div class=\"island-content\">\n+        <div th:text=\"|Email: ${param.email[0]}|\" class=\"email-display\">Email: user@example.com</div>\n+        <form th:action=\"@{/reset_password.do}\" method=\"post\" novalidate=\"novalidate\">\n+            <input type=\"hidden\" name=\"code\" th:value=\"${param.code[0]}\"/>\n+            <input type=\"hidden\" name=\"email\" th:value=\"${param.email[0]}\"/>\n+            <div th:if=\"${message_code}\" th:text=\"#{'reset_password.' + ${message_code}}\" class=\"error-message\"></div>\n+            <input name=\"password\" type=\"password\" placeholder=\"New Password\" autocomplete=\"off\" class=\"form-control\"/>\n+            <input name=\"password_confirmation\" type=\"password\" placeholder=\"Confirm\" autocomplete=\"off\" class=\"form-control\"/>\n+            <input type=\"submit\" value=\"Create new password\" class=\"island-button\"/>\n+        </form>\n+    </div>\n+</div>\n+</body>\n+</html>\n\\ No newline at end of file"
        },
        {
            "sha": "ced9626c30e6d23ce05b7e00c4f220038c9cfc59",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/AccountsControllerIntegrationTest.java",
            "status": "added",
            "additions": 190,
            "deletions": 0,
            "changes": 190,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAccountsControllerIntegrationTest.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAccountsControllerIntegrationTest.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAccountsControllerIntegrationTest.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,190 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import com.dumbster.smtp.SimpleSmtpServer;\n+import org.cloudfoundry.identity.uaa.authentication.Origin;\n+import org.cloudfoundry.identity.uaa.authentication.UaaPrincipal;\n+import org.cloudfoundry.identity.uaa.login.test.UaaRestTemplateBeanFactoryPostProcessor;\n+import org.cloudfoundry.identity.uaa.test.YamlServletProfileInitializerContextInitializer;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.mock.env.MockEnvironment;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContext;\n+import org.springframework.security.web.FilterChainProxy;\n+import org.springframework.security.web.context.HttpSessionSecurityContextRepository;\n+import org.springframework.test.web.client.MockRestServiceServer;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.context.support.XmlWebApplicationContext;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.not;\n+import static org.springframework.http.HttpMethod.*;\n+import static org.springframework.http.MediaType.APPLICATION_JSON;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.jsonPath;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;\n+import static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.xpath;\n+\n+public class AccountsControllerIntegrationTest {\n+\n+    XmlWebApplicationContext webApplicationContext;\n+\n+    private MockMvc mockMvc;\n+    private MockRestServiceServer mockUaaServer;\n+    private static SimpleSmtpServer mailServer;\n+\n+    @BeforeClass\n+    public static void startMailServer() throws Exception {\n+        mailServer = SimpleSmtpServer.start(2525);\n+    }\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        webApplicationContext = new XmlWebApplicationContext();\n+        webApplicationContext.setEnvironment(new MockEnvironment());\n+        new YamlServletProfileInitializerContextInitializer().initializeContext(webApplicationContext, \"login.yml\");\n+        webApplicationContext.setConfigLocation(\"file:./src/main/webapp/WEB-INF/spring-servlet.xml\");\n+        webApplicationContext.addBeanFactoryPostProcessor(new UaaRestTemplateBeanFactoryPostProcessor());\n+        webApplicationContext.refresh();\n+        FilterChainProxy springSecurityFilterChain = webApplicationContext.getBean(\"springSecurityFilterChain\", FilterChainProxy.class);\n+\n+        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext)\n+            .addFilter(springSecurityFilterChain)\n+            .build();\n+\n+        mockUaaServer = MockRestServiceServer.createServer(webApplicationContext.getBean(\"authorizationTemplate\", RestTemplate.class));\n+    }\n+\n+    @AfterClass\n+    public static void stopMailServer() throws Exception {\n+        mailServer.stop();\n+    }\n+\n+    @Test\n+    public void testCreateActivationEmailPage() throws Exception {\n+        ((MockEnvironment) webApplicationContext.getEnvironment()).setProperty(\"login.brand\", \"oss\");\n+\n+        mockMvc.perform(get(\"/create_account.do\"))\n+                .andExpect(content().string(containsString(\"Create your account\")))\n+                .andExpect(content().string(not(containsString(\"Pivotal ID\"))));\n+    }\n+\n+    @Test\n+    public void testCreateActivationEmailPageWithPivotalBrand() throws Exception {\n+        ((MockEnvironment) webApplicationContext.getEnvironment()).setProperty(\"login.brand\", \"pivotal\");\n+\n+        mockMvc.perform(get(\"/create_account.do\"))\n+            .andExpect(content().string(containsString(\"Create your Pivotal ID\")))\n+            .andExpect(content().string(not(containsString(\"Create your account\"))));\n+    }\n+\n+    @Test\n+    public void testActivationEmailSentPage() throws Exception {\n+        ((MockEnvironment) webApplicationContext.getEnvironment()).setProperty(\"login.brand\", \"oss\");\n+\n+        mockMvc.perform(get(\"/accounts/email_sent\"))\n+                .andExpect(status().isOk())\n+                .andExpect(content().string(containsString(\"Create your account\")))\n+                .andExpect(xpath(\"//input[@disabled='disabled']/@value\").string(\"Email successfully sent\"))\n+                .andExpect(content().string(not(containsString(\"Pivotal ID\"))));\n+    }\n+\n+    @Test\n+    public void testActivationEmailSentPageWithPivotalBrand() throws Exception {\n+        ((MockEnvironment) webApplicationContext.getEnvironment()).setProperty(\"login.brand\", \"pivotal\");\n+\n+        mockMvc.perform(get(\"/accounts/email_sent\"))\n+                .andExpect(status().isOk())\n+                .andExpect(content().string(containsString(\"Create your Pivotal ID\")))\n+                .andExpect(xpath(\"//input[@disabled='disabled']/@value\").string(\"Email successfully sent\"))\n+                .andExpect(content().string(not(containsString(\"Create your account\"))));\n+    }\n+\n+    @Test\n+    public void testCreatingAnAccount() throws Exception {\n+        String scimUserJSONString = \"{\" +\n+            \"\\\"userName\\\": \\\"user@example.com\\\",\" +\n+            \"\\\"id\\\": \\\"newly-created-user-id\\\",\" +\n+            \"\\\"emails\\\": [{\\\"value\\\":\\\"user@example.com\\\"}]\" +\n+            \"}\";\n+        mockUaaServer.expect(requestTo(\"http://localhost:8080/uaa/Users\"))\n+            .andExpect(method(POST))\n+            .andExpect(jsonPath(\"$.userName\").value(\"user@example.com\"))\n+            .andExpect(jsonPath(\"$.password\").value(\"secret\"))\n+            .andExpect(jsonPath(\"$.origin\").value(\"uaa\"))\n+            .andExpect(jsonPath(\"$.verified\").value(false))\n+            .andExpect(jsonPath(\"$.emails[0].value\").value(\"user@example.com\"))\n+            .andRespond(withSuccess(scimUserJSONString, APPLICATION_JSON));\n+\n+        mockUaaServer.expect(requestTo(\"http://localhost:8080/uaa/Codes\"))\n+                .andExpect(method(HttpMethod.POST))\n+                .andRespond(withSuccess(\"{\\\"code\\\":\\\"the_secret_code\\\",\" +\n+                                \"\\\"expiresAt\\\":1406152741265,\" +\n+                                \"\\\"data\\\":\\\"{\\\\\\\"user_id\\\\\\\":\\\\\\\"newly-created-user-id\\\\\\\",\\\\\\\"client_id\\\\\\\":\\\\\\\"app\\\\\\\"}\\\"}\",\n+                        APPLICATION_JSON));\n+\n+        String uaaResponseJson = \"{\" +\n+            \"    \\\"code\\\":\\\"the_secret_code\\\",\" +\n+            \"    \\\"expiresAt\\\":1406152741265,\" +\n+            \"    \\\"data\\\":\\\"{\\\\\\\"user_id\\\\\\\":\\\\\\\"newly-created-user-id\\\\\\\",\\\\\\\"client_id\\\\\\\":\\\\\\\"app\\\\\\\"}\\\"\" +\n+            \"}\";\n+        mockUaaServer.expect(requestTo(\"http://localhost:8080/uaa/Codes/the_secret_code\"))\n+            .andExpect(method(GET))\n+            .andRespond(withSuccess(uaaResponseJson, APPLICATION_JSON));\n+\n+        mockUaaServer.expect(requestTo(\"http://localhost:8080/uaa/Users/newly-created-user-id/verify\"))\n+            .andExpect(method(GET))\n+            .andRespond(withSuccess(scimUserJSONString, APPLICATION_JSON));\n+\n+        Map<String,Object> additionalInformation = new HashMap<>();\n+        additionalInformation.put(\"signup_redirect_url\", \"http://example.com/redirect\");\n+\n+        String clientDetails = \"{\" +\n+            \"\\\"client_id\\\": \\\"app\\\",\" +\n+            \"\\\"signup_redirect_url\\\": \\\"http://example.com/redirect\\\"\" +\n+            \"}\";\n+        mockUaaServer.expect(requestTo(\"http://localhost:8080/uaa/oauth/clients/app\"))\n+            .andExpect(method(GET))\n+            .andRespond(withSuccess(clientDetails, APPLICATION_JSON));\n+\n+        mockMvc.perform(post(\"/create_account.do\")\n+                    .param(\"email\", \"user@example.com\")\n+                    .param(\"password\", \"secret\")\n+                    .param(\"password_confirmation\", \"secret\")\n+                    .param(\"client_id\", \"app\"))\n+                .andExpect(status().isFound())\n+                .andExpect(redirectedUrl(\"accounts/email_sent\"));\n+\n+        MvcResult mvcResult = mockMvc.perform(get(\"/verify_user\")\n+                .param(\"code\", \"the_secret_code\"))\n+            .andExpect(status().isFound())\n+            .andExpect(redirectedUrl(\"http://example.com/redirect\"))\n+            .andReturn();\n+\n+        SecurityContext securityContext = (SecurityContext) mvcResult.getRequest().getSession().getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);\n+        Authentication authentication = securityContext.getAuthentication();\n+        Assert.assertThat(authentication.getPrincipal(), instanceOf(UaaPrincipal.class));\n+        UaaPrincipal principal = (UaaPrincipal) authentication.getPrincipal();\n+        Assert.assertThat(principal.getId(), equalTo(\"newly-created-user-id\"));\n+        Assert.assertThat(principal.getEmail(), equalTo(\"user@example.com\"));\n+        Assert.assertThat(principal.getOrigin(), equalTo(Origin.UAA));\n+    }\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "ae5782313451bec0ab95f564aac764ac9b4053f5",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/AccountsControllerTest.java",
            "status": "added",
            "additions": 228,
            "deletions": 0,
            "changes": 228,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAccountsControllerTest.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAccountsControllerTest.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FAccountsControllerTest.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,228 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.cloudfoundry.identity.uaa.authentication.UaaPrincipal;\n+import org.cloudfoundry.identity.uaa.error.UaaException;\n+import org.cloudfoundry.identity.uaa.login.test.ThymeleafConfig;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.support.ResourceBundleMessageSource;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.web.context.WebApplicationContext;\n+import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;\n+import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.doThrow;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@WebAppConfiguration\n+@ContextConfiguration(classes = AccountsControllerTest.ContextConfiguration.class)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)\n+public class AccountsControllerTest {\n+\n+    @Autowired\n+    WebApplicationContext webApplicationContext;\n+\n+    @Autowired\n+    AccountCreationService accountCreationService;\n+\n+    private MockMvc mockMvc;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext)\n+                .build();\n+    }\n+\n+    @Test\n+    public void testNewAccountPage() throws Exception {\n+        mockMvc.perform(get(\"/create_account\").param(\"client_id\", \"app\"))\n+                .andExpect(status().isOk())\n+                .andExpect(model().attribute(\"client_id\", \"app\"))\n+                .andExpect(view().name(\"accounts/new_activation_email\"));\n+    }\n+\n+    @Test\n+    public void testSendActivationEmail() throws Exception {\n+        MockHttpServletRequestBuilder post = post(\"/create_account.do\")\n+            .param(\"email\", \"user1@example.com\")\n+            .param(\"password\", \"password\")\n+            .param(\"password_confirmation\", \"password\")\n+            .param(\"client_id\", \"app\");\n+\n+        mockMvc.perform(post)\n+            .andExpect(status().isFound())\n+            .andExpect(redirectedUrl(\"accounts/email_sent\"));\n+\n+        Mockito.verify(accountCreationService).beginActivation(\"user1@example.com\", \"password\", \"app\");\n+    }\n+\n+    @Test\n+    public void testSendActivationEmailWithUserNameConflict() throws Exception {\n+        doThrow(new UaaException(\"username already exists\", 409)).when(accountCreationService).beginActivation(\"user1@example.com\", \"password\", \"app\");\n+\n+        MockHttpServletRequestBuilder post = post(\"/create_account.do\")\n+            .param(\"email\", \"user1@example.com\")\n+            .param(\"password\", \"password\")\n+            .param(\"password_confirmation\", \"password\")\n+            .param(\"client_id\", \"app\");\n+\n+        mockMvc.perform(post)\n+            .andExpect(status().isUnprocessableEntity())\n+            .andExpect(view().name(\"accounts/new_activation_email\"))\n+            .andExpect(model().attribute(\"error_message_code\", \"username_exists\"));\n+\n+        Mockito.verify(accountCreationService).beginActivation(\"user1@example.com\", \"password\", \"app\");\n+    }\n+\n+    @Test\n+    public void testInvalidEmail() throws Exception {\n+        MockHttpServletRequestBuilder post = post(\"/create_account.do\")\n+            .param(\"email\", \"wrong\")\n+            .param(\"password\", \"password\")\n+            .param(\"password_confirmation\", \"password\")\n+            .param(\"client_id\", \"app\");\n+\n+        mockMvc.perform(post)\n+            .andExpect(status().isUnprocessableEntity())\n+            .andExpect(view().name(\"accounts/new_activation_email\"))\n+            .andExpect(model().attribute(\"error_message_code\", \"invalid_email\"));\n+    }\n+\n+    @Test\n+    public void testPasswordMismatch() throws Exception {\n+        MockHttpServletRequestBuilder post = post(\"/create_account.do\")\n+            .param(\"email\", \"user1@example.com\")\n+            .param(\"password\", \"pass\")\n+            .param(\"password_confirmation\", \"word\")\n+            .param(\"client_id\", \"app\");\n+\n+        mockMvc.perform(post)\n+            .andExpect(status().isUnprocessableEntity())\n+            .andExpect(view().name(\"accounts/new_activation_email\"))\n+            .andExpect(model().attribute(\"error_message_code\", \"form_error\"));\n+    }\n+\n+\n+    @Test\n+    public void testVerifyUser() throws Exception {\n+        Mockito.when(accountCreationService.completeActivation(\"the_secret_code\"))\n+            .thenReturn(new AccountCreationService.AccountCreationResponse(\"newly-created-user-id\", \"username\", \"user@example.com\", \"//example.com/callback\"));\n+\n+        MockHttpServletRequestBuilder get = get(\"/verify_user\")\n+                .param(\"code\", \"the_secret_code\");\n+\n+        mockMvc.perform(get)\n+                .andExpect(status().isFound())\n+                .andExpect(redirectedUrl(\"//example.com/callback\"));\n+\n+        UaaPrincipal principal = ((UaaPrincipal) SecurityContextHolder.getContext().getAuthentication().getPrincipal());\n+        assertEquals(\"newly-created-user-id\", principal.getId());\n+        assertEquals(\"username\", principal.getName());\n+        assertEquals(\"user@example.com\", principal.getEmail());\n+    }\n+\n+    @Test\n+    public void testCreateAccountWithNoRedirectUrl() throws Exception {\n+        Mockito.when(accountCreationService.completeActivation(\"the_secret_code\"))\n+            .thenReturn(new AccountCreationService.AccountCreationResponse(\"newly-created-user-id\", \"username\", \"user@example.com\", null));\n+\n+        MockHttpServletRequestBuilder get = get(\"/verify_user\")\n+            .param(\"code\", \"the_secret_code\");\n+\n+        mockMvc.perform(get)\n+            .andExpect(status().isFound())\n+            .andExpect(redirectedUrl(\"home\"));\n+\n+        UaaPrincipal principal = ((UaaPrincipal) SecurityContextHolder.getContext().getAuthentication().getPrincipal());\n+        assertEquals(\"newly-created-user-id\", principal.getId());\n+        assertEquals(\"username\", principal.getName());\n+        assertEquals(\"user@example.com\", principal.getEmail());\n+    }\n+//\n+//\n+//    @Test\n+//    public void testCreateAccountWithExpiredActivationCode() throws Exception {\n+//        Mockito.when(accountCreationService.completeActivation(\"expired_code\", \"secret\"))\n+//                .thenThrow(new HttpClientErrorException(BAD_REQUEST));\n+//\n+//        MockHttpServletRequestBuilder post = post(\"/accounts\")\n+//                .param(\"email\", \"user@example.com\")\n+//                .param(\"code\", \"expired_code\")\n+//                .param(\"password\", \"secret\")\n+//                .param(\"password_confirmation\", \"secret\");\n+//\n+//        mockMvc.perform(post)\n+//                .andExpect(status().isUnprocessableEntity())\n+//                .andExpect(model().attribute(\"message_code\", \"code_expired\"))\n+//                .andExpect(view().name(\"accounts/new\"))\n+//                .andExpect(xpath(\"//*[@class='error-message']\").string(\"Your activation code has expired. Please request another.\"));\n+//    }\n+\n+\n+    @Configuration\n+    @EnableWebMvc\n+    @Import(ThymeleafConfig.class)\n+    static class ContextConfiguration extends WebMvcConfigurerAdapter {\n+\n+        @Override\n+        public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {\n+            configurer.enable();\n+        }\n+\n+        @Bean\n+        BuildInfo buildInfo() {\n+            return new BuildInfo();\n+        }\n+\n+        @Bean\n+        public ResourceBundleMessageSource messageSource() {\n+            ResourceBundleMessageSource resourceBundleMessageSource = new ResourceBundleMessageSource();\n+            resourceBundleMessageSource.setBasename(\"messages\");\n+            return resourceBundleMessageSource;\n+        }\n+\n+        @Bean\n+        AccountCreationService accountCreationService() {\n+            return Mockito.mock(AccountCreationService.class);\n+        }\n+\n+        @Bean\n+        AccountsController accountsController(AccountCreationService accountCreationService) {\n+            return new AccountsController(accountCreationService);\n+        }\n+    }\n+}"
        },
        {
            "sha": "c035ad4d5e2397009901df8ab13d71ed79230222",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/BootstrapTests.java",
            "status": "added",
            "additions": 198,
            "deletions": 0,
            "changes": 198,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FBootstrapTests.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FBootstrapTests.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FBootstrapTests.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,198 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.apache.commons.httpclient.contrib.ssl.EasySSLProtocolSocketFactory;\n+import org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory;\n+import org.cloudfoundry.identity.uaa.config.YamlPropertiesFactoryBean;\n+import org.cloudfoundry.identity.uaa.login.saml.IdentityProviderConfigurator;\n+import org.cloudfoundry.identity.uaa.login.saml.IdentityProviderDefinition;\n+import org.junit.After;\n+import org.junit.Assume;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.context.support.GenericXmlApplicationContext;\n+import org.springframework.core.env.PropertiesPropertySource;\n+import org.springframework.core.io.FileSystemResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.security.saml.log.SAMLDefaultLogger;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.servlet.ViewResolver;\n+\n+import java.io.File;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Scanner;\n+import java.util.Set;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+/**\n+ * @author Dave Syer\n+ * \n+ */\n+public class BootstrapTests {\n+\n+    private GenericXmlApplicationContext context;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        System.clearProperty(\"spring.profiles.active\");\n+    }\n+\n+    @After\n+    public void cleanup() throws Exception {\n+        System.clearProperty(\"spring.profiles.active\");\n+        if (context != null) {\n+            context.close();\n+        }\n+        Set<String> removeme = new HashSet<>();\n+        for ( Map.Entry<Object,Object> entry : System.getProperties().entrySet()) {\n+            if (entry.getKey().toString().startsWith(\"login.\")) {\n+                removeme.add(entry.getKey().toString());\n+            }\n+        }\n+        for (String s : removeme) {\n+            System.clearProperty(s);\n+        }\n+    }\n+\n+    @Test\n+    public void testRootContextDefaults() throws Exception {\n+        context = getServletContext(null, \"./src/main/resources/login.yml\", \"file:./src/main/webapp/WEB-INF/spring-servlet.xml\");\n+        assertNotNull(context.getBean(\"viewResolver\", ViewResolver.class));\n+        assertNotNull(context.getBean(\"resetPasswordController\", ResetPasswordController.class));\n+    }\n+\n+    @Test\n+    public void testSamlProfileNoData() throws Exception {\n+        System.setProperty(\"login.saml.metadataTrustCheck\", \"false\");\n+        context = getServletContext(\"default\", \"./src/main/resources/login.yml\", \"file:./src/main/webapp/WEB-INF/spring-servlet.xml\");\n+        Assume.assumeTrue(context.getEnvironment().getProperty(\"login.idpMetadataURL\")==null);\n+        assertNotNull(context.getBean(\"viewResolver\", ViewResolver.class));\n+        assertNotNull(context.getBean(\"samlLogger\", SAMLDefaultLogger.class));\n+        assertFalse(context.getBean(IdentityProviderConfigurator.class).isLegacyMetadataTrustCheck());\n+        assertEquals(0, context.getBean(IdentityProviderConfigurator.class).getIdentityProviderDefinitions().size());\n+    }\n+\n+    @Test\n+    public void testLegacySamlHttpMetaUrl() throws Exception {\n+        System.setProperty(\"login.saml.metadataTrustCheck\", \"false\");\n+        System.setProperty(\"login.idpMetadataURL\", \"http://localhost:9696/nodata\");\n+        System.setProperty(\"login.idpEntityAlias\", \"testIDPFile\");\n+\n+        context = getServletContext(\"default\", \"./src/main/resources/login.yml\", \"file:./src/main/webapp/WEB-INF/spring-servlet.xml\");\n+        assertNotNull(context.getBean(\"viewResolver\", ViewResolver.class));\n+        assertNotNull(context.getBean(\"samlLogger\", SAMLDefaultLogger.class));\n+        assertFalse(context.getBean(IdentityProviderConfigurator.class).isLegacyMetadataTrustCheck());\n+        assertEquals(\n+            DefaultProtocolSocketFactory.class.getName(),\n+            context.getBean(IdentityProviderConfigurator.class).getIdentityProviderDefinitions().get(0).getSocketFactoryClassName()\n+        );\n+        assertEquals(\n+            IdentityProviderDefinition.MetadataLocation.URL,\n+            context.getBean(IdentityProviderConfigurator.class).getIdentityProviderDefinitions().get(0).getType()\n+        );\n+\n+    }\n+\n+    @Test\n+    public void testLegacySamlProfileMetadataFile() throws Exception {\n+        System.setProperty(\"login.idpMetadataFile\", \"./src/test/resources/test.saml.metadata\");\n+        System.setProperty(\"login.idpEntityAlias\", \"testIDPFile\");\n+        System.setProperty(\"login.saml.metadataTrustCheck\", \"false\");\n+        context = getServletContext(\"saml,fileMetadata\", \"./src/main/resources/login.yml\", \"file:./src/main/webapp/WEB-INF/spring-servlet.xml\");\n+        assertNotNull(context.getBean(\"viewResolver\", ViewResolver.class));\n+        assertNotNull(context.getBean(\"samlLogger\", SAMLDefaultLogger.class));\n+        assertFalse(context.getBean(IdentityProviderConfigurator.class).isLegacyMetadataTrustCheck());\n+        assertEquals(\n+            IdentityProviderDefinition.MetadataLocation.FILE,\n+            context.getBean(IdentityProviderConfigurator.class).getIdentityProviderDefinitions().get(0).getType());\n+    }\n+\n+    @Test\n+    public void testLegacySamlProfileMetadataConfig() throws Exception {\n+        String metadataString = new Scanner(new File(\"./src/main/resources/sample-okta-localhost.xml\")).useDelimiter(\"\\\\Z\").next();\n+        System.setProperty(\"login.idpMetadata\", metadataString);\n+        System.setProperty(\"login.idpEntityAlias\", \"testIDPData\");\n+        context = getServletContext(\"saml,configMetadata\", \"./src/main/resources/login.yml\", \"file:./src/main/webapp/WEB-INF/spring-servlet.xml\");\n+        assertEquals(\n+            IdentityProviderDefinition.MetadataLocation.DATA,\n+            context.getBean(IdentityProviderConfigurator.class).getIdentityProviderDefinitions().get(0).getType());\n+    }\n+\n+\n+    @Test\n+    public void testLegacySamlProfileHttpsMetaUrl() throws Exception {\n+        System.setProperty(\"login.saml.metadataTrustCheck\", \"false\");\n+        System.setProperty(\"login.idpMetadataURL\", \"https://localhost:9696/nodata\");\n+        System.setProperty(\"login.idpEntityAlias\", \"testIDPUrl\");\n+\n+        context = getServletContext(\"default\", \"./src/main/resources/login.yml\", \"file:./src/main/webapp/WEB-INF/spring-servlet.xml\");\n+        assertNotNull(context.getBean(\"viewResolver\", ViewResolver.class));\n+        assertNotNull(context.getBean(\"samlLogger\", SAMLDefaultLogger.class));\n+        assertFalse(context.getBean(IdentityProviderConfigurator.class).isLegacyMetadataTrustCheck());\n+        assertEquals(\n+            EasySSLProtocolSocketFactory.class.getName(),\n+            context.getBean(IdentityProviderConfigurator.class).getIdentityProviderDefinitions().get(0).getSocketFactoryClassName()\n+        );\n+        assertEquals(\n+            IdentityProviderDefinition.MetadataLocation.URL,\n+            context.getBean(IdentityProviderConfigurator.class).getIdentityProviderDefinitions().get(0).getType()\n+        );\n+    }\n+\n+    @Test\n+    public void testMessageService() throws Exception {\n+        context = getServletContext(\"default\", \"./src/main/resources/login.yml\", \"file:./src/main/webapp/WEB-INF/spring-servlet.xml\");\n+        Object messageService = context.getBean(\"messageService\");\n+        assertNotNull(messageService);\n+        assertEquals(EmailService.class, messageService.getClass());\n+\n+        System.setProperty(\"notifications.url\", \"\");\n+        context = getServletContext(\"default\", \"./src/main/resources/login.yml\", \"file:./src/main/webapp/WEB-INF/spring-servlet.xml\");\n+        messageService = context.getBean(\"messageService\");\n+        assertNotNull(messageService);\n+        assertEquals(EmailService.class, messageService.getClass());\n+\n+        System.setProperty(\"notifications.url\", \"example.com\");\n+        context = getServletContext(\"default\", \"./src/main/resources/login.yml\", \"file:./src/main/webapp/WEB-INF/spring-servlet.xml\");\n+        messageService = context.getBean(\"messageService\");\n+        assertNotNull(messageService);\n+        assertEquals(NotificationsService.class, messageService.getClass());\n+    }\n+\n+    private GenericXmlApplicationContext getServletContext(String profiles, String loginYmlPath, String... resources) {\n+        GenericXmlApplicationContext context = new GenericXmlApplicationContext();\n+\n+        if (profiles != null) {\n+            context.getEnvironment().setActiveProfiles(StringUtils.commaDelimitedListToStringArray(profiles));\n+        }\n+\n+        context.load(resources);\n+\n+        // Simulate what happens in the webapp when the\n+        // YamlServletProfileInitializer kicks in\n+        YamlPropertiesFactoryBean factory = new YamlPropertiesFactoryBean();\n+        factory.setResources(new Resource[] { new FileSystemResource(loginYmlPath) });\n+        context.getEnvironment().getPropertySources()\n+                        .addLast(new PropertiesPropertySource(\"servletProperties\", factory.getObject()));\n+\n+        context.refresh();\n+\n+        return context;\n+    }\n+}"
        },
        {
            "sha": "d6b1ba30d8c196844335a5b02d43ff86850495d1",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/ChangeEmailControllerTest.java",
            "status": "added",
            "additions": 227,
            "deletions": 0,
            "changes": 227,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangeEmailControllerTest.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangeEmailControllerTest.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangeEmailControllerTest.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,227 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.cloudfoundry.identity.uaa.authentication.Origin;\n+import org.cloudfoundry.identity.uaa.authentication.UaaAuthentication;\n+import org.cloudfoundry.identity.uaa.authentication.UaaPrincipal;\n+import org.cloudfoundry.identity.uaa.error.UaaException;\n+import org.cloudfoundry.identity.uaa.user.UaaAuthority;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.springframework.security.authentication.AnonymousAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.authority.AuthorityUtils;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.web.servlet.view.InternalResourceViewResolver;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.http.MediaType.APPLICATION_FORM_URLENCODED;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;\n+\n+public class ChangeEmailControllerTest {\n+\n+    private MockMvc mockMvc;\n+    private ChangeEmailService changeEmailService;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        changeEmailService = Mockito.mock(ChangeEmailService.class);\n+        ChangeEmailController controller = new ChangeEmailController(changeEmailService);\n+\n+        InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();\n+        viewResolver.setPrefix(\"/WEB-INF/jsp\");\n+        viewResolver.setSuffix(\".jsp\");\n+        mockMvc = MockMvcBuilders\n+            .standaloneSetup(controller)\n+            .setViewResolvers(viewResolver)\n+            .build();\n+    }\n+\n+    @Test\n+    public void testChangeEmailPage() throws Exception {\n+        setupSecurityContext();\n+\n+        mockMvc.perform(get(\"/change_email\"))\n+            .andExpect(status().isOk())\n+            .andExpect(view().name(\"change_email\"))\n+            .andExpect(model().attribute(\"email\", \"user@example.com\"));\n+    }\n+\n+    @Test\n+    public void testChangeEmailPageWithClientId() throws Exception {\n+        setupSecurityContext();\n+\n+        mockMvc.perform(get(\"/change_email?client_id=app\"))\n+            .andExpect(status().isOk())\n+            .andExpect(view().name(\"change_email\"))\n+            .andExpect(model().attribute(\"client_id\", \"app\"))\n+            .andExpect(model().attribute(\"email\", \"user@example.com\"));\n+    }\n+\n+    @Test\n+    public void testChangeEmail() throws Exception {\n+        setupSecurityContext();\n+\n+        MockHttpServletRequestBuilder post = post(\"/change_email.do\")\n+            .contentType(APPLICATION_FORM_URLENCODED)\n+            .param(\"newEmail\", \"new@example.com\")\n+            .param(\"client_id\", \"app\");\n+\n+        mockMvc.perform(post)\n+            .andExpect(status().isFound())\n+            .andExpect(redirectedUrl(\"email_sent?code=email_change\"));\n+\n+        Mockito.verify(changeEmailService).beginEmailChange(\"user-id-001\", \"bob\", \"new@example.com\", \"app\");\n+    }\n+\n+    @Test\n+    public void testChangeEmailWithUsernameConflict() throws Exception {\n+        setupSecurityContext();\n+\n+        doThrow(new UaaException(\"username already exists\", 409)).when(changeEmailService).beginEmailChange(\"user-id-001\", \"bob\", \"new@example.com\", \"\");\n+\n+        MockHttpServletRequestBuilder post = post(\"/change_email.do\")\n+            .contentType(APPLICATION_FORM_URLENCODED)\n+            .param(\"newEmail\", \"new@example.com\")\n+            .param(\"client_id\", \"\");\n+\n+        mockMvc.perform(post)\n+            .andExpect(status().isUnprocessableEntity())\n+            .andExpect(view().name(\"change_email\"))\n+            .andExpect(model().attribute(\"error_message_code\", \"username_exists\"))\n+            .andExpect(model().attribute(\"email\", \"user@example.com\"));\n+    }\n+\n+    @Test\n+    public void testNonUAAOriginUser() throws Exception {\n+        Authentication authentication = new UaaAuthentication(\n+            new UaaPrincipal(\"user-id-001\", \"bob\", \"user@example.com\", \"NON-UAA-origin \", null),\n+            Arrays.asList(UaaAuthority.UAA_USER),\n+            null\n+        );\n+\n+        SecurityContextHolder.getContext().setAuthentication(authentication);\n+        MockHttpServletRequestBuilder post = post(\"/change_email.do\")\n+            .contentType(APPLICATION_FORM_URLENCODED)\n+            .param(\"newEmail\", \"new@example.com\")\n+            .param(\"client_id\", \"app\");\n+\n+        mockMvc.perform(post)\n+            .andExpect(status().isFound())\n+            .andExpect(redirectedUrl(\"profile?error_message_code=email_change.non-uaa-origin\"));\n+\n+        Mockito.verifyZeroInteractions(changeEmailService);\n+\n+    }\n+\n+    @Test\n+    public void testInvalidEmail() throws Exception {\n+        setupSecurityContext();\n+\n+        MockHttpServletRequestBuilder post = post(\"/change_email.do\")\n+            .contentType(APPLICATION_FORM_URLENCODED)\n+            .param(\"newEmail\", \"invalid\")\n+            .param(\"client_id\", \"app\");\n+\n+        mockMvc.perform(post)\n+            .andExpect(status().isUnprocessableEntity())\n+            .andExpect(view().name(\"change_email\"))\n+            .andExpect(model().attribute(\"error_message_code\", \"invalid_email\"))\n+            .andExpect(model().attribute(\"email\", \"user@example.com\"));\n+    }\n+\n+    @Test\n+    public void testVerifyEmail() throws Exception {\n+        Map<String,String> response = new HashMap<>();\n+        response.put(\"userId\", \"user-id-001\");\n+        response.put(\"username\", \"new@example.com\");\n+        response.put(\"email\", \"new@example.com\");\n+        when(changeEmailService.completeVerification(\"the_secret_code\")).thenReturn(response);\n+\n+        MockHttpServletRequestBuilder get = get(\"/verify_email\")\n+            .contentType(APPLICATION_FORM_URLENCODED)\n+            .param(\"code\", \"the_secret_code\");\n+\n+        mockMvc.perform(get)\n+            .andExpect(status().isFound())\n+            .andExpect(redirectedUrl(\"profile?success_message_code=email_change.success\"));\n+\n+        UaaPrincipal principal = ((UaaPrincipal) SecurityContextHolder.getContext().getAuthentication().getPrincipal());\n+        Assert.assertEquals(\"user-id-001\", principal.getId());\n+        Assert.assertEquals(\"new@example.com\", principal.getName());\n+        Assert.assertEquals(\"new@example.com\", principal.getEmail());\n+    }\n+\n+    @Test\n+    public void testVerifyEmailWithRedirectUrl() throws Exception {\n+        Map<String,String> response = new HashMap<>();\n+        response.put(\"userId\", \"user-id-001\");\n+        response.put(\"username\", \"new@example.com\");\n+        response.put(\"email\", \"new@example.com\");\n+        response.put(\"redirect_url\", \"//example.com/callback\");\n+        when(changeEmailService.completeVerification(\"the_secret_code\")).thenReturn(response);\n+\n+        MockHttpServletRequestBuilder get = get(\"/verify_email\")\n+            .contentType(APPLICATION_FORM_URLENCODED)\n+            .param(\"code\", \"the_secret_code\");\n+\n+        mockMvc.perform(get)\n+            .andExpect(status().isFound())\n+            .andExpect(redirectedUrl(\"//example.com/callback\"));\n+\n+        UaaPrincipal principal = ((UaaPrincipal) SecurityContextHolder.getContext().getAuthentication().getPrincipal());\n+        Assert.assertEquals(\"user-id-001\", principal.getId());\n+        Assert.assertEquals(\"new@example.com\", principal.getName());\n+        Assert.assertEquals(\"new@example.com\", principal.getEmail());\n+\n+    }\n+\n+    @Test\n+    public void testVerifyEmailWithInvalidCode() throws Exception {\n+        Authentication authentication = new AnonymousAuthenticationToken(\n+            \"anon\",\n+            \"anonymousUser\",\n+            AuthorityUtils.createAuthorityList(\"ROLE_ANONYMOUS\")\n+        );\n+        SecurityContextHolder.getContext().setAuthentication(authentication);\n+\n+        when(changeEmailService.completeVerification(\"the_secret_code\")).thenThrow(new UaaException(\"Bad Request\", 400));\n+        MockHttpServletRequestBuilder get = get(\"/verify_email\")\n+            .contentType(APPLICATION_FORM_URLENCODED)\n+            .param(\"code\", \"the_secret_code\");\n+\n+        mockMvc.perform(get)\n+            .andExpect(status().isUnprocessableEntity())\n+            .andExpect(view().name(\"error\"));\n+\n+        setupSecurityContext();\n+\n+        mockMvc.perform(get)\n+            .andExpect(status().isFound())\n+            .andExpect(redirectedUrl(\"profile?error_message_code=email_change.invalid_code\"));\n+    }\n+\n+    private void setupSecurityContext() {\n+        Authentication authentication = new UaaAuthentication(\n+            new UaaPrincipal(\"user-id-001\", \"bob\", \"user@example.com\", Origin.UAA, null),\n+            Arrays.asList(UaaAuthority.UAA_USER),\n+            null\n+        );\n+\n+        SecurityContextHolder.getContext().setAuthentication(authentication);\n+    }\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "82eb8d1dea9262e11336beef4f5c87120554f910",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/ChangePasswordControllerTest.java",
            "status": "added",
            "additions": 125,
            "deletions": 0,
            "changes": 125,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangePasswordControllerTest.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangePasswordControllerTest.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangePasswordControllerTest.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,125 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import static org.springframework.http.MediaType.APPLICATION_FORM_URLENCODED;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;\n+\n+import org.cloudfoundry.identity.uaa.user.UaaAuthority;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.web.client.RestClientException;\n+import org.springframework.web.servlet.view.InternalResourceViewResolver;\n+\n+import java.util.Arrays;\n+\n+public class ChangePasswordControllerTest {\n+    private MockMvc mockMvc;\n+    private ChangePasswordService changePasswordService;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        changePasswordService = Mockito.mock(ChangePasswordService.class);\n+        ChangePasswordController controller = new ChangePasswordController(changePasswordService);\n+\n+        InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();\n+        viewResolver.setPrefix(\"/WEB-INF/jsp\");\n+        viewResolver.setSuffix(\".jsp\");\n+        mockMvc = MockMvcBuilders\n+                .standaloneSetup(controller)\n+                .setViewResolvers(viewResolver)\n+                .build();\n+    }\n+\n+    @Test\n+    public void testChangePasswordPage() throws Exception {\n+        mockMvc.perform(get(\"/change_password\"))\n+                .andExpect(status().isOk())\n+                .andExpect(view().name(\"change_password\"));\n+    }\n+\n+    @Test\n+    public void testChangePassword() throws Exception {\n+        setupSecurityContext();\n+\n+        MockHttpServletRequestBuilder post = post(\"/change_password.do\")\n+                .contentType(APPLICATION_FORM_URLENCODED)\n+                .param(\"current_password\", \"secret\")\n+                .param(\"new_password\", \"new secret\")\n+                .param(\"confirm_password\", \"new secret\");\n+\n+        mockMvc.perform(post)\n+                .andExpect(status().isFound())\n+                .andExpect(redirectedUrl(\"profile\"));\n+\n+        Mockito.verify(changePasswordService).changePassword(\"bob\", \"secret\", \"new secret\");\n+    }\n+\n+    @Test\n+    public void testChangePasswordValidation() throws Exception {\n+        setupSecurityContext();\n+\n+        MockHttpServletRequestBuilder post = post(\"/change_password.do\")\n+                .contentType(APPLICATION_FORM_URLENCODED)\n+                .param(\"current_password\", \"secret\")\n+                .param(\"new_password\", \"new secret\")\n+                .param(\"confirm_password\", \"newsecret\");\n+\n+        mockMvc.perform(post)\n+                .andExpect(status().isUnprocessableEntity())\n+                .andExpect(view().name(\"change_password\"))\n+                .andExpect(model().attribute(\"message_code\", \"form_error\"));\n+\n+        Mockito.verifyZeroInteractions(changePasswordService);\n+    }\n+\n+    @Test\n+    public void testChangePasswordWrongPassword() throws Exception {\n+        setupSecurityContext();\n+\n+        Mockito.doThrow(new RestClientException(\"401 Unauthorized\")).when(changePasswordService).changePassword(\"bob\", \"wrong\", \"new secret\");\n+\n+        MockHttpServletRequestBuilder post = post(\"/change_password.do\")\n+                .contentType(APPLICATION_FORM_URLENCODED)\n+                .param(\"current_password\", \"wrong\")\n+                .param(\"new_password\", \"new secret\")\n+                .param(\"confirm_password\", \"new secret\");\n+\n+        mockMvc.perform(post)\n+                .andExpect(status().isUnprocessableEntity())\n+                .andExpect(view().name(\"change_password\"))\n+                .andExpect(model().attribute(\"message_code\", \"unauthorized\"));\n+    }\n+\n+    private void setupSecurityContext() {\n+        Authentication authentication = new UsernamePasswordAuthenticationToken(\n+                        \"bob\",\n+                        \"secret\",\n+                        Arrays.asList(UaaAuthority.UAA_USER)\n+        );\n+\n+        SecurityContextHolder.getContext().setAuthentication(authentication);\n+    }\n+}"
        },
        {
            "sha": "e87cc0ec6395be2691f7cb46a40c9bb1e78677cf",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/ChangePasswordValidationTest.java",
            "status": "added",
            "additions": 37,
            "deletions": 0,
            "changes": 37,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangePasswordValidationTest.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangePasswordValidationTest.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangePasswordValidationTest.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,37 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class ChangePasswordValidationTest {\n+\n+    @Test\n+    public void testValidWithMatchingPasswords() throws Exception {\n+        ChangePasswordValidation validation = new ChangePasswordValidation(\"secret\", \"secret\");\n+        Assert.assertTrue(validation.valid());\n+    }\n+\n+    @Test\n+    public void testInvalidWithMismatchedPasswords() throws Exception {\n+        ChangePasswordValidation validation = new ChangePasswordValidation(\"secret\", \"mecret\");\n+        Assert.assertFalse(validation.valid());\n+    }\n+\n+    @Test\n+    public void testInvalidWithEmptyPassword() throws Exception {\n+        ChangePasswordValidation validation = new ChangePasswordValidation(\"\", \"\");\n+        Assert.assertFalse(validation.valid());\n+    }\n+}"
        },
        {
            "sha": "8a3cf64e427760cd382ba4e9c5621ab3cf331046",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/ConfigMetadataProviderTest.java",
            "status": "added",
            "additions": 25,
            "deletions": 0,
            "changes": 25,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FConfigMetadataProviderTest.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FConfigMetadataProviderTest.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FConfigMetadataProviderTest.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,25 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.junit.Test;\n+import org.opensaml.DefaultBootstrap;\n+import org.opensaml.saml2.metadata.impl.EntityDescriptorImpl;\n+import org.opensaml.xml.XMLObject;\n+import org.opensaml.xml.parse.BasicParserPool;\n+\n+import java.io.File;\n+import java.util.Scanner;\n+\n+import static org.junit.Assert.*;\n+\n+public class ConfigMetadataProviderTest {\n+    @Test\n+    public void testDoGetMetadata() throws Exception {\n+        String metadataString = new Scanner(new File(\"./src/main/resources/idp.xml\")).useDelimiter(\"\\\\Z\").next();\n+        ConfigMetadataProvider provider = new ConfigMetadataProvider(metadataString);\n+        DefaultBootstrap.bootstrap();\n+        provider.setParserPool(new BasicParserPool());\n+        XMLObject xmlObject = provider.doGetMetadata();\n+        assertNotNull(xmlObject);\n+        assertEquals(\"http://openam.example.com:8181/openam\", ((EntityDescriptorImpl) xmlObject).getEntityID());\n+    }\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "527b82c324d185550d3ac56a6098629b31bf3d8d",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/EmailAccountCreationServiceTests.java",
            "status": "added",
            "additions": 321,
            "deletions": 0,
            "changes": 321,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailAccountCreationServiceTests.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailAccountCreationServiceTests.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailAccountCreationServiceTests.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,321 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.cloudfoundry.identity.uaa.error.UaaException;\n+import org.cloudfoundry.identity.uaa.login.test.ThymeleafConfig;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.http.client.ClientHttpRequest;\n+import org.springframework.http.client.ClientHttpResponse;\n+import org.springframework.mock.http.client.MockClientHttpResponse;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.web.client.MockRestServiceServer;\n+import org.springframework.test.web.client.ResponseCreator;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.context.request.RequestContextHolder;\n+import org.springframework.web.context.request.ServletRequestAttributes;\n+import org.thymeleaf.spring4.SpringTemplateEngine;\n+\n+import java.io.IOException;\n+import java.sql.Timestamp;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.not;\n+import static org.junit.Assert.*;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.*;\n+import static org.springframework.http.HttpMethod.GET;\n+import static org.springframework.http.HttpMethod.POST;\n+import static org.springframework.http.HttpStatus.BAD_REQUEST;\n+import static org.springframework.http.HttpStatus.CONFLICT;\n+import static org.springframework.http.MediaType.APPLICATION_JSON;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.jsonPath;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;\n+import static org.springframework.test.web.client.response.MockRestResponseCreators.withStatus;\n+import static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(classes = ThymeleafConfig.class)\n+public class EmailAccountCreationServiceTests {\n+\n+    private EmailAccountCreationService emailAccountCreationService;\n+    private MockRestServiceServer mockUaaServer;\n+    private MessageService messageService;\n+    private RestTemplate uaaTemplate;\n+\n+    @Autowired\n+    @Qualifier(\"mailTemplateEngine\")\n+    SpringTemplateEngine templateEngine;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        uaaTemplate = new RestTemplate();\n+        mockUaaServer = MockRestServiceServer.createServer(uaaTemplate);\n+        messageService = mock(MessageService.class);\n+        emailAccountCreationService = new EmailAccountCreationService(new ObjectMapper(), templateEngine, messageService, uaaTemplate, \"http://uaa.example.com\", \"pivotal\", \"http://login.example.com\");\n+    }\n+\n+    @Test\n+    public void testBeginActivation() throws Exception {\n+        setUpForSuccess();\n+\n+        emailAccountCreationService.beginActivation(\"user@example.com\", \"password\", \"login\");\n+\n+        mockUaaServer.verify();\n+\n+        ArgumentCaptor<String> emailBodyArgument = ArgumentCaptor.forClass(String.class);\n+        verify(messageService).sendMessage(\n+            eq(\"newly-created-user-id\"),\n+            eq(\"user@example.com\"),\n+            eq(MessageType.CREATE_ACCOUNT_CONFIRMATION),\n+            eq(\"Activate your Pivotal ID\"),\n+            emailBodyArgument.capture()\n+        );\n+        String emailBody = emailBodyArgument.getValue();\n+        assertThat(emailBody, containsString(\"a Pivotal ID\"));\n+        assertThat(emailBody, containsString(\"<a href=\\\"http://login.example.com/verify_user?code=the_secret_code&amp;email=user%40example.com\\\">Activate your account</a>\"));\n+        assertThat(emailBody, not(containsString(\"Cloud Foundry\")));\n+    }\n+\n+    @Test\n+    public void testBeginActivationWithOssBrand() throws Exception {\n+        emailAccountCreationService = new EmailAccountCreationService(new ObjectMapper(), templateEngine, messageService, uaaTemplate, \"http://uaa.example.com\", \"oss\", \"http://login.example.com\");\n+\n+        setUpForSuccess();\n+\n+        emailAccountCreationService.beginActivation(\"user@example.com\", \"password\", \"login\");\n+\n+        ArgumentCaptor<String> emailBodyArgument = ArgumentCaptor.forClass(String.class);\n+        verify(messageService).sendMessage(\n+            eq(\"newly-created-user-id\"),\n+            eq(\"user@example.com\"),\n+            eq(MessageType.CREATE_ACCOUNT_CONFIRMATION),\n+            eq(\"Activate your account\"),\n+            emailBodyArgument.capture()\n+        );\n+        String emailBody = emailBodyArgument.getValue();\n+        assertThat(emailBody, containsString(\"an account\"));\n+        assertThat(emailBody, containsString(\"<a href=\\\"http://login.example.com/verify_user?code=the_secret_code&amp;email=user%40example.com\\\">Activate your account</a>\"));\n+        assertThat(emailBody, not(containsString(\"Pivotal\")));\n+    }\n+\n+    @Test(expected = UaaException.class)\n+    public void testBeginActivationWithExistingUser() throws Exception {\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/Users\"))\n+            .andExpect(method(POST))\n+            .andExpect(jsonPath(\"$.userName\").value(\"user@example.com\"))\n+            .andExpect(jsonPath(\"$.password\").value(\"password\"))\n+            .andExpect(jsonPath(\"$.origin\").value(\"uaa\"))\n+            .andExpect(jsonPath(\"$.emails[0].value\").value(\"user@example.com\"))\n+            .andRespond(new ResponseCreator() {\n+                @Override\n+                public ClientHttpResponse createResponse(ClientHttpRequest request) throws IOException {\n+                    return new MockClientHttpResponse(\"{\\\"error\\\":\\\"invalid_user\\\",\\\"message\\\":\\\"error message\\\",\\\"user_id\\\":\\\"existing-user-id\\\",\\\"verified\\\":true,\\\"active\\\":true}\".getBytes(), CONFLICT);\n+                }\n+            });\n+        emailAccountCreationService.beginActivation(\"user@example.com\", \"password\", \"login\");\n+    }\n+\n+    @Test\n+    public void testBeginActivationWithUnverifiedExistingUser() throws Exception {\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/Users\"))\n+            .andExpect(method(POST))\n+            .andExpect(jsonPath(\"$.userName\").value(\"user@example.com\"))\n+            .andExpect(jsonPath(\"$.password\").value(\"password\"))\n+            .andExpect(jsonPath(\"$.origin\").value(\"uaa\"))\n+            .andExpect(jsonPath(\"$.emails[0].value\").value(\"user@example.com\"))\n+            .andRespond(new ResponseCreator() {\n+                @Override\n+                public ClientHttpResponse createResponse(ClientHttpRequest request) throws IOException {\n+                    return new MockClientHttpResponse(\"{\\\"error\\\":\\\"invalid_user\\\",\\\"message\\\":\\\"error message\\\",\\\"user_id\\\":\\\"existing-user-id\\\",\\\"verified\\\":false,\\\"active\\\":true}\".getBytes(), CONFLICT);\n+                }\n+            });\n+\n+        String uaaResponseJson = \"{\" +\n+            \"    \\\"code\\\":\\\"the_secret_code\\\",\" +\n+            \"    \\\"expiresAt\\\":9999999999,\" +\n+            \"    \\\"data\\\":\\\"{\\\\\\\"user_id\\\\\\\":\\\\\\\"existing-user-id\\\\\\\",\\\\\\\"client_id\\\\\\\":\\\\\\\"login\\\\\\\"}\\\"\" +\n+            \"}\";\n+\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/Codes\"))\n+            .andExpect(method(POST))\n+            .andExpect(jsonPath(\"$.data\").value(\"{\\\"user_id\\\":\\\"existing-user-id\\\",\\\"client_id\\\":\\\"login\\\"}\"))\n+            .andRespond(withSuccess(uaaResponseJson, APPLICATION_JSON));\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.setProtocol(\"http\");\n+        request.setContextPath(\"/login\");\n+        RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request));\n+\n+        emailAccountCreationService.beginActivation(\"user@example.com\", \"password\", \"login\");\n+\n+        verify(messageService).sendMessage(\n+            eq(\"existing-user-id\"),\n+            eq(\"user@example.com\"),\n+            eq(MessageType.CREATE_ACCOUNT_CONFIRMATION),\n+            anyString(),\n+            anyString()\n+        );\n+    }\n+\n+    @Test\n+    public void testCompleteActivation() throws Exception {\n+        Timestamp ts = new Timestamp(System.currentTimeMillis() + (60 * 60 * 1000)); // 1 hour\n+        String uaaResponseJson = \"{\" +\n+            \"    \\\"code\\\":\\\"the_secret_code\\\",\" +\n+            \"    \\\"expiresAt\\\":\" + ts.getTime() + \",\" +\n+            \"    \\\"data\\\":\\\"{\\\\\\\"user_id\\\\\\\":\\\\\\\"newly-created-user-id\\\\\\\",\\\\\\\"client_id\\\\\\\":\\\\\\\"app\\\\\\\"}\\\"\" +\n+            \"}\";\n+\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/Codes/the_secret_code\"))\n+            .andExpect(method(GET))\n+            .andRespond(withSuccess(uaaResponseJson, APPLICATION_JSON));\n+\n+        String scimUserJSONString = \"{\" +\n+            \"\\\"userName\\\": \\\"user@example.com\\\",\" +\n+            \"\\\"id\\\": \\\"newly-created-user-id\\\",\" +\n+            \"\\\"emails\\\": [{\\\"value\\\":\\\"user@example.com\\\"}]\" +\n+            \"}\";\n+\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/Users/newly-created-user-id/verify\"))\n+            .andExpect(method(GET))\n+            .andRespond(withSuccess(scimUserJSONString, APPLICATION_JSON));\n+\n+        Map<String,Object> additionalInformation = new HashMap<>();\n+        additionalInformation.put(\"signup_redirect_url\", \"http://example.com/redirect\");\n+\n+        String clientDetails = \"{\" +\n+                \"\\\"client_id\\\": \\\"app\\\",\" +\n+                \"\\\"signup_redirect_url\\\": \\\"http://example.com/redirect\\\"\" +\n+            \"}\";\n+\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/oauth/clients/app\"))\n+            .andExpect(method(GET))\n+            .andRespond(withSuccess(clientDetails, APPLICATION_JSON));\n+\n+        AccountCreationService.AccountCreationResponse accountCreation = emailAccountCreationService.completeActivation(\"the_secret_code\");\n+\n+        mockUaaServer.verify();\n+\n+        assertEquals(\"user@example.com\", accountCreation.getUsername());\n+        assertEquals(\"newly-created-user-id\", accountCreation.getUserId());\n+        assertEquals(\"http://example.com/redirect\", accountCreation.getRedirectLocation());\n+        assertNotNull(accountCreation.getUserId());\n+    }\n+\n+    @Test\n+    public void testCompleteActivationWithExpiredCode() throws Exception {\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/Codes/expiring_code\"))\n+            .andExpect(method(GET))\n+            .andRespond(withStatus(BAD_REQUEST));\n+\n+        try {\n+            emailAccountCreationService.completeActivation(\"expiring_code\");\n+            fail();\n+        } catch(HttpClientErrorException e) {\n+            assertThat(e.getStatusCode(), Matchers.equalTo(BAD_REQUEST));\n+        }\n+    }\n+\n+    @Test\n+    public void testResendVerificationCode() throws Exception {\n+        String uaaResponse = \"{\\n\" +\n+            \"  \\\"resources\\\": [\\n\" +\n+            \"    {\\n\" +\n+            \"      \\\"id\\\": \\\"unverified-user-id\\\",\\n\" +\n+            \"      \\\"userName\\\": \\\"user@example.com\\\",\\n\" +\n+            \"      \\\"origin\\\": \\\"uaa\\\"\\n\" +\n+            \"    }\\n\" +\n+            \"  ],\\n\" +\n+            \"  \\\"startIndex\\\": 1,\\n\" +\n+            \"  \\\"itemsPerPage\\\": 100,\\n\" +\n+            \"  \\\"totalResults\\\": 1,\\n\" +\n+            \"  \\\"schemas\\\": [\\n\" +\n+            \"    \\\"urn:scim:schemas:core:1.0\\\"\\n\" +\n+            \"  ]\\n\" +\n+            \"}\";\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/ids/Users?attributes=id&filter=userName%20eq%20%22user@example.com%22%20and%20origin%20eq%20%22uaa%22\"))\n+            .andExpect(method(GET))\n+            .andRespond(withSuccess(uaaResponse, APPLICATION_JSON));\n+\n+        Timestamp ts = new Timestamp(System.currentTimeMillis() + (60 * 60 * 1000)); // 1 hour\n+        String uaaResponseJson = \"{\" +\n+            \"    \\\"code\\\":\\\"the_secret_code\\\",\" +\n+            \"    \\\"expiresAt\\\":\" + ts.getTime() + \",\" +\n+            \"    \\\"data\\\":\\\"{\\\\\\\"user_id\\\\\\\":\\\\\\\"unverified-user-id\\\\\\\",\\\\\\\"client_id\\\\\\\":\\\\\\\"login\\\\\\\"}\\\"\" +\n+            \"}\";\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/Codes\"))\n+            .andExpect(method(POST))\n+            .andExpect(jsonPath(\"$.expiresAt\").value(Matchers.greaterThan(ts.getTime() - 5000)))\n+            .andExpect(jsonPath(\"$.expiresAt\").value(Matchers.lessThan(ts.getTime() + 5000)))\n+            .andExpect(jsonPath(\"$.data\").exists()) // we can't tell what order the json keys will take in the serialized json, so exists is the best we can do\n+            .andRespond(withSuccess(uaaResponseJson, APPLICATION_JSON));\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.setProtocol(\"http\");\n+        request.setContextPath(\"/login\");\n+        RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request));\n+\n+        emailAccountCreationService.resendVerificationCode(\"user@example.com\", \"login\");\n+\n+        mockUaaServer.verify();\n+\n+        ArgumentCaptor<String> emailBodyArgument = ArgumentCaptor.forClass(String.class);\n+        verify(messageService).sendMessage(eq(\"unverified-user-id\"),\n+            eq(\"user@example.com\"),\n+            eq(MessageType.CREATE_ACCOUNT_CONFIRMATION),\n+            eq(\"Activate your Pivotal ID\"),\n+            emailBodyArgument.capture()\n+        );\n+        String emailBody = emailBodyArgument.getValue();\n+        assertThat(emailBody, containsString(\"a Pivotal ID\"));\n+        assertThat(emailBody, containsString(\"<a href=\\\"http://login.example.com/verify_user?code=the_secret_code&amp;email=user%40example.com\\\">Activate your account</a>\"));\n+        assertThat(emailBody, not(containsString(\"Cloud Foundry\")));\n+    }\n+\n+    private void setUpForSuccess() {\n+        String scimUserJSONString = \"{\" +\n+            \"\\\"userName\\\": \\\"user@example.com\\\",\" +\n+            \"\\\"id\\\": \\\"newly-created-user-id\\\",\" +\n+            \"\\\"emails\\\": [{\\\"value\\\":\\\"user@example.com\\\"}]\" +\n+            \"}\";\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/Users\"))\n+            .andExpect(method(POST))\n+            .andExpect(jsonPath(\"$.userName\").value(\"user@example.com\"))\n+            .andExpect(jsonPath(\"$.password\").value(\"password\"))\n+            .andExpect(jsonPath(\"$.origin\").value(\"uaa\"))\n+            .andExpect(jsonPath(\"$.active\").value(true))\n+            .andExpect(jsonPath(\"$.verified\").value(false))\n+            .andExpect(jsonPath(\"$.emails[0].value\").value(\"user@example.com\"))\n+            .andRespond(withSuccess(scimUserJSONString, APPLICATION_JSON));\n+\n+        Timestamp ts = new Timestamp(System.currentTimeMillis() + (60 * 60 * 1000)); // 1 hour\n+        String uaaResponseJson = \"{\" +\n+            \"    \\\"code\\\":\\\"the_secret_code\\\",\" +\n+            \"    \\\"expiresAt\\\":\" + ts.getTime() + \",\" +\n+            \"    \\\"data\\\":\\\"{\\\\\\\"user_id\\\\\\\":\\\\\\\"newly-created-user-id\\\\\\\",\\\\\\\"client_id\\\\\\\":\\\\\\\"login\\\\\\\"}\\\"\" +\n+            \"}\";\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/Codes\"))\n+            .andExpect(method(POST))\n+            .andExpect(jsonPath(\"$.expiresAt\").value(Matchers.greaterThan(ts.getTime() - 5000)))\n+            .andExpect(jsonPath(\"$.expiresAt\").value(Matchers.lessThan(ts.getTime() + 5000)))\n+            .andExpect(jsonPath(\"$.data\").exists()) // we can't tell what order the json keys will take in the serialized json, so exists is the best we can do\n+            .andRespond(withSuccess(uaaResponseJson, APPLICATION_JSON));\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.setProtocol(\"http\");\n+        request.setContextPath(\"/login\");\n+        RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request));\n+    }\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "cb796f18c7f7757c9e83c71d906dbf091579fe7d",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/EmailChangeEmailServiceTest.java",
            "status": "added",
            "additions": 154,
            "deletions": 0,
            "changes": 154,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailChangeEmailServiceTest.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailChangeEmailServiceTest.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailChangeEmailServiceTest.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,154 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.cloudfoundry.identity.uaa.error.UaaException;\n+import org.cloudfoundry.identity.uaa.login.test.ThymeleafConfig;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.web.client.MockRestServiceServer;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.context.request.RequestContextHolder;\n+import org.springframework.web.context.request.ServletRequestAttributes;\n+import org.thymeleaf.spring4.SpringTemplateEngine;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.not;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Matchers.contains;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Matchers.isNull;\n+import static org.springframework.http.HttpMethod.POST;\n+import static org.springframework.http.MediaType.APPLICATION_JSON;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.content;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.jsonPath;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;\n+import static org.springframework.test.web.client.response.MockRestResponseCreators.withBadRequest;\n+import static org.springframework.test.web.client.response.MockRestResponseCreators.withStatus;\n+import static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;\n+\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(classes = ThymeleafConfig.class)\n+public class EmailChangeEmailServiceTest {\n+    private EmailChangeEmailService emailChangeEmailService;\n+    private MockRestServiceServer mockUaaServer;\n+    private MessageService messageService;\n+\n+    @Autowired\n+    @Qualifier(\"mailTemplateEngine\")\n+    SpringTemplateEngine templateEngine;\n+    private RestTemplate uaaTemplate;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        uaaTemplate = new RestTemplate();\n+        mockUaaServer = MockRestServiceServer.createServer(uaaTemplate);\n+        messageService = Mockito.mock(EmailService.class);\n+        emailChangeEmailService = new EmailChangeEmailService(templateEngine, messageService, uaaTemplate, \"http://uaa.example.com/uaa\", \"pivotal\");\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.setProtocol(\"http\");\n+        request.setContextPath(\"/login\");\n+        RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request));\n+    }\n+\n+\n+    @Test\n+    public void beginEmailChange() throws Exception {\n+        setUpForSuccess();\n+\n+        emailChangeEmailService.beginEmailChange(\"user-001\", \"user@example.com\", \"new@example.com\", \"app\");\n+\n+        mockUaaServer.verify();\n+\n+        Mockito.verify(messageService).sendMessage((String) isNull(),\n+            eq(\"new@example.com\"),\n+            eq(MessageType.CHANGE_EMAIL),\n+            eq(\"Email change verification\"),\n+            contains(\"<a href=\\\"http://localhost/login/verify_email?code=the_secret_code\\\">Verify your email</a>\")\n+        );\n+    }\n+\n+    @Test\n+    public void testBeginEmailChangeWithOssBrand() throws Exception {\n+        emailChangeEmailService = new EmailChangeEmailService(templateEngine, messageService, uaaTemplate, \"http://uaa.example.com/uaa\", \"oss\");\n+\n+        setUpForSuccess();\n+\n+        emailChangeEmailService.beginEmailChange(\"user-001\", \"user@example.com\", \"new@example.com\", \"app\");\n+\n+        mockUaaServer.verify();\n+\n+        ArgumentCaptor<String> emailBodyArgument = ArgumentCaptor.forClass(String.class);\n+        Mockito.verify(messageService).sendMessage((String) isNull(),\n+            eq(\"new@example.com\"),\n+            eq(MessageType.CHANGE_EMAIL),\n+            eq(\"Email change verification\"),\n+            emailBodyArgument.capture()\n+        );\n+\n+        String emailBody = emailBodyArgument.getValue();\n+\n+        assertThat(emailBody, containsString(\"<a href=\\\"http://localhost/login/verify_email?code=the_secret_code\\\">Verify your email</a>\"));\n+        assertThat(emailBody, containsString(\"an account\"));\n+        assertThat(emailBody, containsString(\"Cloud Foundry\"));\n+        assertThat(emailBody, not(containsString(\"a Pivotal ID\")));\n+    }\n+\n+    @Test(expected = UaaException.class)\n+    public void beginEmailChangeWithUsernameConflict() throws Exception {\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/uaa/email_verifications\"))\n+            .andExpect(method(POST))\n+            .andExpect(jsonPath(\"$.userId\").value(\"user-001\"))\n+            .andExpect(jsonPath(\"$.email\").value(\"new@example.com\"))\n+            .andRespond(withStatus(HttpStatus.CONFLICT));\n+\n+        emailChangeEmailService.beginEmailChange(\"user-001\", \"user@example.com\", \"new@example.com\", null);\n+    }\n+\n+    @Test\n+    public void testCompleteVerification() throws Exception {\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/uaa/email_changes\"))\n+            .andExpect(method(POST))\n+            .andExpect(content().string(\"the_secret_code\"))\n+            .andRespond(withSuccess(\"{\" +\n+                \"  \\\"user_id\\\":\\\"user-001\\\",\" +\n+                \"  \\\"username\\\":\\\"new@example.com\\\",\" +\n+                \"  \\\"email\\\": \\\"new@example.com\\\" \" +\n+                \"}\", APPLICATION_JSON));\n+\n+        emailChangeEmailService.completeVerification(\"the_secret_code\");\n+\n+        mockUaaServer.verify();\n+    }\n+\n+    @Test(expected = UaaException.class)\n+    public void testCompleteVerificationWithInvalidCode() throws Exception {\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/uaa/email_changes\"))\n+            .andExpect(method(POST))\n+            .andExpect(content().string(\"the_secret_code\"))\n+            .andRespond(withBadRequest());\n+\n+        emailChangeEmailService.completeVerification(\"the_secret_code\");\n+\n+        mockUaaServer.verify();\n+    }\n+\n+    private void setUpForSuccess() {\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/uaa/email_verifications\"))\n+            .andExpect(method(POST))\n+            .andExpect(jsonPath(\"$.userId\").value(\"user-001\"))\n+            .andExpect(jsonPath(\"$.email\").value(\"new@example.com\"))\n+            .andExpect(jsonPath(\"$.client_id\").value(\"app\"))\n+            .andRespond(withSuccess(\"the_secret_code\", APPLICATION_JSON));\n+    }\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "f2abbb732075c4aa07db847850b49fcb6f87a624",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/EmailInvitationsServiceTests.java",
            "status": "added",
            "additions": 290,
            "deletions": 0,
            "changes": 290,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailInvitationsServiceTests.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailInvitationsServiceTests.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailInvitationsServiceTests.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,290 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.cloudfoundry.identity.uaa.error.UaaException;\n+import org.cloudfoundry.identity.uaa.login.test.ThymeleafConfig;\n+import org.cloudfoundry.identity.uaa.scim.ScimUser;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.annotation.DirtiesContext.ClassMode;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+import org.springframework.test.web.client.MockRestServiceServer;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.context.ConfigurableWebApplicationContext;\n+import org.springframework.web.context.request.RequestContextHolder;\n+import org.springframework.web.context.request.ServletRequestAttributes;\n+import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;\n+import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n+import org.thymeleaf.spring4.SpringTemplateEngine;\n+\n+import java.nio.charset.Charset;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.not;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.http.HttpMethod.GET;\n+import static org.springframework.http.HttpMethod.PUT;\n+import static org.springframework.http.MediaType.APPLICATION_JSON;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.jsonPath;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;\n+import static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@WebAppConfiguration\n+@ContextConfiguration(classes = EmailInvitationsServiceTests.ContextConfiguration.class)\n+@DirtiesContext(classMode=ClassMode.AFTER_EACH_TEST_METHOD)\n+public class EmailInvitationsServiceTests {\n+\n+    private MockRestServiceServer mockUaaServer;\n+\n+    @Autowired\n+    ConfigurableWebApplicationContext webApplicationContext;\n+\n+    @Autowired\n+    ExpiringCodeService expiringCodeService;\n+\n+    @Autowired\n+    EmailInvitationsService emailInvitationsService;\n+\n+    @Autowired\n+    AccountCreationService accountCreationService;\n+\n+    @Autowired\n+    MessageService messageService;\n+\n+    @Autowired\n+    RestTemplate authorizationTemplate;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        mockUaaServer = MockRestServiceServer.createServer(authorizationTemplate);\n+\n+        MockMvcBuilders.webAppContextSetup(webApplicationContext)\n+            .build();\n+    }\n+\n+    @Test\n+    public void testSendInviteEmail() throws Exception {\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.setProtocol(\"http\");\n+        request.setContextPath(\"/login\");\n+        RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request));\n+\n+        ScimUser user = new ScimUser();\n+        user.setId(\"user-id-001\");\n+\n+        when(accountCreationService.createUser(\"user@example.com\", null)).thenReturn(user);\n+\n+        ArgumentCaptor<Map<String,String>> captor = ArgumentCaptor.forClass((Class)Map.class);\n+\n+        when(expiringCodeService.generateCode(captor.capture(), anyInt(), eq(TimeUnit.DAYS))).thenReturn(\"the_secret_code\");\n+        emailInvitationsService.inviteUser(\"user@example.com\", \"current-user\");\n+\n+        Map<String,String> data = captor.getValue();\n+        assertEquals(\"user-id-001\", data.get(\"user_id\"));\n+\n+        ArgumentCaptor<String> emailBodyArgument = ArgumentCaptor.forClass(String.class);\n+        Mockito.verify(messageService).sendMessage(\n+            eq(\"user-id-001\"),\n+            eq(\"user@example.com\"),\n+            eq(MessageType.INVITATION),\n+            eq(\"Invitation to join Pivotal\"),\n+            emailBodyArgument.capture()\n+        );\n+        String emailBody = emailBodyArgument.getValue();\n+        assertThat(emailBody, containsString(\"current-user\"));\n+        assertThat(emailBody, containsString(\"Pivotal\"));\n+        assertThat(emailBody, containsString(\"<a href=\\\"http://localhost/login/invitations/accept?code=the_secret_code\\\">Accept Invite</a>\"));\n+        assertThat(emailBody, not(containsString(\"Cloud Foundry\")));\n+    }\n+    \n+    @Test(expected = UaaException.class)\n+    public void testSendInviteEmailToUserThatIsAlreadyVerified() throws Exception {\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.setProtocol(\"http\");\n+        request.setContextPath(\"/login\");\n+\n+        byte[] errorResponse = \"{\\\"error\\\":\\\"invalid_user\\\",\\\"message\\\":\\\"error message\\\",\\\"user_id\\\":\\\"existing-user-id\\\",\\\"verified\\\":true,\\\"active\\\":true}\".getBytes();\n+        when(accountCreationService.createUser(\"user@example.com\", null)).thenThrow(new HttpClientErrorException(HttpStatus.CONFLICT,\"invalid user\",errorResponse,Charset.forName(\"UTF-8\")));\n+\n+        emailInvitationsService.inviteUser(\"user@example.com\", \"current-user\");\n+    }\n+    \n+    @Test\n+    public void testSendInviteEmailToUnverifiedUser() throws Exception {\n+    \t\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n+\t\trequest.setProtocol(\"http\");\n+\t\trequest.setContextPath(\"/login\");\n+\t\tRequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request));\n+\t\t\n+\t\tbyte[] errorResponse = \"{\\\"error\\\":\\\"invalid_user\\\",\\\"message\\\":\\\"error message\\\",\\\"user_id\\\":\\\"existing-user-id\\\",\\\"verified\\\":false,\\\"active\\\":true}\".getBytes();\n+\t\twhen(accountCreationService.createUser(\"user@example.com\", null)).thenThrow(new HttpClientErrorException(HttpStatus.CONFLICT,\"invalid user\",errorResponse,Charset.forName(\"UTF-8\")));\n+\n+        ArgumentCaptor<Map<String,String>> captor = ArgumentCaptor.forClass((Class)Map.class);\n+\n+        when(expiringCodeService.generateCode(captor.capture(), anyInt(), eq(TimeUnit.DAYS))).thenReturn(\"the_secret_code\");\n+        emailInvitationsService.inviteUser(\"user@example.com\", \"current-user\");\n+\n+        Map<String,String> data = captor.getValue();\n+        assertEquals(\"existing-user-id\", data.get(\"user_id\"));\n+\n+        ArgumentCaptor<String> emailBodyArgument = ArgumentCaptor.forClass(String.class);\n+        Mockito.verify(messageService).sendMessage(\n+            eq(\"existing-user-id\"),\n+            eq(\"user@example.com\"),\n+            eq(MessageType.INVITATION),\n+            eq(\"Invitation to join Pivotal\"),\n+            emailBodyArgument.capture()\n+        );\n+        String emailBody = emailBodyArgument.getValue();\n+        assertThat(emailBody, containsString(\"current-user\"));\n+        assertThat(emailBody, containsString(\"Pivotal\"));\n+        assertThat(emailBody, containsString(\"<a href=\\\"http://localhost/login/invitations/accept?code=the_secret_code\\\">Accept Invite</a>\"));\n+        assertThat(emailBody, not(containsString(\"Cloud Foundry\")));\n+    }\n+\n+    @Test\n+    public void testSendInviteEmailWithOSSBrand() throws Exception {\n+        emailInvitationsService.setBrand(\"oss\");\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.setProtocol(\"http\");\n+        request.setContextPath(\"/login\");\n+        RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request));\n+\n+        ScimUser user = new ScimUser();\n+        user.setId(\"user-id-001\");\n+\n+        when(accountCreationService.createUser(\"user@example.com\", null)).thenReturn(user);\n+        ArgumentCaptor<Map<String,String>> captor = ArgumentCaptor.forClass((Class)Map.class);\n+\n+        when(expiringCodeService.generateCode(captor.capture(), anyInt(), eq(TimeUnit.DAYS))).thenReturn(\"the_secret_code\");\n+        emailInvitationsService.inviteUser(\"user@example.com\", \"current-user\");\n+\n+        Map<String,String> data = captor.getValue();\n+        assertEquals(\"user-id-001\", data.get(\"user_id\"));\n+\n+        ArgumentCaptor<String> emailBodyArgument = ArgumentCaptor.forClass(String.class);\n+        Mockito.verify(messageService).sendMessage(\n+            eq(\"user-id-001\"),\n+            eq(\"user@example.com\"),\n+            eq(MessageType.INVITATION),\n+            eq(\"Invitation to join Cloud Foundry\"),\n+            emailBodyArgument.capture()\n+        );\n+        String emailBody = emailBodyArgument.getValue();\n+        assertThat(emailBody, containsString(\"current-user\"));\n+        assertThat(emailBody, containsString(\"<a href=\\\"http://localhost/login/invitations/accept?code=the_secret_code\\\">Accept Invite</a>\"));\n+        assertThat(emailBody, containsString(\"Cloud Foundry\"));\n+        assertThat(emailBody, not(containsString(\"Pivotal\")));\n+    }\n+\n+    @Test\n+    public void testAcceptInvitation() throws Exception {\n+\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/Users/user-id-001/verify\"))\n+            .andExpect(method(GET))\n+            .andRespond(withSuccess(\"{}\",APPLICATION_JSON));\n+\n+        String clientDetails = \"{\" +\n+            \"\\\"client_id\\\": \\\"app\\\",\" +\n+            \"\\\"invitation_redirect_url\\\": \\\"http://example.com/redirect\\\"\" +\n+            \"}\";\n+\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/Users/user-id-001/password\"))\n+            .andExpect(method(PUT))\n+            .andExpect(jsonPath(\"$.password\").value(\"secret\"))\n+            .andRespond(withSuccess());\n+\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/oauth/clients/app\"))\n+            .andExpect(method(GET))\n+            .andRespond(withSuccess(clientDetails, APPLICATION_JSON));\n+\n+        String redirectLocation = emailInvitationsService.acceptInvitation(\"user-id-001\", \"user@example.com\", \"secret\", \"app\");\n+\n+        mockUaaServer.verify();\n+        Mockito.verifyZeroInteractions(expiringCodeService);\n+        assertEquals(\"http://example.com/redirect\", redirectLocation);\n+    }\n+\n+    @Test\n+    public void testAcceptInvitationWithNoClientRedirect() throws Exception {\n+\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/Users/user-id-001/verify\"))\n+            .andExpect(method(GET))\n+            .andRespond(withSuccess(\"{}\",APPLICATION_JSON));\n+\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/Users/user-id-001/password\"))\n+            .andExpect(method(PUT))\n+            .andExpect(jsonPath(\"$.password\").value(\"secret\"))\n+            .andRespond(withSuccess());\n+\n+        String redirectLocation = emailInvitationsService.acceptInvitation(\"user-id-001\", \"user@example.com\", \"secret\", \"\");\n+\n+        mockUaaServer.verify();\n+        Mockito.verifyZeroInteractions(expiringCodeService);\n+        assertNull(redirectLocation);\n+    }\n+\n+    @Configuration\n+    @EnableWebMvc\n+    @Import(ThymeleafConfig.class)\n+    static class ContextConfiguration extends WebMvcConfigurerAdapter {\n+\n+        @Override\n+        public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {\n+            configurer.enable();\n+        }\n+\n+        @Autowired\n+        @Qualifier(\"mailTemplateEngine\")\n+        SpringTemplateEngine templateEngine;\n+\n+        @Bean\n+        ExpiringCodeService expiringCodeService() { return Mockito.mock(ExpiringCodeService.class); }\n+\n+        @Bean\n+        MessageService messageService() {\n+            return Mockito.mock(MessageService.class);\n+        }\n+\n+        @Bean\n+        AccountCreationService accountCreationService() {\n+            return Mockito.mock(AccountCreationService.class);\n+        }\n+\n+        @Bean\n+        EmailInvitationsService emailInvitationsService() {\n+            return new EmailInvitationsService(templateEngine, messageService(), \"pivotal\", \"http://uaa.example.com\");\n+        }\n+\n+        @Bean\n+        RestTemplate authorizationTemplate() {\n+            return new RestTemplate();\n+        }\n+\n+    }\n+}"
        },
        {
            "sha": "c5111f3d86c63e904abca051924d0ea0df1591b1",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/EmailResetPasswordServiceTests.java",
            "status": "added",
            "additions": 166,
            "deletions": 0,
            "changes": 166,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailResetPasswordServiceTests.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailResetPasswordServiceTests.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailResetPasswordServiceTests.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,166 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.cloudfoundry.identity.uaa.error.UaaException;\n+import org.cloudfoundry.identity.uaa.login.test.ThymeleafConfig;\n+import org.hamcrest.Matchers;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.http.client.ClientHttpRequest;\n+import org.springframework.http.client.ClientHttpResponse;\n+import org.springframework.mock.env.MockEnvironment;\n+import org.springframework.mock.http.client.MockClientHttpResponse;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.web.client.MockRestServiceServer;\n+import org.springframework.test.web.client.ResponseCreator;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.context.request.RequestContextHolder;\n+import org.springframework.web.context.request.ServletRequestAttributes;\n+import org.thymeleaf.spring4.SpringTemplateEngine;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import static org.mockito.Matchers.contains;\n+import static org.mockito.Matchers.eq;\n+import static org.springframework.http.HttpMethod.POST;\n+import static org.springframework.http.HttpStatus.CONFLICT;\n+import static org.springframework.http.MediaType.APPLICATION_JSON;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.jsonPath;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;\n+import static org.springframework.test.web.client.response.MockRestResponseCreators.withBadRequest;\n+import static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(classes = ThymeleafConfig.class)\n+public class EmailResetPasswordServiceTests {\n+\n+    private EmailResetPasswordService emailResetPasswordService;\n+    private MockRestServiceServer mockUaaServer;\n+    private MessageService messageService;\n+\n+    @Autowired\n+    @Qualifier(\"mailTemplateEngine\")\n+    SpringTemplateEngine templateEngine;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        RestTemplate uaaTemplate = new RestTemplate();\n+        mockUaaServer = MockRestServiceServer.createServer(uaaTemplate);\n+        messageService = Mockito.mock(EmailService.class);\n+        emailResetPasswordService = new EmailResetPasswordService(templateEngine, messageService, uaaTemplate, \"http://uaa.example.com/uaa\", \"pivotal\");\n+    }\n+\n+    @Test\n+    public void testForgotPasswordWhenAResetCodeIsReturnedByTheUaa() throws Exception {\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/uaa/password_resets\"))\n+                .andExpect(method(POST))\n+                .andRespond(withSuccess(\"{\\\"code\\\":\\\"the_secret_code\\\",\\\"user_id\\\":\\\"user-id-001\\\"}\", APPLICATION_JSON));\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.setProtocol(\"http\");\n+        request.setContextPath(\"/login\");\n+        RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request));\n+\n+        emailResetPasswordService.forgotPassword(\"user@example.com\");\n+\n+        mockUaaServer.verify();\n+\n+        Mockito.verify(messageService).sendMessage(eq(\"user-id-001\"),\n+            eq(\"user@example.com\"),\n+            eq(MessageType.PASSWORD_RESET),\n+            eq(\"Pivotal account password reset request\"),\n+            contains(\"<a href=\\\"http://localhost/login/reset_password?code=the_secret_code&amp;email=user%40example.com\\\">Reset your password</a>\")\n+        );\n+    }\n+\n+    @Test\n+    public void testForgotPasswordWhenConflictIsReturnedByTheUaa() throws Exception {\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/uaa/password_resets\"))\n+                .andExpect(method(POST))\n+                .andRespond(new ResponseCreator() {\n+                    @Override\n+                    public ClientHttpResponse createResponse(ClientHttpRequest request) throws IOException {\n+                        return new MockClientHttpResponse(\"{\\\"user_id\\\":\\\"user-id-001\\\"}\".getBytes(), CONFLICT);\n+                    }\n+                });\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.setProtocol(\"http\");\n+        request.setContextPath(\"/login\");\n+        RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request));\n+\n+        emailResetPasswordService.forgotPassword(\"user@example.com\");\n+\n+        mockUaaServer.verify();\n+\n+        Mockito.verify(messageService).sendMessage(eq(\"user-id-001\"),\n+            eq(\"user@example.com\"),\n+            eq(MessageType.PASSWORD_RESET),\n+            eq(\"Pivotal account password reset request\"),\n+            contains(\"Your account credentials for localhost are managed by an external service. Please contact your administrator for password recovery requests.\")\n+        );\n+    }\n+\n+    @Test\n+    public void testForgotPasswordWhenTheCodeIsDenied() throws Exception {\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/uaa/password_resets\"))\n+                .andExpect(method(POST))\n+                .andRespond(withBadRequest());\n+\n+        emailResetPasswordService.forgotPassword(\"user@example.com\");\n+\n+        mockUaaServer.verify();\n+\n+        Mockito.verifyZeroInteractions(messageService);\n+    }\n+\n+    @Test\n+    public void testResetPassword() throws Exception {\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/uaa/password_change\"))\n+                .andExpect(method(POST))\n+                .andExpect(jsonPath(\"$.code\").value(\"secret_code\"))\n+                .andExpect(jsonPath(\"$.new_password\").value(\"new_secret\"))\n+                .andRespond(withSuccess(\"{\" +\n+                    \"  \\\"user_id\\\":\\\"usermans-id\\\",\" +\n+                    \"  \\\"username\\\":\\\"userman\\\"\" +\n+                    \"}\", APPLICATION_JSON));\n+\n+        Map<String,String> userInfo = emailResetPasswordService.resetPassword(\"secret_code\", \"new_secret\");\n+\n+        mockUaaServer.verify();\n+\n+        Assert.assertThat(userInfo, Matchers.hasEntry(\"user_id\", \"usermans-id\"));\n+        Assert.assertThat(userInfo, Matchers.hasEntry(\"username\", \"userman\"));\n+    }\n+\n+    @Test(expected = UaaException.class)\n+    public void testResetPasswordWhenTheCodeIsDenied() throws Exception {\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/uaa/password_change\"))\n+                .andExpect(method(POST))\n+                .andRespond(withBadRequest());\n+\n+        emailResetPasswordService.resetPassword(\"b4d_k0d3z\", \"new_password\");\n+\n+        mockUaaServer.verify();\n+    }\n+}"
        },
        {
            "sha": "9e95abc7ffcf131255694373ca55701ec8e16db2",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/EmailServiceTests.java",
            "status": "added",
            "additions": 53,
            "deletions": 0,
            "changes": 53,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailServiceTests.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailServiceTests.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FEmailServiceTests.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,53 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.cloudfoundry.identity.uaa.login.test.FakeJavaMailSender;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.internet.InternetAddress;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertThat;\n+\n+public class EmailServiceTests {\n+\n+    private FakeJavaMailSender mailSender;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        mailSender = new FakeJavaMailSender();\n+    }\n+\n+    @Test\n+    public void testSendOssMimeMessage() throws Exception {\n+        EmailService emailService = new EmailService(mailSender, \"http://login.example.com/login\", \"oss\");\n+\n+        emailService.sendMessage(null, \"user@example.com\", MessageType.CHANGE_EMAIL, \"Test Message\", \"<html><body>hi</body></html>\");\n+\n+        assertThat(mailSender.getSentMessages(), hasSize(1));\n+        FakeJavaMailSender.MimeMessageWrapper mimeMessageWrapper = mailSender.getSentMessages().get(0);\n+        assertThat(mimeMessageWrapper.getFrom(), hasSize(1));\n+        InternetAddress fromAddress = (InternetAddress) mimeMessageWrapper.getFrom().get(0);\n+        assertThat(fromAddress.getAddress(), equalTo(\"admin@login.example.com\"));\n+        assertThat(fromAddress.getPersonal(), equalTo(\"Cloud Foundry\"));\n+        assertThat(mimeMessageWrapper.getRecipients(Message.RecipientType.TO), hasSize(1));\n+        assertThat(mimeMessageWrapper.getRecipients(Message.RecipientType.TO).get(0), equalTo((Address) new InternetAddress(\"user@example.com\")));\n+        assertThat(mimeMessageWrapper.getContentString(), equalTo(\"<html><body>hi</body></html>\"));\n+    }\n+\n+    @Test\n+    public void testSendPivotalMimeMessage() throws Exception {\n+        EmailService emailService = new EmailService(mailSender, \"http://login.example.com/login\", \"pivotal\");\n+\n+        emailService.sendMessage(null, \"user@example.com\", MessageType.CHANGE_EMAIL, \"Test Message\", \"<html><body>hi</body></html>\");\n+\n+        FakeJavaMailSender.MimeMessageWrapper mimeMessageWrapper = mailSender.getSentMessages().get(0);\n+        assertThat(mimeMessageWrapper.getFrom(), hasSize(1));\n+        InternetAddress fromAddress = (InternetAddress) mimeMessageWrapper.getFrom().get(0);\n+        assertThat(fromAddress.getAddress(), equalTo(\"admin@login.example.com\"));\n+        assertThat(fromAddress.getPersonal(), equalTo(\"Pivotal\"));\n+    }\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "9ff38fc8a32d3ee916ca79ab8730e92da607ce9d",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/HomeControllerViewTests.java",
            "status": "added",
            "additions": 112,
            "deletions": 0,
            "changes": 112,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FHomeControllerViewTests.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FHomeControllerViewTests.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FHomeControllerViewTests.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,112 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.cloudfoundry.identity.uaa.login.test.ThymeleafConfig;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.mock.env.MockEnvironment;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.web.context.WebApplicationContext;\n+import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;\n+import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n+\n+import java.util.Arrays;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.xpath;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@WebAppConfiguration\n+@ContextConfiguration(classes = HomeControllerViewTests.ContextConfiguration.class)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)\n+public class HomeControllerViewTests {\n+\n+    @Autowired\n+    WebApplicationContext webApplicationContext;\n+\n+    private MockMvc mockMvc;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext)\n+                .build();\n+    }\n+\n+    @Test\n+    public void testTiles() throws Exception {\n+        mockMvc.perform(get(\"/\"))\n+                .andExpect(xpath(\"//*[@class='tile-1']\").string(\"First Tile\"))\n+                .andExpect(xpath(\"//*[@class='tile-1']/@href\").string(\"http://example.com/login\"))\n+                .andExpect(xpath(\"//head/style[1]\").string(\".tile-1 {background-image: url(//example.com/image)} .tile-1:hover {background-image: url(//example.com/hover)}\"))\n+                .andExpect(xpath(\"//*[@class='tile-2']\").string(\"Other Tile\"))\n+                .andExpect(xpath(\"//*[@class='tile-2']/@href\").string(\"http://other.example.com/login\"))\n+                .andExpect(xpath(\"//head/style[2]\").string(\".tile-2 {background-image: url(//other.example.com/image)} .tile-2:hover {background-image: url(//other.example.com/hover)}\"));\n+    }\n+\n+    @Test\n+    public void testInviteLink() throws Exception {\n+        mockMvc.perform(get(\"/home\"))\n+            .andExpect(xpath(\"//*[text()='Invite Users']\").exists());\n+    }\n+\n+    @Configuration\n+    @EnableWebMvc\n+    @Import(ThymeleafConfig.class)\n+    static class ContextConfiguration extends WebMvcConfigurerAdapter {\n+\n+        @Override\n+        public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {\n+            configurer.enable();\n+        }\n+\n+        @Bean\n+        BuildInfo buildInfo() {\n+            return new BuildInfo();\n+        }\n+\n+        @Bean\n+        TileInfo tileInfo() {\n+            Map<String,String> tile1 = new LinkedHashMap<>();\n+            tile1.put(\"name\", \"First Tile\");\n+            tile1.put(\"login-link\", \"http://example.com/login\");\n+            tile1.put(\"image\", \"//example.com/image\");\n+            tile1.put(\"image-hover\", \"//example.com/hover\");\n+\n+            Map<String,String> tile2 = new LinkedHashMap<>();\n+            tile2.put(\"name\", \"Other Tile\");\n+            tile2.put(\"login-link\", \"http://other.example.com/login\");\n+            tile2.put(\"image\", \"//other.example.com/image\");\n+            tile2.put(\"image-hover\", \"//other.example.com/hover\");\n+\n+            TileInfo tileInfo = Mockito.mock(TileInfo.class);\n+            Mockito.when(tileInfo.getLoginTiles()).thenReturn(Arrays.asList(tile1, tile2));\n+            return tileInfo;\n+        }\n+\n+        @Bean\n+        MockEnvironment environment() {\n+            return new MockEnvironment();\n+        }\n+\n+        @Bean\n+        HomeController homeController(MockEnvironment environment) {\n+            environment.setProperty(\"login.invitationsEnabled\",\"true\");\n+            HomeController homeController = new HomeController(environment);\n+            homeController.setUaaBaseUrl(\"http://uaa.example.com\");\n+            return homeController;\n+        }\n+    }\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "cc9169a4f5bf247b95f2ba158d3247fe15ca0610",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/InvitationsControllerTest.java",
            "status": "added",
            "additions": 311,
            "deletions": 0,
            "changes": 311,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FInvitationsControllerTest.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FInvitationsControllerTest.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FInvitationsControllerTest.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,311 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyZeroInteractions;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.xpath;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.cloudfoundry.identity.uaa.authentication.Origin;\n+import org.cloudfoundry.identity.uaa.authentication.UaaPrincipal;\n+import org.cloudfoundry.identity.uaa.error.UaaException;\n+import org.cloudfoundry.identity.uaa.login.ExpiringCodeService.CodeNotFoundException;\n+import org.cloudfoundry.identity.uaa.login.test.ThymeleafConfig;\n+import org.cloudfoundry.identity.uaa.user.UaaAuthority;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.support.ResourceBundleMessageSource;\n+import org.springframework.mock.web.MockHttpSession;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContext;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.web.context.HttpSessionSecurityContextRepository;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.web.context.ConfigurableWebApplicationContext;\n+import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;\n+import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@WebAppConfiguration\n+@ContextConfiguration(classes = InvitationsControllerTest.ContextConfiguration.class)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)\n+public class InvitationsControllerTest {\n+\n+    private MockMvc mockMvc;\n+\n+    @Autowired\n+    ConfigurableWebApplicationContext webApplicationContext;\n+\n+    @Autowired\n+    InvitationsService invitationsService;\n+    \n+    @Autowired\n+    ExpiringCodeService expiringCodeService;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext)\n+            .build();\n+    }\n+    \n+    @After\n+    public void tearDown() {\n+    \tSecurityContextHolder.clearContext();\n+    }\n+\n+    @Test\n+    public void testNewInvitePage() throws Exception {\n+        MockHttpServletRequestBuilder get = get(\"/invitations/new\");\n+\n+        mockMvc.perform(get)\n+            .andExpect(status().isOk())\n+            .andExpect(view().name(\"invitations/new_invite\"));\n+    }\n+\n+    @Test\n+    public void testSendInvitationEmail() throws Exception {\n+        UaaPrincipal p = new UaaPrincipal(\"123\",\"marissa\",\"marissa@test.org\", Origin.UAA,\"\");\n+        UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(p, \"\", UaaAuthority.USER_AUTHORITIES);\n+        assertTrue(auth.isAuthenticated());\n+        MockSecurityContext mockSecurityContext = new MockSecurityContext(auth);\n+        SecurityContextHolder.setContext(mockSecurityContext);\n+        MockHttpSession session = new MockHttpSession();\n+        session.setAttribute(\n+            HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY,\n+            mockSecurityContext\n+        );\n+\n+        MockHttpServletRequestBuilder post = post(\"/invitations/new.do\")\n+            .param(\"email\", \"user1@example.com\");\n+\n+        mockMvc.perform(post)\n+            .andExpect(status().isFound())\n+            .andExpect(redirectedUrl(\"sent\"));\n+        verify(invitationsService).inviteUser(\"user1@example.com\", \"marissa\");\n+    }\n+    \n+    @Test\n+    public void testSendInvitationEmailToExistingVerifiedUser() throws Exception {\n+        UaaPrincipal p = new UaaPrincipal(\"123\",\"marissa\",\"marissa@test.org\", Origin.UAA,\"\");\n+        UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(p, \"\", UaaAuthority.USER_AUTHORITIES);\n+        assertTrue(auth.isAuthenticated());\n+        MockSecurityContext mockSecurityContext = new MockSecurityContext(auth);\n+        SecurityContextHolder.setContext(mockSecurityContext);\n+        MockHttpSession session = new MockHttpSession();\n+        session.setAttribute(\n+            HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY,\n+            mockSecurityContext\n+        );\n+\n+        MockHttpServletRequestBuilder post = post(\"/invitations/new.do\")\n+            .param(\"email\", \"user1@example.com\");\n+\n+        doThrow(new UaaException(\"\",409)).when(invitationsService).inviteUser(\"user1@example.com\", \"marissa\");\n+        mockMvc.perform(post)\n+            .andExpect(status().isUnprocessableEntity())\n+            .andExpect(view().name(\"invitations/new_invite\"))\n+            .andExpect(model().attribute(\"error_message_code\", \"existing_user\"));\n+    }\n+\n+    @Test\n+    public void testSendInvitationWithInvalidEmail() throws Exception {\n+        UaaPrincipal p = new UaaPrincipal(\"123\",\"marissa\",\"marissa@test.org\", Origin.UAA,\"\");\n+        UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(p, \"\", UaaAuthority.USER_AUTHORITIES);\n+        assertTrue(auth.isAuthenticated());\n+        MockSecurityContext mockSecurityContext = new MockSecurityContext(auth);\n+        SecurityContextHolder.setContext(mockSecurityContext);\n+        MockHttpSession session = new MockHttpSession();\n+        session.setAttribute(\n+            HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY,\n+            mockSecurityContext\n+        );\n+\n+        MockHttpServletRequestBuilder post = post(\"/invitations/new.do\")\n+            .param(\"email\", \"not_a_real_email\");\n+\n+        mockMvc.perform(post)\n+            .andExpect(status().isUnprocessableEntity())\n+            .andExpect(model().attribute(\"error_message_code\", \"invalid_email\"))\n+            .andExpect(view().name(\"invitations/new_invite\"));\n+\n+        verifyZeroInteractions(invitationsService);\n+    }\n+\n+    @Test\n+    public void testAcceptInvitationsPage() throws Exception {\n+    \tMap<String,String> codeData = new HashMap<>();\n+    \tcodeData.put(\"user_id\", \"user-id-001\");\n+    \tcodeData.put(\"email\", \"user@example.com\");\n+    \twhen(expiringCodeService.verifyCode(\"the_secret_code\")).thenReturn(codeData);\n+        MockHttpServletRequestBuilder get = get(\"/invitations/accept\")\n+                                            .param(\"code\", \"the_secret_code\");\n+\n+        mockMvc.perform(get)\n+            .andExpect(status().isOk())\n+            .andExpect(model().attribute(\"user_id\", \"user-id-001\"))\n+            .andExpect(model().attribute(\"email\", \"user@example.com\"))\n+            .andExpect(view().name(\"invitations/accept_invite\"));\n+        UaaPrincipal principal = ((UaaPrincipal) SecurityContextHolder.getContext().getAuthentication().getPrincipal());\n+        assertEquals(\"user-id-001\", principal.getId());\n+        assertEquals(\"user@example.com\", principal.getName());\n+        assertEquals(\"user@example.com\", principal.getEmail());\n+    }\n+    \n+    \n+    @Test\n+    public void testAcceptInvitePageWithExpiredCode() throws Exception {\n+    \tdoThrow(new CodeNotFoundException(\"code expired\")).when(expiringCodeService).verifyCode(\"the_secret_code\");\n+        MockHttpServletRequestBuilder get = get(\"/invitations/accept\").param(\"code\", \"the_secret_code\");\n+        mockMvc.perform(get)\n+            .andExpect(status().isUnprocessableEntity())\n+            .andExpect(model().attribute(\"error_message_code\", \"code_expired\"))\n+            .andExpect(view().name(\"invitations/accept_invite\"))\n+            .andExpect(xpath(\"//*[@class='email-display']\").doesNotExist())\n+            .andExpect(xpath(\"//form\").doesNotExist());\n+        assertNull(SecurityContextHolder.getContext().getAuthentication());\n+    }\n+\n+\n+    @Test\n+    public void testAcceptInvite() throws Exception {\n+        UaaPrincipal uaaPrincipal = new UaaPrincipal(\"user-id-001\", \"user@example.com\", \"user@example.com\", Origin.UAA, null);\n+        UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(uaaPrincipal, null, UaaAuthority.USER_AUTHORITIES);\n+        SecurityContextHolder.getContext().setAuthentication(token);\n+        \n+        MockHttpServletRequestBuilder post = post(\"/invitations/accept.do\")\n+            .param(\"password\", \"password\")\n+            .param(\"password_confirmation\", \"password\")\n+            .param(\"client_id\", \"\");\n+\n+        mockMvc.perform(post)\n+            .andExpect(status().isFound())\n+            .andExpect(redirectedUrl(\"/home\"));\n+        \n+        verify(invitationsService).acceptInvitation(\"user-id-001\",\"user@example.com\", \"password\", \"\");\n+    }\n+\n+    @Test\n+    public void testAcceptInviteWithClientRedirect() throws Exception {\n+        UaaPrincipal uaaPrincipal = new UaaPrincipal(\"user-id-001\", \"user@example.com\", \"user@example.com\", Origin.UAA, null);\n+        UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(uaaPrincipal, null, UaaAuthority.USER_AUTHORITIES);\n+        SecurityContextHolder.getContext().setAuthentication(token);\n+\n+        when(invitationsService.acceptInvitation(\"user-id-001\", \"user@example.com\", \"password\", \"app\")).thenReturn(\"http://localhost:8080/app\");\n+\n+        MockHttpServletRequestBuilder post = post(\"/invitations/accept.do\")\n+            .param(\"password\", \"password\")\n+            .param(\"password_confirmation\", \"password\")\n+            .param(\"client_id\", \"app\");\n+\n+        mockMvc.perform(post)\n+            .andExpect(status().isFound())\n+            .andExpect(redirectedUrl(\"http://localhost:8080/app\"));\n+    }\n+\n+    @Test\n+    public void testAcceptInviteWithoutMatchingPasswords() throws Exception {\n+    \tUaaPrincipal uaaPrincipal = new UaaPrincipal(\"user-id-001\", \"user@example.com\", \"user@example.com\", Origin.UAA, null);\n+        UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(uaaPrincipal, null, UaaAuthority.USER_AUTHORITIES);\n+        SecurityContextHolder.getContext().setAuthentication(token);\n+        \n+        MockHttpServletRequestBuilder post = post(\"/invitations/accept.do\")\n+            .param(\"password\", \"password\")\n+            .param(\"password_confirmation\", \"does not match\")\n+            .param(\"client_id\", \"\");\n+\n+        mockMvc.perform(post)\n+            .andExpect(status().isUnprocessableEntity())\n+            .andExpect(model().attribute(\"error_message_code\", \"form_error\"))\n+            .andExpect(model().attribute(\"email\", \"user@example.com\"))\n+            .andExpect(view().name(\"invitations/accept_invite\"));\n+\n+        verifyZeroInteractions(invitationsService);\n+    }\n+\n+\n+    public static class MockSecurityContext implements SecurityContext {\n+\n+        private static final long serialVersionUID = -1386535243513362694L;\n+\n+        private Authentication authentication;\n+\n+        public MockSecurityContext(Authentication authentication) {\n+            this.authentication = authentication;\n+        }\n+\n+        @Override\n+        public Authentication getAuthentication() {\n+            return this.authentication;\n+        }\n+\n+        @Override\n+        public void setAuthentication(Authentication authentication) {\n+            this.authentication = authentication;\n+        }\n+    }\n+\n+    @Configuration\n+    @EnableWebMvc\n+    @Import(ThymeleafConfig.class)\n+    static class ContextConfiguration extends WebMvcConfigurerAdapter {\n+\n+        @Override\n+        public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {\n+            configurer.enable();\n+        }\n+\n+        @Bean\n+        BuildInfo buildInfo() {\n+            return new BuildInfo();\n+        }\n+\n+        @Bean\n+        public ResourceBundleMessageSource messageSource() {\n+            ResourceBundleMessageSource resourceBundleMessageSource = new ResourceBundleMessageSource();\n+            resourceBundleMessageSource.setBasename(\"messages\");\n+            return resourceBundleMessageSource;\n+        }\n+\n+        @Bean\n+        InvitationsService invitationsService() {\n+            return Mockito.mock(InvitationsService.class);\n+        }\n+\n+        @Bean\n+        InvitationsController invitationsController(InvitationsService invitationsService) {\n+            return new InvitationsController(invitationsService);\n+        }\n+        \n+        @Bean \n+        ExpiringCodeService expiringCodeService() {\n+        \treturn Mockito.mock(ExpiringCodeService.class);\n+        }\n+    }\n+}"
        },
        {
            "sha": "16ec5d1ff61b1a97627346a9e881d366f4409596",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/LinkedMaskingMultiValueMapTests.java",
            "status": "added",
            "additions": 150,
            "deletions": 0,
            "changes": 150,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FLinkedMaskingMultiValueMapTests.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FLinkedMaskingMultiValueMapTests.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FLinkedMaskingMultiValueMapTests.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,150 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.util.MultiValueMap;\n+\n+/**\n+ * @author Arjen Poutsma\n+ * @author fhanik\n+ */\n+public class LinkedMaskingMultiValueMapTests {\n+\n+    private LinkedMaskingMultiValueMap<String, String> map;\n+    private LinkedMaskingMultiValueMap<Object, Object> objectMap;\n+\n+    @Before\n+    public void setUp() {\n+        map = new LinkedMaskingMultiValueMap<String, String>(\"password\");\n+        objectMap = new LinkedMaskingMultiValueMap<Object, Object>(\"password\");\n+    }\n+\n+    @Test\n+    public void add() {\n+        map.add(\"key\", \"value1\");\n+        map.add(\"key\", \"value2\");\n+        assertEquals(1, map.size());\n+        List<String> expected = new ArrayList<String>(2);\n+        expected.add(\"value1\");\n+        expected.add(\"value2\");\n+        assertEquals(expected, map.get(\"key\"));\n+    }\n+\n+    @Test\n+    public void getFirst() {\n+        List<String> values = new ArrayList<String>(2);\n+        values.add(\"value1\");\n+        values.add(\"value2\");\n+        map.put(\"key\", values);\n+        assertEquals(\"value1\", map.getFirst(\"key\"));\n+        assertNull(map.getFirst(\"other\"));\n+    }\n+\n+    @Test\n+    public void set() {\n+        map.set(\"key\", \"value1\");\n+        map.set(\"key\", \"value2\");\n+        assertEquals(1, map.size());\n+        assertEquals(Collections.singletonList(\"value2\"), map.get(\"key\"));\n+    }\n+\n+    @Test\n+    public void equals() {\n+        map.set(\"key1\", \"value1\");\n+        assertEquals(map, map);\n+        MultiValueMap<String, String> o1 = new LinkedMaskingMultiValueMap<String, String>();\n+        o1.set(\"key1\", \"value1\");\n+        assertEquals(map, o1);\n+        assertEquals(o1, map);\n+        Map<String, List<String>> o2 = new HashMap<String, List<String>>();\n+        o2.put(\"key1\", Collections.singletonList(\"value1\"));\n+        assertEquals(map, o2);\n+        assertEquals(o2, map);\n+    }\n+\n+    @Test\n+    public void testSelfReferenceKey() {\n+        objectMap.add(objectMap, \"value1\");\n+        String s = objectMap.toString();\n+        assertTrue(s.indexOf(\"this map\") >= 0);\n+    }\n+\n+    @Test\n+    public void testSelfReferenceValue() {\n+        objectMap.add(\"key1\", objectMap);\n+        String s = objectMap.toString();\n+        assertTrue(s.indexOf(\"this map\") >= 0);\n+    }\n+\n+    @Test\n+    public void doNotPrintPassword() {\n+        map.add(\"password\", \"password-value\");\n+        String s = map.toString();\n+        assertTrue(s.indexOf(\"password\") >= 0);\n+        assertFalse(s.indexOf(\"password-value\") >= 0);\n+        assertTrue(s.indexOf(\"PROTECTED\") >= 0);\n+    }\n+\n+    @Test\n+    public void testHash() {\n+        map.add(\"key1\", \"value1\");\n+        map.add(\"key1\", \"value2\");\n+        objectMap.add(\"key1\", \"value1\");\n+        objectMap.add(\"key1\", \"value2\");\n+        int hash1 = map.hashCode();\n+        int hash2 = objectMap.hashCode();\n+        assertEquals(hash1, hash2);\n+    }\n+\n+    @Test\n+    public void testCyclicKeyHash() {\n+        objectMap.add(objectMap, \"value1\");\n+        objectMap.add(objectMap, \"value2\");\n+        LinkedMaskingMultiValueMap<Object, Object> objectMap2 = new LinkedMaskingMultiValueMap<Object, Object>(\n+                        \"password\");\n+        objectMap2.add(objectMap2, \"value1\");\n+        objectMap2.add(objectMap2, \"value2\");\n+        int hash1 = objectMap.hashCode();\n+        int hash2 = objectMap2.hashCode();\n+        assertEquals(hash1, hash2);\n+    }\n+\n+    @Test\n+    public void testCyclicValueHash() {\n+        objectMap.add(\"key1\", \"value1\");\n+        objectMap.add(\"key1\", objectMap);\n+\n+        LinkedMaskingMultiValueMap<Object, Object> objectMap2 = new LinkedMaskingMultiValueMap<Object, Object>(\n+                        \"password\");\n+        objectMap2.add(\"key1\", \"value1\");\n+        objectMap2.add(\"key1\", objectMap2);\n+\n+        int hash1 = objectMap.hashCode();\n+        int hash2 = objectMap2.hashCode();\n+        assertEquals(hash1, hash2);\n+    }\n+\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "838d3be09d9fe8dea3f8f755aa70e7a5a5ad2883",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/LoginMockMvcIntegrationTests.java",
            "status": "added",
            "additions": 102,
            "deletions": 0,
            "changes": 102,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FLoginMockMvcIntegrationTests.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FLoginMockMvcIntegrationTests.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FLoginMockMvcIntegrationTests.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,102 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import static org.hamcrest.Matchers.hasEntry;\n+import static org.springframework.http.MediaType.TEXT_HTML;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.xpath;\n+\n+import org.cloudfoundry.identity.uaa.login.test.DefaultTestConfig;\n+import org.cloudfoundry.identity.uaa.login.test.DefaultTestConfigContextLoader;\n+import org.junit.Assume;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.security.web.FilterChainProxy;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@WebAppConfiguration\n+@ContextConfiguration(classes = DefaultTestConfig.class, loader = DefaultTestConfigContextLoader.class)\n+public class LoginMockMvcIntegrationTests {\n+\n+    @Autowired\n+    WebApplicationContext webApplicationContext;\n+\n+    @Autowired\n+    @Qualifier(\"springSecurityFilterChain\")\n+    FilterChainProxy filterChainProxy;\n+\n+    private MockMvc mockMvc;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext)\n+                .addFilter(filterChainProxy)\n+                .build();\n+    }\n+\n+    @Test\n+    public void testLogin() throws Exception {\n+        mockMvc.perform(get(\"/login\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(view().name(\"login\"))\n+                        .andExpect(model().attribute(\"links\", hasEntry(\"passwd\", \"http://localhost:8080/login/forgot_password\")))\n+                        .andExpect(model().attribute(\"links\", hasEntry(\"register\", \"/create_account\")))\n+                        .andExpect(model().attributeExists(\"prompts\"));\n+    }\n+\n+    @Test\n+    public void testLoginNoSaml() throws Exception {\n+        Assume.assumeFalse(\"Functionality is disabled by the saml profile\", Arrays.asList(webApplicationContext.getEnvironment().getActiveProfiles()).contains(\"saml\"));\n+\n+        mockMvc.perform(get(\"/login\"))\n+                .andExpect(status().isOk())\n+                .andExpect(model().attributeDoesNotExist(\"showSamlLoginLink\"));\n+    }\n+\n+    @Test\n+    public void testLoginWithEmptyLinks() throws Exception {\n+        Map<String, String> links = (Map<String, String>) webApplicationContext.getBean(\"links\", Map.class);\n+        links.put(\"passwd\", \"\");\n+\n+        mockMvc.perform(get(\"/login\").accept(TEXT_HTML))\n+                .andExpect(status().isOk())\n+                .andExpect(model().attribute(\"links\", hasEntry(\"passwd\", \"\")))\n+                .andExpect(xpath(\"//a[text()='Reset password']\").doesNotExist());\n+    }\n+\n+    @Test\n+    public void testLoginWithAnalytics() throws Exception {\n+        System.setProperty(\"analytics.code\", \"secret_code\");\n+        System.setProperty(\"analytics.domain\", \"example.com\");\n+\n+        mockMvc.perform(get(\"/login\").accept(TEXT_HTML))\n+                .andExpect(status().isOk())\n+                .andExpect(xpath(\"//body/script[contains(text(),'example.com')]\").exists());\n+    }\n+}"
        },
        {
            "sha": "46e888d555d24a576abfa8a5a7a9683e374a1354",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/NotificationsServiceTest.java",
            "status": "added",
            "additions": 102,
            "deletions": 0,
            "changes": 102,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FNotificationsServiceTest.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FNotificationsServiceTest.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FNotificationsServiceTest.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,102 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.springframework.mock.env.MockEnvironment;\n+import org.springframework.test.web.client.MockRestServiceServer;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.springframework.http.HttpMethod.POST;\n+import static org.springframework.http.HttpMethod.PUT;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.jsonPath;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;\n+import static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;\n+\n+public class NotificationsServiceTest {\n+\n+    private RestTemplate notificationsTemplate;\n+    private MockRestServiceServer mockNotificationsServer;\n+    private RestTemplate uaaTemplate;\n+    private Map<MessageType, HashMap<String, Object>> notifications;\n+    private NotificationsService notificationsService;\n+    private Map<String, Object> response;\n+\n+    @Before\n+    public void setUp(){\n+        notificationsTemplate = new RestTemplate();\n+        mockNotificationsServer = MockRestServiceServer.createServer(notificationsTemplate);\n+\n+        uaaTemplate = Mockito.mock(RestTemplate.class);\n+        notifications = new HashMap<>();\n+        HashMap<String, Object> passwordResetNotification = new HashMap<>();\n+\n+        passwordResetNotification.put(\"id\", \"kind-id-01\");\n+        passwordResetNotification.put(\"description\", \"password reset\");\n+        passwordResetNotification.put(\"critical\", true);\n+        notifications.put(MessageType.PASSWORD_RESET, passwordResetNotification);\n+\n+        notificationsService = new NotificationsService(notificationsTemplate, \"http://notifications.example.com\", notifications, uaaTemplate, \"http://uaa.com\");\n+\n+        response = new HashMap<>();\n+        List<Map<String, String>> resources = new ArrayList<>();\n+        Map<String,String> userDetails = new HashMap<>();\n+        userDetails.put(\"id\", \"user-id-01\");\n+        resources.add(userDetails);\n+        response.put(\"resources\", resources);\n+\n+        mockNotificationsServer.expect(requestTo(\"http://notifications.example.com/registration\"))\n+            .andExpect(method(PUT))\n+            .andExpect(jsonPath(\"$.source_description\").value(\"CF_Identity\"))\n+            .andExpect(jsonPath(\"$.kinds[0].id\").value(\"kind-id-01\"))\n+            .andExpect(jsonPath(\"$.kinds[0].description\").value(\"password reset\"))\n+            .andExpect(jsonPath(\"$.kinds[0].critical\").value(true))\n+            .andRespond(withSuccess());\n+    }\n+\n+    @Test\n+    public void testSendMessageToUserId() throws Exception {\n+\n+        mockNotificationsServer.expect(requestTo(\"http://notifications.example.com/users/user-id-01\"))\n+            .andExpect(method(POST))\n+            .andExpect(jsonPath(\"$.kind_id\").value(\"kind-id-01\"))\n+            .andExpect(jsonPath(\"$.subject\").value(\"First message\"))\n+            .andExpect(jsonPath(\"$.html\").value(\"<p>Text</p>\"))\n+            .andRespond(withSuccess());\n+\n+        mockNotificationsServer.expect(requestTo(\"http://notifications.example.com/users/user-id-01\"))\n+            .andExpect(method(POST))\n+            .andExpect(jsonPath(\"$.subject\").value(\"Second message\"))\n+            .andRespond(withSuccess());\n+\n+        notificationsService.sendMessage(\"user-id-01\", \"user@example.com\", MessageType.PASSWORD_RESET, \"First message\", \"<p>Text</p>\");\n+\n+        assertTrue(notificationsService.getIsNotificationsRegistered());\n+\n+        notificationsService.sendMessage(\"user-id-01\", null, MessageType.PASSWORD_RESET, \"Second message\", \"<p>Text</p>\");\n+\n+        mockNotificationsServer.verify();\n+    }\n+\n+    @Test\n+    public void testSendingMessageToEmailAddress() throws Exception {\n+\n+        mockNotificationsServer.expect(requestTo(\"http://notifications.example.com/emails\"))\n+            .andExpect(method(POST))\n+            .andExpect(jsonPath(\"$.to\").value(\"user@example.com\"))\n+            .andExpect(jsonPath(\"$.subject\").value(\"First message\"))\n+            .andExpect(jsonPath(\"$.html\").value(\"<p>Message</p>\"))\n+            .andRespond(withSuccess());\n+\n+        notificationsService.sendMessage(null, \"user@example.com\", MessageType.PASSWORD_RESET, \"First message\", \"<p>Message</p>\");\n+\n+        mockNotificationsServer.verify();\n+    }\n+}"
        },
        {
            "sha": "1f490d6aea07183d05782579047a8d0e6a3cf684",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/ProfileControllerTests.java",
            "status": "added",
            "additions": 210,
            "deletions": 0,
            "changes": 210,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FProfileControllerTests.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FProfileControllerTests.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FProfileControllerTests.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,210 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import static org.cloudfoundry.identity.uaa.oauth.approval.Approval.ApprovalStatus.APPROVED;\n+import static org.cloudfoundry.identity.uaa.oauth.approval.Approval.ApprovalStatus.DENIED;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.hasKey;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.hasValue;\n+import static org.hamcrest.Matchers.not;\n+import static org.springframework.http.MediaType.TEXT_HTML;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.cloudfoundry.identity.uaa.authentication.Origin;\n+import org.cloudfoundry.identity.uaa.authentication.UaaPrincipal;\n+import org.cloudfoundry.identity.uaa.login.test.ThymeleafConfig;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.web.context.WebApplicationContext;\n+import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;\n+import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * @author Dave Syer\n+ * \n+ */\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@WebAppConfiguration\n+@ContextConfiguration(classes = ProfileControllerTests.ContextConfiguration.class)\n+public class ProfileControllerTests {\n+\n+    @Autowired\n+    WebApplicationContext webApplicationContext;\n+\n+    @Autowired\n+    ApprovalsService approvalsService;\n+\n+    private MockMvc mockMvc;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();\n+\n+        Map<String, List<UaaApprovalsService.DescribedApproval>> approvalsByClientId = new HashMap<String, List<UaaApprovalsService.DescribedApproval>>();\n+\n+        UaaApprovalsService.DescribedApproval readApproval = new UaaApprovalsService.DescribedApproval();\n+        readApproval.setUserId(\"userId\");\n+        readApproval.setClientId(\"app\");\n+        readApproval.setScope(\"thing.read\");\n+        readApproval.setStatus(APPROVED);\n+        readApproval.setDescription(\"Read your thing resources\");\n+\n+        UaaApprovalsService.DescribedApproval writeApproval = new UaaApprovalsService.DescribedApproval();\n+        writeApproval.setUserId(\"userId\");\n+        writeApproval.setClientId(\"app\");\n+        writeApproval.setScope(\"thing.write\");\n+        writeApproval.setStatus(APPROVED);\n+        writeApproval.setDescription(\"Write to your thing resources\");\n+\n+        approvalsByClientId.put(\"app\", Arrays.asList(readApproval, writeApproval));\n+\n+        Mockito.when(approvalsService.getCurrentApprovalsByClientId()).thenReturn(approvalsByClientId);\n+    }\n+\n+    @Test\n+    public void testGetProfile() throws Exception {\n+        UaaPrincipal uaaPrincipal = new UaaPrincipal(\"fake-user-id\", \"username\", \"email@example.com\", Origin.UAA, null);\n+        UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(uaaPrincipal, null);\n+\n+        mockMvc.perform(get(\"/profile\").principal(authentication))\n+                .andExpect(status().isOk())\n+                .andExpect(model().attribute(\"isUaaManagedUser\", true))\n+                .andExpect(model().attribute(\"approvals\", hasKey(\"app\")))\n+                .andExpect(model().attribute(\"approvals\", hasValue(hasSize(2))))\n+                .andExpect(content().contentTypeCompatibleWith(TEXT_HTML))\n+                .andExpect(content().string(containsString(\"These applications have been granted access to your account.\")))\n+                .andExpect(content().string(containsString(\"Change Password\")));\n+    }\n+\n+    @Test\n+    public void testSpecialMessageWhenNoAppsAreAuthorized() throws Exception {\n+        Map<String, List<UaaApprovalsService.DescribedApproval>> approvalsByClientId = new HashMap<String, List<UaaApprovalsService.DescribedApproval>>();\n+        Mockito.when(approvalsService.getCurrentApprovalsByClientId()).thenReturn(approvalsByClientId);\n+\n+        UaaPrincipal uaaPrincipal = new UaaPrincipal(\"fake-user-id\", \"username\", \"email@example.com\", Origin.UAA, null);\n+        UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(uaaPrincipal, null);\n+\n+        mockMvc.perform(get(\"/profile\").principal(authentication))\n+                .andExpect(status().isOk())\n+                .andExpect(model().attributeExists(\"approvals\"))\n+                .andExpect(content().contentTypeCompatibleWith(TEXT_HTML))\n+                .andExpect(content().string(containsString(\"You have not yet authorized any third party applications.\")));\n+    }\n+\n+    @Test\n+    public void testPasswordLinkHiddenWhenUsersOriginIsNotUaa() throws Exception {\n+        UaaPrincipal uaaPrincipal = new UaaPrincipal(\"fake-user-id\", \"username\", \"email@example.com\", Origin.LDAP, \"dnEntryForLdapUser\");\n+        UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(uaaPrincipal, null);\n+\n+        mockMvc.perform(get(\"/profile\").principal(authentication))\n+                .andExpect(status().isOk())\n+                .andExpect(model().attribute(\"isUaaManagedUser\", false))\n+                .andExpect(content().string(not(containsString(\"Change Password\"))));\n+    }\n+\n+    @Test\n+    public void testUpdateProfile() throws Exception {\n+        MockHttpServletRequestBuilder post = post(\"/profile\")\n+                .param(\"checkedScopes\", \"app-thing.read\")\n+                .param(\"update\", \"\")\n+                .param(\"clientId\", \"app\");\n+\n+        mockMvc.perform(post)\n+                .andExpect(status().isFound())\n+                .andExpect(redirectedUrl(\"profile\"));\n+\n+        ArgumentCaptor<List<UaaApprovalsService.DescribedApproval>> captor = ArgumentCaptor.forClass((Class)List.class);\n+        Mockito.verify(approvalsService).updateApprovals(captor.capture());\n+\n+        UaaApprovalsService.DescribedApproval readApproval = captor.getValue().get(0);\n+        Assert.assertEquals(\"userId\", readApproval.getUserId());\n+        Assert.assertEquals(\"app\", readApproval.getClientId());\n+        Assert.assertEquals(\"thing.read\", readApproval.getScope());\n+        Assert.assertEquals(APPROVED, readApproval.getStatus());\n+\n+        UaaApprovalsService.DescribedApproval writeApproval = captor.getValue().get(1);\n+        Assert.assertEquals(\"userId\", writeApproval.getUserId());\n+        Assert.assertEquals(\"app\", writeApproval.getClientId());\n+        Assert.assertEquals(\"thing.write\", writeApproval.getScope());\n+        Assert.assertEquals(DENIED, writeApproval.getStatus());\n+    }\n+\n+    @Test\n+    public void testRevokeApp() throws Exception {\n+        MockHttpServletRequestBuilder post = post(\"/profile\")\n+                .param(\"checkedScopes\", \"app-resource.read\")\n+                .param(\"delete\", \"\")\n+                .param(\"clientId\", \"app\");\n+\n+        mockMvc.perform(post)\n+                .andExpect(status().isFound())\n+                .andExpect(redirectedUrl(\"profile\"));\n+\n+        Mockito.verify(approvalsService).deleteApprovalsForClient(\"app\");\n+    }\n+\n+    @Configuration\n+    @EnableWebMvc\n+    @Import(ThymeleafConfig.class)\n+    static class ContextConfiguration extends WebMvcConfigurerAdapter {\n+\n+        @Override\n+        public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {\n+            configurer.enable();\n+        }\n+\n+        @Bean\n+        BuildInfo buildInfo() {\n+            return new BuildInfo();\n+        }\n+\n+        @Bean\n+        ApprovalsService approvalsService() {\n+            return Mockito.mock(ApprovalsService.class);\n+        }\n+\n+        @Bean\n+        ProfileController profileController(ApprovalsService approvalsService) {\n+            return new ProfileController(approvalsService);\n+        }\n+    }\n+}"
        },
        {
            "sha": "698e02defb06d1bae359fafc5968c4e69eb77482",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/ResetPasswordControllerIntegrationTests.java",
            "status": "added",
            "additions": 100,
            "deletions": 0,
            "changes": 100,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FResetPasswordControllerIntegrationTests.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FResetPasswordControllerIntegrationTests.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FResetPasswordControllerIntegrationTests.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,100 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.cloudfoundry.identity.uaa.authentication.Origin;\n+import org.cloudfoundry.identity.uaa.authentication.UaaPrincipal;\n+import org.cloudfoundry.identity.uaa.login.test.UaaRestTemplateBeanFactoryPostProcessor;\n+import org.cloudfoundry.identity.uaa.test.YamlServletProfileInitializerContextInitializer;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContext;\n+import org.springframework.security.web.FilterChainProxy;\n+import org.springframework.security.web.context.HttpSessionSecurityContextRepository;\n+import org.springframework.test.web.client.MockRestServiceServer;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.context.support.XmlWebApplicationContext;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.springframework.http.HttpMethod.POST;\n+import static org.springframework.http.MediaType.APPLICATION_JSON;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.jsonPath;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;\n+import static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+public class ResetPasswordControllerIntegrationTests {\n+\n+    XmlWebApplicationContext webApplicationContext;\n+\n+    private MockMvc mockMvc;\n+    private MockRestServiceServer mockUaaServer;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        webApplicationContext = new XmlWebApplicationContext();\n+        new YamlServletProfileInitializerContextInitializer().initializeContext(webApplicationContext, \"login.yml\");\n+        webApplicationContext.setConfigLocation(\"file:./src/main/webapp/WEB-INF/spring-servlet.xml\");\n+        webApplicationContext.addBeanFactoryPostProcessor(new UaaRestTemplateBeanFactoryPostProcessor());\n+        webApplicationContext.refresh();\n+        FilterChainProxy springSecurityFilterChain = webApplicationContext.getBean(\"springSecurityFilterChain\", FilterChainProxy.class);\n+\n+        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext)\n+            .addFilter(springSecurityFilterChain)\n+            .build();\n+\n+        mockUaaServer = MockRestServiceServer.createServer(webApplicationContext.getBean(\"authorizationTemplate\", RestTemplate.class));\n+    }\n+\n+    @Test\n+    public void testResettingAPassword() throws Exception {\n+        mockUaaServer.expect(requestTo(\"http://localhost:8080/uaa/password_change\"))\n+            .andExpect(method(POST))\n+            .andExpect(jsonPath(\"$.code\").value(\"the_secret_code\"))\n+            .andExpect(jsonPath(\"$.new_password\").value(\"secret\"))\n+            .andRespond(withSuccess(\"{\" +\n+                \"\\\"user_id\\\":\\\"newly-created-user-id\\\",\" +\n+                \"\\\"username\\\":\\\"user@example.com\\\"\" +\n+                \"}\", APPLICATION_JSON));\n+\n+        MockHttpServletRequestBuilder post = post(\"/reset_password.do\")\n+            .param(\"code\", \"the_secret_code\")\n+            .param(\"email\", \"user@example.com\")\n+            .param(\"password\", \"secret\")\n+            .param(\"password_confirmation\", \"secret\");\n+\n+        MvcResult mvcResult = mockMvc.perform(post)\n+            .andExpect(status().isFound())\n+            .andExpect(redirectedUrl(\"home\"))\n+            .andReturn();\n+\n+        SecurityContext securityContext = (SecurityContext) mvcResult.getRequest().getSession().getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);\n+        Authentication authentication = securityContext.getAuthentication();\n+        Assert.assertThat(authentication.getPrincipal(), instanceOf(UaaPrincipal.class));\n+        UaaPrincipal principal = (UaaPrincipal) authentication.getPrincipal();\n+        Assert.assertThat(principal.getId(), equalTo(\"newly-created-user-id\"));\n+        Assert.assertThat(principal.getName(), equalTo(\"user@example.com\"));\n+        Assert.assertThat(principal.getEmail(), equalTo(\"user@example.com\"));\n+        Assert.assertThat(principal.getOrigin(), equalTo(Origin.UAA));\n+    }\n+}"
        },
        {
            "sha": "62b794cb09795be7c4b875619beedac271141b70",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/ResetPasswordControllerTest.java",
            "status": "added",
            "additions": 154,
            "deletions": 0,
            "changes": 154,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FResetPasswordControllerTest.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FResetPasswordControllerTest.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FResetPasswordControllerTest.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,154 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.cloudfoundry.identity.uaa.error.UaaException;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.web.servlet.view.InternalResourceViewResolver;\n+\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyZeroInteractions;\n+import static org.springframework.http.MediaType.APPLICATION_FORM_URLENCODED;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;\n+\n+public class ResetPasswordControllerTest {\n+    private MockMvc mockMvc;\n+    private ResetPasswordService resetPasswordService;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        resetPasswordService = Mockito.mock(ResetPasswordService.class);\n+        ResetPasswordController controller = new ResetPasswordController(resetPasswordService);\n+\n+        InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();\n+        viewResolver.setPrefix(\"/WEB-INF/jsp\");\n+        viewResolver.setSuffix(\".jsp\");\n+        mockMvc = MockMvcBuilders\n+                .standaloneSetup(controller)\n+                .setViewResolvers(viewResolver)\n+                .build();\n+    }\n+\n+    @Test\n+    public void testForgotPasswordPage() throws Exception {\n+        mockMvc.perform(get(\"/forgot_password\"))\n+                .andExpect(status().isOk())\n+                .andExpect(view().name(\"forgot_password\"));\n+    }\n+\n+    @Test\n+    public void testForgotPassword() throws Exception {\n+        MockHttpServletRequestBuilder post = post(\"/forgot_password.do\")\n+                .contentType(APPLICATION_FORM_URLENCODED)\n+                .param(\"email\", \"user@example.com\");\n+        mockMvc.perform(post)\n+                .andExpect(status().isFound())\n+                .andExpect(redirectedUrl(\"email_sent?code=reset_password\"));\n+\n+        verify(resetPasswordService).forgotPassword(eq(\"user@example.com\"));\n+    }\n+\n+    @Test\n+    public void testForgotPasswordFormValidationFailure() throws Exception {\n+        MockHttpServletRequestBuilder post = post(\"/forgot_password.do\")\n+            .contentType(APPLICATION_FORM_URLENCODED)\n+            .param(\"email\", \"notAnEmail\");\n+        mockMvc.perform(post)\n+            .andExpect(status().isUnprocessableEntity())\n+            .andExpect(view().name(\"forgot_password\"))\n+            .andExpect(model().attribute(\"message_code\", \"form_error\"));\n+\n+        verifyZeroInteractions(resetPasswordService);\n+    }\n+\n+    @Test\n+    public void testInstructions() throws Exception {\n+        mockMvc.perform(get(\"/email_sent\").param(\"code\", \"reset_password\"))\n+                .andExpect(status().isOk())\n+                .andExpect(model().attribute(\"code\", \"reset_password\"));\n+    }\n+\n+    @Test\n+    public void testResetPasswordPage() throws Exception {\n+        mockMvc.perform(get(\"/reset_password\").param(\"email\", \"user@example.com\").param(\"code\", \"secret_code\"))\n+                .andExpect(status().isOk())\n+                .andExpect(view().name(\"reset_password\"));\n+    }\n+\n+    @Test\n+    public void testResetPasswordSuccess() throws Exception {\n+        MockHttpServletRequestBuilder post = post(\"/reset_password.do\")\n+                .contentType(APPLICATION_FORM_URLENCODED)\n+                .param(\"code\", \"secret_code\")\n+                .param(\"email\", \"foo@example.com\")\n+                .param(\"password\", \"password\")\n+                .param(\"password_confirmation\", \"password\");\n+        mockMvc.perform(post)\n+                .andExpect(status().isFound())\n+                .andExpect(redirectedUrl(\"home\"))\n+                .andExpect(model().attributeDoesNotExist(\"code\"))\n+                .andExpect(model().attributeDoesNotExist(\"password\"))\n+                .andExpect(model().attributeDoesNotExist(\"password_confirmation\"));\n+\n+        verify(resetPasswordService).resetPassword(\"secret_code\", \"password\");\n+    }\n+\n+    @Test\n+    public void testResetPasswordFormValidationFailure() throws Exception {\n+        MockHttpServletRequestBuilder post = post(\"/reset_password.do\")\n+                .contentType(APPLICATION_FORM_URLENCODED)\n+                .param(\"code\", \"123456\")\n+                .param(\"email\", \"foo@example.com\")\n+                .param(\"password\", \"pass\")\n+                .param(\"password_confirmation\", \"word\");\n+\n+        mockMvc.perform(post)\n+                .andExpect(status().isUnprocessableEntity())\n+                .andExpect(view().name(\"reset_password\"))\n+                .andExpect(model().attribute(\"message_code\", \"form_error\"))\n+                .andExpect(model().attribute(\"email\", \"foo@example.com\"))\n+                .andExpect(model().attribute(\"code\", \"123456\"));\n+\n+        verifyZeroInteractions(resetPasswordService);\n+    }\n+\n+    @Test\n+    public void testResetPasswordFormWithInvalidCode() throws Exception {\n+        Mockito.when(resetPasswordService.resetPassword(\"bad_code\", \"password\")).thenThrow(new UaaException(\"Bad code!\"));\n+\n+        MockHttpServletRequestBuilder post = post(\"/reset_password.do\")\n+                .contentType(APPLICATION_FORM_URLENCODED)\n+                .param(\"code\", \"bad_code\")\n+                .param(\"email\", \"foo@example.com\")\n+                .param(\"password\", \"password\")\n+                .param(\"password_confirmation\", \"password\");\n+\n+        mockMvc.perform(post)\n+                .andExpect(status().isUnprocessableEntity())\n+                .andExpect(view().name(\"forgot_password\"))\n+                .andExpect(model().attribute(\"message_code\", \"bad_code\"));\n+\n+        verify(resetPasswordService).resetPassword(\"bad_code\", \"password\");\n+    }\n+}"
        },
        {
            "sha": "ba15b830ee279185f2b69645092a9b2c7707cedf",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/SamlLoginServerKeyManagerTests.java",
            "status": "added",
            "additions": 232,
            "deletions": 0,
            "changes": 232,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FSamlLoginServerKeyManagerTests.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FSamlLoginServerKeyManagerTests.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FSamlLoginServerKeyManagerTests.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,232 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import static org.junit.Assert.assertNotNull;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.opensaml.xml.security.credential.Credential;\n+\n+public class SamlLoginServerKeyManagerTests {\n+\n+    private SamlLoginServerKeyManager keyManager = null;\n+\n+    @Test\n+    public void testWithWorkingCertificate() throws Exception {\n+        String key = \"-----BEGIN RSA PRIVATE KEY-----\\n\" +\n+                        \"Proc-Type: 4,ENCRYPTED\\n\" +\n+                        \"DEK-Info: DES-EDE3-CBC,5771044F3450A262\\n\" +\n+                        \"\\n\" +\n+                        \"VfRgIdzq/TUFdIwTOxochDs02sSQXA/Z6mRnffYTQMwXpQ5f5nRuqcY8zECGMaDe\\n\" +\n+                        \"aLrndpWzGbxiePKgN5AxuIDYNnKMrDRgyCzaaPx66rb87oMwtuq1HM18qqs+yN5v\\n\" +\n+                        \"CdsoS2uz57fCDI24BuJkIDSIeumLXc5MdN0HUeaxOVzmpbpsbBXjRYa24gW38mUh\\n\" +\n+                        \"DzmOAsNDxfoSTox02Cj+GV024e+PiWR6AMA7RKhsKPf9F4ctWwozvEHrV8fzTy5B\\n\" +\n+                        \"+KM361P7XwJYueiV/gMZW2DXSujNRBEVfC1CLaxDV3eVsFX5iIiUbc4JQYOM6oQ3\\n\" +\n+                        \"KxGPImcRQPY0asKgEDIaWtysUuBoDSbfQ/FxGWeqwR6P/Vth4dXzVGheYLu1V1CU\\n\" +\n+                        \"o6M+EXC/VUhERKwi13EgqXLKrDI352/HgEKG60EhM6xIJy9hLHy0UGjdHDcA+cF6\\n\" +\n+                        \"NEl6E3CivddMHIPQWil5x4AMaevGa3v/gcZI0DN8t7L1g4fgjtSPYzvwmOxoxHGi\\n\" +\n+                        \"7V7PdzaD4GWV75fv99sBlq2e0KK9crNUzs7vbFA/m6tgNA628SGhU1uAc/5xOskI\\n\" +\n+                        \"0Ez6kjgHoh4U7t/fu7ey1MbFQt6byHY9lk27nW1ub/QMAaRJ+EDnrReB/NN6q5Vu\\n\" +\n+                        \"h9eQNniNOeQfflzFyPB9omLNsVJkENn+lZNNrrlbn8OmJ0pT58Iaetfh79rDZPw9\\n\" +\n+                        \"zmHVqmMynmecTWAcA9ATf7+lh+xV88JDjQkLcG/3WEXNH7HXKO00pUa8+JtyxbAb\\n\" +\n+                        \"dAwGgrjJkbbk1qLLScOqY4mA5WXa5+80LMkCYO44vVTp2VKmnxj8Mw==\\n\" +\n+                        \"-----END RSA PRIVATE KEY-----\";\n+        String certificate = \"-----BEGIN CERTIFICATE-----\\n\" +\n+                        \"MIIB1TCCAT4CCQCpQCfJYT8ZJTANBgkqhkiG9w0BAQUFADAvMS0wKwYDVQQDFCRz\\n\" +\n+                        \"YW1sX2xvZ2luLE9VPXRlbXBlc3QsTz12bXdhcmUsTz1jb20wHhcNMTMwNzAyMDAw\\n\" +\n+                        \"MzM3WhcNMTQwNzAyMDAwMzM3WjAvMS0wKwYDVQQDFCRzYW1sX2xvZ2luLE9VPXRl\\n\" +\n+                        \"bXBlc3QsTz12bXdhcmUsTz1jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGB\\n\" +\n+                        \"ANK8mv+mUzhPH/8iTdMsZ6mY4r4At/GZIFS34L+/I0V2g6PkZ84VBgodqqV6Z6NY\\n\" +\n+                        \"OSk0lcjrzU650zbES7yn4MjuvP0N5T9LydlvjOEzfA+uRETiy8d+DsS3rThRY+Ja\\n\" +\n+                        \"dvmS0PswJ8cvHAksYmGNUWfTU+Roxcv0ZDqD+cUNi1+NAgMBAAEwDQYJKoZIhvcN\\n\" +\n+                        \"AQEFBQADgYEAy54UVlZifk1PPdTg9OJuumdxgzZk3QEWZGjdJYEc134MeKKsIX50\\n\" +\n+                        \"+6y5GDyXmxvJx33ySTZuRaaXClOuAtXRWpz0KlceujYuwboyUxhn46SUASD872nb\\n\" +\n+                        \"cN0E1UrhDloFcftXEXudDL2S2cSQjsyxLNbBop63xq+U6MYG/uFe7GQ=\\n\" +\n+                        \"-----END CERTIFICATE-----\";\n+        String password = \"password\";\n+\n+        keyManager = new SamlLoginServerKeyManager(key, password, certificate);\n+        Credential credential = keyManager.getDefaultCredential();\n+        assertNotNull(credential.getPrivateKey());\n+        assertNotNull(credential.getPublicKey());\n+        assertNotNull(credential);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testWithWorkingCertificateInvalidPassword() throws Exception {\n+        String key = \"-----BEGIN RSA PRIVATE KEY-----\\n\" +\n+                        \"Proc-Type: 4,ENCRYPTED\\n\" +\n+                        \"DEK-Info: DES-EDE3-CBC,5771044F3450A262\\n\" +\n+                        \"\\n\" +\n+                        \"VfRgIdzq/TUFdIwTOxochDs02sSQXA/Z6mRnffYTQMwXpQ5f5nRuqcY8zECGMaDe\\n\" +\n+                        \"aLrndpWzGbxiePKgN5AxuIDYNnKMrDRgyCzaaPx66rb87oMwtuq1HM18qqs+yN5v\\n\" +\n+                        \"CdsoS2uz57fCDI24BuJkIDSIeumLXc5MdN0HUeaxOVzmpbpsbBXjRYa24gW38mUh\\n\" +\n+                        \"DzmOAsNDxfoSTox02Cj+GV024e+PiWR6AMA7RKhsKPf9F4ctWwozvEHrV8fzTy5B\\n\" +\n+                        \"+KM361P7XwJYueiV/gMZW2DXSujNRBEVfC1CLaxDV3eVsFX5iIiUbc4JQYOM6oQ3\\n\" +\n+                        \"KxGPImcRQPY0asKgEDIaWtysUuBoDSbfQ/FxGWeqwR6P/Vth4dXzVGheYLu1V1CU\\n\" +\n+                        \"o6M+EXC/VUhERKwi13EgqXLKrDI352/HgEKG60EhM6xIJy9hLHy0UGjdHDcA+cF6\\n\" +\n+                        \"NEl6E3CivddMHIPQWil5x4AMaevGa3v/gcZI0DN8t7L1g4fgjtSPYzvwmOxoxHGi\\n\" +\n+                        \"7V7PdzaD4GWV75fv99sBlq2e0KK9crNUzs7vbFA/m6tgNA628SGhU1uAc/5xOskI\\n\" +\n+                        \"0Ez6kjgHoh4U7t/fu7ey1MbFQt6byHY9lk27nW1ub/QMAaRJ+EDnrReB/NN6q5Vu\\n\" +\n+                        \"h9eQNniNOeQfflzFyPB9omLNsVJkENn+lZNNrrlbn8OmJ0pT58Iaetfh79rDZPw9\\n\" +\n+                        \"zmHVqmMynmecTWAcA9ATf7+lh+xV88JDjQkLcG/3WEXNH7HXKO00pUa8+JtyxbAb\\n\" +\n+                        \"dAwGgrjJkbbk1qLLScOqY4mA5WXa5+80LMkCYO44vVTp2VKmnxj8Mw==\\n\" +\n+                        \"-----END RSA PRIVATE KEY-----\";\n+        String certificate = \"-----BEGIN CERTIFICATE-----\\n\" +\n+                        \"MIIB1TCCAT4CCQCpQCfJYT8ZJTANBgkqhkiG9w0BAQUFADAvMS0wKwYDVQQDFCRz\\n\" +\n+                        \"YW1sX2xvZ2luLE9VPXRlbXBlc3QsTz12bXdhcmUsTz1jb20wHhcNMTMwNzAyMDAw\\n\" +\n+                        \"MzM3WhcNMTQwNzAyMDAwMzM3WjAvMS0wKwYDVQQDFCRzYW1sX2xvZ2luLE9VPXRl\\n\" +\n+                        \"bXBlc3QsTz12bXdhcmUsTz1jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGB\\n\" +\n+                        \"ANK8mv+mUzhPH/8iTdMsZ6mY4r4At/GZIFS34L+/I0V2g6PkZ84VBgodqqV6Z6NY\\n\" +\n+                        \"OSk0lcjrzU650zbES7yn4MjuvP0N5T9LydlvjOEzfA+uRETiy8d+DsS3rThRY+Ja\\n\" +\n+                        \"dvmS0PswJ8cvHAksYmGNUWfTU+Roxcv0ZDqD+cUNi1+NAgMBAAEwDQYJKoZIhvcN\\n\" +\n+                        \"AQEFBQADgYEAy54UVlZifk1PPdTg9OJuumdxgzZk3QEWZGjdJYEc134MeKKsIX50\\n\" +\n+                        \"+6y5GDyXmxvJx33ySTZuRaaXClOuAtXRWpz0KlceujYuwboyUxhn46SUASD872nb\\n\" +\n+                        \"cN0E1UrhDloFcftXEXudDL2S2cSQjsyxLNbBop63xq+U6MYG/uFe7GQ=\\n\" +\n+                        \"-----END CERTIFICATE-----\";\n+        String password = \"vmware\";\n+\n+        try {\n+            keyManager = new SamlLoginServerKeyManager(key, password, certificate);\n+            Assert.fail(\"Password invalid. Should not reach this line.\");\n+        } catch (Exception x) {\n+            if (x.getClass().getName().equals(\"org.bouncycastle.openssl.EncryptionException\")) {\n+                throw new IllegalArgumentException(x);\n+            } else if (x.getClass().equals(IllegalArgumentException.class)) {\n+                throw x;\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testWithWorkingCertificateNullPassword() throws Exception {\n+        String key = \"-----BEGIN RSA PRIVATE KEY-----\\n\" +\n+                        \"MIICXAIBAAKBgQDFOKafzTldEfTIfixO2AaYO4BJwNFkcGnlpSuku54st7wpFD37\\n\" +\n+                        \"+//8TbK7uJ1+kQzvhnxxgTpJmlZci4zs268IaORj1mN2XKnPfXHiaBmNsK4/Mer/\\n\" +\n+                        \"y2TZ9pUo7I5dDYaXucvB+ZPdV1m2wp4PsRM9sWuQGMNk16TW64Gwy24FpQIDAQAB\\n\" +\n+                        \"AoGAKBxyfxPNM+mgAFrxBgQXq0SGvflSXPwj/YnPS4zBCdVAlpZAWQySrqzayiUt\\n\" +\n+                        \"Gv3DRL/0dV1UDn4uTFoxikbP3Slpxl/fIi9onpERnads8ao3ZapYjUGNWsugq/lo\\n\" +\n+                        \"SJG7DtSD2ZZApZRJ2JxtUioSPL7fTUBpArpkdHPQtZhZTEECQQDvk1NSaA3e2DLR\\n\" +\n+                        \"zg89c+Gb/MwdeVowYprDuimqbnT/Lvll8XsPp+W81pv72sD9LpCffdFDm9E6X6tk\\n\" +\n+                        \"q5nYEiTRAkEA0r38uIBaSaOh+jWMRorW3ofGNZvjmevnQOy2gOem3qkKyxw/nQjg\\n\" +\n+                        \"NiupFuSF2wI4AYGmfBItnxddugSPlXsYlQJATu1zeuerAiqp+3LulGlT/4b2XBN5\\n\" +\n+                        \"wg0KPcdcKLkBNHzuT0aSK2M+DcuKUhwMjpzDqrfRtHtmH9wa5Cygn43CsQJACCrs\\n\" +\n+                        \"3Im89hWtdXEV2rYO1dkVSYadL54A/HcwK5bO1NpgXLbfkEqDxhWzG/wHZBGV8hkA\\n\" +\n+                        \"Rta9hej17Pu4RObccQJBAKs/bHRDXp+yPhVS4HVwhzDALtK5z1nn+dz3U1AxVJkU\\n\" +\n+                        \"L+W+bjRi0v91WH5N6lyhxGNCM0lV3DUJaimFk+N+jp0=\\n\" +\n+                        \"-----END RSA PRIVATE KEY-----\";\n+        String certificate = \"-----BEGIN CERTIFICATE-----\\n\" +\n+                        \"MIIBzzCCATgCCQCWnZlNikBhATANBgkqhkiG9w0BAQUFADAsMSowKAYDVQQDFCFz\\n\" +\n+                        \"YW1sX2xvZ2luLE9VPXRlc3QsTz12bXdhcmUsTz1jb20wHhcNMTMwNzAzMTgwMzUx\\n\" +\n+                        \"WhcNMTQwNzAzMTgwMzUxWjAsMSowKAYDVQQDFCFzYW1sX2xvZ2luLE9VPXRlc3Qs\\n\" +\n+                        \"Tz12bXdhcmUsTz1jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMU4pp/N\\n\" +\n+                        \"OV0R9Mh+LE7YBpg7gEnA0WRwaeWlK6S7niy3vCkUPfv7//xNsru4nX6RDO+GfHGB\\n\" +\n+                        \"OkmaVlyLjOzbrwho5GPWY3Zcqc99ceJoGY2wrj8x6v/LZNn2lSjsjl0Nhpe5y8H5\\n\" +\n+                        \"k91XWbbCng+xEz2xa5AYw2TXpNbrgbDLbgWlAgMBAAEwDQYJKoZIhvcNAQEFBQAD\\n\" +\n+                        \"gYEAcahI6BwiVod/mByeTONw7yjfgYJWjtlrVMIdUwOvtuXY0carOzSL1rJTCSa1\\n\" +\n+                        \"qQQ7uv1sLAI4L/IqvjCwzJ5h7iuY4Uhuxyyy5HAB9hIdE35Jsny7datvJHKL85FA\\n\" +\n+                        \"9U1DYM28B69irMgw+w47v9t9U72jvG2Ikq6l4fEFe94XRM8=\\n\" +\n+                        \"-----END CERTIFICATE-----\";\n+        String password = null;\n+\n+        keyManager = new SamlLoginServerKeyManager(key, password, certificate);\n+        Credential credential = keyManager.getDefaultCredential();\n+        assertNotNull(credential.getPrivateKey());\n+        assertNotNull(credential.getPublicKey());\n+        assertNotNull(credential);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testWithWorkingCertificateIllegalKey() throws Exception {\n+        String key = \"-----BEGIN RSA PRIVATE KEY-----\\n\" +\n+                        \"Proc-Type: 4,ENCRYPTED\\n\" +\n+                        \"DEK-Info: DES-EDE3-CBC,5771044F3450A262\\n\" +\n+                        \"\\n\" +\n+                        \"VfRgIdzq/TUFdIwTOxochDs02sSQXA/Z6mRnffYTQMwXpQ5f5nRuqcY8zECGMaDe\\n\" +\n+                        \"aLrndpWzGbxiePKgN5AxuIDYNnKMrDRgyCzaaPx66rb87oMwtuq1HM18qqs+yN5v\\n\" +\n+                        \"CdsoS2uz57fCDI24BuJkIDSIeumLXc5MdN0HUeaxOVzmpbpsbBXjRYa24gW38mUh\\n\" +\n+                        \"DzmOAsNDxfoSTox02Cj+GV024e+PiWR6AMA7RKhsKPf9F4ctWwozvEHrV8fzTy5B\\n\" +\n+                        \"+KM361P7XwJYueiV/gMZW2DXSujNRBEVfC1CLaxDV3eVsFX5iIiUbc4JQYOM6oQ3\\n\" +\n+                        \"KxGPImcRQPY0asKgEDIaWtysUuBoDSbfQ/FxGWeqwR6P/Vth4dXzVGheYLu1V1CU\\n\" +\n+                        \"o6M+EXC/VUhERKwi13EgqXLKrDI352/HgEKG60EhM6xIJy9hLHy0UGjdHDcA+cF6\\n\" +\n+                        \"7V7PdzaD4GWV75fv99sBlq2e0KK9crNUzs7vbFA/m6tgNA628SGhU1uAc/5xOskI\\n\" +\n+                        \"0Ez6kjgHoh4U7t/fu7ey1MbFQt6byHY9lk27nW1ub/QMAaRJ+EDnrReB/NN6q5Vu\\n\" +\n+                        \"h9eQNniNOeQfflzFyPB9omLNsVJkENn+lZNNrrlbn8OmJ0pT58Iaetfh79rDZPw9\\n\" +\n+                        \"zmHVqmMynmecTWAcA9ATf7+lh+xV88JDjQkLcG/3WEXNH7HXKO00pUa8+JtyxbAb\\n\" +\n+                        \"dAwGgrjJkbbk1qLLScOqY4mA5WXa5+80LMkCYO44vVTp2VKmnxj8Mw==\\n\" +\n+                        \"-----END RSA PRIVATE KEY-----\";\n+        String certificate = \"-----BEGIN CERTIFICATE-----\\n\" +\n+                        \"MIIB1TCCAT4CCQCpQCfJYT8ZJTANBgkqhkiG9w0BAQUFADAvMS0wKwYDVQQDFCRz\\n\" +\n+                        \"YW1sX2xvZ2luLE9VPXRlbXBlc3QsTz12bXdhcmUsTz1jb20wHhcNMTMwNzAyMDAw\\n\" +\n+                        \"MzM3WhcNMTQwNzAyMDAwMzM3WjAvMS0wKwYDVQQDFCRzYW1sX2xvZ2luLE9VPXRl\\n\" +\n+                        \"bXBlc3QsTz12bXdhcmUsTz1jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGB\\n\" +\n+                        \"ANK8mv+mUzhPH/8iTdMsZ6mY4r4At/GZIFS34L+/I0V2g6PkZ84VBgodqqV6Z6NY\\n\" +\n+                        \"OSk0lcjrzU650zbES7yn4MjuvP0N5T9LydlvjOEzfA+uRETiy8d+DsS3rThRY+Ja\\n\" +\n+                        \"dvmS0PswJ8cvHAksYmGNUWfTU+Roxcv0ZDqD+cUNi1+NAgMBAAEwDQYJKoZIhvcN\\n\" +\n+                        \"AQEFBQADgYEAy54UVlZifk1PPdTg9OJuumdxgzZk3QEWZGjdJYEc134MeKKsIX50\\n\" +\n+                        \"+6y5GDyXmxvJx33ySTZuRaaXClOuAtXRWpz0KlceujYuwboyUxhn46SUASD872nb\\n\" +\n+                        \"cN0E1UrhDloFcftXEXudDL2S2cSQjsyxLNbBop63xq+U6MYG/uFe7GQ=\\n\" +\n+                        \"-----END CERTIFICATE-----\";\n+        String password = \"password\";\n+\n+        keyManager = new SamlLoginServerKeyManager(key, password, certificate);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testWithNonWorkingCertificate() throws Exception {\n+        String key = \"-----BEGIN RSA PRIVATE KEY-----\\n\" +\n+                        \"Proc-Type: 4,ENCRYPTED\\n\" +\n+                        \"DEK-Info: DES-EDE3-CBC,5771044F3450A262\\n\" +\n+                        \"\\n\" +\n+                        \"VfRgIdzq/TUFdIwTOxochDs02sSQXA/Z6mRnffYTQMwXpQ5f5nRuqcY8zECGMaDe\\n\" +\n+                        \"aLrndpWzGbxiePKgN5AxuIDYNnKMrDRgyCzaaPx66rb87oMwtuq1HM18qqs+yN5v\\n\" +\n+                        \"CdsoS2uz57fCDI24BuJkIDSIeumLXc5MdN0HUeaxOVzmpbpsbBXjRYa24gW38mUh\\n\" +\n+                        \"DzmOAsNDxfoSTox02Cj+GV024e+PiWR6AMA7RKhsKPf9F4ctWwozvEHrV8fzTy5B\\n\" +\n+                        \"+KM361P7XwJYueiV/gMZW2DXSujNRBEVfC1CLaxDV3eVsFX5iIiUbc4JQYOM6oQ3\\n\" +\n+                        \"KxGPImcRQPY0asKgEDIaWtysUuBoDSbfQ/FxGWeqwR6P/Vth4dXzVGheYLu1V1CU\\n\" +\n+                        \"o6M+EXC/VUhERKwi13EgqXLKrDI352/HgEKG60EhM6xIJy9hLHy0UGjdHDcA+cF6\\n\" +\n+                        \"NEl6E3CivddMHIPQWil5x4AMaevGa3v/gcZI0DN8t7L1g4fgjtSPYzvwmOxoxHGi\\n\" +\n+                        \"7V7PdzaD4GWV75fv99sBlq2e0KK9crNUzs7vbFA/m6tgNA628SGhU1uAc/5xOskI\\n\" +\n+                        \"0Ez6kjgHoh4U7t/fu7ey1MbFQt6byHY9lk27nW1ub/QMAaRJ+EDnrReB/NN6q5Vu\\n\" +\n+                        \"h9eQNniNOeQfflzFyPB9omLNsVJkENn+lZNNrrlbn8OmJ0pT58Iaetfh79rDZPw9\\n\" +\n+                        \"zmHVqmMynmecTWAcA9ATf7+lh+xV88JDjQkLcG/3WEXNH7HXKO00pUa8+JtyxbAb\\n\" +\n+                        \"dAwGgrjJkbbk1qLLScOqY4mA5WXa5+80LMkCYO44vVTp2VKmnxj8Mw==\\n\" +\n+                        \"-----END RSA PRIVATE KEY-----\";\n+        String certificate = \"-----BEGIN CERTIFICATE-----\\n\" +\n+                        \"MIIB1TCCAT4CCQCpQCfJYT8ZJTANBgkqhkiG9w0BAQUFADAvMS0wKwYDVQQDFCRz\\n\" +\n+                        \"YW1sX2xvZ2luLE9VPXRlbXBlc3QsTz12bXdhcmUsTz1jb20wHhcNMTMwNzAyMDAw\\n\" +\n+                        \"MzM3WhcNMTQwNzAyMDAwMzM3WjAvMS0wKwYDVQQDFCRzYW1sX2xvZ2luLE9VPXRl\\n\" +\n+                        \"bXBlc3QsTz12bXdhcmUsTz1jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGB\\n\" +\n+                        \"OSk0lcjrzU650zbES7yn4MjuvP0N5T9LydlvjOEzfA+uRETiy8d+DsS3rThRY+Ja\\n\" +\n+                        \"dvmS0PswJ8cvHAksYmGNUWfTU+Roxcv0ZDqD+cUNi1+NAgMBAAEwDQYJKoZIhvcN\\n\" +\n+                        \"AQEFBQADgYEAy54UVlZifk1PPdTg9OJuumdxgzZk3QEWZGjdJYEc134MeKKsIX50\\n\" +\n+                        \"+6y5GDyXmxvJx33ySTZuRaaXClOuAtXRWpz0KlceujYuwboyUxhn46SUASD872nb\\n\" +\n+                        \"cN0E1UrhDloFcftXEXudDL2S2cSQjsyxLNbBop63xq+U6MYG/uFe7GQ=\\n\" +\n+                        \"-----END CERTIFICATE-----\";\n+        String password = \"password\";\n+\n+        try {\n+            keyManager = new SamlLoginServerKeyManager(key, password, certificate);\n+            Assert.fail(\"Key/Cert pair is invalid. Should not reach this line.\");\n+        } catch (Exception x) {\n+            if (x.getClass().getName().equals(\"org.bouncycastle.openssl.PEMException\")) {\n+                throw new IllegalArgumentException(x);\n+            } else if (x.getClass().getName().equals(\"org.bouncycastle.openssl.EncryptionException\")) {\n+                throw new IllegalArgumentException(x);\n+            } else if (x.getClass().equals(IllegalArgumentException.class)) {\n+                throw x;\n+            }\n+        }\n+    }\n+}"
        },
        {
            "sha": "91ba412cdc1bde8b217657cdbac63c8f0aebba49",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/TileInfoTest.java",
            "status": "added",
            "additions": 77,
            "deletions": 0,
            "changes": 77,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FTileInfoTest.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FTileInfoTest.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FTileInfoTest.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,77 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import com.google.inject.internal.Lists;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.core.env.AbstractEnvironment;\n+import org.springframework.mock.env.MockPropertySource;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+\n+public class TileInfoTest {\n+\n+    private TileInfo tileInfo;\n+    private ObjectPropertyMockEnvironment environment = new ObjectPropertyMockEnvironment();\n+    private ArrayList<LinkedHashMap<String,String>> tiles;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        LinkedHashMap<String,String> tile1 = new LinkedHashMap<>();\n+        tile1.put(\"login-link\", \"http://example.com/login\");\n+\n+        LinkedHashMap<String,String> tile2 = new LinkedHashMap<>();\n+        tile2.put(\"login-link\", \"http://example.com/login\");\n+\n+        LinkedHashMap<String,String> tile3 = new LinkedHashMap<>();\n+        tile3.put(\"login-link\", \"http://example.com/login\");\n+\n+        tiles = Lists.newArrayList(tile1, tile2, tile3);\n+    }\n+\n+    @Test\n+    public void testLoginTiles() throws Exception {\n+        environment.setProperty(\"tiles\", tiles);\n+        tileInfo = new TileInfo(environment);\n+\n+        List<Map<String, String>> loginTiles = tileInfo.getLoginTiles();\n+\n+        assertEquals(3, loginTiles.size());\n+        for (Map<String, String> loginTile : loginTiles) {\n+            assertFalse(StringUtils.isEmpty(loginTile.get(\"login-link\")));\n+        }\n+    }\n+\n+    @Test\n+    public void testLoginNoTiles() throws Exception {\n+        tileInfo = new TileInfo(environment);\n+\n+        List<Map<String, String>> loginTiles = tileInfo.getLoginTiles();\n+\n+        assertEquals(0, loginTiles.size());\n+    }\n+\n+    /**\n+     * Exposes {@link MockPropertySource}'s ability to set Objects as property values.\n+     * This is in contrast to {@link org.springframework.mock.env.MockEnvironment},\n+     * which only allows setting of String values.\n+     */\n+    private static class ObjectPropertyMockEnvironment extends AbstractEnvironment {\n+\n+        private MockPropertySource propertySource = new MockPropertySource();\n+\n+        private ObjectPropertyMockEnvironment() {\n+            getPropertySources().addLast(propertySource);\n+        }\n+\n+        public void setProperty(String key, Object value) {\n+            propertySource.setProperty(key, value);\n+        }\n+    }\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "e5e39f0a3cae83eeb92fdb1640f26faa86872270",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/UaaApprovalsServiceTest.java",
            "status": "added",
            "additions": 117,
            "deletions": 0,
            "changes": 117,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FUaaApprovalsServiceTest.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FUaaApprovalsServiceTest.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FUaaApprovalsServiceTest.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,117 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.hasKey;\n+import static org.springframework.http.HttpMethod.DELETE;\n+import static org.springframework.http.HttpMethod.GET;\n+import static org.springframework.http.HttpMethod.PUT;\n+import static org.springframework.http.MediaType.APPLICATION_JSON;\n+import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.header;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.jsonPath;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;\n+import static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;\n+\n+import org.cloudfoundry.identity.uaa.oauth.approval.Approval;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.test.web.client.MockRestServiceServer;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class UaaApprovalsServiceTest {\n+\n+    private MockRestServiceServer mockUaaServer;\n+    private UaaApprovalsService approvalsService;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        RestTemplate restTemplate = new RestTemplate();\n+        mockUaaServer = MockRestServiceServer.createServer(restTemplate);\n+\n+        approvalsService = new UaaApprovalsService(restTemplate, \"http://uaa.example.com/uaa/approvals\");\n+    }\n+\n+    @Test\n+    public void testRetrievingApprovals() throws Exception {\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/uaa/approvals\"))\n+                .andExpect(method(GET))\n+                .andExpect(header(\"Accept\", containsString(APPLICATION_JSON_VALUE)))\n+                .andRespond(withSuccess(\"[{\\\"userId\\\":\\\"abc-def-ghi\\\", \\\"clientId\\\":\\\"app\\\", \\\"scope\\\":\\\"scim.userids\\\", \\\"status\\\":\\\"APPROVED\\\", \\\"expiresAt\\\":\\\"2014-05-17T15:17:52.310Z\\\", \\\"lastUpdatedAt\\\":\\\"2014-04-17T15:17:52.317Z\\\"},\" +\n+                        \"{\\\"userId\\\":\\\"abc-def-ghi\\\", \\\"clientId\\\":\\\"app\\\", \\\"scope\\\":\\\"cloud_controller.read\\\", \\\"status\\\":\\\"APPROVED\\\", \\\"expiresAt\\\":\\\"2014-05-17T15:17:52.310Z\\\", \\\"lastUpdatedAt\\\":\\\"2014-04-17T15:17:52.311Z\\\"},\" +\n+                        \"{\\\"userId\\\":\\\"abc-def-ghi\\\", \\\"clientId\\\":\\\"app\\\", \\\"scope\\\":\\\"cloud_controller.write\\\", \\\"status\\\":\\\"APPROVED\\\", \\\"expiresAt\\\":\\\"2014-05-17T15:17:52.310Z\\\", \\\"lastUpdatedAt\\\":\\\"2014-04-17T15:17:52.313Z\\\"},\" +\n+                        \"{\\\"userId\\\":\\\"abc-def-ghi\\\", \\\"clientId\\\":\\\"app\\\", \\\"scope\\\":\\\"password.write\\\", \\\"status\\\":\\\"DENIED\\\", \\\"expiresAt\\\":\\\"2014-05-17T15:17:52.310Z\\\", \\\"lastUpdatedAt\\\":\\\"2014-04-17T15:17:52.316Z\\\"}]\", APPLICATION_JSON));\n+\n+        Map<String, List<UaaApprovalsService.DescribedApproval>> approvalsByClientId = approvalsService.getCurrentApprovalsByClientId();\n+        Assert.assertThat(approvalsByClientId, hasKey(\"app\"));\n+        \n+        List<UaaApprovalsService.DescribedApproval> describedApprovals = approvalsByClientId.get(\"app\");\n+        Assert.assertEquals(4, describedApprovals.size());\n+\n+        UaaApprovalsService.DescribedApproval cloudControllerReadApproval = describedApprovals.get(0);\n+        Assert.assertEquals(\"abc-def-ghi\", cloudControllerReadApproval.getUserId());\n+        Assert.assertEquals(\"app\", cloudControllerReadApproval.getClientId());\n+        Assert.assertEquals(\"cloud_controller.read\", cloudControllerReadApproval.getScope());\n+        Assert.assertEquals(Approval.ApprovalStatus.APPROVED, cloudControllerReadApproval.getStatus());\n+        Assert.assertEquals(\"Access your 'cloud_controller' resources with scope 'read'\", cloudControllerReadApproval.getDescription());\n+\n+        UaaApprovalsService.DescribedApproval passwordWriteApproval = describedApprovals.get(2);\n+        Assert.assertEquals(\"password.write\", passwordWriteApproval.getScope());\n+        Assert.assertEquals(Approval.ApprovalStatus.DENIED, passwordWriteApproval.getStatus());\n+\n+        mockUaaServer.verify();\n+    }\n+\n+    @Test\n+    public void testUpdatingApprovals() throws Exception {\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/uaa/approvals\"))\n+                .andExpect(method(PUT))\n+                .andExpect(jsonPath(\"$\").isArray())\n+                .andExpect(jsonPath(\"$[0].clientId\").value(\"app\"))\n+                .andExpect(jsonPath(\"$[0].userId\").value(\"user-id\"))\n+                .andExpect(jsonPath(\"$[0].scope\").value(\"thing.write\"))\n+                .andExpect(jsonPath(\"$[0].status\").value(\"APPROVED\"))\n+                .andRespond(withSuccess());\n+\n+        List<UaaApprovalsService.DescribedApproval> approvals = new ArrayList<UaaApprovalsService.DescribedApproval>();\n+        UaaApprovalsService.DescribedApproval approval = new UaaApprovalsService.DescribedApproval();\n+        approval.setClientId(\"app\");\n+        approval.setUserId(\"user-id\");\n+        approval.setScope(\"thing.write\");\n+        approval.setStatus(Approval.ApprovalStatus.APPROVED);\n+        approval.setDescription(\"Write to your thing resources\");\n+        approvals.add(approval);\n+\n+        approvalsService.updateApprovals(approvals);\n+\n+        mockUaaServer.verify();\n+    }\n+\n+    @Test\n+    public void testRevokingApprovals() throws Exception {\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/uaa/approvals?clientId=abc-def\"))\n+                .andExpect(method(DELETE))\n+                .andRespond(withSuccess(\"\", APPLICATION_JSON));\n+\n+        approvalsService.deleteApprovalsForClient(\"abc-def\");\n+\n+        mockUaaServer.verify();\n+    }\n+}"
        },
        {
            "sha": "521f585f2a8e5b5eb7867a5cbd69aa936e07e1f3",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/UaaChangePasswordServiceTest.java",
            "status": "added",
            "additions": 53,
            "deletions": 0,
            "changes": 53,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FUaaChangePasswordServiceTest.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FUaaChangePasswordServiceTest.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FUaaChangePasswordServiceTest.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,53 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.client.MockRestServiceServer;\n+import org.springframework.web.client.RestTemplate;\n+\n+import static org.springframework.http.HttpMethod.POST;\n+import static org.springframework.http.HttpStatus.FOUND;\n+import static org.springframework.http.MediaType.APPLICATION_JSON;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.*;\n+import static org.springframework.test.web.client.response.MockRestResponseCreators.withStatus;\n+import static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;\n+\n+public class UaaChangePasswordServiceTest {\n+    private MockRestServiceServer mockUaaServer;\n+    private UaaChangePasswordService subject;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        RestTemplate uaaTemplate = new RestTemplate();\n+        mockUaaServer = MockRestServiceServer.createServer(uaaTemplate);\n+        subject = new UaaChangePasswordService(uaaTemplate, \"http://uaa.example.com/uaa\");\n+    }\n+\n+    @Test\n+    public void testChangePassword() throws Exception {\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/uaa/password_change\"))\n+                .andExpect(method(POST))\n+                .andExpect(jsonPath(\"$.username\").value(\"the user name\"))\n+                .andExpect(jsonPath(\"$.current_password\").value(\"current password\"))\n+                .andExpect(jsonPath(\"$.new_password\").value(\"new password\"))\n+                .andRespond(withSuccess(\"the user name\", APPLICATION_JSON));\n+\n+        subject.changePassword(\"the user name\", \"current password\", \"new password\");\n+\n+        mockUaaServer.verify();\n+    }\n+}"
        },
        {
            "sha": "3edae1d5432eff7f23e868929f6be69839ef1d72",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/UaaExpiringCodeServiceTest.java",
            "status": "added",
            "additions": 117,
            "deletions": 0,
            "changes": 117,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FUaaExpiringCodeServiceTest.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FUaaExpiringCodeServiceTest.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FUaaExpiringCodeServiceTest.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,117 @@\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.test.web.client.MockRestServiceServer;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.sql.Timestamp;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.junit.Assert.*;\n+import static org.springframework.http.HttpMethod.GET;\n+import static org.springframework.http.HttpMethod.POST;\n+import static org.springframework.http.MediaType.APPLICATION_JSON;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.*;\n+import static org.springframework.test.web.client.response.MockRestResponseCreators.withStatus;\n+import static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;\n+\n+public class UaaExpiringCodeServiceTest {\n+\n+    private RestTemplate uaaTemplate;\n+    private UaaExpiringCodeService service;\n+    private MockRestServiceServer mockUaaServer;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        uaaTemplate = new RestTemplate();\n+        mockUaaServer = MockRestServiceServer.createServer(uaaTemplate);\n+        service = new UaaExpiringCodeService(uaaTemplate, \"http://uaa.example.com\");\n+    }\n+\n+    @Test\n+    public void testGenerateCode() throws Exception {\n+        Timestamp ts = new Timestamp(System.currentTimeMillis());\n+\n+        String uaaResponseJson = \"{\" +\n+            \"    \\\"code\\\":\\\"the_secret_code\\\",\" +\n+            \"    \\\"expiresAt\\\":\" + ts.getTime() + \",\" +\n+            \"    \\\"data\\\":\\\"{\\\\\\\"user_id\\\\\\\":\\\\\\\"user-id-001\\\\\\\",\\\\\\\"client_id\\\\\\\":\\\\\\\"login\\\\\\\"}\\\"\" +\n+            \"}\";\n+\n+        Map<String,String> data = new HashMap<>();\n+        data.put(\"user_id\", \"user-id-001\");\n+        data.put(\"client_id\", \"login\");\n+\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/Codes\"))\n+            .andExpect(method(POST))\n+            .andExpect(jsonPath(\"$.data\").value(\"{\\\"user_id\\\":\\\"user-id-001\\\",\\\"client_id\\\":\\\"login\\\"}\"))\n+            .andExpect(jsonPath(\"$.expiresAt\").exists())\n+            .andRespond(withSuccess(uaaResponseJson, APPLICATION_JSON));\n+\n+        String code = service.generateCode(data, 1, TimeUnit.DAYS);\n+        assertEquals(\"the_secret_code\", code);\n+    }\n+\n+    @Test\n+    public void testVerifyCode() throws Exception {\n+        Timestamp ts = new Timestamp(System.currentTimeMillis());\n+        String uaaResponseJson = \"{\" +\n+            \"    \\\"code\\\":\\\"valid-code\\\",\" +\n+            \"    \\\"expiresAt\\\":\" + ts.getTime() + \",\" +\n+            \"    \\\"data\\\":\\\"{\\\\\\\"user_id\\\\\\\":\\\\\\\"user-id-001\\\\\\\",\\\\\\\"client_id\\\\\\\":\\\\\\\"login\\\\\\\"}\\\"\" +\n+            \"}\";\n+\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/Codes/valid-code\"))\n+            .andExpect(method(GET))\n+            .andRespond(withSuccess(uaaResponseJson, APPLICATION_JSON));\n+        Map<String,String> codeData = service.verifyCode(\"valid-code\");\n+        mockUaaServer.verify();\n+        assertEquals(\"user-id-001\", codeData.get(\"user_id\"));\n+        assertEquals(\"login\", codeData.get(\"client_id\"));\n+    }\n+\n+    @Test(expected = ExpiringCodeService.CodeNotFoundException.class)\n+    public void testVerifyCodeWithExpiredCode() throws Exception {\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/Codes/invalid-code\"))\n+            .andExpect(method(GET))\n+            .andRespond(withStatus(HttpStatus.NOT_FOUND));\n+        service.verifyCode(\"invalid-code\");\n+    }\n+\n+    @Test\n+    public void testVerifyCodeWithDataClass() throws Exception {\n+        Timestamp ts = new Timestamp(System.currentTimeMillis());\n+        String uaaResponseJson = \"{\" +\n+            \"    \\\"code\\\":\\\"valid-code\\\",\" +\n+            \"    \\\"expiresAt\\\":\" + ts.getTime() + \",\" +\n+            \"    \\\"data\\\":\\\"{\\\\\\\"user_id\\\\\\\":\\\\\\\"user-id-001\\\\\\\",\\\\\\\"client_id\\\\\\\":\\\\\\\"login\\\\\\\"}\\\"\" +\n+            \"}\";\n+\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/Codes/valid-code\"))\n+            .andExpect(method(GET))\n+            .andRespond(withSuccess(uaaResponseJson, APPLICATION_JSON));\n+\n+        CodeResult codeResult = service.verifyCode(CodeResult.class, \"valid-code\");\n+        mockUaaServer.verify();\n+\n+        assertEquals(\"user-id-001\", codeResult.user_id);\n+        assertEquals(\"login\", codeResult.client_id);\n+    }\n+\n+    @Test(expected = ExpiringCodeService.CodeNotFoundException.class)\n+    public void testVerifyCodeWithDataClassWithExpiredCode() throws Exception {\n+        mockUaaServer.expect(requestTo(\"http://uaa.example.com/Codes/invalid-code\"))\n+            .andExpect(method(GET))\n+            .andRespond(withStatus(HttpStatus.NOT_FOUND));\n+        service.verifyCode(CodeResult.class, \"invalid-code\");\n+    }\n+\n+    public static class CodeResult {\n+        public String user_id;\n+        public String client_id;\n+    }\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "aab2a7cc586074134e33645ced5ce2ae94d82eab",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/UsernamePasswordExtractingAuthenticationManagerTests.java",
            "status": "added",
            "additions": 58,
            "deletions": 0,
            "changes": 58,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FUsernamePasswordExtractingAuthenticationManagerTests.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FUsernamePasswordExtractingAuthenticationManagerTests.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FUsernamePasswordExtractingAuthenticationManagerTests.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,58 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import static org.junit.Assert.assertSame;\n+\n+import org.junit.Test;\n+import org.mockito.Matchers;\n+import org.mockito.Mockito;\n+import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.authentication.TestingAuthenticationToken;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.authority.AuthorityUtils;\n+\n+/**\n+ * @author Dave Syer\n+ * \n+ */\n+public class UsernamePasswordExtractingAuthenticationManagerTests {\n+\n+    private AuthenticationManager delegate = Mockito.mock(AuthenticationManager.class);\n+\n+    private UsernamePasswordExtractingAuthenticationManager manager = new UsernamePasswordExtractingAuthenticationManager(\n+                    delegate);\n+\n+    @Test\n+    public void testAuthenticate() {\n+        Authentication expected = new TestingAuthenticationToken(\"bar\", \"foo\",\n+                        AuthorityUtils.commaSeparatedStringToAuthorityList(\"USER\"));\n+        Mockito.when(delegate.authenticate(Matchers.any(UsernamePasswordAuthenticationToken.class)))\n+                        .thenReturn(expected);\n+        Authentication output = manager.authenticate(new TestingAuthenticationToken(\"foo\", \"bar\"));\n+        assertSame(expected, output);\n+    }\n+\n+    @Test\n+    public void testUsernamePassword() {\n+        Authentication expected = new UsernamePasswordAuthenticationToken(\"bar\", \"foo\",\n+                        AuthorityUtils.commaSeparatedStringToAuthorityList(\"USER\"));\n+        Mockito.when(delegate.authenticate(Matchers.any(UsernamePasswordAuthenticationToken.class)))\n+                        .thenReturn(expected);\n+        Authentication output = manager.authenticate(expected);\n+        assertSame(expected, output);\n+    }\n+\n+}"
        },
        {
            "sha": "ebb4b025a9193126c7bc77625f4af42d2248ba0a",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/XFrameOptionsTheories.java",
            "status": "added",
            "additions": 64,
            "deletions": 0,
            "changes": 64,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FXFrameOptionsTheories.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FXFrameOptionsTheories.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FXFrameOptionsTheories.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,64 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login;\n+\n+import org.cloudfoundry.identity.uaa.test.YamlServletProfileInitializerContextInitializer;\n+import org.junit.Before;\n+import org.junit.experimental.theories.DataPoint;\n+import org.junit.experimental.theories.Theories;\n+import org.junit.experimental.theories.Theory;\n+import org.junit.runner.RunWith;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.web.FilterChainProxy;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.RequestBuilder;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.web.context.support.XmlWebApplicationContext;\n+\n+import static org.springframework.security.web.header.writers.frameoptions.XFrameOptionsHeaderWriter.XFRAME_OPTIONS_HEADER;\n+import static org.springframework.security.web.header.writers.frameoptions.XFrameOptionsHeaderWriter.XFrameOptionsMode.DENY;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.header;\n+\n+@RunWith(Theories.class)\n+public class XFrameOptionsTheories {\n+\n+    @DataPoint\n+    public static RequestBuilder loginHtmlRequest = MockMvcRequestBuilders.get(\"/login\").accept(MediaType.TEXT_HTML);\n+\n+    @DataPoint\n+    public static RequestBuilder loginJsonRequest = MockMvcRequestBuilders.get(\"/login\").accept(MediaType.APPLICATION_JSON);\n+\n+    XmlWebApplicationContext webApplicationContext;\n+    MockMvc mockMvc;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        webApplicationContext = new XmlWebApplicationContext();\n+        new YamlServletProfileInitializerContextInitializer().initializeContext(webApplicationContext, \"login.yml\");\n+        webApplicationContext.setConfigLocation(\"file:./src/main/webapp/WEB-INF/spring-servlet.xml\");\n+        webApplicationContext.refresh();\n+        FilterChainProxy springSecurityFilterChain = webApplicationContext.getBean(\"springSecurityFilterChain\", FilterChainProxy.class);\n+        XFrameOptionsFilter xFrameOptionsFilter = webApplicationContext.getBean(XFrameOptionsFilter.class);\n+\n+        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext)\n+            .addFilter(springSecurityFilterChain)\n+            .addFilter(xFrameOptionsFilter)\n+            .build();\n+    }\n+\n+    @Theory\n+    public void responsesHaveXFrameOptionsHeader(RequestBuilder request) throws Exception {\n+        mockMvc.perform(request).andExpect(header().string(XFRAME_OPTIONS_HEADER, DENY.toString()));\n+    }\n+}"
        },
        {
            "sha": "4a14e4586e119064754bd0296415b0148c29929d",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/feature/AppApprovalIT.java",
            "status": "added",
            "additions": 104,
            "deletions": 0,
            "changes": 104,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FAppApprovalIT.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FAppApprovalIT.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FAppApprovalIT.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,104 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.feature;\n+\n+import org.cloudfoundry.identity.uaa.login.test.DefaultIntegrationTestConfig;\n+import org.cloudfoundry.identity.uaa.login.test.IntegrationTestRule;\n+import org.cloudfoundry.identity.uaa.test.UaaTestAccounts;\n+import org.hamcrest.Matchers;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebDriver;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(classes = DefaultIntegrationTestConfig.class)\n+public class AppApprovalIT {\n+\n+    @Autowired @Rule\n+    public IntegrationTestRule integrationTestRule;\n+\n+    @Autowired\n+    WebDriver webDriver;\n+\n+    @Value(\"${integration.test.base_url}\")\n+    String baseUrl;\n+\n+    @Value(\"${integration.test.app_url}\")\n+    String appUrl;\n+    \n+    private UaaTestAccounts testAccounts = UaaTestAccounts.standard(null);\n+\n+    @Test\n+    public void testApprovingAnApp() throws Exception {\n+        webDriver.get(baseUrl + \"/logout.do\");\n+\n+        // Visit app\n+        webDriver.get(appUrl);\n+\n+        // Sign in to login server\n+        webDriver.findElement(By.name(\"username\")).sendKeys(testAccounts.getUserName());\n+        webDriver.findElement(By.name(\"password\")).sendKeys(testAccounts.getPassword());\n+        webDriver.findElement(By.xpath(\"//input[@value='Sign in']\")).click();\n+\n+        // Authorize the app for some scopes\n+        Assert.assertEquals(\"Application Authorization\", webDriver.findElement(By.cssSelector(\"h1\")).getText());\n+\n+        webDriver.findElement(By.xpath(\"//label[text()='Change your password']/preceding-sibling::input\")).click();\n+        webDriver.findElement(By.xpath(\"//label[text()='Translate user ids to names and vice versa']/preceding-sibling::input\")).click();\n+\n+        webDriver.findElement(By.xpath(\"//button[text()='Authorize']\")).click();\n+\n+        Assert.assertEquals(\"Sample Home Page\", webDriver.findElement(By.cssSelector(\"h1\")).getText());\n+\n+        // View profile on the login server\n+        webDriver.get(baseUrl + \"/profile\");\n+\n+        Assert.assertFalse(webDriver.findElement(By.xpath(\"//input[@value='app-password.write']\")).isSelected());\n+        Assert.assertFalse(webDriver.findElement(By.xpath(\"//input[@value='app-scim.userids']\")).isSelected());\n+        Assert.assertTrue(webDriver.findElement(By.xpath(\"//input[@value='app-cloud_controller.read']\")).isSelected());\n+        Assert.assertTrue(webDriver.findElement(By.xpath(\"//input[@value='app-cloud_controller.write']\")).isSelected());\n+\n+        // Add approvals\n+        webDriver.findElement(By.xpath(\"//input[@value='app-password.write']\")).click();\n+        webDriver.findElement(By.xpath(\"//input[@value='app-scim.userids']\")).click();\n+\n+        webDriver.findElement(By.xpath(\"//button[text()='Update']\")).click();\n+\n+        Assert.assertTrue(webDriver.findElement(By.xpath(\"//input[@value='app-password.write']\")).isSelected());\n+        Assert.assertTrue(webDriver.findElement(By.xpath(\"//input[@value='app-scim.userids']\")).isSelected());\n+        Assert.assertTrue(webDriver.findElement(By.xpath(\"//input[@value='app-cloud_controller.read']\")).isSelected());\n+        Assert.assertTrue(webDriver.findElement(By.xpath(\"//input[@value='app-cloud_controller.write']\")).isSelected());\n+\n+        // Revoke app\n+        webDriver.findElement(By.linkText(\"Revoke Access\")).click();\n+\n+        Assert.assertEquals(\"Are you sure you want to revoke access to app?\", webDriver.findElement(By.cssSelector(\".revocation-modal p\")).getText());\n+\n+        // click cancel\n+        webDriver.findElement(By.cssSelector(\"#app-form .revocation-cancel\")).click();\n+\n+        webDriver.findElement(By.linkText(\"Revoke Access\")).click();\n+\n+        // click confirm\n+        webDriver.findElement(By.cssSelector(\"#app-form .revocation-confirm\")).click();\n+\n+        Assert.assertThat(webDriver.findElements(By.xpath(\"//input[@value='app-password.write']\")), Matchers.empty());\n+    }\n+}"
        },
        {
            "sha": "b79ff246dade47fa767f8b1af09368f92440e4c4",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/feature/AutologinIT.java",
            "status": "added",
            "additions": 293,
            "deletions": 0,
            "changes": 293,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FAutologinIT.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FAutologinIT.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FAutologinIT.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,293 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.feature;\n+\n+import org.cloudfoundry.identity.uaa.login.test.DefaultIntegrationTestConfig;\n+import org.cloudfoundry.identity.uaa.login.test.IntegrationTestRule;\n+import org.cloudfoundry.identity.uaa.login.test.TestClient;\n+import org.cloudfoundry.identity.uaa.test.UaaTestAccounts;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebDriver;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.RestOperations;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.util.UriComponentsBuilder;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(classes = DefaultIntegrationTestConfig.class)\n+public class AutologinIT {\n+\n+    @Autowired @Rule\n+    public IntegrationTestRule integrationTestRule;\n+\n+    @Autowired\n+    WebDriver webDriver;\n+\n+    @Value(\"${integration.test.base_url}\")\n+    String baseUrl;\n+\n+    @Value(\"${integration.test.app_url}\")\n+    String appUrl;\n+\n+    @Autowired\n+    RestOperations restOperations;\n+\n+    @Autowired\n+    TestClient testClient;\n+    \n+    private UaaTestAccounts testAccounts = UaaTestAccounts.standard(null);\n+\n+    @Test\n+    public void testAutologinFlow() throws Exception {\n+        webDriver.get(baseUrl + \"/logout.do\");\n+\n+        HttpHeaders headers = getAppBasicAuthHttpHeaders();\n+\n+        Map<String, String> requestBody = new HashMap<>();\n+        requestBody.put(\"username\", testAccounts.getUserName());\n+        requestBody.put(\"password\", testAccounts.getPassword());\n+\n+        ResponseEntity<Map> autologinResponseEntity = restOperations.exchange(baseUrl + \"/autologin\",\n+                HttpMethod.POST,\n+                new HttpEntity<>(requestBody, headers),\n+                Map.class);\n+        String autologinCode = (String) autologinResponseEntity.getBody().get(\"code\");\n+\n+        String authorizeUrl = UriComponentsBuilder.fromHttpUrl(baseUrl)\n+                .path(\"/oauth/authorize\")\n+                .queryParam(\"redirect_uri\", appUrl)\n+                .queryParam(\"response_type\", \"code\")\n+                .queryParam(\"scope\", \"openid\")\n+                .queryParam(\"client_id\", \"app\")\n+                .queryParam(\"code\", autologinCode)\n+                .build().toUriString();\n+\n+        webDriver.get(authorizeUrl);\n+\n+        webDriver.get(baseUrl);\n+\n+        assertEquals(testAccounts.getUserName(), webDriver.findElement(By.cssSelector(\".header .nav\")).getText());\n+    }\n+\n+    @Test\n+    public void testSimpleAutologinFlow() throws Exception {\n+        HttpHeaders headers = getAppBasicAuthHttpHeaders();\n+\n+        LinkedMultiValueMap<String, String> requestBody = new LinkedMultiValueMap<>();\n+        requestBody.add(\"username\", testAccounts.getUserName());\n+        requestBody.add(\"password\", testAccounts.getPassword());\n+\n+        //generate an autologin code with our credentials\n+        ResponseEntity<Map> autologinResponseEntity = restOperations.exchange(baseUrl + \"/autologin\",\n+            HttpMethod.POST,\n+            new HttpEntity<>(requestBody, headers),\n+            Map.class);\n+        String autologinCode = (String) autologinResponseEntity.getBody().get(\"code\");\n+\n+        //start the authorization flow - this will issue a login event\n+        //by using the autologin code\n+        String authorizeUrl = UriComponentsBuilder.fromHttpUrl(baseUrl)\n+            .path(\"/oauth/authorize\")\n+            .queryParam(\"redirect_uri\", appUrl)\n+            .queryParam(\"response_type\", \"code\")\n+            .queryParam(\"client_id\", \"app\")\n+            .queryParam(\"code\", autologinCode)\n+            .build().toUriString();\n+\n+        //rest template that does NOT follow redirects\n+        RestTemplate template = new RestTemplate(new DefaultIntegrationTestConfig.HttpClientFactory());\n+        headers.remove(\"Authorization\");\n+        ResponseEntity<Map> authorizeResponse = template.exchange(authorizeUrl,\n+            HttpMethod.GET,\n+            new HttpEntity<>(new HashMap<String,String>(),headers),\n+            Map.class);\n+\n+\n+        //we are now logged in. retrieve the JSESSIONID\n+        List<String> cookies = authorizeResponse.getHeaders().get(\"Set-Cookie\");\n+        assertEquals(1, cookies.size());\n+        headers = getAppBasicAuthHttpHeaders();\n+        headers.add(\"Cookie\", cookies.get(0));\n+\n+        //if we receive a 200, then we must approve our scopes\n+        if (HttpStatus.OK == authorizeResponse.getStatusCode()) {\n+            authorizeUrl = UriComponentsBuilder.fromHttpUrl(baseUrl)\n+                .path(\"/oauth/authorize\")\n+                .queryParam(\"user_oauth_approval\", \"true\")\n+                .build().toUriString();\n+            authorizeResponse = template.exchange(authorizeUrl,\n+                HttpMethod.POST,\n+                new HttpEntity<>(new HashMap<String,String>(),headers),\n+                Map.class);\n+        }\n+\n+        //approval is complete, we receive a token code back\n+        assertEquals(HttpStatus.FOUND, authorizeResponse.getStatusCode());\n+        List<String> location = authorizeResponse.getHeaders().get(\"Location\");\n+        assertEquals(1, location.size());\n+        String newCode = location.get(0).substring(location.get(0).indexOf(\"code=\") + 5);\n+\n+        //request a token using our code\n+        String tokenUrl = UriComponentsBuilder.fromHttpUrl(baseUrl)\n+            .path(\"/oauth/token\")\n+            .queryParam(\"response_type\", \"token\")\n+            .queryParam(\"grant_type\", \"authorization_code\")\n+            .queryParam(\"code\", newCode)\n+            .queryParam(\"redirect_uri\", appUrl)\n+            .build().toUriString();\n+\n+        ResponseEntity<Map> tokenResponse = template.exchange(\n+            tokenUrl,\n+            HttpMethod.POST,\n+            new HttpEntity<>(new HashMap<String, String>(), headers),\n+            Map.class);\n+        assertEquals(HttpStatus.OK, tokenResponse.getStatusCode());\n+\n+        //here we must reset our state. we do that by following the logout flow.\n+        headers.clear();\n+        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);\n+        ResponseEntity<Void> loginResponse = restOperations.exchange(baseUrl + \"/login.do\",\n+            HttpMethod.POST,\n+            new HttpEntity<>(requestBody, headers),\n+            Void.class);\n+        cookies = loginResponse.getHeaders().get(\"Set-Cookie\");\n+        assertEquals(1, cookies.size());\n+        headers.clear();\n+        headers.add(\"Cookie\", cookies.get(0));\n+        restOperations.exchange(baseUrl + \"/profile\",\n+            HttpMethod.GET,\n+            new HttpEntity<>(null, headers),Void.class);\n+\n+        String revokeApprovalsUrl = UriComponentsBuilder.fromHttpUrl(baseUrl)\n+            .path(\"/profile\")\n+            .build().toUriString();\n+        requestBody.clear();\n+        requestBody.add(\"clientId\",\"app\");\n+        requestBody.add(\"delete\",\"\");\n+        ResponseEntity<Void> revokeResponse = template.exchange(revokeApprovalsUrl,\n+            HttpMethod.POST,\n+            new HttpEntity<>(requestBody, headers),\n+            Void.class);\n+        assertEquals(HttpStatus.FOUND, revokeResponse.getStatusCode());\n+    }\n+\n+    @Test\n+    public void testFormEncodedAutologinRequest() throws Exception {\n+        HttpHeaders headers = getAppBasicAuthHttpHeaders();\n+        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);\n+\n+        MultiValueMap<String, String> requestBody = new LinkedMultiValueMap<>();\n+        requestBody.add(\"username\", testAccounts.getUserName());\n+        requestBody.add(\"password\", testAccounts.getPassword());\n+\n+        ResponseEntity<Map> autologinResponseEntity = restOperations.exchange(baseUrl + \"/autologin\",\n+                HttpMethod.POST,\n+                new HttpEntity<>(requestBody, headers),\n+                Map.class);\n+\n+        String autologinCode = (String) autologinResponseEntity.getBody().get(\"code\");\n+        assertEquals(6, autologinCode.length());\n+    }\n+\n+    @Test\n+    public void testPasswordRequired() throws Exception {\n+        HttpHeaders headers = getAppBasicAuthHttpHeaders();\n+\n+        Map<String, String> requestBody = new HashMap<>();\n+        requestBody.put(\"username\", testAccounts.getUserName());\n+\n+        try {\n+            restOperations.exchange(baseUrl + \"/autologin\",\n+                    HttpMethod.POST,\n+                    new HttpEntity<>(requestBody, headers),\n+                    Map.class);\n+        } catch (HttpClientErrorException e) {\n+            assertEquals(HttpStatus.UNAUTHORIZED, e.getStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    public void testClientAuthorization() throws Exception {\n+        Map<String, String> requestBody = new HashMap<>();\n+        requestBody.put(\"username\", testAccounts.getUserName());\n+        requestBody.put(\"password\", testAccounts.getPassword());\n+\n+        try {\n+            restOperations.exchange(baseUrl + \"/autologin\",\n+                    HttpMethod.POST,\n+                    new HttpEntity<>(requestBody),\n+                    Map.class);\n+        } catch (HttpClientErrorException e) {\n+            assertEquals(HttpStatus.UNAUTHORIZED, e.getStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    public void testClientIdMustBeConsistent() throws Exception {\n+        webDriver.get(baseUrl + \"/logout.do\");\n+\n+        HttpHeaders headers = getAppBasicAuthHttpHeaders();\n+\n+        Map<String, String> requestBody = new HashMap<>();\n+        requestBody.put(\"username\", testAccounts.getUserName());\n+        requestBody.put(\"password\", testAccounts.getPassword());\n+\n+        ResponseEntity<Map> autologinResponseEntity = restOperations.exchange(baseUrl + \"/autologin\",\n+                HttpMethod.POST,\n+                new HttpEntity<>(requestBody, headers),\n+                Map.class);\n+        String autologinCode = (String) autologinResponseEntity.getBody().get(\"code\");\n+\n+        String authorizeUrl = UriComponentsBuilder.fromHttpUrl(baseUrl)\n+                .path(\"/oauth/authorize\")\n+                .queryParam(\"redirect_uri\", appUrl)\n+                .queryParam(\"response_type\", \"code\")\n+                .queryParam(\"scope\", \"openid\")\n+                .queryParam(\"client_id\", \"stealer_of_codes\")\n+                .queryParam(\"code\", autologinCode)\n+                .build().toUriString();\n+\n+        try {\n+            restOperations.exchange(authorizeUrl, HttpMethod.GET, null, Void.class);\n+        } catch (HttpClientErrorException e) {\n+            assertEquals(HttpStatus.UNAUTHORIZED, e.getStatusCode());\n+        }\n+    }\n+\n+    private HttpHeaders getAppBasicAuthHttpHeaders() {\n+        HttpHeaders headers = new HttpHeaders();\n+        headers.add(\"Authorization\", testClient.getBasicAuthHeaderValue(\"app\", \"appclientsecret\"));\n+        return headers;\n+    }\n+}"
        },
        {
            "sha": "8d56f483c76e3535fb1721c9e22a5162ba663550",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/feature/ChangeEmailIT.java",
            "status": "added",
            "additions": 127,
            "deletions": 0,
            "changes": 127,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FChangeEmailIT.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FChangeEmailIT.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FChangeEmailIT.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,127 @@\n+package org.cloudfoundry.identity.uaa.login.feature;\n+\n+import com.dumbster.smtp.SimpleSmtpServer;\n+import com.dumbster.smtp.SmtpMessage;\n+import org.cloudfoundry.identity.uaa.login.test.DefaultIntegrationTestConfig;\n+import org.cloudfoundry.identity.uaa.login.test.IntegrationTestRule;\n+import org.cloudfoundry.identity.uaa.login.test.TestClient;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebDriver;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.net.URI;\n+import java.security.SecureRandom;\n+import java.util.Iterator;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+import static org.springframework.http.HttpStatus.FOUND;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(classes = DefaultIntegrationTestConfig.class)\n+public class ChangeEmailIT {\n+\n+    @Autowired @Rule\n+    public IntegrationTestRule integrationTestRule;\n+\n+    @Autowired\n+    WebDriver webDriver;\n+\n+    @Value(\"${integration.test.base_url}\")\n+    String baseUrl;\n+\n+    @Autowired\n+    SimpleSmtpServer simpleSmtpServer;\n+\n+    @Autowired\n+    TestClient testClient;\n+\n+    private String userEmail;\n+    @Before\n+    public void setUp() throws Exception {\n+        int randomInt = new SecureRandom().nextInt();\n+\n+        String adminAccessToken = testClient.getOAuthAccessToken(\"admin\", \"adminsecret\", \"client_credentials\", \"clients.read clients.write clients.secret\");\n+\n+        String scimClientId = \"scim\" + randomInt;\n+        testClient.createScimClient(adminAccessToken, scimClientId);\n+\n+        String scimAccessToken = testClient.getOAuthAccessToken(scimClientId, \"scimsecret\", \"client_credentials\", \"scim.read scim.write password.write\");\n+\n+        userEmail = \"user\" + randomInt + \"@example.com\";\n+        testClient.createUser(scimAccessToken, userEmail, userEmail, \"secret\", true);\n+    }\n+\n+    @Test\n+    public void testChangeEmail() throws Exception {\n+        signIn(userEmail, \"secret\");\n+        int receivedEmailSize = simpleSmtpServer.getReceivedEmailSize();\n+\n+        webDriver.get(baseUrl + \"/profile\");\n+        assertEquals(userEmail, webDriver.findElement(By.cssSelector(\".profile .email\")).getText());\n+        webDriver.findElement(By.linkText(\"Change Email\")).click();\n+\n+        assertEquals(\"Current Email Address: \" + userEmail, webDriver.findElement(By.cssSelector(\".email-display\")).getText());\n+        String newEmail = userEmail.replace(\"user\", \"new\");\n+        webDriver.findElement(By.name(\"newEmail\")).sendKeys(newEmail);\n+        webDriver.findElement(By.xpath(\"//input[@value='Send Verification Link']\")).click();\n+\n+        assertThat(webDriver.findElement(By.cssSelector(\"h1\")).getText(), containsString(\"Instructions Sent\"));\n+        assertEquals(receivedEmailSize + 1, simpleSmtpServer.getReceivedEmailSize());\n+\n+        Iterator receivedEmail = simpleSmtpServer.getReceivedEmail();\n+        SmtpMessage message = (SmtpMessage) receivedEmail.next();\n+        receivedEmail.remove();\n+\n+        assertEquals(newEmail, message.getHeaderValue(\"To\"));\n+        assertThat(message.getBody(), containsString(\"Verify your email\"));\n+\n+        String link = testClient.extractLink(message.getBody());\n+        webDriver.get(link);\n+\n+        assertThat(webDriver.findElement(By.cssSelector(\"h1\")).getText(), containsString(\"Account Settings\"));\n+        assertThat(webDriver.findElement(By.cssSelector(\".alert-success\")).getText(), containsString(\"Email address successfully verified.\"));\n+        assertThat(webDriver.findElement(By.cssSelector(\".nav\")).getText(), containsString(newEmail));\n+        assertThat(webDriver.findElement(By.cssSelector(\".profile\")).getText(), containsString(newEmail));\n+    }\n+\n+    @Test\n+    public void testChangeEmailWithClientRedirect() throws Exception{\n+        signIn(userEmail, \"secret\");\n+\n+        webDriver.get(baseUrl + \"/change_email?client_id=app\");\n+\n+        String newEmail = userEmail.replace(\"user\", \"new\");\n+        webDriver.findElement(By.name(\"newEmail\")).sendKeys(newEmail);\n+        webDriver.findElement(By.xpath(\"//input[@value='Send Verification Link']\")).click();\n+\n+        Iterator receivedEmail = simpleSmtpServer.getReceivedEmail();\n+        SmtpMessage message = (SmtpMessage) receivedEmail.next();\n+        receivedEmail.remove();\n+        String link = testClient.extractLink(message.getBody());\n+\n+        //rest template that does NOT follow redirects\n+        RestTemplate restTemplate = new RestTemplate(new DefaultIntegrationTestConfig.HttpClientFactory());\n+        ResponseEntity<String> responseEntity = restTemplate.getForEntity(link, String.class);\n+        assertEquals(FOUND, responseEntity.getStatusCode());\n+        assertEquals(new URI(\"http://localhost:8080/app/\"), responseEntity.getHeaders().getLocation());\n+    }\n+\n+    private void signIn(String userName, String password) {\n+        webDriver.get(baseUrl + \"/login\");\n+        webDriver.findElement(By.name(\"username\")).sendKeys(userName);\n+        webDriver.findElement(By.name(\"password\")).sendKeys(password);\n+        webDriver.findElement(By.xpath(\"//input[@value='Sign in']\")).click();\n+        assertThat(webDriver.findElement(By.cssSelector(\"h1\")).getText(), containsString(\"Where to?\"));\n+    }\n+}"
        },
        {
            "sha": "5667b57044a3b6c537db470c874954a2fce1e2cd",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/feature/ChangePasswordIT.java",
            "status": "added",
            "additions": 114,
            "deletions": 0,
            "changes": 114,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FChangePasswordIT.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FChangePasswordIT.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FChangePasswordIT.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,114 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.feature;\n+\n+import static org.hamcrest.Matchers.containsString;\n+\n+import org.cloudfoundry.identity.uaa.login.test.DefaultIntegrationTestConfig;\n+import org.cloudfoundry.identity.uaa.login.test.IntegrationTestRule;\n+import org.cloudfoundry.identity.uaa.login.test.TestClient;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebDriver;\n+import org.openqa.selenium.WebElement;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.web.client.RestTemplate;\n+\n+import com.dumbster.smtp.SimpleSmtpServer;\n+import java.security.SecureRandom;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(classes = DefaultIntegrationTestConfig.class)\n+public class ChangePasswordIT {\n+\n+    @Autowired @Rule\n+    public IntegrationTestRule integrationTestRule;\n+\n+    @Autowired\n+    WebDriver webDriver;\n+\n+    @Autowired\n+    SimpleSmtpServer simpleSmtpServer;\n+\n+    @Autowired\n+    TestClient testClient;\n+\n+    @Autowired\n+    RestTemplate restTemplate;\n+\n+    @Value(\"${integration.test.base_url}\")\n+    String baseUrl;\n+    \n+    private String userEmail;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        int randomInt = new SecureRandom().nextInt();\n+\n+        String adminAccessToken = testClient.getOAuthAccessToken(\"admin\", \"adminsecret\", \"client_credentials\", \"clients.read clients.write clients.secret\");\n+\n+        String scimClientId = \"scim\" + randomInt;\n+        testClient.createScimClient(adminAccessToken, scimClientId);\n+\n+        String scimAccessToken = testClient.getOAuthAccessToken(scimClientId, \"scimsecret\", \"client_credentials\", \"scim.read scim.write password.write\");\n+\n+        userEmail = \"user\" + randomInt + \"@example.com\";\n+        testClient.createUser(scimAccessToken, userEmail, userEmail, \"secret\", true);\n+    }\n+\n+    @Test\n+    public void testChangePassword() throws Exception {\n+        signIn(userEmail, \"secret\");\n+\n+        changePassword(\"secret\", \"newsecret\", \"new\");\n+        WebElement errorMessage = webDriver.findElement(By.className(\"error-message\"));\n+        Assert.assertTrue(errorMessage.isDisplayed());\n+        Assert.assertEquals(\"Passwords must match and not be empty.\", errorMessage.getText());\n+\n+        changePassword(\"secret\", \"newsecret\", \"newsecret\");\n+        signOut();\n+\n+        signIn(userEmail, \"newsecret\");\n+    }\n+\n+    private void changePassword(String originalPassword, String newPassword, String confirmPassword) {\n+        webDriver.findElement(By.xpath(\"//*[text()='\"+userEmail+\"']\")).click();\n+        webDriver.findElement(By.linkText(\"Account Settings\")).click();\n+        webDriver.findElement(By.linkText(\"Change Password\")).click();\n+        webDriver.findElement(By.name(\"current_password\")).sendKeys(originalPassword);\n+        webDriver.findElement(By.name(\"new_password\")).sendKeys(newPassword);\n+        webDriver.findElement(By.name(\"confirm_password\")).sendKeys(confirmPassword);\n+\n+        webDriver.findElement(By.xpath(\"//input[@value='Change password']\")).click();\n+    }\n+\n+    private void signOut() {\n+        webDriver.findElement(By.xpath(\"//*[text()='\"+userEmail+\"']\")).click();\n+        webDriver.findElement(By.linkText(\"Sign Out\")).click();\n+    }\n+\n+    private void signIn(String userName, String password) {\n+        webDriver.get(baseUrl + \"/login\");\n+        webDriver.findElement(By.name(\"username\")).sendKeys(userName);\n+        webDriver.findElement(By.name(\"password\")).sendKeys(password);\n+        webDriver.findElement(By.xpath(\"//input[@value='Sign in']\")).click();\n+        Assert.assertThat(webDriver.findElement(By.cssSelector(\"h1\")).getText(), containsString(\"Where to?\"));\n+    }\n+}"
        },
        {
            "sha": "f824ba42e1eef1959936bd38f11cc233b1edd6a3",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/feature/CreateAccountIT.java",
            "status": "added",
            "additions": 144,
            "deletions": 0,
            "changes": 144,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FCreateAccountIT.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FCreateAccountIT.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FCreateAccountIT.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,144 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.feature;\n+\n+import com.dumbster.smtp.SimpleSmtpServer;\n+import com.dumbster.smtp.SmtpMessage;\n+import org.cloudfoundry.identity.uaa.login.test.DefaultIntegrationTestConfig;\n+import org.cloudfoundry.identity.uaa.login.test.IntegrationTestRule;\n+import org.cloudfoundry.identity.uaa.login.test.TestClient;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebDriver;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.security.oauth2.client.test.TestAccounts;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import java.security.SecureRandom;\n+import java.util.Iterator;\n+\n+import static org.apache.commons.lang3.StringUtils.isEmpty;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.not;\n+import static org.junit.Assert.assertFalse;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(classes = DefaultIntegrationTestConfig.class)\n+public class CreateAccountIT {\n+\n+    @Autowired\n+    TestAccounts testAccounts;\n+    \n+    @Autowired @Rule\n+    public IntegrationTestRule integrationTestRule;\n+\n+    @Autowired\n+    WebDriver webDriver;\n+\n+    @Autowired\n+    SimpleSmtpServer simpleSmtpServer;\n+\n+    @Autowired\n+    TestClient testClient;\n+\n+    @Value(\"${integration.test.base_url}\")\n+    String baseUrl;\n+\n+    @Value(\"${integration.test.app_url}\")\n+    String appUrl;\n+\n+    @Before\n+    public void setUp() {\n+        webDriver.get(baseUrl + \"/logout.do\");\n+    }\n+\n+    @Test\n+    public void testUserInitiatedSignup() throws Exception {\n+        String userEmail = \"user\" + new SecureRandom().nextInt() + \"@example.com\";\n+\n+        webDriver.get(baseUrl + \"/\");\n+        webDriver.findElement(By.xpath(\"//*[text()='Create account']\")).click();\n+\n+        Assert.assertEquals(\"Create your account\", webDriver.findElement(By.tagName(\"h1\")).getText());\n+\n+        int receivedEmailSize = simpleSmtpServer.getReceivedEmailSize();\n+\n+        webDriver.findElement(By.name(\"email\")).sendKeys(userEmail);\n+        webDriver.findElement(By.name(\"password\")).sendKeys(\"secret\");\n+        webDriver.findElement(By.name(\"password_confirmation\")).sendKeys(\"secret\");\n+\n+        webDriver.findElement(By.xpath(\"//input[@value='Send activation link']\")).click();\n+\n+        Assert.assertEquals(receivedEmailSize + 1, simpleSmtpServer.getReceivedEmailSize());\n+        Iterator receivedEmail = simpleSmtpServer.getReceivedEmail();\n+        SmtpMessage message = (SmtpMessage) receivedEmail.next();\n+        receivedEmail.remove();\n+        Assert.assertEquals(userEmail, message.getHeaderValue(\"To\"));\n+        Assert.assertThat(message.getBody(), containsString(\"Activate your account\"));\n+\n+        Assert.assertEquals(\"Create your account\", webDriver.findElement(By.tagName(\"h1\")).getText());\n+        Assert.assertEquals(\"Please check email for an activation link.\", webDriver.findElement(By.cssSelector(\".instructions-sent\")).getText());\n+\n+        String link = testClient.extractLink(message.getBody());\n+        assertFalse(isEmpty(link));\n+\n+        webDriver.get(link);\n+        Assert.assertThat(webDriver.findElement(By.cssSelector(\"h1\")).getText(), containsString(\"Where to?\"));\n+\n+        webDriver.findElement(By.xpath(\"//*[text()='\"+userEmail+\"']\")).click();\n+        webDriver.findElement(By.linkText(\"Sign Out\")).click();\n+\n+        webDriver.findElement(By.name(\"username\")).sendKeys(userEmail);\n+        webDriver.findElement(By.name(\"password\")).sendKeys(\"secret\");\n+        webDriver.findElement(By.xpath(\"//input[@value='Sign in']\")).click();\n+\n+        Assert.assertThat(webDriver.findElement(By.cssSelector(\"h1\")).getText(), containsString(\"Where to?\"));\n+    }\n+\n+    @Test\n+    public void testClientInitiatedSignup() throws Exception {\n+        String userEmail = \"user\" + new SecureRandom().nextInt() + \"@example.com\";\n+\n+        webDriver.get(baseUrl + \"/create_account?client_id=app\");\n+\n+        Assert.assertEquals(\"Create your account\", webDriver.findElement(By.tagName(\"h1\")).getText());\n+\n+        int receivedEmailSize = simpleSmtpServer.getReceivedEmailSize();\n+\n+        webDriver.findElement(By.name(\"email\")).sendKeys(userEmail);\n+        webDriver.findElement(By.name(\"password\")).sendKeys(\"secret\");\n+        webDriver.findElement(By.name(\"password_confirmation\")).sendKeys(\"secret\");\n+        webDriver.findElement(By.xpath(\"//input[@value='Send activation link']\")).click();\n+\n+        Assert.assertEquals(receivedEmailSize + 1, simpleSmtpServer.getReceivedEmailSize());\n+        Iterator receivedEmail = simpleSmtpServer.getReceivedEmail();\n+        SmtpMessage message = (SmtpMessage) receivedEmail.next();\n+        receivedEmail.remove();\n+        Assert.assertEquals(userEmail, message.getHeaderValue(\"To\"));\n+        Assert.assertThat(message.getBody(), containsString(\"Activate your account\"));\n+\n+        Assert.assertEquals(\"Please check email for an activation link.\", webDriver.findElement(By.cssSelector(\".instructions-sent\")).getText());\n+\n+        String link = testClient.extractLink(message.getBody());\n+        assertFalse(isEmpty(link));\n+\n+        webDriver.get(link);\n+        Assert.assertThat(webDriver.findElement(By.cssSelector(\"h1\")).getText(), not(containsString(\"Where to?\")));\n+    }\n+}"
        },
        {
            "sha": "b5518c887f63bbaddaf94e2f05fff2b410b611c9",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/feature/HealthzIT.java",
            "status": "added",
            "additions": 46,
            "deletions": 0,
            "changes": 46,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FHealthzIT.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FHealthzIT.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FHealthzIT.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,46 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.feature;\n+\n+import org.cloudfoundry.identity.uaa.login.test.DefaultIntegrationTestConfig;\n+import org.cloudfoundry.identity.uaa.login.test.IntegrationTestRule;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebDriver;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(classes = DefaultIntegrationTestConfig.class)\n+public class HealthzIT {\n+\n+    @Autowired @Rule\n+    public IntegrationTestRule integrationTestRule;\n+\n+    @Autowired\n+    WebDriver webDriver;\n+\n+    @Value(\"${integration.test.base_url}\")\n+    String baseUrl;\n+\n+    @Test\n+    public void testHealthz() throws Exception {\n+        webDriver.get(baseUrl + \"/healthz\");\n+        Assert.assertEquals(\"ok\", webDriver.findElement(By.tagName(\"body\")).getText());\n+    }\n+}"
        },
        {
            "sha": "aea2e040adc6e3b852a35bae561526959a2389e5",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/feature/HomeIT.java",
            "status": "added",
            "additions": 107,
            "deletions": 0,
            "changes": 107,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FHomeIT.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FHomeIT.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FHomeIT.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,107 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.feature;\n+\n+import org.cloudfoundry.identity.uaa.login.test.DefaultIntegrationTestConfig;\n+import org.cloudfoundry.identity.uaa.login.test.IntegrationTestRule;\n+import org.hamcrest.Matchers;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebDriver;\n+import org.openqa.selenium.WebElement;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.security.oauth2.client.test.TestAccounts;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(classes = DefaultIntegrationTestConfig.class)\n+public class HomeIT {\n+    @Autowired\n+    TestAccounts testAccounts;\n+    \n+    @Autowired @Rule\n+    public IntegrationTestRule integrationTestRule;\n+\n+    @Autowired\n+    WebDriver webDriver;\n+\n+    @Value(\"${integration.test.base_url}\")\n+    String baseUrl;\n+\n+    private HomePagePerspective asOnHomePage;\n+\n+    @Before\n+    public void setUp() {\n+        webDriver.get(baseUrl + \"/logout.do\");\n+\n+        webDriver.get(baseUrl + \"/login\");\n+        webDriver.findElement(By.name(\"username\")).sendKeys(testAccounts.getUserName());\n+        webDriver.findElement(By.name(\"password\")).sendKeys(testAccounts.getPassword());\n+        webDriver.findElement(By.xpath(\"//input[@value='Sign in']\")).click();\n+\n+        asOnHomePage = new HomePagePerspective(webDriver, testAccounts.getUserName());\n+    }\n+\n+    @Test\n+    public void testMessage() throws Exception {\n+        Assert.assertEquals(\"Where to?\", webDriver.findElement(By.tagName(\"h1\")).getText());\n+    }\n+\n+    @Test\n+    public void theHeaderDropdown() throws Exception {\n+        Assert.assertNotNull(asOnHomePage.getUsernameElement());\n+        Assert.assertFalse(asOnHomePage.getAccountSettingsElement().isDisplayed());\n+        Assert.assertFalse(asOnHomePage.getSignOutElement().isDisplayed());\n+\n+        asOnHomePage.getUsernameElement().click();\n+\n+        Assert.assertTrue(asOnHomePage.getAccountSettingsElement().isDisplayed());\n+        Assert.assertTrue(asOnHomePage.getSignOutElement().isDisplayed());\n+\n+        asOnHomePage.getAccountSettingsElement().click();\n+\n+        Assert.assertThat(webDriver.findElement(By.cssSelector(\"h1\")).getText(), Matchers.containsString(\"Account Settings\"));\n+    }\n+\n+    static class HomePagePerspective {\n+        private final WebDriver webDriver;\n+        private final String username;\n+\n+        public HomePagePerspective(WebDriver webDriver, String username) {\n+            this.webDriver = webDriver;\n+            this.username = username;\n+        }\n+\n+        public WebElement getUsernameElement() {\n+            return getWebElementWithText(username);\n+        }\n+\n+        public WebElement getAccountSettingsElement() {\n+            return getWebElementWithText(\"Account Settings\");\n+        }\n+\n+        public WebElement getSignOutElement() {\n+            return getWebElementWithText(\"Sign Out\");\n+        }\n+\n+        private WebElement getWebElementWithText(String text) {\n+            return webDriver.findElement(By.xpath(\"//*[text()='\" + text + \"']\"));\n+        }\n+    }\n+}"
        },
        {
            "sha": "04cfea59062cb65c32755a8ecf64868c7459c86d",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/feature/ImplicitGrantIT.java",
            "status": "added",
            "additions": 179,
            "deletions": 0,
            "changes": 179,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FImplicitGrantIT.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FImplicitGrantIT.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FImplicitGrantIT.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,179 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.feature;\n+\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.isEmptyOrNullString;\n+import static org.hamcrest.Matchers.not;\n+\n+import org.cloudfoundry.identity.uaa.login.test.DefaultIntegrationTestConfig;\n+import org.cloudfoundry.identity.uaa.login.test.IntegrationTestRule;\n+import org.cloudfoundry.identity.uaa.login.test.TestClient;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.codehaus.jackson.type.TypeReference;\n+import org.hamcrest.Matchers;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.openqa.selenium.WebDriver;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.jwt.Jwt;\n+import org.springframework.security.jwt.JwtHelper;\n+import org.springframework.security.oauth2.client.test.TestAccounts;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.client.RestOperations;\n+import org.springframework.web.util.UriComponents;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import org.springframework.web.util.UriUtils;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(classes = DefaultIntegrationTestConfig.class)\n+public class ImplicitGrantIT {\n+\n+    @Autowired\n+    TestAccounts testAccounts;\n+    \n+    @Autowired @Rule\n+    public IntegrationTestRule integrationTestRule;\n+\n+    @Autowired\n+    WebDriver webDriver;\n+\n+    @Value(\"${integration.test.base_url}\")\n+    String baseUrl;\n+\n+    @Value(\"${integration.test.app_url}\")\n+    String appUrl;\n+\n+    @Autowired\n+    RestOperations restOperations;\n+\n+    @Autowired\n+    TestClient testClient;\n+\n+    @Test\n+    public void testDefaultScopes() throws Exception {\n+        HttpHeaders headers = new HttpHeaders();\n+        headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));\n+\n+        LinkedMultiValueMap<String, String> postBody = new LinkedMultiValueMap<>();\n+        postBody.add(\"client_id\", \"cf\");\n+        postBody.add(\"redirect_uri\", \"https://uaa.cloudfoundry.com/redirect/cf\");\n+        postBody.add(\"response_type\", \"token\");\n+        postBody.add(\"source\", \"credentials\");\n+        postBody.add(\"username\", testAccounts.getUserName());\n+        postBody.add(\"password\", testAccounts.getPassword());\n+\n+        ResponseEntity<Void> responseEntity = restOperations.exchange(baseUrl + \"/oauth/authorize\",\n+                HttpMethod.POST,\n+                new HttpEntity<>(postBody, headers),\n+                Void.class);\n+\n+        Assert.assertEquals(HttpStatus.FOUND, responseEntity.getStatusCode());\n+\n+        UriComponents locationComponents = UriComponentsBuilder.fromUri(responseEntity.getHeaders().getLocation()).build();\n+        Assert.assertEquals(\"uaa.cloudfoundry.com\", locationComponents.getHost());\n+        Assert.assertEquals(\"/redirect/cf\", locationComponents.getPath());\n+\n+        MultiValueMap<String, String> params = parseFragmentParams(locationComponents);\n+\n+        Assert.assertThat(params.get(\"jti\"), not(empty()));\n+        Assert.assertEquals(\"bearer\", params.getFirst(\"token_type\"));\n+        Assert.assertThat(Integer.parseInt(params.getFirst(\"expires_in\")), Matchers.greaterThan(40000));\n+\n+        String[] scopes = UriUtils.decode(params.getFirst(\"scope\"), \"UTF-8\").split(\" \");\n+        Assert.assertThat(Arrays.asList(scopes), containsInAnyOrder(\n+                \"scim.userids\",\n+                \"password.write\",\n+                \"cloud_controller.write\",\n+                \"openid\",\n+                \"cloud_controller.read\"\n+        ));\n+\n+        Jwt access_token = JwtHelper.decode(params.getFirst(\"access_token\"));\n+\n+        Map<String, Object> claims = new ObjectMapper().readValue(access_token.getClaims(), new TypeReference<Map<String, Object>>() {\n+        });\n+\n+        Assert.assertThat((String) claims.get(\"jti\"), is(params.getFirst(\"jti\")));\n+        Assert.assertThat((String) claims.get(\"client_id\"), is(\"cf\"));\n+        Assert.assertThat((String) claims.get(\"cid\"), is(\"cf\"));\n+        Assert.assertThat((String) claims.get(\"user_name\"), is(testAccounts.getUserName()));\n+\n+        Assert.assertThat(((List<String>) claims.get(\"scope\")), containsInAnyOrder(scopes));\n+\n+        Assert.assertThat(((List<String>) claims.get(\"aud\")), containsInAnyOrder(\n+                \"scim\", \"openid\", \"cloud_controller\", \"password\"));\n+    }\n+\n+    @Test\n+    public void testInvalidScopes() throws Exception {\n+        HttpHeaders headers = new HttpHeaders();\n+        headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));\n+\n+        LinkedMultiValueMap<String, String> postBody = new LinkedMultiValueMap<>();\n+        postBody.add(\"client_id\", \"cf\");\n+        postBody.add(\"redirect_uri\", \"https://uaa.cloudfoundry.com/redirect/cf\");\n+        postBody.add(\"response_type\", \"token\");\n+        postBody.add(\"source\", \"credentials\");\n+        postBody.add(\"username\", testAccounts.getUserName());\n+        postBody.add(\"password\", testAccounts.getPassword());\n+        postBody.add(\"scope\", \"read\");\n+\n+        ResponseEntity<Void> responseEntity = restOperations.exchange(baseUrl + \"/oauth/authorize\",\n+                HttpMethod.POST,\n+                new HttpEntity<>(postBody, headers),\n+                Void.class);\n+\n+        Assert.assertEquals(HttpStatus.FOUND, responseEntity.getStatusCode());\n+\n+        System.out.println(\"responseEntity.getHeaders().getLocation() = \" + responseEntity.getHeaders().getLocation());\n+\n+        UriComponents locationComponents = UriComponentsBuilder.fromUri(responseEntity.getHeaders().getLocation()).build();\n+        Assert.assertEquals(\"uaa.cloudfoundry.com\", locationComponents.getHost());\n+        Assert.assertEquals(\"/redirect/cf\", locationComponents.getPath());\n+\n+        MultiValueMap<String, String> params = parseFragmentParams(locationComponents);\n+\n+        Assert.assertThat(params.getFirst(\"error\"), is(\"invalid_scope\"));\n+        Assert.assertThat(params.getFirst(\"access_token\"), isEmptyOrNullString());\n+        Assert.assertThat(params.getFirst(\"credentials\"), isEmptyOrNullString());\n+    }\n+\n+    private MultiValueMap<String, String> parseFragmentParams(UriComponents locationComponents) {\n+        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        String[] tuples = locationComponents.getFragment().split(\"&\");\n+        for (String tuple : tuples) {\n+            String[] parts = tuple.split(\"=\");\n+            params.add(parts[0], parts[1]);\n+        }\n+        return params;\n+    }\n+}"
        },
        {
            "sha": "0f5bc6e879b7a7fa96a5e7d572206215c4281853",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/feature/InvitationsIT.java",
            "status": "added",
            "additions": 176,
            "deletions": 0,
            "changes": 176,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FInvitationsIT.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FInvitationsIT.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FInvitationsIT.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,176 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.feature;\n+\n+import com.dumbster.smtp.SimpleSmtpServer;\n+import com.dumbster.smtp.SmtpMessage;\n+import org.cloudfoundry.identity.uaa.authentication.Origin;\n+import org.cloudfoundry.identity.uaa.codestore.ExpiringCode;\n+import org.cloudfoundry.identity.uaa.login.test.DefaultIntegrationTestConfig;\n+import org.cloudfoundry.identity.uaa.login.test.IntegrationTestRule;\n+import org.cloudfoundry.identity.uaa.login.test.TestClient;\n+import org.cloudfoundry.identity.uaa.scim.ScimUser;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebDriver;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.oauth2.client.OAuth2RestTemplate;\n+import org.springframework.security.oauth2.client.test.TestAccounts;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.security.SecureRandom;\n+import java.sql.Timestamp;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+\n+import static junit.framework.TestCase.assertNotNull;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.not;\n+import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.http.HttpStatus.FOUND;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(classes = DefaultIntegrationTestConfig.class)\n+public class InvitationsIT {\n+\n+    @Autowired\n+    TestAccounts testAccounts;\n+    \n+    @Autowired @Rule\n+    public IntegrationTestRule integrationTestRule;\n+\n+    @Autowired\n+    WebDriver webDriver;\n+\n+    @Autowired\n+    SimpleSmtpServer simpleSmtpServer;\n+\n+    @Autowired\n+    TestClient testClient;\n+\n+    @Value(\"${integration.test.uaa_url}\")\n+    String uaaUrl;\n+\n+    @Value(\"${integration.test.base_url}\")\n+    String baseUrl;\n+\n+    @Value(\"${integration.test.app_url}\")\n+    String appUrl;\n+\n+    @Test\n+    public void testSendInvite() throws Exception {\n+        int randomInt = new SecureRandom().nextInt();\n+        String userEmail = \"user\" + randomInt + \"@example.com\";\n+        int receivedEmailSize = simpleSmtpServer.getReceivedEmailSize();\n+\n+        signIn(testAccounts.getUserName(), testAccounts.getPassword());\n+\n+        webDriver.findElement(By.linkText(\"Invite Users\")).click();\n+        assertEquals(\"Send an invite\", webDriver.findElement(By.tagName(\"h1\")).getText());\n+\n+        webDriver.findElement(By.name(\"email\")).sendKeys(userEmail);\n+        webDriver.findElement(By.xpath(\"//input[@value='Send invite']\")).click();\n+\n+        assertEquals(\"Invite sent\", webDriver.findElement(By.tagName(\"h1\")).getText());\n+\n+        assertEquals(receivedEmailSize + 1, simpleSmtpServer.getReceivedEmailSize());\n+        Iterator receivedEmail = simpleSmtpServer.getReceivedEmail();\n+        SmtpMessage message = (SmtpMessage) receivedEmail.next();\n+        receivedEmail.remove();\n+        assertEquals(userEmail, message.getHeaderValue(\"To\"));\n+        assertThat(message.getBody(), containsString(\"Accept Invite\"));\n+\n+        String link = testClient.extractLink(message.getBody());\n+        assertTrue(link.contains(\"/invitations/accept\"));\n+        webDriver.get(link);\n+\n+        assertEquals(\"Create your account\", webDriver.findElement(By.tagName(\"h1\")).getText());\n+\n+        webDriver.findElement(By.name(\"password\")).sendKeys(\"secret\");\n+        webDriver.findElement(By.name(\"password_confirmation\")).sendKeys(\"secret\");\n+\n+        webDriver.findElement(By.xpath(\"//input[@value='Create account']\")).click();\n+\n+        assertThat(webDriver.findElement(By.cssSelector(\"h1\")).getText(), containsString(\"Where to?\"));\n+\n+        webDriver.findElement(By.xpath(\"//*[text()='\"+userEmail+\"']\")).click();\n+        webDriver.findElement(By.linkText(\"Sign Out\")).click();\n+\n+        webDriver.findElement(By.name(\"username\")).sendKeys(userEmail);\n+        webDriver.findElement(By.name(\"password\")).sendKeys(\"secret\");\n+        webDriver.findElement(By.xpath(\"//input[@value='Sign in']\")).click();\n+\n+        assertThat(webDriver.findElement(By.cssSelector(\"h1\")).getText(), containsString(\"Where to?\"));\n+    }\n+\n+    @Test\n+    public void testClientRedirectInviteUser() throws Exception {\n+        String code = generateCode();\n+        webDriver.get(baseUrl + \"/invitations/accept?code=\" + code);\n+        assertEquals(\"Create your account\", webDriver.findElement(By.tagName(\"h1\")).getText());\n+\n+        webDriver.findElement(By.name(\"password\")).sendKeys(\"secret\");\n+        webDriver.findElement(By.name(\"password_confirmation\")).sendKeys(\"secret\");\n+\n+        webDriver.findElement(By.xpath(\"//input[@value='Create account']\")).click();\n+        Assert.assertThat(webDriver.findElement(By.cssSelector(\"h1\")).getText(), not(containsString(\"Where to?\")));\n+    }\n+\n+    private String generateCode() {\n+        String token = testClient.getOAuthAccessToken(\"login\", \"loginsecret\", \"client_credentials\", \"password.write,scim.write\");\n+        HttpHeaders headers = new HttpHeaders();\n+        headers.add(\"Authorization\", \"Bearer \" + token);\n+        RestTemplate uaaTemplate = new RestTemplate();\n+\n+        String userEmail = \"user\" + new SecureRandom().nextInt() + \"@example.com\";\n+        ScimUser scimUser = new ScimUser();\n+        scimUser.setUserName(userEmail);\n+        ScimUser.Email email = new ScimUser.Email();\n+        email.setPrimary(true);\n+        email.setValue(userEmail);\n+        scimUser.setEmails(Arrays.asList(email));\n+        scimUser.setOrigin(Origin.UAA);\n+\n+        HttpEntity<ScimUser> request = new HttpEntity<>(scimUser, headers);\n+        ResponseEntity<ScimUser> response = uaaTemplate.exchange(uaaUrl + \"/Users\", HttpMethod.POST, request, ScimUser.class);\n+\n+        Timestamp expiry = new Timestamp(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(System.currentTimeMillis() + 24 * 3600, TimeUnit.MILLISECONDS));\n+        ExpiringCode expiringCode = new ExpiringCode(null, expiry, \"{\\\"client_id\\\":\\\"app\\\", \\\"user_id\\\":\\\"\" + response.getBody().getId() + \"\\\", \\\"email\\\":\\\"user@example.com\\\"}\");\n+        HttpEntity<ExpiringCode> expiringCodeRequest = new HttpEntity<>(expiringCode, headers);\n+        ResponseEntity<ExpiringCode> expiringCodeResponse = uaaTemplate.exchange(uaaUrl + \"/Codes\", HttpMethod.POST, expiringCodeRequest, ExpiringCode.class);\n+        expiringCode = expiringCodeResponse.getBody();\n+        return expiringCode.getCode();\n+    }\n+\n+\n+    private void signIn(String userName, String password) {\n+        webDriver.get(baseUrl + \"/login\");\n+        webDriver.findElement(By.name(\"username\")).sendKeys(userName);\n+        webDriver.findElement(By.name(\"password\")).sendKeys(password);\n+        webDriver.findElement(By.xpath(\"//input[@value='Sign in']\")).click();\n+        assertThat(webDriver.findElement(By.cssSelector(\"h1\")).getText(), containsString(\"Where to?\"));\n+    }\n+}"
        },
        {
            "sha": "d03a9fc0bc9aa71db7c3ba34cfd31800284d1311",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/feature/LoginIT.java",
            "status": "added",
            "additions": 170,
            "deletions": 0,
            "changes": 170,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FLoginIT.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FLoginIT.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FLoginIT.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,170 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.feature;\n+\n+import com.dumbster.smtp.SimpleSmtpServer;\n+import com.dumbster.smtp.SmtpMessage;\n+import org.cloudfoundry.identity.uaa.login.test.DefaultIntegrationTestConfig;\n+import org.cloudfoundry.identity.uaa.login.test.IntegrationTestRule;\n+import org.cloudfoundry.identity.uaa.login.test.TestClient;\n+import org.hamcrest.Matchers;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebDriver;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.oauth2.client.test.TestAccounts;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.net.URI;\n+import java.security.SecureRandom;\n+import java.util.Iterator;\n+\n+import static org.apache.commons.lang3.StringUtils.isEmpty;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertThat;\n+import static org.springframework.http.HttpStatus.FOUND;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(classes = DefaultIntegrationTestConfig.class)\n+public class LoginIT {\n+\n+    @Autowired @Rule\n+    public IntegrationTestRule integrationTestRule;\n+\n+    @Autowired\n+    WebDriver webDriver;\n+\n+    @Value(\"${integration.test.base_url}\")\n+    String baseUrl;\n+    \n+    @Autowired\n+    TestAccounts testAccounts;\n+\n+    @Autowired\n+    TestClient testClient;\n+\n+    @Autowired\n+    SimpleSmtpServer simpleSmtpServer;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        webDriver.get(baseUrl + \"/logout.do\");\n+    }\n+\n+    @Test\n+    public void testSuccessfulLogin() throws Exception {\n+        webDriver.get(baseUrl + \"/login\");\n+        assertEquals(\"Cloud Foundry\", webDriver.getTitle());\n+\n+        webDriver.findElement(By.name(\"username\")).sendKeys(testAccounts.getUserName());\n+        webDriver.findElement(By.name(\"password\")).sendKeys(testAccounts.getPassword());\n+        webDriver.findElement(By.xpath(\"//input[@value='Sign in']\")).click();\n+\n+        assertThat(webDriver.findElement(By.cssSelector(\"h1\")).getText(), Matchers.containsString(\"Where to?\"));\n+    }\n+\n+    @Test\n+    public void testFailedLogin() throws Exception {\n+        webDriver.get(baseUrl + \"/login\");\n+        assertEquals(\"Cloud Foundry\", webDriver.getTitle());\n+\n+        webDriver.findElement(By.name(\"username\")).sendKeys(testAccounts.getUserName());\n+        webDriver.findElement(By.name(\"password\")).sendKeys(\"invalidpassword\");\n+        webDriver.findElement(By.xpath(\"//input[@value='Sign in']\")).click();\n+\n+        assertThat(webDriver.findElement(By.cssSelector(\"h1\")).getText(), Matchers.containsString(\"Welcome!\"));\n+    }\n+\n+    @Test\n+    public void testRedirectAfterFailedLogin() throws Exception {\n+        RestTemplate template = new RestTemplate();\n+        LinkedMultiValueMap<String,String> body = new LinkedMultiValueMap<>();\n+        body.add(\"username\", testAccounts.getUserName());\n+        body.add(\"password\", \"invalidpassword\");\n+        ResponseEntity<Void> loginResponse = template.exchange(baseUrl + \"/login.do\",\n+            HttpMethod.POST,\n+            new HttpEntity<>(body, null),\n+            Void.class);\n+        assertEquals(HttpStatus.FOUND, loginResponse.getStatusCode());\n+    }\n+\n+    @Test\n+    public void testUnverifiedUserLoginResendsVerificationLink() throws Exception {\n+        String userEmail = createUnverifiedUser();\n+\n+        webDriver.get(baseUrl + \"/oauth/authorize?client_id=app&redirect_uri=http%3A%2F%2Flocalhost%3A8080%2Fapp&response_type=code&state=6pOfRa\");\n+        assertEquals(\"Cloud Foundry\", webDriver.getTitle());\n+\n+        int receivedEmailSize = simpleSmtpServer.getReceivedEmailSize();\n+\n+        webDriver.findElement(By.name(\"username\")).sendKeys(userEmail);\n+        webDriver.findElement(By.name(\"password\")).sendKeys(\"secret\");\n+        webDriver.findElement(By.xpath(\"//input[@value='Sign in']\")).click();\n+\n+        assertThat(webDriver.findElement(By.cssSelector(\"h1\")).getText(), Matchers.containsString(\"Welcome!\"));\n+        assertThat(webDriver.findElement(By.cssSelector(\".alert-error\")).getText(), Matchers.containsString(\"Your account is not verified\"));\n+\n+        assertEquals(receivedEmailSize + 1, simpleSmtpServer.getReceivedEmailSize());\n+        Iterator receivedEmail = simpleSmtpServer.getReceivedEmail();\n+        SmtpMessage message = (SmtpMessage) receivedEmail.next();\n+        receivedEmail.remove();\n+        assertEquals(userEmail, message.getHeaderValue(\"To\"));\n+        assertThat(message.getBody(), containsString(\"Activate your account\"));\n+\n+        String link = testClient.extractLink(message.getBody());\n+        assertFalse(isEmpty(link));\n+\n+        RestTemplate restTemplate = new RestTemplate(new DefaultIntegrationTestConfig.HttpClientFactory());\n+        ResponseEntity<String> responseEntity = restTemplate.getForEntity(link, String.class);\n+        assertEquals(FOUND, responseEntity.getStatusCode());\n+        assertEquals(new URI(\"http://localhost:8080/app/\"), responseEntity.getHeaders().getLocation());\n+    }\n+\n+    private String createUnverifiedUser() throws Exception {\n+        int randomInt = new SecureRandom().nextInt();\n+\n+        String adminAccessToken = testClient.getOAuthAccessToken(\"admin\", \"adminsecret\", \"client_credentials\", \"clients.read clients.write clients.secret\");\n+\n+        String scimClientId = \"scim\" + randomInt;\n+        testClient.createScimClient(adminAccessToken, scimClientId);\n+\n+        String scimAccessToken = testClient.getOAuthAccessToken(scimClientId, \"scimsecret\", \"client_credentials\", \"scim.read scim.write password.write\");\n+\n+        String userEmail = \"user\" + randomInt + \"@example.com\";\n+        testClient.createUser(scimAccessToken, userEmail, userEmail, \"secret\", false);\n+\n+        return userEmail;\n+    }\n+\n+    @Test\n+    public void testBuildInfo() throws Exception {\n+        webDriver.get(baseUrl + \"/login\");\n+\n+        String regex = \"Version: \\\\S+, Commit: \\\\w{7}, Timestamp: .+, UAA: http://localhost:8080/uaa\";\n+        Assert.assertTrue(webDriver.findElement(By.cssSelector(\".footer .copyright\")).getAttribute(\"title\").matches(regex));\n+    }\n+}"
        },
        {
            "sha": "29f22d494063616f1ffe93e20a224747c52114f4",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/feature/OpenIdTokenGrantsIT.java",
            "status": "added",
            "additions": 409,
            "deletions": 0,
            "changes": 409,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FOpenIdTokenGrantsIT.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FOpenIdTokenGrantsIT.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FOpenIdTokenGrantsIT.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,409 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.feature;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.cloudfoundry.identity.uaa.login.test.DefaultIntegrationTestConfig;\n+import org.cloudfoundry.identity.uaa.login.test.IntegrationTestRule;\n+import org.cloudfoundry.identity.uaa.login.test.TestClient;\n+import org.cloudfoundry.identity.uaa.scim.ScimUser;\n+import org.cloudfoundry.identity.uaa.test.UaaTestAccounts;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.codehaus.jackson.type.TypeReference;\n+import org.hamcrest.Matchers;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.openqa.selenium.WebDriver;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.http.client.ClientHttpResponse;\n+import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;\n+import org.springframework.security.jwt.Jwt;\n+import org.springframework.security.jwt.JwtHelper;\n+import org.springframework.security.oauth2.client.OAuth2RestTemplate;\n+import org.springframework.security.oauth2.client.http.OAuth2ErrorHandler;\n+import org.springframework.security.oauth2.client.test.OAuth2ContextConfiguration;\n+import org.springframework.security.oauth2.client.test.TestAccounts;\n+import org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails;\n+import org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails;\n+import org.springframework.security.oauth2.common.AuthenticationScheme;\n+import org.springframework.security.oauth2.common.util.RandomValueStringGenerator;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.client.RestOperations;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.util.UriComponents;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import org.springframework.web.util.UriUtils;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(classes = DefaultIntegrationTestConfig.class)\n+@OAuth2ContextConfiguration(OAuth2ContextConfiguration.ClientCredentials.class)\n+public class OpenIdTokenGrantsIT {\n+\n+\n+\n+    @Autowired\n+    TestAccounts testAccounts;\n+    \n+    @Autowired @Rule\n+    public IntegrationTestRule integrationTestRule;\n+\n+    @Autowired\n+    WebDriver webDriver;\n+\n+    @Value(\"${integration.test.base_url}\")\n+    String loginUrl;\n+\n+    @Value(\"${integration.test.uaa_url}\")\n+    String uaaUrl;\n+\n+    @Value(\"${integration.test.app_url}\")\n+    String appUrl;\n+\n+    @Autowired\n+    RestOperations restOperations;\n+\n+    @Autowired\n+    TestClient testClient;\n+\n+    private RestTemplate client;\n+\n+    private ScimUser user;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        ((RestTemplate)restOperations).setRequestFactory(new StatelessRequestFactory());\n+        ClientCredentialsResourceDetails clientCredentials =\n+            getClientCredentialsResource(new String[] {\"scim.write\"}, testAccounts.getAdminClientId(), testAccounts.getAdminClientSecret());\n+        client = new OAuth2RestTemplate(clientCredentials);\n+        client.setRequestFactory(new StatelessRequestFactory());\n+        client.setErrorHandler(new OAuth2ErrorHandler(clientCredentials) {\n+            // Pass errors through in response entity for status code analysis\n+            @Override\n+            public boolean hasError(ClientHttpResponse response) throws IOException {\n+                return false;\n+            }\n+\n+            @Override\n+            public void handleError(ClientHttpResponse response) throws IOException {\n+            }\n+        });\n+        user = createUser(new RandomValueStringGenerator().generate(), \"openiduser\", \"openidlast\", \"test@openid,com\",true).getBody();\n+    }\n+\n+\n+    private ClientCredentialsResourceDetails getClientCredentialsResource(String[] scope, String clientId,\n+                                                                         String clientSecret) {\n+        ClientCredentialsResourceDetails resource = new ClientCredentialsResourceDetails();\n+        resource.setClientId(clientId);\n+        resource.setClientSecret(clientSecret);\n+        resource.setId(clientId);\n+        if (scope != null) {\n+            resource.setScope(Arrays.asList(scope));\n+        }\n+        resource.setClientAuthenticationScheme(AuthenticationScheme.header);\n+        resource.setAccessTokenUri(uaaUrl+\"/oauth/token\");\n+        return resource;\n+    }\n+\n+    private ResponseEntity<ScimUser> createUser(String username, String firstName, String lastName,\n+                                                String email, boolean verified) {\n+        ScimUser user = new ScimUser();\n+        user.setUserName(username);\n+        user.setName(new ScimUser.Name(firstName, lastName));\n+        user.addEmail(email);\n+        user.setVerified(verified);\n+        user.setActive(true);\n+        user.setPassword(\"secret\");\n+\n+        return client.postForEntity(uaaUrl+\"/Users\", user, ScimUser.class);\n+    }\n+\n+    @Test\n+    public void testImplicitGrant() throws Exception {\n+        HttpHeaders headers = new HttpHeaders();\n+        headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));\n+\n+        LinkedMultiValueMap<String, String> postBody = new LinkedMultiValueMap<>();\n+        postBody.add(\"client_id\", \"cf\");\n+        postBody.add(\"redirect_uri\", \"https://uaa.cloudfoundry.com/redirect/cf\");\n+        postBody.add(\"response_type\", \"token id_token\");\n+        postBody.add(\"source\", \"credentials\");\n+        postBody.add(\"username\", user.getUserName());\n+        postBody.add(\"password\", \"secret\");\n+\n+        ResponseEntity<Void> responseEntity = restOperations.exchange(loginUrl + \"/oauth/authorize\",\n+                HttpMethod.POST,\n+                new HttpEntity<>(postBody, headers),\n+                Void.class);\n+\n+        Assert.assertEquals(HttpStatus.FOUND, responseEntity.getStatusCode());\n+\n+        UriComponents locationComponents = UriComponentsBuilder.fromUri(responseEntity.getHeaders().getLocation()).build();\n+        Assert.assertEquals(\"uaa.cloudfoundry.com\", locationComponents.getHost());\n+        Assert.assertEquals(\"/redirect/cf\", locationComponents.getPath());\n+\n+        MultiValueMap<String, String> params = parseFragmentParams(locationComponents);\n+\n+        Assert.assertThat(params.get(\"jti\"), not(empty()));\n+        Assert.assertEquals(\"bearer\", params.getFirst(\"token_type\"));\n+        Assert.assertThat(Integer.parseInt(params.getFirst(\"expires_in\")), Matchers.greaterThan(40000));\n+\n+        String[] scopes = UriUtils.decode(params.getFirst(\"scope\"), \"UTF-8\").split(\" \");\n+        Assert.assertThat(Arrays.asList(scopes), containsInAnyOrder(\n+                \"scim.userids\",\n+                \"password.write\",\n+                \"cloud_controller.write\",\n+                \"openid\",\n+                \"cloud_controller.read\"\n+        ));\n+\n+        validateToken(\"access_token\", params.toSingleValueMap(), scopes);\n+        validateToken(\"id_token\", params.toSingleValueMap(), scopes);\n+    }\n+\n+    private void validateToken(String paramName, Map params, String[] scopes) throws java.io.IOException {\n+        Jwt access_token = JwtHelper.decode((String)params.get(paramName));\n+\n+        Map<String, Object> claims = new ObjectMapper().readValue(access_token.getClaims(), new TypeReference<Map<String, Object>>() {\n+        });\n+\n+        Assert.assertThat((String) claims.get(\"jti\"), is(params.get(\"jti\")));\n+        Assert.assertThat((String) claims.get(\"client_id\"), is(\"cf\"));\n+        Assert.assertThat((String) claims.get(\"cid\"), is(\"cf\"));\n+        Assert.assertThat((String) claims.get(\"user_name\"), is(user.getUserName()));\n+\n+        Assert.assertThat(((List<String>) claims.get(\"scope\")), containsInAnyOrder(scopes));\n+\n+        Assert.assertThat(((List<String>) claims.get(\"aud\")), containsInAnyOrder(\n+                \"scim\", \"openid\", \"cloud_controller\", \"password\"));\n+    }\n+\n+    @Test\n+    public void testPasswordGrant() throws Exception {\n+        String basicDigestHeaderValue = \"Basic \"\n+            + new String(Base64.encodeBase64((\"cf:\").getBytes()));\n+\n+        HttpHeaders headers = new HttpHeaders();\n+        headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));\n+        headers.set(\"Authorization\", basicDigestHeaderValue);\n+\n+        LinkedMultiValueMap<String, String> postBody = new LinkedMultiValueMap<>();\n+        postBody.add(\"client_id\", \"cf\");\n+        postBody.add(\"redirect_uri\", \"https://uaa.cloudfoundry.com/redirect/cf\");\n+        postBody.add(\"response_type\", \"token id_token\");\n+        postBody.add(\"grant_type\", \"password\");\n+        postBody.add(\"username\", user.getUserName());\n+        postBody.add(\"password\", \"secret\");\n+\n+        ResponseEntity<Map> responseEntity = restOperations.exchange(loginUrl + \"/oauth/token\",\n+            HttpMethod.POST,\n+            new HttpEntity<>(postBody, headers),\n+            Map.class);\n+\n+        Assert.assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n+\n+        Map<String, Object> params = responseEntity.getBody();\n+\n+        Assert.assertTrue(params.get(\"jti\") != null);\n+        Assert.assertEquals(\"bearer\", params.get(\"token_type\"));\n+        Assert.assertThat((Integer)params.get(\"expires_in\"), Matchers.greaterThan(40000));\n+\n+        String[] scopes = UriUtils.decode((String)params.get(\"scope\"), \"UTF-8\").split(\" \");\n+        Assert.assertThat(Arrays.asList(scopes), containsInAnyOrder(\n+            \"scim.userids\",\n+            \"password.write\",\n+            \"cloud_controller.write\",\n+            \"openid\",\n+            \"cloud_controller.read\"\n+        ));\n+\n+        validateToken(\"access_token\", params, scopes);\n+        validateToken(\"id_token\", params, scopes);\n+    }\n+\n+    @Test\n+    public void testOpenIdHybridFlowIdTokenAndCode() throws Exception {\n+        doOpenIdHybridFlowIdTokenAndCode(new HashSet<>(Arrays.asList(\"token\",\"code\")), \".+access_token=.+code=.+\");\n+        doOpenIdHybridFlowIdTokenAndCode(new HashSet<>(Arrays.asList(\"token\",\"code\")), \".+access_token=.+code=.+\");\n+    }\n+\n+    @Test\n+    public void testOpenIdHybridFlowIdTokenAndTokenAndCode() throws Exception {\n+        doOpenIdHybridFlowIdTokenAndCode(new HashSet<>(Arrays.asList(\"token\",\"id_token\", \"code\")), \".+access_token=.+id_token=.+code=.+\");\n+        doOpenIdHybridFlowIdTokenAndCode(new HashSet<>(Arrays.asList(\"token\",\"id_token\", \"code\")), \".+access_token=.+id_token=.+code=.+\");\n+    }\n+\n+    @Test\n+    public void testOpenIdHybridFlowIdTokenAndToken() throws Exception {\n+        doOpenIdHybridFlowIdTokenAndCode(new HashSet<>(Arrays.asList(\"id_token\",\"code\")), \".+id_token=.+code=.+\");\n+        doOpenIdHybridFlowIdTokenAndCode(new HashSet<>(Arrays.asList(\"id_token\",\"code\")), \".+id_token=.+code=.+\");\n+    }\n+\n+    private void doOpenIdHybridFlowIdTokenAndCode(Set<String> responseTypes, String responseTypeMatcher) throws Exception {\n+\n+        HttpHeaders headers = new HttpHeaders();\n+        // TODO: should be able to handle just TEXT_HTML\n+        headers.setAccept(Arrays.asList(MediaType.TEXT_HTML, MediaType.ALL));\n+\n+        StringBuilder responseType = new StringBuilder();\n+        Iterator<String> rTypes = responseTypes.iterator();\n+        while (rTypes.hasNext()) {\n+            String type = rTypes.next();\n+            responseType.append(type);\n+            if (rTypes.hasNext()) {\n+                responseType.append(\" \");\n+            }\n+        }\n+        String state = new RandomValueStringGenerator().generate();\n+        String clientId = \"app\";\n+        String clientSecret = \"appclientsecret\";\n+        String redirectUri = \"http://anywhere.com\";\n+        String uri = loginUrl + \"/oauth/authorize?response_type={response_type}&\"+\n+            \"state={state}&client_id={client_id}&redirect_uri={redirect_uri}\";\n+\n+        ResponseEntity<Void> result = restOperations.exchange(\n+            uri,\n+            HttpMethod.GET,\n+            new HttpEntity<>(null, headers),\n+            Void.class,\n+            responseType,\n+            state,\n+            clientId,\n+            redirectUri\n+        );\n+        assertEquals(HttpStatus.FOUND, result.getStatusCode());\n+        String location = UriUtils.decode(result.getHeaders().getLocation().toString(), \"UTF-8\");\n+\n+        if (result.getHeaders().containsKey(\"Set-Cookie\")) {\n+            String cookie = result.getHeaders().getFirst(\"Set-Cookie\");\n+            headers.set(\"Cookie\", cookie);\n+        }\n+\n+        ResponseEntity<String> response = restOperations.exchange(\n+            location,\n+            HttpMethod.GET,\n+            new HttpEntity<>(null, headers),\n+            String.class);\n+        // should be directed to the login screen...\n+        assertTrue(response.getBody().contains(\"/login.do\"));\n+        assertTrue(response.getBody().contains(\"username\"));\n+        assertTrue(response.getBody().contains(\"password\"));\n+\n+        MultiValueMap<String, String> formData = new LinkedMultiValueMap<>();\n+        formData.add(\"username\", user.getUserName());\n+        formData.add(\"password\", \"secret\");\n+\n+        // Should be redirected to the original URL, but now authenticated\n+        result = restOperations.exchange(loginUrl + \"/login.do\", HttpMethod.POST, new HttpEntity<>(formData, headers), Void.class);\n+        assertEquals(HttpStatus.FOUND, result.getStatusCode());\n+\n+        if (result.getHeaders().containsKey(\"Set-Cookie\")) {\n+            String cookie = result.getHeaders().getFirst(\"Set-Cookie\");\n+            headers.set(\"Cookie\", cookie);\n+        }\n+\n+        location = UriUtils.decode(result.getHeaders().getLocation().toString(), \"UTF-8\");\n+        response = restOperations.exchange(\n+            location,\n+            HttpMethod.GET,\n+            new HttpEntity<>(null, headers),\n+            String.class);\n+        if (response.getStatusCode() == HttpStatus.OK) {\n+            // The grant access page should be returned\n+            assertTrue(response.getBody().contains(\"You can change your approval of permissions\"));\n+\n+            formData.clear();\n+            formData.add(\"user_oauth_approval\", \"true\");\n+            result = restOperations.exchange(loginUrl + \"/oauth/authorize\", HttpMethod.POST, new HttpEntity<>(formData, headers), Void.class);\n+            assertEquals(HttpStatus.FOUND, result.getStatusCode());\n+            location = UriUtils.decode(result.getHeaders().getLocation().toString(), \"UTF-8\");\n+        }\n+        else {\n+            // Token cached so no need for second approval\n+            assertEquals(HttpStatus.FOUND, response.getStatusCode());\n+            location = UriUtils.decode(response.getHeaders().getLocation().toString(), \"UTF-8\");\n+        }\n+        assertTrue(\"Wrong location: \" + location,\n+            location.matches(redirectUri + responseTypeMatcher.toString()));\n+\n+        formData.clear();\n+        formData.add(\"client_id\", clientId);\n+        formData.add(\"redirect_uri\", redirectUri);\n+        formData.add(\"grant_type\", \"authorization_code\");\n+        formData.add(\"code\", location.split(\"code=\")[1].split(\"&\")[0]);\n+        HttpHeaders tokenHeaders = new HttpHeaders();\n+        String basicDigestHeaderValue = \"Basic \"\n+            + new String(Base64.encodeBase64((clientId + \":\" + clientSecret).getBytes()));\n+        tokenHeaders.set(\"Authorization\", basicDigestHeaderValue);\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        ResponseEntity<Map> tokenResponse = restOperations.exchange(loginUrl+\"/oauth/token\", HttpMethod.POST, new HttpEntity<>(formData, tokenHeaders), Map.class);\n+        assertEquals(HttpStatus.OK, tokenResponse.getStatusCode());\n+        @SuppressWarnings(\"unchecked\")\n+        Map<String, String> body = tokenResponse.getBody();\n+        Jwt token = JwtHelper.decode(body.get(\"access_token\"));\n+        assertTrue(\"Wrong claims: \" + token.getClaims(), token.getClaims().contains(\"\\\"aud\\\"\"));\n+        assertTrue(\"Wrong claims: \" + token.getClaims(), token.getClaims().contains(\"\\\"user_id\\\"\"));\n+    }\n+\n+    private MultiValueMap<String, String> parseFragmentParams(UriComponents locationComponents) {\n+        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        String[] tuples = locationComponents.getFragment().split(\"&\");\n+        for (String tuple : tuples) {\n+            String[] parts = tuple.split(\"=\");\n+            params.add(parts[0], parts[1]);\n+        }\n+        return params;\n+    }\n+\n+    private static class StatelessRequestFactory extends HttpComponentsClientHttpRequestFactory {\n+        @Override\n+        public HttpClient getHttpClient() {\n+            return HttpClientBuilder.create()\n+                .useSystemProperties()\n+                .disableRedirectHandling()\n+                .disableCookieManagement()\n+                .build();\n+        }\n+    }\n+}"
        },
        {
            "sha": "8effc585e80fdbf9c4eb077da4e189014602f81c",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/feature/ResetPasswordIT.java",
            "status": "added",
            "additions": 166,
            "deletions": 0,
            "changes": 166,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FResetPasswordIT.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FResetPasswordIT.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FResetPasswordIT.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,166 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.feature;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+\n+import org.cloudfoundry.identity.uaa.login.test.DefaultIntegrationTestConfig;\n+import org.cloudfoundry.identity.uaa.login.test.IntegrationTestRule;\n+import org.cloudfoundry.identity.uaa.login.test.LoginServerClassRunner;\n+import org.cloudfoundry.identity.uaa.login.test.TestClient;\n+import org.cloudfoundry.identity.uaa.login.test.UnlessProfileActive;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebDriver;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.web.client.RestTemplate;\n+\n+import com.dumbster.smtp.SimpleSmtpServer;\n+import com.dumbster.smtp.SmtpMessage;\n+import java.security.SecureRandom;\n+import java.util.Iterator;\n+\n+@RunWith(LoginServerClassRunner.class)\n+@ContextConfiguration(classes = DefaultIntegrationTestConfig.class)\n+@UnlessProfileActive(values = \"saml\")\n+public class ResetPasswordIT {\n+\n+    @Autowired @Rule\n+    public IntegrationTestRule integrationTestRule;\n+\n+    @Autowired\n+    WebDriver webDriver;\n+\n+    @Autowired\n+    SimpleSmtpServer simpleSmtpServer;\n+\n+    @Autowired\n+    TestClient testClient;\n+\n+    @Autowired\n+    RestTemplate restTemplate;\n+\n+    @Value(\"${integration.test.base_url}\")\n+    String baseUrl;\n+\n+    private String userEmail;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        int randomInt = new SecureRandom().nextInt();\n+\n+        String adminAccessToken = testClient.getOAuthAccessToken(\"admin\", \"adminsecret\", \"client_credentials\", \"clients.read clients.write clients.secret\");\n+        String scimClientId = \"scim\" + randomInt;\n+        testClient.createScimClient(adminAccessToken, scimClientId);\n+        String scimAccessToken = testClient.getOAuthAccessToken(scimClientId, \"scimsecret\", \"client_credentials\", \"scim.read scim.write password.write\");\n+        userEmail = \"user\" + randomInt + \"@example.com\";\n+        testClient.createUser(scimAccessToken, userEmail, userEmail, \"secret\", true);\n+    }\n+\n+    @Test\n+    public void resettingAPassword() throws Exception {\n+\n+        // Go to Forgot Password page\n+        webDriver.get(baseUrl + \"/login\");\n+        assertEquals(\"Cloud Foundry\", webDriver.getTitle());\n+        webDriver.findElement(By.linkText(\"Reset password\")).click();\n+        assertEquals(\"Reset Password\", webDriver.findElement(By.tagName(\"h1\")).getText());\n+\n+        // Enter an invalid email address\n+        webDriver.findElement(By.name(\"email\")).sendKeys(\"notAnEmail\");\n+        webDriver.findElement(By.xpath(\"//input[@value='Send reset password link']\")).click();\n+        assertThat(webDriver.findElement(By.className(\"error-message\")).getText(), Matchers.equalTo(\"Please enter a valid email address.\"));\n+\n+        // Successfully enter email address\n+        int receivedEmailSize = simpleSmtpServer.getReceivedEmailSize();\n+\n+        webDriver.findElement(By.name(\"email\")).sendKeys(userEmail);\n+        webDriver.findElement(By.xpath(\"//input[@value='Send reset password link']\")).click();\n+        assertEquals(\"Instructions Sent\", webDriver.findElement(By.tagName(\"h1\")).getText());\n+\n+        // Check email\n+        assertEquals(receivedEmailSize + 1, simpleSmtpServer.getReceivedEmailSize());\n+        Iterator receivedEmail = simpleSmtpServer.getReceivedEmail();\n+        SmtpMessage message = (SmtpMessage) receivedEmail.next();\n+        receivedEmail.remove();\n+        assertEquals(userEmail, message.getHeaderValue(\"To\"));\n+        assertThat(message.getBody(), containsString(\"Reset your password\"));\n+\n+        assertEquals(\"Please check your email for a reset password link.\", webDriver.findElement(By.cssSelector(\".instructions-sent\")).getText());\n+\n+        // Click link in email\n+        String link = testClient.extractLink(message.getBody());\n+        webDriver.get(link);\n+\n+        // Enter invalid password information\n+        webDriver.findElement(By.name(\"password\")).sendKeys(\"newsecret\");\n+        webDriver.findElement(By.name(\"password_confirmation\")).sendKeys(\"\");\n+        webDriver.findElement(By.xpath(\"//input[@value='Create new password']\")).click();\n+        assertThat(webDriver.findElement(By.cssSelector(\".error-message\")).getText(), containsString(\"Passwords must match and not be empty.\"));\n+\n+        // Successfully choose password\n+        webDriver.findElement(By.name(\"password\")).sendKeys(\"newsecret\");\n+        webDriver.findElement(By.name(\"password_confirmation\")).sendKeys(\"newsecret\");\n+        webDriver.findElement(By.xpath(\"//input[@value='Create new password']\")).click();\n+        assertThat(webDriver.findElement(By.cssSelector(\"h1\")).getText(), containsString(\"Where to?\"));\n+\n+        // Log out and back in with new password\n+        webDriver.findElement(By.xpath(\"//*[text()='\"+userEmail+\"']\")).click();\n+        webDriver.findElement(By.linkText(\"Sign Out\")).click();\n+\n+        webDriver.findElement(By.name(\"username\")).sendKeys(userEmail);\n+        webDriver.findElement(By.name(\"password\")).sendKeys(\"newsecret\");\n+        webDriver.findElement(By.xpath(\"//input[@value='Sign in']\")).click();\n+\n+        assertThat(webDriver.findElement(By.cssSelector(\"h1\")).getText(), containsString(\"Where to?\"));\n+\n+        // Attempt to use same code again\n+        webDriver.findElement(By.xpath(\"//*[text()='\"+userEmail+\"']\")).click();\n+        webDriver.findElement(By.linkText(\"Sign Out\")).click();\n+\n+        webDriver.get(link);\n+\n+        webDriver.findElement(By.name(\"password\")).sendKeys(\"newsecret\");\n+        webDriver.findElement(By.name(\"password_confirmation\")).sendKeys(\"newsecret\");\n+        webDriver.findElement(By.xpath(\"//input[@value='Create new password']\")).click();\n+\n+        assertThat(webDriver.findElement(By.cssSelector(\".error-message\")).getText(), containsString(\"Sorry, your reset password link is no longer valid. You can request another one below.\"));\n+    }\n+\n+    @Test\n+    public void resettingAPasswordForANonExistentUser() throws Exception {\n+        webDriver.get(baseUrl + \"/login\");\n+        assertEquals(\"Cloud Foundry\", webDriver.getTitle());\n+\n+        webDriver.findElement(By.linkText(\"Reset password\")).click();\n+\n+        assertEquals(\"Reset Password\", webDriver.findElement(By.tagName(\"h1\")).getText());\n+\n+        int receivedEmailSize = simpleSmtpServer.getReceivedEmailSize();\n+\n+        webDriver.findElement(By.name(\"email\")).sendKeys(\"nonexistent@example.com\");\n+        webDriver.findElement(By.xpath(\"//input[@value='Send reset password link']\")).click();\n+\n+        assertEquals(\"Instructions Sent\", webDriver.findElement(By.tagName(\"h1\")).getText());\n+\n+        assertEquals(receivedEmailSize, simpleSmtpServer.getReceivedEmailSize());\n+    }\n+}"
        },
        {
            "sha": "81b19e08e00c42b6c203ced90ccc5439f82aa103",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/feature/SamlLoginIT.java",
            "status": "added",
            "additions": 98,
            "deletions": 0,
            "changes": 98,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FSamlLoginIT.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FSamlLoginIT.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FSamlLoginIT.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,98 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.feature;\n+\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n+import static org.springframework.http.MediaType.TEXT_HTML_VALUE;\n+import org.cloudfoundry.identity.uaa.login.test.DefaultIntegrationTestConfig;\n+import org.cloudfoundry.identity.uaa.login.test.IntegrationTestRule;\n+import org.cloudfoundry.identity.uaa.login.test.LoginServerClassRunner;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebDriver;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.web.client.RestOperations;\n+\n+@RunWith(LoginServerClassRunner.class)\n+@ContextConfiguration(classes = DefaultIntegrationTestConfig.class)\n+public class SamlLoginIT {\n+\n+    @Autowired @Rule\n+    public IntegrationTestRule integrationTestRule;\n+\n+    @Autowired\n+    RestOperations restOperations;\n+\n+    @Autowired\n+    WebDriver webDriver;\n+\n+    @Value(\"${integration.test.base_url}\")\n+    String baseUrl;\n+\n+    @Test\n+    public void testSamlVariations() throws Exception {\n+        webDriver.get(baseUrl + \"/login\");\n+        assertEquals(\"Cloud Foundry\", webDriver.getTitle());\n+\n+        webDriver.findElement(By.name(\"username\"));\n+        webDriver.findElement(By.name(\"password\"));\n+        webDriver.findElement(By.xpath(\"//a[text()='Okta Preview 1']\"));\n+        webDriver.findElement(By.xpath(\"//a[text()='Okta Preview 2']\"));\n+        webDriver.findElement(By.xpath(\"//a[text()='Log in with OpenAM']\"));\n+        webDriver.findElement(By.xpath(\"//a[text()='Log in with vCenter SSO']\"));\n+        webDriver.findElement(By.xpath(\"//input[@value='Sign in']\"));\n+        assertEquals(3, webDriver.findElements(By.xpath(\"//input\")).size());\n+    }\n+\n+    @Test\n+    public void testContentTypes() throws Exception {\n+        String loginUrl = baseUrl + \"/login\";\n+\n+        HttpHeaders jsonHeaders = new HttpHeaders();\n+        jsonHeaders.add(\"Accept\", \"application/json\");\n+        ResponseEntity<Map> jsonResponseEntity = restOperations.exchange(loginUrl,\n+            HttpMethod.GET,\n+            new HttpEntity<>(jsonHeaders),\n+            Map.class);\n+        assertThat(jsonResponseEntity.getHeaders().get(\"Content-Type\").get(0), containsString(APPLICATION_JSON_VALUE));\n+\n+        HttpHeaders htmlHeaders = new HttpHeaders();\n+        htmlHeaders.add(\"Accept\", \"text/html\");\n+        ResponseEntity<Void> htmlResponseEntity = restOperations.exchange(loginUrl,\n+            HttpMethod.GET,\n+            new HttpEntity<>(htmlHeaders),\n+            Void.class);\n+        assertThat(htmlResponseEntity.getHeaders().get(\"Content-Type\").get(0), containsString(TEXT_HTML_VALUE));\n+\n+        HttpHeaders defaultHeaders = new HttpHeaders();\n+        defaultHeaders.add(\"Accept\", \"*/*\");\n+        ResponseEntity<Void> defaultResponseEntity = restOperations.exchange(loginUrl,\n+            HttpMethod.GET,\n+            new HttpEntity<>(defaultHeaders),\n+            Void.class);\n+        assertThat(defaultResponseEntity.getHeaders().get(\"Content-Type\").get(0), containsString(TEXT_HTML_VALUE));\n+    }\n+}"
        },
        {
            "sha": "85b342068fb20822862f521573aeba1c8ddb6625",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/feature/XFrameOptionsIT.java",
            "status": "added",
            "additions": 55,
            "deletions": 0,
            "changes": 55,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FXFrameOptionsIT.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FXFrameOptionsIT.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ffeature%2FXFrameOptionsIT.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,55 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.feature;\n+\n+import org.cloudfoundry.identity.uaa.login.test.DefaultIntegrationTestConfig;\n+import org.cloudfoundry.identity.uaa.login.test.IntegrationTestRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.openqa.selenium.WebDriver;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.web.client.RestOperations;\n+\n+import java.util.List;\n+\n+import static org.hamcrest.Matchers.contains;\n+import static org.junit.Assert.assertThat;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(classes = DefaultIntegrationTestConfig.class)\n+public class XFrameOptionsIT {\n+\n+    @Autowired @Rule\n+    public IntegrationTestRule integrationTestRule;\n+\n+    @Autowired\n+    WebDriver webDriver;\n+\n+    @Autowired\n+    RestOperations restOperations;\n+\n+    @Value(\"${integration.test.base_url}\")\n+    String baseUrl;\n+\n+    @Test\n+    public void testHeaderOnLogin() throws Exception {\n+        ResponseEntity<Void> response = restOperations.getForEntity(baseUrl + \"/login\", Void.class);\n+        List<String> xFrameOptionsHeaders = response.getHeaders().get(\"X-Frame-Options\");\n+        assertThat(xFrameOptionsHeaders, contains(\"DENY\"));\n+    }\n+}"
        },
        {
            "sha": "f40d090b9f96708f62847cbe931e3a6699f5ef19",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/saml/IdentityProviderConfiguratorTests.java",
            "status": "added",
            "additions": 210,
            "deletions": 0,
            "changes": 210,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Fsaml%2FIdentityProviderConfiguratorTests.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Fsaml%2FIdentityProviderConfiguratorTests.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Fsaml%2FIdentityProviderConfiguratorTests.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,210 @@\n+/*******************************************************************************\n+ *     Cloud Foundry\n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.saml;\n+\n+import org.apache.commons.httpclient.HttpClient;\n+import org.cloudfoundry.identity.uaa.config.YamlMapFactoryBean;\n+import org.cloudfoundry.identity.uaa.config.YamlProcessor;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.core.io.ByteArrayResource;\n+import org.springframework.core.io.Resource;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Timer;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class IdentityProviderConfiguratorTests {\n+\n+    IdentityProviderConfigurator conf = null;\n+    Map<String, Map<String, Object>>  data = null;\n+\n+    String sampleYaml = \"  providers:\\n\" +\n+        \"    okta-local:\\n\" +\n+        \"      idpMetadata: sample-okta-localhost.xml\\n\" +\n+        \"      nameID: urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\\n\" +\n+        \"      assertionConsumerIndex: 0\\n\" +\n+        \"      metadataTrustCheck: true\\n\" +\n+        \"      showSamlLoginLink: true\\n\" +\n+        \"      linkText: 'Okta Preview 1'\\n\" +\n+        \"      iconUrl: 'http://link.to/icon.jpg'\\n\" +\n+        \"    okta-local-2:\\n\" +\n+        \"      idpMetadata: |\\n\" +\n+        \"        <?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><md:EntityDescriptor xmlns:md=\\\"urn:oasis:names:tc:SAML:2.0:metadata\\\" entityID=\\\"http://www.okta.com/k2lw4l5bPODCMIIDBRYZ\\\"><md:IDPSSODescriptor WantAuthnRequestsSigned=\\\"true\\\" protocolSupportEnumeration=\\\"urn:oasis:names:tc:SAML:2.0:protocol\\\"><md:KeyDescriptor use=\\\"signing\\\"><ds:KeyInfo xmlns:ds=\\\"http://www.w3.org/2000/09/xmldsig#\\\"><ds:X509Data><ds:X509Certificate>MIICmTCCAgKgAwIBAgIGAUPATqmEMA0GCSqGSIb3DQEBBQUAMIGPMQswCQYDVQQGEwJVUzETMBEG\\n\" +\n+        \"        A1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEU\\n\" +\n+        \"        MBIGA1UECwwLU1NPUHJvdmlkZXIxEDAOBgNVBAMMB1Bpdm90YWwxHDAaBgkqhkiG9w0BCQEWDWlu\\n\" +\n+        \"        Zm9Ab2t0YS5jb20wHhcNMTQwMTIzMTgxMjM3WhcNNDQwMTIzMTgxMzM3WjCBjzELMAkGA1UEBhMC\\n\" +\n+        \"        VVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDVNhbiBGcmFuY2lzY28xDTALBgNVBAoM\\n\" +\n+        \"        BE9rdGExFDASBgNVBAsMC1NTT1Byb3ZpZGVyMRAwDgYDVQQDDAdQaXZvdGFsMRwwGgYJKoZIhvcN\\n\" +\n+        \"        AQkBFg1pbmZvQG9rdGEuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCeil67/TLOiTZU\\n\" +\n+        \"        WWgW2XEGgFZ94bVO90v5J1XmcHMwL8v5Z/8qjdZLpGdwI7Ph0CyXMMNklpaR/Ljb8fsls3amdT5O\\n\" +\n+        \"        Bw92Zo8ulcpjw2wuezTwL0eC0wY/GQDAZiXL59npE6U+fH1lbJIq92hx0HJSru/0O1q3+A/+jjZL\\n\" +\n+        \"        3tL/SwIDAQABMA0GCSqGSIb3DQEBBQUAA4GBAI5BoWZoH6Mz9vhypZPOJCEKa/K+biZQsA4Zqsuk\\n\" +\n+        \"        vvphhSERhqk/Nv76Vkl8uvJwwHbQrR9KJx4L3PRkGCG24rix71jEuXVGZUsDNM3CUKnARx4MEab6\\n\" +\n+        \"        GFHNkZ6DmoT/PFagngecHu+EwmuDtaG0rEkFrARwe+d8Ru0BN558abFb</ds:X509Certificate></ds:X509Data></ds:KeyInfo></md:KeyDescriptor><md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</md:NameIDFormat><md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</md:NameIDFormat><md:SingleSignOnService Binding=\\\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\\\" Location=\\\"https://pivotal.oktapreview.com/app/pivotal_pivotalcfstaging_1/k2lw4l5bPODCMIIDBRYZ/sso/saml\\\"/><md:SingleSignOnService Binding=\\\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\\\" Location=\\\"https://pivotal.oktapreview.com/app/pivotal_pivotalcfstaging_1/k2lw4l5bPODCMIIDBRYZ/sso/saml\\\"/></md:IDPSSODescriptor></md:EntityDescriptor>\\n\" +\n+        \"      nameID: urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\\n\" +\n+        \"      assertionConsumerIndex: 0\\n\" +\n+        \"      metadataTrustCheck: true\\n\" +\n+        \"      showSamlLoginLink: true\\n\" +\n+        \"      linkText: 'Okta Preview 2'\\n\" +\n+        \"    vsphere.local:\\n\" +\n+        \"      idpMetadata: https://win2012-sso2.localdomain:7444/websso/SAML2/Metadata/vsphere.local\\n\" +\n+        \"      nameID: urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\\n\" +\n+        \"      assertionConsumerIndex: 1\\n\" +\n+        \"      metadataTrustCheck: false\\n\"+\n+        \"      showSamlLoginLink: false\\n\" +\n+        \"      linkText: 'Log in with vCenter SSO'\\n\" +\n+        \"      iconUrl: 'http://vsphere.local/iconurl.jpg'\\n\" +\n+        \"    openam-local:\\n\" +\n+        \"      idpMetadata: http://localhost:8081/openam/saml2/jsp/exportmetadata.jsp?entityid=http://localhost:8081/openam\\n\" +\n+        \"      nameID: urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\\n\" +\n+        \"      assertionConsumerIndex: 0\\n\" +\n+        \"      signMetaData: false\\n\" +\n+        \"      signRequest: false\\n\" +\n+        \"      showSamlLoginLink: true\\n\" +\n+        \"      linkText: 'Log in with OpenAM'\\n\" +\n+        \"    incomplete-provider:\\n\" +\n+        \"      idpMetadata: http://localhost:8081/openam/saml2/jsp/exportmetadata.jsp?entityid=http://localhost:8081/openam\\n\";\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        conf = new IdentityProviderConfigurator();\n+        parseYaml(sampleYaml);\n+    }\n+\n+    private void parseYaml(String sampleYaml) {\n+        YamlMapFactoryBean factory = new YamlMapFactoryBean();\n+        factory.setResolutionMethod(YamlProcessor.ResolutionMethod.OVERRIDE_AND_IGNORE);\n+        List<Resource> resources = new ArrayList<>();\n+        ByteArrayResource resource = new ByteArrayResource(sampleYaml.getBytes());\n+        resources.add(resource);\n+        factory.setResources(resources.toArray(new Resource[resources.size()]));\n+        Map<String, Object> tmpdata = factory.getObject();\n+        data = new HashMap<>();\n+        for (Map.Entry<String, Object> entry : ((Map<String, Object>)tmpdata.get(\"providers\")).entrySet()) {\n+            data.put(entry.getKey(), (Map<String, Object>)entry.getValue());\n+        }\n+    }\n+\n+    @Test\n+    public void testGetIdentityProviderDefinitions() throws Exception {\n+        testGetIdentityProviderDefinitions(5);\n+    }\n+\n+    protected void testGetIdentityProviderDefinitions(int count) throws Exception {\n+        conf.setIdentityProviders(data);\n+        List<IdentityProviderDefinition> idps = conf.getIdentityProviderDefinitions();\n+        assertEquals(count, idps.size());\n+        for (IdentityProviderDefinition idp : idps) {\n+            switch (idp.getIdpEntityAlias()) {\n+                case \"vsphere.local\" : {\n+                    assertEquals(IdentityProviderDefinition.MetadataLocation.URL, idp.getType());\n+                    assertEquals(\"https://win2012-sso2.localdomain:7444/websso/SAML2/Metadata/vsphere.local\", idp.getMetaDataLocation());\n+                    assertEquals(\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\", idp.getNameID());\n+                    assertEquals(1, idp.getAssertionConsumerIndex());\n+                    assertEquals(\"Log in with vCenter SSO\", idp.getLinkText());\n+                    assertEquals(\"http://vsphere.local/iconurl.jpg\", idp.getIconUrl());\n+                    assertFalse(idp.isShowSamlLink());\n+                    assertFalse(idp.isMetadataTrustCheck());\n+                    assertEquals(\"org.apache.commons.httpclient.contrib.ssl.EasySSLProtocolSocketFactory\", idp.getSocketFactoryClassName());\n+                    break;\n+                }\n+                case \"okta-local\" : {\n+                    assertEquals(IdentityProviderDefinition.MetadataLocation.FILE, idp.getType());\n+                    assertEquals(\"sample-okta-localhost.xml\", idp.getMetaDataLocation());\n+                    assertEquals(\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\", idp.getNameID());\n+                    assertEquals(0, idp.getAssertionConsumerIndex());\n+                    assertEquals(\"Okta Preview 1\", idp.getLinkText());\n+                    assertEquals(\"http://link.to/icon.jpg\", idp.getIconUrl());\n+                    assertTrue(idp.isShowSamlLink());\n+                    assertTrue(idp.isMetadataTrustCheck());\n+                    break;\n+                }\n+                case \"okta-local-2\" : {\n+                    assertEquals(IdentityProviderDefinition.MetadataLocation.DATA, idp.getType());\n+                    assertEquals(\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\", idp.getNameID());\n+                    assertEquals(0, idp.getAssertionConsumerIndex());\n+                    assertEquals(\"Okta Preview 2\", idp.getLinkText());\n+                    assertNull(idp.getIconUrl());\n+                    assertTrue(idp.isShowSamlLink());\n+                    assertTrue(idp.isMetadataTrustCheck());\n+                    break;\n+                }\n+                case \"openam-local\" : {\n+                    assertEquals(IdentityProviderDefinition.MetadataLocation.URL, idp.getType());\n+                    assertEquals(\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\", idp.getNameID());\n+                    assertEquals(0, idp.getAssertionConsumerIndex());\n+                    assertEquals(\"Log in with OpenAM\", idp.getLinkText());\n+                    assertNull(idp.getIconUrl());\n+                    assertTrue(idp.isShowSamlLink());\n+                    assertTrue(idp.isMetadataTrustCheck());\n+                    assertEquals(\"org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory\", idp.getSocketFactoryClassName());\n+                    break;\n+                }\n+                case \"vsphere.local.legacy\" :\n+                    assertEquals(IdentityProviderDefinition.MetadataLocation.URL, idp.getType());\n+                    assertEquals(\"http://win2012-sso2.localdomain:7444/websso/SAML2/Metadata/vsphere.local\", idp.getMetaDataLocation());\n+                    assertEquals(\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\", idp.getNameID());\n+                    assertEquals(0, idp.getAssertionConsumerIndex());\n+                    assertEquals(\"Use your corporate credentials\", idp.getLinkText());\n+                    assertNull(idp.getIconUrl());\n+                    assertTrue(idp.isShowSamlLink());\n+                    assertTrue(idp.isMetadataTrustCheck());\n+                    assertEquals(\"org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory\", idp.getSocketFactoryClassName());\n+                    break;\n+                case \"incomplete-provider\" :\n+                    assertTrue(idp.isShowSamlLink());\n+                    break;\n+                default:\n+                    fail();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testGetIdentityProvidersWithLegacyProvider() throws Exception {\n+        conf.setLegacyIdpMetaData(\"http://win2012-sso2.localdomain:7444/websso/SAML2/Metadata/vsphere.local\");\n+        conf.setLegacyIdpIdentityAlias(\"vsphere.local.legacy\");\n+        conf.setLegacyNameId(\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\");\n+        testGetIdentityProviderDefinitions(6);\n+    }\n+\n+    @Test\n+    public void testGetIdentityProviders() throws Exception {\n+        conf.setLegacyIdpMetaData(\"http://win2012-sso2.localdomain:7444/websso/SAML2/Metadata/vsphere.local\");\n+        conf.setLegacyIdpIdentityAlias(\"vsphere.local.legacy\");\n+        conf.setLegacyNameId(\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\");\n+        conf.setMetadataFetchingHttpClientTimer(new Timer());\n+        conf.setHttpClient(new HttpClient());\n+        testGetIdentityProviderDefinitions(6);\n+        conf.getIdentityProviders();\n+    }\n+\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void testDuplicateAlias() throws Exception {\n+        conf.setLegacyIdpMetaData(\"https://win2012-sso2.localdomain:7444/websso/SAML2/Metadata/vsphere.local\");\n+        conf.setLegacyIdpIdentityAlias(\"vsphere.local\");\n+        conf.setIdentityProviders(data);\n+        conf.getIdentityProviderDefinitions();\n+    }\n+\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "d8356791d5659f7cf9034c3b1d6a15b87eae8c66",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/saml/IdentityProviderDefinitionTests.java",
            "status": "added",
            "additions": 77,
            "deletions": 0,
            "changes": 77,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Fsaml%2FIdentityProviderDefinitionTests.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Fsaml%2FIdentityProviderDefinitionTests.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Fsaml%2FIdentityProviderDefinitionTests.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,77 @@\n+package org.cloudfoundry.identity.uaa.login.saml;\n+\n+import org.apache.commons.httpclient.contrib.ssl.StrictSSLProtocolSocketFactory;\n+import org.junit.Test;\n+\n+import java.io.File;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+public class IdentityProviderDefinitionTests {\n+\n+    @Test\n+    public void testGetType() throws Exception {\n+        IdentityProviderDefinition def = new IdentityProviderDefinition();\n+        def.setMetaDataLocation(\"<?xml>\");\n+        assertEquals(IdentityProviderDefinition.MetadataLocation.DATA, def.getType());\n+        def.setMetaDataLocation(\"https://dadas.dadas.dadas/sdada\");\n+        assertEquals(IdentityProviderDefinition.MetadataLocation.URL, def.getType());\n+        def.setMetaDataLocation(\"http://dadas.dadas.dadas/sdada\");\n+        assertEquals(IdentityProviderDefinition.MetadataLocation.URL, def.getType());\n+        def.setMetaDataLocation(\"sample-okta-localhost.xml\");\n+        assertEquals(IdentityProviderDefinition.MetadataLocation.FILE, def.getType());\n+        File f = new File(System.getProperty(\"java.io.tmpdir\"),IdentityProviderDefinitionTests.class.getName()+\".testcase\");\n+        f.createNewFile();\n+        f.deleteOnExit();\n+        def.setMetaDataLocation(f.getAbsolutePath());\n+        assertEquals(IdentityProviderDefinition.MetadataLocation.FILE, def.getType());\n+        f.delete();\n+        def.setMetaDataLocation(f.getAbsolutePath());\n+        assertEquals(IdentityProviderDefinition.MetadataLocation.UNKNOWN, def.getType());\n+\n+\n+    }\n+\n+    @Test\n+    public void testSetIdpEntityAlias() throws Exception {\n+        IdentityProviderDefinition def = new IdentityProviderDefinition();\n+        def.setIdpEntityAlias(\"testalias\");\n+    }\n+\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testSetNullIdpEntityAlias() throws Exception {\n+        IdentityProviderDefinition def = new IdentityProviderDefinition();\n+        def.setIdpEntityAlias(null);\n+    }\n+\n+    @Test\n+    public void testGetSocketFactoryClassName() throws Exception {\n+        IdentityProviderDefinition def = new IdentityProviderDefinition();\n+        def.setMetaDataLocation(\"https://dadas.dadas.dadas/sdada\");\n+        assertEquals(\"org.apache.commons.httpclient.contrib.ssl.EasySSLProtocolSocketFactory\", def.getSocketFactoryClassName());\n+        def.setMetaDataLocation(\"http://dadas.dadas.dadas/sdada\");\n+        assertEquals(\"org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory\", def.getSocketFactoryClassName());\n+        def.setSocketFactoryClassName(\"\");\n+        assertEquals(\"org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory\", def.getSocketFactoryClassName());\n+        def.setSocketFactoryClassName(null);\n+        assertEquals(\"org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory\", def.getSocketFactoryClassName());\n+        try {\n+            def.setSocketFactoryClassName(\"test.class.that.DoesntExist\");\n+            fail(\"ClassNotFound is expected here\");\n+        } catch (IllegalArgumentException x) {\n+            assertEquals(ClassNotFoundException.class, x.getCause().getClass());\n+        }\n+        try {\n+            def.setSocketFactoryClassName(\"java.lang.Object\");\n+            fail(\"ClassCastException is expected here\");\n+        } catch (IllegalArgumentException x) {\n+            assertEquals(ClassCastException.class, x.getCause().getClass());\n+        }\n+        def.setSocketFactoryClassName(StrictSSLProtocolSocketFactory.class.getName());\n+        assertEquals(StrictSSLProtocolSocketFactory.class.getName(), def.getSocketFactoryClassName());\n+\n+\n+    }\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "53bd0c4c776fc4f7d1abbbfc7c4c8faf36953daf",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/saml/PasscodeMockMvcTests.java",
            "status": "added",
            "additions": 256,
            "deletions": 0,
            "changes": 256,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Fsaml%2FPasscodeMockMvcTests.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Fsaml%2FPasscodeMockMvcTests.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Fsaml%2FPasscodeMockMvcTests.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,256 @@\n+package org.cloudfoundry.identity.uaa.login.saml;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import java.io.IOException;\n+import java.sql.Timestamp;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.http.MediaType.APPLICATION_FORM_URLENCODED;\n+import static org.springframework.http.MediaType.APPLICATION_JSON;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import org.apache.commons.codec.binary.Base64;\n+import org.cloudfoundry.identity.uaa.authentication.Origin;\n+import org.cloudfoundry.identity.uaa.authentication.UaaPrincipal;\n+import org.cloudfoundry.identity.uaa.client.SocialClientUserDetails;\n+import org.cloudfoundry.identity.uaa.codestore.ExpiringCode;\n+import org.cloudfoundry.identity.uaa.config.YamlServletProfileInitializer;\n+import org.cloudfoundry.identity.uaa.login.PasscodeAuthenticationFilter;\n+import org.cloudfoundry.identity.uaa.login.PasscodeInformation;\n+import org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcher;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.env.MockEnvironment;\n+import org.springframework.mock.web.MockHttpSession;\n+import org.springframework.mock.web.MockServletConfig;\n+import org.springframework.mock.web.MockServletContext;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContext;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.providers.ExpiringUsernameAuthenticationToken;\n+import org.springframework.security.web.DefaultSecurityFilterChain;\n+import org.springframework.security.web.FilterChainProxy;\n+import org.springframework.security.web.SecurityFilterChain;\n+import org.springframework.security.web.context.HttpSessionSecurityContextRepository;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.context.support.XmlWebApplicationContext;\n+import org.springframework.web.filter.GenericFilterBean;\n+\n+public class PasscodeMockMvcTests {\n+\n+    private XmlWebApplicationContext webApplicationContext;\n+    private MockMvc mockMvc;\n+    private CaptureSecurityContextFilter captureSecurityContextFilter;\n+\n+    private static String USERNAME = \"marissa@saml.test.pivotal.io\";\n+    private static String PASSWORD = \"foo\";\n+    private static String ALIAS = \"testalias\";\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        webApplicationContext.destroy();\n+    }\n+\n+    @Before\n+    public void setUp() throws Exception {\n+\n+        MockEnvironment environment = new MockEnvironment();\n+        MockServletContext context = new MockServletContext();\n+        MockServletConfig config = new MockServletConfig(context);\n+        config.addInitParameter(\"environmentConfigDefaults\", \"login.yml\");\n+        webApplicationContext = new XmlWebApplicationContext();\n+        webApplicationContext.setServletConfig(config);\n+        webApplicationContext.setEnvironment(environment);\n+        webApplicationContext.setConfigLocation(\"file:./src/main/webapp/WEB-INF/spring-servlet.xml\");\n+        new YamlServletProfileInitializer().initialize(webApplicationContext);\n+        webApplicationContext.refresh();\n+        FilterChainProxy springSecurityFilterChain = (FilterChainProxy)webApplicationContext.getBean(\"org.springframework.security.filterChainProxy\");\n+        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).addFilter(springSecurityFilterChain)\n+            .build();\n+\n+        captureSecurityContextFilter = new CaptureSecurityContextFilter();\n+\n+        List<SecurityFilterChain> chains = springSecurityFilterChain.getFilterChains();\n+        for (SecurityFilterChain chain : chains) {\n+\n+            if (chain instanceof DefaultSecurityFilterChain) {\n+                DefaultSecurityFilterChain dfc = (DefaultSecurityFilterChain)chain;\n+                if (dfc.getRequestMatcher() instanceof UaaRequestMatcher) {\n+                    UaaRequestMatcher matcher = (UaaRequestMatcher)dfc.getRequestMatcher();\n+                    if (matcher.toString().contains(\"passcodeTokenMatcher\")) {\n+                        dfc.getFilters().add(captureSecurityContextFilter);\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+        \n+        RestTemplate restTemplate = mock(RestTemplate.class);\n+        when(\n+            restTemplate.exchange(\n+                anyString(),\n+                eq(HttpMethod.POST),\n+                any(HttpEntity.class),\n+                eq(ExpiringCode.class)\n+            )\n+        ).thenReturn(\n+            new ResponseEntity<>(\n+                new ExpiringCode(\"test\",\n+                    new Timestamp(System.currentTimeMillis()),\n+                    \"data\"),\n+                HttpStatus.CREATED)\n+        );\n+\n+        PasscodeInformation pi = new PasscodeInformation(\"user_id\", \"username\", \"passcode\", Origin.ORIGIN, (Map)null);\n+        when(\n+            restTemplate.exchange(\n+                anyString(),\n+                eq(HttpMethod.GET),\n+                any(HttpEntity.class),\n+                eq(ExpiringCode.class)\n+            )\n+        ).thenReturn(\n+            new ResponseEntity<>(\n+                new ExpiringCode(\"test\",\n+                    new Timestamp(System.currentTimeMillis()),\n+                    new ObjectMapper().writeValueAsString(pi)),\n+                HttpStatus.OK)\n+        );\n+\n+        when(\n+            restTemplate.exchange(\n+                anyString(),\n+                any(HttpMethod.class),\n+                any(HttpEntity.class),\n+                eq(byte[].class)\n+            )\n+        ).thenReturn(\n+            new ResponseEntity<>(\n+                \"{\\\"access_token\\\": test}\".getBytes(),\n+                HttpStatus.OK)\n+        );\n+\n+\n+        PasscodeAuthenticationFilter pcFilter = webApplicationContext.getBean(PasscodeAuthenticationFilter.class);\n+        pcFilter.setAuthorizationTemplate(restTemplate);\n+\n+\n+    }\n+\n+    @Test\n+    public void testLoginUsingPasscodeWithSamlToken() throws Exception {\n+        UaaPrincipal p = new UaaPrincipal(\"123\",\"marissa\",\"marissa@test.org\", Origin.UAA,\"\");\n+        ExpiringUsernameAuthenticationToken et = new ExpiringUsernameAuthenticationToken(USERNAME, null);\n+        LoginSamlAuthenticationToken auth = new LoginSamlAuthenticationToken(et, ALIAS);\n+        final MockSecurityContext mockSecurityContext = new MockSecurityContext(auth);\n+\n+        SecurityContextHolder.setContext(mockSecurityContext);\n+        MockHttpSession session = new MockHttpSession();\n+\n+        session.setAttribute(\n+            HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY,\n+            mockSecurityContext\n+        );\n+\n+        String passcode = \"\";\n+\n+        MockHttpServletRequestBuilder get = get(\"/passcode\")\n+            .accept(APPLICATION_JSON)\n+            .session(session);\n+\n+        mockMvc.perform(get)\n+            .andExpect(status().isOk())\n+            .andExpect(content().string(\"\\\"test\\\"\"));\n+\n+        mockSecurityContext.setAuthentication(null);\n+        session = new MockHttpSession();\n+        session.setAttribute(\n+            HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY,\n+            mockSecurityContext\n+        );\n+\n+        String basicDigestHeaderValue = \"Basic \" + new String(Base64.encodeBase64((\"cf:\").getBytes()));\n+        MockHttpServletRequestBuilder post = post(\"/oauth/token\")\n+            .accept(APPLICATION_JSON)\n+            .contentType(APPLICATION_FORM_URLENCODED)\n+            .header(\"Authorization\", basicDigestHeaderValue)\n+            .param(\"grant_type\", \"password\")\n+            .param(\"passcode\", passcode)\n+            .param(\"response_type\", \"token\")\n+            .session(session);\n+\n+\n+        mockMvc.perform(post)\n+            .andExpect(status().isOk())\n+            .andExpect(content().string(\"{\\\"access_token\\\": test}\"));\n+\n+        Authentication authentication = captureSecurityContextFilter.getAuthentication();\n+        assertNotNull(authentication);\n+        assertTrue(authentication instanceof UsernamePasswordAuthenticationToken);\n+        assertTrue(authentication.getPrincipal() instanceof SocialClientUserDetails);\n+        SocialClientUserDetails details = (SocialClientUserDetails)authentication.getPrincipal();\n+        assertEquals(Origin.ORIGIN, details.getSource());\n+\n+    }\n+\n+    public static class MockSecurityContext implements SecurityContext {\n+\n+        private static final long serialVersionUID = -1386535243513362694L;\n+\n+        private Authentication authentication;\n+\n+        public MockSecurityContext(Authentication authentication) {\n+            this.authentication = authentication;\n+        }\n+\n+        @Override\n+        public Authentication getAuthentication() {\n+            return this.authentication;\n+        }\n+\n+        @Override\n+        public void setAuthentication(Authentication authentication) {\n+            this.authentication = authentication;\n+        }\n+    }\n+    \n+    public static class CaptureSecurityContextFilter extends GenericFilterBean {\n+\n+        private Authentication authentication;\n+\n+        public Authentication getAuthentication() {\n+            return authentication;\n+        }\n+\n+        @Override\n+        public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n+            authentication = SecurityContextHolder.getContext().getAuthentication();\n+            chain.doFilter(request, response);\n+        }\n+    }\n+\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "05feb03d0316f880ef48290b817c6e502c90d057",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/test/DefaultIntegrationTestConfig.java",
            "status": "added",
            "additions": 90,
            "deletions": 0,
            "changes": 90,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FDefaultIntegrationTestConfig.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FDefaultIntegrationTestConfig.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FDefaultIntegrationTestConfig.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,90 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.test;\n+\n+import org.cloudfoundry.identity.uaa.test.UaaTestAccounts;\n+import org.openqa.selenium.Dimension;\n+import org.openqa.selenium.phantomjs.PhantomJSDriver;\n+import org.openqa.selenium.remote.DesiredCapabilities;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;\n+import org.springframework.core.env.Environment;\n+import org.springframework.http.client.SimpleClientHttpRequestFactory;\n+import org.springframework.security.oauth2.client.test.TestAccounts;\n+import org.springframework.web.client.RestTemplate;\n+\n+import com.dumbster.smtp.SimpleSmtpServer;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.util.concurrent.TimeUnit;\n+\n+@Configuration\n+@PropertySource(\"classpath:integration.test.properties\")\n+public class DefaultIntegrationTestConfig {\n+\n+    @Bean\n+    public IntegrationTestRule integrationTestRule(@Value(\"${integration.test.uaa_url}\") String baseUrl, Environment environment) {\n+        boolean forceIntegrationTests = environment.getProperty(\"forceIntegrationTests\") != null;\n+        return new IntegrationTestRule(baseUrl, forceIntegrationTests);\n+    }\n+\n+    @Bean\n+    public static PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer() {\n+        return new PropertySourcesPlaceholderConfigurer();\n+    }\n+\n+    @Bean(destroyMethod = \"quit\")\n+    public PhantomJSDriver webDriver() {\n+        DesiredCapabilities desiredCapabilities = new DesiredCapabilities();\n+        PhantomJSDriver driver = new PhantomJSDriver(desiredCapabilities);\n+        driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);\n+        driver.manage().timeouts().pageLoadTimeout(10, TimeUnit.SECONDS);\n+        driver.manage().timeouts().setScriptTimeout(5, TimeUnit.SECONDS);\n+        driver.manage().window().setSize(new Dimension(1024, 768));\n+        return driver;\n+    }\n+\n+    @Bean(destroyMethod = \"stop\")\n+    public SimpleSmtpServer simpleSmtpServer(@Value(\"${smtp.port}\") int port) {\n+        return SimpleSmtpServer.start(port);\n+    }\n+\n+    @Bean\n+    public RestTemplate restTemplate() {\n+        return new RestTemplate();\n+    }\n+\n+    @Bean\n+    public TestClient testClient(RestTemplate restTemplate,\n+                                 @Value(\"${integration.test.uaa_url}\") String baseUrl,\n+                                 @Value(\"${integration.test.uaa_url}\") String uaaUrl) {\n+        return new TestClient(restTemplate, baseUrl, uaaUrl);\n+    }\n+    \n+    @Bean\n+    public TestAccounts testAccounts(@Value(\"${integration.test.uaa_url}\") String uaaUrl) {\n+        //TODO - actually USE the URL?\n+        return UaaTestAccounts.standard(null);\n+    }\n+\n+    public static class HttpClientFactory extends SimpleClientHttpRequestFactory {\n+        protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException {\n+            super.prepareConnection(connection, httpMethod);\n+            connection.setInstanceFollowRedirects(false);\n+        }\n+    }\n+}"
        },
        {
            "sha": "2d2297778be7c18794dd38aae5ec27abe474f7f3",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/test/DefaultTestConfig.java",
            "status": "added",
            "additions": 25,
            "deletions": 0,
            "changes": 25,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FDefaultTestConfig.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FDefaultTestConfig.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FDefaultTestConfig.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,25 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.test;\n+\n+import org.cloudfoundry.identity.uaa.login.LoginServerConfig;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.ImportResource;\n+\n+@Configuration\n+@ImportResource(\"file:./src/main/webapp/WEB-INF/spring-servlet.xml\")\n+@Import(LoginServerConfig.class)\n+public class DefaultTestConfig {\n+    // empty java config allows autowired fields in tests without alterations to spring-servlet.xml\n+}"
        },
        {
            "sha": "2ea6b423426c3fc7715c8519490aa5efd594a630",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/test/DefaultTestConfigContextLoader.java",
            "status": "added",
            "additions": 22,
            "deletions": 0,
            "changes": 22,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FDefaultTestConfigContextLoader.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FDefaultTestConfigContextLoader.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FDefaultTestConfigContextLoader.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,22 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.test;\n+\n+import org.cloudfoundry.identity.uaa.test.IntegrationTestContextLoader;\n+\n+public class DefaultTestConfigContextLoader extends IntegrationTestContextLoader {\n+\n+    protected String environmentConfigDefaults() {\n+        return \"login.yml\";\n+    }\n+}"
        },
        {
            "sha": "b5c67de584c6739459b9443abeb92327bc5a1bac",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/test/FakeJavaMailSender.java",
            "status": "added",
            "additions": 107,
            "deletions": 0,
            "changes": 107,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FFakeJavaMailSender.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FFakeJavaMailSender.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FFakeJavaMailSender.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,107 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.test;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.springframework.mail.MailException;\n+import org.springframework.mail.SimpleMailMessage;\n+import org.springframework.mail.javamail.JavaMailSender;\n+import org.springframework.mail.javamail.MimeMessagePreparator;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.Session;\n+import javax.mail.internet.MimeMessage;\n+\n+public class FakeJavaMailSender implements JavaMailSender {\n+\n+    private final Session session;\n+    private final ArrayList<MimeMessageWrapper> sentMessages;\n+\n+    public FakeJavaMailSender() {\n+        session = Session.getInstance(new Properties());\n+        sentMessages = new ArrayList<>();\n+    }\n+\n+    @Override\n+    public MimeMessage createMimeMessage() {\n+        return new MimeMessage(session);\n+    }\n+\n+    @Override\n+    public MimeMessage createMimeMessage(InputStream inputStream)  {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void send(MimeMessage mimeMessage) throws MailException {\n+        sentMessages.add(new MimeMessageWrapper(mimeMessage));\n+    }\n+\n+    @Override\n+    public void send(MimeMessage[] mimeMessages) throws MailException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void send(MimeMessagePreparator mimeMessagePreparator) throws MailException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void send(MimeMessagePreparator[] mimeMessagePreparators) throws MailException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void send(SimpleMailMessage simpleMailMessage) throws MailException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void send(SimpleMailMessage[] simpleMailMessages) throws MailException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public ArrayList<MimeMessageWrapper> getSentMessages() {\n+        return sentMessages;\n+    }\n+\n+    public static class MimeMessageWrapper {\n+        private final MimeMessage mimeMessage;\n+\n+        public MimeMessageWrapper(MimeMessage mimeMessage) {\n+\n+            this.mimeMessage = mimeMessage;\n+        }\n+\n+        public List<Address> getRecipients(Message.RecipientType recipientType) throws MessagingException {\n+            return Arrays.asList(mimeMessage.getRecipients(recipientType));\n+        }\n+\n+        public List<Address> getFrom() throws MessagingException {\n+            return Arrays.asList(mimeMessage.getFrom());\n+        }\n+\n+        public String getContentString() throws MessagingException, IOException {\n+            return IOUtils.toString(mimeMessage.getDataHandler().getInputStream());\n+        }\n+    }\n+}"
        },
        {
            "sha": "298fe7643528e83179fa38425b9dda23cba0ccca",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/test/IfProfileActive.java",
            "status": "added",
            "additions": 21,
            "deletions": 0,
            "changes": 21,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FIfProfileActive.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FIfProfileActive.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FIfProfileActive.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,21 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.test;\n+\n+@java.lang.annotation.Documented\n+@java.lang.annotation.Inherited\n+@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)\n+@java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.METHOD})\n+public @interface IfProfileActive {\n+    java.lang.String value() default \"\";\n+}"
        },
        {
            "sha": "e195101270dd6c7e9b6c89396e75086c6614913c",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/test/IntegrationTestRule.java",
            "status": "added",
            "additions": 72,
            "deletions": 0,
            "changes": 72,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FIntegrationTestRule.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FIntegrationTestRule.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FIntegrationTestRule.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,72 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.test;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.junit.Assume;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+import org.springframework.web.util.UriComponents;\n+import org.springframework.web.util.UriComponentsBuilder;\n+\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class IntegrationTestRule implements TestRule {\n+    private static Log logger = LogFactory.getLog(IntegrationTestRule.class);\n+\n+    private static Map<String,Boolean> sharedStatuses = new HashMap<>();\n+\n+    private final String baseUrl;\n+    private final boolean forceIntegrationTests;\n+\n+    public IntegrationTestRule(String baseUrl, boolean forceIntegrationTests) {\n+        this.baseUrl = baseUrl;\n+        this.forceIntegrationTests = forceIntegrationTests;\n+    }\n+\n+    @Override\n+    public Statement apply(Statement statement, Description description) {\n+        Assume.assumeTrue(\"Test ignored as the server cannot be reached at \" + baseUrl, forceIntegrationTests || getStatus());\n+        return statement;\n+    }\n+\n+    private synchronized Boolean getStatus() {\n+        Boolean available = sharedStatuses.get(baseUrl);\n+        if (available == null) {\n+            available = connectionAvailable();\n+            sharedStatuses.put(baseUrl, available);\n+        }\n+        return available;\n+    }\n+\n+    private boolean connectionAvailable() {\n+        UriComponents components = UriComponentsBuilder.fromHttpUrl(baseUrl).build();\n+        String host = components.getHost();\n+        int port = components.getPort();\n+\n+        logger.info(\"Testing connectivity for \" + baseUrl);\n+        try (Socket socket = new Socket(host, port)) {\n+            logger.info(\"Connectivity test succeeded for \" + baseUrl);\n+            return true;\n+\n+        } catch (IOException e) {\n+            logger.warn(\"Connectivity test failed for \" + baseUrl, e);\n+            return false;\n+        }\n+    }\n+}"
        },
        {
            "sha": "3b5a13b5ff2098bd460036bded4efa8a327b5425",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/test/LoginServerClassRunner.java",
            "status": "added",
            "additions": 47,
            "deletions": 0,
            "changes": 47,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FLoginServerClassRunner.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FLoginServerClassRunner.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FLoginServerClassRunner.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,47 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.test;\n+\n+import org.junit.runner.Description;\n+import org.junit.runner.notification.RunNotifier;\n+import org.junit.runners.model.FrameworkMethod;\n+import org.junit.runners.model.InitializationError;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+public class LoginServerClassRunner extends SpringJUnit4ClassRunner {\n+    public LoginServerClassRunner(Class<?> clazz) throws InitializationError {\n+        super(clazz);\n+    }\n+\n+    @Override\n+    public Description getDescription() {\n+        if (!ProfileActiveUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {\n+            return Description.createSuiteDescription(getTestClass().getJavaClass());\n+        }\n+        return super.getDescription();\n+    }\n+\n+    @Override\n+    public void run(RunNotifier notifier) {\n+        if (!ProfileActiveUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {\n+            notifier.fireTestIgnored(getDescription());\n+            return;\n+        }\n+        super.run(notifier);\n+    }\n+\n+    @Override\n+    protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {\n+        return super.isTestMethodIgnored(frameworkMethod) || !ProfileActiveUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass());\n+    }\n+}"
        },
        {
            "sha": "ad7c36e83fc994066ee6a4148dca51b1c762bf33",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/test/MockMvcTestClient.java",
            "status": "added",
            "additions": 58,
            "deletions": 0,
            "changes": 58,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FMockMvcTestClient.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FMockMvcTestClient.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FMockMvcTestClient.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,58 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.test;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.codehaus.jackson.annotate.JsonIgnoreProperties;\n+import org.codehaus.jackson.annotate.JsonProperty;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;\n+\n+public class MockMvcTestClient {\n+\n+    private MockMvc mockMvc;\n+    private final ObjectMapper objectMapper;\n+\n+    public MockMvcTestClient(MockMvc mockMvc) {\n+        this.mockMvc = mockMvc;\n+        objectMapper = new ObjectMapper();\n+    }\n+\n+    public String getOAuthAccessToken(String username, String password, String grantType, String scope)\n+                    throws Exception {\n+        String basicDigestHeaderValue = \"Basic \"\n+                        + new String(Base64.encodeBase64((username + \":\" + password).getBytes()));\n+        MockHttpServletRequestBuilder oauthTokenPost = post(\"/oauth/token\")\n+                        .header(\"Authorization\", basicDigestHeaderValue)\n+                        .param(\"grant_type\", grantType)\n+                        .param(\"client_id\", username)\n+                        .param(\"scope\", scope);\n+        MvcResult result = mockMvc.perform(oauthTokenPost).andExpect(status().isOk()).andReturn();\n+        OAuthToken oauthToken = objectMapper.readValue(result.getResponse().getContentAsByteArray(), OAuthToken.class);\n+        return oauthToken.accessToken;\n+    }\n+\n+    @JsonIgnoreProperties(ignoreUnknown = true)\n+    public static class OAuthToken {\n+        @JsonProperty(\"access_token\")\n+        public String accessToken;\n+\n+        public OAuthToken() {\n+        }\n+    }\n+}"
        },
        {
            "sha": "996dd2f7aac3d3d1f711c8500e8c2e05b7caf68b",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/test/ProfileActiveUtils.java",
            "status": "added",
            "additions": 67,
            "deletions": 0,
            "changes": 67,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FProfileActiveUtils.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FProfileActiveUtils.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FProfileActiveUtils.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,67 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.test;\n+\n+import org.springframework.core.annotation.AnnotationUtils;\n+import org.springframework.test.annotation.ProfileValueSource;\n+import org.springframework.test.annotation.ProfileValueUtils;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class ProfileActiveUtils {\n+    public static boolean isTestEnabledInThisEnvironment(Class<?> testClass) {\n+        IfProfileActive ifProfileActive = AnnotationUtils.findAnnotation(testClass, IfProfileActive.class);\n+        UnlessProfileActive unlessProfileActive = AnnotationUtils.findAnnotation(testClass, UnlessProfileActive.class);\n+        return isTestEnabledInThisEnvironment(ProfileValueUtils.retrieveProfileValueSource(testClass), ifProfileActive, unlessProfileActive);\n+    }\n+\n+    private static boolean isTestEnabledInThisEnvironment(ProfileValueSource profileValueSource, IfProfileActive ifProfileActive, UnlessProfileActive unlessProfileActive) {\n+        if (ifProfileActive == null && unlessProfileActive == null) {\n+            return true;\n+        }\n+\n+        List<String> blacklist = getBlacklist(unlessProfileActive);\n+        Set<String> activeProfiles = StringUtils.commaDelimitedListToSet(profileValueSource.get(\"spring.profiles.active\"));\n+\n+        boolean enabled = true;\n+        if (ifProfileActive != null && StringUtils.hasText(ifProfileActive.value())) {\n+            enabled = activeProfiles.contains(ifProfileActive.value());\n+        }\n+        for (String profile : blacklist) {\n+            if (activeProfiles.contains(profile)) {\n+                enabled = false;\n+                continue;\n+            }\n+        }\n+\n+        return enabled;\n+    }\n+\n+    private static List<String> getBlacklist(UnlessProfileActive unlessProfileActive) {\n+        List<String> blacklist = new ArrayList<String>();\n+        if (unlessProfileActive != null) {\n+            if (StringUtils.hasText(unlessProfileActive.value())) {\n+                blacklist.add(unlessProfileActive.value());\n+            }\n+            if (unlessProfileActive.values() != null) {\n+                for (String s : unlessProfileActive.values()) {\n+                    blacklist.add(s);\n+                }\n+            }\n+        }\n+        return blacklist;\n+    }\n+}"
        },
        {
            "sha": "c3d7d36f4fdc2972c346f0868504a73a67e67914",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/test/TestClient.java",
            "status": "added",
            "additions": 115,
            "deletions": 0,
            "changes": 115,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FTestClient.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FTestClient.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FTestClient.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,115 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.test;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.junit.Assert;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.util.HtmlUtils;\n+\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class TestClient {\n+\n+    private final RestTemplate restTemplate;\n+    private final String baseUrl;\n+    private final String uaaUrl;\n+\n+    public TestClient(RestTemplate restTemplate, String baseUrl, String uaaUrl ) {\n+        this.restTemplate = restTemplate;\n+        this.baseUrl = baseUrl;\n+        this.uaaUrl = uaaUrl;\n+    }\n+\n+    public String getBasicAuthHeaderValue(String username, String password) {\n+        return \"Basic \" + new String(Base64.encodeBase64((username + \":\" + password).getBytes()));\n+    }\n+\n+    public String getOAuthAccessToken(String username, String password, String grantType, String scope) {\n+        HttpHeaders headers = new HttpHeaders();\n+        headers.add(\"Authorization\", getBasicAuthHeaderValue(username, password));\n+\n+        MultiValueMap<String, String> postParameters = new LinkedMultiValueMap<String, String>();\n+        postParameters.add(\"grant_type\", grantType);\n+        postParameters.add(\"client_id\", username);\n+        postParameters.add(\"scope\", scope);\n+\n+        HttpEntity<MultiValueMap<String, String>> requestEntity = new HttpEntity<MultiValueMap<String, String>>(postParameters, headers);\n+\n+        ResponseEntity<Map> exchange = restTemplate.exchange(baseUrl + \"/oauth/token\", HttpMethod.POST, requestEntity, Map.class);\n+\n+        return exchange.getBody().get(\"access_token\").toString();\n+    }\n+\n+    public void createScimClient(String adminAccessToken, String clientId) throws Exception {\n+        restfulCreate(\n+                adminAccessToken,\n+                \"{\" +\n+                        \"\\\"scope\\\":[\\\"uaa.none\\\"],\" +\n+                        \"\\\"client_id\\\":\\\"\" + clientId + \"\\\",\" +\n+                        \"\\\"client_secret\\\":\\\"scimsecret\\\",\" +\n+                        \"\\\"resource_ids\\\":[\\\"oauth\\\"],\" +\n+                        \"\\\"authorized_grant_types\\\":[\\\"client_credentials\\\"],\" +\n+                        \"\\\"authorities\\\":[\\\"password.write\\\",\\\"scim.write\\\",\\\"scim.read\\\",\\\"oauth.approvals\\\"]\" +\n+                        \"}\",\n+                uaaUrl + \"/oauth/clients\"\n+        );\n+    }\n+\n+    public void createUser(String scimAccessToken, String userName, String email, String password, Boolean verified) throws Exception {\n+\n+        restfulCreate(\n+                scimAccessToken,\n+                \"{\" +\n+                        \"\\\"meta\\\":{\\\"version\\\":0,\\\"created\\\":\\\"2014-03-24T18:01:24.584Z\\\"},\" +\n+                        \"\\\"userName\\\":\\\"\" + userName + \"\\\",\" +\n+                        \"\\\"name\\\":{\\\"formatted\\\":\\\"Joe User\\\",\\\"familyName\\\":\\\"User\\\",\\\"givenName\\\":\\\"Joe\\\"},\" +\n+                        \"\\\"emails\\\":[{\\\"value\\\":\\\"\" + email + \"\\\"}],\" +\n+                        \"\\\"password\\\":\\\"\" + password + \"\\\",\" +\n+                        \"\\\"active\\\":true,\" +\n+                        \"\\\"verified\\\":\" + verified + \",\" +\n+                        \"\\\"schemas\\\":[\\\"urn:scim:schemas:core:1.0\\\"]\" +\n+                        \"}\",\n+                uaaUrl + \"/Users\"\n+        );\n+    }\n+\n+    private void restfulCreate(String adminAccessToken, String json, String url) {\n+        HttpHeaders headers = new HttpHeaders();\n+        headers.add(\"Authorization\", \"Bearer \" + adminAccessToken);\n+        headers.add(\"Accept\", \"application/json\");\n+        headers.add(\"Content-Type\", \"application/json\");\n+\n+        HttpEntity<String> requestEntity = new HttpEntity<String>(json, headers);\n+        ResponseEntity<Void> exchange = restTemplate.exchange(url, HttpMethod.POST, requestEntity, Void.class);\n+        Assert.assertEquals(HttpStatus.CREATED, exchange.getStatusCode());\n+    }\n+\n+\n+    public String extractLink(String messageBody) {\n+        Pattern linkPattern = Pattern.compile(\"<a href=\\\"(.*?)\\\">.*?</a>\");\n+        Matcher matcher = linkPattern.matcher(messageBody);\n+        matcher.find();\n+        String encodedLink = matcher.group(1);\n+        return HtmlUtils.htmlUnescape(encodedLink);\n+    }\n+}"
        },
        {
            "sha": "89cd504e1e58bcc6ac1d8e83a4183daaebf61018",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/test/ThymeleafConfig.java",
            "status": "added",
            "additions": 85,
            "deletions": 0,
            "changes": 85,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FThymeleafConfig.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FThymeleafConfig.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FThymeleafConfig.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,85 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.test;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.thymeleaf.dialect.IDialect;\n+import org.thymeleaf.extras.springsecurity3.dialect.SpringSecurityDialect;\n+import org.thymeleaf.spring4.SpringTemplateEngine;\n+import org.thymeleaf.spring4.resourceresolver.SpringResourceResourceResolver;\n+import org.thymeleaf.spring4.view.ThymeleafViewResolver;\n+import org.thymeleaf.templateresolver.TemplateResolver;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import nz.net.ultraq.thymeleaf.LayoutDialect;\n+\n+@Configuration\n+public class ThymeleafConfig {\n+\n+    @Bean\n+    public ThymeleafViewResolver thymeleafViewResolver() {\n+        ThymeleafViewResolver viewResolver = new ThymeleafViewResolver();\n+        viewResolver.setTemplateEngine(webTemplateEngine());\n+        return viewResolver;\n+    }\n+\n+    @Bean\n+    public SpringTemplateEngine webTemplateEngine() {\n+        SpringTemplateEngine springTemplateEngine = new SpringTemplateEngine();\n+\n+        springTemplateEngine.setTemplateResolver(webTemplateResolver());\n+\n+        Set<IDialect> additionalDialects = new HashSet<IDialect>();\n+        additionalDialects.add(new LayoutDialect());\n+        additionalDialects.add(new SpringSecurityDialect());\n+        springTemplateEngine.setAdditionalDialects(additionalDialects);\n+\n+        return springTemplateEngine;\n+    }\n+\n+    @Bean\n+    public TemplateResolver webTemplateResolver() {\n+        TemplateResolver templateResolver = baseHtmlTemplateResolver();\n+        templateResolver.setPrefix(\"classpath:/templates/web/\");\n+        return templateResolver;\n+    }\n+\n+    @Bean\n+    public SpringTemplateEngine mailTemplateEngine() {\n+        SpringTemplateEngine springTemplateEngine = new SpringTemplateEngine();\n+        springTemplateEngine.setTemplateResolver(mailTemplateResolver());\n+        return springTemplateEngine;\n+    }\n+\n+    @Bean\n+    public TemplateResolver mailTemplateResolver() {\n+        TemplateResolver templateResolver = baseHtmlTemplateResolver();\n+        templateResolver.setPrefix(\"classpath:/templates/mail/\");\n+        return templateResolver;\n+    }\n+\n+    private TemplateResolver baseHtmlTemplateResolver() {\n+        TemplateResolver templateResolver = new TemplateResolver();\n+        templateResolver.setResourceResolver(springResourceResourceResolver());\n+        templateResolver.setSuffix(\".html\");\n+        templateResolver.setTemplateMode(\"HTML5\");\n+        return templateResolver;\n+    }\n+\n+    @Bean\n+    public SpringResourceResourceResolver springResourceResourceResolver() {\n+        return new SpringResourceResourceResolver();\n+    }\n+}"
        },
        {
            "sha": "93614b17a8e52bee414f759ed74d3a59ca0c2b78",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/test/UaaRestTemplateBeanFactoryPostProcessor.java",
            "status": "added",
            "additions": 22,
            "deletions": 0,
            "changes": 22,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FUaaRestTemplateBeanFactoryPostProcessor.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FUaaRestTemplateBeanFactoryPostProcessor.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FUaaRestTemplateBeanFactoryPostProcessor.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,22 @@\n+package org.cloudfoundry.identity.uaa.login.test;\n+\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.beans.factory.config.BeanFactoryPostProcessor;\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n+import org.springframework.web.client.RestTemplate;\n+\n+public class UaaRestTemplateBeanFactoryPostProcessor implements BeanFactoryPostProcessor {\n+\n+    /*\n+     * Replaces the authorizationTemplate with a standard RestTemplate for\n+     * compatibility with MockRestServiceServer\n+     */\n+\n+    @Override\n+    public void postProcessBeanFactory(ConfigurableListableBeanFactory configurableListableBeanFactory) throws BeansException {\n+        BeanDefinition beanDefinition = configurableListableBeanFactory.getBeanDefinition(\"authorizationTemplate\");\n+        beanDefinition.setBeanClassName(RestTemplate.class.getCanonicalName());\n+        beanDefinition.getConstructorArgumentValues().clear();\n+    }\n+}"
        },
        {
            "sha": "42ea9be242a3947b37b6528ce56e4c0346edb91f",
            "filename": "login/src/test/java/org/cloudfoundry/identity/uaa/login/test/UnlessProfileActive.java",
            "status": "added",
            "additions": 22,
            "deletions": 0,
            "changes": 22,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FUnlessProfileActive.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FUnlessProfileActive.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2Ftest%2FUnlessProfileActive.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,22 @@\n+/*******************************************************************************\n+ *     Cloud Foundry \n+ *     Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ *******************************************************************************/\n+package org.cloudfoundry.identity.uaa.login.test;\n+\n+@java.lang.annotation.Documented\n+@java.lang.annotation.Inherited\n+@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)\n+@java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.METHOD})\n+public @interface UnlessProfileActive {\n+    java.lang.String value() default \"\";\n+    java.lang.String[] values() default {};\n+}"
        },
        {
            "sha": "8713165175424280329497b48d6791e471e8238a",
            "filename": "login/src/test/java/org/cloudfoundry/identity/web/PromptTest.java",
            "status": "added",
            "additions": 17,
            "deletions": 0,
            "changes": 17,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fweb%2FPromptTest.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fweb%2FPromptTest.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fweb%2FPromptTest.java?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,17 @@\n+package org.cloudfoundry.identity.web;\n+\n+import static org.hamcrest.Matchers.arrayContaining;\n+import static org.hamcrest.Matchers.is;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class PromptTest {\n+\n+    @Test\n+    public void testPrompt() throws Exception {\n+        Prompt prompt = new Prompt(\"username\", \"text\", \"Username\");\n+        Assert.assertThat(prompt.getName(), is(\"username\"));\n+        Assert.assertThat(prompt.getDetails(), arrayContaining(\"text\", \"Username\"));\n+    }\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "3f1676e85fd51f4e07a87b6177f3c4596495a7b4",
            "filename": "settings.gradle",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/settings.gradle",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/settings.gradle",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/settings.gradle?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -1,13 +1,15 @@\n rootProject.name = 'cloudfoundry-identity-parent'\n include ':cloudfoundry-identity-common'\n include ':cloudfoundry-identity-scim'\n+include ':cloudfoundry-identity-login'\n include ':cloudfoundry-identity-uaa'\n include ':cloudfoundry-identity-samples:cloudfoundry-identity-api'\n include ':cloudfoundry-identity-samples:cloudfoundry-identity-app'\n include ':cloudfoundry-identity-samples'\n \n project(':cloudfoundry-identity-common').projectDir = \"$rootDir/common\" as File\n project(':cloudfoundry-identity-scim').projectDir = \"$rootDir/scim\" as File\n+project(':cloudfoundry-identity-login').projectDir = \"$rootDir/login\" as File\n project(':cloudfoundry-identity-uaa').projectDir = \"$rootDir/uaa\" as File\n project(':cloudfoundry-identity-samples:cloudfoundry-identity-api').projectDir = \"$rootDir/samples/api\" as File\n project(':cloudfoundry-identity-samples:cloudfoundry-identity-app').projectDir = \"$rootDir/samples/app\" as File"
        },
        {
            "sha": "a92c2885567da3c1b09fc9fa949b220de4362cc3",
            "filename": "uaa/build.gradle",
            "status": "modified",
            "additions": 7,
            "deletions": 3,
            "changes": 10,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fbuild.gradle",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fbuild.gradle",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fbuild.gradle?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -1,5 +1,6 @@\n Project identityCommon = parent.subprojects.find { it.name.equals('cloudfoundry-identity-common') }\n Project identityScim = parent.subprojects.find { it.name.equals('cloudfoundry-identity-scim') }\n+Project identityLogin = parent.subprojects.find { it.name.equals('cloudfoundry-identity-login') }\n \n apply plugin: 'war'\n \n@@ -28,6 +29,7 @@ description = 'UAA'\n dependencies {\n   compile identityCommon\n   compile identityScim\n+  compile identityLogin\n   compile group: 'cglib', name: 'cglib', version:'2.2.2'\n   runtime group: 'org.springframework.security', name: 'spring-security-config', version:parent.springSecurityVersion\n   runtime group: 'org.springframework.security', name: 'spring-security-jwt', version:'1.0.1.RELEASE'\n@@ -56,9 +58,9 @@ dependencies {\n }\n \n test {\n-  dependsOn identityCommon.instrumentedJar, identityScim.instrumentedJar\n-\n+  dependsOn identityCommon.instrumentedJar, identityScim.instrumentedJar, identityLogin.instrumentedJar\n   exclude 'org/cloudfoundry/identity/uaa/integration/*.class'\n+  exclude '**/*IT.class'\n }\n \n task integrationTest(type: Test) {\n@@ -68,12 +70,14 @@ task integrationTest(type: Test) {\n \n   filter {\n     includeTestsMatching \"org.cloudfoundry.identity.uaa.integration.*\"\n+    includeTestsMatching \"*IT\"\n   }\n }\n \n task instrumentedWar(type: War, dependsOn: instrument) {\n   dependsOn identityCommon.tasks.findByName('instrumentedJar'),\n-            identityScim.tasks.findByName('instrumentedJar')\n+            identityScim.tasks.findByName('instrumentedJar'),\n+            identityLogin.tasks.findByName('instrumentedJar')\n \n   destinationDir = file(\"$buildDir/instrumented_libs\")\n   classpath = war.classpath"
        },
        {
            "sha": "76ea0854742ad6ffb55cfb2d8aa5b5bb4c6b5ce4",
            "filename": "uaa/src/main/webapp/WEB-INF/spring-servlet.xml",
            "status": "modified",
            "additions": 28,
            "deletions": 34,
            "changes": 62,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fspring-servlet.xml",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fspring-servlet.xml",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fspring-servlet.xml?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -40,6 +40,17 @@\n     <sec:http pattern=\"/info\" security=\"none\" />\n     <sec:http pattern=\"/password/**\" security=\"none\" />\n     <sec:http pattern=\"/healthz/**\" security=\"none\" />\n+    <sec:http pattern=\"/saml/web/**\" security=\"none\" />\n+    <sec:http pattern=\"/vendor/**\" security=\"none\" />\n+    <!--<sec:http pattern=\"/login\" security=\"none\" />-->\n+    <sec:http pattern=\"/error\" security=\"none\" />\n+    <sec:http pattern=\"/forgot_password*\" security=\"none\" />\n+    <sec:http pattern=\"/reset_password\" security=\"none\" />\n+    <sec:http pattern=\"/email_sent\" security=\"none\" />\n+    <sec:http pattern=\"/create_account*\" security=\"none\" />\n+    <sec:http pattern=\"/accounts/email_sent\" security=\"none\" />\n+\n+    <bean id=\"xFrameOptionsFilter\" class=\"org.cloudfoundry.identity.uaa.login.XFrameOptionsFilter\" />\n \n     <bean class=\"org.cloudfoundry.identity.uaa.security.web.SecurityFilterChainPostProcessor\">\n         <property name=\"requireHttps\" value=\"${require_https:false}\" />\n@@ -74,8 +85,13 @@\n     <import resource=\"spring/password-endpoints.xml\" />\n     <import resource=\"spring/codestore-endpoints.xml\" />\n \n-    <bean id=\"messageSource\" class=\"org.springframework.context.support.ResourceBundleMessageSource\">\n-        <property name=\"basename\" value=\"messages\" />\n+    <bean id=\"messageSource\" class=\"org.springframework.context.support.ReloadableResourceBundleMessageSource\">\n+      <property name=\"basenames\">\n+        <list>\n+          <value>#{systemEnvironment['CLOUD_FOUNDRY_CONFIG_PATH']!=null ? 'file:'+systemEnvironment['CLOUD_FOUNDRY_CONFIG_PATH']+'/messages':'classpath:messages'}</value>\n+          <value>classpath:messages</value>\n+        </list>\n+      </property>\n     </bean>\n \n     <authentication-manager id=\"emptyAuthenticationManager\" xmlns=\"http://www.springframework.org/schema/security\" />\n@@ -108,21 +124,13 @@\n \n     <bean id=\"oauthAccessDeniedHandler\" class=\"org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler\" />\n \n-    <http name=\"uiSecurity\" request-matcher-ref=\"uiRequestMatcher\" access-denied-page=\"/\"\n-        authentication-manager-ref=\"authzAuthenticationMgr\" xmlns=\"http://www.springframework.org/schema/security\">\n-        <intercept-url pattern=\"/login**\" access=\"IS_AUTHENTICATED_ANONYMOUSLY\" />\n-        <intercept-url pattern=\"/**\" access=\"IS_AUTHENTICATED_FULLY\" />\n-        <form-login authentication-failure-url=\"/login?error=true\" login-page=\"/login\" login-processing-url=\"/login.do\"\n-            username-parameter=\"username\" default-target-url=\"/\" password-parameter=\"password\"\n-            authentication-details-source-ref=\"authenticationDetailsSource\" />\n-        <logout logout-url=\"/logout.do\" success-handler-ref=\"logoutHandler\" />\n-    </http>\n+    <import resource=\"classpath:login-ui.xml\"/>\n \n     <!-- Deny-all \"buffer\" which a request will hit if it isn't matched by any of the other filter chains -->\n-    <sec:http name=\"denyAll\" use-expressions=\"true\" create-session=\"stateless\" entry-point-ref=\"http403EntryPoint\"\n-        authentication-manager-ref=\"emptyAuthenticationManager\">\n-        <sec:intercept-url pattern=\"/**\" access=\"denyAll\" />\n-    </sec:http>\n+    <!--<sec:http name=\"denyAll\" use-expressions=\"true\" create-session=\"stateless\" entry-point-ref=\"http403EntryPoint\"-->\n+        <!--authentication-manager-ref=\"emptyAuthenticationManager\">-->\n+        <!--<sec:intercept-url pattern=\"/**\" access=\"denyAll\" />-->\n+    <!--</sec:http>-->\n \n     <bean id=\"http403EntryPoint\" class=\"org.springframework.security.web.authentication.Http403ForbiddenEntryPoint\" />\n \n@@ -164,31 +172,17 @@\n \n     <oauth:web-expression-handler id=\"oauthWebExpressionHandler\" />\n \n-    <mvc:resources location=\"/\" mapping=\"/**\" />\n+    <!--<mvc:resources location=\"/\" mapping=\"/**\" />-->\n \n     <mvc:annotation-driven />\n \n     <mvc:default-servlet-handler />\n \n-    <bean id=\"viewResolver\" class=\"org.springframework.web.servlet.view.ContentNegotiatingViewResolver\">\n-        <property name=\"viewResolvers\">\n-            <list>\n-                <bean class=\"org.cloudfoundry.identity.uaa.web.ForwardAwareInternalResourceViewResolver\">\n-                    <property name=\"prefix\" value=\"/WEB-INF/jsp/\" />\n-                    <property name=\"suffix\" value=\".jsp\" />\n-                </bean>\n-                <bean class=\"org.springframework.web.servlet.view.BeanNameViewResolver\" />\n-            </list>\n-        </property>\n-        <property name=\"defaultViews\">\n-            <bean class=\"org.springframework.web.servlet.view.json.MappingJacksonJsonView\">\n-                <property name=\"extractValueFromSingleKeyModel\" value=\"true\" />\n-            </bean>\n-        </property>\n-    </bean>\n-\n     <!--Basic application beans. -->\n-    <bean id=\"loginInfoEndpoint\" class=\"org.cloudfoundry.identity.uaa.authentication.login.LoginInfoEndpoint\" />\n+    <bean id=\"loginInfoEndpoint\" class=\"org.cloudfoundry.identity.uaa.authentication.login.LoginInfoEndpoint\">\n+        <property name=\"uaaBaseUrl\" value=\"${uaa.url:http://localhost:8080/uaa}\" />\n+        <property name=\"links\" ref=\"links\" />\n+    </bean>\n \n     <bean id=\"healthzEndpoint\" class=\"org.cloudfoundry.identity.uaa.web.HealthzEndpoint\" />\n "
        },
        {
            "sha": "7e2f9a4f1aee097523ae240fae4f4e8b3566515a",
            "filename": "uaa/src/main/webapp/WEB-INF/spring/saml-providers.xml",
            "status": "added",
            "additions": 292,
            "deletions": 0,
            "changes": 292,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fspring%2Fsaml-providers.xml",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fspring%2Fsaml-providers.xml",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fspring%2Fsaml-providers.xml?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,292 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+<!--\n+    Cloud Foundry\n+    Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.\n+\n+    This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+    You may not use this product except in compliance with the License.\n+\n+    This product includes a number of subcomponents with\n+    separate copyright notices and license terms. Your use of these\n+    subcomponents is subject to the terms and conditions of the\n+    subcomponent's license, as noted in the LICENSE file.\n+\n+-->\n+\n+<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:security=\"http://www.springframework.org/schema/security\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\"\n+       xmlns:mvc=\"http://www.springframework.org/schema/mvc\" xmlns:util=\"http://www.springframework.org/schema/util\"\n+       xmlns:cache=\"http://www.springframework.org/schema/cache\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n+              http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd\n+              http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\n+              http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd\n+              http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd\n+              http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.0.xsd\">\n+\n+\n+        <!-- Register authentication manager with SAML provider -->\n+        <security:authentication-manager id=\"authenticationManager\">\n+            <security:authentication-provider ref=\"samlAuthenticationProvider\" />\n+        </security:authentication-manager>\n+\n+        <bean id=\"samlFilter\" class=\"org.springframework.security.web.FilterChainProxy\">\n+            <security:filter-chain-map path-type=\"ant\">\n+                <security:filter-chain pattern=\"/saml/login/**\" filters=\"samlEntryPoint\" />\n+                <security:filter-chain pattern=\"/saml/logout/**\" filters=\"samlLogoutFilter\" />\n+                <security:filter-chain pattern=\"/saml/metadata/**\" filters=\"metadataDisplayFilter\" />\n+                <security:filter-chain pattern=\"/saml/SSO/**\" filters=\"samlWebSSOProcessingFilter\" />\n+                <security:filter-chain pattern=\"/saml/SingleLogout/**\" filters=\"samlLogoutProcessingFilter\" />\n+                <security:filter-chain pattern=\"/saml/discovery/**\" filters=\"samlIDPDiscovery\" />\n+                <security:filter-chain pattern=\"/oauth/authorize/**\" filters=\"exceptionTranslationFilter\" />\n+            </security:filter-chain-map>\n+        </bean>\n+\n+        <!-- Logger for SAML messages and events -->\n+        <bean id=\"samlLogger\" class=\"org.springframework.security.saml.log.SAMLDefaultLogger\" />\n+\n+        <bean id=\"keyManager\" class=\"org.cloudfoundry.identity.uaa.login.SamlLoginServerKeyManager\" lazy-init=\"false\">\n+            <constructor-arg type=\"java.lang.String\" value=\"${login.serviceProviderKey}\" />\n+            <constructor-arg type=\"java.lang.String\" value=\"${login.serviceProviderKeyPassword:''}\" />\n+            <constructor-arg type=\"java.lang.String\" value=\"${login.serviceProviderCertificate}\" />\n+        </bean>\n+\n+        <!-- Entry point to initialize authentication, default values taken from\n+            properties file -->\n+        <bean id=\"samlEntryPoint\" class=\"org.springframework.security.saml.SAMLEntryPoint\">\n+            <property name=\"defaultProfileOptions\">\n+                <bean class=\"org.springframework.security.saml.websso.WebSSOProfileOptions\">\n+                    <property name=\"includeScoping\" value=\"false\" />\n+                    <property name=\"nameID\" value=\"${login.saml.nameID:urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified}\" />\n+                    <property name=\"assertionConsumerIndex\" value=\"${login.saml.assertionConsumerIndex:0}\" />\n+                </bean>\n+            </property>\n+        </bean>\n+\n+        <bean id=\"exceptionTranslationFilter\" class=\"org.springframework.security.web.access.ExceptionTranslationFilter\">\n+            <constructor-arg ref=\"samlEntryPoint\" />\n+        </bean>\n+\n+        <!-- IDP Discovery Service -->\n+        <bean id=\"samlIDPDiscovery\" class=\"org.cloudfoundry.identity.uaa.login.saml.LoginSamlDiscovery\"/>\n+\n+\n+        <bean id=\"extendedMetaData\" class=\"org.springframework.security.saml.metadata.ExtendedMetadata\">\n+            <property name=\"idpDiscoveryEnabled\" value=\"true\" />\n+            <property name=\"alias\" value=\"${login.entityID:'unit-test-sp'}\" />\n+            <property name=\"signMetadata\" value=\"${login.saml.signMetaData:true}\" />\n+        </bean>\n+\n+        <!-- Filter automatically generates default SP metadata -->\n+        <bean id=\"metadataGeneratorFilter\" class=\"org.springframework.security.saml.metadata.MetadataGeneratorFilter\">\n+            <constructor-arg>\n+                <bean class=\"org.springframework.security.saml.metadata.MetadataGenerator\">\n+                    <property name=\"extendedMetadata\" ref=\"extendedMetaData\"/>\n+                    <property name=\"requestSigned\" value=\"${login.saml.signRequest:true}\" />\n+                    <property name=\"wantAssertionSigned\" value=\"${login.saml.wantAssertionSigned:false}\" />\n+                    <property name=\"entityBaseURL\" value=\"${login.entityBaseURL:'http://localhost:8080/login}\" />\n+                    <property name=\"entityId\" value=\"${login.entityID:'unit-test-sp'}\" />\n+                </bean>\n+            </constructor-arg>\n+        </bean>\n+\n+        <!-- The filter is waiting for connections on URL suffixed with filterSuffix\n+            and presents SP metadata there -->\n+        <bean id=\"metadataDisplayFilter\" class=\"org.springframework.security.saml.metadata.MetadataDisplayFilter\" />\n+\n+        <bean id=\"metadata\" class=\"org.springframework.security.saml.metadata.CachingMetadataManager\">\n+            <constructor-arg>\n+                <bean factory-bean=\"metaDataProviders\" factory-method=\"getIdentityProviders\"/>\n+            </constructor-arg>\n+        </bean>\n+\n+        <bean name=\"metadataFetchingHttpClientTimer\" class=\"java.util.Timer\">\n+            <constructor-arg value=\"true\" />\n+        </bean>\n+\n+        <bean name=\"metadataFetchingHttpClient\" class=\"org.apache.commons.httpclient.HttpClient\">\n+            <constructor-arg ref=\"httpClientParams\" />\n+        </bean>\n+\n+        <bean name=\"httpClientParams\" class=\"org.apache.commons.httpclient.params.HttpClientParams\">\n+            <property name=\"connectionManagerTimeout\" value=\"${login.saml.socket.connectionManagerTimeout:10000}\" />\n+            <property name=\"soTimeout\" value=\"${login.saml.socket.soTimeout:10000}\" />\n+        </bean>\n+\n+        <!-- SAML Authentication Provider responsible for validating of received\n+            SAML messages -->\n+        <bean id=\"samlAuthenticationProvider\" class=\"org.cloudfoundry.identity.uaa.login.saml.LoginSamlAuthenticationProvider\">\n+            <property name=\"userDetails\" ref=\"samlUserDetails\" />\n+            <property name=\"authenticationManager\" ref=\"authzAuthenticationMgr\"/>\n+        </bean>\n+\n+        <bean id=\"samlUserDetails\" class=\"org.cloudfoundry.identity.uaa.login.LoginServerSamlUserDetailsService\" />\n+\n+        <!-- Provider of default SAML Context -->\n+        <bean id=\"contextProvider\" class=\"org.springframework.security.saml.context.SAMLContextProviderImpl\" />\n+\n+        <!-- Processing filter for WebSSO profile messages -->\n+        <bean id=\"samlWebSSOProcessingFilter\" class=\"org.springframework.security.saml.SAMLProcessingFilter\">\n+            <property name=\"authenticationManager\" ref=\"authenticationManager\" />\n+            <property name=\"authenticationSuccessHandler\" ref=\"successRedirectHandler\" />\n+        </bean>\n+\n+        <!-- Logout handler terminating local session -->\n+        <bean id=\"samlLogoutHandler\" class=\"org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler\">\n+            <property name=\"invalidateHttpSession\" value=\"true\" />\n+        </bean>\n+\n+        <!-- Override default logout processing filter with the one processing SAML\n+            messages -->\n+        <bean id=\"samlLogoutFilter\" class=\"org.springframework.security.saml.SAMLLogoutFilter\">\n+            <constructor-arg ref=\"logoutHandler\" />\n+            <constructor-arg ref=\"samlLogoutHandler\" />\n+            <constructor-arg ref=\"samlLogoutHandler\" />\n+        </bean>\n+\n+        <!-- Filter processing incoming logout messages -->\n+        <!-- First argument determines URL user will be redirected to after successful\n+            global logout -->\n+        <bean id=\"samlLogoutProcessingFilter\" class=\"org.springframework.security.saml.SAMLLogoutProcessingFilter\">\n+            <constructor-arg ref=\"logoutHandler\" />\n+            <constructor-arg ref=\"samlLogoutHandler\" />\n+        </bean>\n+\n+        <!-- Class loading incoming SAML messages from httpRequest stream -->\n+        <bean id=\"processor\" class=\"org.springframework.security.saml.processor.SAMLProcessorImpl\">\n+            <constructor-arg>\n+                <list>\n+                    <ref bean=\"redirectBinding\" />\n+                    <ref bean=\"postBinding\" />\n+                    <ref bean=\"artifactBinding\" />\n+                    <ref bean=\"soapBinding\" />\n+                    <ref bean=\"paosBinding\" />\n+                </list>\n+            </constructor-arg>\n+        </bean>\n+\n+        <!-- SAML 2.0 WebSSO Assertion Consumer -->\n+        <bean id=\"webSSOprofileConsumer\" class=\"org.springframework.security.saml.websso.WebSSOProfileConsumerImpl\" />\n+\n+        <!-- SAML 2.0 Holder-of-Key WebSSO Assertion Consumer -->\n+        <bean id=\"hokWebSSOprofileConsumer\" class=\"org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl\" />\n+\n+        <!-- SAML 2.0 Web SSO profile -->\n+        <bean id=\"webSSOprofile\" class=\"org.springframework.security.saml.websso.WebSSOProfileImpl\" />\n+\n+        <!-- SAML 2.0 Holder-of-Key Web SSO profile -->\n+        <bean id=\"hokWebSSOProfile\" class=\"org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl\" />\n+\n+        <!-- SAML 2.0 Logout Profile -->\n+        <bean id=\"logoutprofile\" class=\"org.springframework.security.saml.websso.SingleLogoutProfileImpl\" />\n+\n+        <!-- Bindings, encoders and decoders used for creating and parsing messages -->\n+        <bean id=\"postBinding\" class=\"org.springframework.security.saml.processor.HTTPPostBinding\">\n+            <constructor-arg ref=\"parserPool\" />\n+            <constructor-arg ref=\"velocityEngine\" />\n+        </bean>\n+\n+        <bean id=\"redirectBinding\" class=\"org.springframework.security.saml.processor.HTTPRedirectDeflateBinding\">\n+            <constructor-arg ref=\"parserPool\" />\n+        </bean>\n+\n+        <bean id=\"artifactBinding\" class=\"org.springframework.security.saml.processor.HTTPArtifactBinding\">\n+            <constructor-arg ref=\"parserPool\" />\n+            <constructor-arg ref=\"velocityEngine\" />\n+            <constructor-arg>\n+                <bean class=\"org.springframework.security.saml.websso.ArtifactResolutionProfileImpl\">\n+                    <constructor-arg>\n+                        <bean class=\"org.apache.commons.httpclient.HttpClient\" />\n+                    </constructor-arg>\n+                    <property name=\"processor\">\n+                        <bean id=\"soapProcessor\" class=\"org.springframework.security.saml.processor.SAMLProcessorImpl\">\n+                            <constructor-arg ref=\"soapBinding\" />\n+                        </bean>\n+                    </property>\n+                </bean>\n+            </constructor-arg>\n+        </bean>\n+\n+        <bean id=\"soapBinding\" class=\"org.springframework.security.saml.processor.HTTPSOAP11Binding\">\n+            <constructor-arg ref=\"parserPool\" />\n+        </bean>\n+\n+        <bean id=\"paosBinding\" class=\"org.springframework.security.saml.processor.HTTPPAOS11Binding\">\n+            <constructor-arg ref=\"parserPool\" />\n+        </bean>\n+\n+        <!-- Initialization of OpenSAML library -->\n+        <bean class=\"org.springframework.security.saml.SAMLBootstrap\" />\n+\n+        <!-- Initialization of the velocity engine -->\n+        <bean id=\"velocityEngine\" class=\"org.springframework.security.saml.util.VelocityFactory\" factory-method=\"getEngine\" />\n+\n+        <!-- XML parser pool needed for OpenSAML parsing -->\n+        <bean id=\"parserPool\" class=\"org.opensaml.xml.parse.BasicParserPool\" scope=\"singleton\" />\n+\n+        <!--<bean id=\"abstractRemoteUaaController\" abstract=\"true\">-->\n+          <!--<constructor-arg ref=\"environment\" />-->\n+          <!--<constructor-arg>-->\n+            <!--<bean class=\"org.springframework.web.client.RestTemplate\" />-->\n+          <!--</constructor-arg>-->\n+          <!--<property name=\"links\" ref=\"links\" />-->\n+          <!--<property name=\"codeExpirationMillis\" value=\"300000\" />-->\n+        <!--</bean>-->\n+\n+        <!--<bean id=\"uaaController\" class=\"org.cloudfoundry.identity.uaa.login.SamlRemoteUaaController\" parent=\"abstractRemoteUaaController\">-->\n+            <!--<property name=\"prompts\">-->\n+                <!--<util:list>-->\n+                    <!--<bean class=\"org.cloudfoundry.identity.uaa.authentication.login.Prompt\">-->\n+                        <!--<constructor-arg name=\"name\" value=\"username\" />-->\n+                        <!--<constructor-arg name=\"text\" value=\"Email\" />-->\n+                        <!--<constructor-arg name=\"type\" value=\"text\" />-->\n+                    <!--</bean>-->\n+                    <!--<bean class=\"org.cloudfoundry.identity.uaa.authentication.login.Prompt\">-->\n+                        <!--<constructor-arg name=\"name\" value=\"password\" />-->\n+                        <!--<constructor-arg name=\"text\" value=\"Password\" />-->\n+                        <!--<constructor-arg name=\"type\" value=\"password\" />-->\n+                    <!--</bean>-->\n+                    <!--<bean class=\"org.cloudfoundry.identity.uaa.authentication.login.Prompt\">-->\n+                        <!--<constructor-arg name=\"name\" value=\"passcode\" />-->\n+                        <!--<constructor-arg name=\"text\"-->\n+                                         <!--value=\"One Time Code (Get one at ${login.url:http://localhost:8080/login}/passcode)\" />-->\n+                        <!--<constructor-arg name=\"type\" value=\"password\" />-->\n+                    <!--</bean>-->\n+                <!--</util:list>-->\n+            <!--</property>-->\n+            <!--<property name=\"idpDefinitions\">-->\n+                <!--<bean factory-bean=\"metaDataProviders\" factory-method=\"getIdentityProviderDefinitions\"/>-->\n+            <!--</property>-->\n+        <!--</bean>-->\n+\n+        <bean id=\"metaDataUrl\" class=\"java.lang.String\">\n+            <constructor-arg value=\"${login.idpMetadataURL:null}\"/>\n+        </bean>\n+\n+        <bean id=\"metaDataProviders\" class=\"org.cloudfoundry.identity.uaa.login.saml.IdentityProviderConfigurator\">\n+            <property name=\"identityProviders\" value=\"#{@config['login']==null ? null : @config['login']['saml']==null ? null : @config['login']['saml']['providers']}\" />\n+            <property name=\"legacyIdpMetaData\" ref=\"metaDataUrl\"/>\n+            <property name=\"legacyIdpIdentityAlias\" value=\"${login.idpEntityAlias:null}\"/>\n+            <property name=\"legacyNameId\" value=\"${login.saml.nameID:urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified}\" />\n+            <property name=\"legacyAssertionConsumerIndex\" value=\"${login.saml.assertionConsumerIndex:0}\" />\n+            <property name=\"legacyMetadataTrustCheck\" value=\"${login.saml.metadataTrustCheck:true}\"/>\n+            <property name=\"legacyShowSamlLink\" value=\"${login.showSamlLoginLink:true}\"/>\n+            <property name=\"metadataFetchingHttpClientTimer\" ref=\"metadataFetchingHttpClientTimer\" />\n+            <property name=\"httpClient\" ref=\"metadataFetchingHttpClient\" />\n+            <property name=\"parserPool\" ref=\"parserPool\"/>\n+\n+        </bean>\n+\n+        <beans profile=\"fileMetadata\">\n+            <bean id=\"metaDataUrl\" class=\"java.lang.String\">\n+                <constructor-arg value=\"${login.idpMetadataFile:null}\"/>\n+            </bean>\n+        </beans>\n+\n+        <beans profile=\"configMetadata\">\n+            <bean id=\"metaDataUrl\" class=\"java.lang.String\">\n+                <constructor-arg value=\"${login.idpMetadata:null}\"/>\n+            </bean>\n+        </beans>\n+\n+</beans>"
        },
        {
            "sha": "e95a0408cf0bdd3c5e32039142929b8824482760",
            "filename": "uaa/src/main/webapp/WEB-INF/web.xml",
            "status": "modified",
            "additions": 56,
            "deletions": 34,
            "changes": 90,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -13,44 +13,66 @@\n \n -->\n <web-app xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-\txsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" version=\"3.0\"\n+    xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" version=\"3.0\"\n     metadata-complete=\"true\">\n     <absolute-ordering/>\n-\t<filter>\n-\t\t<filter-name>springSecurityFilterChain</filter-name>\n-\t\t<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n-\t\t<init-param>\n-\t\t\t<param-name>contextAttribute</param-name>\n-\t\t\t<param-value>org.springframework.web.servlet.FrameworkServlet.CONTEXT.spring</param-value>\n-\t\t</init-param>\n-\t</filter>\n-\n-\t<filter-mapping>\n-\t\t<filter-name>springSecurityFilterChain</filter-name>\n-\t\t<url-pattern>/*</url-pattern>\n-\t</filter-mapping>\n-\n-\t<servlet>\n-\t\t<servlet-name>spring</servlet-name>\n-\t\t<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n-\t\t<init-param>\n-\t\t\t<param-name>contextInitializerClasses</param-name>\n-\t\t\t<param-value>org.cloudfoundry.identity.uaa.config.YamlServletProfileInitializer</param-value>\n-\t\t</init-param>\n+    <display-name>Oauth 2 / Open ID / Identity Server</display-name>\n+    <description>CloudFoundry Identity Server</description>\n+    <filter>\n+        <filter-name>springSecurityFilterChain</filter-name>\n+        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n+        <init-param>\n+            <param-name>contextAttribute</param-name>\n+            <param-value>org.springframework.web.servlet.FrameworkServlet.CONTEXT.spring</param-value>\n+        </init-param>\n+    </filter>\n+\n+    <filter-mapping>\n+        <filter-name>springSecurityFilterChain</filter-name>\n+        <url-pattern>/*</url-pattern>\n+    </filter-mapping>\n+\n+    <filter>\n+        <filter-name>xFrameOptionsFilter</filter-name>\n+        <filter-class>org.cloudfoundry.identity.uaa.login.XFrameOptionsFilter</filter-class>\n+    </filter>\n+\n+    <filter-mapping>\n+        <filter-name>xFrameOptionsFilter</filter-name>\n+        <url-pattern>/*</url-pattern>\n+    </filter-mapping>\n+\n+    <servlet>\n+        <servlet-name>spring</servlet-name>\n+        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n+        <init-param>\n+            <param-name>contextInitializerClasses</param-name>\n+            <param-value>org.cloudfoundry.identity.uaa.config.YamlServletProfileInitializer</param-value>\n+        </init-param>\n         <init-param>\n             <param-name>environmentConfigDefaults</param-name>\n-            <param-value>uaa.yml</param-value>\n+            <param-value>uaa.yml,login.yml</param-value>\n+        </init-param>\n+        <init-param>\n+            <param-name>environmentConfigLocations</param-name>\n+            <param-value>${LOGIN_CONFIG_URL},file:${LOGIN_CONFIG_PATH}/login.yml,file:${CLOUD_FOUNDRY_CONFIG_PATH}/login.yml,${UAA_CONFIG_URL},file:${UAA_CONFIG_PATH}/uaa.yml,file:${CLOUD_FOUNDRY_CONFIG_PATH}/uaa.yml</param-value>\n         </init-param>\n-\t\t<init-param>\n-\t\t\t<param-name>environmentConfigLocations</param-name>\n-\t\t\t<param-value>${UAA_CONFIG_URL},file:${UAA_CONFIG_PATH}/uaa.yml,file:${CLOUD_FOUNDRY_CONFIG_PATH}/uaa.yml</param-value>\n-\t\t</init-param>\n-\t\t<load-on-startup>1</load-on-startup>\n-\t</servlet>\n-\n-\t<servlet-mapping>\n-\t\t<servlet-name>spring</servlet-name>\n-\t\t<url-pattern>/</url-pattern>\n-\t</servlet-mapping>\n+        <load-on-startup>1</load-on-startup>\n+    </servlet>\n+\n+    <servlet-mapping>\n+        <servlet-name>spring</servlet-name>\n+        <url-pattern>/</url-pattern>\n+    </servlet-mapping>\n+\n+    <error-page>\n+        <error-code>500</error-code>\n+        <location>/error500</location>\n+    </error-page>\n+\n+    <error-page>\n+        <error-code>404</error-code>\n+        <location>/error404</location>\n+    </error-page>\n \n </web-app>"
        },
        {
            "sha": "55d79fc2635cc7b1ca3dc7f8558e46d28c66cace",
            "filename": "uaa/src/main/webapp/resources/images/sad_cloud.png",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fimages%2Fsad_cloud.png",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fimages%2Fsad_cloud.png",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fimages%2Fsad_cloud.png?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a"
        },
        {
            "sha": "de4ec61680b408e020f8a8834e2874107bb7052e",
            "filename": "uaa/src/main/webapp/resources/javascripts/nav.js",
            "status": "added",
            "additions": 7,
            "deletions": 0,
            "changes": 7,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fjavascripts%2Fnav.js",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fjavascripts%2Fnav.js",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fjavascripts%2Fnav.js?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,7 @@\n+$(document).ready(function() {\n+  $(\".dropdown-trigger\").click(function() {\n+    var $el = $(this);\n+    $el.toggleClass(\"open\");\n+    $el.next(\".dropdown-content\").toggleClass(\"open\");\n+  });\n+});\n\\ No newline at end of file"
        },
        {
            "sha": "fd306001dc2f8a4c1837118dd6f2c102b48e912b",
            "filename": "uaa/src/main/webapp/resources/oss/images/favicon.ico",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Foss%2Fimages%2Ffavicon.ico",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Foss%2Fimages%2Ffavicon.ico",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Foss%2Fimages%2Ffavicon.ico?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a"
        },
        {
            "sha": "6e09dc9519c4ec6decbc4428bcb66ab0401f12bd",
            "filename": "uaa/src/main/webapp/resources/oss/images/logo.png",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Foss%2Fimages%2Flogo.png",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Foss%2Fimages%2Flogo.png",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Foss%2Fimages%2Flogo.png?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a"
        },
        {
            "sha": "c37104057d2f83c845fe8826232eacb69cbf05f6",
            "filename": "uaa/src/main/webapp/resources/oss/stylesheets/application.css",
            "status": "added",
            "additions": 8957,
            "deletions": 0,
            "changes": 8957,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Foss%2Fstylesheets%2Fapplication.css",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Foss%2Fstylesheets%2Fapplication.css",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Foss%2Fstylesheets%2Fapplication.css?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a"
        },
        {
            "sha": "66b72bad3cde6536bfd7ba55d497b17a3603c329",
            "filename": "uaa/src/main/webapp/resources/pivotal/images/dev-console-logo-gray.png",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Fdev-console-logo-gray.png",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Fdev-console-logo-gray.png",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Fdev-console-logo-gray.png?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a"
        },
        {
            "sha": "f8008f02d1e686de09cf03bbd1ed62037c7befc1",
            "filename": "uaa/src/main/webapp/resources/pivotal/images/dev-console-logo-teal.png",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Fdev-console-logo-teal.png",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Fdev-console-logo-teal.png",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Fdev-console-logo-teal.png?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a"
        },
        {
            "sha": "87b6ef34e2f318e8200382dcfbfe3fadec33f449",
            "filename": "uaa/src/main/webapp/resources/pivotal/images/favicon.ico",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Ffavicon.ico",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Ffavicon.ico",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Ffavicon.ico?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a"
        },
        {
            "sha": "7ed5a895246d6142455bd04d07b850ac89d32760",
            "filename": "uaa/src/main/webapp/resources/pivotal/images/logo.png",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Flogo.png",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Flogo.png",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Flogo.png?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a"
        },
        {
            "sha": "47067e2a4afe2292352ef3d8ff0859fb515d2b8c",
            "filename": "uaa/src/main/webapp/resources/pivotal/images/network-logo-gray.png",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Fnetwork-logo-gray.png",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Fnetwork-logo-gray.png",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Fnetwork-logo-gray.png?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a"
        },
        {
            "sha": "f36e20c3dafc7509f68a3d4bf69c6d605fead4fa",
            "filename": "uaa/src/main/webapp/resources/pivotal/images/network-logo-teal.png",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Fnetwork-logo-teal.png",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Fnetwork-logo-teal.png",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Fnetwork-logo-teal.png?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a"
        },
        {
            "sha": "062b30a8efbf6de990d935779f4fa45633373108",
            "filename": "uaa/src/main/webapp/resources/pivotal/images/partners-logo-gray.png",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Fpartners-logo-gray.png",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Fpartners-logo-gray.png",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Fpartners-logo-gray.png?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a"
        },
        {
            "sha": "3262f77d4381580a95b2c25729d0ba156ce142af",
            "filename": "uaa/src/main/webapp/resources/pivotal/images/partners-logo-teal.png",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Fpartners-logo-teal.png",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Fpartners-logo-teal.png",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Fpartners-logo-teal.png?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a"
        },
        {
            "sha": "de4a51dcd06cecfc4eaf175c9769b8409d456a50",
            "filename": "uaa/src/main/webapp/resources/pivotal/images/pws-logo-gray.png",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Fpws-logo-gray.png",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Fpws-logo-gray.png",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Fpws-logo-gray.png?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a"
        },
        {
            "sha": "cde7658a62ef86c4903cd49761b4712ea40d93a3",
            "filename": "uaa/src/main/webapp/resources/pivotal/images/pws-logo-teal.png",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Fpws-logo-teal.png",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Fpws-logo-teal.png",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fimages%2Fpws-logo-teal.png?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a"
        },
        {
            "sha": "293e870810816b7867ba84100357e4bd46f123c1",
            "filename": "uaa/src/main/webapp/resources/pivotal/stylesheets/application.css",
            "status": "added",
            "additions": 8957,
            "deletions": 0,
            "changes": 8957,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fstylesheets%2Fapplication.css",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fstylesheets%2Fapplication.css",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2Fresources%2Fpivotal%2Fstylesheets%2Fapplication.css?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a"
        },
        {
            "sha": "048cff973981e8dd4ed8e73c4ca532ffcf02e1e8",
            "filename": "uaa/src/main/webapp/vendor/font-awesome/css/font-awesome.css",
            "status": "added",
            "additions": 1338,
            "deletions": 0,
            "changes": 1338,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fvendor%2Ffont-awesome%2Fcss%2Ffont-awesome.css",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fvendor%2Ffont-awesome%2Fcss%2Ffont-awesome.css",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2Fvendor%2Ffont-awesome%2Fcss%2Ffont-awesome.css?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,1338 @@\n+/*!\n+ *  Font Awesome 4.0.3 by @davegandy - http://fontawesome.io - @fontawesome\n+ *  License - http://fontawesome.io/license (Font: SIL OFL 1.1, CSS: MIT License)\n+ */\n+/* FONT PATH\n+ * -------------------------- */\n+@font-face {\n+  font-family: 'FontAwesome';\n+  src: url('../fonts/fontawesome-webfont.eot?v=4.0.3');\n+  src: url('../fonts/fontawesome-webfont.eot?#iefix&v=4.0.3') format('embedded-opentype'), url('../fonts/fontawesome-webfont.woff?v=4.0.3') format('woff'), url('../fonts/fontawesome-webfont.ttf?v=4.0.3') format('truetype'), url('../fonts/fontawesome-webfont.svg?v=4.0.3#fontawesomeregular') format('svg');\n+  font-weight: normal;\n+  font-style: normal;\n+}\n+.fa {\n+  display: inline-block;\n+  font-family: FontAwesome;\n+  font-style: normal;\n+  font-weight: normal;\n+  line-height: 1;\n+  -webkit-font-smoothing: antialiased;\n+  -moz-osx-font-smoothing: grayscale;\n+}\n+/* makes the font 33% larger relative to the icon container */\n+.fa-lg {\n+  font-size: 1.3333333333333333em;\n+  line-height: 0.75em;\n+  vertical-align: -15%;\n+}\n+.fa-2x {\n+  font-size: 2em;\n+}\n+.fa-3x {\n+  font-size: 3em;\n+}\n+.fa-4x {\n+  font-size: 4em;\n+}\n+.fa-5x {\n+  font-size: 5em;\n+}\n+.fa-fw {\n+  width: 1.2857142857142858em;\n+  text-align: center;\n+}\n+.fa-ul {\n+  padding-left: 0;\n+  margin-left: 2.142857142857143em;\n+  list-style-type: none;\n+}\n+.fa-ul > li {\n+  position: relative;\n+}\n+.fa-li {\n+  position: absolute;\n+  left: -2.142857142857143em;\n+  width: 2.142857142857143em;\n+  top: 0.14285714285714285em;\n+  text-align: center;\n+}\n+.fa-li.fa-lg {\n+  left: -1.8571428571428572em;\n+}\n+.fa-border {\n+  padding: .2em .25em .15em;\n+  border: solid 0.08em #eeeeee;\n+  border-radius: .1em;\n+}\n+.pull-right {\n+  float: right;\n+}\n+.pull-left {\n+  float: left;\n+}\n+.fa.pull-left {\n+  margin-right: .3em;\n+}\n+.fa.pull-right {\n+  margin-left: .3em;\n+}\n+.fa-spin {\n+  -webkit-animation: spin 2s infinite linear;\n+  -moz-animation: spin 2s infinite linear;\n+  -o-animation: spin 2s infinite linear;\n+  animation: spin 2s infinite linear;\n+}\n+@-moz-keyframes spin {\n+  0% {\n+    -moz-transform: rotate(0deg);\n+  }\n+  100% {\n+    -moz-transform: rotate(359deg);\n+  }\n+}\n+@-webkit-keyframes spin {\n+  0% {\n+    -webkit-transform: rotate(0deg);\n+  }\n+  100% {\n+    -webkit-transform: rotate(359deg);\n+  }\n+}\n+@-o-keyframes spin {\n+  0% {\n+    -o-transform: rotate(0deg);\n+  }\n+  100% {\n+    -o-transform: rotate(359deg);\n+  }\n+}\n+@-ms-keyframes spin {\n+  0% {\n+    -ms-transform: rotate(0deg);\n+  }\n+  100% {\n+    -ms-transform: rotate(359deg);\n+  }\n+}\n+@keyframes spin {\n+  0% {\n+    transform: rotate(0deg);\n+  }\n+  100% {\n+    transform: rotate(359deg);\n+  }\n+}\n+.fa-rotate-90 {\n+  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1);\n+  -webkit-transform: rotate(90deg);\n+  -moz-transform: rotate(90deg);\n+  -ms-transform: rotate(90deg);\n+  -o-transform: rotate(90deg);\n+  transform: rotate(90deg);\n+}\n+.fa-rotate-180 {\n+  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=2);\n+  -webkit-transform: rotate(180deg);\n+  -moz-transform: rotate(180deg);\n+  -ms-transform: rotate(180deg);\n+  -o-transform: rotate(180deg);\n+  transform: rotate(180deg);\n+}\n+.fa-rotate-270 {\n+  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3);\n+  -webkit-transform: rotate(270deg);\n+  -moz-transform: rotate(270deg);\n+  -ms-transform: rotate(270deg);\n+  -o-transform: rotate(270deg);\n+  transform: rotate(270deg);\n+}\n+.fa-flip-horizontal {\n+  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1);\n+  -webkit-transform: scale(-1, 1);\n+  -moz-transform: scale(-1, 1);\n+  -ms-transform: scale(-1, 1);\n+  -o-transform: scale(-1, 1);\n+  transform: scale(-1, 1);\n+}\n+.fa-flip-vertical {\n+  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1);\n+  -webkit-transform: scale(1, -1);\n+  -moz-transform: scale(1, -1);\n+  -ms-transform: scale(1, -1);\n+  -o-transform: scale(1, -1);\n+  transform: scale(1, -1);\n+}\n+.fa-stack {\n+  position: relative;\n+  display: inline-block;\n+  width: 2em;\n+  height: 2em;\n+  line-height: 2em;\n+  vertical-align: middle;\n+}\n+.fa-stack-1x,\n+.fa-stack-2x {\n+  position: absolute;\n+  left: 0;\n+  width: 100%;\n+  text-align: center;\n+}\n+.fa-stack-1x {\n+  line-height: inherit;\n+}\n+.fa-stack-2x {\n+  font-size: 2em;\n+}\n+.fa-inverse {\n+  color: #ffffff;\n+}\n+/* Font Awesome uses the Unicode Private Use Area (PUA) to ensure screen\n+   readers do not read off random characters that represent icons */\n+.fa-glass:before {\n+  content: \"\\f000\";\n+}\n+.fa-music:before {\n+  content: \"\\f001\";\n+}\n+.fa-search:before {\n+  content: \"\\f002\";\n+}\n+.fa-envelope-o:before {\n+  content: \"\\f003\";\n+}\n+.fa-heart:before {\n+  content: \"\\f004\";\n+}\n+.fa-star:before {\n+  content: \"\\f005\";\n+}\n+.fa-star-o:before {\n+  content: \"\\f006\";\n+}\n+.fa-user:before {\n+  content: \"\\f007\";\n+}\n+.fa-film:before {\n+  content: \"\\f008\";\n+}\n+.fa-th-large:before {\n+  content: \"\\f009\";\n+}\n+.fa-th:before {\n+  content: \"\\f00a\";\n+}\n+.fa-th-list:before {\n+  content: \"\\f00b\";\n+}\n+.fa-check:before {\n+  content: \"\\f00c\";\n+}\n+.fa-times:before {\n+  content: \"\\f00d\";\n+}\n+.fa-search-plus:before {\n+  content: \"\\f00e\";\n+}\n+.fa-search-minus:before {\n+  content: \"\\f010\";\n+}\n+.fa-power-off:before {\n+  content: \"\\f011\";\n+}\n+.fa-signal:before {\n+  content: \"\\f012\";\n+}\n+.fa-gear:before,\n+.fa-cog:before {\n+  content: \"\\f013\";\n+}\n+.fa-trash-o:before {\n+  content: \"\\f014\";\n+}\n+.fa-home:before {\n+  content: \"\\f015\";\n+}\n+.fa-file-o:before {\n+  content: \"\\f016\";\n+}\n+.fa-clock-o:before {\n+  content: \"\\f017\";\n+}\n+.fa-road:before {\n+  content: \"\\f018\";\n+}\n+.fa-download:before {\n+  content: \"\\f019\";\n+}\n+.fa-arrow-circle-o-down:before {\n+  content: \"\\f01a\";\n+}\n+.fa-arrow-circle-o-up:before {\n+  content: \"\\f01b\";\n+}\n+.fa-inbox:before {\n+  content: \"\\f01c\";\n+}\n+.fa-play-circle-o:before {\n+  content: \"\\f01d\";\n+}\n+.fa-rotate-right:before,\n+.fa-repeat:before {\n+  content: \"\\f01e\";\n+}\n+.fa-refresh:before {\n+  content: \"\\f021\";\n+}\n+.fa-list-alt:before {\n+  content: \"\\f022\";\n+}\n+.fa-lock:before {\n+  content: \"\\f023\";\n+}\n+.fa-flag:before {\n+  content: \"\\f024\";\n+}\n+.fa-headphones:before {\n+  content: \"\\f025\";\n+}\n+.fa-volume-off:before {\n+  content: \"\\f026\";\n+}\n+.fa-volume-down:before {\n+  content: \"\\f027\";\n+}\n+.fa-volume-up:before {\n+  content: \"\\f028\";\n+}\n+.fa-qrcode:before {\n+  content: \"\\f029\";\n+}\n+.fa-barcode:before {\n+  content: \"\\f02a\";\n+}\n+.fa-tag:before {\n+  content: \"\\f02b\";\n+}\n+.fa-tags:before {\n+  content: \"\\f02c\";\n+}\n+.fa-book:before {\n+  content: \"\\f02d\";\n+}\n+.fa-bookmark:before {\n+  content: \"\\f02e\";\n+}\n+.fa-print:before {\n+  content: \"\\f02f\";\n+}\n+.fa-camera:before {\n+  content: \"\\f030\";\n+}\n+.fa-font:before {\n+  content: \"\\f031\";\n+}\n+.fa-bold:before {\n+  content: \"\\f032\";\n+}\n+.fa-italic:before {\n+  content: \"\\f033\";\n+}\n+.fa-text-height:before {\n+  content: \"\\f034\";\n+}\n+.fa-text-width:before {\n+  content: \"\\f035\";\n+}\n+.fa-align-left:before {\n+  content: \"\\f036\";\n+}\n+.fa-align-center:before {\n+  content: \"\\f037\";\n+}\n+.fa-align-right:before {\n+  content: \"\\f038\";\n+}\n+.fa-align-justify:before {\n+  content: \"\\f039\";\n+}\n+.fa-list:before {\n+  content: \"\\f03a\";\n+}\n+.fa-dedent:before,\n+.fa-outdent:before {\n+  content: \"\\f03b\";\n+}\n+.fa-indent:before {\n+  content: \"\\f03c\";\n+}\n+.fa-video-camera:before {\n+  content: \"\\f03d\";\n+}\n+.fa-picture-o:before {\n+  content: \"\\f03e\";\n+}\n+.fa-pencil:before {\n+  content: \"\\f040\";\n+}\n+.fa-map-marker:before {\n+  content: \"\\f041\";\n+}\n+.fa-adjust:before {\n+  content: \"\\f042\";\n+}\n+.fa-tint:before {\n+  content: \"\\f043\";\n+}\n+.fa-edit:before,\n+.fa-pencil-square-o:before {\n+  content: \"\\f044\";\n+}\n+.fa-share-square-o:before {\n+  content: \"\\f045\";\n+}\n+.fa-check-square-o:before {\n+  content: \"\\f046\";\n+}\n+.fa-arrows:before {\n+  content: \"\\f047\";\n+}\n+.fa-step-backward:before {\n+  content: \"\\f048\";\n+}\n+.fa-fast-backward:before {\n+  content: \"\\f049\";\n+}\n+.fa-backward:before {\n+  content: \"\\f04a\";\n+}\n+.fa-play:before {\n+  content: \"\\f04b\";\n+}\n+.fa-pause:before {\n+  content: \"\\f04c\";\n+}\n+.fa-stop:before {\n+  content: \"\\f04d\";\n+}\n+.fa-forward:before {\n+  content: \"\\f04e\";\n+}\n+.fa-fast-forward:before {\n+  content: \"\\f050\";\n+}\n+.fa-step-forward:before {\n+  content: \"\\f051\";\n+}\n+.fa-eject:before {\n+  content: \"\\f052\";\n+}\n+.fa-chevron-left:before {\n+  content: \"\\f053\";\n+}\n+.fa-chevron-right:before {\n+  content: \"\\f054\";\n+}\n+.fa-plus-circle:before {\n+  content: \"\\f055\";\n+}\n+.fa-minus-circle:before {\n+  content: \"\\f056\";\n+}\n+.fa-times-circle:before {\n+  content: \"\\f057\";\n+}\n+.fa-check-circle:before {\n+  content: \"\\f058\";\n+}\n+.fa-question-circle:before {\n+  content: \"\\f059\";\n+}\n+.fa-info-circle:before {\n+  content: \"\\f05a\";\n+}\n+.fa-crosshairs:before {\n+  content: \"\\f05b\";\n+}\n+.fa-times-circle-o:before {\n+  content: \"\\f05c\";\n+}\n+.fa-check-circle-o:before {\n+  content: \"\\f05d\";\n+}\n+.fa-ban:before {\n+  content: \"\\f05e\";\n+}\n+.fa-arrow-left:before {\n+  content: \"\\f060\";\n+}\n+.fa-arrow-right:before {\n+  content: \"\\f061\";\n+}\n+.fa-arrow-up:before {\n+  content: \"\\f062\";\n+}\n+.fa-arrow-down:before {\n+  content: \"\\f063\";\n+}\n+.fa-mail-forward:before,\n+.fa-share:before {\n+  content: \"\\f064\";\n+}\n+.fa-expand:before {\n+  content: \"\\f065\";\n+}\n+.fa-compress:before {\n+  content: \"\\f066\";\n+}\n+.fa-plus:before {\n+  content: \"\\f067\";\n+}\n+.fa-minus:before {\n+  content: \"\\f068\";\n+}\n+.fa-asterisk:before {\n+  content: \"\\f069\";\n+}\n+.fa-exclamation-circle:before {\n+  content: \"\\f06a\";\n+}\n+.fa-gift:before {\n+  content: \"\\f06b\";\n+}\n+.fa-leaf:before {\n+  content: \"\\f06c\";\n+}\n+.fa-fire:before {\n+  content: \"\\f06d\";\n+}\n+.fa-eye:before {\n+  content: \"\\f06e\";\n+}\n+.fa-eye-slash:before {\n+  content: \"\\f070\";\n+}\n+.fa-warning:before,\n+.fa-exclamation-triangle:before {\n+  content: \"\\f071\";\n+}\n+.fa-plane:before {\n+  content: \"\\f072\";\n+}\n+.fa-calendar:before {\n+  content: \"\\f073\";\n+}\n+.fa-random:before {\n+  content: \"\\f074\";\n+}\n+.fa-comment:before {\n+  content: \"\\f075\";\n+}\n+.fa-magnet:before {\n+  content: \"\\f076\";\n+}\n+.fa-chevron-up:before {\n+  content: \"\\f077\";\n+}\n+.fa-chevron-down:before {\n+  content: \"\\f078\";\n+}\n+.fa-retweet:before {\n+  content: \"\\f079\";\n+}\n+.fa-shopping-cart:before {\n+  content: \"\\f07a\";\n+}\n+.fa-folder:before {\n+  content: \"\\f07b\";\n+}\n+.fa-folder-open:before {\n+  content: \"\\f07c\";\n+}\n+.fa-arrows-v:before {\n+  content: \"\\f07d\";\n+}\n+.fa-arrows-h:before {\n+  content: \"\\f07e\";\n+}\n+.fa-bar-chart-o:before {\n+  content: \"\\f080\";\n+}\n+.fa-twitter-square:before {\n+  content: \"\\f081\";\n+}\n+.fa-facebook-square:before {\n+  content: \"\\f082\";\n+}\n+.fa-camera-retro:before {\n+  content: \"\\f083\";\n+}\n+.fa-key:before {\n+  content: \"\\f084\";\n+}\n+.fa-gears:before,\n+.fa-cogs:before {\n+  content: \"\\f085\";\n+}\n+.fa-comments:before {\n+  content: \"\\f086\";\n+}\n+.fa-thumbs-o-up:before {\n+  content: \"\\f087\";\n+}\n+.fa-thumbs-o-down:before {\n+  content: \"\\f088\";\n+}\n+.fa-star-half:before {\n+  content: \"\\f089\";\n+}\n+.fa-heart-o:before {\n+  content: \"\\f08a\";\n+}\n+.fa-sign-out:before {\n+  content: \"\\f08b\";\n+}\n+.fa-linkedin-square:before {\n+  content: \"\\f08c\";\n+}\n+.fa-thumb-tack:before {\n+  content: \"\\f08d\";\n+}\n+.fa-external-link:before {\n+  content: \"\\f08e\";\n+}\n+.fa-sign-in:before {\n+  content: \"\\f090\";\n+}\n+.fa-trophy:before {\n+  content: \"\\f091\";\n+}\n+.fa-github-square:before {\n+  content: \"\\f092\";\n+}\n+.fa-upload:before {\n+  content: \"\\f093\";\n+}\n+.fa-lemon-o:before {\n+  content: \"\\f094\";\n+}\n+.fa-phone:before {\n+  content: \"\\f095\";\n+}\n+.fa-square-o:before {\n+  content: \"\\f096\";\n+}\n+.fa-bookmark-o:before {\n+  content: \"\\f097\";\n+}\n+.fa-phone-square:before {\n+  content: \"\\f098\";\n+}\n+.fa-twitter:before {\n+  content: \"\\f099\";\n+}\n+.fa-facebook:before {\n+  content: \"\\f09a\";\n+}\n+.fa-github:before {\n+  content: \"\\f09b\";\n+}\n+.fa-unlock:before {\n+  content: \"\\f09c\";\n+}\n+.fa-credit-card:before {\n+  content: \"\\f09d\";\n+}\n+.fa-rss:before {\n+  content: \"\\f09e\";\n+}\n+.fa-hdd-o:before {\n+  content: \"\\f0a0\";\n+}\n+.fa-bullhorn:before {\n+  content: \"\\f0a1\";\n+}\n+.fa-bell:before {\n+  content: \"\\f0f3\";\n+}\n+.fa-certificate:before {\n+  content: \"\\f0a3\";\n+}\n+.fa-hand-o-right:before {\n+  content: \"\\f0a4\";\n+}\n+.fa-hand-o-left:before {\n+  content: \"\\f0a5\";\n+}\n+.fa-hand-o-up:before {\n+  content: \"\\f0a6\";\n+}\n+.fa-hand-o-down:before {\n+  content: \"\\f0a7\";\n+}\n+.fa-arrow-circle-left:before {\n+  content: \"\\f0a8\";\n+}\n+.fa-arrow-circle-right:before {\n+  content: \"\\f0a9\";\n+}\n+.fa-arrow-circle-up:before {\n+  content: \"\\f0aa\";\n+}\n+.fa-arrow-circle-down:before {\n+  content: \"\\f0ab\";\n+}\n+.fa-globe:before {\n+  content: \"\\f0ac\";\n+}\n+.fa-wrench:before {\n+  content: \"\\f0ad\";\n+}\n+.fa-tasks:before {\n+  content: \"\\f0ae\";\n+}\n+.fa-filter:before {\n+  content: \"\\f0b0\";\n+}\n+.fa-briefcase:before {\n+  content: \"\\f0b1\";\n+}\n+.fa-arrows-alt:before {\n+  content: \"\\f0b2\";\n+}\n+.fa-group:before,\n+.fa-users:before {\n+  content: \"\\f0c0\";\n+}\n+.fa-chain:before,\n+.fa-link:before {\n+  content: \"\\f0c1\";\n+}\n+.fa-cloud:before {\n+  content: \"\\f0c2\";\n+}\n+.fa-flask:before {\n+  content: \"\\f0c3\";\n+}\n+.fa-cut:before,\n+.fa-scissors:before {\n+  content: \"\\f0c4\";\n+}\n+.fa-copy:before,\n+.fa-files-o:before {\n+  content: \"\\f0c5\";\n+}\n+.fa-paperclip:before {\n+  content: \"\\f0c6\";\n+}\n+.fa-save:before,\n+.fa-floppy-o:before {\n+  content: \"\\f0c7\";\n+}\n+.fa-square:before {\n+  content: \"\\f0c8\";\n+}\n+.fa-bars:before {\n+  content: \"\\f0c9\";\n+}\n+.fa-list-ul:before {\n+  content: \"\\f0ca\";\n+}\n+.fa-list-ol:before {\n+  content: \"\\f0cb\";\n+}\n+.fa-strikethrough:before {\n+  content: \"\\f0cc\";\n+}\n+.fa-underline:before {\n+  content: \"\\f0cd\";\n+}\n+.fa-table:before {\n+  content: \"\\f0ce\";\n+}\n+.fa-magic:before {\n+  content: \"\\f0d0\";\n+}\n+.fa-truck:before {\n+  content: \"\\f0d1\";\n+}\n+.fa-pinterest:before {\n+  content: \"\\f0d2\";\n+}\n+.fa-pinterest-square:before {\n+  content: \"\\f0d3\";\n+}\n+.fa-google-plus-square:before {\n+  content: \"\\f0d4\";\n+}\n+.fa-google-plus:before {\n+  content: \"\\f0d5\";\n+}\n+.fa-money:before {\n+  content: \"\\f0d6\";\n+}\n+.fa-caret-down:before {\n+  content: \"\\f0d7\";\n+}\n+.fa-caret-up:before {\n+  content: \"\\f0d8\";\n+}\n+.fa-caret-left:before {\n+  content: \"\\f0d9\";\n+}\n+.fa-caret-right:before {\n+  content: \"\\f0da\";\n+}\n+.fa-columns:before {\n+  content: \"\\f0db\";\n+}\n+.fa-unsorted:before,\n+.fa-sort:before {\n+  content: \"\\f0dc\";\n+}\n+.fa-sort-down:before,\n+.fa-sort-asc:before {\n+  content: \"\\f0dd\";\n+}\n+.fa-sort-up:before,\n+.fa-sort-desc:before {\n+  content: \"\\f0de\";\n+}\n+.fa-envelope:before {\n+  content: \"\\f0e0\";\n+}\n+.fa-linkedin:before {\n+  content: \"\\f0e1\";\n+}\n+.fa-rotate-left:before,\n+.fa-undo:before {\n+  content: \"\\f0e2\";\n+}\n+.fa-legal:before,\n+.fa-gavel:before {\n+  content: \"\\f0e3\";\n+}\n+.fa-dashboard:before,\n+.fa-tachometer:before {\n+  content: \"\\f0e4\";\n+}\n+.fa-comment-o:before {\n+  content: \"\\f0e5\";\n+}\n+.fa-comments-o:before {\n+  content: \"\\f0e6\";\n+}\n+.fa-flash:before,\n+.fa-bolt:before {\n+  content: \"\\f0e7\";\n+}\n+.fa-sitemap:before {\n+  content: \"\\f0e8\";\n+}\n+.fa-umbrella:before {\n+  content: \"\\f0e9\";\n+}\n+.fa-paste:before,\n+.fa-clipboard:before {\n+  content: \"\\f0ea\";\n+}\n+.fa-lightbulb-o:before {\n+  content: \"\\f0eb\";\n+}\n+.fa-exchange:before {\n+  content: \"\\f0ec\";\n+}\n+.fa-cloud-download:before {\n+  content: \"\\f0ed\";\n+}\n+.fa-cloud-upload:before {\n+  content: \"\\f0ee\";\n+}\n+.fa-user-md:before {\n+  content: \"\\f0f0\";\n+}\n+.fa-stethoscope:before {\n+  content: \"\\f0f1\";\n+}\n+.fa-suitcase:before {\n+  content: \"\\f0f2\";\n+}\n+.fa-bell-o:before {\n+  content: \"\\f0a2\";\n+}\n+.fa-coffee:before {\n+  content: \"\\f0f4\";\n+}\n+.fa-cutlery:before {\n+  content: \"\\f0f5\";\n+}\n+.fa-file-text-o:before {\n+  content: \"\\f0f6\";\n+}\n+.fa-building-o:before {\n+  content: \"\\f0f7\";\n+}\n+.fa-hospital-o:before {\n+  content: \"\\f0f8\";\n+}\n+.fa-ambulance:before {\n+  content: \"\\f0f9\";\n+}\n+.fa-medkit:before {\n+  content: \"\\f0fa\";\n+}\n+.fa-fighter-jet:before {\n+  content: \"\\f0fb\";\n+}\n+.fa-beer:before {\n+  content: \"\\f0fc\";\n+}\n+.fa-h-square:before {\n+  content: \"\\f0fd\";\n+}\n+.fa-plus-square:before {\n+  content: \"\\f0fe\";\n+}\n+.fa-angle-double-left:before {\n+  content: \"\\f100\";\n+}\n+.fa-angle-double-right:before {\n+  content: \"\\f101\";\n+}\n+.fa-angle-double-up:before {\n+  content: \"\\f102\";\n+}\n+.fa-angle-double-down:before {\n+  content: \"\\f103\";\n+}\n+.fa-angle-left:before {\n+  content: \"\\f104\";\n+}\n+.fa-angle-right:before {\n+  content: \"\\f105\";\n+}\n+.fa-angle-up:before {\n+  content: \"\\f106\";\n+}\n+.fa-angle-down:before {\n+  content: \"\\f107\";\n+}\n+.fa-desktop:before {\n+  content: \"\\f108\";\n+}\n+.fa-laptop:before {\n+  content: \"\\f109\";\n+}\n+.fa-tablet:before {\n+  content: \"\\f10a\";\n+}\n+.fa-mobile-phone:before,\n+.fa-mobile:before {\n+  content: \"\\f10b\";\n+}\n+.fa-circle-o:before {\n+  content: \"\\f10c\";\n+}\n+.fa-quote-left:before {\n+  content: \"\\f10d\";\n+}\n+.fa-quote-right:before {\n+  content: \"\\f10e\";\n+}\n+.fa-spinner:before {\n+  content: \"\\f110\";\n+}\n+.fa-circle:before {\n+  content: \"\\f111\";\n+}\n+.fa-mail-reply:before,\n+.fa-reply:before {\n+  content: \"\\f112\";\n+}\n+.fa-github-alt:before {\n+  content: \"\\f113\";\n+}\n+.fa-folder-o:before {\n+  content: \"\\f114\";\n+}\n+.fa-folder-open-o:before {\n+  content: \"\\f115\";\n+}\n+.fa-smile-o:before {\n+  content: \"\\f118\";\n+}\n+.fa-frown-o:before {\n+  content: \"\\f119\";\n+}\n+.fa-meh-o:before {\n+  content: \"\\f11a\";\n+}\n+.fa-gamepad:before {\n+  content: \"\\f11b\";\n+}\n+.fa-keyboard-o:before {\n+  content: \"\\f11c\";\n+}\n+.fa-flag-o:before {\n+  content: \"\\f11d\";\n+}\n+.fa-flag-checkered:before {\n+  content: \"\\f11e\";\n+}\n+.fa-terminal:before {\n+  content: \"\\f120\";\n+}\n+.fa-code:before {\n+  content: \"\\f121\";\n+}\n+.fa-reply-all:before {\n+  content: \"\\f122\";\n+}\n+.fa-mail-reply-all:before {\n+  content: \"\\f122\";\n+}\n+.fa-star-half-empty:before,\n+.fa-star-half-full:before,\n+.fa-star-half-o:before {\n+  content: \"\\f123\";\n+}\n+.fa-location-arrow:before {\n+  content: \"\\f124\";\n+}\n+.fa-crop:before {\n+  content: \"\\f125\";\n+}\n+.fa-code-fork:before {\n+  content: \"\\f126\";\n+}\n+.fa-unlink:before,\n+.fa-chain-broken:before {\n+  content: \"\\f127\";\n+}\n+.fa-question:before {\n+  content: \"\\f128\";\n+}\n+.fa-info:before {\n+  content: \"\\f129\";\n+}\n+.fa-exclamation:before {\n+  content: \"\\f12a\";\n+}\n+.fa-superscript:before {\n+  content: \"\\f12b\";\n+}\n+.fa-subscript:before {\n+  content: \"\\f12c\";\n+}\n+.fa-eraser:before {\n+  content: \"\\f12d\";\n+}\n+.fa-puzzle-piece:before {\n+  content: \"\\f12e\";\n+}\n+.fa-microphone:before {\n+  content: \"\\f130\";\n+}\n+.fa-microphone-slash:before {\n+  content: \"\\f131\";\n+}\n+.fa-shield:before {\n+  content: \"\\f132\";\n+}\n+.fa-calendar-o:before {\n+  content: \"\\f133\";\n+}\n+.fa-fire-extinguisher:before {\n+  content: \"\\f134\";\n+}\n+.fa-rocket:before {\n+  content: \"\\f135\";\n+}\n+.fa-maxcdn:before {\n+  content: \"\\f136\";\n+}\n+.fa-chevron-circle-left:before {\n+  content: \"\\f137\";\n+}\n+.fa-chevron-circle-right:before {\n+  content: \"\\f138\";\n+}\n+.fa-chevron-circle-up:before {\n+  content: \"\\f139\";\n+}\n+.fa-chevron-circle-down:before {\n+  content: \"\\f13a\";\n+}\n+.fa-html5:before {\n+  content: \"\\f13b\";\n+}\n+.fa-css3:before {\n+  content: \"\\f13c\";\n+}\n+.fa-anchor:before {\n+  content: \"\\f13d\";\n+}\n+.fa-unlock-alt:before {\n+  content: \"\\f13e\";\n+}\n+.fa-bullseye:before {\n+  content: \"\\f140\";\n+}\n+.fa-ellipsis-h:before {\n+  content: \"\\f141\";\n+}\n+.fa-ellipsis-v:before {\n+  content: \"\\f142\";\n+}\n+.fa-rss-square:before {\n+  content: \"\\f143\";\n+}\n+.fa-play-circle:before {\n+  content: \"\\f144\";\n+}\n+.fa-ticket:before {\n+  content: \"\\f145\";\n+}\n+.fa-minus-square:before {\n+  content: \"\\f146\";\n+}\n+.fa-minus-square-o:before {\n+  content: \"\\f147\";\n+}\n+.fa-level-up:before {\n+  content: \"\\f148\";\n+}\n+.fa-level-down:before {\n+  content: \"\\f149\";\n+}\n+.fa-check-square:before {\n+  content: \"\\f14a\";\n+}\n+.fa-pencil-square:before {\n+  content: \"\\f14b\";\n+}\n+.fa-external-link-square:before {\n+  content: \"\\f14c\";\n+}\n+.fa-share-square:before {\n+  content: \"\\f14d\";\n+}\n+.fa-compass:before {\n+  content: \"\\f14e\";\n+}\n+.fa-toggle-down:before,\n+.fa-caret-square-o-down:before {\n+  content: \"\\f150\";\n+}\n+.fa-toggle-up:before,\n+.fa-caret-square-o-up:before {\n+  content: \"\\f151\";\n+}\n+.fa-toggle-right:before,\n+.fa-caret-square-o-right:before {\n+  content: \"\\f152\";\n+}\n+.fa-euro:before,\n+.fa-eur:before {\n+  content: \"\\f153\";\n+}\n+.fa-gbp:before {\n+  content: \"\\f154\";\n+}\n+.fa-dollar:before,\n+.fa-usd:before {\n+  content: \"\\f155\";\n+}\n+.fa-rupee:before,\n+.fa-inr:before {\n+  content: \"\\f156\";\n+}\n+.fa-cny:before,\n+.fa-rmb:before,\n+.fa-yen:before,\n+.fa-jpy:before {\n+  content: \"\\f157\";\n+}\n+.fa-ruble:before,\n+.fa-rouble:before,\n+.fa-rub:before {\n+  content: \"\\f158\";\n+}\n+.fa-won:before,\n+.fa-krw:before {\n+  content: \"\\f159\";\n+}\n+.fa-bitcoin:before,\n+.fa-btc:before {\n+  content: \"\\f15a\";\n+}\n+.fa-file:before {\n+  content: \"\\f15b\";\n+}\n+.fa-file-text:before {\n+  content: \"\\f15c\";\n+}\n+.fa-sort-alpha-asc:before {\n+  content: \"\\f15d\";\n+}\n+.fa-sort-alpha-desc:before {\n+  content: \"\\f15e\";\n+}\n+.fa-sort-amount-asc:before {\n+  content: \"\\f160\";\n+}\n+.fa-sort-amount-desc:before {\n+  content: \"\\f161\";\n+}\n+.fa-sort-numeric-asc:before {\n+  content: \"\\f162\";\n+}\n+.fa-sort-numeric-desc:before {\n+  content: \"\\f163\";\n+}\n+.fa-thumbs-up:before {\n+  content: \"\\f164\";\n+}\n+.fa-thumbs-down:before {\n+  content: \"\\f165\";\n+}\n+.fa-youtube-square:before {\n+  content: \"\\f166\";\n+}\n+.fa-youtube:before {\n+  content: \"\\f167\";\n+}\n+.fa-xing:before {\n+  content: \"\\f168\";\n+}\n+.fa-xing-square:before {\n+  content: \"\\f169\";\n+}\n+.fa-youtube-play:before {\n+  content: \"\\f16a\";\n+}\n+.fa-dropbox:before {\n+  content: \"\\f16b\";\n+}\n+.fa-stack-overflow:before {\n+  content: \"\\f16c\";\n+}\n+.fa-instagram:before {\n+  content: \"\\f16d\";\n+}\n+.fa-flickr:before {\n+  content: \"\\f16e\";\n+}\n+.fa-adn:before {\n+  content: \"\\f170\";\n+}\n+.fa-bitbucket:before {\n+  content: \"\\f171\";\n+}\n+.fa-bitbucket-square:before {\n+  content: \"\\f172\";\n+}\n+.fa-tumblr:before {\n+  content: \"\\f173\";\n+}\n+.fa-tumblr-square:before {\n+  content: \"\\f174\";\n+}\n+.fa-long-arrow-down:before {\n+  content: \"\\f175\";\n+}\n+.fa-long-arrow-up:before {\n+  content: \"\\f176\";\n+}\n+.fa-long-arrow-left:before {\n+  content: \"\\f177\";\n+}\n+.fa-long-arrow-right:before {\n+  content: \"\\f178\";\n+}\n+.fa-apple:before {\n+  content: \"\\f179\";\n+}\n+.fa-windows:before {\n+  content: \"\\f17a\";\n+}\n+.fa-android:before {\n+  content: \"\\f17b\";\n+}\n+.fa-linux:before {\n+  content: \"\\f17c\";\n+}\n+.fa-dribbble:before {\n+  content: \"\\f17d\";\n+}\n+.fa-skype:before {\n+  content: \"\\f17e\";\n+}\n+.fa-foursquare:before {\n+  content: \"\\f180\";\n+}\n+.fa-trello:before {\n+  content: \"\\f181\";\n+}\n+.fa-female:before {\n+  content: \"\\f182\";\n+}\n+.fa-male:before {\n+  content: \"\\f183\";\n+}\n+.fa-gittip:before {\n+  content: \"\\f184\";\n+}\n+.fa-sun-o:before {\n+  content: \"\\f185\";\n+}\n+.fa-moon-o:before {\n+  content: \"\\f186\";\n+}\n+.fa-archive:before {\n+  content: \"\\f187\";\n+}\n+.fa-bug:before {\n+  content: \"\\f188\";\n+}\n+.fa-vk:before {\n+  content: \"\\f189\";\n+}\n+.fa-weibo:before {\n+  content: \"\\f18a\";\n+}\n+.fa-renren:before {\n+  content: \"\\f18b\";\n+}\n+.fa-pagelines:before {\n+  content: \"\\f18c\";\n+}\n+.fa-stack-exchange:before {\n+  content: \"\\f18d\";\n+}\n+.fa-arrow-circle-o-right:before {\n+  content: \"\\f18e\";\n+}\n+.fa-arrow-circle-o-left:before {\n+  content: \"\\f190\";\n+}\n+.fa-toggle-left:before,\n+.fa-caret-square-o-left:before {\n+  content: \"\\f191\";\n+}\n+.fa-dot-circle-o:before {\n+  content: \"\\f192\";\n+}\n+.fa-wheelchair:before {\n+  content: \"\\f193\";\n+}\n+.fa-vimeo-square:before {\n+  content: \"\\f194\";\n+}\n+.fa-turkish-lira:before,\n+.fa-try:before {\n+  content: \"\\f195\";\n+}\n+.fa-plus-square-o:before {\n+  content: \"\\f196\";\n+}"
        },
        {
            "sha": "449d6ac551a286a868c5f102b303dbf2ac527552",
            "filename": "uaa/src/main/webapp/vendor/font-awesome/css/font-awesome.min.css",
            "status": "added",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fvendor%2Ffont-awesome%2Fcss%2Ffont-awesome.min.css",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fvendor%2Ffont-awesome%2Fcss%2Ffont-awesome.min.css",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2Fvendor%2Ffont-awesome%2Fcss%2Ffont-awesome.min.css?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a",
            "patch": "@@ -0,0 +1,4 @@\n+/*!\n+ *  Font Awesome 4.0.3 by @davegandy - http://fontawesome.io - @fontawesome\n+ *  License - http://fontawesome.io/license (Font: SIL OFL 1.1, CSS: MIT License)\n+ */@font-face{font-family:'FontAwesome';src:url('../fonts/fontawesome-webfont.eot?v=4.0.3');src:url('../fonts/fontawesome-webfont.eot?#iefix&v=4.0.3') format('embedded-opentype'),url('../fonts/fontawesome-webfont.woff?v=4.0.3') format('woff'),url('../fonts/fontawesome-webfont.ttf?v=4.0.3') format('truetype'),url('../fonts/fontawesome-webfont.svg?v=4.0.3#fontawesomeregular') format('svg');font-weight:normal;font-style:normal}.fa{display:inline-block;font-family:FontAwesome;font-style:normal;font-weight:normal;line-height:1;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.fa-lg{font-size:1.3333333333333333em;line-height:.75em;vertical-align:-15%}.fa-2x{font-size:2em}.fa-3x{font-size:3em}.fa-4x{font-size:4em}.fa-5x{font-size:5em}.fa-fw{width:1.2857142857142858em;text-align:center}.fa-ul{padding-left:0;margin-left:2.142857142857143em;list-style-type:none}.fa-ul>li{position:relative}.fa-li{position:absolute;left:-2.142857142857143em;width:2.142857142857143em;top:.14285714285714285em;text-align:center}.fa-li.fa-lg{left:-1.8571428571428572em}.fa-border{padding:.2em .25em .15em;border:solid .08em #eee;border-radius:.1em}.pull-right{float:right}.pull-left{float:left}.fa.pull-left{margin-right:.3em}.fa.pull-right{margin-left:.3em}.fa-spin{-webkit-animation:spin 2s infinite linear;-moz-animation:spin 2s infinite linear;-o-animation:spin 2s infinite linear;animation:spin 2s infinite linear}@-moz-keyframes spin{0%{-moz-transform:rotate(0deg)}100%{-moz-transform:rotate(359deg)}}@-webkit-keyframes spin{0%{-webkit-transform:rotate(0deg)}100%{-webkit-transform:rotate(359deg)}}@-o-keyframes spin{0%{-o-transform:rotate(0deg)}100%{-o-transform:rotate(359deg)}}@-ms-keyframes spin{0%{-ms-transform:rotate(0deg)}100%{-ms-transform:rotate(359deg)}}@keyframes spin{0%{transform:rotate(0deg)}100%{transform:rotate(359deg)}}.fa-rotate-90{filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=1);-webkit-transform:rotate(90deg);-moz-transform:rotate(90deg);-ms-transform:rotate(90deg);-o-transform:rotate(90deg);transform:rotate(90deg)}.fa-rotate-180{filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=2);-webkit-transform:rotate(180deg);-moz-transform:rotate(180deg);-ms-transform:rotate(180deg);-o-transform:rotate(180deg);transform:rotate(180deg)}.fa-rotate-270{filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=3);-webkit-transform:rotate(270deg);-moz-transform:rotate(270deg);-ms-transform:rotate(270deg);-o-transform:rotate(270deg);transform:rotate(270deg)}.fa-flip-horizontal{filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=0,mirror=1);-webkit-transform:scale(-1,1);-moz-transform:scale(-1,1);-ms-transform:scale(-1,1);-o-transform:scale(-1,1);transform:scale(-1,1)}.fa-flip-vertical{filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=2,mirror=1);-webkit-transform:scale(1,-1);-moz-transform:scale(1,-1);-ms-transform:scale(1,-1);-o-transform:scale(1,-1);transform:scale(1,-1)}.fa-stack{position:relative;display:inline-block;width:2em;height:2em;line-height:2em;vertical-align:middle}.fa-stack-1x,.fa-stack-2x{position:absolute;left:0;width:100%;text-align:center}.fa-stack-1x{line-height:inherit}.fa-stack-2x{font-size:2em}.fa-inverse{color:#fff}.fa-glass:before{content:\"\\f000\"}.fa-music:before{content:\"\\f001\"}.fa-search:before{content:\"\\f002\"}.fa-envelope-o:before{content:\"\\f003\"}.fa-heart:before{content:\"\\f004\"}.fa-star:before{content:\"\\f005\"}.fa-star-o:before{content:\"\\f006\"}.fa-user:before{content:\"\\f007\"}.fa-film:before{content:\"\\f008\"}.fa-th-large:before{content:\"\\f009\"}.fa-th:before{content:\"\\f00a\"}.fa-th-list:before{content:\"\\f00b\"}.fa-check:before{content:\"\\f00c\"}.fa-times:before{content:\"\\f00d\"}.fa-search-plus:before{content:\"\\f00e\"}.fa-search-minus:before{content:\"\\f010\"}.fa-power-off:before{content:\"\\f011\"}.fa-signal:before{content:\"\\f012\"}.fa-gear:before,.fa-cog:before{content:\"\\f013\"}.fa-trash-o:before{content:\"\\f014\"}.fa-home:before{content:\"\\f015\"}.fa-file-o:before{content:\"\\f016\"}.fa-clock-o:before{content:\"\\f017\"}.fa-road:before{content:\"\\f018\"}.fa-download:before{content:\"\\f019\"}.fa-arrow-circle-o-down:before{content:\"\\f01a\"}.fa-arrow-circle-o-up:before{content:\"\\f01b\"}.fa-inbox:before{content:\"\\f01c\"}.fa-play-circle-o:before{content:\"\\f01d\"}.fa-rotate-right:before,.fa-repeat:before{content:\"\\f01e\"}.fa-refresh:before{content:\"\\f021\"}.fa-list-alt:before{content:\"\\f022\"}.fa-lock:before{content:\"\\f023\"}.fa-flag:before{content:\"\\f024\"}.fa-headphones:before{content:\"\\f025\"}.fa-volume-off:before{content:\"\\f026\"}.fa-volume-down:before{content:\"\\f027\"}.fa-volume-up:before{content:\"\\f028\"}.fa-qrcode:before{content:\"\\f029\"}.fa-barcode:before{content:\"\\f02a\"}.fa-tag:before{content:\"\\f02b\"}.fa-tags:before{content:\"\\f02c\"}.fa-book:before{content:\"\\f02d\"}.fa-bookmark:before{content:\"\\f02e\"}.fa-print:before{content:\"\\f02f\"}.fa-camera:before{content:\"\\f030\"}.fa-font:before{content:\"\\f031\"}.fa-bold:before{content:\"\\f032\"}.fa-italic:before{content:\"\\f033\"}.fa-text-height:before{content:\"\\f034\"}.fa-text-width:before{content:\"\\f035\"}.fa-align-left:before{content:\"\\f036\"}.fa-align-center:before{content:\"\\f037\"}.fa-align-right:before{content:\"\\f038\"}.fa-align-justify:before{content:\"\\f039\"}.fa-list:before{content:\"\\f03a\"}.fa-dedent:before,.fa-outdent:before{content:\"\\f03b\"}.fa-indent:before{content:\"\\f03c\"}.fa-video-camera:before{content:\"\\f03d\"}.fa-picture-o:before{content:\"\\f03e\"}.fa-pencil:before{content:\"\\f040\"}.fa-map-marker:before{content:\"\\f041\"}.fa-adjust:before{content:\"\\f042\"}.fa-tint:before{content:\"\\f043\"}.fa-edit:before,.fa-pencil-square-o:before{content:\"\\f044\"}.fa-share-square-o:before{content:\"\\f045\"}.fa-check-square-o:before{content:\"\\f046\"}.fa-arrows:before{content:\"\\f047\"}.fa-step-backward:before{content:\"\\f048\"}.fa-fast-backward:before{content:\"\\f049\"}.fa-backward:before{content:\"\\f04a\"}.fa-play:before{content:\"\\f04b\"}.fa-pause:before{content:\"\\f04c\"}.fa-stop:before{content:\"\\f04d\"}.fa-forward:before{content:\"\\f04e\"}.fa-fast-forward:before{content:\"\\f050\"}.fa-step-forward:before{content:\"\\f051\"}.fa-eject:before{content:\"\\f052\"}.fa-chevron-left:before{content:\"\\f053\"}.fa-chevron-right:before{content:\"\\f054\"}.fa-plus-circle:before{content:\"\\f055\"}.fa-minus-circle:before{content:\"\\f056\"}.fa-times-circle:before{content:\"\\f057\"}.fa-check-circle:before{content:\"\\f058\"}.fa-question-circle:before{content:\"\\f059\"}.fa-info-circle:before{content:\"\\f05a\"}.fa-crosshairs:before{content:\"\\f05b\"}.fa-times-circle-o:before{content:\"\\f05c\"}.fa-check-circle-o:before{content:\"\\f05d\"}.fa-ban:before{content:\"\\f05e\"}.fa-arrow-left:before{content:\"\\f060\"}.fa-arrow-right:before{content:\"\\f061\"}.fa-arrow-up:before{content:\"\\f062\"}.fa-arrow-down:before{content:\"\\f063\"}.fa-mail-forward:before,.fa-share:before{content:\"\\f064\"}.fa-expand:before{content:\"\\f065\"}.fa-compress:before{content:\"\\f066\"}.fa-plus:before{content:\"\\f067\"}.fa-minus:before{content:\"\\f068\"}.fa-asterisk:before{content:\"\\f069\"}.fa-exclamation-circle:before{content:\"\\f06a\"}.fa-gift:before{content:\"\\f06b\"}.fa-leaf:before{content:\"\\f06c\"}.fa-fire:before{content:\"\\f06d\"}.fa-eye:before{content:\"\\f06e\"}.fa-eye-slash:before{content:\"\\f070\"}.fa-warning:before,.fa-exclamation-triangle:before{content:\"\\f071\"}.fa-plane:before{content:\"\\f072\"}.fa-calendar:before{content:\"\\f073\"}.fa-random:before{content:\"\\f074\"}.fa-comment:before{content:\"\\f075\"}.fa-magnet:before{content:\"\\f076\"}.fa-chevron-up:before{content:\"\\f077\"}.fa-chevron-down:before{content:\"\\f078\"}.fa-retweet:before{content:\"\\f079\"}.fa-shopping-cart:before{content:\"\\f07a\"}.fa-folder:before{content:\"\\f07b\"}.fa-folder-open:before{content:\"\\f07c\"}.fa-arrows-v:before{content:\"\\f07d\"}.fa-arrows-h:before{content:\"\\f07e\"}.fa-bar-chart-o:before{content:\"\\f080\"}.fa-twitter-square:before{content:\"\\f081\"}.fa-facebook-square:before{content:\"\\f082\"}.fa-camera-retro:before{content:\"\\f083\"}.fa-key:before{content:\"\\f084\"}.fa-gears:before,.fa-cogs:before{content:\"\\f085\"}.fa-comments:before{content:\"\\f086\"}.fa-thumbs-o-up:before{content:\"\\f087\"}.fa-thumbs-o-down:before{content:\"\\f088\"}.fa-star-half:before{content:\"\\f089\"}.fa-heart-o:before{content:\"\\f08a\"}.fa-sign-out:before{content:\"\\f08b\"}.fa-linkedin-square:before{content:\"\\f08c\"}.fa-thumb-tack:before{content:\"\\f08d\"}.fa-external-link:before{content:\"\\f08e\"}.fa-sign-in:before{content:\"\\f090\"}.fa-trophy:before{content:\"\\f091\"}.fa-github-square:before{content:\"\\f092\"}.fa-upload:before{content:\"\\f093\"}.fa-lemon-o:before{content:\"\\f094\"}.fa-phone:before{content:\"\\f095\"}.fa-square-o:before{content:\"\\f096\"}.fa-bookmark-o:before{content:\"\\f097\"}.fa-phone-square:before{content:\"\\f098\"}.fa-twitter:before{content:\"\\f099\"}.fa-facebook:before{content:\"\\f09a\"}.fa-github:before{content:\"\\f09b\"}.fa-unlock:before{content:\"\\f09c\"}.fa-credit-card:before{content:\"\\f09d\"}.fa-rss:before{content:\"\\f09e\"}.fa-hdd-o:before{content:\"\\f0a0\"}.fa-bullhorn:before{content:\"\\f0a1\"}.fa-bell:before{content:\"\\f0f3\"}.fa-certificate:before{content:\"\\f0a3\"}.fa-hand-o-right:before{content:\"\\f0a4\"}.fa-hand-o-left:before{content:\"\\f0a5\"}.fa-hand-o-up:before{content:\"\\f0a6\"}.fa-hand-o-down:before{content:\"\\f0a7\"}.fa-arrow-circle-left:before{content:\"\\f0a8\"}.fa-arrow-circle-right:before{content:\"\\f0a9\"}.fa-arrow-circle-up:before{content:\"\\f0aa\"}.fa-arrow-circle-down:before{content:\"\\f0ab\"}.fa-globe:before{content:\"\\f0ac\"}.fa-wrench:before{content:\"\\f0ad\"}.fa-tasks:before{content:\"\\f0ae\"}.fa-filter:before{content:\"\\f0b0\"}.fa-briefcase:before{content:\"\\f0b1\"}.fa-arrows-alt:before{content:\"\\f0b2\"}.fa-group:before,.fa-users:before{content:\"\\f0c0\"}.fa-chain:before,.fa-link:before{content:\"\\f0c1\"}.fa-cloud:before{content:\"\\f0c2\"}.fa-flask:before{content:\"\\f0c3\"}.fa-cut:before,.fa-scissors:before{content:\"\\f0c4\"}.fa-copy:before,.fa-files-o:before{content:\"\\f0c5\"}.fa-paperclip:before{content:\"\\f0c6\"}.fa-save:before,.fa-floppy-o:before{content:\"\\f0c7\"}.fa-square:before{content:\"\\f0c8\"}.fa-bars:before{content:\"\\f0c9\"}.fa-list-ul:before{content:\"\\f0ca\"}.fa-list-ol:before{content:\"\\f0cb\"}.fa-strikethrough:before{content:\"\\f0cc\"}.fa-underline:before{content:\"\\f0cd\"}.fa-table:before{content:\"\\f0ce\"}.fa-magic:before{content:\"\\f0d0\"}.fa-truck:before{content:\"\\f0d1\"}.fa-pinterest:before{content:\"\\f0d2\"}.fa-pinterest-square:before{content:\"\\f0d3\"}.fa-google-plus-square:before{content:\"\\f0d4\"}.fa-google-plus:before{content:\"\\f0d5\"}.fa-money:before{content:\"\\f0d6\"}.fa-caret-down:before{content:\"\\f0d7\"}.fa-caret-up:before{content:\"\\f0d8\"}.fa-caret-left:before{content:\"\\f0d9\"}.fa-caret-right:before{content:\"\\f0da\"}.fa-columns:before{content:\"\\f0db\"}.fa-unsorted:before,.fa-sort:before{content:\"\\f0dc\"}.fa-sort-down:before,.fa-sort-asc:before{content:\"\\f0dd\"}.fa-sort-up:before,.fa-sort-desc:before{content:\"\\f0de\"}.fa-envelope:before{content:\"\\f0e0\"}.fa-linkedin:before{content:\"\\f0e1\"}.fa-rotate-left:before,.fa-undo:before{content:\"\\f0e2\"}.fa-legal:before,.fa-gavel:before{content:\"\\f0e3\"}.fa-dashboard:before,.fa-tachometer:before{content:\"\\f0e4\"}.fa-comment-o:before{content:\"\\f0e5\"}.fa-comments-o:before{content:\"\\f0e6\"}.fa-flash:before,.fa-bolt:before{content:\"\\f0e7\"}.fa-sitemap:before{content:\"\\f0e8\"}.fa-umbrella:before{content:\"\\f0e9\"}.fa-paste:before,.fa-clipboard:before{content:\"\\f0ea\"}.fa-lightbulb-o:before{content:\"\\f0eb\"}.fa-exchange:before{content:\"\\f0ec\"}.fa-cloud-download:before{content:\"\\f0ed\"}.fa-cloud-upload:before{content:\"\\f0ee\"}.fa-user-md:before{content:\"\\f0f0\"}.fa-stethoscope:before{content:\"\\f0f1\"}.fa-suitcase:before{content:\"\\f0f2\"}.fa-bell-o:before{content:\"\\f0a2\"}.fa-coffee:before{content:\"\\f0f4\"}.fa-cutlery:before{content:\"\\f0f5\"}.fa-file-text-o:before{content:\"\\f0f6\"}.fa-building-o:before{content:\"\\f0f7\"}.fa-hospital-o:before{content:\"\\f0f8\"}.fa-ambulance:before{content:\"\\f0f9\"}.fa-medkit:before{content:\"\\f0fa\"}.fa-fighter-jet:before{content:\"\\f0fb\"}.fa-beer:before{content:\"\\f0fc\"}.fa-h-square:before{content:\"\\f0fd\"}.fa-plus-square:before{content:\"\\f0fe\"}.fa-angle-double-left:before{content:\"\\f100\"}.fa-angle-double-right:before{content:\"\\f101\"}.fa-angle-double-up:before{content:\"\\f102\"}.fa-angle-double-down:before{content:\"\\f103\"}.fa-angle-left:before{content:\"\\f104\"}.fa-angle-right:before{content:\"\\f105\"}.fa-angle-up:before{content:\"\\f106\"}.fa-angle-down:before{content:\"\\f107\"}.fa-desktop:before{content:\"\\f108\"}.fa-laptop:before{content:\"\\f109\"}.fa-tablet:before{content:\"\\f10a\"}.fa-mobile-phone:before,.fa-mobile:before{content:\"\\f10b\"}.fa-circle-o:before{content:\"\\f10c\"}.fa-quote-left:before{content:\"\\f10d\"}.fa-quote-right:before{content:\"\\f10e\"}.fa-spinner:before{content:\"\\f110\"}.fa-circle:before{content:\"\\f111\"}.fa-mail-reply:before,.fa-reply:before{content:\"\\f112\"}.fa-github-alt:before{content:\"\\f113\"}.fa-folder-o:before{content:\"\\f114\"}.fa-folder-open-o:before{content:\"\\f115\"}.fa-smile-o:before{content:\"\\f118\"}.fa-frown-o:before{content:\"\\f119\"}.fa-meh-o:before{content:\"\\f11a\"}.fa-gamepad:before{content:\"\\f11b\"}.fa-keyboard-o:before{content:\"\\f11c\"}.fa-flag-o:before{content:\"\\f11d\"}.fa-flag-checkered:before{content:\"\\f11e\"}.fa-terminal:before{content:\"\\f120\"}.fa-code:before{content:\"\\f121\"}.fa-reply-all:before{content:\"\\f122\"}.fa-mail-reply-all:before{content:\"\\f122\"}.fa-star-half-empty:before,.fa-star-half-full:before,.fa-star-half-o:before{content:\"\\f123\"}.fa-location-arrow:before{content:\"\\f124\"}.fa-crop:before{content:\"\\f125\"}.fa-code-fork:before{content:\"\\f126\"}.fa-unlink:before,.fa-chain-broken:before{content:\"\\f127\"}.fa-question:before{content:\"\\f128\"}.fa-info:before{content:\"\\f129\"}.fa-exclamation:before{content:\"\\f12a\"}.fa-superscript:before{content:\"\\f12b\"}.fa-subscript:before{content:\"\\f12c\"}.fa-eraser:before{content:\"\\f12d\"}.fa-puzzle-piece:before{content:\"\\f12e\"}.fa-microphone:before{content:\"\\f130\"}.fa-microphone-slash:before{content:\"\\f131\"}.fa-shield:before{content:\"\\f132\"}.fa-calendar-o:before{content:\"\\f133\"}.fa-fire-extinguisher:before{content:\"\\f134\"}.fa-rocket:before{content:\"\\f135\"}.fa-maxcdn:before{content:\"\\f136\"}.fa-chevron-circle-left:before{content:\"\\f137\"}.fa-chevron-circle-right:before{content:\"\\f138\"}.fa-chevron-circle-up:before{content:\"\\f139\"}.fa-chevron-circle-down:before{content:\"\\f13a\"}.fa-html5:before{content:\"\\f13b\"}.fa-css3:before{content:\"\\f13c\"}.fa-anchor:before{content:\"\\f13d\"}.fa-unlock-alt:before{content:\"\\f13e\"}.fa-bullseye:before{content:\"\\f140\"}.fa-ellipsis-h:before{content:\"\\f141\"}.fa-ellipsis-v:before{content:\"\\f142\"}.fa-rss-square:before{content:\"\\f143\"}.fa-play-circle:before{content:\"\\f144\"}.fa-ticket:before{content:\"\\f145\"}.fa-minus-square:before{content:\"\\f146\"}.fa-minus-square-o:before{content:\"\\f147\"}.fa-level-up:before{content:\"\\f148\"}.fa-level-down:before{content:\"\\f149\"}.fa-check-square:before{content:\"\\f14a\"}.fa-pencil-square:before{content:\"\\f14b\"}.fa-external-link-square:before{content:\"\\f14c\"}.fa-share-square:before{content:\"\\f14d\"}.fa-compass:before{content:\"\\f14e\"}.fa-toggle-down:before,.fa-caret-square-o-down:before{content:\"\\f150\"}.fa-toggle-up:before,.fa-caret-square-o-up:before{content:\"\\f151\"}.fa-toggle-right:before,.fa-caret-square-o-right:before{content:\"\\f152\"}.fa-euro:before,.fa-eur:before{content:\"\\f153\"}.fa-gbp:before{content:\"\\f154\"}.fa-dollar:before,.fa-usd:before{content:\"\\f155\"}.fa-rupee:before,.fa-inr:before{content:\"\\f156\"}.fa-cny:before,.fa-rmb:before,.fa-yen:before,.fa-jpy:before{content:\"\\f157\"}.fa-ruble:before,.fa-rouble:before,.fa-rub:before{content:\"\\f158\"}.fa-won:before,.fa-krw:before{content:\"\\f159\"}.fa-bitcoin:before,.fa-btc:before{content:\"\\f15a\"}.fa-file:before{content:\"\\f15b\"}.fa-file-text:before{content:\"\\f15c\"}.fa-sort-alpha-asc:before{content:\"\\f15d\"}.fa-sort-alpha-desc:before{content:\"\\f15e\"}.fa-sort-amount-asc:before{content:\"\\f160\"}.fa-sort-amount-desc:before{content:\"\\f161\"}.fa-sort-numeric-asc:before{content:\"\\f162\"}.fa-sort-numeric-desc:before{content:\"\\f163\"}.fa-thumbs-up:before{content:\"\\f164\"}.fa-thumbs-down:before{content:\"\\f165\"}.fa-youtube-square:before{content:\"\\f166\"}.fa-youtube:before{content:\"\\f167\"}.fa-xing:before{content:\"\\f168\"}.fa-xing-square:before{content:\"\\f169\"}.fa-youtube-play:before{content:\"\\f16a\"}.fa-dropbox:before{content:\"\\f16b\"}.fa-stack-overflow:before{content:\"\\f16c\"}.fa-instagram:before{content:\"\\f16d\"}.fa-flickr:before{content:\"\\f16e\"}.fa-adn:before{content:\"\\f170\"}.fa-bitbucket:before{content:\"\\f171\"}.fa-bitbucket-square:before{content:\"\\f172\"}.fa-tumblr:before{content:\"\\f173\"}.fa-tumblr-square:before{content:\"\\f174\"}.fa-long-arrow-down:before{content:\"\\f175\"}.fa-long-arrow-up:before{content:\"\\f176\"}.fa-long-arrow-left:before{content:\"\\f177\"}.fa-long-arrow-right:before{content:\"\\f178\"}.fa-apple:before{content:\"\\f179\"}.fa-windows:before{content:\"\\f17a\"}.fa-android:before{content:\"\\f17b\"}.fa-linux:before{content:\"\\f17c\"}.fa-dribbble:before{content:\"\\f17d\"}.fa-skype:before{content:\"\\f17e\"}.fa-foursquare:before{content:\"\\f180\"}.fa-trello:before{content:\"\\f181\"}.fa-female:before{content:\"\\f182\"}.fa-male:before{content:\"\\f183\"}.fa-gittip:before{content:\"\\f184\"}.fa-sun-o:before{content:\"\\f185\"}.fa-moon-o:before{content:\"\\f186\"}.fa-archive:before{content:\"\\f187\"}.fa-bug:before{content:\"\\f188\"}.fa-vk:before{content:\"\\f189\"}.fa-weibo:before{content:\"\\f18a\"}.fa-renren:before{content:\"\\f18b\"}.fa-pagelines:before{content:\"\\f18c\"}.fa-stack-exchange:before{content:\"\\f18d\"}.fa-arrow-circle-o-right:before{content:\"\\f18e\"}.fa-arrow-circle-o-left:before{content:\"\\f190\"}.fa-toggle-left:before,.fa-caret-square-o-left:before{content:\"\\f191\"}.fa-dot-circle-o:before{content:\"\\f192\"}.fa-wheelchair:before{content:\"\\f193\"}.fa-vimeo-square:before{content:\"\\f194\"}.fa-turkish-lira:before,.fa-try:before{content:\"\\f195\"}.fa-plus-square-o:before{content:\"\\f196\"}\n\\ No newline at end of file"
        },
        {
            "sha": "8b0f54e47e1d356dcf1496942a50e228e0f1ee14",
            "filename": "uaa/src/main/webapp/vendor/font-awesome/fonts/FontAwesome.otf",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fvendor%2Ffont-awesome%2Ffonts%2FFontAwesome.otf",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fvendor%2Ffont-awesome%2Ffonts%2FFontAwesome.otf",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2Fvendor%2Ffont-awesome%2Ffonts%2FFontAwesome.otf?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a"
        },
        {
            "sha": "7c79c6a6bc9a128a2a8eaffbe49a4338625fdbc2",
            "filename": "uaa/src/main/webapp/vendor/font-awesome/fonts/fontawesome-webfont.eot",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fvendor%2Ffont-awesome%2Ffonts%2Ffontawesome-webfont.eot",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fvendor%2Ffont-awesome%2Ffonts%2Ffontawesome-webfont.eot",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2Fvendor%2Ffont-awesome%2Ffonts%2Ffontawesome-webfont.eot?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a"
        },
        {
            "sha": "45fdf33830123533459b17fbbf91735489fd6bd8",
            "filename": "uaa/src/main/webapp/vendor/font-awesome/fonts/fontawesome-webfont.svg",
            "status": "added",
            "additions": 414,
            "deletions": 0,
            "changes": 414,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fvendor%2Ffont-awesome%2Ffonts%2Ffontawesome-webfont.svg",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fvendor%2Ffont-awesome%2Ffonts%2Ffontawesome-webfont.svg",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2Fvendor%2Ffont-awesome%2Ffonts%2Ffontawesome-webfont.svg?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a"
        },
        {
            "sha": "e89738de5eaf8fca33a2f2cdc5cb4929caa62b71",
            "filename": "uaa/src/main/webapp/vendor/font-awesome/fonts/fontawesome-webfont.ttf",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fvendor%2Ffont-awesome%2Ffonts%2Ffontawesome-webfont.ttf",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fvendor%2Ffont-awesome%2Ffonts%2Ffontawesome-webfont.ttf",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2Fvendor%2Ffont-awesome%2Ffonts%2Ffontawesome-webfont.ttf?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a"
        },
        {
            "sha": "8c1748aab7a790d510fb3f42a8a8971d96efa79d",
            "filename": "uaa/src/main/webapp/vendor/font-awesome/fonts/fontawesome-webfont.woff",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fvendor%2Ffont-awesome%2Ffonts%2Ffontawesome-webfont.woff",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fvendor%2Ffont-awesome%2Ffonts%2Ffontawesome-webfont.woff",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2Fvendor%2Ffont-awesome%2Ffonts%2Ffontawesome-webfont.woff?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a"
        },
        {
            "sha": "5431cb3ff24b98641521a8779c3e270df583b564",
            "filename": "uaa/src/main/webapp/vendor/jquery/javascripts/jquery.js",
            "status": "added",
            "additions": 22,
            "deletions": 0,
            "changes": 22,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fvendor%2Fjquery%2Fjavascripts%2Fjquery.js",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/327fbdc2c2f8595b1fbc09f5925c907b42f2d45a/uaa%2Fsrc%2Fmain%2Fwebapp%2Fvendor%2Fjquery%2Fjavascripts%2Fjquery.js",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2Fvendor%2Fjquery%2Fjavascripts%2Fjquery.js?ref=327fbdc2c2f8595b1fbc09f5925c907b42f2d45a"
        }
    ]
}