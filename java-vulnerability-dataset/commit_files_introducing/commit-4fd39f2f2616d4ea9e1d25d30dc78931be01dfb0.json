{
    "sha": "4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0",
    "node_id": "MDY6Q29tbWl0MzIyMTk2MjQ6NGZkMzlmMmYyNjE2ZDRlYTllMWQyNWQzMGRjNzg5MzFiZTAxZGZiMA==",
    "commit": {
        "author": {
            "name": "J\u00f6rg Schaible",
            "email": "joerg.schaible@gmx.de",
            "date": "2009-04-29T23:55:49Z"
        },
        "committer": {
            "name": "J\u00f6rg Schaible",
            "email": "joerg.schaible@gmx.de",
            "date": "2009-04-29T23:55:49Z"
        },
        "message": "The XppDriver uses now the official XmlPullParser API to locate an available parser using the XmlPullParserFactory. This allows the usage of XPP technology with XStream in Android (XSTR-542).\nAdditional explicit XPP drivers for the Xpp3 and kXML2 implementations.\nAdditional explicit StAX drivers for Woodstox, BEA StAX and SJSXP of the JDK 6 implementations.\n\ngit-svn-id: http://svn.codehaus.org/xstream/trunk@1674 9830eeb5-ddf4-0310-9ef7-f4b9a3e3227e",
        "tree": {
            "sha": "9b935e62f3488717070639ce1dd55e1d7f745f3f",
            "url": "https://api.github.com/repos/x-stream/xstream/git/trees/9b935e62f3488717070639ce1dd55e1d7f745f3f"
        },
        "url": "https://api.github.com/repos/x-stream/xstream/git/commits/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/x-stream/xstream/commits/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0",
    "html_url": "https://github.com/x-stream/xstream/commit/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0",
    "comments_url": "https://api.github.com/repos/x-stream/xstream/commits/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0/comments",
    "author": {
        "login": "joehni",
        "id": 795149,
        "node_id": "MDQ6VXNlcjc5NTE0OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/795149?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joehni",
        "html_url": "https://github.com/joehni",
        "followers_url": "https://api.github.com/users/joehni/followers",
        "following_url": "https://api.github.com/users/joehni/following{/other_user}",
        "gists_url": "https://api.github.com/users/joehni/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/joehni/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/joehni/subscriptions",
        "organizations_url": "https://api.github.com/users/joehni/orgs",
        "repos_url": "https://api.github.com/users/joehni/repos",
        "events_url": "https://api.github.com/users/joehni/events{/privacy}",
        "received_events_url": "https://api.github.com/users/joehni/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "joehni",
        "id": 795149,
        "node_id": "MDQ6VXNlcjc5NTE0OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/795149?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joehni",
        "html_url": "https://github.com/joehni",
        "followers_url": "https://api.github.com/users/joehni/followers",
        "following_url": "https://api.github.com/users/joehni/following{/other_user}",
        "gists_url": "https://api.github.com/users/joehni/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/joehni/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/joehni/subscriptions",
        "organizations_url": "https://api.github.com/users/joehni/orgs",
        "repos_url": "https://api.github.com/users/joehni/repos",
        "events_url": "https://api.github.com/users/joehni/events{/privacy}",
        "received_events_url": "https://api.github.com/users/joehni/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "2e5ebfaee5e435ca346b6c46506db3cc712fb0eb",
            "url": "https://api.github.com/repos/x-stream/xstream/commits/2e5ebfaee5e435ca346b6c46506db3cc712fb0eb",
            "html_url": "https://github.com/x-stream/xstream/commit/2e5ebfaee5e435ca346b6c46506db3cc712fb0eb"
        }
    ],
    "stats": {
        "total": 542,
        "additions": 484,
        "deletions": 58
    },
    "files": [
        {
            "sha": "131a31bfec0938d66556caef66c34194eddbbd12",
            "filename": "xstream-distribution/src/content/changes.html",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/x-stream/xstream/blob/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0/xstream-distribution%2Fsrc%2Fcontent%2Fchanges.html",
            "raw_url": "https://github.com/x-stream/xstream/raw/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0/xstream-distribution%2Fsrc%2Fcontent%2Fchanges.html",
            "contents_url": "https://api.github.com/repos/x-stream/xstream/contents/xstream-distribution%2Fsrc%2Fcontent%2Fchanges.html?ref=4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0",
            "patch": "@@ -35,6 +35,10 @@ <h1 id=\"Upcoming\">Upcoming</h1>\n     <h2>Major changes</h2>\n \n     <ul>\n+    \t<li>JIRA:XSTR-542: The XppDriver uses now the official XmlPullParser API to locate an available parser using the XmlPullParserFactory. This \n+    \tallows the usage of XPP technology with XStream in Android.</li>\n+    \t<li>Additional explicit XPP drivers for the Xpp3 and kXML2 implementations.</li>\n+    \t<li>Additional explicit StAX drivers for Woodstox, BEA StAX and SJSXP of the JDK 6 implementations.</li>\n     \t<li>JIRA:XSTR-556: DateConverter uses format with 3-letter time zones that are ambiguous. Therefore it will now always use UTC to write dates.\n     \tUnmarshalled dates are not affected as long as they contain a time zone.</li>\n     \t<li>The type java.lang.reflect.Field is now handled by an own converter.</li>"
        },
        {
            "sha": "908d0fc33e652cdb1af1f20c7f603b4013ded588",
            "filename": "xstream/src/java/com/thoughtworks/xstream/io/HierarchicalStreamDriver.java",
            "status": "modified",
            "additions": 26,
            "deletions": 3,
            "changes": 29,
            "blob_url": "https://github.com/x-stream/xstream/blob/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2FHierarchicalStreamDriver.java",
            "raw_url": "https://github.com/x-stream/xstream/raw/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2FHierarchicalStreamDriver.java",
            "contents_url": "https://api.github.com/repos/x-stream/xstream/contents/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2FHierarchicalStreamDriver.java?ref=4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0",
            "patch": "@@ -17,19 +17,42 @@\n import java.io.Writer;\n \n /**\n- * Provides implementation of XML parsers and writers to XStream.\n+ * Provides implementation of stream parsers and writers to XStream.\n  *\n  * @author Joe Walnes\n  * @author James Strachan\n  */\n public interface HierarchicalStreamDriver {\n \n+    /**\n+     * Create the HierarchicalStreamReader with the stream parser reading from the IO reader.\n+     * \n+     * @param in the {@link Reader} with the data to parse \n+     * @return the HierarchicalStreamReader\n+     */\n     HierarchicalStreamReader createReader(Reader in);\n-    /** @since 1.1.3 */\n+    /** \n+     * Create the HierarchicalStreamReader with the stream parser reading from the input stream.\n+     * \n+     * @param in the {@link InputStream} with the data to parse \n+     * @since 1.1.3 \n+     */\n     HierarchicalStreamReader createReader(InputStream in);\n \n+    /**\n+     * Create the HierarchicalStreamWriter with the formatted writer.\n+     * \n+     * @param out the {@link Writer} to receive the formatted data \n+     * @return the HierarchicalStreamWriter\n+     */\n     HierarchicalStreamWriter createWriter(Writer out);\n-    /** @since 1.1.3 */\n+    /** \n+     * Create the HierarchicalStreamWriter with the formatted writer.\n+     * \n+     * @param out the {@link OutputStream} to receive the formatted data \n+     * @return the HierarchicalStreamWriter\n+     * @since 1.1.3\n+     */\n     HierarchicalStreamWriter createWriter(OutputStream out);\n \n }"
        },
        {
            "sha": "0af6b73118661479386884f691885a911ff044a4",
            "filename": "xstream/src/java/com/thoughtworks/xstream/io/StreamException.java",
            "status": "modified",
            "additions": 8,
            "deletions": 1,
            "changes": 9,
            "blob_url": "https://github.com/x-stream/xstream/blob/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2FStreamException.java",
            "raw_url": "https://github.com/x-stream/xstream/raw/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2FStreamException.java",
            "contents_url": "https://api.github.com/repos/x-stream/xstream/contents/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2FStreamException.java?ref=4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0",
            "patch": "@@ -1,6 +1,6 @@\n /*\n  * Copyright (C) 2004, 2006 Joe Walnes.\n- * Copyright (C) 2006, 2007 XStream Committers.\n+ * Copyright (C) 2006, 2007, 2009 XStream Committers.\n  * All rights reserved.\n  *\n  * The software in this package is published under the terms of the BSD\n@@ -21,4 +21,11 @@ public StreamException(Throwable e) {\n     public StreamException(String message) {\n         super(message);\n     }\n+\n+    /**\n+     * @since upcoming\n+     */\n+    public StreamException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n }"
        },
        {
            "sha": "ae12d5e35f2fa4f9fffe819c24b290bcdc2cc352",
            "filename": "xstream/src/java/com/thoughtworks/xstream/io/xml/AbstractXppDriver.java",
            "status": "added",
            "additions": 93,
            "deletions": 0,
            "changes": 93,
            "blob_url": "https://github.com/x-stream/xstream/blob/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2Fxml%2FAbstractXppDriver.java",
            "raw_url": "https://github.com/x-stream/xstream/raw/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2Fxml%2FAbstractXppDriver.java",
            "contents_url": "https://api.github.com/repos/x-stream/xstream/contents/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2Fxml%2FAbstractXppDriver.java?ref=4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0",
            "patch": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright (C) 2009 XStream Committers.\n+ * All rights reserved.\n+ *\n+ * The software in this package is published under the terms of the BSD\n+ * style license a copy of which has been included with this distribution in\n+ * the LICENSE.txt file.\n+ * \n+ * Created on 29. April 2009 by Joerg Schaible\n+ */\n+package com.thoughtworks.xstream.io.xml;\n+\n+import com.thoughtworks.xstream.core.util.XmlHeaderAwareReader;\n+import com.thoughtworks.xstream.io.HierarchicalStreamReader;\n+import com.thoughtworks.xstream.io.HierarchicalStreamWriter;\n+import com.thoughtworks.xstream.io.StreamException;\n+\n+import org.xmlpull.v1.XmlPullParser;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.Reader;\n+import java.io.UnsupportedEncodingException;\n+import java.io.Writer;\n+\n+/**\n+ * An abstract base class for a driver using an XPP implementation. \n+ * \n+ * @author Joe Walnes\n+ * @author J&ouml;rg Schaible\n+ * @since upcoming\n+ */\n+public abstract class AbstractXppDriver extends AbstractXmlDriver {\n+\n+    /**\n+     * Construct an AbstractXppDriver.\n+     * \n+     * @param replacer the replacer for XML friendly tag and attribute names\n+     * @since upcoming\n+     */\n+    public AbstractXppDriver(XmlFriendlyReplacer replacer) {\n+        super(replacer);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public HierarchicalStreamReader createReader(Reader xml) {\n+        try {\n+            return new XppReader(xml, createParser(), xmlFriendlyReplacer());\n+        } catch (XmlPullParserException e) {\n+            throw new StreamException(\"Cannot create XmlPullParser\");\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public HierarchicalStreamReader createReader(InputStream in) {\n+        try {\n+            return createReader(new XmlHeaderAwareReader(in));\n+        } catch (UnsupportedEncodingException e) {\n+            throw new StreamException(e);\n+        } catch (IOException e) {\n+            throw new StreamException(e);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public HierarchicalStreamWriter createWriter(Writer out) {\n+        return new PrettyPrintWriter(out, xmlFriendlyReplacer());\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public HierarchicalStreamWriter createWriter(OutputStream out) {\n+        return createWriter(new OutputStreamWriter(out));\n+    }\n+\n+    /**\n+     * Create the parser of the XPP implementation.\n+     * @throws XmlPullParserException if the parser cannot be created\n+     * \n+     * @since upcoming\n+     */\n+    protected abstract XmlPullParser createParser() throws XmlPullParserException;\n+}"
        },
        {
            "sha": "ab23a7f2b9af51c81f58e3c2f1a2d76077ad3fef",
            "filename": "xstream/src/java/com/thoughtworks/xstream/io/xml/BEAStaxDriver.java",
            "status": "added",
            "additions": 51,
            "deletions": 0,
            "changes": 51,
            "blob_url": "https://github.com/x-stream/xstream/blob/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2Fxml%2FBEAStaxDriver.java",
            "raw_url": "https://github.com/x-stream/xstream/raw/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2Fxml%2FBEAStaxDriver.java",
            "contents_url": "https://api.github.com/repos/x-stream/xstream/contents/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2Fxml%2FBEAStaxDriver.java?ref=4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0",
            "patch": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright (C) 2009 XStream Committers.\n+ * All rights reserved.\n+ *\n+ * The software in this package is published under the terms of the BSD\n+ * style license a copy of which has been included with this distribution in\n+ * the LICENSE.txt file.\n+ * \n+ * Created on 29. April 2009 by Joerg Schaible\n+ */\n+package com.thoughtworks.xstream.io.xml;\n+\n+import com.bea.xml.stream.MXParserFactory;\n+import com.bea.xml.stream.XMLOutputFactoryBase;\n+\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLOutputFactory;\n+\n+/**\n+ * A driver using the BEA StAX implementation.\n+ * \n+ * @author J&ouml;rg Schaible\n+ * @since upcoming\n+ */\n+public class BEAStaxDriver extends StaxDriver {\n+\n+    public BEAStaxDriver() {\n+        super();\n+    }\n+\n+    public BEAStaxDriver(QNameMap qnameMap, XmlFriendlyReplacer replacer) {\n+        super(qnameMap, replacer);\n+    }\n+\n+    public BEAStaxDriver(QNameMap qnameMap) {\n+        super(qnameMap);\n+    }\n+\n+    public BEAStaxDriver(XmlFriendlyReplacer replacer) {\n+        super(replacer);\n+    }\n+\n+    protected XMLInputFactory createInputFactory() {\n+        return new MXParserFactory();\n+    }\n+\n+    protected XMLOutputFactory createOutputFactory() {\n+        return new XMLOutputFactoryBase();\n+    }\n+\n+}"
        },
        {
            "sha": "22978ec1d4435db1755a0a197103671cb7e8b107",
            "filename": "xstream/src/java/com/thoughtworks/xstream/io/xml/KXml2Driver.java",
            "status": "added",
            "additions": 45,
            "deletions": 0,
            "changes": 45,
            "blob_url": "https://github.com/x-stream/xstream/blob/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2Fxml%2FKXml2Driver.java",
            "raw_url": "https://github.com/x-stream/xstream/raw/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2Fxml%2FKXml2Driver.java",
            "contents_url": "https://api.github.com/repos/x-stream/xstream/contents/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2Fxml%2FKXml2Driver.java?ref=4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0",
            "patch": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright (C) 2009 XStream Committers.\n+ * All rights reserved.\n+ *\n+ * The software in this package is published under the terms of the BSD\n+ * style license a copy of which has been included with this distribution in\n+ * the LICENSE.txt file.\n+ * \n+ * Created on 29. April 2009 by Joerg Schaible\n+ */\n+package com.thoughtworks.xstream.io.xml;\n+\n+\n+import com.thoughtworks.xstream.io.HierarchicalStreamDriver;\n+\n+import org.kxml2.io.KXmlParser;\n+import org.xmlpull.v1.XmlPullParser;\n+\n+\n+/**\n+ * A {@link HierarchicalStreamDriver} using the kXML2 parser.\n+ * \n+ * @author J&ouml;rg Schaible\n+ * @since upcoming\n+ */\n+public class KXml2Driver extends AbstractXppDriver {\n+\n+    public KXml2Driver() {\n+        super(new XmlFriendlyReplacer());\n+    }\n+\n+    /**\n+     * @since upcoming\n+     */\n+    public KXml2Driver(XmlFriendlyReplacer replacer) {\n+        super(replacer);\n+    }\n+\n+    /**\n+     * @since upcoming\n+     */\n+    protected XmlPullParser createParser() {\n+        return new KXmlParser();\n+    }\n+}"
        },
        {
            "sha": "027b2a7a50816b1309cbc166ae88dcb940bfe128",
            "filename": "xstream/src/java/com/thoughtworks/xstream/io/xml/SjsxpDriver.java",
            "status": "added",
            "additions": 70,
            "deletions": 0,
            "changes": 70,
            "blob_url": "https://github.com/x-stream/xstream/blob/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2Fxml%2FSjsxpDriver.java",
            "raw_url": "https://github.com/x-stream/xstream/raw/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2Fxml%2FSjsxpDriver.java",
            "contents_url": "https://api.github.com/repos/x-stream/xstream/contents/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2Fxml%2FSjsxpDriver.java?ref=4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0",
            "patch": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (C) 2009 XStream Committers.\n+ * All rights reserved.\n+ *\n+ * The software in this package is published under the terms of the BSD\n+ * style license a copy of which has been included with this distribution in\n+ * the LICENSE.txt file.\n+ * \n+ * Created on 29. April 2009 by Joerg Schaible\n+ */\n+package com.thoughtworks.xstream.io.xml;\n+\n+import com.thoughtworks.xstream.io.StreamException;\n+\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLOutputFactory;\n+\n+/**\n+ * A driver using the JDK 6 StAX implementation of Sun.\n+ * \n+ * @author J&ouml;rg Schaible\n+ * @since upcoming\n+ */\n+public class SjsxpDriver extends StaxDriver {\n+\n+    public SjsxpDriver() {\n+        super();\n+    }\n+\n+    public SjsxpDriver(QNameMap qnameMap, XmlFriendlyReplacer replacer) {\n+        super(qnameMap, replacer);\n+    }\n+\n+    public SjsxpDriver(QNameMap qnameMap) {\n+        super(qnameMap);\n+    }\n+\n+    public SjsxpDriver(XmlFriendlyReplacer replacer) {\n+        super(replacer);\n+    }\n+\n+    protected XMLInputFactory createInputFactory() {\n+        Exception exception = null;\n+        try {\n+            return (XMLInputFactory)Class.forName(\"com.sun.xml.internal.stream.XMLInputFactoryImpl\").newInstance();\n+        } catch (InstantiationException e) {\n+            exception = e;\n+        } catch (IllegalAccessException e) {\n+            exception = e;\n+        } catch (ClassNotFoundException e) {\n+            exception = e;\n+        }\n+        throw new StreamException(\"Cannot create SJSXP (Sun JDK 6 StAX) XMLInputFaqctory instance.\", exception);\n+    }\n+\n+    protected XMLOutputFactory createOutputFactory() {\n+        Exception exception = null;\n+        try {\n+            return (XMLOutputFactory)Class.forName(\"com.sun.xml.internal.stream.XMLOutputFactoryImpl\").newInstance();\n+        } catch (InstantiationException e) {\n+            exception = e;\n+        } catch (IllegalAccessException e) {\n+            exception = e;\n+        } catch (ClassNotFoundException e) {\n+            exception = e;\n+        }\n+        throw new StreamException(\"Cannot create SJSXP (Sun JDK 6 StAX) XMLOutputFaqctory instance.\", exception);\n+    }\n+\n+}"
        },
        {
            "sha": "36d8f1fa2df3f2ff1a83aa0b25e98bf6ffb656d5",
            "filename": "xstream/src/java/com/thoughtworks/xstream/io/xml/StaxDriver.java",
            "status": "modified",
            "additions": 19,
            "deletions": 4,
            "changes": 23,
            "blob_url": "https://github.com/x-stream/xstream/blob/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2Fxml%2FStaxDriver.java",
            "raw_url": "https://github.com/x-stream/xstream/raw/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2Fxml%2FStaxDriver.java",
            "contents_url": "https://api.github.com/repos/x-stream/xstream/contents/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2Fxml%2FStaxDriver.java?ref=4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0",
            "patch": "@@ -27,9 +27,10 @@\n import com.thoughtworks.xstream.io.StreamException;\n \n /**\n- * A driver using the StAX API.\n+ * A driver using the StAX API to create XML reader and writer.\n  *\n  * @author James Strachan\n+ * @author J&ouml;rg Schaible\n  * @version $Revision$\n  */\n public class StaxDriver extends AbstractXmlDriver {\n@@ -39,7 +40,7 @@ public class StaxDriver extends AbstractXmlDriver {\n     private XMLOutputFactory outputFactory;\n \n     public StaxDriver() {\n-        this.qnameMap = new QNameMap();\n+        this(new QNameMap());\n     }\n \n     public StaxDriver(QNameMap qnameMap) {\n@@ -122,14 +123,14 @@ public void setQnameMap(QNameMap qnameMap) {\n \n     public XMLInputFactory getInputFactory() {\n         if (inputFactory == null) {\n-            inputFactory = XMLInputFactory.newInstance();\n+            inputFactory = createInputFactory();\n         }\n         return inputFactory;\n     }\n \n     public XMLOutputFactory getOutputFactory() {\n         if (outputFactory == null) {\n-            outputFactory = XMLOutputFactory.newInstance();\n+            outputFactory = createOutputFactory();\n         }\n         return outputFactory;\n     }\n@@ -157,4 +158,18 @@ protected XMLStreamReader createParser(Reader xml) throws XMLStreamException {\n     protected XMLStreamReader createParser(InputStream xml) throws XMLStreamException {\n         return getInputFactory().createXMLStreamReader(xml);\n     }\n+\n+    /**\n+     * @since upcoming\n+     */\n+    protected XMLInputFactory createInputFactory() {\n+        return XMLInputFactory.newInstance();\n+    }\n+\n+    /**\n+     * @since upcoming\n+     */\n+    protected XMLOutputFactory createOutputFactory() {\n+        return XMLOutputFactory.newInstance();\n+    }\n }"
        },
        {
            "sha": "a8306265e4135d48587c2edb86ce5a6d91cbbad4",
            "filename": "xstream/src/java/com/thoughtworks/xstream/io/xml/WstxDriver.java",
            "status": "added",
            "additions": 51,
            "deletions": 0,
            "changes": 51,
            "blob_url": "https://github.com/x-stream/xstream/blob/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2Fxml%2FWstxDriver.java",
            "raw_url": "https://github.com/x-stream/xstream/raw/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2Fxml%2FWstxDriver.java",
            "contents_url": "https://api.github.com/repos/x-stream/xstream/contents/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2Fxml%2FWstxDriver.java?ref=4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0",
            "patch": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright (C) 2009 XStream Committers.\n+ * All rights reserved.\n+ *\n+ * The software in this package is published under the terms of the BSD\n+ * style license a copy of which has been included with this distribution in\n+ * the LICENSE.txt file.\n+ * \n+ * Created on 29. April 2009 by Joerg Schaible\n+ */\n+package com.thoughtworks.xstream.io.xml;\n+\n+import com.bea.xml.stream.MXParserFactory;\n+import com.bea.xml.stream.XMLOutputFactoryBase;\n+\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLOutputFactory;\n+\n+/**\n+ * A driver using the Woodstox StAX implementation.\n+ * \n+ * @author J&ouml;rg Schaible\n+ * @since upcoming\n+ */\n+public class WstxDriver extends StaxDriver {\n+\n+    public WstxDriver() {\n+        super();\n+    }\n+\n+    public WstxDriver(QNameMap qnameMap, XmlFriendlyReplacer replacer) {\n+        super(qnameMap, replacer);\n+    }\n+\n+    public WstxDriver(QNameMap qnameMap) {\n+        super(qnameMap);\n+    }\n+\n+    public WstxDriver(XmlFriendlyReplacer replacer) {\n+        super(replacer);\n+    }\n+\n+    protected XMLInputFactory createInputFactory() {\n+        return new MXParserFactory();\n+    }\n+\n+    protected XMLOutputFactory createOutputFactory() {\n+        return new XMLOutputFactoryBase();\n+    }\n+\n+}"
        },
        {
            "sha": "3cf9a3853dc06e7905948667099aa72ae2466831",
            "filename": "xstream/src/java/com/thoughtworks/xstream/io/xml/Xpp3Driver.java",
            "status": "added",
            "additions": 45,
            "deletions": 0,
            "changes": 45,
            "blob_url": "https://github.com/x-stream/xstream/blob/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2Fxml%2FXpp3Driver.java",
            "raw_url": "https://github.com/x-stream/xstream/raw/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2Fxml%2FXpp3Driver.java",
            "contents_url": "https://api.github.com/repos/x-stream/xstream/contents/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2Fxml%2FXpp3Driver.java?ref=4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0",
            "patch": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright (C) 2009 XStream Committers.\n+ * All rights reserved.\n+ *\n+ * The software in this package is published under the terms of the BSD\n+ * style license a copy of which has been included with this distribution in\n+ * the LICENSE.txt file.\n+ * \n+ * Created on 29. April 2009 by Joerg Schaible\n+ */\n+package com.thoughtworks.xstream.io.xml;\n+\n+\n+import com.thoughtworks.xstream.io.HierarchicalStreamDriver;\n+\n+import org.xmlpull.mxp1.MXParser;\n+import org.xmlpull.v1.XmlPullParser;\n+\n+\n+/**\n+ * A {@link HierarchicalStreamDriver} using the Xpp3 parser.\n+ * \n+ * @author J&ouml;rg Schaible\n+ * @since upcoming\n+ */\n+public class Xpp3Driver extends AbstractXppDriver {\n+\n+    public Xpp3Driver() {\n+        super(new XmlFriendlyReplacer());\n+    }\n+\n+    /**\n+     * @since upcoming\n+     */\n+    public Xpp3Driver(XmlFriendlyReplacer replacer) {\n+        super(replacer);\n+    }\n+\n+    /**\n+     * @since upcoming\n+     */\n+    protected XmlPullParser createParser() {\n+        return new MXParser();\n+    }\n+}"
        },
        {
            "sha": "47c7d8068475b80a5bbb0f25f7f912db096b0b9e",
            "filename": "xstream/src/java/com/thoughtworks/xstream/io/xml/XppDriver.java",
            "status": "modified",
            "additions": 23,
            "deletions": 47,
            "changes": 70,
            "blob_url": "https://github.com/x-stream/xstream/blob/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2Fxml%2FXppDriver.java",
            "raw_url": "https://github.com/x-stream/xstream/raw/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2Fxml%2FXppDriver.java",
            "contents_url": "https://api.github.com/repos/x-stream/xstream/contents/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2Fxml%2FXppDriver.java?ref=4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0",
            "patch": "@@ -1,6 +1,6 @@\n /*\n  * Copyright (C) 2004, 2005, 2006 Joe Walnes.\n- * Copyright (C) 2006, 2007, 2008 XStream Committers.\n+ * Copyright (C) 2006, 2007, 2008, 2009 XStream Committers.\n  * All rights reserved.\n  *\n  * The software in this package is published under the terms of the BSD\n@@ -11,22 +11,23 @@\n  */\n package com.thoughtworks.xstream.io.xml;\n \n-import com.thoughtworks.xstream.core.util.XmlHeaderAwareReader;\n-import com.thoughtworks.xstream.io.HierarchicalStreamReader;\n-import com.thoughtworks.xstream.io.HierarchicalStreamWriter;\n-import com.thoughtworks.xstream.io.StreamException;\n \n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.io.OutputStreamWriter;\n-import java.io.Reader;\n-import java.io.UnsupportedEncodingException;\n-import java.io.Writer;\n+import com.thoughtworks.xstream.io.HierarchicalStreamDriver;\n \n-public class XppDriver extends AbstractXmlDriver {\n-    \n-    private static boolean xppLibraryPresent;\n+import org.xmlpull.v1.XmlPullParser;\n+import org.xmlpull.v1.XmlPullParserException;\n+import org.xmlpull.v1.XmlPullParserFactory;\n+\n+\n+/**\n+ * A {@link HierarchicalStreamDriver} using the XmlPullParserFactory to locate an XPP parser.\n+ *\n+ * @author Joe Walnes\n+ * @author J&ouml;rg Schaible\n+ */\n+public class XppDriver extends AbstractXppDriver {\n+\n+    private static XmlPullParserFactory factory;\n \n     public XppDriver() {\n         super(new XmlFriendlyReplacer());\n@@ -39,38 +40,13 @@ public XppDriver(XmlFriendlyReplacer replacer) {\n         super(replacer);\n     }\n \n-    public HierarchicalStreamReader createReader(Reader xml) {\n-        loadLibrary();\n-        return new XppReader(xml, xmlFriendlyReplacer());\n-    }\n-\n-    public HierarchicalStreamReader createReader(InputStream in) {\n-        try {\n-            return createReader(new XmlHeaderAwareReader(in));\n-        } catch (UnsupportedEncodingException e) {\n-            throw new StreamException(e);\n-        } catch (IOException e) {\n-            throw new StreamException(e);\n-        }\n-    }\n-\n-    private void loadLibrary() {\n-        if (!xppLibraryPresent) {\n-            try {\n-                Class.forName(\"org.xmlpull.mxp1.MXParser\", false, getClass().getClassLoader());\n-            } catch (ClassNotFoundException e) {\n-                throw new IllegalArgumentException(\"XPP3 pull parser library not present. Specify another driver.\" +\n-                        \" For example: new XStream(new DomDriver())\");\n-            }\n-            xppLibraryPresent = true;\n+    /**\n+     * {@inheritDoc}\n+     */\n+    protected synchronized XmlPullParser createParser() throws XmlPullParserException {\n+        if (factory == null) {\n+            factory = XmlPullParserFactory.newInstance(null, XppDriver.class);\n         }\n-    }\n-\n-    public HierarchicalStreamWriter createWriter(Writer out) {\n-        return new PrettyPrintWriter(out, xmlFriendlyReplacer());\n-    }\n-\n-    public HierarchicalStreamWriter createWriter(OutputStream out) {\n-        return createWriter(new OutputStreamWriter(out));\n+        return factory.newPullParser();\n     }\n }"
        },
        {
            "sha": "715a0dbb3ff104698e97308149b486e53c818e80",
            "filename": "xstream/src/java/com/thoughtworks/xstream/io/xml/XppReader.java",
            "status": "modified",
            "additions": 49,
            "deletions": 3,
            "changes": 52,
            "blob_url": "https://github.com/x-stream/xstream/blob/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2Fxml%2FXppReader.java",
            "raw_url": "https://github.com/x-stream/xstream/raw/4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2Fxml%2FXppReader.java",
            "contents_url": "https://api.github.com/repos/x-stream/xstream/contents/xstream%2Fsrc%2Fjava%2Fcom%2Fthoughtworks%2Fxstream%2Fio%2Fxml%2FXppReader.java?ref=4fd39f2f2616d4ea9e1d25d30dc78931be01dfb0",
            "patch": "@@ -1,6 +1,6 @@\n /*\n  * Copyright (C) 2004, 2005, 2006 Joe Walnes.\n- * Copyright (C) 2006, 2007, 2008 XStream Committers.\n+ * Copyright (C) 2006, 2007, 2008, 2009 XStream Committers.\n  * All rights reserved.\n  *\n  * The software in this package is published under the terms of the BSD\n@@ -15,7 +15,6 @@\n import java.io.IOException;\n import java.io.Reader;\n \n-import org.xmlpull.mxp1.MXParser;\n import org.xmlpull.v1.XmlPullParser;\n import org.xmlpull.v1.XmlPullParserException;\n \n@@ -26,18 +25,54 @@\n  * XStream reader that pulls directly from the stream using the XmlPullParser API.\n  *\n  * @author Joe Walnes\n+ * @author J&ouml;rg Schaible\n  */\n public class XppReader extends AbstractPullReader {\n \n     private final XmlPullParser parser;\n     private final BufferedReader reader;\n \n+    /**\n+     * Construct an XppReader.\n+     * \n+     * @param reader the reader with the input data\n+     * @param parser the XPP parser to use\n+     * @since upcoming\n+     */\n+    public XppReader(Reader reader, XmlPullParser parser) {\n+        this(reader, new XmlFriendlyReplacer());\n+    }\n+\n+    /**\n+     * Construct an XppReader.\n+     * \n+     * @param reader the reader with the input data\n+     * @param parser the XPP parser to use\n+     * @param replacer the replacer for XML friendly tag and attribute names\n+     * @since upcoming\n+     */\n+    public XppReader(Reader reader, XmlPullParser parser, XmlFriendlyReplacer replacer) {\n+        super(replacer);\n+        this.parser = parser;\n+        this.reader = new BufferedReader(reader);\n+        try {\n+            parser.setInput(this.reader);\n+        } catch (XmlPullParserException e) {\n+            throw new StreamException(e);\n+        }\n+        moveDown();\n+    }\n+\n+    /**\n+     * @deprecated As of upcoming, use {@link #XppReader(Reader, XmlPullParser)}  instead\n+     */\n     public XppReader(Reader reader) {\n         this(reader, new XmlFriendlyReplacer());\n     }\n \n     /**\n      * @since 1.2\n+     * @deprecated As of upcoming, use {@link #XppReader(Reader, XmlPullParser, XmlFriendlyReplacer)}  instead\n      */\n     public XppReader(Reader reader, XmlFriendlyReplacer replacer) {\n         super(replacer);\n@@ -53,9 +88,20 @@ public XppReader(Reader reader, XmlFriendlyReplacer replacer) {\n     \n     /**\n      * To use another implementation of org.xmlpull.v1.XmlPullParser, override this method.\n+     * @deprecated As of upcoming, use {@link #XppReader(Reader, XmlPullParser)}  instead\n      */\n     protected XmlPullParser createParser() {\n-        return new MXParser();\n+        Exception exception = null;\n+        try {\n+            return (XmlPullParser)Class.forName(\"org.xmlpull.mxp1.MXParser\", true, XmlPullParser.class.getClassLoader()).newInstance();\n+        } catch (InstantiationException e) {\n+            exception = e;\n+        } catch (IllegalAccessException e) {\n+            exception = e;\n+        } catch (ClassNotFoundException e) {\n+            exception = e;\n+        }\n+        throw new StreamException(\"Cannot create Xpp3 parser instance.\", exception);\n     }\n \n     protected int pullNextEvent() {"
        }
    ]
}