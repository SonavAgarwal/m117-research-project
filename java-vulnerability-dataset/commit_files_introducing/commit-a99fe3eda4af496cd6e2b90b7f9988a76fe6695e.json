{
    "sha": "a99fe3eda4af496cd6e2b90b7f9988a76fe6695e",
    "node_id": "MDY6Q29tbWl0MTE0ODc1MzphOTlmZTNlZGE0YWY0OTZjZDZlMmI5MGI3Zjk5ODhhNzZmZTY2OTVl",
    "commit": {
        "author": {
            "name": "Rossen Stoyanchev",
            "email": "rstoyanchev@pivotal.io",
            "date": "2017-03-16T19:00:47Z"
        },
        "committer": {
            "name": "Rossen Stoyanchev",
            "email": "rstoyanchev@pivotal.io",
            "date": "2017-03-16T19:01:23Z"
        },
        "message": "Polish HttpHiddenMethodFilter",
        "tree": {
            "sha": "17f90ac2e885a44e7e64825396ad7e27832e6e27",
            "url": "https://api.github.com/repos/spring-projects/spring-framework/git/trees/17f90ac2e885a44e7e64825396ad7e27832e6e27"
        },
        "url": "https://api.github.com/repos/spring-projects/spring-framework/git/commits/a99fe3eda4af496cd6e2b90b7f9988a76fe6695e",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a99fe3eda4af496cd6e2b90b7f9988a76fe6695e",
    "html_url": "https://github.com/spring-projects/spring-framework/commit/a99fe3eda4af496cd6e2b90b7f9988a76fe6695e",
    "comments_url": "https://api.github.com/repos/spring-projects/spring-framework/commits/a99fe3eda4af496cd6e2b90b7f9988a76fe6695e/comments",
    "author": {
        "login": "rstoyanchev",
        "id": 401908,
        "node_id": "MDQ6VXNlcjQwMTkwOA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/401908?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rstoyanchev",
        "html_url": "https://github.com/rstoyanchev",
        "followers_url": "https://api.github.com/users/rstoyanchev/followers",
        "following_url": "https://api.github.com/users/rstoyanchev/following{/other_user}",
        "gists_url": "https://api.github.com/users/rstoyanchev/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rstoyanchev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rstoyanchev/subscriptions",
        "organizations_url": "https://api.github.com/users/rstoyanchev/orgs",
        "repos_url": "https://api.github.com/users/rstoyanchev/repos",
        "events_url": "https://api.github.com/users/rstoyanchev/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rstoyanchev/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "rstoyanchev",
        "id": 401908,
        "node_id": "MDQ6VXNlcjQwMTkwOA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/401908?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rstoyanchev",
        "html_url": "https://github.com/rstoyanchev",
        "followers_url": "https://api.github.com/users/rstoyanchev/followers",
        "following_url": "https://api.github.com/users/rstoyanchev/following{/other_user}",
        "gists_url": "https://api.github.com/users/rstoyanchev/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rstoyanchev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rstoyanchev/subscriptions",
        "organizations_url": "https://api.github.com/users/rstoyanchev/orgs",
        "repos_url": "https://api.github.com/users/rstoyanchev/repos",
        "events_url": "https://api.github.com/users/rstoyanchev/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rstoyanchev/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "37592ea07c1257326c98f88ca07c37974ba9f118",
            "url": "https://api.github.com/repos/spring-projects/spring-framework/commits/37592ea07c1257326c98f88ca07c37974ba9f118",
            "html_url": "https://github.com/spring-projects/spring-framework/commit/37592ea07c1257326c98f88ca07c37974ba9f118"
        }
    ],
    "stats": {
        "total": 202,
        "additions": 87,
        "deletions": 115
    },
    "files": [
        {
            "sha": "399e6ec3ccf341025ccff5f9288e2f4ffba4d77c",
            "filename": "spring-web/src/main/java/org/springframework/web/filter/reactive/HiddenHttpMethodFilter.java",
            "status": "modified",
            "additions": 27,
            "deletions": 37,
            "changes": 64,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/a99fe3eda4af496cd6e2b90b7f9988a76fe6695e/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Ffilter%2Freactive%2FHiddenHttpMethodFilter.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/a99fe3eda4af496cd6e2b90b7f9988a76fe6695e/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Ffilter%2Freactive%2FHiddenHttpMethodFilter.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Ffilter%2Freactive%2FHiddenHttpMethodFilter.java?ref=a99fe3eda4af496cd6e2b90b7f9988a76fe6695e",
            "patch": "@@ -37,29 +37,33 @@\n  * return value using {@link ServerWebExchange#mutate()}.\n  *\n  * <p>The name of the request parameter defaults to {@code _method}, but can be\n- * adapted via the {@link #setMethodParam(String) methodParam} property.\n+ * adapted via the {@link #setMethodParamName(String) methodParamName} property.\n  *\n  * @author Greg Turnquist\n+ * @author Rossen Stoyanchev\n  * @since 5.0\n  */\n public class HiddenHttpMethodFilter implements WebFilter {\n \n-\t/** Default method parameter: {@code _method} */\n-\tpublic static final String DEFAULT_METHOD_PARAM = \"_method\";\n+\t/** Default name of the form parameter with the HTTP method to use */\n+\tpublic static final String DEFAULT_METHOD_PARAMETER_NAME = \"_method\";\n+\n+\n+\tprivate String methodParamName = DEFAULT_METHOD_PARAMETER_NAME;\n \n-\tprivate String methodParam = DEFAULT_METHOD_PARAM;\n \n \t/**\n-\t * Set the parameter name to look for HTTP methods.\n-\t * @see #DEFAULT_METHOD_PARAM\n+\t * Set the name of the form parameter with the HTTP method to use.\n+\t * <p>By default this is set to {@code \"_method\"}.\n \t */\n-\tpublic void setMethodParam(String methodParam) {\n-\t\tAssert.hasText(methodParam, \"'methodParam' must not be empty\");\n-\t\tthis.methodParam = methodParam;\n+\tpublic void setMethodParamName(String methodParamName) {\n+\t\tAssert.hasText(methodParamName, \"'methodParamName' must not be empty\");\n+\t\tthis.methodParamName = methodParamName;\n \t}\n \n+\n \t/**\n-\t * Transform an HTTP POST into another method based on {@code methodParam}\n+\t * Transform an HTTP POST into another method based on {@code methodParamName}\n \t *\n \t * @param exchange the current server exchange\n \t * @param chain provides a way to delegate to the next filter\n@@ -68,36 +72,22 @@ public void setMethodParam(String methodParam) {\n \t@Override\n \tpublic Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\n \n-\t\tif (exchange.getRequest().getMethod() == HttpMethod.POST) {\n-\t\t\treturn exchange.getFormData()\n-\t\t\t\t\t.map(formData -> {\n-\t\t\t\t\t\tString method = formData.getFirst(methodParam);\n-\t\t\t\t\t\tif (StringUtils.hasLength(method)) {\n-\t\t\t\t\t\t\treturn convertedRequest(exchange, method);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse {\n-\t\t\t\t\t\t\treturn exchange;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t})\n-\t\t\t\t\t.then(convertedExchange -> chain.filter(convertedExchange));\n-\t\t}\n-\t\telse {\n+\t\tif (exchange.getRequest().getMethod() != HttpMethod.POST) {\n \t\t\treturn chain.filter(exchange);\n \t\t}\n+\n+\t\treturn exchange.getFormData()\n+\t\t\t\t.map(formData -> {\n+\t\t\t\t\tString method = formData.getFirst(this.methodParamName);\n+\t\t\t\t\treturn StringUtils.hasLength(method) ? mapExchange(exchange, method) : exchange;\n+\t\t\t\t})\n+\t\t\t\t.then((exchange1) -> chain.filter(exchange1));\n \t}\n \n-\t/**\n-\t * Mutate exchange into a new HTTP request method.\n-\t *\n-\t * @param exchange original {@link ServerWebExchange}\n-\t * @param method request HTTP method based on form data\n-\t * @return a mutated {@link ServerWebExchange}\n-\t */\n-\tprivate ServerWebExchange convertedRequest(ServerWebExchange exchange, String method) {\n-\t\tHttpMethod resolved = HttpMethod.resolve(method.toUpperCase(Locale.ENGLISH));\n-\t\tAssert.notNull(resolved, () -> \"HttpMethod '\" + method + \"' is not supported\");\n-\t\treturn exchange.mutate()\n-\t\t\t\t.request(builder -> builder.method(resolved))\n-\t\t\t\t.build();\n+\tprivate ServerWebExchange mapExchange(ServerWebExchange exchange, String methodParamValue) {\n+\t\tHttpMethod httpMethod = HttpMethod.resolve(methodParamValue.toUpperCase(Locale.ENGLISH));\n+\t\tAssert.notNull(httpMethod, () -> \"HttpMethod '\" + methodParamValue + \"' not supported\");\n+\t\treturn exchange.mutate().request(builder -> builder.method(httpMethod)).build();\n \t}\n+\n }"
        },
        {
            "sha": "07a3b12da772efefeb567b513f4f76bc38da2183",
            "filename": "spring-web/src/main/java/org/springframework/web/filter/reactive/package-info.java",
            "status": "added",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/a99fe3eda4af496cd6e2b90b7f9988a76fe6695e/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Ffilter%2Freactive%2Fpackage-info.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/a99fe3eda4af496cd6e2b90b7f9988a76fe6695e/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Ffilter%2Freactive%2Fpackage-info.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Ffilter%2Freactive%2Fpackage-info.java?ref=a99fe3eda4af496cd6e2b90b7f9988a76fe6695e",
            "patch": "@@ -0,0 +1,5 @@\n+/**\n+ * {@link org.springframework.web.server.WebFilter} implementations for use in\n+ * reactive web applications.\n+ */\n+package org.springframework.web.filter.reactive;"
        },
        {
            "sha": "3cf1842cf76794b983db81abd9cd39f0e166697e",
            "filename": "spring-web/src/main/java/org/springframework/web/server/adapter/DefaultServerWebExchange.java",
            "status": "modified",
            "additions": 4,
            "deletions": 2,
            "changes": 6,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/a99fe3eda4af496cd6e2b90b7f9988a76fe6695e/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fserver%2Fadapter%2FDefaultServerWebExchange.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/a99fe3eda4af496cd6e2b90b7f9988a76fe6695e/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fserver%2Fadapter%2FDefaultServerWebExchange.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fserver%2Fadapter%2FDefaultServerWebExchange.java?ref=a99fe3eda4af496cd6e2b90b7f9988a76fe6695e",
            "patch": "@@ -104,8 +104,10 @@ private static Mono<MultiValueMap<String, String>> initFormData(ServerHttpReques\n \t\ttry {\n \t\t\tcontentType = request.getHeaders().getContentType();\n \t\t\tif (MediaType.APPLICATION_FORM_URLENCODED.isCompatibleWith(contentType)) {\n-\t\t\t\tMap<String, Object> hints = Collections.emptyMap();\n-\t\t\t\treturn FORM_READER.readMono(FORM_DATA_VALUE_TYPE, request, hints).cache();\n+\t\t\t\treturn FORM_READER\n+\t\t\t\t\t\t.readMono(FORM_DATA_VALUE_TYPE, request, Collections.emptyMap())\n+\t\t\t\t\t\t.otherwiseIfEmpty(EMPTY_FORM_DATA)\n+\t\t\t\t\t\t.cache();\n \t\t\t}\n \t\t}\n \t\tcatch (InvalidMediaTypeException ex) {"
        },
        {
            "sha": "6277f502db0bc80c47bdbec72a1e8f13002a4fab",
            "filename": "spring-web/src/test/java/org/springframework/web/filter/reactive/HiddenHttpMethodFilterTests.java",
            "status": "modified",
            "additions": 51,
            "deletions": 76,
            "changes": 127,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/a99fe3eda4af496cd6e2b90b7f9988a76fe6695e/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Ffilter%2Freactive%2FHiddenHttpMethodFilterTests.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/a99fe3eda4af496cd6e2b90b7f9988a76fe6695e/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Ffilter%2Freactive%2FHiddenHttpMethodFilterTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Ffilter%2Freactive%2FHiddenHttpMethodFilterTests.java?ref=a99fe3eda4af496cd6e2b90b7f9988a76fe6695e",
            "patch": "@@ -16,7 +16,7 @@\n \n package org.springframework.web.filter.reactive;\n \n-import java.util.Optional;\n+import java.time.Duration;\n \n import org.hamcrest.Matchers;\n import org.junit.Test;\n@@ -27,123 +27,98 @@\n import org.springframework.http.HttpMethod;\n import org.springframework.http.MediaType;\n import org.springframework.mock.http.server.reactive.test.MockServerHttpRequest;\n+import org.springframework.mock.http.server.reactive.test.MockServerWebExchange;\n import org.springframework.web.server.ServerWebExchange;\n import org.springframework.web.server.WebFilterChain;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertThat;\n \n /**\n- * Tests for {@link HiddenHttpMethodFilter}\n- *\n+ * Tests for {@link HiddenHttpMethodFilter}.\n  * @author Greg Turnquist\n+ * @author Rossen Stoyanchev\n  */\n public class HiddenHttpMethodFilterTests {\n \n \tprivate final HiddenHttpMethodFilter filter = new HiddenHttpMethodFilter();\n \n+\tprivate final TestWebFilterChain filterChain = new TestWebFilterChain();\n+\n+\n \t@Test\n \tpublic void filterWithParameter() {\n-\t\tServerWebExchange mockExchange = createExchange(Optional.of(\"DELETE\"));\n-\n-\t\tWebFilterChain filterChain = exchange -> {\n-\t\t\tassertEquals(\"Invalid method\", HttpMethod.DELETE, exchange.getRequest().getMethod());\n-\t\t\treturn Mono.empty();\n-\t\t};\n+\t\tpostForm(\"_method=DELETE\").block(Duration.ZERO);\n+\t\tassertEquals(HttpMethod.DELETE, this.filterChain.getHttpMethod());\n+\t}\n \n-\t\tStepVerifier.create(filter.filter(mockExchange, filterChain))\n-\t\t\t\t.expectComplete()\n-\t\t\t\t.verify();\n+\t@Test\n+\tpublic void filterWithNoParameter() {\n+\t\tpostForm(\"\").block(Duration.ZERO);\n+\t\tassertEquals(HttpMethod.POST, this.filterChain.getHttpMethod());\n \t}\n \n \t@Test\n-\tpublic void filterWithInvalidParameter() {\n-\t\tServerWebExchange mockExchange = createExchange(Optional.of(\"INVALID\"));\n+\tpublic void filterWithEmptyStringParameter() {\n+\t\tpostForm(\"_method=\").block(Duration.ZERO);\n+\t\tassertEquals(HttpMethod.POST, this.filterChain.getHttpMethod());\n+\t}\n \n-\t\tWebFilterChain filterChain = exchange -> Mono.empty();\n+\t@Test\n+\tpublic void filterWithDifferentMethodParam() {\n+\t\tthis.filter.setMethodParamName(\"_foo\");\n+\t\tpostForm(\"_foo=DELETE\").block(Duration.ZERO);\n+\t\tassertEquals(HttpMethod.DELETE, this.filterChain.getHttpMethod());\n+\t}\n \n-\t\tStepVerifier.create(filter.filter(mockExchange, filterChain))\n+\t@Test\n+\tpublic void filterWithInvalidMethodValue() {\n+\t\tStepVerifier.create(postForm(\"_method=INVALID\"))\n \t\t\t\t.consumeErrorWith(error -> {\n \t\t\t\t\tassertThat(error, Matchers.instanceOf(IllegalArgumentException.class));\n-\t\t\t\t\tassertEquals(error.getMessage(), \"HttpMethod 'INVALID' is not supported\");\n+\t\t\t\t\tassertEquals(error.getMessage(), \"HttpMethod 'INVALID' not supported\");\n \t\t\t\t})\n \t\t\t\t.verify();\n \t}\n \n \t@Test\n-\tpublic void filterWithNoParameter() {\n-\t\tServerWebExchange mockExchange = createExchange(Optional.empty());\n+\tpublic void filterWithHttpPut() {\n \n-\t\tWebFilterChain filterChain = exchange -> {\n-\t\t\tassertEquals(\"Invalid method\", HttpMethod.POST, exchange.getRequest().getMethod());\n-\t\t\treturn Mono.empty();\n-\t\t};\n+\t\tServerWebExchange exchange = MockServerHttpRequest.put(\"/\")\n+\t\t\t\t.header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED_VALUE)\n+\t\t\t\t.body(\"_method=DELETE\")\n+\t\t\t\t.toExchange();\n \n-\t\tStepVerifier.create(filter.filter(mockExchange, filterChain))\n-\t\t\t\t.expectComplete()\n-\t\t\t\t.verify();\n+\t\tthis.filter.filter(exchange, this.filterChain).block(Duration.ZERO);\n+\t\tassertEquals(HttpMethod.PUT, this.filterChain.getHttpMethod());\n \t}\n \n-\t@Test\n-\tpublic void filterWithEmptyStringParameter() {\n-\t\tServerWebExchange mockExchange = createExchange(Optional.of(\"\"));\n-\n-\t\tWebFilterChain filterChain = exchange -> {\n-\t\t\tassertEquals(\"Invalid method\", HttpMethod.POST, exchange.getRequest().getMethod());\n-\t\t\treturn Mono.empty();\n-\t\t};\n-\n-\t\tStepVerifier.create(filter.filter(mockExchange, filterChain))\n-\t\t\t\t.expectComplete()\n-\t\t\t\t.verify();\n-\t}\n-\n-\t@Test\n-\tpublic void filterWithDifferentMethodParam() {\n-\t\tServerWebExchange mockExchange = createExchange(\"_foo\", Optional.of(\"DELETE\"));\n \n-\t\tWebFilterChain filterChain = exchange -> {\n-\t\t\tassertEquals(\"Invalid method\", HttpMethod.DELETE, exchange.getRequest().getMethod());\n-\t\t\treturn Mono.empty();\n-\t\t};\n+\tprivate Mono<Void> postForm(String body) {\n \n-\t\tfilter.setMethodParam(\"_foo\");\n+\t\tMockServerWebExchange exchange = MockServerHttpRequest.post(\"/\")\n+\t\t\t\t.header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED_VALUE)\n+\t\t\t\t.body(body)\n+\t\t\t\t.toExchange();\n \n-\t\tStepVerifier.create(filter.filter(mockExchange, filterChain))\n-\t\t\t\t.expectComplete()\n-\t\t\t\t.verify();\n+\t\treturn this.filter.filter(exchange, this.filterChain);\n \t}\n \n-\t@Test\n-\tpublic void filterWithoutPost() {\n-\t\tServerWebExchange mockExchange = createExchange(Optional.of(\"DELETE\")).mutate()\n-\t\t\t\t.request(builder -> builder.method(HttpMethod.PUT))\n-\t\t\t\t.build();\n \n-\t\tWebFilterChain filterChain = exchange -> {\n-\t\t\tassertEquals(\"Invalid method\", HttpMethod.PUT, exchange.getRequest().getMethod());\n-\t\t\treturn Mono.empty();\n-\t\t};\n+\tprivate static class TestWebFilterChain implements WebFilterChain {\n \n-\t\tStepVerifier.create(filter.filter(mockExchange, filterChain))\n-\t\t\t\t.expectComplete()\n-\t\t\t\t.verify();\n-\t}\n-\n-\tprivate ServerWebExchange createExchange(Optional<String> optionalMethod) {\n-\t\treturn createExchange(\"_method\", optionalMethod);\n-\t}\n+\t\tprivate HttpMethod httpMethod;\n \n-\tprivate ServerWebExchange createExchange(String methodName, Optional<String> optionalBody) {\n-\t\tMockServerHttpRequest.BodyBuilder builder = MockServerHttpRequest\n-\t\t\t\t.post(\"/hotels\")\n-\t\t\t\t.header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED_VALUE);\n \n-\t\tMockServerHttpRequest request = optionalBody\n-\t\t\t\t.map(method -> builder.body(methodName + \"=\" + method))\n-\t\t\t\t.orElse(builder.build());\n+\t\tpublic HttpMethod getHttpMethod() {\n+\t\t\treturn this.httpMethod;\n+\t\t}\n \n-\t\treturn request.toExchange();\n+\t\t@Override\n+\t\tpublic Mono<Void> filter(ServerWebExchange exchange) {\n+\t\t\tthis.httpMethod = exchange.getRequest().getMethod();\n+\t\t\treturn Mono.empty();\n+\t\t}\n \t}\n \n }"
        }
    ]
}