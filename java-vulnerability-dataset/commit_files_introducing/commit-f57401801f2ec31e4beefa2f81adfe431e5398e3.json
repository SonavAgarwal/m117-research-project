{
    "sha": "f57401801f2ec31e4beefa2f81adfe431e5398e3",
    "node_id": "MDY6Q29tbWl0MTA3MzUzNTIxOmY1NzQwMTgwMWYyZWMzMWU0YmVlZmEyZjgxYWRmZTQzMWU1Mzk4ZTM=",
    "commit": {
        "author": {
            "name": "shafreen",
            "email": "shafreen@wso2.com",
            "date": "2015-11-24T00:07:58Z"
        },
        "committer": {
            "name": "Senduran",
            "email": "bsenduran@gmail.com",
            "date": "2015-11-30T14:54:12Z"
        },
        "message": "initial code migration",
        "tree": {
            "sha": "62f2b9d6831bc70337dfb871078b23d834d13c1f",
            "url": "https://api.github.com/repos/wso2/transport-http/git/trees/62f2b9d6831bc70337dfb871078b23d834d13c1f"
        },
        "url": "https://api.github.com/repos/wso2/transport-http/git/commits/f57401801f2ec31e4beefa2f81adfe431e5398e3",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/wso2/transport-http/commits/f57401801f2ec31e4beefa2f81adfe431e5398e3",
    "html_url": "https://github.com/wso2/transport-http/commit/f57401801f2ec31e4beefa2f81adfe431e5398e3",
    "comments_url": "https://api.github.com/repos/wso2/transport-http/commits/f57401801f2ec31e4beefa2f81adfe431e5398e3/comments",
    "author": null,
    "committer": {
        "login": "bsenduran",
        "id": 1879762,
        "node_id": "MDQ6VXNlcjE4Nzk3NjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1879762?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bsenduran",
        "html_url": "https://github.com/bsenduran",
        "followers_url": "https://api.github.com/users/bsenduran/followers",
        "following_url": "https://api.github.com/users/bsenduran/following{/other_user}",
        "gists_url": "https://api.github.com/users/bsenduran/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bsenduran/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bsenduran/subscriptions",
        "organizations_url": "https://api.github.com/users/bsenduran/orgs",
        "repos_url": "https://api.github.com/users/bsenduran/repos",
        "events_url": "https://api.github.com/users/bsenduran/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bsenduran/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "4a535296d9a01e2a03cf851ee67466950ef2ced3",
            "url": "https://api.github.com/repos/wso2/transport-http/commits/4a535296d9a01e2a03cf851ee67466950ef2ced3",
            "html_url": "https://github.com/wso2/transport-http/commit/4a535296d9a01e2a03cf851ee67466950ef2ced3"
        }
    ],
    "stats": {
        "total": 2332,
        "additions": 2332,
        "deletions": 0
    },
    "files": [
        {
            "sha": "7b1eaf0d9efc4f46eb86ba9a49a26df344e0b6d9",
            "filename": "http/netty/component/pom.xml",
            "status": "modified",
            "additions": 15,
            "deletions": 0,
            "changes": 15,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fpom.xml",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fpom.xml?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -64,6 +64,21 @@\n             <artifactId>slf4j-api</artifactId>\n             <version>${slf4j.version}</version>\n         </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-log4j12</artifactId>\n+            <version>${slf4j.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-pool.wso2</groupId>\n+            <artifactId>commons-pool</artifactId>\n+            <version>1.5.6.wso2v1</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.carbon.messaging</groupId>\n+            <artifactId>org.wso2.carbon.messaging</artifactId>\n+            <version>1.0.0-SNAPSHOT</version>\n+        </dependency>\n     </dependencies>\n \n     <build>"
        },
        {
            "sha": "27e6a4ee2f18627fbbe2273f7d50c8cc5913590b",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/common/CarbonGatewayConstants.java",
            "status": "added",
            "additions": 23,
            "deletions": 0,
            "changes": 23,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2FCarbonGatewayConstants.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2FCarbonGatewayConstants.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2FCarbonGatewayConstants.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the License.\n+ */\n+package org.wso2.carbon.transport.http.netty.common;\n+\n+/**\n+ * Class to keep the contants required for gateway implementation\n+ */\n+public class CarbonGatewayConstants {\n+    public static final String ORIGINAL_MESSAGE = \"ORIGINAL_MESSAGE\";\n+    public static final int AGGREGATED_HTTP_MESSAGE_MAX_SIZE = 1048576;\n+}"
        },
        {
            "sha": "349d601e2a6b8010f0f628d8e415eb0ab03ed015",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/common/Constants.java",
            "status": "added",
            "additions": 103,
            "deletions": 0,
            "changes": 103,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2FConstants.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2FConstants.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2FConstants.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.wso2.carbon.transport.http.netty.common;\n+\n+/**\n+ * Common Constants used by gate way.\n+ */\n+public class Constants {\n+    public static final String PROTOCOL_NAME = \"http\";\n+\n+    public static final String HTTP_VERSION = \"HTTP_VERSION\";\n+\n+    public static final String HTTP_METHOD = \"HTTP_METHOD\";\n+\n+    public static final String HTTP_CONTENT_TYPE = \"Content-Type\";\n+\n+    public static final String HTTP_SOAP_ACTION = \"SOAPAction\";\n+\n+    public static final String HTTP_CONTENT_ENCODING = \"Accept-Encoding\";\n+\n+    public static final String HTTP_HOST = \"Host\";\n+\n+    public static final String TRANSPORT_HEADERS = \"TRANSPORT_HEADERS\";\n+\n+    public static final String HTTP_STATUS_CODE = \"HTTP_STATUS_CODE\";\n+\n+    public static final String CHNL_HNDLR_CTX = \"CHNL_HNDLR_CTX\";\n+\n+    public static final String SRC_HNDLR = \"SRC_HNDLR\";\n+\n+    public static final String ENGINE = \"Engine\";\n+\n+    public static final String RESPONSE_CALLBACK = \"RESPONSE_CALLBACK\";\n+\n+    public static final String DISRUPTOR = \"Disruptor\";\n+\n+    public static final String BUSY_SPIN = \"BUSY_SPIN\";\n+\n+    public static final String BLOCKING_WAIT = \"BLOCKING_WAIT\";\n+\n+    public static final String LITE_BLOCKING = \"LITE_BLOCKING\";\n+\n+    public static final String PHASED_BACKOFF = \"PHASED_BACKOFF\";\n+\n+    public static final String TIME_BLOCKING = \"TIME_BLOCKING\";\n+\n+    public static final String SLEEP_WAITING = \"SLEEP_WAITING\";\n+\n+    public static final String WAIT_STRATEGY = \"disruptor.wait.strategy\";\n+\n+    public static final String DISRUPTOR_BUFFER_SIZE = \"disruptor.buffer.size\";\n+\n+    public static final String DISRUPTOR_COUNT = \"disruptor.count\";\n+\n+    public static final String DISRUPTOR_EVENT_HANDLER_COUNT = \"disruptor.eventhandler.count\";\n+\n+    public static final String CONTENT_QUEUE_SIZE = \"content.queue.size\";\n+\n+    public static final String SHARE_DISRUPTOR_WITH_OUTBOUND = \"share.disruptor.with.outbound\";\n+\n+    // Bootstrap related\n+    public static final String CLINET_BOOTSTRAP_TCP_NO_DELY = \"client.bootstrap.nodelay\";\n+\n+    public static final String CLINET_BOOTSTRAP_KEEPALIVE = \"client.bootstrap.keepalive\";\n+\n+    public static final String CLINET_BOOTSTRAP_SEND_BUFFER_SIZE = \"client.bootstrap.sendbuffersize\";\n+\n+    public static final String CLINET_BOOTSTRAP_RECEIVE_BUFFER_SIZE = \"client.bootstrap.recievebuffersize\";\n+\n+    public static final String CLINET_BOOTSTRAP_CONNECT_TIME_OUT = \"client.bootstrap.connect.timeout\";\n+\n+    public static final String CLINET_BOOTSTRAP_SO_REUSE = \"client.bootstrap.socket.reuse\";\n+\n+    // Connection Pool parameters\n+\n+    public static final String NUMBER_OF_POOLS = \"connection.pool.count\";\n+\n+    public static final String MAX_ACTIVE_CONNECTIONS_PER_POOL = \"max.active.connections.per.pool\";\n+\n+    public static final String MIN_IDLE_CONNECTIONS_PER_POOL = \"min.idle.connections.per.pool\";\n+\n+    public static final String MAX_IDLE_CONNECTIONS_PER_POOL = \"max.idle.connections.per.pool\";\n+\n+    public static final String MIN_EVICTION_IDLE_TIME = \"min.eviction.idle.time\";\n+\n+    public static final String ENABLE_GLOBAL_CONNECTION_POOLING = \"enable.global.client.connection.pooling\";\n+\n+}\n+\n+"
        },
        {
            "sha": "00779995ba0cfab09fb01a1eba14ac434c43618b",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/common/GWException.java",
            "status": "added",
            "additions": 38,
            "deletions": 0,
            "changes": 38,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2FGWException.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2FGWException.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2FGWException.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.wso2.carbon.transport.http.netty.common;\n+\n+/**\n+ * Custom exception class for gateway specific exceptions.\n+ */\n+public class GWException extends Exception {\n+\n+    public GWException() {\n+    }\n+\n+    public GWException(String message) {\n+        super(message);\n+    }\n+\n+    public GWException(Throwable cause) {\n+        super(cause);\n+    }\n+\n+    public GWException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+\n+}"
        },
        {
            "sha": "b7894048985d1936bc6a1eb984120c6882875146",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/common/HTTPContentChunk.java",
            "status": "added",
            "additions": 51,
            "deletions": 0,
            "changes": 51,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2FHTTPContentChunk.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2FHTTPContentChunk.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2FHTTPContentChunk.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.wso2.carbon.transport.http.netty.common;\n+\n+import io.netty.handler.codec.http.HttpContent;\n+import io.netty.handler.codec.http.LastHttpContent;\n+import org.wso2.carbon.messaging.ContentChunk;\n+\n+/**\n+ * A class that represent the Http content chunk.\n+ */\n+public class HTTPContentChunk implements ContentChunk {\n+    boolean lastChunk = false;\n+\n+    private HttpContent httpContent;\n+\n+\n+    public HTTPContentChunk(HttpContent content) {\n+        if (content instanceof LastHttpContent) {\n+            lastChunk = true;\n+        }\n+        httpContent = content;\n+    }\n+\n+\n+    public HttpContent getHttpContent() {\n+        if (isLastChunk()) {\n+            return httpContent;\n+        } else {\n+            return httpContent;\n+        }\n+    }\n+\n+    public boolean isLastChunk() {\n+        return lastChunk;\n+    }\n+}\n+"
        },
        {
            "sha": "8e7569368dd07e655d8a816061c4942feb0422ac",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/common/HttpRoute.java",
            "status": "added",
            "additions": 47,
            "deletions": 0,
            "changes": 47,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2FHttpRoute.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2FHttpRoute.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2FHttpRoute.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.wso2.carbon.transport.http.netty.common;\n+\n+/**\n+ * Class encapsulates the Endpoint address.\n+ */\n+public class HttpRoute {\n+    private String host;\n+    private int port;\n+\n+\n+    public HttpRoute(String host, int port) {\n+        this.host = host;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return host + \"-\" + port;\n+    }\n+\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    public int getPort() {\n+        return port;\n+    }\n+}\n+\n+\n+\n+"
        },
        {
            "sha": "efc6d8ad8b7a3d3272d049c770dae05adb47dbdb",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/common/PipeImpl.java",
            "status": "added",
            "additions": 113,
            "deletions": 0,
            "changes": 113,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2FPipeImpl.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2FPipeImpl.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2FPipeImpl.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.wso2.carbon.transport.http.netty.common;\n+\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.wso2.carbon.messaging.ContentChunk;\n+import org.wso2.carbon.messaging.Pipe;\n+\n+import java.io.InputStream;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+\n+/**\n+ * A class that contains the content of request.\n+ */\n+public class PipeImpl implements Pipe {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PipeImpl.class);\n+\n+    private BlockingQueue<ContentChunk> contentQueue;\n+\n+    private BlockingQueue<ContentChunk> clonedContentQueue;\n+\n+    private boolean isLastChunkAdded = false;\n+\n+    private InputStream inputStream = null;\n+\n+    private ByteBuf messageBytes = null;\n+\n+    public PipeImpl(int blockingQueueSize) {\n+        this.contentQueue = new LinkedBlockingQueue<>(blockingQueueSize);\n+        this.clonedContentQueue = new LinkedBlockingQueue<>(blockingQueueSize);\n+    }\n+\n+    public ContentChunk getContent() {\n+        try {\n+            return contentQueue.take();\n+        } catch (InterruptedException e) {\n+            LOG.error(\"Error while retrieving chunk from queue.\", e);\n+            return null;\n+        }\n+    }\n+\n+    public void addContentChunk(ContentChunk contentChunk) {\n+        contentQueue.add(contentChunk);\n+        if (contentChunk.isLastChunk()) {\n+            this.setLastChunkAdded(true);\n+        }\n+    }\n+\n+    @Override\n+    public BlockingQueue<ContentChunk> getClonedContentQueue() {\n+        if (!this.contentQueue.isEmpty()) {\n+            if (!clonedContentQueue.isEmpty()) {\n+                clonedContentQueue.clear();\n+            }\n+            this.clonedContentQueue.addAll(this.contentQueue);\n+        }\n+        return this.clonedContentQueue;\n+    }\n+\n+    public void clearContent() {\n+        this.contentQueue.clear();\n+        this.clonedContentQueue.clear();\n+    }\n+\n+    public boolean isEmpty() {\n+        return contentQueue.isEmpty();\n+    }\n+\n+    public boolean isLastChunkAdded() {\n+        return isLastChunkAdded;\n+    }\n+\n+    public void setLastChunkAdded(boolean isLastChunkAdded) {\n+        this.isLastChunkAdded = isLastChunkAdded;\n+    }\n+\n+    public InputStream getInputStream() {\n+        return inputStream;\n+    }\n+\n+    public void setInputStream(InputStream inputStream) {\n+        this.inputStream = inputStream;\n+    }\n+\n+    @Override\n+    public void setMessageBytes(byte[] bytes) {\n+        this.messageBytes = Unpooled.copiedBuffer(bytes);\n+    }\n+\n+    public byte[] getMessageBytes() {\n+        return messageBytes.array();\n+    }\n+\n+}"
        },
        {
            "sha": "4605757c99f81321f0eceef52650cb2310c4d66a",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/common/TransportSender.java",
            "status": "added",
            "additions": 34,
            "deletions": 0,
            "changes": 34,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2FTransportSender.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2FTransportSender.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2FTransportSender.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.wso2.carbon.transport.http.netty.common;\n+\n+import org.wso2.carbon.messaging.CarbonCallback;\n+import org.wso2.carbon.messaging.CarbonMessage;\n+\n+/**\n+ * Interface for Message Sender to the BE.\n+ */\n+public interface TransportSender {\n+    /**\n+     * Should include the logic for handover messages to BE.\n+     * @param msg Mediated Request.\n+     * @param callback Carbon callback created by engine.\n+     * @return void\n+     * @throws GWException Gateway exception to singal any failures to upper layers.\n+     */\n+    public boolean send(CarbonMessage msg, CarbonCallback callback) throws GWException;\n+\n+}"
        },
        {
            "sha": "3d81674fae557f51f6836333d16d7559ce943511",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/common/Util.java",
            "status": "added",
            "additions": 117,
            "deletions": 0,
            "changes": 117,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2FUtil.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2FUtil.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2FUtil.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.wso2.carbon.transport.http.netty.common;\n+\n+import io.netty.handler.codec.http.DefaultHttpRequest;\n+import io.netty.handler.codec.http.DefaultHttpResponse;\n+import io.netty.handler.codec.http.HttpHeaders;\n+import io.netty.handler.codec.http.HttpMessage;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http.HttpRequest;\n+import io.netty.handler.codec.http.HttpResponse;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.netty.handler.codec.http.HttpVersion;\n+import org.wso2.carbon.messaging.CarbonMessage;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;\n+\n+/**\n+ * Includes utility methods for creating http requests and responses and their related properties.\n+ */\n+public class Util {\n+\n+    private static final String DEFAULT_HTTP_METHOD_POST = \"POST\";\n+    private static final String DEFAULT_VERSION_HTTP_1_1 = \"HTTP/1.1\";\n+\n+    public static Map<String, String> getHeaders(HttpMessage message) {\n+        Map<String, String> headers = new HashMap<>();\n+        if (message.headers() != null) {\n+            for (String k : message.headers().names()) {\n+                headers.put(k, message.headers().get(k));\n+            }\n+        }\n+\n+        return headers;\n+    }\n+\n+    public static void setHeaders(HttpMessage message, Map<String, String> headers) {\n+        HttpHeaders httpHeaders = message.headers();\n+        for (Map.Entry<String, String> e : headers.entrySet()) {\n+            httpHeaders.add(e.getKey(), e.getValue());\n+        }\n+    }\n+\n+    public static String getStringValue(CarbonMessage msg, String key, String defaultValue) {\n+        String value = (String) msg.getProperty(key);\n+        if (value == null) {\n+            return defaultValue;\n+        }\n+\n+        return value;\n+    }\n+\n+    public static int getIntValue(CarbonMessage msg, String key, int defaultValue) {\n+        Integer value = (Integer) msg.getProperty(key);\n+        if (value == null) {\n+            return defaultValue;\n+        }\n+\n+        return value;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static HttpResponse createHttpResponse(CarbonMessage msg) {\n+        HttpVersion httpVersion = new HttpVersion(Util.getStringValue(msg,\n+                Constants.HTTP_VERSION, HTTP_1_1.text()), true);\n+\n+        int statusCode = Util.getIntValue(msg, Constants.HTTP_STATUS_CODE, 200);\n+\n+        HttpResponseStatus httpResponseStatus = new HttpResponseStatus(statusCode,\n+                HttpResponseStatus.valueOf(statusCode).reasonPhrase());\n+\n+        DefaultHttpResponse outgoingResponse = new DefaultHttpResponse(httpVersion,\n+                httpResponseStatus, false);\n+\n+        Map<String, String> headerMap = (Map) msg.getProperty(Constants.TRANSPORT_HEADERS);\n+\n+        Util.setHeaders(outgoingResponse, headerMap);\n+\n+        return outgoingResponse;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static HttpRequest createHttpRequest(CarbonMessage msg) {\n+        HttpMethod httpMethod;\n+        if (null != msg.getProperty(Constants.HTTP_METHOD)) {\n+            httpMethod = new HttpMethod((String) msg.getProperty(Constants.HTTP_METHOD));\n+        } else {\n+            httpMethod = new HttpMethod(DEFAULT_HTTP_METHOD_POST);\n+        }\n+        HttpVersion httpVersion;\n+        if (null != msg.getProperty(Constants.HTTP_VERSION)) {\n+            httpVersion = new HttpVersion((String) msg.getProperty(Constants.HTTP_VERSION), true);\n+        } else {\n+            httpVersion = new HttpVersion(DEFAULT_VERSION_HTTP_1_1, true);\n+        }\n+        HttpRequest outgoingRequest = new DefaultHttpRequest(httpVersion, httpMethod, msg.getURI(), false);\n+        Map headers = (Map) msg.getProperty(Constants.TRANSPORT_HEADERS);\n+        Util.setHeaders(outgoingRequest, headers);\n+        return outgoingRequest;\n+    }\n+}"
        },
        {
            "sha": "f3476b191c9a600d50023c7b91d58d874953b049",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/common/disruptor/config/DisruptorConfig.java",
            "status": "added",
            "additions": 92,
            "deletions": 0,
            "changes": 92,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2Fdisruptor%2Fconfig%2FDisruptorConfig.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2Fdisruptor%2Fconfig%2FDisruptorConfig.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2Fdisruptor%2Fconfig%2FDisruptorConfig.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.wso2.carbon.transport.http.netty.common.disruptor.config;\n+\n+import com.lmax.disruptor.RingBuffer;\n+import org.wso2.carbon.transport.http.netty.common.Constants;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * This class represents the disruptor configuration.\n+ */\n+public class DisruptorConfig {\n+\n+    private int bufferSize;\n+    private int noDisruptors;\n+    private int noOfEventHandlersPerDisruptor;\n+    private String disruptorWaitStrategy;\n+    private boolean notShared;\n+    private List<RingBuffer> disruptorMap = new ArrayList<>();\n+    private AtomicInteger index = new AtomicInteger(0);\n+\n+    public DisruptorConfig() {\n+\n+        this.bufferSize = 512;\n+\n+        this.noDisruptors = 5;\n+\n+        this.noOfEventHandlersPerDisruptor = 1;\n+\n+        this.disruptorWaitStrategy = Constants.PHASED_BACKOFF;\n+    }\n+\n+    public DisruptorConfig(String bufferSize, String noDisruptors, String noOfEventHandlersPerDisruptor,\n+                           String disruptorWaitStrategy, boolean notShared) {\n+        this.bufferSize = Integer.parseInt(bufferSize);\n+        this.noDisruptors = Integer.parseInt(noDisruptors);\n+        this.noOfEventHandlersPerDisruptor = Integer.parseInt(noOfEventHandlersPerDisruptor);\n+        this.disruptorWaitStrategy = disruptorWaitStrategy;\n+        this.notShared = notShared;\n+\n+    }\n+\n+    public int getBufferSize() {\n+        return bufferSize;\n+    }\n+\n+    public int getNoDisruptors() {\n+        return noDisruptors;\n+    }\n+\n+    public int getNoOfEventHandlersPerDisruptor() {\n+        return noOfEventHandlersPerDisruptor;\n+    }\n+\n+    public String getDisruptorWaitStrategy() {\n+        return disruptorWaitStrategy;\n+    }\n+\n+    public boolean isShared() {\n+        return !notShared;\n+    }\n+\n+    public RingBuffer getDisruptor() {\n+        int ind = index.getAndIncrement() % noDisruptors;\n+            return disruptorMap.get(ind);\n+    }\n+\n+    public void addDisruptor(RingBuffer ringBuffer) {\n+        disruptorMap.add(ringBuffer);\n+    }\n+\n+    public void notifyChannelInactive() {\n+        index.getAndDecrement();\n+    }\n+\n+}"
        },
        {
            "sha": "fd1dc06a3364f3bd9843ca135ab456329029bc49",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/common/disruptor/config/DisruptorFactory.java",
            "status": "added",
            "additions": 114,
            "deletions": 0,
            "changes": 114,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2Fdisruptor%2Fconfig%2FDisruptorFactory.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2Fdisruptor%2Fconfig%2FDisruptorFactory.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2Fdisruptor%2Fconfig%2FDisruptorFactory.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.wso2.carbon.transport.http.netty.common.disruptor.config;\n+\n+\n+import com.lmax.disruptor.BlockingWaitStrategy;\n+import com.lmax.disruptor.BusySpinWaitStrategy;\n+import com.lmax.disruptor.EventHandler;\n+import com.lmax.disruptor.ExceptionHandler;\n+import com.lmax.disruptor.LiteBlockingWaitStrategy;\n+import com.lmax.disruptor.PhasedBackoffWaitStrategy;\n+import com.lmax.disruptor.SleepingWaitStrategy;\n+import com.lmax.disruptor.TimeoutBlockingWaitStrategy;\n+import com.lmax.disruptor.WaitStrategy;\n+import com.lmax.disruptor.dsl.Disruptor;\n+import com.lmax.disruptor.dsl.ProducerType;\n+import org.wso2.carbon.messaging.CarbonMessageProcessor;\n+import org.wso2.carbon.transport.http.netty.common.Constants;\n+import org.wso2.carbon.transport.http.netty.common.disruptor.event.CarbonDisruptorEvent;\n+import org.wso2.carbon.transport.http.netty.common.disruptor.exception.GenericExceptionHandler;\n+import org.wso2.carbon.transport.http.netty.common.disruptor.handler.CarbonDisruptorEventHandler;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Util Class creates Disruptors for Inbound and Outbound Transports.\n+ */\n+public class DisruptorFactory {\n+\n+    private static ConcurrentHashMap<DisruptorType, DisruptorConfig> disruptorConfigHashMap = new ConcurrentHashMap<>();\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static void createDisruptors(DisruptorType type, DisruptorConfig disruptorConfig,\n+                                        CarbonMessageProcessor engine) {\n+        WaitStrategy inbounsWaitStrategy = getWaitStrategy(disruptorConfig.getDisruptorWaitStrategy());\n+        for (int i = 0; i < disruptorConfig.getNoDisruptors(); i++) {\n+            ExecutorService executorService =\n+                       Executors.newFixedThreadPool(disruptorConfig.getNoOfEventHandlersPerDisruptor());\n+            Disruptor disruptor =\n+                       new Disruptor<>(CarbonDisruptorEvent.EVENT_FACTORY,\n+                                       disruptorConfig.getBufferSize(),\n+                                       executorService,\n+                                       ProducerType.MULTI,\n+                                       inbounsWaitStrategy);\n+            ExceptionHandler exh = new GenericExceptionHandler();\n+            EventHandler[] eventHandlers = new EventHandler[disruptorConfig.getNoOfEventHandlersPerDisruptor()];\n+            for (int j = 0; j < disruptorConfig.getNoOfEventHandlersPerDisruptor(); j++) {\n+                EventHandler eventHandler = new CarbonDisruptorEventHandler(engine);\n+                eventHandlers[j] = eventHandler;\n+            }\n+            disruptor.handleEventsWith(eventHandlers);\n+            for (EventHandler eventHandler : eventHandlers) {\n+                disruptor.handleExceptionsFor(eventHandler).with(exh);\n+            }\n+            disruptorConfig.addDisruptor(disruptor.start());\n+        }\n+        disruptorConfigHashMap.put(type, disruptorConfig);\n+    }\n+\n+\n+    private static WaitStrategy getWaitStrategy(String waitstrategy) {\n+        WaitStrategy waitStrategy;\n+        switch (waitstrategy) {\n+            case Constants.BLOCKING_WAIT:\n+                waitStrategy = new BlockingWaitStrategy();\n+                break;\n+            case Constants.BUSY_SPIN:\n+                waitStrategy = new BusySpinWaitStrategy();\n+                break;\n+            case Constants.LITE_BLOCKING:\n+                waitStrategy = new LiteBlockingWaitStrategy();\n+                break;\n+            case Constants.SLEEP_WAITING:\n+                waitStrategy = new SleepingWaitStrategy();\n+                break;\n+            case Constants.TIME_BLOCKING:\n+                waitStrategy = new TimeoutBlockingWaitStrategy(1, TimeUnit.SECONDS);\n+                break;\n+            default:\n+                waitStrategy = PhasedBackoffWaitStrategy.withLiteLock(1, 4, TimeUnit.SECONDS);\n+\n+        }\n+        return waitStrategy;\n+    }\n+\n+\n+    public static DisruptorConfig getDisruptorConfig(DisruptorType disruptorType) {\n+        return disruptorConfigHashMap.get(disruptorType);\n+    }\n+\n+    /**\n+     * Describe types of disruptors.\n+     */\n+    public enum DisruptorType {\n+        INBOUND, OUTBOUND\n+    }\n+\n+}"
        },
        {
            "sha": "367c41b493c9239665375b74bd1a5a5346d47c1b",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/common/disruptor/event/CarbonDisruptorEvent.java",
            "status": "added",
            "additions": 40,
            "deletions": 0,
            "changes": 40,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2Fdisruptor%2Fevent%2FCarbonDisruptorEvent.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2Fdisruptor%2Fevent%2FCarbonDisruptorEvent.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2Fdisruptor%2Fevent%2FCarbonDisruptorEvent.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.wso2.carbon.transport.http.netty.common.disruptor.event;\n+\n+import com.lmax.disruptor.EventFactory;\n+\n+/**\n+ * A class encapsulates the Disruptor event.\n+ */\n+public class CarbonDisruptorEvent {\n+\n+    public static final EventFactory<CarbonDisruptorEvent> EVENT_FACTORY = CarbonDisruptorEvent::new;\n+    private Object event;\n+\n+    public CarbonDisruptorEvent() {\n+    }\n+\n+    public Object getEvent() {\n+        return event;\n+    }\n+\n+    public void setEvent(Object event) {\n+        this.event = event;\n+    }\n+\n+\n+}"
        },
        {
            "sha": "a691e049002383b1f81773bc97714c1cd90a0e04",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/common/disruptor/exception/GenericExceptionHandler.java",
            "status": "added",
            "additions": 39,
            "deletions": 0,
            "changes": 39,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2Fdisruptor%2Fexception%2FGenericExceptionHandler.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2Fdisruptor%2Fexception%2FGenericExceptionHandler.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2Fdisruptor%2Fexception%2FGenericExceptionHandler.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.wso2.carbon.transport.http.netty.common.disruptor.exception;\n+\n+import com.lmax.disruptor.ExceptionHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Exception handler class of the Disruptor.\n+ */\n+public class GenericExceptionHandler implements ExceptionHandler {\n+    private static final Logger logger = LoggerFactory.getLogger(GenericExceptionHandler.class);\n+\n+    public void handleEventException(Throwable ex, long sequence, Object event) {\n+        logger.error(\"Caught unhandled exception while processing: \" + event.toString(), ex);\n+    }\n+\n+    public void handleOnStartException(Throwable ex) {\n+        logger.error(\"Unexpected exception during startup.\", ex);\n+    }\n+\n+    public void handleOnShutdownException(Throwable ex) {\n+        logger.error(\"Unexpected exception during shutdown.\", ex);\n+    }\n+}"
        },
        {
            "sha": "1875cf8ad2f4a2e1b0ee2d3100e898e26a6527c5",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/common/disruptor/handler/CarbonDisruptorEventHandler.java",
            "status": "added",
            "additions": 63,
            "deletions": 0,
            "changes": 63,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2Fdisruptor%2Fhandler%2FCarbonDisruptorEventHandler.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2Fdisruptor%2Fhandler%2FCarbonDisruptorEventHandler.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2Fdisruptor%2Fhandler%2FCarbonDisruptorEventHandler.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.wso2.carbon.transport.http.netty.common.disruptor.handler;\n+\n+import org.wso2.carbon.messaging.CarbonCallback;\n+import org.wso2.carbon.messaging.CarbonMessage;\n+import org.wso2.carbon.messaging.CarbonMessageProcessor;\n+import org.wso2.carbon.transport.http.netty.common.disruptor.event.CarbonDisruptorEvent;\n+\n+import java.util.concurrent.locks.Lock;\n+\n+/**\n+ * Event Consumer of the Disruptor.\n+ */\n+public class CarbonDisruptorEventHandler extends DisruptorEventHandler {\n+\n+    private CarbonMessageProcessor carbonMessageProcessor;\n+\n+    public CarbonDisruptorEventHandler(CarbonMessageProcessor  engine) {\n+        carbonMessageProcessor = engine;\n+    }\n+\n+    @Override\n+    public void onEvent(CarbonDisruptorEvent carbonDisruptorEvent, long l, boolean b) throws Exception {\n+        CarbonMessage carbonMessage = (CarbonMessage) carbonDisruptorEvent.getEvent();\n+        Lock lock = carbonMessage.getLock();\n+        if (carbonMessage.getDirection() == CarbonMessage.REQUEST) {\n+            // Mechanism to process each event from only one event handler\n+            if (lock.tryLock()) {\n+                CarbonCallback carbonCallback = carbonMessage.getCarbonCallback();\n+                carbonMessageProcessor.receive(carbonMessage, carbonCallback);\n+                // lock.unlock() does not used because if there are multiple event handlers and same event\n+                // should not processed by multiple event handlers .If  unlock happens too early for a event before\n+                // other Event handler object reads that event then there will be a probability of executing\n+                // same event by multiple event handlers.\n+            }\n+        } else if (carbonMessage.getDirection() == CarbonMessage.RESPONSE) {\n+\n+            if (lock.tryLock()) {\n+\n+                CarbonCallback carbonCallback = carbonMessage.getCarbonCallback();\n+                carbonCallback.done(carbonMessage);\n+\n+            }\n+\n+\n+        }\n+    }\n+}\n+"
        },
        {
            "sha": "919b7cee1418b10ce684e644ee7bf651c79d95e4",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/common/disruptor/handler/DisruptorEventHandler.java",
            "status": "added",
            "additions": 29,
            "deletions": 0,
            "changes": 29,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2Fdisruptor%2Fhandler%2FDisruptorEventHandler.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2Fdisruptor%2Fhandler%2FDisruptorEventHandler.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2Fdisruptor%2Fhandler%2FDisruptorEventHandler.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.wso2.carbon.transport.http.netty.common.disruptor.handler;\n+\n+import com.lmax.disruptor.EventHandler;\n+import org.wso2.carbon.transport.http.netty.common.disruptor.event.CarbonDisruptorEvent;\n+\n+/**\n+ * Abstract class of Disruptor consumers.\n+ */\n+public abstract class DisruptorEventHandler implements EventHandler<CarbonDisruptorEvent> {\n+\n+    public abstract void onEvent(CarbonDisruptorEvent carbonDisruptorEvent, long l, boolean b) throws Exception;\n+\n+\n+}"
        },
        {
            "sha": "51dd72b0fd765ba498470e8b6105544c97a6ed57",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/common/disruptor/publisher/CarbonEventPublisher.java",
            "status": "added",
            "additions": 36,
            "deletions": 0,
            "changes": 36,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2Fdisruptor%2Fpublisher%2FCarbonEventPublisher.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2Fdisruptor%2Fpublisher%2FCarbonEventPublisher.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fcommon%2Fdisruptor%2Fpublisher%2FCarbonEventPublisher.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.wso2.carbon.transport.http.netty.common.disruptor.publisher;\n+\n+import com.lmax.disruptor.EventTranslator;\n+import org.wso2.carbon.transport.http.netty.common.disruptor.event.CarbonDisruptorEvent;\n+\n+/**\n+ * Event Publisher for RingNBuffer of Disruptor.\n+ */\n+public class CarbonEventPublisher implements EventTranslator<CarbonDisruptorEvent> {\n+\n+    private Object event;\n+\n+\n+    public CarbonEventPublisher(Object event) {\n+        this.event = event;\n+    }\n+\n+    public void translateTo(CarbonDisruptorEvent event, long sequence) {\n+        event.setEvent(this.event);\n+    }\n+}"
        },
        {
            "sha": "e9b898226490648629c44a117c2030c24175e8a5",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/listener/GatewayNettyInitializer.java",
            "status": "added",
            "additions": 124,
            "deletions": 0,
            "changes": 124,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Flistener%2FGatewayNettyInitializer.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Flistener%2FGatewayNettyInitializer.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Flistener%2FGatewayNettyInitializer.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.wso2.carbon.transport.http.netty.listener;\n+\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.handler.codec.http.HttpRequestDecoder;\n+import io.netty.handler.codec.http.HttpResponseEncoder;\n+import org.apache.log4j.Logger;\n+import org.wso2.carbon.messaging.CarbonCallback;\n+import org.wso2.carbon.messaging.CarbonMessage;\n+import org.wso2.carbon.messaging.CarbonMessageProcessor;\n+import org.wso2.carbon.messaging.CarbonTransportServerInitializer;\n+import org.wso2.carbon.transport.http.netty.common.Constants;\n+import org.wso2.carbon.transport.http.netty.common.disruptor.config.DisruptorConfig;\n+import org.wso2.carbon.transport.http.netty.common.disruptor.config.DisruptorFactory;\n+import org.wso2.carbon.transport.http.netty.sender.channel.BootstrapConfiguration;\n+import org.wso2.carbon.transport.http.netty.sender.channel.pool.ConnectionManager;\n+import org.wso2.carbon.transport.http.netty.sender.channel.pool.PoolConfiguration;\n+\n+import java.io.File;\n+import java.util.Map;\n+\n+/**\n+ * A class that responsible for create server side channels.\n+ */\n+public class GatewayNettyInitializer implements CarbonTransportServerInitializer {\n+\n+    private static final Logger log = Logger.getLogger(GatewayNettyInitializer.class);\n+    private int queueSize = 32544;\n+    private ConnectionManager connectionManager;\n+\n+    public static final String CAMEL_CONTEXT_CONFIG_FILE = \"repository\" + File.separator + \"conf\" +\n+                                                           File.separator +\n+                                                           \"camel\" + File.separator\n+                                                           + \"camel-context.xml\";\n+\n+    public GatewayNettyInitializer() {\n+\n+    }\n+\n+    @Override\n+    public void setup(Map<String, String> parameters) {\n+\n+\n+        BootstrapConfiguration.createBootStrapConfiguration(parameters);\n+        PoolConfiguration.createPoolConfiguration(parameters);\n+\n+//        SpringCamelContext.setNoStart(true);\n+//        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\n+//                new String[]{CAMEL_CONTEXT_CONFIG_FILE});\n+        try {\n+//            SpringCamelContext camelContext = (SpringCamelContext) applicationContext.getBean(\"wso2-cc\");\n+//            camelContext.start();\n+//            CamelMediationComponent component = (CamelMediationComponent) camelContext.getComponent(\"wso2-gw\");\n+//            CamelMediationEngine engine = component.getEngine();\n+//            connectionManager = component.getConnectionManager();\n+\n+\n+            if (parameters != null) {\n+                DisruptorConfig disruptorConfig =\n+                        new DisruptorConfig(\n+                                parameters.get(Constants.DISRUPTOR_BUFFER_SIZE),\n+                                parameters.get(Constants.DISRUPTOR_COUNT),\n+                                parameters.get(Constants.DISRUPTOR_EVENT_HANDLER_COUNT),\n+                                parameters.get(Constants.WAIT_STRATEGY),\n+                                Boolean.parseBoolean(Constants.SHARE_DISRUPTOR_WITH_OUTBOUND));\n+                // TODO: Need to have a proper service\n+                DisruptorFactory.createDisruptors(DisruptorFactory.DisruptorType.INBOUND,\n+                        disruptorConfig, new Tempinit());\n+                String queueSize = parameters.get(Constants.CONTENT_QUEUE_SIZE);\n+                if (queueSize != null) {\n+                    this.queueSize = Integer.parseInt(queueSize);\n+                }\n+            } else {\n+                log.warn(\"Disruptor specific parameters are not specified in \" +\n+                         \"configuration hence using default configs\");\n+                DisruptorConfig disruptorConfig = new DisruptorConfig();\n+                DisruptorFactory.createDisruptors(DisruptorFactory.DisruptorType.INBOUND,\n+                                                  disruptorConfig, new Tempinit());\n+            }\n+        } catch (Exception e) {\n+            String msg = \"Error while loading \" + CAMEL_CONTEXT_CONFIG_FILE + \" configuration file\";\n+            log.error(msg + e);\n+            throw new RuntimeException(msg, e);\n+        }\n+    }\n+\n+    @Override\n+    public void initChannel(Object ch) {\n+        if (log.isDebugEnabled()) {\n+            log.info(\"Initializing source channel pipeline\");\n+        }\n+        ChannelPipeline p = ((SocketChannel) ch).pipeline();\n+        p.addLast(\"decoder\", new HttpRequestDecoder());\n+        p.addLast(\"encoder\", new HttpResponseEncoder());\n+        try {\n+            p.addLast(\"handler\", new SourceHandler(queueSize, connectionManager));\n+        } catch (Exception e) {\n+            log.error(\"Cannot Create SourceHandler \", e);\n+        }\n+    }\n+\n+    static class Tempinit implements CarbonMessageProcessor {\n+        @Override\n+        public boolean receive(CarbonMessage carbonMessage,\n+                CarbonCallback carbonCallback) throws Exception {\n+            return false;  //To change body of implemented methods use File | Settings | File Templates.\n+        }\n+    }\n+}"
        },
        {
            "sha": "cbf9454568d4a33877b2b34ae577ff818b8963f6",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/listener/NettyListener.java",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Flistener%2FNettyListener.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Flistener%2FNettyListener.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Flistener%2FNettyListener.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -96,6 +96,10 @@ private void setupChannelInitializer() {\n                 for (Parameter parameter : parameters) {\n                     paramMap.put(parameter.getName(), parameter.getValue());\n                 }\n+\n+\n+                ///\n+\n                 channelInitializer.setup(paramMap);\n             }\n         }"
        },
        {
            "sha": "8b4cbc63dcdd13882df7e21d3155e9eb9afc5dc9",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/listener/ResponseCallback.java",
            "status": "added",
            "additions": 53,
            "deletions": 0,
            "changes": 53,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Flistener%2FResponseCallback.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Flistener%2FResponseCallback.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Flistener%2FResponseCallback.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.wso2.carbon.transport.http.netty.listener;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.http.HttpContent;\n+import io.netty.handler.codec.http.HttpResponse;\n+import io.netty.handler.codec.http.LastHttpContent;\n+import org.wso2.carbon.messaging.CarbonCallback;\n+import org.wso2.carbon.messaging.CarbonMessage;\n+import org.wso2.carbon.messaging.Pipe;\n+import org.wso2.carbon.transport.http.netty.common.HTTPContentChunk;\n+import org.wso2.carbon.transport.http.netty.common.Util;\n+\n+/**\n+ * A Class responsible for handling the response.\n+ */\n+public class ResponseCallback implements CarbonCallback {\n+\n+    private ChannelHandlerContext ctx;\n+\n+    public ResponseCallback(ChannelHandlerContext channelHandlerContext) {\n+        this.ctx = channelHandlerContext;\n+    }\n+\n+    public void done(CarbonMessage cMsg) {\n+        final Pipe pipe = cMsg.getPipe();\n+        final HttpResponse response = Util.createHttpResponse(cMsg);\n+        ctx.write(response);\n+        while (true) {\n+            HTTPContentChunk chunk = (HTTPContentChunk) pipe.getContent();\n+            HttpContent httpContent = chunk.getHttpContent();\n+            if (httpContent instanceof LastHttpContent) {\n+                ctx.writeAndFlush(httpContent);\n+                break;\n+            }\n+            ctx.write(httpContent);\n+        }\n+    }\n+}"
        },
        {
            "sha": "a21b6f1ac234b76d778f359971180d89e037558a",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/listener/SourceHandler.java",
            "status": "added",
            "additions": 145,
            "deletions": 0,
            "changes": 145,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Flistener%2FSourceHandler.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Flistener%2FSourceHandler.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Flistener%2FSourceHandler.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.wso2.carbon.transport.http.netty.listener;\n+\n+import com.lmax.disruptor.RingBuffer;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.handler.codec.http.HttpContent;\n+import io.netty.handler.codec.http.HttpRequest;\n+import org.apache.commons.pool.impl.GenericObjectPool;\n+import org.apache.log4j.Logger;\n+import org.wso2.carbon.messaging.CarbonMessage;\n+import org.wso2.carbon.messaging.Pipe;\n+import org.wso2.carbon.transport.http.netty.common.Constants;\n+import org.wso2.carbon.transport.http.netty.common.HTTPContentChunk;\n+import org.wso2.carbon.transport.http.netty.common.HttpRoute;\n+import org.wso2.carbon.transport.http.netty.common.PipeImpl;\n+import org.wso2.carbon.transport.http.netty.common.Util;\n+import org.wso2.carbon.transport.http.netty.common.disruptor.config.DisruptorConfig;\n+import org.wso2.carbon.transport.http.netty.common.disruptor.config.DisruptorFactory;\n+import org.wso2.carbon.transport.http.netty.common.disruptor.publisher.CarbonEventPublisher;\n+import org.wso2.carbon.transport.http.netty.sender.channel.TargetChannel;\n+import org.wso2.carbon.transport.http.netty.sender.channel.pool.ConnectionManager;\n+\n+import java.net.InetSocketAddress;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * A Class responsible for handle  incoming message through netty inbound pipeline.\n+ */\n+public class SourceHandler extends ChannelInboundHandlerAdapter {\n+    private static Logger log = Logger.getLogger(SourceHandler.class);\n+\n+    private RingBuffer disruptor;\n+    private ChannelHandlerContext ctx;\n+    private CarbonMessage cMsg;\n+    private ConnectionManager connectionManager;\n+    private Map<String, TargetChannel> channelFutureMap = new HashMap<>();\n+\n+    private int queueSize;\n+    private DisruptorConfig disruptorConfig;\n+    private Map<String, GenericObjectPool> targetChannelPool;\n+\n+    public SourceHandler(int queueSize , ConnectionManager connectionManager) throws Exception {\n+        this.queueSize = queueSize;\n+        this.connectionManager = connectionManager;\n+    }\n+\n+    @Override\n+    public void channelActive(final ChannelHandlerContext ctx) throws Exception {\n+        disruptorConfig = DisruptorFactory.getDisruptorConfig(DisruptorFactory.DisruptorType.INBOUND);\n+        disruptor = disruptorConfig.getDisruptor();\n+        this.ctx = ctx;\n+        this.targetChannelPool = connectionManager.getTargetChannelPool();\n+\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        if (msg instanceof HttpRequest) {\n+            cMsg = new CarbonMessage(Constants.PROTOCOL_NAME);\n+            cMsg.setPort(((InetSocketAddress) ctx.channel().remoteAddress()).getPort());\n+            cMsg.setHost(((InetSocketAddress) ctx.channel().remoteAddress()).getHostName());\n+            ResponseCallback responseCallback = new ResponseCallback(this.ctx);\n+            cMsg.setCarbonCallback(responseCallback);\n+            HttpRequest httpRequest = (HttpRequest) msg;\n+            cMsg.setURI(httpRequest.getUri());\n+            Pipe pipe = new PipeImpl(queueSize);\n+            cMsg.setPipe(pipe);\n+\n+            cMsg.setProperty(Constants.CHNL_HNDLR_CTX, this.ctx);\n+            cMsg.setProperty(Constants.SRC_HNDLR, this);\n+            cMsg.setProperty(Constants.HTTP_VERSION, httpRequest.getProtocolVersion().text());\n+            cMsg.setProperty(Constants.HTTP_METHOD, httpRequest.getMethod().name());\n+            cMsg.setProperty(Constants.TRANSPORT_HEADERS, Util.getHeaders(httpRequest));\n+\n+            if (disruptorConfig.isShared()) {\n+                cMsg.setProperty(Constants.DISRUPTOR, disruptor);\n+            }\n+            disruptor.publishEvent(new CarbonEventPublisher(cMsg));\n+        } else {\n+            HTTPContentChunk chunk;\n+            if (cMsg != null) {\n+                if (msg instanceof HttpContent) {\n+                    HttpContent httpContent = (HttpContent) msg;\n+                    chunk = new HTTPContentChunk(httpContent);\n+                    cMsg.getPipe().addContentChunk(chunk);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void channelInactive(ChannelHandlerContext ctx) {\n+        disruptorConfig.notifyChannelInactive();\n+        connectionManager.notifyChannelInactive();\n+    }\n+\n+    public void addTargetChannel(HttpRoute route, TargetChannel targetChannel) {\n+        channelFutureMap.put(route.toString(), targetChannel);\n+    }\n+\n+    public void removeChannelFuture(HttpRoute route) {\n+        log.debug(\"Removing channel future from map\");\n+        channelFutureMap.remove(route.toString());\n+    }\n+\n+    public TargetChannel getChannel(HttpRoute route) {\n+        return channelFutureMap.get(route.toString());\n+    }\n+\n+\n+\n+    public Map<String, GenericObjectPool> getTargetChannelPool() {\n+        return targetChannelPool;\n+    }\n+\n+    public ChannelHandlerContext getInboundChannelContext() {\n+        return ctx;\n+    }\n+\n+    @Override\n+    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n+        super.exceptionCaught(ctx, cause);\n+        log.error(\"Exception caught in Netty Source handler\" , cause);\n+    }\n+}\n+\n+\n+"
        },
        {
            "sha": "1a19e07cb6bfc37bc098c0ba5b1cd8d30ac36d7e",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/sender/NettySender.java",
            "status": "added",
            "additions": 149,
            "deletions": 0,
            "changes": 149,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fsender%2FNettySender.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fsender%2FNettySender.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fsender%2FNettySender.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.wso2.carbon.transport.http.netty.sender;\n+\n+import com.lmax.disruptor.RingBuffer;\n+import io.netty.channel.Channel;\n+import io.netty.handler.codec.http.HttpContent;\n+import io.netty.handler.codec.http.HttpRequest;\n+import io.netty.handler.codec.http.LastHttpContent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.wso2.carbon.messaging.CarbonCallback;\n+import org.wso2.carbon.messaging.CarbonMessage;\n+import org.wso2.carbon.transport.http.netty.common.Constants;\n+import org.wso2.carbon.transport.http.netty.common.GWException;\n+import org.wso2.carbon.transport.http.netty.common.HTTPContentChunk;\n+import org.wso2.carbon.transport.http.netty.common.HttpRoute;\n+import org.wso2.carbon.transport.http.netty.common.TransportSender;\n+import org.wso2.carbon.transport.http.netty.common.Util;\n+import org.wso2.carbon.transport.http.netty.common.disruptor.config.DisruptorConfig;\n+import org.wso2.carbon.transport.http.netty.common.disruptor.config.DisruptorFactory;\n+import org.wso2.carbon.transport.http.netty.listener.SourceHandler;\n+import org.wso2.carbon.transport.http.netty.listener.ssl.SSLConfig;\n+import org.wso2.carbon.transport.http.netty.sender.channel.TargetChannel;\n+import org.wso2.carbon.transport.http.netty.sender.channel.pool.ConnectionManager;\n+\n+/**\n+ * A class creates connections with BE and send messages.\n+ */\n+public class NettySender implements TransportSender {\n+\n+    private static final Logger log = LoggerFactory.getLogger(NettySender.class);\n+    private Config config;\n+\n+    private ConnectionManager connectionManager;\n+\n+    public NettySender(Config conf, ConnectionManager connectionManager) {\n+        this.config = conf;\n+        this.connectionManager = connectionManager;\n+    }\n+\n+    @Override\n+    public boolean send(CarbonMessage msg, CarbonCallback callback) throws GWException {\n+\n+        final HttpRequest httpRequest = Util.createHttpRequest(msg);\n+\n+        final HttpRoute route = new HttpRoute(msg.getHost(), msg.getPort());\n+\n+\n+        SourceHandler srcHandler = (SourceHandler) msg.getProperty(Constants.SRC_HNDLR);\n+\n+        RingBuffer ringBuffer = (RingBuffer) msg.getProperty(Constants.DISRUPTOR);\n+        if (ringBuffer == null) {\n+            DisruptorConfig disruptorConfig = DisruptorFactory.\n+                    getDisruptorConfig(DisruptorFactory.DisruptorType.OUTBOUND);\n+            ringBuffer = disruptorConfig.getDisruptor();\n+        }\n+\n+        Channel outboundChannel = null;\n+\n+        try {\n+            TargetChannel targetChannel = connectionManager.getTargetChannel(route, srcHandler);\n+            outboundChannel = targetChannel.getChannel();\n+            targetChannel.getTargetHandler().setCallback(callback);\n+            targetChannel.getTargetHandler().setRingBuffer(ringBuffer);\n+            targetChannel.getTargetHandler().setQueuesize(config.queueSize);\n+            targetChannel.getTargetHandler().setTargetChannel(targetChannel);\n+            targetChannel.getTargetHandler().setConnectionManager(connectionManager);\n+\n+            writeContent(outboundChannel, httpRequest, msg);\n+        } catch (Exception failedCause) {\n+            throw new GWException(failedCause.getMessage(), failedCause);\n+        }\n+\n+        return false;\n+    }\n+\n+    private boolean writeContent(Channel channel, HttpRequest httpRequest, CarbonMessage carbonMessage) {\n+        channel.write(httpRequest);\n+        while (true) {\n+            HTTPContentChunk chunk = (HTTPContentChunk) carbonMessage.getPipe().getContent();\n+            HttpContent httpContent = chunk.getHttpContent();\n+            if (httpContent instanceof LastHttpContent) {\n+                channel.writeAndFlush(httpContent);\n+                break;\n+            }\n+            if (httpContent != null) {\n+                channel.write(httpContent);\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Class representing configs related to Transport Sender.\n+     */\n+    public static class Config {\n+\n+        private String id;\n+\n+        private SSLConfig sslConfig;\n+\n+        private int queueSize;\n+\n+        public Config(String id) {\n+            if (id == null) {\n+                throw new IllegalArgumentException(\"Netty transport ID is null\");\n+            }\n+            this.id = id;\n+        }\n+\n+        public String getId() {\n+            return id;\n+        }\n+\n+        public Config enableSsl(SSLConfig sslConfig) {\n+            this.sslConfig = sslConfig;\n+            return this;\n+        }\n+\n+        public SSLConfig getSslConfig() {\n+            return sslConfig;\n+        }\n+\n+        public int getQueueSize() {\n+            return queueSize;\n+        }\n+\n+        public Config setQueueSize(int queuesize) {\n+            this.queueSize = queuesize;\n+            return this;\n+        }\n+\n+    }\n+\n+}"
        },
        {
            "sha": "68854219d46f6afe5a25cddba4a6fda01b2e5d63",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/sender/TargetHandler.java",
            "status": "added",
            "additions": 116,
            "deletions": 0,
            "changes": 116,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fsender%2FTargetHandler.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fsender%2FTargetHandler.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fsender%2FTargetHandler.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the License.\n+ */\n+package org.wso2.carbon.transport.http.netty.sender;\n+\n+import com.lmax.disruptor.RingBuffer;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.handler.codec.http.DefaultHttpContent;\n+import io.netty.handler.codec.http.HttpResponse;\n+import io.netty.handler.codec.http.LastHttpContent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.wso2.carbon.messaging.CarbonCallback;\n+import org.wso2.carbon.messaging.CarbonMessage;\n+import org.wso2.carbon.messaging.Pipe;\n+import org.wso2.carbon.transport.http.netty.common.Constants;\n+import org.wso2.carbon.transport.http.netty.common.HTTPContentChunk;\n+import org.wso2.carbon.transport.http.netty.common.PipeImpl;\n+import org.wso2.carbon.transport.http.netty.common.Util;\n+import org.wso2.carbon.transport.http.netty.common.disruptor.publisher.CarbonEventPublisher;\n+import org.wso2.carbon.transport.http.netty.sender.channel.TargetChannel;\n+import org.wso2.carbon.transport.http.netty.sender.channel.pool.ConnectionManager;\n+\n+import java.net.InetSocketAddress;\n+\n+/**\n+ * A class responsible for handling responses coming from BE.\n+ */\n+public class TargetHandler extends ChannelInboundHandlerAdapter {\n+    private static Logger log = LoggerFactory.getLogger(TargetHandler.class);\n+\n+    private CarbonCallback callback;\n+    private RingBuffer ringBuffer;\n+    private CarbonMessage cMsg;\n+    private int queuesize;\n+    private ConnectionManager connectionManager;\n+    private TargetChannel targetChannel;\n+\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+        super.channelActive(ctx);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        if (msg instanceof HttpResponse) {\n+            cMsg = new CarbonMessage(Constants.PROTOCOL_NAME);\n+            cMsg.setPort(((InetSocketAddress) ctx.channel().remoteAddress()).getPort());\n+            cMsg.setHost(((InetSocketAddress) ctx.channel().remoteAddress()).getHostName());\n+            cMsg.setDirection(CarbonMessage.RESPONSE);\n+            cMsg.setCarbonCallback(callback);\n+            Pipe pipe = new PipeImpl(queuesize);\n+            cMsg.setPipe(pipe);\n+            HttpResponse httpResponse = (HttpResponse) msg;\n+            cMsg.setDirection(CarbonMessage.RESPONSE);\n+\n+\n+            cMsg.setProperty(Constants.HTTP_STATUS_CODE, httpResponse.getStatus().code());\n+            cMsg.setProperty(Constants.TRANSPORT_HEADERS, Util.getHeaders(httpResponse));\n+\n+            ringBuffer.publishEvent(new CarbonEventPublisher(cMsg));\n+        } else {\n+            HTTPContentChunk chunk;\n+            if (cMsg != null) {\n+                if (msg instanceof LastHttpContent) {\n+                    LastHttpContent lastHttpContent = (LastHttpContent) msg;\n+                    chunk = new HTTPContentChunk(lastHttpContent);\n+                    connectionManager.returnChannel(targetChannel);\n+                } else {\n+                    DefaultHttpContent httpContent = (DefaultHttpContent) msg;\n+                    chunk = new HTTPContentChunk(httpContent);\n+                }\n+                cMsg.getPipe().addContentChunk(chunk);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void channelInactive(ChannelHandlerContext ctx) {\n+        log.debug(\"Target channel closed.\");\n+    }\n+\n+    public void setCallback(CarbonCallback callback) {\n+        this.callback = callback;\n+    }\n+\n+    public void setRingBuffer(RingBuffer ringBuffer) {\n+        this.ringBuffer = ringBuffer;\n+    }\n+\n+    public void setQueuesize(int queuesize) {\n+        this.queuesize = queuesize;\n+    }\n+\n+    public void setConnectionManager(ConnectionManager connectionManager) {\n+        this.connectionManager = connectionManager;\n+    }\n+\n+    public void setTargetChannel(TargetChannel targetChannel) {\n+        this.targetChannel = targetChannel;\n+    }\n+}"
        },
        {
            "sha": "0a77332c32eb10dda55bb04b6a994679e46803ba",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/sender/TargetInitializer.java",
            "status": "added",
            "additions": 44,
            "deletions": 0,
            "changes": 44,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fsender%2FTargetInitializer.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fsender%2FTargetInitializer.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fsender%2FTargetInitializer.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.wso2.carbon.transport.http.netty.sender;\n+\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.handler.codec.http.HttpRequestEncoder;\n+import io.netty.handler.codec.http.HttpResponseDecoder;\n+\n+/**\n+ * A class that responsible for initialize target server pipeline.\n+ */\n+public class TargetInitializer extends ChannelInitializer<SocketChannel> {\n+    protected static final String HANDLER = \"handler\";\n+    private TargetHandler handler;\n+\n+\n+    @Override\n+    protected void initChannel(SocketChannel ch) throws Exception {\n+        ChannelPipeline p = ch.pipeline();\n+        p.addLast(\"decoder\", new HttpResponseDecoder());\n+        p.addLast(\"encoder\", new HttpRequestEncoder());\n+        handler = new TargetHandler();\n+        p.addLast(HANDLER, handler);\n+    }\n+\n+    public TargetHandler getTargetHandler() {\n+        return handler;\n+    }\n+}"
        },
        {
            "sha": "f52348c0b1702b55510ebaaa3ada43db61df1579",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/sender/channel/BootstrapConfiguration.java",
            "status": "added",
            "additions": 97,
            "deletions": 0,
            "changes": 97,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fsender%2Fchannel%2FBootstrapConfiguration.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fsender%2Fchannel%2FBootstrapConfiguration.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fsender%2Fchannel%2FBootstrapConfiguration.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.wso2.carbon.transport.http.netty.sender.channel;\n+\n+\n+import org.wso2.carbon.transport.http.netty.common.Constants;\n+\n+import java.util.Map;\n+\n+/**\n+ * A class represents client bootstrap configurations.\n+ */\n+public class BootstrapConfiguration {\n+\n+    private static BootstrapConfiguration bootstrapConfig;\n+\n+    private boolean tcpNoDelay = true;\n+\n+    private int connectTimeOut = 15000;\n+\n+    private int reciveBufferSize = 1048576;\n+\n+    private int sendBufferSize = 1048576;\n+\n+    private boolean keepAlive = true;\n+\n+    private boolean socketReuse = false;\n+\n+\n+    private BootstrapConfiguration(Map<String, String> parameters) {\n+\n+        if (parameters != null) {\n+            tcpNoDelay = parameters.get(Constants.CLINET_BOOTSTRAP_TCP_NO_DELY) == null ||\n+                         Boolean.parseBoolean(parameters.get(Constants.CLINET_BOOTSTRAP_TCP_NO_DELY));\n+            connectTimeOut = parameters.get(Constants.CLINET_BOOTSTRAP_CONNECT_TIME_OUT) != null ?\n+                             Integer.parseInt(parameters.get(Constants.CLINET_BOOTSTRAP_CONNECT_TIME_OUT)) : 15000;\n+            reciveBufferSize = parameters.get(Constants.CLINET_BOOTSTRAP_RECEIVE_BUFFER_SIZE) != null ?\n+                               Integer.parseInt\n+                                          (parameters.get(Constants.CLINET_BOOTSTRAP_RECEIVE_BUFFER_SIZE)) : 1048576;\n+            sendBufferSize = parameters.get(Constants.CLINET_BOOTSTRAP_SEND_BUFFER_SIZE) != null ?\n+                             Integer.parseInt(parameters.get(Constants.CLINET_BOOTSTRAP_SEND_BUFFER_SIZE)) : 1048576;\n+            keepAlive = parameters.get(Constants.CLINET_BOOTSTRAP_KEEPALIVE) == null ||\n+                        Boolean.parseBoolean(parameters.get(Constants.CLINET_BOOTSTRAP_KEEPALIVE));\n+            socketReuse = Boolean.parseBoolean(parameters.get(Constants.CLINET_BOOTSTRAP_SO_REUSE));\n+\n+        }\n+    }\n+\n+\n+    public boolean isTcpNoDelay() {\n+        return tcpNoDelay;\n+    }\n+\n+    public int getConnectTimeOut() {\n+        return connectTimeOut;\n+    }\n+\n+    public int getReciveBufferSize() {\n+        return reciveBufferSize;\n+    }\n+\n+    public int getSendBufferSize() {\n+        return sendBufferSize;\n+    }\n+\n+    public boolean isKeepAlive() {\n+        return keepAlive;\n+    }\n+\n+    public boolean isSocketReuse() {\n+        return socketReuse;\n+    }\n+\n+    public static BootstrapConfiguration getInstance() {\n+        return bootstrapConfig;\n+    }\n+\n+    public static void createBootStrapConfiguration(Map<String, String> parameters) {\n+        bootstrapConfig = new BootstrapConfiguration(parameters);\n+\n+    }\n+\n+\n+}"
        },
        {
            "sha": "7ce0b7494b2273c33ae2de5b7dd2fb128321a2fb",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/sender/channel/ChannelUtils.java",
            "status": "added",
            "additions": 125,
            "deletions": 0,
            "changes": 125,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fsender%2Fchannel%2FChannelUtils.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fsender%2Fchannel%2FChannelUtils.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fsender%2Fchannel%2FChannelUtils.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.wso2.carbon.transport.http.netty.sender.channel;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelOption;\n+import io.netty.channel.EventLoopGroup;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.wso2.carbon.transport.http.netty.common.HttpRoute;\n+import org.wso2.carbon.transport.http.netty.sender.TargetInitializer;\n+\n+import java.net.ConnectException;\n+import java.net.InetSocketAddress;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Utility class for Channel handling.\n+ */\n+public class ChannelUtils {\n+\n+    private static final Logger log = LoggerFactory.getLogger(ChannelUtils.class);\n+\n+    /**\n+     * Provides incomplete Netty channel future.\n+     *\n+     * @param targetChannel  Target channel which has channel specific parameters such as handler\n+     * @param eventLoopGroup Event loop group of inbound IO workers\n+     * @param eventLoopClass Event loop class if Inbound IO Workers\n+     * @param httpRoute      Http Route which represents BE connections\n+     * @return ChannelFuture\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static ChannelFuture getNewChannelFuture(TargetChannel targetChannel, EventLoopGroup eventLoopGroup,\n+                                                    Class eventLoopClass, HttpRoute httpRoute) {\n+        BootstrapConfiguration bootstrapConfiguration = BootstrapConfiguration.getInstance();\n+        Bootstrap clientBootstrap = new Bootstrap();\n+        clientBootstrap.channel(eventLoopClass);\n+        clientBootstrap.group(eventLoopGroup);\n+        clientBootstrap.option(ChannelOption.SO_KEEPALIVE, bootstrapConfiguration.isKeepAlive());\n+        clientBootstrap.option(ChannelOption.TCP_NODELAY, bootstrapConfiguration.isTcpNoDelay());\n+        clientBootstrap.option(ChannelOption.SO_REUSEADDR, bootstrapConfiguration.isSocketReuse());\n+        clientBootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, bootstrapConfiguration.getConnectTimeOut());\n+\n+        // set the pipeline factory, which creates the pipeline for each newly created channels\n+        TargetInitializer targetInitializer = new TargetInitializer();\n+        targetChannel.setTargetInitializer(targetInitializer);\n+        clientBootstrap.handler(targetInitializer);\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Created new TCP client bootstrap connecting to {}:{} with options: {}\",\n+                      httpRoute.getHost(), httpRoute.getPort(), clientBootstrap);\n+        }\n+\n+        return clientBootstrap.connect(new InetSocketAddress(httpRoute.getHost(), httpRoute.getPort()));\n+    }\n+\n+    /**\n+     * Open Channel for BE.\n+     *\n+     * @param channelFuture ChannelFuture Object\n+     * @param httpRoute     HttpRoute represents host and port for BE\n+     * @return Channel\n+     * @throws Exception Exception to notify any errors occur during opening the channel\n+     */\n+    public static Channel openChannel(ChannelFuture channelFuture, HttpRoute httpRoute) throws Exception {\n+\n+        BootstrapConfiguration bootstrapConfiguration = BootstrapConfiguration.getInstance();\n+        // blocking for channel to be done\n+        if (log.isTraceEnabled()) {\n+            log.trace(\"Waiting for operation to complete {} for {} millis\", channelFuture,\n+                      bootstrapConfiguration.getConnectTimeOut());\n+        }\n+\n+        // here we need to wait it in other thread\n+        final CountDownLatch channelLatch = new CountDownLatch(1);\n+        channelFuture.addListener(cf -> channelLatch.countDown());\n+\n+        try {\n+            boolean wait = channelLatch.await(bootstrapConfiguration.getConnectTimeOut(), TimeUnit.MILLISECONDS);\n+        } catch (InterruptedException ex) {\n+            throw new Exception(\"Interrupted while waiting for \" + \"connection to \" + httpRoute.toString());\n+        }\n+\n+        Channel channel = null;\n+\n+        if (channelFuture.isDone() && channelFuture.isSuccess()) {\n+            channel = channelFuture.channel();\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Creating connector to address: {}\", httpRoute.toString());\n+            }\n+        } else if (channelFuture.isDone() && channelFuture.isCancelled()) {\n+            ConnectException cause = new ConnectException(\"Request Cancelled, \" + httpRoute.toString());\n+            if (channelFuture.cause() != null) {\n+                cause.initCause(channelFuture.cause());\n+            }\n+            throw cause;\n+        } else if (!channelFuture.isDone() && !channelFuture.isSuccess() &&\n+                   !channelFuture.isCancelled() && (channelFuture.cause() == null)) {\n+            throw new ConnectException(\"Connection timeout, \" + httpRoute.toString());\n+        } else {\n+            ConnectException cause = new ConnectException(\"Connection refused, \" + httpRoute.toString());\n+            if (channelFuture.cause() != null) {\n+                cause.initCause(channelFuture.cause());\n+            }\n+            throw cause;\n+        }\n+        return channel;\n+    }\n+}"
        },
        {
            "sha": "b8efa50db23dba89e5fc51b75b85fed30a63ff22",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/sender/channel/TargetChannel.java",
            "status": "added",
            "additions": 82,
            "deletions": 0,
            "changes": 82,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fsender%2Fchannel%2FTargetChannel.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fsender%2Fchannel%2FTargetChannel.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fsender%2Fchannel%2FTargetChannel.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.wso2.carbon.transport.http.netty.sender.channel;\n+\n+\n+import io.netty.channel.Channel;\n+import org.wso2.carbon.transport.http.netty.common.HttpRoute;\n+import org.wso2.carbon.transport.http.netty.listener.SourceHandler;\n+import org.wso2.carbon.transport.http.netty.sender.TargetHandler;\n+import org.wso2.carbon.transport.http.netty.sender.TargetInitializer;\n+\n+/**\n+ * A class that encapsulate channel and state.\n+ */\n+public class TargetChannel {\n+\n+\n+    private Channel channel;\n+\n+    private TargetHandler targetHandler;\n+\n+    private TargetInitializer targetInitializer;\n+\n+    private HttpRoute httpRoute;\n+\n+    private SourceHandler correlatedSource;\n+\n+\n+    public Channel getChannel() {\n+        return channel;\n+    }\n+\n+    public TargetChannel setChannel(Channel channel) {\n+        this.channel = channel;\n+        return this;\n+    }\n+\n+    public TargetHandler getTargetHandler() {\n+        return targetHandler;\n+    }\n+\n+    public void setTargetHandler(TargetHandler targetHandler) {\n+        this.targetHandler = targetHandler;\n+    }\n+\n+    public TargetInitializer getTargetInitializer() {\n+        return targetInitializer;\n+    }\n+\n+    public void setTargetInitializer(TargetInitializer targetInitializer) {\n+        this.targetInitializer = targetInitializer;\n+    }\n+\n+    public HttpRoute getHttpRoute() {\n+        return httpRoute;\n+    }\n+\n+    public void setHttpRoute(HttpRoute httpRoute) {\n+        this.httpRoute = httpRoute;\n+    }\n+\n+    public SourceHandler getCorrelatedSource() {\n+        return correlatedSource;\n+    }\n+\n+    public void setCorrelatedSource(SourceHandler correlatedSource) {\n+        this.correlatedSource = correlatedSource;\n+    }\n+}"
        },
        {
            "sha": "6c1dc57590d628f10fecef0b02bc6da3e6c2d281",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/sender/channel/pool/ConnectionManager.java",
            "status": "added",
            "additions": 234,
            "deletions": 0,
            "changes": 234,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fsender%2Fchannel%2Fpool%2FConnectionManager.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fsender%2Fchannel%2Fpool%2FConnectionManager.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fsender%2Fchannel%2Fpool%2FConnectionManager.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -0,0 +1,234 @@\n+/*\n+ * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.wso2.carbon.transport.http.netty.sender.channel.pool;\n+\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoopGroup;\n+import org.apache.commons.pool.impl.GenericObjectPool;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.wso2.carbon.transport.http.netty.common.HttpRoute;\n+import org.wso2.carbon.transport.http.netty.listener.SourceHandler;\n+import org.wso2.carbon.transport.http.netty.sender.channel.ChannelUtils;\n+import org.wso2.carbon.transport.http.netty.sender.channel.TargetChannel;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * A class which handles connection pool management.\n+ */\n+public class ConnectionManager {\n+\n+    private static final Logger log = LoggerFactory.getLogger(ConnectionManager.class);\n+\n+    private static volatile ConnectionManager connectionManager;\n+\n+    private PoolConfiguration poolConfiguration;\n+\n+    private int poolCount;\n+\n+    private final List<Map<String, GenericObjectPool>> mapList;\n+\n+    private PoolManagementPolicy poolManagementPolicy;\n+\n+    private AtomicInteger index = new AtomicInteger(1);\n+\n+\n+    private ConnectionManager(PoolConfiguration poolConfiguration) {\n+        this.poolConfiguration = poolConfiguration;\n+        this.poolCount = poolConfiguration.getNumberOfPools();\n+        if (poolConfiguration.getNumberOfPools() == 0) {\n+            this.poolManagementPolicy = PoolManagementPolicy.PER_SERVER_CHANNEL_ENDPOINT_CONNECTION_CACHING;\n+        } else {\n+            this.poolManagementPolicy = PoolManagementPolicy.GLOBAL_ENDPOINT_CONNECTION_CACHING;\n+        }\n+\n+        mapList = new ArrayList<>();\n+        for (int i = 0; i < poolCount; i++) {\n+            Map<String, GenericObjectPool> map = new ConcurrentHashMap<>();\n+            mapList.add(map);\n+        }\n+\n+    }\n+\n+\n+    private GenericObjectPool createPoolForRoute(HttpRoute httpRoute, EventLoopGroup eventLoopGroup,\n+                                                 Class eventLoopClass) {\n+        GenericObjectPool.Config config = new GenericObjectPool.Config();\n+        config.maxActive = poolConfiguration.getMaxActivePerPool();\n+        config.maxIdle = poolConfiguration.getMaxIdlePerPool();\n+        config.minIdle = poolConfiguration.getMinIdlePerPool();\n+        config.testOnBorrow = poolConfiguration.isTestOnBorrow();\n+        config.testWhileIdle = poolConfiguration.isTestWhileIdle();\n+        config.timeBetweenEvictionRunsMillis = poolConfiguration.getTimeBetweenEvictionRuns();\n+        config.minEvictableIdleTimeMillis = poolConfiguration.getMinEvictableIdleTime();\n+        config.whenExhaustedAction = poolConfiguration.getExhaustedAction();\n+        return new GenericObjectPool(new PoolableTargetChannelFactory(httpRoute, eventLoopGroup, eventLoopClass),\n+                                     config);\n+\n+\n+    }\n+\n+\n+    public static ConnectionManager getInstance() {\n+        if (connectionManager == null) {\n+            synchronized (ConnectionManager.class) {\n+                if (connectionManager == null) {\n+                    PoolConfiguration poolConfiguration = PoolConfiguration.getInstance();\n+                    connectionManager = new ConnectionManager(poolConfiguration);\n+                }\n+            }\n+\n+        }\n+        return connectionManager;\n+    }\n+\n+    /**\n+     * Provide target channel for given http route.\n+     *\n+     * @param httpRoute     BE address\n+     * @param sourceHandler Incoming channel\n+     * @return TargetChannel\n+     * @throws Exception   Exception to notify any errors occur during retrieving the target channel\n+     */\n+    public TargetChannel getTargetChannel(HttpRoute httpRoute, SourceHandler sourceHandler)\n+               throws Exception {\n+        Channel channel = null;\n+        TargetChannel targetChannel = null;\n+        ChannelHandlerContext ctx = sourceHandler.getInboundChannelContext();\n+        EventLoopGroup group = ctx.channel().eventLoop();\n+        Class cl = ctx.channel().getClass();\n+\n+        // Take connections from Global connection pool\n+        if (poolManagementPolicy == PoolManagementPolicy.GLOBAL_ENDPOINT_CONNECTION_CACHING) {\n+            Map<String, GenericObjectPool> objectPoolMap = sourceHandler.getTargetChannelPool();\n+            GenericObjectPool pool = objectPoolMap.get(httpRoute.toString());\n+            if (pool == null) {\n+                pool = createPoolForRoute(httpRoute, group, cl);\n+                objectPoolMap.put(httpRoute.toString(), pool);\n+            }\n+            try {\n+                Object obj = pool.borrowObject();\n+                if (obj != null) {\n+                    targetChannel = (TargetChannel) obj;\n+                    targetChannel.setTargetHandler(targetChannel.getTargetInitializer().getTargetHandler());\n+                }\n+            } catch (Exception e) {\n+                log.error(\"Cannot borrow free channel from pool \", e);\n+            }\n+\n+\n+        } else {\n+            // manage connections according to per inbound channel caching method\n+            if (!isRouteExists(httpRoute, sourceHandler)) {\n+                targetChannel = new TargetChannel();\n+                ChannelFuture future = ChannelUtils.getNewChannelFuture(targetChannel, group, cl, httpRoute);\n+\n+                try {\n+                    channel = ChannelUtils.openChannel(future, httpRoute);\n+                } catch (Exception failedCause) {\n+                    throw failedCause;\n+                } finally {\n+                    if (channel != null) {\n+                        targetChannel.setChannel(channel);\n+                        targetChannel.setTargetHandler(targetChannel.getTargetInitializer().getTargetHandler());\n+                        sourceHandler.addTargetChannel(httpRoute, targetChannel);\n+                    }\n+                }\n+            } else {\n+                targetChannel = sourceHandler.getChannel(httpRoute);\n+                Channel tempc = targetChannel.getChannel();\n+                if (tempc.isActive()) {\n+                    channel = tempc;\n+                } else {\n+                    ChannelFuture future = ChannelUtils.getNewChannelFuture(targetChannel, group, cl, httpRoute);\n+                    channel = ChannelUtils.openChannel(future, httpRoute);\n+                    targetChannel.setChannel(channel);\n+                }\n+\n+            }\n+\n+\n+        }\n+        if (targetChannel != null) {\n+            targetChannel.setHttpRoute(httpRoute);\n+            targetChannel.setCorrelatedSource(sourceHandler);\n+        }\n+        return targetChannel;\n+    }\n+\n+\n+    //Add connection to Pool back\n+    public void returnChannel(TargetChannel targetChannel) {\n+        if (poolManagementPolicy == PoolManagementPolicy.GLOBAL_ENDPOINT_CONNECTION_CACHING) {\n+            Map<String, GenericObjectPool> objectPoolMap = targetChannel.getCorrelatedSource().getTargetChannelPool();\n+            GenericObjectPool pool = objectPoolMap.get(targetChannel.getHttpRoute().toString());\n+            try {\n+                if (targetChannel.getChannel().isActive()) {\n+                    pool.returnObject(targetChannel);\n+\n+                }\n+            } catch (Exception e) {\n+                log.error(\"Cannot return channel to pool\", e);\n+            }\n+\n+        }\n+    }\n+\n+\n+    private boolean isRouteExists(HttpRoute httpRoute, SourceHandler srcHandler) {\n+        return srcHandler.getChannel(httpRoute) != null;\n+    }\n+\n+\n+    /**\n+     * Provide specific target channel map.\n+     *\n+     * @return Map contains pools for each route\n+     */\n+    public Map<String, GenericObjectPool> getTargetChannelPool() {\n+        if (poolManagementPolicy == PoolManagementPolicy.GLOBAL_ENDPOINT_CONNECTION_CACHING) {\n+            int ind = index.getAndIncrement() % poolCount;\n+                return mapList.get(ind);\n+        }\n+        return null;\n+    }\n+\n+\n+    public void notifyChannelInactive() {\n+        if (poolManagementPolicy == PoolManagementPolicy.GLOBAL_ENDPOINT_CONNECTION_CACHING) {\n+            index.getAndDecrement();\n+        }\n+    }\n+\n+\n+    /**\n+     * Connection pool management policies for  target channels.\n+     */\n+    public enum PoolManagementPolicy {\n+        PER_SERVER_CHANNEL_ENDPOINT_CONNECTION_CACHING,\n+        GLOBAL_ENDPOINT_CONNECTION_CACHING\n+\n+    }\n+\n+}"
        },
        {
            "sha": "a76f143dc7f9e7da8b4b6bc84e9ceb05137bf2fe",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/sender/channel/pool/PoolConfiguration.java",
            "status": "added",
            "additions": 115,
            "deletions": 0,
            "changes": 115,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fsender%2Fchannel%2Fpool%2FPoolConfiguration.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fsender%2Fchannel%2Fpool%2FPoolConfiguration.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fsender%2Fchannel%2Fpool%2FPoolConfiguration.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.wso2.carbon.transport.http.netty.sender.channel.pool;\n+\n+import org.apache.commons.pool.impl.GenericObjectPool;\n+import org.wso2.carbon.transport.http.netty.common.Constants;\n+\n+import java.util.Map;\n+\n+/**\n+ * A class which represents connection pool specific parameters.\n+ */\n+public class PoolConfiguration {\n+\n+\n+    private static PoolConfiguration poolConfiguration;\n+\n+    private int maxActivePerPool = -1;\n+\n+    private int minIdlePerPool;\n+\n+    private int maxIdlePerPool = 100;\n+\n+    private boolean testOnBorrow = true;\n+\n+    private boolean testWhileIdle = true;\n+\n+    private long timeBetweenEvictionRuns = 30 * 1000L;\n+\n+    private long minEvictableIdleTime = 5 * 60 * 1000L;\n+\n+    private byte exhaustedAction = GenericObjectPool.WHEN_EXHAUSTED_GROW;\n+\n+    private int numberOfPools = 0;\n+\n+\n+    private PoolConfiguration(Map<String, String> parameters) {\n+\n+        if (parameters != null) {\n+            numberOfPools = parameters.get(Constants.NUMBER_OF_POOLS) != null ?\n+                            Integer.parseInt(parameters.get(Constants.NUMBER_OF_POOLS)) : 0;\n+            maxActivePerPool = parameters.get(Constants.MAX_ACTIVE_CONNECTIONS_PER_POOL) != null ?\n+                               Integer.parseInt(parameters.get(Constants.MAX_ACTIVE_CONNECTIONS_PER_POOL)) : -1;\n+            minIdlePerPool = parameters.get(Constants.MIN_IDLE_CONNECTIONS_PER_POOL) != null ?\n+                             Integer.parseInt\n+                                        (parameters.get(Constants.MIN_IDLE_CONNECTIONS_PER_POOL)) : 0;\n+            maxIdlePerPool = parameters.get(Constants.MAX_IDLE_CONNECTIONS_PER_POOL) != null ?\n+                             Integer.parseInt(parameters.get(Constants.MAX_IDLE_CONNECTIONS_PER_POOL)) : 100;\n+            minEvictableIdleTime = parameters.get(Constants.MIN_EVICTION_IDLE_TIME) != null ?\n+                                   Integer.parseInt(parameters.get(Constants.MIN_EVICTION_IDLE_TIME)) : 5 * 60 * 1000L;\n+\n+        }\n+\n+    }\n+\n+\n+    public static PoolConfiguration getInstance() {\n+        return poolConfiguration;\n+\n+    }\n+\n+    public static void createPoolConfiguration(Map<String, String> parameters) {\n+        poolConfiguration = new PoolConfiguration(parameters);\n+    }\n+\n+\n+    public int getMaxActivePerPool() {\n+        return maxActivePerPool;\n+    }\n+\n+    public int getMinIdlePerPool() {\n+        return minIdlePerPool;\n+    }\n+\n+    public int getMaxIdlePerPool() {\n+        return maxIdlePerPool;\n+    }\n+\n+    public boolean isTestOnBorrow() {\n+        return testOnBorrow;\n+    }\n+\n+    public boolean isTestWhileIdle() {\n+        return testWhileIdle;\n+    }\n+\n+    public long getTimeBetweenEvictionRuns() {\n+        return timeBetweenEvictionRuns;\n+    }\n+\n+    public long getMinEvictableIdleTime() {\n+        return minEvictableIdleTime;\n+    }\n+\n+    public byte getExhaustedAction() {\n+        return exhaustedAction;\n+    }\n+\n+    public int getNumberOfPools() {\n+        return numberOfPools;\n+    }\n+}"
        },
        {
            "sha": "40e3e98c93e007bd5dd678adb728c85c9be96a80",
            "filename": "http/netty/component/src/main/java/org/wso2/carbon/transport/http/netty/sender/channel/pool/PoolableTargetChannelFactory.java",
            "status": "added",
            "additions": 85,
            "deletions": 0,
            "changes": 85,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fsender%2Fchannel%2Fpool%2FPoolableTargetChannelFactory.java",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fsender%2Fchannel%2Fpool%2FPoolableTargetChannelFactory.java",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/http%2Fnetty%2Fcomponent%2Fsrc%2Fmain%2Fjava%2Forg%2Fwso2%2Fcarbon%2Ftransport%2Fhttp%2Fnetty%2Fsender%2Fchannel%2Fpool%2FPoolableTargetChannelFactory.java?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.wso2.carbon.transport.http.netty.sender.channel.pool;\n+\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.EventLoopGroup;\n+import org.apache.commons.pool.PoolableObjectFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.wso2.carbon.transport.http.netty.common.HttpRoute;\n+import org.wso2.carbon.transport.http.netty.sender.channel.ChannelUtils;\n+import org.wso2.carbon.transport.http.netty.sender.channel.TargetChannel;\n+\n+/**\n+ * A class which creates a TargetChannel pool for each route.\n+ */\n+public class PoolableTargetChannelFactory implements PoolableObjectFactory {\n+\n+    private static final Logger log = LoggerFactory.getLogger(PoolableTargetChannelFactory.class);\n+\n+    private EventLoopGroup eventLoopGroup;\n+    private Class eventLoopClass;\n+    private HttpRoute httpRoute;\n+\n+    public PoolableTargetChannelFactory(HttpRoute httpRoute, EventLoopGroup eventLoopGroup, Class eventLoopClass) {\n+        this.eventLoopGroup = eventLoopGroup;\n+        this.eventLoopClass = eventLoopClass;\n+        this.httpRoute = httpRoute;\n+    }\n+\n+\n+    @Override\n+    public Object makeObject() throws Exception {\n+        TargetChannel targetChannel = new TargetChannel();\n+        ChannelFuture channelFuture = ChannelUtils.getNewChannelFuture(targetChannel,\n+                eventLoopGroup, eventLoopClass, httpRoute);\n+        Channel channel = ChannelUtils.openChannel(channelFuture, httpRoute);\n+        log.debug(\"Created channel: {}\", channel);\n+        targetChannel.setChannel(channel);\n+        return targetChannel;\n+    }\n+\n+    @Override\n+    public void destroyObject(Object o) throws Exception {\n+        log.debug(\"Destroying channel: {}\", o);\n+        if (((TargetChannel) o).getChannel().isOpen()) {\n+            ((TargetChannel) o).getChannel().close();\n+\n+        }\n+    }\n+\n+    @Override\n+    public boolean validateObject(Object o) {\n+        boolean answer = ((TargetChannel) o).getChannel().isActive();\n+        log.debug(\"Validating channel: {} -> {}\", o, answer);\n+        return answer;\n+    }\n+\n+    @Override\n+    public void activateObject(Object o) throws Exception {\n+\n+    }\n+\n+    @Override\n+    public void passivateObject(Object o) throws Exception {\n+\n+    }\n+\n+\n+}"
        },
        {
            "sha": "266f328670ec33ff2e0c046d3006567338667dbd",
            "filename": "pom.xml",
            "status": "modified",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/wso2/transport-http/blob/f57401801f2ec31e4beefa2f81adfe431e5398e3/pom.xml",
            "raw_url": "https://github.com/wso2/transport-http/raw/f57401801f2ec31e4beefa2f81adfe431e5398e3/pom.xml",
            "contents_url": "https://api.github.com/repos/wso2/transport-http/contents/pom.xml?ref=f57401801f2ec31e4beefa2f81adfe431e5398e3",
            "patch": "@@ -77,6 +77,11 @@\n             <artifactId>snakeyaml</artifactId>\n             <version>${org.snakeyaml.version}</version>\n         </dependency>\n+        <dependency>\n+            <groupId>org.wso2.orbit.com.lmax</groupId>\n+            <artifactId>disruptor</artifactId>\n+            <version>3.3.2.wso2v2</version>\n+        </dependency>\n     </dependencies>\n \n     <build>"
        }
    ]
}