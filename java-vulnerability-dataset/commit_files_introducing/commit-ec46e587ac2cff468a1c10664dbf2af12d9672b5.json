{
    "sha": "ec46e587ac2cff468a1c10664dbf2af12d9672b5",
    "node_id": "MDY6Q29tbWl0MTc1Mzc4Mzg6ZWM0NmU1ODdhYzJjZmY0NjhhMWMxMDY2NGRiZjJhZjEyZDk2NzJiNQ==",
    "commit": {
        "author": {
            "name": "owulff",
            "email": "owulff@unknown",
            "date": "2011-12-21T21:53:59Z"
        },
        "committer": {
            "name": "owulff",
            "email": "owulff@unknown",
            "date": "2011-12-21T21:53:59Z"
        },
        "message": "Initial commit of ws-federation\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/sandbox/fediz@1221896 13f79535-47bb-0310-9956-ffa450edef68",
        "tree": {
            "sha": "581a346ff2b24ad1eabab6db49dd55326df6912f",
            "url": "https://api.github.com/repos/apache/cxf-fediz/git/trees/581a346ff2b24ad1eabab6db49dd55326df6912f"
        },
        "url": "https://api.github.com/repos/apache/cxf-fediz/git/commits/ec46e587ac2cff468a1c10664dbf2af12d9672b5",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/cxf-fediz/commits/ec46e587ac2cff468a1c10664dbf2af12d9672b5",
    "html_url": "https://github.com/apache/cxf-fediz/commit/ec46e587ac2cff468a1c10664dbf2af12d9672b5",
    "comments_url": "https://api.github.com/repos/apache/cxf-fediz/commits/ec46e587ac2cff468a1c10664dbf2af12d9672b5/comments",
    "author": null,
    "committer": null,
    "parents": [],
    "stats": {
        "total": 7691,
        "additions": 7691,
        "deletions": 0
    },
    "files": [
        {
            "sha": "01f3b54a013a0d4ba745c06c525e80ce64428298",
            "filename": "fediz-core/pom.xml",
            "status": "added",
            "additions": 118,
            "deletions": 0,
            "changes": 118,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fpom.xml",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-core%2Fpom.xml?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,118 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+   <modelVersion>4.0.0</modelVersion>\n+   <parent>\n+       <groupId>org.apache.cxf.fediz</groupId>\n+       <artifactId>fediz</artifactId>\n+       <version>0.6-SNAPSHOT</version>\n+   </parent>\n+   <artifactId>fediz-core</artifactId>\n+   <name>WS Federation Core</name>\n+   <packaging>jar</packaging>\n+\n+    <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    </properties>  \n+\n+   <dependencies>\n+   \t\t<dependency>\n+\t\t\t<groupId>junit</groupId>\n+\t\t\t<artifactId>junit</artifactId>\n+\t\t\t<version>4.8.2</version>\n+\t\t\t<scope>test</scope>\n+\t\t</dependency>\n+   \t\t<dependency>\n+   \t\t\t<groupId>org.apache.ws.security</groupId>\n+   \t\t\t<artifactId>wss4j</artifactId>\n+   \t\t\t<version>1.6.2</version>\n+   \t\t\t<scope>compile</scope>\n+   \t\t</dependency>\n+     \t<dependency>\n+\t\t\t<groupId>org.slf4j</groupId>\n+\t\t\t<artifactId>slf4j-jdk14</artifactId>\n+\t\t\t<version>1.6.1</version>\n+\t\t\t<scope>test</scope>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.slf4j</groupId>\n+\t\t\t<artifactId>slf4j-api</artifactId>\n+\t\t\t<version>1.6.1</version>\n+\t\t</dependency>\n+   </dependencies>\n+\n+   <build>\n+        <testSourceDirectory>${basedir}/src/test/java</testSourceDirectory>\n+        <testResources>\n+            <testResource>\n+                <directory>src/test/java</directory>\n+                <excludes>\n+                    <exclude>**/*.java</exclude>\n+                </excludes>\n+            </testResource>\n+            <testResource>\n+                <directory>src/test/resources</directory>\n+                <filtering>false</filtering>\n+                <includes>\n+                    <include>**/*</include>\n+                </includes>\n+            </testResource>\n+        </testResources>\n+        \n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>2.6</version>\n+                <configuration>\n+                    <reportFormat>brief</reportFormat>\n+                    <useFile>false</useFile>\n+                    <forkMode>always</forkMode>\n+                    <childDelegation>false</childDelegation>\n+                    <includes>\n+                        <include>**/*Test.java</include>\n+                    </includes>\n+                    <systemPropertyVariables>\n+\t\t        <java.util.logging.config.file>${basedir}/src/test/resources/logging.properties</java.util.logging.config.file>\n+                    </systemPropertyVariables>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-pmd-plugin</artifactId>\n+                <version>2.5</version>\n+                <configuration>\n+                    <linkXRef>false</linkXRef>\n+                    <failOnViolation>true</failOnViolation>\n+                    <verbose>true</verbose>\n+                    <targetJdk>1.6</targetJdk>\n+                </configuration>\n+                <executions>\n+                    <execution>\n+                        <id>validate</id>\n+                        <phase>validate</phase>\n+                        <goals>\n+                            <goal>check</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-source-plugin</artifactId>\n+                <version>2.1.2</version>\n+                <executions>\n+                    <execution>\n+                        <id>attach-sources</id>\n+                        <phase>verify</phase>\n+                        <goals>\n+                            <goal>jar-no-fork</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+    \n+</project>\n+ "
        },
        {
            "sha": "4f55491636f1d4d49a39ed9036092b35f3954ba5",
            "filename": "fediz-core/src/main/java/org/apache/cxf/fediz/core/Claim.java",
            "status": "added",
            "additions": 108,
            "deletions": 0,
            "changes": 108,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FClaim.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FClaim.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FClaim.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.cxf.fediz.core;\n+\n+import java.io.Serializable;\n+import java.net.URI;\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import java.security.Principal;\n+\n+/**\n+ * \n+ * @author Oliver Wulff\n+ */\n+public class Claim implements Serializable {\n+\n+\t\n+\t/**\n+\t * \n+\t */\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\tprivate URI claimType;\n+\tprivate String issuer;\n+\tprivate String originalIssuer;\n+\tprivate Principal principal;\n+\tprivate String value;\n+\tprivate URI namespace = ClaimTypes.URI_BASE;\n+\t\n+\tpublic URI getNamespace() {\n+        return namespace;\n+    }\n+\n+    public void setNamespace(URI namespace) {\n+        this.namespace = namespace;\n+    }\n+\n+    public String getIssuer() {\n+\t\treturn issuer;\n+\t}\n+\n+\tpublic void setIssuer(String issuer) {\n+\t\tthis.issuer = issuer;\n+\t}\n+\n+\tpublic String getOriginalIssuer() {\n+\t\treturn originalIssuer;\n+\t}\n+\n+\tpublic void setOriginalIssuer(String originalIssuer) {\n+\t\tthis.originalIssuer = originalIssuer;\n+\t}\n+\n+\tpublic URI getClaimType() {\n+\t\treturn claimType;\n+\t}\n+\t\n+\tpublic void setClaimType(URI claimType) {\n+\t\tthis.claimType = claimType;\n+\t}\n+\n+\tpublic Principal getPrincipal() {\n+        return principal;\n+    }\n+    \n+    public void setPrincipal(Principal principal) {\n+        this.principal = principal;\n+    }\n+    \n+    public void setValue(String value) {\n+        this.value = value;\n+    }\n+    \n+    public String getValue() {\n+        return value;\n+    }\n+\t\n+}"
        },
        {
            "sha": "345da417356105d0a369c86fa52c446670b3a531",
            "filename": "fediz-core/src/main/java/org/apache/cxf/fediz/core/ClaimCollection.java",
            "status": "added",
            "additions": 107,
            "deletions": 0,
            "changes": 107,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FClaimCollection.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FClaimCollection.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FClaimCollection.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.cxf.fediz.core;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+\n+\n+\n+/**\n+ * This class holds a immutable collection of Claims.\n+ * \n+ * @author Oliver Wulff\n+ * @author Juerg Portmann\n+ */\n+public class ClaimCollection extends ArrayList<Claim> {\n+\n+\t/**\n+\t * \n+\t */\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tpublic ClaimCollection() {\n+\t\tsuper();\n+\t}\n+\n+\tpublic ClaimCollection(Collection<? extends Claim> c) {\n+\t\tsuper(c);\n+\t}\n+\n+\tpublic ClaimCollection(int initialCapacity) {\n+\t\tsuper(initialCapacity);\n+\t}\n+\n+\t@Override\n+\tpublic Claim set(int index, Claim element) {\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\n+\t@Override\n+\tpublic boolean add(Claim e) {\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\n+\t@Override\n+\tpublic void add(int index, Claim element) {\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\n+\t@Override\n+\tpublic Claim remove(int index) {\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\n+\t@Override\n+\tpublic boolean remove(Object o) {\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\n+\t@Override\n+\tpublic void clear() {\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\n+\t@Override\n+\tpublic boolean addAll(Collection<? extends Claim> c) {\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\n+\t@Override\n+\tpublic boolean addAll(int index, Collection<? extends Claim> c) {\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\n+\t@Override\n+\tprotected void removeRange(int fromIndex, int toIndex) {\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\n+\t@Override\n+\tpublic boolean removeAll(Collection<?> c) {\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\n+\t@Override\n+\tpublic List<Claim> subList(int fromIndex, int toIndex) {\n+\t\treturn Collections.unmodifiableList(super.subList(fromIndex, toIndex));\n+\t}\n+\n+}"
        },
        {
            "sha": "9b37b0f18160d25da4c7a5e22d4399266b24adbd",
            "filename": "fediz-core/src/main/java/org/apache/cxf/fediz/core/ClaimTypes.java",
            "status": "added",
            "additions": 141,
            "deletions": 0,
            "changes": 141,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FClaimTypes.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FClaimTypes.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FClaimTypes.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.cxf.fediz.core;\n+\n+import java.net.URI;\n+\n+/**\n+ * This holds a collection of Claims.\n+ * \n+ * @author Oliver Wulff\n+ */\n+public interface ClaimTypes {\n+    /**\n+     * The base XML namespace URI that is used by the claim types\n+     * http://docs.oasis-open.org/imi/identity/v1.0/os/identity-1.0-spec-os.pdf\n+     */\n+    public static final URI URI_BASE = \n+            URI.create(\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims\");\n+    \n+    /**\n+     * (givenName in [RFC 2256]) Preferred name or first name of a Subject.\n+     * According to RFC 2256: This attribute is used to hold the part of a person's name \n+     * which is not their surname nor middle name.\n+     */\n+    public static final URI FIRSTNAME = \n+            URI.create(\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname\");\n+    \n+    /**\n+     * (sn in [RFC 2256]) Surname or family name of a Subject.\n+     * According to RFC 2256: This is the X.500 surname attribute which contains the family name of a person.\n+     */\n+    public static final URI LASTNAME = \n+            URI.create(\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname\");    \n+    \n+    /**\n+     * (mail in inetOrgPerson) Preferred address for the \"To:\" field of email\n+     * to be sent to the Subject, usually of the form <user>@<domain>.\n+     * According to inetOrgPerson using [RFC 1274]: This attribute type specifies\n+     * an electronic mailbox attribute following the syntax specified in RFC 822.\n+     */\n+    public static final URI EMAILADDRESS = \n+            URI.create(\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\");    \n+    \n+    /**\n+     * (street in [RFC 2256]) Street address component of a Subject\u201fs address information.\n+     * According to RFC 2256: This attribute contains the physical address of the object\n+     * to which the entry corresponds, such as an address for package delivery.\n+     */\n+    public static final URI STREETADDRESS = \n+            URI.create(\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/streetaddress\");    \n+    \n+    /**\n+     * (/ in [RFC 2256]) Locality component of a Subject's address information.\n+     * According to RFC 2256: This attribute contains the name of a locality, such as a city, county or other geographic region.\n+     */\n+    public static final URI LOCALITY = \n+            URI.create(\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/locality\"); \n+    \n+    /**\n+     * (st in [RFC 2256]) Abbreviation for state or province name of a Subject's address information.\n+     * According to RFC 2256: \u201cThis attribute contains the full name of a state or province.\n+     * The values SHOULD be coordinated on a national level and if well-known shortcuts exist.\n+     */\n+    public static final URI STATE_PROVINCE = \n+            URI.create(\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/stateorprovince\");    \n+\n+    /**\n+     * (postalCode in X.500) Postal code or zip code component of a Subject's address information.\n+     * According to X.500(2001): The postal code attribute type specifies the postal code of the named object.\n+     */\n+    public static final URI POSTALCODE = \n+            URI.create(\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/postalcode\");\n+    \n+    /**\n+     * (c in [RFC 2256]) Country of a Subject.\n+     * According to RFC 2256: This attribute contains a two-letter ISO 3166 country code.\n+     */\n+    public static final URI COUNTRY = \n+            URI.create(\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country\");\n+    \n+    /**\n+     * (homePhone in inetOrgPerson) Primary or home telephone number of a Subject.\n+     * According to inetOrgPerson using [RFC 1274]: This attribute type specifies a home telephone number associated with a person.\n+     */\n+    public static final URI HOMEPHONE = \n+            URI.create(\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/homephone\");\n+    \n+    /**\n+     * (telephoneNumber in X.500 Person) Secondary or work telephone number of a Subject.\n+     * According to X.500(2001): This attribute type specifies an office/campus telephone number associated with a person.\n+     */\n+    public static final URI OTHERPHONE = \n+            URI.create(\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/otherphone\");    \n+\n+    /**\n+     * (mobile in inetOrgPerson) Mobile telephone number of a Subject.\n+     * According to inetOrgPerson using [RFC 1274]: This attribute type specifies a mobile telephone number associated with a person.\n+     */\n+    public static final URI MOBILEPHONE = \n+            URI.create(\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/mobilephone\");\n+    \n+    /**\n+     * The date of birth of a Subject in a form allowed by the xs:date data type.\n+     */\n+    public static final URI DATEOFBIRTH = \n+            URI.create(\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth\");\n+    \n+    /**\n+     * Gender of a Subject that can have any of these exact URI values\n+     *   '0' (meaning unspecified), '1' (meaning Male) or '2' (meaning Female)\n+     */\n+    public static final URI GENDER = \n+            URI.create(\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/gender\");\n+    \n+    /**\n+     * A private personal identifier (PPID) that identifies the Subject to a Relying Party.\n+     */\n+    public static final URI PRIVATE_PERSONAL_IDENTIFIER = \n+            URI.create(\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/privatepersonalidentifier\");\n+    \n+    /**\n+     * The Web page of a Subject expressed as a URL.\n+     */\n+    public static final URI WEB_PAGE = \n+            URI.create(\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/webpage\");    \n+}"
        },
        {
            "sha": "935b3858afaba26636457dba0ce5c533cb100820",
            "filename": "fediz-core/src/main/java/org/apache/cxf/fediz/core/FederationConfiguration.java",
            "status": "added",
            "additions": 123,
            "deletions": 0,
            "changes": 123,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FFederationConfiguration.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FFederationConfiguration.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FFederationConfiguration.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.cxf.fediz.core;\n+\n+import java.net.URI;\n+import java.util.List;\n+//[TODO]check if we can cache / clone the config \n+public class FederationConfiguration {\n+\n+\tprivate String freshness;\n+\tprivate String trustedIssuer;\n+\tprivate String realm;\n+\tprivate String authenticationType;\n+\tprivate URI roleURI;\n+\tprivate String roleDelimiter;\n+\tprivate String trustStoreFile;\n+\tprivate String trustStorePassword;\n+\tprivate List<Class<TokenValidator>> tokenValidators;\n+\tprivate int maxClockSkew = 0;\n+\tprivate boolean detectReplayedTokens = true;\n+\tprivate long tokenReplayCacheExpirationTime = 0;\n+\tprivate boolean detectExpiredTokens = true;\n+\t\n+\t//[TODO] TokenReplayCacheExpirationPeriod\n+\t//[TODO] DetectReplayedTokens\n+\t\n+\t\n+\tpublic String getFreshness() {\n+\t\treturn freshness;\n+\t}\n+\tpublic void setFreshness(String freshness) {\n+\t\tthis.freshness = freshness;\n+\t}\n+\tpublic String getTrustedIssuer() {\n+\t\treturn trustedIssuer;\n+\t}\n+\tpublic void setTrustedIssuer(String trustedIssuer) {\n+\t\tthis.trustedIssuer = trustedIssuer;\n+\t}\n+\tpublic String getRealm() {\n+\t\treturn realm;\n+\t}\n+\tpublic void setRealm(String realm) {\n+\t\tthis.realm = realm;\n+\t}\n+\tpublic String getAuthenticationType() {\n+\t\treturn authenticationType;\n+\t}\n+\tpublic void setAuthenticationType(String authenticationType) {\n+\t\tthis.authenticationType = authenticationType;\n+\t}\n+\tpublic URI getRoleURI() {\n+\t\treturn roleURI;\n+\t}\n+\tpublic void setRoleURI(URI roleURI) {\n+\t\tthis.roleURI = roleURI;\n+\t}\n+\tpublic String getRoleDelimiter() {\n+\t\treturn roleDelimiter;\n+\t}\n+\tpublic void setRoleDelimiter(String roleDelimiter) {\n+\t\tthis.roleDelimiter = roleDelimiter;\n+\t}\n+\tpublic List<Class<TokenValidator>> getTokenValidators() {\n+\t\treturn tokenValidators;\n+\t}\n+\tpublic void setTokenValidators(List<Class<TokenValidator>> tokenValidators) {\n+\t\tthis.tokenValidators = tokenValidators;\n+\t}\n+\tpublic int getMaxClockSkew() {\n+\t\treturn maxClockSkew;\n+\t}\n+\tpublic void setMaxClockSkew(int maxClockSkew) {\n+\t\tthis.maxClockSkew = maxClockSkew;\n+\t}\n+\tpublic boolean isDetectReplayedTokens() {\n+\t\treturn detectReplayedTokens;\n+\t}\n+\tpublic void setDetectReplayedTokens(boolean detectReplayedTokens) {\n+\t\tthis.detectReplayedTokens = detectReplayedTokens;\n+\t}\n+\tpublic long getTokenReplayCacheExpirationTime() {\n+\t\treturn tokenReplayCacheExpirationTime;\n+\t}\n+\tpublic void setTokenReplayCacheExpirationTime(\n+\t\t\tlong tokenReplayCacheExpirationTime) {\n+\t\tthis.tokenReplayCacheExpirationTime = tokenReplayCacheExpirationTime;\n+\t}\n+\tpublic boolean isDetectExpiredTokens() {\n+\t\treturn detectExpiredTokens;\n+\t}\n+\tpublic void setDetectExpiredTokens(boolean detectExpiredTokens) {\n+\t\tthis.detectExpiredTokens = detectExpiredTokens;\n+\t}\n+\tpublic void setTrustStoreFile(String trustStoreFile) {\n+\t\tthis.trustStoreFile = trustStoreFile;\n+\t}\n+\tpublic String getTrustStoreFile() {\n+\t\treturn trustStoreFile;\n+\t}\n+\tpublic void setTrustStorePassword(String trustStorePassword) {\n+\t\tthis.trustStorePassword = trustStorePassword;\n+\t}\n+\tpublic String getTrustStorePassword() {\n+\t\treturn trustStorePassword;\n+\t}\n+\t\n+}"
        },
        {
            "sha": "436665482f2537d7d993978c9f080b33d8faf053",
            "filename": "fediz-core/src/main/java/org/apache/cxf/fediz/core/FederationConstants.java",
            "status": "added",
            "additions": 214,
            "deletions": 0,
            "changes": 214,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FFederationConstants.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FFederationConstants.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FFederationConstants.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.cxf.fediz.core;\n+\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class FederationConstants {\n+\t\n+\tpublic static final String WSFED_METHOD = \"WSFED\";\n+\t\n+\tpublic static final URI DEFAULT_ROLE_URI = URI.create(\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role\");\n+\t\n+    /**\n+     * Constants defined in following spec:\n+     * http://docs.oasis-open.org/wsfed/federation/v1.2/os/ws-federation-1.2-spec-os.html\n+     */\n+\t\n+    /**\n+     * This REQUIRED parameter specifies the action to be performed.\n+     * Note that this serves roughly the same purpose as the WS-Addressing Action header for the WS-Trust SOAP RST messages.\n+     */\n+\tpublic static final String PARAM_ACTION = \"wa\";\n+\t\n+\tpublic static final String ACTION_SIGNIN = \"wsignin1.0\";\n+\tpublic static final String ACTION_SIGNOUT = \"wsignout1.0\";\n+\tpublic static final String ACTION_SIGNOUT_CLEANUP = \"wsignoutcleanup1.0\";\n+\t\n+\t\n+    /**\n+     * This OPTIONAL parameter is the URL to which responses are directed.\n+     * Note that this serves roughly the same purpose as the WS-Addressing <wsa:ReplyTo> header for the WS-Trust SOAP RST messages.\n+     */\n+\tpublic static final String PARAM_REPLY = \"wreply\";\n+\t\n+\t\n+    /**\n+     * This REQUIRED parameter is the URI of the requesting realm. \n+     * Note that this serves roughly the same purpose as the AppliesTo element in the WS-Trust SOAP RST messages.\n+     */\n+\tpublic static final String PARAM_TREALM = \"wtrealm\";\n+\t\n+\t\n+    /**\n+     * This OPTIONAL parameter indicates the freshness requirements.\n+     * If specified, this indicates the desired maximum age of authentication specified in minutes.\n+     * An IP/STS SHOULD NOT issue a token with a longer lifetime.\n+     * If specified as \u201c0\u201d it indicates a request for the IP/STS to re-prompt the user for authentication before issuing the token.\n+     * Note that this serves roughly the same purpose as the Freshness element in the WS-Trust SOAP RST messages.\n+     */\n+\tpublic static final String PARAM_FRESHNESS = \"wfresh\";\n+\t\n+\t\n+    /**\n+     * This OPTIONAL parameter indicates the REQUIRED authentication level.\n+     * Note that this parameter uses the same URIs and is equivalent to the wst:AuthenticationType element in the WS-Trust SOAP RST messages.\n+     */\n+\tpublic static final String PARAM_AUTH_TYPE = \"wauth\";\n+\t\n+\t\n+    /**\n+     * This OPTIONAL parameter specifies a token request using either a <wst:RequestSecurityToken> element or a full request message as described in WS-Trust.\n+     * If this parameter is not specified, it is assumed that the responding service knows the correct type of token to return.\n+     * Note that this can contain the same RST payload as used in WS-Trust RST messages.\n+     */\n+\tpublic static final String PARAM_REQUEST = \"wreq\";\n+\t\n+\t\n+    /**\n+     * This OPTIONAL parameter indicates the current time at the sender for ensuring freshness.  This parameter is the string encoding of time using the XML Schema datetime time using UTC notation.\n+     * Note that this serves roughly the same purpose as the WS-Security Timestamp elements in the Security headers of the SOAP RST messages.\n+     */\n+\tpublic static final String PARAM_CURRENT_TIME = \"wct\";\n+\t\n+\t\n+    /**\n+     * This OPTIONAL parameter is an opaque context value that MUST be returned with the issued token if it is passed in the request.\n+     * Note that this serves roughly the same purpose as the WS-Trust SOAP RST @Context attribute.\n+     */\n+\tpublic static final String PARAM_CONTEXT = \"wctx\";\n+\t\n+\t\n+    /**\n+     * This OPTIONAL parameter is the URL for the policy which can be obtained using an HTTP GET\n+     * and identifies the policy to be used related to the action specified in \"wa\", but MAY have a broader scope than just the \"wa\".\n+     * Note that this serves roughly the same purpose as the Policy element in the WS-Trust SOAP RST messages.\n+     */\n+\tpublic static final String PARAM_POLICY = \"wp\";\n+\t\n+\t\n+    /**\n+     * This OPTIONAL parameter indicates the federation context in which the request is made.\n+     * This is equivalent to the FederationId parameter in the RST message.\n+     */\n+\tpublic static final String PARAM_FED_CONTEXT = \"wfed\";\n+\t\n+\t\n+    /**\n+     * This OPTIONAL parameter indicates the encoding style to be used for XML parameter content.\n+     * If not specified the default behavior is to use standard URL encoding rules\n+     */\n+\tpublic static final String PARAM_ENCODING = \"wencoding\";\n+\t\n+\t\n+    /**\n+     * This REQUIRED parameter specifies the result of the token issuance.\n+     * This can take the form of the <wst:RequestSecurityTokenResponse> element or <wst:RequestSecurityTokenResponseCollection> element, a SOAP security token request response (that is, a <S:Envelope>) as detailed in WS-Trust, or a SOAP <S:Fault> element.\n+     */\n+\tpublic static final String PARAM_RESULT = \"wresult\";\n+\t\n+\t\n+    /**\n+     * This  OPTIONAL parameter indicates the account partner realm of the client.  This parameter is used to indicate the IP/STS address for the requestor.\n+     * This may be specified directly as a URL or indirectly as an identifier (e.g. urn: or uuid:).\n+     * In the case of an identifier the recipient is expected to know how to translate this (or get it translated) to a URL.\n+     * When the whr parameter is used, the resource, or its local IP/STS, typically removes the parameter and writes a cookie to the client browser to remember this setting for future requests.\n+     * Then, the request proceeds in the same way as if it had not been provided.\n+     * Note that this serves roughly the same purpose as federation metadata for discovering IP/STS locations previously discussed.\n+     */\n+\tpublic static final String PARAM_HOME_REALM = \"whr\";\n+\t\n+\t\n+    /**\n+     * This OPTIONAL parameter specifies a URL for where to find the request expressed as a <wst:RequestSecurityToken> element.\n+     * Note that this does not have a WS-Trust parallel.\n+     * The wreqptr parameter MUST NOT be included in a token request if wreq is present.\n+     */\n+\tpublic static final String PARAM_REQUEST_PTR = \"wreqptr\";\n+\t\n+\t\n+    /**\n+     * This parameter specifies a URL to which an HTTP GET can be issued.\n+     * The result is a document of type text/xml that contains the issuance result.\n+     * This can either be the <wst:RequestSecurityTokenResponse> element, the <wst:RequestSecurityTokenResponseCollection> element, a SOAP response, or a SOAP <S:Fault> element.\n+     */\n+\tpublic static final String PARAM_RESULT_PTR = \"wresultptr\";\n+\t\n+\t\n+\t\n+    public static final Map<String, URI> AUTH_TYPE_MAP;\n+    static {\n+        Map<String, URI> aMap = new HashMap<String, URI>();\n+        aMap.put(\"UNKNOWN\", FederationConstants.AUTH_TYPE_UNKNOWN);\n+        aMap.put(\"DEFAULT\", FederationConstants.AUTH_TYPE_DEFAULT);\n+        aMap.put(\"SSL\", FederationConstants.AUTH_TYPE_SSL);\n+        aMap.put(\"SSL_AND_KEY\", FederationConstants.AUTH_TYPE_SSL_AND_KEY);\n+        aMap.put(\"SSL_STRONG_PASSWORD\", FederationConstants.AUTH_TYPE_SSL_STRONG_PASSWORD);\n+        aMap.put(\"SSL_STRONG_PASSWORD_EXPIRATION\", FederationConstants.AUTH_TYPE_SSL_STRONG_PASSWORD_EXPIRATION);\n+        aMap.put(\"SMARTCARD\", FederationConstants.AUTH_TYPE_SMARTCARD);\n+        AUTH_TYPE_MAP = Collections.unmodifiableMap(aMap);\n+    }\n+\n+\t\n+\t\n+    /**\n+     * Unknown level of authentication\n+     */\n+\tpublic static final URI AUTH_TYPE_UNKNOWN = URI.create(\"http://docs.oasis-open.org/wsfed/authorization/200706/authntypes/unknown\");\n+\t\n+\t/**\n+     * Default sign-in mechanisms\n+     */\n+\tpublic static final URI AUTH_TYPE_DEFAULT = URI.create(\"http://docs.oasis-open.org/wsfed/authorization/200706/authntypes/default\");\n+\n+\t/**\n+     * Sign-in using SSL\n+     */\n+\tpublic static final URI AUTH_TYPE_SSL = URI.create(\"http://docs.oasis-open.org/wsfed/authorization/200706/authntypes/Ssl\");\n+\t\n+\t/**\n+     * Sign-in using SSL and a security key\n+     */\n+\tpublic static final URI AUTH_TYPE_SSL_AND_KEY = URI.create(\"http://docs.oasis-open.org/wsfed/authorization/200706/authntypes/SslAndKey\");\n+\t\n+\t/**\n+     * Sign-in using SSL and a \u201cstrong\u201d password\n+     */\n+\tpublic static final URI AUTH_TYPE_SSL_STRONG_PASSWORD = URI.create(\"http://docs.oasis-open.org/wsfed/authorization/200706/authntypes/SslAndStrongPasssword\");\n+\t\n+\t/**\n+     * Sign-in using SSL and a \u201cstrong\u201d password with expiration\n+     */\n+\tpublic static final URI AUTH_TYPE_SSL_STRONG_PASSWORD_EXPIRATION = URI.create(\"http://docs.oasis-open.org/wsfed/authorization/200706/authntypes/SslAndStrongPasswordWithExpiration\");\n+\t\n+\t/**\n+     * Sign-in using Smart Card\n+     */\n+\tpublic static final URI AUTH_TYPE_SMARTCARD = URI.create(\"http://docs.oasis-open.org/wsfed/authorization/200706/authntypes/smartcard\");\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+}"
        },
        {
            "sha": "8af2283ea3f691e07cad1c615a415065e44277b1",
            "filename": "fediz-core/src/main/java/org/apache/cxf/fediz/core/FederationProcessor.java",
            "status": "added",
            "additions": 24,
            "deletions": 0,
            "changes": 24,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FFederationProcessor.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FFederationProcessor.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FFederationProcessor.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,24 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.cxf.fediz.core;\n+\n+public interface FederationProcessor {\n+\n+\tpublic FederationResponse processRequest(FederationRequest request, FederationConfiguration config);\n+\t\n+}"
        },
        {
            "sha": "1ac12c75608e6ab459cd8aef8011e7e6ef0f7825",
            "filename": "fediz-core/src/main/java/org/apache/cxf/fediz/core/FederationProcessorImpl.java",
            "status": "added",
            "additions": 235,
            "deletions": 0,
            "changes": 235,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FFederationProcessorImpl.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FFederationProcessorImpl.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FFederationProcessorImpl.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,235 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.cxf.fediz.core;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.util.Calendar;\n+import java.util.Date;\n+\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.apache.cxf.fediz.core.saml.SAMLTokenValidator;\n+import org.apache.cxf.fediz.core.util.DOMUtils;\n+import org.apache.ws.security.WSConstants;\n+import org.apache.ws.security.util.XmlSchemaDateFormat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+public class FederationProcessorImpl implements FederationProcessor {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(FederationProcessorImpl.class);\n+\n+\t\n+\tprivate String namespace = \"http://docs.oasis-open.org/ws-sx/ws-trust/200512\";\n+\t\n+\tprivate TokenReplayCache<String> replayCache = null;\n+\n+\t/**\n+\t * Default constructor \n+\t */\n+\n+\tpublic FederationProcessorImpl() {\n+\t\tsuper();\n+\t\treplayCache = TokenReplayCacheInMemory.getInstance();\n+\t}\n+\t\n+\t\n+\t/**\n+\t * \n+\t * @param replayCache plugable token cache allowing to provide a replicated cache to be used in clustered scenarios \n+\t */\n+\t\n+\tpublic FederationProcessorImpl(TokenReplayCache<String> replayCache) {\n+\t\tsuper();\n+\t\tthis.replayCache = replayCache;\n+\t}\n+\n+\n+\n+\t@Override\n+\tpublic FederationResponse processRequest(FederationRequest request, FederationConfiguration config) {\n+\t\tFederationResponse response = null;\n+\t\t\n+\t\tif (request.getWa().equals(FederationConstants.ACTION_SIGNIN)) {\n+\t\t\tresponse = this.processSignInRequest(request, config);\n+\t\t}\n+\t\t\n+\t\treturn response;\n+\t}\n+\t\n+\tprotected FederationResponse processSignInRequest(FederationRequest request, FederationConfiguration config) {\n+\t\t\n+\t\tbyte[] wresult = request.getWresult().getBytes();\n+\t\t\n+\t\tDocument doc = null;\n+\t\tElement el = null;\n+\t\ttry {\n+\t\t\tdoc = DOMUtils.readXml(new ByteArrayInputStream(wresult));\n+\t\t\tel = doc.getDocumentElement();\n+\t\t\t\n+\t\t} catch (SAXException e) {\n+\t\t\te.printStackTrace();\n+\t\t\treturn null;\n+\t\t} catch (IOException e) {\n+\t\t\te.printStackTrace();\n+\t\t\treturn null;\n+\t\t} catch (ParserConfigurationException e) {\n+\t\t\te.printStackTrace();\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\t\n+\t\t\n+\t\tif (\"RequestSecurityTokenResponseCollection\".equals(el.getLocalName())) {\n+            el = DOMUtils.getFirstElement(el);\n+        }\n+        if (!\"RequestSecurityTokenResponse\".equals(el.getLocalName())) {\n+        \tthrow new RuntimeException(\"Unexpected element \" + el.getLocalName());\n+        }\n+        el = DOMUtils.getFirstElement(el);\n+        Element rst = null;\n+        Element lifetimeElem = null;\n+        String tt = null;\n+\n+        while (el != null) {\n+            String ln = el.getLocalName();\n+            if (namespace.equals(el.getNamespaceURI())) {\n+                if (\"Lifetime\".equals(ln)) {\n+                \tlifetimeElem = el;\n+                } else if (\"RequestedSecurityToken\".equals(ln)) {\n+                    rst = DOMUtils.getFirstElement(el);\n+                } else if (\"TokenType\".equals(ln)) {\n+                    tt = DOMUtils.getContent(el);\n+                }\n+            }\n+            el = DOMUtils.getNextElement(el);\n+        }\n+        if (LOG.isDebugEnabled()) {\n+        \tLOG.debug(\"RST: \" + rst.toString());\n+        \tLOG.debug(\"Lifetime: \" + ((lifetimeElem != null) ? lifetimeElem.toString() : \"null\"));\n+        \tLOG.debug(\"Tokentype: \" + ((tt != null) ? tt.toString() : \"null\"));\n+        }\n+\t\t\n+\t\tLifeTime lifeTime = null;\n+\t    if (lifetimeElem != null) {\n+\t    \tlifeTime = processLifeTime(lifetimeElem);\n+\t    }\n+\t    \n+\t    if (config.isDetectExpiredTokens() && lifeTime != null) {\n+\t\t    Calendar cal = Calendar.getInstance();\n+\t\t    if ( cal.getTime().after(lifeTime.getExpires()) ) {\n+\t\t    \tLOG.warn(\"Token already expired\");\n+\t\t    }\n+\t\t    \n+\t\t    if ( cal.getTime().before(lifeTime.getCreated())) {\n+\t\t    \tLOG.warn(\"Token not yet valid\");\n+\t\t    \t//[TODO] Add Check clocksqew\n+\t\t    }\n+\t    }\n+\t    \n+\t    //[TODO] Exception: TokenExpiredException, TokenInvalidException, TokenCachedException\n+\n+\t\t//[TODO] Flexible tokenvalidator selection, based on class list\n+\t\tSAMLTokenValidator validator = new SAMLTokenValidator();\n+\t\tTokenValidatorResponse response = validator.validateAndProcessToken(rst, config);\n+\t\t\n+\t\t\n+\t\t//Check whether token already used for signin\n+\t\tif (response.getUniqueTokenId() != null && config.isDetectReplayedTokens()) {\n+\t\t\t// Check whether token has already been processed once, prevent replay attack\n+\t\t\t\n+\t\t\tif (replayCache.getId(response.getUniqueTokenId()) == null) {\n+\t\t\t\t// not cached\n+\t\t\t\treplayCache.putId(response.getUniqueTokenId());\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tLOG.error(\"Replay attack with token id: \" +response.getUniqueTokenId());\n+\t\t\t\tthrow new RuntimeException(\"Replay attack with token id: \" +response.getUniqueTokenId());\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\t// [TODO] Token, WeakReference, SoftReference???\n+\t\tFederationResponse fedResponse = new FederationResponse(response.getUsername(),\n+\t\t\t\t                             response.getIssuer(),\n+\t\t\t\t                             response.getRoles(),\n+\t\t\t\t                             response.getClaims(),\n+\t\t\t\t                             response.getAudience(),\n+\t\t\t\t                             (lifeTime != null) ? lifeTime.getCreated() : null,\n+\t\t\t\t                             (lifeTime != null) ? lifeTime.getExpires() : null,\n+\t\t\t\t                             rst,\n+\t\t\t\t                             response.getUniqueTokenId());\n+\t\t\n+\t\treturn fedResponse;\n+\t}\n+\t\n+\t\n+\n+    \n+    private LifeTime processLifeTime(Element lifetimeElem) {\n+    \t//[TODO] Get rid of WSS4J dependency\n+        try {\n+            Element createdElem = \n+                DOMUtils.getFirstChildWithName(lifetimeElem,\n+                                                WSConstants.WSU_NS,\n+                                                WSConstants.CREATED_LN);\n+            DateFormat zulu = new XmlSchemaDateFormat();\n+            \n+            Date created = zulu.parse(DOMUtils.getContent(createdElem));\n+\n+            Element expiresElem = \n+                DOMUtils.getFirstChildWithName(lifetimeElem,\n+                                                WSConstants.WSU_NS,\n+                                                WSConstants.EXPIRES_LN);\n+            Date expires = zulu.parse(DOMUtils.getContent(expiresElem));\n+            \n+            return new LifeTime(created, expires);\n+            \n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+        return null;\n+    }\n+    \n+    public class LifeTime {\n+    \t\n+    \tprivate Date created;\n+    \tprivate Date expires;\n+    \t\n+    \t    \t\n+    \tpublic LifeTime(Date created, Date expires) {\n+    \t\tthis.created = created;\n+    \t\tthis.expires = expires;\n+    \t}\n+\n+\t\tpublic Date getCreated() {\n+\t\t\treturn created;\n+\t\t}\n+\n+\t\tpublic Date getExpires() {\n+\t\t\treturn expires;\n+\t\t}\n+    \t\n+    }\n+\n+}"
        },
        {
            "sha": "1b275ec1a58d39a03a4ff60b959dd7fb5dfd770c",
            "filename": "fediz-core/src/main/java/org/apache/cxf/fediz/core/FederationRequest.java",
            "status": "added",
            "additions": 48,
            "deletions": 0,
            "changes": 48,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FFederationRequest.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FFederationRequest.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FFederationRequest.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.cxf.fediz.core;\n+\n+public class FederationRequest {\n+\t\n+\tprivate String wa = null;\n+\tprivate String wresult = null;\n+\tprivate String wct = null;\n+\t\n+\t\n+\tpublic String getWct() {\n+\t\treturn wct;\n+\t}\n+\tpublic void setWct(String wct) {\n+\t\tthis.wct = wct;\n+\t}\n+\t\n+\tpublic String getWa() {\n+\t\treturn wa;\n+\t}\n+\tpublic void setWa(String wa) {\n+\t\tthis.wa = wa;\n+\t}\n+\tpublic String getWresult() {\n+\t\treturn wresult;\n+\t}\n+\tpublic void setWresult(String wresult) {\n+\t\tthis.wresult = wresult;\n+\t}\n+\n+\t\n+}"
        },
        {
            "sha": "c7232b7b6e3780e533566949264b1ab3892775d0",
            "filename": "fediz-core/src/main/java/org/apache/cxf/fediz/core/FederationResponse.java",
            "status": "added",
            "additions": 115,
            "deletions": 0,
            "changes": 115,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FFederationResponse.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FFederationResponse.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FFederationResponse.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.cxf.fediz.core;\n+\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+\n+import org.w3c.dom.Element;\n+\n+public class FederationResponse {\n+\t\n+\tprivate String audience = null;\n+\tprivate String username = null;\n+\tprivate List<String> roles = null;\n+\tprivate String issuer = null;\n+\tprivate List<Claim> claims = null;\n+\tprivate Element token = null;\n+\tprivate String uniqueTokenId = null;\n+\t\n+\t/**\n+\t* Created time\n+\t*/\n+\tprivate Date tokenCreated = null;\n+\t\n+\t/**\t* Expiration time\n+\t*/\n+\tprivate Date tokenExpires = null;\n+\t\n+\n+\t\n+\tprivate FederationResponse() {}\n+\n+\tpublic FederationResponse(String username, String issuer, List<String> roles, List<Claim> claims, String audience, Date created, Date expires, Element token, String uniqueTokenId) {\n+\t\tthis.username = username;\n+\t\tthis.issuer = issuer;\n+\t\tthis.roles = roles;\n+\t\tthis.claims = claims;\n+\t\tthis.audience = audience;\n+\t\tthis.tokenCreated = created;\n+\t\tthis.tokenExpires = expires;\n+\t\tthis.token = token;\n+\t\tthis.uniqueTokenId = uniqueTokenId;\n+\t}\n+\t\n+\t\n+\n+\tpublic String getUniqueTokenId() {\n+\t\treturn uniqueTokenId;\n+\t}\n+\n+\tpublic String getAudience() {\n+\t\treturn audience;\n+\t}\n+\n+\n+\n+\tpublic String getUsername() {\n+\t\treturn username;\n+\t}\n+\n+\n+\n+\tpublic List<String> getRoles() {\n+\t\tif (roles == null) return null;\n+\t\telse return Collections.unmodifiableList(roles);\n+\t}\n+\n+\n+\n+\tpublic String getIssuer() {\n+\t\treturn issuer;\n+\t}\n+\n+\n+\n+\tpublic List<Claim> getClaims() {\n+\t\tif (claims == null) return null;\n+\t\telse return Collections.unmodifiableList(claims);\n+\t}\n+\n+\n+\n+\tpublic Date getTokenCreated() {\n+\t\treturn tokenCreated;\n+\t}\n+\n+\n+\n+\tpublic Date getTokenExpires() {\n+\t\treturn tokenExpires;\n+\t}\n+\t\n+\tpublic Element getToken() {\n+\t\treturn token;\n+\t}\n+\t\n+\n+\t\n+}"
        },
        {
            "sha": "0075a7a3c2a22c8988b8353ad71e2db2837af6a1",
            "filename": "fediz-core/src/main/java/org/apache/cxf/fediz/core/TokenReplayCache.java",
            "status": "added",
            "additions": 9,
            "deletions": 0,
            "changes": 9,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FTokenReplayCache.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FTokenReplayCache.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FTokenReplayCache.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,9 @@\n+package org.apache.cxf.fediz.core;\n+\n+public interface TokenReplayCache<T> {\n+\n+\tpublic abstract T getId(String id);\n+\n+\tpublic abstract void putId(T id);\n+\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "5418dad9dabaa8bdac591864fc03035552d3d4e1",
            "filename": "fediz-core/src/main/java/org/apache/cxf/fediz/core/TokenReplayCacheInMemory.java",
            "status": "added",
            "additions": 70,
            "deletions": 0,
            "changes": 70,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FTokenReplayCacheInMemory.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FTokenReplayCacheInMemory.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FTokenReplayCacheInMemory.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.cxf.fediz.core;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+//TokenReplayCacheInMemory\n+//[TODO] add properties TokenReplayCacheExpirationPeriod\n+public final class TokenReplayCacheInMemory<T> implements TokenReplayCache<T>{\n+\n+\t/**\n+\t * \n+\t */\n+\tprivate static final long serialVersionUID = 7269477566842444549L;\n+\t\n+\tprivate List<T> cache = null;\n+\tprivate static TokenReplayCache<String> instance = null;\n+\t\n+\tprivate TokenReplayCacheInMemory() {\n+\t\tcache = Collections.synchronizedList(new ArrayList<T>());\n+\t}\n+\t\n+\tsynchronized public static TokenReplayCache<String> getInstance() {\n+\t\tif (instance != null) {\n+\t\t\treturn instance;\n+\t\t}\n+\t\tinstance = new TokenReplayCacheInMemory<String>();\n+\t\treturn instance;\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.fediz.core.TokenReplayCache#getId(java.lang.String)\n+\t */\n+\t@Override\n+\tpublic T getId(String id) {\n+\t\tint index = cache.indexOf(id);\n+\t\tif (index == -1) {\n+\t\t\treturn null;\n+\t\t} else {\n+\t\t\treturn cache.get(index);\n+\t\t}\n+\t}\n+\t\n+\t/* (non-Javadoc)\n+\t * @see org.apache.fediz.core.TokenReplayCache#putId(T)\n+\t */\n+\t@Override\n+\tpublic void putId(T id) {\n+\t\tcache.add(id);\n+\t}\n+\t\n+\n+}"
        },
        {
            "sha": "48dcbb5aabdc6cc97c5677e5cc45d5e4cc932bd7",
            "filename": "fediz-core/src/main/java/org/apache/cxf/fediz/core/TokenValidator.java",
            "status": "added",
            "additions": 42,
            "deletions": 0,
            "changes": 42,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FTokenValidator.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FTokenValidator.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FTokenValidator.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.cxf.fediz.core;\n+\n+import org.w3c.dom.Element;\n+\n+public interface TokenValidator {\n+    \n+\t/**\n+     * Return true if this TokenValidator implementation is capable of validating the\n+     * TokenType argument.\n+     */\n+    public boolean canHandleTokenType(String tokenType);\n+    \n+\t\n+    /**\n+     * Return true if this TokenValidator implementation is capable of validating the\n+     * Token argument.\n+     */\n+\tpublic boolean canHandleToken(Element token);\n+\n+\t\n+    /**\n+     * Validate a Token using the given Element and Configuration.\n+     */\n+    TokenValidatorResponse validateAndProcessToken(Element token, FederationConfiguration config);\n+}"
        },
        {
            "sha": "3418d6e22d068c42809e49dd1cb9135577cc5b6e",
            "filename": "fediz-core/src/main/java/org/apache/cxf/fediz/core/TokenValidatorResponse.java",
            "status": "added",
            "additions": 64,
            "deletions": 0,
            "changes": 64,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FTokenValidatorResponse.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FTokenValidatorResponse.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FTokenValidatorResponse.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.cxf.fediz.core;\n+\n+import java.util.List;\n+\n+public class TokenValidatorResponse {\n+\t\n+\tprivate String username = null;\n+\tprivate String uniqueTokenId = null;\n+\tprivate List<String> roles = null;\n+\tprivate String issuer = null;\n+\tprivate String audience = null;\n+\tprivate List<Claim> claims = null;\n+\n+\t\n+\t\n+\tpublic TokenValidatorResponse(String uniqueTokenId, String username, String issuer, List<String> roles, List<Claim> claims, String audience) {\n+\t\tthis.username = username;\n+\t\tthis.issuer = issuer;\n+\t\tthis.roles = roles;\n+\t\tthis.claims = claims;\n+\t\tthis.audience = audience;\n+\t\tthis.uniqueTokenId = uniqueTokenId;\n+\t}\n+\t\n+\t\n+\tpublic String getUsername() {\n+\t\treturn username;\n+\t}\n+\tpublic String getUniqueTokenId() {\n+\t\treturn uniqueTokenId;\n+\t}\n+\tpublic List<String> getRoles() {\n+\t\treturn roles;\n+\t}\n+\tpublic String getIssuer() {\n+\t\treturn issuer;\n+\t}\n+\tpublic String getAudience() {\n+\t\treturn audience;\n+\t}\n+\tpublic List<Claim> getClaims() {\n+\t\treturn claims;\n+\t}\n+\n+\t\n+\t\n+}"
        },
        {
            "sha": "cb6ad31049004f267982c72c34fbfd85980ae010",
            "filename": "fediz-core/src/main/java/org/apache/cxf/fediz/core/WsFedPrincipal.java",
            "status": "added",
            "additions": 64,
            "deletions": 0,
            "changes": 64,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FWsFedPrincipal.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FWsFedPrincipal.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FWsFedPrincipal.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+//[TODO] Should it be a Subject instead of Principal (tomcat uses a prinicpal in GenericPrinicpial)\n+\n+package org.apache.cxf.fediz.core;\n+\n+import java.security.Principal;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Deprecated\n+public class WsFedPrincipal implements Principal {\n+\n+\tprotected String username = null;\n+\tprotected List<String> roles = null;\n+\tprotected ClaimCollection claims = null;\n+\n+\t\n+\tpublic WsFedPrincipal(String username) {\n+\t\tthis(username, null, null);\n+\t}\n+\t\t\n+\tpublic WsFedPrincipal(String username, List<String> roles) {\n+\t\tthis(username, roles, null);\n+\t}\n+\t\t\n+\tpublic WsFedPrincipal(String username, List<String> roles, ClaimCollection claims) {\n+\t\tthis.username = username;\n+\t\tthis.roles = roles;\n+\t\tthis.claims = claims;\n+\t}\n+\t\n+\t\n+\t@Override\n+\tpublic String getName() {\n+\t\treturn this.username;\n+\t}\n+\t\n+\t\n+\tpublic List<String> getRoles() {\n+\t\treturn Collections.unmodifiableList(this.roles);\n+\t}\n+\t\n+\n+\tpublic ClaimCollection getClaims() {\n+\t\treturn this.claims;\n+\t}\n+\t\n+}"
        },
        {
            "sha": "ed9a6cd1e38b988a64f27062c834d22b11516595",
            "filename": "fediz-core/src/main/java/org/apache/cxf/fediz/core/saml/CertConstraintsParser.java",
            "status": "added",
            "additions": 88,
            "deletions": 0,
            "changes": 88,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2Fsaml%2FCertConstraintsParser.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2Fsaml%2FCertConstraintsParser.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2Fsaml%2FCertConstraintsParser.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.cxf.fediz.core.saml;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.regex.PatternSyntaxException;\n+\n+\n+/**\n+ * This class provides the functionality to match a given X509Certificate against a list of\n+ * regular expressions.\n+ */\n+public class CertConstraintsParser {\n+    \n+    /**\n+     * a collection of compiled regular expression patterns for the subject DN\n+     */\n+    private Collection<Pattern> subjectDNPatterns = new ArrayList<Pattern>();\n+    \n+    /**\n+     * Set a list of Strings corresponding to regular expression constraints on the subject DN\n+     * of a certificate\n+     */\n+    public void setSubjectConstraints(List<String> constraints) {\n+        if (constraints != null) {\n+            subjectDNPatterns = new ArrayList<Pattern>();\n+            for (String constraint : constraints) {\n+                try {\n+                    subjectDNPatterns.add(Pattern.compile(constraint.trim()));\n+                } catch (PatternSyntaxException ex) {\n+                    //LOG.severe(ex.getMessage());\n+                    throw ex;\n+                }\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * @return      true if the certificate's SubjectDN matches the constraints defined in the\n+     *              subject DNConstraints; false, otherwise. The certificate subject DN only\n+     *              has to match ONE of the subject cert constraints (not all).\n+     */\n+    public boolean\n+    matches(\n+        final java.security.cert.X509Certificate cert\n+    ) {\n+        if (!subjectDNPatterns.isEmpty()) {\n+            if (cert == null) {\n+                //LOG.fine(\"The certificate is null so no constraints matching was possible\");\n+                return false;\n+            }\n+            String subjectName = cert.getSubjectX500Principal().getName();\n+            boolean subjectMatch = false;\n+            for (Pattern subjectDNPattern : subjectDNPatterns) {\n+                final Matcher matcher = subjectDNPattern.matcher(subjectName);\n+                if (matcher.matches()) {\n+                    //LOG.fine(\"Subject DN \" + subjectName + \" matches with pattern \" + subjectDNPattern);\n+                    subjectMatch = true;\n+                    break;\n+                }\n+            }\n+            if (!subjectMatch) {\n+                return false;\n+            }\n+        }\n+        \n+        return true;\n+    }\n+}"
        },
        {
            "sha": "e06a7fb677c25fefe27199252ef466ee9ad7cae8",
            "filename": "fediz-core/src/main/java/org/apache/cxf/fediz/core/saml/SAMLTokenValidator.java",
            "status": "added",
            "additions": 322,
            "deletions": 0,
            "changes": 322,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2Fsaml%2FSAMLTokenValidator.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2Fsaml%2FSAMLTokenValidator.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2Fsaml%2FSAMLTokenValidator.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,322 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.cxf.fediz.core.saml;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.StringTokenizer;\n+\n+\n+import javax.security.auth.callback.Callback;\n+import javax.security.auth.callback.CallbackHandler;\n+import javax.security.auth.callback.UnsupportedCallbackException;\n+\n+import org.apache.cxf.fediz.core.Claim;\n+import org.apache.cxf.fediz.core.ClaimCollection;\n+import org.apache.cxf.fediz.core.FederationConfiguration;\n+import org.apache.cxf.fediz.core.TokenValidator;\n+import org.apache.cxf.fediz.core.TokenValidatorResponse;\n+import org.apache.ws.security.SAMLTokenPrincipal;\n+import org.apache.ws.security.WSDocInfo;\n+import org.apache.ws.security.WSPasswordCallback;\n+import org.apache.ws.security.WSSConfig;\n+import org.apache.ws.security.WSSecurityException;\n+import org.apache.ws.security.components.crypto.Crypto;\n+import org.apache.ws.security.components.crypto.CryptoFactory;\n+import org.apache.ws.security.handler.RequestData;\n+import org.apache.ws.security.saml.SAMLKeyInfo;\n+import org.apache.ws.security.saml.ext.AssertionWrapper;\n+import org.apache.ws.security.validate.Credential;\n+import org.apache.ws.security.validate.SignatureTrustValidator;\n+import org.opensaml.common.SAMLVersion;\n+import org.opensaml.xml.XMLObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Element;\n+\n+public class SAMLTokenValidator implements TokenValidator {\n+\t\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(SAMLTokenValidator.class);\n+\t\n+\t\n+\t//[TODO] make sure we answer true only for cases we actually can handle\n+\t@Override\n+\tpublic boolean canHandleTokenType(String tokenType) {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic boolean canHandleToken(Element token) {\n+\t\treturn true;\n+\t}\n+\t\n+\t@Override\n+\tpublic TokenValidatorResponse validateAndProcessToken(Element token, FederationConfiguration config) {\n+\t\t\n+        try {\n+        \t\n+        \tProperties sigProperties = createCryptoProviderProperties(config.getTrustStoreFile(), config.getTrustStorePassword());\n+        \t                    \t\n+        \tCrypto sigCrypto = CryptoFactory.getInstance(sigProperties);\n+        \tRequestData requestData = new RequestData();\n+            requestData.setSigCrypto(sigCrypto);\n+            WSSConfig wssConfig = WSSConfig.getNewInstance();\n+            requestData.setWssConfig(wssConfig);\n+            //not needed as no private key must be read\n+            //requestData.setCallbackHandler(new PasswordCallbackHandler(password));\n+        \t\n+\t        AssertionWrapper assertion = new AssertionWrapper(token);\n+\t        if (!assertion.isSigned()) {\n+\t        \tthrow new RuntimeException(\"The received assertion is not signed, and therefore not trusted\");\n+\t        }\n+\t        // Verify the signature\n+\t        assertion.verifySignature(\n+\t        \trequestData, new WSDocInfo(token.getOwnerDocument())\n+\t        );\n+\t        \n+\t        // Now verify trust on the signature\n+\t        Credential trustCredential = new Credential();\n+\t        SAMLKeyInfo samlKeyInfo = assertion.getSignatureKeyInfo();\n+\t        trustCredential.setPublicKey(samlKeyInfo.getPublicKey());\n+\t        trustCredential.setCertificates(samlKeyInfo.getCerts());\n+\t        \n+\t        SignatureTrustValidator trustValidator = new SignatureTrustValidator();\n+\t        trustValidator.validate(trustCredential, requestData);\n+\t        \n+\t        String assertionIssuer = assertion.getIssuerString();\n+\t        \n+            // Finally check that subject DN of the signing certificate matches a known constraint\n+            X509Certificate cert = null;\n+            if (trustCredential.getCertificates() != null) {\n+                cert = trustCredential.getCertificates()[0];\n+            }\n+            \n+            List<String> subjectConstraints = Arrays.asList(config.getTrustedIssuer());\n+            \n+            CertConstraintsParser certConstraints = new CertConstraintsParser();\n+            certConstraints.setSubjectConstraints(subjectConstraints);\n+            \n+            if (!certConstraints.matches(cert)) {\n+            \tthrow new RuntimeException(\"Issuer '\" + assertionIssuer + \"' not trusted\");\n+            }\n+            \n+            \n+            String audience = null;\n+            List<Claim> claims = null;\n+            if (assertion.getSamlVersion().equals(SAMLVersion.VERSION_20)) {\n+            \tclaims = parseClaimsInAssertion(assertion.getSaml2());\n+            \taudience = getAudienceRestriction(assertion.getSaml2());\n+            } else if (assertion.getSamlVersion().equals(SAMLVersion.VERSION_11)) {\n+            \tclaims = parseClaimsInAssertion(assertion.getSaml1());\n+            \taudience = getAudienceRestriction(assertion.getSaml1());\n+            }\n+            \n+            List<String> roles = null;\n+            URI roleURI = config.getRoleURI();\n+            String delim = config.getRoleDelimiter();\n+            if (roleURI != null) {\n+            \t for (Claim c: claims) {\n+            \t\tURI claimURI = URI.create(c.getNamespace() + \"/\" + c.getClaimType());\n+                 \tif (roleURI.equals(claimURI)) {\n+                 \t\tif (delim == null) { delim = \",\"; }\n+                 \t\troles =  parseRoles(c.getValue(), delim);\n+                 \t\tclaims.remove(c);\n+                 \t\tbreak;\n+                 \t}\n+                 }\n+            }\n+                       \n+            SAMLTokenPrincipal p = new SAMLTokenPrincipal(assertion);\n+            \n+            TokenValidatorResponse response = new TokenValidatorResponse(\n+            \t\tassertion.getId(),\n+            \t\tp.getName(),\n+            \t\tassertionIssuer,\n+            \t\troles,\n+            \t\tclaims,\n+            \t\taudience);\n+            \n+            return response;\n+            \n+        } catch (WSSecurityException ex) {\n+        \t//[TODO] proper exception handling\n+        \tthrow new RuntimeException(ex);\n+        }\n+    }\n+\t\n+\t\n+\tprotected List<Claim> parseClaimsInAssertion(org.opensaml.saml1.core.Assertion assertion) {\n+\t\tList<org.opensaml.saml1.core.AttributeStatement> attributeStatements = \n+            assertion.getAttributeStatements();\n+        if (attributeStatements == null || attributeStatements.isEmpty()) {\n+            if (LOG.isDebugEnabled()) {\n+            \tLOG.debug(\"No attribute statements found\");\n+            }            \n+            return Collections.emptyList();\n+        }\n+        ClaimCollection collection = new ClaimCollection();\n+        \n+        for (org.opensaml.saml1.core.AttributeStatement statement : attributeStatements) {\n+        \tif (LOG.isDebugEnabled()) {\n+            \tLOG.debug(\"parsing statement: \" + statement.getElementQName());\n+            }\n+        \n+            List<org.opensaml.saml1.core.Attribute> attributes = statement.getAttributes();\n+            for (org.opensaml.saml1.core.Attribute attribute : attributes) {\n+            \tif (LOG.isDebugEnabled()) {\n+                \tLOG.debug(\"parsing attribute: \" + attribute.getAttributeName());\n+                }\n+            \tClaim c = new Claim();\n+            \tc.setIssuer(assertion.getIssuer());\n+            \tc.setClaimType(URI.create(attribute.getAttributeName()));\n+            \ttry {\n+\t\t\t\t\tc.setClaimType(new URI(attribute.getAttributeName()));\n+\t\t\t\t} catch (URISyntaxException e) {\n+\t\t\t\t\tLOG.warn(\"Invalid attribute name in attributestatement: \" + e.getMessage());\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+            \tfor (XMLObject attributeValue : attribute.getAttributeValues()) {\n+                    Element attributeValueElement = attributeValue.getDOM();\n+                    String value = attributeValueElement.getTextContent();\n+                    if (LOG.isDebugEnabled()) {\n+                    \tLOG.debug(\" [\" + value + \"]\");\n+                    }\n+                    c.setValue(value);\n+                    collection.add(c);\n+                    break;                    \n+                }\n+            }\n+        }\n+        return collection;\n+\t}\n+\t\n+\tprotected List<Claim> parseClaimsInAssertion(org.opensaml.saml2.core.Assertion assertion) {\n+\t\tList<org.opensaml.saml2.core.AttributeStatement> attributeStatements = \n+            assertion.getAttributeStatements();\n+        if (attributeStatements == null || attributeStatements.isEmpty()) {\n+            if (LOG.isDebugEnabled()) {\n+            \tLOG.debug(\"No attribute statements found\");\n+            }\n+            return Collections.emptyList();\n+        }\n+        \n+        List<Claim> collection = new ArrayList<Claim>();\n+        \n+        for (org.opensaml.saml2.core.AttributeStatement statement : attributeStatements) {\n+        \tif (LOG.isDebugEnabled()) {\n+            \tLOG.debug(\"parsing statement: \" + statement.getElementQName());\n+            }\n+            List<org.opensaml.saml2.core.Attribute> attributes = statement.getAttributes();\n+            for (org.opensaml.saml2.core.Attribute attribute : attributes) {\n+            \tif (LOG.isDebugEnabled()) {\n+                \tLOG.debug(\"parsing attribute: \" + attribute.getName());\n+                }\n+            \tClaim c = new Claim();\n+            \tc.setClaimType(URI.create(attribute.getName()));\n+            \tc.setIssuer(assertion.getIssuer().getNameQualifier());\n+            \tfor (XMLObject attributeValue : attribute.getAttributeValues()) {\n+                    Element attributeValueElement = attributeValue.getDOM();\n+                    String value = attributeValueElement.getTextContent();\n+                    if (LOG.isDebugEnabled()) {\n+                    \tLOG.debug(\" [\" + value + \"]\");\n+                    }\n+                    c.setValue(value);\n+                    collection.add(c);\n+                    break;\n+                }\n+            }\n+        }\n+        return collection;\n+\t\t\n+\t}\n+\t\n+\tprotected List<String> parseRoles(String value, String delim) {\n+\t\tList<String> roles = new ArrayList<String>();\n+\t\tStringTokenizer st = new StringTokenizer(value, delim);\n+\t\twhile (st.hasMoreTokens()) {\n+\t\t\tString role = st.nextToken();\n+\t\t\troles.add(role);\n+\t\t}\n+\t\treturn roles;\n+\t}\n+\t\n+\tprotected String getAudienceRestriction(org.opensaml.saml1.core.Assertion assertion) {\n+\t\tString audience = null;\n+\t\ttry {\n+\t\t\taudience = assertion.getConditions().getAudienceRestrictionConditions().get(0).getAudiences().get(0).getUri();\n+\t\t} catch (Exception ex) {\n+\t\t\tLOG.warn(\"Failed to read audience\" + ex.getMessage());\n+\t\t}\n+\t\treturn audience; \n+\t}\n+\t\n+\tprotected String getAudienceRestriction(org.opensaml.saml2.core.Assertion assertion) {\n+\t\tString audience = null;\n+\t\ttry {\n+\t\t\taudience = assertion.getConditions().getAudienceRestrictions().get(0).getAudiences().get(0).getAudienceURI();\n+\t\t} catch (Exception ex) {\n+\t\t\tLOG.warn(\"Failed to read audience\" + ex.getMessage());\n+\t\t}\n+\t\treturn audience;\n+        \n+\t}\n+\t\n+\tprotected Properties createCryptoProviderProperties(String truststoreFile, String truststorePassword) {\n+\t\tProperties p = new Properties();\n+\t\tp.put(\"org.apache.ws.security.crypto.provider\", \"org.apache.ws.security.components.crypto.Merlin\");\n+\t\tp.put(\"org.apache.ws.security.crypto.merlin.keystore.type\", \"jks\");\n+\t\tp.put(\"org.apache.ws.security.crypto.merlin.keystore.password\", truststorePassword);\n+\t\tp.put(\"org.apache.ws.security.crypto.merlin.keystore.file\", truststoreFile);\n+\t\treturn p;\n+\t}\n+   \n+\t\n+\t// A sample MyHandler class\n+\tclass PasswordCallbackHandler \n+\t    implements CallbackHandler\n+\t{\n+\t\tprivate String password;\n+\t\t\n+\t\tprivate PasswordCallbackHandler() {}\n+\t\t\n+\t\tpublic PasswordCallbackHandler(String password) {\n+\t\t\tthis.password = password;\n+\t\t}\n+\t\t\n+\t    public void handle(Callback[] callbacks) throws\n+\t        IOException, UnsupportedCallbackException\n+\t    {\n+\t        for (int i = 0; i < callbacks.length; i++) {\n+\t            if (callbacks[i] instanceof WSPasswordCallback) {\n+\t            \tWSPasswordCallback nc = (WSPasswordCallback)callbacks[i];\n+\t                nc.setPassword(this.password);\n+\t            } else {\n+\t                throw new UnsupportedCallbackException(callbacks[i],\n+\t                                                       \"Unrecognized Callback\");\n+\t            }\n+\t        }\n+\t    }\n+\t}\n+}"
        },
        {
            "sha": "59c80aa2d2b8abfeed9fd6e7596a84d44e8c5def",
            "filename": "fediz-core/src/main/java/org/apache/cxf/fediz/core/util/DOMUtils.java",
            "status": "added",
            "additions": 702,
            "deletions": 0,
            "changes": 702,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2Futil%2FDOMUtils.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2Futil%2FDOMUtils.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2Futil%2FDOMUtils.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,702 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.cxf.fediz.core.util;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.WeakHashMap;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.namespace.QName;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.Text;\n+\n+import org.xml.sax.EntityResolver;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+/**\n+ * Few simple utils to read DOM. This is originally from the Jakarta Commons Modeler.\n+ * \n+ * @author Costin Manolache\n+ */\n+public final class DOMUtils {\n+    private static final String XMLNAMESPACE = \"xmlns\";\n+\n+    private static final Map<ClassLoader, DocumentBuilder> DOCUMENT_BUILDERS = Collections\n+        .synchronizedMap(new WeakHashMap<ClassLoader, DocumentBuilder>());\n+\n+    private DOMUtils() {\n+    }\n+\n+    private static DocumentBuilder getBuilder() throws ParserConfigurationException {\n+        ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        if (loader == null) {\n+            loader = DOMUtils.class.getClassLoader();\n+        }\n+        if (loader == null) {\n+            return XMLUtils.getParser();\n+        }\n+        DocumentBuilder builder = DOCUMENT_BUILDERS.get(loader);\n+        if (builder == null) {\n+            builder = XMLUtils.getParser();\n+            DOCUMENT_BUILDERS.put(loader, builder);\n+        }\n+        return builder;\n+    }\n+\n+    /**\n+     * This function is much like getAttribute, but returns null, not \"\", for a nonexistent attribute.\n+     * \n+     * @param e\n+     * @param attributeName\n+     * @return\n+     */\n+    public static String getAttributeValueEmptyNull(Element e, String attributeName) {\n+        Attr node = e.getAttributeNode(attributeName);\n+        if (node == null) {\n+            return null;\n+        }\n+        return node.getValue();\n+    }\n+\n+    /**\n+     * Get the trimmed text content of a node or null if there is no text\n+     */\n+    public static String getContent(Node n) {\n+        String s = getRawContent(n);\n+        if (s != null) {\n+            s = s.trim();\n+        }\n+        return s;\n+    }\n+\n+    /**\n+     * Get the raw text content of a node or null if there is no text\n+     */\n+    public static String getRawContent(Node n) {\n+        if (n == null) {\n+            return null;\n+        }\n+        StringBuilder b = null;\n+        String s = null;\n+        Node n1 = n.getFirstChild();\n+        while (n1 != null) {\n+            if (n1.getNodeType() == Node.TEXT_NODE) {\n+                if (b != null) {\n+                    b.append(((Text)n1).getNodeValue());\n+                } else if (s == null) {\n+                    s = ((Text)n1).getNodeValue();\n+                } else {\n+                    b = new StringBuilder(s).append(((Text)n1).getNodeValue());\n+                    s = null;\n+                }\n+            }\n+            n1 = n1.getNextSibling();\n+        }\n+        if (b != null) {\n+            return b.toString();\n+        }\n+        return s;\n+    }\n+\n+    /**\n+     * Get the first element child.\n+     * \n+     * @param parent lookup direct childs\n+     * @param name name of the element. If null return the first element.\n+     */\n+    public static Node getChild(Node parent, String name) {\n+        if (parent == null) {\n+            return null;\n+        }\n+\n+        Node first = parent.getFirstChild();\n+        if (first == null) {\n+            return null;\n+        }\n+\n+        for (Node node = first; node != null; node = node.getNextSibling()) {\n+            // System.out.println(\"getNode: \" + name + \" \" +\n+            // node.getNodeName());\n+            if (node.getNodeType() != Node.ELEMENT_NODE) {\n+                continue;\n+            }\n+            if (name != null && name.equals(node.getNodeName())) {\n+                return node;\n+            }\n+            if (name == null) {\n+                return node;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public static String getAttribute(Node element, String attName) {\n+        NamedNodeMap attrs = element.getAttributes();\n+        if (attrs == null) {\n+            return null;\n+        }\n+        Node attN = attrs.getNamedItem(attName);\n+        if (attN == null) {\n+            return null;\n+        }\n+        return attN.getNodeValue();\n+    }\n+\n+    public static String getAttribute(Element element, QName attName) {\n+        Attr attr;\n+        if (StringUtils.isEmpty(attName.getNamespaceURI())) {\n+            attr = element.getAttributeNode(attName.getLocalPart());\n+        } else {\n+            attr = element.getAttributeNodeNS(attName.getNamespaceURI(), attName.getLocalPart());\n+        }\n+        return attr == null ? null : attr.getValue();\n+    }\n+\n+    public static void setAttribute(Node node, String attName, String val) {\n+        NamedNodeMap attributes = node.getAttributes();\n+        Node attNode = node.getOwnerDocument().createAttributeNS(null, attName);\n+        attNode.setNodeValue(val);\n+        attributes.setNamedItem(attNode);\n+    }\n+\n+    public static void removeAttribute(Node node, String attName) {\n+        NamedNodeMap attributes = node.getAttributes();\n+        attributes.removeNamedItem(attName);\n+    }\n+\n+    /**\n+     * Set or replace the text value\n+     */\n+    public static void setText(Node node, String val) {\n+        Node chld = DOMUtils.getChild(node, Node.TEXT_NODE);\n+        if (chld == null) {\n+            Node textN = node.getOwnerDocument().createTextNode(val);\n+            node.appendChild(textN);\n+            return;\n+        }\n+        // change the value\n+        chld.setNodeValue(val);\n+    }\n+\n+    /**\n+     * Find the first direct child with a given attribute.\n+     * \n+     * @param parent\n+     * @param elemName name of the element, or null for any\n+     * @param attName attribute we're looking for\n+     * @param attVal attribute value or null if we just want any\n+     */\n+    public static Node findChildWithAtt(Node parent, String elemName, String attName, String attVal) {\n+\n+        Node child = DOMUtils.getChild(parent, Node.ELEMENT_NODE);\n+        if (attVal == null) {\n+            while (child != null && (elemName == null || elemName.equals(child.getNodeName()))\n+                   && DOMUtils.getAttribute(child, attName) != null) {\n+                child = getNext(child, elemName, Node.ELEMENT_NODE);\n+            }\n+        } else {\n+            while (child != null && (elemName == null || elemName.equals(child.getNodeName()))\n+                   && !attVal.equals(DOMUtils.getAttribute(child, attName))) {\n+                child = getNext(child, elemName, Node.ELEMENT_NODE);\n+            }\n+        }\n+        return child;\n+    }\n+\n+    /**\n+     * Get the first child's content ( ie it's included TEXT node ).\n+     */\n+    public static String getChildContent(Node parent, String name) {\n+        Node first = parent.getFirstChild();\n+        if (first == null) {\n+            return null;\n+        }\n+        for (Node node = first; node != null; node = node.getNextSibling()) {\n+            // System.out.println(\"getNode: \" + name + \" \" +\n+            // node.getNodeName());\n+            if (name.equals(node.getNodeName())) {\n+                return getRawContent(node);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public static QName getElementQName(Element el) {\n+        return new QName(el.getNamespaceURI(), el.getLocalName());\n+    }\n+\n+    /**\n+     * Get the first direct child with a given type\n+     */\n+    public static Element getFirstElement(Node parent) {\n+        Node n = parent.getFirstChild();\n+        while (n != null && Node.ELEMENT_NODE != n.getNodeType()) {\n+            n = n.getNextSibling();\n+        }\n+        if (n == null) {\n+            return null;\n+        }\n+        return (Element)n;\n+    }\n+\n+    public static Element getNextElement(Element el) {\n+        Node nd = el.getNextSibling();\n+        while (nd != null) {\n+            if (nd.getNodeType() == Node.ELEMENT_NODE) {\n+                return (Element)nd;\n+            }\n+            nd = nd.getNextSibling();\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Return the first element child with the specified qualified name.\n+     * \n+     * @param parent\n+     * @param q\n+     * @return\n+     */\n+    public static Element getFirstChildWithName(Element parent, QName q) {\n+        String ns = q.getNamespaceURI();\n+        String lp = q.getLocalPart();\n+        return getFirstChildWithName(parent, ns, lp);\n+    }\n+\n+    /**\n+     * Return the first element child with the specified qualified name.\n+     * \n+     * @param parent\n+     * @param ns\n+     * @param lp\n+     * @return\n+     */\n+    public static Element getFirstChildWithName(Element parent, String ns, String lp) {\n+        for (Node n = parent.getFirstChild(); n != null; n = n.getNextSibling()) {\n+            if (n instanceof Element) {\n+                Element e = (Element)n;\n+                String ens = (e.getNamespaceURI() == null) ? \"\" : e.getNamespaceURI();\n+                if (ns.equals(ens) && lp.equals(e.getLocalName())) {\n+                    return e;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Return child elements with specified name.\n+     * \n+     * @param parent\n+     * @param ns\n+     * @param localName\n+     * @return\n+     */\n+    public static List<Element> getChildrenWithName(Element parent, String ns, String localName) {\n+        List<Element> r = new ArrayList<Element>();\n+        for (Node n = parent.getFirstChild(); n != null; n = n.getNextSibling()) {\n+            if (n instanceof Element) {\n+                Element e = (Element)n;\n+                String eNs = (e.getNamespaceURI() == null) ? \"\" : e.getNamespaceURI();\n+                if (ns.equals(eNs) && localName.equals(e.getLocalName())) {\n+                    r.add(e);\n+                }\n+            }\n+        }\n+        return r;\n+    }\n+    \n+    /**\n+     * Returns all child elements with specified namespace.\n+     * \n+     * @param parent the element to search under\n+     * @param ns the namespace to find elements in\n+     * @return all child elements with specified namespace\n+     */\n+    public static List<Element> getChildrenWithNamespace(Element parent, String ns) {\n+        List<Element> r = new ArrayList<Element>();\n+        for (Node n = parent.getFirstChild(); n != null; n = n.getNextSibling()) {\n+            if (n instanceof Element) {\n+                Element e = (Element)n;\n+                String eNs = (e.getNamespaceURI() == null) ? \"\" : e.getNamespaceURI();\n+                if (ns.equals(eNs)) {\n+                    r.add(e);\n+                }\n+            }\n+        }\n+        return r;\n+    }\n+\n+    /**\n+     * Get the first child of the specified type.\n+     * \n+     * @param parent\n+     * @param type\n+     * @return\n+     */\n+    public static Node getChild(Node parent, int type) {\n+        Node n = parent.getFirstChild();\n+        while (n != null && type != n.getNodeType()) {\n+            n = n.getNextSibling();\n+        }\n+        if (n == null) {\n+            return null;\n+        }\n+        return n;\n+    }\n+\n+    /**\n+     * Get the next sibling with the same name and type\n+     */\n+    public static Node getNext(Node current) {\n+        String name = current.getNodeName();\n+        int type = current.getNodeType();\n+        return getNext(current, name, type);\n+    }\n+\n+    /**\n+     * Return the next sibling with a given name and type\n+     */\n+    public static Node getNext(Node current, String name, int type) {\n+        Node first = current.getNextSibling();\n+        if (first == null) {\n+            return null;\n+        }\n+\n+        for (Node node = first; node != null; node = node.getNextSibling()) {\n+\n+            if (type >= 0 && node.getNodeType() != type) {\n+                continue;\n+            }\n+\n+            if (name == null) {\n+                return node;\n+            }\n+            if (name.equals(node.getNodeName())) {\n+                return node;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public static class NullResolver implements EntityResolver {\n+        public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {\n+            return new InputSource(new StringReader(\"\"));\n+        }\n+    }\n+\n+    /**\n+     * Read XML as DOM.\n+     */\n+    public static Document readXml(InputStream is) throws SAXException, IOException,\n+        ParserConfigurationException {\n+        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+\n+        dbf.setValidating(false);\n+        dbf.setIgnoringComments(false);\n+        dbf.setIgnoringElementContentWhitespace(true);\n+        dbf.setNamespaceAware(true);\n+        // dbf.setCoalescing(true);\n+        // dbf.setExpandEntityReferences(true);\n+\n+        DocumentBuilder db = null;\n+        db = dbf.newDocumentBuilder();\n+        db.setEntityResolver(new NullResolver());\n+\n+        // db.setErrorHandler( new MyErrorHandler());\n+\n+        return db.parse(is);\n+    }\n+\n+    public static Document readXml(Reader is) throws SAXException, IOException, ParserConfigurationException {\n+        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+\n+        dbf.setValidating(false);\n+        dbf.setIgnoringComments(false);\n+        dbf.setIgnoringElementContentWhitespace(true);\n+        dbf.setNamespaceAware(true);\n+        // dbf.setCoalescing(true);\n+        // dbf.setExpandEntityReferences(true);\n+\n+        DocumentBuilder db = null;\n+        db = dbf.newDocumentBuilder();\n+        db.setEntityResolver(new NullResolver());\n+\n+        // db.setErrorHandler( new MyErrorHandler());\n+        InputSource ips = new InputSource(is);\n+        return db.parse(ips);\n+    }\n+\n+    public static Document readXml(StreamSource is) throws SAXException, IOException,\n+        ParserConfigurationException {\n+\n+        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+\n+        dbf.setValidating(false);\n+        dbf.setIgnoringComments(false);\n+        dbf.setIgnoringElementContentWhitespace(true);\n+        dbf.setNamespaceAware(true);\n+        // dbf.setCoalescing(true);\n+        // dbf.setExpandEntityReferences(true);\n+\n+        DocumentBuilder db = null;\n+        db = dbf.newDocumentBuilder();\n+        db.setEntityResolver(new NullResolver());\n+\n+        // db.setErrorHandler( new MyErrorHandler());\n+        InputSource is2 = new InputSource();\n+        is2.setSystemId(is.getSystemId());\n+        is2.setByteStream(is.getInputStream());\n+        is2.setCharacterStream(is.getReader());\n+\n+        return db.parse(is2);\n+    }\n+\n+    public static void writeXml(Node n, OutputStream os) throws TransformerException {\n+        TransformerFactory tf = TransformerFactory.newInstance();\n+        // identity\n+        Transformer t = tf.newTransformer();\n+        t.setOutputProperty(OutputKeys.INDENT, \"yes\");\n+        t.transform(new DOMSource(n), new StreamResult(os));\n+    }\n+\n+    public static DocumentBuilder createDocumentBuilder() {\n+        try {\n+            return getBuilder();\n+        } catch (ParserConfigurationException e) {\n+            throw new RuntimeException(\"Couldn't find a DOM parser.\", e);\n+        }\n+    }\n+\n+    public static Document createDocument() {\n+        try {\n+            return getBuilder().newDocument();\n+        } catch (ParserConfigurationException e) {\n+            throw new RuntimeException(\"Couldn't find a DOM parser.\", e);\n+        }\n+    }\n+\n+    public static String getPrefixRecursive(Element el, String ns) {\n+        String prefix = getPrefix(el, ns);\n+        if (prefix == null && el.getParentNode() instanceof Element) {\n+            prefix = getPrefixRecursive((Element)el.getParentNode(), ns);\n+        }\n+        return prefix;\n+    }\n+\n+    public static String getPrefix(Element el, String ns) {\n+        NamedNodeMap atts = el.getAttributes();\n+        for (int i = 0; i < atts.getLength(); i++) {\n+            Node node = atts.item(i);\n+            String name = node.getNodeName();\n+            if (ns.equals(node.getNodeValue())\n+                && (name != null && (XMLNAMESPACE.equals(name) || name.startsWith(XMLNAMESPACE + \":\")))) {\n+                return node.getLocalName();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get all prefixes defined, up to the root, for a namespace URI.\n+     * \n+     * @param element\n+     * @param namespaceUri\n+     * @param prefixes\n+     */\n+    public static void getPrefixesRecursive(Element element, String namespaceUri, List<String> prefixes) {\n+        getPrefixes(element, namespaceUri, prefixes);\n+        Node parent = element.getParentNode();\n+        if (parent instanceof Element) {\n+            getPrefixesRecursive((Element)parent, namespaceUri, prefixes);\n+        }\n+    }\n+\n+    /**\n+     * Get all prefixes defined on this element for the specified namespace.\n+     * \n+     * @param element\n+     * @param namespaceUri\n+     * @param prefixes\n+     */\n+    public static void getPrefixes(Element element, String namespaceUri, List<String> prefixes) {\n+        NamedNodeMap atts = element.getAttributes();\n+        for (int i = 0; i < atts.getLength(); i++) {\n+            Node node = atts.item(i);\n+            String name = node.getNodeName();\n+            if (namespaceUri.equals(node.getNodeValue())\n+                && (name != null && (XMLNAMESPACE.equals(name) || name.startsWith(XMLNAMESPACE + \":\")))) {\n+                prefixes.add(node.getPrefix());\n+            }\n+        }\n+    }\n+\n+    public static String createNamespace(Element el, String ns) {\n+        String p = \"ns1\";\n+        int i = 1;\n+        while (getPrefix(el, ns) != null) {\n+            p = \"ns\" + i;\n+            i++;\n+        }\n+        addNamespacePrefix(el, ns, p);\n+        return p;\n+    }\n+\n+    /**\n+     * Starting from a node, find the namespace declaration for a prefix. for a matching namespace\n+     * declaration.\n+     * \n+     * @param node search up from here to search for namespace definitions\n+     * @param searchPrefix the prefix we are searching for\n+     * @return the namespace if found.\n+     */\n+    public static String getNamespace(Node node, String searchPrefix) {\n+\n+        Element el;\n+        while (!(node instanceof Element)) {\n+            node = node.getParentNode();\n+        }\n+        el = (Element)node;\n+\n+        NamedNodeMap atts = el.getAttributes();\n+        for (int i = 0; i < atts.getLength(); i++) {\n+            Node currentAttribute = atts.item(i);\n+            String currentLocalName = currentAttribute.getLocalName();\n+            String currentPrefix = currentAttribute.getPrefix();\n+            if (searchPrefix.equals(currentLocalName) && XMLNAMESPACE.equals(currentPrefix)) {\n+                return currentAttribute.getNodeValue();\n+            } else if (StringUtils.isEmpty(searchPrefix) && XMLNAMESPACE.equals(currentLocalName)\n+                       && StringUtils.isEmpty(currentPrefix)) {\n+                return currentAttribute.getNodeValue();\n+            }\n+        }\n+\n+        Node parent = el.getParentNode();\n+        if (parent instanceof Element) {\n+            return getNamespace((Element)parent, searchPrefix);\n+        }\n+\n+        return null;\n+    }\n+\n+    public static List<Element> findAllElementsByTagNameNS(Element elem, String nameSpaceURI,\n+                                                           String localName) {\n+        List<Element> ret = new LinkedList<Element>();\n+        findAllElementsByTagNameNS(elem, nameSpaceURI, localName, ret);\n+        return ret;\n+    }\n+\n+    private static void findAllElementsByTagNameNS(Element el, String nameSpaceURI, String localName,\n+                                                   List<Element> elementList) {\n+\n+        if (localName.equals(el.getLocalName()) && nameSpaceURI.contains(el.getNamespaceURI())) {\n+            elementList.add(el);\n+        }\n+        Element elem = getFirstElement(el);\n+        while (elem != null) {\n+            findAllElementsByTagNameNS(elem, nameSpaceURI, localName, elementList);\n+            elem = getNextElement(elem);\n+        }\n+    }\n+\n+    public static List<Element> findAllElementsByTagName(Element elem, String tagName) {\n+        List<Element> ret = new LinkedList<Element>();\n+        findAllElementsByTagName(elem, tagName, ret);\n+        return ret;\n+    }\n+\n+    private static void findAllElementsByTagName(Element el, String tagName, List<Element> elementList) {\n+\n+        if (tagName.equals(el.getTagName())) {\n+            elementList.add(el);\n+        }\n+        Element elem = getFirstElement(el);\n+        while (elem != null) {\n+            findAllElementsByTagName(elem, tagName, elementList);\n+            elem = getNextElement(elem);\n+        }\n+    }\n+    public static boolean hasElementInNS(Element el, String namespace) {\n+\n+        if (namespace.equals(el.getNamespaceURI())) {\n+            return true;\n+        }\n+        Element elem = getFirstElement(el);\n+        while (elem != null) {\n+            if (hasElementInNS(elem, namespace)) {\n+                return true;\n+            }\n+            elem = getNextElement(elem);\n+        }\n+        return false;\n+    }\n+    /**\n+     * Set a namespace/prefix on an element if it is not set already. First off, it searches for the element\n+     * for the prefix associated with the specified namespace. If the prefix isn't null, then this is\n+     * returned. Otherwise, it creates a new attribute using the namespace/prefix passed as parameters.\n+     * \n+     * @param element\n+     * @param namespace\n+     * @param prefix\n+     * @return the prefix associated with the set namespace\n+     */\n+    public static String setNamespace(Element element, String namespace, String prefix) {\n+        String pre = getPrefixRecursive(element, namespace);\n+        if (pre != null) {\n+            return pre;\n+        }\n+        element.setAttributeNS(XMLConstants.XMLNS_ATTRIBUTE_NS_URI, \"xmlns:\" + prefix, namespace);\n+        return prefix;\n+    }\n+\n+    /**\n+     * Add a namespace prefix definition to an element.\n+     * \n+     * @param element\n+     * @param namespaceUri\n+     * @param prefix\n+     */\n+    public static void addNamespacePrefix(Element element, String namespaceUri, String prefix) {\n+        element.setAttributeNS(XMLConstants.XMLNS_ATTRIBUTE_NS_URI, \"xmlns:\" + prefix, namespaceUri);\n+    }\n+}"
        },
        {
            "sha": "374fc990da6aed061f5ff80a7fba902292e570c6",
            "filename": "fediz-core/src/main/java/org/apache/cxf/fediz/core/util/StringUtils.java",
            "status": "added",
            "additions": 228,
            "deletions": 0,
            "changes": 228,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2Futil%2FStringUtils.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2Futil%2FStringUtils.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2Futil%2FStringUtils.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,228 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.cxf.fediz.core.util;\n+\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Few simple utils. This is originally from the CXF project.\n+ */\n+public final class StringUtils {\n+\n+    private StringUtils() {\n+    }\n+\n+    public static String extract(String string, String startToken, String endToken) {\n+        int start = string.indexOf(startToken) + startToken.length();\n+        int end = string.lastIndexOf(endToken);\n+\n+        if (start == -1 || end == -1) {\n+            return null;\n+        }\n+\n+        return string.substring(start, end);\n+    }\n+\n+    public static String wrapper(String string, String startToken, String endToken) {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(startToken);\n+        sb.append(string);\n+        sb.append(endToken);\n+        return sb.toString();\n+    }\n+\n+    public static boolean isFileExist(String file) {\n+        return new File(file).exists() && new File(file).isFile();\n+    }\n+\n+    public static boolean isFileAbsolute(String file) {\n+        return isFileExist(file) && new File(file).isAbsolute();\n+    }\n+\n+    public static URL getURL(String spec) throws MalformedURLException {\n+        try {\n+            return new URL(spec);\n+        } catch (MalformedURLException e) {\n+            return new File(spec).toURI().toURL();\n+        }\n+    }\n+\n+    public static boolean isEmpty(String str) {\n+        if (str != null) {\n+            int len = str.length();\n+            for (int x = 0; x < len; ++x) {\n+                if (str.charAt(x) > ' ') {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+    \n+    public static boolean isEmpty(List<String> list) {\n+        if (list == null || list.size() == 0) {\n+            return true;\n+        }\n+        if (list.size() == 1 && isEmpty(list.get(0))) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public static boolean isEqualUri(String uri1, String uri2) {\n+\n+        if (uri1.substring(uri1.length() - 1).equals(\"/\") && !uri2.substring(uri2.length() - 1).equals(\"/\")) {\n+            return uri1.substring(0, uri1.length() - 1).equals(uri2);\n+        } else if (uri2.substring(uri2.length() - 1).equals(\"/\")\n+                   && !uri1.substring(uri1.length() - 1).equals(\"/\")) {\n+            return uri2.substring(0, uri2.length() - 1).equals(uri1);\n+        } else {\n+            return uri1.equals(uri2);\n+        }\n+    }\n+    \n+    public static String diff(String str1, String str2) {\n+        int index = str1.lastIndexOf(str2);\n+        if (index > -1) {\n+            return str1.substring(str2.length());\n+        }\n+        return str1;\n+    }\n+    \n+    public static List<String> getParts(String str, String sperator) {\n+        List<String> ret = new ArrayList<String>();\n+        List<String> parts = Arrays.asList(str.split(\"/\"));\n+        for (String part : parts) {\n+            if (!isEmpty(part)) {\n+                ret.add(part);\n+            }\n+        }\n+        return ret;\n+    }\n+    \n+    public static String getFirstNotEmpty(String str, String sperator) {\n+        List<String> parts = Arrays.asList(str.split(\"/\"));\n+        for (String part : parts) {\n+            if (!isEmpty(part)) {\n+                return part;\n+            }\n+        }\n+        return str;\n+    }\n+    \n+    public static String getFirstNotEmpty(List<String> list) {\n+        if (isEmpty(list)) {\n+            return null;\n+        }\n+        for (String item : list) {\n+            if (!isEmpty(item)) {\n+                return item;\n+            }       \n+        }\n+        return null;\n+    }\n+    \n+    public static List<String> getFound(String contents, String regex) {\n+        if (isEmpty(regex) || isEmpty(contents)) {\n+            return null;\n+        }\n+        List<String> results = new ArrayList<String>();\n+        Pattern pattern = Pattern.compile(regex, Pattern.UNICODE_CASE);\n+        Matcher matcher = pattern.matcher(contents);\n+        \n+        while (matcher.find()) {\n+            if (matcher.groupCount() > 0) {\n+                results.add(matcher.group(1));\n+            } else {\n+                results.add(matcher.group());\n+            }\n+        }\n+        return results;\n+    } \n+    \n+    public static String getFirstFound(String contents, String regex) {\n+        List<String> founds = getFound(contents, regex);\n+        if (isEmpty(founds)) {\n+            return null;\n+        }\n+        return founds.get(0);\n+    }\n+    \n+    public static String formatVersionNumber(String target) {\n+        List<String> found = StringUtils.getFound(target, \"\\\\d+\\\\.\\\\d+\\\\.?\\\\d*\");\n+        if (isEmpty(found)) {\n+            return target;\n+        }\n+        return getFirstNotEmpty(found);\n+    }\n+    \n+    public static String addDefaultPortIfMissing(String urlString) {\n+        return addDefaultPortIfMissing(urlString, \"80\");\n+    }\n+    \n+    public static String addDefaultPortIfMissing(String urlString, String defaultPort) {\n+        URL url = null;\n+        try {\n+            url = new URL(urlString);\n+        } catch (MalformedURLException e) {\n+            return urlString;\n+        }\n+        if (url.getPort() != -1) {\n+            return urlString;\n+        }\n+        String regex = \"http://([^/]+)\";        \n+        String found = StringUtils.getFirstFound(urlString, regex);\n+        String replacer = \"http://\" + found + \":\" + defaultPort;\n+        \n+        if (!StringUtils.isEmpty(found)) {\n+            urlString = urlString.replaceFirst(regex, replacer);\n+        }                \n+        return urlString;\n+    }\n+ \n+    /**\n+     * Return input string with first character in upper case.\n+     * @param name input string.\n+     * @return capitalized form.\n+     */\n+    public static String capitalize(String name) {\n+        if (name == null || name.length() == 0) {\n+            return name;\n+        }\n+        char chars[] = name.toCharArray();\n+        chars[0] = Character.toUpperCase(chars[0]);\n+        return new String(chars);\n+    }\n+    \n+    public static String uncapitalize(String str) {\n+        if (str == null || str.length() == 0) {\n+            return str;\n+        }\n+        return new StringBuilder(str.length())\n+            .append(Character.toLowerCase(str.charAt(0)))\n+            .append(str.substring(1))\n+            .toString();\n+    }    \n+}"
        },
        {
            "sha": "c18eb3bd1d29fbe2bb432c36acaa6a90975b2a3a",
            "filename": "fediz-core/src/main/java/org/apache/cxf/fediz/core/util/XMLUtils.java",
            "status": "added",
            "additions": 482,
            "deletions": 0,
            "changes": 482,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2Futil%2FXMLUtils.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2Futil%2FXMLUtils.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2Futil%2FXMLUtils.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,482 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.cxf.fediz.core.util;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.util.Collections;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.StringTokenizer;\n+import java.util.WeakHashMap;\n+import javax.xml.namespace.QName;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.DOMImplementation;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.Text;\n+import org.w3c.dom.bootstrap.DOMImplementationRegistry;\n+import org.w3c.dom.ls.DOMImplementationLS;\n+import org.w3c.dom.ls.LSOutput;\n+import org.w3c.dom.ls.LSSerializer;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+/**\n+ * Few simple utils. This is originally from the CXF project.\n+ */\n+@SuppressWarnings(\"PMD\")\n+public final class XMLUtils {\n+\n+    //private static final Logger LOG = LogUtils.getL7dLogger(XMLUtils.class);\n+    \n+    private static final Map<ClassLoader, DocumentBuilderFactory> DOCUMENT_BUILDER_FACTORIES\n+        = Collections.synchronizedMap(new WeakHashMap<ClassLoader, DocumentBuilderFactory>());\n+    \n+    private static final Map<ClassLoader, TransformerFactory> TRANSFORMER_FACTORIES\n+        = Collections.synchronizedMap(new WeakHashMap<ClassLoader, TransformerFactory>());\n+\n+    private XMLUtils() {\n+    }\n+\n+    private static TransformerFactory getTransformerFactory() {\n+        ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        if (loader == null) {\n+            loader = XMLUtils.class.getClassLoader();\n+        }\n+        if (loader == null) {\n+            return TransformerFactory.newInstance();\n+        }\n+        TransformerFactory factory = TRANSFORMER_FACTORIES.get(loader);\n+        if (factory == null) {\n+            factory = TransformerFactory.newInstance();\n+            TRANSFORMER_FACTORIES.put(loader, factory);\n+        }\n+        return factory;\n+    }\n+    private static DocumentBuilderFactory getDocumentBuilderFactory() {\n+        ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        if (loader == null) {\n+            loader = XMLUtils.class.getClassLoader();\n+        }\n+        if (loader == null) {\n+            return DocumentBuilderFactory.newInstance();\n+        }\n+        DocumentBuilderFactory factory = DOCUMENT_BUILDER_FACTORIES.get(loader);\n+        if (factory == null) {\n+            factory = DocumentBuilderFactory.newInstance();\n+            factory.setNamespaceAware(true);\n+            DOCUMENT_BUILDER_FACTORIES.put(loader, factory);\n+        }\n+        return factory;\n+    }\n+    public static Transformer newTransformer() throws TransformerConfigurationException {\n+        return getTransformerFactory().newTransformer();\n+    }\n+    public static Transformer newTransformer(int indent) throws TransformerConfigurationException {\n+        if (indent > 0) {\n+            TransformerFactory f = TransformerFactory.newInstance();\n+            try {\n+                //sun way of setting indent\n+                f.setAttribute(\"indent-number\", Integer.toString(indent));\n+            } catch (Throwable t) {\n+                //ignore\n+            }\n+            return f.newTransformer();\n+        }\n+        return getTransformerFactory().newTransformer();\n+    }\n+\n+    public static DocumentBuilder getParser() throws ParserConfigurationException {\n+        return getDocumentBuilderFactory().newDocumentBuilder();\n+    }\n+\n+    public static Document parse(InputSource is) throws ParserConfigurationException, SAXException,\n+        IOException {\n+        return getParser().parse(is);\n+    }\n+\n+    public static Document parse(File is) throws ParserConfigurationException, SAXException,\n+        IOException {\n+        return getParser().parse(is);\n+    }\n+\n+    public static Document parse(InputStream in) throws ParserConfigurationException, SAXException,\n+        IOException {\n+        return getParser().parse(in);\n+    }\n+\n+    public static Document parse(String in) throws ParserConfigurationException, SAXException, IOException {\n+        return parse(in.getBytes());\n+    }\n+\n+    public static Document parse(byte[] in) throws ParserConfigurationException, SAXException, IOException {\n+        if (in == null) {\n+            return null;\n+        }\n+        return getParser().parse(new ByteArrayInputStream(in));\n+    }\n+\n+    public static Document newDocument() throws ParserConfigurationException {\n+        return getParser().newDocument();\n+    }\n+\n+    public static void writeTo(Node node, OutputStream os) {\n+        writeTo(new DOMSource(node), os);\n+    }\n+    public static void writeTo(Node node, OutputStream os, int indent) {\n+        writeTo(new DOMSource(node), os, indent);\n+    }\n+    public static void writeTo(Source src, OutputStream os) {\n+        writeTo(src, os, -1);\n+    }\n+    public static void writeTo(Node node, Writer os) {\n+        writeTo(new DOMSource(node), os);\n+    }\n+    public static void writeTo(Node node, Writer os, int indent) {\n+        writeTo(new DOMSource(node), os, indent);\n+    }\n+    public static void writeTo(Source src, Writer os) {\n+        writeTo(src, os, -1);\n+    }\n+    public static void writeTo(Source src, OutputStream os, int indent) {\n+        String enc = null;\n+        if (src instanceof DOMSource\n+            && ((DOMSource)src).getNode() instanceof Document) {\n+            try {\n+                enc = ((Document)((DOMSource)src).getNode()).getXmlEncoding();\n+            } catch (Exception ex) {\n+                //ignore - not DOM level 3\n+            }\n+        }\n+        writeTo(src, os, indent, enc, \"no\");\n+    }\n+    public static void writeTo(Source src, Writer os, int indent) {\n+        String enc = null;\n+        if (src instanceof DOMSource\n+            && ((DOMSource)src).getNode() instanceof Document) {\n+            try {\n+                enc = ((Document)((DOMSource)src).getNode()).getXmlEncoding();\n+            } catch (Exception ex) {\n+                //ignore - not DOM level 3\n+            }\n+        }\n+        writeTo(src, os, indent, enc, \"no\");\n+    }\n+    public static void writeTo(Source src,\n+                               OutputStream os,\n+                               int indent,\n+                               String charset,\n+                               String omitXmlDecl) {\n+        Transformer it;\n+        try {\n+            if (StringUtils.isEmpty(charset)) {\n+                charset = \"utf-8\"; \n+            }\n+\n+            it = newTransformer(indent);\n+            it.setOutputProperty(OutputKeys.METHOD, \"xml\");\n+            if (indent > -1) {\n+                it.setOutputProperty(OutputKeys.INDENT, \"yes\");\n+                it.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\",\n+                                     Integer.toString(indent));\n+            }\n+            it.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, omitXmlDecl);\n+            it.setOutputProperty(OutputKeys.ENCODING, charset);\n+            it.transform(src, new StreamResult(os));\n+        } catch (TransformerException e) {\n+            throw new RuntimeException(\"Failed to configure TRaX\", e);\n+        }\n+    }\n+    public static void writeTo(Source src,\n+                               Writer os,\n+                               int indent,\n+                               String charset,\n+                               String omitXmlDecl) {\n+        Transformer it;\n+        try {\n+            if (StringUtils.isEmpty(charset)) {\n+                charset = \"utf-8\"; \n+            }\n+\n+            it = newTransformer(indent);\n+            it.setOutputProperty(OutputKeys.METHOD, \"xml\");\n+            if (indent > -1) {\n+                it.setOutputProperty(OutputKeys.INDENT, \"yes\");\n+                it.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\",\n+                                     Integer.toString(indent));\n+            }\n+            it.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, omitXmlDecl);\n+            it.setOutputProperty(OutputKeys.ENCODING, charset);\n+            it.transform(src, new StreamResult(os));\n+        } catch (TransformerException e) {\n+            throw new RuntimeException(\"Failed to configure TRaX\", e);\n+        }\n+    }\n+    public static String toString(Source source) throws TransformerException, IOException {\n+        return toString(source, null);\n+    }\n+\n+    public static String toString(Source source, Properties props) throws TransformerException, IOException {\n+        StringWriter bos = new StringWriter();\n+        StreamResult sr = new StreamResult(bos);\n+        Transformer trans = newTransformer();\n+        if (props == null) {\n+            props = new Properties();\n+            props.put(OutputKeys.OMIT_XML_DECLARATION, \"yes\");\n+        }\n+        trans.setOutputProperties(props);\n+        trans.transform(source, sr);\n+        bos.close();\n+        return bos.toString();\n+    }\n+\n+    public static String toString(Node node, int indent) {\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        writeTo(node, out, indent);\n+        return out.toString();\n+    }\n+    public static String toString(Node node) {\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        writeTo(node, out);\n+        return out.toString();\n+    }\n+\n+    public static void printDOM(Node node) {\n+        printDOM(\"\", node);\n+    }\n+\n+    public static void printDOM(String words, Node node) {\n+        System.out.println(words);\n+        System.out.println(toString(node));\n+    }\n+\n+    public static Attr getAttribute(Element el, String attrName) {\n+        return el.getAttributeNode(attrName);\n+    }\n+\n+    public static void replaceAttribute(Element element, String attr, String value) {\n+        if (element.hasAttribute(attr)) {\n+            element.removeAttribute(attr);\n+        }\n+        element.setAttribute(attr, value);\n+    }\n+\n+    public static boolean hasAttribute(Element element, String value) {\n+        NamedNodeMap attributes = element.getAttributes();\n+        for (int i = 0; i < attributes.getLength(); i++) {\n+            Node node = attributes.item(i);\n+            if (value.equals(node.getNodeValue())) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public static void printAttributes(Element element) {\n+        NamedNodeMap attributes = element.getAttributes();\n+        for (int i = 0; i < attributes.getLength(); i++) {\n+            Node node = attributes.item(i);\n+            System.err.println(\"## prefix=\" + node.getPrefix() + \" localname:\" + node.getLocalName()\n+                               + \" value=\" + node.getNodeValue());\n+        }\n+    }\n+\n+    public static QName getNamespace(Map<String, String> namespaces, String str, String defaultNamespace) {\n+        String prefix = null;\n+        String localName = null;\n+\n+        StringTokenizer tokenizer = new StringTokenizer(str, \":\");\n+        if (tokenizer.countTokens() == 2) {\n+            prefix = tokenizer.nextToken();\n+            localName = tokenizer.nextToken();\n+        } else if (tokenizer.countTokens() == 1) {\n+            localName = tokenizer.nextToken();\n+        }\n+\n+        String namespceURI = defaultNamespace;\n+        if (prefix != null) {\n+            namespceURI = (String)namespaces.get(prefix);\n+        }\n+        return new QName(namespceURI, localName);\n+    }\n+\n+    public static void generateXMLFile(Element element, Writer writer) {\n+        try {\n+            Transformer it = newTransformer();\n+\n+            it.setOutputProperty(OutputKeys.METHOD, \"xml\");\n+            it.setOutputProperty(OutputKeys.INDENT, \"yes\");\n+            it.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"2\");\n+            it.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");\n+            it.transform(new DOMSource(element), new StreamResult(writer));\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public static Element createElementNS(Node node, QName name) {\n+        return createElementNS(node.getOwnerDocument(), name.getNamespaceURI(), name.getLocalPart());\n+    }\n+\n+    public static Element createElementNS(Document root, QName name) {\n+        return createElementNS(root, name.getNamespaceURI(), name.getLocalPart());\n+    }\n+\n+    public static Element createElementNS(Document root, String namespaceURI, String qualifiedName) {\n+        return root.createElementNS(namespaceURI, qualifiedName);\n+    }\n+\n+    public static Text createTextNode(Document root, String data) {\n+        return root.createTextNode(data);\n+    }\n+\n+    public static Text createTextNode(Node node, String data) {\n+        return createTextNode(node.getOwnerDocument(), data);\n+    }\n+\n+    public static void removeContents(Node parent) {     \n+        Node node = parent.getFirstChild();\n+        while (node != null) {\n+            parent.removeChild(node);\n+            node = node.getNextSibling();\n+        }\n+    }\n+\n+    public static InputStream getInputStream(Document doc) throws Exception {\n+        DOMImplementationLS impl = null;\n+        DOMImplementation docImpl = doc.getImplementation();\n+        // Try to get the DOMImplementation from doc first before\n+        // defaulting to the sun implementation.\n+        if (docImpl != null && docImpl.hasFeature(\"LS\", \"3.0\")) {\n+            impl = (DOMImplementationLS)docImpl.getFeature(\"LS\", \"3.0\");\n+        } else {\n+            DOMImplementationRegistry registry = DOMImplementationRegistry.newInstance();\n+            impl = (DOMImplementationLS)registry.getDOMImplementation(\"LS\");\n+            if (impl == null) {\n+                System.setProperty(DOMImplementationRegistry.PROPERTY,\n+                                   \"com.sun.org.apache.xerces.internal.dom.DOMImplementationSourceImpl\");\n+                registry = DOMImplementationRegistry.newInstance();\n+                impl = (DOMImplementationLS)registry.getDOMImplementation(\"LS\");\n+            }\n+        }\n+        LSOutput output = impl.createLSOutput();\n+        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+        output.setByteStream(byteArrayOutputStream);\n+        LSSerializer writer = impl.createLSSerializer();\n+        writer.write(doc, output);\n+        byte[] buf = byteArrayOutputStream.toByteArray();\n+        return new ByteArrayInputStream(buf);\n+    }\n+\n+    public static Element fetchElementByNameAttribute(Element parent, String targetName, String nameValue) {\n+        \n+        List<Element> elemList = DOMUtils.findAllElementsByTagName(parent, targetName);\n+        for (Element elem : elemList) {\n+            if (elem.getAttribute(\"name\").equals(nameValue)) {\n+                return elem;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public static QName getQName(String value, Node node) {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        int index = value.indexOf(\":\");\n+\n+        if (index == -1) {\n+            return new QName(value);\n+        }\n+\n+        String prefix = value.substring(0, index);\n+        String localName = value.substring(index + 1);\n+        String ns = node.lookupNamespaceURI(prefix);\n+\n+        if (ns == null || localName == null) {\n+            throw new RuntimeException(\"Invalid QName in mapping: \" + value);\n+        }\n+\n+        return new QName(ns, localName, prefix);\n+    }\n+\n+    public static Node  fromSource(Source src) throws Exception {\n+\n+        Transformer trans = TransformerFactory.newInstance().newTransformer();\n+        DOMResult res = new DOMResult();\n+        trans.transform(src, res);\n+        return res.getNode();\n+    }\n+    \n+    public static QName convertStringToQName(String expandedQName) {\n+        return convertStringToQName(expandedQName, \"\");\n+    }\n+    \n+    public static QName convertStringToQName(String expandedQName, String prefix) {\n+        int ind1 = expandedQName.indexOf('{');\n+        if (ind1 != 0) {\n+            return new QName(expandedQName);\n+        }\n+        \n+        int ind2 = expandedQName.indexOf('}');\n+        if (ind2 <= ind1 + 1 || ind2 >= expandedQName.length() - 1) {\n+            return null;\n+        }\n+        String ns = expandedQName.substring(ind1 + 1, ind2);\n+        String localName = expandedQName.substring(ind2 + 1);\n+        return new QName(ns, localName, prefix);\n+    }\n+    \n+    public static Set<QName> convertStringsToQNames(List<String> expandedQNames) {\n+        Set<QName> dropElements = Collections.emptySet();\n+        if (expandedQNames != null) {\n+            dropElements = new LinkedHashSet<QName>(expandedQNames.size());\n+            for (String val : expandedQNames) {\n+                dropElements.add(XMLUtils.convertStringToQName(val));\n+            }\n+        }\n+        return dropElements;\n+    }\n+    \n+}"
        },
        {
            "sha": "8674e50830b3dfef57092eaed6abdab61e0c9807",
            "filename": "fediz-core/src/test/java/org/apache/cxf/fediz/core/FederationProcessorTest.java",
            "status": "added",
            "additions": 152,
            "deletions": 0,
            "changes": 152,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FFederationProcessorTest.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FFederationProcessorTest.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fcore%2FFederationProcessorTest.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,152 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.cxf.fediz.core;\n+\n+import java.io.BufferedReader;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+\n+import org.apache.cxf.fediz.core.FederationConfiguration;\n+import org.apache.cxf.fediz.core.FederationConstants;\n+import org.apache.cxf.fediz.core.FederationProcessor;\n+import org.apache.cxf.fediz.core.FederationProcessorImpl;\n+import org.apache.cxf.fediz.core.FederationRequest;\n+import org.apache.cxf.fediz.core.FederationResponse;\n+import org.junit.BeforeClass;\n+\n+import junit.framework.Assert;\n+\n+import static org.apache.cxf.fediz.core.FederationConstants.DEFAULT_ROLE_URI;\n+\n+public class FederationProcessorTest {\n+\n+\tprivate static final String TEST_OTHER_ISSUER = \"ZFS IDP DEV\";\n+\tprivate static final String TEST_USER = \"alice\";\n+\tprivate static final String TEST_TRUSTSTORE_FILE = \"stsstore.jks\";\n+\tprivate static final String TEST_TRUSTSTORE_PASSWORD = \"stsspass\";\n+\tprivate static final String TEST_RSTR_ISSUER = \"DoubleItSTSIssuer\";\n+\tprivate static final String TEST_CERT_CONSTRAINT = \".*CN=www.sts.com.*\";\n+\t\n+\t\n+\tprivate static String sRSTR = null;\n+\n+    @BeforeClass\n+\tpublic static void readWResult() {\n+\t\tInputStream is = null;\n+\t\ttry {\n+\t\t\tis = FederationProcessorTest.class.getResourceAsStream(\"/RSTR.xml\");\n+\t\t\tif (is == null) {\n+\t\t\t\tthrow new FileNotFoundException(\"Failed to get RSTR.xml\");\n+\t\t\t}\n+\t\t\tBufferedReader bufferedReader = new BufferedReader(new InputStreamReader(is));\n+\t\t\tStringBuilder stringBuilder = new StringBuilder();\n+\t\t\tString line = null;\n+\t\t\twhile ((line = bufferedReader.readLine()) != null) {\n+\t\t\t\tstringBuilder.append(line + \"\\n\");\n+\t\t\t}\n+\t\t\tbufferedReader.close();\n+\t\t\tsRSTR = stringBuilder.toString();\n+\t\t} catch (Exception e) {\n+\t\t\te.printStackTrace();\n+\t\t} finally {\n+\t\t\tif (is != null) {\n+\t\t\t\ttry {\n+\t\t\t\t\tis.close();\n+\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tAssert.assertNotNull(\"RSTR resource null\", sRSTR);\n+\t\t\n+\t}\n+\t\n+\t@org.junit.Test\n+\tpublic void validateSAML2Token() {\n+\t\t\n+\t\tFederationRequest wfReq = new FederationRequest();\n+\t\twfReq.setWa(FederationConstants.ACTION_SIGNIN);\n+\t\twfReq.setWresult(sRSTR);\n+\t\t\n+\t\tFederationConfiguration config = new FederationConfiguration();\n+\t\tconfig.setTrustedIssuer(TEST_CERT_CONSTRAINT);\n+\t\tconfig.setRoleDelimiter(\";\");\n+\t\tconfig.setRoleURI(FederationConstants.DEFAULT_ROLE_URI);\n+\t\tconfig.setTrustStoreFile(TEST_TRUSTSTORE_FILE);\n+\t\tconfig.setTrustStorePassword(TEST_TRUSTSTORE_PASSWORD);\n+\t\tconfig.setDetectReplayedTokens(false);\n+\t\t\n+\t\tFederationProcessor wfProc = new FederationProcessorImpl();\n+\t\tFederationResponse wfRes = wfProc.processRequest(wfReq, config);\n+\t\tAssert.assertEquals(\"Principal name wrong\", TEST_USER, wfRes.getUsername());\n+\t\tAssert.assertEquals(\"Issuer wrong\", TEST_RSTR_ISSUER, wfRes.getIssuer());\n+\t}\n+\t\n+\t\n+\t@org.junit.Test\n+\tpublic void validateSAML2TokenWithWrongIssuer() {\n+\t\t\n+\t\tFederationRequest wfReq = new FederationRequest();\n+\t\twfReq.setWa(FederationConstants.ACTION_SIGNIN);\n+\t\twfReq.setWresult(sRSTR);\n+\t\t\n+\t\tFederationConfiguration config = new FederationConfiguration();\n+\t\tconfig.setTrustedIssuer(TEST_OTHER_ISSUER);\n+\t\tconfig.setRoleDelimiter(\";\");\n+\t\tconfig.setRoleURI(FederationConstants.DEFAULT_ROLE_URI);\n+\t\tconfig.setTrustStoreFile(TEST_TRUSTSTORE_FILE);\n+\t\tconfig.setTrustStorePassword(TEST_TRUSTSTORE_PASSWORD);\n+\t\tconfig.setDetectReplayedTokens(false);\n+\t\t\n+\t\tFederationProcessor wfProc = new FederationProcessorImpl();\n+\t\ttry {\n+\t\t\twfProc.processRequest(wfReq, config);\n+\t\t\tAssert.fail(\"Processing must fail because of wrong issuer configured\");\n+\t\t}\n+\t\tcatch (RuntimeException ex) {\n+\t\t\tAssert.assertEquals(\"Exception expected\", \"Issuer '\" + TEST_RSTR_ISSUER + \"' not trusted\", ex.getMessage());\n+\t\t}\n+\t}\n+\t\n+\t@org.junit.Test\n+\tpublic void validateSAML2TokenForRoles() {\n+\t\t\n+\t\tFederationRequest wfReq = new FederationRequest();\n+\t\twfReq.setWa(FederationConstants.ACTION_SIGNIN);\n+\t\twfReq.setWresult(sRSTR);\n+\t\t\n+\t\tFederationConfiguration config = new FederationConfiguration();\n+\t\tconfig.setTrustedIssuer(TEST_CERT_CONSTRAINT);\n+\t\tconfig.setRoleDelimiter(\";\");\n+\t\tconfig.setRoleURI(DEFAULT_ROLE_URI);\n+\t\tconfig.setTrustStoreFile(TEST_TRUSTSTORE_FILE);\n+\t\tconfig.setTrustStorePassword(TEST_TRUSTSTORE_PASSWORD);\n+\t\tconfig.setDetectReplayedTokens(false);\n+\t\t\n+\t\tFederationProcessor wfProc = new FederationProcessorImpl();\n+\t\tFederationResponse wfRes = wfProc.processRequest(wfReq, config);\n+\t\tAssert.assertEquals(\"Principal name wrong\", TEST_USER, wfRes.getUsername());\n+\t\tAssert.assertEquals(\"Issuer wrong\", TEST_RSTR_ISSUER, wfRes.getIssuer());\n+\t\tAssert.assertEquals(\"One role must be found\", 1, wfRes.getRoles().size());\n+\t}\n+\t\n+ \n+\n+}"
        },
        {
            "sha": "1390f3ab044f4be6c444c39cd2ede6e4ce0d38e6",
            "filename": "fediz-core/src/test/resources/RSTR.formatted.xml",
            "status": "added",
            "additions": 107,
            "deletions": 0,
            "changes": 107,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Ftest%2Fresources%2FRSTR.formatted.xml",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Ftest%2Fresources%2FRSTR.formatted.xml",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-core%2Fsrc%2Ftest%2Fresources%2FRSTR.formatted.xml?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,107 @@\n+<!-- DO NOT REFORMAT THIS XML DOCUMENT AS IT BREAKS THE SAML SIGNTATURE VALIDATION -->\n+\n+<RequestSecurityTokenResponseCollection\n+\txmlns=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\"\n+\txmlns:ns2=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\"\n+\txmlns:ns3=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n+\txmlns:ns4=\"http://www.w3.org/2005/08/addressing\" xmlns:ns5=\"http://docs.oasis-open.org/ws-sx/ws-trust/200802\">\n+\t<RequestSecurityTokenResponse>\n+\t\t<TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0\n+\t\t</TokenType>\n+\t\t<RequestedSecurityToken>\n+\t\t\t<saml2:Assertion xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\"\n+\t\t\t\txmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\t\t\t\tID=\"_93FDCC53AC1D5AE3EB131849544559910\" IssueInstant=\"2011-10-13T08:44:05.599Z\"\n+\t\t\t\tVersion=\"2.0\" xsi:type=\"saml2:AssertionType\">\n+\t\t\t\t<saml2:Issuer>DoubleItSTSIssuer</saml2:Issuer>\n+\t\t\t\t<ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n+\t\t\t\t\t<ds:SignedInfo>\n+\t\t\t\t\t\t<ds:CanonicalizationMethod\n+\t\t\t\t\t\t\tAlgorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\" />\n+\t\t\t\t\t\t<ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" />\n+\t\t\t\t\t\t<ds:Reference URI=\"#_93FDCC53AC1D5AE3EB131849544559910\">\n+\t\t\t\t\t\t\t<ds:Transforms>\n+\t\t\t\t\t\t\t\t<ds:Transform\n+\t\t\t\t\t\t\t\t\tAlgorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\" />\n+\t\t\t\t\t\t\t\t<ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\">\n+\t\t\t\t\t\t\t\t\t<ec:InclusiveNamespaces\n+\t\t\t\t\t\t\t\t\t\txmlns:ec=\"http://www.w3.org/2001/10/xml-exc-c14n#\" PrefixList=\"xs\" />\n+\t\t\t\t\t\t\t\t</ds:Transform>\n+\t\t\t\t\t\t\t</ds:Transforms>\n+\t\t\t\t\t\t\t<ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" />\n+\t\t\t\t\t\t\t<ds:DigestValue>3BwoTotMyMTFt40DCmi0ayEdnko=</ds:DigestValue>\n+\t\t\t\t\t\t</ds:Reference>\n+\t\t\t\t\t</ds:SignedInfo>\n+\t\t\t\t\t<ds:SignatureValue>bXSIwaG+e2hDdpdDkciR3pjLbbpCLD/XwS+CezMygN/w2g1trgyaIlfkUvyAXVyk5ULJH9s+fFuecPgRm2n2JePm8Up2oZ0+vAJ6fvwQxbhhpuGz8j+OkVr11rGMjpVo1tFSVQNlq183blHVjjDQhGBl7TvoKAZsSGnhzoHclEY=\n+\t\t\t\t\t</ds:SignatureValue>\n+\t\t\t\t\t<ds:KeyInfo>\n+\t\t\t\t\t\t<ds:X509Data>\n+\t\t\t\t\t\t\t<ds:X509Certificate>MIID5jCCA0+gAwIBAgIJAPahVdM2UPibMA0GCSqGSIb3DQEBBQUAMIGpMQswCQYDVQQGEwJVUzERMA8GA1UECBMITWFyeWxhbmQxEjAQBgNVBAcTCUJhbHRpbW9yZTEpMCcGA1UEChMgU2FtcGxlIFNUUyAtLSBOT1QgRk9SIFBST0RVQ1RJT04xFjAUBgNVBAsTDUlUIERlcGFydG1lbnQxFDASBgNVBAMTC3d3dy5zdHMuY29tMRowGAYJKoZIhvcNAQkBFgtzdHNAc3RzLmNvbTAeFw0xMTAyMDkxODM4MTNaFw0yMTAyMDYxODM4MTNaMIGpMQswCQYDVQQGEwJVUzERMA8GA1UECBMITWFyeWxhbmQxEjAQBgNVBAcTCUJhbHRpbW9yZTEpMCcGA1UEChMgU2FtcGxlIFNUUyAtLSBOT1QgRk9SIFBST0RVQ1RJT04xFjAUBgNVBAsTDUlUIERlcGFydG1lbnQxFDASBgNVBAMTC3d3dy5zdHMuY29tMRowGAYJKoZIhvcNAQkBFgtzdHNAc3RzLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAo+f8gs4WcteLdSPWPm8+ciyEz7zVmA7kcCGFQQvlO0smxRViWJ1x+yniT5Uu86UrAQjxRJyANBomQrirfE7KPrnCm6iVOsGDEntuIZAf7DFPnrv5p++jAZQuR3vm4ZHXFOFTXmI+/FD5AqLfNi17xiTxZCDYyDdD39CNFTrB2PkCAwEAAaOCARIwggEOMB0GA1UdDgQWBBRa0A38holQIbJMFW7m5ZSw+iVDHDCB3gYDVR0jBIHWMIHTgBRa0A38holQIbJMFW7m5ZSw+iVDHKGBr6SBrDCBqTELMAkGA1UEBhMCVVMxETAPBgNVBAgTCE1hcnlsYW5kMRIwEAYDVQQHEwlCYWx0aW1vcmUxKTAnBgNVBAoTIFNhbXBsZSBTVFMgLS0gTk9UIEZPUiBQUk9EVUNUSU9OMRYwFAYDVQQLEw1JVCBEZXBhcnRtZW50MRQwEgYDVQQDEwt3d3cuc3RzLmNvbTEaMBgGCSqGSIb3DQEJARYLc3RzQHN0cy5jb22CCQD2oVXTNlD4mzAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBQUAA4GBACp9yK1I9r++pyFT0yrcaV1m1Sub6urJH+GxQLBaTnTsaPLuzq2gIsJHpwk5XggB+IDe69iKKeb74Vt8aOe5usIWVASgi9ckqCwdfTqYu6KG9BlezqHZdExnIG2v/cD/3NkKr7O/a7DjlbE6FZ4G1nrOfVJkjmeAa6txtYm1Dm/f\n+\t\t\t\t\t\t\t</ds:X509Certificate>\n+\t\t\t\t\t\t</ds:X509Data>\n+\t\t\t\t\t</ds:KeyInfo>\n+\t\t\t\t</ds:Signature>\n+\t\t\t\t<saml2:Subject>\n+\t\t\t\t\t<saml2:NameID\n+\t\t\t\t\t\tFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\"\n+\t\t\t\t\t\tNameQualifier=\"http://cxf.apache.org/sts\">alice</saml2:NameID>\n+\t\t\t\t\t<saml2:SubjectConfirmation Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\" />\n+\t\t\t\t</saml2:Subject>\n+\t\t\t\t<saml2:Conditions NotBefore=\"2011-10-13T08:44:05.600Z\"\n+\t\t\t\t\tNotOnOrAfter=\"2011-10-13T08:49:05.600Z\">\n+\t\t\t\t\t<saml2:AudienceRestriction>\n+\t\t\t\t\t\t<saml2:Audience>http://localhost:8080/wsfedhelloworld/\n+\t\t\t\t\t\t</saml2:Audience>\n+\t\t\t\t\t</saml2:AudienceRestriction>\n+\t\t\t\t</saml2:Conditions>\n+\t\t\t\t<saml2:AttributeStatement>\n+\t\t\t\t\t<saml2:Attribute Name=\"givenname\"\n+\t\t\t\t\t\tNameFormat=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims\">\n+\t\t\t\t\t\t<saml2:AttributeValue xsi:type=\"xs:string\">Alice\n+\t\t\t\t\t\t</saml2:AttributeValue>\n+\t\t\t\t\t</saml2:Attribute>\n+\t\t\t\t\t<saml2:Attribute Name=\"surname\"\n+\t\t\t\t\t\tNameFormat=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims\">\n+\t\t\t\t\t\t<saml2:AttributeValue xsi:type=\"xs:string\">Smith\n+\t\t\t\t\t\t</saml2:AttributeValue>\n+\t\t\t\t\t</saml2:Attribute>\n+\t\t\t\t\t<saml2:Attribute Name=\"emailaddress\"\n+\t\t\t\t\t\tNameFormat=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims\">\n+\t\t\t\t\t\t<saml2:AttributeValue xsi:type=\"xs:string\">alice@mycompany.org\n+\t\t\t\t\t\t</saml2:AttributeValue>\n+\t\t\t\t\t</saml2:Attribute>\n+\t\t\t\t\t<saml2:Attribute Name=\"role\"\n+\t\t\t\t\t\tNameFormat=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims\">\n+\t\t\t\t\t\t<saml2:AttributeValue xsi:type=\"xs:string\">User\n+\t\t\t\t\t\t</saml2:AttributeValue>\n+\t\t\t\t\t</saml2:Attribute>\n+\t\t\t\t</saml2:AttributeStatement>\n+\t\t\t</saml2:Assertion>\n+\t\t</RequestedSecurityToken>\n+\t\t<RequestedAttachedReference>\n+\t\t\t<ns3:SecurityTokenReference\n+\t\t\t\txmlns:wsse11=\"http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd\"\n+\t\t\t\twsse11:TokenType=\"http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0\">\n+\t\t\t\t<ns3:KeyIdentifier\n+\t\t\t\t\tValueType=\"http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLID\">#_93FDCC53AC1D5AE3EB131849544559910</ns3:KeyIdentifier>\n+\t\t\t</ns3:SecurityTokenReference>\n+\t\t</RequestedAttachedReference>\n+\t\t<RequestedUnattachedReference>\n+\t\t\t<ns3:SecurityTokenReference\n+\t\t\t\txmlns:wsse11=\"http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd\"\n+\t\t\t\twsse11:TokenType=\"http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0\">\n+\t\t\t\t<ns3:KeyIdentifier\n+\t\t\t\t\tValueType=\"http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLID\">_93FDCC53AC1D5AE3EB131849544559910</ns3:KeyIdentifier>\n+\t\t\t</ns3:SecurityTokenReference>\n+\t\t</RequestedUnattachedReference>\n+\t\t<wsp:AppliesTo xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\">\n+\t\t\t<wsa:EndpointReference xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\n+\t\t\t\t<wsa:Address>http://localhost:8080/wsfedhelloworld/</wsa:Address>\n+\t\t\t</wsa:EndpointReference>\n+\t\t</wsp:AppliesTo>\n+\t\t<Lifetime>\n+\t\t\t<ns2:Created>2011-10-13T08:44:05.608Z</ns2:Created>\n+\t\t\t<ns2:Expires>2011-10-13T08:49:05.608Z</ns2:Expires>\n+\t\t</Lifetime>\n+\t</RequestSecurityTokenResponse>\n+</RequestSecurityTokenResponseCollection>\n\\ No newline at end of file"
        },
        {
            "sha": "344d99288bf55bbd910c490c0235df688feb237d",
            "filename": "fediz-core/src/test/resources/RSTR.xml",
            "status": "added",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Ftest%2Fresources%2FRSTR.xml",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Ftest%2Fresources%2FRSTR.xml",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-core%2Fsrc%2Ftest%2Fresources%2FRSTR.xml?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,3 @@\n+<!--  DO NOT REFORMAT THIS XML DOCUMENT AS IT BREAKS THE SAML SIGNTATURE VALIDATION -->\n+\n+<RequestSecurityTokenResponseCollection xmlns=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\" xmlns:ns2=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" xmlns:ns3=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:ns4=\"http://www.w3.org/2005/08/addressing\" xmlns:ns5=\"http://docs.oasis-open.org/ws-sx/ws-trust/200802\"><RequestSecurityTokenResponse><TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</TokenType><RequestedSecurityToken><saml2:Assertion xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ID=\"_93FDCC53AC1D5AE3EB131849544559910\" IssueInstant=\"2011-10-13T08:44:05.599Z\" Version=\"2.0\" xsi:type=\"saml2:AssertionType\"><saml2:Issuer>DoubleItSTSIssuer</saml2:Issuer><ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/><ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/><ds:Reference URI=\"#_93FDCC53AC1D5AE3EB131849544559910\"><ds:Transforms><ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"/><ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"><ec:InclusiveNamespaces xmlns:ec=\"http://www.w3.org/2001/10/xml-exc-c14n#\" PrefixList=\"xs\"/></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/><ds:DigestValue>3BwoTotMyMTFt40DCmi0ayEdnko=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>bXSIwaG+e2hDdpdDkciR3pjLbbpCLD/XwS+CezMygN/w2g1trgyaIlfkUvyAXVyk5ULJH9s+fFuecPgRm2n2JePm8Up2oZ0+vAJ6fvwQxbhhpuGz8j+OkVr11rGMjpVo1tFSVQNlq183blHVjjDQhGBl7TvoKAZsSGnhzoHclEY=</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>MIID5jCCA0+gAwIBAgIJAPahVdM2UPibMA0GCSqGSIb3DQEBBQUAMIGpMQswCQYDVQQGEwJVUzERMA8GA1UECBMITWFyeWxhbmQxEjAQBgNVBAcTCUJhbHRpbW9yZTEpMCcGA1UEChMgU2FtcGxlIFNUUyAtLSBOT1QgRk9SIFBST0RVQ1RJT04xFjAUBgNVBAsTDUlUIERlcGFydG1lbnQxFDASBgNVBAMTC3d3dy5zdHMuY29tMRowGAYJKoZIhvcNAQkBFgtzdHNAc3RzLmNvbTAeFw0xMTAyMDkxODM4MTNaFw0yMTAyMDYxODM4MTNaMIGpMQswCQYDVQQGEwJVUzERMA8GA1UECBMITWFyeWxhbmQxEjAQBgNVBAcTCUJhbHRpbW9yZTEpMCcGA1UEChMgU2FtcGxlIFNUUyAtLSBOT1QgRk9SIFBST0RVQ1RJT04xFjAUBgNVBAsTDUlUIERlcGFydG1lbnQxFDASBgNVBAMTC3d3dy5zdHMuY29tMRowGAYJKoZIhvcNAQkBFgtzdHNAc3RzLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAo+f8gs4WcteLdSPWPm8+ciyEz7zVmA7kcCGFQQvlO0smxRViWJ1x+yniT5Uu86UrAQjxRJyANBomQrirfE7KPrnCm6iVOsGDEntuIZAf7DFPnrv5p++jAZQuR3vm4ZHXFOFTXmI+/FD5AqLfNi17xiTxZCDYyDdD39CNFTrB2PkCAwEAAaOCARIwggEOMB0GA1UdDgQWBBRa0A38holQIbJMFW7m5ZSw+iVDHDCB3gYDVR0jBIHWMIHTgBRa0A38holQIbJMFW7m5ZSw+iVDHKGBr6SBrDCBqTELMAkGA1UEBhMCVVMxETAPBgNVBAgTCE1hcnlsYW5kMRIwEAYDVQQHEwlCYWx0aW1vcmUxKTAnBgNVBAoTIFNhbXBsZSBTVFMgLS0gTk9UIEZPUiBQUk9EVUNUSU9OMRYwFAYDVQQLEw1JVCBEZXBhcnRtZW50MRQwEgYDVQQDEwt3d3cuc3RzLmNvbTEaMBgGCSqGSIb3DQEJARYLc3RzQHN0cy5jb22CCQD2oVXTNlD4mzAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBQUAA4GBACp9yK1I9r++pyFT0yrcaV1m1Sub6urJH+GxQLBaTnTsaPLuzq2gIsJHpwk5XggB+IDe69iKKeb74Vt8aOe5usIWVASgi9ckqCwdfTqYu6KG9BlezqHZdExnIG2v/cD/3NkKr7O/a7DjlbE6FZ4G1nrOfVJkjmeAa6txtYm1Dm/f</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature><saml2:Subject><saml2:NameID Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\" NameQualifier=\"http://cxf.apache.org/sts\">alice</saml2:NameID><saml2:SubjectConfirmation Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"/></saml2:Subject><saml2:Conditions NotBefore=\"2011-10-13T08:44:05.600Z\" NotOnOrAfter=\"2011-10-13T08:49:05.600Z\"><saml2:AudienceRestriction><saml2:Audience>http://localhost:8080/wsfedhelloworld/</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:AttributeStatement><saml2:Attribute Name=\"givenname\" NameFormat=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims\"><saml2:AttributeValue xsi:type=\"xs:string\">Alice</saml2:AttributeValue></saml2:Attribute><saml2:Attribute Name=\"surname\" NameFormat=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims\"><saml2:AttributeValue xsi:type=\"xs:string\">Smith</saml2:AttributeValue></saml2:Attribute><saml2:Attribute Name=\"emailaddress\" NameFormat=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims\"><saml2:AttributeValue xsi:type=\"xs:string\">alice@mycompany.org</saml2:AttributeValue></saml2:Attribute><saml2:Attribute Name=\"role\" NameFormat=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims\"><saml2:AttributeValue xsi:type=\"xs:string\">User</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion></RequestedSecurityToken><RequestedAttachedReference><ns3:SecurityTokenReference xmlns:wsse11=\"http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd\" wsse11:TokenType=\"http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0\"><ns3:KeyIdentifier ValueType=\"http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLID\">#_93FDCC53AC1D5AE3EB131849544559910</ns3:KeyIdentifier></ns3:SecurityTokenReference></RequestedAttachedReference><RequestedUnattachedReference><ns3:SecurityTokenReference xmlns:wsse11=\"http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd\" wsse11:TokenType=\"http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0\"><ns3:KeyIdentifier ValueType=\"http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLID\">_93FDCC53AC1D5AE3EB131849544559910</ns3:KeyIdentifier></ns3:SecurityTokenReference></RequestedUnattachedReference><wsp:AppliesTo xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><wsa:EndpointReference xmlns:wsa=\"http://www.w3.org/2005/08/addressing\"><wsa:Address>http://localhost:8080/wsfedhelloworld/</wsa:Address></wsa:EndpointReference></wsp:AppliesTo><Lifetime><ns2:Created>2011-10-13T08:44:05.608Z</ns2:Created><ns2:Expires>2011-10-13T08:49:05.608Z</ns2:Expires></Lifetime></RequestSecurityTokenResponse></RequestSecurityTokenResponseCollection>\n\\ No newline at end of file"
        },
        {
            "sha": "b3f8f33ab5c8b058f454bf55e47b4771e78268ff",
            "filename": "fediz-core/src/test/resources/RSTR_old.xml",
            "status": "added",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Ftest%2Fresources%2FRSTR_old.xml",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Ftest%2Fresources%2FRSTR_old.xml",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-core%2Fsrc%2Ftest%2Fresources%2FRSTR_old.xml?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,3 @@\n+<!--  DO NOT REFORMAT THIS XML DOCUMENT AS IT BREAKS THE SAML SIGNTATURE VALIDATION -->\n+\n+<trust:RequestSecurityTokenResponseCollection xmlns:trust=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\"><trust:RequestSecurityTokenResponse><trust:Lifetime><wsu:Created xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">2011-09-15T13:18:59.140Z</wsu:Created><wsu:Expires xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">2011-09-15T14:18:59.140Z</wsu:Expires></trust:Lifetime><wsp:AppliesTo xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><EndpointReference xmlns=\"http://www.w3.org/2005/08/addressing\"><Address>http://ws-ubuntu-talend.z.ch.zurich.com:8080/wsfedhelloworld/secure/test.html</Address></EndpointReference></wsp:AppliesTo><trust:RequestedSecurityToken><Assertion ID=\"_1020637e-0ce4-4312-bd91-4adc38f47c0b\" IssueInstant=\"2011-09-15T13:18:59.140Z\" Version=\"2.0\" xmlns=\"urn:oasis:names:tc:SAML:2.0:assertion\"><Issuer>ZFS IDP LAB</Issuer><ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\" /><ds:SignatureMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\" /><ds:Reference URI=\"#_1020637e-0ce4-4312-bd91-4adc38f47c0b\"><ds:Transforms><ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\" /><ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\" /></ds:Transforms><ds:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\" /><ds:DigestValue>WozRF8Ml1jrUFlzMktNb1Aj28jvX+Giy2qhSqcGtStQ=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>FdlwgcqSw+VgUT98/48DvZbHguQZTndW1GM/ctKrWok8kuWP8Vmmt9Qa1ts1QnWe6Sv07du+jDA9shHE/mxctC97T/dgraQwggPe4X4/RhNYiRD8w5pKY3hiVI1mFrnRUEg/rEcyQiCXQhcE6YL2V+asO+RpU0YW34AgRWdgJLI=</ds:SignatureValue><KeyInfo xmlns=\"http://www.w3.org/2000/09/xmldsig#\"><X509Data><X509Certificate>MIIC1zCCAkCgAwIBAgICAj0wDQYJKoZIhvcNAQEFBQAwgaYxCzAJBgNVBAYTAkNIMQ8wDQYDVQQIEwZadXJpY2gxGTAXBgNVBAcTEFp1cmljaCBJbnN1cmFuY2UxGjAYBgNVBAoTEVN3aXNzIERhdGEgQ2VudGVyMQwwCgYDVQQLEwNJTkcxGDAWBgNVBAMTD1NEQyBJbnRlcm5hbCBDQTEnMCUGCSqGSIb3DQEJARYYY2hyX25ldHNlY3VyZUB6dXJpY2guY29tMB4XDTA5MTIyODE2MTMwOFoXDTExMTIyODE2MTMwOFowgZ4xCzAJBgNVBAYTAkNIMQ8wDQYDVQQIEwZadXJpY2gxDzANBgNVBAcTBlp1cmljaDEhMB8GA1UEChMYWnVyaWNoIEluc3VyYW5jZSBDb21wYW55MRMwEQYDVQQLEwpJU1AgRXVyb3BlMQwwCgYDVQQDEwNTVFMxJzAlBgkqhkiG9w0BCQEWGGNocl9uZXRzZWN1cmVAenVyaWNoLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAxLcHLtMzqstcDeIozxMethzbDunN+ZINWpW8ui5EbkuduwB4q9Um6zARnHe+ECfcaDkzBge+INgl4MSmHxWW79lFYSwIwH+8RcLpgZKabmX9G9EKeNW0T5tJjauzumU2Pc8Q66NiTa2hr/aNlRZzWUtz9UM4AL+V2GSwXNDYrakCAwEAAaMaMBgwCQYDVR0TBAIwADALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQEFBQADgYEAo+uaHVi02v7Pch1ispD5kQNCMgMJoXgGYGM/xuLlIIpz7785L+fp7j8F//aCXUSjj+4juAOCKe+vwc0/Ij9WDjhH10fruzTOHtOiCDyp1dzb9fwlug+zzGUvL07CJZY+ZDetqYJUHIq4F56bAe65d+S445I254uttRslM8D0DFU=</X509Certificate></X509Data></KeyInfo></ds:Signature><Subject><NameID>John</NameID><SubjectConfirmation Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\" /></Subject><Conditions NotBefore=\"2011-09-15T13:18:59.140Z\" NotOnOrAfter=\"2011-09-15T14:18:59.140Z\"><AudienceRestriction><Audience>http://ws-ubuntu-talend.z.ch.zurich.com:8080/wsfedhelloworld/secure/test.html</Audience></AudienceRestriction></Conditions><AttributeStatement><Attribute Name=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname\"><AttributeValue>John</AttributeValue></Attribute><Attribute Name=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname\"><AttributeValue>Doe</AttributeValue></Attribute><Attribute Name=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth\"><AttributeValue>5/5/1955</AttributeValue></Attribute><Attribute Name=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/homephone\"><AttributeValue>555-555-5555</AttributeValue></Attribute><Attribute Name=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\"><AttributeValue>john@gh.com</AttributeValue></Attribute><Attribute Name=\"http://cloudbuddies.com/2009/06/FrequentFlyerProgram\"><AttributeValue>ContosoAir</AttributeValue></Attribute><Attribute Name=\"http://cloudbuddies.com/2009/06/FrequentFlyerNumber\"><AttributeValue>54545454</AttributeValue></Attribute><Attribute Name=\"http://cloudbuddies.com/2009/06/FrequentFlyerLevel\"><AttributeValue>gold</AttributeValue></Attribute></AttributeStatement></Assertion></trust:RequestedSecurityToken><trust:RequestedAttachedReference><SecurityTokenReference d4p1:TokenType=\"http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0\" xmlns:d4p1=\"http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd\" xmlns=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"><KeyIdentifier ValueType=\"http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLID\">_1020637e-0ce4-4312-bd91-4adc38f47c0b</KeyIdentifier></SecurityTokenReference></trust:RequestedAttachedReference><trust:RequestedUnattachedReference><SecurityTokenReference d4p1:TokenType=\"http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0\" xmlns:d4p1=\"http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd\" xmlns=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"><KeyIdentifier ValueType=\"http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLID\">_1020637e-0ce4-4312-bd91-4adc38f47c0b</KeyIdentifier></SecurityTokenReference></trust:RequestedUnattachedReference><trust:TokenType>urn:oasis:names:tc:SAML:2.0:assertion</trust:TokenType><trust:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</trust:RequestType><trust:KeyType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Bearer</trust:KeyType></trust:RequestSecurityTokenResponse></trust:RequestSecurityTokenResponseCollection>\n\\ No newline at end of file"
        },
        {
            "sha": "2fb5ed2a417fc445d15aca0821d735420e424620",
            "filename": "fediz-core/src/test/resources/logging.properties",
            "status": "added",
            "additions": 54,
            "deletions": 0,
            "changes": 54,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Ftest%2Fresources%2Flogging.properties",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Ftest%2Fresources%2Flogging.properties",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-core%2Fsrc%2Ftest%2Fresources%2Flogging.properties?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,54 @@\n+############################################################\n+#  \tDefault Logging Configuration File\n+#\n+# You can use a different file by specifying a filename\n+# with the java.util.logging.config.file system property.  \n+# For example java -Djava.util.logging.config.file=myfile\n+############################################################\n+\n+############################################################\n+#  \tGlobal properties\n+############################################################\n+\n+# \"handlers\" specifies a comma separated list of log Handler \n+# classes.  These handlers will be installed during VM startup.\n+# Note that these classes must be on the system classpath.\n+# By default we only configure a ConsoleHandler, which will only\n+# show messages at the WARNING and above levels.\n+handlers= java.util.logging.ConsoleHandler\n+#handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler\n+\n+# Default global logging level.\n+# This specifies which kinds of events are logged across\n+# all loggers.  For any given facility this global level\n+# can be overridden by a facility specific level\n+# Note that the ConsoleHandler also has a separate level\n+# setting to limit messages printed to the console.\n+.level= INFO\n+\n+############################################################\n+# Handler specific properties.\n+# Describes specific configuration info for Handlers.\n+############################################################\n+\n+# default file output is in user's home directory.\n+java.util.logging.FileHandler.pattern = %h/java%u.log\n+java.util.logging.FileHandler.limit = 50000\n+java.util.logging.FileHandler.count = 1\n+java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter\n+\n+# Limit the message that are printed on the console to WARNING and above.\n+java.util.logging.ConsoleHandler.level = FINEST\n+java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter\n+\n+\n+############################################################\n+# Facility specific properties.\n+# Provides extra control for each logger.\n+############################################################\n+\n+# For example, set the com.xyz.foo logger to only log SEVERE\n+# messages:\n+#com.xyz.foo.level = SEVERE\n+org.apache.ws.security.level = FINEST\n+org.apache.cxf.fediz.level = FINEST"
        },
        {
            "sha": "90fa649de1b909a7929fe997b44d313b66dd6071",
            "filename": "fediz-core/src/test/resources/signature.properties",
            "status": "added",
            "additions": 6,
            "deletions": 0,
            "changes": 6,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Ftest%2Fresources%2Fsignature.properties",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Ftest%2Fresources%2Fsignature.properties",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-core%2Fsrc%2Ftest%2Fresources%2Fsignature.properties?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,6 @@\n+org.apache.ws.security.crypto.provider=org.apache.ws.security.components.crypto.Merlin\n+org.apache.ws.security.crypto.merlin.keystore.type=jks\n+org.apache.ws.security.crypto.merlin.keystore.password=changeit\n+#org.apache.ws.security.crypto.merlin.keystore.alias=notneeded\n+org.apache.ws.security.crypto.merlin.keystore.file=sdcinternal.jks\n+"
        },
        {
            "sha": "e805906aadf5055a49caaf72093a8a5312dc7172",
            "filename": "fediz-core/src/test/resources/stsstore.jks",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Ftest%2Fresources%2Fstsstore.jks",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-core%2Fsrc%2Ftest%2Fresources%2Fstsstore.jks",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-core%2Fsrc%2Ftest%2Fresources%2Fstsstore.jks?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5"
        },
        {
            "sha": "6019fbc3ab96e94d8f4629f7ee3d0764da9f9c4f",
            "filename": "fediz-idp-sts/pom.xml",
            "status": "added",
            "additions": 93,
            "deletions": 0,
            "changes": 93,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fpom.xml",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp-sts%2Fpom.xml?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,93 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+       <groupId>org.apache.cxf.fediz</groupId>\n+       <artifactId>fediz</artifactId>\n+       <version>0.6-SNAPSHOT</version>\n+    </parent>\n+    <artifactId>fediz-idp-sts</artifactId>\n+    <name>WS Federation IDP STS</name>\n+    <packaging>war</packaging>\n+\n+   <properties>\n+      <cxf.version>2.5.1</cxf.version>\n+      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+   </properties>\n+\n+   <dependencies>\n+        <dependency>\n+            <groupId>org.apache.cxf</groupId>\n+            <artifactId>cxf-rt-transports-http</artifactId>\n+            <version>${cxf.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.cxf</groupId>\n+            <artifactId>cxf-rt-frontend-jaxws</artifactId>\n+            <version>${cxf.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.cxf</groupId>\n+            <artifactId>cxf-rt-ws-policy</artifactId>\n+            <version>${cxf.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.cxf.services.sts</groupId>\n+            <artifactId>cxf-services-sts-core</artifactId>\n+            <version>${cxf.version}</version>\n+            <!--\n+            <exclusions>\n+\t\t\t\t<exclusion>\n+\t\t\t\t\t<artifactId>slf4j-jdk14</artifactId>\n+\t\t\t\t\t<groupId>org.slf4j</groupId>\n+\t\t\t\t</exclusion>\n+\t\t\t\t<exclusion>\n+\t\t\t\t\t<artifactId>slf4j-api</artifactId>\n+\t\t\t\t\t<groupId>org.slf4j</groupId>\n+\t\t\t\t</exclusion>\n+\t\t\t</exclusions>\n+\t\t\t-->\n+        </dependency>        \n+        \n+        \n+        <!--\n+        <dependency>\n+            <groupId>com.talend.sf</groupId>\n+            <artifactId>cxf-sts-core</artifactId>\n+            <version>${sts.version}</version>\n+        </dependency>\n+        -->\n+   </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <!--\n+            <plugin>\n+                <groupId>org.apache.tomcat.maven</groupId>\n+                <artifactId>tomcat-maven-plugin</artifactId>\n+                <version>2.0-SNAPSHOT</version>\n+                <configuration>\n+                     <server>myTomcat</server>\n+                     <url>http://localhost:8080/manager/text</url>\n+                     <warFile>${project.build.finalName}.war</warFile>\n+                </configuration>\n+            </plugin>\n+            -->\n+            <plugin><!--for mvn tomcat:deploy/:undeploy/:redeploy -->\n+\t\t\t\t<groupId>org.codehaus.mojo</groupId>\n+\t\t\t\t<artifactId>tomcat-maven-plugin</artifactId>\n+\t\t\t\t<version>1.1</version>\n+\t\t\t\t<configuration>\n+\t\t\t\t\t<server>myTomcat</server>\n+\t\t\t\t\t<url>http://localhost:9080/manager/text</url>\n+\t\t\t\t\t<path>/${project.build.finalName}</path>\n+\t\t\t\t</configuration>\n+\t\t\t</plugin>\n+        </plugins>\n+        <!-- Name of the generated WAR file -->\n+        <finalName>fedizidpsts</finalName>\n+    </build>\n+\n+</project>"
        },
        {
            "sha": "a3cdc84878e9b30b07122dda818295134032b862",
            "filename": "fediz-idp-sts/src/main/java/org/apache/cxf/fediz/service/sts/FileClaimsHandler.java",
            "status": "added",
            "additions": 95,
            "deletions": 0,
            "changes": 95,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fservice%2Fsts%2FFileClaimsHandler.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fservice%2Fsts%2FFileClaimsHandler.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp-sts%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fservice%2Fsts%2FFileClaimsHandler.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.cxf.fediz.service.sts;\n+\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.ws.WebServiceContext;\n+\n+import org.apache.cxf.sts.claims.Claim;\n+import org.apache.cxf.sts.claims.ClaimCollection;\n+import org.apache.cxf.sts.claims.ClaimTypes;\n+import org.apache.cxf.sts.claims.ClaimsHandler;\n+import org.apache.cxf.sts.claims.RequestClaim;\n+import org.apache.cxf.sts.claims.RequestClaimCollection;\n+\n+/**\n+ * A custom ClaimsHandler implementation for use in the tests.\n+ */\n+public class FileClaimsHandler implements ClaimsHandler {\n+\n+    public static final URI ROLE = \n+            URI.create(\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role\");\n+\n+    private Map<String,Map<String,String>> userClaims = null;\n+    \n+    public void setUserClaims(Map<String,Map<String,String>> userClaims) {\n+\t\tthis.userClaims = userClaims;\n+\t}\n+\n+\tpublic Map<String,Map<String,String>> getUserClaims() {\n+\t\treturn userClaims;\n+\t}\n+    \n+    @Override\n+    public ClaimCollection retrieveClaimValues(Principal principal, RequestClaimCollection claims, WebServiceContext context, String realm) {\n+    \t\n+    \tif (getUserClaims() == null) {\n+    \t\treturn new ClaimCollection();\n+    \t}\n+    \t\n+    \tMap<String, String> claimMap = getUserClaims().get(principal.getName());\n+    \tif (claimMap == null || claimMap.size() == 0) {\n+    \t\treturn new ClaimCollection();\n+    \t}\n+    \t    \t\n+        if (claims != null && claims.size() > 0) {\n+            ClaimCollection claimCollection = new ClaimCollection();\n+            for (RequestClaim requestClaim : claims) { \n+            \tString claimValue = claimMap.get(requestClaim.getClaimType().toString());\n+            \tif (claimValue != null) {\n+\t            \tClaim claim = new Claim();\n+\t                claim.setClaimType(requestClaim.getClaimType());\n+\t                claim.setIssuer(\"Test Issuer\");\n+\t                claim.setOriginalIssuer(\"Original Issuer\");\n+\t                claim.setValue(claimValue);\n+\t                claimCollection.add(claim);\n+            \t}   \n+            }\n+            return claimCollection;\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public List<URI> getSupportedClaimTypes() {\n+        ArrayList<URI> list = new ArrayList<URI>();\n+        list.add(ClaimTypes.EMAILADDRESS);\n+        list.add(ClaimTypes.LASTNAME);\n+        list.add(ClaimTypes.FIRSTNAME);\n+        list.add(ROLE);\n+        return list;\n+    }\n+\n+\t\n+\n+}"
        },
        {
            "sha": "a4bf7fef2ebb6d296a0e0f2ec42bd0b677112667",
            "filename": "fediz-idp-sts/src/main/java/org/apache/cxf/fediz/service/sts/PasswordCallbackHandler.java",
            "status": "added",
            "additions": 42,
            "deletions": 0,
            "changes": 42,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fservice%2Fsts%2FPasswordCallbackHandler.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fservice%2Fsts%2FPasswordCallbackHandler.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp-sts%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fservice%2Fsts%2FPasswordCallbackHandler.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.cxf.fediz.service.sts;\n+\n+import java.io.IOException;\n+\n+import javax.security.auth.callback.Callback;\n+import javax.security.auth.callback.CallbackHandler;\n+import javax.security.auth.callback.UnsupportedCallbackException;\n+import org.apache.ws.security.WSPasswordCallback;\n+\n+public class PasswordCallbackHandler implements CallbackHandler {\n+\n+\tpublic void handle(Callback[] callbacks) throws IOException,\n+\t\t\tUnsupportedCallbackException {\n+\t\tfor (int i = 0; i < callbacks.length; i++) {\n+\t\t\tif (callbacks[i] instanceof WSPasswordCallback) { // CXF\n+\t\t\t\tWSPasswordCallback pc = (WSPasswordCallback) callbacks[i];\n+\t\t\t\tif (\"mystskey\".equals(pc.getIdentifier())) {\n+\t\t\t\t\tpc.setPassword(\"stskpass\");\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+}"
        },
        {
            "sha": "0535da5454dd99dec1a0c4597780e750f4a33be6",
            "filename": "fediz-idp-sts/src/main/java/org/apache/cxf/fediz/service/sts/UsernamePasswordCallbackHandler.java",
            "status": "added",
            "additions": 57,
            "deletions": 0,
            "changes": 57,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fservice%2Fsts%2FUsernamePasswordCallbackHandler.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fservice%2Fsts%2FUsernamePasswordCallbackHandler.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp-sts%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fservice%2Fsts%2FUsernamePasswordCallbackHandler.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.cxf.fediz.service.sts;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import javax.security.auth.callback.Callback;\n+import javax.security.auth.callback.CallbackHandler;\n+import javax.security.auth.callback.UnsupportedCallbackException;\n+import org.apache.ws.security.WSPasswordCallback;\n+\n+public class UsernamePasswordCallbackHandler implements CallbackHandler {\n+\n+\tprivate Map<String,String> passwords;\n+\t\n+\tpublic void setPasswords(Map<String,String> passwords) {\n+\t\tthis.passwords = passwords;\n+\t}\n+\n+\tpublic Map<String,String> getPasswords() {\n+\t\treturn passwords;\n+\t}\n+\t\n+    public void handle(Callback[] callbacks) throws IOException,\n+            UnsupportedCallbackException {\n+    \t\n+    \tif (getPasswords() == null || getPasswords().size() == 0)\n+    \t\treturn;\n+    \t\n+        for (int i = 0; i < callbacks.length; i++) {\n+            if (callbacks[i] instanceof WSPasswordCallback) { // CXF\n+                WSPasswordCallback pc = (WSPasswordCallback) callbacks[i];\n+                \n+                String pw = getPasswords().get(pc.getIdentifier());\n+                pc.setPassword(pw);\n+            }\n+        }\n+    }\n+\t\n+    \n+}"
        },
        {
            "sha": "5fc56e3f7fc2ceee759f8d3c589cae80d85c3e22",
            "filename": "fediz-idp-sts/src/main/resources/log4j.properties",
            "status": "added",
            "additions": 17,
            "deletions": 0,
            "changes": 17,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fresources%2Flog4j.properties",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fresources%2Flog4j.properties",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp-sts%2Fsrc%2Fmain%2Fresources%2Flog4j.properties?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,17 @@\n+# Set root category priority to INFO and its only appender to CONSOLE.\n+log4j.rootCategory=FATAL, CONSOLE\n+#log4j.rootCategory=DEBUG, CONSOLE\n+\n+# CONSOLE is set to be a ConsoleAppender using a PatternLayout.\n+log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender\n+log4j.appender.CONSOLE.Threshold=DEBUG\n+log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout\n+log4j.appender.CONSOLE.layout.ConversionPattern=- %m%n\n+\n+# LOGFILE is set to be a File appender using a PatternLayout.\n+log4j.appender.LOGFILE=org.apache.log4j.FileAppender\n+log4j.appender.LOGFILE.File=target/wss4j.log\n+log4j.appender.LOGFILE.Append=false\n+log4j.appender.LOGFILE.Threshold=DEBUG\n+log4j.appender.LOGFILE.layout=org.apache.log4j.PatternLayout\n+log4j.appender.LOGFILE.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n"
        },
        {
            "sha": "c185d612fa9daa5f53931a72b922763442df9440",
            "filename": "fediz-idp-sts/src/main/resources/logging.properties",
            "status": "added",
            "additions": 52,
            "deletions": 0,
            "changes": 52,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fresources%2Flogging.properties",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fresources%2Flogging.properties",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp-sts%2Fsrc%2Fmain%2Fresources%2Flogging.properties?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,52 @@\n+############################################################\n+#  \tDefault Logging Configuration File\n+#\n+# You can use a different file by specifying a filename\n+# with the java.util.logging.config.file system property.  \n+# For example java -Djava.util.logging.config.file=myfile\n+############################################################\n+\n+############################################################\n+#  \tGlobal properties\n+############################################################\n+\n+# \"handlers\" specifies a comma separated list of log Handler \n+# classes.  These handlers will be installed during VM startup.\n+# Note that these classes must be on the system classpath.\n+# By default we only configure a ConsoleHandler, which will only\n+# show messages at the WARNING and above levels.\n+handlers= java.util.logging.ConsoleHandler\n+#handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler\n+\n+# Default global logging level.\n+# This specifies which kinds of events are logged across\n+# all loggers.  For any given facility this global level\n+# can be overridden by a facility specific level\n+# Note that the ConsoleHandler also has a separate level\n+# setting to limit messages printed to the console.\n+.level= INFO\n+\n+############################################################\n+# Handler specific properties.\n+# Describes specific configuration info for Handlers.\n+############################################################\n+\n+# default file output is in user's home directory.\n+java.util.logging.FileHandler.pattern = %h/java%u.log\n+java.util.logging.FileHandler.limit = 50000\n+java.util.logging.FileHandler.count = 1\n+java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter\n+\n+# Limit the message that are printed on the console to WARNING and above.\n+java.util.logging.ConsoleHandler.level = INFO\n+java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter\n+\n+\n+############################################################\n+# Facility specific properties.\n+# Provides extra control for each logger.\n+############################################################\n+\n+# For example, set the com.xyz.foo logger to only log SEVERE\n+# messages:\n+#com.xyz.foo.level = SEVERE"
        },
        {
            "sha": "b83a9c07a7c02c1646916d0ecedfbc68cf3ad8c5",
            "filename": "fediz-idp-sts/src/main/resources/stsKeystore.properties",
            "status": "added",
            "additions": 6,
            "deletions": 0,
            "changes": 6,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fresources%2FstsKeystore.properties",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fresources%2FstsKeystore.properties",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp-sts%2Fsrc%2Fmain%2Fresources%2FstsKeystore.properties?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,6 @@\n+org.apache.ws.security.crypto.provider=org.apache.ws.security.components.crypto.Merlin\n+org.apache.ws.security.crypto.merlin.keystore.type=jks\n+org.apache.ws.security.crypto.merlin.keystore.password=stsspass\n+org.apache.ws.security.crypto.merlin.keystore.alias=mystskey\n+org.apache.ws.security.crypto.merlin.file=stsstore.jks\n+"
        },
        {
            "sha": "e805906aadf5055a49caaf72093a8a5312dc7172",
            "filename": "fediz-idp-sts/src/main/resources/stsstore.jks",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fresources%2Fstsstore.jks",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fresources%2Fstsstore.jks",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp-sts%2Fsrc%2Fmain%2Fresources%2Fstsstore.jks?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5"
        },
        {
            "sha": "1dca9918b3b7060c60a27d2adfdfe803e5154d8b",
            "filename": "fediz-idp-sts/src/main/webapp/WEB-INF/cxf-encrypted-ut.xml",
            "status": "added",
            "additions": 82,
            "deletions": 0,
            "changes": 82,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fcxf-encrypted-ut.xml",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fcxf-encrypted-ut.xml",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fcxf-encrypted-ut.xml?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,82 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans \n+    xmlns=\"http://www.springframework.org/schema/beans\"\n+    xmlns:cxf=\"http://cxf.apache.org/core\"\n+    xmlns:jaxws=\"http://cxf.apache.org/jaxws\"\n+    xmlns:test=\"http://apache.org/hello_world_soap_http\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xmlns:util=\"http://www.springframework.org/schema/util\"\n+    xsi:schemaLocation=\"\n+        http://cxf.apache.org/core\n+        http://cxf.apache.org/schemas/core.xsd\n+        http://www.springframework.org/schema/beans\n+        http://www.springframework.org/schema/beans/spring-beans-2.0.xsd\n+        http://cxf.apache.org/jaxws                                     \n+        http://cxf.apache.org/schemas/jaxws.xsd\n+        http://www.springframework.org/schema/util\n+        http://www.springframework.org/schema/util/spring-util-2.0.xsd\">\n+    <import resource=\"cxf-transport.xml\"/>    \n+\n+    <cxf:bus>\n+        <cxf:features>\n+            <cxf:logging/>\n+        </cxf:features>\n+    </cxf:bus>\n+\n+    <bean id=\"encryptedUtSTSProviderBean\"\n+\t\tclass=\"org.apache.cxf.ws.security.sts.provider.SecurityTokenServiceProvider\">\n+\t\t<property name=\"issueOperation\" ref=\"encryptedUtIssueDelegate\"/>\n+\t\t<property name=\"validateOperation\" ref=\"encryptedUtValidateDelegate\"/>\n+\t</bean>\t\n+\n+\t<bean id=\"encryptedUtIssueDelegate\"\n+\t\tclass=\"org.apache.cxf.sts.operation.TokenIssueOperation\">\n+\t\t<property name=\"tokenProviders\" ref=\"encryptedUtSamlTokenProvider\"/>\n+\t\t<property name=\"services\" ref=\"encryptedUtService\"/>\n+\t\t<property name=\"stsProperties\" ref=\"encryptedUtSTSProperties\"/>\n+\t</bean>\n+\t\n+\t<bean id=\"encryptedUtValidateDelegate\"\n+\t    class=\"org.apache.cxf.sts.operation.TokenValidateOperation\">\n+\t</bean>\n+\t\n+\t<bean id=\"encryptedUtSamlTokenProvider\"\n+\t\tclass=\"org.apache.cxf.sts.token.provider.SAMLTokenProvider\">\n+    </bean>\n+    \n+    <bean id=\"encryptedUtService\"\n+        class=\"org.apache.cxf.sts.service.StaticService\">\n+        <property name=\"endpoints\" ref=\"encryptedUtEndpoints\"/>\n+        <property name=\"encryptionName\" value=\"myservicekey\"/>\n+    </bean>\n+    \n+    <util:list id=\"encryptedUtEndpoints\">\n+\t\t<value>http://localhost:8082/doubleit/services/doubleitasymmetricsaml1encrypted</value>\n+\t</util:list>\n+\t\n+\t<bean id=\"encryptedUtSTSProperties\"\n+\t     class=\"org.apache.cxf.sts.StaticSTSProperties\">\n+\t    <property name=\"signatureProperties\" value=\"stsKeystore.properties\"/>\n+\t\t<property name=\"signatureUsername\" value=\"mystskey\"/>\n+\t\t<property name=\"callbackHandlerClass\" value=\"org.apache.cxf.sts.war.PasswordCallbackHandler\"/>\n+\t\t<property name=\"encryptionProperties\" value=\"stsKeystore.properties\"/>\n+\t\t<property name=\"issuer\" value=\"DoubleItSTSIssuer\"/>\n+    </bean>\n+    \n+\t<jaxws:endpoint id=\"EncryptedUTSTS\"\n+\t\timplementor=\"#encryptedUtSTSProviderBean\"\n+\t\taddress=\"/UTEncrypted\" \n+        wsdlLocation=\"/WEB-INF/wsdl/ws-trust-1.4-service.wsdl\"\n+        xmlns:ns1=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/\"\n+        serviceName=\"ns1:SecurityTokenService\"\n+        endpointName=\"ns1:UTEncrypted_Port\">\n+        <jaxws:properties>\n+            <entry key=\"ws-security.callback-handler\" value=\"org.apache.cxf.sts.war.PasswordCallbackHandler\"/>\n+            <entry key=\"ws-security.signature.properties\" value=\"stsKeystore.properties\"/>\n+            <entry key=\"ws-security.signature.username\" value=\"mystskey\"/>\n+        </jaxws:properties> \n+\t</jaxws:endpoint>\n+\t\n+\n+</beans>\n+"
        },
        {
            "sha": "7bec002de0040a39330bfc10661f969680f1939f",
            "filename": "fediz-idp-sts/src/main/webapp/WEB-INF/cxf-servlet.xml",
            "status": "added",
            "additions": 32,
            "deletions": 0,
            "changes": 32,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fcxf-servlet.xml",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fcxf-servlet.xml",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fcxf-servlet.xml?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans \n+    xmlns=\"http://www.springframework.org/schema/beans\"\n+    xmlns:cxf=\"http://cxf.apache.org/core\"\n+    xmlns:jaxws=\"http://cxf.apache.org/jaxws\"\n+    xmlns:test=\"http://apache.org/hello_world_soap_http\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xmlns:util=\"http://www.springframework.org/schema/util\"\n+    xsi:schemaLocation=\"\n+        http://cxf.apache.org/core\n+        http://cxf.apache.org/schemas/core.xsd\n+        http://www.springframework.org/schema/beans\n+        http://www.springframework.org/schema/beans/spring-beans-2.0.xsd\n+        http://cxf.apache.org/jaxws                                     \n+        http://cxf.apache.org/schemas/jaxws.xsd\n+        http://www.springframework.org/schema/util\n+        http://www.springframework.org/schema/util/spring-util-2.0.xsd\">\n+    <import resource=\"cxf-transport.xml\"/>  \n+    <!--\n+    <import resource=\"cxf-ut.xml\"/>\n+    <import resource=\"cxf-encrypted-ut.xml\"/>   \n+    <import resource=\"cxf-x509.xml\"/>   \n+    -->\n+    \n+    <cxf:bus>\n+        <cxf:features>\n+            <cxf:logging/>\n+        </cxf:features>\n+    </cxf:bus>\n+\n+</beans>\n+"
        },
        {
            "sha": "655f3608c2ac85a207bcccc162e37c79ee33cf7b",
            "filename": "fediz-idp-sts/src/main/webapp/WEB-INF/cxf-transport.xml",
            "status": "added",
            "additions": 142,
            "deletions": 0,
            "changes": 142,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fcxf-transport.xml",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fcxf-transport.xml",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fcxf-transport.xml?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,142 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+\txmlns:cxf=\"http://cxf.apache.org/core\" xmlns:jaxws=\"http://cxf.apache.org/jaxws\"\n+\txmlns:test=\"http://apache.org/hello_world_soap_http\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:util=\"http://www.springframework.org/schema/util\" xmlns:http=\"http://cxf.apache.org/transports/http/configuration\"\n+\txmlns:sec=\"http://cxf.apache.org/configuration/security\"\n+\txsi:schemaLocation=\"\n+        http://cxf.apache.org/core\n+        http://cxf.apache.org/schemas/core.xsd\n+        http://www.springframework.org/schema/beans\n+        http://www.springframework.org/schema/beans/spring-beans-2.0.xsd\n+        http://cxf.apache.org/jaxws                                     \n+        http://cxf.apache.org/schemas/jaxws.xsd\n+        http://www.springframework.org/schema/util\n+        http://www.springframework.org/schema/util/spring-util-2.0.xsd\n+        http://cxf.apache.org/transports/http/configuration\n+        http://cxf.apache.org/schemas/configuration/http-conf.xsd\n+        http://cxf.apache.org/configuration/security\n+        http://cxf.apache.org/schemas/configuration/security.xsd\">\n+        \n+\t<import resource=\"classpath:META-INF/cxf/cxf.xml\" />\n+\n+\t<cxf:bus>\n+\t\t<cxf:features>\n+\t\t\t<cxf:logging />\n+\t\t</cxf:features>\n+\t</cxf:bus>\n+\n+    <bean id=\"transportSTSProviderBean\"\n+\t\tclass=\"org.apache.cxf.ws.security.sts.provider.SecurityTokenServiceProvider\">\n+\t\t<property name=\"issueOperation\" ref=\"transportIssueDelegate\"/>\n+\t\t<property name=\"validateOperation\" ref=\"transportValidateDelegate\"/>\n+\t</bean>\t\n+\n+\t<bean id=\"transportIssueDelegate\"\n+\t\tclass=\"org.apache.cxf.sts.operation.TokenIssueOperation\">\n+\t\t<property name=\"tokenProviders\" ref=\"transportTokenProviders\"/>\n+\t\t<property name=\"services\" ref=\"transportService\"/>\n+\t\t<property name=\"stsProperties\" ref=\"transportSTSProperties\"/>\n+\t\t<property name=\"claimsManager\" ref=\"claimsManager\"/>\n+\t</bean>\n+\t\n+\t<bean id=\"transportValidateDelegate\"\n+\t    class=\"org.apache.cxf.sts.operation.TokenValidateOperation\">\n+\t    <property name=\"tokenValidators\" ref=\"transportTokenValidators\"/>\n+\t\t<property name=\"stsProperties\" ref=\"transportSTSProperties\"/>\n+\t</bean>\n+\n+\t<util:list id=\"transportTokenProviders\">\n+\t\t<ref bean=\"transportSamlTokenProvider\" />\n+\t</util:list>\n+\n+\t<util:list id=\"transportTokenValidators\">\n+\t\t<ref bean=\"transportSamlTokenValidator\" />\n+\t</util:list>\n+\n+\t<bean id=\"transportSamlTokenProvider\" class=\"org.apache.cxf.sts.token.provider.SAMLTokenProvider\">\n+\t    <property name=\"attributeStatementProviders\" ref=\"attributeStatementProvidersList\" />\n+\t</bean>\n+\n+\t<bean id=\"transportSamlTokenValidator\" class=\"org.apache.cxf.sts.token.validator.SAMLTokenValidator\">\n+\t</bean>\n+\t\n+\t<bean id=\"transportX509TokenValidator\"\n+\t\tclass=\"org.apache.cxf.sts.token.validator.X509TokenValidator\">\n+    </bean>\n+    \n+    <bean id=\"transportUsernameTokenValidator\"\n+\t\tclass=\"org.apache.cxf.sts.token.validator.UsernameTokenValidator\">\n+    </bean>\n+\n+    <util:list id=\"attributeStatementProvidersList\">\n+\t\t<ref bean=\"claimsAttributeProvider\"/>\n+\t</util:list>\n+    \n+    <bean id=\"defaultAttributeProvider\"\n+\t\tclass=\"org.apache.cxf.sts.token.provider.DefaultAttributeStatementProvider\">\n+    </bean>\n+    \n+    <bean id=\"claimsAttributeProvider\"\n+\t\tclass=\"org.apache.cxf.sts.claims.ClaimsAttributeStatementProvider\">\n+    </bean>\n+    \n+    <import resource=\"userClaims.xml\" />\n+    \n+    <bean id=\"claimsManager\"\n+\t\tclass=\"org.apache.cxf.sts.claims.ClaimsManager\">\n+\t\t<property name=\"claimHandlers\" ref=\"claimHandlerList\" />\n+    </bean>\n+    \n+    <util:list id=\"claimHandlerList\">\n+\t\t<ref bean=\"fileClaimsHandler\"/>\n+\t</util:list>\n+    \n+    <bean id=\"fileClaimsHandler\"\n+\t\tclass=\"org.apache.cxf.fediz.service.sts.FileClaimsHandler\">\n+\t\t\n+\t\t<property name=\"userClaims\" ref=\"userClaims\" />\n+    </bean>\n+    \n+    <import resource=\"passwords.xml\" />\n+    \n+    <bean id=\"upCallBackHandler\"\n+\t\tclass=\"org.apache.cxf.fediz.service.sts.UsernamePasswordCallbackHandler\">\n+\t\t<property name=\"passwords\" ref=\"passwords\" />\n+    </bean>\n+    \n+    \n+    <bean id=\"transportService\"\n+        class=\"org.apache.cxf.sts.service.StaticService\">\n+        <property name=\"endpoints\" ref=\"transportEndpoints\"/>\n+    </bean>\n+    \n+    <util:list id=\"transportEndpoints\">\n+        <value>.*</value>\n+\t\t<value>https://localhost:(8081|8083)/doubleit/services/doubleittransport.*</value>\n+\t</util:list>\n+\t\n+\t<bean id=\"transportSTSProperties\"\n+\t     class=\"org.apache.cxf.sts.StaticSTSProperties\">\n+\t    <property name=\"signaturePropertiesFile\" value=\"stsKeystore.properties\"/>\n+\t\t<property name=\"signatureUsername\" value=\"mystskey\"/>\n+\t\t<property name=\"callbackHandlerClass\" value=\"org.apache.cxf.fediz.service.sts.PasswordCallbackHandler\"/>\n+\t\t<property name=\"encryptionPropertiesFile\" value=\"stsKeystore.properties\"/>\n+\t\t<property name=\"issuer\" value=\"DoubleItSTSIssuer\"/>\n+\t\t<property name=\"encryptionUsername\" value=\"myservicekey\"/>\n+    </bean>\n+     \n+\t<jaxws:endpoint id=\"transportSTS1\"\n+\t\timplementor=\"#transportSTSProviderBean\"\n+\t\taddress=\"/STSService\" \n+        wsdlLocation=\"/WEB-INF/wsdl/ws-trust-1.4-service.wsdl\"\n+        xmlns:ns1=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/\"\n+        serviceName=\"ns1:SecurityTokenService\"\n+        endpointName=\"ns1:TransportUT_Port\">\n+        <jaxws:properties>\n+            <entry key=\"ws-security.callback-handler\" value-ref=\"upCallBackHandler\"/>\n+        </jaxws:properties> \n+\t</jaxws:endpoint>\n+\n+</beans>\n+"
        },
        {
            "sha": "05da9fa912a1515ac98866e87e45f1d8ba07e8bb",
            "filename": "fediz-idp-sts/src/main/webapp/WEB-INF/cxf-ut.xml",
            "status": "added",
            "additions": 88,
            "deletions": 0,
            "changes": 88,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fcxf-ut.xml",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fcxf-ut.xml",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fcxf-ut.xml?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,88 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans \n+    xmlns=\"http://www.springframework.org/schema/beans\"\n+    xmlns:cxf=\"http://cxf.apache.org/core\"\n+    xmlns:jaxws=\"http://cxf.apache.org/jaxws\"\n+    xmlns:test=\"http://apache.org/hello_world_soap_http\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xmlns:util=\"http://www.springframework.org/schema/util\"\n+    xsi:schemaLocation=\"\n+        http://cxf.apache.org/core\n+        http://cxf.apache.org/schemas/core.xsd\n+        http://www.springframework.org/schema/beans\n+        http://www.springframework.org/schema/beans/spring-beans-2.0.xsd\n+        http://cxf.apache.org/jaxws                                     \n+        http://cxf.apache.org/schemas/jaxws.xsd\n+        http://www.springframework.org/schema/util\n+        http://www.springframework.org/schema/util/spring-util-2.0.xsd\">\n+    <import resource=\"cxf-transport.xml\"/>    \n+\n+    <cxf:bus>\n+        <cxf:features>\n+            <cxf:logging/>\n+        </cxf:features>\n+    </cxf:bus>\n+\n+    <bean id=\"utSTSProviderBean\"\n+\t\tclass=\"org.apache.cxf.ws.security.sts.provider.SecurityTokenServiceProvider\">\n+\t\t<property name=\"issueOperation\" ref=\"utIssueDelegate\"/>\n+\t\t<property name=\"validateOperation\" ref=\"utValidateDelegate\"/>\n+\t</bean>\t\n+\n+\t<bean id=\"utIssueDelegate\"\n+\t\tclass=\"org.apache.cxf.sts.operation.TokenIssueOperation\">\n+\t\t<property name=\"tokenProviders\" ref=\"utSamlTokenProvider\"/>\n+\t\t<property name=\"services\" ref=\"utService\"/>\n+\t\t<property name=\"stsProperties\" ref=\"utSTSProperties\"/>\n+\t</bean>\n+\t\n+\t<bean id=\"utValidateDelegate\"\n+\t    class=\"org.apache.cxf.sts.operation.TokenValidateOperation\">\n+\t    <property name=\"tokenValidators\" ref=\"utSamlTokenValidator\"/>\n+\t\t<property name=\"stsProperties\" ref=\"utSTSProperties\"/>\n+\t</bean>\n+\t\n+\t<bean id=\"utSamlTokenProvider\"\n+\t\tclass=\"org.apache.cxf.sts.token.provider.SAMLTokenProvider\">\n+    </bean>\n+    \n+    <bean id=\"utSamlTokenValidator\"\n+\t\tclass=\"org.apache.cxf.sts.token.validator.SAMLTokenValidator\">\n+    </bean>\n+    \n+    <bean id=\"utService\"\n+        class=\"org.apache.cxf.sts.service.StaticService\">\n+        <property name=\"endpoints\" ref=\"utEndpoints\"/>\n+        <property name=\"encryptionName\" value=\"myservicekey\"/>\n+    </bean>\n+    \n+    <util:list id=\"utEndpoints\">\n+\t\t<value>http://localhost:(8080|8082)/doubleit/services/doubleit(UT|.*symmetric.*)</value>\n+\t</util:list>\n+\t\n+\t<bean id=\"utSTSProperties\"\n+\t     class=\"org.apache.cxf.sts.StaticSTSProperties\">\n+\t    <property name=\"signatureProperties\" value=\"stsKeystore.properties\"/>\n+\t\t<property name=\"signatureUsername\" value=\"mystskey\"/>\n+\t\t<property name=\"callbackHandlerClass\" value=\"org.apache.cxf.sts.war.PasswordCallbackHandler\"/>\n+\t\t<property name=\"encryptionProperties\" value=\"stsKeystore.properties\"/>\n+\t\t<property name=\"issuer\" value=\"DoubleItSTSIssuer\"/>\n+    </bean>\n+    \n+\t<jaxws:endpoint id=\"UTSTS\"\n+\t\timplementor=\"#utSTSProviderBean\"\n+\t\taddress=\"/UT\" \n+        wsdlLocation=\"/WEB-INF/wsdl/ws-trust-1.4-service.wsdl\"\n+        xmlns:ns1=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/\"\n+        serviceName=\"ns1:SecurityTokenService\"\n+        endpointName=\"ns1:UT_Port\">\n+        <jaxws:properties>\n+            <entry key=\"ws-security.callback-handler\" value=\"org.apache.cxf.sts.war.PasswordCallbackHandler\"/>\n+            <entry key=\"ws-security.signature.properties\" value=\"stsKeystore.properties\"/>\n+            <entry key=\"ws-security.signature.username\" value=\"mystskey\"/>\n+        </jaxws:properties> \n+\t</jaxws:endpoint>\n+\t\n+\n+</beans>\n+"
        },
        {
            "sha": "a8567cdafc585968202643ae06ec93c00bb3421f",
            "filename": "fediz-idp-sts/src/main/webapp/WEB-INF/cxf-x509.xml",
            "status": "added",
            "additions": 90,
            "deletions": 0,
            "changes": 90,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fcxf-x509.xml",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fcxf-x509.xml",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fcxf-x509.xml?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,90 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans \n+    xmlns=\"http://www.springframework.org/schema/beans\"\n+    xmlns:cxf=\"http://cxf.apache.org/core\"\n+    xmlns:jaxws=\"http://cxf.apache.org/jaxws\"\n+    xmlns:test=\"http://apache.org/hello_world_soap_http\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xmlns:util=\"http://www.springframework.org/schema/util\"\n+    xsi:schemaLocation=\"\n+        http://cxf.apache.org/core\n+        http://cxf.apache.org/schemas/core.xsd\n+        http://www.springframework.org/schema/beans\n+        http://www.springframework.org/schema/beans/spring-beans-2.0.xsd\n+        http://cxf.apache.org/jaxws                                     \n+        http://cxf.apache.org/schemas/jaxws.xsd\n+        http://www.springframework.org/schema/util\n+        http://www.springframework.org/schema/util/spring-util-2.0.xsd\">\n+    <import resource=\"cxf-transport.xml\"/>    \n+\n+    <cxf:bus>\n+        <cxf:features>\n+            <cxf:logging/>\n+        </cxf:features>\n+    </cxf:bus>\n+\n+    <bean id=\"x509STSProviderBean\"\n+\t\tclass=\"org.apache.cxf.ws.security.sts.provider.SecurityTokenServiceProvider\">\n+\t\t<property name=\"issueOperation\" ref=\"x509IssueDelegate\"/>\n+\t\t<property name=\"validateOperation\" ref=\"x509ValidateDelegate\"/>\n+\t</bean>\t\n+\n+\t<bean id=\"x509IssueDelegate\"\n+\t\tclass=\"org.apache.cxf.sts.operation.TokenIssueOperation\">\n+\t\t<property name=\"tokenProviders\" ref=\"x509SamlTokenProvider\"/>\n+\t\t<property name=\"services\" ref=\"x509Service\"/>\n+\t\t<property name=\"stsProperties\" ref=\"x509STSProperties\"/>\n+\t</bean>\n+\t\n+\t<bean id=\"x509ValidateDelegate\"\n+\t    class=\"org.apache.cxf.sts.operation.TokenValidateOperation\">\n+\t    <property name=\"tokenValidators\" ref=\"x509SamlTokenValidator\"/>\n+\t\t<property name=\"stsProperties\" ref=\"x509STSProperties\"/>\n+\t</bean>\n+\t\n+\t<bean id=\"x509SamlTokenProvider\"\n+\t\tclass=\"org.apache.cxf.sts.token.provider.SAMLTokenProvider\">\n+    </bean>\n+    \n+    <bean id=\"x509SamlTokenValidator\"\n+\t\tclass=\"org.apache.cxf.sts.token.validator.SAMLTokenValidator\">\n+    </bean>\n+    \n+    <bean id=\"x509Service\"\n+        class=\"org.apache.cxf.sts.service.StaticService\">\n+        <property name=\"endpoints\" ref=\"x509Endpoints\"/>\n+        <property name=\"encryptionName\" value=\"myservicekey\"/>\n+    </bean>\n+    \n+    <util:list id=\"x509Endpoints\">\n+\t\t<value>http://localhost:8082/doubleit/services/doubleitsymmetric.*</value>\n+\t\t<value>http://localhost:8082/doubleit/services/doubleitasymmetric.*</value>\n+\t</util:list>\n+\t\n+\t<bean id=\"x509STSProperties\"\n+\t     class=\"org.apache.cxf.sts.StaticSTSProperties\">\n+\t    <property name=\"signatureProperties\" value=\"stsKeystore.properties\"/>\n+\t\t<property name=\"signatureUsername\" value=\"mystskey\"/>\n+\t\t<property name=\"callbackHandlerClass\" value=\"org.apache.cxf.sts.war.PasswordCallbackHandler\"/>\n+\t\t<property name=\"encryptionProperties\" value=\"stsKeystore.properties\"/>\n+\t\t<property name=\"issuer\" value=\"DoubleItSTSIssuer\"/>\n+    </bean>\n+    \n+\t<jaxws:endpoint id=\"X509STS\"\n+\t\timplementor=\"#x509STSProviderBean\"\n+\t\taddress=\"/X509\" \n+        wsdlLocation=\"/WEB-INF/wsdl/ws-trust-1.4-service.wsdl\"\n+        xmlns:ns1=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/\"\n+        serviceName=\"ns1:SecurityTokenService\"\n+        endpointName=\"ns1:X509_Port\">\n+        <jaxws:properties>\n+            <entry key=\"ws-security.callback-handler\" value=\"org.apache.cxf.sts.war.PasswordCallbackHandler\"/>\n+            <entry key=\"ws-security.signature.properties\" value=\"stsKeystore.properties\"/>\n+            <entry key=\"ws-security.signature.username\" value=\"mystskey\"/>\n+            <entry key=\"ws-security.encryption.username\" value=\"useReqSigCert\"/>\n+        </jaxws:properties> \n+\t</jaxws:endpoint>\n+\t\n+\n+</beans>\n+"
        },
        {
            "sha": "ad3c8dcae5c25b855a188722ad3fe60b4168bf79",
            "filename": "fediz-idp-sts/src/main/webapp/WEB-INF/passwords.xml",
            "status": "added",
            "additions": 20,
            "deletions": 0,
            "changes": 20,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fpasswords.xml",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fpasswords.xml",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fpasswords.xml?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:util=\"http://www.springframework.org/schema/util\"\n+\txsi:schemaLocation=\"\n+        http://www.springframework.org/schema/beans\n+        http://www.springframework.org/schema/beans/spring-beans-2.0.xsd\n+        http://www.springframework.org/schema/util\n+        http://www.springframework.org/schema/util/spring-util-2.0.xsd\">\n+\n+\n+\t<util:map id=\"passwords\">\n+\t\t<entry key=\"alice\"\n+\t\t\tvalue=\"ecila\" />\n+\t\t<entry key=\"bob\"\n+\t\t\tvalue=\"bob\" />\n+\t\t<entry key=\"ted\"\n+\t\t\tvalue=\"det\" />\n+\t</util:map>\n+\n+</beans>\n\\ No newline at end of file"
        },
        {
            "sha": "33cd6d3fd007da7343654704374e88036c057e1e",
            "filename": "fediz-idp-sts/src/main/webapp/WEB-INF/userClaims.xml",
            "status": "added",
            "additions": 53,
            "deletions": 0,
            "changes": 53,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2FuserClaims.xml",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2FuserClaims.xml",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2FuserClaims.xml?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,53 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:util=\"http://www.springframework.org/schema/util\"\n+\txsi:schemaLocation=\"\n+        http://www.springframework.org/schema/beans\n+        http://www.springframework.org/schema/beans/spring-beans-2.0.xsd\n+        http://www.springframework.org/schema/util\n+        http://www.springframework.org/schema/util/spring-util-2.0.xsd\">\n+\n+\t<util:map id=\"userClaims\">\n+\t\t<entry key=\"alice\"\n+\t\t\tvalue-ref=\"aliceClaims\" />\n+\t\t<entry key=\"bob\"\n+\t\t\tvalue-ref=\"bobClaims\" />\n+\t\t<entry key=\"ted\"\n+\t\t\tvalue-ref=\"tedClaims\" />\n+\t</util:map>\n+\t\n+\t<util:map id=\"aliceClaims\">\n+\t\t<entry key=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname\"\n+\t\t\tvalue=\"Alice\" />\n+\t\t<entry key=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname\"\n+\t\t\tvalue=\"Smith\" />\n+\t\t<entry key=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\"\n+\t\t\tvalue=\"alice@mycompany.org\" />\n+\t\t<entry key=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role\"\n+\t\t\tvalue=\"User\" />\n+\t\t\t\n+\t</util:map>\n+\t\n+\t<util:map id=\"bobClaims\">\n+\t\t<entry key=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname\"\n+\t\t\tvalue=\"Bob\" />\n+\t\t<entry key=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname\"\n+\t\t\tvalue=\"Windsor\" />\n+\t\t<entry key=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\"\n+\t\t\tvalue=\"bobwindsor@idp.org\" />\n+\t\t<entry key=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role\"\n+\t\t\tvalue=\"User,Manager,Admin\" />\n+\t</util:map>\n+\t\n+\t<util:map id=\"tedClaims\">\n+\t\t<entry key=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname\"\n+\t\t\tvalue=\"Ted\" />\n+\t\t<entry key=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname\"\n+\t\t\tvalue=\"Cooper\" />\n+\t\t<entry key=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\"\n+\t\t\tvalue=\"tcooper@hereiam.org\" />\n+\t\t<entry key=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role\"\n+\t\t\tvalue=\"\" />\t\t\t\n+\t</util:map>\n+\n+</beans>\n\\ No newline at end of file"
        },
        {
            "sha": "39864926e3fbec00fa0899e2cf82ff9d352befde",
            "filename": "fediz-idp-sts/src/main/webapp/WEB-INF/web.xml",
            "status": "added",
            "additions": 24,
            "deletions": 0,
            "changes": 24,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,24 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<web-app version=\"2.4\" xmlns=\"http://java.sun.com/xml/ns/j2ee\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee \r\n+         http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\">\r\n+\t<display-name>CXF STS</display-name>\r\n+\t<servlet>\r\n+\t\t<servlet-name>sts</servlet-name>\r\n+\t\t<servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>\r\n+\t\t<!-- <load-on-startup>1</load-on-startup> -->\r\n+\t\t<init-param>\r\n+\t\t\t<param-name>config-location</param-name>\r\n+\t\t\t<param-value>WEB-INF/cxf-servlet.xml</param-value>\r\n+\t\t</init-param>\r\n+\t</servlet>\r\n+\t<servlet-mapping>\r\n+\t\t<servlet-name>sts</servlet-name>\r\n+\t\t<url-pattern>/*</url-pattern>\r\n+\t</servlet-mapping>\r\n+\t<session-config>\r\n+\t\t<session-timeout>60</session-timeout>\r\n+\t</session-config>\r\n+\t\r\n+</web-app>\r"
        },
        {
            "sha": "89ae7fdb46bf07a920104be56b920ff85d659411",
            "filename": "fediz-idp-sts/src/main/webapp/WEB-INF/wsdl/ws-trust-1.4-service.wsdl",
            "status": "added",
            "additions": 846,
            "deletions": 0,
            "changes": 846,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fwsdl%2Fws-trust-1.4-service.wsdl",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fwsdl%2Fws-trust-1.4-service.wsdl",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fwsdl%2Fws-trust-1.4-service.wsdl?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,846 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<wsdl:definitions\n+        targetNamespace=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/\"\n+        xmlns:tns=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/\"\n+        xmlns:wstrust=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/\"\n+        xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\"\n+        xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\"\n+        xmlns:wsap10=\"http://www.w3.org/2006/05/addressing/wsdl\"\n+        xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\"\n+        xmlns:wsp=\"http://www.w3.org/ns/ws-policy\">\n+\n+  <wsdl:import namespace=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/\" location=\"ws-trust-1.4.wsdl\"/>\n+\n+  <wsdl:binding name=\"UT_Binding\" type=\"wstrust:STS\">\n+    <wsp:PolicyReference URI=\"#UT_policy\" />\n+  \t<soap:binding style=\"document\"\n+  \t\ttransport=\"http://schemas.xmlsoap.org/soap/http\" />\n+  \t<wsdl:operation name=\"Issue\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue\" />\n+  \t\t<wsdl:input>\n+  \t\t    <wsp:PolicyReference\n+               URI=\"#Input_policy\" />\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t    <wsp:PolicyReference\n+               URI=\"#Output_policy\" />\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"Validate\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Validate\" />\n+  \t\t<wsdl:input>\n+  \t\t    <wsp:PolicyReference\n+               URI=\"#Input_policy\" />\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t    <wsp:PolicyReference\n+               URI=\"#Output_policy\" />\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"Cancel\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Cancel\" />\n+  \t\t<wsdl:input>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"Renew\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Renew\" />\n+  \t\t<wsdl:input>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"KeyExchangeToken\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/KeyExchangeToken\" />\n+  \t\t<wsdl:input>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"RequestCollection\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/RequestCollection\" />\n+  \t\t<wsdl:input>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  </wsdl:binding>\n+  \n+  <wsdl:binding name=\"UTEncrypted_Binding\" type=\"wstrust:STS\">\n+    <wsp:PolicyReference URI=\"#UTEncrypted_policy\" />\n+  \t<soap:binding style=\"document\"\n+  \t\ttransport=\"http://schemas.xmlsoap.org/soap/http\" />\n+  \t<wsdl:operation name=\"Issue\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue\" />\n+  \t\t<wsdl:input>\n+  \t\t    <wsp:PolicyReference\n+               URI=\"#Input_policy\" />\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t    <wsp:PolicyReference\n+               URI=\"#Output_policy\" />\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"Validate\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Validate\" />\n+  \t\t<wsdl:input>\n+  \t\t    <wsp:PolicyReference\n+               URI=\"#Input_policy\" />\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t    <wsp:PolicyReference\n+               URI=\"#Output_policy\" />\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"Cancel\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Cancel\" />\n+  \t\t<wsdl:input>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"Renew\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Renew\" />\n+  \t\t<wsdl:input>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"KeyExchangeToken\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/KeyExchangeToken\" />\n+  \t\t<wsdl:input>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"RequestCollection\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/RequestCollection\" />\n+  \t\t<wsdl:input>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  </wsdl:binding>\n+  \n+  <wsdl:binding name=\"X509_Binding\" type=\"wstrust:STS\">\n+    <wsp:PolicyReference URI=\"#X509_policy\" />\n+  \t<soap:binding style=\"document\"\n+  \t\ttransport=\"http://schemas.xmlsoap.org/soap/http\" />\n+  \t<wsdl:operation name=\"Issue\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue\" />\n+  \t\t<wsdl:input>\n+  \t\t    <wsp:PolicyReference\n+               URI=\"#Input_policy\" />\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t    <wsp:PolicyReference\n+               URI=\"#Output_policy\" />\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"Validate\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Validate\" />\n+  \t\t<wsdl:input>\n+  \t\t    <wsp:PolicyReference\n+               URI=\"#Input_policy\" />\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t    <wsp:PolicyReference\n+               URI=\"#Output_policy\" />\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"Cancel\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Cancel\" />\n+  \t\t<wsdl:input>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"Renew\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Renew\" />\n+  \t\t<wsdl:input>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"KeyExchangeToken\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/KeyExchangeToken\" />\n+  \t\t<wsdl:input>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"RequestCollection\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/RequestCollection\" />\n+  \t\t<wsdl:input>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  </wsdl:binding>\n+  \n+  <wsdl:binding name=\"Transport_Binding\" type=\"wstrust:STS\">\n+    <wsp:PolicyReference URI=\"#Transport_policy\" />\n+  \t<soap:binding style=\"document\"\n+  \t\ttransport=\"http://schemas.xmlsoap.org/soap/http\" />\n+  \t<wsdl:operation name=\"Issue\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue\" />\n+  \t\t<wsdl:input>\n+  \t\t    <wsp:PolicyReference\n+               URI=\"#Input_policy\" />\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t    <wsp:PolicyReference\n+               URI=\"#Output_policy\" />\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"Validate\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Validate\" />\n+  \t\t<wsdl:input>\n+  \t\t    <wsp:PolicyReference\n+               URI=\"#Input_policy\" />\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t    <wsp:PolicyReference\n+               URI=\"#Output_policy\" />\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"Cancel\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Cancel\" />\n+  \t\t<wsdl:input>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"Renew\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Renew\" />\n+  \t\t<wsdl:input>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"KeyExchangeToken\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/KeyExchangeToken\" />\n+  \t\t<wsdl:input>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"RequestCollection\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/RequestCollection\" />\n+  \t\t<wsdl:input>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  </wsdl:binding>\n+  <wsdl:binding name=\"TransportUT_Binding\" type=\"wstrust:STS\">\n+    <wsp:PolicyReference URI=\"#TransportUT_policy\" />\n+  \t<soap:binding style=\"document\"\n+  \t\ttransport=\"http://schemas.xmlsoap.org/soap/http\" />\n+  \t<wsdl:operation name=\"Issue\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue\" />\n+  \t\t<wsdl:input>\n+  \t\t    <wsp:PolicyReference\n+               URI=\"#Input_policy\" />\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t    <wsp:PolicyReference\n+               URI=\"#Output_policy\" />\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"Validate\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Validate\" />\n+  \t\t<wsdl:input>\n+  \t\t    <wsp:PolicyReference\n+               URI=\"#Input_policy\" />\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t    <wsp:PolicyReference\n+               URI=\"#Output_policy\" />\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"Cancel\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Cancel\" />\n+  \t\t<wsdl:input>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"Renew\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Renew\" />\n+  \t\t<wsdl:input>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"KeyExchangeToken\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/KeyExchangeToken\" />\n+  \t\t<wsdl:input>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"RequestCollection\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/RequestCollection\" />\n+  \t\t<wsdl:input>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  </wsdl:binding>\n+  <wsdl:binding name=\"TransportKerberos_Binding\" type=\"wstrust:STS\">\n+    <wsp:PolicyReference URI=\"#TransportKerberos_policy\" />\n+  \t<soap:binding style=\"document\"\n+  \t\ttransport=\"http://schemas.xmlsoap.org/soap/http\" />\n+  \t<wsdl:operation name=\"Issue\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue\" />\n+  \t\t<wsdl:input>\n+  \t\t    <wsp:PolicyReference\n+               URI=\"#Input_policy\" />\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t    <wsp:PolicyReference\n+               URI=\"#Output_policy\" />\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"Validate\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Validate\" />\n+  \t\t<wsdl:input>\n+  \t\t    <wsp:PolicyReference\n+               URI=\"#Input_policy\" />\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t    <wsp:PolicyReference\n+               URI=\"#Output_policy\" />\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"Cancel\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Cancel\" />\n+  \t\t<wsdl:input>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"Renew\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Renew\" />\n+  \t\t<wsdl:input>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"KeyExchangeToken\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/KeyExchangeToken\" />\n+  \t\t<wsdl:input>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  \t<wsdl:operation name=\"RequestCollection\">\n+  \t\t<soap:operation\n+  \t\t\tsoapAction=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/RequestCollection\" />\n+  \t\t<wsdl:input>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:input>\n+  \t\t<wsdl:output>\n+  \t\t\t<soap:body use=\"literal\" />\n+  \t\t</wsdl:output>\n+  \t</wsdl:operation>\n+  </wsdl:binding>  \n+  <wsdl:service name=\"SecurityTokenService\">\n+      <wsdl:port name=\"UT_Port\" binding=\"tns:UT_Binding\">\n+         <soap:address location=\"http://localhost:8080/jaxws-sts/sts\" />\n+      </wsdl:port>\n+      <wsdl:port name=\"X509_Port\" binding=\"tns:X509_Binding\">\n+         <soap:address location=\"http://localhost:8080/jaxws-sts/sts\" />\n+      </wsdl:port>\n+      <wsdl:port name=\"Transport_Port\" binding=\"tns:Transport_Binding\">\n+         <soap:address location=\"http://localhost:8080/jaxws-sts/sts\" />\n+      </wsdl:port>\n+       <wsdl:port name=\"UTEncrypted_Port\" binding=\"tns:UTEncrypted_Binding\">\n+         <soap:address location=\"http://localhost:8080/jaxws-sts/sts\" />\n+      </wsdl:port>\n+       <wsdl:port name=\"TransportUT_Port\" binding=\"tns:TransportUT_Binding\">\n+         <soap:address location=\"http://localhost:8080/jaxws-sts/sts\" />\n+      </wsdl:port>      \n+      <wsdl:port name=\"TransportKerberos_Port\" binding=\"tns:TransportKerberos_Binding\">\n+         <soap:address location=\"http://localhost:8080/jaxws-sts/sts\" />\n+      </wsdl:port>        \n+  </wsdl:service>\n+  \n+  <wsp:Policy wsu:Id=\"UT_policy\">\n+      <wsp:ExactlyOne>\n+         <wsp:All>\n+            <wsap10:UsingAddressing/>\n+            <sp:SymmetricBinding\n+               xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\">\n+               <wsp:Policy>\n+                  <sp:ProtectionToken>\n+                     <wsp:Policy>\n+                        <sp:X509Token\n+                           sp:IncludeToken=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/Never\">\n+                           <wsp:Policy>\n+                              <sp:RequireDerivedKeys />\n+                              <sp:RequireThumbprintReference />\n+                              <sp:WssX509V3Token10 />\n+                           </wsp:Policy>\n+                        </sp:X509Token>\n+                     </wsp:Policy>\n+                  </sp:ProtectionToken>\n+                  <sp:AlgorithmSuite>\n+                     <wsp:Policy>\n+                        <sp:Basic256 />\n+                     </wsp:Policy>\n+                  </sp:AlgorithmSuite>\n+                  <sp:Layout>\n+                     <wsp:Policy>\n+                        <sp:Lax />\n+                     </wsp:Policy>\n+                  </sp:Layout>\n+                  <sp:IncludeTimestamp />\n+                  <sp:EncryptSignature />\n+                  <sp:OnlySignEntireHeadersAndBody />\n+               </wsp:Policy>\n+            </sp:SymmetricBinding>\n+            <sp:SignedSupportingTokens\n+               xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\">\n+               <wsp:Policy>\n+                  <sp:UsernameToken\n+                     sp:IncludeToken=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient\">\n+                     <wsp:Policy>\n+                        <sp:WssUsernameToken10 />\n+                     </wsp:Policy>\n+                  </sp:UsernameToken>\n+               </wsp:Policy>\n+            </sp:SignedSupportingTokens>\n+            <sp:Wss11\n+               xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\">\n+               <wsp:Policy>\n+                  <sp:MustSupportRefKeyIdentifier />\n+                  <sp:MustSupportRefIssuerSerial />\n+                  <sp:MustSupportRefThumbprint />\n+                  <sp:MustSupportRefEncryptedKey />\n+               </wsp:Policy>\n+            </sp:Wss11>\n+            <sp:Trust13\n+               xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\">\n+               <wsp:Policy>\n+                  <sp:MustSupportIssuedTokens />\n+                  <sp:RequireClientEntropy />\n+                  <sp:RequireServerEntropy />\n+               </wsp:Policy>\n+            </sp:Trust13>\n+         </wsp:All>\n+      </wsp:ExactlyOne>\n+   </wsp:Policy>\n+   \n+   <wsp:Policy wsu:Id=\"UTEncrypted_policy\">\n+      <wsp:ExactlyOne>\n+         <wsp:All>\n+            <wsap10:UsingAddressing/>\n+            <sp:SymmetricBinding\n+               xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\">\n+               <wsp:Policy>\n+                  <sp:ProtectionToken>\n+                     <wsp:Policy>\n+                        <sp:X509Token\n+                           sp:IncludeToken=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/Never\">\n+                           <wsp:Policy>\n+                              <sp:RequireDerivedKeys />\n+                              <sp:RequireThumbprintReference />\n+                              <sp:WssX509V3Token10 />\n+                           </wsp:Policy>\n+                        </sp:X509Token>\n+                     </wsp:Policy>\n+                  </sp:ProtectionToken>\n+                  <sp:AlgorithmSuite>\n+                     <wsp:Policy>\n+                        <sp:Basic256 />\n+                     </wsp:Policy>\n+                  </sp:AlgorithmSuite>\n+                  <sp:Layout>\n+                     <wsp:Policy>\n+                        <sp:Lax />\n+                     </wsp:Policy>\n+                  </sp:Layout>\n+                  <sp:IncludeTimestamp />\n+                  <sp:EncryptSignature />\n+                  <sp:OnlySignEntireHeadersAndBody />\n+               </wsp:Policy>\n+            </sp:SymmetricBinding>\n+            <sp:SignedSupportingTokens\n+               xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\">\n+               <wsp:Policy>\n+                  <sp:UsernameToken\n+                     sp:IncludeToken=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient\">\n+                     <wsp:Policy>\n+                        <sp:WssUsernameToken10 />\n+                     </wsp:Policy>\n+                  </sp:UsernameToken>\n+               </wsp:Policy>\n+            </sp:SignedSupportingTokens>\n+            <sp:Wss11\n+               xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\">\n+               <wsp:Policy>\n+                  <sp:MustSupportRefKeyIdentifier />\n+                  <sp:MustSupportRefIssuerSerial />\n+                  <sp:MustSupportRefThumbprint />\n+                  <sp:MustSupportRefEncryptedKey />\n+               </wsp:Policy>\n+            </sp:Wss11>\n+            <sp:Trust13\n+               xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\">\n+               <wsp:Policy>\n+                  <sp:MustSupportIssuedTokens />\n+                  <sp:RequireClientEntropy />\n+                  <sp:RequireServerEntropy />\n+               </wsp:Policy>\n+            </sp:Trust13>\n+         </wsp:All>\n+      </wsp:ExactlyOne>\n+   </wsp:Policy>\n+   \n+   <wsp:Policy wsu:Id=\"X509_policy\">\n+      <wsp:ExactlyOne>\n+         <wsp:All>\n+            <wsap10:UsingAddressing/>\n+            <sp:AsymmetricBinding\n+               xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\">\n+               <wsp:Policy>\n+                  <sp:InitiatorToken>\n+                     <wsp:Policy>\n+                        <sp:X509Token\n+                           sp:IncludeToken=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient\">\n+                           <wsp:Policy>\n+                              <sp:WssX509V3Token10 />\n+                           </wsp:Policy>\n+                        </sp:X509Token>\n+                     </wsp:Policy>\n+                  </sp:InitiatorToken>\n+                  <sp:RecipientToken>\n+                     <wsp:Policy>\n+                        <sp:X509Token\n+                           sp:IncludeToken=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/Never\">\n+                           <wsp:Policy>\n+                              <sp:WssX509V3Token10 />\n+                              <sp:RequireIssuerSerialReference />\n+                           </wsp:Policy>\n+                        </sp:X509Token>\n+                     </wsp:Policy>\n+                  </sp:RecipientToken>\n+                  <sp:AlgorithmSuite>\n+                     <wsp:Policy>\n+                        <sp:TripleDesRsa15 />\n+                     </wsp:Policy>\n+                  </sp:AlgorithmSuite>\n+                  <sp:Layout>\n+                     <wsp:Policy>\n+                        <sp:Lax />\n+                     </wsp:Policy>\n+                  </sp:Layout>\n+                  <sp:IncludeTimestamp />\n+                  <sp:EncryptSignature />\n+                  <sp:OnlySignEntireHeadersAndBody />\n+               </wsp:Policy>\n+            </sp:AsymmetricBinding>\n+            <sp:Wss11\n+               xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\">\n+               <wsp:Policy>\n+                  <sp:MustSupportRefKeyIdentifier />\n+                  <sp:MustSupportRefIssuerSerial />\n+                  <sp:MustSupportRefThumbprint />\n+                  <sp:MustSupportRefEncryptedKey />\n+               </wsp:Policy>\n+            </sp:Wss11>\n+            <sp:Trust13\n+               xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\">\n+               <wsp:Policy>\n+                  <sp:MustSupportIssuedTokens />\n+                  <sp:RequireClientEntropy />\n+                  <sp:RequireServerEntropy />\n+               </wsp:Policy>\n+            </sp:Trust13>\n+         </wsp:All>\n+      </wsp:ExactlyOne>\n+    </wsp:Policy>\n+    \n+    <wsp:Policy wsu:Id=\"TransportUT_policy\">\n+      <wsp:ExactlyOne>\n+         <wsp:All>\n+            <!--<wsap10:UsingAddressing/>-->\n+            <sp:TransportBinding\n+               xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\">\n+               <wsp:Policy>\n+                  <sp:TransportToken>\n+                     <wsp:Policy>\n+                        <sp:HttpsToken RequireClientCertificate=\"false\"/>\n+                     </wsp:Policy>\n+                  </sp:TransportToken>\n+                  <sp:AlgorithmSuite>\n+                     <wsp:Policy>\n+                        <sp:TripleDesRsa15 />\n+                     </wsp:Policy>\n+                  </sp:AlgorithmSuite>\n+                  <sp:Layout>\n+                     <wsp:Policy>\n+                        <sp:Lax />\n+                     </wsp:Policy>\n+                  </sp:Layout>\n+                  <!--<sp:IncludeTimestamp />-->\n+               </wsp:Policy>\n+            </sp:TransportBinding>\n+            <sp:SignedSupportingTokens\n+               xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\">\n+               <wsp:Policy>\n+                  <sp:UsernameToken\n+                     sp:IncludeToken=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient\">\n+                     <wsp:Policy>\n+                        <sp:WssUsernameToken10 />\n+                     </wsp:Policy>\n+                  </sp:UsernameToken>\n+               </wsp:Policy>\n+            </sp:SignedSupportingTokens>\n+            <sp:Wss11\n+               xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\">\n+               <wsp:Policy>\n+                  <sp:MustSupportRefKeyIdentifier />\n+                  <sp:MustSupportRefIssuerSerial />\n+                  <sp:MustSupportRefThumbprint />\n+                  <sp:MustSupportRefEncryptedKey />\n+               </wsp:Policy>\n+            </sp:Wss11>\n+            <sp:Trust13\n+               xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\">\n+               <wsp:Policy>\n+                  <sp:MustSupportIssuedTokens />\n+                  <sp:RequireClientEntropy />\n+                  <sp:RequireServerEntropy />\n+               </wsp:Policy>\n+            </sp:Trust13>\n+         </wsp:All>\n+      </wsp:ExactlyOne>\n+   </wsp:Policy>\n+\n+    <wsp:Policy wsu:Id=\"TransportKerberos_policy\">\n+      <wsp:ExactlyOne>\n+         <wsp:All>\n+            <!--<wsap10:UsingAddressing/>-->\n+            <sp:TransportBinding\n+               xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\">\n+               <wsp:Policy>\n+                  <sp:TransportToken>\n+                     <wsp:Policy>\n+                        <sp:HttpsToken RequireClientCertificate=\"false\"/>\n+                     </wsp:Policy>\n+                  </sp:TransportToken>\n+                  <sp:AlgorithmSuite>\n+                     <wsp:Policy>\n+                        <sp:TripleDesRsa15 />\n+                     </wsp:Policy>\n+                  </sp:AlgorithmSuite>\n+                  <sp:Layout>\n+                     <wsp:Policy>\n+                        <sp:Lax />\n+                     </wsp:Policy>\n+                  </sp:Layout>\n+                  <!--<sp:IncludeTimestamp />-->\n+               </wsp:Policy>\n+            </sp:TransportBinding>\n+            <sp:SupportingTokens\n+               xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\">\n+               <wsp:Policy>\n+                  <sp:KerberosToken\n+                      sp:IncludeToken=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient\">\n+                      <wsp:Policy>\n+                          <!--<sp:WssKerberosV5ApReqToken11/>-->\n+                          <sp:WssGssKerberosV5ApReqToken11/>\n+                      </wsp:Policy>\n+                  </sp:KerberosToken>                  \n+               </wsp:Policy>\n+            </sp:SupportingTokens>\n+            <sp:Wss11\n+               xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\">\n+               <wsp:Policy>\n+                  <sp:MustSupportRefKeyIdentifier />\n+                  <sp:MustSupportRefIssuerSerial />\n+                  <sp:MustSupportRefThumbprint />\n+                  <sp:MustSupportRefEncryptedKey />\n+               </wsp:Policy>\n+            </sp:Wss11>\n+            <sp:Trust13\n+               xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\">\n+               <wsp:Policy>\n+                  <sp:MustSupportIssuedTokens />\n+                  <sp:RequireClientEntropy />\n+                  <sp:RequireServerEntropy />\n+               </wsp:Policy>\n+            </sp:Trust13>\n+         </wsp:All>\n+      </wsp:ExactlyOne>\n+   </wsp:Policy>\n+   \n+   \n+   <wsp:Policy wsu:Id=\"Input_policy\">\n+      <wsp:ExactlyOne>\n+         <wsp:All>\n+            <sp:SignedParts\n+               xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\">\n+               <sp:Body />\n+               <sp:Header Name=\"To\"\n+                  Namespace=\"http://www.w3.org/2005/08/addressing\" />\n+               <sp:Header Name=\"From\"\n+                  Namespace=\"http://www.w3.org/2005/08/addressing\" />\n+               <sp:Header Name=\"FaultTo\"\n+                  Namespace=\"http://www.w3.org/2005/08/addressing\" />\n+               <sp:Header Name=\"ReplyTo\"\n+                  Namespace=\"http://www.w3.org/2005/08/addressing\" />\n+               <sp:Header Name=\"MessageID\"\n+                  Namespace=\"http://www.w3.org/2005/08/addressing\" />\n+               <sp:Header Name=\"RelatesTo\"\n+                  Namespace=\"http://www.w3.org/2005/08/addressing\" />\n+               <sp:Header Name=\"Action\"\n+                  Namespace=\"http://www.w3.org/2005/08/addressing\" />\n+            </sp:SignedParts>\n+            <sp:EncryptedParts\n+               xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\">\n+               <sp:Body />\n+            </sp:EncryptedParts>\n+         </wsp:All>\n+      </wsp:ExactlyOne>\n+   </wsp:Policy>\n+   \n+   <wsp:Policy wsu:Id=\"Output_policy\">\n+      <wsp:ExactlyOne>\n+         <wsp:All>\n+            <sp:SignedParts\n+               xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\">\n+               <sp:Body />\n+               <sp:Header Name=\"To\"\n+                  Namespace=\"http://www.w3.org/2005/08/addressing\" />\n+               <sp:Header Name=\"From\"\n+                  Namespace=\"http://www.w3.org/2005/08/addressing\" />\n+               <sp:Header Name=\"FaultTo\"\n+                  Namespace=\"http://www.w3.org/2005/08/addressing\" />\n+               <sp:Header Name=\"ReplyTo\"\n+                  Namespace=\"http://www.w3.org/2005/08/addressing\" />\n+               <sp:Header Name=\"MessageID\"\n+                  Namespace=\"http://www.w3.org/2005/08/addressing\" />\n+               <sp:Header Name=\"RelatesTo\"\n+                  Namespace=\"http://www.w3.org/2005/08/addressing\" />\n+               <sp:Header Name=\"Action\"\n+                  Namespace=\"http://www.w3.org/2005/08/addressing\" />\n+            </sp:SignedParts>\n+            <sp:EncryptedParts\n+               xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\">\n+               <sp:Body />\n+            </sp:EncryptedParts>\n+         </wsp:All>\n+      </wsp:ExactlyOne>\n+   </wsp:Policy>\n+\n+</wsdl:definitions>"
        },
        {
            "sha": "996f1d1c0f3278768472af91be7c43a9c535a4b8",
            "filename": "fediz-idp-sts/src/main/webapp/WEB-INF/wsdl/ws-trust-1.4.wsdl",
            "status": "added",
            "additions": 110,
            "deletions": 0,
            "changes": 110,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fwsdl%2Fws-trust-1.4.wsdl",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fwsdl%2Fws-trust-1.4.wsdl",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp-sts%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fwsdl%2Fws-trust-1.4.wsdl?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,110 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!-- \n+OASIS takes no position regarding the validity or scope of any intellectual property or other rights that might be claimed to pertain to the implementation or use of the technology described in this document or the extent to which any license under such rights might or might not be available; neither does it represent that it has made any effort to identify any such rights. Information on OASIS's procedures with respect to rights in OASIS specifications can be found at the OASIS website. Copies of claims of rights made available for publication and any assurances of licenses to be made available, or the result of an attempt made to obtain a general license or permission for the use of such proprietary rights by implementors or users of this specification, can be obtained from the OASIS Executive Director.\n+OASIS invites any interested party to bring to its attention any copyrights, patents or patent applications, or other proprietary rights which may cover technology that may be required to implement this specification. Please address the information to the OASIS Executive Director.\n+Copyright \u00c2\u00a9 OASIS Open 2002-2006. All Rights Reserved.\n+This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this paragraph are included on all such copies and derivative works. However, this document itself does not be modified in any way, such as by removing the copyright notice or references to OASIS, except as needed for the purpose of developing OASIS specifications, in which case the procedures for copyrights defined in the OASIS Intellectual Property Rights document must be followed, or as required to translate it into languages other than English.\n+The limited permissions granted above are perpetual and will not be revoked by OASIS or its successors or assigns.\n+This document and the information contained herein is provided on an AS IS basis and OASIS DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n+-->\n+<wsdl:definitions\n+        targetNamespace=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/\"\n+        xmlns:tns=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/\"\n+        xmlns:wst=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\"\n+        xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\"\n+        xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n+        xmlns:wsam=\"http://www.w3.org/2007/05/addressing/metadata\">\n+  <wsdl:types>\n+    <xs:schema elementFormDefault=\"qualified\" targetNamespace='http://docs.oasis-open.org/ws-sx/ws-trust/200512'>\n+      \n+      <xs:element name='RequestSecurityToken' type='wst:AbstractRequestSecurityTokenType' />\n+      <xs:element name='RequestSecurityTokenResponse' type='wst:AbstractRequestSecurityTokenType' />\n+     \n+      <xs:complexType name='AbstractRequestSecurityTokenType' >\n+        <xs:sequence>\n+          <xs:any namespace='##any' processContents='lax' minOccurs='0' maxOccurs='unbounded' />\n+        </xs:sequence>\n+        <xs:attribute name='Context' type='xs:anyURI' use='optional' />\n+        <xs:anyAttribute namespace='##other' processContents='lax' />\n+      </xs:complexType>\n+      <xs:element name='RequestSecurityTokenCollection' type='wst:RequestSecurityTokenCollectionType' />\n+      <xs:complexType name='RequestSecurityTokenCollectionType' >\n+        <xs:sequence>\n+          <xs:element name='RequestSecurityToken' type='wst:AbstractRequestSecurityTokenType' minOccurs='2' maxOccurs='unbounded'/>\n+        </xs:sequence>\n+      </xs:complexType>\n+\n+      <xs:element name='RequestSecurityTokenResponseCollection' type='wst:RequestSecurityTokenResponseCollectionType' />\n+      <xs:complexType name='RequestSecurityTokenResponseCollectionType' >\n+        <xs:sequence>\n+          <xs:element ref='wst:RequestSecurityTokenResponse' minOccurs='1' maxOccurs='unbounded' />\n+        </xs:sequence>\n+        <xs:anyAttribute namespace='##other' processContents='lax' />\n+      </xs:complexType>\n+      \n+    </xs:schema>\n+  </wsdl:types>\n+\n+  <!-- WS-Trust defines the following GEDs -->\n+  <wsdl:message name=\"RequestSecurityTokenMsg\">\n+    <wsdl:part name=\"request\" element=\"wst:RequestSecurityToken\" />\n+  </wsdl:message>\n+  <wsdl:message name=\"RequestSecurityTokenResponseMsg\">\n+    <wsdl:part name=\"response\"\n+            element=\"wst:RequestSecurityTokenResponse\" />\n+  </wsdl:message>\n+  <wsdl:message name=\"RequestSecurityTokenCollectionMsg\">\n+    <wsdl:part name=\"requestCollection\"\n+            element=\"wst:RequestSecurityTokenCollection\"/>\n+  </wsdl:message>\n+  <wsdl:message name=\"RequestSecurityTokenResponseCollectionMsg\">\n+    <wsdl:part name=\"responseCollection\"\n+            element=\"wst:RequestSecurityTokenResponseCollection\"/>\n+  </wsdl:message>\n+\n+  <!-- This portType an example of a Requestor (or other) endpoint that \n+         Accepts SOAP-based challenges from a Security Token Service -->\n+  <wsdl:portType name=\"WSSecurityRequestor\">\n+    <wsdl:operation name=\"Challenge\">\n+      <wsdl:input message=\"tns:RequestSecurityTokenResponseMsg\"/>\n+      <wsdl:output message=\"tns:RequestSecurityTokenResponseMsg\"/>\n+    </wsdl:operation>\n+  </wsdl:portType>\n+\n+  <!-- This portType is an example of an STS supporting full protocol -->\n+  <wsdl:portType name=\"STS\">\n+    <wsdl:operation name=\"Cancel\">\n+      <wsdl:input wsam:Action=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Cancel\" message=\"tns:RequestSecurityTokenMsg\"/>\n+      <wsdl:output wsam:Action=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/CancelFinal\" message=\"tns:RequestSecurityTokenResponseMsg\"/>\n+    </wsdl:operation>\n+    <wsdl:operation name=\"Issue\">\n+      <wsdl:input wsam:Action=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue\" message=\"tns:RequestSecurityTokenMsg\"/>\n+      <wsdl:output wsam:Action=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTRC/IssueFinal\" message=\"tns:RequestSecurityTokenResponseCollectionMsg\"/>\n+    </wsdl:operation>\n+    <wsdl:operation name=\"Renew\">\n+      <wsdl:input wsam:Action=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Renew\" message=\"tns:RequestSecurityTokenMsg\"/>\n+      <wsdl:output wsam:Action=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/RenewFinal\" message=\"tns:RequestSecurityTokenResponseMsg\"/>\n+    </wsdl:operation>\n+    <wsdl:operation name=\"Validate\">\n+      <wsdl:input wsam:Action=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Validate\" message=\"tns:RequestSecurityTokenMsg\"/>\n+      <wsdl:output wsam:Action=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/ValidateFinal\" message=\"tns:RequestSecurityTokenResponseMsg\"/>\n+    </wsdl:operation>\n+    <wsdl:operation name=\"KeyExchangeToken\">\n+      <wsdl:input wsam:Action=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/KET\" message=\"tns:RequestSecurityTokenMsg\"/>\n+      <wsdl:output wsam:Action=\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/KETFinal\" message=\"tns:RequestSecurityTokenResponseMsg\"/>\n+    </wsdl:operation>\n+    <wsdl:operation name=\"RequestCollection\">\n+      <wsdl:input message=\"tns:RequestSecurityTokenCollectionMsg\"/>\n+      <wsdl:output message=\"tns:RequestSecurityTokenResponseCollectionMsg\"/>\n+    </wsdl:operation>\n+  </wsdl:portType>\n+\n+  <!-- This portType is an example of an endpoint that accepts \n+         Unsolicited RequestSecurityTokenResponse messages -->\n+  <wsdl:portType name=\"SecurityTokenResponseService\">\n+    <wsdl:operation name=\"RequestSecurityTokenResponse\">\n+      <wsdl:input message=\"tns:RequestSecurityTokenResponseMsg\"/>\n+    </wsdl:operation>\n+  </wsdl:portType>\n+\n+</wsdl:definitions>"
        },
        {
            "sha": "a0b8f8c70b0118c08bbf974ce82df062ed02b046",
            "filename": "fediz-idp/pom.xml",
            "status": "added",
            "additions": 82,
            "deletions": 0,
            "changes": 82,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp%2Fpom.xml",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp%2Fpom.xml?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,82 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+       <groupId>org.apache.cxf.fediz</groupId>\n+       <artifactId>fediz</artifactId>\n+       <version>0.6-SNAPSHOT</version>\n+    </parent>\n+    <artifactId>fediz-idp</artifactId>\n+    <name>WS Federation IDP</name>\n+    <packaging>war</packaging>\n+\n+    <dependencyManagement>\n+    \t<dependencies>\n+    \t</dependencies>\n+    </dependencyManagement>\n+    \n+    <properties>\n+    <cxf.version>2.5.1</cxf.version>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    </properties>  \n+\n+    <dependencies>\n+\n+        <dependency>\n+            <groupId>javax.servlet</groupId>\n+            <artifactId>servlet-api</artifactId>\n+            <version>2.5</version>\n+            <scope>provided</scope>\n+        </dependency>\n+        <dependency>\n+\t\t\t<groupId>org.slf4j</groupId>\n+\t\t\t<artifactId>slf4j-api</artifactId>\n+\t\t\t<version>1.6.1</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.slf4j</groupId>\n+\t\t\t<artifactId>slf4j-jdk14</artifactId>\n+\t\t\t<version>1.6.1</version>\n+\t\t</dependency>\n+        <dependency>\n+\t\t\t<groupId>org.apache.cxf</groupId>\n+\t\t\t<artifactId>cxf-rt-ws-security</artifactId>\n+\t\t\t<version>${cxf.version}</version>\n+        </dependency>\n+\t\t<dependency>\n+            <groupId>org.apache.cxf</groupId>\n+            <artifactId>cxf-rt-transports-http</artifactId>\n+            <version>${cxf.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.cxf</groupId>\n+            <artifactId>cxf-rt-ws-policy</artifactId>\n+            <version>${cxf.version}</version>\n+        </dependency>\n+        <dependency>\n+        \t<groupId>org.apache.commons</groupId>\n+        \t<artifactId>commons-lang3</artifactId>\n+        \t<version>3.0.1</version>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin><!--for mvn tomcat:deploy/:undeploy/:redeploy -->\n+\t\t\t\t<groupId>org.codehaus.mojo</groupId>\n+\t\t\t\t<artifactId>tomcat-maven-plugin</artifactId>\n+\t\t\t\t<version>1.1</version>\n+\t\t\t\t<configuration>\n+\t\t\t\t\t<server>myTomcat</server>\n+\t\t\t\t\t<url>http://localhost:9080/manager/text</url>\n+\t\t\t\t\t<path>/${project.build.finalName}</path>\n+\t\t\t\t</configuration>\n+\t\t\t</plugin>\n+        </plugins>\n+        <!-- Name of the generated WAR file -->\n+        <finalName>fedizidp</finalName>\n+    </build>\n+\n+</project>"
        },
        {
            "sha": "5c62adee2eab82f7f4394ce0f830af4281ebf039",
            "filename": "fediz-idp/src/main/java/org/apache/cxf/fediz/service/idp/IdpSTSClient.java",
            "status": "added",
            "additions": 170,
            "deletions": 0,
            "changes": 170,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fservice%2Fidp%2FIdpSTSClient.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fservice%2Fidp%2FIdpSTSClient.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fservice%2Fidp%2FIdpSTSClient.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,170 @@\n+package org.apache.cxf.fediz.service.idp;\n+\n+import java.io.StringWriter;\n+import java.security.cert.X509Certificate;\n+\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.binding.soap.SoapBindingConstants;\n+import org.apache.cxf.helpers.DOMUtils;\n+import org.apache.cxf.service.model.BindingOperationInfo;\n+import org.apache.cxf.staxutils.StaxUtils;\n+import org.apache.cxf.staxutils.W3CDOMStreamWriter;\n+import org.apache.cxf.ws.security.tokenstore.SecurityToken;\n+import org.apache.cxf.ws.security.trust.STSClient;\n+import org.apache.cxf.ws.security.trust.STSUtils;\n+import org.apache.ws.security.components.crypto.Crypto;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Element;\n+\n+public class IdpSTSClient extends STSClient {\n+\n+\tprivate static Logger LOG = LoggerFactory.getLogger(IdpSTSClient.class);\n+\t\n+\tpublic IdpSTSClient(Bus b) {\n+\t\tsuper(b);\n+\t}\n+\n+\t\n+    public String requestSecurityTokenResponse() throws Exception {\n+        return requestSecurityTokenResponse(null);\n+    }\n+\n+    public String requestSecurityTokenResponse(String appliesTo) throws Exception {\n+        String action = null;\n+        if (isSecureConv) {\n+            action = namespace + \"/RST/SCT\";\n+        }\n+        return requestSecurityTokenResponse(appliesTo, action, \"/Issue\", null);\n+    }\n+\t\n+\tpublic String requestSecurityTokenResponse(String appliesTo, String action,\n+\t\t\tString requestType, SecurityToken target) throws Exception {\n+        createClient();\n+        BindingOperationInfo boi = findOperation(\"/RST/Issue\");\n+\n+        client.getRequestContext().putAll(ctx);\n+        if (action != null) {\n+            client.getRequestContext().put(SoapBindingConstants.SOAP_ACTION, action);\n+        } else {\n+            client.getRequestContext().put(SoapBindingConstants.SOAP_ACTION, \n+                                           namespace + \"/RST/Issue\");\n+        }\n+\n+        W3CDOMStreamWriter writer = new W3CDOMStreamWriter();\n+        writer.writeStartElement(\"wst\", \"RequestSecurityToken\", namespace);\n+        writer.writeNamespace(\"wst\", namespace);\n+        if (context != null) {\n+            writer.writeAttribute(null, \"Context\", context);\n+        }\n+        \n+        boolean wroteKeySize = false;\n+        String keyTypeTemplate = null;\n+        String sptt = null;\n+        \n+        if (template != null) {\n+            if (this.useSecondaryParameters()) {\n+                writer.writeStartElement(\"wst\", \"SecondaryParameters\", namespace);\n+            }\n+            \n+            Element tl = DOMUtils.getFirstElement(template);\n+            while (tl != null) {\n+                StaxUtils.copy(tl, writer);\n+                if (\"KeyType\".equals(tl.getLocalName())) {\n+                    keyTypeTemplate = DOMUtils.getContent(tl);\n+                } else if (\"KeySize\".equals(tl.getLocalName())) {\n+                    wroteKeySize = true;\n+                    keySize = Integer.parseInt(DOMUtils.getContent(tl));\n+                } else if (\"TokenType\".equals(tl.getLocalName())) {\n+                    sptt = DOMUtils.getContent(tl);\n+                }\n+                tl = DOMUtils.getNextElement(tl);\n+            }\n+            \n+            if (this.useSecondaryParameters()) {\n+                writer.writeEndElement();\n+            }\n+        }\n+\n+        addRequestType(requestType, writer);\n+        if (enableAppliesTo) {\n+            addAppliesTo(writer, appliesTo);\n+        }\n+        \n+        addClaims(writer);\n+        \n+        Element onBehalfOfToken = getOnBehalfOfToken();\n+        if (onBehalfOfToken != null) {\n+            writer.writeStartElement(\"wst\", \"OnBehalfOf\", namespace);\n+            StaxUtils.copy(onBehalfOfToken, writer);\n+            writer.writeEndElement();\n+        }\n+        if (sptt == null) {\n+            addTokenType(writer);\n+        }\n+        if (isSecureConv || enableLifetime) {\n+            addLifetime(writer);\n+        }\n+        if (keyTypeTemplate == null) {\n+            keyTypeTemplate = writeKeyType(writer, keyType);\n+        }\n+\n+        byte[] requestorEntropy = null;\n+        X509Certificate cert = null;\n+        Crypto crypto = null;\n+\n+        if (keySize <= 0) {\n+            keySize = 256;\n+        }\n+        if (keyTypeTemplate != null && keyTypeTemplate.endsWith(\"SymmetricKey\")) {\n+            requestorEntropy = writeElementsForRSTSymmetricKey(writer, wroteKeySize);\n+        } else if (keyTypeTemplate != null && keyTypeTemplate.endsWith(\"PublicKey\")) {\n+            crypto = createCrypto(false);\n+            cert = getCert(crypto);\n+            writeElementsForRSTPublicKey(writer, cert);\n+        }\n+        \n+        if (target != null) {\n+            writer.writeStartElement(\"wst\", \"RenewTarget\", namespace);\n+            Element el = target.getUnattachedReference();\n+            if (el == null) {\n+                el = target.getAttachedReference();\n+            }\n+            StaxUtils.copy(el, writer);\n+            writer.writeEndElement();\n+        }\n+\n+        Element actAsSecurityToken = getActAsToken();\n+        if (actAsSecurityToken != null) {\n+            writer.writeStartElement(STSUtils.WST_NS_08_02, \"ActAs\");\n+            StaxUtils.copy(actAsSecurityToken, writer);\n+            writer.writeEndElement();\n+        }\n+        \n+        writer.writeEndElement();\n+\n+\t\tObject obj[] = client.invoke(boi, new DOMSource(writer.getDocument()\n+\t\t\t\t.getDocumentElement()));\n+\n+\t\tDOMSource rstr = (DOMSource) obj[0];\n+\n+\t\tStringWriter sw = new StringWriter();\n+\t\ttry {\n+\t\t\tTransformer t = TransformerFactory.newInstance().newTransformer();\n+\t\t\tt.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");\n+\t\t\tt.transform(rstr, new StreamResult(sw));\n+\t\t} catch (TransformerException te) {\n+\t\t\tLOG.warn(\"nodeToString Transformer Exception\");\n+\t\t}\n+\t\treturn sw.toString();\n+\n+\t}\n+\n+}"
        },
        {
            "sha": "dd28b95ee87df9202cc0e722c07b48afcf37dfde",
            "filename": "fediz-idp/src/main/java/org/apache/cxf/fediz/service/idp/IdpServlet.java",
            "status": "added",
            "additions": 268,
            "deletions": 0,
            "changes": 268,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fservice%2Fidp%2FIdpServlet.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fservice%2Fidp%2FIdpServlet.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fservice%2Fidp%2FIdpServlet.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,268 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.cxf.fediz.service.idp;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.StringTokenizer;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.xml.namespace.QName;\n+\n+import org.apache.commons.lang3.StringEscapeUtils;\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.BusFactory;\n+import org.apache.cxf.common.util.Base64Utility;\n+import org.apache.cxf.staxutils.W3CDOMStreamWriter;\n+import org.apache.cxf.ws.security.SecurityConstants;\n+import org.apache.cxf.ws.security.sts.provider.STSException;\n+import org.apache.cxf.ws.security.trust.STSUtils;\n+import org.apache.ws.security.WSConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.w3c.dom.Element;\n+\n+\n+public class IdpServlet extends HttpServlet {\n+\n+\tprivate static Logger LOG = LoggerFactory.getLogger(IdpServlet.class);\n+\n+\tpublic static final String PARAM_ACTION = \"wa\";\n+\n+\tpublic static final String ACTION_SIGNIN = \"wsignin1.0\";\n+\tpublic static final String ACTION_SIGNOUT = \"wsignout1.0\";\n+\tpublic static final String ACTION_SIGNOUT_CLEANUP = \"wsignoutcleanup1.0\";\n+\n+\tpublic static final String PARAM_WTREALM = \"wtrealm\";\n+\t\n+\tpublic static final String PARAM_WREPLY = \"wreply\";\n+\t\n+\tpublic static final String PARAM_WRESULT = \"wresult\";\n+\n+\tpublic static final String PARAM_WCONTEXT = \"wctx\";\n+\n+\tpublic static final String AUTH_HEADER_NAME = \"WWW-Authenticate\";\n+\n+\t/**\n+\t * \n+\t */\n+\tprivate static final long serialVersionUID = -9019993850246851112L;\n+\n+\t@Override\n+    public void init() throws ServletException {\n+\t\tif (getInitParameter(\"sts.wsdl.url\") == null) {\n+\t\t\tthrow new ServletException(\"Parameter 'sts.wsdl.url' not configured\");\n+\t\t}\n+\t\tif (getInitParameter(\"sts.wsdl.service\") == null) {\n+\t\t\tthrow new ServletException(\"Parameter 'sts.wsdl.service' not configured\");\n+\t\t}\n+\t\tif (getInitParameter(\"sts.wsdl.endpoint\") == null) {\n+\t\t\tthrow new ServletException(\"Parameter 'sts.wsdl.endpoint' not configured\");\n+\t\t}\n+\n+    }\n+\t\n+\tpublic void doGet(HttpServletRequest request, HttpServletResponse response)\n+\t\t\tthrows ServletException, IOException {\n+\n+\t\t/*\n+\t\tif (request.getPathInfo().contains(\"jsp\")) {\n+\t\t\treturn;\n+\t\t}\n+\t\t*/\n+\t\t\t\t\n+\t\tString action = request.getParameter(PARAM_ACTION);\n+\t\tString wtrealm = request.getParameter(PARAM_WTREALM);\n+\t\tString wctx = request.getParameter(PARAM_WCONTEXT);\n+\t\tString wreply = request.getParameter(PARAM_WREPLY);\n+\n+\t\tif (action == null) {\n+\t\t\tLOG.error(\"Bad request. HTTP parameter '\" + PARAM_ACTION\n+\t\t\t\t\t+ \"' missing\");\n+\t\t\tresponse.sendError(HttpServletResponse.SC_BAD_REQUEST, \"Parameter \"\n+\t\t\t\t\t+ PARAM_ACTION + \" missing\");\n+\t\t\treturn;\n+\t\t}\n+\t\tif (action.equals(ACTION_SIGNIN)) {\n+\t\t\tLOG.debug(\"Sign-In request [\" + PARAM_ACTION + \"=\" + ACTION_SIGNIN\n+\t\t\t\t\t+ \"] ...\");\n+\n+\t\t\tif (wtrealm == null || wtrealm.length() == 0) {\n+\t\t\t\tLOG.error(\"Bad request. HTTP parameter '\" + ACTION_SIGNIN\n+\t\t\t\t\t\t+ \"' missing\");\n+\t\t\t\tresponse.sendError(HttpServletResponse.SC_BAD_REQUEST,\n+\t\t\t\t\t\t\"Parameter \" + ACTION_SIGNIN + \" missing\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\t\n+\t\t\tString wresult = null;\n+\t\t\tString auth = request.getHeader(\"Authorization\");\n+\t\t\tLOG.debug(\"Authorization header: \" + auth);\n+\t\t\tif (auth != null) {\n+\t\t\t\tString username = null;\n+\t\t\t\tString password = null;\n+\n+\t\t\t\ttry {\n+\t\t\t\t\tStringTokenizer st = new StringTokenizer(auth, \" \");\n+\t\t\t\t\tString authType = st.nextToken();\n+\t\t\t\t\tString encoded = st.nextToken();\n+\n+\t\t\t\t\tif (authType.equalsIgnoreCase(\"basic\")) {\n+\n+\t\t\t\t\t\tString decoded = new String(\n+\t\t\t\t\t\t\t\tBase64Utility.decode(encoded));\n+\n+\t\t\t\t\t\tint colon = decoded.indexOf(':');\n+\t\t\t\t\t\tif (colon < 0) {\n+\t\t\t\t\t\t\tusername = decoded;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tusername = decoded.substring(0, colon);\n+\t\t\t\t\t\t\tpassword = decoded.substring(colon + 1, decoded.length());\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tLOG.debug(\"Validating user [\" + username\n+\t\t\t\t\t\t\t\t+ \"] and password [\" + password + \"]\");\n+\t\t\t\t\t\t\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\twresult = requestSecurityToken(username, password, wtrealm);\n+\t\t\t\t\t\t\trequest.setAttribute(\"fed.\" + PARAM_WRESULT, StringEscapeUtils.escapeXml(wresult));\n+\t\t\t\t\t\t\tif (wctx != null) {\n+\t\t\t\t\t\t\t\trequest.setAttribute(\"fed.\" + PARAM_WCONTEXT, StringEscapeUtils.escapeXml(wctx));\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (wreply == null) {\n+\t\t\t\t\t\t\t\trequest.setAttribute(\"fed.action\", wtrealm);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\trequest.setAttribute(\"fed.action\", wreply);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (Exception ex) {\n+\t\t\t\t\t\t\tLOG.info(\"Requesting security token failed\", ex);\n+\t\t\t\t\t\t\tresponse.sendError(HttpServletResponse.SC_FORBIDDEN,\n+\t\t\t\t\t\t\t\"Requesting security token failed\");\n+\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tLOG.debug(\"Forward to jsp...\");\n+\t\t\t\t\t\t//request.getRequestDispatcher(\"WEB-INF/signinresponse.jsp\").forward(request, response);\n+\t\t\t\t\t\t//this.getServletContext().getRequestDispatcher(\"/WEB-INF/signinresponse.jsp\").forward(request, response);\n+\t\t\t\t\t\tthis.getServletContext().getRequestDispatcher(\"/WEB-INF/signinresponse.jsp\").forward(request, response);\n+\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tresponse.sendError(HttpServletResponse.SC_BAD_REQUEST,\n+\t\t\t\t\t\t\t\t\"Invalid Authorization header\");\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t} catch (Exception ex) {\n+\t\t\t\t\tLOG.error(\"Invalid Authorization header\", ex);\n+\t\t\t\t\tresponse.sendError(HttpServletResponse.SC_BAD_REQUEST,\n+\t\t\t\t\t\"Invalid Authorization header\");\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\n+\t\t\t} else {\n+\t\t\t\tStringBuilder value = new StringBuilder(16);\n+\t\t\t\tvalue.append(\"Basic realm=\\\"IDP\\\"\");\n+\t\t\t\tresponse.setHeader(AUTH_HEADER_NAME, value.toString());\n+\t\t\t\tresponse.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tresponse.sendError(HttpServletResponse.SC_BAD_REQUEST, \"Parameter \"\n+\t\t\t\t\t+ PARAM_ACTION + \" with value \" + action\n+\t\t\t\t\t+ \" is not supported\");\n+\t\t\treturn;\n+\t\t}\n+\t}\n+\t\n+\tprivate String requestSecurityToken(String username, String password, String wtrealm) throws Exception {\n+\t\ttry {\n+\t\t\tBus bus = BusFactory.getDefaultBus();\n+\t\t\tList<String> realmClaims = null;\n+\t\t\tApplicationContext ctx = (ApplicationContext)bus.getExtension(ApplicationContext.class);\n+\t\t\ttry {\n+\t\t\t\tMap<String,List<String>> realmClaimsMap = (Map<String,List<String>>)ctx.getBean(\"realm2ClaimsMap\");\n+\t\t\t\trealmClaims = realmClaimsMap.get(wtrealm);\n+\t\t\t\tif (realmClaims != null && realmClaims.size() > 0) {\n+\t\t\t\t\tLOG.debug(\"claims for realm \" + wtrealm);\n+\t\t\t\t\tfor (String item: realmClaims) {\n+\t\t\t\t\t\tLOG.debug(\"  \" + item);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t} catch (Exception ex) {\n+\t\t\t\tLOG.error(\"Failed to read bean 'realm2ClaimsMap'\", ex);\n+\t\t\t}\n+\t\t\t\n+\t\t\t\n+\t\t\t//IdpSTSClientWorkaround sts = new IdpSTSClientWorkaround(bus);\n+\t\t\tIdpSTSClient sts = new IdpSTSClient(bus);\n+\t\t\tsts.setAddressingNamespace(\"http://www.w3.org/2005/08/addressing\");\n+\t\t\tsts.setTokenType(WSConstants.WSS_SAML2_TOKEN_TYPE);\n+\t\t\tsts.setKeyType(\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/Bearer\");\n+\t\t\t\n+\t\t\tsts.setWsdlLocation(getInitParameter(\"sts.wsdl.url\"));\n+\t\t\tsts.setServiceQName(new QName(\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/\", getInitParameter(\"sts.wsdl.service\")));\n+\t\t\tsts.setEndpointQName(new QName(\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/\", getInitParameter(\"sts.wsdl.endpoint\")));\n+\t\t\tsts.getProperties().put(SecurityConstants.USERNAME, username);\n+\t\t\tsts.getProperties().put(SecurityConstants.PASSWORD, password);\n+\t\t\t\n+\t\t\tElement claims = createClaimsElement(realmClaims);\n+\t\t\tif (claims != null) {\n+\t\t\t\tsts.setClaims(claims);\n+\t\t\t}\n+\t\t\tString rstr = sts.requestSecurityTokenResponse(wtrealm);\n+\t\t\treturn rstr;\n+\t\t} catch (org.apache.cxf.binding.soap.SoapFault ex) {\n+\t\t\tQName faultCode = ex.getFaultCode();\n+\t\t\tif (faultCode.equals(STSException.FAILED_AUTH)) {\n+\t\t\t\tLOG.warn(\"Failed authentication for '\" + username + \"'\");\n+\t\t\t}\n+\t\t\tthrow ex;\n+\t\t} catch (Exception ex) {\n+\t\t\tex.printStackTrace();\n+\t\t\tthrow ex;\n+\t\t}\n+\t}\n+\t\n+\tprivate Element createClaimsElement(List<String> realmClaims) throws Exception {\n+\t\tif (realmClaims == null || realmClaims.size() == 0) return null;\n+\t\t\n+\t\tW3CDOMStreamWriter writer = new W3CDOMStreamWriter();\n+\t\twriter.writeStartElement(\"wst\", \"Claims\", STSUtils.WST_NS_05_12);\n+\t\twriter.writeNamespace(\"wst\", STSUtils.WST_NS_05_12);\n+\t\twriter.writeNamespace(\"ic\", \"http://schemas.xmlsoap.org/ws/2005/05/identity\");\n+\t\twriter.writeAttribute(\"Dialect\", \"http://schemas.xmlsoap.org/ws/2005/05/identity\");\n+\t\t\n+\t\tif (realmClaims != null && realmClaims.size() > 0) {\n+\t\t\tfor (String item: realmClaims) {\n+\t\t\t\tLOG.debug(\"claim: \" + item);\n+\t\t\t\twriter.writeStartElement(\"ic\", \"ClaimType\", \"http://schemas.xmlsoap.org/ws/2005/05/identity\");\n+\t\t\t\twriter.writeAttribute(\"Uri\", item);\n+\t\t\t\twriter.writeEndElement();\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\twriter.writeEndElement();\n+\t\t\n+\t\treturn writer.getDocument().getDocumentElement();\n+\t}\n+\n+}\n+"
        },
        {
            "sha": "23168a909516c0ee220c11b2388ba042be769ee6",
            "filename": "fediz-idp/src/main/resources/clientstore.jks",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp%2Fsrc%2Fmain%2Fresources%2Fclientstore.jks",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp%2Fsrc%2Fmain%2Fresources%2Fclientstore.jks",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp%2Fsrc%2Fmain%2Fresources%2Fclientstore.jks?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5"
        },
        {
            "sha": "5fc56e3f7fc2ceee759f8d3c589cae80d85c3e22",
            "filename": "fediz-idp/src/main/resources/log4j.properties",
            "status": "added",
            "additions": 17,
            "deletions": 0,
            "changes": 17,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp%2Fsrc%2Fmain%2Fresources%2Flog4j.properties",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp%2Fsrc%2Fmain%2Fresources%2Flog4j.properties",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp%2Fsrc%2Fmain%2Fresources%2Flog4j.properties?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,17 @@\n+# Set root category priority to INFO and its only appender to CONSOLE.\n+log4j.rootCategory=FATAL, CONSOLE\n+#log4j.rootCategory=DEBUG, CONSOLE\n+\n+# CONSOLE is set to be a ConsoleAppender using a PatternLayout.\n+log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender\n+log4j.appender.CONSOLE.Threshold=DEBUG\n+log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout\n+log4j.appender.CONSOLE.layout.ConversionPattern=- %m%n\n+\n+# LOGFILE is set to be a File appender using a PatternLayout.\n+log4j.appender.LOGFILE=org.apache.log4j.FileAppender\n+log4j.appender.LOGFILE.File=target/wss4j.log\n+log4j.appender.LOGFILE.Append=false\n+log4j.appender.LOGFILE.Threshold=DEBUG\n+log4j.appender.LOGFILE.layout=org.apache.log4j.PatternLayout\n+log4j.appender.LOGFILE.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n"
        },
        {
            "sha": "c185d612fa9daa5f53931a72b922763442df9440",
            "filename": "fediz-idp/src/main/resources/logging.properties",
            "status": "added",
            "additions": 52,
            "deletions": 0,
            "changes": 52,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp%2Fsrc%2Fmain%2Fresources%2Flogging.properties",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp%2Fsrc%2Fmain%2Fresources%2Flogging.properties",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp%2Fsrc%2Fmain%2Fresources%2Flogging.properties?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,52 @@\n+############################################################\n+#  \tDefault Logging Configuration File\n+#\n+# You can use a different file by specifying a filename\n+# with the java.util.logging.config.file system property.  \n+# For example java -Djava.util.logging.config.file=myfile\n+############################################################\n+\n+############################################################\n+#  \tGlobal properties\n+############################################################\n+\n+# \"handlers\" specifies a comma separated list of log Handler \n+# classes.  These handlers will be installed during VM startup.\n+# Note that these classes must be on the system classpath.\n+# By default we only configure a ConsoleHandler, which will only\n+# show messages at the WARNING and above levels.\n+handlers= java.util.logging.ConsoleHandler\n+#handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler\n+\n+# Default global logging level.\n+# This specifies which kinds of events are logged across\n+# all loggers.  For any given facility this global level\n+# can be overridden by a facility specific level\n+# Note that the ConsoleHandler also has a separate level\n+# setting to limit messages printed to the console.\n+.level= INFO\n+\n+############################################################\n+# Handler specific properties.\n+# Describes specific configuration info for Handlers.\n+############################################################\n+\n+# default file output is in user's home directory.\n+java.util.logging.FileHandler.pattern = %h/java%u.log\n+java.util.logging.FileHandler.limit = 50000\n+java.util.logging.FileHandler.count = 1\n+java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter\n+\n+# Limit the message that are printed on the console to WARNING and above.\n+java.util.logging.ConsoleHandler.level = INFO\n+java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter\n+\n+\n+############################################################\n+# Facility specific properties.\n+# Provides extra control for each logger.\n+############################################################\n+\n+# For example, set the com.xyz.foo logger to only log SEVERE\n+# messages:\n+#com.xyz.foo.level = SEVERE"
        },
        {
            "sha": "467368561617beaf68ba25c87b9eb1f166148359",
            "filename": "fediz-idp/src/main/webapp/WEB-INF/RPClaims.xml",
            "status": "added",
            "additions": 32,
            "deletions": 0,
            "changes": 32,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2FRPClaims.xml",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2FRPClaims.xml",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2FRPClaims.xml?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:util=\"http://www.springframework.org/schema/util\"\n+\txsi:schemaLocation=\"\n+        http://www.springframework.org/schema/beans\n+        http://www.springframework.org/schema/beans/spring-beans-2.0.xsd\n+        http://www.springframework.org/schema/util\n+        http://www.springframework.org/schema/util/spring-util-2.0.xsd\">\n+\n+\n+\t<util:map id=\"realm2ClaimsMap\">\n+\t\t<entry key=\"http://localhost:8080/fedizhelloworldother/\"\n+\t\t\tvalue-ref=\"claimsWsfedhelloworld\" />\n+\t\t<entry key=\"http://localhost:8080/fedizhelloworld/\"\n+\t\t\tvalue-ref=\"claimsWsfedhelloworld2\" />\n+\t</util:map>\n+\n+\n+\n+\t<util:list id=\"claimsWsfedhelloworld\">\n+\t\t<value>http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname</value>\n+\t\t<value>http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname</value>\n+\t</util:list>\n+\n+\t<util:list id=\"claimsWsfedhelloworld2\">\n+\t\t<value>http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname</value>\n+\t\t<value>http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname</value>\n+\t\t<value>http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress</value>\n+\t\t<value>http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role</value>\n+\t</util:list>\n+\n+</beans>\n\\ No newline at end of file"
        },
        {
            "sha": "b23e7e32612b99bd9fad3e3f70d279ddfe20a642",
            "filename": "fediz-idp/src/main/webapp/WEB-INF/beans.xml",
            "status": "added",
            "additions": 42,
            "deletions": 0,
            "changes": 42,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fbeans.xml",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fbeans.xml",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fbeans.xml?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,42 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+\txmlns:cxf=\"http://cxf.apache.org/core\" xmlns:jaxws=\"http://cxf.apache.org/jaxws\"\n+\txmlns:test=\"http://apache.org/hello_world_soap_http\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:util=\"http://www.springframework.org/schema/util\" xmlns:http=\"http://cxf.apache.org/transports/http/configuration\"\n+\txmlns:sec=\"http://cxf.apache.org/configuration/security\"\n+\txsi:schemaLocation=\"\n+        http://cxf.apache.org/core\n+        http://cxf.apache.org/schemas/core.xsd\n+        http://www.springframework.org/schema/beans\n+        http://www.springframework.org/schema/beans/spring-beans-2.0.xsd\n+        http://cxf.apache.org/jaxws                                     \n+        http://cxf.apache.org/schemas/jaxws.xsd\n+        http://www.springframework.org/schema/util\n+        http://www.springframework.org/schema/util/spring-util-2.0.xsd\n+        http://cxf.apache.org/transports/http/configuration\n+        http://cxf.apache.org/schemas/configuration/http-conf.xsd\n+        http://cxf.apache.org/configuration/security\n+        http://cxf.apache.org/schemas/configuration/security.xsd\">\n+        \n+\t<import resource=\"classpath:META-INF/cxf/cxf.xml\" />\n+\n+\t<cxf:bus>\n+\t\t<cxf:features>\n+\t\t\t<cxf:logging />\n+\t\t</cxf:features>\n+\t</cxf:bus>\n+\n+    \n+    <http:conduit name=\"https://localhost:9443/.*\">\n+      <http:tlsClientParameters disableCNCheck=\"true\">\n+        <sec:trustManagers>\n+          <sec:keyStore type=\"jks\" password=\"cspass\" resource=\"clientstore.jks\"/>\n+        </sec:trustManagers>\n+      </http:tlsClientParameters>\n+   </http:conduit>\n+    \n+   \n+   <import resource=\"RPClaims.xml\" />\n+\n+</beans>\n+"
        },
        {
            "sha": "c995a9c175a2fec0ebbb7c72c08ebcb54076088e",
            "filename": "fediz-idp/src/main/webapp/WEB-INF/signinresponse.jsp",
            "status": "added",
            "additions": 22,
            "deletions": 0,
            "changes": 22,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsigninresponse.jsp",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsigninresponse.jsp",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsigninresponse.jsp?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,22 @@\n+<html>\n+<head>\n+<title>IDP SignIn Response Form</title>\n+</head>\n+<body>\n+<form method=\"POST\" name=\"hiddenform\"\n+\taction=\"<%= ((String)request.getAttribute(\"fed.action\")) %>\">\n+<input type=\"hidden\" name=\"wa\" value=\"wsignin1.0\" /><input\n+\ttype=\"hidden\" name=\"wresult\"\n+\tvalue=\"<%= ((String)request.getAttribute(\"fed.wresult\")) %>\" />\n+<input\n+\ttype=\"hidden\" name=\"wctx\"\n+\tvalue=\"<%= ((String)request.getAttribute(\"fed.wctx\")) %>\" />\n+<noscript>\n+<p>Script is disabled. Click Submit to continue.</p>\n+<input type=\"submit\" value=\"Submit\" />\n+</noscript>\n+</form>\n+<script language=\"javascript\">window.setTimeout('document.forms[0].submit()',\n+0);</script>\n+</body>\n+</html>\n\\ No newline at end of file"
        },
        {
            "sha": "5a63409326fc86b0e798a44cdff891d63b2f3553",
            "filename": "fediz-idp/src/main/webapp/WEB-INF/web.xml",
            "status": "added",
            "additions": 43,
            "deletions": 0,
            "changes": 43,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,43 @@\n+<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\r\n+                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\r\n+\tversion=\"3.0\" metadata-complete=\"true\">\r\n+\r\n+\t<description>\r\n+    WS Federation Tomcat Example\r\n+    </description>\r\n+\t<display-name>WS Federation Tomcat Example</display-name>\r\n+\r\n+\t<servlet>\r\n+\t\t<servlet-name>FederationServlet</servlet-name>\r\n+\t\t<servlet-class>org.apache.cxf.fediz.service.idp.IdpServlet</servlet-class>\r\n+\t\t<init-param>\r\n+\t\t\t<param-name>sts.wsdl.url</param-name>\r\n+\t\t\t<param-value>https://localhost:9443/fedizidpsts/STSService?wsdl</param-value>\r\n+\t\t</init-param>\r\n+\t\t<init-param>\r\n+\t\t\t<param-name>sts.wsdl.service</param-name>\r\n+\t\t\t<param-value>SecurityTokenService</param-value>\r\n+\t\t</init-param>\r\n+\t\t<init-param>\r\n+\t\t\t<param-name>sts.wsdl.endpoint</param-name>\r\n+\t\t\t<param-value>TransportUT_Port</param-value>\r\n+\t\t</init-param>\t\t\t\t\r\n+\t</servlet>\r\n+\r\n+\t<servlet-mapping>\r\n+\t\t<servlet-name>FederationServlet</servlet-name>\r\n+\t\t<url-pattern>/</url-pattern>\r\n+\t</servlet-mapping>\r\n+\r\n+\r\n+\t<context-param>\r\n+\t\t<param-name>contextConfigLocation</param-name>\r\n+\t\t<param-value>WEB-INF/beans.xml</param-value>\r\n+\t</context-param>\r\n+\t<listener>\r\n+\t\t<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\r\n+\t</listener>\r\n+\r\n+\r\n+</web-app>\r"
        },
        {
            "sha": "a9dbdaa318b487849a119e0684d710a6f6a34f08",
            "filename": "fediz-idp/src/main/webapp/index.html",
            "status": "added",
            "additions": 25,
            "deletions": 0,
            "changes": 25,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp%2Fsrc%2Fmain%2Fwebapp%2Findex.html",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-idp%2Fsrc%2Fmain%2Fwebapp%2Findex.html",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-idp%2Fsrc%2Fmain%2Fwebapp%2Findex.html?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,25 @@\n+<!--\r\n+  Licensed to the Apache Software Foundation (ASF) under one or more\r\n+  contributor license agreements.  See the NOTICE file distributed with\r\n+  this work for additional information regarding copyright ownership.\r\n+  The ASF licenses this file to You under the Apache License, Version 2.0\r\n+  (the \"License\"); you may not use this file except in compliance with\r\n+  the License.  You may obtain a copy of the License at\r\n+\r\n+      http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+  Unless required by applicable law or agreed to in writing, software\r\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+  See the License for the specific language governing permissions and\r\n+  limitations under the License.\r\n+-->\r\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\r\n+<HTML><HEAD><TITLE>WS Federation Tomcat Examples</TITLE>\r\n+<META http-equiv=Content-Type content=\"text/html\">\r\n+</HEAD>\r\n+<BODY>\r\n+<P>\r\n+<H3>Hello World</H3>\r\n+<P></P>\r\n+</BODY></HTML>\r"
        },
        {
            "sha": "3a28de0c793fd6bc2393089cc5b28925079369e8",
            "filename": "fediz-tomcat-example/.settings/.jsdtscope",
            "status": "added",
            "additions": 12,
            "deletions": 0,
            "changes": 12,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat-example%2F.settings%2F.jsdtscope",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat-example%2F.settings%2F.jsdtscope",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-tomcat-example%2F.settings%2F.jsdtscope?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,12 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<classpath>\n+\t<classpathentry kind=\"src\" path=\"WebContent\"/>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.wst.jsdt.launching.JRE_CONTAINER\"/>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.wst.jsdt.launching.WebProject\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"hide\" value=\"true\"/>\n+\t\t</attributes>\n+\t</classpathentry>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.wst.jsdt.launching.baseBrowserLibrary\"/>\n+\t<classpathentry kind=\"output\" path=\"\"/>\n+</classpath>"
        },
        {
            "sha": "5e9495128c0376427420c4189993b3851770b702",
            "filename": "fediz-tomcat-example/WebContent/META-INF/MANIFEST.MF",
            "status": "added",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat-example%2FWebContent%2FMETA-INF%2FMANIFEST.MF",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat-example%2FWebContent%2FMETA-INF%2FMANIFEST.MF",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-tomcat-example%2FWebContent%2FMETA-INF%2FMANIFEST.MF?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,3 @@\n+Manifest-Version: 1.0\r\n+Class-Path: \r\n+\r"
        },
        {
            "sha": "eab640a7b370458e9f6a53f9cd52557aacb5f2b9",
            "filename": "fediz-tomcat-example/pom.xml",
            "status": "added",
            "additions": 80,
            "deletions": 0,
            "changes": 80,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat-example%2Fpom.xml",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat-example%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-tomcat-example%2Fpom.xml?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,80 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+       <groupId>org.apache.cxf.fediz</groupId>\n+       <artifactId>fediz</artifactId>\n+       <version>0.6-SNAPSHOT</version>\n+    </parent>\n+    <artifactId>fediz-tomcat-example</artifactId>\n+    <name>WS Federation Tomcat example</name>\n+    <packaging>war</packaging>\n+\n+   <properties>\n+      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+   </properties>\n+\n+    <dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>org.apache.tomcat</groupId>\n+\t\t\t<artifactId>tomcat-catalina</artifactId>\n+\t\t\t<version>${tomcat.version}</version>\n+\t\t\t<scope>provided</scope>\n+\t\t</dependency>\n+        <dependency>\n+            <groupId>javax.servlet</groupId>\n+            <artifactId>servlet-api</artifactId>\n+            <version>2.5</version>\n+            <scope>provided</scope>\n+        </dependency>\n+        <dependency>\n+        \t<groupId>org.apache.cxf.fediz</groupId>\n+        \t<artifactId>fediz-core</artifactId>\n+        \t<version>0.6-SNAPSHOT</version>\n+        \t<scope>provided</scope>\n+        </dependency>\n+        <dependency>\n+        \t<groupId>org.apache.cxf.fediz</groupId>\n+        \t<artifactId>fediz-tomcat</artifactId>\n+        \t<version>0.6-SNAPSHOT</version>\n+        \t<scope>provided</scope>\n+        </dependency>\n+        <dependency>\n+        \t<groupId>org.apache.commons</groupId>\n+        \t<artifactId>commons-lang3</artifactId>\n+        \t<version>3.0.1</version>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <!--\n+            <plugin>\n+                <groupId>org.apache.tomcat.maven</groupId>\n+                <artifactId>tomcat-maven-plugin</artifactId>\n+                <version>2.0-SNAPSHOT</version>\n+                <configuration>\n+                     <server>myTomcat</server>\n+                     <url>http://localhost:8080/manager/text</url>\n+                     <warFile>${project.build.finalName}.war</warFile>\n+                </configuration>\n+            </plugin>\n+            -->\n+            <plugin><!--for mvn tomcat:deploy/:undeploy/:redeploy -->\n+\t\t\t\t<groupId>org.codehaus.mojo</groupId>\n+\t\t\t\t<artifactId>tomcat-maven-plugin</artifactId>\n+\t\t\t\t<version>1.1</version>\n+\t\t\t\t<configuration>\n+\t\t\t\t\t<server>myTomcat</server>\n+\t\t\t\t\t<url>http://localhost:8080/manager/text</url>\n+\t\t\t\t\t<path>/${project.build.finalName}</path>\n+\t\t\t\t</configuration>\n+\t\t\t</plugin>\n+        </plugins>\n+        <!-- Name of the generated WAR file -->\n+        <finalName>fedizhelloworld</finalName>\n+    </build>\n+\n+</project>"
        },
        {
            "sha": "9ed6b606c4c28612edd1191f5eec02b1636696c4",
            "filename": "fediz-tomcat-example/src/main/java/org/apache/cxf/fediz/example/FederationFilter.java",
            "status": "added",
            "additions": 67,
            "deletions": 0,
            "changes": 67,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat-example%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fexample%2FFederationFilter.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat-example%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fexample%2FFederationFilter.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-tomcat-example%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fexample%2FFederationFilter.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,67 @@\n+package org.apache.cxf.fediz.example;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.w3c.dom.Element;\n+\n+/**\n+* Add security token to thread local\n+*\n+* @deprecated  Use filter shipped with SAFT\n+*/\n+@Deprecated\n+public class FederationFilter implements Filter {\n+\n+\tprivate static final String DEFAULT_SECURITY_TOKEN_ATTR = \"org.apache.fediz.SECURITY_TOKEN\";\n+\tprivate static final String SECURITY_TOKEN_ATTR_CONFIG = \"security.token.attribute\";\n+\t\n+\tprivate String securityTokenAttr = DEFAULT_SECURITY_TOKEN_ATTR;\n+\t\n+\t@Override\n+\tpublic void init(FilterConfig filterConfig) throws ServletException {\n+\t\tString attrName = filterConfig.getInitParameter(SECURITY_TOKEN_ATTR_CONFIG);\n+\t\tif (attrName != null) {\n+\t\t\tsecurityTokenAttr = attrName;\n+\t\t}\n+\t\t\n+\t}\n+\n+\t@Override\n+\tpublic void doFilter(ServletRequest request, ServletResponse response,\n+\t\t\tFilterChain chain) throws IOException, ServletException {\n+\t\n+\t\tif (request instanceof HttpServletRequest) {\n+\t\t\tHttpServletRequest hrequest = (HttpServletRequest)request;\n+\t\t\tElement el = (Element)hrequest.getSession().getAttribute(securityTokenAttr);\n+\t\t\tif (el != null) {\n+\t\t\t\ttry\n+\t\t\t\t{\n+\t\t\t\t\tSecurityTokenThreadLocal.setToken(el);\n+\t\t\t\t\tchain.doFilter(request, response);\n+\t\t\t\t} finally {\n+\t\t\t\t\tSecurityTokenThreadLocal.setToken(null);\n+\t\t\t\t}\t\t\n+\t\t\t} else {\n+\t\t\t\tchain.doFilter(request, response);\n+\t\t\t}\n+\t\t\t\n+\t\t} else {\n+\t\t\tchain.doFilter(request, response);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void destroy() {\n+\t\t// TODO Auto-generated method stub\n+\n+\t}\n+\n+}"
        },
        {
            "sha": "2d417aadb43e3177440d60dca5d159b94c560db4",
            "filename": "fediz-tomcat-example/src/main/java/org/apache/cxf/fediz/example/FederationServlet.java",
            "status": "added",
            "additions": 100,
            "deletions": 0,
            "changes": 100,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat-example%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fexample%2FFederationServlet.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat-example%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fexample%2FFederationServlet.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-tomcat-example%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fexample%2FFederationServlet.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,100 @@\n+package org.apache.cxf.fediz.example;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.security.Principal;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+\n+import org.apache.commons.lang3.StringEscapeUtils;\n+import org.apache.cxf.fediz.core.Claim;\n+import org.apache.cxf.fediz.core.ClaimCollection;\n+import org.apache.cxf.fediz.tomcat.FederationPrincipal;\n+import org.w3c.dom.Element;\n+\n+public class FederationServlet extends HttpServlet {\n+\n+\t/**\n+\t * \n+\t */\n+\tprivate static final long serialVersionUID = -9019993850246851112L;\n+\n+\tpublic void doGet(HttpServletRequest request, HttpServletResponse response)\n+\t\t\tthrows ServletException, IOException {\n+\n+\t\tresponse.setContentType(\"text/html\");\n+\t\tPrintWriter out = response.getWriter();\n+\n+\t\tout.println(\"<html>\");\n+\t\tout.println(\"<head><title>WS Federation Tomcat Examples</title></head>\");\n+\t\tout.println(\"<body>\");\n+\t\tout.println(\"<h1>Hello World</h1>\");\n+\t\tout.println(\"Hello world<br>\");\n+\t\tout.println(\"Request url: \" + request.getRequestURL().toString() + \"<p>\");\n+\t\t\n+\n+\t\t\n+\t\tout.println(\"<br><b>User</b><p>\");\n+\t\tPrincipal p = request.getUserPrincipal();\n+\t\tif (p != null) {\n+\t\t\tout.println(\"Principal: \" + p.getName() + \"<p>\");\n+\t\t}\n+\t\t\n+\t\tout.println(\"<br><b>Roles</b><p>\");\n+\t\tList<String> roleListToCheck = Arrays.asList(\"Admin\", \"Manager\", \"User\", \"Authenticated\");\n+\t\tfor (String item: roleListToCheck) {\n+\t\t\tout.println(\"Has role '\" + item + \"': \" + ((request.isUserInRole(item)) ? \"<b>yes</b>\" : \"no\") + \"<p>\" );\n+\t\t}\n+\t\t\n+\t\tif (p instanceof FederationPrincipal) {\n+\t\t\tFederationPrincipal fp = (FederationPrincipal)p;\n+\t\t\t\n+\t\t\tout.println(\"<br><b>Claims</b><p>\");\n+\t\t\tClaimCollection claims = fp.getClaims();\n+\t\t\tfor (Claim c: claims) {\n+\t\t\t\tout.println(c.getClaimType().toString() + \": \" + c.getValue() + \"<p>\");\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\tout.println(\"Principal is not instance of FederationPrincipal\");\n+\t\t}\n+\t\t\n+\t\t\n+\t\t//FederationResponse fd = (FederationResponse)request.getSession().getAttribute(FederationAuthenticator.FEDERATION_NOTE);\n+\t\t\n+\t\tElement el = SecurityTokenThreadLocal.getToken();\n+\t\tif (el != null) {\n+\t\t\tout.println(\"<p>Bootstrap token...\");\n+\t\t\tString token = null;\n+\t\t\ttry {\n+\t\t\t\tTransformerFactory transFactory = TransformerFactory.newInstance();\n+\t\t\t\tTransformer transformer = transFactory.newTransformer();\n+\t\t\t\tStringWriter buffer = new StringWriter();\n+\t\t\t\ttransformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");\n+\t\t\t\ttransformer.transform(new DOMSource(el),\n+\t\t\t\t      new StreamResult(buffer));\n+\t\t\t\ttoken = buffer.toString();\n+\t\t\t\tout.println(\"<p>\" + StringEscapeUtils.escapeXml(token));\n+\t\t\t} catch (Exception ex) {\n+\t\t\t\tout.println(\"<p>Failed to transform cached element to string: \" + ex.toString());\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\tout.println(\"<p>Bootstrap token not cached in thread local storage\");\n+\t\t}\n+\t\t\n+\t\tout.println(\"</body>\");\n+\t}\n+\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "cdcc19016ebd2843935b2a2991863b1d4c80ec55",
            "filename": "fediz-tomcat-example/src/main/java/org/apache/cxf/fediz/example/SecurityTokenThreadLocal.java",
            "status": "added",
            "additions": 25,
            "deletions": 0,
            "changes": 25,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat-example%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fexample%2FSecurityTokenThreadLocal.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat-example%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fexample%2FSecurityTokenThreadLocal.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-tomcat-example%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Fexample%2FSecurityTokenThreadLocal.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,25 @@\n+package org.apache.cxf.fediz.example;\n+\n+import org.w3c.dom.Element;\n+\n+\n+/**\n+* Thread local storage for security token\n+*\n+* @deprecated  Use TLS shipped with SAFT\n+*/\n+@Deprecated\n+public class SecurityTokenThreadLocal {\n+\n+\tprivate static final ThreadLocal<Element> threadToken = \n+\t       new ThreadLocal<Element>() {\n+\t};\n+\t\n+\tpublic static void setToken(Element token) {\n+\t\tthreadToken.set(token);\n+\t}\n+\t\n+\tpublic static Element getToken() {\n+\t\treturn threadToken.get();\n+\t}\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "5fc56e3f7fc2ceee759f8d3c589cae80d85c3e22",
            "filename": "fediz-tomcat-example/src/main/resources/log4j.properties",
            "status": "added",
            "additions": 17,
            "deletions": 0,
            "changes": 17,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat-example%2Fsrc%2Fmain%2Fresources%2Flog4j.properties",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat-example%2Fsrc%2Fmain%2Fresources%2Flog4j.properties",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-tomcat-example%2Fsrc%2Fmain%2Fresources%2Flog4j.properties?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,17 @@\n+# Set root category priority to INFO and its only appender to CONSOLE.\n+log4j.rootCategory=FATAL, CONSOLE\n+#log4j.rootCategory=DEBUG, CONSOLE\n+\n+# CONSOLE is set to be a ConsoleAppender using a PatternLayout.\n+log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender\n+log4j.appender.CONSOLE.Threshold=DEBUG\n+log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout\n+log4j.appender.CONSOLE.layout.ConversionPattern=- %m%n\n+\n+# LOGFILE is set to be a File appender using a PatternLayout.\n+log4j.appender.LOGFILE=org.apache.log4j.FileAppender\n+log4j.appender.LOGFILE.File=target/wss4j.log\n+log4j.appender.LOGFILE.Append=false\n+log4j.appender.LOGFILE.Threshold=DEBUG\n+log4j.appender.LOGFILE.layout=org.apache.log4j.PatternLayout\n+log4j.appender.LOGFILE.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n"
        },
        {
            "sha": "c185d612fa9daa5f53931a72b922763442df9440",
            "filename": "fediz-tomcat-example/src/main/resources/logging.properties",
            "status": "added",
            "additions": 52,
            "deletions": 0,
            "changes": 52,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat-example%2Fsrc%2Fmain%2Fresources%2Flogging.properties",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat-example%2Fsrc%2Fmain%2Fresources%2Flogging.properties",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-tomcat-example%2Fsrc%2Fmain%2Fresources%2Flogging.properties?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,52 @@\n+############################################################\n+#  \tDefault Logging Configuration File\n+#\n+# You can use a different file by specifying a filename\n+# with the java.util.logging.config.file system property.  \n+# For example java -Djava.util.logging.config.file=myfile\n+############################################################\n+\n+############################################################\n+#  \tGlobal properties\n+############################################################\n+\n+# \"handlers\" specifies a comma separated list of log Handler \n+# classes.  These handlers will be installed during VM startup.\n+# Note that these classes must be on the system classpath.\n+# By default we only configure a ConsoleHandler, which will only\n+# show messages at the WARNING and above levels.\n+handlers= java.util.logging.ConsoleHandler\n+#handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler\n+\n+# Default global logging level.\n+# This specifies which kinds of events are logged across\n+# all loggers.  For any given facility this global level\n+# can be overridden by a facility specific level\n+# Note that the ConsoleHandler also has a separate level\n+# setting to limit messages printed to the console.\n+.level= INFO\n+\n+############################################################\n+# Handler specific properties.\n+# Describes specific configuration info for Handlers.\n+############################################################\n+\n+# default file output is in user's home directory.\n+java.util.logging.FileHandler.pattern = %h/java%u.log\n+java.util.logging.FileHandler.limit = 50000\n+java.util.logging.FileHandler.count = 1\n+java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter\n+\n+# Limit the message that are printed on the console to WARNING and above.\n+java.util.logging.ConsoleHandler.level = INFO\n+java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter\n+\n+\n+############################################################\n+# Facility specific properties.\n+# Provides extra control for each logger.\n+############################################################\n+\n+# For example, set the com.xyz.foo logger to only log SEVERE\n+# messages:\n+#com.xyz.foo.level = SEVERE"
        },
        {
            "sha": "f5f5668a159ea92c6d404a554a3900bbc0fefdf7",
            "filename": "fediz-tomcat-example/src/main/webapp/META-INF/context.xml",
            "status": "added",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat-example%2Fsrc%2Fmain%2Fwebapp%2FMETA-INF%2Fcontext.xml",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat-example%2Fsrc%2Fmain%2Fwebapp%2FMETA-INF%2Fcontext.xml",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-tomcat-example%2Fsrc%2Fmain%2Fwebapp%2FMETA-INF%2Fcontext.xml?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,3 @@\n+<Context>\n+        <Valve className=\"org.apache.cxf.fediz.tomcat.FederationAuthenticator\" issuerURL=\"https://localhost:9443/fedizidp/\" truststoreFile=\"conf/stsstore.jks\" truststorePassword=\"stsspass\" trustedIssuer=\".*CN=www.sts.com.*\" />        \n+</Context>"
        },
        {
            "sha": "2cc9a0ff98e3d43d5fa75a54f54a95121aae952c",
            "filename": "fediz-tomcat-example/src/main/webapp/WEB-INF/web.xml",
            "status": "added",
            "additions": 71,
            "deletions": 0,
            "changes": 71,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat-example%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat-example%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-tomcat-example%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,71 @@\n+<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\r\n+                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\r\n+\tversion=\"3.0\" metadata-complete=\"true\">\r\n+\r\n+\t<description>\r\n+    WS Federation Tomcat Example\r\n+    </description>\r\n+\t<display-name>WS Federation Tomcat Example</display-name>\r\n+\r\n+\t<filter>\r\n+\t\t<filter-name>FederationFilter</filter-name>\r\n+\t\t<filter-class>org.apache.cxf.fediz.example.FederationFilter</filter-class>\r\n+\t\t<!--\r\n+\t\t<init-param>\r\n+\t\t\t<param-name>security.token.attribute</param-name>\r\n+\t\t\t<param-value>org.apache.fediz.SECURITY_TOKEN</param-value>\r\n+\t\t</init-param>\r\n+\t\t-->\r\n+\t</filter>\r\n+\r\n+\t<!-- now map this filter to a URL-pattern -->\r\n+\t<filter-mapping>\r\n+\t\t<filter-name>FederationFilter</filter-name>\r\n+\t\t<url-pattern>/*</url-pattern>\r\n+\t</filter-mapping>\r\n+\r\n+\t<servlet>\r\n+\t\t<servlet-name>FederationServlet</servlet-name>\r\n+\t\t<servlet-class>org.apache.cxf.fediz.example.FederationServlet</servlet-class>\r\n+\t</servlet>\r\n+\r\n+\t<servlet-mapping>\r\n+\t\t<servlet-name>FederationServlet</servlet-name>\r\n+\t\t<url-pattern>/secureservlet/fed</url-pattern>\r\n+\t</servlet-mapping>\r\n+\r\n+\t<security-role>\r\n+\t\t<role-name>Manager</role-name>\r\n+\t\t<role-name>User</role-name>\r\n+\t\t<role-name>Admin</role-name>\r\n+\t\t<role-name>Authenticated</role-name>\r\n+\t</security-role>\r\n+\r\n+\t<security-constraint>\r\n+\t\t<web-resource-collection>\r\n+\t\t\t<web-resource-name>Protected Area</web-resource-name>\r\n+\t\t\t<url-pattern>/secure/*</url-pattern>\r\n+\t\t</web-resource-collection>\r\n+\t\t<auth-constraint>\r\n+\t\t\t<role-name>*</role-name>\r\n+\t\t</auth-constraint>\r\n+\t</security-constraint>\r\n+\r\n+\t<security-constraint>\r\n+\t\t<web-resource-collection>\r\n+\t\t\t<web-resource-name>Servlet Protected Area</web-resource-name>\r\n+\t\t\t<url-pattern>/secureservlet/*</url-pattern>\r\n+\t\t</web-resource-collection>\r\n+\t\t<auth-constraint>\r\n+\t\t\t<!-- it does not work to not list a role, no authentication triggered -->\r\n+\t\t\t<role-name>*</role-name>\r\n+\t\t</auth-constraint>\r\n+\t</security-constraint>\r\n+\r\n+\t<login-config>\r\n+\t\t<auth-method>WSFED</auth-method>\r\n+\t\t<realm-name>WSFED</realm-name>\r\n+\t</login-config>\r\n+\r\n+</web-app>\r"
        },
        {
            "sha": "a9dbdaa318b487849a119e0684d710a6f6a34f08",
            "filename": "fediz-tomcat-example/src/main/webapp/index.html",
            "status": "added",
            "additions": 25,
            "deletions": 0,
            "changes": 25,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat-example%2Fsrc%2Fmain%2Fwebapp%2Findex.html",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat-example%2Fsrc%2Fmain%2Fwebapp%2Findex.html",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-tomcat-example%2Fsrc%2Fmain%2Fwebapp%2Findex.html?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,25 @@\n+<!--\r\n+  Licensed to the Apache Software Foundation (ASF) under one or more\r\n+  contributor license agreements.  See the NOTICE file distributed with\r\n+  this work for additional information regarding copyright ownership.\r\n+  The ASF licenses this file to You under the Apache License, Version 2.0\r\n+  (the \"License\"); you may not use this file except in compliance with\r\n+  the License.  You may obtain a copy of the License at\r\n+\r\n+      http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+  Unless required by applicable law or agreed to in writing, software\r\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+  See the License for the specific language governing permissions and\r\n+  limitations under the License.\r\n+-->\r\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\r\n+<HTML><HEAD><TITLE>WS Federation Tomcat Examples</TITLE>\r\n+<META http-equiv=Content-Type content=\"text/html\">\r\n+</HEAD>\r\n+<BODY>\r\n+<P>\r\n+<H3>Hello World</H3>\r\n+<P></P>\r\n+</BODY></HTML>\r"
        },
        {
            "sha": "9cf73660681732e35d9b000c8e996b8a12184495",
            "filename": "fediz-tomcat-example/src/main/webapp/secure/test.html",
            "status": "added",
            "additions": 25,
            "deletions": 0,
            "changes": 25,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat-example%2Fsrc%2Fmain%2Fwebapp%2Fsecure%2Ftest.html",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat-example%2Fsrc%2Fmain%2Fwebapp%2Fsecure%2Ftest.html",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-tomcat-example%2Fsrc%2Fmain%2Fwebapp%2Fsecure%2Ftest.html?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,25 @@\n+<!--\r\n+  Licensed to the Apache Software Foundation (ASF) under one or more\r\n+  contributor license agreements.  See the NOTICE file distributed with\r\n+  this work for additional information regarding copyright ownership.\r\n+  The ASF licenses this file to You under the Apache License, Version 2.0\r\n+  (the \"License\"); you may not use this file except in compliance with\r\n+  the License.  You may obtain a copy of the License at\r\n+\r\n+      http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+  Unless required by applicable law or agreed to in writing, software\r\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+  See the License for the specific language governing permissions and\r\n+  limitations under the License.\r\n+-->\r\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\r\n+<HTML><HEAD><TITLE>WS Federation Tomcat Examples</TITLE>\r\n+<META http-equiv=Content-Type content=\"text/html\">\r\n+</HEAD>\r\n+<BODY>\r\n+<P>\r\n+<H3>Secure Test</H3>\r\n+<P></P>\r\n+</BODY></HTML>\r"
        },
        {
            "sha": "e25b48afb2eb5ee8dd6cfc441b14cc1476939c39",
            "filename": "fediz-tomcat/docs/readme.txt",
            "status": "added",
            "additions": 58,
            "deletions": 0,
            "changes": 58,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat%2Fdocs%2Freadme.txt",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat%2Fdocs%2Freadme.txt",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-tomcat%2Fdocs%2Freadme.txt?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,58 @@\n+Deploy WS-Federation plugin in tomcat 7\n+\n+1) Pre-requisites:\n+- Tomcat 7.0.x\n+- JDK 1.6\n+\n+2) Prepare tomcat\n+- create a sub-directory  in ${catalina.home}/lib\n+- update catalina.properties in ${catalina.home}/conf (see last directory added in the comma seperated list)\n+common.loader=${catalina.base}/lib,${catalina.base}/lib/*.jar,${catalina.home}/lib,${catalina.home}/lib/*.jar,${catalina.home}/lib/fediz/*.jar\n+\n+3) Deploy Federation plugin\n+\n+a) Deploy the JAR's built as part of fediz-core and fediz-tomcat:\n+fediz-core-*.jar\n+fediz-tomcat-*.jar\n+\n+b) deploy the following third party libraries (tested with the mentioned version)\n+- commons-logging-1.1.1.jar\n+- joda-time-1.6.2.jar\n+- opensaml-2.4.1.jar\n+- openws-1.4.1.jar\n+- slf4j-api-1.6.1.jar\n+- slf4j-jdk14-1.6.1.jar\n+- wss4j-1.6.2.jar\n+- xmlsec-1.4.5.jar\n+- xmltooling-1.3.1.jar\n+\n+c) configure the CA certificates:\n+\n+- Deploy the keystore (configured in above properties) to the configured location\n+keystore can be found in fediz-idp-sts/src/test/resources/stsstore.jks\n+(hint: you can ignore that the private key is contained in this keystore which must not be the case for production)\n+\n+\n+4) Configure Federation plugin\n+- Update the web application context configuration either in server.xml or in your web META-INF/context.xml:\n+\n+Ex. in server.xml:\n+\n+        <Context path=\"/fedizhelloworld\" docBase=\"fedizhelloworld\">\n+                <Valve className=\"org.apache.cxf.fediz.tomcat.FederationAuthenticator\"\n+                       issuerURL=\"https://localhost:9443/fedizidp/\"\n+                       truststoreFile=\"conf/signature.properties\"\n+                       truststorePassword=\"stsspass\"\n+                       trustedIssuer=\"DoubleItSTSIssuer\" />\n+        </Context>\n+        \n+        or embed a context.xml in your WAR in META-INF which contains this (see fediz-tomcat-example):\n+        (tomcat:redeploy doesn't work \n+        <Context>\n+        \t<Valve className=\"org.apache.cxf.fediz.tomcat.FederationAuthenticator\"\n+                       issuerURL=\"https://localhost:9443/fedizidp/\"\n+                       truststoreFile=\"conf/signature.properties\"\n+                       truststorePassword=\"stsspass\"\n+                       trustedIssuer=\"DoubleItSTSIssuer\" />\n+\t\t</Context>\n+"
        },
        {
            "sha": "fa2d434bbce15347da31824a4cf6daac548c5272",
            "filename": "fediz-tomcat/pom.xml",
            "status": "added",
            "additions": 120,
            "deletions": 0,
            "changes": 120,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat%2Fpom.xml",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-tomcat%2Fpom.xml?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,120 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<parent>\n+       <groupId>org.apache.cxf.fediz</groupId>\n+       <artifactId>fediz</artifactId>\n+       <version>0.6-SNAPSHOT</version>\n+\t</parent>\n+\t<artifactId>fediz-tomcat</artifactId>\n+\t<name>WS-Federation Tomcat plugin</name>\n+\t<packaging>jar</packaging>\n+\n+   <properties>\n+      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+   </properties>\n+\n+\t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>org.apache.tomcat</groupId>\n+\t\t\t<artifactId>tomcat-catalina</artifactId>\n+\t\t\t<version>${tomcat.version}</version>\n+\t\t\t<scope>provided</scope>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>junit</groupId>\n+\t\t\t<artifactId>junit</artifactId>\n+\t\t\t<version>${junit.version}</version>\n+\t\t\t<scope>test</scope>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.apache.cxf.fediz</groupId>\n+\t\t\t<artifactId>fediz-core</artifactId>\n+\t\t\t<version>0.6-SNAPSHOT</version>\n+\t\t\t<type>jar</type>\n+\t\t\t<scope>compile</scope>\n+\t\t</dependency>\n+\n+\t</dependencies>\n+\n+\t<build>\n+\t\t<plugins>\n+\t\t\t<plugin>\n+\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n+\t\t\t\t<artifactId>maven-pmd-plugin</artifactId>\n+\t\t\t\t<version>2.5</version>\n+\t\t\t\t<configuration>\n+\t\t\t\t\t<linkXRef>false</linkXRef>\n+\t\t\t\t\t<failOnViolation>true</failOnViolation>\n+\t\t\t\t\t<verbose>true</verbose>\n+\t\t\t\t\t<targetJdk>1.6</targetJdk>\n+\t\t\t\t</configuration>\n+\t\t\t\t<executions>\n+\t\t\t\t\t<execution>\n+\t\t\t\t\t\t<id>validate</id>\n+\t\t\t\t\t\t<phase>validate</phase>\n+\t\t\t\t\t\t<goals>\n+\t\t\t\t\t\t\t<goal>check</goal>\n+\t\t\t\t\t\t</goals>\n+\t\t\t\t\t</execution>\n+\t\t\t\t</executions>\n+\t\t\t</plugin>\n+\t\t\t<plugin>\n+\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n+\t\t\t\t<artifactId>maven-source-plugin</artifactId>\n+\t\t\t\t<version>2.1.2</version>\n+\t\t\t\t<executions>\n+\t\t\t\t\t<execution>\n+\t\t\t\t\t\t<id>attach-sources</id>\n+\t\t\t\t\t\t<phase>verify</phase>\n+\t\t\t\t\t\t<goals>\n+\t\t\t\t\t\t\t<goal>jar-no-fork</goal>\n+\t\t\t\t\t\t</goals>\n+\t\t\t\t\t</execution>\n+\t\t\t\t</executions>\n+\t\t\t</plugin>\n+     <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-assembly-plugin</artifactId>\n+        <version>2.2.1</version>\n+        <executions>\n+          <execution>\n+            <id>zip-file</id>\n+            <phase>package</phase>\n+            <goals>\n+              <goal>attached</goal>\n+            </goals>\n+            <configuration>\n+              <descriptors>\n+                <descriptor>src/main/assembly/assembly.xml</descriptor>\n+              </descriptors>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+\t\t\t<!-- \n+\t\t\t<plugin>\n+\t\t\t\t<artifactId>maven-assembly-plugin</artifactId>\n+\t\t\t\t<version>2.2.1</version>\n+\t\t\t\t<configuration>\n+\t\t\t\t\t<descriptorRefs>\n+\t\t\t\t\t\t<descriptorRef>jar-with-dependencies</descriptorRef>\n+\t\t\t\t\t</descriptorRefs>\n+\t\t\t\t</configuration>\n+\t\t\t\t<executions>\n+\t\t\t\t\t<execution>\n+\t\t\t\t\t\t<id>make-assembly</id>\n+\t\t\t\t\t\t<phase>package</phase>\n+\t\t\t\t\t\t<goals>\n+\t\t\t\t\t\t\t<goal>single</goal>\n+\t\t\t\t\t\t</goals>\n+\t\t\t\t\t</execution>\n+\t\t\t\t</executions>\n+\t\t\t</plugin>\n+\t\t\t-->\n+\t\t</plugins>\n+\t</build>\n+\n+</project>\n+ "
        },
        {
            "sha": "fb0d6aabc049428050c7b088c723d3ac0eadb66b",
            "filename": "fediz-tomcat/src/main/assembly/assembly.xml",
            "status": "added",
            "additions": 18,
            "deletions": 0,
            "changes": 18,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat%2Fsrc%2Fmain%2Fassembly%2Fassembly.xml",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat%2Fsrc%2Fmain%2Fassembly%2Fassembly.xml",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-tomcat%2Fsrc%2Fmain%2Fassembly%2Fassembly.xml?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,18 @@\n+<assembly xmlns=\"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0\n+http://maven.apache.org/xsd/assembly-1.1.0.xsd\">\n+  <id>zip-with-dependencies</id>\n+  <formats>\n+    <format>zip</format>\n+  </formats>\n+  <includeBaseDirectory>false</includeBaseDirectory>\n+  <dependencySets>\n+    <dependencySet>\n+      <outputDirectory>/</outputDirectory>\n+      <useProjectArtifact>true</useProjectArtifact>\n+      <unpack>false</unpack>\n+      <scope>runtime</scope>\n+    </dependencySet>\n+  </dependencySets>\n+</assembly>"
        },
        {
            "sha": "29f7379ebcb1333815938efae314138dc3cba6a8",
            "filename": "fediz-tomcat/src/main/java/org/apache/cxf/fediz/tomcat/FederationAuthenticator.java",
            "status": "added",
            "additions": 592,
            "deletions": 0,
            "changes": 592,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Ftomcat%2FFederationAuthenticator.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Ftomcat%2FFederationAuthenticator.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-tomcat%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Ftomcat%2FFederationAuthenticator.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,592 @@\n+package org.apache.cxf.fediz.tomcat;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URLEncoder;\n+import java.security.Principal;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.catalina.Session;\n+import org.apache.catalina.authenticator.Constants;\n+import org.apache.catalina.authenticator.FormAuthenticator;\n+import org.apache.catalina.authenticator.SavedRequest;\n+import org.apache.catalina.connector.Request;\n+import org.apache.catalina.connector.Response;\n+import org.apache.catalina.deploy.LoginConfig;\n+import org.apache.cxf.fediz.core.FederationConfiguration;\n+import org.apache.cxf.fediz.core.FederationConstants;\n+import org.apache.cxf.fediz.core.FederationProcessor;\n+import org.apache.cxf.fediz.core.FederationProcessorImpl;\n+import org.apache.cxf.fediz.core.FederationRequest;\n+import org.apache.cxf.fediz.core.FederationResponse;\n+import org.apache.juli.logging.Log;\n+import org.apache.juli.logging.LogFactory;\n+\n+public class FederationAuthenticator extends FormAuthenticator {\n+\t\n+\t//[TODO] Expired token\n+\t\n+    private static final Log log = LogFactory.getLog(FormAuthenticator.class);\n+    \n+    /**\n+     * Descriptive information about this implementation.\n+     */\n+    protected static final String info =\n+        \"org.apache.cxf.fediz.tomcat.WsFedAuthenticator/1.0\";\n+    \n+    public static final String FEDERATION_NOTE =\n+        \"org.apache.cxf.fediz.tomcat.FEDERATION\";\n+    \n+    public static final String SECURITY_TOKEN =\n+        \"org.apache.fediz.SECURITY_TOKEN\";\n+    \n+    /**\n+     * IssuerURL\n+     */\n+    protected String issuerURL = null;\n+    \n+    /**\n+     * Requested Authentication type.\n+     * See org.apache.cxf.fediz.tomcat.WsFedConstants.AUTH_TYPE_*\n+     */   \n+    protected URI authenticationType = null;\n+    \n+    /**\n+     * Trusted Issuer Name\n+     */\n+    protected String trustedIssuer = null;\n+    \n+    \n+    /**\n+     * Truststore file\n+     */\n+    protected String truststoreFile = null;\n+    \n+\n+\t/**\n+     * Truststore password\n+     */\n+    protected String truststorePassword = null;\n+   \n+\n+\n+\t/**\n+     * Role URI in Claim\n+     */\n+    protected String roleClaimURI = null;\n+    \n+    /**\n+     * Role delimiter in claim value\n+     */\n+    protected String roleDelimiter = \",\";\n+\t\n+    \n+\tpublic FederationAuthenticator() {\n+\t\tlog.debug(\"WsFedAuthenticator()\");\n+\t}\n+\t\n+    /**\n+     * Return descriptive information about this Valve implementation.\n+     */\n+    @Override\n+    public String getInfo() {\n+        return (info);\n+    }\n+    \n+    \n+    /**\n+     * Return the character encoding to use to read the username and password.\n+     */\n+    public String getIssuerURL() {\n+        return issuerURL;\n+    }\n+    \n+\n+    /**\n+     * Set the character encoding to be used to read the username and password. \n+     */\n+    public void setIssuerURL(String issuerURL) {\n+    \tthis.issuerURL = issuerURL;\n+    }\n+    \n+    \n+    /**\n+     * Return the requested authentication type.\n+     */\n+    public URI getAuthenticationType() {\n+        return authenticationType;\n+    }\n+\n+    /**\n+     * Set the requested authentication type.\n+     */\n+    public void setAuthenticationType(String authenticationType) {\n+    \tFederationConstants.AUTH_TYPE_MAP.containsKey(authenticationType);\n+    \tthis.authenticationType = FederationConstants.AUTH_TYPE_MAP.get(authenticationType);\n+    }\n+    \n+    public String getTruststorePassword() {\n+\t\treturn truststorePassword;\n+\t}\n+\n+\tpublic void setTruststorePassword(String truststorePassword) {\n+\t\tthis.truststorePassword = truststorePassword;\n+\t}\n+    \n+\t\n+    public String getTruststoreFile() {\n+\t\treturn truststoreFile;\n+\t}\n+\n+\tpublic void setTruststoreFile(String truststoreFile) {\n+\t\tthis.truststoreFile = truststoreFile;\n+\t}\n+\t\n+    /**\n+     * \n+     */\n+    public String getRoleClaimURI() {\n+        return this.roleClaimURI;\n+    }\n+\n+    /**\n+     * \n+     */\n+    public void setRoleClaimURI(String roleClaimURI) {\n+    \tthis.roleClaimURI = roleClaimURI;\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public String getRoleDelimiter() {\n+        return this.roleDelimiter;\n+    }\n+\n+    /**\n+     * \n+     */\n+    public void setRoleDelimiter(String roleDelimiter) {\n+    \tthis.roleDelimiter = roleDelimiter;\n+    }\n+    \n+    \n+    /**\n+     * \n+     */\n+    public String getTrustedIssuer() {\n+        return this.trustedIssuer;\n+    }\n+\n+    /**\n+     * \n+     */\n+    public void setTrustedIssuer(String trustedIssuer) {\n+    \tthis.trustedIssuer = trustedIssuer;\n+    }\n+    \n+    \n+    \n+    @Override\n+    public void invoke(Request request, Response response)\n+        throws IOException, ServletException {\n+    \t\n+    \tlog.debug(\"WsFedAuthenticator:invoke()\");\n+    \tsuper.invoke(request, response);\n+    \t\n+    }\n+\t\n+\t@Override\n+\tpublic boolean authenticate(Request request, HttpServletResponse response,\n+\t\t\tLoginConfig config) throws IOException {\n+\n+\t\tlog.debug(\"authenticate invoked\");\n+        // References to objects we will need later\n+        Session session = null;\n+\n+        // Have we already authenticated someone?\n+        Principal principal = request.getUserPrincipal();\n+        //String ssoId = (String) request.getNote(Constants.REQ_SSOID_NOTE);\n+        if (principal != null) {\n+            if (log.isDebugEnabled())\n+                log.debug(\"Already authenticated '\" +\n+                    principal.getName() + \"'\");\n+            // Associate the session with any existing SSO session\n+            /*\n+               if (ssoId != null)\n+                associate(ssoId, request.getSessionInternal(true));\n+             */\n+            \n+            // Check whether security token still valid\n+            session = request.getSessionInternal();\n+            if (session == null) {\n+            \tlog.debug(\"Session should not be null after authentication\");\n+            } else {\n+            \tFederationResponse wfRes = (FederationResponse)session.getNote(FEDERATION_NOTE);\n+            \t\n+            \tDate tokenExpires = wfRes.getTokenExpires();\n+            \tif (tokenExpires == null) {\n+            \t\tlog.debug(\"Token doesn't expire\");\n+            \t\treturn (true);\n+            \t}\n+        \t    Calendar cal = Calendar.getInstance();\n+        \t    if ( cal.getTime().after(wfRes.getTokenExpires()) ) {\n+        \t    \tlog.debug(\"Token already expired\");\n+        \t    \t// [TODO] Redirect\n+        \t    \treturn (false);\n+        \t    }\n+            }\n+            \n+            return (true);\n+        }\n+\n+        // Is this the re-submit of the original request URI after successful\n+        // authentication?  If so, forward the *original* request instead.\n+        if (matchRequest(request)) {\n+            session = request.getSessionInternal(true);\n+            if (log.isDebugEnabled())\n+                log.debug(\"Restore request from session '\"\n+                          + session.getIdInternal() \n+                          + \"'\");\n+            principal = (Principal)session.getNote(Constants.FORM_PRINCIPAL_NOTE);\n+            register(request, response, principal, FederationConstants.WSFED_METHOD,\n+                    null,\n+                    null);\n+            \n+            if (restoreRequest(request, session)) {\n+                if (log.isDebugEnabled())\n+                    log.debug(\"Proceed to restored request\");\n+                return (true);\n+            } else {\n+                if (log.isDebugEnabled())\n+                    log.debug(\"Restore of original request failed\");\n+                response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n+                return (false);\n+            }\n+        }\n+\n+        // Acquire references to objects we will need to evaluate\n+/*        \n+        MessageBytes uriMB = MessageBytes.newInstance();\n+        CharChunk uriCC = uriMB.getCharChunk();\n+        uriCC.setLimit(-1);\n+*/        \n+        //String contextPath = request.getContextPath();\n+        String requestURI = request.getDecodedRequestURI();\n+\n+        \n+        String wa = request.getParameter(\"wa\");\n+\t\t// Unauthenticated -> redirect\n+        if (wa == null) {\n+            session = request.getSessionInternal(true);\n+            if (log.isDebugEnabled())\n+                log.debug(\"Save request in session '\" + session.getIdInternal() + \"'\");\n+            try {\n+                saveRequest(request, session);\n+            } catch (IOException ioe) {\n+                log.debug(\"Request body too big to save during authentication\");\n+                response.sendError(HttpServletResponse.SC_FORBIDDEN,\n+                        sm.getString(\"authenticator.requestBodyTooBig\"));\n+                return (false);\n+            }\n+            redirectToLoginPage(request, response, config);\n+            return (false);\n+        }\n+        \n+        // Check whether it is the signin request, validate the token.\n+        // If failed, redirect to the error page if they are not correct\n+        String wresult = request.getParameter(\"wresult\");\n+        FederationResponse wfRes = null;\n+\t\tif ( wa.equals(FederationConstants.ACTION_SIGNIN) ) {\n+\t\t\tif (log.isDebugEnabled())\n+                log.debug(\"SignIn request found\");\n+\t\t\tlog.debug(\"SignIn action...\");\n+\t\t\t\n+\t\t\tif (wresult == null) {\n+\t\t\t\tif (log.isDebugEnabled())\n+\t\t\t\t\tlog.debug(\"SignIn request must contain wresult\");\n+\t\t\t\tresponse.sendError(HttpServletResponse.SC_BAD_REQUEST);\n+\t\t\t\treturn (false);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\trequest.getResponse().sendAcknowledgement();\n+\t\t\t\t//processSignInRequest\n+\t\t\t\tif (log.isDebugEnabled()){\n+\t                log.debug(\"Process SignIn request\");\n+\t                log.debug(\"wresult=\\n\" + wresult);\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tFederationRequest wfReq = new FederationRequest();\n+\t\t\t\twfReq.setWa(wa);\n+\t\t\t\twfReq.setWresult(wresult);\n+\t\t\t\t//wfReq.setWtrealm(wtrealm);\n+\t\t\t\t\n+\t\t\t\tFederationConfiguration fedConfig = new FederationConfiguration();\n+\t\t\t\tfedConfig.setTrustedIssuer(this.getTrustedIssuer());\n+\t\t\t\tfedConfig.setRoleDelimiter(this.getRoleDelimiter());\n+\t\t\t\tif (this.getRoleClaimURI() == null || this.getRoleClaimURI().length() == 0) {\n+\t\t\t\t\tfedConfig.setRoleURI(FederationConstants.DEFAULT_ROLE_URI);\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tfedConfig.setRoleURI(URI.create(this.getRoleClaimURI()));\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\t\n+\t\t\t\tif (this.getTruststoreFile() == null || this.getTruststoreFile().length() == 0) {\n+\t\t\t\t\tlog.error(\"Truststore file configuration must be checked before redirect to IDP\");\n+\t\t\t\t\t//TODO would an exception not be the better solution here ?\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\t\t\t\tif (this.getTruststorePassword() == null || this.getTruststorePassword().length() == 0) {\n+\t\t\t\t\tlog.error(\"Truststore password configuration must be checked before redirect to IDP\");\n+\t\t\t\t\t//TODO would an exception not be the better solution here ?\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tif ( (new File(getTruststoreFile())).exists() ) {\n+\t\t\t\t\t\tfedConfig.setTrustStoreFile(this.getTruststoreFile());\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tString catalinaHome = System.getProperty(\"catalina.home\");\n+\t\t\t\t\t\tif (catalinaHome != null && catalinaHome.length() > 0) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tString fqTruststoreFile = catalinaHome.concat(File.separator + getTruststoreFile());\n+\t\t\t\t\t\t\tthis.setTruststoreFile(fqTruststoreFile);\n+\t\t\t\t\t\t\tfedConfig.setTrustStoreFile(this.getTruststoreFile());\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse {\n+\t\t\t\t\t\t\tlog.error(\"Truststore file configuration not valid\");\n+\t\t\t\t\t\t\treturn false;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\t\n+\t\t\t\t\tfedConfig.setTrustStoreFile(this.getTruststoreFile());\n+\t\t\t\t\tfedConfig.setTrustStorePassword(this.getTruststorePassword());\n+\t\t\t\t\tif (log.isDebugEnabled()) {\n+\t\t\t\t\t\tlog.debug(\"Truststore file: \" + fedConfig.getTrustStoreFile());\n+\t\t\t\t\t\tlog.debug(\"Truststore password: \" + fedConfig.getTrustStorePassword());\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\t\n+\t\t\t\tFederationProcessor wfProc = new FederationProcessorImpl();\n+\t\t\t\twfRes = wfProc.processRequest(wfReq, fedConfig);\n+\t\t\t\t\n+\t\t\t\tif ( wfRes.getAudience() != null && request.getRequestURL().indexOf(wfRes.getAudience()) == -1 ) {\n+\t\t\t\t\tlog.debug(\"Audience doesn't match with request URL [\" + wfRes.getAudience() + \"]  [\" + request.getRequestURL() + \"]\");\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tList<String> roles = wfRes.getRoles();\n+\t\t\t\tif (roles == null || roles.size() == 0) {\n+\t\t\t\t\troles = new ArrayList<String>();\n+\t\t\t\t\troles.add(new String(\"Authenticated\"));\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tprincipal = new FederationPrincipal(wfRes.getUsername(), roles, wfRes.getClaims());\n+\t\t\t\t\n+\t\t\t\t//[TODO] Cache lifetime (in session), token (in session/TLS), ?audience?\n+\t\t\t\t//[TODO] clocksqew\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\tlog.error(\"Not supported action found in parameter wa: \" + wa);\n+\t\t\tresponse.sendError(HttpServletResponse.SC_BAD_REQUEST);\n+\t\t\treturn (false);\n+\t\t}\n+\n+        \n+        \n+        /*\n+        Realm realm = context.getRealm();\n+        if (characterEncoding != null) {\n+            request.setCharacterEncoding(characterEncoding);\n+        \n+        String username = request.getParameter(Constants.FORM_USERNAME);\n+        String password = request.getParameter(Constants.FORM_PASSWORD);\n+        if (log.isDebugEnabled())\n+            log.debug(\"Authenticating username '\" + username + \"'\");\n+        principal = realm.authenticate(username, password);\n+        */\n+        if (principal == null) {\n+            forwardToErrorPage(request, response, config);\n+            return (false);\n+        }\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Authentication of '\" + principal + \"' was successful\");\n+        }\n+        //context.addServletContainerInitializer(sci, classes)\n+        //session.addSessionListener(listener)\n+        //HttpSessionAttributeListener\n+        \n+        if (session == null)\n+            session = request.getSessionInternal(false);\n+        if (session == null) {\n+            if (containerLog.isDebugEnabled())\n+                containerLog.debug\n+                    (\"User took so long to log on the session expired\");\n+            if (landingPage == null) {\n+                response.sendError(HttpServletResponse.SC_REQUEST_TIMEOUT,\n+                        sm.getString(\"authenticator.sessionExpired\"));\n+            } else {\n+                // Make the authenticator think the user originally requested\n+                // the landing page\n+                String uri = request.getContextPath() + landingPage;\n+                SavedRequest saved = new SavedRequest();\n+                saved.setMethod(\"GET\");\n+                saved.setRequestURI(uri);\n+                request.getSessionInternal(true).setNote(\n+                        Constants.FORM_REQUEST_NOTE, saved);\n+                response.sendRedirect(response.encodeRedirectURL(uri));\n+            }\n+            return (false);\n+        }\n+\n+        // Save the authenticated Principal in our session\n+        session.setNote(Constants.FORM_PRINCIPAL_NOTE, principal);\n+        \n+        // Save Federation response in our session\n+        session.setNote(FEDERATION_NOTE, wfRes);\n+        \n+        // Save Federation response in public session\n+        request.getSession(true).setAttribute(SECURITY_TOKEN, wfRes.getToken());\n+\n+/*\n+        // Save the username and password as well\n+        session.setNote(Constants.SESS_USERNAME_NOTE, username);\n+        session.setNote(Constants.SESS_PASSWORD_NOTE, password);\n+*/\n+        // Redirect the user to the original request URI (which will cause\n+        // the original request to be restored)\n+        requestURI = savedRequestURL(session);\n+        if (log.isDebugEnabled())\n+            log.debug(\"Redirecting to original '\" + requestURI + \"'\");\n+        if (requestURI == null)\n+            if (landingPage == null) {\n+                response.sendError(HttpServletResponse.SC_BAD_REQUEST,\n+                        sm.getString(\"authenticator.formlogin\"));\n+            } else {\n+                // Make the authenticator think the user originally requested\n+                // the landing page\n+                String uri = request.getContextPath() + landingPage;\n+                SavedRequest saved = new SavedRequest();\n+                saved.setMethod(\"GET\");\n+                saved.setRequestURI(uri);\n+                session.setNote(Constants.FORM_REQUEST_NOTE, saved);\n+                \n+                response.sendRedirect(response.encodeRedirectURL(uri));\n+            }\n+        else\n+            response.sendRedirect(response.encodeRedirectURL(requestURI));\n+        return (false);\n+\t}\n+\n+\t@Override\n+\tprotected String getAuthMethod() {\n+\t\treturn FederationConstants.WSFED_METHOD;\n+\t}\n+\n+    /**\n+     * Called to redirect to the login page\n+     * \n+     * @param request Request we are processing\n+     * @param response Response we are populating\n+     * @param config    Login configuration describing how authentication\n+     *              should be performed\n+     * @throws IOException  If the forward to the login page fails and the call\n+     *                      to {@link HttpServletResponse#sendError(int, String)}\n+     *                      throws an {@link IOException}\n+     */\n+    protected void redirectToLoginPage(Request request,\n+            HttpServletResponse response, LoginConfig config)\n+            throws IOException {\n+        \n+    \tString redirectURL = null;\n+    \tString issuerURL = getIssuerURL();\n+    \tif (issuerURL != null && issuerURL.length() > 0) {\n+    \t\tredirectURL = issuerURL;\n+    \t}\n+    \tString loginPage = config.getLoginPage();\n+    \tif (redirectURL == null) {\n+    \t\tif (loginPage != null &&  loginPage.length() > 0) {\n+    \t\t\tredirectURL = loginPage;\n+    \t\t} else {\n+    \t\t\tString msg = sm.getString(\"formAuthenticator.noLoginPage\",\n+    \t\t\t\t\tcontext.getName());\n+    \t\t\tlog.warn(msg);\n+    \t\t\tresponse.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,\n+    \t\t\t\t\tmsg);\n+    \t\t\treturn;\n+    \t\t}\n+    \t}\n+        StringBuilder sb = new StringBuilder();\n+    \t\n+    \t//StringBuilder sb = new StringBuilder(redirectURL);\n+        //sb.append('?');\n+    \t\n+        sb.append(FederationConstants.PARAM_ACTION).append('=').append(FederationConstants.ACTION_SIGNIN);\n+\n+    \tsb.append('&').append(FederationConstants.PARAM_REPLY).append('=');\n+    \tsb.append(URLEncoder.encode(request.getRequestURL().toString(), \"UTF-8\"));       \t\n+        \t\n+        \t\n+    \t/*\n+    \t * http://hostname.com:80/mywebapp/servlet/MyServlet/a/b;c=123?d=789\n+    \tpublic static String getUrl3(HttpServletRequest req) {\n+    \t    String scheme = req.getScheme();             // http\n+    \t    String serverName = req.getServerName();     // hostname.com\n+    \t    int serverPort = req.getServerPort();        // 80\n+    \t    String contextPath = req.getContextPath();   // /mywebapp\n+    \t*/\n+    \tString contextPath = request.getContextPath();\n+    \tString requestUrl = request.getRequestURL().toString();\n+    \tint ctxIn = requestUrl.indexOf(contextPath);\n+    \t//String realm = request.getRequestURL().toString();\n+    \tString realm = requestUrl.substring(0, ctxIn + contextPath.length() + 1);\n+    \t\n+    \tStringBuffer realmSb = new StringBuffer(request.getScheme());\n+    \trealmSb.append(\"://\").append(request.getServerName()).\n+    \t        append(\":\").append(request.getServerPort()).\n+    \t        append(request.getContextPath());\n+//    \tsb.append('&').append(WsFedConstants.PARAM_TREALM).append('=').append(realmSb.toString());\n+    \tsb.append('&').append(FederationConstants.PARAM_TREALM).append('=').append(URLEncoder.encode(realm, \"UTF-8\"));\n+    \t\n+    \t\n+    \t//[TODO] Current time, wct\n+    \t\n+//        if (false) {\n+//        \tsb.append(\"&\");\n+//        \tsb.append(\"wfresh=jjjj\"); \n+//        }\n+//        if (false) {\n+//        \tsb.append(\"&\");\n+//        \tsb.append(\"wauth=jjjj\"); \n+//        }\n+//        if (false) {\n+//        \tsb.append(\"&\");wct\n+//        \tsb.append(\"wreq=jjjj\"); \n+//        }\n+//        if (false) {\n+//    \t    sb.append(\"&\");\n+//    \t    sb.append(\"wct=\").append(\"jjjj\");\n+//        }\n+\n+    \t        \n+        //WORKS, why didn't it when sb.toSring(contained redirectURL)\n+        //response.sendRedirect(response.encodeRedirectURL(redirectURL + \"?\" + response.encodeURL(sb.toString())));\n+    \t//response.sendRedirect(redirectURL + \"?\" + response.encodeURL(sb.toString()));\n+    \tresponse.sendRedirect(redirectURL + \"?\" + sb.toString());\n+        \n+        //WORKS NOW TOO, no, maybe already signed in, session with idp\n+        //response.sendRedirect(response.encodeRedirectURL(sb.toString()));\n+        \n+    }\n+\t\n+\t\n+}"
        },
        {
            "sha": "1574a4d4da345f9216e3010752605ab757c143bd",
            "filename": "fediz-tomcat/src/main/java/org/apache/cxf/fediz/tomcat/FederationPrincipal.java",
            "status": "added",
            "additions": 24,
            "deletions": 0,
            "changes": 24,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Ftomcat%2FFederationPrincipal.java",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Ftomcat%2FFederationPrincipal.java",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-tomcat%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Ffediz%2Ftomcat%2FFederationPrincipal.java?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,24 @@\n+package org.apache.cxf.fediz.tomcat;\n+\n+import java.util.List;\n+\n+import org.apache.catalina.realm.GenericPrincipal;\n+import org.apache.cxf.fediz.core.Claim;\n+import org.apache.cxf.fediz.core.ClaimCollection;\n+\n+public class FederationPrincipal extends GenericPrincipal {\n+\t// [TODO] make sure claims and roles are imutable \n+\tprotected ClaimCollection claims;\n+\t\n+\tpublic FederationPrincipal(String username, List<String> roles, List<Claim> claims) {\n+\t\tsuper(username, null, roles);\n+\t\tthis.claims = new ClaimCollection(claims);\n+\t}\n+\t\n+\tpublic ClaimCollection getClaims() {\n+\t\treturn this.claims;\n+\t}\n+\t\n+\t\n+\n+}"
        },
        {
            "sha": "74567e5b6c1c7c28f239c0a710802eeec259fda8",
            "filename": "fediz-tomcat/src/test/resources/logging.properties",
            "status": "added",
            "additions": 52,
            "deletions": 0,
            "changes": 52,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat%2Fsrc%2Ftest%2Fresources%2Flogging.properties",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/fediz-tomcat%2Fsrc%2Ftest%2Fresources%2Flogging.properties",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/fediz-tomcat%2Fsrc%2Ftest%2Fresources%2Flogging.properties?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,52 @@\n+############################################################\n+#  \tDefault Logging Configuration File\n+#\n+# You can use a different file by specifying a filename\n+# with the java.util.logging.config.file system property.  \n+# For example java -Djava.util.logging.config.file=myfile\n+############################################################\n+\n+############################################################\n+#  \tGlobal properties\n+############################################################\n+\n+# \"handlers\" specifies a comma separated list of log Handler \n+# classes.  These handlers will be installed during VM startup.\n+# Note that these classes must be on the system classpath.\n+# By default we only configure a ConsoleHandler, which will only\n+# show messages at the WARNING and above levels.\n+#handlers= java.util.logging.ConsoleHandler\n+#handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler\n+\n+# Default global logging level.\n+# This specifies which kinds of events are logged across\n+# all loggers.  For any given facility this global level\n+# can be overridden by a facility specific level\n+# Note that the ConsoleHandler also has a separate level\n+# setting to limit messages printed to the console.\n+.level= INFO\n+\n+############################################################\n+# Handler specific properties.\n+# Describes specific configuration info for Handlers.\n+############################################################\n+\n+# default file output is in user's home directory.\n+java.util.logging.FileHandler.pattern = %h/java%u.log\n+java.util.logging.FileHandler.limit = 50000\n+java.util.logging.FileHandler.count = 1\n+java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter\n+\n+# Limit the message that are printed on the console to WARNING and above.\n+java.util.logging.ConsoleHandler.level = INFO\n+java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter\n+\n+\n+############################################################\n+# Facility specific properties.\n+# Provides extra control for each logger.\n+############################################################\n+\n+# For example, set the com.xyz.foo logger to only log SEVERE\n+# messages:\n+#com.xyz.foo.level = SEVERE"
        },
        {
            "sha": "91cd46a5b105b8de8293dc66e80738e34dae28a0",
            "filename": "pom.xml",
            "status": "added",
            "additions": 116,
            "deletions": 0,
            "changes": 116,
            "blob_url": "https://github.com/apache/cxf-fediz/blob/ec46e587ac2cff468a1c10664dbf2af12d9672b5/pom.xml",
            "raw_url": "https://github.com/apache/cxf-fediz/raw/ec46e587ac2cff468a1c10664dbf2af12d9672b5/pom.xml",
            "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/pom.xml?ref=ec46e587ac2cff468a1c10664dbf2af12d9672b5",
            "patch": "@@ -0,0 +1,116 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+   <modelVersion>4.0.0</modelVersion>\n+   <groupId>org.apache.cxf.fediz</groupId>\n+   <artifactId>fediz</artifactId>\n+   <version>0.6-SNAPSHOT</version>\n+   <name>WS-Federation</name>\n+   <packaging>pom</packaging>\n+\n+   <modules>\n+      <module>fediz-core</module>\n+      <module>fediz-tomcat</module>\n+      <module>fediz-tomcat-example</module>\n+      <module>fediz-idp</module>\n+      <module>fediz-idp-sts</module>\n+   </modules>\n+\n+   <build>\n+      <plugins>\n+         <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-compiler-plugin</artifactId>\n+            <version>2.3.2</version>\n+            <configuration>\n+               <source>1.6</source>\n+               <target>1.6</target>\n+            </configuration>\n+         </plugin>\n+         <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-eclipse-plugin</artifactId>\n+            <version>2.8</version>\n+            <configuration>\n+               <downloadSources>true</downloadSources>\n+               <!--downloadJavadocs>true</downloadJavadocs-->\n+               <!--useProjectReferences>false</useProjectReferences-->\n+            </configuration>\n+         </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-pmd-plugin</artifactId>\n+                <version>2.5</version>\n+                <configuration>\n+                    <linkXRef>false</linkXRef>\n+                    <failOnViolation>true</failOnViolation>\n+                    <verbose>true</verbose>\n+                    <targetJdk>1.6</targetJdk>\n+                </configuration>\n+                <executions>\n+                    <execution>\n+                        <id>validate</id>\n+                        <phase>validate</phase>\n+                        <goals>\n+                            <goal>check</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-source-plugin</artifactId>\n+                <version>2.1.2</version>\n+                <executions>\n+                    <execution>\n+                        <id>attach-sources</id>\n+                        <phase>verify</phase>\n+                        <goals>\n+                            <goal>jar-no-fork</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+      </plugins>\n+   </build>\n+\n+   <properties>\n+      <slf4j.version>1.6.1</slf4j.version>\n+      <tomcat.version>7.0.21</tomcat.version>\n+      <junit.version>4.8.2</junit.version>\n+      <tomcat.url>http://localhost:8080/manager/text</tomcat.url>\n+      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+   </properties>\n+\n+   <dependencies>\n+   </dependencies>\n+\n+   <repositories>\n+       <repository>\n+           <id>apache.snapshots</id>\n+           <url>http://repository.apache.org/snapshots/</url>\n+           <name>Apache Snapshot Repo</name>\n+           <snapshots>\n+               <enabled>true</enabled>\n+           </snapshots>\n+           <releases>\n+               <enabled>false</enabled>\n+           </releases>\n+       </repository>\n+   </repositories>\n+   <pluginRepositories>\n+       <pluginRepository>\n+           <id>apache.snapshots</id>\n+           <url>http://repository.apache.org/snapshots/</url>\n+           <name>Apache Snapshot Repo</name>\n+           <snapshots>\n+               <enabled>true</enabled>\n+           </snapshots>\n+           <releases>\n+               <enabled>false</enabled>\n+           </releases>\n+       </pluginRepository>\n+   </pluginRepositories>\n+\n+</project>"
        }
    ]
}