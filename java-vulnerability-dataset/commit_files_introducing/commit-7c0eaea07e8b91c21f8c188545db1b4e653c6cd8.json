{
    "sha": "7c0eaea07e8b91c21f8c188545db1b4e653c6cd8",
    "node_id": "MDY6Q29tbWl0MzM4MjE5NTo3YzBlYWVhMDdlOGI5MWMyMWY4YzE4ODU0NWRiMWI0ZTY1M2M2Y2Q4",
    "commit": {
        "author": {
            "name": "Filip Hanik",
            "email": "fhanik@pivotal.io",
            "date": "2015-08-03T17:20:48Z"
        },
        "committer": {
            "name": "Filip Hanik",
            "email": "fhanik@pivotal.io",
            "date": "2015-08-03T17:20:48Z"
        },
        "message": "Reset session after a UI password change.",
        "tree": {
            "sha": "42b7488f46a18db0f4d2f8a8c768d49d753d33f0",
            "url": "https://api.github.com/repos/cloudfoundry/uaa/git/trees/42b7488f46a18db0f4d2f8a8c768d49d753d33f0"
        },
        "url": "https://api.github.com/repos/cloudfoundry/uaa/git/commits/7c0eaea07e8b91c21f8c188545db1b4e653c6cd8",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/cloudfoundry/uaa/commits/7c0eaea07e8b91c21f8c188545db1b4e653c6cd8",
    "html_url": "https://github.com/cloudfoundry/uaa/commit/7c0eaea07e8b91c21f8c188545db1b4e653c6cd8",
    "comments_url": "https://api.github.com/repos/cloudfoundry/uaa/commits/7c0eaea07e8b91c21f8c188545db1b4e653c6cd8/comments",
    "author": {
        "login": "fhanik",
        "id": 607429,
        "node_id": "MDQ6VXNlcjYwNzQyOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/607429?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fhanik",
        "html_url": "https://github.com/fhanik",
        "followers_url": "https://api.github.com/users/fhanik/followers",
        "following_url": "https://api.github.com/users/fhanik/following{/other_user}",
        "gists_url": "https://api.github.com/users/fhanik/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fhanik/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fhanik/subscriptions",
        "organizations_url": "https://api.github.com/users/fhanik/orgs",
        "repos_url": "https://api.github.com/users/fhanik/repos",
        "events_url": "https://api.github.com/users/fhanik/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fhanik/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "fhanik",
        "id": 607429,
        "node_id": "MDQ6VXNlcjYwNzQyOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/607429?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fhanik",
        "html_url": "https://github.com/fhanik",
        "followers_url": "https://api.github.com/users/fhanik/followers",
        "following_url": "https://api.github.com/users/fhanik/following{/other_user}",
        "gists_url": "https://api.github.com/users/fhanik/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fhanik/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fhanik/subscriptions",
        "organizations_url": "https://api.github.com/users/fhanik/orgs",
        "repos_url": "https://api.github.com/users/fhanik/repos",
        "events_url": "https://api.github.com/users/fhanik/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fhanik/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "57bbed111cc8fd80adbc474b73d1a2876d0ab841",
            "url": "https://api.github.com/repos/cloudfoundry/uaa/commits/57bbed111cc8fd80adbc474b73d1a2876d0ab841",
            "html_url": "https://github.com/cloudfoundry/uaa/commit/57bbed111cc8fd80adbc474b73d1a2876d0ab841"
        }
    ],
    "stats": {
        "total": 58,
        "additions": 56,
        "deletions": 2
    },
    "files": [
        {
            "sha": "9e29ee407fe29f6c6678799f8021f52b92c15398",
            "filename": "login/src/main/java/org/cloudfoundry/identity/uaa/login/ChangePasswordController.java",
            "status": "modified",
            "additions": 9,
            "deletions": 2,
            "changes": 11,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/7c0eaea07e8b91c21f8c188545db1b4e653c6cd8/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangePasswordController.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/7c0eaea07e8b91c21f8c188545db1b4e653c6cd8/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangePasswordController.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/login%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Flogin%2FChangePasswordController.java?ref=7c0eaea07e8b91c21f8c188545db1b4e653c6cd8",
            "patch": "@@ -15,13 +15,15 @@\n import org.cloudfoundry.identity.uaa.scim.exception.InvalidPasswordException;\n import org.springframework.http.HttpStatus;\n import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.core.Authentication;\n import org.springframework.security.core.context.SecurityContext;\n import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.stereotype.Controller;\n import org.springframework.ui.Model;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestParam;\n \n+import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n \n import static org.springframework.web.bind.annotation.RequestMethod.GET;\n@@ -47,7 +49,8 @@ public String changePassword(\n             @RequestParam(\"current_password\") String currentPassword,\n             @RequestParam(\"new_password\") String newPassword,\n             @RequestParam(\"confirm_password\") String confirmPassword,\n-            HttpServletResponse response) {\n+            HttpServletResponse response,\n+            HttpServletRequest request) {\n \n         PasswordConfirmationValidation validation = new PasswordConfirmationValidation(newPassword, confirmPassword);\n         if (!validation.valid()) {\n@@ -57,10 +60,14 @@ public String changePassword(\n         }\n \n         SecurityContext securityContext = SecurityContextHolder.getContext();\n-        String username = securityContext.getAuthentication().getName();\n+        Authentication authentication = securityContext.getAuthentication();\n+        String username = authentication.getName();\n \n         try {\n             changePasswordService.changePassword(username, currentPassword, newPassword);\n+            request.getSession().invalidate();\n+            request.getSession(true);\n+            securityContext.setAuthentication(authentication);\n             return \"redirect:profile\";\n         } catch (BadCredentialsException e) {\n             model.addAttribute(\"message_code\", \"unauthorized\");"
        },
        {
            "sha": "ac705237e87a462fc604ab5750d148d8f4dccfed",
            "filename": "uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/password/PasswordChangeEndpointMockMvcTests.java",
            "status": "modified",
            "additions": 47,
            "deletions": 0,
            "changes": 47,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/7c0eaea07e8b91c21f8c188545db1b4e653c6cd8/uaa%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fmock%2Fpassword%2FPasswordChangeEndpointMockMvcTests.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/7c0eaea07e8b91c21f8c188545db1b4e653c6cd8/uaa%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fmock%2Fpassword%2FPasswordChangeEndpointMockMvcTests.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Ftest%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fmock%2Fpassword%2FPasswordChangeEndpointMockMvcTests.java?ref=7c0eaea07e8b91c21f8c188545db1b4e653c6cd8",
            "patch": "@@ -19,14 +19,25 @@\n import org.cloudfoundry.identity.uaa.util.JsonUtils;\n import org.junit.Before;\n import org.junit.Test;\n+import org.springframework.mock.web.MockHttpSession;\n import org.springframework.security.oauth2.common.util.RandomValueStringGenerator;\n import org.springframework.security.oauth2.provider.client.BaseClientDetails;\n+import org.springframework.security.web.context.HttpSessionSecurityContextRepository;\n import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;\n \n+import javax.servlet.http.HttpSession;\n+\n import static org.cloudfoundry.identity.uaa.mock.util.MockMvcUtils.utils;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.assertTrue;\n import static org.springframework.http.MediaType.APPLICATION_JSON;\n+import static org.springframework.http.MediaType.TEXT_HTML_VALUE;\n+import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n public class PasswordChangeEndpointMockMvcTests extends InjectedMockContextTest {\n@@ -97,6 +108,42 @@ public void changePassword_SuccessfullyChangePassword() throws Exception {\n                 .andExpect(jsonPath(\"$.message\").value(\"password updated\"));\n     }\n \n+    @Test\n+    public void changePassword_Resets_Session() throws Exception {\n+        ScimUser user = createUser();\n+\n+        MockHttpSession session = new MockHttpSession();\n+        MockHttpSession afterLoginSession = (MockHttpSession) getMockMvc().perform(post(\"/login.do\")\n+            .session(session)\n+            .accept(TEXT_HTML_VALUE)\n+            .param(\"username\", user.getUserName())\n+            .param(\"password\", \"secr3T\"))\n+            .andExpect(status().isFound())\n+            .andExpect(redirectedUrl(\"/\"))\n+            .andReturn().getRequest().getSession(false);\n+\n+        assertTrue(session.isInvalid());\n+        assertNotNull(afterLoginSession);\n+        assertNotNull(afterLoginSession.getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY));\n+\n+        MockHttpSession afterPasswordChange = (MockHttpSession) getMockMvc().perform(post(\"/change_password.do\")\n+            .session(afterLoginSession)\n+            .with(csrf())\n+            .accept(TEXT_HTML_VALUE)\n+            .param(\"current_password\", \"secr3T\")\n+            .param(\"new_password\", \"secr3T1\")\n+            .param(\"confirm_password\", \"secr3T1\"))\n+            .andExpect(status().isFound())\n+            .andExpect(redirectedUrl(\"profile\"))\n+            .andReturn().getRequest().getSession(false);\n+\n+        assertTrue(afterLoginSession.isInvalid());\n+        assertNotNull(afterPasswordChange);\n+        assertNotNull(afterPasswordChange.getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY));\n+        assertNotSame(afterLoginSession, afterPasswordChange);\n+\n+    }\n+\n     private ScimUser createUser() throws Exception {\n         String id = generator.generate();\n         ScimUser user = new ScimUser(id, id + \"user@example.com\", \"name\", \"familyname\");"
        }
    ]
}