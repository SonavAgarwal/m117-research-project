{
    "sha": "f7db8aa81be1e0339a41de1ead9276174bcbe9a5",
    "node_id": "MDY6Q29tbWl0MjA2MzE3OmY3ZGI4YWE4MWJlMWUwMzM5YTQxZGUxZWFkOTI3NjE3NGJjYmU5YTU=",
    "commit": {
        "author": {
            "name": "Claus Ibsen",
            "email": "davsclaus@apache.org",
            "date": "2009-03-11T11:41:39Z"
        },
        "committer": {
            "name": "Claus Ibsen",
            "email": "davsclaus@apache.org",
            "date": "2009-03-11T11:41:39Z"
        },
        "message": "CAMEL-1439: Added flattern option to Camel VFS\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@752427 13f79535-47bb-0310-9956-ffa450edef68",
        "tree": {
            "sha": "5dadcd71cf66c115bd0efe121e4fef5a7fd012be",
            "url": "https://api.github.com/repos/apache/camel/git/trees/5dadcd71cf66c115bd0efe121e4fef5a7fd012be"
        },
        "url": "https://api.github.com/repos/apache/camel/git/commits/f7db8aa81be1e0339a41de1ead9276174bcbe9a5",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/camel/commits/f7db8aa81be1e0339a41de1ead9276174bcbe9a5",
    "html_url": "https://github.com/apache/camel/commit/f7db8aa81be1e0339a41de1ead9276174bcbe9a5",
    "comments_url": "https://api.github.com/repos/apache/camel/commits/f7db8aa81be1e0339a41de1ead9276174bcbe9a5/comments",
    "author": {
        "login": "davsclaus",
        "id": 477100,
        "node_id": "MDQ6VXNlcjQ3NzEwMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/477100?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davsclaus",
        "html_url": "https://github.com/davsclaus",
        "followers_url": "https://api.github.com/users/davsclaus/followers",
        "following_url": "https://api.github.com/users/davsclaus/following{/other_user}",
        "gists_url": "https://api.github.com/users/davsclaus/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/davsclaus/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/davsclaus/subscriptions",
        "organizations_url": "https://api.github.com/users/davsclaus/orgs",
        "repos_url": "https://api.github.com/users/davsclaus/repos",
        "events_url": "https://api.github.com/users/davsclaus/events{/privacy}",
        "received_events_url": "https://api.github.com/users/davsclaus/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "davsclaus",
        "id": 477100,
        "node_id": "MDQ6VXNlcjQ3NzEwMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/477100?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davsclaus",
        "html_url": "https://github.com/davsclaus",
        "followers_url": "https://api.github.com/users/davsclaus/followers",
        "following_url": "https://api.github.com/users/davsclaus/following{/other_user}",
        "gists_url": "https://api.github.com/users/davsclaus/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/davsclaus/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/davsclaus/subscriptions",
        "organizations_url": "https://api.github.com/users/davsclaus/orgs",
        "repos_url": "https://api.github.com/users/davsclaus/repos",
        "events_url": "https://api.github.com/users/davsclaus/events{/privacy}",
        "received_events_url": "https://api.github.com/users/davsclaus/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "7ac59de1ff24646c5b84b7b559fdc3d6622d1922",
            "url": "https://api.github.com/repos/apache/camel/commits/7ac59de1ff24646c5b84b7b559fdc3d6622d1922",
            "html_url": "https://github.com/apache/camel/commit/7ac59de1ff24646c5b84b7b559fdc3d6622d1922"
        }
    ],
    "stats": {
        "total": 173,
        "additions": 158,
        "deletions": 15
    },
    "files": [
        {
            "sha": "4667b17ffe7726124e54087693408e6dba709e04",
            "filename": "camel-core/src/main/java/org/apache/camel/component/file/FileOperations.java",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/apache/camel/blob/f7db8aa81be1e0339a41de1ead9276174bcbe9a5/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FFileOperations.java",
            "raw_url": "https://github.com/apache/camel/raw/f7db8aa81be1e0339a41de1ead9276174bcbe9a5/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FFileOperations.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FFileOperations.java?ref=f7db8aa81be1e0339a41de1ead9276174bcbe9a5",
            "patch": "@@ -76,6 +76,8 @@ public boolean buildDirectory(String directory, boolean absolute) throws Generic\n             return true;\n         }\n \n+        // TODO: Check bug for double starting directory\n+        \n         File path;\n         if (absolute) {\n             path = new File(directory);"
        },
        {
            "sha": "38fb62751641c60e023432b4383ca60996c65bfc",
            "filename": "camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java",
            "status": "modified",
            "additions": 14,
            "deletions": 2,
            "changes": 16,
            "blob_url": "https://github.com/apache/camel/blob/f7db8aa81be1e0339a41de1ead9276174bcbe9a5/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FGenericFile.java",
            "raw_url": "https://github.com/apache/camel/raw/f7db8aa81be1e0339a41de1ead9276174bcbe9a5/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FGenericFile.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FGenericFile.java?ref=f7db8aa81be1e0339a41de1ead9276174bcbe9a5",
            "patch": "@@ -95,11 +95,18 @@ public void changeFileName(String newName) {\n         if (LOG.isTraceEnabled()) {\n             LOG.trace(\"Changing name to: \" + newName);\n         }\n+\n         // Make sure the newName is normalized.\n         String newFileName = FileUtil.normalizePath(newName);\n-        File file = new File(newFileName);            \n+\n+        if (LOG.isTraceEnabled()) {\n+            LOG.trace(\"Normalized endpointPath: \" + endpointPath);\n+            LOG.trace(\"Normalized newFileName: \" + newFileName);\n+        }\n+\n+        File file = new File(newFileName);\n         if (!absolute) {\n-            // for relative then we should avoid having the endpoint path duplicated so clip it            \n+            // for relative then we should avoid having the endpoint path duplicated so clip it\n             if (ObjectHelper.isNotEmpty(endpointPath) && newFileName.startsWith(endpointPath)) {\n                 // clip starting endpoint in case it was added\n                 newFileName = ObjectHelper.after(newFileName, endpointPath + getFileSeparator());\n@@ -132,6 +139,11 @@ public void changeFileName(String newName) {\n         }\n \n         if (LOG.isTraceEnabled()) {\n+            LOG.trace(\"FileNameOnly: \" + getFileNameOnly());\n+            LOG.trace(\"FileName: \" + getFileName());\n+            LOG.trace(\"Absolute: \" + isAbsolute());\n+            LOG.trace(\"Relative path: \" + getRelativeFilePath());\n+            LOG.trace(\"Absolute path: \" + getAbsoluteFilePath());\n             LOG.trace(\"Name changed to: \" + this);\n         }\n     }"
        },
        {
            "sha": "8c063ee50f9775fc71a6f00d82c667e8190de2f6",
            "filename": "camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java",
            "status": "modified",
            "additions": 23,
            "deletions": 9,
            "changes": 32,
            "blob_url": "https://github.com/apache/camel/blob/f7db8aa81be1e0339a41de1ead9276174bcbe9a5/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FGenericFileEndpoint.java",
            "raw_url": "https://github.com/apache/camel/raw/f7db8aa81be1e0339a41de1ead9276174bcbe9a5/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FGenericFileEndpoint.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FGenericFileEndpoint.java?ref=f7db8aa81be1e0339a41de1ead9276174bcbe9a5",
            "patch": "@@ -59,6 +59,7 @@ public abstract class GenericFileEndpoint<T> extends ScheduledPollEndpoint {\n     protected boolean noop;\n     protected boolean recursive;\n     protected boolean delete;\n+    protected boolean flattern;\n     protected String tempPrefix;\n     protected String include;\n     protected String exclude;\n@@ -186,6 +187,14 @@ public void setDelete(boolean delete) {\n         this.delete = delete;\n     }\n \n+    public boolean isFlattern() {\n+        return flattern;\n+    }\n+\n+    public void setFlattern(boolean flattern) {\n+        this.flattern = flattern;\n+    }\n+\n     public Expression getMove() {\n         return move;\n     }\n@@ -386,17 +395,22 @@ public void setLocalWorkDirectory(String localWorkDirectory) {\n     public void configureMessage(GenericFile<T> file, Message message) {\n         message.setBody(file);\n \n-        // compute name to set on header that should be relative to starting directory\n-        String name = file.isAbsolute() ? file.getAbsoluteFilePath() : file.getRelativeFilePath();\n+        if (flattern) {\n+            // when flattern the file name should not contain any paths\n+            message.setHeader(Exchange.FILE_NAME, file.getFileNameOnly());\n+        } else {\n+            // compute name to set on header that should be relative to starting directory\n+            String name = file.isAbsolute() ? file.getAbsoluteFilePath() : file.getRelativeFilePath();\n+\n+            // skip leading endpoint configured directory\n+            String endpointPath = getConfiguration().getDirectory();\n+            if (ObjectHelper.isNotEmpty(endpointPath) && name.startsWith(endpointPath)) {\n+                name = ObjectHelper.after(name, getConfiguration().getDirectory() + File.separator);\n+            }\n \n-        // skip leading endpoint configured directory\n-        String endpointPath = getConfiguration().getDirectory();\n-        if (ObjectHelper.isNotEmpty(endpointPath) && name.startsWith(endpointPath)) {\n-            name = ObjectHelper.after(name, getConfiguration().getDirectory() + File.separator);\n+            // adjust filename\n+            message.setHeader(Exchange.FILE_NAME, name);\n         }\n-\n-        // adjust filename\n-        message.setHeader(Exchange.FILE_NAME, name);\n     }\n \n     /**"
        },
        {
            "sha": "c42b8f356621499dc64d3609e8861a08175cd1c8",
            "filename": "camel-core/src/main/java/org/apache/camel/component/file/GenericFileProducer.java",
            "status": "modified",
            "additions": 17,
            "deletions": 4,
            "changes": 21,
            "blob_url": "https://github.com/apache/camel/blob/f7db8aa81be1e0339a41de1ead9276174bcbe9a5/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FGenericFileProducer.java",
            "raw_url": "https://github.com/apache/camel/raw/f7db8aa81be1e0339a41de1ead9276174bcbe9a5/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FGenericFileProducer.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FGenericFileProducer.java?ref=f7db8aa81be1e0339a41de1ead9276174bcbe9a5",
            "patch": "@@ -122,7 +122,7 @@ protected void writeFile(GenericFileExchange<T> exchange, String fileName) throw\n                     // skip trailing /\n                     directory = FileUtil.stripLeadingSeparator(directory);\n                     if (!operations.buildDirectory(directory, false)) {\n-                        log.debug(\"Can not build directory [\" + directory + \"] (could be because of denied permissions)\");\n+                        log.debug(\"Cannot build directory [\" + directory + \"] (could be because of denied permissions)\");\n                     }\n                 }\n             }\n@@ -170,12 +170,25 @@ protected String createFileName(Exchange exchange) {\n             name = expression.evaluate(exchange, String.class);\n         }\n \n-        String endpointFile = endpoint.getConfiguration().getDirectory();\n+\n+        // flattern name\n+        if (endpoint.isFlattern()) {\n+            int pos = name.lastIndexOf(File.separator);\n+            if (pos == -1) {\n+                pos = name.lastIndexOf('/');\n+            }\n+            if (pos != -1) {\n+                name = name.substring(pos + 1);\n+            }\n+        }\n+\n+        // compute path by adding endpoint starting directory\n+        String endpointPath = endpoint.getConfiguration().getDirectory();\n         // Its a directory so we should use it as a base path for the filename\n         // If the path isn't empty, we need to add a trailing / if it isn't already there\n         String baseDir = \"\";\n-        if (endpointFile.length() > 0) {\n-            baseDir = endpointFile + (endpointFile.endsWith(File.separator) ? \"\" : File.separator);\n+        if (endpointPath.length() > 0) {\n+            baseDir = endpointPath + (endpointPath.endsWith(File.separator) ? \"\" : File.separator);\n         }\n         if (name != null) {\n             answer = baseDir + name;"
        },
        {
            "sha": "b880d9740f59acd869d4df2dbda913c9d5042ba8",
            "filename": "camel-core/src/test/java/org/apache/camel/component/file/FileToFileWithFlatternTest.java",
            "status": "added",
            "additions": 102,
            "deletions": 0,
            "changes": 102,
            "blob_url": "https://github.com/apache/camel/blob/f7db8aa81be1e0339a41de1ead9276174bcbe9a5/camel-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FFileToFileWithFlatternTest.java",
            "raw_url": "https://github.com/apache/camel/raw/f7db8aa81be1e0339a41de1ead9276174bcbe9a5/camel-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FFileToFileWithFlatternTest.java",
            "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fcamel%2Fcomponent%2Ffile%2FFileToFileWithFlatternTest.java?ref=f7db8aa81be1e0339a41de1ead9276174bcbe9a5",
            "patch": "@@ -0,0 +1,102 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.file;\n+\n+import org.apache.camel.ContextTestSupport;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+\n+/**\n+ * @version $Revision$\n+ */\n+public class FileToFileWithFlatternTest extends ContextTestSupport {\n+\n+    private String fileUrl = \"file://target/flattern-in\";\n+\n+    @Override\n+    public boolean isUseRouteBuilder() {\n+        return false;\n+    }\n+\n+    @Override\n+    protected void setUp() throws Exception {\n+        deleteDirectory(\"./target/flattern-in\");\n+        deleteDirectory(\"./target/flattern-out\");\n+        super.setUp();\n+        template.sendBodyAndHeader(fileUrl, \"Bye World\", Exchange.FILE_NAME, \"bye.txt\");\n+        template.sendBodyAndHeader(fileUrl, \"Hello World\", Exchange.FILE_NAME, \"sub/hello.txt\");\n+        template.sendBodyAndHeader(fileUrl, \"Goodday World\", Exchange.FILE_NAME, \"sub/sub2/goodday.txt\");\n+    }\n+\n+    @Override\n+    protected void tearDown() throws Exception {\n+        context.stop();\n+        super.tearDown();\n+    }\n+\n+    public void testFlatternConsumer() throws Exception {\n+        context.addRoutes(new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"file://target/flattern-in?recursive=true&flattern=true\").to(\"file://target/flattern-out\", \"mock:result\");\n+            }\n+        });\n+        context.start();\n+\n+        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n+        mock.expectedMessageCount(3);\n+\n+        // flattern files\n+        mock.expectedFileExists(\"./target/flattern-out/bye.txt\");\n+        mock.expectedFileExists(\"./target/flattern-out/hello.txt\");\n+        mock.expectedFileExists(\"./target/flattern-out/goodday.txt\");\n+\n+        // default move files\n+        mock.expectedFileExists(\"./target/flattern-in/.camel/bye.txt\");\n+        mock.expectedFileExists(\"./target/flattern-in/sub/.camel/hello.txt\");\n+        mock.expectedFileExists(\"./target/flattern-in/sub/sub2/.camel/goodday.txt\");\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    public void testFlatternProducer() throws Exception {\n+        context.addRoutes(new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"file://target/flattern-in?recursive=true\").to(\"file://target/flattern-out?flattern=true\", \"mock:result\");\n+            }\n+        });\n+        context.start();\n+\n+        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n+        mock.expectedMessageCount(3);\n+\n+        // flattern files\n+        mock.expectedFileExists(\"./target/flattern-out/bye.txt\");\n+        mock.expectedFileExists(\"./target/flattern-out/hello.txt\");\n+        mock.expectedFileExists(\"./target/flattern-out/goodday.txt\");\n+\n+        // default move files\n+        mock.expectedFileExists(\"./target/flattern-in/.camel/bye.txt\");\n+        mock.expectedFileExists(\"./target/flattern-in/sub/.camel/hello.txt\");\n+        mock.expectedFileExists(\"./target/flattern-in/sub/sub2/.camel/goodday.txt\");\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+}"
        }
    ]
}