{
    "sha": "78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
    "node_id": "MDY6Q29tbWl0NjIyMDY0NDo3OGVkZmY2ZjdmNDEwYmI1M2MwM2U2N2Y3ZjkwYTZkMzUyMWNlZTdm",
    "commit": {
        "author": {
            "name": "David Huynh",
            "email": "dfhuynh@gmail.com",
            "date": "2011-08-02T03:34:47Z"
        },
        "committer": {
            "name": "David Huynh",
            "email": "dfhuynh@gmail.com",
            "date": "2011-08-02T03:34:47Z"
        },
        "message": "Merged new importer UI work from branch over.\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@2170 7d457c2a-affb-35e4-300a-418c747d4874",
        "tree": {
            "sha": "2f4e25269cc3c88de9328c715866722dca4a29e9",
            "url": "https://api.github.com/repos/OpenRefine/OpenRefine/git/trees/2f4e25269cc3c88de9328c715866722dca4a29e9"
        },
        "url": "https://api.github.com/repos/OpenRefine/OpenRefine/git/commits/78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/OpenRefine/OpenRefine/commits/78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
    "html_url": "https://github.com/OpenRefine/OpenRefine/commit/78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
    "comments_url": "https://api.github.com/repos/OpenRefine/OpenRefine/commits/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/comments",
    "author": {
        "login": "dfhuynh",
        "id": 716319,
        "node_id": "MDQ6VXNlcjcxNjMxOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/716319?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dfhuynh",
        "html_url": "https://github.com/dfhuynh",
        "followers_url": "https://api.github.com/users/dfhuynh/followers",
        "following_url": "https://api.github.com/users/dfhuynh/following{/other_user}",
        "gists_url": "https://api.github.com/users/dfhuynh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dfhuynh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dfhuynh/subscriptions",
        "organizations_url": "https://api.github.com/users/dfhuynh/orgs",
        "repos_url": "https://api.github.com/users/dfhuynh/repos",
        "events_url": "https://api.github.com/users/dfhuynh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dfhuynh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "dfhuynh",
        "id": 716319,
        "node_id": "MDQ6VXNlcjcxNjMxOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/716319?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dfhuynh",
        "html_url": "https://github.com/dfhuynh",
        "followers_url": "https://api.github.com/users/dfhuynh/followers",
        "following_url": "https://api.github.com/users/dfhuynh/following{/other_user}",
        "gists_url": "https://api.github.com/users/dfhuynh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dfhuynh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dfhuynh/subscriptions",
        "organizations_url": "https://api.github.com/users/dfhuynh/orgs",
        "repos_url": "https://api.github.com/users/dfhuynh/repos",
        "events_url": "https://api.github.com/users/dfhuynh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dfhuynh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "0fa99d21cab6edf83360182fcf46cb4153e22c83",
            "url": "https://api.github.com/repos/OpenRefine/OpenRefine/commits/0fa99d21cab6edf83360182fcf46cb4153e22c83",
            "html_url": "https://github.com/OpenRefine/OpenRefine/commit/0fa99d21cab6edf83360182fcf46cb4153e22c83"
        }
    ],
    "stats": {
        "total": 14040,
        "additions": 9609,
        "deletions": 4431
    },
    "files": [
        {
            "sha": "2cc5f6c97ea190e367b6a3ca12bbb6fe5bd22680",
            "filename": "extensions/gdata/module/MOD-INF/controller.js",
            "status": "modified",
            "additions": 15,
            "deletions": 13,
            "changes": 28,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/extensions%2Fgdata%2Fmodule%2FMOD-INF%2Fcontroller.js",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/extensions%2Fgdata%2Fmodule%2FMOD-INF%2Fcontroller.js",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/extensions%2Fgdata%2Fmodule%2FMOD-INF%2Fcontroller.js?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -33,8 +33,7 @@ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n \n var html = \"text/html\";\n var encoding = \"UTF-8\";\n-var version=\"0.2\"\n-var ClientSideResourceManager = Packages.com.google.refine.ClientSideResourceManager;\n+var version = \"0.2\";\n \n /*\n  * Function invoked to initialize the extension.\n@@ -43,21 +42,24 @@ function init() {\n //    Packages.java.lang.System.err.println(\"Initializing gData extension\");\n //    Packages.java.lang.System.err.println(module.getMountPoint());\n \n-\tPackages.com.google.refine.RefineServlet.registerCommand(\n-        module, \"authorize\", Packages.com.google.refine.extension.gdata.AuthorizeCommand());\n-\tPackages.com.google.refine.RefineServlet.registerCommand(\n-\t        module, \"authorize2\", Packages.com.google.refine.extension.gdata.AuthorizeCommand2());\n-\tPackages.com.google.refine.RefineServlet.registerCommand(\n-        module, \"deauthorize\", Packages.com.google.refine.extension.gdata.DeAuthorizeCommand());\n-\n+    var RS = Packages.com.google.refine.RefineServlet;\n+    RS.registerCommand(module, \"authorize\", Packages.com.google.refine.extension.gdata.AuthorizeCommand());\n+    RS.registerCommand(module, \"authorize2\", Packages.com.google.refine.extension.gdata.AuthorizeCommand2());\n+    RS.registerCommand(module, \"deauthorize\", Packages.com.google.refine.extension.gdata.DeAuthorizeCommand());\n+    \n     // Register importer and exporter\n-    Packages.com.google.refine.importers.ImporterRegistry.registerImporter(\n-    \t      \"gdata-importer\", new Packages.com.google.refine.extension.gdata.GDataImporter());\n+    var IM = Packages.com.google.refine.importing.ImportingManager;\n+    IM.registerFormat(\"service/gdata\", \"GData services\"); // generic format, no parser to handle it\n+    IM.registerFormat(\"service/gdata/spreadsheet\", \"Google spreadsheets\", false, \"GoogleSpreadsheetParserUI\",\n+        new Packages.com.google.refine.extension.gdata.GDataImporter());\n+    IM.registerUrlRewriter(new Packages.com.google.refine.extension.gdata.GDataUrlRewriter())\n+    IM.registerUrlRewriter(new Packages.com.google.refine.extension.gdata.FusionTablesUrlRewriter())\n \n //    Packages.com.google.refine.exporters.ExporterRegistry.registerExporter(\n-//  \t      \"gdata-exporter\", new Packages.com.google.refine.extension.gdata.GDataExporter());\n+//            \"gdata-exporter\", new Packages.com.google.refine.extension.gdata.GDataExporter());\n \n     // Script files to inject into /project page\n+    var ClientSideResourceManager = Packages.com.google.refine.ClientSideResourceManager;\n     ClientSideResourceManager.addPaths(\n         \"project/scripts\",\n         module,\n@@ -82,7 +84,7 @@ function init() {\n  */\n function process(path, request, response) {\n     // Analyze path and handle this request yourself.\n-\t\n+    \n     if (path == \"/\" || path == \"\") {\n         var context = {};\n         // here's how to pass things into the .vt templates"
        },
        {
            "sha": "5cd425e8e76d03413a3ae74bac175f00cc6666dc",
            "filename": "extensions/gdata/src/com/google/refine/extension/gdata/FusionTablesUrlRewriter.java",
            "status": "added",
            "additions": 128,
            "deletions": 0,
            "changes": 128,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/extensions%2Fgdata%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fgdata%2FFusionTablesUrlRewriter.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/extensions%2Fgdata%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fgdata%2FFusionTablesUrlRewriter.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/extensions%2Fgdata%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fgdata%2FFusionTablesUrlRewriter.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright (c) 2010, Thomas F. Morris\n+ *        All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without \n+ * modification, are permitted provided that the following conditions are met:\n+ * - Redistributions of source code must retain the above copyright notice, this \n+ *   list of conditions and the following disclaimer.\n+ * - Redistributions in binary form must reproduce the above copyright notice, \n+ *   this list of conditions and the following disclaimer in the documentation \n+ *   and/or other materials provided with the distribution.\n+ * \n+ * Neither the name of Google nor the names of its contributors may be used to \n+ * endorse or promote products derived from this software without specific \n+ * prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, \n+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR \n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, \n+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; \n+ * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, \n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR \n+ * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n+ * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.google.refine.extension.gdata;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UnsupportedEncodingException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLEncoder;\n+\n+import com.google.gdata.client.GoogleService;\n+import com.google.gdata.client.Service.GDataRequest;\n+import com.google.gdata.client.Service.GDataRequest.RequestType;\n+import com.google.gdata.util.ContentType;\n+import com.google.gdata.util.ServiceException;\n+import com.google.refine.importing.UrlRewriter;\n+\n+/**\n+ * @author Tom Morris <tfmorris@gmail.com>\n+ * @copyright 2010 Thomas F. Morris\n+ * @license New BSD http://www.opensource.org/licenses/bsd-license.php\n+ */\n+public class FusionTablesUrlRewriter implements UrlRewriter {\n+\n+    @Override\n+    public Result rewrite(String urlString) {\n+        try {\n+            URL url = new URL(urlString);\n+            if (isFusionTableURL(url)) {\n+                Result result = new Result();\n+                try {\n+                    result.rewrittenUrl = generateQueryUrl(url, 0, -1).toExternalForm();\n+                    result.format = \"text/line-based/*sv\";\n+                    result.download = true;\n+                    return result;\n+                } catch (UnsupportedEncodingException e) {\n+                    // TODO: what do we do here?\n+                }\n+            }\n+        } catch (MalformedURLException e) {\n+            // Ignore\n+        }\n+        return null;\n+    }\n+    \n+    static public boolean isFusionTableURL(URL url) {\n+        // http://www.google.com/fusiontables/DataSource?dsrcid=1219\n+        String query = url.getQuery();\n+        if (query == null) {\n+            query = \"\";\n+        }\n+        return url.getHost().endsWith(\".google.com\") \n+                && url.getPath().startsWith(\"/fusiontables/DataSource\")\n+                && query.contains(\"dsrcid=\");\n+    }\n+    \n+    static public URL generateQueryUrl(URL url, int start, int limit)\n+        throws MalformedURLException, UnsupportedEncodingException {\n+        \n+        String tableId = getFusionTableKey(url);\n+        \n+        final String SERVICE_URL =\n+            \"http://www.google.com/fusiontables/api/query\";\n+        final String selectQuery = \"select * from \" + tableId\n+            + \" offset \" + (start) + (limit > 0 ? (\" limit \" + limit) : \"\");\n+        \n+        return new URL(SERVICE_URL + \"?sql=\" + URLEncoder.encode(selectQuery, \"UTF-8\"));\n+    }\n+    \n+    static public InputStream openInputStream(URL queryUrl) throws IOException, ServiceException {\n+        GoogleService service = new GoogleService(\"fusiontables\", GDataExtension.SERVICE_APP_NAME);\n+        // String token = TokenCookie.getToken(request);\n+        // if (token != null) {\n+        // service.setAuthSubToken(token);\n+        // }\n+        GDataRequest queryRequest = service.getRequestFactory().getRequest(\n+                RequestType.QUERY, queryUrl, ContentType.TEXT_PLAIN);\n+        queryRequest.execute();\n+        \n+        return queryRequest.getResponseStream();\n+    }\n+    \n+    static private String getFusionTableKey(URL url) {\n+        String query = url.getQuery();\n+        if (query != null) {\n+            String[] parts = query.split(\"&\");\n+            for (String part : parts) {\n+                if (part.startsWith(\"dsrcid=\")) {\n+                    int offset = (\"dsrcid=\").length();\n+                    String tableId = part.substring(offset);\n+                    // TODO: Any special id format considerations to worry about?\n+    //                if (tableId.startsWith(\"p\") || !tableId.contains(\".\")) {\n+    //                    return tableId;\n+    //                }\n+                    return tableId;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+}"
        },
        {
            "sha": "1997ba2b18d9b13c19c5d6716877578e3f812388",
            "filename": "extensions/gdata/src/com/google/refine/extension/gdata/GDataExtension.java",
            "status": "added",
            "additions": 49,
            "deletions": 0,
            "changes": 49,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/extensions%2Fgdata%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fgdata%2FGDataExtension.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/extensions%2Fgdata%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fgdata%2FGDataExtension.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/extensions%2Fgdata%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fgdata%2FGDataExtension.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2010, Thomas F. Morris\n+ *        All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without \n+ * modification, are permitted provided that the following conditions are met:\n+ * - Redistributions of source code must retain the above copyright notice, this \n+ *   list of conditions and the following disclaimer.\n+ * - Redistributions in binary form must reproduce the above copyright notice, \n+ *   this list of conditions and the following disclaimer in the documentation \n+ *   and/or other materials provided with the distribution.\n+ * \n+ * Neither the name of Google nor the names of its contributors may be used to \n+ * endorse or promote products derived from this software without specific \n+ * prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, \n+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR \n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, \n+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; \n+ * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, \n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR \n+ * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n+ * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.google.refine.extension.gdata;\n+\n+import com.google.gdata.client.spreadsheet.FeedURLFactory;\n+\n+/**\n+ * @author Tom Morris <tfmorris@gmail.com>\n+ * @copyright 2010 Thomas F. Morris\n+ * @license New BSD http://www.opensource.org/licenses/bsd-license.php\n+ */\n+abstract public class GDataExtension {\n+    static final String SERVICE_APP_NAME = \"Google-Refine-GData-Extension\";\n+\n+    static private FeedURLFactory factory;\n+    static public FeedURLFactory getFeedUrlFactory() {\n+        if (factory == null) {\n+            // Careful - this is shared by everyone.\n+            factory = FeedURLFactory.getDefault();\n+        }\n+        return factory;\n+    }\n+}"
        },
        {
            "sha": "285c81fc55ca07de24a98cea8c15e34079b889be",
            "filename": "extensions/gdata/src/com/google/refine/extension/gdata/GDataImporter.java",
            "status": "modified",
            "additions": 125,
            "deletions": 363,
            "changes": 488,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/extensions%2Fgdata%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fgdata%2FGDataImporter.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/extensions%2Fgdata%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fgdata%2FGDataImporter.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/extensions%2Fgdata%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fgdata%2FGDataImporter.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2010,2011. Thomas F. Morris\n+ * Copyright (c) 2010, Thomas F. Morris\n  *        All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without \n@@ -29,282 +29,126 @@\n package com.google.refine.extension.gdata;\n \n import java.io.IOException;\n-import java.io.Serializable;\n import java.net.MalformedURLException;\n import java.net.URL;\n-import java.net.URLEncoder;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Properties;\n-import java.util.Scanner;\n-import java.util.regex.MatchResult;\n-import java.util.regex.Pattern;\n \n-import com.google.gdata.client.GoogleService;\n-import com.google.gdata.client.Service.GDataRequest;\n-import com.google.gdata.client.Service.GDataRequest.RequestType;\n+import org.json.JSONObject;\n+\n import com.google.gdata.client.spreadsheet.CellQuery;\n-import com.google.gdata.client.spreadsheet.FeedURLFactory;\n import com.google.gdata.client.spreadsheet.SpreadsheetService;\n+import com.google.gdata.data.spreadsheet.Cell;\n import com.google.gdata.data.spreadsheet.CellEntry;\n import com.google.gdata.data.spreadsheet.CellFeed;\n-import com.google.gdata.data.spreadsheet.ListEntry;\n-import com.google.gdata.data.spreadsheet.ListFeed;\n import com.google.gdata.data.spreadsheet.SpreadsheetEntry;\n import com.google.gdata.data.spreadsheet.SpreadsheetFeed;\n import com.google.gdata.data.spreadsheet.WorksheetEntry;\n import com.google.gdata.data.spreadsheet.WorksheetFeed;\n-import com.google.gdata.util.ContentType;\n-import com.google.gdata.util.InvalidEntryException;\n import com.google.gdata.util.ServiceException;\n import com.google.refine.ProjectMetadata;\n-import com.google.refine.expr.ExpressionUtils;\n-import com.google.refine.importers.ImporterUtilities;\n-import com.google.refine.importers.UrlImporter;\n-import com.google.refine.model.Cell;\n-import com.google.refine.model.Column;\n+import com.google.refine.importers.TabularImportingParserBase;\n+import com.google.refine.importing.ImportingJob;\n+import com.google.refine.importing.ImportingUtilities;\n import com.google.refine.model.Project;\n-import com.google.refine.model.Row;\n+import com.google.refine.util.JSONUtilities;\n \n /**\n- * Google Refine importer for Google Spreadsheets.\n+ * Google Refine parser for Google Spreadsheets.\n  * \n  * @author Tom Morris <tfmorris@gmail.com>\n  * @copyright 2010 Thomas F. Morris\n  * @license New BSD http://www.opensource.org/licenses/bsd-license.php\n  */\n-public class GDataImporter implements UrlImporter {\n-\n-\tstatic final String SERVICE_APP_NAME = \"Google-Refine-GData-Extension\";\n-\n-\tprivate FeedURLFactory factory;\n-\n+public class GDataImporter extends TabularImportingParserBase {\n     public GDataImporter() {\n-        // Careful - this constructor is called at server init time \n-        // and is shared by everyone.\n-        factory = FeedURLFactory.getDefault();\n+        super(false);\n     }\n-\n-    @Override\n-    public void read(URL url, Project project, ProjectMetadata metadata,\n-            Properties options) throws Exception {\n-\n-        int ignoreLines = ImporterUtilities.getIntegerOption(\"ignore\", options, -1);\n-        int headerLines = ImporterUtilities.getIntegerOption(\"header-lines\", options, 1);\n-        int limit = ImporterUtilities.getIntegerOption(\"limit\", options, -1);\n-\n-        // Note: Unlike TSV/CSV importer, we count all rows towards skip, not\n-        // just \"data\" rows\n-        int skip = ImporterUtilities.getIntegerOption(\"skip\", options, 0);\n-        int dataStart = ignoreLines + headerLines + skip;\n-        boolean guessValueType = ImporterUtilities.getBooleanOption(\n-                \"guess-value-type\", options, true);\n-\n-        // TODO: Put this in a namespace?\n-        metadata.setCustomMetadata(\"source-url\", url.toExternalForm());\n-\n-        // Start fresh for each read so that we're not caching authorization or\n-        // anything\n-        if (isSpreadsheetURL(url)) {\n-            importSpreadsheet(url, project, ignoreLines, headerLines, limit,\n-                    dataStart, guessValueType);\n-        } else if (isFusionTableURL(url)) {\n-            importFusionTable(url, project, ignoreLines, headerLines, limit,\n-                    dataStart, guessValueType);\n-        } else {\n-            // should never happen (famous last words)\n-            throw new IllegalArgumentException(\n-                    \"Got invalid format URL in GDataImporter.read()\");\n-        }\n-    }\n-\n-    private void importSpreadsheet(URL url, Project project, int ignoreLines,\n-            int headerLines, int limit, int dataStart, boolean guessValueType)\n-            throws MalformedURLException, IOException, ServiceException,\n-            Exception {\n-        SpreadsheetService service = new SpreadsheetService(SERVICE_APP_NAME);\n+    \n+    public void parseOneFile(\n+        Project project,\n+        ProjectMetadata metadata,\n+        ImportingJob job,\n+        JSONObject fileRecord,\n+        int limit,\n+        JSONObject options,\n+        List<Exception> exceptions\n+    ) throws IOException {\n+        String fileSource = ImportingUtilities.getFileSource(fileRecord);\n+        String urlString = JSONUtilities.getString(fileRecord, \"url\", null);\n+        URL url = new URL(urlString);\n+\n+        SpreadsheetService service = new SpreadsheetService(GDataExtension.SERVICE_APP_NAME);\n         // String token = TokenCookie.getToken(request);\n         // if (token != null) {\n         // service.setAuthSubToken(token);\n         // }\n         String spreadsheetKey = getSpreadsheetKey(url);\n-        WorksheetEntry worksheet;\n-        try {\n-            worksheet = getWorksheetEntries(service, spreadsheetKey).get(0);\n-        } catch (InvalidEntryException e) {\n-            throw new RuntimeException(\"Failed to open spreadsheet \"\n-                    + e.getResponseBody(), e);\n-        }\n-\n-        // Create columns\n-        List<String> columnHeaders = getColumnHeaders(service, worksheet,\n-                ignoreLines, headerLines);\n-\n-        int columnCount = worksheet.getColCount();\n-        project.columnModel.setMaxCellIndex(columnCount);\n-        boolean validColumn[] = new boolean[columnCount];\n-        int index = 0;\n-        for (String name : columnHeaders) {\n-            Column column = new Column(index, name + \" \" + index);\n-            project.columnModel.columns.add(column);\n-            validColumn[index++] = true;\n-        }\n-        for (int i = index; index < columnCount; index++) {\n-            Column column = new Column(index, \"Column \" + index);\n-            project.columnModel.columns.add(column);\n-            validColumn[i] = true;\n-        }\n-\n-        // Create data rows & cells\n-        int previousRow = dataStart - 1;\n-        int previousCol = -1;\n-        List<CellEntry> cellEntries = getCells(service, worksheet, dataStart);\n-        Row row = null;\n-        for (CellEntry cellEntry : cellEntries) {\n-            com.google.gdata.data.spreadsheet.Cell cell = cellEntry.getCell();\n-            if (cell == null) {\n+        \n+        int[] sheets = JSONUtilities.getIntArray(options, \"sheets\");\n+        for (int sheetIndex : sheets) {\n+            WorksheetEntry worksheet;\n+            try {\n+                worksheet = getWorksheetEntries(service, spreadsheetKey).get(sheetIndex);\n+            } catch (ServiceException e) {\n+                exceptions.add(e);\n                 continue;\n             }\n-            int r = cell.getRow() - 1; // convert from 1-based to 0-based\n-            int c = cell.getCol() - 1;\n-\n-            if (limit > 0 && r > limit) {\n-                break;\n-            }\n-\n-            // Handle gaps in rows\n-            if (r > previousRow) {\n-                // Finish and add current row\n-                if (row != null) {\n-                    project.rows.add(row);\n-                    // project.columnModel.setMaxCellIndex(row.cells.size()); //\n-                    // TODO: ???\n-                }\n-\n-                // Add empty rows for skipped rows\n-                while (previousRow < r - 1) {\n-                    project.rows.add(new Row(columnCount));\n-                    previousRow++;\n-                }\n-                row = new Row(columnCount);\n-                previousRow = r;\n-                previousCol = 0;\n-            }\n-\n-            // Add blank cells for any that were skipped before the current one\n-            for (int col = previousCol + 1; col < c; col++) {\n-                row.cells.add(new Cell(\"\", null));\n-            }\n-            previousCol = c;\n-\n-            String s = cell.getValue();\n-            if (s != null) {\n-                s = s.trim();\n-            }\n-            if (ExpressionUtils.isNonBlankData(s)) {\n-                Serializable value = guessValueType ? ImporterUtilities\n-                        .parseCellValue(s) : s;\n-                row.cells.add(new Cell(value, null));\n-            } else {\n-                row.cells.add(null);\n-            }\n-        }\n-        // Add last row\n-        if (row != null) {\n-            project.rows.add(row);\n+            \n+            readTable(\n+                project,\n+                metadata,\n+                job,\n+                new BatchRowReader(service, worksheet, 20),\n+                fileSource + \"#\" + worksheet.getTitle().getPlainText(),\n+                limit,\n+                options,\n+                exceptions\n+            );\n         }\n     }\n     \n-    private void importFusionTable(URL url, Project project, int ignoreLines,\n-            int headerLines, int limit, int dataStart, boolean guessValueType)\n-            throws MalformedURLException, IOException, ServiceException,\n-            Exception {\n-        GoogleService service = new GoogleService(\"fusiontables\", SERVICE_APP_NAME);\n-        // String token = TokenCookie.getToken(request);\n-        // if (token != null) {\n-        // service.setAuthSubToken(token);\n-        // }\n-        String tableId = getFusionTableKey(url);\n+    static private class BatchRowReader implements TableDataReader {\n+        final int batchSize;\n+        final SpreadsheetService service;\n+        final WorksheetEntry worksheet;\n+        final int totalRowCount;\n         \n-        final String SERVICE_URL =\n-            \"http://www.google.com/fusiontables/api/query\";\n-        final String selectQuery = \"select * from \" + tableId \n-            + \" offset \" + (dataStart) + (limit>0 ? (\" limit \" + limit):\"\");\n-\n-        URL queryUrl = new URL(\n-                SERVICE_URL + \"?sql=\" + URLEncoder.encode(selectQuery, \"UTF-8\"));\n-        GDataRequest queryRequest = service.getRequestFactory().getRequest(\n-                RequestType.QUERY, queryUrl, ContentType.TEXT_PLAIN);\n-        queryRequest.execute();\n-\n-        Scanner scanner = new Scanner(queryRequest.getResponseStream(),\"UTF-8\");\n-\n-        // TODO: Just use the first row of data as column headers for now\n-        List<String> columnHeaders = getTableRow(scanner);\n-\n-        // Create columns\n-        int columnCount = columnHeaders.size();\n-        project.columnModel.setMaxCellIndex(columnCount);\n-        boolean validColumn[] = new boolean[columnCount];\n-        int index = 0;\n-        for (String name : columnHeaders) {\n-            Column column = new Column(index, name + \" \" + index);\n-            project.columnModel.columns.add(column);\n-            validColumn[index++] = true;\n-        }\n-        for (int i = index; index < columnCount; index++) {\n-            Column column = new Column(index, \"Column \" + index);\n-            project.columnModel.columns.add(column);\n-            validColumn[i] = true;\n+        int nextRow = 0; // 0-based\n+        int batchRowStart = -1; // 0-based\n+        List<List<Object>> rowsOfCells = null;\n+        \n+        public BatchRowReader(SpreadsheetService service, WorksheetEntry worksheet, int batchSize) {\n+            this.service = service;\n+            this.worksheet = worksheet;\n+            this.batchSize = batchSize;\n+            this.totalRowCount = worksheet.getRowCount();\n         }\n-\n-        // Create data rows & cells\n-        List<String> values = columnHeaders;\n-        while (values != null) {\n-            Row row = new Row(columnCount);\n-            for (String valString : values) {\n-                valString = valString.trim();\n-                if (ExpressionUtils.isNonBlankData(valString)) {\n-                    Serializable value = guessValueType ? ImporterUtilities\n-                            .parseCellValue(valString) : valString;\n-                            row.cells.add(new Cell(value, null));\n+        \n+        @Override\n+        public List<Object> getNextRowOfCells() throws IOException {\n+            if (rowsOfCells == null || nextRow > batchRowStart + rowsOfCells.size()) {\n+                batchRowStart = batchRowStart + (rowsOfCells == null ? 0 : rowsOfCells.size());\n+                if (batchRowStart < totalRowCount) {\n+                    try {\n+                        rowsOfCells = getRowsOfCells(service, worksheet, batchRowStart + 1, batchSize);\n+                    } catch (ServiceException e) {\n+                        rowsOfCells = null;\n+                        throw new IOException(e);\n+                    }\n                 } else {\n-                    row.cells.add(null);\n+                    rowsOfCells = null;\n                 }\n             }\n-            project.rows.add(row);\n-            values = getTableRow(scanner);\n-        }\n-    }\n-\n-    private List<String> getTableRow(Scanner scanner) {\n-        /**\n-         * CSV values are terminated by comma or end-of-line and consist either of\n-         * plain text without commas or quotes, or a quoted expression, where inner\n-         * quotes are escaped by doubling.\n-         */\n-        final Pattern CSV_VALUE_PATTERN =\n-            Pattern.compile(\"([^,\\\\r\\\\n\\\"]*|\\\"(([^\\\"]*\\\"\\\")*[^\\\"]*)\\\")(,|\\\\r?\\\\n)\");\n-\n-        if (!scanner.hasNextLine()) {\n-            return null;\n-        }\n-\n-        List<String> result = new ArrayList<String>();\n-        while (scanner.hasNextLine()) {            \n-            scanner.findWithinHorizon(CSV_VALUE_PATTERN, 0);\n-            MatchResult match = scanner.match();\n-            String quotedString = match.group(2);\n-            String decoded = quotedString == null ? match.group(1)\n-                    : quotedString.replaceAll(\"\\\"\\\"\", \"\\\"\");\n-            result.add(decoded);\n-            if (!match.group(4).equals(\",\")) {\n-                break;\n+            \n+            if (rowsOfCells != null && nextRow - batchRowStart < rowsOfCells.size()) {\n+                return rowsOfCells.get(nextRow++ - batchRowStart);\n+            } else {\n+                return null;\n             }\n         }\n-        return result;\n     }\n-\n+    \n     /**\n      * Retrieves the spreadsheets that an authenticated user has access to. Not\n      * valid for unauthenticated access.\n@@ -313,130 +157,67 @@ private List<String> getTableRow(Scanner scanner) {\n      * @throws Exception\n      *             if error in retrieving the spreadsheet information\n      */\n-    public List<SpreadsheetEntry> getSpreadsheetEntries(\n-            SpreadsheetService service) throws Exception {\n+    static public List<SpreadsheetEntry> getSpreadsheetEntries(\n+        SpreadsheetService service\n+    ) throws Exception {\n         SpreadsheetFeed feed = service.getFeed(\n-                factory.getSpreadsheetsFeedUrl(), SpreadsheetFeed.class);\n+            GDataExtension.getFeedUrlFactory().getSpreadsheetsFeedUrl(),\n+            SpreadsheetFeed.class);\n         return feed.getEntries();\n     }\n-\n-    public List<WorksheetEntry> getWorksheetEntries(SpreadsheetService service,\n-            String spreadsheetKey) throws MalformedURLException, IOException,\n-            ServiceException {\n-        WorksheetFeed feed = service\n-                .getFeed(factory.getWorksheetFeedUrl(spreadsheetKey, \"public\",\n-                        \"values\"), WorksheetFeed.class);\n+    \n+    static public List<WorksheetEntry> getWorksheetEntries(\n+        SpreadsheetService service, String spreadsheetKey\n+    ) throws MalformedURLException, IOException, ServiceException {\n+        WorksheetFeed feed = service.getFeed(\n+            GDataExtension.getFeedUrlFactory().getWorksheetFeedUrl(spreadsheetKey, \"public\", \"values\"),\n+            WorksheetFeed.class);\n         return feed.getEntries();\n     }\n-\n-    /**\n-     * Retrieves the columns headers from the cell feed of the worksheet entry.\n-     * \n-     * @param worksheet\n-     *            worksheet entry containing the cell feed in question\n-     * @return a list of column headers\n-     * @throws Exception\n-     *             if error in retrieving the spreadsheet information\n-     */\n-    public List<String> getColumnHeaders(SpreadsheetService service,\n-            WorksheetEntry worksheet, int startRow, int rows) throws Exception {\n-        List<String> headers = new ArrayList<String>();\n-\n-        // Get the appropriate URL for a cell feed\n-        URL cellFeedUrl = worksheet.getCellFeedUrl();\n-\n-        // Create a query for the cells in the header row(s) (1-based)\n-        CellQuery cellQuery = new CellQuery(cellFeedUrl);\n-        if (startRow > 0) {\n-            cellQuery.setMinimumRow(startRow + 1);\n-        }\n-        cellQuery.setMaximumRow(startRow + rows);\n-\n-        // Get the cell feed matching the query\n-        CellFeed topRowCellFeed = service.query(cellQuery, CellFeed.class);\n-\n-        // Get the cell entries from the feed\n-        List<CellEntry> cellEntries = topRowCellFeed.getEntries();\n-        for (CellEntry entry : cellEntries) {\n-\n-            // Get the cell element from the entry\n-            com.google.gdata.data.spreadsheet.Cell cell = entry.getCell();\n-            int r = cell.getRow() - 1;\n-            if (cell != null) {\n-                if (r == startRow) {\n-                    headers.add(cell.getValue().trim());\n-                } else if (r < startRow + rows) {\n-                    headers.set(r, headers.get(r) + \" \"\n-                            + cell.getValue().trim());\n-                }\n-            }\n-        }\n-\n-        return headers;\n-    }\n-\n-    public List<CellEntry> getCells(SpreadsheetService service,\n-            WorksheetEntry worksheet, int startRow) throws IOException,\n-            ServiceException {\n-\n+    \n+    static public List<List<Object>> getRowsOfCells(\n+        SpreadsheetService service,\n+        WorksheetEntry worksheet,\n+        int startRow, // 1-based\n+        int rowCount\n+    ) throws IOException, ServiceException {\n         URL cellFeedUrl = worksheet.getCellFeedUrl();\n \n-        // Create a query skipping the desired number of rows\n-        CellQuery cellQuery = new CellQuery(cellFeedUrl);\n-        cellQuery.setMinimumRow(startRow + 1); // 1-based\n-        int rows = worksheet.getRowCount();\n-        cellQuery.setMaximumRow(rows);\n-        // cellQuery.setMinimumCol(1);\n+        int minRow = Math.max(1, startRow);\n+        int maxRow = Math.min(worksheet.getRowCount(), startRow + rowCount - 1);\n+        int rows = maxRow - minRow + 1;\n         int cols = worksheet.getColCount();\n+        \n+        CellQuery cellQuery = new CellQuery(cellFeedUrl);\n+        cellQuery.setMinimumRow(minRow);\n+        cellQuery.setMaximumRow(maxRow);\n         cellQuery.setMaximumCol(cols);\n         cellQuery.setMaxResults(rows * cols);\n         cellQuery.setReturnEmpty(false);\n-\n+        \n         CellFeed cellFeed = service.query(cellQuery, CellFeed.class);\n-        return cellFeed.getEntries();\n-    }\n-\n-    List<ListEntry> getListEntries(SpreadsheetService service,\n-            WorksheetEntry worksheet) throws IOException, ServiceException {\n-        URL listFeedUrl = worksheet.getListFeedUrl();\n-        ListFeed feed = service.getFeed(listFeedUrl, ListFeed.class);\n-        return feed.getEntries();\n-    }\n-\n-    @Override\n-    public boolean canImportData(String contentType, String filename) {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean canImportData(URL url) {\n-        return isSpreadsheetURL(url) || isFusionTableURL(url);\n-    }\n-\n-    private boolean isSpreadsheetURL(URL url) {\n-        String host = url.getHost();\n-        String query = url.getQuery();\n-        if (query == null) {\n-            query = \"\";\n-        }\n-        // http://spreadsheets.google.com/ccc?key=tI36b9Fxk1lFBS83iR_3XQA&hl=en\n-        return host.endsWith(\".google.com\") \n-                && host.contains(\"spreadsheet\") \n-                && getSpreadsheetKey(url) != null;\n-    }\n-    \n-    private boolean isFusionTableURL(URL url) {\n-        // http://www.google.com/fusiontables/DataSource?dsrcid=1219\n-        String query = url.getQuery();\n-        if (query == null) {\n-            query = \"\";\n+        List<CellEntry> cellEntries = cellFeed.getEntries();\n+        \n+        List<List<Object>> rowsOfCells = new ArrayList<List<Object>>(rows);\n+        for (CellEntry cellEntry : cellEntries) {\n+            Cell cell = cellEntry.getCell();\n+            int row = cell.getRow();\n+            int col = cell.getCol();\n+            \n+            while (row > rowsOfCells.size()) {\n+                rowsOfCells.add(new ArrayList<Object>(cols));\n+            }\n+            List<Object> rowOfCells = rowsOfCells.get(row - 1); // 1-based\n+            \n+            while (col > rowOfCells.size()) {\n+                rowOfCells.add(null);\n+            }\n+            rowOfCells.set(col - 1, cell.getValue());\n         }\n-        return url.getHost().endsWith(\".google.com\") \n-                && url.getPath().startsWith(\"/fusiontables/DataSource\")\n-                && getFusionTableKey(url) != null;\n+        return rowsOfCells;\n     }\n-    \n-    // Modified version of FeedURLFactor.getSpreadsheetKeyFromUrl()\n+\n+    // Modified version of FeedURLFactory.getSpreadsheetKeyFromUrl()\n     private String getSpreadsheetKey(URL url) {\n         String query = url.getQuery();\n         if (query != null) {\n@@ -472,23 +253,4 @@ private String getSpreadsheetKey(URL url) {\n         }\n         return null;\n     }\n-\n-    private String getFusionTableKey(URL url) {\n-        String query = url.getQuery();\n-        if (query != null) {\n-            String[] parts = query.split(\"&\");\n-            for (String part : parts) {\n-                if (part.startsWith(\"dsrcid=\")) {\n-                    int offset = (\"dsrcid=\").length();\n-                    String tableId = part.substring(offset);\n-                    // TODO: Any special id format considerations to worry about?\n-//                    if (tableId.startsWith(\"p\") || !tableId.contains(\".\")) {\n-//                        return tableId;\n-//                    }\n-                    return tableId;\n-                }\n-            }\n-        }\n-        return null;\n-    }\n }\n\\ No newline at end of file"
        },
        {
            "sha": "c054f6187214ce329c1eb88d26b57aafe52d8e1e",
            "filename": "extensions/gdata/src/com/google/refine/extension/gdata/GDataUrlRewriter.java",
            "status": "added",
            "additions": 69,
            "deletions": 0,
            "changes": 69,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/extensions%2Fgdata%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fgdata%2FGDataUrlRewriter.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/extensions%2Fgdata%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fgdata%2FGDataUrlRewriter.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/extensions%2Fgdata%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fgdata%2FGDataUrlRewriter.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2010, Thomas F. Morris\n+ *        All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without \n+ * modification, are permitted provided that the following conditions are met:\n+ * - Redistributions of source code must retain the above copyright notice, this \n+ *   list of conditions and the following disclaimer.\n+ * - Redistributions in binary form must reproduce the above copyright notice, \n+ *   this list of conditions and the following disclaimer in the documentation \n+ *   and/or other materials provided with the distribution.\n+ * \n+ * Neither the name of Google nor the names of its contributors may be used to \n+ * endorse or promote products derived from this software without specific \n+ * prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, \n+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR \n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, \n+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; \n+ * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, \n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR \n+ * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \n+ * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.google.refine.extension.gdata;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import com.google.refine.importing.UrlRewriter;\n+\n+/**\n+ * @author Tom Morris <tfmorris@gmail.com>\n+ * @copyright 2010 Thomas F. Morris\n+ * @license New BSD http://www.opensource.org/licenses/bsd-license.php\n+ */\n+public class GDataUrlRewriter implements UrlRewriter {\n+\n+    @Override\n+    public Result rewrite(String urlString) {\n+        try {\n+            URL url = new URL(urlString);\n+            if (isSpreadsheetURL(url)) {\n+                Result result = new Result();\n+                result.rewrittenUrl = urlString;\n+                result.format = \"service/gdata/spreadsheet\";\n+                result.download = false;\n+                return result;\n+            }\n+        } catch (MalformedURLException e) {\n+            // Ignore\n+        }\n+        return null;\n+    }\n+    \n+    static public boolean isSpreadsheetURL(URL url) {\n+        String host = url.getHost();\n+        String query = url.getQuery();\n+        if (query == null) {\n+            query = \"\";\n+        }\n+        // http://spreadsheets.google.com/ccc?key=tI36b9Fxk1lFBS83iR_3XQA&hl=en\n+        return host.endsWith(\".google.com\") && host.contains(\"spreadsheet\") && query.contains(\"key=\");\n+    }\n+}"
        },
        {
            "sha": "3ed70a883d7a824456a9cc1a519556b17d18dc7b",
            "filename": "main/src/com/google/refine/HttpResponder.java",
            "status": "added",
            "additions": 19,
            "deletions": 0,
            "changes": 19,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FHttpResponder.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FHttpResponder.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FHttpResponder.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,19 @@\n+package com.google.refine;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import com.google.refine.RefineServlet;\n+\n+public interface HttpResponder {\n+    public void init(RefineServlet servlet);\n+\n+    public void doPost(HttpServletRequest request, HttpServletResponse response)\n+        throws ServletException, IOException;\n+\n+    public void doGet(HttpServletRequest request, HttpServletResponse response)\n+        throws ServletException, IOException;\n+}"
        },
        {
            "sha": "b7517e87191b0d6ec069a08477a8a131921bed43",
            "filename": "main/src/com/google/refine/RefineServlet.java",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FRefineServlet.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FRefineServlet.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FRefineServlet.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -50,7 +50,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import org.slf4j.LoggerFactory;\n \n import com.google.refine.commands.Command;\n-import com.google.refine.commands.importing.ImportManager;\n+import com.google.refine.importing.ImportingManager;\n import com.google.refine.io.FileProjectManager;\n \n import edu.mit.simile.butterfly.Butterfly;\n@@ -125,7 +125,7 @@ public void init() throws ServletException {\n \n         s_dataDir = new File(data);\n         FileProjectManager.initialize(s_dataDir);\n-        ImportManager.initialize(this);\n+        ImportingManager.initialize(this);\n \n         if (_timer == null) {\n             _timer = new Timer(\"autosave\");"
        },
        {
            "sha": "a7495652de086a77710313c13e500825bd0e818b",
            "filename": "main/src/com/google/refine/commands/HttpUtilities.java",
            "status": "added",
            "additions": 180,
            "deletions": 0,
            "changes": 180,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2FHttpUtilities.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2FHttpUtilities.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2FHttpUtilities.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,180 @@\n+package com.google.refine.commands;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.util.Properties;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.velocity.VelocityContext;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.json.JSONWriter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.refine.Jsonizable;\n+import com.google.refine.RefineServlet;\n+import com.google.refine.util.ParsingUtilities;\n+\n+abstract public class HttpUtilities {\n+    final static protected Logger logger = LoggerFactory.getLogger(\"command\");\n+\n+    static public void respond(HttpServletResponse response, String content)\n+        throws IOException, ServletException {\n+    \n+        response.setCharacterEncoding(\"UTF-8\");\n+        response.setStatus(HttpServletResponse.SC_OK);\n+        Writer w = response.getWriter();\n+        if (w != null) {\n+            w.write(content);\n+            w.flush();\n+            w.close();\n+        } else {\n+            throw new ServletException(\"response returned a null writer\");\n+        }\n+    }\n+\n+    static public void respond(HttpServletResponse response, String status, String message)\n+        throws IOException {\n+    \n+        Writer w = response.getWriter();\n+        try {\n+            JSONWriter writer = new JSONWriter(w);\n+            writer.object();\n+            writer.key(\"status\"); writer.value(status);\n+            writer.key(\"message\"); writer.value(message);\n+            writer.endObject();\n+            w.flush();\n+            w.close();\n+        } catch (JSONException e) {\n+            // This can never occue\n+        }\n+    }\n+\n+    static public void respondJSON(HttpServletResponse response, Jsonizable o)\n+        throws IOException, JSONException {\n+    \n+        respondJSON(response, o, new Properties());\n+    }\n+\n+    static public void respondJSON(\n+            HttpServletResponse response, Jsonizable o, Properties options)\n+            throws IOException, JSONException {\n+    \n+        response.setCharacterEncoding(\"UTF-8\");\n+        response.setHeader(\"Content-Type\", \"application/json\");\n+    \n+        Writer w = response.getWriter();\n+        JSONWriter writer = new JSONWriter(w);\n+    \n+        o.write(writer, options);\n+        w.flush();\n+        w.close();\n+    }\n+\n+    static public void respondException(HttpServletResponse response, Exception e)\n+        throws IOException, ServletException {\n+    \n+        logger.warn(\"Exception caught\", e);\n+    \n+        if (response == null) {\n+            throw new ServletException(\"Response object can't be null\");\n+        }\n+    \n+        try {\n+            JSONObject o = new JSONObject();\n+            o.put(\"code\", \"error\");\n+            o.put(\"message\", e.getMessage());\n+    \n+            StringWriter sw = new StringWriter();\n+            PrintWriter pw = new PrintWriter(sw);\n+            e.printStackTrace(pw);\n+            pw.flush();\n+            sw.flush();\n+    \n+            o.put(\"stack\", sw.toString());\n+    \n+            response.setCharacterEncoding(\"UTF-8\");\n+            response.setHeader(\"Content-Type\", \"application/json\");\n+            respond(response, o.toString());\n+        } catch (JSONException e1) {\n+            e.printStackTrace(response.getWriter());\n+        }\n+    }\n+\n+    static public void redirect(HttpServletResponse response, String url) throws IOException {\n+        response.sendRedirect(url);\n+    }\n+\n+    static public int getIntegerParameter(HttpServletRequest request, String name, int def) {\n+        if (request == null) throw new IllegalArgumentException(\"parameter 'request' should not be null\");\n+        try {\n+            return Integer.parseInt(request.getParameter(name));\n+        } catch (Exception e) {\n+            logger.warn(\"Error getting integer parameter\", e);\n+        }\n+        return def;\n+    }\n+\n+    static public JSONObject getJsonParameter(HttpServletRequest request, String name) {\n+        if (request == null) throw new IllegalArgumentException(\"parameter 'request' should not be null\");\n+        String value = request.getParameter(name);\n+        if (value != null) {\n+            try {\n+                return ParsingUtilities.evaluateJsonStringToObject(value);\n+            } catch (JSONException e) {\n+                logger.warn(\"Error getting json parameter\", e);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    static public void respondWithErrorPage(\n+        RefineServlet servlet,\n+        HttpServletRequest request, \n+        HttpServletResponse response, \n+        String message, \n+        Throwable e\n+    ) {\n+        respondWithErrorPage(servlet, request, response, message,\n+            HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e);\n+    }\n+\n+    static public void respondWithErrorPage(\n+        RefineServlet servlet,\n+        HttpServletRequest request, \n+        HttpServletResponse response, \n+        String message,\n+        int status,\n+        Throwable e\n+    ) {\n+        VelocityContext context = new VelocityContext();\n+        \n+        context.put(\"message\", message);\n+        \n+        if (e != null) {\n+            StringWriter writer = new StringWriter();\n+            \n+            e.printStackTrace(new PrintWriter(writer));\n+            \n+            context.put(\"stack\", writer.toString());\n+        } else {\n+            context.put(\"stack\", \"\");\n+        }\n+        \n+        try {\n+            response.setStatus(status);\n+            \n+            servlet.getModule(\"core\").sendTextFromTemplate(\n+                request, response, context, \"error.vt\", \"UTF-8\", \"text/html\", true);\n+            \n+        } catch (Exception e1) {\n+            e1.printStackTrace();\n+        }\n+    }\n+}"
        },
        {
            "sha": "2b63c58971477e8ca3787c78266dc66b329fa7a6",
            "filename": "main/src/com/google/refine/commands/importing/CancelImportingJobCommand.java",
            "status": "added",
            "additions": 61,
            "deletions": 0,
            "changes": 61,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fimporting%2FCancelImportingJobCommand.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fimporting%2FCancelImportingJobCommand.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fimporting%2FCancelImportingJobCommand.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,61 @@\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+package com.google.refine.commands.importing;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import com.google.refine.commands.Command;\n+import com.google.refine.commands.HttpUtilities;\n+import com.google.refine.importing.ImportingJob;\n+import com.google.refine.importing.ImportingManager;\n+\n+public class CancelImportingJobCommand extends Command {\n+    @Override\n+    public void doPost(HttpServletRequest request, HttpServletResponse response)\n+            throws ServletException, IOException {\n+\n+        long jobID = Long.parseLong(request.getParameter(\"jobID\"));\n+        ImportingJob job = ImportingManager.getJob(jobID);\n+        if (job == null) {\n+            HttpUtilities.respond(response, \"error\", \"No such import job\");\n+        } else {\n+            job.canceled = true;\n+            HttpUtilities.respond(response, \"ok\", \"Job canceled\");\n+        }\n+    }\n+}"
        },
        {
            "sha": "27ed84979b3d4598f7cc6ca40c23f561c8d4edba",
            "filename": "main/src/com/google/refine/commands/importing/CreateImportingJobCommand.java",
            "status": "renamed",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fimporting%2FCreateImportingJobCommand.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fimporting%2FCreateImportingJobCommand.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fimporting%2FCreateImportingJobCommand.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -43,16 +43,17 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import org.slf4j.LoggerFactory;\n \n import com.google.refine.commands.Command;\n+import com.google.refine.importing.ImportingManager;\n \n-public class CreateImportJobCommand extends Command {\n+public class CreateImportingJobCommand extends Command {\n \n     final static Logger logger = LoggerFactory.getLogger(\"create-import-job_command\");\n \n     @Override\n     public void doPost(HttpServletRequest request, HttpServletResponse response)\n             throws ServletException, IOException {\n \n-        long id = ImportManager.singleton().createJob().id;\n+        long id = ImportingManager.createJob().id;\n         \n         response.setCharacterEncoding(\"UTF-8\");\n         response.setHeader(\"Content-Type\", \"application/json\");",
            "previous_filename": "main/src/com/google/refine/commands/importing/CreateImportJobCommand.java"
        },
        {
            "sha": "19a7b40ec32b362d8cf7517b72c96c6a12a72300",
            "filename": "main/src/com/google/refine/commands/importing/GetImportingConfigurationCommand.java",
            "status": "renamed",
            "additions": 29,
            "deletions": 15,
            "changes": 44,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fimporting%2FGetImportingConfigurationCommand.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fimporting%2FGetImportingConfigurationCommand.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fimporting%2FGetImportingConfigurationCommand.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -1,6 +1,6 @@\n /*\n \n-Copyright 2010, Google Inc.\n+Copyright 2011, Google Inc.\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without\n@@ -31,24 +31,38 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \n */\n \n-package com.google.refine.importers;\n+package com.google.refine.commands.importing;\n \n-import java.io.InputStream;\n+import java.io.IOException;\n+import java.io.Writer;\n import java.util.Properties;\n \n-import com.google.refine.ProjectMetadata;\n-import com.google.refine.model.Project;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n \n-public interface StreamImporter extends Importer {\n+import org.json.JSONException;\n+import org.json.JSONWriter;\n \n-    /**\n-     * @param inputStream stream to be imported\n-     * @param project project to import stream into\n-     * @param metadata metadata of new project\n-     * @param options\n-     * @throws ImportException\n-     */\n-    public void read(InputStream inputStream, Project project,\n-            ProjectMetadata metadata, Properties options) throws ImportException;\n+import com.google.refine.commands.Command;\n+import com.google.refine.importing.ImportingManager;\n \n+public class GetImportingConfigurationCommand extends Command {\n+    @Override\n+    public void doPost(HttpServletRequest request, HttpServletResponse response)\n+            throws ServletException, IOException {\n+\n+        Writer w = response.getWriter();\n+        JSONWriter writer = new JSONWriter(w);\n+        try {\n+            writer.object();\n+            writer.key(\"config\"); ImportingManager.writeConfiguration(writer, new Properties());\n+            writer.endObject();\n+        } catch (JSONException e) {\n+            throw new ServletException(e);\n+        } finally {\n+            w.flush();\n+            w.close();\n+        }\n+    }\n }",
            "previous_filename": "main/src/com/google/refine/importers/StreamImporter.java"
        },
        {
            "sha": "7c982c35a59ab58e850fdd9c52364110d90dd6bc",
            "filename": "main/src/com/google/refine/commands/importing/GetImportingJobStatusCommand.java",
            "status": "renamed",
            "additions": 7,
            "deletions": 33,
            "changes": 40,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fimporting%2FGetImportingJobStatusCommand.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fimporting%2FGetImportingJobStatusCommand.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fimporting%2FGetImportingJobStatusCommand.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -34,32 +34,27 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n package com.google.refine.commands.importing;\n \n import java.io.IOException;\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n import java.io.Writer;\n+import java.util.Properties;\n \n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n \n import org.json.JSONException;\n import org.json.JSONWriter;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n import com.google.refine.commands.Command;\n-import com.google.refine.commands.importing.ImportJob.State;\n-\n-public class GetImportJobStatusCommand extends Command {\n-\n-    final static Logger logger = LoggerFactory.getLogger(\"get-import-job-status_command\");\n+import com.google.refine.importing.ImportingJob;\n+import com.google.refine.importing.ImportingManager;\n \n+public class GetImportingJobStatusCommand extends Command {\n     @Override\n     public void doPost(HttpServletRequest request, HttpServletResponse response)\n             throws ServletException, IOException {\n \n         long jobID = Long.parseLong(request.getParameter(\"jobID\"));\n-        ImportJob job = ImportManager.singleton().getJob(jobID);\n+        ImportingJob job = ImportingManager.getJob(jobID);\n         \n         Writer w = response.getWriter();\n         JSONWriter writer = new JSONWriter(w);\n@@ -70,32 +65,11 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)\n                 writer.key(\"message\"); writer.value(\"No such import job\");\n             } else {\n                 writer.key(\"code\"); writer.value(\"ok\");\n-                writer.key(\"state\");\n-                if (job.state == State.NEW) {\n-                    writer.value(\"new\");\n-                } else if (job.state == State.RETRIEVING_DATA) {\n-                    writer.value(\"retrieving\");\n-                    writer.key(\"progress\"); writer.value(job.retrievingProgress);\n-                    writer.key(\"bytesSaved\"); writer.value(job.bytesSaved);\n-                } else if (job.state == State.READY) {\n-                    writer.value(\"ready\");\n-                } else if (job.state == State.ERROR) {\n-                    writer.value(\"error\");\n-                    writer.key(\"message\"); writer.value(job.errorMessage);\n-                    if (job.exception != null) {\n-                        StringWriter sw = new StringWriter();\n-                        PrintWriter pw = new PrintWriter(sw);\n-                        job.exception.printStackTrace(pw);\n-                        pw.flush();\n-                        sw.flush();\n-\n-                        writer.key(\"stack\"); writer.value(sw.toString());\n-                    }\n-                }\n+                writer.key(\"job\"); job.write(writer, new Properties());\n             }\n             writer.endObject();\n         } catch (JSONException e) {\n-            throw new IOException(e);\n+            throw new ServletException(e);\n         } finally {\n             w.flush();\n             w.close();",
            "previous_filename": "main/src/com/google/refine/commands/importing/GetImportJobStatusCommand.java"
        },
        {
            "sha": "4ff2cd1f01fcee255e02c5e54a000a6be3f4a38a",
            "filename": "main/src/com/google/refine/commands/importing/ImportJob.java",
            "status": "removed",
            "additions": 0,
            "deletions": 49,
            "changes": 49,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/0fa99d21cab6edf83360182fcf46cb4153e22c83/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fimporting%2FImportJob.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/0fa99d21cab6edf83360182fcf46cb4153e22c83/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fimporting%2FImportJob.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fimporting%2FImportJob.java?ref=0fa99d21cab6edf83360182fcf46cb4153e22c83",
            "patch": "@@ -1,49 +0,0 @@\n-package com.google.refine.commands.importing;\n-\n-import java.io.File;\n-import java.io.IOException;\n-\n-import org.apache.commons.io.FileUtils;\n-\n-import com.google.refine.model.meta.ImportSource;\n-\n-public class ImportJob {\n-    static public enum State {\n-        NEW,\n-        RETRIEVING_DATA,\n-        READY,\n-        ERROR\n-    }\n-    \n-    final public long id;\n-    final public File dir;\n-    \n-    public long lastTouched;\n-    public State state = State.NEW;\n-    \n-    // Data for retrieving phase\n-    public int retrievingProgress = 0; // from 0 to 100\n-    public long bytesSaved = 0; // in case percentage is unknown\n-    public String errorMessage;\n-    public Throwable exception;\n-    \n-    public ImportSource importSource;\n-    \n-    public ImportJob(long id, File dir) {\n-        this.id = id;\n-        this.dir = dir;\n-        \n-        dir.mkdirs();\n-    }\n-    \n-    public void touch() {\n-        lastTouched = System.currentTimeMillis();\n-    }\n-    \n-    public void dispose() {\n-        try {\n-            FileUtils.deleteDirectory(dir);\n-        } catch (IOException e) {\n-        }\n-    }\n-}"
        },
        {
            "sha": "d5d51174462800eb1109ce816b08b49bfd6ca077",
            "filename": "main/src/com/google/refine/commands/importing/ImportManager.java",
            "status": "removed",
            "additions": 0,
            "deletions": 101,
            "changes": 101,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/0fa99d21cab6edf83360182fcf46cb4153e22c83/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fimporting%2FImportManager.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/0fa99d21cab6edf83360182fcf46cb4153e22c83/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fimporting%2FImportManager.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fimporting%2FImportManager.java?ref=0fa99d21cab6edf83360182fcf46cb4153e22c83",
            "patch": "@@ -1,101 +0,0 @@\n-package com.google.refine.commands.importing;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import org.apache.commons.io.FileUtils;\n-\n-import com.google.refine.RefineServlet;\n-import com.google.refine.model.meta.ImportSource;\n-\n-public class ImportManager {\n-    static final private Map<String, Class<? extends ImportSource>> nameToImportSourceClass =\n-        new HashMap<String, Class<? extends ImportSource>>();\n-    \n-    static final private Map<String, String> importSourceClassNameToName =\n-        new HashMap<String, String>();\n-    \n-    /**\n-     * Register a single import source class.\n-     *\n-     * @param name importer verb for importer\n-     * @param importerObject object implementing the importer\n-     * \n-     * @return true if importer was loaded and registered successfully\n-     */\n-    static public boolean registerImportSourceClass(String name, Class<? extends ImportSource> klass) {\n-        if (nameToImportSourceClass.containsKey(name)) {\n-            return false;\n-        }\n-        nameToImportSourceClass.put(name, klass);\n-        importSourceClassNameToName.put(klass.getName(), name);\n-        return true;\n-    }\n-    \n-    static public Class<? extends ImportSource> getImportSourceClass(String name) {\n-        return nameToImportSourceClass.get(name);\n-    }\n-    \n-    static public String getImportSourceClassName(Class<? extends ImportSource> klass) {\n-        return importSourceClassNameToName.get(klass.getName());\n-    }\n-    \n-    final private RefineServlet servlet;\n-    final private Map<Long, ImportJob> jobs = new HashMap<Long, ImportJob>();\n-    private File importDir;\n-    \n-    static private ImportManager singleton;\n-    \n-    static public void initialize(RefineServlet servlet) {\n-        singleton = new ImportManager(servlet);\n-    }\n-    \n-    static public ImportManager singleton() {\n-        return singleton;\n-    }\n-    \n-    private ImportManager(RefineServlet servlet) {\n-        this.servlet = servlet;\n-    }\n-    \n-    private File getImportDir() {\n-        if (importDir == null) {\n-            File tempDir = servlet.getTempDir();\n-            importDir = tempDir == null ? new File(\".import-temp\") : new File(tempDir, \"import\");\n-            \n-            if (importDir.exists()) {\n-                try {\n-                    // start fresh\n-                    FileUtils.deleteDirectory(importDir);\n-                } catch (IOException e) {\n-                }\n-            }\n-            importDir.mkdirs();\n-        }\n-        return importDir;\n-    }\n-    \n-    public ImportJob createJob() {\n-        long id = System.currentTimeMillis() + (long) (Math.random() * 1000000);\n-        File jobDir = new File(getImportDir(), Long.toString(id));\n-        \n-        ImportJob job = new ImportJob(id, jobDir);\n-        jobs.put(id, job);\n-        \n-        return job;\n-    }\n-    \n-    public ImportJob getJob(long id) {\n-        return jobs.get(id);\n-    }\n-    \n-    public void disposeJob(long id) {\n-        ImportJob job = getJob(id);\n-        if (job != null) {\n-            job.dispose();\n-            jobs.remove(id);\n-        }\n-    }\n-}"
        },
        {
            "sha": "02a279db976e295f84e742ea4ba9ae2a944100f1",
            "filename": "main/src/com/google/refine/commands/importing/ImportingControllerCommand.java",
            "status": "renamed",
            "additions": 31,
            "deletions": 38,
            "changes": 69,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fimporting%2FImportingControllerCommand.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fimporting%2FImportingControllerCommand.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fimporting%2FImportingControllerCommand.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -44,18 +44,40 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import org.slf4j.LoggerFactory;\n \n import com.google.refine.commands.Command;\n-import com.google.refine.commands.importing.ImportJob.State;\n-import com.google.refine.model.meta.ImportSource;\n+import com.google.refine.commands.HttpUtilities;\n+import com.google.refine.importing.ImportingController;\n+import com.google.refine.importing.ImportingManager;\n import com.google.refine.util.ParsingUtilities;\n \n-public class RetrieveImportContentCommand extends Command {\n-\n-    final static Logger logger = LoggerFactory.getLogger(\"retrieve-import-content_command\");\n+public class ImportingControllerCommand extends Command {\n \n+    final static Logger logger = LoggerFactory.getLogger(\"importing-controller_command\");\n+    \n     @Override\n     public void doPost(HttpServletRequest request, HttpServletResponse response)\n             throws ServletException, IOException {\n \n+        ImportingController controller = getController(request);\n+        if (controller != null) {\n+            controller.doPost(request, response);\n+        } else {\n+            HttpUtilities.respond(response, \"error\", \"No such import controller\");\n+        }\n+    }\n+    \n+    @Override\n+    public void doGet(HttpServletRequest request, HttpServletResponse response)\n+            throws ServletException, IOException {\n+\n+        ImportingController controller = getController(request);\n+        if (controller != null) {\n+            controller.doPost(request, response);\n+        } else {\n+            HttpUtilities.respond(response, \"error\", \"No such import controller\");\n+        }\n+    }\n+    \n+    private ImportingController getController(HttpServletRequest request) {\n         /*\n          * The uploaded file is in the POST body as a \"file part\". If\n          * we call request.getParameter() then the POST body will get\n@@ -64,39 +86,10 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)\n          * Don't call request.getParameter() before calling internalImport().\n          */\n         Properties options = ParsingUtilities.parseUrlParameters(request);\n-        \n-        long jobID = Long.parseLong(options.getProperty(\"jobID\"));\n-        ImportJob job = ImportManager.singleton().getJob(jobID);\n-        if (job == null) {\n-            respondWithErrorPage(request, response, \"No such import job\", null);\n-            return;\n-        } else if (job.state != State.NEW) {\n-            respondWithErrorPage(request, response, \"Import job already started\", null);\n-            return;\n-        }\n-        \n-        Class<? extends ImportSource> importSourceClass =\n-            ImportManager.getImportSourceClass(options.getProperty(\"source\"));\n-        if (importSourceClass == null) {\n-            respondWithErrorPage(request, response, \"No such import source class\", null);\n-            return;\n-        }\n-\n-        try {\n-            ImportSource importSource = importSourceClass.newInstance();\n-            job.importSource = importSource;\n-            job.state = State.RETRIEVING_DATA;\n-            \n-            importSource.retrieveContent(request, options, job);\n-            \n-            job.retrievingProgress = 100;\n-            job.state = State.READY;\n-        } catch (Throwable e) {e.printStackTrace();\n-            job.state = State.ERROR;\n-            job.errorMessage = e.getLocalizedMessage();\n-            job.exception = e;\n-            \n-            respondWithErrorPage(request, response, \"Failed to kick start import job\", e);\n+        String name = options.getProperty(\"controller\");\n+        if (name != null) {\n+            return ImportingManager.controllers.get(name);\n         }\n+        return null;\n     }\n }",
            "previous_filename": "main/src/com/google/refine/commands/importing/RetrieveImportContentCommand.java"
        },
        {
            "sha": "05aeba61ebbfd3995a45a5ab6df851ce2947cd23",
            "filename": "main/src/com/google/refine/commands/project/CreateProjectCommand.java",
            "status": "modified",
            "additions": 4,
            "deletions": 420,
            "changes": 424,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fproject%2FCreateProjectCommand.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fproject%2FCreateProjectCommand.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fproject%2FCreateProjectCommand.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -1,6 +1,6 @@\n /*\n \n-Copyright 2010,2011. Google Inc.\n+Copyright 2010, Google Inc.\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without\n@@ -33,60 +33,22 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \n package com.google.refine.commands.project;\n \n-import java.io.BufferedInputStream;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FilterInputStream;\n import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.io.Reader;\n-import java.io.Serializable;\n-import java.io.UnsupportedEncodingException;\n-import java.net.URI;\n-import java.net.URL;\n-import java.net.URLConnection;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Map.Entry;\n import java.util.Properties;\n-import java.util.zip.GZIPInputStream;\n-import java.util.zip.ZipEntry;\n-import java.util.zip.ZipInputStream;\n \n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n \n-import org.apache.commons.fileupload.FileItemIterator;\n-import org.apache.commons.fileupload.FileItemStream;\n-import org.apache.commons.fileupload.servlet.ServletFileUpload;\n-import org.apache.commons.fileupload.util.Streams;\n-import org.apache.tools.bzip2.CBZip2InputStream;\n-import org.apache.tools.tar.TarEntry;\n-import org.apache.tools.tar.TarInputStream;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.google.refine.ProjectManager;\n import com.google.refine.ProjectMetadata;\n import com.google.refine.commands.Command;\n-import com.google.refine.importers.Importer;\n-import com.google.refine.importers.ImporterRegistry;\n-import com.google.refine.importers.ReaderImporter;\n-import com.google.refine.importers.StreamImporter;\n-import com.google.refine.importers.TsvCsvImporter;\n-import com.google.refine.importers.UrlImporter;\n+import com.google.refine.commands.HttpUtilities;\n import com.google.refine.model.Project;\n-import com.google.refine.util.IOUtils;\n import com.google.refine.util.ParsingUtilities;\n-import com.ibm.icu.text.CharsetDetector;\n-import com.ibm.icu.text.CharsetMatch;\n \n public class CreateProjectCommand extends Command {\n \n@@ -99,13 +61,6 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)\n         ProjectManager.singleton.setBusy(true);\n         try {\n \n-            /* \n-             * Set UTF-8 as request encoding, then ServletFileUpload will use it as default encoding\n-             */\n-            if (request.getCharacterEncoding() == null) {\n-                request.setCharacterEncoding(\"UTF-8\");\n-            }\n-            \n             /*\n              * The uploaded file is in the POST body as a \"file part\". If\n              * we call request.getParameter() then the POST body will get\n@@ -118,7 +73,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)\n             Project project = new Project();\n             ProjectMetadata pm = new ProjectMetadata();\n \n-            internalImport(request, project, pm, options);\n+            //internalImport(request, project, pm, options);\n \n             /*\n              * The import process above populates options with parameters\n@@ -133,382 +88,11 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)\n \n             project.update();\n \n-            redirect(response, \"/project?project=\" + project.id);\n+            HttpUtilities.redirect(response, \"/project?project=\" + project.id);\n         } catch (Exception e) {\n             respondWithErrorPage(request, response, \"Failed to import file\", e);\n         } finally {\n             ProjectManager.singleton.setBusy(false);\n         }\n     }\n-\n-    protected void internalImport(\n-        HttpServletRequest    request,\n-        Project               project,\n-        ProjectMetadata       metadata,\n-        Properties            options\n-    ) throws Exception {\n-\n-        ServletFileUpload upload = new ServletFileUpload();\n-        String url = options.getProperty(\"url\");\n-        boolean imported = false;\n-\n-        FileItemIterator iter = upload.getItemIterator(request);\n-        while (iter.hasNext()) {\n-            FileItemStream item = iter.next();\n-            String name = item.getFieldName().toLowerCase();\n-            InputStream stream = item.openStream();\n-            if (item.isFormField()) {\n-                if (name.equals(\"raw-text\")) {\n-                    Reader reader = new InputStreamReader(stream,request.getCharacterEncoding());\n-                    try {\n-                        internalInvokeImporter(project, new TsvCsvImporter(), metadata, options, reader);\n-                        imported = true;\n-                    } finally {\n-                        reader.close();\n-                    }\n-                } else if (name.equals(\"project-url\")) {\n-                    url = Streams.asString(stream, request.getCharacterEncoding());\n-                } else {\n-                    options.put(name, Streams.asString(stream, request.getCharacterEncoding()));\n-                }\n-            } else {\n-                String fileName = item.getName().toLowerCase();\n-                if (fileName.length() > 0) {\n-                    try {\n-                        internalImportFile(project, metadata, options, fileName, stream);\n-                        imported = true;\n-                    } finally {\n-                        stream.close();\n-                    }\n-                }\n-            }\n-        }\n-\n-        if (!imported && url != null && url.length() > 0) {\n-            internalImportURL(request, project, metadata, options, url);\n-        }\n-    }\n-\n-    static class SafeInputStream extends FilterInputStream {\n-        public SafeInputStream(InputStream stream) {\n-            super(stream);\n-        }\n-\n-        @Override\n-        public void close() {\n-            // some libraries attempt to close the input stream while they can't\n-            // read anymore from it... unfortunately this behavior prevents\n-            // the zip input stream from functioning correctly so we just have\n-            // to ignore those close() calls and just close it ourselves\n-            // forcefully later\n-        }\n-\n-        public void reallyClose() throws IOException {\n-            super.close();\n-        }\n-    }\n-\n-    protected void internalImportFile(\n-        Project         project,\n-        ProjectMetadata metadata,\n-        Properties      options,\n-        String          fileName,\n-        InputStream     inputStream\n-    ) throws Exception {\n-\n-        logger.info(\"Importing '{}'\", fileName);\n-\n-        if (fileName.endsWith(\".zip\") || fileName.endsWith(\".tar\") || fileName.endsWith(\".tar.gz\") || fileName.endsWith(\".tgz\") || fileName.endsWith(\".tar.bz2\")) {\n-\n-            // first, save the file on disk, since we need two passes and we might\n-            // not have enough memory to keep it all in there\n-            File file = save(inputStream);\n-\n-            // in the first pass, gather statistics about what files are in there\n-            // unfortunately, we have to rely on files extensions, which is horrible but\n-            // better than nothing\n-            HashMap<String,Integer> ext_map = new HashMap<String,Integer>();\n-\n-            FileInputStream fis = new FileInputStream(file);\n-            InputStream is = getStream(fileName, fis);\n-\n-            // NOTE(SM): unfortunately, java.io does not provide any generalized class for\n-            // archive-like input streams so while both TarInputStream and ZipInputStream\n-            // behave precisely the same, there is no polymorphic behavior so we have\n-            // to treat each instance explicitly... one of those times you wish you had\n-            // closures\n-            try {\n-                if (is instanceof TarInputStream) {\n-                    TarInputStream tis = (TarInputStream) is;\n-                    TarEntry te;\n-                    while ((te = tis.getNextEntry()) != null) {\n-                        if (!te.isDirectory()) {\n-                            mapExtension(te.getName(),ext_map);\n-                        }\n-                    }\n-                } else if (is instanceof ZipInputStream) {\n-                    ZipInputStream zis = (ZipInputStream) is;\n-                    ZipEntry ze;\n-                    while ((ze = zis.getNextEntry()) != null) {\n-                        if (!ze.isDirectory()) {\n-                            mapExtension(ze.getName(),ext_map);\n-                        }\n-                    }\n-                }\n-            } finally {\n-                try {\n-                    is.close();\n-                    fis.close();\n-                } catch (IOException e) {}\n-            }\n-\n-            // sort extensions by how often they appear\n-            List<Entry<String,Integer>> values = new ArrayList<Entry<String,Integer>>(ext_map.entrySet());\n-            Collections.sort(values, new ValuesComparator());\n-\n-            if (values.size() == 0) {\n-                throw new RuntimeException(\"The archive contains no files.\");\n-            }\n-\n-            // this will contain the set of extensions we'll load from the archive\n-            HashSet<String> exts = new HashSet<String>();\n-\n-            // find the extension that is most frequent or those who share the highest frequency value\n-            if (values.size() == 1) {\n-                exts.add(values.get(0).getKey());\n-            } else {\n-                Entry<String,Integer> most_frequent = values.get(0);\n-                Entry<String,Integer> second_most_frequent = values.get(1);\n-                if (most_frequent.getValue() > second_most_frequent.getValue()) { // we have a winner\n-                    exts.add(most_frequent.getKey());\n-                } else { // multiple extensions have the same frequency\n-                    int winning_frequency = most_frequent.getValue();\n-                    for (Entry<String,Integer> e : values) {\n-                        if (e.getValue() == winning_frequency) {\n-                            exts.add(e.getKey());\n-                        }\n-                    }\n-                }\n-            }\n-\n-            logger.info(\"Most frequent extensions: {}\", exts.toString());\n-\n-            // second pass, load the data for real\n-            is = getStream(fileName, new FileInputStream(file));\n-            SafeInputStream sis = new SafeInputStream(is);\n-            try {\n-                if (is instanceof TarInputStream) {\n-                    TarInputStream tis = (TarInputStream) is;\n-                    TarEntry te;\n-                    while ((te = tis.getNextEntry()) != null) {\n-                        if (!te.isDirectory()) {\n-                            String name = te.getName();\n-                            String ext = getExtension(name)[1];\n-                            if (exts.contains(ext)) {\n-                                internalImportFile(project, metadata, options, name, sis);\n-                            }\n-                        }\n-                    }\n-                } else if (is instanceof ZipInputStream) {\n-                    ZipInputStream zis = (ZipInputStream) is;\n-                    ZipEntry ze;\n-                    while ((ze = zis.getNextEntry()) != null) {\n-                        if (!ze.isDirectory()) {\n-                            String name = ze.getName();\n-                            String ext = getExtension(name)[1];\n-                            if (exts.contains(ext)) {\n-                                internalImportFile(project, metadata, options, name, sis);\n-                            }\n-                        }\n-                    }\n-                }\n-            } finally {\n-                try {\n-                    sis.reallyClose();\n-                } catch (IOException e) {}\n-            }\n-\n-        } else if (fileName.endsWith(\".gz\")) {\n-            internalImportFile(project, metadata, options, getExtension(fileName)[0], new GZIPInputStream(inputStream));\n-        } else if (fileName.endsWith(\".bz2\")) {\n-            internalImportFile(project, metadata, options, getExtension(fileName)[0], new CBZip2InputStream(inputStream));\n-        } else {\n-            load(project, metadata, options, fileName, inputStream);\n-        }\n-    }\n-\n-    public static class ValuesComparator implements Comparator<Entry<String,Integer>>, Serializable {\n-        private static final long serialVersionUID = 8845863616149837657L;\n-\n-        public int compare(Entry<String,Integer> o1, Entry<String,Integer> o2) {\n-            return o2.getValue() - o1.getValue();\n-        }\n-    }\n-\n-    private void load(Project project, ProjectMetadata metadata, Properties options, String fileName, InputStream inputStream) throws Exception {\n-        Importer importer = ImporterRegistry.guessImporter(null, fileName);\n-        internalInvokeImporter(project, importer, metadata, options, inputStream, null);\n-    }\n-\n-    private File save(InputStream is) throws IOException {\n-        File temp = this.servlet.getTempFile(Long.toString(System.currentTimeMillis()));\n-        temp.deleteOnExit();\n-        IOUtils.copy(is,temp);\n-        is.close();\n-        return temp;\n-    }\n-\n-    private void mapExtension(String name, Map<String,Integer> ext_map) {\n-        String ext = getExtension(name)[1];\n-        if (ext_map.containsKey(ext)) {\n-            ext_map.put(ext, ext_map.get(ext) + 1);\n-        } else {\n-            ext_map.put(ext, 1);\n-        }\n-    }\n-\n-    private InputStream getStream(String fileName, InputStream is) throws IOException {\n-        if (fileName.endsWith(\".tar.gz\") || fileName.endsWith(\".tgz\")) {\n-            return new TarInputStream(new GZIPInputStream(is));\n-        } else if (fileName.endsWith(\".tar.bz2\")) {\n-            return new TarInputStream(new CBZip2InputStream(is));\n-        } else if (fileName.endsWith(\".tar\")) {\n-            return new TarInputStream(is);\n-        } else {\n-            return new ZipInputStream(is);\n-        }\n-    }\n-\n-    private String[] getExtension(String filename) {\n-        String[] result = new String[2];\n-        int ext_index = filename.lastIndexOf('.');\n-        result[0] = (ext_index == -1) ? filename : filename.substring(0,ext_index);\n-        result[1] = (ext_index == -1) ? \"\" : filename.substring(ext_index + 1);\n-        return result;\n-    }\n-\n-    protected void internalImportURL(\n-        HttpServletRequest request,\n-        Project project,\n-        ProjectMetadata metadata,\n-        Properties options,\n-        String urlString) throws Exception {\n-        \n-        // Little dance to get URL properly encoded (e.g. for funky Fusion Tables queries)\n-        URL url = new URL(urlString);\n-        url = new URI(url.getProtocol(), url.getHost(), url.getPath(), url.getQuery(), null).toURL();\n-\n-        URLConnection connection = null;\n-\n-        // Try for a URL importer first\n-        Importer importer = ImporterRegistry.guessUrlImporter(url);\n-        if (importer instanceof UrlImporter) {\n-            ((UrlImporter) importer).read(url, project, metadata, options);\n-        } else {\n-            // If we couldn't find one, try opening URL and treating as a stream\n-            try {\n-                connection = url.openConnection();\n-                connection.setConnectTimeout(5000);\n-                connection.connect();\n-            } catch (Exception e) {\n-                throw new Exception(\"Cannot connect to \" + urlString, e);\n-            }\n-\n-            InputStream inputStream = null;\n-            try {\n-                inputStream = connection.getInputStream();\n-            } catch (Exception e) {\n-                throw new Exception(\"Cannot retrieve content from \" + url, e);\n-            }\n-\n-            try {\n-                String contentType = connection.getContentType();\n-                int semicolon = contentType.indexOf(';');\n-                if (semicolon >= 0) {\n-                    contentType = contentType.substring(0, semicolon);\n-                }\n-                \n-                importer = ImporterRegistry.guessImporter(contentType, url.getPath());\n-                \n-                internalInvokeImporter(project, importer, metadata, options, inputStream, connection.getContentEncoding());\n-            } finally {\n-                inputStream.close();\n-            }\n-        }\n-    }\n-\n-    protected void internalInvokeImporter(\n-        Project         project,\n-        Importer        importer,\n-        ProjectMetadata metadata,\n-        Properties      options,\n-        InputStream     rawInputStream,\n-        String          encoding\n-    ) throws Exception {\n-        if (importer instanceof ReaderImporter) {\n-\n-            // NOTE: The ICU4J char detection code requires the input stream to support mark/reset.\n-            InputStream inputStream = rawInputStream;\n-            if (!inputStream.markSupported()) {\n-                inputStream = new BufferedInputStream(rawInputStream);\n-            }\n-\n-            CharsetDetector detector = new CharsetDetector();\n-            detector.setDeclaredEncoding(\"utf8\"); // most of the content on the web is encoded in UTF-8 so start with that\n-            options.setProperty(\"encoding_confidence\", \"0\"); // in case we don't find anything suitable\n-\n-            InputStreamReader reader = null;\n-            CharsetMatch[] charsetMatches = detector.setText(inputStream).detectAll();\n-            for (CharsetMatch charsetMatch : charsetMatches) { // matches are ordered - first is best match\n-                String matchName = charsetMatch.getName();\n-                int confidence = charsetMatch.getConfidence();\n-                // Threshold was 50.  Do we ever want to not use our best guess even if it's low confidence? - tfmorris\n-                if (confidence >= 20) {\n-                    logger.info(\"Encoding guess: {} [confidence: {}]\", matchName, confidence);\n-                    try {\n-                        reader = new InputStreamReader(inputStream, matchName);\n-                    } catch (UnsupportedEncodingException e) {\n-                        logger.debug(\"Unsupported InputStreamReader charset encoding: {} [confidence: {}]; skipping\", matchName, confidence);\n-                        continue;\n-                    }\n-                    // Encoding will be set later at common exit point\n-                    options.setProperty(\"encoding_confidence\", Integer.toString(confidence));\n-                    break;\n-                } else {\n-                    logger.debug(\"Poor encoding guess: {} [confidence: {}]; skipping\", matchName, confidence);\n-                }\n-            }\n-\n-            if (reader == null) { // when all else fails\n-                if (encoding != null) {\n-                    reader = new InputStreamReader(inputStream, encoding);\n-                } else {\n-                    reader = new InputStreamReader(inputStream);\n-                }\n-            }\n-            // Get the actual encoding which will be used and save it for project metadata\n-            options.setProperty(\"encoding\", reader.getEncoding());\n-\n-            ((ReaderImporter) importer).read(reader, project, metadata, options);\n-        } else {\n-            // TODO: How do we set character encoding here?\n-            // Things won't work right if it's not set, so pick some arbitrary values\n-            if (encoding != null) {\n-                options.setProperty(\"encoding\", encoding);\n-            }\n-            options.setProperty(\"encoding_confidence\", \"0\");\n-            ((StreamImporter) importer).read(rawInputStream, project, metadata, options);\n-        }\n-    }\n-\n-    protected void internalInvokeImporter(\n-        Project         project,\n-        ReaderImporter  importer,\n-        ProjectMetadata metadata,\n-        Properties      options,\n-        Reader          reader\n-    ) throws Exception {\n-        importer.read(reader, project, metadata, options);\n-    }\n-\n }"
        },
        {
            "sha": "7276f9848f37be2a4ad2c4a21d2e1d2d09c5e0c5",
            "filename": "main/src/com/google/refine/commands/project/GetModelsCommand.java",
            "status": "modified",
            "additions": 29,
            "deletions": 3,
            "changes": 32,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fproject%2FGetModelsCommand.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fproject%2FGetModelsCommand.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fproject%2FGetModelsCommand.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -44,17 +44,43 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import org.json.JSONWriter;\n \n import com.google.refine.commands.Command;\n+import com.google.refine.commands.HttpUtilities;\n import com.google.refine.expr.MetaParser;\n import com.google.refine.expr.MetaParser.LanguageInfo;\n+import com.google.refine.importing.ImportingJob;\n+import com.google.refine.importing.ImportingManager;\n import com.google.refine.model.OverlayModel;\n import com.google.refine.model.Project;\n \n public class GetModelsCommand extends Command {\n     @Override\n-    public void doGet(HttpServletRequest request, HttpServletResponse response)\n+    public void doPost(HttpServletRequest request, HttpServletResponse response)\n             throws ServletException, IOException {\n+        internalRespond(request, response);\n+    }\n+    \n+    @Override\n+    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n+        internalRespond(request, response);\n+    }\n+    \n+    protected void internalRespond(HttpServletRequest request, HttpServletResponse response)\n+        throws ServletException, IOException {\n+        \n+        Project project = null;\n         \n-        Project project = getProject(request);\n+        // This command also supports retrieving rows for an importing job.\n+        String importingJobID = request.getParameter(\"importingJobID\");\n+        if (importingJobID != null) {\n+            long jobID = Long.parseLong(importingJobID);\n+            ImportingJob job = ImportingManager.getJob(jobID);\n+            if (job != null) {\n+                project = job.project;\n+            }\n+        }\n+        if (project == null) {\n+            project = getProject(request);\n+        }\n         \n         try {\n             response.setCharacterEncoding(\"UTF-8\");\n@@ -92,7 +118,7 @@ public void doGet(HttpServletRequest request, HttpServletResponse response)\n             \n             writer.endObject();\n         } catch (JSONException e) {\n-            respondException(response, e);\n+            HttpUtilities.respondException(response, e);\n         }\n     }\n "
        },
        {
            "sha": "3edb379c34b60db34f45410b31d84b4311c04e1e",
            "filename": "main/src/com/google/refine/commands/row/GetRowsCommand.java",
            "status": "modified",
            "additions": 44,
            "deletions": 28,
            "changes": 72,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Frow%2FGetRowsCommand.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Frow%2FGetRowsCommand.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Frow%2FGetRowsCommand.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -52,6 +52,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import com.google.refine.browsing.RowVisitor;\n import com.google.refine.browsing.Engine.Mode;\n import com.google.refine.commands.Command;\n+import com.google.refine.importing.ImportingJob;\n+import com.google.refine.importing.ImportingManager;\n import com.google.refine.model.Project;\n import com.google.refine.model.Record;\n import com.google.refine.model.Row;\n@@ -61,7 +63,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import com.google.refine.util.Pool;\n \n public class GetRowsCommand extends Command {\n-\t\n+    \n     @Override\n     public void doPost(HttpServletRequest request, HttpServletResponse response)\n             throws ServletException, IOException {\n@@ -77,7 +79,21 @@ protected void internalRespond(HttpServletRequest request, HttpServletResponse r\n         throws ServletException, IOException {\n         \n         try {\n-            Project project = getProject(request);\n+            Project project = null;\n+            \n+            // This command also supports retrieving rows for an importing job.\n+            String importingJobID = request.getParameter(\"importingJobID\");\n+            if (importingJobID != null) {\n+                long jobID = Long.parseLong(importingJobID);\n+                ImportingJob job = ImportingManager.getJob(jobID);\n+                if (job != null) {\n+                    project = job.project;\n+                }\n+            }\n+            if (project == null) {\n+                project = getProject(request);\n+            }\n+            \n             Engine engine = getEngine(request, project);\n             String callback = request.getParameter(\"callback\");\n             \n@@ -108,7 +124,7 @@ protected void internalRespond(HttpServletRequest request, HttpServletResponse r\n             try{\n                 String json = request.getParameter(\"sorting\");\n                 sortingJson = (json == null) ? null : \n-                \tParsingUtilities.evaluateJsonStringToObject(json);\n+                    ParsingUtilities.evaluateJsonStringToObject(json);\n             } catch (JSONException e) {\n             }\n \n@@ -117,12 +133,12 @@ protected void internalRespond(HttpServletRequest request, HttpServletResponse r\n                 RowVisitor visitor = rwv;\n                 \n                 if (sortingJson != null) {\n-                \tSortingRowVisitor srv = new SortingRowVisitor(visitor);\n-                \t\n-                \tsrv.initializeFromJSON(project, sortingJson);\n-            \t\tif (srv.hasCriteria()) {\n-            \t\t\tvisitor = srv;\n-            \t\t}\n+                    SortingRowVisitor srv = new SortingRowVisitor(visitor);\n+                    \n+                    srv.initializeFromJSON(project, sortingJson);\n+                    if (srv.hasCriteria()) {\n+                        visitor = srv;\n+                    }\n                 }\n                 \n                 jsonWriter.key(\"mode\"); jsonWriter.value(\"row-based\");\n@@ -136,12 +152,12 @@ protected void internalRespond(HttpServletRequest request, HttpServletResponse r\n                 RecordVisitor visitor = rwv;\n                 \n                 if (sortingJson != null) {\n-                \tSortingRecordVisitor srv = new SortingRecordVisitor(visitor);\n-                \t\n-                \tsrv.initializeFromJSON(project, sortingJson);\n-            \t\tif (srv.hasCriteria()) {\n-            \t\t\tvisitor = srv;\n-            \t\t}\n+                    SortingRecordVisitor srv = new SortingRecordVisitor(visitor);\n+                    \n+                    srv.initializeFromJSON(project, sortingJson);\n+                    if (srv.hasCriteria()) {\n+                        visitor = srv;\n+                    }\n                 }\n                 \n                 jsonWriter.key(\"mode\"); jsonWriter.value(\"record-based\");\n@@ -168,8 +184,8 @@ protected void internalRespond(HttpServletRequest request, HttpServletResponse r\n     }\n     \n     static protected class RowWritingVisitor implements RowVisitor, RecordVisitor {\n-        final int \t\t  start;\n-        final int \t\t  limit;\n+        final int           start;\n+        final int           limit;\n         final JSONWriter  writer;\n         final Properties  options;\n         \n@@ -184,20 +200,20 @@ public RowWritingVisitor(int start, int limit, JSONWriter writer, Properties opt\n         \n         @Override\n         public void start(Project project) {\n-        \t// nothing to do\n+            // nothing to do\n         }\n         \n         @Override\n         public void end(Project project) {\n-        \t// nothing to do\n+            // nothing to do\n         }\n         \n         public boolean visit(Project project, int rowIndex, Row row) {\n             if (total >= start && total < start + limit) {\n                 internalVisit(project, rowIndex, row);\n             }\n-        \ttotal++;\n-        \t\n+            total++;\n+            \n             return false;\n         }\n         \n@@ -206,8 +222,8 @@ public boolean visit(Project project, Record record) {\n             if (total >= start && total < start + limit) {\n                 internalVisit(project, record);\n             }\n-        \ttotal++;\n-        \t\n+            total++;\n+            \n             return false;\n         }\n         \n@@ -223,10 +239,10 @@ public boolean internalVisit(Project project, int rowIndex, Row row) {\n         protected boolean internalVisit(Project project, Record record) {\n             options.put(\"recordIndex\", record.recordIndex);\n             \n-        \tfor (int r = record.fromRowIndex; r < record.toRowIndex; r++) {\n+            for (int r = record.fromRowIndex; r < record.toRowIndex; r++) {\n                 try {\n-                \tRow row = project.rows.get(r);\n-                \t\n+                    Row row = project.rows.get(r);\n+                    \n                     options.put(\"rowIndex\", r);\n                     \n                     row.write(writer, options);\n@@ -235,8 +251,8 @@ protected boolean internalVisit(Project project, Record record) {\n                 }\n                 \n                 options.remove(\"recordIndex\");\n-        \t}\n-        \treturn false;\n+            }\n+            return false;\n         }\n     }\n }"
        },
        {
            "sha": "1b483200a7c2624b03564e0b809a798d835e3bcc",
            "filename": "main/src/com/google/refine/importers/ExcelImporter.java",
            "status": "modified",
            "additions": 118,
            "deletions": 180,
            "changes": 298,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FExcelImporter.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FExcelImporter.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FExcelImporter.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -33,16 +33,15 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \n package com.google.refine.importers;\n \n+import java.io.File;\n+import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Properties;\n-import java.util.Set;\n \n import org.apache.poi.common.usermodel.Hyperlink;\n import org.apache.poi.hssf.usermodel.HSSFDateUtil;\n@@ -51,184 +50,152 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import org.apache.poi.ss.usermodel.Sheet;\n import org.apache.poi.ss.usermodel.Workbook;\n import org.apache.poi.xssf.usermodel.XSSFWorkbook;\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n \n import com.google.refine.ProjectMetadata;\n+import com.google.refine.importing.ImportingJob;\n+import com.google.refine.importing.ImportingUtilities;\n import com.google.refine.model.Cell;\n-import com.google.refine.model.Column;\n import com.google.refine.model.Project;\n import com.google.refine.model.Recon;\n import com.google.refine.model.ReconCandidate;\n-import com.google.refine.model.Row;\n import com.google.refine.model.Recon.Judgment;\n+import com.google.refine.util.JSONUtilities;\n \n-public class ExcelImporter implements StreamImporter {\n-    protected boolean _xmlBased;\n-\n+public class ExcelImporter extends TabularImportingParserBase {\n+    public ExcelImporter() {\n+        super(true);\n+    }\n+    \n     @Override\n-    public void read(InputStream inputStream, Project project, ProjectMetadata metadata, Properties options) throws ImportException {\n-        int ignoreLines = ImporterUtilities.getIntegerOption(\"ignore\", options, -1);\n-        int headerLines = ImporterUtilities.getIntegerOption(\"header-lines\", options, 1);\n-        int limit = ImporterUtilities.getIntegerOption(\"limit\", options, -1);\n-        int skip = ImporterUtilities.getIntegerOption(\"skip\", options, 0);\n-\n+    public JSONObject createParserUIInitializationData(\n+            ImportingJob job, List<JSONObject> fileRecords, String format) {\n+        JSONObject options = super.createParserUIInitializationData(job, fileRecords, format);\n+        \n+        boolean xmlBased = \"text/xml/xlsx\".equals(format);\n+        JSONUtilities.safePut(options, \"xmlBased\", xmlBased);\n+        \n+        JSONArray sheetRecords = new JSONArray();\n+        JSONUtilities.safePut(options, \"sheetRecords\", sheetRecords);\n+        try {\n+            JSONObject firstFileRecord = fileRecords.get(0);\n+            File file = ImportingUtilities.getFile(job, firstFileRecord);\n+            InputStream is = new FileInputStream(file);\n+            try {\n+                Workbook wb = xmlBased ?\n+                    new XSSFWorkbook(is) :\n+                    new HSSFWorkbook(new POIFSFileSystem(is));\n+                \n+                int sheetCount = wb.getNumberOfSheets();\n+                boolean hasData = false;\n+                for (int i = 0; i < sheetCount; i++) {\n+                    Sheet sheet = wb.getSheetAt(i);\n+                    int rows = sheet.getLastRowNum() - sheet.getFirstRowNum() + 1;\n+                    \n+                    JSONObject sheetRecord = new JSONObject();\n+                    JSONUtilities.safePut(sheetRecord, \"name\", sheet.getSheetName());\n+                    JSONUtilities.safePut(sheetRecord, \"rows\", rows);\n+                    if (hasData) {\n+                        JSONUtilities.safePut(sheetRecord, \"selected\", false);\n+                    } else if (rows > 1) {\n+                        JSONUtilities.safePut(sheetRecord, \"selected\", true);\n+                        hasData = true;\n+                    }\n+                    JSONUtilities.append(sheetRecords, sheetRecord);\n+                }\n+            } finally {\n+                is.close();\n+            }\n+        } catch (IOException e) {\n+            // Ignore\n+        }\n+        \n+        return options;\n+    }\n+    \n+    @Override\n+    public void parseOneFile(\n+        Project project,\n+        ProjectMetadata metadata,\n+        ImportingJob job,\n+        String fileSource,\n+        InputStream inputStream,\n+        int limit,\n+        JSONObject options,\n+        List<Exception> exceptions\n+    ) {\n+        boolean xmlBased = JSONUtilities.getBoolean(options, \"xmlBased\", false);\n         Workbook wb = null;\n         try {\n-            wb = _xmlBased ?\n+            wb = xmlBased ?\n                 new XSSFWorkbook(inputStream) :\n                 new HSSFWorkbook(new POIFSFileSystem(inputStream));\n         } catch (IOException e) {\n-            throw new ImportException(\n+            exceptions.add(new ImportException(\n                 \"Attempted to parse as an Excel file but failed. \" +\n                 \"Try to use Excel to re-save the file as a different Excel version or as TSV and upload again.\",\n                 e\n-            );\n+            ));\n+            return;\n         } catch (ArrayIndexOutOfBoundsException e){\n-            throw new ImportException(\n-                   \"Attempted to parse file as an Excel file but failed. \" +\n-                   \"This is probably caused by a corrupt excel file, or due to the file having previously been created or saved by a non-Microsoft application. \" +\n-                   \"Please try opening the file in Microsoft Excel and resaving it, then try re-uploading the file. \" +\n-                   \"See https://issues.apache.org/bugzilla/show_bug.cgi?id=48261 for further details\",\n-                   e);\n+            exceptions.add(new ImportException(\n+               \"Attempted to parse file as an Excel file but failed. \" +\n+               \"This is probably caused by a corrupt excel file, or due to the file having previously been created or saved by a non-Microsoft application. \" +\n+               \"Please try opening the file in Microsoft Excel and resaving it, then try re-uploading the file. \" +\n+               \"See https://issues.apache.org/bugzilla/show_bug.cgi?id=48261 for further details\",\n+               e\n+           ));\n+            return;\n         }\n         \n-        Sheet sheet = wb.getSheetAt(0);\n-        \n-        int firstRow = sheet.getFirstRowNum();\n-        int lastRow = sheet.getLastRowNum();\n-        \n-        List<String>         columnNames = new ArrayList<String>();\n-        Set<String>          columnNameSet = new HashSet<String>();\n-        Map<String, Integer> columnRootNameToIndex = new HashMap<String, Integer>();\n-        \n-        int                  rowsWithData = 0;\n-        Map<String, Recon>   reconMap = new HashMap<String, Recon>();\n-        \n-        for (int r = firstRow; r <= lastRow; r++) {\n-            org.apache.poi.ss.usermodel.Row row = sheet.getRow(r);\n-            if (row == null) {\n-                continue;\n-            } else if (ignoreLines > 0) {\n-                ignoreLines--;\n-                continue;\n-            }\n+        int[] sheets = JSONUtilities.getIntArray(options, \"sheets\");\n+        for (int sheetIndex : sheets) {\n+            final Sheet sheet = wb.getSheetAt(sheetIndex);\n+            final int lastRow = sheet.getLastRowNum();\n             \n-            short firstCell = row.getFirstCellNum();\n-            short lastCell = row.getLastCellNum();\n-            if (firstCell < 0 || firstCell > lastCell) {\n-                continue;\n-            }\n-            \n-            /*\n-             *  Still processing header lines\n-             */\n-            if (headerLines > 0) {\n-                headerLines--;\n-                \n-                for (int c = firstCell; c <= lastCell; c++) {\n-                    org.apache.poi.ss.usermodel.Cell cell = row.getCell(c);\n-                    if (cell != null) {\n-                        Serializable value = extractCell(cell);\n-                        String text = value != null ? value.toString() : null;\n-                        if (text != null && text.length() > 0) {\n-                            while (columnNames.size() < c + 1) {\n-                                columnNames.add(null);\n-                            }\n-                            \n-                            String existingName = columnNames.get(c);\n-                            String name = (existingName == null) ? text : (existingName + \" \" + text);\n-                            \n-                            columnNames.set(c, name);\n-                        }\n-                    }\n-                }\n+            TableDataReader dataReader = new TableDataReader() {\n+                int nextRow = 0;\n+                Map<String, Recon> reconMap = new HashMap<String, Recon>();\n                 \n-                if (headerLines == 0) {\n-                    for (int i = 0; i < columnNames.size(); i++) {\n-                        String rootName = columnNames.get(i);\n-                        if (rootName == null) {\n-                            continue;\n-                        }\n-                        setUnduplicatedColumnName(rootName, columnNames, i, columnNameSet, columnRootNameToIndex);\n-                    }\n-                }\n-                \n-            /*\n-             *  Processing data rows\n-             */\n-            } else {\n-                Row newRow = new Row(columnNames.size());\n-                boolean hasData = false;\n-                \n-                for (int c = firstCell; c <= lastCell; c++) {\n-                    org.apache.poi.ss.usermodel.Cell cell = row.getCell(c);\n-                    if (cell == null) {\n-                        continue;\n-                    }\n-                    \n-                    Cell ourCell = extractCell(cell, reconMap);\n-                    if (ourCell != null) {\n-                        while (columnNames.size() < c + 1) {\n-                            columnNames.add(null);\n-                        }\n-                        if (columnNames.get(c) == null) {\n-                            setUnduplicatedColumnName(\"Column\", columnNames, c, columnNameSet, columnRootNameToIndex);\n-                        }\n-                        \n-                        newRow.setCell(c, ourCell);\n-                        hasData = true;\n+                @Override\n+                public List<Object> getNextRowOfCells() throws IOException {\n+                    if (nextRow >= lastRow) {\n+                        return null;\n                     }\n-                }\n-                \n-                if (hasData) {\n-                    rowsWithData++;\n                     \n-                    if (skip <= 0 || rowsWithData > skip) {\n-                        project.rows.add(newRow);\n-                        project.columnModel.setMaxCellIndex(newRow.cells.size());\n-                        \n-                        if (limit > 0 && project.rows.size() >= limit) {\n-                            break;\n+                    List<Object> cells = new ArrayList<Object>();\n+                    org.apache.poi.ss.usermodel.Row row = sheet.getRow(nextRow++);\n+                    if (row != null) {\n+                        short lastCell = row.getLastCellNum();\n+                        for (short cellIndex = 0; cellIndex <= lastCell; cellIndex++) {\n+                            Cell cell = null;\n+                            \n+                            org.apache.poi.ss.usermodel.Cell sourceCell = row.getCell(cellIndex);\n+                            if (sourceCell != null) {\n+                                cell = extractCell(sourceCell, reconMap);\n+                            }\n+                            cells.add(cell);\n                         }\n                     }\n+                    return cells;\n                 }\n-            }\n-        }\n-        \n-        /*\n-         *  Create columns\n-         */\n-        for (int c = 0; c < columnNames.size(); c++) {\n-            String name = columnNames.get(c);\n-            if (name != null) {\n-                Column column = new Column(c, name);\n-                project.columnModel.columns.add(column);\n-            }\n-        }\n-    }\n-    \n-    protected void setUnduplicatedColumnName(\n-        String rootName, List<String> columnNames, int index, Set<String> columnNameSet, Map<String, Integer> columnRootNameToIndex) {\n-        if (columnNameSet.contains(rootName)) {\n-            int startIndex = columnRootNameToIndex.containsKey(rootName) ? columnRootNameToIndex.get(rootName) : 2;\n-            while (true) {\n-                String name = rootName + \" \" + startIndex;\n-                if (columnNameSet.contains(name)) {\n-                    startIndex++;\n-                } else {\n-                    columnNames.set(index, name);\n-                    columnNameSet.add(name);\n-                    break;\n-                }\n-            }\n+            };\n             \n-            columnRootNameToIndex.put(rootName, startIndex + 1);\n-        } else {\n-            columnNames.set(index, rootName);\n-            columnNameSet.add(rootName);\n+            readTable(\n+                project,\n+                metadata,\n+                job,\n+                dataReader,\n+                fileSource + \"#\" + sheet.getSheetName(),\n+                limit,\n+                options,\n+                exceptions\n+            );\n         }\n     }\n     \n-    protected Serializable extractCell(org.apache.poi.ss.usermodel.Cell cell) {\n+    static protected Serializable extractCell(org.apache.poi.ss.usermodel.Cell cell) {\n         int cellType = cell.getCellType();\n         if (cellType == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA) {\n             cellType = cell.getCachedFormulaResultType();\n@@ -259,7 +226,7 @@ protected Serializable extractCell(org.apache.poi.ss.usermodel.Cell cell) {\n         return value;\n     }\n     \n-    protected Cell extractCell(org.apache.poi.ss.usermodel.Cell cell, Map<String, Recon> reconMap) {\n+    static protected Cell extractCell(org.apache.poi.ss.usermodel.Cell cell, Map<String, Recon> reconMap) {\n         Serializable value = extractCell(cell);\n         \n         if (value != null) {\n@@ -312,33 +279,4 @@ protected Cell extractCell(org.apache.poi.ss.usermodel.Cell cell, Map<String, Re\n             return null;\n         }\n     }\n-    \n-    @Override\n-    public boolean canImportData(String contentType, String fileName) {\n-        if (contentType != null) {\n-            contentType = contentType.toLowerCase().trim();\n-            if (\"application/msexcel\".equals(contentType) ||\n-                \"application/x-msexcel\".equals(contentType) ||\n-                \"application/x-ms-excel\".equals(contentType) ||\n-                \"application/vnd.ms-excel\".equals(contentType) ||\n-                \"application/x-excel\".equals(contentType) ||\n-                \"application/xls\".equals(contentType)) {\n-                this._xmlBased = false;\n-                return true;\n-            } else if(\"application/x-xls\".equals(contentType)) {\n-                this._xmlBased = true;\n-                return true;\n-            }\n-        } else if (fileName != null) {\n-            fileName = fileName.toLowerCase();\n-            if (fileName.endsWith(\".xls\")) {\n-                this._xmlBased = false;\n-                return true;\n-            } else if (fileName.endsWith(\".xlsx\")) {\n-                this._xmlBased = true;\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n }"
        },
        {
            "sha": "592efb02079981a2cd20b441e605a5bd47146c63",
            "filename": "main/src/com/google/refine/importers/FixedWidthImporter.java",
            "status": "modified",
            "additions": 175,
            "deletions": 199,
            "changes": 374,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FFixedWidthImporter.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FFixedWidthImporter.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FFixedWidthImporter.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -1,240 +1,216 @@\n package com.google.refine.importers;\r\n \r\n+import java.io.File;\r\n+import java.io.FileInputStream;\r\n import java.io.IOException;\r\n import java.io.InputStream;\r\n import java.io.InputStreamReader;\r\n import java.io.LineNumberReader;\r\n import java.io.Reader;\r\n-import java.io.Serializable;\r\n+import java.io.UnsupportedEncodingException;\r\n import java.util.ArrayList;\r\n import java.util.List;\r\n-import java.util.Properties;\r\n-import java.util.regex.Pattern;\r\n \r\n-import javax.servlet.ServletException;\r\n-\r\n-import org.apache.commons.lang.StringUtils;\r\n-import org.slf4j.Logger;\r\n-import org.slf4j.LoggerFactory;\r\n+import org.json.JSONArray;\r\n+import org.json.JSONObject;\r\n \r\n import com.google.refine.ProjectMetadata;\r\n-import com.google.refine.expr.ExpressionUtils;\r\n-import com.google.refine.model.Cell;\r\n+import com.google.refine.importing.ImportingJob;\r\n+import com.google.refine.importing.ImportingUtilities;\r\n import com.google.refine.model.Project;\r\n-import com.google.refine.model.Row;\r\n-\r\n-public class FixedWidthImporter implements ReaderImporter, StreamImporter { //TODO this class is almost an exact copy of TsvCsvImporter.  Could we combine the two, or combine common functions into a common abstract supertype?\r\n+import com.google.refine.util.JSONUtilities;\r\n \r\n-    final static Logger logger = LoggerFactory.getLogger(\"FixedWidthImporter\");\r\n+public class FixedWidthImporter extends TabularImportingParserBase {\r\n+    public FixedWidthImporter() {\r\n+        super(false);\r\n+    }\r\n     \r\n     @Override\r\n-    public boolean canImportData(String contentType, String fileName) {\r\n-        if (contentType != null) {\r\n-            contentType = contentType.toLowerCase().trim();\r\n-            \r\n-            //filter out tree structure data\r\n-            if(\"application/json\".equals(contentType)||\r\n-                    \"text/json\".equals(contentType)||\r\n-                    \"application/xml\".equals(contentType) ||\r\n-                    \"text/xml\".equals(contentType) ||\r\n-                    \"application/rss+xml\".equals(contentType) ||\r\n-                    \"application/atom+xml\".equals(contentType) ||\r\n-                    \"application/rdf+xml\".equals(contentType))  //TODO add more tree data types.\r\n-                return false;\r\n-            \r\n-            return\r\n-                \"text/plain\".equals(contentType)\r\n-                || \"text/fixed-width\".equals(contentType);  //FIXME Is text/fixed-width a valid contentType?\r\n+    public JSONObject createParserUIInitializationData(\r\n+            ImportingJob job, List<JSONObject> fileRecords, String format) {\r\n+        JSONObject options = super.createParserUIInitializationData(job, fileRecords, format);\r\n+        JSONArray columnWidths = new JSONArray();\r\n+        \r\n+        JSONObject firstFileRecord = fileRecords.get(0);\r\n+        String encoding = ImportingUtilities.getEncoding(firstFileRecord);\r\n+        String location = JSONUtilities.getString(firstFileRecord, \"location\", null);\r\n+        if (location != null) {\r\n+            File file = new File(job.getRawDataDir(), location);\r\n+            int[] columnWidthsA = guessColumnWidths(file, encoding);\r\n+            if (columnWidthsA != null) {\r\n+                for (int w : columnWidthsA) {\r\n+                    JSONUtilities.append(columnWidths, w);\r\n+                }\r\n+            }\r\n         }\r\n-        return false;\r\n-    }\r\n-\r\n-    @Override\r\n-    public void read(InputStream inputStream, Project project,\r\n-            ProjectMetadata metadata, Properties options)\r\n-            throws ImportException {\r\n-        read(new InputStreamReader(inputStream), project, metadata, options);\r\n+        \r\n+        JSONUtilities.safePut(options, \"lineSeparator\", \"\\n\");\r\n+        JSONUtilities.safePut(options, \"headerLines\", 0);\r\n+        JSONUtilities.safePut(options, \"columnWidths\", columnWidths);\r\n+        JSONUtilities.safePut(options, \"guessCellValueTypes\", true);\r\n+        \r\n+        return options;\r\n     }\r\n \r\n     @Override\r\n-    public void read(Reader reader, Project project, ProjectMetadata metadata,\r\n-            Properties options) throws ImportException {\r\n-        boolean splitIntoColumns = ImporterUtilities.getBooleanOption(\"split-into-columns\", options, true);\r\n-        String columnWidths = options.getProperty(\"fixed-column-widths\");\r\n-        int ignoreLines = ImporterUtilities.getIntegerOption(\"ignore\", options, -1);\r\n-        int headerLines = ImporterUtilities.getIntegerOption(\"header-lines\", options, 1);\r\n-\r\n-        int limit = ImporterUtilities.getIntegerOption(\"limit\",options,-1);\r\n-        int skip = ImporterUtilities.getIntegerOption(\"skip\",options,0);\r\n-        boolean guessValueType = ImporterUtilities.getBooleanOption(\"guess-value-type\", options, true);\r\n-\r\n-        LineNumberReader lnReader = new LineNumberReader(reader);\r\n+    public void parseOneFile(\r\n+        Project project,\r\n+        ProjectMetadata metadata,\r\n+        ImportingJob job,\r\n+        String fileSource,\r\n+        Reader reader,\r\n+        int limit,\r\n+        JSONObject options,\r\n+        List<Exception> exceptions\r\n+    ) {\r\n+        // String lineSeparator = JSONUtilities.getString(options, \"lineSeparator\", \"\\n\");\r\n+        final int[] columnWidths = JSONUtilities.getIntArray(options, \"columnWidths\");\r\n         \r\n+        final List<Object> columnNames;\r\n+        if (options.has(\"columnNames\")) {\r\n+            columnNames = new ArrayList<Object>();\r\n+            String[] strings = JSONUtilities.getStringArray(options, \"columnNames\");\r\n+            for (String s : strings) {\r\n+                columnNames.add(s);\r\n+            }\r\n+            JSONUtilities.safePut(options, \"headerLines\", 1);\r\n+        } else {\r\n+            columnNames = null;\r\n+        }\r\n         \r\n-        read(lnReader, project, columnWidths,\r\n-            limit, skip, ignoreLines, headerLines,\r\n-            guessValueType, splitIntoColumns\r\n-        );\r\n+        final LineNumberReader lnReader = new LineNumberReader(reader);\r\n         \r\n-    }\r\n-\r\n-    /**\r\n-    *\r\n-    * @param lnReader\r\n-    *           LineNumberReader used to read file or string contents\r\n-    * @param project\r\n-    *           The project into which the parsed data will be added\r\n-    * @param columnWidths\r\n-    *           Expects a comma separated string of integers which indicate the number of characters in each line\r\n-    * @param limit\r\n-    *           The maximum number of rows of data to import\r\n-    * @param skip\r\n-    *           The number of initial data rows to skip\r\n-    * @param ignoreLines\r\n-    *           The number of initial lines within the data source which should be ignored entirely\r\n-    * @param headerLines\r\n-    *           The number of lines in the data source which describe each column\r\n-    * @param guessValueType\r\n-    *           Whether the parser should try and guess the type of the value being parsed\r\n-    * @param splitIntoColumns\r\n-    *           Whether the parser should try and split the data source into columns\r\n-    * @throws IOException\r\n-    */\r\n-    public void read(LineNumberReader lnReader, Project project,\r\n-            String sep, int limit, int skip, int ignoreLines,\r\n-            int headerLines, boolean guessValueType, boolean splitIntoColumns) throws ImportException{\r\n-                \r\n-                int[] columnWidths = null;\r\n-\r\n-                columnWidths = getColumnWidthsFromString( sep );\r\n-                \r\n-                if(columnWidths.length < 2)\r\n-                    splitIntoColumns = false;\r\n-                \r\n-                List<String> columnNames = new ArrayList<String>();\r\n-                String line = null;\r\n-                int rowsWithData = 0;\r\n-\r\n-                try {\r\n-                    while ((line = lnReader.readLine()) != null) {\r\n-                        if (ignoreLines > 0) {\r\n-                            ignoreLines--;\r\n-                            continue;\r\n-                        } else if (StringUtils.isBlank(line)) {\r\n-                            continue;\r\n-                        }\r\n-\r\n-\r\n-                        if (headerLines > 0) {\r\n-                            //column headers\r\n-                            headerLines--;\r\n-                            \r\n-                            ArrayList<String> cells = getCells(line, columnWidths, splitIntoColumns);\r\n-                            \r\n-                            for (int c = 0; c < cells.size(); c++) {\r\n-                                String cell = cells.get(c).trim();\r\n-                                //add column even if cell is blank\r\n-                                ImporterUtilities.appendColumnName(columnNames, c, cell);\r\n-                            }\r\n-                        } else {\r\n-                            //data\r\n-                            Row row = new Row(columnNames.size());\r\n-\r\n-                            ArrayList<String> cells = getCells(line, columnWidths, splitIntoColumns);\r\n-\r\n-                            if( cells != null && cells.size() > 0 )\r\n-                                rowsWithData++;\r\n-\r\n-                            if (skip <=0  || rowsWithData > skip){\r\n-                                //add parsed data to row\r\n-                                for(String s : cells){\r\n-                                    if (ExpressionUtils.isNonBlankData(s)) {\r\n-                                        Serializable value = guessValueType ? ImporterUtilities.parseCellValue(s) : s;\r\n-                                        row.cells.add(new Cell(value, null));\r\n-                                    }else{\r\n-                                        row.cells.add(null);\r\n-                                    }\r\n-                                }\r\n-                                project.rows.add(row);\r\n-                                project.columnModel.setMaxCellIndex(row.cells.size());\r\n-                                \r\n-                                ImporterUtilities.ensureColumnsInRowExist(columnNames, row);\r\n-\r\n-                                if (limit > 0 && project.rows.size() >= limit) {\r\n-                                    break;\r\n-                                }\r\n-                            }\r\n-                        }\r\n+        TableDataReader dataReader = new TableDataReader() {\r\n+            boolean usedColumnNames = false;\r\n+            \r\n+            @Override\r\n+            public List<Object> getNextRowOfCells() throws IOException {\r\n+                if (columnNames != null && !usedColumnNames) {\r\n+                    usedColumnNames = true;\r\n+                    return columnNames;\r\n+                } else {\r\n+                    String line = lnReader.readLine();\r\n+                    if (line == null) {\r\n+                        return null;\r\n+                    } else {\r\n+                        return getCells(line, columnWidths);\r\n                     }\r\n-                } catch (IOException e) {\r\n-                    throw new ImportException(\"The fixed width importer could not read the next line\", e);\r\n                 }\r\n-\r\n-                ImporterUtilities.setupColumns(project, columnNames);\r\n+            }\r\n+        };\r\n         \r\n-        }\r\n-\r\n+        readTable(project, metadata, job, dataReader, fileSource, limit, options, exceptions);\r\n+    }\r\n+    \r\n     /**\r\n      * Splits the line into columns\r\n      * @param line\r\n      * @param lnReader\r\n      * @param splitIntoColumns\r\n      * @return\r\n      */\r\n-    private ArrayList<String> getCells(String line, int[] widths, boolean splitIntoColumns) {\r\n-        ArrayList<String> cells = new ArrayList<String>();\r\n-        if(splitIntoColumns){\r\n-            int columnStartCursor = 0;\r\n-            int columnEndCursor = 0;\r\n-            for(int width : widths){\r\n-                if(columnStartCursor >= line.length()){\r\n-                    cells.add(null); //FIXME is adding a null cell (to represent no data) OK?\r\n-                    continue;\r\n-                }\r\n-                \r\n-                columnEndCursor = columnStartCursor + width;\r\n-                \r\n-                if(columnEndCursor > line.length())\r\n-                    columnEndCursor = line.length();\r\n-                if(columnEndCursor <= columnStartCursor){\r\n-                    cells.add(null); //FIXME is adding a null cell (to represent no data, or a zero width column) OK? \r\n-                    continue;\r\n-                }\r\n-                \r\n-                cells.add(line.substring(columnStartCursor, columnEndCursor));\r\n-                \r\n-                columnStartCursor = columnEndCursor;\r\n+    static private ArrayList<Object> getCells(String line, int[] widths) {\r\n+        ArrayList<Object> cells = new ArrayList<Object>();\r\n+        \r\n+        int columnStartCursor = 0;\r\n+        int columnEndCursor = 0;\r\n+        for (int width : widths) {\r\n+            if (columnStartCursor >= line.length()) {\r\n+                cells.add(null); //FIXME is adding a null cell (to represent no data) OK?\r\n+                continue;\r\n             }\r\n-        }else{\r\n-            cells.add(line);\r\n+            \r\n+            columnEndCursor = columnStartCursor + width;\r\n+            \r\n+            if (columnEndCursor > line.length()) {\r\n+                columnEndCursor = line.length();\r\n+            }\r\n+            if (columnEndCursor <= columnStartCursor) {\r\n+                cells.add(null); //FIXME is adding a null cell (to represent no data, or a zero width column) OK? \r\n+                continue;\r\n+            }\r\n+            \r\n+            cells.add(line.substring(columnStartCursor, columnEndCursor));\r\n+            \r\n+            columnStartCursor = columnEndCursor;\r\n+        }\r\n+        \r\n+        // Residual text\r\n+        if (columnStartCursor < line.length()) {\r\n+            cells.add(line.substring(columnStartCursor));\r\n         }\r\n         return cells;\r\n     }\r\n-\r\n-    /**\r\n-     * Converts the expected string of comma separated integers into an array of integers.\r\n-     * Also performs a basic sanity check on the provided data.\r\n-     * \r\n-     * @param sep\r\n-     * A comma separated string of integers. e.g. 4,2,5,22,19\r\n-     * @return\r\n-     * @throws ServletException\r\n-     */\r\n-    public int[] getColumnWidthsFromString(String sep) throws ImportException {\r\n-        String[] splitSep = Pattern.compile(\",\").split(sep);\r\n-\r\n-        int[] widths = new int[splitSep.length];\r\n-        for(int i = 0;  i < splitSep.length; i++){\r\n-            try{\r\n-                int parsedInt = Integer.parseInt(splitSep[i]);\r\n-                if( parsedInt < 0 )\r\n-                    throw new ImportException(\"A column cannot have a width of less than zero\", null);\r\n-                widths[i] = parsedInt;\r\n-            }catch(NumberFormatException e){\r\n-                throw new ImportException(\"For a fixed column width import, the column widths must be given as a comma separated string of integers.  e.g. 1,3,5,22,19\", e);\r\n+    \r\n+    static public int[] guessColumnWidths(File file, String encoding) {\r\n+        try {\r\n+            InputStream is = new FileInputStream(file);\r\n+            try {\r\n+                Reader reader = encoding != null ? new InputStreamReader(is, encoding) : new InputStreamReader(is);\r\n+                LineNumberReader lineNumberReader = new LineNumberReader(reader);\r\n+                \r\n+                int[] counts = null;\r\n+                int totalBytes = 0;\r\n+                int lineCount = 0;\r\n+                String s;\r\n+                while (totalBytes < 64 * 1024 &&\r\n+                       lineCount < 100 &&\r\n+                       (s = lineNumberReader.readLine()) != null) {\r\n+                    \r\n+                    totalBytes += s.length() + 1; // count the new line character\r\n+                    if (s.length() == 0) {\r\n+                        continue;\r\n+                    }\r\n+                    lineCount++;\r\n+                    \r\n+                    if (counts == null) {\r\n+                        counts = new int[s.length()];\r\n+                        for (int c = 0; c < counts.length; c++) {\r\n+                            counts[c] = 0;\r\n+                        }\r\n+                    }\r\n+                    \r\n+                    for (int c = 0; c < counts.length && c < s.length(); c++) {\r\n+                        char ch = s.charAt(c);\r\n+                        if (ch == ' ') {\r\n+                            counts[c]++;\r\n+                        }\r\n+                    }\r\n+                }\r\n+                \r\n+                if (counts != null) {\r\n+                    List<Integer> widths = new ArrayList<Integer>();\r\n+                    \r\n+                    int startIndex = 0;\r\n+                    for (int c = 0; c < counts.length; c++) {\r\n+                        int count = counts[c];\r\n+                        if (count == lineCount && c > startIndex) {\r\n+                            widths.add(c - startIndex + 1);\r\n+                            startIndex = c + 1;\r\n+                        }\r\n+                    }\r\n+                    \r\n+                    for (int i = widths.size() - 1; i > 0; i--) {\r\n+                        if (widths.get(i) == 1) {\r\n+                            widths.remove(i);\r\n+                            widths.set(i - 1, widths.get(i - 1) + 1);\r\n+                        }\r\n+                    }\r\n+                    \r\n+                    int[] widthA = new int[widths.size()];\r\n+                    for (int i = 0; i < widthA.length; i++) {\r\n+                        widthA[i] = widths.get(i);\r\n+                    }\r\n+                    return widthA;\r\n+                }\r\n+            } finally {\r\n+                is.close();\r\n             }\r\n+        } catch (UnsupportedEncodingException e) {\r\n+            e.printStackTrace();\r\n+        } catch (IOException e) {\r\n+            e.printStackTrace();\r\n         }\r\n-        return widths;\r\n+        return null;\r\n     }\r\n-\r\n }\r"
        },
        {
            "sha": "07051823101f4c3ea31c26c5486906db16af101b",
            "filename": "main/src/com/google/refine/importers/ImportException.java",
            "status": "modified",
            "additions": 3,
            "deletions": 5,
            "changes": 8,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FImportException.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FImportException.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FImportException.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -38,11 +38,9 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n  * indicating the underlying cause of the problem.\n  */\n public class ImportException extends Exception {\n-\n-\tprivate static final long serialVersionUID = 7077314805989174181L;\n-\n-\tpublic ImportException(String message, Throwable cause) {\n+    private static final long serialVersionUID = 7077314805989174181L;\n+    \n+    public ImportException(String message, Throwable cause) {\n         super(message, cause);\n     }\n-\n }"
        },
        {
            "sha": "eff576fab2509934cd1ee591748c8c238cffa6c3",
            "filename": "main/src/com/google/refine/importers/ImporterRegistry.java",
            "status": "removed",
            "additions": 0,
            "deletions": 138,
            "changes": 138,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/0fa99d21cab6edf83360182fcf46cb4153e22c83/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FImporterRegistry.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/0fa99d21cab6edf83360182fcf46cb4153e22c83/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FImporterRegistry.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FImporterRegistry.java?ref=0fa99d21cab6edf83360182fcf46cb4153e22c83",
            "patch": "@@ -1,138 +0,0 @@\n-/*\n-\n-Copyright 2010, Google Inc.\n-All rights reserved.\n-\n-Redistribution and use in source and binary forms, with or without\n-modification, are permitted provided that the following conditions are\n-met:\n-\n-    * Redistributions of source code must retain the above copyright\n-notice, this list of conditions and the following disclaimer.\n-    * Redistributions in binary form must reproduce the above\n-copyright notice, this list of conditions and the following disclaimer\n-in the documentation and/or other materials provided with the\n-distribution.\n-    * Neither the name of Google Inc. nor the names of its\n-contributors may be used to endorse or promote products derived from\n-this software without specific prior written permission.\n-\n-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n-\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n-A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n-OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n-SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n-LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n-DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n-THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-\n-*/\n-\n-package com.google.refine.importers;\n-\n-import java.net.URL;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-\n-abstract public class ImporterRegistry {\n-    final static Logger logger = LoggerFactory.getLogger(\"importer-registry\");\n-\n-    static final private Map<String, Importer> importers = new HashMap<String, Importer>();\n-\n-    private static final String[][] importerNames = {\n-        {\"ExcelImporter\", \"com.google.refine.importers.ExcelImporter\"},\n-        {\"XmlImporter\", \"com.google.refine.importers.XmlImporter\"},\n-        {\"RdfTripleImporter\", \"com.google.refine.importers.RdfTripleImporter\"},\n-        {\"MarcImporter\", \"com.google.refine.importers.MarcImporter\"},\n-        {\"TsvCsvImporter\", \"com.google.refine.importers.TsvCsvImporter\"},\n-        {\"JsonImporter\", \"com.google.refine.importers.JsonImporter\"},\n-        {\"FixedWidthImporter\", \"com.google.refine.importers.FixedWidthImporter\"}\n-    };\n-\n-    static {\n-        registerImporters(importerNames);\n-    }\n-\n-    static public boolean registerImporters(String[][] importers) {\n-        boolean status = true;\n-        for (String[] importer : importerNames) {\n-            String importerName = importer[0];\n-            String className = importer[1];\n-            logger.debug(\"Loading command \" + importerName + \" class: \" + className);\n-            Importer cmd;\n-            try {\n-                // TODO: May need to use the servlet container's class loader here\n-                cmd = (Importer) Class.forName(className).newInstance();\n-            } catch (InstantiationException e) {\n-                logger.error(\"Failed to load importer class \" + className, e);\n-                status = false;\n-                continue;\n-            } catch (IllegalAccessException e) {\n-                logger.error(\"Failed to load importer class \" + className, e);\n-                status = false;\n-                continue;\n-            } catch (ClassNotFoundException e) {\n-                logger.error(\"Failed to load importer class \" + className, e);\n-                status = false;\n-                continue;\n-            }\n-            status |= registerImporter(importerName, cmd);\n-        }\n-        return status;\n-    }\n-\n-    /**\n-     * Register a single importer.\n-     *\n-     * @param name importer verb for importer\n-     * @param importerObject object implementing the importer\n-     * \n-     * @return true if importer was loaded and registered successfully\n-     */\n-    static public boolean registerImporter(String name, Importer importerObject) {\n-        if (importers.containsKey(name)) {\n-            return false;\n-        }\n-        importers.put(name, importerObject);\n-        return true;\n-    }\n-\n-    // Currently only for test purposes\n-    static protected boolean unregisterImporter(String verb) {\n-        return importers.remove(verb) != null;\n-    }\n-    \n-    static public Importer guessImporter(String contentType, String fileName, boolean provideDefault) {\n-        for (Importer i : importers.values()){\n-            if(i.canImportData(contentType, fileName)){\n-                return i;\n-            }\n-        }\n-        if (provideDefault) {\n-            return new TsvCsvImporter(); // default\n-        } else {\n-            return null;\n-        }\n-    }\n-    \n-    static public Importer guessImporter(String contentType, String filename) {\n-        return guessImporter(contentType, filename, true);\n-    }\n-\n-    static public Importer guessUrlImporter(URL url) {\n-        for (Importer importer : importers.values()){\n-            if (importer instanceof UrlImporter \n-                    && ((UrlImporter) importer).canImportData(url)) {\n-                return importer;\n-            }\n-        }\n-        return null;\n-    }\n-}"
        },
        {
            "sha": "a95da18c1b01e3407e0e4e962d46ac8556a2aecd",
            "filename": "main/src/com/google/refine/importers/ImporterUtilities.java",
            "status": "modified",
            "additions": 108,
            "deletions": 6,
            "changes": 114,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FImporterUtilities.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FImporterUtilities.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FImporterUtilities.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -33,15 +33,25 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \n package com.google.refine.importers;\n \n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.InputStream;\n import java.io.Serializable;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n \n+import org.json.JSONObject;\n+\n+import com.google.refine.importing.ImportingJob;\n+import com.google.refine.importing.ImportingUtilities;\n import com.google.refine.model.Column;\n+import com.google.refine.model.ModelException;\n import com.google.refine.model.Project;\n import com.google.refine.model.Row;\n+import com.google.refine.util.TrackingInputStream;\n \n public class ImporterUtilities {\n \n@@ -117,6 +127,33 @@ static public void ensureColumnsInRowExist(List<String> columnNames, Row row) {\n             columnNames.add(\"\");\n         }\n     }\n+    \n+    static public Column getOrAllocateColumn(Project project, List<String> currentFileColumnNames, int index) {\n+        if (index < currentFileColumnNames.size()) {\n+            return project.columnModel.getColumnByName(currentFileColumnNames.get(index));\n+        } else if (index == currentFileColumnNames.size()) {\n+            String prefix = \"Column \";\n+            int i = 1;\n+            while (true) {\n+                String columnName = prefix + i;\n+                if (project.columnModel.getColumnByName(columnName) != null) {\n+                    // Already taken name\n+                    i++;\n+                } else {\n+                    Column column = new Column(project.columnModel.allocateNewCellIndex(), columnName);\n+                    try {\n+                        project.columnModel.addColumn(project.columnModel.columns.size(), column, false);\n+                    } catch (ModelException e) {\n+                        // Ignore: shouldn't get in here since we just checked for duplicate names.\n+                    }\n+                    currentFileColumnNames.add(columnName);\n+                    return column;\n+                }\n+            }\n+        } else {\n+            throw new RuntimeException(\"Unexpected code path\");\n+        }\n+    }\n \n     static public void setupColumns(Project project, List<String> columnNames) {\n         Map<String, Integer> nameToIndex = new HashMap<String, Integer>();\n@@ -125,9 +162,10 @@ static public void setupColumns(Project project, List<String> columnNames) {\n             if (cell.isEmpty()) {\n                 cell = \"Column\";\n             } else if (cell.startsWith(\"\\\"\") && cell.endsWith(\"\\\"\")) {\n-                cell = cell.substring(1, cell.length() - 1).trim(); //FIXME is trimming quotation marks appropriate?\n+                // FIXME: is trimming quotation marks appropriate?\n+                cell = cell.substring(1, cell.length() - 1).trim();\n             }\n-\n+            \n             if (nameToIndex.containsKey(cell)) {\n                 int index = nameToIndex.get(cell);\n                 nameToIndex.put(cell, index + 1);\n@@ -136,11 +174,75 @@ static public void setupColumns(Project project, List<String> columnNames) {\n             } else {\n                 nameToIndex.put(cell, 2);\n             }\n-\n-            Column column = new Column(c, cell);\n-\n-            project.columnModel.columns.add(column);\n+            \n+            columnNames.set(c, cell);\n+            if (project.columnModel.getColumnByName(cell) == null) {\n+                Column column = new Column(project.columnModel.allocateNewCellIndex(), cell);\n+                try {\n+                    project.columnModel.addColumn(project.columnModel.columns.size(), column, false);\n+                } catch (ModelException e) {\n+                    // Ignore: shouldn't get in here since we just checked for duplicate names.\n+                }\n+            }\n         }\n     }\n+    \n+    static public interface MultiFileReadingProgress {\n+        public void startFile(String fileSource);\n+        public void readingFile(String fileSource, long bytesRead);\n+        public void endFile(String fileSource, long bytesRead);\n+    }\n+    \n+    static public MultiFileReadingProgress createMultiFileReadingProgress(\n+            final ImportingJob job, List<JSONObject> fileRecords) {\n+        long totalSize = 0;\n+        for (JSONObject fileRecord : fileRecords) {\n+            File file = ImportingUtilities.getFile(job, fileRecord);\n+            totalSize += file.length();\n+        }\n+        \n+        final long totalSize2 = totalSize;\n+        return new MultiFileReadingProgress() {\n+            long totalBytesRead = 0;\n+            \n+            void setProgress(String fileSource, long bytesRead) {\n+                ImportingUtilities.setCreatingProjectProgress(\n+                    job,\n+                    \"Reading \" + fileSource,\n+                    (int) (100 * (totalBytesRead + bytesRead) / totalSize2));\n+            }\n+            \n+            @Override\n+            public void startFile(String fileSource) {\n+                setProgress(fileSource, 0);\n+            }\n \n+            @Override\n+            public void readingFile(String fileSource, long bytesRead) {\n+                setProgress(fileSource, bytesRead);\n+            }\n+\n+            @Override\n+            public void endFile(String fileSource, long bytesRead) {\n+                totalBytesRead += bytesRead;\n+            }\n+        };\n+    }\n+    \n+    static public InputStream openAndTrackFile(\n+            final String fileSource,\n+            final File file,\n+            final MultiFileReadingProgress progress) throws FileNotFoundException {\n+        InputStream inputStream = new FileInputStream(file);\n+        return progress == null ? inputStream : new TrackingInputStream(inputStream) {\n+            @Override\n+            protected long track(long bytesRead) {\n+                long l = super.track(bytesRead);\n+                \n+                progress.readingFile(fileSource, this.bytesRead);\n+                \n+                return l;\n+            }\n+        };\n+    }\n }"
        },
        {
            "sha": "ccd6e74dadff9708d8055b6a8f93ed300934640b",
            "filename": "main/src/com/google/refine/importers/ImportingParserBase.java",
            "status": "added",
            "additions": 138,
            "deletions": 0,
            "changes": 138,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FImportingParserBase.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FImportingParserBase.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FImportingParserBase.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,138 @@\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+package com.google.refine.importers;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.util.List;\n+\n+import org.apache.commons.lang.NotImplementedException;\n+import org.json.JSONObject;\n+\n+import com.google.refine.ProjectMetadata;\n+import com.google.refine.importers.ImporterUtilities.MultiFileReadingProgress;\n+import com.google.refine.importing.ImportingJob;\n+import com.google.refine.importing.ImportingParser;\n+import com.google.refine.importing.ImportingUtilities;\n+import com.google.refine.model.Project;\n+\n+abstract public class ImportingParserBase implements ImportingParser {\n+    final protected boolean useInputStream;\n+    \n+    protected ImportingParserBase(boolean useInputStream) {\n+        this.useInputStream = useInputStream;\n+    }\n+    \n+    @Override\n+    public void parse(Project project, ProjectMetadata metadata,\n+            final ImportingJob job, List<JSONObject> fileRecords, String format,\n+            int limit, JSONObject options, List<Exception> exceptions) {\n+        MultiFileReadingProgress progress = ImporterUtilities.createMultiFileReadingProgress(job, fileRecords);\n+        for (JSONObject fileRecord : fileRecords) {\n+            if (job.canceled) {\n+                break;\n+            }\n+            \n+            try {\n+                parseOneFile(project, metadata, job, fileRecord, limit, options, exceptions, progress);\n+            } catch (IOException e) {\n+                exceptions.add(e);\n+            }\n+            \n+            if (limit > 0 && project.rows.size() >= limit) {\n+                break;\n+            }\n+        }\n+    }\n+    \n+    public void parseOneFile(\n+        Project project,\n+        ProjectMetadata metadata,\n+        ImportingJob job,\n+        JSONObject fileRecord,\n+        int limit,\n+        JSONObject options,\n+        List<Exception> exceptions,\n+        final MultiFileReadingProgress progress\n+    ) throws IOException {\n+        final File file = ImportingUtilities.getFile(job, fileRecord);\n+        final String fileSource = ImportingUtilities.getFileSource(fileRecord);\n+        \n+        progress.startFile(fileSource);\n+        try {\n+            InputStream inputStream = ImporterUtilities.openAndTrackFile(fileSource, file, progress);\n+            try {\n+                if (useInputStream) {\n+                    parseOneFile(project, metadata, job, fileSource, inputStream, limit, options, exceptions);\n+                } else {\n+                    Reader reader = ImportingUtilities.getReaderFromStream(inputStream, fileRecord);\n+                    \n+                    parseOneFile(project, metadata, job, fileSource, reader, limit, options, exceptions);\n+                }\n+            } finally {\n+                inputStream.close();\n+            }\n+        } finally {\n+            progress.endFile(fileSource, file.length());\n+        }\n+    }\n+    \n+    public void parseOneFile(\n+        Project project,\n+        ProjectMetadata metadata,\n+        ImportingJob job,\n+        String fileSource,\n+        Reader reader,\n+        int limit,\n+        JSONObject options,\n+        List<Exception> exceptions\n+    ) {\n+        throw new NotImplementedException();\n+    }\n+    \n+    public void parseOneFile(\n+        Project project,\n+        ProjectMetadata metadata,\n+        ImportingJob job,\n+        String fileSource,\n+        InputStream inputStream,\n+        int limit,\n+        JSONObject options,\n+        List<Exception> exceptions\n+    ) {\n+        throw new NotImplementedException();\n+    }\n+}"
        },
        {
            "sha": "dca023d2e748b3a09cbfa67ac66e56de56965530",
            "filename": "main/src/com/google/refine/importers/JsonImporter.java",
            "status": "modified",
            "additions": 301,
            "deletions": 68,
            "changes": 369,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FJsonImporter.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FJsonImporter.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FJsonImporter.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -33,95 +33,328 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \r\n package com.google.refine.importers;\r\n \r\n-import java.io.ByteArrayInputStream;\r\n+import java.io.File;\r\n+import java.io.FileInputStream;\r\n import java.io.IOException;\r\n import java.io.InputStream;\r\n-import java.io.PushbackInputStream;\r\n-import java.util.Properties;\r\n+import java.io.Reader;\r\n+import java.util.List;\r\n \r\n+import javax.servlet.ServletException;\r\n+\r\n+import org.codehaus.jackson.JsonFactory;\r\n+import org.codehaus.jackson.JsonParseException;\r\n+import org.codehaus.jackson.JsonParser;\r\n+import org.codehaus.jackson.JsonToken;\r\n+import org.json.JSONArray;\r\n+import org.json.JSONObject;\r\n import org.slf4j.Logger;\r\n import org.slf4j.LoggerFactory;\r\n \r\n import com.google.refine.ProjectMetadata;\r\n-import com.google.refine.importers.TreeImportUtilities.ImportColumnGroup;\r\n-import com.google.refine.importers.parsers.JSONParser;\r\n-import com.google.refine.importers.parsers.TreeParser;\r\n+import com.google.refine.importers.tree.ImportColumnGroup;\r\n+import com.google.refine.importers.tree.TreeImportingParserBase;\r\n+import com.google.refine.importers.tree.TreeReader;\r\n+import com.google.refine.importing.ImportingJob;\r\n+import com.google.refine.importing.ImportingUtilities;\r\n import com.google.refine.model.Project;\r\n+import com.google.refine.util.JSONUtilities;\r\n \r\n-public class JsonImporter implements StreamImporter{\r\n-\tfinal static Logger logger = LoggerFactory.getLogger(\"JsonImporter\");\r\n-\r\n-    public static final int BUFFER_SIZE = 64 * 1024;\r\n-\r\n-\t@Override\r\n-\tpublic void read(InputStream inputStream, Project project,\r\n-\t\t\tProjectMetadata metadata, Properties options)\r\n-\t\t\tthrows ImportException {\r\n-\t\t//FIXME the below is a close duplicate of the XmlImporter code.\r\n-\t\t//Should wrap a lot of the below into methods and put them in a common superclass\r\n-\t\tlogger.trace(\"JsonImporter.read\");\r\n-        PushbackInputStream pis = new PushbackInputStream(inputStream,BUFFER_SIZE);\r\n-\r\n-        String[] recordPath = null;\r\n-        {\r\n-            byte[] buffer = new byte[BUFFER_SIZE];\r\n-            int bytes_read = 0;\r\n-            try {//fill the buffer with data\r\n-                while (bytes_read < BUFFER_SIZE) {\r\n-                    int c = pis.read(buffer, bytes_read, BUFFER_SIZE - bytes_read);\r\n-                    if (c == -1) break;\r\n-                    bytes_read +=c ;\r\n+public class JsonImporter extends TreeImportingParserBase {\r\n+    public JsonImporter() {\r\n+        super(false);\r\n+    }\r\n+    \r\n+    static private class PreviewParsingState {\r\n+        int tokenCount;\r\n+    }\r\n+    \r\n+    final static private int PREVIEW_PARSING_LIMIT = 1000;\r\n+    \r\n+    @Override\r\n+    public JSONObject createParserUIInitializationData(\r\n+            ImportingJob job, List<JSONObject> fileRecords, String format) {\r\n+        JSONObject options = super.createParserUIInitializationData(job, fileRecords, format);\r\n+        try {\r\n+            JSONObject firstFileRecord = fileRecords.get(0);\r\n+            File file = ImportingUtilities.getFile(job, firstFileRecord);\r\n+            InputStream is = new FileInputStream(file);\r\n+            try {\r\n+                JsonFactory factory = new JsonFactory();\r\n+                JsonParser parser = factory.createJsonParser(is);\r\n+                \r\n+                PreviewParsingState state = new PreviewParsingState();\r\n+                Object rootValue = parseForPreview(parser, state);\r\n+                if (rootValue != null) {\r\n+                    JSONUtilities.safePut(options, \"dom\", rootValue);\r\n                 }\r\n-                pis.unread(buffer, 0, bytes_read);\r\n-            } catch (IOException e) {\r\n-                throw new ImportException(\"Read error\",e);\r\n+            } finally {\r\n+                is.close();\r\n             }\r\n+        } catch (IOException e) {\r\n+            // Ignore\r\n+        }\r\n \r\n-            InputStream iStream = new ByteArrayInputStream(buffer, 0, bytes_read);\r\n-            TreeParser parser = new JSONParser(iStream);\r\n-            if (options.containsKey(\"importer-record-tag\")) {\r\n-                try{\r\n-                    recordPath = XmlImportUtilities.detectPathFromTag(\r\n-                        parser,\r\n-                        options.getProperty(\"importer-record-tag\"));\r\n-                }catch(Exception e){\r\n-                    // silent\r\n-                    // e.printStackTrace();\r\n+        return options;\r\n+    }\r\n+    \r\n+    final static private Object parseForPreview(JsonParser parser, PreviewParsingState state, JsonToken token)\r\n+            throws JsonParseException, IOException {\r\n+        if (token != null) {\r\n+            switch (token) {\r\n+            case START_ARRAY:\r\n+                return parseArrayForPreview(parser, state);\r\n+            case START_OBJECT:\r\n+                return parseObjectForPreview(parser, state);\r\n+            case VALUE_STRING:\r\n+                return parser.getText();\r\n+            case VALUE_NUMBER_INT:\r\n+                return Integer.valueOf(parser.getIntValue());\r\n+            case VALUE_NUMBER_FLOAT:\r\n+                return Float.valueOf(parser.getFloatValue());\r\n+            case VALUE_TRUE:\r\n+                return Boolean.TRUE;\r\n+            case VALUE_FALSE:\r\n+                return Boolean.FALSE;\r\n+            case VALUE_NULL:\r\n+                return null;\r\n+            }\r\n+        }\r\n+        return null;\r\n+    }\r\n+    \r\n+    final static private Object parseForPreview(JsonParser parser, PreviewParsingState state) {\r\n+        try {\r\n+            JsonToken token = parser.nextToken();\r\n+            state.tokenCount++;\r\n+            return parseForPreview(parser, state, token);\r\n+        } catch (Exception e) {\r\n+            return null;\r\n+        }\r\n+    }\r\n+    \r\n+    final static private JSONObject parseObjectForPreview(JsonParser parser, PreviewParsingState state) {\r\n+        JSONObject result = new JSONObject();\r\n+        loop:while (state.tokenCount < PREVIEW_PARSING_LIMIT) {\r\n+            try {\r\n+                JsonToken token = parser.nextToken();\r\n+                if (token == null) {\r\n+                    break;\r\n+                }\r\n+                state.tokenCount++;\r\n+                \r\n+                switch (token) {\r\n+                case FIELD_NAME:\r\n+                    String fieldName = parser.getText();\r\n+                    Object fieldValue = parseForPreview(parser, state);\r\n+                    JSONUtilities.safePut(result, fieldName, fieldValue);\r\n+                    break;\r\n+                case END_OBJECT:\r\n+                    break loop;\r\n+                default:\r\n+                    break loop;\r\n                 }\r\n-            } else {\r\n-                recordPath = XmlImportUtilities.detectRecordElement(parser);\r\n+            } catch (Exception e) {\r\n+                break;\r\n             }\r\n         }\r\n+        return result;\r\n+    }\r\n+    \r\n+    final static private JSONArray parseArrayForPreview(JsonParser parser, PreviewParsingState state) {\r\n+        JSONArray result = new JSONArray();\r\n+        loop:while (state.tokenCount < PREVIEW_PARSING_LIMIT) {\r\n+            try {\r\n+                JsonToken token = parser.nextToken();\r\n+                if (token == null) {\r\n+                    break;\r\n+                }\r\n+                state.tokenCount++;\r\n+                \r\n+                switch (token) {\r\n+                case END_ARRAY:\r\n+                    break loop;\r\n+                default:\r\n+                    Object element = parseForPreview(parser, state, token);\r\n+                    JSONUtilities.append(result, element);\r\n+                }\r\n+            } catch (Exception e) {\r\n+                break;\r\n+            }\r\n+        }\r\n+        return result;\r\n+    }\r\n+    \r\n+    @Override\r\n+    public void parseOneFile(Project project, ProjectMetadata metadata,\r\n+            ImportingJob job, String fileSource, Reader reader,\r\n+            ImportColumnGroup rootColumnGroup, int limit, JSONObject options, List<Exception> exceptions) {\r\n+        \r\n+        parseOneFile(project, metadata, job, fileSource,\r\n+            new JSONTreeReader(reader), rootColumnGroup, limit, options, exceptions);\r\n+    }\r\n+    \r\n+    static public class JSONTreeReader implements TreeReader {\r\n+        final static Logger logger = LoggerFactory.getLogger(\"JsonParser\");\r\n+        \r\n+        JsonFactory factory = new JsonFactory();\r\n+        JsonParser parser = null;\r\n+        \r\n+        //The following is a workaround for inconsistent Jackson JsonParser\r\n+        Boolean lastTokenWasAFieldNameAndCurrentTokenIsANewEntity = false;\r\n+        Boolean thisTokenIsAFieldName = false;\r\n+        String lastFieldName = null;\r\n+        //end of workaround\r\n+        \r\n+        public JSONTreeReader(Reader reader) {\r\n+            try {\r\n+                parser = factory.createJsonParser(reader);\r\n+            } catch (Exception e) {\r\n+                e.printStackTrace();\r\n+            }\r\n+        }\r\n+        \r\n+        /**\r\n+         * Does nothing. All Json is treated as elements\r\n+         */\r\n+        @Override\r\n+        public int getAttributeCount() {\r\n+            // TODO Auto-generated method stub\r\n+            return 0;\r\n+        }\r\n+        \r\n+        /**\r\n+         * Does nothing. All Json is treated as elements\r\n+         */\r\n+        @Override\r\n+        public String getAttributeLocalName(int index) {\r\n+            return null;\r\n+        }\r\n \r\n-        if (recordPath == null)\r\n-            return;\r\n-        ImportColumnGroup rootColumnGroup = new ImportColumnGroup();\r\n-        XmlImportUtilities.importTreeData(new JSONParser(pis), project, recordPath, rootColumnGroup);\r\n-        XmlImportUtilities.createColumnsFromImport(project, rootColumnGroup);\r\n-\r\n-        project.columnModel.update();\r\n+        /**\r\n+         * Does nothing. All Json is treated as elements\r\n+         */\r\n+        @Override\r\n+        public String getAttributePrefix(int index) {\r\n+            // TODO Auto-generated method stub\r\n+            return null;\r\n+        }\r\n \r\n-\t}\r\n+        /**\r\n+         * Does nothing. All Json is treated as elements\r\n+         */\r\n+        @Override\r\n+        public String getAttributeValue(int index) {\r\n+            // TODO Auto-generated method stub\r\n+            return null;\r\n+        }\r\n \r\n-\t@Override\r\n-\tpublic boolean canImportData(String contentType, String fileName) {\r\n-\t\tif (contentType != null) {\r\n-            contentType = contentType.toLowerCase().trim();\r\n+        @Override\r\n+        public Token current() throws ServletException {\r\n+            return this.mapToToken(parser.getCurrentToken());\r\n+        }\r\n \r\n-            if(\"application/json\".equals(contentType) ||\r\n-                      \"text/json\".equals(contentType)) {\r\n-                return true;\r\n+        @Override\r\n+        public String getFieldName() throws ServletException{\r\n+            try {\r\n+                String text = parser.getCurrentName();\r\n+                \r\n+                //The following is a workaround for inconsistent Jackson JsonParser\r\n+                if(text == null){\r\n+                    if(this.lastTokenWasAFieldNameAndCurrentTokenIsANewEntity) \r\n+                        text = this.lastFieldName;\r\n+                    else\r\n+                        text = \"__anonymous__\";\r\n+                }\r\n+                //end of workaround\r\n+                \r\n+                return text;\r\n+            } catch (Exception e) {\r\n+                throw new ServletException(e);\r\n             }\r\n-        } else if (fileName != null) {\r\n-            fileName = fileName.toLowerCase();\r\n-            if (\r\n-                    fileName.endsWith(\".json\") ||\r\n-                    fileName.endsWith(\".js\")\r\n-                ) {\r\n-                return true;\r\n+        }\r\n+\r\n+        /**\r\n+         * Does nothing. Json does not have prefixes\r\n+         */\r\n+        @Override\r\n+        public String getPrefix() {\r\n+            return null;\r\n+        }\r\n+\r\n+        @Override\r\n+        public String getFieldValue() throws ServletException {\r\n+            try {\r\n+                return parser.getText();\r\n+            } catch (Exception e) {\r\n+                throw new ServletException(e);\r\n             }\r\n         }\r\n-        return false;\r\n-\t}\r\n \r\n+        @Override\r\n+        public boolean hasNext() throws ServletException {\r\n+            return true; //FIXME fairly obtuse, is there a better way (advancing, then rewinding?)\r\n+        }\r\n+\r\n+        @Override\r\n+        public Token next() throws ServletException {\r\n+            JsonToken next;\r\n+            try {\r\n+                next = parser.nextToken();\r\n+            } catch (JsonParseException e) {\r\n+                throw new ServletException(e);\r\n+            } catch (IOException e) {\r\n+                throw new ServletException(e);\r\n+            }\r\n+            \r\n+            if(next == null)\r\n+                throw new ServletException(\"No more Json Tokens in stream\");\r\n+            \r\n+            //The following is a workaround for inconsistent Jackson JsonParser\r\n+            if(next == JsonToken.FIELD_NAME){\r\n+                try {\r\n+                    this.thisTokenIsAFieldName = true;\r\n+                    this.lastFieldName = parser.getCurrentName();\r\n+                } catch (Exception e) {\r\n+                    //silent\r\n+                }\r\n+            }else if(next == JsonToken.START_ARRAY || next == JsonToken.START_OBJECT){\r\n+                if(this.thisTokenIsAFieldName){\r\n+                    this.lastTokenWasAFieldNameAndCurrentTokenIsANewEntity = true;\r\n+                    this.thisTokenIsAFieldName = false;\r\n+                }else{\r\n+                    this.lastTokenWasAFieldNameAndCurrentTokenIsANewEntity = false;\r\n+                    this.lastFieldName = null;\r\n+                }\r\n+            }else{\r\n+                this.lastTokenWasAFieldNameAndCurrentTokenIsANewEntity = false;\r\n+                this.lastFieldName = null;\r\n+                this.thisTokenIsAFieldName = false;\r\n+            }\r\n+            //end of workaround\r\n+                \r\n+            return mapToToken(next);\r\n+        }\r\n+        \r\n+        protected Token mapToToken(JsonToken token){\r\n+            switch(token){\r\n+                case START_ARRAY: return Token.StartEntity;\r\n+                case END_ARRAY: return Token.EndEntity;\r\n+                case START_OBJECT: return Token.StartEntity;\r\n+                case END_OBJECT: return Token.EndEntity;\r\n+                case VALUE_STRING: return Token.Value;\r\n+                case FIELD_NAME: return Token.Ignorable; //returned by the getLocalName function()\r\n+                case VALUE_NUMBER_INT: return Token.Value;\r\n+                //Json does not have START_DOCUMENT token type (so ignored as default)\r\n+                //Json does not have END_DOCUMENT token type (so ignored as default)\r\n+                case VALUE_TRUE : return Token.Value;\r\n+                case VALUE_NUMBER_FLOAT : return Token.Value;\r\n+                case VALUE_NULL : return Token.Value;\r\n+                case VALUE_FALSE : return Token.Value;\r\n+                case VALUE_EMBEDDED_OBJECT : return Token.Ignorable;\r\n+                case NOT_AVAILABLE : return Token.Ignorable;\r\n+                default: return Token.Ignorable;\r\n+            }\r\n+        }\r\n+    }\r\n }\r"
        },
        {
            "sha": "d18d1d595938b12c06fedd6bc581ad5453133afe",
            "filename": "main/src/com/google/refine/importers/LineBasedFormatGuesser.java",
            "status": "added",
            "additions": 21,
            "deletions": 0,
            "changes": 21,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FLineBasedFormatGuesser.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FLineBasedFormatGuesser.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FLineBasedFormatGuesser.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,21 @@\n+package com.google.refine.importers;\n+\n+import java.io.File;\n+\n+import com.google.refine.importing.FormatGuesser;\n+\n+public class LineBasedFormatGuesser implements FormatGuesser {\n+\n+    @Override\n+    public String guess(File file, String encoding, String seedFormat) {\n+        SeparatorBasedImporter.Separator sep = SeparatorBasedImporter.guessSeparator(file, encoding);\n+        if (sep != null) {\n+            return \"text/line-based/*sv\";\n+        }\n+        int[] widths = FixedWidthImporter.guessColumnWidths(file, encoding);\n+        if (widths != null) {\n+            return \"text/line-based/fixed-width\";\n+        }\n+        return null;\n+    }\n+}"
        },
        {
            "sha": "ff7df50c8f77755134920d6ea9b21499f731d57e",
            "filename": "main/src/com/google/refine/importers/LineBasedImporter.java",
            "status": "added",
            "additions": 105,
            "deletions": 0,
            "changes": 105,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FLineBasedImporter.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FLineBasedImporter.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FLineBasedImporter.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,105 @@\n+package com.google.refine.importers;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.LineNumberReader;\r\n+import java.io.Reader;\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.json.JSONObject;\r\n+\r\n+import com.google.refine.ProjectMetadata;\r\n+import com.google.refine.importing.ImportingJob;\r\n+import com.google.refine.model.Project;\r\n+import com.google.refine.util.JSONUtilities;\r\n+\r\n+public class LineBasedImporter extends TabularImportingParserBase {\r\n+    public LineBasedImporter() {\r\n+        super(false);\r\n+    }\r\n+    \r\n+    @Override\r\n+    public JSONObject createParserUIInitializationData(\r\n+            ImportingJob job, List<JSONObject> fileRecords, String format) {\r\n+        JSONObject options = super.createParserUIInitializationData(job, fileRecords, format);\r\n+        \r\n+        JSONUtilities.safePut(options, \"lineSeparator\", \"\\n\");\r\n+        JSONUtilities.safePut(options, \"linesPerRow\", 1);\r\n+        JSONUtilities.safePut(options, \"headerLines\", 0);\r\n+        JSONUtilities.safePut(options, \"guessCellValueTypes\", true);\r\n+        \r\n+        return options;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void parseOneFile(\r\n+        Project project,\r\n+        ProjectMetadata metadata,\r\n+        ImportingJob job,\r\n+        String fileSource,\r\n+        Reader reader,\r\n+        int limit,\r\n+        JSONObject options,\r\n+        List<Exception> exceptions\r\n+    ) {\r\n+        final int linesPerRow = JSONUtilities.getInt(options, \"linesPerRow\", 1);\r\n+        \r\n+        final List<Object> columnNames;\r\n+        if (options.has(\"columnNames\")) {\r\n+            columnNames = new ArrayList<Object>();\r\n+            String[] strings = JSONUtilities.getStringArray(options, \"columnNames\");\r\n+            for (String s : strings) {\r\n+                columnNames.add(s);\r\n+            }\r\n+            JSONUtilities.safePut(options, \"headerLines\", 1);\r\n+        } else {\r\n+            columnNames = null;\r\n+            JSONUtilities.safePut(options, \"headerLines\", 0);\r\n+        }\r\n+        \r\n+        final LineNumberReader lnReader = new LineNumberReader(reader);\r\n+        \r\n+        try {\r\n+            int skip = JSONUtilities.getInt(options, \"ignoreLines\", -1);\r\n+            while (skip > 0) {\r\n+                lnReader.readLine();\r\n+                skip--;\r\n+            }\r\n+        } catch (IOException e) {\r\n+            e.printStackTrace();\r\n+        }\r\n+        JSONUtilities.safePut(options, \"ignoreLines\", -1);\r\n+        \r\n+        TableDataReader dataReader = new TableDataReader() {\r\n+            boolean usedColumnNames = false;\r\n+            \r\n+            @Override\r\n+            public List<Object> getNextRowOfCells() throws IOException {\r\n+                if (columnNames != null && !usedColumnNames) {\r\n+                    usedColumnNames = true;\r\n+                    return columnNames;\r\n+                } else {\r\n+                    List<Object> cells = null;\r\n+                    for (int i = 0; i < linesPerRow; i++) {\r\n+                        String line = lnReader.readLine();\r\n+                        if (i == 0) {\r\n+                            if (line == null) {\r\n+                                return null;\r\n+                            } else {\r\n+                                cells = new ArrayList<Object>(linesPerRow);\r\n+                                cells.add(line);\r\n+                            }\r\n+                        } else if (line != null) {\r\n+                            cells.add(line);\r\n+                        } else {\r\n+                            break;\r\n+                        }\r\n+                    }\r\n+                    return cells;\r\n+                }\r\n+            }\r\n+        };\r\n+        \r\n+        readTable(project, metadata, job, dataReader, fileSource, limit, options, exceptions);\r\n+    }\r\n+}\r"
        },
        {
            "sha": "07a4b412238687931d0bfa1a270e3e186dc0913e",
            "filename": "main/src/com/google/refine/importers/MarcImporter.java",
            "status": "modified",
            "additions": 21,
            "deletions": 53,
            "changes": 74,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FMarcImporter.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FMarcImporter.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FMarcImporter.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -40,56 +40,44 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n-import java.util.Properties;\n+import java.util.List;\n \n+import org.json.JSONObject;\n import org.marc4j.MarcPermissiveStreamReader;\n import org.marc4j.MarcWriter;\n import org.marc4j.MarcXmlWriter;\n import org.marc4j.marc.Record;\n \n import com.google.refine.ProjectMetadata;\n+import com.google.refine.importers.tree.ImportColumnGroup;\n+import com.google.refine.importing.ImportingJob;\n import com.google.refine.model.Project;\n \n-public class MarcImporter implements StreamImporter {\n-\n+public class MarcImporter extends XmlImporter {\n     @Override\n-    public void read(\n-        InputStream inputStream,\n-        Project project,\n-        ProjectMetadata metadata, Properties options\n-    ) throws ImportException {\n-        int limit = ImporterUtilities.getIntegerOption(\"limit\",options,-1);\n-        int skip = ImporterUtilities.getIntegerOption(\"skip\",options,0);\n-\n+    public void parseOneFile(Project project, ProjectMetadata metadata,\n+            ImportingJob job, String fileSource, InputStream inputStream,\n+            ImportColumnGroup rootColumnGroup, int limit, JSONObject options,\n+            List<Exception> exceptions) {\n+        \n         File tempFile;\n         try {\n             tempFile = File.createTempFile(\"refine-import-\", \".marc.xml\");\n         } catch (IOException e) {\n-            throw new ImportException(\"Unexpected error creating temp file\",e);\n+            exceptions.add(new ImportException(\"Unexpected error creating temp file\", e));\n+            return;\n         }\n+        \n         try {\n             OutputStream os = new FileOutputStream(tempFile);\n             try {\n-                MarcPermissiveStreamReader reader = new MarcPermissiveStreamReader(\n-                    inputStream,\n-                    true,\n-                    true\n-                );\n                 MarcWriter writer = new MarcXmlWriter(os, true);\n-\n-                int count = 0;\n+                \n+                MarcPermissiveStreamReader reader = new MarcPermissiveStreamReader(\n+                    inputStream, true, true);\n                 while (reader.hasNext()) {\n                     Record record = reader.next();\n-                    if (skip <= 0) {\n-                        if (limit == -1 || count < limit) {\n-                            writer.write(record);\n-                            count++;\n-                        } else {\n-                            break;\n-                        }\n-                    } else {\n-                        skip--;\n-                    }\n+                    writer.write(record);\n                 }\n                 writer.close();\n             } finally {\n@@ -102,7 +90,8 @@ public void read(\n \n             InputStream is = new FileInputStream(tempFile);\n             try {\n-                new XmlImporter().read(is, project, metadata, options);\n+                super.parseOneFile(project, metadata, job, fileSource, inputStream,\n+                        rootColumnGroup, limit, options, exceptions);\n             } finally {\n                 try {\n                     is.close();\n@@ -111,31 +100,10 @@ public void read(\n                 }\n             }\n         } catch (FileNotFoundException e) {\n-            throw new ImportException(\"Input file not found\", e);\n+            exceptions.add(new ImportException(\"Input file not found\", e));\n+            return;\n         } finally {\n             tempFile.delete();\n         }\n     }\n-\n-    @Override\n-    public boolean canImportData(String contentType, String fileName) {\n-        if (contentType != null) {\n-            contentType = contentType.toLowerCase().trim();\n-\n-            if (\"application/marc\".equals(contentType)) {\n-                return true;\n-            }\n-        } else if (fileName != null) {\n-            fileName = fileName.toLowerCase();\n-            if (\n-                    fileName.endsWith(\".mrc\") ||\n-                    fileName.endsWith(\".marc\") ||\n-                    fileName.contains(\".mrc.\") ||\n-                    fileName.contains(\".marc.\")\n-                ) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n }"
        },
        {
            "sha": "cb0919729f8f2d2f2b64abd02d50c7dc2e8428eb",
            "filename": "main/src/com/google/refine/importers/RdfTripleImporter.java",
            "status": "modified",
            "additions": 25,
            "deletions": 37,
            "changes": 62,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FRdfTripleImporter.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FRdfTripleImporter.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FRdfTripleImporter.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -33,66 +33,74 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \r\n package com.google.refine.importers;\r\n \r\n-import java.io.IOException;\r\n import java.io.Reader;\r\n import java.util.ArrayList;\r\n import java.util.HashMap;\r\n import java.util.List;\r\n import java.util.Map;\r\n-import java.util.Properties;\r\n import java.util.Map.Entry;\r\n \r\n+import org.apache.commons.lang.NotImplementedException;\r\n import org.jrdf.JRDFFactory;\r\n import org.jrdf.SortedMemoryJRDFFactory;\r\n import org.jrdf.collection.MemMapFactory;\r\n import org.jrdf.graph.Graph;\r\n import org.jrdf.graph.Triple;\r\n-import org.jrdf.parser.ParseException;\r\n-import org.jrdf.parser.StatementHandlerException;\r\n import org.jrdf.parser.line.GraphLineParser;\r\n import org.jrdf.parser.line.LineHandler;\r\n import org.jrdf.parser.ntriples.NTriplesParserFactory;\r\n import org.jrdf.util.ClosableIterable;\r\n+import org.json.JSONObject;\r\n+\r\n import static org.jrdf.graph.AnyObjectNode.ANY_OBJECT_NODE;\r\n import static org.jrdf.graph.AnyPredicateNode.ANY_PREDICATE_NODE;\r\n import static org.jrdf.graph.AnySubjectNode.ANY_SUBJECT_NODE;\r\n \r\n import com.google.refine.ProjectMetadata;\r\n import com.google.refine.expr.ExpressionUtils;\r\n+import com.google.refine.importing.ImportingJob;\r\n import com.google.refine.model.Cell;\r\n import com.google.refine.model.Column;\r\n import com.google.refine.model.ModelException;\r\n import com.google.refine.model.Project;\r\n import com.google.refine.model.Row;\r\n+import com.google.refine.util.JSONUtilities;\r\n \r\n-public class RdfTripleImporter implements ReaderImporter{\r\n+public class RdfTripleImporter extends ImportingParserBase {\r\n     private JRDFFactory             _jrdfFactory;\r\n     private NTriplesParserFactory   _nTriplesParserFactory;\r\n     private MemMapFactory           _newMapFactory;\r\n \r\n-    public RdfTripleImporter(){\r\n+    public RdfTripleImporter() {\r\n+        super(false);\r\n         _jrdfFactory = SortedMemoryJRDFFactory.getFactory();\r\n         _nTriplesParserFactory = new NTriplesParserFactory();\r\n         _newMapFactory = new MemMapFactory();\r\n     }\r\n-\r\n+    \r\n     @Override\r\n-    public void read(Reader reader, Project project, ProjectMetadata metadata, Properties options) throws ImportException {\r\n-        String baseUrl = options.getProperty(\"base-url\");\r\n-\r\n+    public JSONObject createParserUIInitializationData(ImportingJob job,\r\n+            List<JSONObject> fileRecords, String format) {\r\n+        throw new NotImplementedException();\r\n+    }\r\n+    \r\n+    @Override\r\n+    public void parseOneFile(Project project, ProjectMetadata metadata,\r\n+            ImportingJob job, String fileSource, Reader reader, int limit,\r\n+            JSONObject options, List<Exception> exceptions) {\r\n+        \r\n+        String baseUrl = JSONUtilities.getString(options, \"baseUrl\", \"\");\r\n+        \r\n         Graph graph = _jrdfFactory.getNewGraph();\r\n         LineHandler lineHandler = _nTriplesParserFactory.createParser(graph, _newMapFactory);\r\n         GraphLineParser parser = new GraphLineParser(graph, lineHandler);\r\n         try {\r\n             parser.parse(reader, baseUrl); // fills JRDF graph\r\n-        } catch (IOException e) {\r\n-            throw new ImportException(\"i/o error while parsing RDF\",e);\r\n-        } catch (ParseException e) {\r\n-            throw new ImportException(\"error parsing RDF\",e);\r\n-        } catch (StatementHandlerException e) {\r\n-            throw new ImportException(\"error parsing RDF\",e);\r\n+        } catch (Exception e) {\r\n+            exceptions.add(e);\r\n+            return;\r\n         } \r\n-\r\n+        \r\n         Map<String, List<Row>> subjectToRows = new HashMap<String, List<Row>>();\r\n \r\n         Column subjectColumn = new Column(0, \"subject\");\r\n@@ -152,24 +160,4 @@ public void read(Reader reader, Project project, ProjectMetadata metadata, Prope\n             triples.iterator().close();\r\n         }\r\n     }\r\n-\r\n-    \r\n-    @Override\r\n-    public boolean canImportData(String contentType, String fileName) {\r\n-        if (contentType != null) {\r\n-            contentType = contentType.toLowerCase().trim();\r\n-\r\n-            if(\"application/rdf+xml\".equals(contentType)) {\r\n-                return true;\r\n-            }\r\n-        } else if (fileName != null) {\r\n-            fileName = fileName.toLowerCase();\r\n-            if (\r\n-                    fileName.endsWith(\".rdf\")) {\r\n-                return true;\r\n-            }\r\n-        }\r\n-        return false;\r\n-    }\r\n-\r\n }\r"
        },
        {
            "sha": "801d38751c81af8343ebdfca4257f5c0c4c27b49",
            "filename": "main/src/com/google/refine/importers/SeparatorBasedImporter.java",
            "status": "added",
            "additions": 245,
            "deletions": 0,
            "changes": 245,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FSeparatorBasedImporter.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FSeparatorBasedImporter.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FSeparatorBasedImporter.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,245 @@\n+/*\n+\n+Copyright 2010, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+package com.google.refine.importers;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.LineNumberReader;\n+import java.io.Reader;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.json.JSONObject;\n+\n+import au.com.bytecode.opencsv.CSVParser;\n+\n+import com.google.refine.ProjectMetadata;\n+import com.google.refine.importing.ImportingJob;\n+import com.google.refine.importing.ImportingUtilities;\n+import com.google.refine.model.Project;\n+import com.google.refine.util.JSONUtilities;\n+\n+public class SeparatorBasedImporter extends TabularImportingParserBase {\n+    public SeparatorBasedImporter() {\n+        super(false);\n+    }\n+    \n+    @Override\n+    public JSONObject createParserUIInitializationData(ImportingJob job,\n+            List<JSONObject> fileRecords, String format) {\n+        JSONObject options = super.createParserUIInitializationData(job, fileRecords, format);\n+        \n+        JSONUtilities.safePut(options, \"lineSeparator\", \"\\n\");\n+        \n+        String separator = guessSeparator(job, fileRecords);\n+        JSONUtilities.safePut(options, \"separator\", separator != null ? separator : \"\\t\");\n+        \n+        JSONUtilities.safePut(options, \"guessCellValueTypes\", true);\n+        JSONUtilities.safePut(options, \"processQuotes\", true);\n+\n+        return options;\n+    }\n+    \n+    @Override\n+    public void parseOneFile(\n+        Project project,\n+        ProjectMetadata metadata,\n+        ImportingJob job,\n+        String fileSource,\n+        Reader reader,\n+        int limit,\n+        JSONObject options,\n+        List<Exception> exceptions\n+    ) {\n+        // String lineSeparator = JSONUtilities.getString(options, \"lineSeparator\", \"\\n\");\n+        String sep = JSONUtilities.getString(options, \"separator\", \"\\t\");\n+        boolean processQuotes = JSONUtilities.getBoolean(options, \"processQuotes\", true);\n+        \n+        final CSVParser parser = new CSVParser(\n+            sep.toCharArray()[0],//HACK changing string to char - won't work for multi-char separators.\n+            CSVParser.DEFAULT_QUOTE_CHARACTER,\n+            (char) 0, // escape character\n+            CSVParser.DEFAULT_STRICT_QUOTES,\n+            CSVParser.DEFAULT_IGNORE_LEADING_WHITESPACE,\n+            !processQuotes);\n+        \n+        final LineNumberReader lnReader = new LineNumberReader(reader);\n+        \n+        TableDataReader dataReader = new TableDataReader() {\n+            long bytesRead = 0;\n+            \n+            @Override\n+            public List<Object> getNextRowOfCells() throws IOException {\n+                String line = lnReader.readLine();\n+                if (line == null) {\n+                    return null;\n+                } else {\n+                    bytesRead += line.length();\n+                    return getCells(line, parser, lnReader);\n+                }\n+            }\n+        };\n+        \n+        readTable(project, metadata, job, dataReader, fileSource, limit, options, exceptions);\n+    }\n+    \n+    static protected ArrayList<Object> getCells(String line, CSVParser parser, LineNumberReader lnReader)\n+        throws IOException{\n+        \n+        ArrayList<Object> cells = new ArrayList<Object>();\n+        String[] tokens = parser.parseLineMulti(line);\n+        for (String s : tokens){\n+            cells.add(s);\n+        }\n+        while (parser.isPending()) {\n+            tokens = parser.parseLineMulti(lnReader.readLine());\n+            for (String s : tokens) {\n+                cells.add(s);\n+            }\n+        }\n+        return cells;\n+    }\n+    \n+    static public String guessSeparator(ImportingJob job, List<JSONObject> fileRecords) {\n+        for (int i = 0; i < 5 && i < fileRecords.size(); i++) {\n+            JSONObject fileRecord = fileRecords.get(i);\n+            String encoding = ImportingUtilities.getEncoding(fileRecord);\n+            String location = JSONUtilities.getString(fileRecord, \"location\", null);\n+            \n+            if (location != null) {\n+                File file = new File(job.getRawDataDir(), location);\n+                Separator separator = guessSeparator(file, encoding);\n+                if (separator != null) {\n+                    return Character.toString(separator.separator);\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+    \n+    static public class Separator {\n+        char separator;\n+        int totalCount = 0;\n+        int totalOfSquaredCount = 0;\n+        int currentLineCount = 0;\n+        \n+        double averagePerLine;\n+        double stddev;\n+    }\n+    \n+    static public Separator guessSeparator(File file, String encoding) {\n+        try {\n+            InputStream is = new FileInputStream(file);\n+            try {\n+                Reader reader = encoding != null ? new InputStreamReader(is, encoding) : new InputStreamReader(is);\n+                LineNumberReader lineNumberReader = new LineNumberReader(reader);\n+                \n+                List<Separator> separators = new ArrayList<SeparatorBasedImporter.Separator>();\n+                Map<Character, Separator> separatorMap = new HashMap<Character, SeparatorBasedImporter.Separator>();\n+                \n+                int totalBytes = 0;\n+                int lineCount = 0;\n+                String s;\n+                while (totalBytes < 64 * 1024 &&\n+                       lineCount < 100 &&\n+                       (s = lineNumberReader.readLine()) != null) {\n+                    \n+                    totalBytes += s.length() + 1; // count the new line character\n+                    if (s.length() == 0) {\n+                        continue;\n+                    }\n+                    lineCount++;\n+                    \n+                    for (int i = 0; i < s.length(); i++) {\n+                        char c = s.charAt(i);\n+                        if (!Character.isLetterOrDigit(c) &&\n+                            !\"\\\"' .-\".contains(s.subSequence(i, i + 1))) {\n+                            Separator separator = separatorMap.get(c);\n+                            if (separator == null) {\n+                                separator = new Separator();\n+                                separator.separator = c;\n+                                \n+                                separatorMap.put(c, separator);\n+                                separators.add(separator);\n+                            }\n+                            separator.currentLineCount++;\n+                        }\n+                    }\n+                    \n+                    for (Separator separator : separators) {\n+                        separator.totalCount += separator.currentLineCount;\n+                        separator.totalOfSquaredCount += separator.currentLineCount * separator.currentLineCount;\n+                        separator.currentLineCount = 0;\n+                    }\n+                }\n+                \n+                if (separators.size() > 0) {\n+                    for (Separator separator : separators) {\n+                        separator.averagePerLine = separator.totalCount / (double) lineCount;\n+                        separator.stddev = Math.sqrt(\n+                            separator.totalOfSquaredCount / (double) lineCount -\n+                            separator.averagePerLine * separator.averagePerLine);\n+                    }\n+                    \n+                    Collections.sort(separators, new Comparator<Separator>() {\n+                        @Override\n+                        public int compare(Separator sep0, Separator sep1) {\n+                            return Double.compare(sep0.stddev, sep1.stddev);\n+                        }\n+                    });\n+                    for (Separator separator : separators) {\n+                        if (separator.stddev / separator.averagePerLine < 0.1) {\n+                            return separator;\n+                        }\n+                    }\n+                }\n+            } finally {\n+                is.close();\n+            }\n+        } catch (UnsupportedEncodingException e) {\n+            e.printStackTrace();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return null;\n+    }\n+}"
        },
        {
            "sha": "be4f10189970616ad0db2b154c7ee8bfafbec744",
            "filename": "main/src/com/google/refine/importers/TabularImportingParserBase.java",
            "status": "added",
            "additions": 205,
            "deletions": 0,
            "changes": 205,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FTabularImportingParserBase.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FTabularImportingParserBase.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FTabularImportingParserBase.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,205 @@\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+package com.google.refine.importers;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.json.JSONObject;\n+\n+import com.google.refine.ProjectMetadata;\n+import com.google.refine.expr.ExpressionUtils;\n+import com.google.refine.importing.ImportingJob;\n+import com.google.refine.model.Cell;\n+import com.google.refine.model.Column;\n+import com.google.refine.model.ModelException;\n+import com.google.refine.model.Project;\n+import com.google.refine.model.Row;\n+import com.google.refine.util.JSONUtilities;\n+\n+abstract public class TabularImportingParserBase extends ImportingParserBase {\n+    static public interface TableDataReader {\n+        public List<Object> getNextRowOfCells() throws IOException;\n+    }\n+    \n+    @Override\n+    public JSONObject createParserUIInitializationData(ImportingJob job,\n+            List<JSONObject> fileRecords, String format) {\n+        JSONObject options = new JSONObject();\n+        \n+        JSONUtilities.safePut(options, \"ignoreLines\", -1); // number of blank lines at the beginning to ignore\n+        JSONUtilities.safePut(options, \"headerLines\", 1); // number of header lines\n+        \n+        JSONUtilities.safePut(options, \"skipDataLines\", 0); // number of initial data lines to skip\n+        JSONUtilities.safePut(options, \"storeBlankRows\", true);\n+        JSONUtilities.safePut(options, \"storeBlankCellsAsNulls\", true);\n+        \n+        JSONUtilities.safePut(options, \"includeFileSources\", fileRecords.size() > 1);\n+        \n+        return options;\n+    }\n+    \n+    protected TabularImportingParserBase(boolean useInputStream) {\n+        super(useInputStream);\n+    }\n+    \n+    protected void readTable(\n+        Project project,\n+        ProjectMetadata metadata,\n+        ImportingJob job,\n+        TableDataReader reader,\n+        String fileSource,\n+        int limit,\n+        JSONObject options,\n+        List<Exception> exceptions\n+    ) {\n+        int ignoreLines = JSONUtilities.getInt(options, \"ignoreLines\", -1);\n+        int headerLines = JSONUtilities.getInt(options, \"headerLines\", 1);\n+        int skipDataLines = JSONUtilities.getInt(options, \"skipDataLines\", 0);\n+        int limit2 = JSONUtilities.getInt(options, \"limit\", -1);\n+        if (limit > 0) {\n+            if (limit2 > 0) {\n+                limit2 = Math.min(limit, limit2);\n+            } else {\n+                limit2 = limit;\n+            }\n+        }\n+        \n+        boolean guessCellValueTypes = JSONUtilities.getBoolean(options, \"guessCellValueTypes\", true);\n+        \n+        boolean storeBlankRows = JSONUtilities.getBoolean(options, \"storeBlankRows\", true);\n+        boolean storeBlankCellsAsNulls = JSONUtilities.getBoolean(options, \"storeBlankCellsAsNulls\", true);\n+        boolean includeFileSources = JSONUtilities.getBoolean(options, \"includeFileSources\", false);\n+        \n+        String fileNameColumnName = \"File\";\n+        if (includeFileSources) {\n+            if (project.columnModel.getColumnByName(fileNameColumnName) == null) {\n+                try {\n+                    project.columnModel.addColumn(\n+                        0, new Column(project.columnModel.allocateNewCellIndex(), fileNameColumnName), false);\n+                } catch (ModelException e) {\n+                    // Ignore: We already checked for duplicate name.\n+                }\n+            }\n+        }\n+        \n+        List<String> columnNames = new ArrayList<String>();\n+        \n+        List<Object> cells = null;\n+        int rowsWithData = 0;\n+        \n+        try {\n+            while (!job.canceled && (cells = reader.getNextRowOfCells()) != null) {\n+                if (ignoreLines > 0) {\n+                    ignoreLines--;\n+                    continue;\n+                }\n+                \n+                if (headerLines > 0) { // header lines\n+                    for (int c = 0; c < cells.size(); c++) {\n+                        Object cell = cells.get(c);\n+                        \n+                        String columnName;\n+                        if (cell == null) {\n+                            // add column even if cell is blank\n+                            columnName = \"\";\n+                        } else if (cell instanceof Cell) {\n+                            columnName = ((Cell) cell).value.toString().trim();\n+                        } else {\n+                            columnName = cell.toString().trim();\n+                        }\n+                        \n+                        ImporterUtilities.appendColumnName(columnNames, c, columnName);\n+                    }\n+                    \n+                    headerLines--;\n+                    if (headerLines == 0) {\n+                        ImporterUtilities.setupColumns(project, columnNames);\n+                    }\n+                } else { // data lines\n+                    Row row = new Row(columnNames.size());\n+                    \n+                    if (storeBlankRows) {\n+                        rowsWithData++;\n+                    } else if (cells.size() > 0) {\n+                        rowsWithData++;\n+                    }\n+                    \n+                    if (skipDataLines <= 0 || rowsWithData > skipDataLines) {\n+                        boolean rowHasData = false;\n+                        for (int c = 0; c < cells.size(); c++) {\n+                            Column column = ImporterUtilities.getOrAllocateColumn(project, columnNames, c);\n+                            \n+                            Object value = cells.get(c);\n+                            if (value != null && value instanceof Cell) {\n+                                row.setCell(column.getCellIndex(), (Cell) value);\n+                                rowHasData = true;\n+                            } else if (ExpressionUtils.isNonBlankData(value)) {\n+                                Serializable storedValue;\n+                                if (value instanceof String) {\n+                                    storedValue = guessCellValueTypes ?\n+                                        ImporterUtilities.parseCellValue((String) value) : (String) value;\n+                                } else {\n+                                    storedValue = ExpressionUtils.wrapStorable(value);\n+                                }\n+                                \n+                                row.setCell(column.getCellIndex(), new Cell(storedValue, null));\n+                                rowHasData = true;\n+                            } else if (!storeBlankCellsAsNulls) {\n+                                row.setCell(column.getCellIndex(), new Cell(\"\", null));\n+                            }\n+                        }\n+                        \n+                        if (rowHasData || storeBlankRows) {\n+                            if (includeFileSources) {\n+                                row.setCell(\n+                                    project.columnModel.getColumnByName(fileNameColumnName).getCellIndex(),\n+                                    new Cell(fileSource, null));\n+                            }\n+                            project.rows.add(row);\n+                        }\n+                        \n+                        if (limit2 > 0 && project.rows.size() >= limit2) {\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (IOException e) {\n+            exceptions.add(e);\n+        }\n+    }\n+}"
        },
        {
            "sha": "1c9551bb0b93872266a19aab404039f01ed128dc",
            "filename": "main/src/com/google/refine/importers/TextFormatGuesser.java",
            "status": "added",
            "additions": 63,
            "deletions": 0,
            "changes": 63,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FTextFormatGuesser.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FTextFormatGuesser.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FTextFormatGuesser.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,63 @@\n+package com.google.refine.importers;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.io.UnsupportedEncodingException;\n+import java.nio.CharBuffer;\n+\n+import com.google.refine.importing.FormatGuesser;\n+\n+public class TextFormatGuesser implements FormatGuesser {\n+\n+    @Override\n+    public String guess(File file, String encoding, String seedFormat) {\n+        try {\n+            InputStream is = new FileInputStream(file);\n+            try {\n+                Reader reader = encoding != null ? new InputStreamReader(is, encoding) : new InputStreamReader(is);\n+                \n+                int totalBytes = 0;\n+                int bytes;\n+                int lineBreaks = 0;\n+                \n+                CharBuffer charBuffer = CharBuffer.allocate(4096);\n+                while (totalBytes < 64 * 1024 && (bytes = reader.read(charBuffer)) > 0) {\n+                    lineBreaks += countSubstrings(charBuffer.toString(), \"\\n\");\n+                    \n+                    charBuffer.clear();\n+                    totalBytes += bytes;\n+                }\n+                \n+                if (lineBreaks > 3) {\n+                    return \"text/line-based\";\n+                }\n+            } finally {\n+                is.close();\n+            }\n+        } catch (UnsupportedEncodingException e) {\n+            e.printStackTrace();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return null;\n+    }\n+    \n+    static public int countSubstrings(String s, String sub) {\n+        int count = 0;\n+        int from = 0;\n+        while (from < s.length()) {\n+            int i = s.indexOf(sub, from);\n+            if (i < 0) {\n+                break;\n+            } else {\n+                from = i + sub.length();\n+                count++;\n+            }\n+        }\n+        return count;\n+    }\n+}"
        },
        {
            "sha": "a7f68ddb50157c181a1345c39ed0e2f253a5f7cb",
            "filename": "main/src/com/google/refine/importers/TsvCsvImporter.java",
            "status": "removed",
            "additions": 0,
            "deletions": 238,
            "changes": 238,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/0fa99d21cab6edf83360182fcf46cb4153e22c83/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FTsvCsvImporter.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/0fa99d21cab6edf83360182fcf46cb4153e22c83/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FTsvCsvImporter.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FTsvCsvImporter.java?ref=0fa99d21cab6edf83360182fcf46cb4153e22c83",
            "patch": "@@ -1,238 +0,0 @@\n-/*\n-\n-Copyright 2010, Google Inc.\n-All rights reserved.\n-\n-Redistribution and use in source and binary forms, with or without\n-modification, are permitted provided that the following conditions are\n-met:\n-\n-    * Redistributions of source code must retain the above copyright\n-notice, this list of conditions and the following disclaimer.\n-    * Redistributions in binary form must reproduce the above\n-copyright notice, this list of conditions and the following disclaimer\n-in the documentation and/or other materials provided with the\n-distribution.\n-    * Neither the name of Google Inc. nor the names of its\n-contributors may be used to endorse or promote products derived from\n-this software without specific prior written permission.\n-\n-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n-\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n-A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n-OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n-SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n-LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n-DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n-THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-\n-*/\n-\n-package com.google.refine.importers;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.io.LineNumberReader;\n-import java.io.Reader;\n-import java.io.Serializable;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Properties;\n-\n-import org.apache.commons.lang.StringUtils;\n-\n-import au.com.bytecode.opencsv.CSVParser;\n-\n-import com.google.refine.ProjectMetadata;\n-import com.google.refine.expr.ExpressionUtils;\n-import com.google.refine.model.Cell;\n-import com.google.refine.model.Project;\n-import com.google.refine.model.Row;\n-\n-public class TsvCsvImporter implements ReaderImporter,StreamImporter {\n-    \n-    @Override\n-    public void read(Reader reader, Project project, ProjectMetadata metadata, Properties options) throws ImportException {\n-        boolean splitIntoColumns = ImporterUtilities.getBooleanOption(\"split-into-columns\", options, true);\n-        \n-        String sep = options.getProperty(\"separator\"); // auto-detect if not present\n-        int ignoreLines = ImporterUtilities.getIntegerOption(\"ignore\", options, -1);\n-        int headerLines = ImporterUtilities.getIntegerOption(\"header-lines\", options, 1);\n-\n-        int limit = ImporterUtilities.getIntegerOption(\"limit\",options,-1);\n-        int skip = ImporterUtilities.getIntegerOption(\"skip\",options,0);\n-        boolean guessValueType = ImporterUtilities.getBooleanOption(\"guess-value-type\", options, true);\n-        boolean ignoreQuotes = ImporterUtilities.getBooleanOption(\"ignore-quotes\", options, false);\n-\n-        LineNumberReader lnReader = new LineNumberReader(reader);\n-        \n-        try {\n-            read(lnReader, project, sep,\n-                limit, skip, ignoreLines, headerLines,\n-                guessValueType, splitIntoColumns, ignoreQuotes\n-            );\n-        } catch (IOException e) {\n-            throw new ImportException(\"Import failed\",e);\n-        }\n-    }\n-\n-    /**\n-     *\n-     * @param lnReader\n-     *           LineNumberReader used to read file or string contents\n-     * @param project\n-     *           The project into which the parsed data will be added\n-     * @param sep\n-     *           The character used to denote different the break between data points\n-     * @param limit\n-     *           The maximum number of rows of data to import\n-     * @param skip\n-     *           The number of initial data rows to skip\n-     * @param ignoreLines\n-     *           The number of initial lines within the data source which should be ignored entirely\n-     * @param headerLines\n-     *           The number of lines in the data source which describe each column\n-     * @param guessValueType\n-     *           Whether the parser should try and guess the type of the value being parsed\n-     * @param splitIntoColumns\n-     *           Whether the parser should try and split the data source into columns\n-     * @param ignoreQuotes\n-     *           Quotation marks are ignored, and all separators and newlines treated as such regardless of whether they are within quoted values\n-     * @throws IOException\n-     */\n-    public void read(LineNumberReader lnReader, Project project, String sep, int limit, int skip, int ignoreLines, int headerLines, boolean guessValueType, boolean splitIntoColumns, boolean ignoreQuotes ) throws IOException{\n-        CSVParser parser = (sep != null && sep.length() > 0 && splitIntoColumns) ?\n-                        new CSVParser(sep.toCharArray()[0],//HACK changing string to char - won't work for multi-char separators.\n-                                CSVParser.DEFAULT_QUOTE_CHARACTER,\n-                                (char) 0, // escape character\n-                                CSVParser.DEFAULT_STRICT_QUOTES,\n-                                CSVParser.DEFAULT_IGNORE_LEADING_WHITESPACE,\n-                                ignoreQuotes) : null;\n-        List<String> columnNames = new ArrayList<String>();\n-        String line = null;\n-        int rowsWithData = 0;\n-\n-        while ((line = lnReader.readLine()) != null) {\n-            if (ignoreLines > 0) {\n-                ignoreLines--;\n-                continue;\n-            } else if (StringUtils.isBlank(line)) {\n-                continue;\n-            }\n-\n-            //guess separator\n-            if (parser == null) {\n-                int tab = line.indexOf('\\t');\n-                if (tab >= 0) {\n-                    parser = new CSVParser('\\t',\n-                            CSVParser.DEFAULT_QUOTE_CHARACTER,\n-                            (char) 0, // escape character\n-                            CSVParser.DEFAULT_STRICT_QUOTES,\n-                            CSVParser.DEFAULT_IGNORE_LEADING_WHITESPACE,\n-                            ignoreQuotes);\n-                } else {\n-                    parser = new CSVParser(',',\n-                            CSVParser.DEFAULT_QUOTE_CHARACTER,\n-                            (char) 0, // escape character\n-                            CSVParser.DEFAULT_STRICT_QUOTES,\n-                            CSVParser.DEFAULT_IGNORE_LEADING_WHITESPACE,\n-                            ignoreQuotes);\n-                }\n-            }\n-\n-\n-            if (headerLines > 0) {\n-                //column headers\n-                headerLines--;\n-\n-                ArrayList<String> cells = getCells(line, parser, lnReader, splitIntoColumns);\n-\n-                for (int c = 0; c < cells.size(); c++) {\n-                    String cell = cells.get(c).trim();\n-                    //add column even if cell is blank\n-                    ImporterUtilities.appendColumnName(columnNames, c, cell);\n-                }\n-            } else {\n-                //data\n-                Row row = new Row(columnNames.size());\n-\n-                ArrayList<String> cells = getCells(line, parser, lnReader, splitIntoColumns);\n-\n-                if( cells != null && cells.size() > 0 )\n-                    rowsWithData++;\n-\n-                if (skip <=0  || rowsWithData > skip){\n-                    //add parsed data to row\n-                    for(String s : cells){\n-                        if (ExpressionUtils.isNonBlankData(s)) {\n-                            Serializable value = guessValueType ? ImporterUtilities.parseCellValue(s) : s;\n-                            row.cells.add(new Cell(value, null));\n-                        }else{\n-                            row.cells.add(null);\n-                        }\n-                    }\n-                    project.rows.add(row);\n-                    project.columnModel.setMaxCellIndex(row.cells.size());\n-\n-                    ImporterUtilities.ensureColumnsInRowExist(columnNames, row);\n-\n-                    if (limit > 0 && project.rows.size() >= limit) {\n-                        break;\n-                    }\n-                }\n-            }\n-        }\n-\n-        ImporterUtilities.setupColumns(project, columnNames);\n-    }\n-\n-    protected ArrayList<String> getCells(String line, CSVParser parser, LineNumberReader lnReader, boolean splitIntoColumns) throws IOException{\n-        ArrayList<String> cells = new ArrayList<String>();\n-        if(splitIntoColumns){\n-            String[] tokens = parser.parseLineMulti(line);\n-            for(String s : tokens){\n-                cells.add(s);\n-            }\n-            while(parser.isPending()){\n-                tokens = parser.parseLineMulti(lnReader.readLine());\n-                for(String s : tokens){\n-                    cells.add(s);\n-                }\n-            }\n-        }else{\n-            cells.add(line);\n-        }\n-        return cells;\n-    }\n-\n-    @Override\n-    public void read(InputStream inputStream, Project project,\n-            ProjectMetadata metadata, Properties options) throws ImportException {\n-        read(new InputStreamReader(inputStream), project, metadata, options);\n-    }\n-\n-    @Override\n-    public boolean canImportData(String contentType, String fileName) {\n-        if (contentType != null) {\n-            contentType = contentType.toLowerCase().trim();\n-            return\n-                \"text/plain\".equals(contentType) ||\n-                \"text/csv\".equals(contentType) ||\n-                \"text/x-csv\".equals(contentType) ||\n-                \"text/tab-separated-value\".equals(contentType);\n-            \n-        } else if (fileName != null) {\n-            fileName = fileName.toLowerCase();\n-            if (fileName.endsWith(\".tsv\")) {\n-                return true;\n-            }else if (fileName.endsWith(\".csv\")){\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-}"
        },
        {
            "sha": "c86638ec379d09a971d28cc986b884ec59d826df",
            "filename": "main/src/com/google/refine/importers/XmlImporter.java",
            "status": "modified",
            "additions": 248,
            "deletions": 73,
            "changes": 321,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FXmlImporter.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FXmlImporter.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FXmlImporter.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -33,99 +33,274 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \n package com.google.refine.importers;\n \n-import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.io.PushbackInputStream;\n-import java.util.Properties;\n+import java.util.List;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import javax.servlet.ServletException;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLStreamConstants;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamReader;\n+\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n \n import com.google.refine.ProjectMetadata;\n-import com.google.refine.importers.TreeImportUtilities.ImportColumnGroup;\n-import com.google.refine.importers.parsers.TreeParser;\n-import com.google.refine.importers.parsers.XmlParser;\n+import com.google.refine.importers.tree.ImportColumnGroup;\n+import com.google.refine.importers.tree.TreeImportingParserBase;\n+import com.google.refine.importers.tree.TreeReader;\n+import com.google.refine.importing.ImportingJob;\n+import com.google.refine.importing.ImportingUtilities;\n import com.google.refine.model.Project;\n+import com.google.refine.util.JSONUtilities;\n \n-public class XmlImporter implements StreamImporter {\n-\n-    final static Logger logger = LoggerFactory.getLogger(\"XmlImporter\");\n-\n-    public static final int BUFFER_SIZE = 64 * 1024;\n-\n+public class XmlImporter extends TreeImportingParserBase {\n+    public XmlImporter() {\n+        super(true);\n+    }\n+    \n+    static private class PreviewParsingState {\n+        int tokenCount;\n+    }\n+    \n+    final static private int PREVIEW_PARSING_LIMIT = 1000;\n+    \n     @Override\n-    public void read(\n-        InputStream inputStream,\n-        Project project,\n-        ProjectMetadata metadata, Properties options\n-    ) throws ImportException {\n-        logger.trace(\"XmlImporter.read\");\n-        PushbackInputStream pis = new PushbackInputStream(inputStream,BUFFER_SIZE);\n+    public JSONObject createParserUIInitializationData(\n+            ImportingJob job, List<JSONObject> fileRecords, String format) {\n+        JSONObject options = super.createParserUIInitializationData(job, fileRecords, format);\n+        try {\n+            JSONObject firstFileRecord = fileRecords.get(0);\n+            File file = ImportingUtilities.getFile(job, firstFileRecord);\n+            InputStream is = new FileInputStream(file);\n+            try {\n+                XMLStreamReader parser = createXMLStreamReader(is);\n+                PreviewParsingState state = new PreviewParsingState();\n+                \n+                while (parser.hasNext() && state.tokenCount < PREVIEW_PARSING_LIMIT) {\n+                    int tokenType = parser.next();\n+                    state.tokenCount++;\n+                    if (tokenType == XMLStreamConstants.START_ELEMENT) {\n+                        JSONObject rootElement = descendElement(parser, state);\n+                        if (rootElement != null) {\n+                            JSONUtilities.safePut(options, \"dom\", rootElement);\n+                            break;\n+                        }\n+                    } else {\n+                        // ignore everything else\n+                    }\n+                }\n+            } finally {\n+                is.close();\n+            }\n+        } catch (XMLStreamException e) {\n+            // Ignore\n+        } catch (IOException e) {\n+            // Ignore\n+        }\n \n-        String[] recordPath = null;\n+        return options;\n+    }\n+    \n+    final static private JSONObject descendElement(XMLStreamReader parser, PreviewParsingState state) throws XMLStreamException {\n+        JSONObject result = new JSONObject();\n         {\n-            byte[] buffer = new byte[BUFFER_SIZE];\n-            int bytes_read = 0;\n-            try {//fill the buffer with data\n-                while (bytes_read < BUFFER_SIZE) {\n-                    int c = pis.read(buffer, bytes_read, BUFFER_SIZE - bytes_read);\n-                    if (c == -1) break;\n-                    bytes_read +=c ;\n+            String name = parser.getLocalName();\n+            JSONUtilities.safePut(result, \"n\", name);\n+            \n+            String prefix = parser.getPrefix();\n+            if (prefix != null) {\n+                JSONUtilities.safePut(result, \"p\", prefix);\n+            }\n+            String nsUri = parser.getNamespaceURI();\n+            if (nsUri != null) {\n+                JSONUtilities.safePut(result, \"uri\", nsUri);\n+            }\n+        }\n+        \n+        int namespaceCount = parser.getNamespaceCount();\n+        if (namespaceCount > 0) {\n+            JSONArray namespaces = new JSONArray();\n+            JSONUtilities.safePut(result, \"ns\", namespaces);\n+            \n+            for (int i = 0; i < namespaceCount; i++) {\n+                JSONObject namespace = new JSONObject();\n+                JSONUtilities.append(namespaces, namespace);\n+                JSONUtilities.safePut(namespace, \"p\", parser.getNamespacePrefix(i));\n+                JSONUtilities.safePut(namespace, \"uri\", parser.getNamespaceURI(i));\n+            }\n+        }\n+        \n+        int attributeCount = parser.getAttributeCount();\n+        if (attributeCount > 0) {\n+            JSONArray attributes = new JSONArray();\n+            JSONUtilities.safePut(result, \"a\", attributes);\n+            \n+            for (int i = 0; i < attributeCount; i++) {\n+                JSONObject attribute = new JSONObject();\n+                JSONUtilities.append(attributes, attribute);\n+                JSONUtilities.safePut(attribute, \"n\", parser.getAttributeLocalName(i));\n+                JSONUtilities.safePut(attribute, \"v\", parser.getAttributeValue(i));\n+                String prefix = parser.getAttributePrefix(i);\n+                if (prefix != null) {\n+                    JSONUtilities.safePut(attribute, \"p\", prefix);\n                 }\n-                pis.unread(buffer, 0, bytes_read);\n-            } catch (IOException e) {\n-                throw new ImportException(\"Read error\",e);\n             }\n-\n-            InputStream iStream = new ByteArrayInputStream(buffer, 0, bytes_read);\n-            TreeParser parser = new XmlParser(iStream);\n-            if (options.containsKey(\"importer-record-tag\")) {\n-                try{\n-                    recordPath = XmlImportUtilities.detectPathFromTag(\n-                        parser,\n-                        options.getProperty(\"importer-record-tag\"));\n-                }catch(Exception e){\n-                    // silent\n-                    // e.printStackTrace();\n+        }\n+        \n+        JSONArray children = new JSONArray();\n+        while (parser.hasNext() && state.tokenCount < PREVIEW_PARSING_LIMIT) {\n+            int tokenType = parser.next();\n+            state.tokenCount++;\n+            if (tokenType == XMLStreamConstants.END_ELEMENT) {\n+                break;\n+            } else if (tokenType == XMLStreamConstants.START_ELEMENT) {\n+                JSONObject childElement = descendElement(parser, state);\n+                if (childElement != null) {\n+                    JSONUtilities.append(children, childElement);\n                 }\n+            } else if (tokenType == XMLStreamConstants.CHARACTERS ||\n+                       tokenType == XMLStreamConstants.CDATA ||\n+                       tokenType == XMLStreamConstants.SPACE) {\n+                JSONObject childElement = new JSONObject();\n+                JSONUtilities.safePut(childElement, \"t\", parser.getText());\n+                JSONUtilities.append(children, childElement);\n             } else {\n-                recordPath = XmlImportUtilities.detectRecordElement(parser);\n+                // ignore everything else\n             }\n         }\n-\n-        if (recordPath == null)\n-            return;\n-\n-        ImportColumnGroup rootColumnGroup = new ImportColumnGroup();\n-        XmlImportUtilities.importTreeData(new XmlParser(pis), project, recordPath, rootColumnGroup);\n-        XmlImportUtilities.createColumnsFromImport(project, rootColumnGroup);\n-\n-        project.columnModel.update();\n+        \n+        if (children.length() > 0) {\n+            JSONUtilities.safePut(result, \"c\", children);\n+        }\n+        return result;\n     }\n-\n+    \n     @Override\n-    public boolean canImportData(String contentType, String fileName) {\n-        if (contentType != null) {\n-            contentType = contentType.toLowerCase().trim();\n-\n-            if(\"application/xml\".equals(contentType) ||\n-                      \"text/xml\".equals(contentType) ||\n-                      \"application/rss+xml\".equals(contentType) ||\n-                      \"application/atom+xml\".equals(contentType)) {\n-                return true;\n+    public void parseOneFile(Project project, ProjectMetadata metadata,\n+            ImportingJob job, String fileSource, InputStream inputStream,\n+            ImportColumnGroup rootColumnGroup, int limit, JSONObject options,\n+            List<Exception> exceptions) {\n+        \n+        try {\n+            parseOneFile(project, metadata, job, fileSource,\n+                new XmlParser(inputStream), rootColumnGroup, limit, options, exceptions);\n+        } catch (XMLStreamException e) {\n+            exceptions.add(e);\n+        }\n+    }\n+    \n+    static public class XmlParser implements TreeReader {\n+        final protected XMLStreamReader parser;\n+        \n+        public XmlParser(InputStream inputStream) throws XMLStreamException {\n+            parser = createXMLStreamReader(inputStream);\n+        }\n+        \n+        @Override\n+        public Token next() throws ServletException {\n+            try {\n+                if (!parser.hasNext()) {\n+                    throw new ServletException(\"End of XML stream\");\n+                }\n+            } catch (XMLStreamException e) {\n+                throw new ServletException(e);\n             }\n-        } else if (fileName != null) {\n-            fileName = fileName.toLowerCase();\n-            if (\n-                    fileName.endsWith(\".xml\") ||\n-                    fileName.endsWith(\".atom\") ||\n-                    fileName.endsWith(\".rss\")\n-                ) {\n-                return true;\n+            \n+            int currentToken = -1;\n+            try {\n+                currentToken = parser.next();\n+            } catch (XMLStreamException e) {\n+                throw new ServletException(e);\n+            }\n+            \n+            return mapToToken(currentToken);\n+        }\n+        \n+        protected Token mapToToken(int token) throws ServletException {\n+            switch(token){\n+                case XMLStreamConstants.START_ELEMENT: return Token.StartEntity;\n+                case XMLStreamConstants.END_ELEMENT: return Token.EndEntity;\n+                case XMLStreamConstants.CHARACTERS: return Token.Value;\n+                case XMLStreamConstants.START_DOCUMENT: return Token.Ignorable;\n+                case XMLStreamConstants.END_DOCUMENT: return Token.Ignorable;\n+                case XMLStreamConstants.SPACE: return Token.Value;\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: return Token.Ignorable;\n+                case XMLStreamConstants.NOTATION_DECLARATION: return Token.Ignorable;\n+                case XMLStreamConstants.NAMESPACE: return Token.Ignorable;\n+                case XMLStreamConstants.ENTITY_REFERENCE: return Token.Ignorable;\n+                case XMLStreamConstants.DTD: return Token.Ignorable;\n+                case XMLStreamConstants.COMMENT: return Token.Ignorable;\n+                case XMLStreamConstants.CDATA: return Token.Ignorable;\n+                case XMLStreamConstants.ATTRIBUTE: return Token.Ignorable;\n+                default:\n+                    return Token.Ignorable;\n+            }\n+        }\n+        \n+        @Override\n+        public Token current() throws ServletException{\n+            return this.mapToToken(parser.getEventType());\n+        }\n+        \n+        @Override\n+        public boolean hasNext() throws ServletException{\n+            try {\n+                return parser.hasNext();\n+            } catch (XMLStreamException e) {\n+                throw new ServletException(e);\n             }\n         }\n-        return false;\n+        \n+        @Override\n+        public String getFieldName() throws ServletException{\n+            try{\n+                return parser.getLocalName();\n+            }catch(IllegalStateException e){\n+                return null;\n+            }\n+        }\n+        \n+        @Override\n+        public String getPrefix(){\n+            return parser.getPrefix();\n+        }\n+        \n+        @Override\n+        public String getFieldValue(){\n+            return parser.getText();\n+        }\n+        \n+        @Override\n+        public int getAttributeCount(){\n+            return parser.getAttributeCount();\n+        }\n+        \n+        @Override\n+        public String getAttributeValue(int index){\n+            return parser.getAttributeValue(index);\n+        }\n+        \n+        @Override\n+        public String getAttributePrefix(int index){\n+            return parser.getAttributePrefix(index);\n+        }\n+        \n+        @Override\n+        public String getAttributeLocalName(int index){\n+            return parser.getAttributeLocalName(index);\n+        }\n     }\n-\n+    \n+    final static private XMLStreamReader createXMLStreamReader(InputStream inputStream) throws XMLStreamException {\n+        XMLInputFactory factory = XMLInputFactory.newInstance();\n+        factory.setProperty(XMLInputFactory.IS_COALESCING, true);\n+        factory.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, true);\n+        \n+        return factory.createXMLStreamReader(inputStream);\n+    }\n+    \n }"
        },
        {
            "sha": "11e506950c067af0981b77e8ecdf6f220ede6b05",
            "filename": "main/src/com/google/refine/importers/parsers/JSONParser.java",
            "status": "removed",
            "additions": 0,
            "deletions": 210,
            "changes": 210,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/0fa99d21cab6edf83360182fcf46cb4153e22c83/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Fparsers%2FJSONParser.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/0fa99d21cab6edf83360182fcf46cb4153e22c83/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Fparsers%2FJSONParser.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Fparsers%2FJSONParser.java?ref=0fa99d21cab6edf83360182fcf46cb4153e22c83",
            "patch": "@@ -1,210 +0,0 @@\n-/*\r\n-\r\n-Copyright 2010, Google Inc.\r\n-All rights reserved.\r\n-\r\n-Redistribution and use in source and binary forms, with or without\r\n-modification, are permitted provided that the following conditions are\r\n-met:\r\n-\r\n-    * Redistributions of source code must retain the above copyright\r\n-notice, this list of conditions and the following disclaimer.\r\n-    * Redistributions in binary form must reproduce the above\r\n-copyright notice, this list of conditions and the following disclaimer\r\n-in the documentation and/or other materials provided with the\r\n-distribution.\r\n-    * Neither the name of Google Inc. nor the names of its\r\n-contributors may be used to endorse or promote products derived from\r\n-this software without specific prior written permission.\r\n-\r\n-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n-\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n-A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n-OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n-SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n-LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \r\n-DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \r\n-THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n-\r\n-*/\r\n-\r\n-package com.google.refine.importers.parsers;\r\n-\r\n-import java.io.IOException;\r\n-import java.io.InputStream;\r\n-\r\n-import javax.servlet.ServletException;\r\n-import org.codehaus.jackson.JsonFactory;\r\n-import org.codehaus.jackson.JsonParseException;\r\n-import org.codehaus.jackson.JsonParser;\r\n-import org.codehaus.jackson.JsonToken;\r\n-import org.slf4j.Logger;\r\n-import org.slf4j.LoggerFactory;\r\n-\r\n-public class JSONParser implements TreeParser{\r\n-    final static Logger logger = LoggerFactory.getLogger(\"JsonParser\");\r\n-    \r\n-\tJsonFactory factory = new JsonFactory();\r\n-\tJsonParser parser = null;\r\n-\t\r\n-\t//The following is a workaround for inconsistent Jackson JsonParser\r\n-\tBoolean lastTokenWasAFieldNameAndCurrentTokenIsANewEntity = false;\r\n-\tBoolean thisTokenIsAFieldName = false;\r\n-\tString lastFieldName = null;\r\n-\t//end of workaround\r\n-\r\n-\tpublic JSONParser(InputStream inputStream){\r\n-\t\ttry {\r\n-\t\t\tparser = factory.createJsonParser(inputStream);\r\n-\t\t} catch (Exception e) {\r\n-\t\t\te.printStackTrace();\r\n-\t\t}\r\n-\t}\r\n-\t\r\n-\t/**\r\n-     * Does nothing. All Json is treated as elements\r\n-     */\r\n-\t@Override\r\n-\tpublic int getAttributeCount() {\r\n-\t\t// TODO Auto-generated method stub\r\n-\t\treturn 0;\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Does nothing. All Json is treated as elements\r\n-\t */\r\n-\t@Override\r\n-\tpublic String getAttributeLocalName(int index) {\r\n-\t\treturn null;\r\n-\t}\r\n-\r\n-\t/**\r\n-     * Does nothing. All Json is treated as elements\r\n-     */\r\n-\t@Override\r\n-\tpublic String getAttributePrefix(int index) {\r\n-\t\t// TODO Auto-generated method stub\r\n-\t\treturn null;\r\n-\t}\r\n-\r\n-\t/**\r\n-     * Does nothing. All Json is treated as elements\r\n-     */\r\n-\t@Override\r\n-\tpublic String getAttributeValue(int index) {\r\n-\t\t// TODO Auto-generated method stub\r\n-\t\treturn null;\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic TreeParserToken getEventType() throws ServletException {\r\n-\t\treturn this.mapToTreeParserToken(parser.getCurrentToken());\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic String getLocalName() throws ServletException{\r\n-\t\ttry {\r\n-\t\t    String text = parser.getCurrentName();\r\n-\t\t    \r\n-\t\t    //The following is a workaround for inconsistent Jackson JsonParser\r\n-\t\t    if(text == null){\r\n-\t\t        if(this.lastTokenWasAFieldNameAndCurrentTokenIsANewEntity) \r\n-\t\t            text = this.lastFieldName;\r\n-\t\t        else\r\n-\t\t            text = \"__anonymous__\";\r\n-\t\t    }\r\n-\t\t    //end of workaround\r\n-\t\t    \r\n-            return text;\r\n-        } catch (Exception e) {\r\n-            throw new ServletException(e);\r\n-        }\r\n-\t}\r\n-\r\n-\t/**\r\n-     * Does nothing. Json does not have prefixes\r\n-     */\r\n-\t@Override\r\n-\tpublic String getPrefix() {\r\n-\t\treturn null;\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic String getText() throws ServletException {\r\n-\t\ttry {\r\n-            return parser.getText();\r\n-        } catch (Exception e) {\r\n-            throw new ServletException(e);\r\n-        }\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic boolean hasNext() throws ServletException {\r\n-\t\treturn true; //FIXME fairly obtuse, is there a better way (advancing, then rewinding?)\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic TreeParserToken next() throws ServletException {\r\n-\t\tJsonToken next;\r\n-        try {\r\n-            next = parser.nextToken();\r\n-        } catch (JsonParseException e) {\r\n-            throw new ServletException(e);\r\n-        } catch (IOException e) {\r\n-            throw new ServletException(e);\r\n-        }\r\n-        \r\n-\t\tif(next == null)\r\n-\t\t    throw new ServletException(\"No more Json Tokens in stream\");\r\n-\t\t\r\n-\t\t//The following is a workaround for inconsistent Jackson JsonParser\r\n-\t\tif(next == JsonToken.FIELD_NAME){\r\n-\t\t    try {\r\n-\t\t        this.thisTokenIsAFieldName = true;\r\n-                this.lastFieldName = parser.getCurrentName();\r\n-            } catch (Exception e) {\r\n-                //silent\r\n-            }\r\n-\t\t}else if(next == JsonToken.START_ARRAY || next == JsonToken.START_OBJECT){\r\n-\t\t    if(this.thisTokenIsAFieldName){\r\n-\t\t        this.lastTokenWasAFieldNameAndCurrentTokenIsANewEntity = true;\r\n-\t\t        this.thisTokenIsAFieldName = false;\r\n-\t\t    }else{\r\n-\t\t        this.lastTokenWasAFieldNameAndCurrentTokenIsANewEntity = false;\r\n-\t\t        this.lastFieldName = null;\r\n-\t\t    }\r\n-\t\t}else{\r\n-\t\t    this.lastTokenWasAFieldNameAndCurrentTokenIsANewEntity = false;\r\n-\t\t    this.lastFieldName = null;\r\n-\t\t    this.thisTokenIsAFieldName = false;\r\n-\t\t}\r\n-\t\t//end of workaround\r\n-\t\t    \r\n-\t\treturn mapToTreeParserToken(next);\r\n-\t}\r\n-\t\r\n-\tprotected TreeParserToken mapToTreeParserToken(JsonToken token){\r\n-\t    switch(token){\r\n-            case START_ARRAY: return TreeParserToken.StartEntity;\r\n-            case END_ARRAY: return TreeParserToken.EndEntity;\r\n-            case START_OBJECT: return TreeParserToken.StartEntity;\r\n-            case END_OBJECT: return TreeParserToken.EndEntity;\r\n-            case VALUE_STRING: return TreeParserToken.Value;\r\n-            case FIELD_NAME: return TreeParserToken.Ignorable; //returned by the getLocalName function()\r\n-            case VALUE_NUMBER_INT: return TreeParserToken.Value;\r\n-            //Json does not have START_DOCUMENT token type (so ignored as default)\r\n-            //Json does not have END_DOCUMENT token type (so ignored as default)\r\n-            case VALUE_TRUE : return TreeParserToken.Value;\r\n-            case VALUE_NUMBER_FLOAT : return TreeParserToken.Value;\r\n-            case VALUE_NULL : return TreeParserToken.Value;\r\n-            case VALUE_FALSE : return TreeParserToken.Value;\r\n-            case VALUE_EMBEDDED_OBJECT : return TreeParserToken.Ignorable;\r\n-            case NOT_AVAILABLE : return TreeParserToken.Ignorable;\r\n-            default: return TreeParserToken.Ignorable;\r\n-        }\r\n-\t}\r\n-\r\n-}\r"
        },
        {
            "sha": "cac717c23cb5a403b13c4216d9640972343582cf",
            "filename": "main/src/com/google/refine/importers/parsers/NonSplitRowParser.java",
            "status": "removed",
            "additions": 0,
            "deletions": 70,
            "changes": 70,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/0fa99d21cab6edf83360182fcf46cb4153e22c83/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Fparsers%2FNonSplitRowParser.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/0fa99d21cab6edf83360182fcf46cb4153e22c83/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Fparsers%2FNonSplitRowParser.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Fparsers%2FNonSplitRowParser.java?ref=0fa99d21cab6edf83360182fcf46cb4153e22c83",
            "patch": "@@ -1,70 +0,0 @@\n-/*\n-\n-Copyright 2010, Google Inc.\n-All rights reserved.\n-\n-Redistribution and use in source and binary forms, with or without\n-modification, are permitted provided that the following conditions are\n-met:\n-\n-    * Redistributions of source code must retain the above copyright\n-notice, this list of conditions and the following disclaimer.\n-    * Redistributions in binary form must reproduce the above\n-copyright notice, this list of conditions and the following disclaimer\n-in the documentation and/or other materials provided with the\n-distribution.\n-    * Neither the name of Google Inc. nor the names of its\n-contributors may be used to endorse or promote products derived from\n-this software without specific prior written permission.\n-\n-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n-\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n-A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n-OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n-SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n-LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n-DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n-THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-\n-*/\n-\n-package com.google.refine.importers.parsers;\n-\n-import java.io.LineNumberReader;\n-import java.io.Serializable;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import com.google.refine.importers.ImporterUtilities;\n-import com.google.refine.model.Cell;\n-import com.google.refine.model.Row;\n-\n-public class NonSplitRowParser extends RowParser {\n-\n-    public List<String> split(String line, LineNumberReader lineReader) {\n-        List<String> results = new ArrayList<String>(1);\n-        \n-        results.add(line.trim());\n-        \n-        return results;\n-    }\n-    \n-    public boolean parseRow(Row row, String line, boolean guessValueType, LineNumberReader lineReader) {\n-        if (line.trim().isEmpty()) {\n-            return false;\n-        } else {\n-            Serializable value = guessValueType ? ImporterUtilities.parseCellValue(line) : line;\n-            if (value != null) {\n-                row.cells.add(new Cell(value, null));\n-                return true;\n-            } else {\n-                row.cells.add(null);\n-                return false;\n-            }\n-        }\n-    }    \n-    \n-}"
        },
        {
            "sha": "2b82d52e905f0b9482c6076b670915958eea7250",
            "filename": "main/src/com/google/refine/importers/parsers/SeparatorRowParser.java",
            "status": "removed",
            "additions": 0,
            "deletions": 85,
            "changes": 85,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/0fa99d21cab6edf83360182fcf46cb4153e22c83/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Fparsers%2FSeparatorRowParser.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/0fa99d21cab6edf83360182fcf46cb4153e22c83/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Fparsers%2FSeparatorRowParser.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Fparsers%2FSeparatorRowParser.java?ref=0fa99d21cab6edf83360182fcf46cb4153e22c83",
            "patch": "@@ -1,85 +0,0 @@\n-/*\n-\n-Copyright 2010, Google Inc.\n-All rights reserved.\n-\n-Redistribution and use in source and binary forms, with or without\n-modification, are permitted provided that the following conditions are\n-met:\n-\n-    * Redistributions of source code must retain the above copyright\n-notice, this list of conditions and the following disclaimer.\n-    * Redistributions in binary form must reproduce the above\n-copyright notice, this list of conditions and the following disclaimer\n-in the documentation and/or other materials provided with the\n-distribution.\n-    * Neither the name of Google Inc. nor the names of its\n-contributors may be used to endorse or promote products derived from\n-this software without specific prior written permission.\n-\n-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n-\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n-A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n-OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n-SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n-LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n-DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n-THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-\n-*/\n-\n-package com.google.refine.importers.parsers;\n-\n-import java.io.LineNumberReader;\n-import java.io.Serializable;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import org.apache.commons.lang.StringUtils;\n-\n-import com.google.refine.expr.ExpressionUtils;\n-import com.google.refine.importers.ImporterUtilities;\n-import com.google.refine.model.Cell;\n-import com.google.refine.model.Row;\n-\n-public class SeparatorRowParser extends RowParser {\n-\n-    String sep;\n-    \n-    public SeparatorRowParser(String sep) {\n-        this.sep = sep;\n-    }\n-    \n-    public List<String> split(String line, LineNumberReader lineReader) {\n-        String[] cells = StringUtils.splitPreserveAllTokens(line, sep);\n-        \n-        List<String> results = new ArrayList<String>();\n-        for (int c = 0; c < cells.length; c++) {\n-            results.add(cells[c]);\n-        }\n-        \n-        return results;\n-    }\n-    \n-    public boolean parseRow(Row row, String line, boolean guessValueType, LineNumberReader lineReader) {\n-        boolean hasData = false;\n-        \n-        String[] cells = StringUtils.splitPreserveAllTokens(line, sep);\n-        for (int c = 0; c < cells.length; c++) {\n-            String text = cells[c];\n-            \n-            Serializable value = guessValueType ? ImporterUtilities.parseCellValue(text) : text;\n-            if (ExpressionUtils.isNonBlankData(value)) {\n-                row.cells.add(new Cell(value, null));\n-                hasData = true;\n-            } else {\n-                row.cells.add(null);\n-            }\n-        }\n-        return hasData;\n-    }    \n-    \n-}"
        },
        {
            "sha": "7ab12a8ae344d9cf09551e06608c0ae97ae6dbc2",
            "filename": "main/src/com/google/refine/importers/parsers/XmlParser.java",
            "status": "removed",
            "additions": 0,
            "deletions": 160,
            "changes": 160,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/0fa99d21cab6edf83360182fcf46cb4153e22c83/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Fparsers%2FXmlParser.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/0fa99d21cab6edf83360182fcf46cb4153e22c83/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Fparsers%2FXmlParser.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Fparsers%2FXmlParser.java?ref=0fa99d21cab6edf83360182fcf46cb4153e22c83",
            "patch": "@@ -1,160 +0,0 @@\n-/*\r\n-\r\n-Copyright 2010, Google Inc.\r\n-All rights reserved.\r\n-\r\n-Redistribution and use in source and binary forms, with or without\r\n-modification, are permitted provided that the following conditions are\r\n-met:\r\n-\r\n-    * Redistributions of source code must retain the above copyright\r\n-notice, this list of conditions and the following disclaimer.\r\n-    * Redistributions in binary form must reproduce the above\r\n-copyright notice, this list of conditions and the following disclaimer\r\n-in the documentation and/or other materials provided with the\r\n-distribution.\r\n-    * Neither the name of Google Inc. nor the names of its\r\n-contributors may be used to endorse or promote products derived from\r\n-this software without specific prior written permission.\r\n-\r\n-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n-\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n-A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n-OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n-SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n-LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \r\n-DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \r\n-THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n-\r\n-*/\r\n-\r\n-package com.google.refine.importers.parsers;\r\n-\r\n-import java.io.InputStream;\r\n-\r\n-import javax.servlet.ServletException;\r\n-import javax.xml.stream.FactoryConfigurationError;\r\n-import javax.xml.stream.XMLInputFactory;\r\n-import javax.xml.stream.XMLStreamConstants;\r\n-import javax.xml.stream.XMLStreamException;\r\n-import javax.xml.stream.XMLStreamReader;\r\n-\r\n-import org.slf4j.Logger;\r\n-import org.slf4j.LoggerFactory;\r\n-\r\n-public class XmlParser implements TreeParser{\r\n-    final static Logger logger = LoggerFactory.getLogger(\"XmlParser\");\r\n-    \r\n-    XMLStreamReader parser = null;\r\n-    \r\n-    public XmlParser(InputStream inputStream){\r\n-        try {\r\n-            XMLInputFactory factory = XMLInputFactory.newInstance();\r\n-            factory.setProperty(XMLInputFactory.IS_COALESCING, true);\r\n-            factory.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, true);\r\n-            parser = factory.createXMLStreamReader(inputStream);\r\n-        } catch (XMLStreamException e) {\r\n-            // silent\r\n-            // e.printStackTrace();\r\n-        } catch (FactoryConfigurationError e) {\r\n-            // silent\r\n-            // e.printStackTrace();\r\n-        }\r\n-    }\r\n-    \r\n-    @Override\r\n-    public TreeParserToken next() throws ServletException{\r\n-        try {\r\n-            if(!parser.hasNext())\r\n-                throw new ServletException(\"End of XML stream\");\r\n-        } catch (XMLStreamException e) {\r\n-            throw new ServletException(e);\r\n-        }\r\n-        \r\n-        int currentToken = -1;\r\n-        try {\r\n-            currentToken = parser.next();\r\n-        } catch (XMLStreamException e) {\r\n-            throw new ServletException(e);\r\n-        }\r\n-        \r\n-        return mapToTreeParserToken(currentToken);\r\n-    }\r\n-    \r\n-    protected TreeParserToken mapToTreeParserToken(int token) throws ServletException {\r\n-        switch(token){\r\n-            case XMLStreamConstants.START_ELEMENT: return TreeParserToken.StartEntity;\r\n-            case XMLStreamConstants.END_ELEMENT: return TreeParserToken.EndEntity;\r\n-            case XMLStreamConstants.CHARACTERS: return TreeParserToken.Value;\r\n-            case XMLStreamConstants.START_DOCUMENT: return TreeParserToken.Ignorable;\r\n-            case XMLStreamConstants.END_DOCUMENT: return TreeParserToken.Ignorable;\r\n-            case XMLStreamConstants.SPACE: return TreeParserToken.Value;\r\n-            case XMLStreamConstants.PROCESSING_INSTRUCTION: return TreeParserToken.Ignorable;\r\n-            case XMLStreamConstants.NOTATION_DECLARATION: return TreeParserToken.Ignorable;\r\n-            case XMLStreamConstants.NAMESPACE: return TreeParserToken.Ignorable;\r\n-            case XMLStreamConstants.ENTITY_REFERENCE: return TreeParserToken.Ignorable;\r\n-            case XMLStreamConstants.DTD: return TreeParserToken.Ignorable;\r\n-            case XMLStreamConstants.COMMENT: return TreeParserToken.Ignorable;\r\n-            case XMLStreamConstants.CDATA: return TreeParserToken.Ignorable;\r\n-            case XMLStreamConstants.ATTRIBUTE: return TreeParserToken.Ignorable;\r\n-            default:\r\n-                return TreeParserToken.Ignorable;\r\n-        }\r\n-    }\r\n-    \r\n-    @Override\r\n-    public TreeParserToken getEventType() throws ServletException{\r\n-        return this.mapToTreeParserToken(parser.getEventType());\r\n-    }\r\n-    \r\n-    @Override\r\n-    public boolean hasNext() throws ServletException{\r\n-        try {\r\n-            return parser.hasNext();\r\n-        } catch (XMLStreamException e) {\r\n-            throw new ServletException(e);\r\n-        }\r\n-    }\r\n-    \r\n-    @Override\r\n-    public String getLocalName() throws ServletException{\r\n-        try{\r\n-            return parser.getLocalName();\r\n-        }catch(IllegalStateException e){\r\n-            return null;\r\n-        }\r\n-    }\r\n-    \r\n-    @Override\r\n-    public String getPrefix(){\r\n-        return parser.getPrefix();\r\n-    }\r\n-    \r\n-    @Override\r\n-    public String getText(){\r\n-        return parser.getText();\r\n-    }\r\n-    \r\n-    @Override\r\n-    public int getAttributeCount(){\r\n-        return parser.getAttributeCount();\r\n-    }\r\n-    \r\n-    @Override\r\n-    public String getAttributeValue(int index){\r\n-        return parser.getAttributeValue(index);\r\n-    }\r\n-    \r\n-    @Override\r\n-    public String getAttributePrefix(int index){\r\n-        return parser.getAttributePrefix(index);\r\n-    }\r\n-    \r\n-    @Override\r\n-    public String getAttributeLocalName(int index){\r\n-        return parser.getAttributeLocalName(index);\r\n-    }\r\n-}\r"
        },
        {
            "sha": "ec07a7ca450a15b894cb91af3d04fe8d209508fe",
            "filename": "main/src/com/google/refine/importers/tree/ImportColumn.java",
            "status": "added",
            "additions": 23,
            "deletions": 0,
            "changes": 23,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FImportColumn.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FImportColumn.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FImportColumn.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,23 @@\n+package com.google.refine.importers.tree;\n+\n+\n+/**\n+ * A column is used to describe a branch-terminating element in a tree structure\n+ *\n+ */\n+public class ImportColumn extends ImportVertical {\n+    public int      cellIndex;\n+    public int      nextRowIndex;\n+    public boolean  blankOnFirstRow;\n+\n+    public ImportColumn() {}\n+\n+    public ImportColumn(String name) { //required for testing\n+        super.name = name;\n+    }\n+\n+    @Override\n+    void tabulate() {\n+        // already done the tabulation elsewhere\n+    }\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "f25c5ba05612380451002bc41cdf1a2fe3593f46",
            "filename": "main/src/com/google/refine/importers/tree/ImportColumnGroup.java",
            "status": "added",
            "additions": 33,
            "deletions": 0,
            "changes": 33,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FImportColumnGroup.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FImportColumnGroup.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FImportColumnGroup.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,33 @@\n+package com.google.refine.importers.tree;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.commons.lang.StringUtils;\n+\n+/**\n+ * A column group describes a branch in tree structured data\n+ */\n+public class ImportColumnGroup extends ImportVertical {\n+    public Map<String, ImportColumnGroup> subgroups = new HashMap<String, ImportColumnGroup>();\n+    public Map<String, ImportColumn> columns = new HashMap<String, ImportColumn>();\n+    public int nextRowIndex;\n+\n+    @Override\n+    void tabulate() {\n+        for (ImportColumn c : columns.values()) {\n+            c.tabulate();\n+            nonBlankCount = Math.max(nonBlankCount, c.nonBlankCount);\n+        }\n+        for (ImportColumnGroup g : subgroups.values()) {\n+            g.tabulate();\n+            nonBlankCount = Math.max(nonBlankCount, g.nonBlankCount);\n+        }\n+    }\n+    \n+    public String toString() {\n+        return String.format(\"name=%s, columns={%s}, subgroups={{%s}}\",\n+                name,StringUtils.join(columns.keySet(), ','),\n+                StringUtils.join(subgroups.keySet(),','));\n+    }\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "78e8a646895273f8de0ce492a7aa9c702543abda",
            "filename": "main/src/com/google/refine/importers/tree/ImportRecord.java",
            "status": "added",
            "additions": 14,
            "deletions": 0,
            "changes": 14,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FImportRecord.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FImportRecord.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FImportRecord.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,14 @@\n+package com.google.refine.importers.tree;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import com.google.refine.model.Cell;\n+\n+/**\n+ * A record describes a data element in a tree-structure\n+ *\n+ */\n+public class ImportRecord {\n+    public List<List<Cell>> rows = new LinkedList<List<Cell>>();\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "ac16ec36c81f8543c25ad8276c4b6f40837d92e7",
            "filename": "main/src/com/google/refine/importers/tree/ImportVertical.java",
            "status": "added",
            "additions": 8,
            "deletions": 0,
            "changes": 8,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FImportVertical.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FImportVertical.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FImportVertical.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,8 @@\n+package com.google.refine.importers.tree;\n+\n+abstract class ImportVertical {\n+    public String name = \"\";\n+    public int nonBlankCount;\n+\n+    abstract void tabulate();\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "3be1b62c9b2583f5a639e6cb5ee9967fd567b937",
            "filename": "main/src/com/google/refine/importers/tree/RecordElementCandidate.java",
            "status": "added",
            "additions": 16,
            "deletions": 0,
            "changes": 16,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FRecordElementCandidate.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FRecordElementCandidate.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FRecordElementCandidate.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,16 @@\n+package com.google.refine.importers.tree;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * An element which holds sub-elements we\n+ * shall import as records\n+ */\n+class RecordElementCandidate {\n+    String[] path;\n+    int count;\n+    \n+    public String toString() {\n+        return Arrays.toString(path);\n+    }\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "38496519bb918113b0a40d59b00141aa412adced",
            "filename": "main/src/com/google/refine/importers/tree/TreeImportUtilities.java",
            "status": "renamed",
            "additions": 2,
            "deletions": 83,
            "changes": 85,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FTreeImportUtilities.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FTreeImportUtilities.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FTreeImportUtilities.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -31,106 +31,25 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \r\n */\r\n \r\n-package com.google.refine.importers;\r\n+package com.google.refine.importers.tree;\r\n \r\n import java.io.Serializable;\r\n import java.util.ArrayList;\r\n-import java.util.Arrays;\r\n import java.util.Collections;\r\n import java.util.Comparator;\r\n-import java.util.HashMap;\r\n-import java.util.LinkedList;\r\n import java.util.List;\r\n-import java.util.Map;\r\n \r\n-import org.apache.commons.lang.StringUtils;\r\n import org.slf4j.Logger;\r\n import org.slf4j.LoggerFactory;\r\n \r\n+import com.google.refine.importers.ImporterUtilities;\r\n import com.google.refine.model.Cell;\r\n import com.google.refine.model.Column;\r\n import com.google.refine.model.Project;\r\n \r\n public abstract class TreeImportUtilities {\r\n     final static Logger logger = LoggerFactory.getLogger(\"TreeImportUtilities\");\r\n \r\n-    /**\r\n-     * An element which holds sub-elements we\r\n-     * shall import as records\r\n-     */\r\n-    static protected class RecordElementCandidate {\r\n-        String[] path;\r\n-        int count;\r\n-        \r\n-        public String toString() {\r\n-            return Arrays.toString(path);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    static protected abstract class ImportVertical {\r\n-        public String name = \"\";\r\n-        public int nonBlankCount;\r\n-\r\n-        abstract void tabulate();\r\n-    }\r\n-\r\n-    /**\r\n-     * A column group describes a branch in tree structured data\r\n-     */\r\n-    static public class ImportColumnGroup extends ImportVertical {\r\n-        public Map<String, ImportColumnGroup> subgroups = new HashMap<String, ImportColumnGroup>();\r\n-        public Map<String, ImportColumn> columns = new HashMap<String, ImportColumn>();\r\n-        public int nextRowIndex;\r\n-\r\n-        @Override\r\n-        void tabulate() {\r\n-            for (ImportColumn c : columns.values()) {\r\n-                c.tabulate();\r\n-                nonBlankCount = Math.max(nonBlankCount, c.nonBlankCount);\r\n-            }\r\n-            for (ImportColumnGroup g : subgroups.values()) {\r\n-                g.tabulate();\r\n-                nonBlankCount = Math.max(nonBlankCount, g.nonBlankCount);\r\n-            }\r\n-        }\r\n-        \r\n-        public String toString() {\r\n-            return String.format(\"name=%s, columns={%s}, subgroups={{%s}}\",\r\n-                    name,StringUtils.join(columns.keySet(), ','),\r\n-                    StringUtils.join(subgroups.keySet(),','));\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * A column is used to describe a branch-terminating element in a tree structure\r\n-     *\r\n-     */\r\n-    static public class ImportColumn extends ImportVertical {\r\n-        public int      cellIndex;\r\n-        public int      nextRowIndex;\r\n-        public boolean  blankOnFirstRow;\r\n-\r\n-        public ImportColumn() {}\r\n-\r\n-        public ImportColumn(String name) { //required for testing\r\n-            super.name = name;\r\n-        }\r\n-\r\n-        @Override\r\n-        void tabulate() {\r\n-            // already done the tabulation elsewhere\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * A record describes a data element in a tree-structure\r\n-     *\r\n-     */\r\n-    static public class ImportRecord {\r\n-        public List<List<Cell>> rows = new LinkedList<List<Cell>>();\r\n-    }\r\n-\r\n     static protected void sortRecordElementCandidates(List<RecordElementCandidate> list) {\r\n         Collections.sort(list, new Comparator<RecordElementCandidate>() {\r\n             public int compare(RecordElementCandidate o1, RecordElementCandidate o2) {\r",
            "previous_filename": "main/src/com/google/refine/importers/TreeImportUtilities.java"
        },
        {
            "sha": "3bbdb0f1b5822c14966cbaf7d6f791bb1c1349fa",
            "filename": "main/src/com/google/refine/importers/tree/TreeImportingParserBase.java",
            "status": "added",
            "additions": 169,
            "deletions": 0,
            "changes": 169,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FTreeImportingParserBase.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FTreeImportingParserBase.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FTreeImportingParserBase.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,169 @@\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+package com.google.refine.importers.tree;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.util.List;\n+\n+import org.apache.commons.lang.NotImplementedException;\n+import org.json.JSONObject;\n+\n+import com.google.refine.ProjectMetadata;\n+import com.google.refine.importers.ImporterUtilities;\n+import com.google.refine.importers.ImporterUtilities.MultiFileReadingProgress;\n+import com.google.refine.importing.ImportingJob;\n+import com.google.refine.importing.ImportingParser;\n+import com.google.refine.importing.ImportingUtilities;\n+import com.google.refine.model.Project;\n+import com.google.refine.util.JSONUtilities;\n+\n+abstract public class TreeImportingParserBase implements ImportingParser {\n+    final protected boolean useInputStream;\n+    \n+    protected TreeImportingParserBase(boolean useInputStream) {\n+        this.useInputStream = useInputStream;\n+    }\n+    \n+    @Override\n+    public JSONObject createParserUIInitializationData(ImportingJob job,\n+            List<JSONObject> fileRecords, String format) {\n+        JSONObject options = new JSONObject();\n+        return options;\n+    }\n+    \n+    @Override\n+    public void parse(Project project, ProjectMetadata metadata,\n+            ImportingJob job, List<JSONObject> fileRecords, String format,\n+            int limit, JSONObject options, List<Exception> exceptions) {\n+        \n+        MultiFileReadingProgress progress = ImporterUtilities.createMultiFileReadingProgress(job, fileRecords);\n+        ImportColumnGroup rootColumnGroup = new ImportColumnGroup();\n+        \n+        for (JSONObject fileRecord : fileRecords) {\n+            try {\n+                parseOneFile(project, metadata, job, fileRecord, rootColumnGroup, limit, options, exceptions, progress);\n+            } catch (IOException e) {\n+                exceptions.add(e);\n+            }\n+            \n+            if (limit > 0 && project.rows.size() >= limit) {\n+                break;\n+            }\n+        }\n+        \n+        XmlImportUtilities.createColumnsFromImport(project, rootColumnGroup);\n+        project.columnModel.update();\n+    }\n+    \n+    public void parseOneFile(\n+        Project project,\n+        ProjectMetadata metadata,\n+        ImportingJob job,\n+        JSONObject fileRecord,\n+        ImportColumnGroup rootColumnGroup,\n+        int limit,\n+        JSONObject options,\n+        List<Exception> exceptions,\n+        final MultiFileReadingProgress progress\n+    ) throws IOException {\n+        final File file = ImportingUtilities.getFile(job, fileRecord);\n+        final String fileSource = ImportingUtilities.getFileSource(fileRecord);\n+        \n+        progress.startFile(fileSource);\n+        try {\n+            InputStream inputStream = ImporterUtilities.openAndTrackFile(fileSource, file, progress);\n+            try {\n+                if (useInputStream) {\n+                    parseOneFile(project, metadata, job, fileSource, inputStream,\n+                            rootColumnGroup, limit, options, exceptions);\n+                } else {\n+                    Reader reader = ImportingUtilities.getFileReader(file, fileRecord);\n+                    parseOneFile(project, metadata, job, fileSource, reader,\n+                            rootColumnGroup, limit, options, exceptions);\n+                }\n+            } finally {\n+                inputStream.close();\n+            }\n+        } finally {\n+            progress.endFile(fileSource, file.length());\n+        }\n+    }\n+    \n+    public void parseOneFile(\n+        Project project,\n+        ProjectMetadata metadata,\n+        ImportingJob job,\n+        String fileSource,\n+        Reader reader,\n+        ImportColumnGroup rootColumnGroup,\n+        int limit,\n+        JSONObject options,\n+        List<Exception> exceptions\n+    ) {\n+        throw new NotImplementedException();\n+    }\n+    \n+    public void parseOneFile(\n+        Project project,\n+        ProjectMetadata metadata,\n+        ImportingJob job,\n+        String fileSource,\n+        InputStream inputStream,\n+        ImportColumnGroup rootColumnGroup,\n+        int limit,\n+        JSONObject options,\n+        List<Exception> exceptions\n+    ) {\n+        throw new NotImplementedException();\n+    }\n+    \n+    protected void parseOneFile(\n+        Project project,\n+        ProjectMetadata metadata,\n+        ImportingJob job,\n+        String fileSource,\n+        TreeReader treeParser,\n+        ImportColumnGroup rootColumnGroup,\n+        int limit,\n+        JSONObject options,\n+        List<Exception> exceptions\n+    ) {\n+        String[] recordPath = JSONUtilities.getStringArray(options, \"recordPath\");\n+        \n+        XmlImportUtilities.importTreeData(treeParser, project, recordPath, rootColumnGroup, limit);\n+    }\n+}"
        },
        {
            "sha": "732f89558e0ed50f63b3314b0a8f37b52166f372",
            "filename": "main/src/com/google/refine/importers/tree/TreeReader.java",
            "status": "renamed",
            "additions": 19,
            "deletions": 10,
            "changes": 29,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FTreeReader.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FTreeReader.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FTreeReader.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -31,17 +31,26 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \r\n */\r\n \r\n-package com.google.refine.importers.parsers;\r\n-\r\n-import javax.servlet.ServletException;\r\n-\r\n-public interface TreeParser {\r\n-    public TreeParserToken next() throws ServletException;\r\n-    public TreeParserToken getEventType() throws ServletException; //aka getCurrentToken\r\n-    public boolean hasNext() throws ServletException;\r\n-    public String getLocalName() throws ServletException; //aka getFieldName\r\n+package com.google.refine.importers.tree;\r\n+\r\n+public interface TreeReader {\r\n+    public enum Token {\r\n+        Ignorable,\r\n+        StartEntity,\r\n+        EndEntity,\r\n+        Value\r\n+        //append additional tokens only if necessary (most should be just mapped to Value or Ignorable)\r\n+    }\r\n+\r\n+    public Token current() throws Exception; //aka getCurrentToken\r\n+    \r\n+    public boolean hasNext() throws Exception;\r\n+    public Token next() throws Exception;\r\n+    \r\n+    public String getFieldName() throws Exception; //aka getFieldName\r\n     public String getPrefix();\r\n-    public String getText() throws ServletException;\r\n+    public String getFieldValue() throws Exception;\r\n+    \r\n     public int getAttributeCount();\r\n     public String getAttributeValue(int index);\r\n     public String getAttributePrefix(int index);\r",
            "previous_filename": "main/src/com/google/refine/importers/parsers/TreeParser.java"
        },
        {
            "sha": "9832cabc48be70333f3586ce269b8c24489b5453",
            "filename": "main/src/com/google/refine/importers/tree/XmlImportUtilities.java",
            "status": "renamed",
            "additions": 67,
            "deletions": 69,
            "changes": 136,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FXmlImportUtilities.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FXmlImportUtilities.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FXmlImportUtilities.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \n */\n \n-package com.google.refine.importers;\n+package com.google.refine.importers.tree;\n \n import java.util.ArrayList;\n import java.util.HashMap;\n@@ -40,25 +40,22 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import java.util.Map;\n import java.util.Map.Entry;\n \n-import javax.servlet.ServletException;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.google.refine.importers.parsers.TreeParser;\n-import com.google.refine.importers.parsers.TreeParserToken;\n+import com.google.refine.importers.tree.TreeReader.Token;\n import com.google.refine.model.Cell;\n import com.google.refine.model.Project;\n import com.google.refine.model.Row;\n \n public class XmlImportUtilities extends TreeImportUtilities {\n     final static Logger logger = LoggerFactory.getLogger(\"XmlImportUtilities\");\n \n-    static public String[] detectPathFromTag(TreeParser parser, String tag) {\n+    static public String[] detectPathFromTag(TreeReader parser, String tag) {\n         try {\n             while (parser.hasNext()) {\n-                TreeParserToken eventType = parser.next();\n-                if (eventType == TreeParserToken.StartEntity) {//XMLStreamConstants.START_ELEMENT) {\n+                Token eventType = parser.next();\n+                if (eventType == Token.StartEntity) {//XMLStreamConstants.START_ELEMENT) {\n                     List<String> path = detectRecordElement(parser, tag);\n                     if (path != null) {\n                         String[] path2 = new String[path.size()];\n@@ -90,33 +87,33 @@ static public String[] detectPathFromTag(TreeParser parser, String tag) {\n      *         null if the the tag is not found.\n      * @throws ServletException\n      */\n-    static protected List<String> detectRecordElement(TreeParser parser, String tag) throws ServletException {\n+    static protected List<String> detectRecordElement(TreeReader parser, String tag) throws Exception {\n         try{\n-            if(parser.getEventType() == TreeParserToken.Ignorable)//XMLStreamConstants.START_DOCUMENT)\n+            if(parser.current() == Token.Ignorable)//XMLStreamConstants.START_DOCUMENT)\n                 parser.next();\n \n-            String localName = parser.getLocalName();\n+            String localName = parser.getFieldName();\n             String fullName = composeName(parser.getPrefix(), localName);\n-            if (tag.equals(parser.getLocalName()) || tag.equals(fullName)) {\n+            if (tag.equals(parser.getFieldName()) || tag.equals(fullName)) {\n                 List<String> path = new LinkedList<String>();\n                 path.add(localName);\n \n                 return path;\n             }\n \n             while (parser.hasNext()) {\n-                TreeParserToken eventType = parser.next();\n-                if (eventType == TreeParserToken.EndEntity) {//XMLStreamConstants.END_ELEMENT) {\n+                Token eventType = parser.next();\n+                if (eventType == Token.EndEntity) {//XMLStreamConstants.END_ELEMENT) {\n                     break;\n-                } else if (eventType == TreeParserToken.StartEntity) {//XMLStreamConstants.START_ELEMENT) {\n+                } else if (eventType == Token.StartEntity) {//XMLStreamConstants.START_ELEMENT) {\n                     List<String> path = detectRecordElement(parser, tag);\n                     if (path != null) {\n                         path.add(0, localName);\n                         return path;\n                     }\n                 }\n             }\n-        }catch(ServletException e){\n+        } catch (Exception e) {\n             // silent\n             // e.printStackTrace();\n         }\n@@ -136,18 +133,18 @@ static protected String composeName(String prefix, String localName) {\n      *              The path to the most numerous of the possible candidates.\n      *              null if no candidates were found (less than 6 recurrences)\n      */\n-    static public String[] detectRecordElement(TreeParser parser) {\n+    static public String[] detectRecordElement(TreeReader parser) {\n         logger.trace(\"detectRecordElement(inputStream)\");\n         List<RecordElementCandidate> candidates = new ArrayList<RecordElementCandidate>();\n \n         try {\n             while (parser.hasNext()) {\n-                TreeParserToken eventType = parser.next();\n-                if (eventType == TreeParserToken.StartEntity) {\n+                Token eventType = parser.next();\n+                if (eventType == Token.StartEntity) {\n                     RecordElementCandidate candidate =\n                         detectRecordElement(\n                             parser,\n-                            new String[] { parser.getLocalName() });\n+                            new String[] { parser.getFieldName() });\n \n                     if (candidate != null) {\n                         candidates.add(candidate);\n@@ -168,8 +165,8 @@ static public String[] detectRecordElement(TreeParser parser) {\n         return null;\n     }\n \n-    static protected RecordElementCandidate detectRecordElement(TreeParser parser, String[] path) {\n-        logger.trace(\"detectRecordElement(TreeParser, String[])\");\n+    static protected RecordElementCandidate detectRecordElement(TreeReader parser, String[] path) {\n+        logger.trace(\"detectRecordElement(TreeReader, String[])\");\n         List<RecordElementCandidate> descendantCandidates = new ArrayList<RecordElementCandidate>();\n \n         Map<String, Integer> immediateChildCandidateMap = new HashMap<String, Integer>();\n@@ -178,21 +175,21 @@ static protected RecordElementCandidate detectRecordElement(TreeParser parser, S\n \n         try {\n             while (parser.hasNext()) {\n-                TreeParserToken eventType = parser.next();\n-                if (eventType == TreeParserToken.EndEntity ) {\n+                Token eventType = parser.next();\n+                if (eventType == Token.EndEntity ) {\n                     break;\n-                } else if (eventType == TreeParserToken.Value) {\n+                } else if (eventType == Token.Value) {\n                     try{\n-                        if (parser.getText().trim().length() > 0) {\n+                        if (parser.getFieldValue().trim().length() > 0) {\n                             textNodeCount++;\n                         }\n                     }catch(Exception e){\n                         //silent\n                     }\n-                } else if (eventType == TreeParserToken.StartEntity) {\n+                } else if (eventType == Token.StartEntity) {\n                     childElementNodeCount++;\n \n-                    String tagName = parser.getLocalName();\n+                    String tagName = parser.getFieldName();\n \n                     immediateChildCandidateMap.put(\n                         tagName,\n@@ -261,17 +258,18 @@ static protected RecordElementCandidate detectRecordElement(TreeParser parser, S\n \n \n     static public void importTreeData(\n-        TreeParser parser,\n+        TreeReader parser,\n         Project project,\n         String[] recordPath,\n-        ImportColumnGroup rootColumnGroup\n+        ImportColumnGroup rootColumnGroup,\n+        int limit\n     ) {\n-        logger.trace(\"importTreeData(TreeParser, Project, String[], ImportColumnGroup)\");\n+        logger.trace(\"importTreeData(TreeReader, Project, String[], ImportColumnGroup)\");\n         try {\n-            while (parser.hasNext()) {\n-                TreeParserToken eventType = parser.next();\n-                if (eventType == TreeParserToken.StartEntity) {\n-                    findRecord(project, parser, recordPath, 0, rootColumnGroup);\n+            while (parser.hasNext() && (limit <= 0 || project.rows.size() < limit)) {\n+                Token eventType = parser.next();\n+                if (eventType == Token.StartEntity) {\n+                    findRecord(project, parser, recordPath, 0, rootColumnGroup, limit);\n                 }\n             }\n         } catch (Exception e) {\n@@ -292,26 +290,30 @@ static public void importTreeData(\n      */\n     static protected void findRecord(\n         Project project,\n-        TreeParser parser,\n+        TreeReader parser,\n         String[] recordPath,\n         int pathIndex,\n-        ImportColumnGroup rootColumnGroup\n-    ) throws ServletException {\n-        logger.trace(\"findRecord(Project, TreeParser, String[], int, ImportColumnGroup\");\n+        ImportColumnGroup rootColumnGroup,\n+        int limit\n+    ) throws Exception {\n+        logger.trace(\"findRecord(Project, TreeReader, String[], int, ImportColumnGroup\");\n         \n-        if(parser.getEventType() == TreeParserToken.Ignorable){//XMLStreamConstants.START_DOCUMENT){\n+        if(parser.current() == Token.Ignorable){//XMLStreamConstants.START_DOCUMENT){\n             logger.warn(\"Cannot use findRecord method for START_DOCUMENT event\");\n             return;\n         }\n         \n-        String tagName = parser.getLocalName();\n-        if (tagName.equals(recordPath[pathIndex])) {\n+        String recordPathSegment = recordPath[pathIndex];\n+        \n+        String localName = parser.getFieldName();\n+        String fullName = composeName(parser.getPrefix(), localName);\n+        if (recordPathSegment.equals(localName) || recordPathSegment.equals(fullName)) {\n             if (pathIndex < recordPath.length - 1) {\n-                while (parser.hasNext()) {\n-                    TreeParserToken eventType = parser.next();\n-                    if (eventType == TreeParserToken.StartEntity) {\n-                        findRecord(project, parser, recordPath, pathIndex + 1, rootColumnGroup);\n-                    } else if (eventType == TreeParserToken.EndEntity ) {\n+                while (parser.hasNext() && (limit <= 0 || project.rows.size() < limit)) {\n+                    Token eventType = parser.next();\n+                    if (eventType == Token.StartEntity) {\n+                        findRecord(project, parser, recordPath, pathIndex + 1, rootColumnGroup, limit);\n+                    } else if (eventType == Token.EndEntity ) {\n                         break;\n                     }\n                 }\n@@ -323,12 +325,12 @@ static protected void findRecord(\n         }\n     }\n \n-    static protected void skip(TreeParser parser) throws ServletException {\n+    static protected void skip(TreeReader parser) throws Exception {\n         while (parser.hasNext()) {\n-            TreeParserToken eventType = parser.next();\n-            if (eventType == TreeParserToken.StartEntity) {//XMLStreamConstants.START_ELEMENT) {\n+            Token eventType = parser.next();\n+            if (eventType == Token.StartEntity) {//XMLStreamConstants.START_ELEMENT) {\n                 skip(parser);\n-            } else if (eventType == TreeParserToken.EndEntity) { //XMLStreamConstants.END_ELEMENT) {\n+            } else if (eventType == Token.EndEntity) { //XMLStreamConstants.END_ELEMENT) {\n                 return;\n             }\n         }\n@@ -344,10 +346,10 @@ static protected void skip(TreeParser parser) throws ServletException {\n      */\n     static protected void processRecord(\n         Project project,\n-        TreeParser parser,\n+        TreeReader parser,\n         ImportColumnGroup rootColumnGroup\n-    ) throws ServletException {\n-        logger.trace(\"processRecord(Project,TreeParser,ImportColumnGroup)\");\n+    ) throws Exception {\n+        logger.trace(\"processRecord(Project,TreeReader,ImportColumnGroup)\");\n         ImportRecord record = new ImportRecord();\n \n         processSubRecord(project, parser, rootColumnGroup, record);\n@@ -382,19 +384,19 @@ static protected void processRecord(\n      */\n     static protected void processSubRecord(\n         Project project,\n-        TreeParser parser,\n+        TreeReader parser,\n         ImportColumnGroup columnGroup,\n         ImportRecord record\n-    ) throws ServletException {\n-        logger.trace(\"processSubRecord(Project,TreeParser,ImportColumnGroup,ImportRecord)\");\n+    ) throws Exception {\n+        logger.trace(\"processSubRecord(Project,TreeReader,ImportColumnGroup,ImportRecord)\");\n         \n-        if(parser.getEventType() == TreeParserToken.Ignorable)\n+        if(parser.current() == Token.Ignorable)\n             return;\n         \n         ImportColumnGroup thisColumnGroup = getColumnGroup(\n                     project,\n                     columnGroup,\n-                    composeName(parser.getPrefix(), parser.getLocalName()));\n+                    composeName(parser.getPrefix(), parser.getFieldName()));\n         \n         thisColumnGroup.nextRowIndex = Math.max(thisColumnGroup.nextRowIndex, columnGroup.nextRowIndex);\n         \n@@ -413,18 +415,18 @@ static protected void processSubRecord(\n         }\n \n         while (parser.hasNext()) {\n-            TreeParserToken eventType = parser.next();\n-            if (eventType == TreeParserToken.StartEntity) {\n+            Token eventType = parser.next();\n+            if (eventType == Token.StartEntity) {\n                 processSubRecord(\n                     project,\n                     parser,\n                     thisColumnGroup,\n                     record\n                 );\n             } else if (//eventType == XMLStreamConstants.CDATA ||\n-                        eventType == TreeParserToken.Value) { //XMLStreamConstants.CHARACTERS) {\n-                String text = parser.getText();\n-                String colName = parser.getLocalName();\n+                        eventType == Token.Value) { //XMLStreamConstants.CHARACTERS) {\n+                String text = parser.getFieldValue();\n+                String colName = parser.getFieldName();\n                 if(text != null){\n                     text = text.trim();\n                     if (text.length() > 0) {\n@@ -437,7 +439,7 @@ static protected void processSubRecord(\n                         );\n                     }\n                 }\n-            } else if (eventType == TreeParserToken.EndEntity) {\n+            } else if (eventType == Token.EndEntity) {\n                 break;\n             }\n         }\n@@ -451,8 +453,4 @@ static protected void processSubRecord(\n         }\n         thisColumnGroup.nextRowIndex = nextRowIndex;\n     }\n-\n-\n-\n-\n }",
            "previous_filename": "main/src/com/google/refine/importers/XmlImportUtilities.java"
        },
        {
            "sha": "7a0f6614cdda5d21306f58b01ca651e269745b61",
            "filename": "main/src/com/google/refine/importing/DefaultImportingController.java",
            "status": "added",
            "additions": 264,
            "deletions": 0,
            "changes": 264,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FDefaultImportingController.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FDefaultImportingController.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FDefaultImportingController.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,264 @@\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+package com.google.refine.importing;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.json.JSONWriter;\n+\n+import com.google.refine.RefineServlet;\n+import com.google.refine.commands.HttpUtilities;\n+import com.google.refine.importing.ImportingManager.Format;\n+import com.google.refine.util.JSONUtilities;\n+import com.google.refine.util.ParsingUtilities;\n+\n+public class DefaultImportingController implements ImportingController {\n+\n+    protected RefineServlet servlet;\n+    \n+    @Override\n+    public void init(RefineServlet servlet) {\n+        this.servlet = servlet;\n+    }\n+\n+    @Override\n+    public void doGet(HttpServletRequest request, HttpServletResponse response)\n+        throws ServletException, IOException {\n+        // TODO Auto-generated method stub\n+    }\n+\n+    @Override\n+    public void doPost(HttpServletRequest request, HttpServletResponse response)\n+        throws ServletException, IOException {\n+\n+        /*\n+         * The uploaded file is in the POST body as a \"file part\". If\n+         * we call request.getParameter() then the POST body will get\n+         * read and we won't have a chance to parse the body ourselves.\n+         * This is why we have to parse the URL for parameters ourselves.\n+         */\n+        Properties parameters = ParsingUtilities.parseUrlParameters(request);\n+        String subCommand = parameters.getProperty(\"subCommand\");\n+        if (\"load-raw-data\".equals(subCommand)) {\n+            doLoadRawData(request, response, parameters);\n+        } else if (\"update-file-selection\".equals(subCommand)) {\n+            doUpdateFileSelection(request, response, parameters);\n+        } else if (\"initialize-parser-ui\".equals(subCommand)) {\n+            doInitializeParserUI(request, response, parameters);\n+        } else if (\"update-format-and-options\".equals(subCommand)) {\n+            doUpdateFormatAndOptions(request, response, parameters);\n+        } else if (\"create-project\".equals(subCommand)) {\n+            doCreateProject(request, response, parameters);\n+        } else {\n+            HttpUtilities.respond(response, \"error\", \"No such sub command\");\n+        }\n+    }\n+\n+    private void doLoadRawData(HttpServletRequest request, HttpServletResponse response, Properties parameters)\n+        throws ServletException, IOException {\n+\n+        long jobID = Long.parseLong(parameters.getProperty(\"jobID\"));\n+        ImportingJob job = ImportingManager.getJob(jobID);\n+        if (job == null) {\n+            HttpUtilities.respond(response, \"error\", \"No such import job\");\n+            return;\n+        }\n+\n+        try {\n+            final JSONObject config = getConfig(job);\n+            if (!(\"new\".equals(config.getString(\"state\")))) {\n+                HttpUtilities.respond(response, \"error\", \"Job already started; cannot load more data\");\n+                return;\n+            }\n+            \n+            ImportingUtilities.loadDataAndPrepareJob(\n+                request, response, parameters, job, config);\n+        } catch (JSONException e) {\n+            throw new ServletException(e);\n+        }\n+    }\n+    \n+    private void doUpdateFileSelection(HttpServletRequest request, HttpServletResponse response, Properties parameters)\n+        throws ServletException, IOException {\n+    \n+        long jobID = Long.parseLong(parameters.getProperty(\"jobID\"));\n+        ImportingJob job = ImportingManager.getJob(jobID);\n+        if (job == null) {\n+            HttpUtilities.respond(response, \"error\", \"No such import job\");\n+            return;\n+        }\n+    \n+        try {\n+            JSONObject config = getConfig(job);\n+            if (!(\"ready\".equals(config.getString(\"state\")))) {\n+                HttpUtilities.respond(response, \"error\", \"Job not ready\");\n+                return;\n+            }\n+            \n+            JSONArray fileSelectionArray = ParsingUtilities.evaluateJsonStringToArray(\n+                    request.getParameter(\"fileSelection\"));\n+            \n+            ImportingUtilities.updateJobWithNewFileSelection(job, fileSelectionArray);\n+            \n+            replyWithJobData(request, response, job);\n+        } catch (JSONException e) {\n+            throw new ServletException(e);\n+        }\n+    }\n+    \n+    private void doUpdateFormatAndOptions(HttpServletRequest request, HttpServletResponse response, Properties parameters)\n+        throws ServletException, IOException {\n+    \n+        long jobID = Long.parseLong(parameters.getProperty(\"jobID\"));\n+        ImportingJob job = ImportingManager.getJob(jobID);\n+        if (job == null) {\n+            HttpUtilities.respond(response, \"error\", \"No such import job\");\n+            return;\n+        }\n+    \n+        try {\n+            JSONObject config = getConfig(job);\n+            if (!(\"ready\".equals(config.getString(\"state\")))) {\n+                HttpUtilities.respond(response, \"error\", \"Job not ready\");\n+                return;\n+            }\n+            \n+            String format = request.getParameter(\"format\");\n+            JSONObject optionObj = ParsingUtilities.evaluateJsonStringToObject(\n+                    request.getParameter(\"options\"));\n+            \n+            List<Exception> exceptions = new LinkedList<Exception>();\n+            \n+            ImportingUtilities.previewParse(job, format, optionObj, exceptions);\n+            \n+            HttpUtilities.respond(response, \"ok\", \"done\");\n+        } catch (JSONException e) {\n+            throw new ServletException(e);\n+        }\n+    }\n+    \n+    private void doInitializeParserUI(HttpServletRequest request, HttpServletResponse response, Properties parameters)\n+        throws ServletException, IOException {\n+    \n+        long jobID = Long.parseLong(parameters.getProperty(\"jobID\"));\n+        ImportingJob job = ImportingManager.getJob(jobID);\n+        if (job == null) {\n+            HttpUtilities.respond(response, \"error\", \"No such import job\");\n+            return;\n+        }\n+        \n+        String format = request.getParameter(\"format\");\n+        Format formatRecord = ImportingManager.formatToRecord.get(format);\n+        if (formatRecord != null && formatRecord.parser != null) {\n+            JSONObject options = formatRecord.parser.createParserUIInitializationData(\n+                    job, ImportingUtilities.getSelectedFileRecords(job), format);\n+            JSONObject result = new JSONObject();\n+            JSONUtilities.safePut(result, \"status\", \"ok\");\n+            JSONUtilities.safePut(result, \"options\", options);\n+            \n+            HttpUtilities.respond(response, result.toString());\n+        } else {\n+            HttpUtilities.respond(response, \"error\", \"Unrecognized format or format has no parser\");\n+        }\n+    }\n+    \n+    private void doCreateProject(HttpServletRequest request, HttpServletResponse response, Properties parameters)\n+        throws ServletException, IOException {\n+    \n+        long jobID = Long.parseLong(parameters.getProperty(\"jobID\"));\n+        ImportingJob job = ImportingManager.getJob(jobID);\n+        if (job == null) {\n+            HttpUtilities.respond(response, \"error\", \"No such import job\");\n+            return;\n+        }\n+    \n+        try {\n+            JSONObject config = getConfig(job);\n+            if (!(\"ready\".equals(config.getString(\"state\")))) {\n+                HttpUtilities.respond(response, \"error\", \"Job not ready\");\n+                return;\n+            }\n+            \n+            String format = request.getParameter(\"format\");\n+            JSONObject optionObj = ParsingUtilities.evaluateJsonStringToObject(\n+                    request.getParameter(\"options\"));\n+            \n+            List<Exception> exceptions = new LinkedList<Exception>();\n+            \n+            ImportingUtilities.createProject(job, format, optionObj, exceptions);\n+            \n+            HttpUtilities.respond(response, \"ok\", \"done\");\n+        } catch (JSONException e) {\n+            throw new ServletException(e);\n+        }\n+    }\n+\n+    private JSONObject getConfig(ImportingJob job) {\n+        if (job.config == null) {\n+            job.config = new JSONObject();\n+            JSONUtilities.safePut(job.config, \"state\", \"new\");\n+            JSONUtilities.safePut(job.config, \"hasData\", false);\n+        }\n+        return job.config;\n+    }\n+    \n+    private void replyWithJobData(HttpServletRequest request, HttpServletResponse response, ImportingJob job)\n+        throws ServletException, IOException {\n+        \n+        Writer w = response.getWriter();\n+        JSONWriter writer = new JSONWriter(w);\n+        try {\n+            writer.object();\n+            writer.key(\"code\"); writer.value(\"ok\");\n+            writer.key(\"job\"); job.write(writer, new Properties());\n+            writer.endObject();\n+        } catch (JSONException e) {\n+            throw new ServletException(e);\n+        } finally {\n+            w.flush();\n+            w.close();\n+        }\n+    }\n+}"
        },
        {
            "sha": "52d1dd8ba9f78ec8ee5f7fc331a867d107e77443",
            "filename": "main/src/com/google/refine/importing/FormatGuesser.java",
            "status": "renamed",
            "additions": 40,
            "deletions": 43,
            "changes": 83,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FFormatGuesser.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FFormatGuesser.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FFormatGuesser.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -1,43 +1,40 @@\n-/*\r\n-\r\n-Copyright 2010, Google Inc.\r\n-All rights reserved.\r\n-\r\n-Redistribution and use in source and binary forms, with or without\r\n-modification, are permitted provided that the following conditions are\r\n-met:\r\n-\r\n-    * Redistributions of source code must retain the above copyright\r\n-notice, this list of conditions and the following disclaimer.\r\n-    * Redistributions in binary form must reproduce the above\r\n-copyright notice, this list of conditions and the following disclaimer\r\n-in the documentation and/or other materials provided with the\r\n-distribution.\r\n-    * Neither the name of Google Inc. nor the names of its\r\n-contributors may be used to endorse or promote products derived from\r\n-this software without specific prior written permission.\r\n-\r\n-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n-\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n-A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n-OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n-SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n-LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \r\n-DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \r\n-THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n-\r\n-*/\r\n-\r\n-package com.google.refine.importers.parsers;\r\n-\r\n-\r\n-public enum TreeParserToken {\r\n-    Ignorable,\r\n-    StartEntity,\r\n-    EndEntity,\r\n-    Value\r\n-    //append additional tokens only if necessary (most should be just mapped to Value or Ignorable)\r\n-}\r\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+package com.google.refine.importing;\n+\n+import java.io.File;\n+\n+public interface FormatGuesser {\n+    public String guess(File file, String encoding, String seedFormat);\n+}",
            "previous_filename": "main/src/com/google/refine/importers/parsers/TreeParserToken.java"
        },
        {
            "sha": "68e2817c9d989820803ff246cb1c83b79bc45d08",
            "filename": "main/src/com/google/refine/importing/ImportingController.java",
            "status": "renamed",
            "additions": 4,
            "deletions": 12,
            "changes": 16,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FImportingController.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FImportingController.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FImportingController.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -1,6 +1,6 @@\n /*\n \n-Copyright 2010, Google Inc.\n+Copyright 2011, Google Inc.\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without\n@@ -31,17 +31,9 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \n */\n \n-package com.google.refine.importers;\n+package com.google.refine.importing;\n \n+import com.google.refine.HttpResponder;\n \n-public interface Importer {\n-\n-    /**\n-     * Determine whether importer can handle given contentType and filename.\n-     * \n-     * @param contentType\n-     * @param fileName\n-     * @return true if the importer can handle this\n-     */\n-    public boolean canImportData(String contentType, String fileName);\n+public interface ImportingController extends HttpResponder {\n }",
            "previous_filename": "main/src/com/google/refine/importers/Importer.java"
        },
        {
            "sha": "8ab30c57a974e9ccb101aa4c90e14509405b7da8",
            "filename": "main/src/com/google/refine/importing/ImportingJob.java",
            "status": "added",
            "additions": 106,
            "deletions": 0,
            "changes": 106,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FImportingJob.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FImportingJob.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FImportingJob.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,106 @@\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+package com.google.refine.importing;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.json.JSONWriter;\n+\n+import com.google.refine.Jsonizable;\n+import com.google.refine.ProjectMetadata;\n+import com.google.refine.model.Project;\n+\n+\n+public class ImportingJob implements Jsonizable {\n+    final public long id;\n+    final public File dir; // Temporary directory where the data about this job is stored\n+    \n+    public long lastTouched;\n+    public JSONObject config = null;\n+    \n+    public Project project;\n+    public ProjectMetadata metadata;\n+    public boolean canceled;\n+    \n+    public ImportingJob(long id, File dir) {\n+        this.id = id;\n+        this.dir = dir;\n+        \n+        dir.mkdirs();\n+    }\n+    \n+    public void touch() {\n+        lastTouched = System.currentTimeMillis();\n+    }\n+    \n+    public void prepareNewProject() {\n+        if (project != null) {\n+            project.dispose();\n+        }\n+        project = new Project();\n+        metadata = new ProjectMetadata();\n+    }\n+    \n+    public void dispose() {\n+        if (project != null) {\n+            project.dispose();\n+            project = null;\n+        }\n+        metadata = null;\n+        \n+        try {\n+            FileUtils.deleteDirectory(dir);\n+        } catch (IOException e) {\n+        }\n+    }\n+    \n+    public File getRawDataDir() {\n+        File dir2 = new File(dir, \"raw-data\");\n+        dir2.mkdirs();\n+        return dir2;\n+    }\n+\n+    @Override\n+    public void write(JSONWriter writer, Properties options)\n+            throws JSONException {\n+        writer.object();\n+        writer.key(\"config\"); writer.value(config);\n+        writer.endObject();\n+    }\n+}"
        },
        {
            "sha": "335261521e58d6442febb490d9abf1e8a8258c1e",
            "filename": "main/src/com/google/refine/importing/ImportingManager.java",
            "status": "added",
            "additions": 257,
            "deletions": 0,
            "changes": 257,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FImportingManager.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FImportingManager.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FImportingManager.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,257 @@\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+package com.google.refine.importing;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.json.JSONException;\n+import org.json.JSONWriter;\n+\n+import com.google.refine.RefineServlet;\n+\n+import edu.mit.simile.butterfly.ButterflyModule;\n+\n+public class ImportingManager {\n+    static public class Format {\n+        final public String id;\n+        final public String label;\n+        final public boolean download;\n+        final public String uiClass;\n+        final public ImportingParser parser;\n+        \n+        private Format(\n+            String id,\n+            String label,\n+            boolean download,\n+            String uiClass,\n+            ImportingParser parser\n+        ) {\n+            this.id = id;\n+            this.label = label;\n+            this.download = download;\n+            this.uiClass = uiClass;\n+            this.parser = parser;\n+        }\n+    }\n+    \n+    static private RefineServlet servlet;\n+    static private File importDir;\n+    final static private Map<Long, ImportingJob> jobs = new HashMap<Long, ImportingJob>();\n+    \n+    // Mapping from format to label, e.g., \"text\" to \"Text files\", \"text/xml\" to \"XML files\"\n+    final static public Map<String, Format> formatToRecord = new HashMap<String, Format>();\n+    \n+    // Mapping from format to guessers\n+    final static public Map<String, List<FormatGuesser>> formatToGuessers = new HashMap<String, List<FormatGuesser>>();\n+    \n+    // Mapping from file extension to format, e.g., \".xml\" to \"text/xml\"\n+    final static public Map<String, String> extensionToFormat = new HashMap<String, String>();\n+    \n+    // Mapping from mime type to format, e.g., \"application/json\" to \"text/json\"\n+    final static public Map<String, String> mimeTypeToFormat = new HashMap<String, String>();\n+    \n+    // URL rewriters\n+    final static public Set<UrlRewriter> urlRewriters = new HashSet<UrlRewriter>();\n+    \n+    // Mapping from controller name to controller\n+    final static public Map<String, ImportingController> controllers = new HashMap<String, ImportingController>();\n+    \n+    static public void initialize(RefineServlet servlet) {\n+        ImportingManager.servlet = servlet;\n+    }\n+    \n+    static public void registerFormat(String format, String label) {\n+        registerFormat(format, label, null, null);\n+    }\n+    \n+    static public void registerFormat(String format, String label, String uiClass, ImportingParser parser) {\n+        formatToRecord.put(format, new Format(format, label, true, uiClass, parser));\n+    }\n+    \n+    static public void registerFormat(\n+            String format, String label, boolean download, String uiClass, ImportingParser parser) {\n+        formatToRecord.put(format, new Format(format, label, download, uiClass, parser));\n+    }\n+    \n+    static public void registerFormatGuesser(String format, FormatGuesser guesser) {\n+        List<FormatGuesser> guessers = formatToGuessers.get(format);\n+        if (guessers == null) {\n+            guessers = new LinkedList<FormatGuesser>();\n+            formatToGuessers.put(format, guessers);\n+        }\n+        guessers.add(0, guesser); // prepend so that newer guessers take priority\n+    }\n+    \n+    static public void registerExtension(String extension, String format) {\n+        extensionToFormat.put(extension.startsWith(\".\") ? extension : (\".\" + extension), format);\n+    }\n+    \n+    static public void registerMimeType(String mimeType, String format) {\n+        mimeTypeToFormat.put(mimeType, format);\n+    }\n+    \n+    static public void registerUrlRewriter(UrlRewriter urlRewriter) {\n+        urlRewriters.add(urlRewriter);\n+    }\n+    \n+    static public void registerController(ButterflyModule module, String name, ImportingController controller) {\n+        String key = module.getName() + \"/\" + name;\n+        controllers.put(key, controller);\n+        \n+        controller.init(servlet);\n+    }\n+\n+    static public File getImportDir() {\n+        if (importDir == null) {\n+            File tempDir = servlet.getTempDir();\n+            importDir = tempDir == null ? new File(\".import-temp\") : new File(tempDir, \"import\");\n+            \n+            if (importDir.exists()) {\n+                try {\n+                    // start fresh\n+                    FileUtils.deleteDirectory(importDir);\n+                } catch (IOException e) {\n+                }\n+            }\n+            importDir.mkdirs();\n+        }\n+        return importDir;\n+    }\n+    \n+    static public ImportingJob createJob() {\n+        long id = System.currentTimeMillis() + (long) (Math.random() * 1000000);\n+        File jobDir = new File(getImportDir(), Long.toString(id));\n+        \n+        ImportingJob job = new ImportingJob(id, jobDir);\n+        jobs.put(id, job);\n+        \n+        return job;\n+    }\n+    \n+    static public ImportingJob getJob(long id) {\n+        return jobs.get(id);\n+    }\n+    \n+    static public void disposeJob(long id) {\n+        ImportingJob job = getJob(id);\n+        if (job != null) {\n+            job.dispose();\n+            jobs.remove(id);\n+        }\n+    }\n+    \n+    static public void writeConfiguration(JSONWriter writer, Properties options) throws JSONException {\n+        writer.object();\n+        \n+        writer.key(\"formats\");\n+        writer.object();\n+        for (String format : formatToRecord.keySet()) {\n+            Format record = formatToRecord.get(format);\n+            \n+            writer.key(format);\n+            writer.object();\n+            writer.key(\"id\"); writer.value(record.id);\n+            writer.key(\"label\"); writer.value(record.label);\n+            writer.key(\"download\"); writer.value(record.download);\n+            writer.key(\"uiClass\"); writer.value(record.uiClass);\n+            writer.endObject();\n+        }\n+        writer.endObject();\n+        \n+        writer.key(\"mimeTypeToFormat\");\n+        writer.object();\n+        for (String mimeType : mimeTypeToFormat.keySet()) {\n+            writer.key(mimeType);\n+            writer.value(mimeTypeToFormat.get(mimeType));\n+        }\n+        writer.endObject();\n+        \n+        writer.key(\"extensionToFormat\");\n+        writer.object();\n+        for (String extension : extensionToFormat.keySet()) {\n+            writer.key(extension);\n+            writer.value(extensionToFormat.get(extension));\n+        }\n+        writer.endObject();\n+        \n+        writer.endObject();\n+    }\n+    \n+    static public String getFormatFromFileName(String fileName) {\n+        int start = 0;\n+        while (true) {\n+            int dot = fileName.indexOf('.', start);\n+            if (dot < 0) {\n+                break;\n+            }\n+            \n+            String extension = fileName.substring(dot);\n+            String format = extensionToFormat.get(extension);\n+            if (format != null) {\n+                return format;\n+            } else {\n+                start = dot + 1;\n+            }\n+        }\n+        return null;\n+    }\n+    \n+    static public String getFormatFromMimeType(String mimeType) {\n+        return mimeTypeToFormat.get(mimeType);\n+    }\n+    \n+    static public String getFormat(String fileName, String mimeType) {\n+        String fileNameFormat = getFormatFromFileName(fileName);\n+        String mimeTypeFormat = mimeType == null ? null : getFormatFromMimeType(mimeType);\n+        if (mimeTypeFormat == null) {\n+            return fileNameFormat;\n+        } else if (fileNameFormat == null) {\n+            return mimeTypeFormat;\n+        } else if (fileNameFormat.startsWith(mimeTypeFormat)) {\n+            // file name-based format is more specific\n+            return fileNameFormat;\n+        } else {\n+            return mimeTypeFormat;\n+        }\n+    }\n+}"
        },
        {
            "sha": "79eae463383f4d943adb9718c3c4abb29462cbc4",
            "filename": "main/src/com/google/refine/importing/ImportingParser.java",
            "status": "renamed",
            "additions": 38,
            "deletions": 20,
            "changes": 58,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FImportingParser.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FImportingParser.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FImportingParser.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -1,6 +1,6 @@\n /*\n \n-Copyright 2010, Google Inc.\n+Copyright 2011, Google Inc.\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without\n@@ -31,33 +31,51 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \n */\n \n-package com.google.refine.importers;\n+package com.google.refine.importing;\n \n-import java.io.Reader;\n-import java.util.Properties;\n+import java.util.List;\n+\n+import org.json.JSONObject;\n \n import com.google.refine.ProjectMetadata;\n import com.google.refine.model.Project;\n \n-/**\n- * Interface for importers which take a Reader as input.\n- */\n-public interface ReaderImporter extends Importer {\n-\n+public interface ImportingParser {\n+    /**\n+     * Create data sufficient for the parser UI on the client side to do its work.\n+     * For example, an XML parser UI would need to know some sample elements so it\n+     * can let the user pick which the path to the record elements.\n+     * \n+     * @param job\n+     * @param fileRecords\n+     * @param format\n+     * @return JSONObject options\n+     */\n+    public JSONObject createParserUIInitializationData(\n+        ImportingJob job,\n+        List<JSONObject> fileRecords,\n+        String format\n+    );\n+    \n     /**\n-     * Read data from a input reader into project.\n      * \n-     * @param reader\n-     *            reader to import data from. It is assumed to be positioned at\n-     *            the correct point and ready to go.\n      * @param project\n-     *            project which will contain data\n      * @param metadata\n-     *            metadata of new project\n-     * @param options\n-     *            set of properties with import options\n-     * @throws ImportException\n+     * @param fileRecords\n+     * @param format\n+     * @param limit maximum number of rows to create\n+     * @param options custom options put together by the UI corresponding to this parser,\n+     *                which the parser should understand\n+     * @param exceptions\n      */\n-    public void read(Reader reader, Project project, ProjectMetadata metadata, Properties options)\n-            throws ImportException;\n+    public void parse(\n+        Project project,\n+        ProjectMetadata metadata,\n+        ImportingJob job,\n+        List<JSONObject> fileRecords,\n+        String format,\n+        int limit,\n+        JSONObject options,\n+        List<Exception> exceptions\n+    );\n }",
            "previous_filename": "main/src/com/google/refine/importers/ReaderImporter.java"
        },
        {
            "sha": "e657f341604eaaff9af2640762f66e0962d8cd45",
            "filename": "main/src/com/google/refine/importing/ImportingUtilities.java",
            "status": "added",
            "additions": 895,
            "deletions": 0,
            "changes": 895,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FImportingUtilities.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FImportingUtilities.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FImportingUtilities.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,895 @@\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+package com.google.refine.importing;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.zip.GZIPInputStream;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.fileupload.FileItem;\n+import org.apache.commons.fileupload.FileUploadException;\n+import org.apache.commons.fileupload.ProgressListener;\n+import org.apache.commons.fileupload.disk.DiskFileItemFactory;\n+import org.apache.commons.fileupload.servlet.ServletFileUpload;\n+import org.apache.commons.fileupload.util.Streams;\n+import org.apache.commons.io.FileCleaningTracker;\n+import org.apache.tools.bzip2.CBZip2InputStream;\n+import org.apache.tools.tar.TarEntry;\n+import org.apache.tools.tar.TarInputStream;\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.refine.ProjectManager;\n+import com.google.refine.ProjectMetadata;\n+import com.google.refine.importing.ImportingManager.Format;\n+import com.google.refine.importing.UrlRewriter.Result;\n+import com.google.refine.model.Project;\n+import com.google.refine.util.JSONUtilities;\n+import com.ibm.icu.text.NumberFormat;\n+\n+public class ImportingUtilities {\n+    final static protected Logger logger = LoggerFactory.getLogger(\"importing-utilities\");\n+    \n+    static public interface Progress {\n+        public void setProgress(String message, int percent);\n+        public boolean isCanceled();\n+    }\n+    \n+    static public void loadDataAndPrepareJob(\n+        HttpServletRequest request,\n+        HttpServletResponse response,\n+        Properties parameters,\n+        final ImportingJob job,\n+        JSONObject config) throws IOException, ServletException {\n+        \n+        JSONObject retrievalRecord = new JSONObject();\n+        JSONUtilities.safePut(config, \"retrievalRecord\", retrievalRecord);\n+        JSONUtilities.safePut(config, \"state\", \"loading-raw-data\");\n+        \n+        final JSONObject progress = new JSONObject();\n+        JSONUtilities.safePut(config, \"progress\", progress);\n+        try {\n+            ImportingUtilities.retrieveContentFromPostRequest(\n+                request,\n+                parameters,\n+                job.getRawDataDir(),\n+                retrievalRecord,\n+                new Progress() {\n+                    @Override\n+                    public void setProgress(String message, int percent) {\n+                        if (message != null) {\n+                            JSONUtilities.safePut(progress, \"message\", message);\n+                        }\n+                        JSONUtilities.safePut(progress, \"percent\", percent);\n+                    }\n+                    public boolean isCanceled() {\n+                        return job.canceled;\n+                    }\n+                }\n+            );\n+        } catch (FileUploadException e) {\n+            JSONUtilities.safePut(config, \"state\", \"error\");\n+            JSONUtilities.safePut(config, \"error\", \"Error uploading data\");\n+            \n+            throw new ServletException(e);\n+        }\n+        \n+        JSONArray fileSelectionIndexes = new JSONArray();\n+        JSONUtilities.safePut(config, \"fileSelection\", fileSelectionIndexes);\n+        \n+        String bestFormat = ImportingUtilities.autoSelectFiles(job, retrievalRecord, fileSelectionIndexes);\n+        bestFormat = ImportingUtilities.guessBetterFormat(job, bestFormat);\n+        \n+        JSONArray rankedFormats = new JSONArray();\n+        JSONUtilities.safePut(config, \"rankedFormats\", rankedFormats);\n+        ImportingUtilities.rankFormats(job, bestFormat, rankedFormats);\n+        \n+        JSONUtilities.safePut(config, \"state\", \"ready\");\n+        JSONUtilities.safePut(config, \"hasData\", true);\n+        config.remove(\"progress\");\n+    }\n+    \n+    static public void updateJobWithNewFileSelection(ImportingJob job, JSONArray fileSelectionArray) {\n+        JSONUtilities.safePut(job.config, \"fileSelection\", fileSelectionArray);\n+        \n+        String bestFormat = ImportingUtilities.getCommonFormatForSelectedFiles(job, fileSelectionArray);\n+        bestFormat = ImportingUtilities.guessBetterFormat(job, bestFormat);\n+        \n+        JSONArray rankedFormats = new JSONArray();\n+        JSONUtilities.safePut(job.config, \"rankedFormats\", rankedFormats);\n+        ImportingUtilities.rankFormats(job, bestFormat, rankedFormats);\n+    }\n+    \n+    static public void retrieveContentFromPostRequest(\n+        HttpServletRequest request,\n+        Properties parameters,\n+        File rawDataDir,\n+        JSONObject retrievalRecord,\n+        final Progress progress\n+    ) throws FileUploadException, IOException {\n+        JSONArray fileRecords = new JSONArray();\n+        JSONUtilities.safePut(retrievalRecord, \"files\", fileRecords);\n+        \n+        int clipboardCount = 0;\n+        int uploadCount = 0;\n+        int downloadCount = 0;\n+        int archiveCount = 0;\n+        \n+        // This tracks the total progress, which involves uploading data from the client\n+        // as well as downloading data from URLs.\n+        final SavingUpdate update = new SavingUpdate() {\n+            @Override\n+            public void savedMore() {\n+                progress.setProgress(null, calculateProgressPercent(totalExpectedSize, totalRetrievedSize));\n+            }\n+            @Override\n+            public boolean isCanceled() {\n+                return progress.isCanceled();\n+            }\n+        };\n+        \n+        DiskFileItemFactory fileItemFactory = new DiskFileItemFactory();\n+        fileItemFactory.setFileCleaningTracker(new FileCleaningTracker());\n+        \n+        ServletFileUpload upload = new ServletFileUpload(fileItemFactory);\n+        upload.setProgressListener(new ProgressListener() {\n+            boolean setContentLength = false;\n+            long lastBytesRead = 0;\n+            \n+            @Override\n+            public void update(long bytesRead, long contentLength, int itemCount) {\n+                if (!setContentLength) {\n+                    // Only try to set the content length if we really know it.\n+                    if (contentLength >= 0) {\n+                        update.totalExpectedSize += contentLength;\n+                        setContentLength = true;\n+                    }\n+                }\n+                if (setContentLength) {\n+                    update.totalRetrievedSize += (bytesRead - lastBytesRead);\n+                    lastBytesRead = bytesRead;\n+                    \n+                    update.savedMore();\n+                }\n+            }\n+        });\n+\n+        progress.setProgress(\"Uploading data ...\", -1);\n+        for (Object obj : upload.parseRequest(request)) {\n+            if (progress.isCanceled()) {\n+                break;\n+            }\n+            \n+            FileItem fileItem = (FileItem) obj;\n+            InputStream stream = fileItem.getInputStream();\n+            \n+            String name = fileItem.getFieldName().toLowerCase();\n+            if (fileItem.isFormField()) {\n+                if (name.equals(\"clipboard\")) {\n+                    File file = allocateFile(rawDataDir, \"clipboard.txt\");\n+                    \n+                    JSONObject fileRecord = new JSONObject();\n+                    JSONUtilities.safePut(fileRecord, \"origin\", \"clipboard\");\n+                    JSONUtilities.safePut(fileRecord, \"declaredEncoding\", request.getCharacterEncoding());\n+                    JSONUtilities.safePut(fileRecord, \"declaredMimeType\", (String) null);\n+                    JSONUtilities.safePut(fileRecord, \"format\", \"text\");\n+                    JSONUtilities.safePut(fileRecord, \"fileName\", \"(clipboard)\");\n+                    JSONUtilities.safePut(fileRecord, \"location\", getRelativePath(file, rawDataDir));\n+                    \n+                    progress.setProgress(\"Uploading pasted clipboard text\",\n+                        calculateProgressPercent(update.totalExpectedSize, update.totalRetrievedSize));\n+                    \n+                    JSONUtilities.safePut(fileRecord, \"size\", saveStreamToFile(stream, file, null));\n+                    \n+                    clipboardCount++;\n+                    \n+                    JSONUtilities.append(fileRecords, fileRecord);\n+                } else if (name.equals(\"download\")) {\n+                    String urlString = Streams.asString(stream);\n+                    URL url = new URL(urlString);\n+                    \n+                    JSONObject fileRecord = new JSONObject();\n+                    JSONUtilities.safePut(fileRecord, \"origin\", \"download\");\n+                    JSONUtilities.safePut(fileRecord, \"url\", urlString);\n+                    \n+                    for (UrlRewriter rewriter : ImportingManager.urlRewriters) {\n+                        Result result = rewriter.rewrite(urlString);\n+                        if (result != null) {\n+                            urlString = result.rewrittenUrl;\n+                            url = new URL(urlString);\n+                            \n+                            JSONUtilities.safePut(fileRecord, \"url\", urlString);\n+                            JSONUtilities.safePut(fileRecord, \"format\", result.format);\n+                            if (!result.download) {\n+                                downloadCount++;\n+                                JSONUtilities.append(fileRecords, fileRecord);\n+                                continue;\n+                            }\n+                        }\n+                    }\n+                    \n+                    URLConnection urlConnection = url.openConnection();\n+                    InputStream stream2 = urlConnection.getInputStream();\n+                    try {\n+                        String fileName = url.getFile();\n+                        File file = allocateFile(rawDataDir, fileName);\n+                        \n+                        int contentLength = urlConnection.getContentLength();\n+                        if (contentLength >= 0) {\n+                            update.totalExpectedSize += contentLength;\n+                        }\n+                        \n+                        JSONUtilities.safePut(fileRecord, \"declaredEncoding\", urlConnection.getContentEncoding());\n+                        JSONUtilities.safePut(fileRecord, \"declaredMimeType\", urlConnection.getContentType());\n+                        JSONUtilities.safePut(fileRecord, \"fileName\", fileName);\n+                        JSONUtilities.safePut(fileRecord, \"location\", getRelativePath(file, rawDataDir));\n+\n+                        progress.setProgress(\"Downloading \" + urlString,\n+                            calculateProgressPercent(update.totalExpectedSize, update.totalRetrievedSize));\n+                        \n+                        long actualLength = saveStreamToFile(stream, file, update);\n+                        JSONUtilities.safePut(fileRecord, \"size\", actualLength);\n+                        if (contentLength >= 0) {\n+                            update.totalExpectedSize += (actualLength - contentLength);\n+                        } else {\n+                            update.totalExpectedSize += actualLength;\n+                        }\n+                        progress.setProgress(\"Saving \" + urlString + \" locally\",\n+                            calculateProgressPercent(update.totalExpectedSize, update.totalRetrievedSize));\n+                        \n+                        if (postProcessRetrievedFile(file, fileRecord, fileRecords, progress)) {\n+                            archiveCount++;\n+                        }\n+\n+                        downloadCount++;\n+                    } finally {\n+                        stream2.close();\n+                    }\n+                }\n+\n+            } else { // is file content\n+                String fileName = fileItem.getName();\n+                if (fileName.length() > 0) {\n+                    long fileSize = fileItem.getSize();\n+                    \n+                    File file = allocateFile(rawDataDir, fileName);\n+                    \n+                    JSONObject fileRecord = new JSONObject();\n+                    JSONUtilities.safePut(fileRecord, \"origin\", \"upload\");\n+                    JSONUtilities.safePut(fileRecord, \"declaredEncoding\", request.getCharacterEncoding());\n+                    JSONUtilities.safePut(fileRecord, \"declaredMimeType\", fileItem.getContentType());\n+                    JSONUtilities.safePut(fileRecord, \"fileName\", fileName);\n+                    JSONUtilities.safePut(fileRecord, \"location\", getRelativePath(file, rawDataDir));\n+\n+                    progress.setProgress(\n+                        \"Saving file \" + fileName + \" locally (\" + formatBytes(fileSize) + \" bytes)\",\n+                        calculateProgressPercent(update.totalExpectedSize, update.totalRetrievedSize));\n+                    \n+                    JSONUtilities.safePut(fileRecord, \"size\", saveStreamToFile(stream, file, null));\n+                    if (postProcessRetrievedFile(file, fileRecord, fileRecords, progress)) {\n+                        archiveCount++;\n+                    }\n+                    \n+                    uploadCount++;\n+                }\n+            }\n+        }\n+        \n+        JSONUtilities.safePut(retrievalRecord, \"uploadCount\", uploadCount);\n+        JSONUtilities.safePut(retrievalRecord, \"downloadCount\", downloadCount);\n+        JSONUtilities.safePut(retrievalRecord, \"clipboardCount\", clipboardCount);\n+        JSONUtilities.safePut(retrievalRecord, \"archiveCount\", archiveCount);\n+    }\n+    \n+    static public String getRelativePath(File file, File dir) {\n+        String location = file.getAbsolutePath().substring(dir.getAbsolutePath().length());\n+        return (location.startsWith(File.separator)) ? location.substring(1) : location;\n+    }\n+    \n+    static public File allocateFile(File dir, String name) {\n+        File file = new File(dir, name);\n+\n+        int dot = name.indexOf('.');\n+        String prefix = dot < 0 ? name : name.substring(0, dot);\n+        String suffix = dot < 0 ? \"\" : name.substring(dot);\n+        int index = 2;\n+        while (file.exists()) {\n+            file = new File(dir, prefix + \"-\" + index++ + suffix);\n+        }\n+        \n+        file.getParentFile().mkdirs();\n+        \n+        return file;\n+    }\n+    \n+    static public Reader getFileReader(ImportingJob job, JSONObject fileRecord)\n+        throws FileNotFoundException {\n+        \n+        return getFileReader(getFile(job, JSONUtilities.getString(fileRecord, \"location\", \"\")), fileRecord);\n+    }\n+    \n+    static public Reader getFileReader(File file, JSONObject fileRecord) throws FileNotFoundException {\n+        return getReaderFromStream(new FileInputStream(file), fileRecord);\n+    }\n+    \n+    static public Reader getReaderFromStream(InputStream inputStream, JSONObject fileRecord) {\n+        String encoding = getEncoding(fileRecord);\n+        if (encoding != null) {\n+            try {\n+                return new InputStreamReader(inputStream, encoding);\n+            } catch (UnsupportedEncodingException e) {\n+                // Ignore and fall through\n+            }\n+        }\n+        return new InputStreamReader(inputStream);\n+    }\n+    \n+    static public File getFile(ImportingJob job, JSONObject fileRecord) {\n+        return getFile(job, JSONUtilities.getString(fileRecord, \"location\", \"\"));\n+    }\n+    \n+    static public File getFile(ImportingJob job, String location) {\n+        return new File(job.getRawDataDir(), location);\n+    }\n+    \n+    static public String getFileSource(JSONObject fileRecord) {\n+        return JSONUtilities.getString(\n+            fileRecord,\n+            \"url\",\n+            JSONUtilities.getString(fileRecord, \"fileName\", \"unknown\")\n+        );\n+    }\n+    \n+    static private abstract class SavingUpdate {\n+        public long totalExpectedSize = 0;\n+        public long totalRetrievedSize = 0;\n+        \n+        abstract public void savedMore();\n+        abstract public boolean isCanceled();\n+    }\n+    static public long saveStreamToFile(InputStream stream, File file, SavingUpdate update) throws IOException {\n+        long length = 0;\n+        FileOutputStream fos = new FileOutputStream(file);\n+        try {\n+            byte[] bytes = new byte[4096];\n+            int c;\n+            while ((update == null || !update.isCanceled()) && (c = stream.read(bytes)) > 0) {\n+                fos.write(bytes, 0, c);\n+                length += c;\n+\n+                if (update != null) {\n+                    update.totalRetrievedSize += c;\n+                    update.savedMore();\n+                }\n+            }\n+            return length;\n+        } finally {\n+            fos.close();\n+        }\n+    }\n+    \n+    static public boolean postProcessRetrievedFile(\n+            File file, JSONObject fileRecord, JSONArray fileRecords, final Progress progress) {\n+        \n+        String mimeType = JSONUtilities.getString(fileRecord, \"declaredMimeType\", null);\n+        File rawDataDir = file.getParentFile();\n+        \n+        InputStream archiveIS = tryOpenAsArchive(file, mimeType);\n+        if (archiveIS != null) {\n+            try {\n+                if (explodeArchive(rawDataDir, archiveIS, fileRecord, fileRecords, progress)) {\n+                    file.delete();\n+                    return true;\n+                }\n+            } finally {\n+                try {\n+                    archiveIS.close();\n+                } catch (IOException e) {\n+                    // TODO: what to do?\n+                }\n+            }\n+        }\n+        \n+        InputStream uncompressedIS = tryOpenAsCompressedFile(file, mimeType);\n+        if (uncompressedIS != null) {\n+            try {\n+                File file2 = uncompressFile(rawDataDir, uncompressedIS, fileRecord, progress);\n+                \n+                file.delete();\n+                file = file2;\n+            } catch (IOException e) {\n+                // TODO: what to do?\n+                e.printStackTrace();\n+            } finally {\n+                try {\n+                    archiveIS.close();\n+                } catch (IOException e) {\n+                    // TODO: what to do?\n+                }\n+            }\n+        }\n+        \n+        postProcessSingleRetrievedFile(file, fileRecord);\n+        JSONUtilities.append(fileRecords, fileRecord);\n+        \n+        return false;\n+    }\n+    \n+    static public void postProcessSingleRetrievedFile(File file, JSONObject fileRecord) {\n+        if (!fileRecord.has(\"format\")) {\n+            JSONUtilities.safePut(fileRecord, \"format\",\n+                ImportingManager.getFormat(\n+                    file.getName(),\n+                    JSONUtilities.getString(fileRecord, \"declaredMimeType\", null)));\n+        }\n+    }\n+    \n+    static public InputStream tryOpenAsArchive(File file, String mimeType) {\n+        String fileName = file.getName();\n+        try {\n+            if (fileName.endsWith(\".tar.gz\") || fileName.endsWith(\".tgz\")) {\n+                return new TarInputStream(new GZIPInputStream(new FileInputStream(file)));\n+            } else if (fileName.endsWith(\".tar.bz2\")) {\n+                return new TarInputStream(new CBZip2InputStream(new FileInputStream(file)));\n+            } else if (fileName.endsWith(\".tar\")) {\n+                return new TarInputStream(new FileInputStream(file));\n+            } else if (fileName.endsWith(\".zip\")) {\n+                return new ZipInputStream(new FileInputStream(file));\n+            }\n+        } catch (IOException e) {\n+        }\n+        return null;\n+    }\n+    \n+    static public boolean explodeArchive(\n+        File rawDataDir,\n+        InputStream archiveIS,\n+        JSONObject archiveFileRecord,\n+        JSONArray fileRecords,\n+        final Progress progress\n+    ) {\n+        if (archiveIS instanceof TarInputStream) {\n+            TarInputStream tis = (TarInputStream) archiveIS;\n+            try {\n+                TarEntry te;\n+                while (!progress.isCanceled() && (te = tis.getNextEntry()) != null) {\n+                    if (!te.isDirectory()) {\n+                        String fileName2 = te.getName();\n+                        File file2 = allocateFile(rawDataDir, fileName2);\n+                        \n+                        progress.setProgress(\"Extracting \" + fileName2, -1);\n+                        \n+                        JSONObject fileRecord2 = new JSONObject();\n+                        JSONUtilities.safePut(fileRecord2, \"origin\", JSONUtilities.getString(archiveFileRecord, \"origin\", null));\n+                        JSONUtilities.safePut(fileRecord2, \"declaredEncoding\", (String) null);\n+                        JSONUtilities.safePut(fileRecord2, \"declaredMimeType\", (String) null);\n+                        JSONUtilities.safePut(fileRecord2, \"fileName\", fileName2);\n+                        JSONUtilities.safePut(fileRecord2, \"archiveFileName\", JSONUtilities.getString(archiveFileRecord, \"fileName\", null));\n+                        JSONUtilities.safePut(fileRecord2, \"location\", getRelativePath(file2, rawDataDir));\n+\n+                        JSONUtilities.safePut(fileRecord2, \"size\", saveStreamToFile(tis, file2, null));\n+                        postProcessSingleRetrievedFile(file2, fileRecord2);\n+                        \n+                        JSONUtilities.append(fileRecords, fileRecord2);\n+                    }\n+                }\n+            } catch (IOException e) {\n+                // TODO: what to do?\n+                e.printStackTrace();\n+            }\n+            return true;\n+        } else if (archiveIS instanceof ZipInputStream) {\n+            ZipInputStream zis = (ZipInputStream) archiveIS;\n+            try {\n+                ZipEntry ze;\n+                while (!progress.isCanceled() && (ze = zis.getNextEntry()) != null) {\n+                    if (!ze.isDirectory()) {\n+                        String fileName2 = ze.getName();\n+                        File file2 = allocateFile(rawDataDir, fileName2);\n+                        \n+                        progress.setProgress(\"Extracting \" + fileName2, -1);\n+                        \n+                        JSONObject fileRecord2 = new JSONObject();\n+                        JSONUtilities.safePut(fileRecord2, \"origin\", JSONUtilities.getString(archiveFileRecord, \"origin\", null));\n+                        JSONUtilities.safePut(fileRecord2, \"declaredEncoding\", (String) null);\n+                        JSONUtilities.safePut(fileRecord2, \"declaredMimeType\", (String) null);\n+                        JSONUtilities.safePut(fileRecord2, \"fileName\", fileName2);\n+                        JSONUtilities.safePut(fileRecord2, \"archiveFileName\", JSONUtilities.getString(archiveFileRecord, \"fileName\", null));\n+                        JSONUtilities.safePut(fileRecord2, \"location\", getRelativePath(file2, rawDataDir));\n+\n+                        JSONUtilities.safePut(fileRecord2, \"size\", saveStreamToFile(zis, file2, null));\n+                        postProcessSingleRetrievedFile(file2, fileRecord2);\n+                        \n+                        JSONUtilities.append(fileRecords, fileRecord2);\n+                    }\n+                }\n+            } catch (IOException e) {\n+                // TODO: what to do?\n+                e.printStackTrace();\n+            }\n+            return true;\n+        }\n+        return false;\n+    }\n+    \n+    static public InputStream tryOpenAsCompressedFile(File file, String mimeType) {\n+        String fileName = file.getName();\n+        try {\n+            if (fileName.endsWith(\".gz\")) {\n+                return new GZIPInputStream(new FileInputStream(file));\n+            } else if (fileName.endsWith(\".bz2\")) {\n+                return new CBZip2InputStream(new FileInputStream(file));\n+            }\n+        } catch (IOException e) {\n+        }\n+        return null;\n+    }\n+    \n+    static public File uncompressFile(\n+        File rawDataDir,\n+        InputStream uncompressedIS,\n+        JSONObject fileRecord,\n+        final Progress progress\n+    ) throws IOException {\n+        String fileName = JSONUtilities.getString(fileRecord, \"fileName\", \"unknown\");\n+        File file2 = allocateFile(rawDataDir, fileName);\n+        \n+        progress.setProgress(\"Uncompressing \" + fileName, -1);\n+        \n+        saveStreamToFile(uncompressedIS, file2, null);\n+        \n+        JSONUtilities.safePut(fileRecord, \"declaredEncoding\", (String) null);\n+        JSONUtilities.safePut(fileRecord, \"declaredMimeType\", (String) null);\n+        JSONUtilities.safePut(fileRecord, \"location\", getRelativePath(file2, rawDataDir));\n+        \n+        return file2;\n+    }\n+    \n+    static private int calculateProgressPercent(long totalExpectedSize, long totalRetrievedSize) {\n+        return totalExpectedSize == 0 ? -1 : (int) (totalRetrievedSize * 100 / totalExpectedSize);\n+    }\n+    \n+    static private String formatBytes(long bytes) {\n+        return NumberFormat.getIntegerInstance().format(bytes);\n+    }\n+    \n+    static public String getEncoding(JSONObject fileRecord) {\n+        String encoding = JSONUtilities.getString(fileRecord, \"encoding\", null);\n+        if (encoding == null) {\n+            encoding = JSONUtilities.getString(fileRecord, \"declaredEncoding\", null);\n+        }\n+        return encoding;\n+    }\n+\n+    static public String autoSelectFiles(ImportingJob job, JSONObject retrievalRecord, JSONArray fileSelectionIndexes) {\n+        final Map<String, Integer> formatToCount = new HashMap<String, Integer>();\n+        List<String> formats = new ArrayList<String>();\n+        \n+        JSONArray fileRecords = JSONUtilities.getArray(retrievalRecord, \"files\");\n+        int count = fileRecords.length();\n+        for (int i = 0; i < count; i++) {\n+            JSONObject fileRecord = JSONUtilities.getObjectElement(fileRecords, i);\n+            String format = JSONUtilities.getString(fileRecord, \"format\", null);\n+            if (format != null) {\n+                if (formatToCount.containsKey(format)) {\n+                    formatToCount.put(format, formatToCount.get(format) + 1);\n+                } else {\n+                    formatToCount.put(format, 1);\n+                    formats.add(format);\n+                }\n+            }\n+        }\n+        Collections.sort(formats, new Comparator<String>() {\n+            @Override\n+            public int compare(String o1, String o2) {\n+                return formatToCount.get(o2) - formatToCount.get(o1);\n+            }\n+        });\n+        \n+        String bestFormat = formats.size() > 0 ? formats.get(0) : null;\n+        if (JSONUtilities.getInt(retrievalRecord, \"archiveCount\", 0) == 0) {\n+            // If there's no archive, then select everything\n+            for (int i = 0; i < count; i++) {\n+                JSONUtilities.append(fileSelectionIndexes, i);\n+            }\n+        } else {\n+            // Otherwise, select files matching the best format\n+            for (int i = 0; i < count; i++) {\n+                JSONObject fileRecord = JSONUtilities.getObjectElement(fileRecords, i);\n+                String format = JSONUtilities.getString(fileRecord, \"format\", null);\n+                if (format != null && format.equals(bestFormat)) {\n+                    JSONUtilities.append(fileSelectionIndexes, i);\n+                }\n+            }\n+        }\n+        return bestFormat;\n+    }\n+    \n+    static public String getCommonFormatForSelectedFiles(ImportingJob job, JSONArray fileSelectionIndexes) {\n+        JSONObject retrievalRecord = JSONUtilities.getObject(job.config, \"retrievalRecord\");\n+        \n+        final Map<String, Integer> formatToCount = new HashMap<String, Integer>();\n+        List<String> formats = new ArrayList<String>();\n+        \n+        JSONArray fileRecords = JSONUtilities.getArray(retrievalRecord, \"files\");\n+        int count = fileSelectionIndexes.length();\n+        for (int i = 0; i < count; i++) {\n+            int index = JSONUtilities.getIntElement(fileSelectionIndexes, i, -1);\n+            if (index >= 0 && index < fileRecords.length()) {\n+                JSONObject fileRecord = JSONUtilities.getObjectElement(fileRecords, index);\n+                String format = JSONUtilities.getString(fileRecord, \"format\", null);\n+                if (format != null) {\n+                    if (formatToCount.containsKey(format)) {\n+                        formatToCount.put(format, formatToCount.get(format) + 1);\n+                    } else {\n+                        formatToCount.put(format, 1);\n+                        formats.add(format);\n+                    }\n+                }\n+            }\n+        }\n+        Collections.sort(formats, new Comparator<String>() {\n+            @Override\n+            public int compare(String o1, String o2) {\n+                return formatToCount.get(o2) - formatToCount.get(o1);\n+            }\n+        });\n+        \n+        return formats.size() > 0 ? formats.get(0) : null;\n+    }\n+    \n+    static String guessBetterFormat(ImportingJob job, String bestFormat) {\n+        JSONObject retrievalRecord = JSONUtilities.getObject(job.config, \"retrievalRecord\");\n+        return retrievalRecord != null ? guessBetterFormat(job, retrievalRecord, bestFormat) : bestFormat;\n+    }\n+    \n+    static String guessBetterFormat(ImportingJob job, JSONObject retrievalRecord, String bestFormat) {\n+        JSONArray fileRecords = JSONUtilities.getArray(retrievalRecord, \"files\");\n+        return fileRecords != null ? guessBetterFormat(job, fileRecords, bestFormat) : bestFormat;\n+    }\n+    \n+    static String guessBetterFormat(ImportingJob job, JSONArray fileRecords, String bestFormat) {\n+        if (bestFormat != null && fileRecords != null && fileRecords.length() > 0) {\n+            JSONObject firstFileRecord = JSONUtilities.getObjectElement(fileRecords, 0);\n+            String encoding = getEncoding(firstFileRecord);\n+            String location = JSONUtilities.getString(firstFileRecord, \"location\", null);\n+            \n+            if (location != null) {\n+                File file = new File(job.getRawDataDir(), location);\n+                \n+                while (true) {\n+                    String betterFormat = null;\n+                    \n+                    List<FormatGuesser> guessers = ImportingManager.formatToGuessers.get(bestFormat);\n+                    if (guessers != null) {\n+                        for (FormatGuesser guesser : guessers) {\n+                            betterFormat = guesser.guess(file, encoding, bestFormat);\n+                            if (betterFormat != null) {\n+                                break;\n+                            }\n+                        }\n+                    }\n+                    \n+                    if (betterFormat != null && !betterFormat.equals(bestFormat)) {\n+                        bestFormat = betterFormat;\n+                    } else {\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+        return bestFormat;\n+    }\n+    \n+    static void rankFormats(ImportingJob job, final String bestFormat, JSONArray rankedFormats) {\n+        final Map<String, String[]> formatToSegments = new HashMap<String, String[]>();\n+        \n+        boolean download = bestFormat == null ? true :\n+            ImportingManager.formatToRecord.get(bestFormat).download;\n+        \n+        List<String> formats = new ArrayList<String>(ImportingManager.formatToRecord.keySet().size());\n+        for (String format : ImportingManager.formatToRecord.keySet()) {\n+            Format record = ImportingManager.formatToRecord.get(format);\n+            if (record.uiClass != null && record.parser != null && record.download == download) {\n+                formats.add(format);\n+                formatToSegments.put(format, format.split(\"/\"));\n+            }\n+        }\n+        \n+        if (bestFormat == null) {\n+            Collections.sort(formats);\n+        } else {\n+            Collections.sort(formats, new Comparator<String>() {\n+                @Override\n+                public int compare(String format1, String format2) {\n+                    if (format1.equals(bestFormat)) {\n+                        return -1;\n+                    } else if (format2.equals(bestFormat)) {\n+                        return 1;\n+                    } else {\n+                        return compareBySegments(format1, format2);\n+                    }\n+                }\n+                \n+                int compareBySegments(String format1, String format2) {\n+                    int c = commonSegments(format2) - commonSegments(format1);\n+                    return c != 0 ? c : format1.compareTo(format2);\n+                }\n+                \n+                int commonSegments(String format) {\n+                    String[] bestSegments = formatToSegments.get(bestFormat);\n+                    String[] segments = formatToSegments.get(format);\n+                    if (bestSegments == null || segments == null) {\n+                        return 0;\n+                    } else {\n+                        int i;\n+                        for (i = 0; i < bestSegments.length && i < segments.length; i++) {\n+                            if (!bestSegments[i].equals(segments[i])) {\n+                                break;\n+                            }\n+                        }\n+                        return i;\n+                    }\n+                }\n+            });\n+        }\n+        \n+        for (String format : formats) {\n+            JSONUtilities.append(rankedFormats, format);\n+        }\n+    }\n+    \n+    static public List<JSONObject> getSelectedFileRecords(ImportingJob job) {\n+        List<JSONObject> results = new ArrayList<JSONObject>();\n+        \n+        JSONObject retrievalRecord = JSONUtilities.getObject(job.config, \"retrievalRecord\");\n+        if (retrievalRecord != null) {\n+            JSONArray fileRecordArray = JSONUtilities.getArray(retrievalRecord, \"files\");\n+            if (fileRecordArray != null) {\n+                JSONArray fileSelectionArray = JSONUtilities.getArray(job.config, \"fileSelection\");\n+                if (fileSelectionArray != null) {\n+                    for (int i = 0; i < fileSelectionArray.length(); i++) {\n+                        int index = JSONUtilities.getIntElement(fileSelectionArray, i, -1);\n+                        if (index >= 0 && index < fileRecordArray.length()) {\n+                            results.add(JSONUtilities.getObjectElement(fileRecordArray, index));\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return results;\n+    }\n+    \n+    static public void previewParse(ImportingJob job, String format, JSONObject optionObj, List<Exception> exceptions) {\n+        Format record = ImportingManager.formatToRecord.get(format);\n+        if (record == null || record.parser == null) {\n+            // TODO: what to do?\n+            return;\n+        }\n+        \n+        job.prepareNewProject();\n+        \n+        record.parser.parse(\n+            job.project,\n+            job.metadata,\n+            job,\n+            getSelectedFileRecords(job),\n+            format,\n+            100,\n+            optionObj,\n+            exceptions\n+        );\n+        \n+        job.project.update(); // update all internal models, indexes, caches, etc.\n+    }\n+    \n+    static public long createProject(\n+            final ImportingJob job,\n+            final String format,\n+            final JSONObject optionObj,\n+            final List<Exception> exceptions) {\n+        final Format record = ImportingManager.formatToRecord.get(format);\n+        if (record == null || record.parser == null) {\n+            // TODO: what to do?\n+            return -1;\n+        }\n+        \n+        JSONUtilities.safePut(job.config, \"state\", \"creating-project\");\n+        \n+        final Project project = new Project();\n+        new Thread() {\n+            public void run() {\n+                ProjectMetadata pm = new ProjectMetadata();\n+                pm.setName(JSONUtilities.getString(optionObj, \"projectName\", \"Untitled\"));\n+                pm.setEncoding(JSONUtilities.getString(optionObj, \"encoding\", \"UTF-8\"));\n+                \n+                record.parser.parse(\n+                    project,\n+                    pm,\n+                    job,\n+                    getSelectedFileRecords(job),\n+                    format,\n+                    -1,\n+                    optionObj,\n+                    exceptions\n+                );\n+                \n+                if (!job.canceled) {\n+                    project.update(); // update all internal models, indexes, caches, etc.\n+                    \n+                    ProjectManager.singleton.registerProject(project, pm);\n+                    \n+                    JSONUtilities.safePut(job.config, \"projectID\", project.id);\n+                    JSONUtilities.safePut(job.config, \"state\", \"created-project\");\n+                }\n+            }\n+        }.start();\n+        \n+        return project.id;\n+    }\n+    \n+    static public void setCreatingProjectProgress(ImportingJob job, String message, int percent) {\n+        JSONObject progress = JSONUtilities.getObject(job.config, \"progress\");\n+        if (progress == null) {\n+            progress = new JSONObject();\n+            JSONUtilities.safePut(job.config, \"progress\", progress);\n+        }\n+        JSONUtilities.safePut(progress, \"message\", message);\n+        JSONUtilities.safePut(progress, \"percent\", percent);\n+    }\n+}"
        },
        {
            "sha": "4e6015488b97e4ba12e38d42dc2cc0d963411a89",
            "filename": "main/src/com/google/refine/importing/UrlRewriter.java",
            "status": "renamed",
            "additions": 9,
            "deletions": 18,
            "changes": 27,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FUrlRewriter.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FUrlRewriter.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FUrlRewriter.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -31,23 +31,14 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \n */\n \n-var theImportJob = {};\n-var ui = {};\n-\n-var Refine = {\n-};\n-\n-function resize() {\n-    var header = $(\"#header\");\n-    \n-    var leftPanelWidth = 300;\n-    var width = $(window).width();\n-    var top = $(\"#header\").outerHeight();\n-    var height = $(window).height() - top;\n+package com.google.refine.importing;\n+\n+public interface UrlRewriter {\n+    static public class Result {\n+        public String rewrittenUrl;\n+        public String format;\n+        public boolean download;\n+    }\n     \n+    public Result rewrite(String url);\n }\n-\n-function onLoad() {\n-  $(window).bind(\"resize\", resize);\n-}\n-$(onLoad);\n\\ No newline at end of file",
            "previous_filename": "main/webapp/modules/core/scripts/import.js"
        },
        {
            "sha": "11e2de7b17b6323409302558cf28308ed6e91c4f",
            "filename": "main/src/com/google/refine/model/ColumnModel.java",
            "status": "modified",
            "additions": 22,
            "deletions": 22,
            "changes": 44,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fmodel%2FColumnModel.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fmodel%2FColumnModel.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fmodel%2FColumnModel.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -110,28 +110,28 @@ public void update() {\n     }\n     \n     synchronized public void addColumn(int index, Column column, boolean avoidNameCollision) throws ModelException {\n-    \tString baseName = column.getName();\n-    \t\n-    \tif (_nameToColumn.containsKey(baseName)) {\n-    \t\tif (!avoidNameCollision) {\n-    \t\t\tthrow new ModelException(\"Duplicated column name\");\n-    \t\t}\n-    \t}\n-    \t\n-    \tString name = baseName;\n-    \tint i = 1;\n-    \twhile (true) {\n-    \t\tif (_nameToColumn.containsKey(name)) {\n-    \t\t\ti++;\n-    \t\t\tname = baseName + i;\n-    \t\t} else {\n-    \t\t\tbreak;\n-    \t\t}\n-    \t}\n-    \t\n-    \tcolumn.setName(name);\n-\t\tcolumns.add(index < 0 ? columns.size() : index, column);\n-\t\t_nameToColumn.put(name, column); // so the next call can check\n+        String baseName = column.getName();\n+        \n+        if (_nameToColumn.containsKey(baseName)) {\n+            if (!avoidNameCollision) {\n+                throw new ModelException(\"Duplicated column name\");\n+            }\n+        }\n+        \n+        String name = baseName;\n+        int i = 1;\n+        while (true) {\n+            if (_nameToColumn.containsKey(name)) {\n+                i++;\n+                name = baseName + i;\n+            } else {\n+                break;\n+            }\n+        }\n+        \n+        column.setName(name);\n+        columns.add(index < 0 ? columns.size() : index, column);\n+        _nameToColumn.put(name, column); // so the next call can check\n     }\n     \n     synchronized public Column getColumnByName(String name) {"
        },
        {
            "sha": "d8c1e91373f525e79c740fc768b8d79458eb32d6",
            "filename": "main/src/com/google/refine/model/meta/FileUploadImportSource.java",
            "status": "removed",
            "additions": 0,
            "deletions": 62,
            "changes": 62,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/0fa99d21cab6edf83360182fcf46cb4153e22c83/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fmodel%2Fmeta%2FFileUploadImportSource.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/0fa99d21cab6edf83360182fcf46cb4153e22c83/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fmodel%2Fmeta%2FFileUploadImportSource.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fmodel%2Fmeta%2FFileUploadImportSource.java?ref=0fa99d21cab6edf83360182fcf46cb4153e22c83",
            "patch": "@@ -1,62 +0,0 @@\n-package com.google.refine.model.meta;\n-\n-import java.io.File;\n-import java.io.InputStream;\n-import java.util.Date;\n-import java.util.Properties;\n-\n-import javax.servlet.http.HttpServletRequest;\n-\n-import org.apache.commons.fileupload.FileItemIterator;\n-import org.apache.commons.fileupload.FileItemStream;\n-import org.apache.commons.fileupload.servlet.ServletFileUpload;\n-import org.json.JSONException;\n-import org.json.JSONObject;\n-import org.json.JSONWriter;\n-\n-import com.google.refine.commands.importing.ImportJob;\n-\n-public class FileUploadImportSource extends ImportSource {\n-    public String originalFileName;\n-\n-    @Override\n-    protected void customWrite(JSONWriter writer, Properties options)\n-            throws JSONException {\n-        writer.key(\"originalFileName\"); writer.value(originalFileName);\n-    }\n-\n-    @Override\n-    protected void customReconstruct(JSONObject obj) throws JSONException {\n-        if (obj.has(\"originalFileName\")) {\n-            originalFileName = obj.getString(\"originalFileName\");\n-        }\n-    }\n-    \n-    @Override\n-    public void retrieveContent(HttpServletRequest request, Properties options, ImportJob job) throws Exception {\n-        ServletFileUpload upload = new ServletFileUpload();\n-        FileItemIterator iter = upload.getItemIterator(request);\n-        while (iter.hasNext()) {\n-            FileItemStream item = iter.next();\n-            if (!item.isFormField()) {\n-                String fileName = item.getName();\n-                if (fileName.length() > 0) {\n-                    InputStream stream = item.openStream();\n-                    try {\n-                        File file = new File(job.dir, \"data\");\n-                        \n-                        this.accessTime = new Date();\n-                        this.contentType = item.getContentType();\n-                        this.encoding = request.getCharacterEncoding();\n-                        this.originalFileName = fileName;\n-                        this.size = saveStreamToFileOrDir(\n-                            item.openStream(), file, this.contentType, fileName, job, request.getContentLength());\n-                        this.isArchive = file.isDirectory();\n-                    } finally {\n-                        stream.close();\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n\\ No newline at end of file"
        },
        {
            "sha": "dc2ae87d26512ef86861f0eea5f1b53998902eba",
            "filename": "main/src/com/google/refine/model/meta/ImportConfig.java",
            "status": "removed",
            "additions": 0,
            "deletions": 5,
            "changes": 5,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/0fa99d21cab6edf83360182fcf46cb4153e22c83/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fmodel%2Fmeta%2FImportConfig.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/0fa99d21cab6edf83360182fcf46cb4153e22c83/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fmodel%2Fmeta%2FImportConfig.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fmodel%2Fmeta%2FImportConfig.java?ref=0fa99d21cab6edf83360182fcf46cb4153e22c83",
            "patch": "@@ -1,5 +0,0 @@\n-package com.google.refine.model.meta;\n-\n-public class ImportConfig {\n-\n-}"
        },
        {
            "sha": "2f695e8d8d63b1488d8e7dd8e72c10aafc314492",
            "filename": "main/src/com/google/refine/model/meta/ImportSource.java",
            "status": "removed",
            "additions": 0,
            "deletions": 167,
            "changes": 167,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/0fa99d21cab6edf83360182fcf46cb4153e22c83/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fmodel%2Fmeta%2FImportSource.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/0fa99d21cab6edf83360182fcf46cb4153e22c83/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fmodel%2Fmeta%2FImportSource.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fmodel%2Fmeta%2FImportSource.java?ref=0fa99d21cab6edf83360182fcf46cb4153e22c83",
            "patch": "@@ -1,167 +0,0 @@\n-package com.google.refine.model.meta;\n-\n-import java.io.BufferedOutputStream;\n-import java.io.File;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.Date;\n-import java.util.Properties;\n-import java.util.zip.GZIPInputStream;\n-import java.util.zip.ZipEntry;\n-import java.util.zip.ZipInputStream;\n-\n-import javax.servlet.http.HttpServletRequest;\n-\n-import org.apache.tools.bzip2.CBZip2InputStream;\n-import org.apache.tools.tar.TarEntry;\n-import org.apache.tools.tar.TarInputStream;\n-import org.json.JSONException;\n-import org.json.JSONObject;\n-import org.json.JSONWriter;\n-\n-import com.google.refine.Jsonizable;\n-import com.google.refine.commands.importing.ImportJob;\n-import com.google.refine.commands.importing.ImportManager;\n-import com.google.refine.util.ParsingUtilities;\n-\n-abstract public class ImportSource implements Jsonizable {\n-    public Date accessTime;\n-    public long size;\n-    public boolean isArchive = false;\n-    \n-    public String contentType;\n-    public String encoding;\n-    \n-    @Override\n-    public void write(JSONWriter writer, Properties options)\n-            throws JSONException {\n-        writer.object();\n-        writer.key(\"type\"); writer.value(ImportManager.getImportSourceClassName(this.getClass()));\n-        writer.key(\"accessTime\"); writer.value(ParsingUtilities.dateToString(accessTime));\n-        writer.key(\"size\"); writer.value(size);\n-        writer.key(\"isArchive\"); writer.value(isArchive);\n-        writer.key(\"contentType\"); writer.value(contentType);\n-        writer.key(\"encoding\"); writer.value(encoding);\n-        writer.endObject();\n-    }\n-    \n-    public void reconstruct(JSONObject obj) throws JSONException {\n-        if (obj.has(\"accessTime\")) {\n-            accessTime = ParsingUtilities.stringToDate(obj.getString(\"accessTime\"));\n-        }\n-        if (obj.has(\"size\")) {\n-            size = obj.getLong(\"size\");\n-        }\n-        if (obj.has(\"isArchive\")) {\n-            isArchive = obj.getBoolean(\"isArchive\");\n-        }\n-        if (obj.has(\"contentType\")) {\n-            contentType = obj.getString(\"contentType\");\n-        }\n-        if (obj.has(\"encoding\")) {\n-            encoding = obj.getString(\"encoding\");\n-        }\n-        customReconstruct(obj);\n-    }\n-    \n-    abstract public void retrieveContent(HttpServletRequest request, Properties options, ImportJob job)\n-        throws Exception;\n-    \n-    abstract protected void customWrite(JSONWriter writer, Properties options) throws JSONException;\n-    abstract protected void customReconstruct(JSONObject obj) throws JSONException;\n-    \n-    static protected long saveStreamToFileOrDir(\n-        InputStream is,\n-        File file,\n-        String contentType,\n-        String fileNameOrUrl,\n-        ImportJob job,\n-        long expectedSize\n-    ) throws IOException {\n-        InputStream archiveIS = null;\n-        if (fileNameOrUrl != null) {\n-            try {\n-                if (fileNameOrUrl.endsWith(\".tar.gz\") ||\n-                    fileNameOrUrl.endsWith(\".tar.gz.gz\") ||\n-                    fileNameOrUrl.endsWith(\".tgz\")) {\n-                    archiveIS = new TarInputStream(new GZIPInputStream(is));\n-                } else if (fileNameOrUrl.endsWith(\".tar.bz2\")) {\n-                    archiveIS = new TarInputStream(new CBZip2InputStream(is));\n-                } else if (fileNameOrUrl.endsWith(\".tar\")) {\n-                    archiveIS = new TarInputStream(is);\n-                } else if (fileNameOrUrl.endsWith(\".zip\")) {\n-                    archiveIS = new ZipInputStream(is);\n-                }\n-            } catch (IOException e) {\n-                archiveIS = null;\n-            }\n-        }\n-        \n-        job.bytesSaved = 0;\n-        if (archiveIS == null) {\n-            saveStreamToFile(is, file, job, true, expectedSize);\n-        } else {\n-            job.retrievingProgress = -1;\n-            \n-            // NOTE(SM): unfortunately, java.io does not provide any generalized class for\n-            // archive-like input streams so while both TarInputStream and ZipInputStream\n-            // behave precisely the same, there is no polymorphic behavior so we have\n-            // to treat each instance explicitly... one of those times you wish you had\n-            // closures\n-            \n-            if (archiveIS instanceof TarInputStream) {\n-                TarInputStream tis = (TarInputStream) archiveIS;\n-                TarEntry te;\n-                while ((te = tis.getNextEntry()) != null) {\n-                    if (!te.isDirectory()) {\n-                        saveStreamToFile(tis, new File(file, te.getName()), job, false, 0);\n-                    }\n-                }\n-            } else if (archiveIS instanceof ZipInputStream) {\n-                ZipInputStream zis = (ZipInputStream) archiveIS;\n-                ZipEntry ze;\n-                long compressedSize = 0;\n-                while ((ze = zis.getNextEntry()) != null) {\n-                    if (!ze.isDirectory()) {\n-                        saveStreamToFile(zis, new File(file, ze.getName()), job, false, 0);\n-                        \n-                        compressedSize += ze.getCompressedSize(); // this might be negative if not known\n-                        if (compressedSize > 0) {\n-                            job.retrievingProgress = (int) (compressedSize * 100 / expectedSize);\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-        return job.bytesSaved;\n-    }\n-    \n-    static private void saveStreamToFile(\n-        InputStream is,\n-        File file,\n-        ImportJob job,\n-        boolean updateProgress,\n-        long expectedSize\n-    ) throws IOException {\n-        byte data[] = new byte[4096];\n-        \n-        file.getParentFile().mkdirs();\n-        \n-        FileOutputStream fos = new FileOutputStream(file);\n-        BufferedOutputStream bos = new BufferedOutputStream(fos, data.length);\n-        \n-        int count;\n-        while ((count = is.read(data, 0, data.length)) != -1) {\n-           bos.write(data, 0, count);\n-           \n-           job.bytesSaved += count;\n-           if (updateProgress) {\n-               job.retrievingProgress = (int) (job.bytesSaved * 100 / expectedSize);\n-           }\n-        }\n-        \n-        bos.flush();\n-        bos.close();\n-    }\n-}"
        },
        {
            "sha": "ddfdf1e894dfe1d27309a18e33da6d45acd9c177",
            "filename": "main/src/com/google/refine/model/meta/TextImportSource.java",
            "status": "removed",
            "additions": 0,
            "deletions": 28,
            "changes": 28,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/0fa99d21cab6edf83360182fcf46cb4153e22c83/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fmodel%2Fmeta%2FTextImportSource.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/0fa99d21cab6edf83360182fcf46cb4153e22c83/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fmodel%2Fmeta%2FTextImportSource.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fmodel%2Fmeta%2FTextImportSource.java?ref=0fa99d21cab6edf83360182fcf46cb4153e22c83",
            "patch": "@@ -1,28 +0,0 @@\n-package com.google.refine.model.meta;\n-\n-import java.util.Properties;\n-\n-import javax.servlet.http.HttpServletRequest;\n-\n-import org.json.JSONException;\n-import org.json.JSONObject;\n-import org.json.JSONWriter;\n-\n-import com.google.refine.commands.importing.ImportJob;\n-\n-public class TextImportSource extends ImportSource {\n-    @Override\n-    protected void customWrite(JSONWriter writer, Properties options)\n-            throws JSONException {\n-    }\n-    \n-    @Override\n-    protected void customReconstruct(JSONObject obj) throws JSONException {\n-    }\n-    \n-    @Override\n-    public void retrieveContent(HttpServletRequest request, Properties options, ImportJob job) throws Exception {\n-        // TODO Auto-generated method stub\n-        \n-    }\n-}\n\\ No newline at end of file"
        },
        {
            "sha": "b40748c7549b76f6db6b1e71e0a727414cc02f2e",
            "filename": "main/src/com/google/refine/model/meta/WebImportSource.java",
            "status": "removed",
            "additions": 0,
            "deletions": 34,
            "changes": 34,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/0fa99d21cab6edf83360182fcf46cb4153e22c83/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fmodel%2Fmeta%2FWebImportSource.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/0fa99d21cab6edf83360182fcf46cb4153e22c83/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fmodel%2Fmeta%2FWebImportSource.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fmodel%2Fmeta%2FWebImportSource.java?ref=0fa99d21cab6edf83360182fcf46cb4153e22c83",
            "patch": "@@ -1,34 +0,0 @@\n-package com.google.refine.model.meta;\n-\n-import java.util.Properties;\n-\n-import javax.servlet.http.HttpServletRequest;\n-\n-import org.json.JSONException;\n-import org.json.JSONObject;\n-import org.json.JSONWriter;\n-\n-import com.google.refine.commands.importing.ImportJob;\n-\n-public class WebImportSource extends ImportSource {\n-    public String url;\n-    \n-    @Override\n-    protected void customWrite(JSONWriter writer, Properties options)\n-            throws JSONException {\n-        writer.key(\"url\"); writer.value(url);\n-    }\n-    \n-    @Override\n-    protected void customReconstruct(JSONObject obj) throws JSONException {\n-        if (obj.has(\"url\")) {\n-            url = obj.getString(\"url\");\n-        }\n-    }\n-    \n-    @Override\n-    public void retrieveContent(HttpServletRequest request, Properties options, ImportJob job) throws Exception {\n-        // TODO Auto-generated method stub\n-        \n-    }\n-}\n\\ No newline at end of file"
        },
        {
            "sha": "0e9757564e7f83b70b9ca01229688d055339385f",
            "filename": "main/src/com/google/refine/util/JSONUtilities.java",
            "status": "modified",
            "additions": 172,
            "deletions": 17,
            "changes": 189,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Futil%2FJSONUtilities.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Futil%2FJSONUtilities.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Futil%2FJSONUtilities.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -35,15 +35,25 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \n import java.util.ArrayList;\n import java.util.Calendar;\n+import java.util.Collection;\n import java.util.Date;\n import java.util.List;\n+import java.util.Map;\n \n import org.json.JSONArray;\n import org.json.JSONException;\n import org.json.JSONObject;\n import org.json.JSONWriter;\n \n public class JSONUtilities {\n+    static public JSONObject getObject(JSONObject obj, String key) {\n+        try {\n+            return obj.getJSONObject(key);\n+        } catch (JSONException e) {\n+            return null;\n+        }\n+    }\n+    \n     static public String getString(JSONObject obj, String key, String def) {\n         try {\n             return obj.getString(key);\n@@ -94,6 +104,14 @@ static public Date getDate(JSONObject obj, String key, Date def) {\n         }\n     }\n     \n+    static public JSONArray getArray(JSONObject obj, String key) {\n+        try {\n+            return obj.getJSONArray(key);\n+        } catch (JSONException e) {\n+            return null;\n+        }\n+    }\n+    \n     static public int[] getIntArray(JSONObject obj, String key) {\n         try {\n             JSONArray a = obj.getJSONArray(key);\n@@ -144,24 +162,161 @@ static public void writeStringList(JSONWriter writer, List<String> list) throws\n         writer.endArray();\n     }\n     \n+    static public void writeStringArray(JSONWriter writer, String[] strings) throws JSONException {\n+        writer.array();\n+        for (String s : strings) {\n+            writer.value(s);\n+        }\n+        writer.endArray();\n+    }\n+    \n     static public void putField(JSONObject obj, String key, Object value) throws JSONException {\n-    \tif (value instanceof Integer) {\n-    \t\tobj.put(key, ((Integer) value).intValue());\n-    \t} else if (value instanceof Long) {\n-    \t\tobj.put(key, ((Long) value).intValue());\n-    \t} else if (value instanceof Number) {\n-    \t\tobj.put(key, ((Double) value).doubleValue());\n-    \t} else if (value instanceof Boolean) {\n-    \t\tobj.put(key, (Boolean) value);\n-    \t} else if (value instanceof Date) {\n-    \t\tobj.put(key, ParsingUtilities.dateToString((Date) value));\n-    \t} else if (value instanceof Calendar) {\n-    \t\tobj.put(key, ParsingUtilities.dateToString(((Calendar) value).getTime()));\n-    \t} else if (value instanceof String) {\n-    \t\tobj.put(key, (String) value);\n-    \t} else {\n-    \t\tobj.put(key, value.toString());\n-    \t}\n+        if (value instanceof Integer) {\n+            obj.put(key, ((Integer) value).intValue());\n+        } else if (value instanceof Long) {\n+            obj.put(key, ((Long) value).intValue());\n+        } else if (value instanceof Number) {\n+            obj.put(key, ((Double) value).doubleValue());\n+        } else if (value instanceof Boolean) {\n+            obj.put(key, (Boolean) value);\n+        } else if (value instanceof Date) {\n+            obj.put(key, ParsingUtilities.dateToString((Date) value));\n+        } else if (value instanceof Calendar) {\n+            obj.put(key, ParsingUtilities.dateToString(((Calendar) value).getTime()));\n+        } else if (value instanceof String) {\n+            obj.put(key, (String) value);\n+        } else {\n+            obj.put(key, value.toString());\n+        }\n+    }\n+    \n+    static public JSONObject getObjectElement(JSONArray a, int i) {\n+        try {\n+            return a.getJSONObject(i);\n+        } catch (JSONException e) {\n+            return null;\n+        }\n+    }\n+    \n+    static public int getIntElement(JSONArray a, int i, int def) {\n+        try {\n+            return a.getInt(i);\n+        } catch (JSONException e) {\n+            return def;\n+        }\n+    }\n+    \n+    static public void append(JSONArray a, JSONObject element) {\n+        try {\n+            a.put(a.length(), element);\n+        } catch (JSONException e) {\n+        }\n+    }\n+    \n+    static public void append(JSONArray a, Object element) {\n+        try {\n+            a.put(a.length(), element);\n+        } catch (JSONException e) {\n+        }\n+    }\n+    \n+    static public void append(JSONArray a, int element) {\n+        try {\n+            a.put(a.length(), element);\n+        } catch (JSONException e) {\n+        }\n+    }\n+    \n+    static public void append(JSONArray a, long element) {\n+        try {\n+            a.put(a.length(), element);\n+        } catch (JSONException e) {\n+        }\n+    }\n+    \n+    static public void append(JSONArray a, double element) {\n+        try {\n+            a.put(a.length(), element);\n+        } catch (JSONException e) {\n+        }\n+    }\n+    \n+    static public void append(JSONArray a, boolean element) {\n+        try {\n+            a.put(a.length(), element);\n+        } catch (JSONException e) {\n+        }\n+    }\n+    \n+    static public void append(JSONArray a, String element) {\n+        try {\n+            a.put(a.length(), element);\n+        } catch (JSONException e) {\n+        }\n+    }\n+    \n+    static public void safePut(JSONObject obj, String key, int value) {\n+        try {\n+            obj.put(key, value);\n+        } catch (JSONException e) {\n+            // Ignore: the JSONObject is just too happy about throwing exceptions.\n+        }\n+    }\n+    \n+    static public void safePut(JSONObject obj, String key, long value) {\n+        try {\n+            obj.put(key, value);\n+        } catch (JSONException e) {\n+            // Ignore: the JSONObject is just too happy about throwing exceptions.\n+        }\n+    }\n+    \n+    static public void safePut(JSONObject obj, String key, double value) {\n+        try {\n+            obj.put(key, value);\n+        } catch (JSONException e) {\n+            // Ignore: the JSONObject is just too happy about throwing exceptions.\n+        }\n+    }\n+    \n+    static public void safePut(JSONObject obj, String key, boolean value) {\n+        try {\n+            obj.put(key, value);\n+        } catch (JSONException e) {\n+            // Ignore: the JSONObject is just too happy about throwing exceptions.\n+        }\n+    }\n+    \n+    static public void safePut(JSONObject obj, String key, String value) {\n+        try {\n+            obj.put(key, value);\n+        } catch (JSONException e) {\n+            // Ignore: the JSONObject is just too happy about throwing exceptions.\n+        }\n+    }\n+    \n+    static public void safePut(JSONObject obj, String key, Collection<?> value) {\n+        try {\n+            obj.put(key, value);\n+        } catch (JSONException e) {\n+            // Ignore: the JSONObject is just too happy about throwing exceptions.\n+        }\n+    }\n+    \n+    static public void safePut(JSONObject obj, String key, Map<?, ?> value) {\n+        try {\n+            obj.put(key, value);\n+        } catch (JSONException e) {\n+            // Ignore: the JSONObject is just too happy about throwing exceptions.\n+        }\n+    }\n+    \n+    static public void safePut(JSONObject obj, String key, Object value) {\n+        try {\n+            obj.put(key, value);\n+        } catch (JSONException e) {\n+            // Ignore: the JSONObject is just too happy about throwing exceptions.\n+        }\n     }\n     \n     static public Object[] toArray(JSONArray a) throws JSONException {"
        },
        {
            "sha": "13393b67a277895b232d19cc41027008d4977819",
            "filename": "main/src/com/google/refine/util/TrackingInputStream.java",
            "status": "added",
            "additions": 64,
            "deletions": 0,
            "changes": 64,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Futil%2FTrackingInputStream.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Futil%2FTrackingInputStream.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Futil%2FTrackingInputStream.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,64 @@\n+package com.google.refine.util;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+public class TrackingInputStream extends InputStream {\n+    final private InputStream is;\n+    protected long bytesRead;\n+\n+    public TrackingInputStream(InputStream is) {\n+        this.is = is;\n+    }\n+\n+    public long getBytesRead() {\n+        return bytesRead;\n+    }\n+\n+    @Override\n+    public int read() throws IOException {\n+        return (int) track(is.read());\n+    }\n+\n+    @Override\n+    public int read(byte[] b) throws IOException {\n+        return (int) track(is.read(b));\n+    }\n+\n+    @Override\n+    public int read(byte[] b, int off, int len) throws IOException {\n+        return (int) track(is.read(b, off, len));\n+    }\n+\n+    @Override\n+    public long skip(long n) throws IOException {\n+        return track(is.skip(n));\n+    }\n+\n+    @Override\n+    public void mark(int readlimit) {\n+        is.mark(readlimit);\n+    }\n+\n+    @Override\n+    public void reset() throws IOException {\n+        is.reset();\n+    }\n+\n+    @Override\n+    public boolean markSupported() {\n+        return is.markSupported();\n+    }\n+    \n+    @Override\n+    public void close() throws IOException {\n+        is.close();\n+    }\n+\n+    protected long track(long bytesRead) {\n+        if (bytesRead > 0) {\n+            this.bytesRead += bytesRead;\n+        }\n+        return bytesRead;\n+    }\n+}"
        },
        {
            "sha": "f75ff422ea06594326b90df6e7145d88ce74d01a",
            "filename": "main/tests/server/src/com/google/refine/tests/RefineTest.java",
            "status": "modified",
            "additions": 45,
            "deletions": 0,
            "changes": 45,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2FRefineTest.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2FRefineTest.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2FRefineTest.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -33,6 +33,13 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \n package com.google.refine.tests;\n \n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n import org.slf4j.Logger;\n import org.testng.Assert;\n import org.testng.annotations.BeforeSuite;\n@@ -41,6 +48,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import com.google.refine.model.Column;\n import com.google.refine.model.Project;\n import com.google.refine.model.Row;\n+import com.google.refine.util.JSONUtilities;\n \n public class RefineTest {\n \n@@ -82,4 +90,41 @@ public void log(Project project) {\n             logger.info(sb.toString());\n         }\n     }\n+    \n+    //----helpers----\n+    \n+    static public void whenGetBooleanOption(String name, JSONObject options, Boolean def){\n+        when(options.has(name)).thenReturn(true);\n+        when(JSONUtilities.getBoolean(options, name, def)).thenReturn(def);\n+    }\n+    \n+    static public void whenGetIntegerOption(String name, JSONObject options, int def){\n+        when(options.has(name)).thenReturn(true);\n+        when(JSONUtilities.getInt(options, name, def)).thenReturn(def);\n+    }\n+    \n+    static public void whenGetStringOption(String name, JSONObject options, String def){\n+        when(options.has(name)).thenReturn(true);\n+        when(JSONUtilities.getString(options, name, def)).thenReturn(def);\n+    }\n+    \n+    static public void whenGetObjectOption(String name, JSONObject options, JSONObject def){\n+        when(options.has(name)).thenReturn(true);\n+        when(JSONUtilities.getObject(options, name)).thenReturn(def);\n+    }\n+    \n+    static public void whenGetArrayOption(String name, JSONObject options, JSONArray def){\n+        when(options.has(name)).thenReturn(true);\n+        when(JSONUtilities.getArray(options, name)).thenReturn(def);\n+    }\n+    \n+    static public void verifyGetOption(String name, JSONObject options){\n+        verify(options, times(1)).has(name);\n+        try {\n+            verify(options, times(1)).get(name);\n+        } catch (JSONException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        }\n+    }\n }"
        },
        {
            "sha": "3fc4dc4c33e4cae5b37791a661a95fed8d797e36",
            "filename": "main/tests/server/src/com/google/refine/tests/importers/FixedWidthImporterTests.java",
            "status": "modified",
            "additions": 25,
            "deletions": 68,
            "changes": 93,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FFixedWidthImporterTests.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FFixedWidthImporterTests.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FFixedWidthImporterTests.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -1,94 +1,68 @@\n package com.google.refine.tests.importers;\r\n \r\n \r\n-import static org.mockito.Mockito.mock;\r\n import static org.mockito.Mockito.times;\r\n import static org.mockito.Mockito.verify;\r\n-import static org.mockito.Mockito.when;\r\n \r\n import java.io.StringReader;\r\n-import java.util.Properties;\r\n \r\n+import org.json.JSONArray;\r\n import org.slf4j.LoggerFactory;\r\n import org.testng.Assert;\r\n import org.testng.annotations.AfterMethod;\r\n import org.testng.annotations.BeforeMethod;\r\n import org.testng.annotations.BeforeTest;\r\n import org.testng.annotations.Test;\r\n \r\n-import com.google.refine.ProjectMetadata;\r\n import com.google.refine.importers.FixedWidthImporter;\r\n-import com.google.refine.importers.ImportException;\r\n-import com.google.refine.model.Project;\r\n-import com.google.refine.tests.RefineTest;\r\n+import com.google.refine.util.JSONUtilities;\r\n \r\n-public class FixedWidthImporterTests extends RefineTest {\r\n+public class FixedWidthImporterTests extends ImporterTest {\r\n     @BeforeTest\r\n     public void init() {\r\n         logger = LoggerFactory.getLogger(this.getClass());\r\n     }\r\n \r\n     //constants\r\n     String SAMPLE_ROW = \"NDB_NoShrt_DescWater\";\r\n-    String SAMPLE_ROW_WIDTHS = \"6,9,5\";\r\n \r\n     //System Under Test\r\n     FixedWidthImporter SUT = null;\r\n \r\n-    //mock dependencies\r\n-    Project project = null;\r\n-    Properties properties = null;\r\n-\r\n-\r\n     @BeforeMethod\r\n     public void SetUp(){\r\n+        super.SetUp();\r\n         SUT = new FixedWidthImporter();\r\n-        project = new Project(); //FIXME - should we try and use mock(Project.class); - seems unnecessary complexity\r\n-        properties = mock(Properties.class);\r\n     }\r\n \r\n     @AfterMethod\r\n     public void TearDown(){\r\n         SUT = null;\r\n-        project = null;\r\n-        properties = null;\r\n-    }\r\n-    \r\n-    //TODO a lot of these tests are very similar to the TsvCsvImporterTests.  It might be possible to overlap them\r\n-    \r\n-    @Test\r\n-    public void canParseSeparator(){\r\n-        int[] i = null;\r\n-        try {\r\n-            i = SUT.getColumnWidthsFromString(\"1,2,3\");\r\n-        } catch (ImportException e) {\r\n-            Assert.fail(e.getMessage());\r\n-        }\r\n-        \r\n-        Assert.assertNotNull(i);\r\n-        Assert.assertEquals(i[0], 1);\r\n-        Assert.assertEquals(i[1], 2);\r\n-        Assert.assertEquals(i[2], 3);\r\n+        super.TearDown();\r\n     }\r\n     \r\n     //---------------------read tests------------------------\r\n     @Test\r\n     public void readFixedWidth(){\r\n         StringReader reader = new StringReader(SAMPLE_ROW + \"\\nTooShort\");\r\n-\r\n-        when(properties.getProperty(\"fixed-column-widths\")).thenReturn(SAMPLE_ROW_WIDTHS);\r\n-        whenGetIntegerOption(\"ignore\",properties,0);\r\n-        whenGetIntegerOption(\"header-lines\",properties,0);\r\n-        whenGetIntegerOption(\"limit\",properties,-1);\r\n-        whenGetIntegerOption(\"skip\",properties,0);\r\n-\r\n+        \r\n+        JSONArray columnWidths = new JSONArray();\r\n+        JSONUtilities.append(columnWidths, 6);\r\n+        JSONUtilities.append(columnWidths, 9);\r\n+        JSONUtilities.append(columnWidths, 5);\r\n+        \r\n+        whenGetArrayOption(\"columnWidths\", options, columnWidths);\r\n+        whenGetIntegerOption(\"ignoreLines\", options, 0);\r\n+        whenGetIntegerOption(\"headerLines\", options, 0);\r\n+        whenGetIntegerOption(\"skipDataLines\", options, 0);\r\n+        whenGetIntegerOption(\"limit\", options, -1);\r\n+        \r\n         try {\r\n-            SUT.read(reader, project, new ProjectMetadata(), properties);\r\n+            parseOneFile(SUT, reader);\r\n         } catch (Exception e) {\r\n             Assert.fail(e.getMessage());\r\n         }\r\n-\r\n-\r\n+        \r\n         Assert.assertEquals(project.rows.size(), 2);\r\n         Assert.assertEquals(project.rows.get(0).cells.size(), 3);\r\n         Assert.assertEquals((String)project.rows.get(0).cells.get(0).value, \"NDB_No\");\r\n@@ -98,28 +72,11 @@ public void readFixedWidth(){\n         Assert.assertEquals((String)project.rows.get(1).cells.get(0).value, \"TooSho\");\r\n         Assert.assertEquals((String)project.rows.get(1).cells.get(1).value, \"rt\");\r\n         Assert.assertNull(project.rows.get(1).cells.get(2));\r\n-\r\n-        verify(properties, times(1)).getProperty(\"fixed-column-widths\");\r\n-        verifyGetOption(\"ignore\",properties);\r\n-        verifyGetOption(\"header-lines\",properties);\r\n-        verifyGetOption(\"limit\",properties);\r\n-        verifyGetOption(\"skip\",properties);\r\n-    }\r\n-    \r\n-    //----helpers----\r\n-    \r\n-    public void whenGetBooleanOption(String name, Properties properties, Boolean def){\r\n-        when(properties.containsKey(name)).thenReturn(true);\r\n-        when(properties.getProperty(name)).thenReturn(Boolean.toString(def));\r\n-    }\r\n-    \r\n-    public void whenGetIntegerOption(String name, Properties properties, int def){\r\n-        when(properties.containsKey(name)).thenReturn(true);\r\n-        when(properties.getProperty(name)).thenReturn(Integer.toString(def));\r\n-    }\r\n-    \r\n-    public void verifyGetOption(String name, Properties properties){\r\n-        verify(properties, times(1)).containsKey(name);\r\n-        verify(properties, times(1)).getProperty(name);\r\n+        \r\n+        JSONUtilities.getIntArray(verify(options, times(1)), \"columnWidths\");\r\n+        verifyGetOption(\"ignore\", options);\r\n+        verifyGetOption(\"header-lines\", options);\r\n+        verifyGetOption(\"limit\", options);\r\n+        verifyGetOption(\"skip\", options);\r\n     }\r\n }\r"
        },
        {
            "sha": "aa5c0d9ff421c565f282c6fcf2491f7fb415abdb",
            "filename": "main/tests/server/src/com/google/refine/tests/importers/ImporterTest.java",
            "status": "added",
            "additions": 109,
            "deletions": 0,
            "changes": 109,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FImporterTest.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FImporterTest.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FImporterTest.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,109 @@\n+package com.google.refine.tests.importers;\n+\n+import static org.mockito.Mockito.mock;\n+\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.util.ArrayList;\n+\n+import org.json.JSONObject;\n+\n+import com.google.refine.ProjectMetadata;\n+import com.google.refine.importers.ImportingParserBase;\n+import com.google.refine.importers.tree.ImportColumnGroup;\n+import com.google.refine.importers.tree.TreeImportingParserBase;\n+import com.google.refine.importers.tree.XmlImportUtilities;\n+import com.google.refine.importing.ImportingJob;\n+import com.google.refine.importing.ImportingManager;\n+import com.google.refine.model.Project;\n+import com.google.refine.tests.RefineTest;\n+\n+abstract class ImporterTest extends RefineTest {\n+    //mock dependencies\n+    protected Project project;\n+    protected ProjectMetadata metadata;\n+    protected ImportingJob job;\n+    \n+    protected JSONObject options;\n+    \n+    public void SetUp(){\n+        //FIXME - should we try and use mock(Project.class); - seems unnecessary complexity\n+        project = new Project();\n+        metadata = new ProjectMetadata();\n+        job = ImportingManager.createJob();\n+        \n+        options = mock(JSONObject.class);\n+    }\n+    \n+    public void TearDown(){\n+        project = null;\n+        metadata = null;\n+        \n+        ImportingManager.disposeJob(job.id);\n+        job = null;\n+        \n+        options = null;\n+    }\n+    \n+    protected void parseOneFile(ImportingParserBase parser, Reader reader) {\n+        parser.parseOneFile(\n+            project,\n+            metadata,\n+            job,\n+            \"file-source\",\n+            reader,\n+            -1,\n+            options,\n+            new ArrayList<Exception>()\n+        );\n+        project.update();\n+    }\n+    \n+    protected void parseOneFile(ImportingParserBase parser, InputStream inputStream) {\n+        parser.parseOneFile(\n+            project,\n+            metadata,\n+            job,\n+            \"file-source\",\n+            inputStream,\n+            -1,\n+            options,\n+            new ArrayList<Exception>()\n+        );\n+        project.update();\n+    }\n+    \n+    protected void parseOneFile(TreeImportingParserBase parser, Reader reader) {\n+        ImportColumnGroup rootColumnGroup = new ImportColumnGroup();\n+        parser.parseOneFile(\n+            project,\n+            metadata,\n+            job,\n+            \"file-source\",\n+            reader,\n+            rootColumnGroup,\n+            -1,\n+            options,\n+            new ArrayList<Exception>()\n+        );\n+        XmlImportUtilities.createColumnsFromImport(project, rootColumnGroup);\n+        project.columnModel.update();\n+    }\n+    \n+    protected void parseOneFile(TreeImportingParserBase parser, InputStream inputStream) {\n+        ImportColumnGroup rootColumnGroup = new ImportColumnGroup();\n+        parser.parseOneFile(\n+            project,\n+            metadata,\n+            job,\n+            \"file-source\",\n+            inputStream,\n+            rootColumnGroup,\n+            -1,\n+            options,\n+            new ArrayList<Exception>()\n+        );\n+        XmlImportUtilities.createColumnsFromImport(project, rootColumnGroup);\n+        project.columnModel.update();\n+    }\n+}"
        },
        {
            "sha": "bc72399a96ced52eb944104ee6e2a816b356f30b",
            "filename": "main/tests/server/src/com/google/refine/tests/importers/JsonImporterTests.java",
            "status": "modified",
            "additions": 32,
            "deletions": 36,
            "changes": 68,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FJsonImporterTests.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FJsonImporterTests.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FJsonImporterTests.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -33,12 +33,10 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \r\n package com.google.refine.tests.importers;\r\n \r\n-import static org.mockito.Mockito.mock;\r\n-\r\n import java.io.ByteArrayInputStream;\r\n import java.io.IOException;\r\n+import java.io.StringReader;\r\n import java.io.UnsupportedEncodingException;\r\n-import java.util.Properties;\r\n \r\n import org.slf4j.LoggerFactory;\r\n import org.testng.Assert;\r\n@@ -47,44 +45,42 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import org.testng.annotations.BeforeTest;\r\n import org.testng.annotations.Test;\r\n \r\n-import com.google.refine.ProjectMetadata;\r\n import com.google.refine.importers.JsonImporter;\r\n-import com.google.refine.importers.parsers.JSONParser;\r\n-import com.google.refine.importers.parsers.TreeParserToken;\r\n-import com.google.refine.model.Project;\r\n+import com.google.refine.importers.JsonImporter.JSONTreeReader;\r\n+import com.google.refine.importers.tree.TreeReader.Token;\r\n import com.google.refine.model.Row;\r\n-import com.google.refine.tests.RefineTest;\r\n \r\n-public class JsonImporterTests extends RefineTest {\r\n+public class JsonImporterTests extends ImporterTest {\r\n \t@BeforeTest\r\n     public void init() {\r\n         logger = LoggerFactory.getLogger(this.getClass());\r\n     }\r\n \r\n \r\n     //dependencies\r\n-    Project project = null;\r\n-    Properties options = null;\r\n     ByteArrayInputStream inputStream = null;\r\n \r\n     //System Under Test\r\n     JsonImporter SUT = null;\r\n \r\n-\r\n     @BeforeMethod\r\n     public void SetUp(){\r\n+        super.SetUp();\r\n         SUT = new JsonImporter();\r\n-        project = new Project();\r\n-        options = mock(Properties.class);\r\n     }\r\n \r\n     @AfterMethod\r\n-    public void TearDown() throws IOException{\r\n+    public void TearDown() {\r\n         SUT = null;\r\n-        project = null;\r\n-        options = null;\r\n-        if (inputStream != null) inputStream.close();\r\n-        inputStream = null;\r\n+        if (inputStream != null) {\r\n+            try {\r\n+                inputStream.close();\r\n+            } catch (IOException e) {\r\n+                // Ignore\r\n+            }\r\n+            inputStream = null;\r\n+        }\r\n+        super.TearDown();\r\n     }\r\n \r\n     @Test\r\n@@ -181,8 +177,8 @@ public void EnsureJSONParserHandlesgetLocalNameCorrectly() throws Exception{\n         String sampleJson2 = \"{\\\"field\\\":{}}\";\r\n         String sampleJson3 = \"{\\\"field\\\":[{},{}]}\";\r\n         \r\n-        JSONParser parser = new JSONParser(new ByteArrayInputStream( sampleJson.getBytes( \"UTF-8\" ) ));\r\n-        TreeParserToken token = TreeParserToken.Ignorable;\r\n+        JSONTreeReader parser = new JSONTreeReader(new StringReader(sampleJson));\r\n+        Token token = Token.Ignorable;\r\n         int i = 0;\r\n         try{\r\n             while(token != null){\r\n@@ -191,17 +187,17 @@ public void EnsureJSONParserHandlesgetLocalNameCorrectly() throws Exception{\n                     break;\r\n                 i++;\r\n                 if(i == 3){\r\n-                    Assert.assertEquals(TreeParserToken.Value, token);\r\n-                    Assert.assertEquals(\"field\", parser.getLocalName());\r\n+                    Assert.assertEquals(Token.Value, token);\r\n+                    Assert.assertEquals(\"field\", parser.getFieldName());\r\n                 }\r\n             }\r\n         }catch(Exception e){\r\n             //silent\r\n         }\r\n         \r\n         \r\n-        parser = new JSONParser(new ByteArrayInputStream( sampleJson2.getBytes( \"UTF-8\" ) ) );\r\n-        token = TreeParserToken.Ignorable;\r\n+        parser = new JSONTreeReader(new StringReader(sampleJson2));\r\n+        token = Token.Ignorable;\r\n         i = 0;\r\n         try{\r\n             while(token != null){\r\n@@ -210,16 +206,16 @@ public void EnsureJSONParserHandlesgetLocalNameCorrectly() throws Exception{\n                     break;\r\n                 i++;\r\n                 if(i == 3){\r\n-                    Assert.assertEquals(TreeParserToken.StartEntity, token);\r\n-                    Assert.assertEquals(parser.getLocalName(), \"field\");\r\n+                    Assert.assertEquals(Token.StartEntity, token);\r\n+                    Assert.assertEquals(parser.getFieldName(), \"field\");\r\n                 }\r\n             }\r\n         }catch(Exception e){\r\n             //silent\r\n         }\r\n         \r\n-        parser = new JSONParser(new ByteArrayInputStream( sampleJson3.getBytes( \"UTF-8\" ) ) );\r\n-        token = TreeParserToken.Ignorable;\r\n+        parser = new JSONTreeReader(new StringReader(sampleJson3));\r\n+        token = Token.Ignorable;\r\n         i = 0;\r\n         try{\r\n             while(token != null){\r\n@@ -228,16 +224,16 @@ public void EnsureJSONParserHandlesgetLocalNameCorrectly() throws Exception{\n                     break;\r\n                 i++;\r\n                 if(i == 3){\r\n-                    Assert.assertEquals(token, TreeParserToken.StartEntity);\r\n-                    Assert.assertEquals(parser.getLocalName(), \"field\");\r\n+                    Assert.assertEquals(token, Token.StartEntity);\r\n+                    Assert.assertEquals(parser.getFieldName(), \"field\");\r\n                 }\r\n                 if(i == 4){\r\n-                    Assert.assertEquals(token, TreeParserToken.StartEntity);\r\n-                    Assert.assertEquals(parser.getLocalName(), \"__anonymous__\");\r\n+                    Assert.assertEquals(token, Token.StartEntity);\r\n+                    Assert.assertEquals(parser.getFieldName(), \"__anonymous__\");\r\n                 }\r\n                 if(i == 6){\r\n-                    Assert.assertEquals(token, TreeParserToken.StartEntity);\r\n-                    Assert.assertEquals(parser.getLocalName(), \"__anonymous__\");\r\n+                    Assert.assertEquals(token, Token.StartEntity);\r\n+                    Assert.assertEquals(parser.getFieldName(), \"__anonymous__\");\r\n                 }\r\n             }\r\n         }catch(Exception e){\r\n@@ -352,7 +348,7 @@ private void RunTest(String testString){\n         }\r\n \r\n         try {\r\n-            SUT.read(inputStream, project, new ProjectMetadata(), options);\r\n+            parseOneFile(SUT, inputStream);\r\n         } catch (Exception e) {\r\n             Assert.fail();\r\n         }\r"
        },
        {
            "sha": "a371f681d8c62869a689826b88156cf7228216b3",
            "filename": "main/tests/server/src/com/google/refine/tests/importers/RdfTripleImporterTests.java",
            "status": "modified",
            "additions": 8,
            "deletions": 19,
            "changes": 27,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FRdfTripleImporterTests.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FRdfTripleImporterTests.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FRdfTripleImporterTests.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -34,21 +34,17 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n package com.google.refine.tests.importers;\n \n import java.io.StringReader;\n-import java.util.Properties;\n \n import org.slf4j.LoggerFactory;\n import org.testng.Assert;\n import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.BeforeTest;\n import org.testng.annotations.Test;\n \n-import com.google.refine.ProjectMetadata;\n import com.google.refine.importers.RdfTripleImporter;\n-import com.google.refine.model.Project;\n-import com.google.refine.tests.RefineTest;\n+import com.google.refine.util.JSONUtilities;\n \n-\n-public class RdfTripleImporterTests extends RefineTest {\n+public class RdfTripleImporterTests extends ImporterTest {\n     \n     @BeforeTest\n     public void init() {\n@@ -58,15 +54,12 @@ public void init() {\n     \n     //System Under Test\n     RdfTripleImporter SUT = null;\n-    Project project = null;\n-    Properties options = null;\n \n     @BeforeMethod\n     public void SetUp(){\n+        super.SetUp();\n         SUT = new RdfTripleImporter();\n-        project = new Project();\n-        options = new Properties();\n-        options.put(\"base-url\", \"http://rdf.freebase.com\");\n+        JSONUtilities.safePut(options, \"base-url\", \"http://rdf.freebase.com\");\n     }\n \n     @Test(enabled=false)\n@@ -75,8 +68,7 @@ public void CanParseSingleLineTriple(){\n         StringReader reader = new StringReader(sampleRdf);\n \n         try {\n-            SUT.read(reader, project, new ProjectMetadata(), options);\n-            project.update();\n+            parseOneFile(SUT, reader);\n         } catch (Exception e) {\n             Assert.fail();\n         }\n@@ -98,8 +90,7 @@ public void CanParseMultiLineTriple(){\n         StringReader reader = new StringReader(sampleRdf);\n \n         try {\n-            SUT.read(reader, project, new ProjectMetadata(), options);\n-            project.update();\n+            parseOneFile(SUT, reader);\n         } catch (Exception e) {\n             Assert.fail();\n         }\n@@ -140,8 +131,7 @@ public void CanParseMultiLineMultiPredicatesTriple(){\n         StringReader reader = new StringReader(sampleRdf);\n \n         try {\n-            SUT.read(reader, project, new ProjectMetadata(), options);\n-            project.update();\n+            parseOneFile(SUT, reader);\n         } catch (Exception e) {\n             Assert.fail();\n         }\n@@ -175,8 +165,7 @@ public void CanParseTripleWithValue(){\n         StringReader reader = new StringReader(sampleRdf);\n \n         try {\n-            SUT.read(reader, project, new ProjectMetadata(), options);\n-            project.update();\n+            parseOneFile(SUT, reader);\n         } catch (Exception e) {\n             Assert.fail();\n         }"
        },
        {
            "sha": "8dd0d4ced1cd13d6f1f843ab9887bbb0cfa5913f",
            "filename": "main/tests/server/src/com/google/refine/tests/importers/TsvCsvImporterTests.java",
            "status": "modified",
            "additions": 106,
            "deletions": 140,
            "changes": 246,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FTsvCsvImporterTests.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FTsvCsvImporterTests.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FTsvCsvImporterTests.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -33,15 +33,11 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \n package com.google.refine.tests.importers;\n \n-import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n-import java.io.IOException;\n-import java.io.LineNumberReader;\n import java.io.StringReader;\n-import java.util.Properties;\n \n import org.slf4j.LoggerFactory;\n import org.testng.Assert;\n@@ -51,12 +47,10 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n \n-import com.google.refine.ProjectMetadata;\n-import com.google.refine.importers.TsvCsvImporter;\n-import com.google.refine.model.Project;\n-import com.google.refine.tests.RefineTest;\n+import com.google.refine.importers.SeparatorBasedImporter;\n+import com.google.refine.util.JSONUtilities;\n \n-public class TsvCsvImporterTests extends RefineTest {\n+public class TsvCsvImporterTests extends ImporterTest {\n \n     @BeforeTest\n     public void init() {\n@@ -67,25 +61,18 @@ public void init() {\n     String SAMPLE_ROW = \"NDB_No,Shrt_Desc,Water\";\n \n     //System Under Test\n-    TsvCsvImporter SUT = null;\n-\n-    //mock dependencies\n-    Project project = null;\n-    Properties properties = null;\n-\n+    SeparatorBasedImporter SUT = null;\n \n     @BeforeMethod\n-    public void SetUp(){\n-        SUT = new TsvCsvImporter();\n-        project = new Project(); //FIXME - should we try and use mock(Project.class); - seems unnecessary complexity\n-        properties = mock(Properties.class);\n+    public void SetUp() {\n+        super.SetUp();\n+        SUT = new SeparatorBasedImporter();\n     }\n \n     @AfterMethod\n     public void TearDown(){\n         SUT = null;\n-        project = null;\n-        properties = null;\n+        super.TearDown();\n     }\n \n     @Test(dataProvider = \"CSV-TSV-AutoDetermine\")\n@@ -94,11 +81,10 @@ public void readJustColumns(String sep){\n         String inputSeparator =  sep == \"\\t\" ? \"\\t\" : \",\";\n         String input = \"col1\" + inputSeparator + \"col2\" + inputSeparator + \"col3\";\n         \n-        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));\n-\n         try {\n-            SUT.read(lnReader, project, sep, -1, 0, 0, 1, false, true, false);\n-        } catch (IOException e) {\n+            prepareOptions(sep, -1, 0, 0, 1, false, true, false);\n+            parseOneFile(SUT, new StringReader(input));\n+        } catch (Exception e) {\n             Assert.fail();\n         }\n         Assert.assertEquals(project.columnModel.columns.size(), 3);\n@@ -113,11 +99,10 @@ public void readUnseperatedData(String sep){\n         String inputSeparator =  sep == \"\\t\" ? \"\\t\" : \",\";\n         String input = \"value1\" + inputSeparator + \"value2\" + inputSeparator + \"value3\";\n         \n-        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));\n-\n         try {\n-            SUT.read(lnReader, project, sep, -1, 0, 0, 0, false, false, false);\n-        } catch (IOException e) {\n+            prepareOptions(sep, -1, 0, 0, 0, false, false, false);\n+            parseOneFile(SUT, new StringReader(input));\n+        } catch (Exception e) {\n             Assert.fail();\n         }\n         Assert.assertEquals(project.columnModel.columns.size(), 1);\n@@ -135,10 +120,10 @@ public void readSimpleData_CSV_1Header_1Row(String sep){\n                        \"data1\" + inputSeparator + \"data2\" + inputSeparator + \"data3\";\n         \n         \n-        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));\n         try {\n-            SUT.read(lnReader, project, sep, -1, 0, 0, 1, false, true, false);\n-        } catch (IOException e) {\n+            prepareOptions(sep, -1, 0, 0, 1, false, true, false);\n+            parseOneFile(SUT, new StringReader(input));\n+        } catch (Exception e) {\n             Assert.fail();\n         }\n         \n@@ -160,13 +145,12 @@ public void readSimpleData_CSV_1Header_1Row_GuessValues(String sep){\n         String input = \"col1\" + inputSeparator + \"col2\" + inputSeparator + \"col3\\n\" +\n                        \"data1\" + inputSeparator + \"234\" + inputSeparator + \"data3\";\n         \n-        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));\n         try {\n-            SUT.read(lnReader, project, sep, -1, 0, 0, 1, true, true, false);\n-        } catch (IOException e) {\n+            prepareOptions(sep, -1, 0, 0, 1, true, true, false);\n+            parseOneFile(SUT, new StringReader(input));\n+        } catch (Exception e) {\n             Assert.fail();\n         }\n-        \n         Assert.assertEquals(project.columnModel.columns.size(), 3);\n         Assert.assertEquals(project.columnModel.columns.get(0).getName(), \"col1\");\n         Assert.assertEquals(project.columnModel.columns.get(1).getName(), \"col2\");\n@@ -185,13 +169,12 @@ public void readSimpleData_0Header_1Row(String sep){\n         String inputSeparator = sep == \"\\t\" ? \"\\t\" : \",\";\n         String input = \"data1\" + inputSeparator + \"data2\" + inputSeparator + \"data3\";\n         \n-        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));\n         try {\n-            SUT.read(lnReader, project, sep, -1, 0, 0, 0, false, true, false);\n-        } catch (IOException e) {\n+            prepareOptions(sep, -1, 0, 0, 0, false, true, false);\n+            parseOneFile(SUT, new StringReader(input));\n+        } catch (Exception e) {\n             Assert.fail();\n         }\n-        \n         Assert.assertEquals(project.columnModel.columns.size(), 3);\n         Assert.assertEquals(project.columnModel.columns.get(0).getName(), \"Column\");\n         Assert.assertEquals(project.columnModel.columns.get(1).getName(), \"Column2\");\n@@ -209,13 +192,12 @@ public void readDoesNotTrimLeadingTrailingWhitespace(String sep){\n         String inputSeparator =  sep == \"\\t\" ? \"\\t\" : \",\";\n         String input = \" data1 \" + inputSeparator + \" 3.4 \" + inputSeparator + \" data3 \";\n         \n-        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));\n         try {\n-            SUT.read(lnReader, project, sep, -1, 0, 0, 0, false, true, false);\n-        } catch (IOException e) {\n+            prepareOptions(sep, -1, 0, 0, 0, false, true, false);\n+            parseOneFile(SUT, new StringReader(input));\n+        } catch (Exception e) {\n             Assert.fail();\n         }\n-        \n         Assert.assertEquals(project.columnModel.columns.size(), 3);\n         Assert.assertEquals(project.rows.size(), 1);\n         Assert.assertEquals(project.rows.get(0).cells.size(), 3);\n@@ -230,13 +212,12 @@ public void readDoesNotTrimLeadingWhitespace(String sep){\n         String inputSeparator =  sep == \"\\t\" ? \"\\t\" : \",\";\n         String input = \" data1\" + inputSeparator + \" 12\" + inputSeparator + \" data3\";\n         \n-        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));\n         try {\n-            SUT.read(lnReader, project, sep, -1, 0, 0, 0, true, true, false);\n-        } catch (IOException e) {\n+            prepareOptions(sep, -1, 0, 0, 0, true, true, false);\n+            parseOneFile(SUT, new StringReader(input));\n+        } catch (Exception e) {\n             Assert.fail();\n         }\n-        \n         Assert.assertEquals(project.columnModel.columns.size(), 3);\n         Assert.assertEquals(project.rows.size(), 1);\n         Assert.assertEquals(project.rows.get(0).cells.size(), 3);\n@@ -251,13 +232,12 @@ public void readCanAddNull(String sep){\n         String inputSeparator =  sep == \"\\t\" ? \"\\t\" : \",\";\n         String input = \" data1\" + inputSeparator + inputSeparator + \" data3\";\n         \n-        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));\n         try {\n-            SUT.read(lnReader, project, sep, -1, 0, 0, 0, true, true, false);\n-        } catch (IOException e) {\n+            prepareOptions(sep, -1, 0, 0, 0, true, true, false);\n+            parseOneFile(SUT, new StringReader(input));\n+        } catch (Exception e) {\n             Assert.fail();\n         }\n-        \n         Assert.assertEquals(project.columnModel.columns.size(), 3);\n         Assert.assertEquals(project.rows.size(), 1);\n         Assert.assertEquals(project.rows.get(0).cells.size(), 3);\n@@ -274,13 +254,12 @@ public void readSimpleData_2Header_1Row(String sep){\n                        \"sub1\" + inputSeparator + \"sub2\" + inputSeparator + \"sub3\\n\" +\n                        \"data1\" + inputSeparator + \"data2\" + inputSeparator + \"data3\";\n         \n-        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));\n         try {\n-            SUT.read(lnReader, project, sep, -1, 0, 0, 2, false, true, false);\n-        } catch (IOException e) {\n+            prepareOptions(sep, -1, 0, 0, 2, false, true, false);\n+            parseOneFile(SUT, new StringReader(input));\n+        } catch (Exception e) {\n             Assert.fail();\n         }\n-        \n         Assert.assertEquals(project.columnModel.columns.size(), 3);\n         Assert.assertEquals(project.columnModel.columns.get(0).getName(), \"col1 sub1\");\n         Assert.assertEquals(project.columnModel.columns.get(1).getName(), \"col2 sub2\");\n@@ -299,13 +278,12 @@ public void readSimpleData_RowLongerThanHeader(String sep){\n         String input = \"col1\" + inputSeparator + \"col2\" + inputSeparator + \"col3\\n\" +\n         \"data1\" + inputSeparator + \"data2\" + inputSeparator + \"data3\" + inputSeparator + \"data4\" + inputSeparator + \"data5\" + inputSeparator + \"data6\";\n         \n-        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));\n         try {\n-            SUT.read(lnReader, project, sep, -1, 0, 0, 1, false, true, false);\n-        } catch (IOException e) {\n+            prepareOptions(sep, -1, 0, 0, 1, false, true, false);\n+            parseOneFile(SUT, new StringReader(input));\n+        } catch (Exception e) {\n             Assert.fail();\n         }\n-        \n         Assert.assertEquals(project.columnModel.columns.size(), 6);\n         Assert.assertEquals(project.columnModel.columns.get(0).getName(), \"col1\");\n         Assert.assertEquals(project.columnModel.columns.get(1).getName(), \"col2\");\n@@ -330,13 +308,12 @@ public void readQuotedData(String sep){\n         String input = \"col1\" + inputSeparator + \"col2\" + inputSeparator + \"col3\\n\" +\n                        \"\\\"\\\"\\\"To Be\\\"\\\" is often followed by \\\"\\\"or not To Be\\\"\\\"\\\"\" + inputSeparator + \"data2\";\n         \n-        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));\n         try {\n-            SUT.read(lnReader, project, sep, -1, 0, 0, 1, false, true, false);\n-        } catch (IOException e) {\n+            prepareOptions(sep, -1, 0, 0, 1, false, true, false);\n+            parseOneFile(SUT, new StringReader(input));\n+        } catch (Exception e) {\n             Assert.fail();\n         }\n-        \n         Assert.assertEquals(project.columnModel.columns.size(), 3);\n         Assert.assertEquals(project.columnModel.columns.get(0).getName(), \"col1\");\n         Assert.assertEquals(project.columnModel.columns.get(1).getName(), \"col2\");\n@@ -355,13 +332,12 @@ public void readIgnoreFirstLine(String sep){\n                        \"col1\" + inputSeparator + \"col2\" + inputSeparator + \"col3\\n\" +\n                        \"data1\" + inputSeparator + \"data2\" + inputSeparator + \"data3\";\n         \n-        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));\n         try {\n-            SUT.read(lnReader, project, sep, -1, 0, 1, 1, false, true, false);\n-        } catch (IOException e) {\n+            prepareOptions(sep, -1, 0, 1, 1, false, true, false);\n+            parseOneFile(SUT, new StringReader(input));\n+        } catch (Exception e) {\n             Assert.fail();\n         }\n-        \n         Assert.assertEquals(project.columnModel.columns.size(), 3);\n         Assert.assertEquals(project.columnModel.columns.get(0).getName(), \"col1\");\n         Assert.assertEquals(project.columnModel.columns.get(1).getName(), \"col2\");\n@@ -381,13 +357,12 @@ public void readSkipFirstDataLine(String sep){\n                        \"skip1\\n\" +\n                        \"data1\" + inputSeparator + \"data2\" + inputSeparator + \"data3\";\n         \n-        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));\n         try {\n-            SUT.read(lnReader, project, sep, -1, 1, 0, 1, false, true, false);\n-        } catch (IOException e) {\n+            prepareOptions(sep, -1, 1, 0, 1, false, true, false);\n+            parseOneFile(SUT, new StringReader(input));\n+        } catch (Exception e) {\n             Assert.fail();\n         }\n-        \n         Assert.assertEquals(project.columnModel.columns.size(), 3);\n         Assert.assertEquals(project.columnModel.columns.get(0).getName(), \"col1\");\n         Assert.assertEquals(project.columnModel.columns.get(1).getName(), \"col2\");\n@@ -411,13 +386,12 @@ public void readIgnore3_Header2_Skip1(String sep){\n                        \"skip1\\n\" +\n                        \"data1\" + inputSeparator + \"data2\" + inputSeparator + \"data3\";\n         \n-        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));\n         try {\n-            SUT.read(lnReader, project, sep, -1, 1, 3, 2, false, true, false);\n-        } catch (IOException e) {\n+            prepareOptions(sep, -1, 1, 3, 2, false, true, false);\n+            parseOneFile(SUT, new StringReader(input));\n+        } catch (Exception e) {\n             Assert.fail();\n         }\n-        \n         Assert.assertEquals(project.columnModel.columns.size(), 3);\n         Assert.assertEquals(project.columnModel.columns.get(0).getName(), \"col1 sub1\");\n         Assert.assertEquals(project.columnModel.columns.get(1).getName(), \"col2 sub2\");\n@@ -444,10 +418,10 @@ public void readIgnore3_Header2_Skip2_limit2(String sep){\n                        \"data-row2-cell1\" + inputSeparator + \"data-row2-cell2\" + inputSeparator + \"\\n\" + //missing last data point of this row on purpose\n                        \"data-row3-cell1\" + inputSeparator + \"data-row3-cell2\" + inputSeparator + \"data-row1-cell3\";\n         \n-        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));\n         try {\n-            SUT.read(lnReader, project, sep, 2, 2, 3, 2, false, true, false);\n-        } catch (IOException e) {\n+            prepareOptions(sep, 2, 2, 3, 2, false, true, false);\n+            parseOneFile(SUT, new StringReader(input));\n+        } catch (Exception e) {\n             Assert.fail();\n         }\n         Assert.assertEquals(project.columnModel.columns.size(), 3);\n@@ -471,13 +445,12 @@ public void ignoreQuotes(String sep){\n         String inputSeparator =  sep == \"\\t\" ? \"\\t\" : \",\";\n         String input = \"data1\" + inputSeparator + \"data2\\\"\" + inputSeparator + \"data3\" + inputSeparator + \"data4\";\n               \n-        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));\n         try {\n-            SUT.read(lnReader, project, sep, -1, 0, 0, 0, false, true, true);\n-        } catch (IOException e) {\n+            prepareOptions(sep, -1, 0, 0, 0, false, true, true);\n+            parseOneFile(SUT, new StringReader(input));\n+        } catch (Exception e) {\n             Assert.fail();\n         }\n-        \n         Assert.assertEquals(project.columnModel.columns.size(), 4);\n         Assert.assertEquals(project.rows.size(), 1);\n         Assert.assertEquals(project.rows.get(0).cells.size(), 4);\n@@ -493,13 +466,12 @@ public void readWithMultiLinedQuotedData(String sep){\n         String input = \"col1\" + inputSeparator + \"col2\" + inputSeparator + \"col3\\n\" +\n             \"\\\"\\\"\\\"To\\n Be\\\"\\\" is often followed by \\\"\\\"or not To\\n Be\\\"\\\"\\\"\" + inputSeparator + \"data2\";\n         \n-        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));\n         try {\n-            SUT.read(lnReader, project, sep, -1, 0, 0, 1, false, true, false);\n-        } catch (IOException e) {\n+            prepareOptions(sep, -1, 0, 0, 1, false, true, false);\n+            parseOneFile(SUT, new StringReader(input));\n+        } catch (Exception e) {\n             Assert.fail();\n         }\n-        \n         Assert.assertEquals(project.columnModel.columns.size(), 3);\n         Assert.assertEquals(project.columnModel.columns.get(0).getName(), \"col1\");\n         Assert.assertEquals(project.columnModel.columns.get(1).getName(), \"col2\");\n@@ -517,13 +489,12 @@ public void readWithMultiLinedQuotedDataAndBlankLines(String sep){\n         String input = \"col1\" + inputSeparator + \"col2\" + inputSeparator + \"col3\\n\" +\n             \"\\\"A line with many \\n\\n\\n\\n\\n empty lines\\\"\" + inputSeparator + \"data2\";\n         \n-        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));\n         try {\n-            SUT.read(lnReader, project, sep, -1, 0, 0, 1, false, true, false);\n-        } catch (IOException e) {\n+            prepareOptions(sep, -1, 0, 0, 1, false, true, false);\n+            parseOneFile(SUT, new StringReader(input));\n+        } catch (Exception e) {\n             Assert.fail();\n         }\n-        \n         Assert.assertEquals(project.columnModel.columns.size(), 3);\n         Assert.assertEquals(project.columnModel.columns.get(0).getName(), \"col1\");\n         Assert.assertEquals(project.columnModel.columns.get(1).getName(), \"col2\");\n@@ -536,69 +507,67 @@ public void readWithMultiLinedQuotedDataAndBlankLines(String sep){\n \n     //---------------------read tests------------------------\n     @Test\n-    public void readCsvWithProperties(){\n+    public void readCsvWithProperties() {\n         StringReader reader = new StringReader(SAMPLE_ROW);\n-\n-        when(properties.getProperty(\"separator\")).thenReturn(\",\");\n-        whenGetIntegerOption(\"ignore\",properties,0);\n-        whenGetIntegerOption(\"header-lines\",properties,0);\n-        whenGetIntegerOption(\"limit\",properties,-1);\n-        whenGetIntegerOption(\"skip\",properties,0);\n-        whenGetIntegerOption(\"ignore-quotes\",properties,0);\n-\n+        \n+        when(JSONUtilities.getString(options, \"separator\", null)).thenReturn(\",\");\n+        whenGetIntegerOption(\"ignore\", options, 0);\n+        whenGetIntegerOption(\"header-lines\", options, 0);\n+        whenGetIntegerOption(\"limit\", options, -1);\n+        whenGetIntegerOption(\"skip\", options, 0);\n+        whenGetIntegerOption(\"ignore-quotes\", options, 0);\n+        \n         try {\n-            SUT.read(reader, project, new ProjectMetadata(), properties);\n+            parseOneFile(SUT, reader);\n         } catch (Exception e) {\n             Assert.fail();\n         }\n-\n-\n+        \n         Assert.assertEquals(project.rows.size(), 1);\n         Assert.assertEquals(project.rows.get(0).cells.size(), 3);\n         Assert.assertEquals((String)project.rows.get(0).cells.get(0).value, \"NDB_No\");\n         Assert.assertEquals((String)project.rows.get(0).cells.get(1).value, \"Shrt_Desc\");\n         Assert.assertEquals((String)project.rows.get(0).cells.get(2).value, \"Water\");\n \n-        verify(properties, times(1)).getProperty(\"separator\");\n-        verifyGetOption(\"ignore\",properties);\n-        verifyGetOption(\"header-lines\",properties);\n-        verifyGetOption(\"limit\",properties);\n-        verifyGetOption(\"skip\",properties);\n-        verifyGetOption(\"ignore-quotes\",properties);\n+        JSONUtilities.getString(verify(options, times(1)), \"separator\", null);\n+        verifyGetOption(\"ignore\", options);\n+        verifyGetOption(\"header-lines\", options);\n+        verifyGetOption(\"limit\", options);\n+        verifyGetOption(\"skip\", options);\n+        verifyGetOption(\"ignore-quotes\", options);\n     }\n \n     @Test\n     public void readCsvWithPropertiesIgnoreQuotes(){\n         String input = \"data1,data2\\\",data3,data4\";\n         StringReader reader = new StringReader(input);\n \n-        when(properties.getProperty(\"separator\")).thenReturn(\",\");\n-        whenGetIntegerOption(\"ignore\",properties,0);\n-        whenGetIntegerOption(\"header-lines\",properties,0);\n-        whenGetIntegerOption(\"limit\",properties,-1);\n-        whenGetIntegerOption(\"skip\",properties,0);\n-        whenGetBooleanOption(\"ignore-quotes\",properties,true);\n-\n+        when(JSONUtilities.getString(options, \"separator\", null)).thenReturn(\",\");\n+        whenGetIntegerOption(\"ignore\", options, 0);\n+        whenGetIntegerOption(\"header-lines\", options, 0);\n+        whenGetIntegerOption(\"limit\", options, -1);\n+        whenGetIntegerOption(\"skip\", options, 0);\n+        whenGetBooleanOption(\"ignore-quotes\", options, true);\n+        \n         try {\n-            SUT.read(reader, project, new ProjectMetadata(), properties);\n+            parseOneFile(SUT, reader);\n         } catch (Exception e) {\n             Assert.fail();\n         }\n-\n-\n+        \n         Assert.assertEquals(project.rows.size(), 1);\n         Assert.assertEquals(project.rows.get(0).cells.size(), 4);\n         Assert.assertEquals((String)project.rows.get(0).cells.get(0).value, \"data1\");\n         Assert.assertEquals((String)project.rows.get(0).cells.get(1).value, \"data2\");\n         Assert.assertEquals((String)project.rows.get(0).cells.get(2).value, \"data3\");\n         Assert.assertEquals((String)project.rows.get(0).cells.get(3).value, \"data4\");\n \n-        verify(properties, times(1)).getProperty(\"separator\");\n-        verifyGetOption(\"ignore\",properties);\n-        verifyGetOption(\"header-lines\",properties);\n-        verifyGetOption(\"limit\",properties);\n-        verifyGetOption(\"skip\",properties);\n-        verifyGetOption(\"ignore-quotes\",properties);\n+        JSONUtilities.getString(verify(options, times(1)), \"separator\", null);\n+        verifyGetOption(\"ignore\", options);\n+        verifyGetOption(\"header-lines\", options);\n+        verifyGetOption(\"limit\", options);\n+        verifyGetOption(\"skip\", options);\n+        verifyGetOption(\"ignore-quotes\", options);\n     }\n \n     //--helpers--\n@@ -611,20 +580,17 @@ public Object[][] CSV_TSV_or_AutoDetermine(){\n                 {\",\"},{\"\\t\"},{null}\n         };\n     }\n-\n-    public void whenGetBooleanOption(String name, Properties properties, Boolean def){\n-        when(properties.containsKey(name)).thenReturn(true);\n-        when(properties.getProperty(name)).thenReturn(Boolean.toString(def));\n-    }\n-\n-    public void whenGetIntegerOption(String name, Properties properties, int def){\n-        when(properties.containsKey(name)).thenReturn(true);\n-        when(properties.getProperty(name)).thenReturn(Integer.toString(def));\n+    \n+    private void prepareOptions(\n+        String sep, int limit, int skip, int ignoreLines,\n+        int headerLines, boolean guessValueType, boolean splitIntoColumns, boolean ignoreQuotes) {\n+        JSONUtilities.safePut(options, \"separator\", sep);\n+        JSONUtilities.safePut(options, \"limit\", limit);\n+        JSONUtilities.safePut(options, \"skipDataLines\", skip);\n+        JSONUtilities.safePut(options, \"ignoreLines\", ignoreLines);\n+        JSONUtilities.safePut(options, \"headerLines\", headerLines);\n+        JSONUtilities.safePut(options, \"guessCellValueTypes\", guessValueType);\n+        JSONUtilities.safePut(options, \"splitIntoColumns\", splitIntoColumns);\n+        JSONUtilities.safePut(options, \"processQuotes\", !ignoreQuotes);\n     }\n-\n-    public void verifyGetOption(String name, Properties properties){\n-        verify(properties, times(1)).containsKey(name);\n-        verify(properties, times(1)).getProperty(name);\n-    }\n-\n }"
        },
        {
            "sha": "c0efeae93cb338c44e253878553f7facbceb3cff",
            "filename": "main/tests/server/src/com/google/refine/tests/importers/XmlImportUtilitiesStub.java",
            "status": "modified",
            "additions": 9,
            "deletions": 9,
            "changes": 18,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FXmlImportUtilitiesStub.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FXmlImportUtilitiesStub.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FXmlImportUtilitiesStub.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -35,27 +35,27 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \n import java.util.List;\n \n-import javax.servlet.ServletException;\n-\n-import com.google.refine.importers.XmlImportUtilities;\n-import com.google.refine.importers.parsers.TreeParser;\n+import com.google.refine.importers.tree.ImportColumnGroup;\n+import com.google.refine.importers.tree.ImportRecord;\n+import com.google.refine.importers.tree.TreeReader;\n+import com.google.refine.importers.tree.XmlImportUtilities;\n import com.google.refine.model.Project;\n \n public class XmlImportUtilitiesStub extends XmlImportUtilities {\n     \n-    public List<String> detectRecordElementWrapper(TreeParser parser, String tag) throws ServletException{\n+    public List<String> detectRecordElementWrapper(TreeReader parser, String tag) throws Exception{\n         return super.detectRecordElement(parser, tag);\n     }\n \n-    public void ProcessSubRecordWrapper(Project project, TreeParser parser, ImportColumnGroup columnGroup, ImportRecord record) throws ServletException{\n+    public void ProcessSubRecordWrapper(Project project, TreeReader parser, ImportColumnGroup columnGroup, ImportRecord record) throws Exception{\n         super.processSubRecord(project, parser, columnGroup, record);\n     }\n \n-    public void findRecordWrapper(Project project, TreeParser parser, String[] recordPath, int pathIndex, ImportColumnGroup rootColumnGroup) throws ServletException{\n-        super.findRecord(project, parser, recordPath, pathIndex, rootColumnGroup);\n+    public void findRecordWrapper(Project project, TreeReader parser, String[] recordPath, int pathIndex, ImportColumnGroup rootColumnGroup) throws Exception{\n+        super.findRecord(project, parser, recordPath, pathIndex, rootColumnGroup, -1);\n     }\n \n-    public void processRecordWrapper(Project project, TreeParser parser, ImportColumnGroup rootColumnGroup) throws ServletException{\n+    public void processRecordWrapper(Project project, TreeReader parser, ImportColumnGroup rootColumnGroup) throws Exception{\n         super.processRecord(project, parser, rootColumnGroup);\n     }\n "
        },
        {
            "sha": "c7c70cea5cf574ff5dde81f8f097e9415383897f",
            "filename": "main/tests/server/src/com/google/refine/tests/importers/XmlImportUtilitiesTests.java",
            "status": "modified",
            "additions": 34,
            "deletions": 27,
            "changes": 61,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FXmlImportUtilitiesTests.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FXmlImportUtilitiesTests.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FXmlImportUtilitiesTests.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -35,11 +35,12 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n+import java.io.InputStreamReader;\n import java.io.UnsupportedEncodingException;\n import java.util.ArrayList;\n import java.util.List;\n \n-import javax.servlet.ServletException;\n+import javax.xml.stream.XMLStreamException;\n \n import org.slf4j.LoggerFactory;\n import org.testng.Assert;\n@@ -48,13 +49,12 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import org.testng.annotations.BeforeTest;\n import org.testng.annotations.Test;\n \n-import com.google.refine.importers.TreeImportUtilities.ImportColumn;\n-import com.google.refine.importers.TreeImportUtilities.ImportColumnGroup;\n-import com.google.refine.importers.TreeImportUtilities.ImportRecord;\n-import com.google.refine.importers.parsers.JSONParser;\n-import com.google.refine.importers.parsers.TreeParser;\n-import com.google.refine.importers.parsers.TreeParserToken;\n-import com.google.refine.importers.parsers.XmlParser;\n+import com.google.refine.importers.JsonImporter.JSONTreeReader;\n+import com.google.refine.importers.XmlImporter.XmlParser;\n+import com.google.refine.importers.tree.ImportColumn;\n+import com.google.refine.importers.tree.ImportColumnGroup;\n+import com.google.refine.importers.tree.ImportRecord;\n+import com.google.refine.importers.tree.TreeReader;\n import com.google.refine.model.Project;\n import com.google.refine.model.Row;\n import com.google.refine.tests.RefineTest;\n@@ -69,7 +69,7 @@ public void init() {\n \n     //dependencies\n     Project project;\n-    TreeParser parser;\n+    TreeReader parser;\n     ImportColumnGroup columnGroup;\n     ImportRecord record;\n     ByteArrayInputStream inputStream;\n@@ -134,7 +134,7 @@ public void detectRecordElementXmlTest(){\n         List<String> response = new ArrayList<String>();\n         try {\n             response = SUT.detectRecordElementWrapper(parser, tag);\n-        } catch (ServletException e) {\n+        } catch (Exception e) {\n             Assert.fail(e.getMessage());\n         }\n         Assert.assertNotNull(response);\n@@ -152,7 +152,7 @@ public void detectRecordElementCanHandleWithNestedElementsXml(){\n         List<String> response = new ArrayList<String>();\n         try {\n             response = SUT.detectRecordElementWrapper(parser, tag);\n-        } catch (ServletException e) {\n+        } catch (Exception e) {\n             Assert.fail(e.getMessage());\n         }\n         Assert.assertNotNull(response);\n@@ -171,7 +171,7 @@ public void detectRecordElementIsNullForUnfoundTagXml(){\n         List<String> response = new ArrayList<String>();\n         try {\n             response = SUT.detectRecordElementWrapper(parser, tag);\n-        } catch (ServletException e) {\n+        } catch (Exception e) {\n             Assert.fail(e.getMessage());\n         }\n         Assert.assertNull(response);\n@@ -181,7 +181,7 @@ public void detectRecordElementIsNullForUnfoundTagXml(){\n     public void detectRecordElementRegressionXmlTest(){\n         loadSampleXml();\n \n-        String[] path = XmlImportUtilitiesStub.detectRecordElement(new XmlParser(inputStream));\n+        String[] path = XmlImportUtilitiesStub.detectRecordElement(createXmlParser());\n         Assert.assertNotNull(path);\n         Assert.assertEquals(path.length, 2);\n         Assert.assertEquals(path[0], \"library\");\n@@ -192,7 +192,8 @@ public void detectRecordElementRegressionXmlTest(){\n     public void detectRecordElementRegressionJsonTest(){\n         loadSampleJson();\n \n-        String[] path = XmlImportUtilitiesStub.detectRecordElement(new JSONParser(inputStream));\n+        String[] path = XmlImportUtilitiesStub.detectRecordElement(\n+                new JSONTreeReader(new InputStreamReader(inputStream)));\n         Assert.assertNotNull(path);\n         Assert.assertEquals(path.length, 2);\n         Assert.assertEquals(path[0], \"__anonymous__\");\n@@ -204,7 +205,7 @@ public void importTreeDataXmlTest(){\n         loadSampleXml();\n \n         String[] recordPath = new String[]{\"library\",\"book\"};\n-        XmlImportUtilitiesStub.importTreeData(new XmlParser(inputStream), project, recordPath, columnGroup );\n+        XmlImportUtilitiesStub.importTreeData(createXmlParser(), project, recordPath, columnGroup, -1);\n \n         log(project);\n         assertProjectCreated(project, 0, 6);\n@@ -224,7 +225,7 @@ public void importXmlWithVaryingStructureTest(){\n         loadData(XmlImporterTests.getSampleWithVaryingStructure());\n \n         String[] recordPath = new String[]{\"library\", \"book\"};\n-        XmlImportUtilitiesStub.importTreeData(new XmlParser(inputStream), project, recordPath, columnGroup);\n+        XmlImportUtilitiesStub.importTreeData(createXmlParser(), project, recordPath, columnGroup, -1);\n \n         log(project);\n         assertProjectCreated(project, 0, 6);\n@@ -278,7 +279,7 @@ public void findRecordTestXml(){\n \n         try {\n             SUT.findRecordWrapper(project, parser, recordPath, pathIndex, columnGroup);\n-        } catch (ServletException e) {\n+        } catch (Exception e) {\n             Assert.fail();\n         }\n \n@@ -297,7 +298,7 @@ public void processRecordTestXml(){\n \n         try {\n             SUT.processRecordWrapper(project, parser, columnGroup);\n-        } catch (ServletException e) {\n+        } catch (Exception e) {\n             Assert.fail();\n         }\n         log(project);\n@@ -318,7 +319,7 @@ public void processRecordTestDuplicateColumnsXml(){\n \n         try {\n             SUT.processRecordWrapper(project, parser, columnGroup);\n-        } catch (ServletException e) {\n+        } catch (Exception e) {\n             Assert.fail();\n         }\n         log(project);\n@@ -343,7 +344,7 @@ public void processRecordTestNestedElementXml(){\n \n         try {\n             SUT.processRecordWrapper(project, parser, columnGroup);\n-        } catch (ServletException e) {\n+        } catch (Exception e) {\n             Assert.fail();\n         }\n         log(project);\n@@ -367,7 +368,7 @@ public void processSubRecordTestXml(){\n \n         try {\n             SUT.ProcessSubRecordWrapper(project, parser, columnGroup, record);\n-        } catch (ServletException e) {\n+        } catch (Exception e) {\n             Assert.fail();\n         }\n         log(project);\n@@ -429,18 +430,24 @@ public void loadData(String xml){\n \n     public void ParserSkip(){\n         try {\n-            if(parser.getEventType() == TreeParserToken.Ignorable){\n+            if (parser.current() == TreeReader.Token.Ignorable){\n                 parser.next(); //move parser forward once e.g. skip the START_DOCUMENT parser event\n             }\n-        } catch (ServletException e1) {\n+        } catch (Exception e1) {\n             Assert.fail();\n         }\n     }\n \n-    public void createXmlParser(){\n-        parser = new XmlParser(inputStream);\n+    public TreeReader createXmlParser(){\n+        try {\n+            parser = new XmlParser(inputStream);\n+            return parser;\n+        } catch (XMLStreamException e) {\n+            return null;\n+        }\n     }\n-    public void createJsonParser(){\n-        parser = new JSONParser(inputStream);\n+    public TreeReader createJsonParser(){\n+        parser = new JSONTreeReader(new InputStreamReader(inputStream));\n+        return parser;\n     }\n }"
        },
        {
            "sha": "0775593055cec3b7f796778515cebaa2c071b349",
            "filename": "main/tests/server/src/com/google/refine/tests/importers/XmlImporterTests.java",
            "status": "modified",
            "additions": 14,
            "deletions": 21,
            "changes": 35,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FXmlImporterTests.java",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FXmlImporterTests.java",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FXmlImporterTests.java?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -33,12 +33,9 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \n package com.google.refine.tests.importers;\n \n-import static org.mockito.Mockito.mock;\n-\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.UnsupportedEncodingException;\n-import java.util.Properties;\n \n import org.slf4j.LoggerFactory;\n import org.testng.Assert;\n@@ -47,43 +44,41 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import org.testng.annotations.BeforeTest;\n import org.testng.annotations.Test;\n \n-import com.google.refine.ProjectMetadata;\n import com.google.refine.importers.XmlImporter;\n-import com.google.refine.model.Project;\n import com.google.refine.model.Row;\n-import com.google.refine.tests.RefineTest;\n \n \n-public class XmlImporterTests extends RefineTest {\n+public class XmlImporterTests extends ImporterTest {\n \n     @BeforeTest\n     public void init() {\n         logger = LoggerFactory.getLogger(this.getClass());\n     }\n     \n     //dependencies\n-    Project project = null;\n-    Properties options = null;\n     ByteArrayInputStream inputStream = null;\n \n     //System Under Test\n     XmlImporter SUT = null;\n-\n-\n+    \n     @BeforeMethod\n     public void SetUp(){\n+        super.SetUp();\n         SUT = new XmlImporter();\n-        project = new Project();\n-        options = mock(Properties.class);\n     }\n \n     @AfterMethod\n-    public void TearDown() throws IOException{\n+    public void TearDown() {\n         SUT = null;\n-        project = null;\n-        options = null;\n-        if (inputStream != null) inputStream.close();\n-        inputStream = null;\n+        if (inputStream != null) {\n+            try {\n+                inputStream.close();\n+            } catch (IOException e) {\n+                // Ignore\n+            }\n+            inputStream = null;\n+        }\n+        super.TearDown();\n     }\n \n     @Test\n@@ -309,11 +304,9 @@ private void RunTest(String testString){\n         }\n \n         try {\n-            SUT.read(inputStream, project, new ProjectMetadata(), options);\n+            parseOneFile(SUT, inputStream);\n         } catch (Exception e) {\n             Assert.fail();\n         }\n     }\n-\n-\n }"
        },
        {
            "sha": "35d15a3d93bc5a4a8a069c38b4557f807f837929",
            "filename": "main/webapp/modules/core/MOD-INF/controller.js",
            "status": "modified",
            "additions": 136,
            "deletions": 39,
            "changes": 175,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2FMOD-INF%2Fcontroller.js",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2FMOD-INF%2Fcontroller.js",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2FMOD-INF%2Fcontroller.js?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -50,9 +50,10 @@ function registerCommands() {\n \n     RS.registerCommand(module, \"get-version\", new Packages.com.google.refine.commands.GetVersionCommand());\n \n-    RS.registerCommand(module, \"create-import-job\", new Packages.com.google.refine.commands.importing.CreateImportJobCommand());\n-    RS.registerCommand(module, \"retrieve-import-content\", new Packages.com.google.refine.commands.importing.RetrieveImportContentCommand());\n-    RS.registerCommand(module, \"get-import-job-status\", new Packages.com.google.refine.commands.importing.GetImportJobStatusCommand());\n+    RS.registerCommand(module, \"get-importing-configuration\", new Packages.com.google.refine.commands.importing.GetImportingConfigurationCommand());\n+    RS.registerCommand(module, \"create-importing-job\", new Packages.com.google.refine.commands.importing.CreateImportingJobCommand());\n+    RS.registerCommand(module, \"get-importing-job-status\", new Packages.com.google.refine.commands.importing.GetImportingJobStatusCommand());\n+    RS.registerCommand(module, \"importing-controller\", new Packages.com.google.refine.commands.importing.ImportingControllerCommand());\n     \n     RS.registerCommand(module, \"create-project-from-upload\", new Packages.com.google.refine.commands.project.CreateProjectCommand());\n     RS.registerCommand(module, \"import-project\", new Packages.com.google.refine.commands.project.ImportProjectCommand());\n@@ -120,12 +121,9 @@ function registerCommands() {\n \n     RS.registerCommand(module, \"get-expression-language-info\", new Packages.com.google.refine.commands.expr.GetExpressionLanguageInfoCommand());\n     RS.registerCommand(module, \"get-expression-history\", new Packages.com.google.refine.commands.expr.GetExpressionHistoryCommand());\n-    RS.registerCommand(module, \"get-starred-expressions\", new Packages.com.google.refine.commands.expr.GetStarredExpressionsCommand());\n-    RS.registerCommand(module, \"toggle-starred-expression\", new Packages.com.google.refine.commands.expr.ToggleStarredExpressionCommand());\n     RS.registerCommand(module, \"log-expression\", new Packages.com.google.refine.commands.expr.LogExpressionCommand());\n     RS.registerCommand(module, \"preview-expression\", new Packages.com.google.refine.commands.expr.PreviewExpressionCommand());\n \n-\n     RS.registerCommand(module, \"get-preference\", new Packages.com.google.refine.commands.GetPreferenceCommand());\n     RS.registerCommand(module, \"get-all-preferences\", new Packages.com.google.refine.commands.GetAllPreferencesCommand());\n     RS.registerCommand(module, \"set-preference\", new Packages.com.google.refine.commands.SetPreferenceCommand());\n@@ -168,11 +166,98 @@ function registerOperations() {\n     OR.registerOperation(module, \"recon-copy-across-columns\", Packages.com.google.refine.operations.recon.ReconCopyAcrossColumnsOperation);\n }\n \n-function registerImportSourceClasses() {\n-  var RM = Packages.com.google.refine.commands.importing.ImportManager;\n-  RM.registerImportSourceClass(\"file-upload\", Packages.com.google.refine.model.meta.FileUploadImportSource);\n-  RM.registerImportSourceClass(\"text\", Packages.com.google.refine.model.meta.TextImportSource);\n-  RM.registerImportSourceClass(\"web\", Packages.com.google.refine.model.meta.WebImportSource);\n+function registerImporting() {\n+    var IM = Packages.com.google.refine.importing.ImportingManager;\n+    \n+    /*\n+     *  Formats and their UI class names and parsers:\n+     *  - UI class names are used on the client-side in Javascript to instantiate code that lets the user\n+     *    configure the parser's options.\n+     *  - Parsers are server-side code that do the actual parsing. Because they have access to the raw files,\n+     *    they also generate defaults for the client-side UIs to initialize.\n+     */\n+    \n+    IM.registerFormat(\"text\", \"Text files\"); // generic format, no parser to handle it\n+    IM.registerFormat(\"text/line-based\", \"Line-based text files\", \"LineBasedParserUI\",\n+        new Packages.com.google.refine.importers.LineBasedImporter());\n+    IM.registerFormat(\"text/line-based/*sv\", \"CSV / TSV / separator-based files\", \"SeparatorBasedParserUI\",\n+        new Packages.com.google.refine.importers.SeparatorBasedImporter());\n+    IM.registerFormat(\"text/line-based/fixed-width\", \"Fixed-width field text files\", \"FixedWidthParserUI\",\n+        new Packages.com.google.refine.importers.FixedWidthImporter());\n+    \n+    IM.registerFormat(\"text/xml\", \"XML files\", \"XmlParserUI\", new Packages.com.google.refine.importers.XmlImporter());\n+    IM.registerFormat(\"text/xml/xlsx\", \"Excel (.xlsx) files\", \"ExcelParserUI\", new Packages.com.google.refine.importers.ExcelImporter());\n+    IM.registerFormat(\"text/xml/rdf\", \"RDF/XML files\", \"RdfParserUI\", new Packages.com.google.refine.importers.RdfTripleImporter());\n+    IM.registerFormat(\"text/json\", \"JSON files\", \"JsonParserUI\", new Packages.com.google.refine.importers.JsonImporter());\n+    IM.registerFormat(\"text/marc\", \"MARC files\");\n+    \n+    IM.registerFormat(\"binary\", \"Binary files\"); // generic format, no parser to handle it\n+    IM.registerFormat(\"binary/xls\", \"Excel files\", \"ExcelParserUI\", new Packages.com.google.refine.importers.ExcelImporter());\n+    \n+    IM.registerFormat(\"service\", \"Services\"); // generic format, no parser to handle it\n+    \n+    /*\n+     *  Extension to format mappings\n+     */\n+    IM.registerExtension(\".txt\", \"text/line-based\");\n+    IM.registerExtension(\".csv\", \"text/line-based/*sv\");\n+    IM.registerExtension(\".tsv\", \"text/line-based/*sv\");\n+    \n+    IM.registerExtension(\".xml\", \"text/xml\");\n+    IM.registerExtension(\".rdf\", \"text/xml/rdf\");\n+    \n+    IM.registerExtension(\".json\", \"text/json\");\n+    IM.registerExtension(\".js\", \"text/json\");\n+    \n+    IM.registerExtension(\".xls\", \"binary/xls\");\n+    IM.registerExtension(\".xlsx\", \"text/xml/xlsx\");\n+    \n+    IM.registerExtension(\".marc\", \"text/marc\");\n+    IM.registerExtension(\".mrc\", \"text/marc\");\n+    \n+    /*\n+     *  Mime type to format mappings\n+     */\n+    IM.registerMimeType(\"text/plain\", \"text/line-based\");\n+    IM.registerMimeType(\"text/csv\", \"text/line-based/*sv\");\n+    IM.registerMimeType(\"text/x-csv\", \"text/line-based/*sv\");\n+    IM.registerMimeType(\"text/tab-separated-value\", \"text/line-based/*sv\");\n+    \n+    IM.registerMimeType(\"text/fixed-width\", \"text/line-based/fixed-width\");\n+     \n+    IM.registerMimeType(\"application/msexcel\", \"binary/xls\");\n+    IM.registerMimeType(\"application/x-msexcel\", \"binary/xls\");\n+    IM.registerMimeType(\"application/x-ms-excel\", \"binary/xls\");\n+    IM.registerMimeType(\"application/vnd.ms-excel\", \"binary/xls\");\n+    IM.registerMimeType(\"application/x-excel\", \"binary/xls\");\n+    IM.registerMimeType(\"application/xls\", \"binary/xls\");\n+    IM.registerMimeType(\"application/x-xls\", \"text/xml/xlsx\");\n+    \n+    IM.registerMimeType(\"application/json\", \"text/json\");\n+    IM.registerMimeType(\"text/json\", \"text/json\");\n+    \n+    IM.registerMimeType(\"application/rdf+xml\", \"text/xml/rdf\");\n+    \n+    IM.registerMimeType(\"application/marc\", \"text/marc\");\n+    \n+    /*\n+     *  Format guessers: these take a format derived from extensions or mime-types,\n+     *  look at the actual files' content, and try to guess a better format.\n+     */\n+    IM.registerFormatGuesser(\"text\", new Packages.com.google.refine.importers.TextFormatGuesser());\n+    IM.registerFormatGuesser(\"text/line-based\", new Packages.com.google.refine.importers.LineBasedFormatGuesser());\n+    \n+    /*\n+     *  Controllers: these implement high-level UI flows for importing data. For example, the default\n+     *  controller lets the user specify one or more source files, either local or remote or on the clipboard,\n+     *  lets the user select which files to actually import in case any of the original file is an archive\n+     *  containing several files, and then lets the user configure parsing options.\n+     */\n+    IM.registerController(\n+        module,\n+        \"default-importing-controller\",\n+        new Packages.com.google.refine.importing.DefaultImportingController()\n+    );\n }\n \n /*\n@@ -183,7 +268,7 @@ function init() {\n     \n     registerCommands();\n     registerOperations();\n-    registerImportSourceClasses();\n+    registerImporting();\n     \n     var RC = Packages.com.google.refine.model.recon.ReconConfig;\n     RC.registerReconConfig(module, \"standard-service\", Packages.com.google.refine.model.recon.StandardReconConfig);\n@@ -193,12 +278,36 @@ function init() {\n         module,\n         [\n             \"externals/jquery-1.4.2.min.js\",\n+            \"externals/jquery.cookie.js\",\n+            \"externals/jquery.eventstack-0.3.js\",\n             \"externals/jquery-ui/jquery-ui-1.8.custom.min.js\",\n             \"externals/date.js\",\n+            \n+            \"scripts/util/misc.js\",\n+            \"scripts/util/url.js\",\n             \"scripts/util/string.js\",\n+            \"scripts/util/ajax.js\",\n+            \"scripts/util/menu.js\",\n+            \"scripts/util/dialog.js\",\n             \"scripts/util/dom.js\",\n+            \n             \"scripts/index.js\",\n-            \"scripts/index/import-sources.js\"\n+            \"scripts/index/create-project-ui.js\",\n+            \"scripts/index/open-project-ui.js\",\n+            \"scripts/index/import-project-ui.js\",\n+            \n+            \"scripts/index/default-importing-controller/controller.js\",\n+            \"scripts/index/default-importing-controller/file-selection-panel.js\",\n+            \"scripts/index/default-importing-controller/parsing-panel.js\",\n+            \n+            \"scripts/index/default-importing-sources/sources.js\",\n+            \"scripts/index/parser-interfaces/preview-table.js\",\n+            \"scripts/index/parser-interfaces/separator-based-parser-ui.js\",\n+            \"scripts/index/parser-interfaces/line-based-parser-ui.js\",\n+            \"scripts/index/parser-interfaces/fixed-width-parser-ui.js\",\n+            \"scripts/index/parser-interfaces/excel-parser-ui.js\",\n+            \"scripts/index/parser-interfaces/xml-parser-ui.js\",\n+            \"scripts/index/parser-interfaces/json-parser-ui.js\"\n         ]\n     );\n     \n@@ -210,32 +319,20 @@ function init() {\n             \"styles/jquery-ui-overrides.less\",\n             \"styles/common.less\",\n             \"styles/pure.css\",\n-            \"styles/index.less\"\n-        ]\n-    );\n-    \n-    ClientSideResourceManager.addPaths(\n-        \"import/scripts\",\n-        module,\n-        [\n-            \"externals/jquery-1.4.2.min.js\",\n-            \"externals/jquery-ui/jquery-ui-1.8.custom.min.js\",\n-            \"externals/date.js\",\n-            \"scripts/util/string.js\",\n-            \"scripts/util/dom.js\",\n-            \"scripts/import.js\"\n-        ]\n-    );\n-    \n-    ClientSideResourceManager.addPaths(\n-        \"import/styles\",\n-        module,\n-        [\n-            \"externals/jquery-ui/css/ui-lightness/jquery-ui-1.8.custom.css\",\n-            \"styles/jquery-ui-overrides.less\",\n-            \"styles/common.less\",\n-            \"styles/pure.css\",\n-            \"styles/import.less\"\n+            \"styles/index.less\",\n+            \"styles/index/create-project-ui.less\",\n+            \"styles/index/open-project-ui.less\",\n+            \"styles/index/import-project-ui.less\",\n+            \n+            \"styles/index/default-importing-controller.less\",\n+            \"styles/index/default-importing-file-selection-panel.less\",\n+            \"styles/index/default-importing-parsing-panel.less\",\n+            \n+            \"styles/index/default-importing-sources.less\",\n+            \"styles/views/data-table-view.less\", // for the preview table's styles\n+            \"styles/index/fixed-width-parser-ui.less\",\n+            \"styles/index/xml-parser-ui.less\",\n+            \"styles/index/json-parser-ui.less\"\n         ]\n     );\n     "
        },
        {
            "sha": "5ad498c85c99b4e2a7d35834cc968cfb12eeb83f",
            "filename": "main/webapp/modules/core/index.vt",
            "status": "modified",
            "additions": 24,
            "deletions": 173,
            "changes": 197,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Findex.vt",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Findex.vt",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Findex.vt?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -41,182 +41,33 @@ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   $styleInjection\n </head>\n <body>\n-  #if($params.new  && $params.new == \"1\")\n-    #set($newStyle = \"\")\n-    #set($oldStyle = \"display: none; \")\n-  #else\n-    #set($oldStyle = \"\")\n-    #set($newStyle = \"display: none; \")\n-  #end\n-  <div id=\"container\">\n-    <div id=\"logo\"> </div>\n-    <div id=\"header-home\">\n-      <img alt=\"Google Refine\" src=\"images/logo-googlerefine-40.png\" />\n-      <h1>A power tool for working with messy data.</h1>\n-    </div>\n-    <div id=\"content-home\">\n-      <div id=\"no-project-message\" class=\"message\" style=\"display: none;\">\n-        No existing project. Create one now!<br/>\n-        Try these <a href=\"http://code.google.com/p/google-refine/wiki/SampleDatasets\" target=\"_blank\">sample data sets &raquo;</a>\n-      </div>\n-        \n-      <div id=\"project-open\">\n-        <h1>Open a Project</h1>\n-        <div id=\"projects-container\"></div>\n-        <div class=\"content-block-footer\"><a href=\"javascript:openWorkspaceDir()\" class=\"secondary\">Browse workspace directory</a></div>\n-      </div>\n-      <div id=\"project-create\">\n-        <h1 style=\"$newStyle\">Create a New Project</h1>\n-        <div style=\"$newStyle\" id=\"import-panel\"><table id=\"import-panel-layout\">\n-          <tr>\n-            <td id=\"import-panel-tab-headers\">\n-              <div>Import data from</div>\n-            </td>\n-            <td id=\"import-panel-tab-bodies\"></td>\n-          </tr>\n-          <tr>\n-            <td colspan=\"2\" id=\"import-panel-message\">\n-              <h3>What kinds of data files can I import?</h3>\n-              <div>TSV, CSV, *SV, Excel (.xls and .xlsx), JSON, XML, RDF as XML, and\n-                Google Spreadsheets are all supported. Support for other formats can\n-                be added with Refine extensions.\n-              </div>\n-            </td>\n-          </tr>\n-        </table></div>\n-        \n-        <div style=\"$newStyle\" id=\"import-progress-panel\">\n-          <div class=\"grid-layout layout-normal layout-full\"><table>\n-            <tr><td colspan=\"3\" id=\"import-progress-message\"></td></tr>\n-            <tr><td colspan=\"3\">\n-              <div id=\"import-progress-bar-frame\"><div id=\"import-progress-bar-body\"></div></div>\n-            </td></tr>\n-            <tr>\n-              <td id=\"import-progress-message-left\"></td>\n-              <td id=\"import-progress-message-center\"></td>\n-              <td id=\"import-progress-message-right\"></td>\n-            </tr>\n-            <tr><td colspan=\"3\">\n-              <button class=\"button\" id=\"import-progress-cancel-button\">Cancel</button>\n-            </td></tr>\n-          </table></div>\n-          <iframe id=\"import-iframe\" name=\"import-iframe\"></iframe>\n-        </div>\n-        \n-        <div style=\"$newStyle\" id=\"import-error-panel\"><div class=\"grid-layout layout-normal layout-full\"><table>\n-          <tr><td id=\"import-error-message\"></td></tr>\n-          <tr><td id=\"import-error-stack\"></td></tr>\n-          <tr><td><button class=\"button button-primary\" id=\"import-error-ok-button\">OK</button></td></tr>\n-        </table></div></div>\n-                \n-        <form style=\"$oldStyle\" id=\"file-upload-form\" method=\"post\" enctype=\"multipart/form-data\" action=\"/command/core/create-project-from-upload\" accept-charset=\"UTF-8\">\n-          <h1>Create a New Project</h1>\n-          <h2 id=\"project-toggle\">\n-            <a class=\"secondary\" href=\"javascript:showHide('file-upload-form', 'project-upload-form')\">or Import an Existing Project</a>\n-          </h2>\n-          <div class=\"project-create-basic\">\n-            <table class=\"form-table\">\n-              <tr>\n-                <th><label for=\"project-file\">Data file:</label></th>\n-                <td><input type=\"file\" id=\"project-file-input\" name=\"project-file\" /></td>\n-              </tr>\n-              <tr>\n-                <th><label for=\"project-url\">or data file URL:</label></th>\n-                <td><input type=\"text\" id=\"project-url-input\" name=\"project-url\" size=\"40\" /></td>\n-              </tr>\n-              <tr>\n-                <th><label for=\"project-name\">Project name:</label></th>\n-                <td><input type=\"text\" size=\"25\" id=\"project-name-input\" name=\"project-name\" /></td></tr>\n-              <tr>\n-                <td></td>\n-                <td><input type=\"submit\" value=\"Create Project\" id=\"upload-file-button\" class=\"button button-primary\"  /></td>\n-              </tr>\n-            </table>\n-          </div>\n-          <div class=\"project-create-advanced\">\n-            <h2>Advanced Options</h2>\n-            <div class=\"project-create-option\">\n-              Limit load to:\n-              <div class=\"project-create-suboption\">\n-                <input type=\"text\" id=\"limit-input\" name=\"limit\" size=\"5\" /> rows (blank for all)\n-              </div>\n-            </div>\n-            <div class=\"project-create-option\">\n-              Ignore:\n-              <div class=\"project-create-suboption\">\n-                <input type=\"text\" id=\"ignore-input\" name=\"ignore\" size=\"5\" value=\"0\" /> initial non-blank lines\n-              </div>\n-            </div>\n-            <div class=\"project-create-option\">\n-              Skip:\n-              <div class=\"project-create-suboption\">\n-                <input type=\"text\" id=\"skip-input\" name=\"skip\" size=\"5\" value=\"0\" /> initial data rows\n-              </div>\n-            </div>\n-            <div id=\"project-create-parsetext\">\n-              <div class=\"project-create-option\">\n-                When parsing text files:\n-                <div class=\"project-create-suboption\">\n-                  <input id=\"split-into-columns-input\" type=\"checkbox\" checked=\"true\" name=\"split-into-columns\" />\n-                  Split into columns\n-                </div>\n-                <div class=\"project-create-suboption\">\n-                  Column separator:\n-                  <input type=\"text\" id=\"separator-input\" name=\"separator\" size=\"2\" /><br />\n-                  (leave blank to auto-detect)\n-                </div>\n-                <div class=\"project-create-suboption\">\n-                  <input type=\"checkbox\" id=\"guess-value-type-input\" name=\"guess-value-type\" checked=\"true\" />\n-                  Auto-detect value types<br />\n-                  (numbers, dates, etc)\n-                </div>\n-                <div class=\"project-create-suboption\">\n-                  Header lines: <input type=\"text\" id=\"header-lines-input\" name=\"header-lines\" size=\"5\" value=\"1\" /><br />\n-                  (use 0 if your data has no header)\n-                </div>\n-                <div class=\"project-create-suboption\">\n-                  <input type=\"checkbox\" id=\"ignore-quotes-input\" name=\"ignore-quotes\" />\n-                  Ignore quotation marks\n-                </div>\n-              </div>\n-            </div>\n-          </div>\n-        </form>\n-\n-        <form style=\"display: none;\" id=\"project-upload-form\" method=\"post\" enctype=\"multipart/form-data\" action=\"/command/core/import-project\" accept-charset=\"UTF-8\" style=\"display:none;\">\n-          <h1>Import an Existing Project</h1>\n-          <h2 id=\"project-toggle\">\n-            <a class=\"secondary\" href=\"javascript:showHide('project-upload-form', 'file-upload-form')\">or Create a New Project</a>\n-          </h2>\n-          <div class=\"project-create-basic\">\n-            <p>Import an existing Google Refine .tar or .tar.gz project file:</p>\n-            <table class=\"form-table\">\n-              <tr>\n-                <th><label for=\"project-file\">Project file:</label></th>\n-                <td><input type=\"file\" id=\"project-tar-file-input\" name=\"project-file\" /></td>\n-              </tr>\n-              <tr>\n-                <th><label for=\"project-name\">Project name (optional):</label></th>\n-                <td><input type=\"text\" size=\"25\" id=\"project-name-input\" name=\"project-name\" /></td></tr>\n-              <tr>\n-                <td></td>\n-                <td><input type=\"submit\" value=\"Import Project\" id=\"import-project-button\" class=\"button button-primary\" /></td>\n-              </tr>\n-            </table>\n-          </div>\n-        </form>\n-      </div>\n+  <div id=\"header\">\n+    <img alt=\"Google Refine\" src=\"images/logo-googlerefine-30.png\" width=\"129\" height=\"29\" />\n+    A power tool for working with messy data.\n+  </div>\n+  \n+  <div id=\"left-panel\" class=\"main-layout-panel\"><div id=\"left-panel-body\">\n+    <ul id=\"action-area-tabs\">\n+    </ul>\n     \n-      <div id=\"project-links\">\n-        <ul>\n-          <li><a href=\"/about.html\">About Google Refine</a></li>\n-          <li><a href=\"https://code.google.com/p/google-refine/\">Project Home Page</a></li>\n-          <li><a href=\"http://code.google.com/p/google-refine/wiki/Screencasts\">Screencasts</a></li>\n-          <li><a href=\"http://code.google.com/p/google-refine/wiki/DocumentationForUsers\">Help Documentation</a></li>\n-        </ul>\n+    <div id=\"project-links\">\n+      <div id=\"logo-container\">\n+        <img alt=\"Google Refine\" src=\"images/logo-gem-40.png\" />\n         <div id=\"google-refine-version\"></div>\n-      </div>      \n+      </div>\n+      <ul>\n+        <li><a href=\"http://code.google.com/p/google-refine/wiki/DocumentationForUsers\">Help</a></li>\n+        <li><a href=\"/about.html\">About</a></li>\n+      </ul>\n     </div>\n+  </div></div> <!-- left-panel -->\n+\n+  <div id=\"right-panel\" class=\"main-layout-panel\"><div id=\"right-panel-body\">\n+  </div></div> <!-- right-panel -->\n+  \n+  <div id=\"no-project-message\" class=\"message\" style=\"display: none;\">\n+    No existing project. Create one now!<br/>\n+    Try these <a href=\"http://code.google.com/p/google-refine/wiki/SampleDatasets\" target=\"_blank\">sample data sets &raquo;</a>\n   </div>\n </body>\n </html>"
        },
        {
            "sha": "a8f06a49f3b69bd2c63f554c303a767ef09e9e10",
            "filename": "main/webapp/modules/core/scripts/index.js",
            "status": "modified",
            "additions": 111,
            "deletions": 391,
            "changes": 502,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex.js",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex.js",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex.js?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -31,424 +31,144 @@ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n \n */\n \n-function onClickUploadFileButton(evt) {\n-    var projectName = $(\"#project-name-input\")[0].value;\n-    var dataURL = $.trim($(\"#project-url-input\")[0].value);\n-    if (! $.trim(projectName).length) {\n-        window.alert(\"You must specify a project name.\");\n-\n-    } else if ($(\"#project-file-input\")[0].files.length === 0 && ! dataURL.length) {\n-        window.alert(\"You must specify a data file to upload or a URL to retrieve.\");\n-\n-    } else {\n-        $(\"#file-upload-form\").attr(\"action\",\n-            \"/command/core/create-project-from-upload?\" + [\n-                \"url=\" +                escape(dataURL),\n-                \"split-into-columns=\" + $(\"#split-into-columns-input\")[0].checked,\n-                \"separator=\" +          $(\"#separator-input\")[0].value,\n-                \"ignore=\" +             $(\"#ignore-input\")[0].value,\n-                \"header-lines=\" +       $(\"#header-lines-input\")[0].value,\n-                \"skip=\" +               $(\"#skip-input\")[0].value,\n-                \"limit=\" +              $(\"#limit-input\")[0].value,\n-                \"guess-value-type=\" +   $(\"#guess-value-type-input\")[0].checked,\n-                \"ignore-quotes=\" +      $(\"#ignore-quotes-input\")[0].checked\n-            ].join(\"&\"));\n-\n-        return true;\n-    }\n-\n-    evt.preventDefault();\n-    return false;\n-}\n-\n-function formatDate(d) {\n-    var d = new Date(d);\n-    var last_year = Date.today().add({ years: -1 });\n-    var last_month = Date.today().add({ months: -1 });\n-    var last_week = Date.today().add({ days: -7 });\n-    var today = Date.today();\n-    var tomorrow = Date.today().add({ days: 1 });\n-\n-    if (d > today) {\n-        return \"today \" + d.toString(\"h:mm tt\");\n-    } else if (d.between(last_week, today)) {\n-        var diff = Math.floor(today.getDayOfYear() - d.getDayOfYear());\n-        return (diff <= 1) ? (\"yesterday \" + d.toString(\"h:mm tt\")) : (diff + \" days ago\");\n-    } else if (d.between(last_month, today)) {\n-        var diff = Math.floor((today.getDayOfYear() - d.getDayOfYear()) / 7);\n-        if (diff < 0) {diff += 52;}\n-        return (diff == 1) ? \"a week ago\" : diff.toFixed(0) + \" weeks ago\" ;\n-    } else if (d.between(last_year, today)) {\n-        var diff = Math.floor(today.getMonth() - d.getMonth());\n-        if (diff < 0) {diff += 12;}\n-        return (diff == 1) ? \"a month ago\" : diff + \" months ago\";\n-    } else {\n-        var diff = Math.floor(today.getYear() - d.getYear());\n-        return (diff == 1) ? \"a year ago\" : diff + \" years ago\";\n-    }\n-}\n-\n-function isThereNewRelease() {\n-    var thisRevision = GoogleRefineVersion.revision;\n-\n-    var revision_pattern = /r([0-9]+)/;\n-\n-    if (!revision_pattern.test(thisRevision)) { // probably \"trunk\"\n-        return false;\n-    }\n-\n-    var latestRevision = GoogleRefineReleases.releases[0].revision;\n-\n-    var thisRev = parseInt(revision_pattern.exec(thisRevision)[1],10);\n-    var latestRev = parseInt(revision_pattern.exec(GoogleRefineReleases.releases[0].revision)[1],10);\n-\n-    return latestRev > thisRev;\n-}\n-\n-function fetchProjects() {\n-    $.getJSON(\n-        \"/command/core/get-all-project-metadata\",\n-        null,\n-        function(data) {\n-            renderProjects(data);\n-        },\n-        \"json\"\n-    );\n-}\n-\n-function renderProjects(data) {\n-    var projects = [];\n-    for (var n in data.projects) {\n-        if (data.projects.hasOwnProperty(n)) {\n-            var project = data.projects[n];\n-            project.id = n;\n-            project.date = Date.parseExact(project.modified, \"yyyy-MM-ddTHH:mm:ssZ\");\n-            projects.push(project);\n-        }\n-    }\n-    projects.sort(function(a, b) { return b.date.getTime() - a.date.getTime(); });\n-\n-    var container = $(\"#projects-container\").empty();\n-    if (!projects.length) {\n-        $(\"#no-project-message\").clone().show().appendTo(container);\n-    } else {\n-        var table = $(\n-            '<table class=\"list-table\"><tr>' +\n-                '<th>Name</th>' +\n-                '<th></th>' +\n-                '<th></th>' +\n-                '<th align=\"right\">Last&nbsp;modified</th>' +\n-            '</tr></table>'\n-        ).appendTo(container)[0];\n-\n-        var renderProject = function(project) {\n-            var tr = table.insertRow(table.rows.length);\n-            tr.className = \"project\";\n-\n-            var nameLink = $('<a></a>')\n-                .addClass(\"list-table-itemname\")\n-                .text(project.name)\n-                .attr(\"href\", \"/project?project=\" + project.id)\n-                .appendTo(tr.insertCell(tr.cells.length));\n-\n-            var renameLink = $('<a></a>')\n-                .text(\"rename\")\n-                .addClass(\"secondary\")\n-                .attr(\"href\", \"javascript:{}\")\n-                .css(\"visibility\", \"hidden\")\n-                .click(function() {\n-                    var name = window.prompt(\"New project name:\", project.name);\n-                    if (name == null) {\n-                        return;\n-                    }\n-\n-                    name = $.trim(name);\n-                    if (project.name == name || name.length == 0) {\n-                        return;\n-                    }\n-\n-                    $.ajax({\n-                        type: \"POST\",\n-                        url: \"/command/core/rename-project\",\n-                        data: { \"project\" : project.id, \"name\" : name },\n-                        dataType: \"json\",\n-                        success: function (data) {\n-                            if (data && typeof data.code != 'undefined' && data.code == \"ok\") {\n-                                nameLink.text(name);\n-                            } else {\n-                                alert(\"Failed to rename project: \" + data.message);\n-                            }\n-                        }\n-                    });\n-                }).appendTo(tr.insertCell(tr.cells.length));\n-\n-            var deleteLink = $('<a></a>')\n-                .addClass(\"delete-project\")\n-                .attr(\"title\",\"Delete this project\")\n-                .attr(\"href\",\"\")\n-                .css(\"visibility\", \"hidden\")                \n-                .html(\"<img src='/images/close.png' />\")\n-                .click(function() {\n-                    if (window.confirm(\"Are you sure you want to delete project \\\"\" + project.name + \"\\\"?\")) {\n-                        $.ajax({\n-                            type: \"POST\",\n-                            url: \"/command/core/delete-project\",\n-                            data: { \"project\" : project.id },\n-                            dataType: \"json\",\n-                            success: function (data) {\n-                                if (data && typeof data.code != 'undefined' && data.code == \"ok\") {\n-                                    fetchProjects();\n-                                }\n-                            }\n-                        });\n-                    }\n-                    return false;\n-                }).appendTo(tr.insertCell(tr.cells.length));\n-\n+var GoogleRefineVersion;\n \n-            $('<div></div>')\n-                .html(formatDate(project.date))\n-                .addClass(\"last-modified\")\n-                .attr(\"title\", project.date.toString())\n-                .appendTo(tr.insertCell(tr.cells.length));\n+var Refine = {\n+    actionAreas: []\n+};\n \n-            $(tr).mouseenter(function() {\n-                renameLink.css(\"visibility\", \"visible\");\n-                deleteLink.css(\"visibility\", \"visible\");\n-            }).mouseleave(function() {\n-                renameLink.css(\"visibility\", \"hidden\");\n-                deleteLink.css(\"visibility\", \"hidden\");\n-            });\n-        };\n+Refine.selectActionArea = function(id) {\n+    $('.action-area-tab').removeClass('selected');\n+    $('.action-area-tab-body').css('visibility', 'hidden').css('z-index', '100');\n \n-        for (var i = 0; i < projects.length; i++) {\n-            renderProject(projects[i]);\n+    for (var i = 0; i < Refine.actionAreas.length; i++) {\n+        var actionArea = Refine.actionAreas[i];\n+        if (id == actionArea.id) {\n+            actionArea.tabElmt.addClass('selected');\n+            actionArea.bodyElmt.css('visibility', 'visible').css('z-index', '110');;\n         }\n     }\n-}\n+};\n \n-function showHide(toHide, toShow) {\n-    $(\"#\" + toHide).hide();\n-    $(\"#\" + toShow).show();\n-}\n-\n-function openWorkspaceDir() {\n-    $.ajax({\n-        type: \"POST\",\n-        url: \"/command/core/open-workspace-dir\",\n-        dataType: \"json\",\n-        success: function (data) {\n-            if (data.code != \"ok\" && \"message\" in data) {\n-                alert(data.message);\n-            }\n+$(function() {\n+    var isThereNewRelease = function() {\n+        var thisRevision = GoogleRefineVersion.revision;\n+    \n+        var revision_pattern = /r([0-9]+)/;\n+    \n+        if (!revision_pattern.test(thisRevision)) { // probably \"trunk\"\n+            return false;\n         }\n-    });\n-}\n+    \n+        var latestRevision = GoogleRefineReleases.releases[0].revision;\n+    \n+        var thisRev = parseInt(revision_pattern.exec(thisRevision)[1],10);\n+        var latestRev = parseInt(revision_pattern.exec(GoogleRefineReleases.releases[0].revision)[1],10);\n+    \n+        return latestRev > thisRev;\n+    };\n \n-var GoogleRefineVersion;\n-function showVersion() {\n-    $.getJSON(\n+    var showVersion = function() {\n+        $.getJSON(\n         \"/command/core/get-version\",\n         null,\n         function(data) {\n             GoogleRefineVersion = data;\n-            \n+\n             $(\"#google-refine-version\").text(\"Version \" + GoogleRefineVersion.full_version);\n-            \n+\n             var script = $('<script></script>')\n-                .attr(\"src\", \"http://google-refine.googlecode.com/svn/support/releases.js\")\n-                .attr(\"type\", \"text/javascript\")\n-                .appendTo(document.body);\n+            .attr(\"src\", \"http://google-refine.googlecode.com/svn/support/releases.js\")\n+            .attr(\"type\", \"text/javascript\")\n+            .appendTo(document.body);\n \n             var poll = function() {\n                 if (\"releases\" in window) {\n                     if (isThereNewRelease()) {\n                         var container = $('<div id=\"notification-container\">')\n-                            .appendTo(document.body);\n+                        .appendTo(document.body)\n                         var notification = $('<div id=\"notification\">')\n-                            .text('New version! ')\n-                            .appendTo(container);\n+                        .text('New version! ')\n+                        .appendTo(container)\n                         $('<a>')\n-                            .addClass('notification-action')\n-                            .attr(\"href\", releases.homepage)\n-                            .text('Download ' + releases.releases[0].description + ' now.')\n-                            .appendTo(notification);\n+                        .addClass('notification-action')\n+                        .attr(\"href\", releases.homepage)\n+                        .text('Download ' + releases.releases[0].description + ' now.')\n+                        .appendTo(notification);\n                     }\n                 } else {\n                     window.setTimeout(poll, 1000);\n                 }\n             };\n-            window.setTimeout(poll, 1000);            \n+            window.setTimeout(poll, 1000);\n         }\n-    );\n-}\n-\n-function renderImportPanel() {\n-  var headerContainer = $('#import-panel-tab-headers');\n-  var bodyContainer = $('#import-panel-tab-bodies');\n-  \n-  var selectImportSourceTab = function(importSource) {\n-    $('.import-panel-tab-body').hide();\n-    $('.import-panel-tab-header').removeClass('selected');\n-    \n-    importSource._divBody.show();\n-    importSource._divHeader.addClass('selected');\n-    importSource._ui.focus();\n-  };\n-  \n-  var createImportSourceTab = function(importSource) {\n-    importSource._divBody = $('<div>')\n-      .addClass('import-panel-tab-body')\n-      .appendTo(bodyContainer)\n-      .hide();\n-    \n-    importSource._divHeader = $('<div>')\n-      .addClass('import-panel-tab-header')\n-      .text(importSource.label)\n-      .appendTo(headerContainer)\n-      .click(function() { selectImportSourceTab(importSource); });\n-      \n-    importSource._ui = new importSource.ui(importSource._divBody);\n-  };\n-  \n-  for (var i= 0; i < ImportSources.length; i++) {\n-    createImportSourceTab(ImportSources[i]);\n-  }\n-  selectImportSourceTab(ImportSources[0]);\n-}\n-\n-function startImportJob(importSource, form, progressMessage) {\n-  $.post(\n-    \"/command/core/create-import-job\",\n-    null,\n-    function(data) {\n-      var jobID = data.jobID;\n-      \n-      form.attr(\"method\", \"post\")\n-          .attr(\"enctype\", \"multipart/form-data\")\n-          .attr(\"accept-charset\", \"UTF-8\")\n-          .attr(\"target\", \"import-iframe\")\n-          .attr(\"action\", \"/command/core/retrieve-import-content?\" + $.param({\n-            \"jobID\" : jobID,\n-            \"source\" : importSource\n-          }));\n-\n-      form[0].submit();\n-      \n-      var start = new Date();\n-      var timerID = window.setInterval(function() { pollImportJob(start, jobID, timerID); }, 1000);\n-      initializeImportProgressPanel(progressMessage, jobID, timerID);\n-    },\n-    \"json\"\n-  );\n-}\n-\n-function initializeImportProgressPanel(progressMessage, jobID, timerID) {\n-  $('#import-progress-message').text(progressMessage);\n-  $('#import-progress-bar-body').css(\"width\", \"0%\");\n-  $('#import-progress-message-left').text('Starting');\n-  $('#import-progress-message-center').empty();\n-  $('#import-progress-message-right').empty();\n-  \n-  $('#import-panel').hide();\n-  $('#import-progress-panel').show();\n-  \n-  $('#import-progress-cancel-button').unbind().click(function() {\n-    $('#import-panel').show();\n-    $('#import-progress-panel').hide();\n-    \n-    // stop the iframe\n-    $('#import-iframe')[0].contentWindow.stop();\n-    \n-    // stop the timed polling\n-    window.clearInterval(timerID);\n+        );\n+    };\n+\n+    var resize = function() {\n+        var leftPanelWidth = 150;\n+        // px\n+        var width = $(window).width();\n+        var height = $(window).height();\n+        var headerHeight = $('#header').outerHeight();\n+        var panelHeight = height - headerHeight;\n+\n+        $('.main-layout-panel')\n+        .css(\"top\", headerHeight + \"px\")\n+        .css(\"bottom\", \"0px\")\n+        .css(\"height\", panelHeight + \"px\")\n+        .css(\"visibility\", \"visible\");\n+\n+        $('#left-panel')\n+        .css(\"left\", \"0px\")\n+        .css(\"width\", leftPanelWidth + \"px\");\n+        var leftPanelBodyHPaddings = 10;\n+        // px\n+        var leftPanelBodyVPaddings = 0;\n+        // px\n+        $('#left-panel-body')\n+        .css(\"margin-left\", leftPanelBodyHPaddings + \"px\")\n+        .css(\"margin-top\", leftPanelBodyVPaddings + \"px\")\n+        .css(\"width\", ($('#left-panel').width() - leftPanelBodyHPaddings) + \"px\")\n+        .css(\"height\", ($('#left-panel').height() - leftPanelBodyVPaddings) + \"px\");\n+\n+        $('#right-panel')\n+        .css(\"left\", leftPanelWidth + \"px\")\n+        .css(\"width\", (width - leftPanelWidth) + \"px\");\n+\n+        var rightPanelBodyHPaddings = 5;\n+        // px\n+        var rightPanelBodyVPaddings = 5;\n+        // px\n+        $('#right-panel-body')\n+        .css(\"margin-left\", rightPanelBodyHPaddings + \"px\")\n+        .css(\"margin-top\", rightPanelBodyVPaddings + \"px\")\n+        .css(\"width\", ($('#right-panel').width() - rightPanelBodyHPaddings) + \"px\")\n+        .css(\"height\", ($('#right-panel').height() - rightPanelBodyVPaddings) + \"px\");\n+    };\n+    $(window).bind(\"resize\", resize);\n+    window.setTimeout(resize, 50); // for Chrome, give the window some time to layout first\n     \n-    // explicitly cancel the import job\n-    $.post(\"/command/core/cancel-import-job?\" + $.param({ \"jobID\" : jobID }));\n-  });\n-}\n-\n-function bytesToString(b) {\n-  if (b >= 1024 * 1024) {\n-    return Math.round(b / (1024 * 1024)) + \" MB\";\n-  } else if (b >= 1024) {\n-    return Math.round(b / 1024) + \" KB\";\n-  } else {\n-    return b + \" bytes\";\n-  }\n-}\n-\n-function pollImportJob(start, jobID, timerID) {\n-  $.post(\n-    \"/command/core/get-import-job-status?\" + $.param({ \"jobID\" : jobID }),\n-    null,\n-    function(data) {\n-      if (data.code == \"error\") {\n-        showImportJobError(data.message);\n-        window.clearInterval(timerID);\n-      } else if (data.state == \"error\") {\n-        showImportJobError(data.message, data.stack);\n-        window.clearInterval(timerID);\n-      } else if (data.state == \"retrieving\") {\n-        if (data.progress < 0) {\n-          $('#import-progress-message-left').text(bytesToString(data.bytesSaved) + \" saved\");\n-        } else {\n-          $('#import-progress-bar-body').css(\"width\", data.progress + \"%\");\n-          $('#import-progress-message-left').text(data.progress + \"% saved\");\n-        }\n-      } else if (data.state == \"ready\") {\n-        window.clearInterval(timerID);\n-        \n-        // Just so if the user clicks Back the progress panel won't be showing if the DOM is cached.\n-        $('#import-progress-panel').hide();\n-        $('#import-panel').show();\n-        \n-        window.location = \"/import?\" + $.param({ \"jobID\" : jobID });\n-      }\n-    },\n-    \"json\"\n-  );\n-}\n-\n-function showImportJobError(message, stack) {\n-  $('#import-error-message').text(message);\n-  $('#import-error-stack').text(stack || 'No technical details.');\n-  \n-  $('#import-progress-panel').hide();\n-  $('#import-error-panel').show();\n-  \n-  $('#import-error-ok-button').unbind().click(function() {\n-    $('#import-error-panel').hide();\n-    $('#import-panel').show();\n-  });\n-}\n+    var renderActionArea = function(actionArea) {\n+        actionArea.bodyElmt = $('<div>')\n+        .addClass('action-area-tab-body')\n+        .appendTo('#right-panel-body');\n+\n+        actionArea.tabElmt = $('<li>')\n+        .addClass('action-area-tab')\n+        .text(actionArea.label)\n+        .appendTo($('#action-area-tabs'))\n+        .click(function() {\n+            Refine.selectActionArea(actionArea.id);\n+        });\n+\n+        actionArea.ui = new actionArea.uiClass(actionArea.bodyElmt);\n+    };\n+\n+    for (var i = 0; i < Refine.actionAreas.length; i++) {\n+        renderActionArea(Refine.actionAreas[i]);\n+    }\n+    Refine.selectActionArea('create-project');\n \n-function onLoad() {\n-  renderImportPanel();\n-  \n-    fetchProjects();\n-    \n-    $(\"#project-file-input\").change(function() {\n-        if ($(\"#project-name-input\")[0].value.length == 0) {\n-            var fileName = this.files[0].fileName;\n-            if (fileName) {\n-                $(\"#project-name-input\")[0].value = fileName.replace(/\\.\\w+/, \"\").replace(/[_-]/g, \" \");\n-            }\n-            $(\"#project-name-input\").focus().select();\n-        }\n-    }).keypress(function(evt) {\n-        if (evt.keyCode == 13) {\n-            onClickUploadFileButton();\n-        }\n-    });\n-    \n-    $(\"#upload-file-button\").click(onClickUploadFileButton);\n-    $(\"#more-options-link\").click(function() {\n-        $(\"#more-options-controls\").hide();\n-        $(\"#more-options\").show();\n-    });\n-    \n     showVersion();\n-}\n-\n-$(onLoad);\n+});"
        },
        {
            "sha": "48bff8f378b4da144406e07740cac283176d421e",
            "filename": "main/webapp/modules/core/scripts/index/create-project-ui-source-selection.html",
            "status": "added",
            "additions": 17,
            "deletions": 0,
            "changes": 17,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fcreate-project-ui-source-selection.html",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fcreate-project-ui-source-selection.html",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fcreate-project-ui-source-selection.html?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,17 @@\n+<div id=\"create-project-ui-source-selection\" class=\"relative-frame\"><table id=\"create-project-ui-source-selection-layout\">\n+  <tr>\n+    <td colspan=\"2\" id=\"create-project-ui-source-selection-message\">\n+      <h3>Create a project by importing data. What kinds of data files can I import?</h3>\n+      <div>TSV, CSV, *SV, Excel (.xls and .xlsx), JSON, XML, RDF as XML, and\n+        Google Spreadsheets are all supported. Support for other formats can\n+        be added with Refine extensions.\n+      </div>\n+    </td>\n+  </tr>\n+  <tr>\n+    <td id=\"create-project-ui-source-selection-tabs\">\n+      <div>Get data from</div>\n+    </td>\n+    <td id=\"create-project-ui-source-selection-tab-bodies\"></td>\n+  </tr>\n+</table></div>"
        },
        {
            "sha": "67cc85bf231064e6bc87b081a8ffcbddad17f611",
            "filename": "main/webapp/modules/core/scripts/index/create-project-ui.js",
            "status": "added",
            "additions": 145,
            "deletions": 0,
            "changes": 145,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fcreate-project-ui.js",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fcreate-project-ui.js",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fcreate-project-ui.js?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,145 @@\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+Refine.CreateProjectUI = function(elmt) {\n+    var self = this;\n+    \n+    this._elmt = elmt;\n+    this._sourceSelectionUIs = [];\n+    this._customPanels = [];\n+    this._controllers = [];\n+    \n+    $.post(\n+        \"/command/core/get-importing-configuration\",\n+        null,\n+        function(data) {\n+            Refine.importingConfig = data.config;\n+            self._initializeUI();\n+        },\n+        \"json\"\n+    );\n+};\n+\n+Refine.CreateProjectUI.controllers = [];\n+\n+Refine.CreateProjectUI.prototype._initializeUI = function() {\n+    this._sourceSelectionElmt =\n+        $(DOM.loadHTML(\"core\", \"scripts/index/create-project-ui-source-selection.html\")).appendTo(this._elmt);\n+\n+    this._sourceSelectionElmts = DOM.bind(this._sourceSelectionElmt);\n+    \n+    for (var i = 0; i < Refine.CreateProjectUI.controllers.length; i++) {\n+        this._controllers.push(new Refine.CreateProjectUI.controllers[i](this));\n+    }\n+};\n+\n+Refine.CreateProjectUI.prototype.addSourceSelectionUI = function(sourceSelectionUI) {\n+    var self = this;\n+    \n+    var headerContainer = $('#create-project-ui-source-selection-tabs');\n+    var bodyContainer = $('#create-project-ui-source-selection-tab-bodies');\n+\n+    sourceSelectionUI._divBody = $('<div>')\n+        .addClass('create-project-ui-source-selection-tab-body')\n+        .appendTo(bodyContainer)\n+        .hide();\n+\n+    sourceSelectionUI._divHeader = $('<div>')\n+        .addClass('create-project-ui-source-selection-tab')\n+        .text(sourceSelectionUI.label)\n+        .appendTo(headerContainer)\n+        .click(function() { self.selectImportSource(sourceSelectionUI.id); });\n+\n+    sourceSelectionUI.ui.attachUI(sourceSelectionUI._divBody);\n+\n+    this._sourceSelectionUIs.push(sourceSelectionUI);\n+    \n+    if (this._sourceSelectionUIs.length == 1) {\n+      self.selectImportSource(sourceSelectionUI.id);\n+    }\n+};\n+\n+Refine.CreateProjectUI.prototype.selectImportSource = function(id) {\n+    for (var i = 0; i < this._sourceSelectionUIs.length; i++) {\n+        var sourceSelectionUI = this._sourceSelectionUIs[i];\n+        if (sourceSelectionUI.id == id) {\n+            $('.create-project-ui-source-selection-tab-body').hide();\n+            $('.create-project-ui-source-selection-tab').removeClass('selected');\n+\n+            sourceSelectionUI._divBody.show();\n+            sourceSelectionUI._divHeader.addClass('selected');\n+            \n+            sourceSelectionUI.ui.focus();\n+            \n+            break;\n+        }\n+    }\n+};\n+\n+Refine.CreateProjectUI.prototype.addCustomPanel = function() {\n+    var div = $('<div>')\n+        .addClass('create-project-ui-panel')\n+        .appendTo(this._elmt);\n+    \n+    var innerDiv = $('<div>')\n+        .addClass('relative-frame')\n+        .appendTo(div);\n+    \n+    this._customPanels.push(div);\n+    \n+    return innerDiv;\n+};\n+\n+Refine.CreateProjectUI.prototype.showCustomPanel = function(div) {\n+    var parent = div.parent();\n+    for (var i = 0; i < this._customPanels.length; i++) {\n+        var panel = this._customPanels[i];\n+        if (panel[0] === parent[0]) {\n+            $('.create-project-ui-panel').css('visibility', 'hidden');\n+            this._sourceSelectionElmt.css('visibility', 'hidden');\n+            panel.css('visibility', 'visible');\n+            break;\n+        }\n+    }\n+};\n+\n+Refine.CreateProjectUI.prototype.showSourceSelectionPanel = function() {\n+    $('.create-project-ui-panel').css('visibility', 'hidden');\n+    this._sourceSelectionElmt.css('visibility', 'visible');\n+};\n+\n+Refine.actionAreas.push({\n+  id: \"create-project\",\n+  label: \"Create Project\",\n+  uiClass: Refine.CreateProjectUI\n+});"
        },
        {
            "sha": "386bfffbb0e46ddc1f7a4d5491ce9290c64486d6",
            "filename": "main/webapp/modules/core/scripts/index/default-importing-controller/controller.js",
            "status": "added",
            "additions": 395,
            "deletions": 0,
            "changes": 395,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-controller%2Fcontroller.js",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-controller%2Fcontroller.js",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-controller%2Fcontroller.js?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,395 @@\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+Refine.DefaultImportingController = function(createProjectUI) {\n+    this._createProjectUI = createProjectUI;\n+    \n+    this._progressPanel = createProjectUI.addCustomPanel();\n+    this._progressPanel.html(DOM.loadHTML(\"core\", \"scripts/index/default-importing-controller/progress-panel.html\"));\n+    \n+    this._errorPanel = createProjectUI.addCustomPanel();\n+    this._errorPanel.html(DOM.loadHTML(\"core\", \"scripts/index/default-importing-controller/error-panel.html\"));\n+    \n+    this._fileSelectionPanel = createProjectUI.addCustomPanel();\n+    this._parsingPanel = createProjectUI.addCustomPanel();\n+    \n+    for (var i = 0; i < Refine.DefaultImportingController.sources.length; i++) {\n+        var sourceSelectionUI = Refine.DefaultImportingController.sources[i];\n+        sourceSelectionUI.ui = new sourceSelectionUI.uiClass(this);\n+        \n+        createProjectUI.addSourceSelectionUI(sourceSelectionUI);\n+    }\n+};\n+Refine.CreateProjectUI.controllers.push(Refine.DefaultImportingController);\n+\n+Refine.DefaultImportingController.sources = [];\n+Refine.DefaultImportingController.parserUIs = {};\n+\n+Refine.DefaultImportingController.prototype._startOver = function() {\n+    this._disposeFileSelectionPanel();\n+    this._disposeFileSelectionPanel();\n+    \n+    delete this._fileSelectionPanelElmts;\n+    delete this._parsingPanelElmts;\n+    \n+    delete this._jobID;\n+    delete this._job;\n+    delete this._extensions;\n+    \n+    delete this._format;\n+    delete this._parserOptions;\n+    delete this._projectName;\n+    \n+    this._createProjectUI.showSourceSelectionPanel();\n+};\n+\n+Refine.DefaultImportingController.prototype.startImportJob = function(form, progressMessage, callback) {\n+    var self = this;\n+    $.post(\n+        \"/command/core/create-importing-job\",\n+        null,\n+        function(data) {\n+            var jobID = self._jobID = data.jobID;\n+\n+            form.attr(\"method\", \"post\")\n+                .attr(\"enctype\", \"multipart/form-data\")\n+                .attr(\"accept-charset\", \"UTF-8\")\n+                .attr(\"target\", \"default-importing-iframe\")\n+                .attr(\"action\", \"/command/core/importing-controller?\" + $.param({\n+                    \"controller\": \"core/default-importing-controller\",\n+                    \"jobID\": jobID,\n+                    \"subCommand\": \"load-raw-data\"\n+                }));\n+            form[0].submit();\n+\n+            var start = new Date();\n+            var timerID = window.setInterval(\n+                function() {\n+                    self._pollImportJob(\n+                        start, jobID, timerID,\n+                        function(job) {\n+                            return job.config.hasData;\n+                        },\n+                        function(jobID, job) {\n+                            self._job = job;\n+                            self._onImportJobReady();\n+                            if (callback) {\n+                                callback(jobID, job);\n+                            }\n+                        }\n+                    );\n+                },\n+                1000\n+            );\n+            self._initializeImportProgressPanel(progressMessage, function() {\n+                // stop the iframe\n+                $('#default-importing-iframe')[0].contentWindow.stop();\n+\n+                // stop the timed polling\n+                window.clearInterval(timerID);\n+\n+                // explicitly cancel the import job\n+                $.post(\"/command/core/cancel-importing-job?\" + $.param({ \"jobID\": jobID }));\n+                \n+                self._createProjectUI.showSourceSelectionPanel();\n+            });\n+        },\n+        \"json\"\n+    );\n+};\n+\n+Refine.DefaultImportingController.prototype._initializeImportProgressPanel = function(progressMessage, onCancel) {\n+    var self = this;\n+    \n+    this._createProjectUI.showCustomPanel(this._progressPanel);\n+    \n+    $('#default-importing-progress-message').text(progressMessage);\n+    $('#default-importing-progress-bar-body').css(\"width\", \"0%\");\n+    $('#default-importing-progress-message-left').text('Starting');\n+    $('#default-importing-progress-message-center').empty();\n+    $('#default-importing-progress-message-right').empty();\n+    $('#default-importing-progress-timing').empty();\n+\n+    $('#default-importing-progress-cancel-button').unbind().click(onCancel);\n+};\n+\n+Refine.DefaultImportingController.prototype._pollImportJob = function(start, jobID, timerID, checkDone, callback) {\n+    var self = this;\n+    $.post(\n+        \"/command/core/get-importing-job-status?\" + $.param({ \"jobID\": jobID }),\n+        null,\n+        function(data) {\n+            if (!(data)) {\n+                self._showImportJobError(\"Unknown error\");\n+                window.clearInterval(timerID);\n+                return;\n+            } else if (data.code == \"error\" || !(\"job\" in data)) {\n+                self._showImportJobError(data.message || \"Unknown error\");\n+                window.clearInterval(timerID);\n+                return;\n+            }\n+            \n+            var job = data.job;\n+            if (checkDone(job)) {\n+                $('#default-importing-progress-message').text('Done.');\n+                \n+                window.clearInterval(timerID);\n+                if (callback) {\n+                    callback(jobID, job);\n+                }\n+            } else {\n+                var progress = job.config.progress;\n+                if (progress.percent > 0) {\n+                    var secondsSpent = (new Date().getTime() - start.getTime()) / 1000;\n+                    var secondsRemaining = (100 / progress.percent) * secondsSpent - secondsSpent;\n+                    \n+                    $('#default-importing-progress-bar-body')\n+                        .removeClass('indefinite')\n+                        .css(\"width\", progress.percent + \"%\");\n+                    \n+                    if (secondsRemaining > 1) {\n+                        if (secondsRemaining > 60) {\n+                            $('#default-importing-progress-timing').text(\n+                                Math.ceil(secondsRemaining / 60) + \" minutes remaining\");\n+                        } else {\n+                            $('#default-importing-progress-timing').text(\n+                                Math.ceil(secondsRemaining) + \" seconds remaining\");\n+                        }\n+                    } else {\n+                        $('#default-importing-progress-timing').text('almost done ...');\n+                    }\n+                } else {\n+                    $('#default-importing-progress-bar-body').addClass('indefinite');\n+                    $('#default-importing-progress-timing').empty();\n+                }\n+                $('#default-importing-progress-message').text(progress.message);\n+            }\n+        },\n+        \"json\"\n+    );\n+};\n+\n+Refine.DefaultImportingController.prototype._showImportJobError = function(message, stack) {\n+    var self = this;\n+    \n+    $('#default-importing-error-message').text(message);\n+    $('#default-importing-error-stack').text(stack || 'No technical details.');\n+\n+    this._createProjectUI.showCustomPanel(this._errorPanel);\n+    $('#default-importing-error-ok-button').unbind().click(function() {\n+        self._createProjectUI.showSourceSelectionPanel();\n+    });\n+};\n+\n+Refine.DefaultImportingController.prototype._onImportJobReady = function() {\n+    this._prepareData();\n+    if (this._job.config.retrievalRecord.files.length > 1) {\n+        this._showFileSelectionPanel();\n+    } else {\n+        this._showParsingPanel(false);\n+    }\n+};\n+\n+Refine.DefaultImportingController.prototype._prepareData = function() {\n+    var extensionMap = {};\n+    var extensionList = [];\n+    \n+    var files = this._job.config.retrievalRecord.files;\n+    var fileSelection = this._job.config.fileSelection;\n+    for (var i = 0; i < files.length; i++) {\n+        var file = files[i];\n+        file.selected = false;\n+        \n+        var slash = file.fileName.lastIndexOf('/');\n+        var dot = file.fileName.lastIndexOf('.');\n+        if (dot > slash + 1) {\n+            var extension = file.fileName.substring(dot);\n+            if (extension in extensionMap) {\n+                extensionMap[extension].count++;\n+            } else {\n+                extensionMap[extension] = { extension: extension, count: 1 };\n+                extensionList.push(extensionMap[extension]);\n+            }\n+        }\n+    }\n+    for (var i = 0; i < fileSelection.length; i++) {\n+        files[fileSelection[i]].selected = true;\n+    }\n+    \n+    extensionList.sort(function(a, b) {\n+        return b.count - a.count;\n+    });\n+    this._extensions = extensionList;\n+};\n+\n+Refine.DefaultImportingController.prototype._ensureFormatParserUIHasInitializationData = function(format, onDone) {\n+    if (!(format in this._parserOptions)) {\n+        var self = this;\n+        var dismissBusy = DialogSystem.showBusy(\"Inspecting selected files ...\");\n+        $.post(\n+            \"/command/core/importing-controller?\" + $.param({\n+                \"controller\": \"core/default-importing-controller\",\n+                \"jobID\": this._jobID,\n+                \"subCommand\": \"initialize-parser-ui\",\n+                \"format\": format\n+            }),\n+            null,\n+            function(data) {\n+                dismissBusy();\n+                \n+                if (data.options) {\n+                    self._parserOptions[format] = data.options;\n+                    onDone();\n+                }\n+            },\n+            \"json\"\n+        );\n+    } else {\n+        onDone();\n+    }\n+};\n+\n+Refine.DefaultImportingController.prototype.updateFormatAndOptions = function(options, callback) {\n+    var self = this;\n+    $.post(\n+        \"/command/core/importing-controller?\" + $.param({\n+            \"controller\": \"core/default-importing-controller\",\n+            \"jobID\": this._jobID,\n+            \"subCommand\": \"update-format-and-options\"\n+        }),\n+        {\n+            \"format\" : this._format,\n+            \"options\" : JSON.stringify(options)\n+        },\n+        callback,\n+        \"json\"\n+    );\n+};\n+\n+Refine.DefaultImportingController.prototype.getPreviewData = function(callback, numRows) {\n+    var self = this;\n+    var result = {};\n+    \n+    $.post(\n+        \"/command/core/get-models?\" + $.param({ \"importingJobID\" : this._jobID }),\n+        null,\n+        function(data) {\n+            for (var n in data) {\n+                if (data.hasOwnProperty(n)) {\n+                    result[n] = data[n];\n+                }\n+            }\n+            \n+            $.post(\n+                \"/command/core/get-rows?\" + $.param({\n+                    \"importingJobID\" : self._jobID,\n+                    \"start\" : 0,\n+                    \"limit\" : numRows || 100 // More than we parse for preview anyway\n+                }),\n+                null,\n+                function(data) {\n+                    // Un-pool objects\n+                    for (var r = 0; r < data.rows.length; r++) {\n+                        var row = data.rows[r];\n+                        for (var c = 0; c < row.cells.length; c++) {\n+                            var cell = row.cells[c];\n+                            if ((cell) && (\"r\" in cell)) {\n+                                cell.r = data.pool.recons[cell.r];\n+                            }\n+                        }\n+                    }\n+                    \n+                    result.rowModel = data;\n+                    callback(result);\n+                },\n+                \"jsonp\"\n+            );\n+        },\n+        \"json\"\n+    );\n+};\n+\n+Refine.DefaultImportingController.prototype._createProject = function() {\n+  if ((this._formatParserUI) && this._formatParserUI.confirmReadyToCreateProject()) {\n+    var projectName = $.trim(this._parsingPanelElmts.projectNameInput[0].value);\n+    if (projectName.length == 0) {\n+      window.alert(\"Please name the project.\");\n+      this._parsingPanelElmts.focus();\n+      return;\n+    }\n+    \n+    var self = this;\n+    var options = this._formatParserUI.getOptions();\n+    options.projectName = projectName;\n+    $.post(\n+        \"/command/core/importing-controller?\" + $.param({\n+            \"controller\": \"core/default-importing-controller\",\n+            \"jobID\": this._jobID,\n+            \"subCommand\": \"create-project\"\n+        }),\n+        {\n+            \"format\" : this._format,\n+            \"options\" : JSON.stringify(options)\n+        },\n+        function() {\n+          var start = new Date();\n+          var timerID = window.setInterval(\n+              function() {\n+                  self._pollImportJob(\n+                      start,\n+                      self._jobID,\n+                      timerID,\n+                      function(job) {\n+                          return \"projectID\" in job.config;\n+                      },\n+                      function(jobID, job) {\n+                          document.location = \"project?project=\" + job.config.projectID;\n+                      }\n+                  );\n+              },\n+              1000\n+          );\n+          self._initializeImportProgressPanel(\"Creating project ...\", function() {\n+              // stop the timed polling\n+              window.clearInterval(timerID);\n+\n+              // explicitly cancel the import job\n+              $.post(\"/command/core/cancel-importing-job?\" + $.param({ \"jobID\": jobID }));\n+              \n+              self._createProjectUI.showSourceSelectionPanel();\n+          });\n+        },\n+        \"json\"\n+    );\n+  }\n+};"
        },
        {
            "sha": "e6453f06778db4f23d0caa89e31b759c34f210d4",
            "filename": "main/webapp/modules/core/scripts/index/default-importing-controller/error-panel.html",
            "status": "added",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-controller%2Ferror-panel.html",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-controller%2Ferror-panel.html",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-controller%2Ferror-panel.html?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,5 @@\n+<div id=\"default-importing-error-panel\"><div class=\"grid-layout layout-normal layout-full\"><table>\n+  <tr><td id=\"default-importing-error-message\"></td></tr>\n+  <tr><td id=\"default-importing-error-stack\"></td></tr>\n+  <tr><td><button class=\"button button-primary\" id=\"default-importing-error-ok-button\">OK</button></td></tr>\n+</table></div></div>\n\\ No newline at end of file"
        },
        {
            "sha": "248f9b354b948b7df093cf81934e532703993e5a",
            "filename": "main/webapp/modules/core/scripts/index/default-importing-controller/file-selection-panel.html",
            "status": "added",
            "additions": 36,
            "deletions": 0,
            "changes": 36,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-controller%2Ffile-selection-panel.html",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-controller%2Ffile-selection-panel.html",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-controller%2Ffile-selection-panel.html?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,36 @@\n+<div bind=\"wizardHeader\" class=\"default-importing-wizard-header\"><div class=\"grid-layout layout-tightest layout-full\"><table><tr>\n+  <td width=\"1%\"><button bind=\"startOverButton\" class=\"button\">&laquo; Start Over</button></td>\n+  <td width=\"98%\">Select Files to Import</td>\n+  <td width=\"1%\"><button bind=\"nextButton\" class=\"button button-primary\">Configure Parsing Opions &raquo;</button></td>\n+</tr></table></div></div>\n+\n+<div bind=\"controlPanel\" class=\"default-importing-file-selection-control-panel\">\n+  <div class=\"grid-layout layout-full layout-tighter\"><table>\n+    <tr>\n+      <td colspan=\"3\">\n+        There are several files available to import.\n+        Please select the desired ones.\n+      </td>\n+    </tr>\n+    <tr>\n+      <td width=\"98%\" bind=\"summary\"></td>\n+      <td width=\"1%\"><button bind=\"selectAllButton\" class=\"button\">Select All</button></td>\n+      <td width=\"1%\"><button bind=\"unselectAllButton\" class=\"button\">Unselect All</button></td>\n+    </tr>\n+  </table></div>\n+  \n+  <h2>Select by Extension</h2>\n+  <div bind=\"extensionContainer\" class=\"grid-layout layout-full layout-tightest\"></div>\n+  \n+  <h2>Select by Regex on File Names</h2>\n+  <div class=\"grid-layout layout-full layout-tighter\"><table>\n+    <tr><td colspan=\"3\"><input bind=\"regexInput\" style=\"width: 100%;\"/></td></tr>\n+    <tr>\n+      <td bind=\"regexSummary\"></td>\n+      <td width=\"1%\"><button bind=\"selectRegexButton\" class=\"button\">Select</button></td>\n+      <td width=\"1%\"><button bind=\"unselectRegexButton\" class=\"button\">Unselect</button></td>\n+    </tr>\n+  </table></div>\n+</div>\n+\n+<div bind=\"filePanel\" class=\"default-importing-file-selection-file-panel\"></div>\n\\ No newline at end of file"
        },
        {
            "sha": "be083b0af2109ae015b90593434fc2ba40a3918e",
            "filename": "main/webapp/modules/core/scripts/index/default-importing-controller/file-selection-panel.js",
            "status": "added",
            "additions": 314,
            "deletions": 0,
            "changes": 314,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-controller%2Ffile-selection-panel.js",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-controller%2Ffile-selection-panel.js",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-controller%2Ffile-selection-panel.js?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,314 @@\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+Refine.DefaultImportingController.prototype._showFileSelectionPanel = function() {\n+    var self = this;\n+    \n+    this._prepareFileSelectionPanel();\n+    \n+    this._fileSelectionPanelElmts.nextButton.click(function() {\n+        self._commitFileSelection();\n+    });\n+    this._renderFileSelectionPanel();\n+    this._createProjectUI.showCustomPanel(this._fileSelectionPanel);\n+};\n+\n+Refine.DefaultImportingController.prototype._disposeFileSelectionPanel = function() {\n+    if (this._fileSelectionPanelResizer) {\n+        $(window).unbind(\"resize\", this._fileSelectionPanelResizer);\n+    }\n+    this._fileSelectionPanel.unbind().empty();\n+};\n+\n+Refine.DefaultImportingController.prototype._prepareFileSelectionPanel = function() {\n+    var self = this;\n+    \n+    this._fileSelectionPanel.unbind().empty().html(\n+        DOM.loadHTML(\"core\", \"scripts/index/default-importing-controller/file-selection-panel.html\"));\n+    \n+    this._fileSelectionPanelElmts = DOM.bind(this._fileSelectionPanel);\n+    this._fileSelectionPanelElmts.startOverButton.click(function() {\n+        self._startOver();\n+    });\n+    \n+    this._fileSelectionPanelResizer = function() {\n+        var elmts = self._fileSelectionPanelElmts;\n+        var width = self._fileSelectionPanel.width();\n+        var height = self._fileSelectionPanel.height();\n+        var headerHeight = elmts.wizardHeader.outerHeight(true);\n+        var controlPanelWidth = 350;\n+        \n+        elmts.controlPanel\n+            .css(\"left\", \"0px\")\n+            .css(\"top\", headerHeight + \"px\")\n+            .css(\"width\", (controlPanelWidth - DOM.getHPaddings(elmts.controlPanel)) + \"px\")\n+            .css(\"height\", (height - headerHeight - DOM.getVPaddings(elmts.controlPanel)) + \"px\");\n+        \n+        elmts.filePanel\n+            .css(\"left\", controlPanelWidth + \"px\")\n+            .css(\"top\", headerHeight + \"px\")\n+            .css(\"width\", (width - controlPanelWidth - DOM.getHPaddings(elmts.filePanel)) + \"px\")\n+            .css(\"height\", (height - headerHeight - DOM.getVPaddings(elmts.filePanel)) + \"px\");\n+    };\n+    \n+    $(window).resize(this._fileSelectionPanelResizer);\n+    this._fileSelectionPanelResizer();\n+};\n+\n+Refine.DefaultImportingController.prototype._renderFileSelectionPanel = function() {\n+    this._renderFileSelectionPanelFileTable();\n+    this._renderFileSelectionPanelControlPanel();\n+};\n+\n+Refine.DefaultImportingController.prototype._renderFileSelectionPanelFileTable = function() {\n+    var self = this;\n+    \n+    this._fileSelectionPanelElmts.filePanel.empty();\n+    \n+    var fileTable = $('<table><tr><th></th><th>Name</th><th>Mime-type</th><th>Format</th><th>Size</th></tr></table>')\n+        .appendTo(this._fileSelectionPanelElmts.filePanel)[0];\n+\n+    var files = this._job.config.retrievalRecord.files;\n+    var renderFile = function(fileRecord, index) {\n+        var tr = fileTable.insertRow(fileTable.rows.length);\n+        $(tr).addClass(index % 2 == 0 ? 'even' : 'odd');\n+        \n+        var tdSelect = $('<td>').appendTo(tr);\n+        var checkbox = $('<input>')\n+            .attr(\"type\", \"checkbox\")\n+            .attr(\"index\", index)\n+            .appendTo(tdSelect)\n+            .click(function() {\n+                files[index].selected = this.checked;\n+                self._updateFileSelectionSummary();\n+            });\n+        if (fileRecord.selected) {\n+            checkbox.attr(\"checked\", \"checked\");\n+        }\n+        \n+        $('<td>').text(fileRecord.fileName).addClass(\"default-importing-file-selection-filename\").appendTo(tr);\n+        $('<td>').text(fileRecord.declaredMimeType || fileRecord.mimeType || \"unknown\").appendTo(tr);\n+        $('<td>').text(fileRecord.format || \"unknown\").appendTo(tr);\n+        $('<td>').text(fileRecord.size + \" bytes\").appendTo(tr);\n+    };\n+    \n+    for (var i = 0; i < files.length; i++) {\n+        renderFile(files[i], i);\n+    }\n+};\n+\n+Refine.DefaultImportingController.prototype._renderFileSelectionPanelControlPanel = function() {\n+    var self = this;\n+    var files = this._job.config.retrievalRecord.files;\n+    \n+    this._fileSelectionPanelElmts.extensionContainer.empty();\n+    this._fileSelectionPanelElmts.selectAllButton.unbind().click(function(evt) {\n+        for (var i = 0; i < files.length; i++) {\n+            files[i].selected = true;\n+        }\n+        self._fileSelectionPanelElmts.filePanel.find(\"input\").attr(\"checked\", \"checked\");\n+        self._updateFileSelectionSummary();\n+    });\n+    this._fileSelectionPanelElmts.unselectAllButton.unbind().click(function(evt) {\n+        for (var i = 0; i < files.length; i++) {\n+            files[i].selected = false;\n+        }\n+        self._fileSelectionPanelElmts.filePanel.find(\"input\").removeAttr(\"checked\");\n+        self._updateFileSelectionSummary();\n+    });\n+    \n+    var table = $('<table></table>')\n+        .appendTo(this._fileSelectionPanelElmts.extensionContainer)[0];\n+        \n+    var renderExtension = function(extension) {\n+        var tr = table.insertRow(table.rows.length);\n+        $('<td>').text(extension.extension).appendTo(tr);\n+        $('<td>').text(extension.count + (extension.count > 1 ? \" files\" : \" file\")).appendTo(tr);\n+        $('<button>')\n+            .text(\"Select\")\n+            .addClass(\"button\")\n+            .appendTo($('<td>').appendTo(tr))\n+            .click(function() {\n+                for (var i = 0; i < files.length; i++) {\n+                    var file = files[i];\n+                    if (!file.selected) {\n+                        if (file.fileName.endsWith(extension.extension)) {\n+                            file.selected = true;\n+                            self._fileSelectionPanelElmts.filePanel\n+                                .find(\"input[index='\" + i + \"']\")\n+                                .attr(\"checked\", \"checked\");\n+                        }\n+                    }\n+                }\n+                self._updateFileSelectionSummary();\n+            });\n+        $('<button>')\n+            .text(\"Unselect\")\n+            .addClass(\"button\")\n+            .appendTo($('<td>').appendTo(tr))\n+            .click(function() {\n+                for (var i = 0; i < files.length; i++) {\n+                    var file = files[i];\n+                    if (file.selected) {\n+                        if (file.fileName.endsWith(extension.extension)) {\n+                            file.selected = false;\n+                            self._fileSelectionPanelElmts.filePanel\n+                                .find(\"input[index='\" + i + \"']\")\n+                                .removeAttr(\"checked\");\n+                        }\n+                    }\n+                }\n+                self._updateFileSelectionSummary();\n+            });\n+    };\n+    for (var i = 0; i < this._extensions.length; i++) {\n+        renderExtension(this._extensions[i]);\n+    }\n+    \n+    this._updateFileSelectionSummary();\n+    \n+    this._fileSelectionPanelElmts.regexInput.unbind().keyup(function() {\n+        var count = 0;\n+        var elmts = self._fileSelectionPanelElmts.filePanel\n+            .find(\".default-importing-file-selection-filename\")\n+            .removeClass(\"highlighted\");\n+        try {\n+            var regex = new RegExp(this.value);\n+            elmts.each(function() {\n+                if (regex.test($(this).text())) {\n+                    $(this).addClass(\"highlighted\");\n+                    count++;\n+                }\n+            });\n+        } catch (e) {\n+            // Ignore\n+        }\n+        self._fileSelectionPanelElmts.regexSummary.text(count + (count == 1 ? \" match\" : \" matches\"));\n+    });\n+    this._fileSelectionPanelElmts.selectRegexButton.unbind().click(function() {\n+        self._fileSelectionPanelElmts.filePanel\n+            .find(\".default-importing-file-selection-filename\")\n+            .removeClass(\"highlighted\");\n+        try {\n+            var regex = new RegExp(self._fileSelectionPanelElmts.regexInput[0].value);\n+            for (var i = 0; i < files.length; i++) {\n+                var file = files[i];\n+                if (!file.selected) {\n+                    if (regex.test(file.fileName)) {\n+                        file.selected = true;\n+                        self._fileSelectionPanelElmts.filePanel\n+                            .find(\"input[index='\" + i + \"']\")\n+                            .attr(\"checked\", \"checked\");\n+                    }\n+                }\n+            }\n+            self._updateFileSelectionSummary();\n+        } catch (e) {\n+            // Ignore\n+        }\n+    });\n+    this._fileSelectionPanelElmts.unselectRegexButton.unbind().click(function() {\n+        self._fileSelectionPanelElmts.filePanel\n+            .find(\".default-importing-file-selection-filename\")\n+            .removeClass(\"highlighted\");\n+        try {\n+            var regex = new RegExp(self._fileSelectionPanelElmts.regexInput[0].value);\n+            for (var i = 0; i < files.length; i++) {\n+                var file = files[i];\n+                if (file.selected) {\n+                    if (regex.test(file.fileName)) {\n+                        file.selected = false;\n+                        self._fileSelectionPanelElmts.filePanel\n+                            .find(\"input[index='\" + i + \"']\")\n+                            .removeAttr(\"checked\");\n+                    }\n+                }\n+            }\n+            self._updateFileSelectionSummary();\n+        } catch (e) {\n+            // Ignore\n+        }\n+    });\n+};\n+\n+Refine.DefaultImportingController.prototype._updateFileSelectionSummary = function() {\n+    var fileSelection = [];\n+    var files = this._job.config.retrievalRecord.files;\n+    for (var i = 0; i < files.length; i++) {\n+        if (files[i].selected) {\n+            fileSelection.push(i);\n+        }\n+    }\n+    this._job.config.fileSelection = fileSelection;\n+    this._fileSelectionPanelElmts.summary.text(fileSelection.length + \" of \" + files.length + \" files selected\");\n+};\n+\n+Refine.DefaultImportingController.prototype._commitFileSelection = function() {\n+    if (this._job.config.fileSelection.length == 0) {\n+        alert(\"Please select at least one file.\");\n+        return;\n+    }\n+    \n+    var self = this;\n+    var dismissBusy = DialogSystem.showBusy(\"Inspecting selected files ...\");\n+    $.post(\n+        \"/command/core/importing-controller?\" + $.param({\n+            \"controller\": \"core/default-importing-controller\",\n+            \"jobID\": this._jobID,\n+            \"subCommand\": \"update-file-selection\"\n+        }),\n+        {\n+            \"fileSelection\" : JSON.stringify(this._job.config.fileSelection)\n+        },\n+        function(data) {\n+            if (!(data)) {\n+                self._showImportJobError(\"Unknown error\");\n+                window.clearInterval(timerID);\n+                return;\n+            } else if (data.code == \"error\" || !(\"job\" in data)) {\n+                self._showImportJobError(data.message || \"Unknown error\");\n+                window.clearInterval(timerID);\n+                return;\n+            }\n+            \n+            dismissBusy();\n+            \n+            // Different files might be selected. We start over again.\n+            delete this._parserOptions;\n+            \n+            self._job = data.job;\n+            self._showParsingPanel(true);\n+        },\n+        \"json\"\n+    );\n+};"
        },
        {
            "sha": "d8b4e8a7e0457179b81fc6e9edf03c938d701f94",
            "filename": "main/webapp/modules/core/scripts/index/default-importing-controller/parsing-panel.html",
            "status": "added",
            "additions": 21,
            "deletions": 0,
            "changes": 21,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-controller%2Fparsing-panel.html",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-controller%2Fparsing-panel.html",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-controller%2Fparsing-panel.html?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,21 @@\n+<div bind=\"wizardHeader\" class=\"default-importing-wizard-header\"><div class=\"grid-layout layout-tightest layout-full\"><table><tr>\n+  <td width=\"1%\"><button bind=\"startOverButton\" class=\"button\">&laquo; Start Over</button></td>\n+  <td width=\"1%\"><button bind=\"previousButton\" class=\"button\">&laquo; Re-select Files</button></td>\n+  <td width=\"98%\">Configure Parsing Options</td>\n+  <td style=\"text-align: right;\">Project&nbsp;name</td>\n+  <td width=\"1%\"><input class=\"inline\" type=\"text\" size=\"30\" bind=\"projectNameInput\" /></td>\n+  <td width=\"1%\"><button bind=\"nextButton\" class=\"button button-primary\">Create Project &raquo;</button></td>\n+</tr></table></div></div>\n+\n+<div bind=\"dataPanel\" class=\"default-importing-parsing-data-panel\"></div>\n+<div bind=\"progressPanel\" class=\"default-importing-progress-data-panel\">\n+    <img src=\"images/large-spinner.gif\" /> Updating preview ...\n+</div>\n+\n+<div bind=\"controlPanel\" class=\"default-importing-parsing-control-panel\"><table><tr>\n+  <td class=\"default-importing-parsing-control-panel-formats\">\n+    <div class=\"default-importing-parsing-control-panel-formats-message\">Parse data as</div>\n+    <div bind=\"formatsContainer\"></div>\n+  </td>\n+  <td bind=\"optionsContainer\" class=\"default-importing-parsing-control-panel-options-panel\"></td>\n+</tr></table></div>\n\\ No newline at end of file"
        },
        {
            "sha": "7c6f78759cf8ae65350487060d0854d4916562df",
            "filename": "main/webapp/modules/core/scripts/index/default-importing-controller/parsing-panel.js",
            "status": "added",
            "additions": 186,
            "deletions": 0,
            "changes": 186,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-controller%2Fparsing-panel.js",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-controller%2Fparsing-panel.js",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-controller%2Fparsing-panel.js?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,186 @@\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+Refine.DefaultImportingController.prototype._showParsingPanel = function(hasFileSelection) {\n+    var self = this;\n+    \n+    if (!(this._format)) {\n+        this._format = this._job.config.rankedFormats[0];\n+    }\n+    if (!(this._parserOptions)) {\n+        this._parserOptions = {};\n+    }\n+    \n+    this._prepareParsingPanel();\n+    this._parsingPanelElmts.nextButton.click(function() {\n+        self._createProject();\n+    });\n+    if (hasFileSelection) {\n+        this._parsingPanelElmts.previousButton.click(function() {\n+            self._createProjectUI.showCustomPanel(self._fileSelectionPanel);\n+        });\n+    } else {\n+        this._parsingPanelElmts.previousButton.hide();\n+    }\n+    \n+    if (!(this._projectName) && this._job.config.fileSelection.length > 0) {\n+        var index = this._job.config.fileSelection[0];\n+        var record = this._job.config.retrievalRecord.files[index];\n+        this._projectName = $.trim(record.fileName.replace(/\\W/g, ' ').replace(/\\s+/g, ' '));\n+    }\n+    if (this._projectName) {\n+        this._parsingPanelElmts.projectNameInput[0].value = this._projectName;\n+    }\n+    \n+    this._createProjectUI.showCustomPanel(this._parsingPanel);\n+};\n+\n+Refine.DefaultImportingController.prototype._disposeFileSelectionPanel = function() {\n+    this._disposeParserUI();\n+    \n+    if (this._parsingPanelResizer) {\n+        $(window).unbind(\"resize\", this._parsingPanelResizer);\n+    }\n+    \n+    this._parsingPanel.unbind().empty();\n+    delete this._parsingPanelElmts;\n+};\n+\n+Refine.DefaultImportingController.prototype._prepareParsingPanel = function() {\n+    var self = this;\n+    \n+    this._parsingPanel.unbind().empty().html(\n+        DOM.loadHTML(\"core\", \"scripts/index/default-importing-controller/parsing-panel.html\"));\n+    \n+    this._parsingPanelElmts = DOM.bind(this._parsingPanel);\n+    this._parsingPanelElmts.startOverButton.click(function() {\n+        self._startOver();\n+    });\n+    this._parsingPanelElmts.progressPanel.hide();\n+    \n+    this._parsingPanelResizer = function() {console.log(\"here\");\n+        var elmts = self._parsingPanelElmts;\n+        var width = self._parsingPanel.width();\n+        var height = self._parsingPanel.height();\n+        var headerHeight = elmts.wizardHeader.outerHeight(true);\n+        var controlPanelHeight = 300;\n+        \n+        elmts.dataPanel\n+            .css(\"left\", \"0px\")\n+            .css(\"top\", headerHeight + \"px\")\n+            .css(\"width\", (width - DOM.getHPaddings(elmts.dataPanel)) + \"px\")\n+            .css(\"height\", (height - headerHeight - controlPanelHeight - DOM.getVPaddings(elmts.dataPanel)) + \"px\");\n+        elmts.progressPanel\n+            .css(\"left\", \"0px\")\n+            .css(\"top\", headerHeight + \"px\")\n+            .css(\"width\", (width - DOM.getHPaddings(elmts.progressPanel)) + \"px\")\n+            .css(\"height\", (height - headerHeight - controlPanelHeight - DOM.getVPaddings(elmts.progressPanel)) + \"px\");\n+        \n+        elmts.controlPanel\n+            .css(\"left\", \"0px\")\n+            .css(\"top\", (height - controlPanelHeight) + \"px\")\n+            .css(\"width\", (width - DOM.getHPaddings(elmts.controlPanel)) + \"px\")\n+            .css(\"height\", (controlPanelHeight - DOM.getVPaddings(elmts.controlPanel)) + \"px\");\n+    };\n+    \n+    $(window).resize(this._parsingPanelResizer);\n+    this._parsingPanelResizer();\n+    \n+    var formats = this._job.config.rankedFormats;\n+    var createFormatTab = function(format) {\n+        var tab = $('<div>')\n+            .text(Refine.importingConfig.formats[format].label)\n+            .attr(\"format\", format)\n+            .addClass(\"default-importing-parsing-control-panel-format\")\n+            .appendTo(self._parsingPanelElmts.formatsContainer)\n+            .click(function() {\n+                self._selectFormat(format);\n+            });\n+        \n+        if (format == self._format) {\n+            tab.addClass(\"selected\");\n+        }\n+    };\n+    for (var i = 0; i < formats.length; i++) {\n+        createFormatTab(formats[i]);\n+    }\n+    this._selectFormat(this._format);\n+};\n+\n+Refine.DefaultImportingController.prototype._disposeParserUI = function() {\n+    if (this._formatParserUI) {\n+        this._formatParserUI.dispose();\n+        delete this._formatParserUI;\n+    }\n+    if (this._parsingPanelElmts) {\n+        this._parsingPanelElmts.optionsContainer.unbind().empty();\n+        this._parsingPanelElmts.progressPanel.unbind();\n+        this._parsingPanelElmts.dataPanel.unbind().empty();\n+    }\n+};\n+\n+Refine.DefaultImportingController.prototype._selectFormat = function(newFormat) {\n+    if (newFormat == this._format && (this._formatParserUI)) {\n+        // The new format is the same as the existing one.\n+        return;\n+    }\n+    \n+    var uiClassName = Refine.importingConfig.formats[newFormat].uiClass;\n+    var uiClass = Refine.DefaultImportingController.parserUIs[uiClassName];\n+    if (uiClass) {\n+        var self = this;\n+        this._ensureFormatParserUIHasInitializationData(newFormat, function() {\n+            self._disposeParserUI();\n+            self._parsingPanelElmts.formatsContainer\n+                .find(\".default-importing-parsing-control-panel-format\")\n+                .removeClass(\"selected\")\n+                .each(function() {\n+                    if (this.getAttribute(\"format\") == newFormat) {\n+                        $(this).addClass(\"selected\");\n+                    }\n+                });\n+            \n+            self._format = newFormat;\n+            self._formatParserUI = new uiClass(\n+                self,\n+                self._jobID,\n+                self._job,\n+                self._format,\n+                self._parserOptions[newFormat],\n+                self._parsingPanelElmts.dataPanel,\n+                self._parsingPanelElmts.progressPanel,\n+                self._parsingPanelElmts.optionsContainer\n+            );\n+        });\n+    }\n+};"
        },
        {
            "sha": "c1182de7c38437e320df783a14aee860050ef937",
            "filename": "main/webapp/modules/core/scripts/index/default-importing-controller/progress-panel.html",
            "status": "added",
            "additions": 13,
            "deletions": 0,
            "changes": 13,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-controller%2Fprogress-panel.html",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-controller%2Fprogress-panel.html",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-controller%2Fprogress-panel.html?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,13 @@\n+<div id=\"default-importing-progress-panel\">\n+  <div class=\"grid-layout layout-normal layout-full\"><table>\n+    <tr><td colspan=\"3\" id=\"default-importing-progress-message\"></td></tr>\n+    <tr><td colspan=\"3\">\n+      <div id=\"default-importing-progress-bar-frame\"><div id=\"default-importing-progress-bar-body\"></div></div>\n+    </td></tr>\n+    <tr><td colspan=\"3\">\n+      <button class=\"button\" id=\"default-importing-progress-cancel-button\">Cancel</button>\n+      <span id=\"default-importing-progress-timing\"></span>\n+    </td></tr>\n+  </table></div>\n+  <iframe id=\"default-importing-iframe\" name=\"default-importing-iframe\"></iframe>\n+</div>\n\\ No newline at end of file"
        },
        {
            "sha": "b6afe478d28701a448627366951200ef57600d62",
            "filename": "main/webapp/modules/core/scripts/index/default-importing-sources/import-from-clipboard-form.html",
            "status": "renamed",
            "additions": 2,
            "deletions": 3,
            "changes": 5,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-sources%2Fimport-from-clipboard-form.html",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-sources%2Fimport-from-clipboard-form.html",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-sources%2Fimport-from-clipboard-form.html?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -1,7 +1,6 @@\n <form bind=\"form\"><div class=\"grid-layout layout-normal\"><table>\n-  <tr><td>File to import:</td></tr>\n-  <tr><td><input type=\"file\" bind=\"fileInput\" name=\"project-file\" />\n-    <input type=\"hidden\" name=\"project-name\" bind=\"nameInput\" />\n+  <tr><td>Paste data from clipboard here:</td></tr>\n+  <tr><td><textarea bind=\"textInput\" name=\"clipboard\" id=\"default-importing-clipboard-textarea\"></textarea>\n   </td></tr>\n   <tr><td><button bind=\"nextButton\" class=\"button button-primary\" type=\"button\">Next &raquo;</button></td></tr>\n </table></div></form>\n\\ No newline at end of file",
            "previous_filename": "main/webapp/modules/core/scripts/index/import-from-computer-form.html"
        },
        {
            "sha": "57f7cb017de906c65e8ebb1b0fe25dd41fefee91",
            "filename": "main/webapp/modules/core/scripts/index/default-importing-sources/import-from-computer-form.html",
            "status": "added",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-sources%2Fimport-from-computer-form.html",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-sources%2Fimport-from-computer-form.html",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-sources%2Fimport-from-computer-form.html?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,5 @@\n+<form bind=\"form\"><div class=\"grid-layout layout-normal\"><table>\n+  <tr><td>Locate one or more files on your computer to upload:</td></tr>\n+  <tr><td><input type=\"file\" multiple bind=\"fileInput\" name=\"upload\" /></td></tr>\n+  <tr><td><button bind=\"nextButton\" class=\"button button-primary\" type=\"button\">Next &raquo;</button></td></tr>\n+</table></div></form>\n\\ No newline at end of file"
        },
        {
            "sha": "73ee37bc0693bf3ba559a9ffc610e50a2a7876dc",
            "filename": "main/webapp/modules/core/scripts/index/default-importing-sources/import-from-web-form.html",
            "status": "added",
            "additions": 8,
            "deletions": 0,
            "changes": 8,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-sources%2Fimport-from-web-form.html",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-sources%2Fimport-from-web-form.html",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-sources%2Fimport-from-web-form.html?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,8 @@\n+<form bind=\"form\"><div class=\"grid-layout layout-normal\"><table>\n+  <tr><td colspan=\"2\">Enter one or more web addresses (URLs) pointing to data to download:</td></tr>\n+  <tr bind=\"urlRow\"><td colspan=\"2\"><input bind=\"urlInput\" name=\"download\" class=\"default-importing-web-url\" /></td></tr>\n+  <tr bind=\"buttons\">\n+    <td width=\"1\"><button bind=\"addButton\" class=\"button\" type=\"button\">Add Another URL</button></td>\n+    <td><button bind=\"nextButton\" class=\"button button-primary\" type=\"button\">Next &raquo;</button></td>\n+  </tr>\n+</table></div></form>\n\\ No newline at end of file"
        },
        {
            "sha": "0770dd28ff5cd68c3da63af05c8e9151c68cb6f7",
            "filename": "main/webapp/modules/core/scripts/index/default-importing-sources/sources.js",
            "status": "added",
            "additions": 118,
            "deletions": 0,
            "changes": 118,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-sources%2Fsources.js",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-sources%2Fsources.js",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fdefault-importing-sources%2Fsources.js?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,118 @@\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+function ThisComputerImportingSourceUI(controller) {\n+    this._controller = controller;\n+}\n+Refine.DefaultImportingController.sources.push({\n+    \"label\": \"This Computer\",\n+    \"id\": \"upload\",\n+    \"uiClass\": ThisComputerImportingSourceUI\n+});\n+\n+ThisComputerImportingSourceUI.prototype.attachUI = function(bodyDiv) {\n+    var self = this;\n+    \n+    bodyDiv.html(DOM.loadHTML(\"core\", \"scripts/index/default-importing-sources/import-from-computer-form.html\"));\n+\n+    this._elmts = DOM.bind(bodyDiv);\n+    this._elmts.nextButton.click(function(evt) {\n+        if (self._elmts.fileInput[0].files.length === 0) {\n+            window.alert(\"You must specify a data file to import.\");\n+        } else {\n+            self._controller.startImportJob(self._elmts.form, \"Uploading data ...\");\n+        }\n+    });\n+};\n+\n+ThisComputerImportingSourceUI.prototype.focus = function() {\n+};\n+\n+function UrlImportingSourceUI(controller) {\n+    this._controller = controller;\n+}\n+Refine.DefaultImportingController.sources.push({\n+    \"label\": \"Web Addresses (URLs)\",\n+    \"id\": \"download\",\n+    \"uiClass\": UrlImportingSourceUI\n+});\n+\n+UrlImportingSourceUI.prototype.attachUI = function(bodyDiv) {\n+    var self = this;\n+    \n+    bodyDiv.html(DOM.loadHTML(\"core\", \"scripts/index/default-importing-sources/import-from-web-form.html\"));\n+\n+    this._elmts = DOM.bind(bodyDiv);\n+    this._elmts.nextButton.click(function(evt) {\n+        if ($.trim(self._elmts.urlInput[0].value.length) === 0) {\n+            window.alert(\"You must specify a web address (URL) to import.\");\n+        } else {\n+            self._controller.startImportJob(self._elmts.form, \"Downloading data ...\");\n+        }\n+    });\n+    this._elmts.addButton.click(function(evt) {\n+        self._elmts.buttons.before(self._elmts.urlRow.clone());\n+    });\n+};\n+\n+UrlImportingSourceUI.prototype.focus = function() {\n+    this._elmts.urlInput.focus();\n+};\n+\n+function ClipboardImportingSourceUI(controller) {\n+    this._controller = controller;\n+}\n+Refine.DefaultImportingController.sources.push({\n+    \"label\": \"Clipboard\",\n+    \"id\": \"clipboard\",\n+    \"uiClass\": ClipboardImportingSourceUI\n+});\n+\n+ClipboardImportingSourceUI.prototype.attachUI = function(bodyDiv) {\n+    var self = this;\n+    \n+    bodyDiv.html(DOM.loadHTML(\"core\", \"scripts/index/default-importing-sources/import-from-clipboard-form.html\"));\n+\n+    this._elmts = DOM.bind(bodyDiv);\n+    this._elmts.nextButton.click(function(evt) {\n+        if ($.trim(self._elmts.textInput[0].value).length === 0) {\n+            window.alert(\"You must paste some data to import.\");\n+        } else {\n+            self._controller.startImportJob(self._elmts.form, \"Uploading pasted data ...\");\n+        }\n+    });\n+};\n+\n+ClipboardImportingSourceUI.prototype.focus = function() {\n+    this._elmts.textInput.focus();\n+};\n\\ No newline at end of file"
        },
        {
            "sha": "2659bb2edc089b13be515325cfcb4b0c933c9912",
            "filename": "main/webapp/modules/core/scripts/index/import-project-ui.html",
            "status": "added",
            "additions": 17,
            "deletions": 0,
            "changes": 17,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fimport-project-ui.html",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fimport-project-ui.html",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fimport-project-ui.html?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,17 @@\n+<form id=\"project-upload-form\" method=\"post\" enctype=\"multipart/form-data\" action=\"/command/core/import-project\" accept-charset=\"UTF-8\">\n+  <div class=\"grid-layout layout-normal\"><table>\n+    <tr>\n+      <td colspan=\"2\">Locate an existing Google Refine project file (.tar or .tar.gz):</td>\n+    <tr>\n+      <td>Project file:</th>\n+      <td><input type=\"file\" id=\"project-tar-file-input\" name=\"project-file\" /></td>\n+    </tr>\n+    <tr>\n+      <td>Re-name project (optional):</th>\n+      <td><input type=\"text\" size=\"25\" id=\"project-name-input\" name=\"project-name\" /></td></tr>\n+    <tr>\n+      <td></td>\n+      <td><input type=\"submit\" value=\"Import Project\" id=\"import-project-button\" class=\"button button-primary\" /></td>\n+    </tr>\n+  </table></div>\n+</form>"
        },
        {
            "sha": "4b4b161fb1c37379790376371f423692b4aa3df1",
            "filename": "main/webapp/modules/core/scripts/index/import-project-ui.js",
            "status": "added",
            "additions": 45,
            "deletions": 0,
            "changes": 45,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fimport-project-ui.js",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fimport-project-ui.js",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fimport-project-ui.js?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,45 @@\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+Refine.ImportProjectUI = function(elmt) {\n+  elmt.html(DOM.loadHTML(\"core\", \"scripts/index/import-project-ui.html\"));\n+  \n+  this._elmt = elmt;\n+  this._elmts = DOM.bind(elmt);\n+};\n+\n+Refine.actionAreas.push({\n+  id: \"import-project\",\n+  label: \"Import Project\",\n+  uiClass: Refine.ImportProjectUI\n+});"
        },
        {
            "sha": "f7a3161fa713868c397d0370d1c55b3d5033ac64",
            "filename": "main/webapp/modules/core/scripts/index/open-project-ui.html",
            "status": "added",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fopen-project-ui.html",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fopen-project-ui.html",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fopen-project-ui.html?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,4 @@\n+<div class=\"relative-frame\">\n+  <div bind=\"projectsContainer\" id=\"projects-container\"></div>\n+  <div bind=\"workspaceControls\" id=\"projects-workspace-controls\"><a id=\"projects-workspace-open\" href=\"javascript:{}\" class=\"secondary\">Browse workspace directory</a></div>\n+</div>"
        },
        {
            "sha": "b4a159bf1ce69a026f9793ddb5ba5ebda55ffe53",
            "filename": "main/webapp/modules/core/scripts/index/open-project-ui.js",
            "status": "added",
            "additions": 274,
            "deletions": 0,
            "changes": 274,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fopen-project-ui.js",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fopen-project-ui.js",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fopen-project-ui.js?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,274 @@\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+Refine.OpenProjectUI = function(elmt) {\n+    var self = this;\n+\n+    elmt.html(DOM.loadHTML(\"core\", \"scripts/index/open-project-ui.html\"));\n+\n+    this._elmt = elmt;\n+    this._elmts = DOM.bind(elmt);\n+\n+    var resize = function() {\n+        var height = elmt.height();\n+        var width = elmt.width();\n+        var controlsHeight = self._elmts.workspaceControls.outerHeight();\n+        self._elmts.projectsContainer\n+            .css(\"height\", (height - controlsHeight - DOM.getVPaddings(self._elmts.projectsContainer)) + \"px\");\n+        self._elmts.workspaceControls\n+            .css(\"bottom\", \"0px\")\n+            .css(\"width\", (width - DOM.getHPaddings(self._elmts.workspaceControls)) + \"px\")\n+    };\n+    $(window).resize(resize);\n+    window.setTimeout(resize, 100);\n+\n+    $(\"#project-file-input\").change(function() {\n+        if ($(\"#project-name-input\")[0].value.length == 0) {\n+            var fileName = this.files[0].fileName;\n+            if (fileName) {\n+                $(\"#project-name-input\")[0].value = fileName.replace(/\\.\\w+/, \"\").replace(/[_-]/g, \" \");\n+            }\n+            $(\"#project-name-input\").focus().select();\n+        }\n+    }).keypress(function(evt) {\n+        if (evt.keyCode == 13) {\n+            return self._onClickUploadFileButton(evt);\n+        }\n+    });\n+\n+    $(\"#upload-file-button\").click(function(evt) {\n+        return self._onClickUploadFileButton(evt)\n+    });\n+\n+    $('#projects-workspace-open').click(function() {\n+        $.ajax({\n+            type: \"POST\",\n+            url: \"/command/core/open-workspace-dir\",\n+            dataType: \"json\",\n+            success: function (data) {\n+                if (data.code != \"ok\" && \"message\" in data) {\n+                    alert(data.message);\n+                }\n+            }\n+        });\n+    });\n+\n+    this._fetchProjects();\n+};\n+\n+Refine.OpenProjectUI.prototype._fetchProjects = function() {\n+    var self = this;\n+    $.getJSON(\n+        \"/command/core/get-all-project-metadata\",\n+        null,\n+        function(data) {\n+            self._renderProjects(data);\n+        },\n+        \"json\"\n+    );\n+};\n+\n+Refine.OpenProjectUI.prototype._renderProjects = function(data) {\n+    var self = this;\n+    var projects = [];\n+    for (var n in data.projects) {\n+        if (data.projects.hasOwnProperty(n)) {\n+            var project = data.projects[n];\n+            project.id = n;\n+            project.date = Date.parseExact(project.modified, \"yyyy-MM-ddTHH:mm:ssZ\");\n+            projects.push(project);\n+        }\n+    }\n+    projects.sort(function(a, b) { return b.date.getTime() - a.date.getTime(); });\n+\n+    var container = $(\"#projects-container\").empty();\n+    if (!projects.length) {\n+        $(\"#no-project-message\").clone().show().appendTo(container);\n+    } else {\n+        Refine.selectActionArea('open-project');\n+      \n+        var table = $(\n+            '<table class=\"list-table\"><tr>' +\n+                '<th>Name</th>' +\n+                '<th></th>' +\n+                '<th></th>' +\n+                '<th align=\"right\">Last&nbsp;modified</th>' +\n+            '</tr></table>'\n+        ).appendTo(container)[0];\n+\n+        var formatDate = function(d) {\n+            var d = new Date(d);\n+            var last_year = Date.today().add({ years: -1 });\n+            var last_month = Date.today().add({ months: -1 });\n+            var last_week = Date.today().add({ days: -7 });\n+            var today = Date.today();\n+            var tomorrow = Date.today().add({ days: 1 });\n+\n+            if (d.between(today, tomorrow)) {\n+                return \"today \" + d.toString(\"h:mm tt\");\n+            } else if (d.between(last_week, today)) {\n+                var diff = Math.floor(today.getDayOfYear() - d.getDayOfYear());\n+                return (diff <= 1) ? (\"yesterday \" + d.toString(\"h:mm tt\")) : (diff + \" days ago\");\n+            } else if (d.between(last_month, today)) {\n+                var diff = Math.floor((today.getDayOfYear() - d.getDayOfYear()) / 7);\n+                return (diff == 1) ? \"a week ago\" : diff.toFixed(0) + \" weeks ago\" ;\n+            } else if (d.between(last_year, today)) {\n+                var diff = Math.floor(today.getMonth() - d.getMonth());\n+                return (diff == 1) ? \"a month ago\" : diff + \" months ago\";\n+            } else {\n+                var diff = Math.floor(today.getYear() - d.getYear());\n+                return (diff == 1) ? \"a year ago\" : diff + \" years ago\";\n+            }\n+        };\n+        \n+        var renderProject = function(project) {\n+            var tr = table.insertRow(table.rows.length);\n+            tr.className = \"project\";\n+\n+            var nameLink = $('<a></a>')\n+                .addClass(\"list-table-itemname\")\n+                .text(project.name)\n+                .attr(\"href\", \"/project?project=\" + project.id)\n+                .appendTo(tr.insertCell(tr.cells.length));\n+\n+            var renameLink = $('<a></a>')\n+                .text(\"rename\")\n+                .addClass(\"secondary\")\n+                .attr(\"href\", \"javascript:{}\")\n+                .css(\"visibility\", \"hidden\")\n+                .click(function() {\n+                    var name = window.prompt(\"New project name:\", project.name);\n+                    if (name == null) {\n+                        return;\n+                    }\n+\n+                    name = $.trim(name);\n+                    if (project.name == name || name.length == 0) {\n+                        return;\n+                    }\n+\n+                    $.ajax({\n+                        type: \"POST\",\n+                        url: \"/command/core/rename-project\",\n+                        data: { \"project\" : project.id, \"name\" : name },\n+                        dataType: \"json\",\n+                        success: function (data) {\n+                            if (data && typeof data.code != 'undefined' && data.code == \"ok\") {\n+                                nameLink.text(name);\n+                            } else {\n+                                alert(\"Failed to rename project: \" + data.message)\n+                            }\n+                        }\n+                    });\n+                }).appendTo(tr.insertCell(tr.cells.length));\n+\n+            var deleteLink = $('<a></a>')\n+                .addClass(\"delete-project\")\n+                .attr(\"title\",\"Delete this project\")\n+                .attr(\"href\",\"\")\n+                .css(\"visibility\", \"hidden\")                \n+                .html(\"<img src='/images/close.png' />\")\n+                .click(function() {\n+                    if (window.confirm(\"Are you sure you want to delete project \\\"\" + project.name + \"\\\"?\")) {\n+                        $.ajax({\n+                            type: \"POST\",\n+                            url: \"/command/core/delete-project\",\n+                            data: { \"project\" : project.id },\n+                            dataType: \"json\",\n+                            success: function (data) {\n+                                if (data && typeof data.code != 'undefined' && data.code == \"ok\") {\n+                                    self._fetchProjects();\n+                                }\n+                            }\n+                        });\n+                    }\n+                    return false;\n+                }).appendTo(tr.insertCell(tr.cells.length));\n+\n+\n+            $('<div></div>')\n+                .html(formatDate(project.date))\n+                .addClass(\"last-modified\")\n+                .attr(\"title\", project.date.toString())\n+                .appendTo(tr.insertCell(tr.cells.length));\n+\n+            $(tr).mouseenter(function() {\n+                renameLink.css(\"visibility\", \"visible\");\n+                deleteLink.css(\"visibility\", \"visible\");\n+            }).mouseleave(function() {\n+                renameLink.css(\"visibility\", \"hidden\");\n+                deleteLink.css(\"visibility\", \"hidden\");\n+            });\n+        };\n+\n+        for (var i = 0; i < projects.length; i++) {\n+            renderProject(projects[i]);\n+        }\n+    }\n+};\n+\n+Refine.OpenProjectUI.prototype._onClickUploadFileButton = function(evt) {\n+    var projectName = $(\"#project-name-input\")[0].value;\n+    var dataURL = $.trim($(\"#project-url-input\")[0].value);\n+    if (! $.trim(projectName).length) {\n+        window.alert(\"You must specify a project name.\");\n+\n+    } else if ($(\"#project-file-input\")[0].files.length === 0 && ! dataURL.length) {\n+        window.alert(\"You must specify a data file to upload or a URL to retrieve.\");\n+\n+    } else {\n+        $(\"#file-upload-form\").attr(\"action\",\n+            \"/command/core/create-project-from-upload?\" + [\n+                \"url=\" +                escape(dataURL),\n+                \"split-into-columns=\" + $(\"#split-into-columns-input\")[0].checked,\n+                \"separator=\" +          $(\"#separator-input\")[0].value,\n+                \"ignore=\" +             $(\"#ignore-input\")[0].value,\n+                \"header-lines=\" +       $(\"#header-lines-input\")[0].value,\n+                \"skip=\" +               $(\"#skip-input\")[0].value,\n+                \"limit=\" +              $(\"#limit-input\")[0].value,\n+                \"guess-value-type=\" +   $(\"#guess-value-type-input\")[0].checked,\n+                \"ignore-quotes=\" +      $(\"#ignore-quotes-input\")[0].checked\n+            ].join(\"&\"));\n+\n+        return true;\n+    }\n+\n+    evt.preventDefault();\n+    return false;\n+};\n+\n+Refine.actionAreas.push({\n+  id: \"open-project\",\n+  label: \"Open Project\",\n+  uiClass: Refine.OpenProjectUI\n+});"
        },
        {
            "sha": "e64b57e7f6ff2073dc4074a9a0311e8e7f4dd327",
            "filename": "main/webapp/modules/core/scripts/index/parser-interfaces/excel-parser-ui.html",
            "status": "added",
            "additions": 36,
            "deletions": 0,
            "changes": 36,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fexcel-parser-ui.html",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fexcel-parser-ui.html",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fexcel-parser-ui.html?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,36 @@\n+<div class=\"grid-layout layout-loose layout-full\"><table>\n+  <tr>\n+    <td colspan=\"2\"></td>\n+    <td><div class=\"grid-layout layout-tighter layout-full\"><table>\n+      <tr>\n+        <td style=\"text-align: right;\">&nbsp;</td>\n+        <td width=\"1%\"><button class=\"button\" bind=\"previewButton\">Update&nbsp;Preview</button></td>\n+      </tr>\n+    </table></div></td>\n+  </tr>\n+  <tr>\n+    <td><div class=\"grid-layout layout-tightest\"><table bind=\"sheetRecordContainer\">\n+      <tr><td colspan=\"3\">Worksheets to Import</td></tr>\n+    </table></div></td>\n+    \n+    <td><div class=\"grid-layout layout-tightest\"><table>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"ignoreCheckbox\" /></td><td>Ignore first</td>\n+        <td><input bind=\"ignoreInput\" type=\"text\" class=\"lightweight\" size=\"2\" value=\"0\" /> line(s) at beginning of file</td></tr>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"headerLinesCheckbox\" /></td><td>Parse next</td>\n+        <td><input bind=\"headerLinesInput\" type=\"text\" class=\"lightweight\" size=\"2\" value=\"1\" /> line(s) as column headers</td></tr>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"skipCheckbox\" /></td><td>Discard initial</td>\n+        <td><input bind=\"skipInput\" type=\"text\" class=\"lightweight\" size=\"2\" value=\"0\" /> row(s) of data</td></tr>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"limitCheckbox\" /></td><td>Load at most</td>\n+        <td><input bind=\"limitInput\" type=\"text\" class=\"lightweight\" size=\"2\" value=\"0\" /> row(s) of data</td></tr>\n+    </table></div></td>\n+\n+    <td><div class=\"grid-layout layout-tightest\"><table>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"storeBlankRowsCheckbox\" /></td>\n+        <td colspan=\"2\">Store blank rows</td></tr>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"storeBlankCellsAsNullsCheckbox\" /></td>\n+        <td colspan=\"2\">Store blank cells as nulls</td></tr>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"includeFileSourcesCheckbox\" /></td>\n+        <td>Store file source<br/>(file names, URLs)<br/>in each row</td></tr>\n+    </table></div></td>\n+  </tr>\n+</table></div>\n\\ No newline at end of file"
        },
        {
            "sha": "1f1acbc5e0513777d0384255f07b9a9fe49babec",
            "filename": "main/webapp/modules/core/scripts/index/parser-interfaces/excel-parser-ui.js",
            "status": "added",
            "additions": 198,
            "deletions": 0,
            "changes": 198,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fexcel-parser-ui.js",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fexcel-parser-ui.js",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fexcel-parser-ui.js?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,198 @@\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+Refine.ExcelParserUI = function(controller, jobID, job, format, config,\n+    dataContainerElmt, progressContainerElmt, optionContainerElmt) {\n+    this._controller = controller;\n+    this._jobID = jobID;\n+    this._job = job;\n+    this._format = format;\n+    this._config = config;\n+    \n+    this._dataContainer = dataContainerElmt;\n+    this._progressContainer = progressContainerElmt;\n+    this._optionContainer = optionContainerElmt;\n+    \n+    this._timerID = null;\n+    this._initialize();\n+    this._updatePreview();\n+};\n+Refine.DefaultImportingController.parserUIs[\"ExcelParserUI\"] = Refine.ExcelParserUI;\n+\n+Refine.ExcelParserUI.prototype.dispose = function() {\n+    if (this._timerID != null) {\n+        window.clearTimeout(this._timerID);\n+        this._timerID = null;\n+    }\n+};\n+\n+Refine.ExcelParserUI.prototype.confirmReadyToCreateProject = function() {\n+  return true; // always ready\n+};\n+\n+Refine.ExcelParserUI.prototype.getOptions = function() {\n+    var options = {\n+      xmlBased: this._config.xmlBased,\n+      sheets: []\n+    };\n+    \n+    var parseIntDefault = function(s, def) {\n+        try {\n+            var n = parseInt(s);\n+            if (!isNaN(n)) {\n+                return n;\n+            }\n+        } catch (e) {\n+            // Ignore\n+        }\n+        return def;\n+    };\n+    \n+    this._optionContainerElmts.sheetRecordContainer.find('input').each(function() {\n+      if (this.checked) {\n+        options.sheets.push(parseInt(this.getAttribute('index')));\n+      }\n+    });\n+    \n+    if (this._optionContainerElmts.ignoreCheckbox[0].checked) {\n+        options.ignoreLines = parseIntDefault(this._optionContainerElmts.ignoreInput[0].value, -1);\n+    } else {\n+        options.ignoreLines = -1;\n+    }\n+    if (this._optionContainerElmts.headerLinesCheckbox[0].checked) {\n+        options.headerLines = parseIntDefault(this._optionContainerElmts.headerLinesInput[0].value, 0);\n+    } else {\n+        options.headerLines = 0;\n+    }\n+    if (this._optionContainerElmts.skipCheckbox[0].checked) {\n+        options.skipDataLines = parseIntDefault(this._optionContainerElmts.skipInput[0].value, 0);\n+    } else {\n+        options.skipDataLines = 0;\n+    }\n+    if (this._optionContainerElmts.limitCheckbox[0].checked) {\n+        options.limit = parseIntDefault(this._optionContainerElmts.limitInput[0].value, -1);\n+    } else {\n+        options.limit = -1;\n+    }\n+    options.storeBlankRows = this._optionContainerElmts.storeBlankRowsCheckbox[0].checked;\n+    options.storeBlankCellsAsNulls = this._optionContainerElmts.storeBlankCellsAsNullsCheckbox[0].checked;\n+    options.includeFileSources = this._optionContainerElmts.includeFileSourcesCheckbox[0].checked;\n+    \n+    return options;\n+};\n+\n+Refine.ExcelParserUI.prototype._initialize = function() {\n+    var self = this;\n+    \n+    this._optionContainer.unbind().empty().html(\n+        DOM.loadHTML(\"core\", \"scripts/index/parser-interfaces/excel-parser-ui.html\"));\n+    this._optionContainerElmts = DOM.bind(this._optionContainer);\n+    this._optionContainerElmts.previewButton.click(function() { self._updatePreview(); });\n+    \n+    var sheetTable = this._optionContainerElmts.sheetRecordContainer[0];\n+    $.each(this._config.sheetRecords, function(i, v) {\n+      var tr = sheetTable.insertRow(sheetTable.rows.length);\n+      var td0 = $(tr.insertCell(0)).attr('width', '1%');\n+      var checkbox = $('<input>')\n+        .attr('type', 'checkbox')\n+        .attr('index', i)\n+        .appendTo(td0);\n+      if (this.selected) {\n+        checkbox.attr('checked', 'true');\n+      }\n+        \n+      $(tr.insertCell(1)).text(this.name);\n+      $(tr.insertCell(2)).text(this.rows + ' rows');\n+    });\n+    \n+    if (this._config.ignoreLines > 0) {\n+        this._optionContainerElmts.ignoreCheckbox.attr(\"checked\", \"checked\");\n+        this._optionContainerElmts.ignoreInput[0].value = this._config.ignoreLines.toString();\n+    }\n+    if (this._config.headerLines > 0) {\n+        this._optionContainerElmts.headerLinesCheckbox.attr(\"checked\", \"checked\");\n+        this._optionContainerElmts.headerLinesInput[0].value = this._config.headerLines.toString();\n+    }\n+    if (this._config.limit > 0) {\n+        this._optionContainerElmts.limitCheckbox.attr(\"checked\", \"checked\");\n+        this._optionContainerElmts.limitInput[0].value = this._config.limit.toString();\n+    }\n+    if (this._config.skipDataLines > 0) {\n+        this._optionContainerElmts.skipCheckbox.attr(\"checked\", \"checked\");\n+        this._optionContainerElmts.skipInput.value[0].value = this._config.skipDataLines.toString();\n+    }\n+    if (this._config.storeBlankRows) {\n+        this._optionContainerElmts.storeBlankRowsCheckbox.attr(\"checked\", \"checked\");\n+    }\n+    if (this._config.storeBlankCellsAsNulls) {\n+        this._optionContainerElmts.storeBlankCellsAsNullsCheckbox.attr(\"checked\", \"checked\");\n+    }\n+    if (this._config.includeFileSources) {\n+        this._optionContainerElmts.includeFileSourcesCheckbox.attr(\"checked\", \"checked\");\n+    }\n+    \n+    var onChange = function() {\n+        self._scheduleUpdatePreview();\n+    };\n+    this._optionContainer.find(\"input\").bind(\"change\", onChange);\n+    this._optionContainer.find(\"select\").bind(\"change\", onChange);\n+};\n+\n+Refine.ExcelParserUI.prototype._scheduleUpdatePreview = function() {\n+    if (this._timerID != null) {\n+        window.clearTimeout(this._timerID);\n+        this._timerID = null;\n+    }\n+    \n+    var self = this;\n+    this._timerID = window.setTimeout(function() {\n+        self._timerID = null;\n+        self._updatePreview();\n+    }, 500); // 0.5 second\n+};\n+\n+Refine.ExcelParserUI.prototype._updatePreview = function() {\n+    var self = this;\n+    \n+    this._progressContainer.show();\n+    \n+    this._controller.updateFormatAndOptions(this.getOptions(), function(result) {\n+        if (result.status == \"ok\") {\n+            self._controller.getPreviewData(function(projectData) {\n+                self._progressContainer.hide();\n+                \n+                new Refine.PreviewTable(projectData, self._dataContainer.unbind().empty());\n+            });\n+        }\n+    });\n+};"
        },
        {
            "sha": "5e6f65b8bad9a53b155498bf7fa226b077a90ef6",
            "filename": "main/webapp/modules/core/scripts/index/parser-interfaces/fixed-width-parser-ui.html",
            "status": "added",
            "additions": 51,
            "deletions": 0,
            "changes": 51,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Ffixed-width-parser-ui.html",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Ffixed-width-parser-ui.html",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Ffixed-width-parser-ui.html?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,51 @@\n+<div class=\"grid-layout layout-loose layout-full\"><table>\n+  <tr>\n+    <td><div class=\"grid-layout layout-tighter\"><table>\n+      <tr>\n+        <td width=\"1%\">Character&nbsp;encoding</td>\n+        <td><select bind=\"encodingSelect\"></select></td>\n+      </tr>\n+    </table></div></td>\n+    <td colspan=\"2\"><div class=\"grid-layout layout-tighter layout-full\"><table>\n+      <tr>\n+        <td style=\"text-align: right;\">&nbsp;</td>\n+        <td width=\"1%\"><button class=\"button\" bind=\"previewButton\">Update&nbsp;Preview</button></td>\n+      </tr>\n+    </table></div></td>\n+  </tr>\n+  <tr>\n+    <td colspan=\"3\"><div class=\"grid-layout layout-tightest\"><table>\n+      <tr><td>Column widths:</td><td><input style=\"width: 40em;\" bind=\"columnWidthsInput\" /></td><td>comma separated numbers</td></tr>\n+      <tr><td>Column names:</td><td><input style=\"width: 40em;\" bind=\"columnNamesInput\" /></td><td>optional, comma separated</td></tr>\n+    </table></div></td>\n+  </tr>\n+  <tr>\n+    <td><div class=\"grid-layout layout-tightest\"><table>\n+      <tr><td colspan=\"2\">Rows are separated by</td></tr>\n+      <tr><td width=\"1%\"><input type=\"radio\" name=\"row-separator\" value=\"new-line\" /></td><td>new line characters \\n</td></tr>\n+      <tr><td width=\"1%\"><input type=\"radio\" name=\"row-separator\" value=\"custom\" /></td><td>custom\n+        <input bind=\"rowSeparatorInput\" type=\"text\" class=\"lightweight\" size=\"5\" /></td></tr>\n+      <tr><td colspan=\"2\">Escape special characters with \\</td></tr>\n+    </table></div></td>\n+    <td><div class=\"grid-layout layout-tightest\"><table>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"ignoreCheckbox\" /></td><td>Ignore first</td>\n+        <td><input bind=\"ignoreInput\" type=\"text\" class=\"lightweight\" size=\"2\" value=\"0\" /> line(s) at beginning of file</td></tr>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"headerLinesCheckbox\" /></td><td>Parse next</td>\n+        <td><input bind=\"headerLinesInput\" type=\"text\" class=\"lightweight\" size=\"2\" value=\"1\" /> line(s) as column headers</td></tr>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"skipCheckbox\" /></td><td>Discard initial</td>\n+        <td><input bind=\"skipInput\" type=\"text\" class=\"lightweight\" size=\"2\" value=\"0\" /> row(s) of data</td></tr>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"limitCheckbox\" /></td><td>Load at most</td>\n+        <td><input bind=\"limitInput\" type=\"text\" class=\"lightweight\" size=\"2\" value=\"0\" /> row(s) of data</td></tr>\n+    </table></div></td>\n+    <td><div class=\"grid-layout layout-tightest\"><table>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"guessCellValueTypesCheckbox\" /></td>\n+        <td>Parse cell text into<br/>numbers, dates, ...</td></tr>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"storeBlankRowsCheckbox\" /></td>\n+        <td colspan=\"2\">Store blank rows</td></tr>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"storeBlankCellsAsNullsCheckbox\" /></td>\n+        <td colspan=\"2\">Store blank cells as nulls</td></tr>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"includeFileSourcesCheckbox\" /></td>\n+        <td>Store file source<br/>(file names, URLs)<br/>in each row</td></tr>\n+    </table></div></td>\n+  </tr>\n+</table></div>\n\\ No newline at end of file"
        },
        {
            "sha": "3e181c9034e15fafc917ef8c50a906c111a70bde",
            "filename": "main/webapp/modules/core/scripts/index/parser-interfaces/fixed-width-parser-ui.js",
            "status": "added",
            "additions": 471,
            "deletions": 0,
            "changes": 471,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Ffixed-width-parser-ui.js",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Ffixed-width-parser-ui.js",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Ffixed-width-parser-ui.js?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,471 @@\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+Refine.FixedWidthParserUI = function(controller, jobID, job, format, config,\n+    dataContainerElmt, progressContainerElmt, optionContainerElmt) {\n+    \n+    this._controller = controller;\n+    this._jobID = jobID;\n+    this._job = job;\n+    this._format = format;\n+    this._config = config;\n+    \n+    this._dataContainer = dataContainerElmt;\n+    this._progressContainer = progressContainerElmt;\n+    this._optionContainer = optionContainerElmt;\n+    \n+    this._timerID = null;\n+    this._initialize();\n+    this.updatePreview();\n+};\n+Refine.DefaultImportingController.parserUIs[\"FixedWidthParserUI\"] = Refine.FixedWidthParserUI;\n+\n+Refine.FixedWidthParserUI.encodeSeparator = function(s) {\n+    return s.replace(\"\\\\\", \"\\\\\\\\\")\n+        .replace(\"\\n\", \"\\\\n\")\n+        .replace(\"\\t\", \"\\\\t\");\n+};\n+\n+Refine.FixedWidthParserUI.decodeSeparator = function(s) {\n+    return s.replace(\"\\\\n\", \"\\n\")\n+        .replace(\"\\\\t\", \"\\t\")\n+        .replace(\"\\\\\\\\\", \"\\\\\");\n+};\n+\n+Refine.FixedWidthParserUI.prototype.dispose = function() {\n+    if (this._timerID != null) {\n+        window.clearTimeout(this._timerID);\n+        this._timerID = null;\n+    }\n+};\n+\n+Refine.FixedWidthParserUI.prototype.confirmReadyToCreateProject = function() {\n+  return true; // always ready\n+};\n+\n+Refine.FixedWidthParserUI.prototype.getOptions = function() {\n+    var options = {\n+        columnWidths: [].concat(this._config.columnWidths)\n+    };\n+    \n+    var columnNames = $.trim(this._optionContainerElmts.columnNamesInput[0].value).replace(/,\\s+/g, ',').split(',');\n+    if (columnNames.length > 0 && columnNames[0].length > 0) {\n+      options.columnNames = columnNames;\n+    }\n+    \n+    switch (this._optionContainer.find(\"input[name='row-separator']:checked\")[0].value) {\n+        case 'new-line':\n+            options.lineSeparator = \"\\n\";\n+            break;\n+        default:\n+            options.lineSeparator = Refine.FixedWidthParserUI.decodeSeparator(\n+                this._optionContainerElmts.rowSeparatorInput[0].value);\n+    }\n+    \n+    var parseIntDefault = function(s, def) {\n+        try {\n+            var n = parseInt(s);\n+            if (!isNaN(n)) {\n+                return n;\n+            }\n+        } catch (e) {\n+            // Ignore\n+        }\n+        return def;\n+    };\n+    if (this._optionContainerElmts.ignoreCheckbox[0].checked) {\n+        options.ignoreLines = parseIntDefault(this._optionContainerElmts.ignoreInput[0].value, -1);\n+    } else {\n+        options.ignoreLines = -1;\n+    }\n+    if (this._optionContainerElmts.headerLinesCheckbox[0].checked) {\n+        options.headerLines = parseIntDefault(this._optionContainerElmts.headerLinesInput[0].value, 0);\n+    } else {\n+        options.headerLines = 0;\n+    }\n+    if (this._optionContainerElmts.skipCheckbox[0].checked) {\n+        options.skipDataLines = parseIntDefault(this._optionContainerElmts.skipInput[0].value, 0);\n+    } else {\n+        options.skipDataLines = 0;\n+    }\n+    if (this._optionContainerElmts.limitCheckbox[0].checked) {\n+        options.limit = parseIntDefault(this._optionContainerElmts.limitInput[0].value, -1);\n+    } else {\n+        options.limit = -1;\n+    }\n+    \n+    options.guessCellValueTypes = this._optionContainerElmts.guessCellValueTypesCheckbox[0].checked;\n+    \n+    options.storeBlankRows = this._optionContainerElmts.storeBlankRowsCheckbox[0].checked;\n+    options.storeBlankCellsAsNulls = this._optionContainerElmts.storeBlankCellsAsNullsCheckbox[0].checked;\n+    options.includeFileSources = this._optionContainerElmts.includeFileSourcesCheckbox[0].checked;\n+    \n+    return options;\n+};\n+\n+Refine.FixedWidthParserUI.prototype._initialize = function() {\n+    var self = this;\n+    \n+    this._optionContainer.unbind().empty().html(\n+        DOM.loadHTML(\"core\", \"scripts/index/parser-interfaces/fixed-width-parser-ui.html\"));\n+    this._optionContainerElmts = DOM.bind(this._optionContainer);\n+    this._optionContainerElmts.previewButton.click(function() { self._updatePreview(); });\n+    \n+    this._optionContainerElmts.columnWidthsInput[0].value = this._config.columnWidths.join(',');\n+    if ('columnNames' in this._config) {\n+        this._optionContainerElmts.columnNamesInput[0].value = this._config.columnNames.join(',');\n+    }\n+    \n+    var rowSeparatorValue = (this._config.lineSeparator == \"\\n\") ? 'new-line' : 'custom';\n+    this._optionContainer.find(\n+        \"input[name='row-separator'][value='\" + rowSeparatorValue + \"']\").attr(\"checked\", \"checked\");\n+    this._optionContainerElmts.rowSeparatorInput[0].value =\n+        Refine.FixedWidthParserUI.encodeSeparator(this._config.lineSeparator);\n+    \n+    if (this._config.ignoreLines > 0) {\n+        this._optionContainerElmts.ignoreCheckbox.attr(\"checked\", \"checked\");\n+        this._optionContainerElmts.ignoreInput[0].value = this._config.ignoreLines.toString();\n+    }\n+    if (this._config.headerLines > 0) {\n+        this._optionContainerElmts.headerLinesCheckbox.attr(\"checked\", \"checked\");\n+        this._optionContainerElmts.headerLinesInput[0].value = this._config.headerLines.toString();\n+    }\n+    if (this._config.limit > 0) {\n+        this._optionContainerElmts.limitCheckbox.attr(\"checked\", \"checked\");\n+        this._optionContainerElmts.limitInput[0].value = this._config.limit.toString();\n+    }\n+    if (this._config.skipDataLines > 0) {\n+        this._optionContainerElmts.skipCheckbox.attr(\"checked\", \"checked\");\n+        this._optionContainerElmts.skipInput.value[0].value = this._config.skipDataLines.toString();\n+    }\n+    if (this._config.storeBlankRows) {\n+        this._optionContainerElmts.storeBlankRowsCheckbox.attr(\"checked\", \"checked\");\n+    }\n+    \n+    if (this._config.guessCellValueTypes) {\n+        this._optionContainerElmts.guessCellValueTypesCheckbox.attr(\"checked\", \"checked\");\n+    }\n+    \n+    if (this._config.storeBlankCellsAsNulls) {\n+        this._optionContainerElmts.storeBlankCellsAsNullsCheckbox.attr(\"checked\", \"checked\");\n+    }\n+    if (this._config.includeFileSources) {\n+        this._optionContainerElmts.includeFileSourcesCheckbox.attr(\"checked\", \"checked\");\n+    }\n+    \n+    var onChange = function() {\n+        self._scheduleUpdatePreview();\n+    };\n+    this._optionContainer.find(\"input\").bind(\"change\", onChange);\n+    this._optionContainer.find(\"select\").bind(\"change\", onChange);\n+    \n+    this._optionContainerElmts.columnWidthsInput.bind(\"change\", function() {\n+        var newColumnWidths = [];\n+        var a = $.trim(this.value).replace(/,\\s+/g, ',').split(',');\n+        for (var i = 0; i < a.length; i++) {\n+            var n = parseInt(a[i]);\n+            if (isNaN(n)) {\n+                return;\n+            }\n+            newColumnWidths.push(n);\n+        }\n+        self._config.columnWidths = newColumnWidths;\n+        onChange();\n+    });\n+    this._optionContainerElmts.columnNamesInput.bind(\"change\", onChange);\n+    \n+};\n+\n+Refine.FixedWidthParserUI.prototype._scheduleUpdatePreview = function() {\n+    if (this._timerID != null) {\n+        window.clearTimeout(this._timerID);\n+        this._timerID = null;\n+    }\n+    \n+    var self = this;\n+    this._timerID = window.setTimeout(function() {\n+        self._timerID = null;\n+        self.updatePreview();\n+    }, 500); // 0.5 second\n+};\n+\n+Refine.FixedWidthParserUI.prototype.updatePreview = function() {\n+    var self = this;\n+    \n+    this._progressContainer.show();\n+    \n+    var options = this.getOptions();\n+    // for preview, we need exact text, so it's easier to show where the columns are split\n+    options.guessCellValueTypes = false;\n+    \n+    this._controller.updateFormatAndOptions(options, function(result) {\n+        if (result.status == \"ok\") {\n+            self._controller.getPreviewData(function(projectData) {\n+                new Refine.FixedWidthPreviewTable(\n+                    self,\n+                    self._config,\n+                    projectData,\n+                    self._dataContainer\n+                );\n+                self._progressContainer.hide();\n+            }, 20);\n+        }\n+    });\n+};\n+\n+Refine.FixedWidthPreviewTable = function(parserUI, config, projectData, elmt) {\n+    this._parserUI = parserUI;\n+    this._config = config;\n+    this._projectData = projectData;\n+    this._elmt = elmt;\n+    this._render();\n+};\n+\n+Refine.FixedWidthPreviewTable.prototype._render = function() {\n+    var scrollTop = this._elmt[0].scrollTop;\n+    var scrollLeft = this._elmt[0].scrollLeft;\n+    \n+    this._elmt.unbind().empty();\n+    \n+    var self = this;\n+    var container = $('<div>')\n+        .addClass('fixed-width-preview-container')\n+        .appendTo(this._elmt);\n+    var table = $('<table>')\n+        .addClass(\"data-table\")\n+        .addClass(\"fixed-width-preview-data-table\")\n+        .appendTo(container)[0];\n+    \n+    var columns = this._projectData.columnModel.columns;\n+    var columnWidths = [].concat(this._config.columnWidths);\n+    \n+    var addCell = function(tr) {\n+        var index = tr.cells.length;\n+        var td = tr.insertCell(index);\n+        td.className = (index % 2 == 0) ? 'even' : 'odd';\n+        return td;\n+    };\n+    \n+    /*------------------------------------------------------------\n+     *  Column Headers\n+     *------------------------------------------------------------\n+     */\n+\n+    var trHead = table.insertRow(table.rows.length);\n+    $(addCell(trHead)).addClass(\"column-header\").html('&nbsp;'); // index\n+    \n+    var createColumnHeader = function(column, index) {\n+        var name = column.name;\n+        if (index < columnWidths.length) {\n+            name = name.slice(0, columnWidths[index]);\n+        }\n+        $(addCell(trHead))\n+            .addClass(\"column-header\")\n+            .text(name)\n+            .attr('title', column.name);\n+    };\n+    for (var i = 0; i < columns.length; i++) {\n+        createColumnHeader(columns[i], i);\n+    }\n+    \n+    /*------------------------------------------------------------\n+     *  Data Cells\n+     *------------------------------------------------------------\n+     */\n+    \n+    var rows = this._projectData.rowModel.rows;\n+    var renderRow = function(tr, r, row) {\n+        var tdIndex = addCell(tr);\n+        $('<div></div>').html((row.i + 1) + \".\").appendTo(tdIndex);\n+        \n+        var cells = row.cells;\n+        for (var i = 0; i < columns.length; i++) {\n+            var column = columns[i];\n+            var td = addCell(tr);\n+            var divContent = $('<div/>').addClass(\"data-table-cell-content\").appendTo(td);\n+            \n+            var cell = (column.cellIndex < cells.length) ? cells[column.cellIndex] : null;\n+            if (!cell || (\"v\" in cell && cell.v === null)) {\n+                $('<span>').html(\"&nbsp;\").appendTo(divContent);\n+            } else if (\"e\" in cell) {\n+                $('<span>').addClass(\"data-table-error\").text(cell.e).appendTo(divContent);\n+            } else if (!(\"r\" in cell) || !cell.r) {\n+                if (typeof cell.v !== \"string\") {\n+                    if (typeof cell.v == \"number\") {\n+                        divContent.addClass(\"data-table-cell-content-numeric\");\n+                    }\n+                    $('<span>')\n+                        .addClass(\"data-table-value-nonstring\")\n+                        .text(cell.v)\n+                        .appendTo(divContent);\n+                } else if (URL.looksLikeUrl(cell.v)) {\n+                    $('<a>')\n+                        .text(cell.v)\n+                        .attr(\"href\", cell.v)\n+                        .attr(\"target\", \"_blank\")\n+                        .appendTo(divContent);\n+                } else {\n+                    $('<span>').text(cell.v).appendTo(divContent);\n+                }\n+            }\n+        }\n+    };\n+    \n+    for (var r = 0; r < rows.length; r++) {\n+        var row = rows[r];\n+        renderRow(table.insertRow(table.rows.length), r, row);\n+    }\n+    \n+    var pixelOffset = $(trHead.cells[1]).position().left;\n+    var testString = '01234567890123456789012345678901234567890123456789';\n+    var testDiv = $('<div>')\n+        .css('position', 'absolute')\n+        .css('top', '-100px')\n+        .text(testString)\n+        .appendTo(container);\n+    var pixelsPerChar = testDiv.width() / testString.length;\n+    testDiv.remove();\n+    \n+    var columnSeparators = [];\n+    var columnCharIndexes = [];\n+    var positionColumnSeparator = function(outer, charIndex) {\n+        outer.css('left',\n+            Math.round(pixelOffset + charIndex * pixelsPerChar - DOM.getHPaddings(outer) / 2) + 'px');\n+    };\n+    var computeCharIndex = function(evt) {\n+        var offset = evt.pageX - container.offset().left;\n+        return Math.round((offset - pixelOffset) / pixelsPerChar);\n+    };\n+    var updatePreview = function() {\n+        columnCharIndexes.sort(function(a, b) { return a - b; });\n+        \n+        var newColumnWidths = [];\n+        for (var i = 0; i < columnCharIndexes.length; i++) {\n+            var charIndex = columnCharIndexes[i];\n+            var columnWidth = (i == 0) ? charIndex : (charIndex - columnCharIndexes[i - 1]);\n+            if (columnWidth > 0) {\n+                newColumnWidths.push(columnWidth);\n+            }\n+        }\n+        \n+        self._config.columnWidths = newColumnWidths;\n+        self._parserUI._optionContainerElmts.columnWidthsInput[0].value = newColumnWidths.join(',');\n+        self._parserUI.updatePreview();\n+    };\n+    \n+    var newSeparator = $('<div>')\n+        .addClass('fixed-width-preview-column-separator-outer')\n+        .append($('<div>').addClass('fixed-width-preview-column-separator-inner'))\n+        .appendTo(container);\n+    \n+    var createColumnSeparator = function(charIndex, index) {\n+        columnCharIndexes[index] = charIndex;\n+        \n+        var outer = $('<div>')\n+            .addClass('fixed-width-preview-column-separator-outer')\n+            .appendTo(container);\n+        var inner = $('<div>')\n+            .addClass('fixed-width-preview-column-separator-inner')\n+            .appendTo(outer);\n+        var close = $('<div>').appendTo(inner);\n+        \n+        positionColumnSeparator(outer, charIndex);\n+        \n+        outer.mouseover(function() {\n+                newSeparator.hide();\n+            })\n+            .mouseout(function() {\n+                newSeparator.show();\n+            })\n+            .mousedown(function() {\n+                var mouseMove = function(evt) {\n+                    var newCharIndex = computeCharIndex(evt);\n+                    positionColumnSeparator(outer, newCharIndex);\n+                \n+                    evt.preventDefault();\n+                    evt.stopPropagation();\n+                    return false;\n+                };\n+                var mouseUp = function(evt) {\n+                    container.unbind('mousemove', mouseMove);\n+                    container.unbind('mouseup', mouseUp);\n+                \n+                    var newCharIndex = computeCharIndex(evt);\n+                    positionColumnSeparator(outer, newCharIndex);\n+                \n+                    columnCharIndexes[index] = newCharIndex;\n+                    updatePreview();\n+                \n+                    evt.preventDefault();\n+                    evt.stopPropagation();\n+                    return false;\n+                };\n+                container.bind('mousemove', mouseMove);\n+                container.bind('mouseup', mouseUp);\n+            });\n+            \n+        close.click(function() {\n+                columnCharIndexes[index] = index > 0 ? columnCharIndexes[index - 1] : 0;\n+                updatePreview();\n+            });\n+    };\n+    \n+    var charOffset = 0;\n+    for (var i = 0; i < columnWidths.length; i++) {\n+        var columnWidth = columnWidths[i];\n+        createColumnSeparator(charOffset + columnWidth, i);\n+        charOffset += columnWidth;\n+    }\n+    \n+    container\n+        .mouseout(function(evt) {\n+            newSeparator.hide();\n+        })\n+        .mousemove(function(evt) {\n+            var offset = evt.pageX - container.offset().left;\n+            var newCharIndex = Math.round((offset - pixelOffset) / pixelsPerChar);\n+            positionColumnSeparator(newSeparator.show(), newCharIndex);\n+        });\n+    newSeparator.mousedown(function(evt) {\n+        var newCharIndex = computeCharIndex(evt);\n+        columnCharIndexes.push(newCharIndex);\n+        updatePreview();\n+    \n+        evt.preventDefault();\n+        evt.stopPropagation();\n+        return false;\n+    });\n+    \n+    this._elmt[0].scrollTop = scrollTop;\n+    this._elmt[0].scrollLeft = scrollLeft;\n+};"
        },
        {
            "sha": "9a99a5689b035b240c6295cf2998c0a23809dbd3",
            "filename": "main/webapp/modules/core/scripts/index/parser-interfaces/json-parser-select-ui.html",
            "status": "added",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fjson-parser-select-ui.html",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fjson-parser-select-ui.html",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fjson-parser-select-ui.html?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,4 @@\n+<div class=\"json-parser-ui-select-message\">\n+  Click on the first JSON { } node corresponding to the first record to load.\n+</div>\n+<div class=\"json-parser-ui-select-dom\" bind=\"domContainer\"></div>\n\\ No newline at end of file"
        },
        {
            "sha": "65182d1bba39e62b2a265592caac9af3b4cf57a9",
            "filename": "main/webapp/modules/core/scripts/index/parser-interfaces/json-parser-ui.html",
            "status": "added",
            "additions": 19,
            "deletions": 0,
            "changes": 19,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fjson-parser-ui.html",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fjson-parser-ui.html",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fjson-parser-ui.html?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,19 @@\n+<div class=\"grid-layout layout-loose layout-full\"><table>\n+  <tr>\n+    <td colspan=\"2\"><div class=\"grid-layout layout-tighter layout-full\"><table>\n+      <tr>\n+        <td style=\"text-align: right;\">&nbsp;</td>\n+        <td width=\"1%\"><button class=\"button\" bind=\"pickRecordElementsButton\">Pick Record Nodes</button></td>\n+        <td width=\"1%\"><button class=\"button\" bind=\"previewButton\">Update Preview</button></td>\n+      </tr>\n+    </table></div></td>\n+  </tr>\n+  <tr>\n+    <td><div class=\"grid-layout layout-tightest\"><table>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"limitCheckbox\" /></td><td>Load at most</td>\n+        <td><input bind=\"limitInput\" type=\"text\" class=\"lightweight\" size=\"2\" value=\"0\" /> record(s) of data</td></tr>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"includeFileSourcesCheckbox\" /></td>\n+        <td colspan=\"2\">Store file source (file names, URLs) in each row</td></tr>\n+    </table></div></td>\n+  </tr>\n+</table></div>\n\\ No newline at end of file"
        },
        {
            "sha": "f4f5f1d5dbecef948d78ee5b5e434af90491c1e7",
            "filename": "main/webapp/modules/core/scripts/index/parser-interfaces/json-parser-ui.js",
            "status": "added",
            "additions": 241,
            "deletions": 0,
            "changes": 241,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fjson-parser-ui.js",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fjson-parser-ui.js",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fjson-parser-ui.js?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,241 @@\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+Refine.JsonParserUI = function(controller, jobID, job, format, config,\n+    dataContainerElmt, progressContainerElmt, optionContainerElmt) {\n+    \n+    this._controller = controller;\n+    this._jobID = jobID;\n+    this._job = job;\n+    this._format = format;\n+    this._config = config;\n+    \n+    this._dataContainer = dataContainerElmt;\n+    this._progressContainer = progressContainerElmt;\n+    this._optionContainer = optionContainerElmt;\n+    \n+    this._timerID = null;\n+    this._initialize();\n+    this._showPickRecordNodesUI();\n+};\n+Refine.DefaultImportingController.parserUIs[\"JsonParserUI\"] = Refine.JsonParserUI;\n+\n+Refine.JsonParserUI.prototype.dispose = function() {\n+    if (this._timerID != null) {\n+        window.clearTimeout(this._timerID);\n+        this._timerID = null;\n+    }\n+};\n+\n+Refine.JsonParserUI.prototype.confirmReadyToCreateProject = function() {\n+  if ((this._config.recordPath) && this._config.recordPath.length > 0) {\n+      return true;\n+  } else {\n+      window.alert('Please specify a record path first.');\n+  }\n+};\n+\n+Refine.JsonParserUI.prototype.getOptions = function() {\n+    var options = {\n+        recordPath: this._config.recordPath\n+    };\n+    \n+    if (this._optionContainerElmts.limitCheckbox[0].checked) {\n+        options.limit = parseIntDefault(this._optionContainerElmts.limitInput[0].value, -1);\n+    } else {\n+        options.limit = -1;\n+    }\n+    options.includeFileSources = this._optionContainerElmts.includeFileSourcesCheckbox[0].checked;\n+    \n+    return options;\n+};\n+\n+Refine.JsonParserUI.prototype._initialize = function() {\n+    var self = this;\n+    \n+    this._optionContainer.unbind().empty().html(\n+        DOM.loadHTML(\"core\", \"scripts/index/parser-interfaces/json-parser-ui.html\"));\n+    this._optionContainerElmts = DOM.bind(this._optionContainer);\n+    this._optionContainerElmts.previewButton.click(function() { self._updatePreview(); });\n+    \n+    if (this._config.limit > 0) {\n+        this._optionContainerElmts.limitCheckbox.attr(\"checked\", \"checked\");\n+        this._optionContainerElmts.limitInput[0].value = this._config.limit.toString();\n+    }\n+    if (this._config.includeFileSources) {\n+        this._optionContainerElmts.includeFileSourcesCheckbox.attr(\"checked\", \"checked\");\n+    }\n+    this._optionContainerElmts.pickRecordElementsButton.click(function() {\n+        self._showPickRecordNodesUI();\n+    });\n+    \n+    var onChange = function() {\n+        self._scheduleUpdatePreview();\n+    };\n+    this._optionContainer.find(\"input\").bind(\"change\", onChange);\n+    this._optionContainer.find(\"select\").bind(\"change\", onChange);\n+};\n+\n+Refine.JsonParserUI.prototype._showPickRecordNodesUI = function() {\n+    var self = this;\n+    \n+    this._dataContainer.unbind().empty().html(\n+        DOM.loadHTML(\"core\", \"scripts/index/parser-interfaces/json-parser-select-ui.html\"));\n+    \n+    var elmts = DOM.bind(this._dataContainer);\n+    \n+    var escapeElmt = $('<span>');\n+    var escapeHtml = function(s) {\n+        escapeElmt.empty().text(s);\n+        return escapeElmt.html();\n+    };\n+    var textAsHtml = function(s) {\n+        s = s.length <= 200 ? s : (s.substring(0, 200) + ' ...');\n+        return '<span class=\"text\">' + escapeHtml(s) + '</span>';\n+    };\n+    var hittest = function(evt, elmt) {\n+        var a = $(evt.target).closest('.node');\n+        return a.length > 0 && a[0] == elmt[0];\n+    };\n+    var registerEvents = function(elmt, path) {\n+        elmt.bind('mouseover', function(evt) {\n+            if (hittest(evt, elmt)) {\n+                elmts.domContainer.find('.highlight').removeClass('highlight');\n+                elmt.addClass('highlight');\n+            }\n+        })\n+        .bind('mouseout', function(evt) {\n+            elmt.removeClass('highlight');\n+        })\n+        .click(function(evt) {\n+            if (hittest(evt, elmt)) {\n+                self._setRecordPath(path);\n+            }\n+        });\n+    };\n+    var renderArray = function(a, container, parentPath) {\n+        $('<span>').addClass('punctuation').text('[').appendTo(container);\n+        \n+        var parentPath2 = [].concat(parentPath);\n+        parentPath2.push('__anonymous__');\n+        \n+        var elementNode = null;\n+        for (var i = 0; i < a.length; i++) {\n+            if (elementNode != null) {\n+                $('<span>').addClass('punctuation').text(',').appendTo(elementNode);\n+            }\n+            elementNode = $('<div>').addClass('node').addClass('indented').appendTo(container);\n+            \n+            renderNode(a[i], elementNode, parentPath2);\n+        }\n+        \n+        $('<span>').addClass('punctuation').text(']').appendTo(container);\n+    };\n+    var renderObject = function(o, container, parentPath) {\n+        $('<span>').addClass('punctuation').text('{').appendTo(container);\n+        \n+        var elementNode = null;\n+        for (var key in o) {\n+            if (o.hasOwnProperty(key)) {\n+                if (elementNode != null) {\n+                    $('<span>').addClass('punctuation').text(',').appendTo(elementNode);\n+                }\n+                elementNode = $('<div>').addClass('node').addClass('indented').appendTo(container);\n+                \n+                $('<span>').text(key).addClass('field-name').appendTo(elementNode);\n+                $('<span>').text(': ').addClass('punctuation').appendTo(elementNode);\n+                \n+                var parentPath2 = [].concat(parentPath);\n+                parentPath2.push(key);\n+\n+                renderNode(o[key], elementNode, parentPath2);\n+            }\n+        }\n+        $('<span>').addClass('punctuation').text('}').appendTo(container);\n+        \n+        registerEvents(container, parentPath);\n+    };\n+    var renderNode = function(node, container, parentPath) {\n+        if (node == null) {\n+            $('<span>').addClass('literal').text('null').appendTo(container);\n+        } else {\n+            if ($.isPlainObject(node)) {\n+                renderObject(node, container, parentPath);\n+            } else if ($.isArray(node)) {\n+                renderArray(node, container, parentPath);\n+            } else {\n+                $('<span>').addClass('literal').text(node.toString()).appendTo(container);\n+                registerEvents(container, parentPath);\n+            }\n+        }\n+    };\n+    renderNode(this._config.dom, elmts.domContainer, [ '__anonymous__' ]);\n+};\n+\n+Refine.JsonParserUI.prototype._scheduleUpdatePreview = function() {\n+    if (this._timerID != null) {\n+        window.clearTimeout(this._timerID);\n+        this._timerID = null;\n+    }\n+    \n+    var self = this;\n+    this._timerID = window.setTimeout(function() {\n+        self._timerID = null;\n+        self._updatePreview();\n+    }, 500); // 0.5 second\n+};\n+\n+Refine.JsonParserUI.prototype._setRecordPath = function(path) {\n+    this._config.recordPath = path;\n+    this._updatePreview();\n+};\n+\n+Refine.JsonParserUI.prototype._updatePreview = function() {\n+    var self = this;\n+    \n+    this._progressContainer.show();\n+    \n+    var options = this.getOptions();\n+    // for preview, we need exact text, so it's easier to show where the columns are split\n+    options.guessCellValueTypes = false;\n+    \n+    this._controller.updateFormatAndOptions(options, function(result) {\n+        if (result.status == \"ok\") {\n+            self._controller.getPreviewData(function(projectData) {\n+                self._progressContainer.hide();\n+                \n+                new Refine.PreviewTable(projectData, self._dataContainer.unbind().empty());\n+            }, 100);\n+        }\n+    });\n+};"
        },
        {
            "sha": "2aa170c03780c9d1eb94f72c73f38865d7c98b09",
            "filename": "main/webapp/modules/core/scripts/index/parser-interfaces/line-based-parser-ui.html",
            "status": "added",
            "additions": 45,
            "deletions": 0,
            "changes": 45,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fline-based-parser-ui.html",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fline-based-parser-ui.html",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fline-based-parser-ui.html?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,45 @@\n+<div class=\"grid-layout layout-loose layout-full\"><table>\n+  <tr>\n+    <td><div class=\"grid-layout layout-tighter\"><table>\n+      <tr>\n+        <td width=\"1%\">Character&nbsp;encoding</td>\n+        <td><select bind=\"encodingSelect\"></select></td>\n+      </tr>\n+    </table></div></td>\n+    <td colspan=\"2\"><div class=\"grid-layout layout-tighter layout-full\"><table>\n+      <tr>\n+        <td style=\"text-align: right;\">&nbsp;</td>\n+        <td width=\"1%\"><button class=\"button\" bind=\"previewButton\">Update&nbsp;Preview</button></td>\n+      </tr>\n+    </table></div></td>\n+  </tr>\n+  <tr>\n+    <td><div class=\"grid-layout layout-tightest\"><table>\n+      <tr><td colspan=\"2\">Parse every <input bind=\"linesPerRowInput\" type=\"text\" class=\"lightweight\" size=\"2\" value=\"0\" />\n+        lines into one row\n+      </td></tr>\n+      \n+      <tr><td colspan=\"2\">Lines are separated by</td></tr>\n+      <tr><td width=\"1%\"><input type=\"radio\" name=\"row-separator\" value=\"new-line\" /></td><td>new line characters \\n</td></tr>\n+      <tr><td width=\"1%\"><input type=\"radio\" name=\"row-separator\" value=\"custom\" /></td><td>custom\n+        <input bind=\"rowSeparatorInput\" type=\"text\" class=\"lightweight\" size=\"5\" /></td></tr>\n+      <tr><td colspan=\"2\">Escape special characters with \\</td></tr>\n+    </table></div></td>\n+    <td><div class=\"grid-layout layout-tightest\"><table>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"storeBlankRowsCheckbox\" /></td>\n+        <td colspan=\"2\">Store blank rows</td></tr>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"storeBlankCellsAsNullsCheckbox\" /></td>\n+        <td colspan=\"2\">Store blank cells as nulls</td></tr>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"includeFileSourcesCheckbox\" /></td>\n+        <td>Store file source<br/>(file names, URLs)<br/>in each row</td></tr>\n+    </table></div></td>\n+    <td colspan=\"2\"><div class=\"grid-layout layout-tightest\"><table>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"ignoreCheckbox\" /></td><td>Ignore first</td>\n+        <td><input bind=\"ignoreInput\" type=\"text\" class=\"lightweight\" size=\"2\" value=\"0\" /> line(s) at beginning of file</td></tr>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"skipCheckbox\" /></td><td>Discard initial</td>\n+        <td><input bind=\"skipInput\" type=\"text\" class=\"lightweight\" size=\"2\" value=\"0\" /> row(s) of data</td></tr>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"limitCheckbox\" /></td><td>Load at most</td>\n+        <td><input bind=\"limitInput\" type=\"text\" class=\"lightweight\" size=\"2\" value=\"0\" /> row(s) of data</td></tr>\n+    </table></div></td>\n+  </tr>\n+</table></div>\n\\ No newline at end of file"
        },
        {
            "sha": "e9df9b1110c2e38c37b0d0365e421818d0d9a0e9",
            "filename": "main/webapp/modules/core/scripts/index/parser-interfaces/line-based-parser-ui.js",
            "status": "added",
            "additions": 186,
            "deletions": 0,
            "changes": 186,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fline-based-parser-ui.js",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fline-based-parser-ui.js",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fline-based-parser-ui.js?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,186 @@\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+Refine.LineBasedParserUI = function(controller, jobID, job, format, config,\n+        dataContainerElmt, progressContainerElmt, optionContainerElmt) {\n+\n+    this._controller = controller;\n+    this._jobID = jobID;\n+    this._job = job;\n+    this._format = format;\n+    this._config = config;\n+\n+    this._dataContainer = dataContainerElmt;\n+    this._progressContainer = progressContainerElmt;\n+    this._optionContainer = optionContainerElmt;\n+\n+    this._timerID = null;\n+    this._initialize();\n+    this._updatePreview();\n+};\n+Refine.DefaultImportingController.parserUIs[\"LineBasedParserUI\"] = Refine.LineBasedParserUI;\n+\n+Refine.LineBasedParserUI.prototype.confirmReadyToCreateProject = function() {\n+  return true;\n+};\n+\n+Refine.LineBasedParserUI.prototype.dispose = function() {\n+    if (this._timerID != null) {\n+        window.clearTimeout(this._timerID);\n+        this._timerID = null;\n+    }\n+};\n+\n+Refine.LineBasedParserUI.prototype.getOptions = function() {\n+    var options = {\n+        recordPath: this._config.recordPath\n+    };\n+    \n+    var parseIntDefault = function(s, def) {\n+        try {\n+            var n = parseInt(s);\n+            if (!isNaN(n)) {\n+                return n;\n+            }\n+        } catch (e) {\n+            // Ignore\n+        }\n+        return def;\n+    };\n+    options.linesPerRow = parseIntDefault(this._optionContainerElmts.linesPerRowInput[0].value, 1);\n+    \n+    switch (this._optionContainer.find(\"input[name='row-separator']:checked\")[0].value) {\n+        case 'new-line':\n+            options.lineSeparator = \"\\n\";\n+            break;\n+        default:\n+            options.lineSeparator = Refine.FixedWidthParserUI.decodeSeparator(\n+                this._optionContainerElmts.rowSeparatorInput[0].value);\n+    }\n+    \n+    if (this._optionContainerElmts.ignoreCheckbox[0].checked) {\n+        options.ignoreLines = parseIntDefault(this._optionContainerElmts.ignoreInput[0].value, -1);\n+    } else {\n+        options.ignoreLines = -1;\n+    }\n+    if (this._optionContainerElmts.limitCheckbox[0].checked) {\n+        options.limit = parseIntDefault(this._optionContainerElmts.limitInput[0].value, -1);\n+    } else {\n+        options.limit = -1;\n+    }\n+    if (this._optionContainerElmts.skipCheckbox[0].checked) {\n+        options.skipDataLines = parseIntDefault(this._optionContainerElmts.skipInput[0].value, -1);\n+    } else {\n+        options.skipDataLines = -1;\n+    }\n+    options.storeBlankRows = this._optionContainerElmts.storeBlankRowsCheckbox[0].checked;\n+    options.storeBlankCellsAsNulls = this._optionContainerElmts.storeBlankCellsAsNullsCheckbox[0].checked;\n+    options.includeFileSources = this._optionContainerElmts.includeFileSourcesCheckbox[0].checked;\n+    \n+    return options;\n+};\n+\n+Refine.LineBasedParserUI.prototype._initialize = function() {\n+    var self = this;\n+    \n+    this._optionContainer.unbind().empty().html(\n+        DOM.loadHTML(\"core\", \"scripts/index/parser-interfaces/line-based-parser-ui.html\"));\n+    this._optionContainerElmts = DOM.bind(this._optionContainer);\n+    this._optionContainerElmts.previewButton.click(function() { self._updatePreview(); });\n+    \n+    this._optionContainerElmts.linesPerRowInput[0].value =\n+      this._config.linesPerRow.toString();\n+    \n+    var rowSeparatorValue = (this._config.lineSeparator == \"\\n\") ? 'new-line' : 'custom';\n+    this._optionContainer.find(\n+        \"input[name='row-separator'][value='\" + rowSeparatorValue + \"']\").attr(\"checked\", \"checked\");\n+    this._optionContainerElmts.rowSeparatorInput[0].value =\n+        Refine.SeparatorBasedParserUI.encodeSeparator(this._config.lineSeparator);\n+\n+    if (this._config.ignoreLines > 0) {\n+        this._optionContainerElmts.ignoreCheckbox.attr(\"checked\", \"checked\");\n+        this._optionContainerElmts.ignoreInput[0].value = this._config.ignoreLines.toString();\n+    }\n+    if (this._config.limit > 0) {\n+        this._optionContainerElmts.limitCheckbox.attr(\"checked\", \"checked\");\n+        this._optionContainerElmts.limitInput[0].value = this._config.limit.toString();\n+    }\n+    if (this._config.skipDataLines > 0) {\n+        this._optionContainerElmts.skipCheckbox.attr(\"checked\", \"checked\");\n+        this._optionContainerElmts.skipInput.value[0].value = this._config.skipDataLines.toString();\n+    }\n+    if (this._config.storeBlankRows) {\n+        this._optionContainerElmts.storeBlankRowsCheckbox.attr(\"checked\", \"checked\");\n+    }\n+    if (this._config.storeBlankCellsAsNulls) {\n+        this._optionContainerElmts.storeBlankCellsAsNullsCheckbox.attr(\"checked\", \"checked\");\n+    }\n+    if (this._config.includeFileSources) {\n+        this._optionContainerElmts.includeFileSourcesCheckbox.attr(\"checked\", \"checked\");\n+    }\n+    \n+    var onChange = function() {\n+        self._scheduleUpdatePreview();\n+    };\n+    this._optionContainer.find(\"input\").bind(\"change\", onChange);\n+    this._optionContainer.find(\"select\").bind(\"change\", onChange);\n+};\n+\n+Refine.LineBasedParserUI.prototype._scheduleUpdatePreview = function() {\n+    if (this._timerID != null) {\n+        window.clearTimeout(this._timerID);\n+        this._timerID = null;\n+    }\n+    \n+    var self = this;\n+    this._timerID = window.setTimeout(function() {\n+        self._timerID = null;\n+        self._updatePreview();\n+    }, 500); // 0.5 second\n+};\n+\n+Refine.LineBasedParserUI.prototype._updatePreview = function() {\n+    var self = this;\n+    \n+    this._progressContainer.show();\n+    \n+    this._controller.updateFormatAndOptions(this.getOptions(), function(result) {\n+        if (result.status == \"ok\") {\n+            self._controller.getPreviewData(function(projectData) {\n+                self._progressContainer.hide();\n+                \n+                new Refine.PreviewTable(projectData, self._dataContainer.unbind().empty());\n+            });\n+        }\n+    });\n+};"
        },
        {
            "sha": "86556b507c48b737b161225e729bca9dfbeffa95",
            "filename": "main/webapp/modules/core/scripts/index/parser-interfaces/preview-table.js",
            "status": "added",
            "additions": 115,
            "deletions": 0,
            "changes": 115,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fpreview-table.js",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fpreview-table.js",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fpreview-table.js?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,115 @@\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+Refine.PreviewTable = function(projectData, elmt) {\n+    this._projectData = projectData;\n+    this._elmt = elmt;\n+    this._render();\n+};\n+\n+Refine.PreviewTable.prototype._render = function() {\n+    var self = this;\n+    var table = $('<table>').addClass(\"data-table\").appendTo(this._elmt)[0];\n+    \n+    var columns = this._projectData.columnModel.columns;\n+    \n+    /*------------------------------------------------------------\n+     *  Column Headers\n+     *------------------------------------------------------------\n+     */\n+\n+    var trHead = table.insertRow(table.rows.length);\n+    $(trHead.insertCell(0)).addClass(\"column-header\").html('&nbsp;'); // index\n+    \n+    var createColumnHeader = function(column) {\n+        $(trHead.insertCell(trHead.cells.length))\n+            .addClass(\"column-header\")\n+            .text(column.name);\n+    };\n+    for (var i = 0; i < columns.length; i++) {\n+        createColumnHeader(columns[i], i);\n+    }\n+    \n+    /*------------------------------------------------------------\n+     *  Data Cells\n+     *------------------------------------------------------------\n+     */\n+    \n+    var rows = this._projectData.rowModel.rows;\n+    var renderRow = function(tr, r, row, even) {\n+        $(tr).addClass(even ? \"even\" : \"odd\");\n+        \n+        var cells = row.cells;\n+        var tdIndex = tr.insertCell(tr.cells.length);\n+        $('<div></div>').html((row.i + 1) + \".\").appendTo(tdIndex);\n+        \n+        for (var i = 0; i < columns.length; i++) {\n+            var column = columns[i];\n+            var td = tr.insertCell(tr.cells.length);\n+            var divContent = $('<div/>').addClass(\"data-table-cell-content\").appendTo(td);\n+            \n+            var cell = (column.cellIndex < cells.length) ? cells[column.cellIndex] : null;\n+            if (!cell || (\"v\" in cell && cell.v === null)) {\n+                $('<span>').html(\"&nbsp;\").appendTo(divContent);\n+            } else if (\"e\" in cell) {\n+                $('<span>').addClass(\"data-table-error\").text(cell.e).appendTo(divContent);\n+            } else if (!(\"r\" in cell) || !cell.r) {\n+                if (typeof cell.v !== \"string\") {\n+                    if (typeof cell.v == \"number\") {\n+                        divContent.addClass(\"data-table-cell-content-numeric\");\n+                    }\n+                    $('<span>')\n+                        .addClass(\"data-table-value-nonstring\")\n+                        .text(cell.v)\n+                        .appendTo(divContent);\n+                } else if (URL.looksLikeUrl(cell.v)) {\n+                    $('<a>')\n+                        .text(cell.v)\n+                        .attr(\"href\", cell.v)\n+                        .attr(\"target\", \"_blank\")\n+                        .appendTo(divContent);\n+                } else {\n+                    $('<span>').text(cell.v).appendTo(divContent);\n+                }\n+            }\n+        }\n+    };\n+    \n+    var even = true;\n+    for (var r = 0; r < rows.length; r++) {\n+        var row = rows[r];\n+        var tr = table.insertRow(table.rows.length);\n+        even = !even;\n+        renderRow(tr, r, row, even);\n+    }    \n+};"
        },
        {
            "sha": "51bdaa0d843e845c5d452435e5e135f1f2349446",
            "filename": "main/webapp/modules/core/scripts/index/parser-interfaces/separator-based-parser-ui.html",
            "status": "added",
            "additions": 60,
            "deletions": 0,
            "changes": 60,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fseparator-based-parser-ui.html",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fseparator-based-parser-ui.html",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fseparator-based-parser-ui.html?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,60 @@\n+<div class=\"grid-layout layout-loose layout-full\"><table>\n+  <tr>\n+    <td><div class=\"grid-layout layout-tighter\"><table>\n+      <tr>\n+        <td width=\"1%\">Character&nbsp;encoding</td>\n+        <td><select bind=\"encodingSelect\"></select></td>\n+      </tr>\n+    </table></div></td>\n+    <td colspan=\"2\"><div class=\"grid-layout layout-tighter layout-full\"><table>\n+      <tr>\n+        <td style=\"text-align: right;\">&nbsp;</td>\n+        <td width=\"1%\"><button class=\"button\" bind=\"previewButton\">Update&nbsp;Preview</button></td>\n+      </tr>\n+    </table></div></td>\n+  </tr>\n+  <tr>\n+    <td><div class=\"grid-layout layout-tightest\"><table>\n+      <tr><td colspan=\"2\">Columns are separated by</td></tr>\n+      <tr><td width=\"1%\"><input type=\"radio\" name=\"column-separator\" value=\"comma\" /></td><td>commas (CSV)</td></tr>\n+      <tr><td width=\"1%\"><input type=\"radio\" name=\"column-separator\" value=\"tab\" /></td><td>tabs (TSV)</td></tr>\n+      <tr><td width=\"1%\"><input type=\"radio\" name=\"column-separator\" value=\"custom\" /></td>\n+        <td>custom <input bind=\"columnSeparatorInput\" type=\"text\" class=\"lightweight\" size=\"5\" /></td></tr>\n+      <tr><td colspan=\"2\">Escape special characters with \\</td></tr>\n+    </table></div></td>\n+    \n+    <td colspan=\"2\"><div class=\"grid-layout layout-tightest\"><table>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"ignoreCheckbox\" /></td><td>Ignore first</td>\n+        <td><input bind=\"ignoreInput\" type=\"text\" class=\"lightweight\" size=\"2\" value=\"0\" /> line(s) at beginning of file</td></tr>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"headerLinesCheckbox\" /></td><td>Parse next</td>\n+        <td><input bind=\"headerLinesInput\" type=\"text\" class=\"lightweight\" size=\"2\" value=\"1\" /> line(s) as column headers</td></tr>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"skipCheckbox\" /></td><td>Discard initial</td>\n+        <td><input bind=\"skipInput\" type=\"text\" class=\"lightweight\" size=\"2\" value=\"0\" /> row(s) of data</td></tr>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"limitCheckbox\" /></td><td>Load at most</td>\n+        <td><input bind=\"limitInput\" type=\"text\" class=\"lightweight\" size=\"2\" value=\"0\" /> row(s) of data</td></tr>\n+    </table></div></td>\n+  </tr>\n+  <tr>\n+    <td><div class=\"grid-layout layout-tightest\"><table>\n+      <tr><td colspan=\"2\">Rows are separated by</td></tr>\n+      <tr><td width=\"1%\"><input type=\"radio\" name=\"row-separator\" value=\"new-line\" /></td><td>new line characters \\n</td></tr>\n+      <tr><td width=\"1%\"><input type=\"radio\" name=\"row-separator\" value=\"custom\" /></td><td>custom\n+        <input bind=\"rowSeparatorInput\" type=\"text\" class=\"lightweight\" size=\"5\" /></td></tr>\n+      <tr><td colspan=\"2\">Escape special characters with \\</td></tr>\n+    </table></div></td>\n+    <td><div class=\"grid-layout layout-tightest\"><table>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"guessCellValueTypesCheckbox\" /></td>\n+        <td>Parse cell text into<br/>numbers, dates, ...</td></tr>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"processQuoteMarksCheckbox\" /></td>\n+        <td>Quotation marks are used<br/>to enclose cells containing<br/>column separators</td></tr>\n+    </table></div></td>\n+    <td><div class=\"grid-layout layout-tightest\"><table>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"storeBlankRowsCheckbox\" /></td>\n+        <td colspan=\"2\">Store blank rows</td></tr>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"storeBlankCellsAsNullsCheckbox\" /></td>\n+        <td colspan=\"2\">Store blank cells as nulls</td></tr>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"includeFileSourcesCheckbox\" /></td>\n+        <td>Store file source<br/>(file names, URLs)<br/>in each row</td></tr>\n+    </table></div></td>\n+  </tr>\n+</table></div>\n\\ No newline at end of file"
        },
        {
            "sha": "c4099927f1c782d06b0af76a68b45f0f9a576094",
            "filename": "main/webapp/modules/core/scripts/index/parser-interfaces/separator-based-parser-ui.js",
            "status": "added",
            "additions": 229,
            "deletions": 0,
            "changes": 229,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fseparator-based-parser-ui.js",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fseparator-based-parser-ui.js",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fseparator-based-parser-ui.js?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,229 @@\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+Refine.SeparatorBasedParserUI = function(controller, jobID, job, format, config,\n+    dataContainerElmt, progressContainerElmt, optionContainerElmt) {\n+    this._controller = controller;\n+    this._jobID = jobID;\n+    this._job = job;\n+    this._format = format;\n+    this._config = config;\n+    \n+    this._dataContainer = dataContainerElmt;\n+    this._progressContainer = progressContainerElmt;\n+    this._optionContainer = optionContainerElmt;\n+    \n+    this._timerID = null;\n+    this._initialize();\n+    this._updatePreview();\n+};\n+Refine.DefaultImportingController.parserUIs[\"SeparatorBasedParserUI\"] = Refine.SeparatorBasedParserUI;\n+\n+Refine.SeparatorBasedParserUI.encodeSeparator = function(s) {\n+    return s.replace(\"\\\\\", \"\\\\\\\\\")\n+        .replace(\"\\n\", \"\\\\n\")\n+        .replace(\"\\t\", \"\\\\t\");\n+};\n+\n+Refine.SeparatorBasedParserUI.decodeSeparator = function(s) {\n+    return s.replace(\"\\\\n\", \"\\n\")\n+        .replace(\"\\\\t\", \"\\t\")\n+        .replace(\"\\\\\\\\\", \"\\\\\");\n+};\n+\n+Refine.SeparatorBasedParserUI.prototype.dispose = function() {\n+    if (this._timerID != null) {\n+        window.clearTimeout(this._timerID);\n+        this._timerID = null;\n+    }\n+};\n+\n+Refine.SeparatorBasedParserUI.prototype.confirmReadyToCreateProject = function() {\n+  return true; // always ready\n+};\n+\n+Refine.SeparatorBasedParserUI.prototype.getOptions = function() {\n+    var options = {};\n+    \n+    switch (this._optionContainer.find(\"input[name='row-separator']:checked\")[0].value) {\n+        case 'new-line':\n+            options.lineSeparator = \"\\n\";\n+            break;\n+        default:\n+            options.lineSeparator = Refine.SeparatorBasedParserUI.decodeSeparator(\n+                this._optionContainerElmts.rowSeparatorInput[0].value);\n+    }\n+    switch (this._optionContainer.find(\"input[name='column-separator']:checked\")[0].value) {\n+        case 'comma':\n+            options.separator = \",\";\n+            break;\n+        case 'tab':\n+            options.separator = \"\\t\";\n+            break;\n+        default:\n+            options.separator = Refine.SeparatorBasedParserUI.decodeSeparator(\n+                this._optionContainerElmts.columnSeparatorInput[0].value);\n+    }\n+    \n+    var parseIntDefault = function(s, def) {\n+        try {\n+            var n = parseInt(s);\n+            if (!isNaN(n)) {\n+                return n;\n+            }\n+        } catch (e) {\n+            // Ignore\n+        }\n+        return def;\n+    };\n+    if (this._optionContainerElmts.ignoreCheckbox[0].checked) {\n+        options.ignoreLines = parseIntDefault(this._optionContainerElmts.ignoreInput[0].value, -1);\n+    } else {\n+        options.ignoreLines = -1;\n+    }\n+    if (this._optionContainerElmts.headerLinesCheckbox[0].checked) {\n+        options.headerLines = parseIntDefault(this._optionContainerElmts.headerLinesInput[0].value, 0);\n+    } else {\n+        options.headerLines = 0;\n+    }\n+    if (this._optionContainerElmts.skipCheckbox[0].checked) {\n+        options.skipDataLines = parseIntDefault(this._optionContainerElmts.skipInput[0].value, 0);\n+    } else {\n+        options.skipDataLines = 0;\n+    }\n+    if (this._optionContainerElmts.limitCheckbox[0].checked) {\n+        options.limit = parseIntDefault(this._optionContainerElmts.limitInput[0].value, -1);\n+    } else {\n+        options.limit = -1;\n+    }\n+    options.storeBlankRows = this._optionContainerElmts.storeBlankRowsCheckbox[0].checked;\n+    \n+    options.guessCellValueTypes = this._optionContainerElmts.guessCellValueTypesCheckbox[0].checked;\n+    options.processQuotes = this._optionContainerElmts.processQuoteMarksCheckbox[0].checked;\n+    \n+    options.storeBlankCellsAsNulls = this._optionContainerElmts.storeBlankCellsAsNullsCheckbox[0].checked;\n+    options.includeFileSources = this._optionContainerElmts.includeFileSourcesCheckbox[0].checked;\n+    \n+    return options;\n+};\n+\n+Refine.SeparatorBasedParserUI.prototype._initialize = function() {\n+    var self = this;\n+    \n+    this._optionContainer.unbind().empty().html(\n+        DOM.loadHTML(\"core\", \"scripts/index/parser-interfaces/separator-based-parser-ui.html\"));\n+    this._optionContainerElmts = DOM.bind(this._optionContainer);\n+    this._optionContainerElmts.previewButton.click(function() { self._updatePreview(); });\n+    \n+    var rowSeparatorValue = (this._config.lineSeparator == \"\\n\") ? 'new-line' : 'custom';\n+    this._optionContainer.find(\n+        \"input[name='row-separator'][value='\" + rowSeparatorValue + \"']\").attr(\"checked\", \"checked\");\n+    this._optionContainerElmts.rowSeparatorInput[0].value =\n+        Refine.SeparatorBasedParserUI.encodeSeparator(this._config.lineSeparator);\n+    \n+    var columnSeparatorValue = (this._config.separator == \",\") ? 'comma' :\n+        ((this._config.separator == \"\\t\") ? 'tab' : 'custom');\n+    this._optionContainer.find(\n+        \"input[name='column-separator'][value='\" + columnSeparatorValue + \"']\").attr(\"checked\", \"checked\");\n+    this._optionContainerElmts.columnSeparatorInput[0].value =\n+        Refine.SeparatorBasedParserUI.encodeSeparator(this._config.separator);\n+    \n+    if (this._config.ignoreLines > 0) {\n+        this._optionContainerElmts.ignoreCheckbox.attr(\"checked\", \"checked\");\n+        this._optionContainerElmts.ignoreInput[0].value = this._config.ignoreLines.toString();\n+    }\n+    if (this._config.headerLines > 0) {\n+        this._optionContainerElmts.headerLinesCheckbox.attr(\"checked\", \"checked\");\n+        this._optionContainerElmts.headerLinesInput[0].value = this._config.headerLines.toString();\n+    }\n+    if (this._config.limit > 0) {\n+        this._optionContainerElmts.limitCheckbox.attr(\"checked\", \"checked\");\n+        this._optionContainerElmts.limitInput[0].value = this._config.limit.toString();\n+    }\n+    if (this._config.skipDataLines > 0) {\n+        this._optionContainerElmts.skipCheckbox.attr(\"checked\", \"checked\");\n+        this._optionContainerElmts.skipInput.value[0].value = this._config.skipDataLines.toString();\n+    }\n+    if (this._config.storeBlankRows) {\n+        this._optionContainerElmts.storeBlankRowsCheckbox.attr(\"checked\", \"checked\");\n+    }\n+    \n+    if (this._config.guessCellValueTypes) {\n+        this._optionContainerElmts.guessCellValueTypesCheckbox.attr(\"checked\", \"checked\");\n+    }\n+    if (this._config.processQuotes) {\n+        this._optionContainerElmts.processQuoteMarksCheckbox.attr(\"checked\", \"checked\");\n+    }\n+    \n+    if (this._config.storeBlankCellsAsNulls) {\n+        this._optionContainerElmts.storeBlankCellsAsNullsCheckbox.attr(\"checked\", \"checked\");\n+    }\n+    if (this._config.includeFileSources) {\n+        this._optionContainerElmts.includeFileSourcesCheckbox.attr(\"checked\", \"checked\");\n+    }\n+    \n+    var onChange = function() {\n+        self._scheduleUpdatePreview();\n+    };\n+    this._optionContainer.find(\"input\").bind(\"change\", onChange);\n+    this._optionContainer.find(\"select\").bind(\"change\", onChange);\n+};\n+\n+Refine.SeparatorBasedParserUI.prototype._scheduleUpdatePreview = function() {\n+    if (this._timerID != null) {\n+        window.clearTimeout(this._timerID);\n+        this._timerID = null;\n+    }\n+    \n+    var self = this;\n+    this._timerID = window.setTimeout(function() {\n+        self._timerID = null;\n+        self._updatePreview();\n+    }, 500); // 0.5 second\n+};\n+\n+Refine.SeparatorBasedParserUI.prototype._updatePreview = function() {\n+    var self = this;\n+    \n+    this._progressContainer.show();\n+    \n+    this._controller.updateFormatAndOptions(this.getOptions(), function(result) {\n+        if (result.status == \"ok\") {\n+            self._controller.getPreviewData(function(projectData) {\n+                self._progressContainer.hide();\n+                \n+                new Refine.PreviewTable(projectData, self._dataContainer.unbind().empty());\n+            });\n+        }\n+    });\n+};"
        },
        {
            "sha": "845af71899587cecd7af35035d5dd8c9719808fd",
            "filename": "main/webapp/modules/core/scripts/index/parser-interfaces/xml-parser-select-ui.html",
            "status": "added",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fxml-parser-select-ui.html",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fxml-parser-select-ui.html",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fxml-parser-select-ui.html?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,4 @@\n+<div class=\"xml-parser-ui-select-message\">\n+  Click on the first XML element corresponding to the first record to load.\n+</div>\n+<div class=\"xml-parser-ui-select-dom\" bind=\"domContainer\"></div>\n\\ No newline at end of file"
        },
        {
            "sha": "d78aa9a39d1e51594dee24c8d70889f70244244a",
            "filename": "main/webapp/modules/core/scripts/index/parser-interfaces/xml-parser-ui.html",
            "status": "added",
            "additions": 19,
            "deletions": 0,
            "changes": 19,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fxml-parser-ui.html",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fxml-parser-ui.html",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fxml-parser-ui.html?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,19 @@\n+<div class=\"grid-layout layout-loose layout-full\"><table>\n+  <tr>\n+    <td colspan=\"2\"><div class=\"grid-layout layout-tighter layout-full\"><table>\n+      <tr>\n+        <td style=\"text-align: right;\">&nbsp;</td>\n+        <td width=\"1%\"><button class=\"button\" bind=\"pickRecordElementsButton\">Pick Record Elements</button></td>\n+        <td width=\"1%\"><button class=\"button\" bind=\"previewButton\">Update Preview</button></td>\n+      </tr>\n+    </table></div></td>\n+  </tr>\n+  <tr>\n+    <td><div class=\"grid-layout layout-tightest\"><table>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"limitCheckbox\" /></td><td>Load at most</td>\n+        <td><input bind=\"limitInput\" type=\"text\" class=\"lightweight\" size=\"2\" value=\"0\" /> record(s) of data</td></tr>\n+      <tr><td width=\"1%\"><input type=\"checkbox\" bind=\"includeFileSourcesCheckbox\" /></td>\n+        <td colspan=\"2\">Store file source (file names, URLs) in each row</td></tr>\n+    </table></div></td>\n+  </tr>\n+</table></div>\n\\ No newline at end of file"
        },
        {
            "sha": "5a487cf148598bbd1b7efbd2bfe0695628e65c6a",
            "filename": "main/webapp/modules/core/scripts/index/parser-interfaces/xml-parser-ui.js",
            "status": "added",
            "additions": 236,
            "deletions": 0,
            "changes": 236,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fxml-parser-ui.js",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fxml-parser-ui.js",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Findex%2Fparser-interfaces%2Fxml-parser-ui.js?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,236 @@\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+Refine.XmlParserUI = function(controller, jobID, job, format, config,\n+    dataContainerElmt, progressContainerElmt, optionContainerElmt) {\n+    \n+    this._controller = controller;\n+    this._jobID = jobID;\n+    this._job = job;\n+    this._format = format;\n+    this._config = config;\n+    \n+    this._dataContainer = dataContainerElmt;\n+    this._progressContainer = progressContainerElmt;\n+    this._optionContainer = optionContainerElmt;\n+    \n+    this._timerID = null;\n+    this._initialize();\n+    this._showPickRecordElementsUI();\n+};\n+Refine.DefaultImportingController.parserUIs[\"XmlParserUI\"] = Refine.XmlParserUI;\n+\n+Refine.XmlParserUI.prototype.dispose = function() {\n+    if (this._timerID != null) {\n+        window.clearTimeout(this._timerID);\n+        this._timerID = null;\n+    }\n+};\n+\n+Refine.XmlParserUI.prototype.confirmReadyToCreateProject = function() {\n+  if ((this._config.recordPath) && this._config.recordPath.length > 0) {\n+      return true;\n+  } else {\n+      window.alert('Please specify a record path first.');\n+  }\n+};\n+\n+Refine.XmlParserUI.prototype.getOptions = function() {\n+    var options = {\n+        recordPath: this._config.recordPath\n+    };\n+    \n+    if (this._optionContainerElmts.limitCheckbox[0].checked) {\n+        options.limit = parseIntDefault(this._optionContainerElmts.limitInput[0].value, -1);\n+    } else {\n+        options.limit = -1;\n+    }\n+    options.includeFileSources = this._optionContainerElmts.includeFileSourcesCheckbox[0].checked;\n+    \n+    return options;\n+};\n+\n+Refine.XmlParserUI.prototype._initialize = function() {\n+    var self = this;\n+    \n+    this._optionContainer.unbind().empty().html(\n+        DOM.loadHTML(\"core\", \"scripts/index/parser-interfaces/xml-parser-ui.html\"));\n+    this._optionContainerElmts = DOM.bind(this._optionContainer);\n+    this._optionContainerElmts.previewButton.click(function() { self._updatePreview(); });\n+    \n+    if (this._config.limit > 0) {\n+        this._optionContainerElmts.limitCheckbox.attr(\"checked\", \"checked\");\n+        this._optionContainerElmts.limitInput[0].value = this._config.limit.toString();\n+    }\n+    if (this._config.includeFileSources) {\n+        this._optionContainerElmts.includeFileSourcesCheckbox.attr(\"checked\", \"checked\");\n+    }\n+    this._optionContainerElmts.pickRecordElementsButton.click(function() {\n+        self._showPickRecordElementsUI();\n+    });\n+    \n+    var onChange = function() {\n+        self._scheduleUpdatePreview();\n+    };\n+    this._optionContainer.find(\"input\").bind(\"change\", onChange);\n+    this._optionContainer.find(\"select\").bind(\"change\", onChange);\n+};\n+\n+Refine.XmlParserUI.prototype._showPickRecordElementsUI = function() {\n+    var self = this;\n+    \n+    this._dataContainer.unbind().empty().html(\n+        DOM.loadHTML(\"core\", \"scripts/index/parser-interfaces/xml-parser-select-ui.html\"));\n+    \n+    var elmts = DOM.bind(this._dataContainer);\n+    \n+    var escapeElmt = $('<span>');\n+    var escapeHtml = function(s) {\n+        escapeElmt.empty().text(s);\n+        return escapeElmt.html();\n+    };\n+    var textAsHtml = function(s) {\n+        s = s.length <= 200 ? s : (s.substring(0, 200) + ' ...');\n+        return '<span class=\"text\">' + escapeHtml(s) + '</span>';\n+    };\n+    var renderNode = function(node, container, parentPath) {\n+        if (node.t) {\n+            $('<div>').html(textAsHtml(node.t)).appendTo(container);\n+        } else {\n+            var qname = node.n;\n+            if (node.p) {\n+                qname = node.p + ':' + qname;\n+            }\n+            \n+            var t = qname;\n+            if (node.a) {\n+                t += ' ' + $.map(node.a, function(attr) {\n+                    return attr.n + '=\"' + attr.v + '\"';\n+                }).join(' ');\n+            }\n+            if (node.ns) {\n+                t += ' ' + $.map(node.ns, function(ns) {\n+                    return 'xmlns' + ((ns.p) ? (':' + ns.p) : '') + '=\"' + ns.uri + '\"';\n+                }).join(' ');\n+            }\n+            \n+            var path = [].concat(parentPath);\n+            path.push(qname);\n+            \n+            var div = $('<div>').addClass('elmt').appendTo(container);\n+            var hasSelectableChildren = false;\n+            var hotspot;\n+            if (node.c) {\n+                if (node.c.length == 1 && (node.c[0].t)) {\n+                    $('<span>').html('&lt;' + t + '&gt;' + textAsHtml(node.c[0].t) + '&lt;/' + qname + '&gt;').appendTo(div);\n+                } else {\n+                    $('<div>').text('<' + t + '>').appendTo(div);\n+\n+                    var divChildren = $('<div>').addClass('children').appendTo(div);\n+                    $.each(node.c, function() {\n+                        renderNode(this, divChildren, path);\n+                    });\n+\n+                    $('<div>').text('</' + qname + '>').appendTo(div);\n+                    hasSelectableChildren = true;\n+                }\n+            } else {\n+                $('<span>').text('<' + t + ' />').appendTo(div);\n+            }\n+            \n+            var hittest = function(evt) {\n+                if (hasSelectableChildren) {\n+                    if (evt.target !== div[0] &&\n+                        (evt.target.className == 'elmt' || evt.target.parentNode !== div[0])) {\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            };\n+            div.attr('title', '/' + path.join('/'))\n+                .bind('mouseover', function(evt) {\n+                    if (hittest(evt)) {\n+                        elmts.domContainer.find('.highlight').removeClass('highlight');\n+                        div.addClass('highlight');\n+                    }\n+                })\n+                .bind('mouseout', function(evt) {\n+                    div.removeClass('highlight');\n+                })\n+                .click(function(evt) {\n+                    if (hittest(evt)) {\n+                        self._setRecordPath(path);\n+                    }\n+                });\n+        }\n+    };\n+    renderNode(this._config.dom, elmts.domContainer, []);\n+};\n+\n+Refine.XmlParserUI.prototype._scheduleUpdatePreview = function() {\n+    if (this._timerID != null) {\n+        window.clearTimeout(this._timerID);\n+        this._timerID = null;\n+    }\n+    \n+    var self = this;\n+    this._timerID = window.setTimeout(function() {\n+        self._timerID = null;\n+        self._updatePreview();\n+    }, 500); // 0.5 second\n+};\n+\n+Refine.XmlParserUI.prototype._setRecordPath = function(path) {\n+    this._config.recordPath = path;\n+    this._updatePreview();\n+};\n+\n+Refine.XmlParserUI.prototype._updatePreview = function() {\n+    var self = this;\n+    \n+    this._progressContainer.show();\n+    \n+    var options = this.getOptions();\n+    // for preview, we need exact text, so it's easier to show where the columns are split\n+    options.guessCellValueTypes = false;\n+    \n+    this._controller.updateFormatAndOptions(options, function(result) {\n+        if (result.status == \"ok\") {\n+            self._controller.getPreviewData(function(projectData) {\n+                self._progressContainer.hide();\n+                \n+                new Refine.PreviewTable(projectData, self._dataContainer.unbind().empty());\n+            }, 20);\n+        }\n+    });\n+};"
        },
        {
            "sha": "f18e69c41f86b9ed417694089724ac1fc586adb5",
            "filename": "main/webapp/modules/core/scripts/util/dom.js",
            "status": "modified",
            "additions": 8,
            "deletions": 0,
            "changes": 8,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Futil%2Fdom.js",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Futil%2Fdom.js",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fscripts%2Futil%2Fdom.js?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -80,3 +80,11 @@ DOM.loadHTML = function(module, path) {\n     }\n     return DOM._loadedHTML[fullPath];\n };\n+\n+DOM.getHPaddings = function(elmt) {\n+    return elmt.outerWidth() - elmt.width();\n+};\n+\n+DOM.getVPaddings = function(elmt) {\n+    return elmt.outerHeight() - elmt.height();\n+};"
        },
        {
            "sha": "71516b5b12df8a9784e65f3aa1645d15c94b0769",
            "filename": "main/webapp/modules/core/styles/common.less",
            "status": "modified",
            "additions": 18,
            "deletions": 1,
            "changes": 19,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Fcommon.less",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Fcommon.less",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Fcommon.less?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -299,6 +299,16 @@ input[type=\"checkbox\"], input[type=\"radio\"], select {\n input.inline {\n   vertical-align: middle;\n   }\n+input[type='text'].inline {\n+  vertical-align: baseline;\n+  }\n+input.lightweight {\n+  vertical-align: baseline;\n+  border: none;\n+  border-bottom: 1px solid @faint_grey;\n+  background-color: @fainter_grey;\n+  padding: 0px 2px 1px 2px;\n+  }\n \n \n div.grid-layout > table {\n@@ -402,4 +412,11 @@ img {\n \n p.body-text {\n   margin-bottom: 1em;\n-}\n\\ No newline at end of file\n+}\n+\n+.relative-frame {\n+  position: relative;\n+  width: 100%;\n+  height: 100%;\n+  overflow: hidden;\n+}"
        },
        {
            "sha": "cf2cb8afc4ff4ddaa09e7761abac4b2a07c39b28",
            "filename": "main/webapp/modules/core/styles/index.less",
            "status": "modified",
            "additions": 55,
            "deletions": 199,
            "changes": 254,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex.less",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex.less",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex.less?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -33,229 +33,85 @@ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n \n @import-less url(\"theme.less\");\n \n-#container { \n-  width: 980px; \n-  height: 600px;\n-  margin: 10px auto;\n-  padding: 0 10px;\n-  position: relative;\n-  }\n-  \n-#logo {\n-  position: absolute;\n-  top: 20px;\n-  right: 0px;\n-  width: 150px;\n-  height: 150px;\n-  background: url(../images/logo-gem-150.png) no-repeat top right; \n+.main-layout-panel {\n+  position: fixed;\n+  margin: 0;\n+  padding: 0;\n+  overflow: hidden;\n+  visibility: hidden;\n }\n-  \n-#header-home img { \n-  padding: 6px 0; \n-  }\n-  \n-#content-home { \n-  position: relative;\n-  margin: 20px 0;\n-  }\n-\n-#project-open, #project-create, #project-links {\n-  position: absolute;\n-  top: 0;\n-  }\n-  \n-#project-open {\n-  left: 0;\n-  width: 330px;\n-  }\n \n-#projects-container {\n-  border-top: 1px solid @chrome_primary;\n-  background: #fff;\n-  overflow: auto;\n-  height: 378px;\n-  }\n-  \n-#projects-container .project .last-modified {\n-  white-space: nowrap;\n+#left-panel {\n }\n \n-#projects-container .message {\n-  padding: @padding_loose;\n-  font-size: 170%;\n-  line-height: 1.5em;\n-  opacity: 0.2;\n+#left-panel-body {\n+  margin-left: @padding_tight;\n+  overflow: hidden;\n+  position: relative;\n   }\n \n-#project-create {\n-  left: 350px;\n-  width: 430px;\n-  }\n-  \n-.content-block-footer {\n-  background: #f2f2f2;\n-  padding: @padding_tight;\n-  font-size: 1.1em;\n-  .rounded_corners_bottom(4px);  \n-  }\n+#action-area-tabs {\n+  margin: 0;\n+  padding: 0;\n+  padding-top: @padding_looser;\n+  font-size: 1.3em;\n+}\n+#action-area-tabs > li {\n+  display: block;\n+  padding-top: @padding_tight;\n+  padding-bottom: @padding_tight;\n+  padding-left: @padding_normal;\n+  cursor: pointer;\n+}\n+#action-area-tabs > li.selected {\n+  background: @chrome_primary;\n+  .rounded_corners_left();\n+}\n \n #project-links {\n-  top: 110px;\n-  left: 810px;\n-  width: 150px;\n   font-size: 1.3em;\n+  position: absolute;\n+  bottom: 0;\n+  left: 0;\n+  width: 100%;\n+  text-align: center;\n   }\n \n-#project-links li {\n-  padding: @padding_tight 0;\n-  }\n-\n-#google-refine-version {\n-  margin: 30px 0 0 0;\n-  color: @metadata_grey;\n+#logo-container {\n+  margin: 2em 0;\n   }\n-  \n-#project-open, #project-create { \n-  background: @fill_primary;\n-  border: 1px solid @chrome_primary;\n-  .rounded_corners;\n-  } \n \n-#project-open h1, #project-create h1 { \n-  padding: @padding_loose;\n-  } \n-\n-.project-create-basic {\n-  border-top: 1px solid @chrome_primary;\n-  padding: @padding_loose;\n-  background: #fff;\n+#project-links > ul {\n+  padding: 0;\n+  margin: 1em 0;\n+  line-height: 1.5em;\n   }\n \n-.project-create-basic p {\n-  font-size: 1.3em;\n-  padding: 0 0 @padding_normal 0;\n+#project-links > ul > li {\n+  display: block;\n   }\n \n-.project-create-advanced {\n-  position: relative;\n-  padding: @padding_loose 200px 48px @padding_loose;\n-  background: @fill_secondary;\n+#google-refine-version {\n+  margin: @padding_normal 0 0 0;\n   color: @metadata_grey;\n-  .rounded_corners_bottom(4px);\n-  }\n-  \n-#project-create-parsetext {\n-  position: absolute;\n-  width: 200px;\n-  top: 25px;\n-  left: 210px;\n+  font-size: 80%;\n   }\n \n-.project-create-option {\n-  padding: @padding_normal;\n-  font-size: 1.3em;\n+#right-panel {\n+  background: @chrome_primary;\n   }\n \n-.project-create-suboption {\n-  padding: @padding_tight 0;\n-  font-size: 0.85em;\n+#right-panel-body {\n+  overflow: auto;\n+  position: relative;\n   }\n \n-#project-toggle { \n+.action-area-tab-body {\n+  visibility: hidden;\n   position: absolute;\n-  top: 12px;\n-  right: 10px;\n-  }\n-\n-#import-panel {\n-  font-size: 1.3em;\n-}\n-\n-#import-panel-message {\n-  padding: @padding_loose;\n-}\n-\n-#import-panel-layout {\n-  width: 100%;\n-  border-collapse: collapse;\n-}\n-#import-panel-layout > tbody > tr > td {\n-  border-top: 1px solid @chrome_primary;\n-  border-bottom: 1px solid @chrome_primary;\n-}\n-\n-#import-panel-tab-bodies {\n-  background: white;\n-}\n-\n-#import-panel-tab-headers {\n-  width: 15em;\n-  background: @fill_primary;\n-  border-right: 1px solid @chrome_primary;\n-  padding-left: @padding_normal;\n-  padding-bottom: @padding_looser;\n-}\n-#import-panel-tab-headers > div {\n-  padding: @padding_tight;\n-  padding-right: @padding_normal;\n-}\n-\n-.import-panel-tab-body {\n-  padding: @padding_loose;\n-}\n-\n-.import-panel-tab-header {\n-  cursor: pointer;\n-  color: @link_primary;\n-}\n-.import-panel-tab-header.selected {\n-  cursor: default;\n-  color: black;\n   background: white;\n-  font-weight: bold;\n-  position: relative;\n-  left: 1px;\n-  border: 1px solid @chrome_primary;\n-  border-right: none;\n-}\n-\n-#import-progress-panel {\n-  display: none;\n-  font-size: 1.3em;\n-  padding: @padding_loose;\n-  background: white;\n-}\n-\n-#import-progress-bar-frame {\n-  border: 1px solid @chrome_primary;\n-  padding: @padding_tighter;\n-}\n-\n-#import-progress-bar-body {\n-  background: @chrome_primary;\n-  height: 1em;\n-  position: relative;\n-  width: 30%;\n-}\n-\n-#import-iframe {\n-  position: fixed;\n-  width: 200px;\n-  height: 200px;\n-  left: -300px;\n-  top: -300px;\n-}\n-\n-#import-error-panel {\n-  display: none;\n-  font-size: 1.3em;\n-  padding: @padding_loose;\n-}\n-#import-error-message {\n+  top: 0;\n+  left: 0;\n+  width: 100%;\n+  height: 100%;\n }\n-#import-error-stack {\n-  font-family: monospace;\n-  whitespace: pre;\n-  padding: @padding_normal;\n-  border: 1px solid @chrome_primary;\n-}\n\\ No newline at end of file"
        },
        {
            "sha": "d8b8ebbb26f89c4c109f33fed4085a29e7ce5902",
            "filename": "main/webapp/modules/core/styles/index/create-project-ui.less",
            "status": "added",
            "additions": 98,
            "deletions": 0,
            "changes": 98,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Fcreate-project-ui.less",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Fcreate-project-ui.less",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Fcreate-project-ui.less?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,98 @@\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+@import-less url(\"../theme.less\");\n+\n+#project-create {\n+  }\n+\n+#create-project-ui-source-selection {\n+  font-size: 1.3em;\n+  background: white;\n+  }\n+\n+#create-project-ui-source-selection-message {\n+  padding: @padding_loose;\n+  border-bottom: 1px solid @chrome_primary;\n+  background: white;\n+  }\n+#create-project-ui-source-selection-message > h3 {\n+  margin-bottom: @padding_normal;\n+}\n+\n+#create-project-ui-source-selection-layout {\n+  width: 100%;\n+  border-collapse: collapse;\n+  border-bottom: 1px solid @chrome_primary;\n+  }\n+\n+#create-project-ui-source-selection-tab-bodies {\n+  background: white;\n+  .rounded_corners_left();\n+  }\n+\n+#create-project-ui-source-selection-tabs {\n+  width: 15em;\n+  background: @fill_primary;\n+  padding-left: @padding_looser;\n+  padding-bottom: @padding_looser;\n+  }\n+#create-project-ui-source-selection-tabs > div {\n+  padding: @padding_normal;\n+  }\n+\n+.create-project-ui-source-selection-tab-body {\n+  padding: @padding_loose;\n+  }\n+\n+.create-project-ui-source-selection-tab {\n+  cursor: pointer;\n+  color: @link_primary;\n+  }\n+.create-project-ui-source-selection-tab.selected {\n+  cursor: default;\n+  color: black;\n+  background: white;\n+  font-weight: bold;\n+  .rounded_corners_left();\n+  }\n+\n+.create-project-ui-panel {\n+  background: white;\n+  position: absolute;\n+  left: 0;\n+  top: 0;\n+  width: 100%;\n+  height: 100%;\n+  visibility: hidden;\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "8f3e317c8533ce060d75fa25af16f578cf38e70a",
            "filename": "main/webapp/modules/core/styles/index/default-importing-controller.less",
            "status": "renamed",
            "additions": 53,
            "deletions": 31,
            "changes": 84,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Fdefault-importing-controller.less",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Fdefault-importing-controller.less",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Fdefault-importing-controller.less?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -1,5 +1,4 @@\n-<!doctype html>\n-<!--\n+/*\n \n Copyright 2011, Google Inc.\n All rights reserved.\n@@ -30,32 +29,55 @@ THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n \n--->\n-<html lang=\"en\">\n-  <head>\n-    <meta charset=\"utf-8\">\n-    <title>Google Refine</title>\n-    <script type=\"text/javascript\" src=\"wirings.js\"></script>\n-    <link rel=\"icon\" type=\"image/png\" href=\"images/favicon.png\">\n-    $scriptInjection\n-    $styleInjection\n-  </head>\n-  <body>\n-    <div id=\"header\">\n-      <a id=\"app-home-button\" href=\"./\"><img alt=\"Google Refine\" src=\"images/logo-googlerefine-30.png\" width=\"129\" height=\"29\" /></a>\n-      <div id=\"project-title\">\n-        Project Name: <span id=\"project-name-button\" class=\"app-path-section\" title=\"Click to rename project\">Untitled</span>\n-      </div>\n-    </div>\n-    \n-    <div id=\"body\">\n-      <div bind=\"topPanelDiv\" id=\"top-panel\">\n-        <h1>Preview</h1>\n-      </div>\n-      <div bind=\"middlePanelDiv\" id=\"middle-panel\">\n-      </div>\n-      <div bind=\"bottomPanelDiv\" id=\"bottom-panel\">\n-      </div>\n-    </div>\n-  </body>\n-</html>\n+*/\n+\n+@import-less url(\"../theme.less\");\n+\n+#default-importing-progress-panel {\n+  font-size: 1.3em;\n+  padding: @padding_loose;\n+}\n+\n+#default-importing-progress-bar-frame {\n+  border: 1px solid @chrome_primary;\n+  padding: @padding_tighter;\n+  width: 300px;\n+}\n+\n+#default-importing-progress-bar-body {\n+  background: @chrome_primary;\n+  height: 1em;\n+  position: relative;\n+  width: 30%;\n+}\n+#default-importing-progress-bar-body.indefinite {\n+  background: #eee;\n+  width: 100%;\n+}\n+\n+#default-importing-iframe {\n+  position: fixed;\n+  width: 200px;\n+  height: 200px;\n+  left: -300px;\n+  top: -300px;\n+}\n+\n+#default-importing-error-panel {\n+  font-size: 1.3em;\n+  padding: @padding_loose;\n+}\n+#default-importing-error-message {\n+}\n+#default-importing-error-stack {\n+  font-family: monospace;\n+  whitespace: pre;\n+  padding: @padding_normal;\n+  border: 1px solid @chrome_primary;\n+}\n+\n+.default-importing-wizard-header {\n+  font-size: 1.3em;\n+  background: @chrome_primary;\n+  padding: @padding_tight;\n+}",
            "previous_filename": "main/webapp/modules/core/import.vt"
        },
        {
            "sha": "8a7a44dd00e4b81f18273923f578995217c71668",
            "filename": "main/webapp/modules/core/styles/index/default-importing-file-selection-panel.less",
            "status": "renamed",
            "additions": 32,
            "deletions": 41,
            "changes": 73,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Fdefault-importing-file-selection-panel.less",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Fdefault-importing-file-selection-panel.less",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Fdefault-importing-file-selection-panel.less?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -31,52 +31,43 @@ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n \n */\n \n-var ImportSources = [];\n+@import-less url(\"../theme.less\");\n \n-function ThisComputerImportSourceUI(bodyDiv) {\n-  bodyDiv.html(DOM.loadHTML(\"core\", \"scripts/index/import-from-computer-form.html\"));\n-  \n-  var elmts = DOM.bind(bodyDiv);\n-  elmts.nextButton.click(function(evt) {\n-    if (elmts.fileInput[0].files.length === 0) {\n-      window.alert(\"You must specify a data file to import.\");\n-    } else {\n-      elmts.nameInput[0].value = elmts.fileInput[0].files[0].fileName\n-        .replace(/\\.\\w+/, \"\").replace(/[_-]/g, \" \");\n-      \n-      startImportJob(\"file-upload\", elmts.form, \"Uploading data file ...\");\n-    }\n-  });\n+.default-importing-file-selection-control-panel {\n+  font-size: 1.3em;\n+  position: absolute;\n+  background: @chrome_secondary;\n+  padding: @padding_looser;\n }\n-ImportSources.push({\n-  \"label\" : \"This Computer\",\n-  \"ui\" : ThisComputerImportSourceUI\n-});\n-\n-ThisComputerImportSourceUI.prototype.focus = function() {\n-  \n+.default-importing-file-selection-file-panel {\n+  font-size: 1.3em;\n+  position: absolute;\n+  background: white;\n+  overflow: auto;\n }\n-\n-function UrlImportSourceUI(bodyDiv) {\n-  \n+.default-importing-file-selection-file-panel > table {\n+  border-collapse: collapse;\n+  width: 100%;\n }\n-ImportSources.push({\n-  \"label\" : \"Web Address (URL)\",\n-  \"ui\" : UrlImportSourceUI\n-});\n-\n-UrlImportSourceUI.prototype.focus = function() {\n-  \n+.default-importing-file-selection-file-panel > table > tbody > tr > td,\n+.default-importing-file-selection-file-panel > table > tbody > tr > th {\n+  padding: @padding_tight @padding_normal;\n+}\n+.default-importing-file-selection-file-panel > table > tbody > tr > th {\n+  text-align: left;\n+  background: @faint_grey;\n+}\n+.default-importing-file-selection-file-panel > table > tbody > tr.odd {\n+  background: @fainter_grey;\n }\n \n-function ClipboardImportSourceUI(bodyDiv) {\n-  \n+.default-importing-file-selection-control-panel h2 {\n+  font-size: 110%;\n+  margin-top: 3em;\n+  margin-bottom: 0.75em;\n }\n-ImportSources.push({\n-  \"label\" : \"Clipboard\",\n-  \"ui\" : ClipboardImportSourceUI\n-});\n \n-ClipboardImportSourceUI.prototype.focus = function() {\n-  \n-}\n\\ No newline at end of file\n+.default-importing-file-selection-file-panel > table > tbody > tr >\n+td.default-importing-file-selection-filename.highlighted {\n+  background: #fffee0;\n+}",
            "previous_filename": "main/webapp/modules/core/scripts/index/import-sources.js"
        },
        {
            "sha": "e5724b80e5560dc5b59bd4a57a0337b03fdb116c",
            "filename": "main/webapp/modules/core/styles/index/default-importing-parsing-panel.less",
            "status": "added",
            "additions": 92,
            "deletions": 0,
            "changes": 92,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Fdefault-importing-parsing-panel.less",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Fdefault-importing-parsing-panel.less",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Fdefault-importing-parsing-panel.less?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,92 @@\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+@import-less url(\"../theme.less\");\n+\n+.default-importing-parsing-data-panel {\n+  font-size: 1.1em;\n+  position: absolute;\n+  overflow: auto;\n+}\n+\n+.default-importing-progress-data-panel {\n+  position: absolute;\n+  overflow: auto;\n+  font-size: 200%;\n+  padding: 3em;\n+  background: rgba(255, 255, 255, 0.7);\n+  text-align: center;\n+}\n+\n+.default-importing-parsing-control-panel {\n+  font-size: 1.3em;\n+  position: absolute;\n+  overflow: auto;\n+  border-top: 5px solid @chrome_primary;\n+  background: @chrome_secondary;\n+}\n+.default-importing-parsing-control-panel > table {\n+  width: 100%;\n+  border-collapse: collapse;\n+}\n+\n+td.default-importing-parsing-control-panel-formats {\n+  padding: @padding_looser 0;\n+  width: 250px;\n+}\n+\n+.default-importing-parsing-control-panel-formats-message {\n+  margin-left: @padding_looser;\n+  margin-bottom: @padding_looser;\n+  padding: 0 @padding_normal;\n+  font-size: 1.3em;\n+}\n+.default-importing-parsing-control-panel-format {\n+  margin-left: @padding_looser;\n+  padding: @padding_tight @padding_normal;\n+  .rounded_corners_left();\n+  color: @link_primary;\n+  cursor: pointer;\n+}\n+\n+.default-importing-parsing-control-panel-format.selected {\n+  background: white;\n+  font-weight: bold;\n+  color: black;\n+}\n+\n+td.default-importing-parsing-control-panel-options-panel {\n+  background: white;\n+  padding: @padding_looser;\n+  .rounded_corners_left();\n+}"
        },
        {
            "sha": "2237c5811619d6f48c0193bf806a391414078cb3",
            "filename": "main/webapp/modules/core/styles/index/default-importing-sources.less",
            "status": "renamed",
            "additions": 9,
            "deletions": 11,
            "changes": 20,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Fdefault-importing-sources.less",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Fdefault-importing-sources.less",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Fdefault-importing-sources.less?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -1,6 +1,6 @@\n /*\n \n-Copyright 2010, Google Inc.\n+Copyright 2011, Google Inc.\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without\n@@ -31,15 +31,13 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \n */\n \n-package com.google.refine.importers.parsers;\n+@import-less url(\"../theme.less\");\n \n-import java.io.LineNumberReader;\n-import java.util.List;\n-\n-import com.google.refine.model.Row;\n-\n-public abstract class RowParser {\n-    public abstract List<String> split(String line, LineNumberReader lineReader);\n-    \n-    public abstract boolean parseRow(Row row, String line, boolean guessValueType, LineNumberReader lineReader);\n+.default-importing-web-url {\n+  width: 60em;\n }\n+\n+#default-importing-clipboard-textarea {\n+  width: 50em;\n+  height: 30em;\n+}\n\\ No newline at end of file",
            "previous_filename": "main/src/com/google/refine/importers/parsers/RowParser.java"
        },
        {
            "sha": "87be58619d2e8138cdb55c1a3396ab655029c408",
            "filename": "main/webapp/modules/core/styles/index/fixed-width-parser-ui.less",
            "status": "added",
            "additions": 90,
            "deletions": 0,
            "changes": 90,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Ffixed-width-parser-ui.less",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Ffixed-width-parser-ui.less",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Ffixed-width-parser-ui.less?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,90 @@\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+@import-less url(\"../theme.less\");\n+\n+.fixed-width-preview-container {\n+  position: relative;\n+  font-family: monospace;\n+  font-size: 150%;\n+}\n+\n+table.data-table.fixed-width-preview-data-table {\n+  font-size: inherit;\n+}\n+table.data-table.fixed-width-preview-data-table > tbody > tr {\n+  border-bottom: 1px solid #ccc;\n+}\n+\n+table.data-table.fixed-width-preview-data-table > tbody > tr > td.column-header {\n+  background: none;\n+}\n+\n+table.data-table.fixed-width-preview-data-table > tbody > tr > td,\n+table.data-table.fixed-width-preview-data-table > tbody > tr > td.column-header {\n+  border: none;\n+  padding: 2px 0px;\n+  white-space: pre;\n+}\n+table.data-table.fixed-width-preview-data-table > tbody > tr > td.even,\n+table.data-table.fixed-width-preview-data-table > tbody > tr > td.column-header.even {\n+  background: #eee;\n+}\n+\n+.fixed-width-preview-column-separator-outer {\n+  position: absolute;\n+  top: 0px;\n+  height: 100%;\n+  z-index: 100;\n+  background: rgba(255,238,93,0.2);\n+  padding: 0px 3px;\n+  cursor: ew-resize;\n+  overflow: visible;\n+}\n+.fixed-width-preview-column-separator-inner {\n+  position: relative;\n+  height: 100%;\n+  width: 1px;\n+  background: red;\n+  overflow: visible;\n+}\n+.fixed-width-preview-column-separator-inner > div {\n+  position: absolute;\n+  top: 50px;\n+  left: -7px;\n+  border: 1px solid red;\n+  background: #fffee0 url(../../images/close.png) no-repeat center center;\n+  width: 13px;\n+  height: 13px;\n+  cursor: pointer;\n+}"
        },
        {
            "sha": "747fbe4929667290a4eed485fe72ee6d4508de7c",
            "filename": "main/webapp/modules/core/styles/index/import-project-ui.less",
            "status": "added",
            "additions": 39,
            "deletions": 0,
            "changes": 39,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Fimport-project-ui.less",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Fimport-project-ui.less",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Fimport-project-ui.less?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,39 @@\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+@import-less url(\"../theme.less\");\n+\n+#project-upload-form {\n+  padding: @padding_loose;\n+  font-size: 1.3em;\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "b7cac3feee8efa11a65f9a164baafb7783bcc25e",
            "filename": "main/webapp/modules/core/styles/index/json-parser-ui.less",
            "status": "added",
            "additions": 82,
            "deletions": 0,
            "changes": 82,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Fjson-parser-ui.less",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Fjson-parser-ui.less",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Fjson-parser-ui.less?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -0,0 +1,82 @@\n+/*\n+\n+Copyright 2011, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+@import-less url(\"../theme.less\");\n+\n+.json-parser-ui-select-message {\n+  background: #eee;\n+  font-size: 130%;\n+  color: #666;\n+  padding: 20px;\n+}\n+\n+.json-parser-ui-select-dom {\n+  padding: 20px;\n+  font-family: monospace;\n+  font-size: 130%;\n+}\n+\n+.json-parser-ui-select-dom .node {\n+  cursor: pointer;\n+  padding: 2px;\n+  border: 1px solid rgba(0,0,0,0);\n+}\n+\n+.json-parser-ui-select-dom .indented {\n+  margin-left: 2em;\n+}\n+\n+.json-parser-ui-select-dom .field-name {\n+  font-weight: bold;\n+}\n+\n+.json-parser-ui-select-dom .delimiter {\n+  color: blue;\n+}\n+\n+.json-parser-ui-select-dom .punctuation {\n+  color: #aaa;\n+}\n+\n+.json-parser-ui-select-dom .literal {\n+  color: #888;\n+}\n+\n+.json-parser-ui-select-dom .children {\n+  margin-left: 20px;\n+}\n+\n+.json-parser-ui-select-dom .node.highlight {\n+  background: #fffee0;\n+  border: 1px dashed red;\n+}"
        },
        {
            "sha": "9b6d7a0b8974da40cc4cb2b08707028ccb7d99aa",
            "filename": "main/webapp/modules/core/styles/index/open-project-ui.less",
            "status": "renamed",
            "additions": 23,
            "deletions": 34,
            "changes": 57,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Fopen-project-ui.less",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Fopen-project-ui.less",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Fopen-project-ui.less?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -31,47 +31,36 @@ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n \n */\n \n-@import-less url(\"theme.less\");\n+@import-less url(\"../theme.less\");\n \n-#project-title {\n-  position: absolute;\n-  top: 0;\n-  left: 140px;\n-  height: 40px;\n-  padding: 4px 0 0 0;\n-  font-size: 1.6em;\n+#project-open {\n   }\n \n-#project-name-button {\n-  padding: 3px;\n-  background: @fill_editable;\n-  border: 1px solid #ccc;\n-  border-top: 1px solid #aaa;\n+#projects-container {\n+  background: #fff;\n+  overflow: auto;\n+  position: absolute;\n+  top: 0px;\n+  left: 0px;\n+  width: 100%;\n   }\n \n-#project-name-button:hover {\n-  }\n-  \n-#body {\n-  position: relative;\n-  margin: @padding_loose;\n+#projects-workspace-controls {\n+  position: absolute;\n+  padding: @padding_normal;\n   background: @fill_primary;\n-  border: 1px solid @chrome_primary;\n-  border-radius: @padding_tight;\n-  }\n-\n-#top-panel {\n-  padding: @padding_loose;\n-  }\n-  \n-#middle-panel {\n   border-top: 1px solid @chrome_primary;\n-  border-bottom: 1px solid @chrome_primary;\n-  background: white;\n-  height: 200px;\n-  overflow: auto;\n+  font-size: 1.3em;\n   }\n   \n-#bottom-panel {\n-  height: 200px;\n+#projects-container .project .last-modified {\n+  white-space: nowrap;\n+}\n+\n+#projects-container .message {\n+  padding: @padding_loose;\n+  font-size: 170%;\n+  line-height: 1.5em;\n+  opacity: 0.2;\n   }\n+",
            "previous_filename": "main/webapp/modules/core/styles/import.less"
        },
        {
            "sha": "c4f19f2bc5d26ed623ecc9678c796b8be28a1c49",
            "filename": "main/webapp/modules/core/styles/index/xml-parser-ui.less",
            "status": "renamed",
            "additions": 27,
            "deletions": 9,
            "changes": 36,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Fxml-parser-ui.less",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Fxml-parser-ui.less",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Findex%2Fxml-parser-ui.less?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -1,6 +1,6 @@\n /*\n \n-Copyright 2010, Google Inc.\n+Copyright 2011, Google Inc.\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without\n@@ -31,18 +31,36 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \n */\n \n-package com.google.refine.importers;\n+@import-less url(\"../theme.less\");\n \n-import java.net.URL;\n-import java.util.Properties;\n+.xml-parser-ui-select-message {\n+  background: #eee;\n+  font-size: 150%;\n+  color: #666;\n+  padding: 20px;\n+}\n \n-import com.google.refine.ProjectMetadata;\n-import com.google.refine.model.Project;\n+.xml-parser-ui-select-dom {\n+  padding: 20px;\n+  font-family: monospace;\n+  font-size: 150%;\n+}\n \n-public interface UrlImporter extends Importer {\n+.xml-parser-ui-select-dom .elmt {\n+  cursor: pointer;\n+  padding: 2px;\n+  border: 1px solid rgba(0,0,0,0);\n+}\n \n-    public void read(URL url, Project project, ProjectMetadata metadata, Properties options) throws Exception;\n+.xml-parser-ui-select-dom .text {\n+  color: #888;\n+}\n \n-    public boolean canImportData(URL url);\n+.xml-parser-ui-select-dom .children {\n+  margin-left: 20px;\n+}\n \n+.xml-parser-ui-select-dom .elmt.highlight {\n+  background: #fffee0;\n+  border: 1px dashed red;\n }",
            "previous_filename": "main/src/com/google/refine/importers/UrlImporter.java"
        },
        {
            "sha": "2121ea63ade39fc28571d28a7130d5f83bc492c2",
            "filename": "main/webapp/modules/core/styles/theme.less",
            "status": "modified",
            "additions": 18,
            "deletions": 0,
            "changes": 18,
            "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Ftheme.less",
            "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/78edff6f7f410bb53c03e67f7f90a6d3521cee7f/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Ftheme.less",
            "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fwebapp%2Fmodules%2Fcore%2Fstyles%2Ftheme.less?ref=78edff6f7f410bb53c03e67f7f90a6d3521cee7f",
            "patch": "@@ -81,6 +81,24 @@ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   border-bottom-left-radius: @radius;\n   }\n \n+.rounded_corners_left (@radius: 5px) { \n+  -webkit-border-top-left-radius: @radius;\n+  -webkit-border-bottom-left-radius: @radius;\n+  -moz-border-radius-topleft: @radius;\n+  -moz-border-radius-bottomleft: @radius;\n+  border-top-left-radius: @radius;\n+  border-bottom-left-radius: @radius;\n+  }\n+\n+.rounded_corners_right (@radius: 5px) { \n+  -webkit-border-top-right-radius: @radius;\n+  -webkit-border-bottom-right-radius: @radius;\n+  -moz-border-radius-topright: @radius;\n+  -moz-border-radius-bottomright: @radius;\n+  border-top-right-radius: @radius;\n+  border-bottom-right-radius: @radius;\n+  }\n+\n .sharp_corners_left () {\n   -webkit-border-top-right-radius: 0;\n   -webkit-border-bottom-right-radius: 0;"
        }
    ]
}