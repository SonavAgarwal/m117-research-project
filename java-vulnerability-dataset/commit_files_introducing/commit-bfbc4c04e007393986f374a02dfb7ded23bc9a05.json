{
    "sha": "bfbc4c04e007393986f374a02dfb7ded23bc9a05",
    "node_id": "MDY6Q29tbWl0MTU5Mjg2NTA6YmZiYzRjMDRlMDA3MzkzOTg2ZjM3NGEwMmRmYjdkZWQyM2JjOWEwNQ==",
    "commit": {
        "author": {
            "name": "Lukasz Lenart",
            "email": "lukaszlenart@apache.org",
            "date": "2014-05-13T18:29:21Z"
        },
        "committer": {
            "name": "Lukasz Lenart",
            "email": "lukaszlenart@apache.org",
            "date": "2014-05-13T18:29:21Z"
        },
        "message": "Extracts interface to simplify implementation by users",
        "tree": {
            "sha": "20a4e16e868323409f2eb2a6d992ff9b47a1cd6b",
            "url": "https://api.github.com/repos/apache/struts/git/trees/20a4e16e868323409f2eb2a6d992ff9b47a1cd6b"
        },
        "url": "https://api.github.com/repos/apache/struts/git/commits/bfbc4c04e007393986f374a02dfb7ded23bc9a05",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/struts/commits/bfbc4c04e007393986f374a02dfb7ded23bc9a05",
    "html_url": "https://github.com/apache/struts/commit/bfbc4c04e007393986f374a02dfb7ded23bc9a05",
    "comments_url": "https://api.github.com/repos/apache/struts/commits/bfbc4c04e007393986f374a02dfb7ded23bc9a05/comments",
    "author": {
        "login": "lukaszlenart",
        "id": 170103,
        "node_id": "MDQ6VXNlcjE3MDEwMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/170103?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukaszlenart",
        "html_url": "https://github.com/lukaszlenart",
        "followers_url": "https://api.github.com/users/lukaszlenart/followers",
        "following_url": "https://api.github.com/users/lukaszlenart/following{/other_user}",
        "gists_url": "https://api.github.com/users/lukaszlenart/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/lukaszlenart/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lukaszlenart/subscriptions",
        "organizations_url": "https://api.github.com/users/lukaszlenart/orgs",
        "repos_url": "https://api.github.com/users/lukaszlenart/repos",
        "events_url": "https://api.github.com/users/lukaszlenart/events{/privacy}",
        "received_events_url": "https://api.github.com/users/lukaszlenart/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "lukaszlenart",
        "id": 170103,
        "node_id": "MDQ6VXNlcjE3MDEwMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/170103?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukaszlenart",
        "html_url": "https://github.com/lukaszlenart",
        "followers_url": "https://api.github.com/users/lukaszlenart/followers",
        "following_url": "https://api.github.com/users/lukaszlenart/following{/other_user}",
        "gists_url": "https://api.github.com/users/lukaszlenart/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/lukaszlenart/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lukaszlenart/subscriptions",
        "organizations_url": "https://api.github.com/users/lukaszlenart/orgs",
        "repos_url": "https://api.github.com/users/lukaszlenart/repos",
        "events_url": "https://api.github.com/users/lukaszlenart/events{/privacy}",
        "received_events_url": "https://api.github.com/users/lukaszlenart/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "ba1850a1382765eb51c58103a8c5ee7c0d9417f4",
            "url": "https://api.github.com/repos/apache/struts/commits/ba1850a1382765eb51c58103a8c5ee7c0d9417f4",
            "html_url": "https://github.com/apache/struts/commit/ba1850a1382765eb51c58103a8c5ee7c0d9417f4"
        }
    ],
    "stats": {
        "total": 207,
        "additions": 106,
        "deletions": 101
    },
    "files": [
        {
            "sha": "f2fb9222faf145f77f2f0e6596ae3c508ec5cf63",
            "filename": "core/src/main/resources/struts-default.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/apache/struts/blob/bfbc4c04e007393986f374a02dfb7ded23bc9a05/core%2Fsrc%2Fmain%2Fresources%2Fstruts-default.xml",
            "raw_url": "https://github.com/apache/struts/raw/bfbc4c04e007393986f374a02dfb7ded23bc9a05/core%2Fsrc%2Fmain%2Fresources%2Fstruts-default.xml",
            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fresources%2Fstruts-default.xml?ref=bfbc4c04e007393986f374a02dfb7ded23bc9a05",
            "patch": "@@ -144,7 +144,7 @@\n     <bean type=\"ognl.PropertyAccessor\" name=\"java.util.HashSet\" class=\"com.opensymphony.xwork2.ognl.accessor.XWorkCollectionPropertyAccessor\" />\n     <bean type=\"ognl.PropertyAccessor\" name=\"java.util.HashMap\" class=\"com.opensymphony.xwork2.ognl.accessor.XWorkMapPropertyAccessor\" />\n \n-    <bean type=\"com.opensymphony.xwork2.ExcludedPatternsChecker\" name=\"struts\" class=\"com.opensymphony.xwork2.ExcludedPatternsChecker\" scope=\"request\"/>\n+    <bean type=\"com.opensymphony.xwork2.ExcludedPatternsChecker\" name=\"struts\" class=\"com.opensymphony.xwork2.DefaultExcludedPatternsChecker\" scope=\"request\"/>\n \n     <constant name=\"struts.excludedPatterns.checker\" value=\"struts\"/>\n "
        },
        {
            "sha": "1f642f59844311098d7c9e0cd5387360c45bf650",
            "filename": "core/src/test/java/org/apache/struts2/interceptor/CookieInterceptorTest.java",
            "status": "modified",
            "additions": 10,
            "deletions": 10,
            "changes": 20,
            "blob_url": "https://github.com/apache/struts/blob/bfbc4c04e007393986f374a02dfb7ded23bc9a05/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FCookieInterceptorTest.java",
            "raw_url": "https://github.com/apache/struts/raw/bfbc4c04e007393986f374a02dfb7ded23bc9a05/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FCookieInterceptorTest.java",
            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FCookieInterceptorTest.java?ref=bfbc4c04e007393986f374a02dfb7ded23bc9a05",
            "patch": "@@ -27,7 +27,7 @@\n \n import javax.servlet.http.Cookie;\n \n-import com.opensymphony.xwork2.ExcludedPatternsChecker;\n+import com.opensymphony.xwork2.DefaultExcludedPatternsChecker;\n import com.opensymphony.xwork2.mock.MockActionInvocation;\n import org.easymock.MockControl;\n import org.springframework.mock.web.MockHttpServletRequest;\n@@ -66,7 +66,7 @@ public void testIntercepDefault() throws Exception {\n \n         // by default the interceptor doesn't accept any cookies\n         CookieInterceptor interceptor = new CookieInterceptor();\n-        interceptor.setExcludedPatternsChecker(new ExcludedPatternsChecker());\n+        interceptor.setExcludedPatternsChecker(new DefaultExcludedPatternsChecker());\n \n         interceptor.intercept(invocation);\n \n@@ -102,7 +102,7 @@ public void testInterceptAll1() throws Exception {\n         actionInvocationControl.replay();\n \n         CookieInterceptor interceptor = new CookieInterceptor();\n-        interceptor.setExcludedPatternsChecker(new ExcludedPatternsChecker());\n+        interceptor.setExcludedPatternsChecker(new DefaultExcludedPatternsChecker());\n         interceptor.setCookiesName(\"*\");\n         interceptor.setCookiesValue(\"*\");\n         interceptor.intercept(invocation);\n@@ -144,7 +144,7 @@ public void testInterceptAll2() throws Exception {\n         actionInvocationControl.replay();\n \n         CookieInterceptor interceptor = new CookieInterceptor();\n-        interceptor.setExcludedPatternsChecker(new ExcludedPatternsChecker());\n+        interceptor.setExcludedPatternsChecker(new DefaultExcludedPatternsChecker());\n         interceptor.setCookiesName(\"cookie1, cookie2, cookie3\");\n         interceptor.setCookiesValue(\"cookie1value, cookie2value, cookie3value\");\n         interceptor.intercept(invocation);\n@@ -185,7 +185,7 @@ public void testInterceptSelectedCookiesNameOnly1() throws Exception {\n         actionInvocationControl.replay();\n \n         CookieInterceptor interceptor = new CookieInterceptor();\n-        interceptor.setExcludedPatternsChecker(new ExcludedPatternsChecker());\n+        interceptor.setExcludedPatternsChecker(new DefaultExcludedPatternsChecker());\n         interceptor.setCookiesName(\"cookie1, cookie3\");\n         interceptor.setCookiesValue(\"cookie1value, cookie2value, cookie3value\");\n         interceptor.intercept(invocation);\n@@ -226,7 +226,7 @@ public void testInterceptSelectedCookiesNameOnly2() throws Exception {\n         actionInvocationControl.replay();\n \n         CookieInterceptor interceptor = new CookieInterceptor();\n-        interceptor.setExcludedPatternsChecker(new ExcludedPatternsChecker());\n+        interceptor.setExcludedPatternsChecker(new DefaultExcludedPatternsChecker());\n         interceptor.setCookiesName(\"cookie1, cookie3\");\n         interceptor.setCookiesValue(\"*\");\n         interceptor.intercept(invocation);\n@@ -267,7 +267,7 @@ public void testInterceptSelectedCookiesNameOnly3() throws Exception {\n         actionInvocationControl.replay();\n \n         CookieInterceptor interceptor = new CookieInterceptor();\n-        interceptor.setExcludedPatternsChecker(new ExcludedPatternsChecker());\n+        interceptor.setExcludedPatternsChecker(new DefaultExcludedPatternsChecker());\n         interceptor.setCookiesName(\"cookie1, cookie3\");\n         interceptor.setCookiesValue(\"\");\n         interceptor.intercept(invocation);\n@@ -309,7 +309,7 @@ public void testInterceptSelectedCookiesNameAndValue() throws Exception {\n         actionInvocationControl.replay();\n \n         CookieInterceptor interceptor = new CookieInterceptor();\n-        interceptor.setExcludedPatternsChecker(new ExcludedPatternsChecker());\n+        interceptor.setExcludedPatternsChecker(new DefaultExcludedPatternsChecker());\n         interceptor.setCookiesName(\"cookie1, cookie3\");\n         interceptor.setCookiesValue(\"cookie1value\");\n         interceptor.intercept(invocation);\n@@ -370,7 +370,7 @@ protected boolean isAcceptableValue(String value) {\n                 return accepted;\n             }\n         };\n-        interceptor.setExcludedPatternsChecker(new ExcludedPatternsChecker());\n+        interceptor.setExcludedPatternsChecker(new DefaultExcludedPatternsChecker());\n         interceptor.setCookiesName(\"*\");\n \n         MockActionInvocation invocation = new MockActionInvocation();\n@@ -430,7 +430,7 @@ protected boolean isAcceptableValue(String value) {\n                 return accepted;\n             }\n         };\n-        interceptor.setExcludedPatternsChecker(new ExcludedPatternsChecker());\n+        interceptor.setExcludedPatternsChecker(new DefaultExcludedPatternsChecker());\n         interceptor.setCookiesName(\"*\");\n \n         MockActionInvocation invocation = new MockActionInvocation();"
        },
        {
            "sha": "3860e57d81525b301ccade4e45874d3682a77e07",
            "filename": "xwork-core/src/main/java/com/opensymphony/xwork2/DefaultExcludedPatternsChecker.java",
            "status": "added",
            "additions": 93,
            "deletions": 0,
            "changes": 93,
            "blob_url": "https://github.com/apache/struts/blob/bfbc4c04e007393986f374a02dfb7ded23bc9a05/xwork-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2FDefaultExcludedPatternsChecker.java",
            "raw_url": "https://github.com/apache/struts/raw/bfbc4c04e007393986f374a02dfb7ded23bc9a05/xwork-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2FDefaultExcludedPatternsChecker.java",
            "contents_url": "https://api.github.com/repos/apache/struts/contents/xwork-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2FDefaultExcludedPatternsChecker.java?ref=bfbc4c04e007393986f374a02dfb7ded23bc9a05",
            "patch": "@@ -0,0 +1,93 @@\n+package com.opensymphony.xwork2;\n+\n+import com.opensymphony.xwork2.inject.Inject;\n+import com.opensymphony.xwork2.util.TextParseUtil;\n+import com.opensymphony.xwork2.util.logging.Logger;\n+import com.opensymphony.xwork2.util.logging.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+\n+public class DefaultExcludedPatternsChecker implements ExcludedPatternsChecker {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultExcludedPatternsChecker.class);\n+\n+    public static final String[] EXCLUDED_PATTERNS = {\n+            \"(.*\\\\.|^|.*|\\\\[('|\\\"))class(\\\\.|('|\\\")]|\\\\[).*\",\n+            \"^dojo\\\\..*\",\n+            \"^struts\\\\..*\",\n+            \"^session\\\\..*\",\n+            \"^request\\\\..*\",\n+            \"^application\\\\..*\",\n+            \"^servlet(Request|Response)\\\\..*\",\n+            \"^parameters\\\\..*\"\n+    };\n+\n+    private Set<Pattern> excludedPatterns;\n+\n+    public DefaultExcludedPatternsChecker() {\n+        excludedPatterns = new HashSet<Pattern>();\n+        for (String pattern : EXCLUDED_PATTERNS) {\n+            excludedPatterns.add(Pattern.compile(pattern));\n+        }\n+    }\n+\n+    @Inject(value = XWorkConstants.OVERRIDE_EXCLUDED_PATTERNS, required = false)\n+    public void setOverrideExcludePatterns(String excludePatterns) {\n+        if (LOG.isWarnEnabled()) {\n+            LOG.warn(\"Overriding [#0] with [#1], be aware that this can affect safety of your application!\",\n+                    XWorkConstants.OVERRIDE_EXCLUDED_PATTERNS, excludePatterns);\n+        }\n+        excludedPatterns = new HashSet<Pattern>();\n+        for (String pattern : TextParseUtil.commaDelimitedStringToSet(excludePatterns)) {\n+            excludedPatterns.add(Pattern.compile(pattern));\n+        }\n+    }\n+\n+    /**\n+     * Allows add additional excluded patterns during runtime\n+     *\n+     * @param commaDelimitedPatterns comma delimited string with patterns\n+     */\n+    public void addExcludedPatterns(String commaDelimitedPatterns) {\n+        addExcludedPatterns(TextParseUtil.commaDelimitedStringToSet(commaDelimitedPatterns));\n+    }\n+\n+    /**\n+     * Allows add additional excluded patterns during runtime\n+     *\n+     * @param additionalPatterns array of additional excluded patterns\n+     */\n+    public void addExcludedPatterns(String[] additionalPatterns) {\n+        addExcludedPatterns(new HashSet<String>(Arrays.asList(additionalPatterns)));\n+    }\n+\n+    /**\n+     * Allows add additional excluded patterns during runtime\n+     *\n+     * @param additionalPatterns set of additional patterns\n+     */\n+    public void addExcludedPatterns(Set<String> additionalPatterns) {\n+        if (LOG.isTraceEnabled()) {\n+            LOG.trace(\"Adding additional excluded patterns [#0]\", additionalPatterns);\n+        }\n+        for (String pattern : additionalPatterns) {\n+            excludedPatterns.add(Pattern.compile(pattern));\n+        }\n+    }\n+\n+    public IsExcluded isExcluded(String value) {\n+        for (Pattern excludedPattern : excludedPatterns) {\n+            if (excludedPattern.matcher(value).matches()) {\n+                if (LOG.isTraceEnabled()) {\n+                    LOG.trace(\"[#0] matches excluded pattern [#1]\", value, excludedPattern);\n+                }\n+                return IsExcluded.yes(excludedPattern);\n+            }\n+        }\n+        return IsExcluded.no();\n+    }\n+\n+}"
        },
        {
            "sha": "c4730ea73fec87fe26fd1f7540fcd3a0b15c1d08",
            "filename": "xwork-core/src/main/java/com/opensymphony/xwork2/ExcludedPatternsChecker.java",
            "status": "modified",
            "additions": 2,
            "deletions": 90,
            "changes": 92,
            "blob_url": "https://github.com/apache/struts/blob/bfbc4c04e007393986f374a02dfb7ded23bc9a05/xwork-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2FExcludedPatternsChecker.java",
            "raw_url": "https://github.com/apache/struts/raw/bfbc4c04e007393986f374a02dfb7ded23bc9a05/xwork-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2FExcludedPatternsChecker.java",
            "contents_url": "https://api.github.com/repos/apache/struts/contents/xwork-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2FExcludedPatternsChecker.java?ref=bfbc4c04e007393986f374a02dfb7ded23bc9a05",
            "patch": "@@ -1,101 +1,13 @@\n package com.opensymphony.xwork2;\n \n-import com.opensymphony.xwork2.inject.Inject;\n-import com.opensymphony.xwork2.util.TextParseUtil;\n-import com.opensymphony.xwork2.util.logging.Logger;\n-import com.opensymphony.xwork2.util.logging.LoggerFactory;\n-\n-import java.util.Arrays;\n-import java.util.HashSet;\n-import java.util.Set;\n import java.util.regex.Pattern;\n \n /**\n  * Used across different interceptors to check if given string matches one of the excluded patterns.\n- * User has two options to change its behaviour:\n- * - define new set of patterns with <constant name=\"struts.override.excludedPatterns\" value=\"..\"/>\n- * - override this class and use then extension point <constant name=\"struts.excludedPatterns.checker\" value=\"myChecker\"/>\n- *   to inject it in appropriated places\n  */\n-public class ExcludedPatternsChecker {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(ExcludedPatternsChecker.class);\n-\n-    public static final String[] EXCLUDED_PATTERNS = {\n-            \"(.*\\\\.|^|.*|\\\\[('|\\\"))class(\\\\.|('|\\\")]|\\\\[).*\",\n-            \"^dojo\\\\..*\",\n-            \"^struts\\\\..*\",\n-            \"^session\\\\..*\",\n-            \"^request\\\\..*\",\n-            \"^application\\\\..*\",\n-            \"^servlet(Request|Response)\\\\..*\",\n-            \"^parameters\\\\..*\"\n-    };\n-\n-    private Set<Pattern> excludedPatterns;\n-\n-    public ExcludedPatternsChecker() {\n-        excludedPatterns = new HashSet<Pattern>();\n-        for (String pattern : EXCLUDED_PATTERNS) {\n-            excludedPatterns.add(Pattern.compile(pattern));\n-        }\n-    }\n-\n-    @Inject(value = XWorkConstants.OVERRIDE_EXCLUDED_PATTERNS, required = false)\n-    public void setOverrideExcludePatterns(String excludePatterns) {\n-        if (LOG.isWarnEnabled()) {\n-            LOG.warn(\"Overriding [#0] with [#1], be aware that this can affect safety of your application!\",\n-                    XWorkConstants.OVERRIDE_EXCLUDED_PATTERNS, excludePatterns);\n-        }\n-        excludedPatterns = new HashSet<Pattern>();\n-        for (String pattern : TextParseUtil.commaDelimitedStringToSet(excludePatterns)) {\n-            excludedPatterns.add(Pattern.compile(pattern));\n-        }\n-    }\n+public interface ExcludedPatternsChecker {\n \n-    /**\n-     * Allows add additional excluded patterns during runtime\n-     *\n-     * @param commaDelimitedPatterns comma delimited string with patterns\n-     */\n-    public void addExcludedPatterns(String commaDelimitedPatterns) {\n-        addExcludedPatterns(TextParseUtil.commaDelimitedStringToSet(commaDelimitedPatterns));\n-    }\n-\n-    /**\n-     * Allows add additional excluded patterns during runtime\n-     *\n-     * @param additionalPatterns array of additional excluded patterns\n-     */\n-    public void addExcludedPatterns(String[] additionalPatterns) {\n-        addExcludedPatterns(new HashSet<String>(Arrays.asList(additionalPatterns)));\n-    }\n-\n-    /**\n-     * Allows add additional excluded patterns during runtime\n-     *\n-     * @param additionalPatterns set of additional patterns\n-     */\n-    public void addExcludedPatterns(Set<String> additionalPatterns) {\n-        if (LOG.isTraceEnabled()) {\n-            LOG.trace(\"Adding additional excluded patterns [#0]\", additionalPatterns);\n-        }\n-        for (String pattern : additionalPatterns) {\n-            excludedPatterns.add(Pattern.compile(pattern));\n-        }\n-    }\n-\n-    public IsExcluded isExcluded(String value) {\n-        for (Pattern excludedPattern : excludedPatterns) {\n-            if (excludedPattern.matcher(value).matches()) {\n-                if (LOG.isTraceEnabled()) {\n-                    LOG.trace(\"[#0] matches excluded pattern [#1]\", value, excludedPattern);\n-                }\n-                return IsExcluded.yes(excludedPattern);\n-            }\n-        }\n-        return IsExcluded.no();\n-    }\n+    public IsExcluded isExcluded(String value);\n \n     public final static class IsExcluded {\n "
        }
    ]
}