{
    "sha": "98fa28a60b235d9c600fac578227086fc86b42df",
    "node_id": "MDY6Q29tbWl0MTI3MjEyOTo5OGZhMjhhNjBiMjM1ZDljNjAwZmFjNTc4MjI3MDg2ZmM4NmI0MmRm",
    "commit": {
        "author": {
            "name": "manuel-hegner",
            "email": "manuel-hegner@users.noreply.github.com",
            "date": "2017-11-10T20:47:57Z"
        },
        "committer": {
            "name": "Artem Prigoda",
            "email": "arteamon@gmail.com",
            "date": "2017-11-10T20:47:57Z"
        },
        "message": "SelfValidation annotation as an alternative to ValidationMethod (#2150)\n\n* added @SelfValidating and @SelfValidation annotations and the logic to execute them\r\n\r\n* fixes for code climate\r\n\r\n* fixes for code climate\r\n\r\n* fixes for code climate\r\n\r\n* added additional test to test the caching of generated validation methods\r\n\r\n* additional test for some invalid cases\r\n\r\n* fixes for code climate\r\n\r\n* added benchmark for SelfValidating and ValidationMethod",
        "tree": {
            "sha": "2b65c3cf208d7135fd0333c61e3cd3cdb7af4c40",
            "url": "https://api.github.com/repos/dropwizard/dropwizard/git/trees/2b65c3cf208d7135fd0333c61e3cd3cdb7af4c40"
        },
        "url": "https://api.github.com/repos/dropwizard/dropwizard/git/commits/98fa28a60b235d9c600fac578227086fc86b42df",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/dropwizard/dropwizard/commits/98fa28a60b235d9c600fac578227086fc86b42df",
    "html_url": "https://github.com/dropwizard/dropwizard/commit/98fa28a60b235d9c600fac578227086fc86b42df",
    "comments_url": "https://api.github.com/repos/dropwizard/dropwizard/commits/98fa28a60b235d9c600fac578227086fc86b42df/comments",
    "author": {
        "login": "manuel-hegner",
        "id": 12272732,
        "node_id": "MDQ6VXNlcjEyMjcyNzMy",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272732?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/manuel-hegner",
        "html_url": "https://github.com/manuel-hegner",
        "followers_url": "https://api.github.com/users/manuel-hegner/followers",
        "following_url": "https://api.github.com/users/manuel-hegner/following{/other_user}",
        "gists_url": "https://api.github.com/users/manuel-hegner/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/manuel-hegner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/manuel-hegner/subscriptions",
        "organizations_url": "https://api.github.com/users/manuel-hegner/orgs",
        "repos_url": "https://api.github.com/users/manuel-hegner/repos",
        "events_url": "https://api.github.com/users/manuel-hegner/events{/privacy}",
        "received_events_url": "https://api.github.com/users/manuel-hegner/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "arteam",
        "id": 1717632,
        "node_id": "MDQ6VXNlcjE3MTc2MzI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1717632?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/arteam",
        "html_url": "https://github.com/arteam",
        "followers_url": "https://api.github.com/users/arteam/followers",
        "following_url": "https://api.github.com/users/arteam/following{/other_user}",
        "gists_url": "https://api.github.com/users/arteam/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/arteam/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/arteam/subscriptions",
        "organizations_url": "https://api.github.com/users/arteam/orgs",
        "repos_url": "https://api.github.com/users/arteam/repos",
        "events_url": "https://api.github.com/users/arteam/events{/privacy}",
        "received_events_url": "https://api.github.com/users/arteam/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "bbdefb3c159ce7cfaeb20ff89dfdaa459de5417e",
            "url": "https://api.github.com/repos/dropwizard/dropwizard/commits/bbdefb3c159ce7cfaeb20ff89dfdaa459de5417e",
            "html_url": "https://github.com/dropwizard/dropwizard/commit/bbdefb3c159ce7cfaeb20ff89dfdaa459de5417e"
        }
    ],
    "stats": {
        "total": 492,
        "additions": 492,
        "deletions": 0
    },
    "files": [
        {
            "sha": "4ee90fdf96a17ed1daa4af3b2225ad34518ca0a4",
            "filename": "dropwizard-benchmarks/src/main/java/io/dropwizard/benchmarks/jersey/SelfValidatingBenchmark.java",
            "status": "added",
            "additions": 112,
            "deletions": 0,
            "changes": 112,
            "blob_url": "https://github.com/dropwizard/dropwizard/blob/98fa28a60b235d9c600fac578227086fc86b42df/dropwizard-benchmarks%2Fsrc%2Fmain%2Fjava%2Fio%2Fdropwizard%2Fbenchmarks%2Fjersey%2FSelfValidatingBenchmark.java",
            "raw_url": "https://github.com/dropwizard/dropwizard/raw/98fa28a60b235d9c600fac578227086fc86b42df/dropwizard-benchmarks%2Fsrc%2Fmain%2Fjava%2Fio%2Fdropwizard%2Fbenchmarks%2Fjersey%2FSelfValidatingBenchmark.java",
            "contents_url": "https://api.github.com/repos/dropwizard/dropwizard/contents/dropwizard-benchmarks%2Fsrc%2Fmain%2Fjava%2Fio%2Fdropwizard%2Fbenchmarks%2Fjersey%2FSelfValidatingBenchmark.java?ref=98fa28a60b235d9c600fac578227086fc86b42df",
            "patch": "@@ -0,0 +1,112 @@\n+package io.dropwizard.benchmarks.jersey;\n+\n+import java.io.File;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.validation.Validator;\n+\n+import org.glassfish.jersey.server.model.Invocable;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import io.dropwizard.jersey.validation.Validators;\n+import io.dropwizard.logging.BootstrapLogging;\n+import io.dropwizard.validation.ValidationMethod;\n+import io.dropwizard.validation.selfvalidating.SelfValidating;\n+import io.dropwizard.validation.selfvalidating.SelfValidation;\n+import io.dropwizard.validation.selfvalidating.ViolationCollector;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Benchmark)\n+public class SelfValidatingBenchmark {\n+\n+    static {\n+        BootstrapLogging.bootstrap();\n+    }\n+\n+    public static class ValidationMethodUser {\n+        @ValidationMethod\n+        public boolean isValid1(String param1) {\n+            return true;\n+        }\n+\n+        @ValidationMethod\n+        public boolean isValid2(String param1, int param2) {\n+            return true;\n+        }\n+        \n+        @ValidationMethod(message=\"invalid1\")\n+        public boolean isInvalid1(String param1) {\n+            return false;\n+        }\n+        \n+        @ValidationMethod(message=\"invalid2\")\n+        public boolean isInvalid2(String param1, int param2) {\n+            return false;\n+        }\n+    }\n+\n+    @SelfValidating\n+    public static class SelfValidatingMethodUser {\n+        @SelfValidation\n+        public void validateValid1(ViolationCollector collector) {\n+        }\n+\n+        @SelfValidation\n+        public void validateValid2(ViolationCollector collector) {\n+        }\n+        \n+        @SelfValidation\n+        public void validateInvalid1(ViolationCollector collector) {\n+            collector.addViolation(\"invalid1\");\n+        }\n+        \n+        @SelfValidation\n+        public void validateInvalid2(ViolationCollector collector) {\n+            collector.addViolation(\"invalid2\");\n+        }\n+    }\n+\n+    private ValidationMethodUser validationMethodUser;\n+    private SelfValidatingMethodUser selfValidatingMethodUser;\n+    private Validator validator;\n+\n+    final Invocable invocable = Invocable.create(request -> null);\n+\n+    @Setup\n+    public void prepare() {\n+        validator = Validators.newValidator();\n+        validationMethodUser = new ValidationMethodUser();\n+        selfValidatingMethodUser = new SelfValidatingMethodUser();\n+    }\n+\n+    @Benchmark\n+    public void validationMethod() {\n+        validator.validate(validationMethodUser);\n+    }\n+\n+    @Benchmark\n+    public void selfValidating() {\n+        validator.validate(selfValidatingMethodUser);\n+    }\n+\n+    public static void main(String[] args) throws Exception {  \n+        new Runner(new OptionsBuilder()\n+                .include(SelfValidatingBenchmark.class.getSimpleName())\n+                .forks(1)\n+                .warmupIterations(5)\n+                .measurementIterations(8)\n+                .build())\n+                .run();\n+    }\n+}"
        },
        {
            "sha": "b3727eeb98dc7892120a317af4616570a5cbb8e0",
            "filename": "dropwizard-validation/pom.xml",
            "status": "modified",
            "additions": 15,
            "deletions": 0,
            "changes": 15,
            "blob_url": "https://github.com/dropwizard/dropwizard/blob/98fa28a60b235d9c600fac578227086fc86b42df/dropwizard-validation%2Fpom.xml",
            "raw_url": "https://github.com/dropwizard/dropwizard/raw/98fa28a60b235d9c600fac578227086fc86b42df/dropwizard-validation%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/dropwizard/dropwizard/contents/dropwizard-validation%2Fpom.xml?ref=98fa28a60b235d9c600fac578227086fc86b42df",
            "patch": "@@ -41,5 +41,20 @@\n             <artifactId>commons-lang3</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+        \t<groupId>org.javassist</groupId>\n+        \t<artifactId>javassist</artifactId>\n+        \t\n+        </dependency>\n+        <dependency>\n+        \t<groupId>org.slf4j</groupId>\n+        \t<artifactId>slf4j-api</artifactId>\n+        </dependency>\n+        <dependency>\n+        \t<groupId>org.slf4j</groupId>\n+        \t<artifactId>slf4j-simple</artifactId>\n+        \t<version>1.7.25</version>\n+        \t<scope>test</scope>\n+        </dependency>\n     </dependencies>\n </project>"
        },
        {
            "sha": "8bb374ac0dab7a65ff3e3a738155d85ef47819dd",
            "filename": "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidating.java",
            "status": "added",
            "additions": 28,
            "deletions": 0,
            "changes": 28,
            "blob_url": "https://github.com/dropwizard/dropwizard/blob/98fa28a60b235d9c600fac578227086fc86b42df/dropwizard-validation%2Fsrc%2Fmain%2Fjava%2Fio%2Fdropwizard%2Fvalidation%2Fselfvalidating%2FSelfValidating.java",
            "raw_url": "https://github.com/dropwizard/dropwizard/raw/98fa28a60b235d9c600fac578227086fc86b42df/dropwizard-validation%2Fsrc%2Fmain%2Fjava%2Fio%2Fdropwizard%2Fvalidation%2Fselfvalidating%2FSelfValidating.java",
            "contents_url": "https://api.github.com/repos/dropwizard/dropwizard/contents/dropwizard-validation%2Fsrc%2Fmain%2Fjava%2Fio%2Fdropwizard%2Fvalidation%2Fselfvalidating%2FSelfValidating.java?ref=98fa28a60b235d9c600fac578227086fc86b42df",
            "patch": "@@ -0,0 +1,28 @@\n+package io.dropwizard.validation.selfvalidating;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+/**\n+ * The annotated element has methods annotated by \n+ * {@link io.dropwizard.validation.selfvalidating.SelfValidation}.\n+ * Those methods are executed on validation.\n+ */\n+@Documented\n+@Target({ ElementType.TYPE, ElementType.ANNOTATION_TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy =  SelfValidatingValidator.class)\n+public @interface SelfValidating {\n+\n+    String message() default \"\";\n+    \n+    Class<?>[] groups() default { };\n+\n+    Class<? extends Payload>[] payload() default { };\n+}"
        },
        {
            "sha": "23a4da99bf634e00119baa8bbdc29c88471acdac",
            "filename": "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidatingValidator.java",
            "status": "added",
            "additions": 114,
            "deletions": 0,
            "changes": 114,
            "blob_url": "https://github.com/dropwizard/dropwizard/blob/98fa28a60b235d9c600fac578227086fc86b42df/dropwizard-validation%2Fsrc%2Fmain%2Fjava%2Fio%2Fdropwizard%2Fvalidation%2Fselfvalidating%2FSelfValidatingValidator.java",
            "raw_url": "https://github.com/dropwizard/dropwizard/raw/98fa28a60b235d9c600fac578227086fc86b42df/dropwizard-validation%2Fsrc%2Fmain%2Fjava%2Fio%2Fdropwizard%2Fvalidation%2Fselfvalidating%2FSelfValidatingValidator.java",
            "contents_url": "https://api.github.com/repos/dropwizard/dropwizard/contents/dropwizard-validation%2Fsrc%2Fmain%2Fjava%2Fio%2Fdropwizard%2Fvalidation%2Fselfvalidating%2FSelfValidatingValidator.java?ref=98fa28a60b235d9c600fac578227086fc86b42df",
            "patch": "@@ -0,0 +1,114 @@\n+package io.dropwizard.validation.selfvalidating;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javassist.ClassPool;\n+import javassist.CtClass;\n+import javassist.CtMethod;\n+import javassist.NotFoundException;\n+\n+/**\n+ * This class is the base validator for the <code>@SelfValidating</code> annotation. It\n+ * initiates the self validation process on an object, generating wrapping methods to call\n+ * the validation methods efficiently and then calls them.\n+ */\n+public class SelfValidatingValidator implements ConstraintValidator<SelfValidating, Object> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SelfValidatingValidator.class);\n+    private static final AtomicInteger COUNTER = new AtomicInteger();\n+    \n+    private final HashMap<Class<?>, List<ValidationCaller<?>>> methodMap = new HashMap<>();\n+    \n+    @Override\n+    public void initialize(SelfValidating constraintAnnotation) {}\n+\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    @Override\n+    public boolean isValid(Object value, ConstraintValidatorContext context) {\n+        List<ValidationCaller<?>> callers = findMethods(value.getClass());\n+\n+        ViolationCollector collector = new ViolationCollector(context);\n+        context.disableDefaultConstraintViolation();\n+        for (ValidationCaller caller:callers) {\n+            caller.setValidationObject(value);\n+            caller.call(collector);\n+        }\n+        return !collector.hasViolationOccurred();\n+    }\n+\n+    /**\n+     * This method generates and caches <code>ValidationCaller</code>s for each method annotated \n+     * with <code>@SelfValidation</code> that adheres to required signature.\n+     * @param annotated\n+     * @return\n+     */\n+    private synchronized List<ValidationCaller<?>> findMethods(Class<? extends Object> annotated) {\n+        if (methodMap.containsKey(annotated))\n+            return methodMap.get(annotated);\n+    \n+        synchronized (methodMap) {\n+            if (methodMap.containsKey(annotated))\n+                return methodMap.get(annotated);\n+            \n+            List<ValidationCaller<?>> l = new ArrayList<>();\n+            \n+            ClassPool cp;\n+            CtClass callerSuperclass;\n+            CtClass[] callingParameters;\n+            try {\n+                cp = ClassPool.getDefault();\n+                callerSuperclass = cp.get(ValidationCaller.class.getName());\n+                callingParameters = new CtClass[] {cp.get(ViolationCollector.class.getName())};\n+            } catch (NotFoundException e) {\n+                throw new IllegalStateException(\"Failed to load included class\", e);\n+            }\n+                \n+            for (Method m:annotated.getMethods()) {\n+                if (m.isAnnotationPresent(SelfValidation.class)) {\n+                    if (!void.class.equals(m.getReturnType()))\n+                        LOG.error(\"The method {} is annotated with SelfValidation but does not return void. It is ignored.\", m);\n+                    else if (m.getParameterTypes().length != 1 || !m.getParameterTypes()[0].equals(ViolationCollector.class))\n+                        LOG.error(\"The method {} is annotated with SelfValidation but does not have a single parameter of type {}\", m, ViolationCollector.class);\n+                    else if ((m.getModifiers() & Modifier.PUBLIC) == 0)\n+                        LOG.error(\"The method {} is annotated with SelfValidation but is not public\", m);\n+                    else {\n+                        try {\n+                            CtClass cc = cp.makeClass(\"ValidationCallerGeneratedImpl\" + COUNTER.getAndIncrement());\n+                            cc.setSuperclass(callerSuperclass);\n+             \n+                            CtMethod method = new CtMethod(CtClass.voidType, \"call\", callingParameters, cc);\n+                            cc.addMethod(method);\n+                            method.setBody(\"{ return ((\" + annotated.getName() + \")getValidationObject()).\" + m.getName() + \"($1); }\");\n+                            \n+                            cc.setModifiers(Modifier.PUBLIC);\n+                            @SuppressWarnings(\"unchecked\")\n+                            ValidationCaller<?> caller = (ValidationCaller<?>) cc.toClass().getConstructor().newInstance();\n+                            l.add(caller);\n+                        } catch (Exception e) {\n+                            LOG.error(\"Failed to generate ValidationCaller for method \" + m.toString(), e);\n+                        }\n+                    }\n+                }\n+            }\n+            if (l.isEmpty())\n+                LOG.error(\"The class {} is annotated with SelfValidating but contains no valid methods that are annotated with SelfValidation\", annotated);\n+                \n+            methodMap.put(annotated, l);\n+            return l;\n+        }\n+        \n+        \n+    }\n+\n+}"
        },
        {
            "sha": "2d5f70323427e4a0095a53a56129af076efcb619",
            "filename": "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidation.java",
            "status": "added",
            "additions": 18,
            "deletions": 0,
            "changes": 18,
            "blob_url": "https://github.com/dropwizard/dropwizard/blob/98fa28a60b235d9c600fac578227086fc86b42df/dropwizard-validation%2Fsrc%2Fmain%2Fjava%2Fio%2Fdropwizard%2Fvalidation%2Fselfvalidating%2FSelfValidation.java",
            "raw_url": "https://github.com/dropwizard/dropwizard/raw/98fa28a60b235d9c600fac578227086fc86b42df/dropwizard-validation%2Fsrc%2Fmain%2Fjava%2Fio%2Fdropwizard%2Fvalidation%2Fselfvalidating%2FSelfValidation.java",
            "contents_url": "https://api.github.com/repos/dropwizard/dropwizard/contents/dropwizard-validation%2Fsrc%2Fmain%2Fjava%2Fio%2Fdropwizard%2Fvalidation%2Fselfvalidating%2FSelfValidation.java?ref=98fa28a60b235d9c600fac578227086fc86b42df",
            "patch": "@@ -0,0 +1,18 @@\n+package io.dropwizard.validation.selfvalidating;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * This method, if used in conjunction with \n+ * {@link io.dropwizard.validation.selfvalidating.SelfValidating},\n+ * will be executed to check if the object itself is valid.\n+ * For that it requires the signature <code>public void methodName(ViolationCollector)</code>.\n+ */\n+@Documented\n+@Target(ElementType.METHOD)\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface SelfValidation { }\n\\ No newline at end of file"
        },
        {
            "sha": "166deeaae6fa3ef0fe4dd140b02b11b885a48255",
            "filename": "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ValidationCaller.java",
            "status": "added",
            "additions": 21,
            "deletions": 0,
            "changes": 21,
            "blob_url": "https://github.com/dropwizard/dropwizard/blob/98fa28a60b235d9c600fac578227086fc86b42df/dropwizard-validation%2Fsrc%2Fmain%2Fjava%2Fio%2Fdropwizard%2Fvalidation%2Fselfvalidating%2FValidationCaller.java",
            "raw_url": "https://github.com/dropwizard/dropwizard/raw/98fa28a60b235d9c600fac578227086fc86b42df/dropwizard-validation%2Fsrc%2Fmain%2Fjava%2Fio%2Fdropwizard%2Fvalidation%2Fselfvalidating%2FValidationCaller.java",
            "contents_url": "https://api.github.com/repos/dropwizard/dropwizard/contents/dropwizard-validation%2Fsrc%2Fmain%2Fjava%2Fio%2Fdropwizard%2Fvalidation%2Fselfvalidating%2FValidationCaller.java?ref=98fa28a60b235d9c600fac578227086fc86b42df",
            "patch": "@@ -0,0 +1,21 @@\n+package io.dropwizard.validation.selfvalidating;\n+\n+/**\n+ * This class represents a wrapper for calling validation methods annotated with <code>@SelfValidation</code>.\n+ * It is used as a base class for the code generation.\n+ * @param <T> the object type that contains the validation method\n+ */\n+public abstract class ValidationCaller<T> {\n+    \n+    protected T validationObject;\n+    \n+    public void setValidationObject(T obj) {\n+        this.validationObject = obj;\n+    }\n+    \n+    public T getValidationObject() {\n+        return validationObject;\n+    }\n+\n+    public abstract void call(ViolationCollector vc);\n+}"
        },
        {
            "sha": "e086a6e3583317d2ce8a3ec19aa6bfd8ad9ab2c8",
            "filename": "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java",
            "status": "added",
            "additions": 54,
            "deletions": 0,
            "changes": 54,
            "blob_url": "https://github.com/dropwizard/dropwizard/blob/98fa28a60b235d9c600fac578227086fc86b42df/dropwizard-validation%2Fsrc%2Fmain%2Fjava%2Fio%2Fdropwizard%2Fvalidation%2Fselfvalidating%2FViolationCollector.java",
            "raw_url": "https://github.com/dropwizard/dropwizard/raw/98fa28a60b235d9c600fac578227086fc86b42df/dropwizard-validation%2Fsrc%2Fmain%2Fjava%2Fio%2Fdropwizard%2Fvalidation%2Fselfvalidating%2FViolationCollector.java",
            "contents_url": "https://api.github.com/repos/dropwizard/dropwizard/contents/dropwizard-validation%2Fsrc%2Fmain%2Fjava%2Fio%2Fdropwizard%2Fvalidation%2Fselfvalidating%2FViolationCollector.java?ref=98fa28a60b235d9c600fac578227086fc86b42df",
            "patch": "@@ -0,0 +1,54 @@\n+package io.dropwizard.validation.selfvalidating;\n+\n+import javax.validation.ConstraintValidatorContext;\n+\n+/**\n+ * This class is a simple wrapper around the ConstraintValidatorContext of hibernate validation.\n+ * It collects all the violations of the SelfValidation methods of an object.\n+ */\n+public class ViolationCollector {\n+    \n+    private boolean violationOccurred = false;\n+    private ConstraintValidatorContext context;\n+    \n+    \n+    public ViolationCollector(ConstraintValidatorContext context) {\n+        this.context = context;\n+    }\n+    \n+    /**\n+     * Adds a new violation to this collector. This also sets violationOccurred to true.\n+     * @param msg the message of the violation\n+     */\n+    public void addViolation(String msg) {\n+        violationOccurred = true;\n+        context\n+            .buildConstraintViolationWithTemplate(msg)\n+            .addConstraintViolation();\n+    }\n+    \n+    /**\n+     * This method returns the wrapped context for raw access to the validation framework. If you use \n+     * the context to add violations make sure to call <code>setViolationOccurred(true)</code>.\n+     * @return the wrapped Hibernate ConstraintValidatorContext\n+     */\n+    public ConstraintValidatorContext getContext() {\n+        return context;\n+    }\n+    \n+    /**\n+     * @return if any violation was collected\n+     */\n+    public boolean hasViolationOccurred() {\n+        return violationOccurred;\n+    }\n+    \n+    /**\n+     * Manually sets if a violation occurred. This is automatically set if <code>addViolation</code> is called.\n+     * @param violationOccurred if any violation was collected\n+     */\n+    public void setViolationOccurred(boolean violationOccurred) {\n+        this.violationOccurred = violationOccurred;\n+    }\n+\n+}"
        },
        {
            "sha": "e389e768e1c2bb7bbf978257c2bdc565b501289a",
            "filename": "dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java",
            "status": "added",
            "additions": 130,
            "deletions": 0,
            "changes": 130,
            "blob_url": "https://github.com/dropwizard/dropwizard/blob/98fa28a60b235d9c600fac578227086fc86b42df/dropwizard-validation%2Fsrc%2Ftest%2Fjava%2Fio%2Fdropwizard%2Fvalidation%2FSelfValidationTest.java",
            "raw_url": "https://github.com/dropwizard/dropwizard/raw/98fa28a60b235d9c600fac578227086fc86b42df/dropwizard-validation%2Fsrc%2Ftest%2Fjava%2Fio%2Fdropwizard%2Fvalidation%2FSelfValidationTest.java",
            "contents_url": "https://api.github.com/repos/dropwizard/dropwizard/contents/dropwizard-validation%2Fsrc%2Ftest%2Fjava%2Fio%2Fdropwizard%2Fvalidation%2FSelfValidationTest.java?ref=98fa28a60b235d9c600fac578227086fc86b42df",
            "patch": "@@ -0,0 +1,130 @@\n+package io.dropwizard.validation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import javax.validation.Validator;\n+\n+import org.junit.Test;\n+\n+import io.dropwizard.validation.selfvalidating.SelfValidating;\n+import io.dropwizard.validation.selfvalidating.SelfValidation;\n+import io.dropwizard.validation.selfvalidating.ViolationCollector;\n+\n+public class SelfValidationTest {\n+    \n+    private static final String FAILED = \"failed\";\n+    \n+    @SelfValidating\n+    public static class FailingExample {\n+        @SelfValidation\n+        public void validateFail(ViolationCollector col) {\n+            col.addViolation(FAILED);\n+        }\n+    }\n+    \n+    @SelfValidating\n+    public static class DirectContextExample {\n+        @SelfValidation\n+        public void validateFail(ViolationCollector col) {\n+            col.getContext().buildConstraintViolationWithTemplate(FAILED).addConstraintViolation();\n+            col.setViolationOccurred(true);\n+        }\n+    }\n+    \n+    @SelfValidating\n+    public static class CorrectExample {\n+        @SuppressWarnings(\"unused\")\n+        @SelfValidation\n+        public void validateCorrect(ViolationCollector col) {}\n+    }\n+    \n+    @SelfValidating\n+    public static class InvalidExample {\n+        @SuppressWarnings(\"unused\")\n+        @SelfValidation\n+        public void validateCorrect(ViolationCollector col) {}\n+        \n+        @SuppressWarnings(\"unused\")\n+        @SelfValidation\n+        public void validateFailAdditionalParameters(ViolationCollector col, int a) {\n+            col.addViolation(FAILED);\n+        }\n+        \n+        @SelfValidation\n+        public boolean validateFailReturn(ViolationCollector col) {\n+            col.addViolation(FAILED);\n+            return true;\n+        }\n+        \n+        @SelfValidation\n+        private void validateFailPrivate(ViolationCollector col) {\n+            col.addViolation(FAILED);\n+        }\n+    }\n+    \n+    @SelfValidating\n+    public static class ComplexExample {\n+        @SelfValidation\n+        public void validateFail1(ViolationCollector col) {\n+            col.addViolation(FAILED + \"1\");\n+        }\n+        \n+        @SelfValidation\n+        public void validateFail2(ViolationCollector col) {\n+            col.addViolation(FAILED + \"2\");\n+        }\n+        \n+        @SelfValidation\n+        public void validateFail3(ViolationCollector col) {\n+            col.addViolation(FAILED + \"3\");\n+        }\n+        \n+        @SuppressWarnings(\"unused\")\n+        @SelfValidation\n+        public void validateCorrect(ViolationCollector col) {}\n+    }\n+\n+    private final Validator validator = BaseValidator.newValidator();\n+\n+    @Test\n+    public void failingExample() throws Exception {\n+        assertThat(ConstraintViolations.format(validator.validate(new FailingExample())))\n+                .containsOnly(\" \" + FAILED);\n+    }\n+    \n+    @Test\n+    public void correctExample() throws Exception {\n+        assertThat(ConstraintViolations.format(validator.validate(new CorrectExample())))\n+                .isEmpty();\n+    }\n+    \n+    @Test\n+    public void multipleTestingOfSameClass() throws Exception {\n+        assertThat(ConstraintViolations.format(validator.validate(new CorrectExample())))\n+                .isEmpty();\n+        assertThat(ConstraintViolations.format(validator.validate(new CorrectExample())))\n+                .isEmpty();\n+    }\n+    \n+    @Test\n+    public void testDirectContextUsage() throws Exception {\n+        assertThat(ConstraintViolations.format(validator.validate(new DirectContextExample())))\n+                .containsOnly(\" \" + FAILED);\n+    }\n+    \n+    @Test\n+    public void complexExample() throws Exception {\n+        assertThat(ConstraintViolations.format(validator.validate(new ComplexExample())))\n+                .containsOnly(\n+                        \" \" + FAILED + \"1\",\n+                        \" \" + FAILED + \"2\",\n+                        \" \" + FAILED + \"3\"\n+            );\n+    }\n+    \n+    @Test\n+    public void invalidExample() throws Exception {\n+        assertThat(ConstraintViolations.format(validator.validate(new InvalidExample())))\n+                .isEmpty();\n+    }\n+}"
        }
    ]
}