{
    "sha": "42ec5f97f6af3f8c91822fcc0da1f19bc9b5b9b1",
    "node_id": "MDY6Q29tbWl0MTU3MTQ5ODk6NDJlYzVmOTdmNmFmM2Y4YzkxODIyZmNjMGRhMWYxOWJjOWI1YjliMQ==",
    "commit": {
        "author": {
            "name": "Marvin S. Addison",
            "email": "marvin.addison@gmail.com",
            "date": "2013-11-19T15:43:34Z"
        },
        "committer": {
            "name": "Marvin S. Addison",
            "email": "marvin.addison@gmail.com",
            "date": "2013-11-19T15:43:34Z"
        },
        "message": "Initial commit.",
        "tree": {
            "sha": "5b1a220d9c0afffc34b9fa73dcc9897926c4cc14",
            "url": "https://api.github.com/repos/vt-middleware/cryptacular/git/trees/5b1a220d9c0afffc34b9fa73dcc9897926c4cc14"
        },
        "url": "https://api.github.com/repos/vt-middleware/cryptacular/git/commits/42ec5f97f6af3f8c91822fcc0da1f19bc9b5b9b1",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/vt-middleware/cryptacular/commits/42ec5f97f6af3f8c91822fcc0da1f19bc9b5b9b1",
    "html_url": "https://github.com/vt-middleware/cryptacular/commit/42ec5f97f6af3f8c91822fcc0da1f19bc9b5b9b1",
    "comments_url": "https://api.github.com/repos/vt-middleware/cryptacular/commits/42ec5f97f6af3f8c91822fcc0da1f19bc9b5b9b1/comments",
    "author": {
        "login": "serac",
        "id": 111432,
        "node_id": "MDQ6VXNlcjExMTQzMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/111432?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/serac",
        "html_url": "https://github.com/serac",
        "followers_url": "https://api.github.com/users/serac/followers",
        "following_url": "https://api.github.com/users/serac/following{/other_user}",
        "gists_url": "https://api.github.com/users/serac/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/serac/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/serac/subscriptions",
        "organizations_url": "https://api.github.com/users/serac/orgs",
        "repos_url": "https://api.github.com/users/serac/repos",
        "events_url": "https://api.github.com/users/serac/events{/privacy}",
        "received_events_url": "https://api.github.com/users/serac/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "serac",
        "id": 111432,
        "node_id": "MDQ6VXNlcjExMTQzMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/111432?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/serac",
        "html_url": "https://github.com/serac",
        "followers_url": "https://api.github.com/users/serac/followers",
        "following_url": "https://api.github.com/users/serac/following{/other_user}",
        "gists_url": "https://api.github.com/users/serac/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/serac/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/serac/subscriptions",
        "organizations_url": "https://api.github.com/users/serac/orgs",
        "repos_url": "https://api.github.com/users/serac/repos",
        "events_url": "https://api.github.com/users/serac/events{/privacy}",
        "received_events_url": "https://api.github.com/users/serac/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [],
    "stats": {
        "total": 387,
        "additions": 387,
        "deletions": 0
    },
    "files": [
        {
            "sha": "624041115daea18de2f69a223c44dedb691906fe",
            "filename": ".gitignore",
            "status": "added",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/vt-middleware/cryptacular/blob/42ec5f97f6af3f8c91822fcc0da1f19bc9b5b9b1/.gitignore",
            "raw_url": "https://github.com/vt-middleware/cryptacular/raw/42ec5f97f6af3f8c91822fcc0da1f19bc9b5b9b1/.gitignore",
            "contents_url": "https://api.github.com/repos/vt-middleware/cryptacular/contents/.gitignore?ref=42ec5f97f6af3f8c91822fcc0da1f19bc9b5b9b1",
            "patch": "@@ -0,0 +1,3 @@\n+*.iml\n+.idea\n+target"
        },
        {
            "sha": "1d70b603d03405c3abf8b68a1725cdfc65960b72",
            "filename": "README.md",
            "status": "added",
            "additions": 8,
            "deletions": 0,
            "changes": 8,
            "blob_url": "https://github.com/vt-middleware/cryptacular/blob/42ec5f97f6af3f8c91822fcc0da1f19bc9b5b9b1/README.md",
            "raw_url": "https://github.com/vt-middleware/cryptacular/raw/42ec5f97f6af3f8c91822fcc0da1f19bc9b5b9b1/README.md",
            "contents_url": "https://api.github.com/repos/vt-middleware/cryptacular/contents/README.md?ref=42ec5f97f6af3f8c91822fcc0da1f19bc9b5b9b1",
            "patch": "@@ -0,0 +1,8 @@\n+# Cryptosis: Encryption Tools for Java\n+\n+Cryptosis provides a set of lightweight utilities around the Bouncy Castle\n+cryptography library for Java. The library strives to make common\n+encryption operations simple and secure by providing sensible defaults\n+and adhering to best practices recommended by US standards and Internet\n+RFCs.\n+"
        },
        {
            "sha": "14809de50ddd8be379577620a7473ab21bb54f17",
            "filename": "pom.xml",
            "status": "added",
            "additions": 30,
            "deletions": 0,
            "changes": 30,
            "blob_url": "https://github.com/vt-middleware/cryptacular/blob/42ec5f97f6af3f8c91822fcc0da1f19bc9b5b9b1/pom.xml",
            "raw_url": "https://github.com/vt-middleware/cryptacular/raw/42ec5f97f6af3f8c91822fcc0da1f19bc9b5b9b1/pom.xml",
            "contents_url": "https://api.github.com/repos/vt-middleware/cryptacular/contents/pom.xml?ref=42ec5f97f6af3f8c91822fcc0da1f19bc9b5b9b1",
            "patch": "@@ -0,0 +1,30 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <groupId>org.cryptosis</groupId>\n+  <artifactId>cryptosis</artifactId>\n+  <version>1.0-SNAPSHOT</version>\n+  <packaging>jar</packaging>\n+\n+  <name>cryptosis</name>\n+  <url>http://maven.apache.org</url>\n+\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcprov-jdk15on</artifactId>\n+      <version>1.49</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.testng</groupId>\n+      <artifactId>testng</artifactId>\n+      <version>6.8.5</version>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+</project>"
        },
        {
            "sha": "f267d66adac7cbc50e51b6badbf18c6889876a0b",
            "filename": "src/main/java/org/cryptosis/CipherUtil.java",
            "status": "added",
            "additions": 69,
            "deletions": 0,
            "changes": 69,
            "blob_url": "https://github.com/vt-middleware/cryptacular/blob/42ec5f97f6af3f8c91822fcc0da1f19bc9b5b9b1/src%2Fmain%2Fjava%2Forg%2Fcryptosis%2FCipherUtil.java",
            "raw_url": "https://github.com/vt-middleware/cryptacular/raw/42ec5f97f6af3f8c91822fcc0da1f19bc9b5b9b1/src%2Fmain%2Fjava%2Forg%2Fcryptosis%2FCipherUtil.java",
            "contents_url": "https://api.github.com/repos/vt-middleware/cryptacular/contents/src%2Fmain%2Fjava%2Forg%2Fcryptosis%2FCipherUtil.java?ref=42ec5f97f6af3f8c91822fcc0da1f19bc9b5b9b1",
            "patch": "@@ -0,0 +1,69 @@\n+package org.cryptosis;\n+\n+import org.bouncycastle.crypto.BlockCipher;\n+import org.bouncycastle.crypto.InvalidCipherTextException;\n+import org.bouncycastle.crypto.modes.GCMBlockCipher;\n+import org.bouncycastle.crypto.params.AEADParameters;\n+import org.bouncycastle.crypto.params.KeyParameter;\n+\n+import javax.crypto.SecretKey;\n+\n+/**\n+ * Utility class that performs encryption and decryption operations using a block cipher.\n+ *\n+ * @author Marvin S. Addison\n+ */\n+public final class CipherUtil\n+{\n+  /** Default nonce size in bytes. */\n+  private static final int DEFAULT_NONCE_SIZE = 16;\n+\n+  /** GCM mac size in bits. */\n+  private static final int GMAC_SIZE_BITS = 256;\n+\n+  /** GCM mac size in bytes. */\n+  private static final int GMAC_SIZE_BYTES = GMAC_SIZE_BITS / 8;\n+\n+  /** Private constructor of utility class. */\n+  private CipherUtil() {}\n+\n+  public static byte[] encrypt(final BlockCipher cipher, final SecretKey key, final byte[] data)\n+  {\n+    final GCMBlockCipher c = new GCMBlockCipher(cipher);\n+    final byte[] nonce = NonceUtil.rfc5116Nonce(DEFAULT_NONCE_SIZE);\n+    final byte[] header = new CiphertextHeader(nonce).encode();\n+    final int outSize = header.length + data.length + data.length % 16 + GMAC_SIZE_BYTES;\n+    final byte[] result = new byte[outSize];\n+    c.init(true, new AEADParameters(new KeyParameter(key.getEncoded()), GMAC_SIZE_BITS, nonce, header));\n+    System.arraycopy(header, 0, result, 0, header.length);\n+    final int offset = c.processBytes(data, 0, data.length, result, header.length);\n+    try {\n+      c.doFinal(result, offset);\n+    } catch (InvalidCipherTextException e) {\n+      throw new RuntimeException(\"Encryption failed\", e);\n+    }\n+    return result;\n+  }\n+\n+  public static byte[] decrypt(final BlockCipher cipher, final SecretKey key, final byte[] data)\n+  {\n+    final CiphertextHeader header = CiphertextHeader.decode(data);\n+    final GCMBlockCipher c = new GCMBlockCipher(cipher);\n+    final int outSize = data.length - header.getNonce().length - GMAC_SIZE_BYTES;\n+    byte[] result = new byte[outSize];\n+    c.init(false, new AEADParameters(new KeyParameter(key.getEncoded()), GMAC_SIZE_BITS, header.getNonce()));\n+    int length = c.processBytes(data, 0, data.length, result, header.getLength());\n+    try {\n+      length += c.doFinal(result, length);\n+    } catch (InvalidCipherTextException e) {\n+      throw new RuntimeException(\"Encryption failed\", e);\n+    }\n+    if (length < result.length) {\n+      final byte[] temp = new byte[length];\n+      System.arraycopy(result, 0, temp, 0, length);\n+      result = temp;\n+    }\n+    return result;\n+  }\n+\n+}"
        },
        {
            "sha": "aa154a0d396c6999091ac30da20e600a01bdf199",
            "filename": "src/main/java/org/cryptosis/CiphertextHeader.java",
            "status": "added",
            "additions": 79,
            "deletions": 0,
            "changes": 79,
            "blob_url": "https://github.com/vt-middleware/cryptacular/blob/42ec5f97f6af3f8c91822fcc0da1f19bc9b5b9b1/src%2Fmain%2Fjava%2Forg%2Fcryptosis%2FCiphertextHeader.java",
            "raw_url": "https://github.com/vt-middleware/cryptacular/raw/42ec5f97f6af3f8c91822fcc0da1f19bc9b5b9b1/src%2Fmain%2Fjava%2Forg%2Fcryptosis%2FCiphertextHeader.java",
            "contents_url": "https://api.github.com/repos/vt-middleware/cryptacular/contents/src%2Fmain%2Fjava%2Forg%2Fcryptosis%2FCiphertextHeader.java?ref=42ec5f97f6af3f8c91822fcc0da1f19bc9b5b9b1",
            "patch": "@@ -0,0 +1,79 @@\n+package org.cryptosis;\n+\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * Cleartext header prepended to ciphertext providing data required for decryption.\n+ *\n+ * @author Marvin S. Addison\n+ */\n+public class CiphertextHeader\n+{\n+  /** Header nonce field value. */\n+  private final byte[] nonce;\n+\n+  /** Header key name field value. */\n+  private String keyName;\n+\n+  /** Header length in bytes. */\n+  private int length;\n+\n+  public CiphertextHeader(final byte[] nonce)\n+  {\n+    this(nonce, null);\n+  }\n+\n+  public CiphertextHeader(final byte[] nonce, final String keyName)\n+  {\n+    this.nonce = nonce;\n+    this.length = 8 + nonce.length;\n+    if (keyName != null) {\n+      this.length += 4 + keyName.getBytes().length;\n+      this.keyName = keyName;\n+    }\n+  }\n+\n+  public int getLength()\n+  {\n+    return this.length;\n+  }\n+\n+  public byte[] getNonce()\n+  {\n+    return this.nonce;\n+  }\n+\n+  public String getKeyName()\n+  {\n+    return this.keyName;\n+  }\n+\n+  public byte[] encode()\n+  {\n+    ByteBuffer bb = ByteBuffer.allocate(this.length);\n+    bb.putInt(this.length);\n+    bb.putInt(nonce.length);\n+    bb.put(nonce);\n+    if (keyName != null) {\n+      final byte[] b = keyName.getBytes();\n+      bb.putInt(b.length);\n+      bb.put(b);\n+    }\n+    return bb.array();\n+  }\n+\n+  public static CiphertextHeader decode(final byte[] data)\n+  {\n+    final ByteBuffer bb = ByteBuffer.wrap(data);\n+    final int length = bb.getInt();\n+    final byte[] nonce = new byte[bb.getInt()];\n+    bb.get(nonce);\n+    String keyName = null;\n+    if (length > nonce.length + 4) {\n+      final byte[] b = new byte[bb.getInt()];\n+      bb.get(b);\n+      keyName = new String(b);\n+    }\n+    return new CiphertextHeader(nonce, keyName);\n+  }\n+}"
        },
        {
            "sha": "b4d3bf007ab7fd2793be5bfa60745a4ba87f8f4e",
            "filename": "src/main/java/org/cryptosis/HashUtil.java",
            "status": "added",
            "additions": 88,
            "deletions": 0,
            "changes": 88,
            "blob_url": "https://github.com/vt-middleware/cryptacular/blob/42ec5f97f6af3f8c91822fcc0da1f19bc9b5b9b1/src%2Fmain%2Fjava%2Forg%2Fcryptosis%2FHashUtil.java",
            "raw_url": "https://github.com/vt-middleware/cryptacular/raw/42ec5f97f6af3f8c91822fcc0da1f19bc9b5b9b1/src%2Fmain%2Fjava%2Forg%2Fcryptosis%2FHashUtil.java",
            "contents_url": "https://api.github.com/repos/vt-middleware/cryptacular/contents/src%2Fmain%2Fjava%2Forg%2Fcryptosis%2FHashUtil.java?ref=42ec5f97f6af3f8c91822fcc0da1f19bc9b5b9b1",
            "patch": "@@ -0,0 +1,88 @@\n+package org.cryptosis;\n+\n+import org.bouncycastle.crypto.Digest;\n+import org.bouncycastle.crypto.digests.*;\n+import org.bouncycastle.crypto.prng.DigestRandomGenerator;\n+\n+/**\n+ * Utility class for computing cryptographic hashes.\n+ *\n+ * @author  Marvin S. Addison\n+ */\n+public final class HashUtil\n+{\n+  /** Private constructor of utility class. */\n+  private HashUtil() {}\n+\n+  public static byte[] hash(final Digest digest, final byte[] data)\n+  {\n+    final byte[] result = new byte[digest.getDigestSize()];\n+    digest.update(data, 0, data.length);\n+    digest.doFinal(result, 0);\n+    return result;\n+  }\n+\n+  public static byte[] hash(final Digest digest, final byte[] data, final int saltSize)\n+  {\n+    final DigestRandomGenerator rng = new DigestRandomGenerator(digest);\n+    rng.addSeedMaterial(System.nanoTime());\n+    final byte[] salt = new byte[saltSize];\n+    rng.nextBytes(salt);\n+    digest.reset();\n+    return hash(digest, data, salt, 1);\n+  }\n+\n+  public static byte[] hash(final Digest digest, final byte[] data, final byte[] salt)\n+  {\n+    return hash(digest, data, salt, 1);\n+  }\n+\n+  public static byte[] hash(final Digest digest, final byte[] data, final byte[] salt, final int iterations)\n+  {\n+    digest.update(data, 0, data.length);\n+    final int outSize;\n+    if (salt != null) {\n+      digest.update(salt, 0, salt.length);\n+      outSize = digest.getDigestSize() + salt.length;\n+    } else {\n+      outSize = digest.getDigestSize();\n+    }\n+    final byte[] result = new byte[outSize];\n+    int offset = digest.doFinal(result, 0);\n+    for (int i = 1; i < iterations; i++) {\n+      digest.reset();\n+      digest.update(result, 0, offset);\n+      offset = digest.doFinal(result, 0);\n+    }\n+    digest.reset();\n+    if (salt != null) {\n+      System.arraycopy(salt, 0, result, offset, salt.length);\n+    }\n+    return result;\n+  }\n+\n+  public static byte[] sha1Hash(final byte[] data)\n+  {\n+    return hash(new SHA1Digest(), data);\n+  }\n+\n+  public static byte[] sha256Hash(final byte[] data)\n+  {\n+    return hash(new SHA256Digest(), data);\n+  }\n+\n+  public static byte[] sha384Hash(final byte[] data)\n+  {\n+    return hash(new SHA384Digest(), data);\n+  }\n+\n+  public static byte[] sha512Hash(final byte[] data)\n+  {\n+    return hash(new SHA512Digest(), data);\n+  }\n+\n+  public static byte[] sha3Hash(final byte[] data, final int bitLength)\n+  {\n+    return hash(new SHA3Digest(bitLength), data);\n+  }\n+}"
        },
        {
            "sha": "a88737affb2af42905d3be3dbab596cb509500e9",
            "filename": "src/main/java/org/cryptosis/NonceUtil.java",
            "status": "added",
            "additions": 110,
            "deletions": 0,
            "changes": 110,
            "blob_url": "https://github.com/vt-middleware/cryptacular/blob/42ec5f97f6af3f8c91822fcc0da1f19bc9b5b9b1/src%2Fmain%2Fjava%2Forg%2Fcryptosis%2FNonceUtil.java",
            "raw_url": "https://github.com/vt-middleware/cryptacular/raw/42ec5f97f6af3f8c91822fcc0da1f19bc9b5b9b1/src%2Fmain%2Fjava%2Forg%2Fcryptosis%2FNonceUtil.java",
            "contents_url": "https://api.github.com/repos/vt-middleware/cryptacular/contents/src%2Fmain%2Fjava%2Forg%2Fcryptosis%2FNonceUtil.java?ref=42ec5f97f6af3f8c91822fcc0da1f19bc9b5b9b1",
            "patch": "@@ -0,0 +1,110 @@\n+package org.cryptosis;\n+\n+import org.bouncycastle.crypto.BlockCipher;\n+import org.bouncycastle.crypto.digests.SHA256Digest;\n+import org.bouncycastle.crypto.params.KeyParameter;\n+import org.bouncycastle.crypto.prng.SP800SecureRandom;\n+import org.bouncycastle.crypto.prng.SP800SecureRandomBuilder;\n+\n+import javax.crypto.SecretKey;\n+import java.nio.charset.Charset;\n+\n+/**\n+ * Utility class for generating secure nonce and initialization vectors.\n+ *\n+ * @author Marvin S. Addison\n+ */\n+public final class NonceUtil\n+{\n+  /** Fixed part of nonce described in http://tools.ietf.org/html/rfc5116#section-3.2. */\n+  private static final byte[] FIXED_NONCE_PART = \"cryptosis.org.NonceUtils\".getBytes(Charset.forName(\"ASCII\"));\n+\n+\n+  /** Private constructor of utility class. */\n+  private NonceUtil() {}\n+\n+\n+  /**\n+   * Generates a nonce using the strategy described in RFC-5116, section 3.2,\n+   * <a href=\"http://tools.ietf.org/html/rfc5116#section-3.2\">http://tools.ietf.org/html/rfc5116#section-3.2</a>,\n+   * where nonce is composed of a fixed part and a sequential part. The sequential part is provided by a timestamp\n+   * with nanosecond resolution, i.e. {@link System#nanoTime()}.\n+   *\n+   * @param  length  Number of bytes in nonce, in the range 12-32.\n+   *\n+   * @return  Nonce bytes.\n+   */\n+  public static byte[] rfc5116Nonce(final int length)\n+  {\n+    if (length < 12 || length > 32) {\n+      throw new IllegalArgumentException(\"Nonce must be 12 - 32 bytes.\");\n+    }\n+    final byte[] nonce = new byte[length];\n+    System.arraycopy(FIXED_NONCE_PART, 0, nonce, 0, length - 8);\n+    long timestamp = System.nanoTime();\n+    for (int i = length - 8; i > 0; i--) {\n+      nonce[i] = (byte)(timestamp & 0xFF);\n+      timestamp >>= 8;\n+    }\n+    return nonce;\n+  }\n+\n+\n+  /**\n+   * Generates a random IV according to method 1 (encrypted nonce) in NIST SP800-63a, appendix C,\n+   * <a href=\"http://goo.gl/S9z8qF\">http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf</a>,\n+   * suitable for use with any block cipher mode described in that standard.\n+   *\n+   * @param  cipher  Block cipher.\n+   *\n+   * @param  key  Encryption key intended for use with IV.\n+   *\n+   * @return  Cipher block size number of random bytes.\n+   */\n+  public static byte[] nist800IV(final BlockCipher cipher, final SecretKey key)\n+  {\n+    cipher.init(true, new KeyParameter(key.getEncoded()));\n+    final byte[] result = new byte[cipher.getBlockSize()];\n+    cipher.processBlock(rfc5116Nonce(cipher.getBlockSize()), 0, result, 0);\n+    cipher.reset();\n+    return result;\n+  }\n+\n+\n+  /**\n+   * Generates a random IV according to method 2 (pseudorandom) in NIST SP800-63a, appendix C,\n+   * <a href=\"http://goo.gl/S9z8qF\">http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf</a>,\n+   * suitable for use with any block cipher mode described in that standard.\n+   *\n+   * @param  prng  NIST SP800-63a approved pseudorandom number generator.\n+   * @param  blockSize  Cipher block size in bytes.\n+   *\n+   * @return  Cipher block size number of random bytes.\n+   */\n+  public static byte[] nist800IV(final SP800SecureRandom prng, final int blockSize)\n+  {\n+    prng.setSeed(System.nanoTime());\n+    final byte[] iv = new byte[blockSize];\n+    prng.nextBytes(iv);\n+    return iv;\n+  }\n+\n+\n+  /**\n+   * Generates a random IV according to method 2 (pseudorandom) in NIST SP800-63a, appendix C,\n+   * <a href=\"http://goo.gl/S9z8qF\">http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf</a>,\n+   * suitable for use with any block cipher mode described in that standard. This method uses a hash DRBG\n+   * based on a SHA-256 digest function.\n+   *\n+   * @param  cipher  Block cipher.\n+   *\n+   * @return  Cipher block size number of random bytes.\n+   */\n+  public static byte[] nist800IV(final BlockCipher cipher)\n+  {\n+    final byte[] nonce = rfc5116Nonce(cipher.getBlockSize());\n+    return nist800IV(\n+        new SP800SecureRandomBuilder().buildHash(new SHA256Digest(), nonce, false),\n+        cipher.getBlockSize());\n+  }\n+}"
        }
    ]
}