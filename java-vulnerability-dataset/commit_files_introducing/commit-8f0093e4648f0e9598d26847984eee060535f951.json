{
    "sha": "8f0093e4648f0e9598d26847984eee060535f951",
    "node_id": "MDY6Q29tbWl0MjA2MzY4OjhmMDA5M2U0NjQ4ZjBlOTU5OGQyNjg0Nzk4NGVlZTA2MDUzNWY5NTE=",
    "commit": {
        "author": {
            "name": "Nick Burch",
            "email": "nick@apache.org",
            "date": "2015-10-28T17:42:56Z"
        },
        "committer": {
            "name": "Nick Burch",
            "email": "nick@apache.org",
            "date": "2015-10-28T17:42:56Z"
        },
        "message": "#58558 SXSSFCell.setCellValue((RichTextString)null) fixed to work like XSSF and HSSF, with common unit tests to verify this\n\ngit-svn-id: https://svn.apache.org/repos/asf/poi/trunk@1711082 13f79535-47bb-0310-9956-ffa450edef68",
        "tree": {
            "sha": "aaf3542dc8f65fac07ad71a5687e1147be31dec6",
            "url": "https://api.github.com/repos/apache/poi/git/trees/aaf3542dc8f65fac07ad71a5687e1147be31dec6"
        },
        "url": "https://api.github.com/repos/apache/poi/git/commits/8f0093e4648f0e9598d26847984eee060535f951",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/poi/commits/8f0093e4648f0e9598d26847984eee060535f951",
    "html_url": "https://github.com/apache/poi/commit/8f0093e4648f0e9598d26847984eee060535f951",
    "comments_url": "https://api.github.com/repos/apache/poi/commits/8f0093e4648f0e9598d26847984eee060535f951/comments",
    "author": {
        "login": "Gagravarr",
        "id": 1059677,
        "node_id": "MDQ6VXNlcjEwNTk2Nzc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1059677?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Gagravarr",
        "html_url": "https://github.com/Gagravarr",
        "followers_url": "https://api.github.com/users/Gagravarr/followers",
        "following_url": "https://api.github.com/users/Gagravarr/following{/other_user}",
        "gists_url": "https://api.github.com/users/Gagravarr/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Gagravarr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Gagravarr/subscriptions",
        "organizations_url": "https://api.github.com/users/Gagravarr/orgs",
        "repos_url": "https://api.github.com/users/Gagravarr/repos",
        "events_url": "https://api.github.com/users/Gagravarr/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Gagravarr/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "Gagravarr",
        "id": 1059677,
        "node_id": "MDQ6VXNlcjEwNTk2Nzc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1059677?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Gagravarr",
        "html_url": "https://github.com/Gagravarr",
        "followers_url": "https://api.github.com/users/Gagravarr/followers",
        "following_url": "https://api.github.com/users/Gagravarr/following{/other_user}",
        "gists_url": "https://api.github.com/users/Gagravarr/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Gagravarr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Gagravarr/subscriptions",
        "organizations_url": "https://api.github.com/users/Gagravarr/orgs",
        "repos_url": "https://api.github.com/users/Gagravarr/repos",
        "events_url": "https://api.github.com/users/Gagravarr/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Gagravarr/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "974367ed1d3956415ab85244cbc20dfd47c22283",
            "url": "https://api.github.com/repos/apache/poi/commits/974367ed1d3956415ab85244cbc20dfd47c22283",
            "html_url": "https://github.com/apache/poi/commit/974367ed1d3956415ab85244cbc20dfd47c22283"
        }
    ],
    "stats": {
        "total": 57,
        "additions": 47,
        "deletions": 10
    },
    "files": [
        {
            "sha": "2e5e01f21708432af8f49c907c981f64219b7f1f",
            "filename": "src/ooxml/java/org/apache/poi/xssf/streaming/SXSSFCell.java",
            "status": "modified",
            "additions": 14,
            "deletions": 9,
            "changes": 23,
            "blob_url": "https://github.com/apache/poi/blob/8f0093e4648f0e9598d26847984eee060535f951/src%2Fooxml%2Fjava%2Forg%2Fapache%2Fpoi%2Fxssf%2Fstreaming%2FSXSSFCell.java",
            "raw_url": "https://github.com/apache/poi/raw/8f0093e4648f0e9598d26847984eee060535f951/src%2Fooxml%2Fjava%2Forg%2Fapache%2Fpoi%2Fxssf%2Fstreaming%2FSXSSFCell.java",
            "contents_url": "https://api.github.com/repos/apache/poi/contents/src%2Fooxml%2Fjava%2Forg%2Fapache%2Fpoi%2Fxssf%2Fstreaming%2FSXSSFCell.java?ref=8f0093e4648f0e9598d26847984eee060535f951",
            "patch": "@@ -222,16 +222,21 @@ public void setCellValue(Calendar value) {\n      */\n     public void setCellValue(RichTextString value)\n     {\n-        ensureRichTextStringType();\n-\n-        if(value.length() > SpreadsheetVersion.EXCEL2007.getMaxTextLength()){\n-            throw new IllegalArgumentException(\"The maximum length of cell contents (text) is 32,767 characters\");\n-        }\n-\n-        ((RichTextValue)_value).setValue(value);\n+        XSSFRichTextString xvalue = (XSSFRichTextString)value;\n         \n-        if (((XSSFRichTextString)value).hasFormatting())\n-            logger.log(POILogger.WARN, \"SXSSF doesn't support Shared Strings, rich text formatting information has be lost\");\n+        if (xvalue != null) {\n+            ensureRichTextStringType();\n+            \n+            if (xvalue.length() > SpreadsheetVersion.EXCEL2007.getMaxTextLength()) {\n+                throw new IllegalArgumentException(\"The maximum length of cell contents (text) is 32,767 characters\");\n+            }\n+            if (xvalue.hasFormatting())\n+                logger.log(POILogger.WARN, \"SXSSF doesn't support Shared Strings, rich text formatting information has be lost\");\n+            \n+            ((RichTextValue)_value).setValue(xvalue);\n+        } else {\n+            setCellType(CELL_TYPE_BLANK);\n+        }\n     }\n \n     /**"
        },
        {
            "sha": "9cdaf3d18de08b29d0fda6d9f2582954b7f9a90a",
            "filename": "src/testcases/org/apache/poi/ss/usermodel/BaseTestCell.java",
            "status": "modified",
            "additions": 33,
            "deletions": 1,
            "changes": 34,
            "blob_url": "https://github.com/apache/poi/blob/8f0093e4648f0e9598d26847984eee060535f951/src%2Ftestcases%2Forg%2Fapache%2Fpoi%2Fss%2Fusermodel%2FBaseTestCell.java",
            "raw_url": "https://github.com/apache/poi/raw/8f0093e4648f0e9598d26847984eee060535f951/src%2Ftestcases%2Forg%2Fapache%2Fpoi%2Fss%2Fusermodel%2FBaseTestCell.java",
            "contents_url": "https://api.github.com/repos/apache/poi/contents/src%2Ftestcases%2Forg%2Fapache%2Fpoi%2Fss%2Fusermodel%2FBaseTestCell.java?ref=8f0093e4648f0e9598d26847984eee060535f951",
            "patch": "@@ -767,7 +767,39 @@ public void test57008() throws IOException {\n \t\twb1.close();\n \t}\n \n-\tprivate void checkUnicodeValues(Workbook wb) {\n+    /**\n+     * Setting a cell value of a null RichTextString should set\n+     *  the cell to Blank, test case for 58558\n+     */\n+    @Test\n+    public void testSetCellValueNullRichTextString() throws IOException {\n+        Workbook wb = _testDataProvider.createWorkbook();\n+        Sheet sheet = wb.createSheet();\n+        Cell cell = sheet.createRow(0).createCell(0);\n+\n+        RichTextString nullStr = null;\n+        cell.setCellValue(nullStr);\n+        assertEquals(\"\", cell.getStringCellValue());\n+        assertEquals(Cell.CELL_TYPE_BLANK, cell.getCellType());\n+\n+        cell = sheet.createRow(0).createCell(1);\n+        cell.setCellValue(1.2d);\n+        assertEquals(Cell.CELL_TYPE_NUMERIC, cell.getCellType());\n+        cell.setCellValue(nullStr);\n+        assertEquals(\"\", cell.getStringCellValue());\n+        assertEquals(Cell.CELL_TYPE_BLANK, cell.getCellType());\n+\n+        cell = sheet.createRow(0).createCell(1);\n+        cell.setCellValue(wb.getCreationHelper().createRichTextString(\"Test\"));\n+        assertEquals(Cell.CELL_TYPE_STRING, cell.getCellType());\n+        cell.setCellValue(nullStr);\n+        assertEquals(\"\", cell.getStringCellValue());\n+        assertEquals(Cell.CELL_TYPE_BLANK, cell.getCellType());\n+\n+        wb.close();\n+    }\n+\n+    private void checkUnicodeValues(Workbook wb) {\n \t\tassertEquals((wb instanceof HSSFWorkbook ? \"row 0, cell 0 _x0046_ without changes\" : \"row 0, cell 0 F without changes\"), \n \t\t\t\twb.getSheetAt(0).getRow(0).getCell(0).toString());\n \t\tassertEquals((wb instanceof HSSFWorkbook ? \"row 0, cell 1 _x005fx0046_ with changes\" : \"row 0, cell 1 _x005fx0046_ with changes\"), "
        }
    ]
}