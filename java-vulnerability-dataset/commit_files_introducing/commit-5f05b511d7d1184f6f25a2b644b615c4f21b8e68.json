{
    "sha": "5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
    "node_id": "MDY6Q29tbWl0MjA2NDI3OjVmMDViNTExZDdkMTE4NGY2ZjI1YTJiNjQ0YjYxNWM0ZjIxYjhlNjg=",
    "commit": {
        "author": {
            "name": "tballison",
            "email": "tallison@mitre.org",
            "date": "2018-05-17T18:09:36Z"
        },
        "committer": {
            "name": "tballison",
            "email": "tallison@mitre.org",
            "date": "2018-05-17T18:09:36Z"
        },
        "message": "TIKA-2644 - refactor recursiveparserwrapper api",
        "tree": {
            "sha": "ef9c3c0d607c2ec3da15c74071e3ddd74a4a04e8",
            "url": "https://api.github.com/repos/apache/tika/git/trees/ef9c3c0d607c2ec3da15c74071e3ddd74a4a04e8"
        },
        "url": "https://api.github.com/repos/apache/tika/git/commits/5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/tika/commits/5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
    "html_url": "https://github.com/apache/tika/commit/5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
    "comments_url": "https://api.github.com/repos/apache/tika/commits/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/comments",
    "author": {
        "login": "tballison",
        "id": 6739646,
        "node_id": "MDQ6VXNlcjY3Mzk2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6739646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tballison",
        "html_url": "https://github.com/tballison",
        "followers_url": "https://api.github.com/users/tballison/followers",
        "following_url": "https://api.github.com/users/tballison/following{/other_user}",
        "gists_url": "https://api.github.com/users/tballison/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tballison/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tballison/subscriptions",
        "organizations_url": "https://api.github.com/users/tballison/orgs",
        "repos_url": "https://api.github.com/users/tballison/repos",
        "events_url": "https://api.github.com/users/tballison/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tballison/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "tballison",
        "id": 6739646,
        "node_id": "MDQ6VXNlcjY3Mzk2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6739646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tballison",
        "html_url": "https://github.com/tballison",
        "followers_url": "https://api.github.com/users/tballison/followers",
        "following_url": "https://api.github.com/users/tballison/following{/other_user}",
        "gists_url": "https://api.github.com/users/tballison/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tballison/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tballison/subscriptions",
        "organizations_url": "https://api.github.com/users/tballison/orgs",
        "repos_url": "https://api.github.com/users/tballison/repos",
        "events_url": "https://api.github.com/users/tballison/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tballison/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "ca3207c3b0dd408b32a07b70dcfef42aa4d0a9bd",
            "url": "https://api.github.com/repos/apache/tika/commits/ca3207c3b0dd408b32a07b70dcfef42aa4d0a9bd",
            "html_url": "https://github.com/apache/tika/commit/ca3207c3b0dd408b32a07b70dcfef42aa4d0a9bd"
        }
    ],
    "stats": {
        "total": 1169,
        "additions": 829,
        "deletions": 340
    },
    "files": [
        {
            "sha": "38f1973c856f947dabe1d0220947bb5f3ed6ab9b",
            "filename": "CHANGES.txt",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/CHANGES.txt",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/CHANGES.txt",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/CHANGES.txt?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -5,6 +5,9 @@ Release 2.0.0 - ???\n \n    Other changes\n \n+   * Add the RecursiveParserWrapperHandler to improve the RecursiveParserWrapper\n+     API slightly (TIKA-2644).\n+\n    * Upgrade jackson to 2.9.5 (TIKA-2634).\n \n    * Add support for brotli (TIKA-2621)."
        },
        {
            "sha": "399152d6c4023a1ac1a241c106518ab11875e8ef",
            "filename": "tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java",
            "status": "modified",
            "additions": 5,
            "deletions": 3,
            "changes": 8,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-app%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fcli%2FTikaCLI.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-app%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fcli%2FTikaCLI.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-app%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fcli%2FTikaCLI.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -102,6 +102,7 @@\n import org.apache.tika.sax.BodyContentHandler;\n import org.apache.tika.sax.ContentHandlerFactory;\n import org.apache.tika.sax.ExpandedTitleContentHandler;\n+import org.apache.tika.sax.RecursiveParserWrapperHandler;\n import org.apache.tika.xmp.XMPMetadata;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -498,14 +499,15 @@ private void dumpConfig(TikaConfigSerializer.Mode mode) throws Exception {\n \n     private void handleRecursiveJson(URL url, OutputStream output) throws IOException, SAXException, TikaException {\n         Metadata metadata = new Metadata();\n-        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(parser, getContentHandlerFactory(type));\n+        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(parser);\n+        RecursiveParserWrapperHandler handler = new RecursiveParserWrapperHandler(getContentHandlerFactory(type), -1);\n         try (InputStream input = TikaInputStream.get(url, metadata)) {\n-            wrapper.parse(input, null, metadata, context);\n+            wrapper.parse(input, handler, metadata, context);\n         }\n         JsonMetadataList.setPrettyPrinting(prettyPrint);\n         Writer writer = getOutputWriter(output, encoding);\n         try {\n-            JsonMetadataList.toJson(wrapper.getMetadata(), writer);\n+            JsonMetadataList.toJson(handler.getMetadataList(), writer);\n         } finally {\n             writer.flush();\n         }"
        },
        {
            "sha": "3f40dd324e62c1cbb7b2f66f9460be033781e077",
            "filename": "tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java",
            "status": "modified",
            "additions": 9,
            "deletions": 5,
            "changes": 14,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-app%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fgui%2FTikaGUI.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-app%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fgui%2FTikaGUI.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-app%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fgui%2FTikaGUI.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -81,6 +81,7 @@\n import org.apache.tika.sax.BasicContentHandlerFactory;\n import org.apache.tika.sax.BodyContentHandler;\n import org.apache.tika.sax.ContentHandlerDecorator;\n+import org.apache.tika.sax.RecursiveParserWrapperHandler;\n import org.apache.tika.sax.TeeContentHandler;\n import org.apache.tika.sax.XHTMLContentHandler;\n import org.xml.sax.Attributes;\n@@ -396,13 +397,16 @@ private void handleStream(InputStream input, Metadata md)\n             );\n         }\n         if (isReset) {\n-            RecursiveParserWrapper wrapper = new RecursiveParserWrapper(parser,\n-                    new BasicContentHandlerFactory(\n-                            BasicContentHandlerFactory.HANDLER_TYPE.BODY, -1));\n-            wrapper.parse(input, null, new Metadata(), new ParseContext());\n+            RecursiveParserWrapperHandler recursiveParserWrapperHandler =\n+                    new RecursiveParserWrapperHandler(\n+                            new BasicContentHandlerFactory(\n+                                    BasicContentHandlerFactory.HANDLER_TYPE.BODY, -1),\n+                            -1);\n+            RecursiveParserWrapper wrapper = new RecursiveParserWrapper(parser);\n+            wrapper.parse(input, recursiveParserWrapperHandler, new Metadata(), new ParseContext());\n             StringWriter jsonBuffer = new StringWriter();\n             JsonMetadataList.setPrettyPrinting(true);\n-            JsonMetadataList.toJson(wrapper.getMetadata(), jsonBuffer);\n+            JsonMetadataList.toJson(recursiveParserWrapperHandler.getMetadataList(), jsonBuffer);\n             setText(json, jsonBuffer.toString());\n         }\n         layout.show(cards, \"metadata\");"
        },
        {
            "sha": "60c6d6b7b49b23cba53414a26f54bf05a8fbfc1e",
            "filename": "tika-app/src/test/java/org/apache/tika/cli/TikaCLIBatchIntegrationTest.java",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-app%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fcli%2FTikaCLIBatchIntegrationTest.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-app%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fcli%2FTikaCLIBatchIntegrationTest.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-app%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fcli%2FTikaCLIBatchIntegrationTest.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -35,6 +35,7 @@\n import org.apache.tika.metadata.Metadata;\n import org.apache.tika.metadata.serialization.JsonMetadataList;\n import org.apache.tika.parser.RecursiveParserWrapper;\n+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -108,7 +109,7 @@ public void testJsonRecursiveBatchIntegration() throws Exception {\n         try (Reader reader = Files.newBufferedReader(jsonFile, UTF_8)) {\n             List<Metadata> metadataList = JsonMetadataList.fromJson(reader);\n             assertEquals(12, metadataList.size());\n-            assertTrue(metadataList.get(6).get(RecursiveParserWrapper.TIKA_CONTENT).contains(\"human events\"));\n+            assertTrue(metadataList.get(6).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT).contains(\"human events\"));\n         }\n     }\n "
        },
        {
            "sha": "5ccab1737ee0aa3b9269478ca7a6a13d83d756aa",
            "filename": "tika-batch/src/main/java/org/apache/tika/batch/fs/BasicTikaFSConsumer.java",
            "status": "modified",
            "additions": 32,
            "deletions": 20,
            "changes": 52,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-batch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fbatch%2Ffs%2FBasicTikaFSConsumer.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-batch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fbatch%2Ffs%2FBasicTikaFSConsumer.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-batch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fbatch%2Ffs%2FBasicTikaFSConsumer.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -22,6 +22,8 @@\n import java.io.InputStream;\n import java.io.OutputStream;\n import java.io.UnsupportedEncodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n import java.util.concurrent.ArrayBlockingQueue;\n \n import org.apache.commons.io.IOUtils;\n@@ -45,29 +47,45 @@\n public class BasicTikaFSConsumer extends AbstractFSConsumer {\n \n     private boolean parseRecursively = true;\n-    private final ParserFactory parserFactory;\n+    private final Parser parser;\n     private final ContentHandlerFactory contentHandlerFactory;\n     private final OutputStreamFactory fsOSFactory;\n-    private final TikaConfig config;\n-    private String outputEncoding = UTF_8.toString();\n-\n \n+    private Charset outputEncoding = StandardCharsets.UTF_8;\n+\n+    /**\n+     * @param queue\n+     * @param parserFactory\n+     * @param contentHandlerFactory\n+     * @param fsOSFactory\n+     * @param tikaConfig\n+     *\n+     * @deprecated use {@link BasicTikaFSConsumer#BasicTikaFSConsumer(ArrayBlockingQueue, Parser, ContentHandlerFactory, OutputStreamFactory)}\n+     */\n+    @Deprecated\n     public BasicTikaFSConsumer(ArrayBlockingQueue<FileResource> queue,\n                                ParserFactory parserFactory,\n                                ContentHandlerFactory contentHandlerFactory,\n-                               OutputStreamFactory fsOSFactory,\n-                               TikaConfig config) {\n+                               OutputStreamFactory fsOSFactory, TikaConfig tikaConfig) {\n+        super(queue);\n+        this.parser = parserFactory.getParser(tikaConfig);\n+        this.contentHandlerFactory = contentHandlerFactory;\n+        this.fsOSFactory = fsOSFactory;\n+    }\n+\n+    public BasicTikaFSConsumer(ArrayBlockingQueue<FileResource> queue,\n+                               Parser parser,\n+                               ContentHandlerFactory contentHandlerFactory,\n+                               OutputStreamFactory fsOSFactory) {\n         super(queue);\n-        this.parserFactory = parserFactory;\n+        this.parser = parser;\n         this.contentHandlerFactory = contentHandlerFactory;\n         this.fsOSFactory = fsOSFactory;\n-        this.config = config;\n     }\n \n     @Override\n     public boolean processFileResource(FileResource fileResource) {\n \n-        Parser parser = parserFactory.getParser(config);\n         ParseContext context = new ParseContext();\n         if (parseRecursively) {\n             context.set(Parser.class, parser);\n@@ -87,14 +105,8 @@ public boolean processFileResource(FileResource fileResource) {\n             return false;\n         }\n         ContentHandler handler;\n-        try {\n-            handler = contentHandlerFactory.getNewContentHandler(os, getOutputEncoding());\n-        } catch (UnsupportedEncodingException e) {\n-            incrementHandledExceptions();\n-            LOG.error(getXMLifiedLogMsg(\"output_encoding_ex\", fileResource.getResourceId(), e));\n-            flushAndClose(os);\n-            throw new RuntimeException(e);\n-        }\n+        handler = contentHandlerFactory.getNewContentHandler(os, getOutputEncoding());\n+\n \n         //now actually call parse!\n         Throwable thrown = null;\n@@ -115,11 +127,11 @@ public boolean processFileResource(FileResource fileResource) {\n         return true;\n     }\n \n-    public String getOutputEncoding() {\n+    public Charset getOutputEncoding() {\n         return outputEncoding;\n     }\n \n-    public void setOutputEncoding(String outputEncoding) {\n-        this.outputEncoding = outputEncoding;\n+    public void setOutputEncoding(Charset charset) {\n+        this.outputEncoding = charset;\n     }\n }"
        },
        {
            "sha": "259157f0bb69fe7558e20c5248ebc781ebe7fcca",
            "filename": "tika-batch/src/main/java/org/apache/tika/batch/fs/RecursiveParserWrapperFSConsumer.java",
            "status": "modified",
            "additions": 27,
            "deletions": 15,
            "changes": 42,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-batch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fbatch%2Ffs%2FRecursiveParserWrapperFSConsumer.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-batch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fbatch%2Ffs%2FRecursiveParserWrapperFSConsumer.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-batch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fbatch%2Ffs%2FRecursiveParserWrapperFSConsumer.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -37,6 +37,7 @@\n import org.apache.tika.parser.Parser;\n import org.apache.tika.parser.RecursiveParserWrapper;\n import org.apache.tika.sax.ContentHandlerFactory;\n+import org.apache.tika.sax.RecursiveParserWrapperHandler;\n import org.apache.tika.utils.ExceptionUtils;\n import org.xml.sax.helpers.DefaultHandler;\n \n@@ -49,36 +50,46 @@\n  */\n public class RecursiveParserWrapperFSConsumer extends AbstractFSConsumer {\n \n-\n-    private final ParserFactory parserFactory;\n+    private final Parser parser;\n     private final ContentHandlerFactory contentHandlerFactory;\n     private final OutputStreamFactory fsOSFactory;\n-    private final TikaConfig tikaConfig;\n     private String outputEncoding = \"UTF-8\";\n \n \n+    /**\n+     * @deprecated use {@link RecursiveParserWrapperFSConsumer#RecursiveParserWrapperFSConsumer(ArrayBlockingQueue, Parser, ContentHandlerFactory, OutputStreamFactory)}\n+     * @param queue\n+     * @param parserFactory\n+     * @param contentHandlerFactory\n+     * @param fsOSFactory\n+     * @param config\n+     */\n     public RecursiveParserWrapperFSConsumer(ArrayBlockingQueue<FileResource> queue,\n                                             ParserFactory parserFactory,\n                                             ContentHandlerFactory contentHandlerFactory,\n-                                            OutputStreamFactory fsOSFactory, TikaConfig tikaConfig) {\n+                                            OutputStreamFactory fsOSFactory, TikaConfig config) {\n         super(queue);\n-        this.parserFactory = parserFactory;\n         this.contentHandlerFactory = contentHandlerFactory;\n         this.fsOSFactory = fsOSFactory;\n-        this.tikaConfig = tikaConfig;\n+        Parser parserToWrap = parserFactory.getParser(config);\n+        this.parser = new RecursiveParserWrapper(parserToWrap, contentHandlerFactory);\n+    }\n+\n+    public RecursiveParserWrapperFSConsumer(ArrayBlockingQueue<FileResource> queue,\n+                                            Parser parserToWrap,\n+                                            ContentHandlerFactory contentHandlerFactory,\n+                                            OutputStreamFactory fsOSFactory) {\n+        super(queue);\n+        this.contentHandlerFactory = contentHandlerFactory;\n+        this.fsOSFactory = fsOSFactory;\n+        this.parser = new RecursiveParserWrapper(parserToWrap, contentHandlerFactory);\n     }\n \n     @Override\n     public boolean processFileResource(FileResource fileResource) {\n \n-        Parser wrapped = parserFactory.getParser(tikaConfig);\n-        RecursiveParserWrapper parser = new RecursiveParserWrapper(wrapped, contentHandlerFactory);\n         ParseContext context = new ParseContext();\n \n-//        if (parseRecursively == true) {\n-        context.set(Parser.class, parser);\n-//        }\n-\n         //try to open outputstream first\n         OutputStream os = getOutputStream(fsOSFactory, fileResource);\n \n@@ -100,13 +111,14 @@ public boolean processFileResource(FileResource fileResource) {\n         Throwable thrown = null;\n         List<Metadata> metadataList = null;\n         Metadata containerMetadata = fileResource.getMetadata();\n+        RecursiveParserWrapperHandler handler = new RecursiveParserWrapperHandler(contentHandlerFactory, -1);\n         try {\n-            parse(fileResource.getResourceId(), parser, is, new DefaultHandler(),\n+            parse(fileResource.getResourceId(), parser, is, handler,\n                     containerMetadata, context);\n-            metadataList = parser.getMetadata();\n+            metadataList = handler.getMetadataList();\n         } catch (Throwable t) {\n             thrown = t;\n-            metadataList = parser.getMetadata();\n+            metadataList = handler.getMetadataList();\n             if (metadataList == null) {\n                 metadataList = new LinkedList<>();\n             }"
        },
        {
            "sha": "d55f3be7a199ac88b20a8d96caf35d27312e6c40",
            "filename": "tika-batch/src/main/java/org/apache/tika/batch/fs/builders/BasicTikaFSConsumersBuilder.java",
            "status": "modified",
            "additions": 4,
            "deletions": 3,
            "changes": 7,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-batch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fbatch%2Ffs%2Fbuilders%2FBasicTikaFSConsumersBuilder.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-batch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fbatch%2Ffs%2Fbuilders%2FBasicTikaFSConsumersBuilder.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-batch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fbatch%2Ffs%2Fbuilders%2FBasicTikaFSConsumersBuilder.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -41,6 +41,7 @@\n import org.apache.tika.batch.fs.FSUtil;\n import org.apache.tika.batch.fs.RecursiveParserWrapperFSConsumer;\n import org.apache.tika.config.TikaConfig;\n+import org.apache.tika.parser.Parser;\n import org.apache.tika.sax.BasicContentHandlerFactory;\n import org.apache.tika.sax.ContentHandlerFactory;\n import org.apache.tika.util.ClassLoaderUtil;\n@@ -129,17 +130,17 @@ public ConsumersManager build(Node node, Map<String, String> runtimeAttributes,\n         OutputStreamFactory outputStreamFactory = getOutputStreamFactory(\n                 outputStreamFactoryNode, runtimeAttributes,\n                 contentHandlerFactory, recursiveParserWrapper);\n-\n+        Parser parser = parserFactory.getParser(config);\n         if (recursiveParserWrapper) {\n             for (int i = 0; i < numConsumers; i++) {\n                 FileResourceConsumer c = new RecursiveParserWrapperFSConsumer(queue,\n-                        parserFactory, contentHandlerFactory, outputStreamFactory, config);\n+                        parser, contentHandlerFactory, outputStreamFactory);\n                 consumers.add(c);\n             }\n         } else {\n             for (int i = 0; i < numConsumers; i++) {\n                 FileResourceConsumer c = new BasicTikaFSConsumer(queue,\n-                        parserFactory, contentHandlerFactory, outputStreamFactory, config);\n+                        parser, contentHandlerFactory, outputStreamFactory);\n                 consumers.add(c);\n             }\n         }"
        },
        {
            "sha": "de416e8829d2c4c0b82d794fc17ad994ec9091ab",
            "filename": "tika-batch/src/test/java/org/apache/tika/batch/RecursiveParserWrapperFSConsumerTest.java",
            "status": "modified",
            "additions": 12,
            "deletions": 7,
            "changes": 19,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-batch%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fbatch%2FRecursiveParserWrapperFSConsumerTest.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-batch%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fbatch%2FRecursiveParserWrapperFSConsumerTest.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-batch%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fbatch%2FRecursiveParserWrapperFSConsumerTest.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -35,7 +35,10 @@\n import org.apache.tika.metadata.Metadata;\n import org.apache.tika.metadata.TikaCoreProperties;\n import org.apache.tika.metadata.serialization.JsonMetadataList;\n+import org.apache.tika.parser.AutoDetectParser;\n+import org.apache.tika.parser.Parser;\n import org.apache.tika.parser.RecursiveParserWrapper;\n+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;\n import org.apache.tika.sax.BasicContentHandlerFactory;\n import org.junit.Test;\n \n@@ -69,9 +72,10 @@ public InputStream openInputStream() throws IOException {\n         queue.add(new PoisonFileResource());\n \n         MockOSFactory mockOSFactory = new MockOSFactory();\n+        Parser p = new AutoDetectParserFactory().getParser(new TikaConfig());\n         RecursiveParserWrapperFSConsumer consumer = new RecursiveParserWrapperFSConsumer(\n-                queue, new AutoDetectParserFactory(), new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.TEXT, -1),\n-                mockOSFactory, new TikaConfig());\n+                queue, p, new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.TEXT, -1),\n+                mockOSFactory);\n \n         IFileProcessorFutureResult result = consumer.call();\n         mockOSFactory.getStreams().get(0).flush();\n@@ -80,12 +84,12 @@ queue, new AutoDetectParserFactory(), new BasicContentHandlerFactory(BasicConten\n \n         assertEquals(4, results.size());\n         assertContains(\"another null pointer\",\n-                results.get(2).get(RecursiveParserWrapper.EMBEDDED_EXCEPTION));\n+                results.get(2).get(AbstractRecursiveParserWrapperHandler.EMBEDDED_EXCEPTION));\n \n         assertEquals(\"Nikolai Lobachevsky\", results.get(0).get(\"author\"));\n         for (int i = 1; i < 4; i++) {\n             assertEquals(\"embeddedAuthor\"+i, results.get(i).get(\"author\"));\n-            assertContains(\"some_embedded_content\"+i, results.get(i).get(RecursiveParserWrapper.TIKA_CONTENT));\n+            assertContains(\"some_embedded_content\"+i, results.get(i).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n         }\n     }\n \n@@ -116,9 +120,10 @@ public InputStream openInputStream() throws IOException {\n         queue.add(new PoisonFileResource());\n \n         MockOSFactory mockOSFactory = new MockOSFactory();\n+        Parser p = new AutoDetectParserFactory().getParser(new TikaConfig());\n         RecursiveParserWrapperFSConsumer consumer = new RecursiveParserWrapperFSConsumer(\n-                queue, new AutoDetectParserFactory(), new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.TEXT, -1),\n-                mockOSFactory, new TikaConfig());\n+                queue, p, new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.TEXT, -1),\n+                mockOSFactory);\n \n         IFileProcessorFutureResult result = consumer.call();\n         mockOSFactory.getStreams().get(0).flush();\n@@ -129,7 +134,7 @@ queue, new AutoDetectParserFactory(), new BasicContentHandlerFactory(BasicConten\n                 results.get(0).get(TikaCoreProperties.TIKA_META_EXCEPTION_PREFIX + \"runtime\"));\n         assertEquals(\"Nikolai Lobachevsky\", results.get(0).get(\"author\"));\n         assertEquals(\"embeddedAuthor\", results.get(1).get(\"author\"));\n-        assertContains(\"some_embedded_content\", results.get(1).get(RecursiveParserWrapper.TIKA_CONTENT));\n+        assertContains(\"some_embedded_content\", results.get(1).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n     }\n \n "
        },
        {
            "sha": "c1fb815ecaebf3f99382708d785e57c86e790113",
            "filename": "tika-core/src/main/java/org/apache/tika/parser/RecursiveParserWrapper.java",
            "status": "modified",
            "additions": 164,
            "deletions": 93,
            "changes": 257,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2FRecursiveParserWrapper.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2FRecursiveParserWrapper.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2FRecursiveParserWrapper.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -17,24 +17,23 @@\n  * limitations under the License.\n  */\n \n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.Date;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Set;\n-\n import org.apache.tika.exception.TikaException;\n import org.apache.tika.io.FilenameUtils;\n import org.apache.tika.metadata.Metadata;\n import org.apache.tika.metadata.Property;\n import org.apache.tika.metadata.TikaCoreProperties;\n import org.apache.tika.mime.MediaType;\n+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;\n import org.apache.tika.sax.ContentHandlerFactory;\n+import org.apache.tika.sax.RecursiveParserWrapperHandler;\n import org.apache.tika.utils.ParserUtils;\n import org.xml.sax.ContentHandler;\n import org.xml.sax.SAXException;\n-import org.xml.sax.helpers.DefaultHandler;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+import java.util.Set;\n \n /**\n  * This is a helper class that wraps a parser in a recursive handler.\n@@ -76,38 +75,93 @@ public class RecursiveParserWrapper extends ParserDecorator {\n      */\n     private static final long serialVersionUID = 9086536568120690938L;\n \n-    //move this to TikaCoreProperties?\n-    public final static Property TIKA_CONTENT = Property.internalText(TikaCoreProperties.TIKA_META_PREFIX+\"content\");\n-    public final static Property PARSE_TIME_MILLIS = Property.internalText(TikaCoreProperties.TIKA_META_PREFIX + \"parse_time_millis\");\n+    /**\n+     * @deprecated use {@link org.apache.tika.sax.RecursiveParserWrapperHandler#TIKA_CONTENT}\n+     */\n+    @Deprecated\n+    public final static Property TIKA_CONTENT = AbstractRecursiveParserWrapperHandler.TIKA_CONTENT;\n+    /**\n+     * @deprecated use {@link org.apache.tika.sax.RecursiveParserWrapperHandler#PARSE_TIME_MILLIS}\n+     */\n+    @Deprecated\n+    public final static Property PARSE_TIME_MILLIS = AbstractRecursiveParserWrapperHandler.PARSE_TIME_MILLIS;\n+\n+    /**\n+     * @deprecated use {@link org.apache.tika.sax.RecursiveParserWrapperHandler#EMBEDDED_EXCEPTION}\n+     */\n+    @Deprecated\n     public final static Property WRITE_LIMIT_REACHED =\n-                Property.internalBoolean(TikaCoreProperties.TIKA_META_EXCEPTION_PREFIX + \"write_limit_reached\");\n-    public final static Property EMBEDDED_RESOURCE_LIMIT_REACHED = \n-                Property.internalBoolean(TikaCoreProperties.TIKA_META_EXCEPTION_PREFIX + \"embedded_resource_limit_reached\");\n+            AbstractRecursiveParserWrapperHandler.WRITE_LIMIT_REACHED;\n+    /**\n+     * @deprecated use {@link org.apache.tika.sax.RecursiveParserWrapperHandler#EMBEDDED_RESOURCE_LIMIT_REACHED}\n+     */\n+    @Deprecated\n+    public final static Property EMBEDDED_RESOURCE_LIMIT_REACHED =\n+            AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_LIMIT_REACHED;\n \n-    public final static Property EMBEDDED_EXCEPTION = ParserUtils.EMBEDDED_EXCEPTION;\n-    //move this to TikaCoreProperties?\n-    public final static Property EMBEDDED_RESOURCE_PATH = \n-                Property.internalText(TikaCoreProperties.TIKA_META_PREFIX+\"embedded_resource_path\");\n- \n-    private final Parser wrappedParser;\n-    private final ContentHandlerFactory contentHandlerFactory;\n-    private final List<Metadata> metadatas = new LinkedList<>();\n+    /**\n+     * @deprecated use {@link org.apache.tika.sax.RecursiveParserWrapperHandler#EMBEDDED_EXCEPTION}\n+     */\n+    @Deprecated\n+    public final static Property EMBEDDED_EXCEPTION = AbstractRecursiveParserWrapperHandler.EMBEDDED_EXCEPTION;\n+\n+    /**\n+     * @deprecated use {@link org.apache.tika.sax.RecursiveParserWrapperHandler#EMBEDDED_RESOURCE_PATH}\n+     */\n+    @Deprecated\n+    public final static Property EMBEDDED_RESOURCE_PATH = AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH;\n+\n+    /**\n+     * @deprecated this should be passed in via the {@link RecursiveParserWrapperHandler}\n+     */\n+    @Deprecated\n+    private ContentHandlerFactory contentHandlerFactory = null;\n \n     private final boolean catchEmbeddedExceptions;\n \n-    //used in naming embedded resources that don't have a name.\n-    private int unknownCount = 0;   \n+    /**\n+     * set this on the RecursiveParserWrapperHandler instead\n+     * @deprecated this is here only for legacy behavior; it will be removed in 2.0 and/or 1.20\n+     */\n+    @Deprecated\n     private int maxEmbeddedResources = -1;\n-    private boolean hitMaxEmbeddedResources = false;\n+    /**\n+     * @deprecated this is here only for legacy behavior; it will be removed in 2.0 and/or 1.20\n+     */\n+    @Deprecated\n+    private ParserState lastParseState = null;\n \n+    /**\n+     * Initialize the wrapper with {@link #catchEmbeddedExceptions} set\n+     * to <code>true</code> as default.\n+     *\n+     * @param wrappedParser parser to use for the container documents and the embedded documents\n+     */\n+    public RecursiveParserWrapper(Parser wrappedParser) {\n+        this(wrappedParser, true);\n+    }\n+\n+    /**\n+     *\n+     * @param wrappedParser parser to wrap\n+     * @param catchEmbeddedExceptions whether or not to catch+record embedded exceptions.\n+     *                                If set to <code>false</code>, embedded exceptions will be thrown and\n+     *                                the rest of the file will not be parsed\n+     */\n+    public RecursiveParserWrapper(Parser wrappedParser, boolean catchEmbeddedExceptions) {\n+        super(wrappedParser);\n+        this.catchEmbeddedExceptions = catchEmbeddedExceptions;\n+    }\n     /**\n      * Initialize the wrapper with {@link #catchEmbeddedExceptions} set\n      * to <code>true</code> as default.\n      *\n      * @param wrappedParser parser to use for the container documents and the embedded documents\n      * @param contentHandlerFactory factory to use to generate a new content handler for\n      *                              the container document and each embedded document\n+     * @deprecated use {@link RecursiveParserWrapper#RecursiveParserWrapper(Parser)}\n      */\n+    @Deprecated\n     public RecursiveParserWrapper(Parser wrappedParser, ContentHandlerFactory contentHandlerFactory) {\n         this(wrappedParser, contentHandlerFactory, true);\n     }\n@@ -121,18 +175,19 @@ public RecursiveParserWrapper(Parser wrappedParser, ContentHandlerFactory conten\n      * @param catchEmbeddedExceptions whether or not to catch the embedded exceptions.\n      *                                If set to <code>true</code>, the stack traces will be stored in\n      *                                the metadata object with key: {@link #EMBEDDED_EXCEPTION}.\n+     * @deprecated use {@link RecursiveParserWrapper#RecursiveParserWrapper(Parser, boolean)}\n      */\n+    @Deprecated\n     public RecursiveParserWrapper(Parser wrappedParser,\n                                   ContentHandlerFactory contentHandlerFactory, boolean catchEmbeddedExceptions) {\n         super(wrappedParser);\n-        this.wrappedParser = wrappedParser;\n         this.contentHandlerFactory = contentHandlerFactory;\n         this.catchEmbeddedExceptions = catchEmbeddedExceptions;\n     }\n \n     @Override\n     public Set<MediaType> getSupportedTypes(ParseContext context) {\n-        return wrappedParser.getSupportedTypes(context);\n+        return getWrappedParser().getSupportedTypes(context);\n     }\n \n     /**\n@@ -145,31 +200,34 @@ public Set<MediaType> getSupportedTypes(ParseContext context) {\n      * Make sure to call {@link #reset()} after each parse.\n      */\n     @Override\n-    public void parse(InputStream stream, ContentHandler ignore,\n+    public void parse(InputStream stream, ContentHandler recursiveParserWrapperHandler,\n             Metadata metadata, ParseContext context) throws IOException,\n             SAXException, TikaException {\n-\n-        EmbeddedParserDecorator decorator = new EmbeddedParserDecorator(\"/\");\n+        //this tracks the state of the parent parser, per call to #parse\n+        //in future versions, we can remove lastParseState, and this will be thread-safe\n+        ParserState parserState;\n+        if (recursiveParserWrapperHandler instanceof AbstractRecursiveParserWrapperHandler) {\n+            parserState = new ParserState((AbstractRecursiveParserWrapperHandler)recursiveParserWrapperHandler);\n+        } else {\n+            parserState = new ParserState(new RecursiveParserWrapperHandler(contentHandlerFactory, maxEmbeddedResources));\n+            lastParseState = parserState;\n+        }\n+        EmbeddedParserDecorator decorator = new EmbeddedParserDecorator(getWrappedParser(), \"/\", parserState);\n         context.set(Parser.class, decorator);\n-        ContentHandler localHandler = contentHandlerFactory.getNewContentHandler();\n-        long started = new Date().getTime();\n+        ContentHandler localHandler = parserState.recursiveParserWrapperHandler.getNewContentHandler();\n+        long started = System.currentTimeMillis();\n         try {\n-            wrappedParser.parse(stream, localHandler, metadata, context);\n+            getWrappedParser().parse(stream, localHandler, metadata, context);\n         } catch (SAXException e) {\n             boolean wlr = isWriteLimitReached(e);\n             if (wlr == false) {\n                 throw e;\n             }\n-            metadata.set(WRITE_LIMIT_REACHED, \"true\");\n+            metadata.set(RecursiveParserWrapperHandler.WRITE_LIMIT_REACHED, \"true\");\n         } finally {\n-            long elapsedMillis = new Date().getTime() - started;\n-            metadata.set(PARSE_TIME_MILLIS, Long.toString(elapsedMillis));\n-            addContent(localHandler, metadata);\n-\n-            if (hitMaxEmbeddedResources) {\n-                metadata.set(EMBEDDED_RESOURCE_LIMIT_REACHED, \"true\");\n-            }\n-            metadatas.add(0, ParserUtils.cloneMetadata(metadata));\n+            long elapsedMillis = System.currentTimeMillis() - started;\n+            metadata.set(RecursiveParserWrapperHandler.PARSE_TIME_MILLIS, Long.toString(elapsedMillis));\n+            parserState.recursiveParserWrapperHandler.endDocument(localHandler, metadata);\n         }\n     }\n \n@@ -178,11 +236,20 @@ public void parse(InputStream stream, ContentHandler ignore,\n      * The first element in the returned list represents the \n      * data from the outer container file.  There is no guarantee\n      * about the ordering of the list after that.\n-     * \n+     *\n+     * @deprecated use a {@link RecursiveParserWrapperHandler} instead\n+     *\n      * @return list of Metadata objects that were gathered during the parse\n+     * @throws IllegalStateException if you've used a {@link RecursiveParserWrapperHandler} in your last\n+     * call to {@link #parse(InputStream, ContentHandler, Metadata, ParseContext)}\n      */\n+    @Deprecated\n     public List<Metadata> getMetadata() {\n-        return metadatas;\n+        if (lastParseState != null) {\n+            return ((RecursiveParserWrapperHandler) lastParseState.recursiveParserWrapperHandler).getMetadataList();\n+        } else {\n+            throw new IllegalStateException(\"This is deprecated; please use a RecursiveParserWrapperHandler instead\");\n+        }\n     }\n     \n     /**\n@@ -192,22 +259,29 @@ public List<Metadata> getMetadata() {\n      * \n      * <p>\n      * If this value is < 0 (the default), the wrapper will store all Metadata.\n-     * \n+     * @deprecated set this on a {@link RecursiveParserWrapperHandler}\n      * @param max maximum number of embedded resources to store\n      */\n+    @Deprecated\n     public void setMaxEmbeddedResources(int max) {\n         maxEmbeddedResources = max;\n     }\n     \n \n     /**\n-     * This clears the metadata list and resets {@link #unknownCount} and\n-     * {@link #hitMaxEmbeddedResources}\n+     * This clears the last parser state (metadata list, unknown count, hit embeddedresource count)\n+     *\n+     * @deprecated use a {@link org.apache.tika.sax.RecursiveParserWrapperHandler} instead\n+     * @throws IllegalStateException if you used a {@link RecursiveParserWrapper} in your call\n+     * to {@link #parse(InputStream, ContentHandler, Metadata, ParseContext)}\n      */\n+    @Deprecated\n     public void reset() {\n-        metadatas.clear();\n-        unknownCount = 0;\n-        hitMaxEmbeddedResources = false;\n+        if (lastParseState != null) {\n+            lastParseState = new ParserState(new RecursiveParserWrapperHandler(contentHandlerFactory, maxEmbeddedResources));\n+        } else {\n+            throw new IllegalStateException(\"This is deprecated; please use a RecursiveParserWrapperHandler instead\");\n+        }\n     }\n     \n     /**\n@@ -225,35 +299,20 @@ private boolean isWriteLimitReached(Throwable t) {\n             return t.getCause() != null && isWriteLimitReached(t.getCause());\n         }\n     }\n-    \n-    private String getResourceName(Metadata metadata) {\n+\n+    private String getResourceName(Metadata metadata, ParserState state) {\n         String objectName = \"\";\n         if (metadata.get(TikaCoreProperties.RESOURCE_NAME_KEY) != null) {\n             objectName = metadata.get(TikaCoreProperties.RESOURCE_NAME_KEY);\n-         } else if (metadata.get(TikaCoreProperties.EMBEDDED_RELATIONSHIP_ID) != null) {\n+        } else if (metadata.get(TikaCoreProperties.EMBEDDED_RELATIONSHIP_ID) != null) {\n             objectName = metadata.get(TikaCoreProperties.EMBEDDED_RELATIONSHIP_ID);\n-         } else {\n-            objectName = \"embedded-\" + (++unknownCount);\n-         }\n-         //make sure that there isn't any path info in the objectName\n-         //some parsers can return paths, not just file names\n-         objectName = FilenameUtils.getName(objectName);\n-         return objectName;\n-    }\n-    \n-    private void addContent(ContentHandler handler, Metadata metadata) {\n-        \n-        if (handler.getClass().equals(DefaultHandler.class)){\n-            //no-op: we can't rely on just testing for \n-            //empty content because DefaultHandler's toString()\n-            //returns e.g. \"org.xml.sax.helpers.DefaultHandler@6c8b1edd\"\n         } else {\n-            String content = handler.toString();\n-            if (content != null && content.trim().length() > 0 ) {\n-                metadata.add(TIKA_CONTENT, content);\n-            }\n+            objectName = \"embedded-\" + (++state.unknownCount);\n         }\n-\n+        //make sure that there isn't any path info in the objectName\n+        //some parsers can return paths, not just file names\n+        objectName = FilenameUtils.getName(objectName);\n+        return objectName;\n     }\n \n     \n@@ -262,39 +321,40 @@ private class EmbeddedParserDecorator extends ParserDecorator {\n         private static final long serialVersionUID = 207648200464263337L;\n         \n         private String location = null;\n+        private final ParserState parserState;\n \n         \n-        private EmbeddedParserDecorator(String location) {\n-            super(wrappedParser);\n+        private EmbeddedParserDecorator(Parser parser, String location, ParserState parseState) {\n+            super(parser);\n             this.location = location;\n             if (! this.location.endsWith(\"/\")) {\n                this.location += \"/\";\n             }\n+            this.parserState = parseState;\n         }\n \n         @Override\n         public void parse(InputStream stream, ContentHandler ignore,\n                 Metadata metadata, ParseContext context) throws IOException,\n                 SAXException, TikaException {\n             //Test to see if we should avoid parsing\n-            if (maxEmbeddedResources > -1 && \n-                    metadatas.size() >= maxEmbeddedResources) {\n-                hitMaxEmbeddedResources = true;\n+            if (parserState.recursiveParserWrapperHandler.hasHitMaximumEmbeddedResources()) {\n                 return;\n             }\n             // Work out what this thing is\n-            String objectName = getResourceName(metadata);\n+            String objectName = getResourceName(metadata, parserState);\n             String objectLocation = this.location + objectName;\n       \n-            metadata.add(EMBEDDED_RESOURCE_PATH, objectLocation);\n+            metadata.add(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH, objectLocation);\n+\n+\n+            //get a fresh handler\n+            ContentHandler localHandler = parserState.recursiveParserWrapperHandler.getNewContentHandler();\n+            parserState.recursiveParserWrapperHandler.startEmbeddedDocument(localHandler, metadata);\n \n-            //ignore the content handler that is passed in\n-            //and get a fresh handler\n-            ContentHandler localHandler = contentHandlerFactory.getNewContentHandler();\n-            \n             Parser preContextParser = context.get(Parser.class);\n-            context.set(Parser.class, new EmbeddedParserDecorator(objectLocation));\n-            long started = new Date().getTime();\n+            context.set(Parser.class, new EmbeddedParserDecorator(getWrappedParser(), objectLocation, parserState));\n+            long started = System.currentTimeMillis();\n             try {\n                 super.parse(stream, localHandler, metadata, context);\n             } catch (SAXException e) {\n@@ -316,20 +376,31 @@ public void parse(InputStream stream, ContentHandler ignore,\n                 }\n             } finally {\n                 context.set(Parser.class, preContextParser);\n-                long elapsedMillis = new Date().getTime() - started;\n+                long elapsedMillis = System.currentTimeMillis() - started;\n                 metadata.set(PARSE_TIME_MILLIS, Long.toString(elapsedMillis));\n             }\n             \n             //Because of recursion, we need\n             //to re-test to make sure that we limit the \n             //number of stored resources\n-            if (maxEmbeddedResources > -1 && \n-                    metadatas.size() >= maxEmbeddedResources) {\n-                hitMaxEmbeddedResources = true;\n+            if (parserState.recursiveParserWrapperHandler.hasHitMaximumEmbeddedResources()) {\n                 return;\n             }\n-            addContent(localHandler, metadata);\n-            metadatas.add(ParserUtils.cloneMetadata(metadata));\n-        }        \n+            parserState.recursiveParserWrapperHandler.endEmbeddedDocument(localHandler, metadata);\n+        }\n+    }\n+\n+    /**\n+     * This tracks the state of the parse of a single document.\n+     * In future versions, this will allow the RecursiveParserWrapper to be thread safe.\n+     */\n+    private class ParserState {\n+        private int unknownCount = 0;\n+        private final AbstractRecursiveParserWrapperHandler recursiveParserWrapperHandler;\n+        private ParserState(AbstractRecursiveParserWrapperHandler handler) {\n+            this.recursiveParserWrapperHandler = handler;\n+        }\n+\n+\n     }\n }"
        },
        {
            "sha": "58f9ec65f7b5d3db7a876aa998304da3c3e9301c",
            "filename": "tika-core/src/main/java/org/apache/tika/sax/AbstractRecursiveParserWrapperHandler.java",
            "status": "added",
            "additions": 119,
            "deletions": 0,
            "changes": 119,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fsax%2FAbstractRecursiveParserWrapperHandler.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fsax%2FAbstractRecursiveParserWrapperHandler.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fsax%2FAbstractRecursiveParserWrapperHandler.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.sax;\n+\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.metadata.Property;\n+import org.apache.tika.metadata.TikaCoreProperties;\n+import org.apache.tika.utils.ParserUtils;\n+import org.xml.sax.ContentHandler;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+import java.io.OutputStream;\n+import java.nio.charset.Charset;\n+\n+/**\n+ * This is a special handler to be used only with the {@link org.apache.tika.parser.RecursiveParserWrapper}.\n+ * It allows for finer-grained processing of embedded documents than in the legacy handlers.\n+ * Subclasses can choose how to process individual embedded documents.\n+ */\n+public abstract class AbstractRecursiveParserWrapperHandler extends DefaultHandler {\n+\n+    public final static Property TIKA_CONTENT = Property.internalText(TikaCoreProperties.TIKA_META_PREFIX+\"content\");\n+    public final static Property PARSE_TIME_MILLIS = Property.internalText(TikaCoreProperties.TIKA_META_PREFIX + \"parse_time_millis\");\n+    public final static Property WRITE_LIMIT_REACHED =\n+            Property.internalBoolean(TikaCoreProperties.TIKA_META_EXCEPTION_PREFIX + \"write_limit_reached\");\n+    public final static Property EMBEDDED_RESOURCE_LIMIT_REACHED =\n+            Property.internalBoolean(TikaCoreProperties.TIKA_META_EXCEPTION_PREFIX + \"embedded_resource_limit_reached\");\n+\n+    public final static Property EMBEDDED_EXCEPTION = ParserUtils.EMBEDDED_EXCEPTION;\n+\n+    public final static Property EMBEDDED_RESOURCE_PATH =\n+            Property.internalText(TikaCoreProperties.TIKA_META_PREFIX+\"embedded_resource_path\");\n+\n+    private final ContentHandlerFactory contentHandlerFactory;\n+    private final int maxEmbeddedResources;\n+    private int embeddedResources = 0;\n+\n+    public AbstractRecursiveParserWrapperHandler(ContentHandlerFactory contentHandlerFactory) {\n+        this(contentHandlerFactory, -1);\n+    }\n+\n+    public AbstractRecursiveParserWrapperHandler(ContentHandlerFactory contentHandlerFactory, int maxEmbeddedResources) {\n+        this.contentHandlerFactory = contentHandlerFactory;\n+        this.maxEmbeddedResources = maxEmbeddedResources;\n+    }\n+\n+    public ContentHandler getNewContentHandler() {\n+        return contentHandlerFactory.getNewContentHandler();\n+    }\n+\n+    public ContentHandler getNewContentHandler(OutputStream os, Charset charset) {\n+        return contentHandlerFactory.getNewContentHandler(os, charset);\n+    }\n+\n+    /**\n+     * This is called before parsing each embedded document.  Override this\n+     * for custom behavior.  Make sure to call this in your custom classes\n+     * because this tracks the number of embedded documents.\n+     *\n+     * @param contentHandler local handler to be used on this embedded document\n+     * @param metadata embedded document's metadata\n+     */\n+    public void startEmbeddedDocument(ContentHandler contentHandler, Metadata metadata) throws SAXException {\n+        embeddedResources++;\n+    }\n+    /**\n+     * This is called after parsing each embedded document.  Override this\n+     * for custom behavior.  This is currently a no-op.\n+     *\n+     * @param contentHandler content handler that was used on this embedded document\n+     * @param metadata metadata for this embedded document\n+     * @throws SAXException\n+     */\n+    public void endEmbeddedDocument(ContentHandler contentHandler, Metadata metadata) throws SAXException {\n+    }\n+\n+    /**\n+     * This is called after the full parse has completed.  Override this\n+     * for custom behavior.  Make sure to call this as <code>super.endDocument(...)</code>\n+     * in subclasses because this adds whether or not the embedded resource\n+     * maximum has been hit to the metadata.\n+     *\n+     * @param contentHandler content handler that was used on the main document\n+     * @param metadata metadata that was gathered for the main document\n+     * @throws SAXException\n+     */\n+    public void endDocument(ContentHandler contentHandler, Metadata metadata) throws SAXException {\n+        if (hasHitMaximumEmbeddedResources()) {\n+            metadata.set(EMBEDDED_RESOURCE_LIMIT_REACHED, \"true\");\n+        }\n+    }\n+\n+    /**\n+     *\n+     * @return whether this handler has hit the maximum embedded resources during the parse\n+     */\n+    public boolean hasHitMaximumEmbeddedResources() {\n+        if (maxEmbeddedResources > -1 && embeddedResources > maxEmbeddedResources) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+}"
        },
        {
            "sha": "899994e05341a322adfd92053f4f0268328e6e1a",
            "filename": "tika-core/src/main/java/org/apache/tika/sax/BasicContentHandlerFactory.java",
            "status": "modified",
            "additions": 38,
            "deletions": 29,
            "changes": 67,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fsax%2FBasicContentHandlerFactory.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fsax%2FBasicContentHandlerFactory.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fsax%2FBasicContentHandlerFactory.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -19,6 +19,7 @@\n import java.io.OutputStream;\n import java.io.OutputStreamWriter;\n import java.io.UnsupportedEncodingException;\n+import java.nio.charset.Charset;\n import java.util.Locale;\n \n import org.xml.sax.ContentHandler;\n@@ -116,40 +117,48 @@ public ContentHandler getNewContentHandler() {\n \n     @Override\n     public ContentHandler getNewContentHandler(OutputStream os, String encoding) throws UnsupportedEncodingException {\n+        return getNewContentHandler(os, Charset.forName(encoding));\n+    }\n+\n+    @Override\n+    public ContentHandler getNewContentHandler(OutputStream os, Charset charset) {\n \n         if (type == HANDLER_TYPE.IGNORE) {\n             return new DefaultHandler();\n         }\n-\n-        if (writeLimit > -1) {\n-            switch(type) {\n-                case BODY:\n-                    return new WriteOutContentHandler(\n-                            new BodyContentHandler(\n-                                    new OutputStreamWriter(os, encoding)), writeLimit);\n-                case TEXT:\n-                    return new WriteOutContentHandler(new ToTextContentHandler(os, encoding), writeLimit);\n-                case HTML:\n-                    return new WriteOutContentHandler(new ToHTMLContentHandler(os, encoding), writeLimit);\n-                case XML:\n-                    return new WriteOutContentHandler(new ToXMLContentHandler(os, encoding), writeLimit);\n-                default:\n-                    return new WriteOutContentHandler(new ToTextContentHandler(os, encoding), writeLimit);\n-            }\n-        } else {\n-            switch (type) {\n-                case BODY:\n-                    return new BodyContentHandler(new OutputStreamWriter(os, encoding));\n-                case TEXT:\n-                    return new ToTextContentHandler(os, encoding);\n-                case HTML:\n-                    return new ToHTMLContentHandler(os, encoding);\n-                case XML:\n-                    return new ToXMLContentHandler(os, encoding);\n-                default:\n-                    return new ToTextContentHandler(os, encoding);\n-\n+        try {\n+            if (writeLimit > -1) {\n+                switch (type) {\n+                    case BODY:\n+                        return new WriteOutContentHandler(\n+                                new BodyContentHandler(\n+                                        new OutputStreamWriter(os, charset)), writeLimit);\n+                    case TEXT:\n+                        return new WriteOutContentHandler(new ToTextContentHandler(os, charset.name()), writeLimit);\n+                    case HTML:\n+                        return new WriteOutContentHandler(new ToHTMLContentHandler(os, charset.name()), writeLimit);\n+                    case XML:\n+                        return new WriteOutContentHandler(new ToXMLContentHandler(os, charset.name()), writeLimit);\n+                    default:\n+                        return new WriteOutContentHandler(new ToTextContentHandler(os, charset.name()), writeLimit);\n+                }\n+            } else {\n+                switch (type) {\n+                    case BODY:\n+                        return new BodyContentHandler(new OutputStreamWriter(os, charset));\n+                    case TEXT:\n+                        return new ToTextContentHandler(os, charset.name());\n+                    case HTML:\n+                        return new ToHTMLContentHandler(os, charset.name());\n+                    case XML:\n+                        return new ToXMLContentHandler(os, charset.name());\n+                    default:\n+                        return new ToTextContentHandler(os, charset.name());\n+\n+                }\n             }\n+        } catch (UnsupportedEncodingException e) {\n+            throw new RuntimeException(\"couldn't find charset for name: \"+charset);\n         }\n     }\n "
        },
        {
            "sha": "9dd74c49927f64eb9a8e3ab6ee1e021edce6fdb5",
            "filename": "tika-core/src/main/java/org/apache/tika/sax/ContentHandlerFactory.java",
            "status": "modified",
            "additions": 6,
            "deletions": 0,
            "changes": 6,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fsax%2FContentHandlerFactory.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fsax%2FContentHandlerFactory.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fsax%2FContentHandlerFactory.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -21,12 +21,18 @@\n \n import java.io.OutputStream;\n import java.io.UnsupportedEncodingException;\n+import java.nio.charset.Charset;\n \n /**\n  * Interface to allow easier injection of code for getting a new ContentHandler\n  */\n public interface ContentHandlerFactory {\n     public ContentHandler getNewContentHandler();\n+    /**\n+     * @deprecated use {@link #getNewContentHandler(OutputStream, Charset)}\n+     */\n+    @Deprecated\n     public ContentHandler getNewContentHandler(OutputStream os, String encoding) throws UnsupportedEncodingException;\n+    public ContentHandler getNewContentHandler(OutputStream os, Charset charset);\n \n }"
        },
        {
            "sha": "2444a9c1b2f6e93809db8d0e12a1cf63b2856331",
            "filename": "tika-core/src/main/java/org/apache/tika/sax/RecursiveParserWrapperHandler.java",
            "status": "added",
            "additions": 120,
            "deletions": 0,
            "changes": 120,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fsax%2FRecursiveParserWrapperHandler.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fsax%2FRecursiveParserWrapperHandler.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fsax%2FRecursiveParserWrapperHandler.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.sax;\n+\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.utils.ParserUtils;\n+import org.xml.sax.ContentHandler;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+/**\n+ * This is the default implementation of {@link AbstractRecursiveParserWrapperHandler}.\n+ * See its documentation for more details.\n+ *\n+ * This caches the a metadata object for each embedded file and for the container file.\n+ * It places the extracted content in the metadata object, with this key: {@link AbstractRecursiveParserWrapperHandler#TIKA_CONTENT}\n+ * If memory is a concern, subclass AbstractRecursiveParserWrapperHandler to handle each\n+ * embedded document.\n+ * <p>\n+ *     <b>NOTE: This handler must only be used with the {@link org.apache.tika.parser.RecursiveParserWrapper}</b>\n+ * </p>\n+ */\n+public class RecursiveParserWrapperHandler extends AbstractRecursiveParserWrapperHandler {\n+\n+    private final List<Metadata> metadataList = new LinkedList<>();\n+\n+    /**\n+     * Create a handler with no limit on the number of embedded resources\n+     */\n+    public RecursiveParserWrapperHandler(ContentHandlerFactory contentHandlerFactory) {\n+        super(contentHandlerFactory);\n+    }\n+\n+    /**\n+     * Create a handler that limits the number of embedded resources that will be\n+     * parsed\n+     * @param maxEmbeddedResources number of embedded resources that will be parsed\n+     */\n+    public RecursiveParserWrapperHandler(ContentHandlerFactory contentHandlerFactory, int maxEmbeddedResources) {\n+        super(contentHandlerFactory, maxEmbeddedResources);\n+    }\n+\n+    /**\n+     * This is called before parsing an embedded document\n+     *\n+     * @param contentHandler - local content handler to use on the embedded document\n+     * @param metadata metadata to use for the embedded document\n+     * @throws SAXException\n+     */\n+    @Override\n+    public void startEmbeddedDocument(ContentHandler contentHandler, Metadata metadata) throws SAXException {\n+        super.startEmbeddedDocument(contentHandler, metadata);\n+    }\n+\n+    /**\n+     * This is called after parsing an embedded document.\n+     * @param contentHandler local contenthandler used on the embedded document\n+     * @param metadata metadata from the embedded document\n+     * @throws SAXException\n+     */\n+    @Override\n+    public void endEmbeddedDocument(ContentHandler contentHandler, Metadata metadata) throws SAXException {\n+        super.endEmbeddedDocument(contentHandler, metadata);\n+        addContent(contentHandler, metadata);\n+        metadataList.add(ParserUtils.cloneMetadata(metadata));\n+    }\n+\n+    /**\n+     *\n+     * @param contentHandler content handler used on the main document\n+     * @param metadata metadata from the main document\n+     * @throws SAXException\n+     */\n+    @Override\n+    public void endDocument(ContentHandler contentHandler, Metadata metadata) throws SAXException {\n+        super.endDocument(contentHandler, metadata);\n+        addContent(contentHandler, metadata);\n+\n+        metadataList.add(0, ParserUtils.cloneMetadata(metadata));\n+    }\n+\n+    /**\n+     *\n+     * @return a list of Metadata objects, one for the main document and one for each embedded document\n+     */\n+    public List<Metadata> getMetadataList() {\n+        return metadataList;\n+    }\n+\n+    private void addContent(ContentHandler handler, Metadata metadata) {\n+\n+        if (handler.getClass().equals(DefaultHandler.class)){\n+            //no-op: we can't rely on just testing for\n+            //empty content because DefaultHandler's toString()\n+            //returns e.g. \"org.xml.sax.helpers.DefaultHandler@6c8b1edd\"\n+        } else {\n+            String content = handler.toString();\n+            if (content != null && content.trim().length() > 0 ) {\n+                metadata.add(TIKA_CONTENT, content);\n+            }\n+        }\n+    }\n+}"
        },
        {
            "sha": "bd0f263672349c1e3ce0002362ecc5b6b60c40f2",
            "filename": "tika-core/src/test/java/org/apache/tika/MultiThreadedTikaTest.java",
            "status": "modified",
            "additions": 22,
            "deletions": 14,
            "changes": 36,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2FMultiThreadedTikaTest.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2FMultiThreadedTikaTest.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2FMultiThreadedTikaTest.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -22,7 +22,9 @@\n import org.apache.tika.parser.ParseContext;\n import org.apache.tika.parser.Parser;\n import org.apache.tika.parser.RecursiveParserWrapper;\n+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;\n import org.apache.tika.sax.BasicContentHandlerFactory;\n+import org.apache.tika.sax.RecursiveParserWrapperHandler;\n import org.junit.Test;\n import org.xml.sax.helpers.DefaultHandler;\n \n@@ -136,8 +138,10 @@ private void _testAll(Path[] testFiles, int numThreads, int numIterations,\n \n         //use the same parser in all threads\n         Parser parser = new AutoDetectParser();\n+        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(parser,\n+                new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.TEXT, -1));\n         for (int i = 0; i < numThreads; i++) {\n-            executorCompletionService.submit(new TikaRunner(parser, numIterations, testFiles, truth));\n+            executorCompletionService.submit(new TikaRunner(wrapper, numIterations, testFiles, truth));\n         }\n \n         int completed = 0;\n@@ -184,12 +188,14 @@ private static ConcurrentHashMap<Path, Extract> getBaseline(Path[] files) {\n \n             try {\n                 Parser p = new AutoDetectParser();\n-                RecursiveParserWrapper wrapper = new RecursiveParserWrapper(p,\n-                        new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.TEXT, -1));\n+                RecursiveParserWrapper wrapper = new RecursiveParserWrapper(p);\n+                RecursiveParserWrapperHandler handler = new RecursiveParserWrapperHandler(\n+                        new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.TEXT, -1),\n+                        -1);\n                 try (InputStream is = Files.newInputStream(f)) {\n-                    wrapper.parse(is, new DefaultHandler(), new Metadata(), new ParseContext());\n+                    wrapper.parse(is, handler, new Metadata(), new ParseContext());\n                 }\n-                List<Metadata> metadataList = wrapper.getMetadata();\n+                List<Metadata> metadataList = handler.getMetadataList();\n                 baseline.put(f, new Extract(metadataList));\n             } catch (Exception e) {\n                 //swallow\n@@ -198,26 +204,28 @@ private static ConcurrentHashMap<Path, Extract> getBaseline(Path[] files) {\n         return baseline;\n     }\n \n-    private static List<Metadata> getRecursiveMetadata(InputStream is, Parser p) throws Exception {\n+    private static List<Metadata> getRecursiveMetadata(InputStream is, RecursiveParserWrapper wrapper) throws Exception {\n         //different from parent TikaTest in that this extracts text.\n         //can't extract xhtml because \"tmp\" file names wind up in\n         //content's metadata and they'll differ by file.\n-        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(p,\n-                new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.TEXT, -1));\n-        wrapper.parse(is, new DefaultHandler(), new Metadata(), new ParseContext());\n-        return wrapper.getMetadata();\n+\n+        RecursiveParserWrapperHandler handler = new RecursiveParserWrapperHandler(\n+                new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.TEXT, -1),\n+                -1);\n+        wrapper.parse(is, handler, new Metadata(), new ParseContext());\n+        return handler.getMetadataList();\n     }\n \n     //TODO: make this return something useful besides an integer\n     private class TikaRunner implements Callable<Integer> {\n-        private final Parser parser;\n+        private final RecursiveParserWrapper parser;\n         private final int iterations;\n         private final Path[] files;\n         private final Map<Path, Extract> truth;\n \n         private final Random random = new Random();\n \n-        private TikaRunner(Parser parser, int iterations, Path[] files, Map<Path, Extract> truth) {\n+        private TikaRunner(RecursiveParserWrapper parser, int iterations, Path[] files, Map<Path, Extract> truth) {\n             this.parser = parser;\n             this.iterations = iterations;\n             this.files = files;\n@@ -253,8 +261,8 @@ private void assertExtractEquals(Extract extractA, Extract extractB) {\n                     extractA.metadataList.get(i).size(), extractB.metadataList.get(i).size());\n \n             assertEquals(\"content in attachment: \" + i,\n-                    extractA.metadataList.get(i).get(RecursiveParserWrapper.TIKA_CONTENT),\n-                    extractB.metadataList.get(i).get(RecursiveParserWrapper.TIKA_CONTENT));\n+                    extractA.metadataList.get(i).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT),\n+                    extractB.metadataList.get(i).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n         }\n     }\n "
        },
        {
            "sha": "aae63e0aacfc92a0b57f5d0f8052f9523f4a248e",
            "filename": "tika-core/src/test/java/org/apache/tika/TikaTest.java",
            "status": "modified",
            "additions": 20,
            "deletions": 12,
            "changes": 32,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2FTikaTest.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2FTikaTest.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2FTikaTest.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -45,6 +45,7 @@\n import org.apache.tika.parser.RecursiveParserWrapper;\n import org.apache.tika.sax.BasicContentHandlerFactory;\n import org.apache.tika.sax.BodyContentHandler;\n+import org.apache.tika.sax.RecursiveParserWrapperHandler;\n import org.apache.tika.sax.ToXMLContentHandler;\n import org.xml.sax.ContentHandler;\n import org.xml.sax.helpers.DefaultHandler;\n@@ -220,40 +221,47 @@ protected List<Metadata> getRecursiveMetadata(String filePath, Metadata metadata\n \n     protected List<Metadata> getRecursiveMetadata(String filePath, ParseContext context, Metadata metadata) throws Exception {\n         Parser p = new AutoDetectParser();\n-        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(p,\n+        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(p);\n+        RecursiveParserWrapperHandler handler = new RecursiveParserWrapperHandler(\n                 new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.XML, -1));\n+\n         try (InputStream is = getResourceAsStream(\"/test-documents/\" + filePath)) {\n-            wrapper.parse(is, new DefaultHandler(), metadata, context);\n+            wrapper.parse(is, handler, metadata, context);\n         }\n-        return wrapper.getMetadata();\n+        return handler.getMetadataList();\n     }\n \n     protected List<Metadata> getRecursiveMetadata(String filePath, ParseContext context) throws Exception {\n         Parser p = new AutoDetectParser();\n-        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(p,\n+        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(p);\n+\n+        RecursiveParserWrapperHandler handler = new RecursiveParserWrapperHandler(\n                 new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.XML, -1));\n         try (InputStream is = getResourceAsStream(\"/test-documents/\" + filePath)) {\n-            wrapper.parse(is, new DefaultHandler(), new Metadata(), context);\n+            wrapper.parse(is, handler, new Metadata(), context);\n         }\n-        return wrapper.getMetadata();\n+        return handler.getMetadataList();\n     }\n \n     protected List<Metadata> getRecursiveMetadata(String filePath, Parser parserToWrap) throws Exception {\n-        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(parserToWrap,\n+        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(parserToWrap);\n+        RecursiveParserWrapperHandler handler = new RecursiveParserWrapperHandler(\n                 new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.XML, -1));\n         try (InputStream is = getResourceAsStream(\"/test-documents/\" + filePath)) {\n-            wrapper.parse(is, new DefaultHandler(), new Metadata(), new ParseContext());\n+            wrapper.parse(is, handler, new Metadata(), new ParseContext());\n         }\n-        return wrapper.getMetadata();\n+        return handler.getMetadataList();\n     }\n \n     protected List<Metadata> getRecursiveMetadata(String filePath, Parser parserToWrap, ParseContext parseContext) throws Exception {\n-        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(parserToWrap,\n+        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(parserToWrap);\n+        RecursiveParserWrapperHandler handler = new RecursiveParserWrapperHandler(\n                 new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.XML, -1));\n+\n         try (InputStream is = getResourceAsStream(\"/test-documents/\" + filePath)) {\n-            wrapper.parse(is, new DefaultHandler(), new Metadata(), parseContext);\n+            wrapper.parse(is, handler, new Metadata(), parseContext);\n         }\n-        return wrapper.getMetadata();\n+        return handler.getMetadataList();\n     }\n \n "
        },
        {
            "sha": "0a67ad037de65e24772b71c9457ee4af3a90c891",
            "filename": "tika-eval/src/main/java/org/apache/tika/eval/AbstractProfiler.java",
            "status": "modified",
            "additions": 7,
            "deletions": 6,
            "changes": 13,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-eval%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Feval%2FAbstractProfiler.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-eval%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Feval%2FAbstractProfiler.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-eval%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Feval%2FAbstractProfiler.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -61,6 +61,7 @@\n import org.apache.tika.metadata.PagedText;\n import org.apache.tika.metadata.TikaCoreProperties;\n import org.apache.tika.parser.RecursiveParserWrapper;\n+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;\n import org.apache.tika.utils.ExceptionUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -254,7 +255,7 @@ protected void writeProfileData(EvalFilePaths fps, int i, Metadata m,\n             data.put(Cols.FILE_NAME, fps.getRelativeSourceFilePath().getFileName().toString());\n         } else {\n             data.put(Cols.IS_EMBEDDED, TRUE);\n-            data.put(Cols.FILE_NAME, getFileName(m.get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH)));\n+            data.put(Cols.FILE_NAME, getFileName(m.get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH)));\n         }\n         String ext = FilenameUtils.getExtension(data.get(Cols.FILE_NAME));\n         ext = (ext == null) ? \"\" : ext.toLowerCase(Locale.US);\n@@ -391,7 +392,7 @@ protected void writeContentData(String fileId, Metadata m,\n     String getTime(Metadata m) {\n         String elapsed = \"-1\";\n \n-        String v = m.get(RecursiveParserWrapper.PARSE_TIME_MILLIS);\n+        String v = m.get(AbstractRecursiveParserWrapperHandler.PARSE_TIME_MILLIS);\n         if (v != null) {\n             return v;\n         }\n@@ -414,7 +415,7 @@ void getExceptionStrings(Metadata metadata, Map<Cols, String> data) {\n         String fullTrace = metadata.get(TikaCoreProperties.TIKA_META_EXCEPTION_PREFIX + \"runtime\");\n \n         if (fullTrace == null) {\n-            fullTrace = metadata.get(RecursiveParserWrapper.EMBEDDED_EXCEPTION);\n+            fullTrace = metadata.get(AbstractRecursiveParserWrapperHandler.EMBEDDED_EXCEPTION);\n         }\n \n         if (fullTrace != null) {\n@@ -475,7 +476,7 @@ protected static String getContent(Metadata metadata) {\n         if (metadata == null) {\n             return \"\";\n         }\n-        String c = metadata.get(RecursiveParserWrapper.TIKA_CONTENT);\n+        String c = metadata.get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT);\n         if (c == null) {\n             return \"\";\n         }\n@@ -723,7 +724,7 @@ static List<Integer> countAttachments(List<Metadata> list) {\n \n         Map<String, Integer> counts = new HashMap<>();\n         for (int i = 1; i < list.size(); i++) {\n-            String path = list.get(i).get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH);\n+            String path = list.get(i).get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH);\n             if (path == null) {\n                 //shouldn't ever happen\n                 continue;\n@@ -745,7 +746,7 @@ static List<Integer> countAttachments(List<Metadata> list) {\n         }\n \n         for (int i = 1; i < list.size(); i++) {\n-            Integer count = counts.get(list.get(i).get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH));\n+            Integer count = counts.get(list.get(i).get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH));\n             if (count == null) {\n                 count = 0;\n             }"
        },
        {
            "sha": "1ff5f0b6ab8cdd5d644890022efd4ce1abfd0be0",
            "filename": "tika-eval/src/main/java/org/apache/tika/eval/ExtractComparer.java",
            "status": "modified",
            "additions": 6,
            "deletions": 5,
            "changes": 11,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-eval%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Feval%2FExtractComparer.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-eval%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Feval%2FExtractComparer.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-eval%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Feval%2FExtractComparer.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -45,6 +45,7 @@\n import org.apache.tika.metadata.Metadata;\n import org.apache.tika.metadata.TikaCoreProperties;\n import org.apache.tika.parser.RecursiveParserWrapper;\n+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;\n \n public class ExtractComparer extends AbstractProfiler {\n \n@@ -352,10 +353,10 @@ private void writeEmbeddedFilePathData(int i, String fileId, Metadata mA, Metada\n         String pathA = null;\n         String pathB = null;\n         if (mA != null) {\n-            pathA = mA.get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH);\n+            pathA = mA.get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH);\n         }\n         if (mB != null) {\n-            pathB = mB.get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH);\n+            pathB = mB.get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH);\n         }\n         if (pathA != null) {\n             Map<Cols, String> d = new HashMap<>();\n@@ -390,7 +391,7 @@ private long getSourceFileLength(List<Metadata> metadataListA, List<Metadata> me\n \n \n     /**\n-     * Try to find the matching metadata based on the RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH\n+     * Try to find the matching metadata based on the AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH\n      * If you can't find it, return -1;\n      *\n      * @param i                index for match in metadataListA\n@@ -419,11 +420,11 @@ private int getMatch(int i,\n \n         //assume same embedded resource path.  Not always true!\n         Metadata thisMetadata = metadataListA.get(i);\n-        String embeddedPath = thisMetadata.get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH);\n+        String embeddedPath = thisMetadata.get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH);\n         if (embeddedPath != null) {\n             for (int j = 0; j < metadataListB.size(); j++) {\n                 String thatEmbeddedPath = metadataListB.get(j).get(\n-                        RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH);\n+                        AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH);\n                 if (embeddedPath.equals(thatEmbeddedPath)) {\n                     return j;\n                 }"
        },
        {
            "sha": "200bf33ca164ba92b13e6aa637278843cc4fd651",
            "filename": "tika-eval/src/main/java/org/apache/tika/eval/ExtractProfiler.java",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-eval%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Feval%2FExtractProfiler.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-eval%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Feval%2FExtractProfiler.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-eval%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Feval%2FExtractProfiler.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -37,6 +37,7 @@\n import org.apache.tika.eval.io.IDBWriter;\n import org.apache.tika.metadata.Metadata;\n import org.apache.tika.parser.RecursiveParserWrapper;\n+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;\n \n public class ExtractProfiler extends AbstractProfiler {\n \n@@ -247,7 +248,7 @@ private void writeEmbeddedPathData(int i, String fileId, Metadata m,\n         Map<Cols, String> data = new HashMap<>();\n         data.put(Cols.ID, fileId);\n         data.put(Cols.EMBEDDED_FILE_PATH,\n-                m.get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH));\n+                m.get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH));\n         try {\n             writer.writeRow(embeddedFilePathTable, data);\n         } catch (IOException e) {"
        },
        {
            "sha": "d4069190eef85baddb07baea6d16e71f804f13d6",
            "filename": "tika-eval/src/main/java/org/apache/tika/eval/io/ExtractReader.java",
            "status": "modified",
            "additions": 4,
            "deletions": 3,
            "changes": 7,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-eval%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Feval%2Fio%2FExtractReader.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-eval%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Feval%2Fio%2FExtractReader.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-eval%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Feval%2Fio%2FExtractReader.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -24,6 +24,7 @@\n import org.apache.tika.metadata.serialization.JsonMetadataList;\n import org.apache.tika.mime.MediaType;\n import org.apache.tika.parser.RecursiveParserWrapper;\n+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -149,13 +150,13 @@ public List<Metadata> loadExtract(Path extractFile) throws ExtractReaderExceptio\n                     Metadata containerMetadata = metadataList.get(0);\n                     for (int i = 0; i < metadataList.size(); i++) {\n                         Metadata m = metadataList.get(i);\n-                        String c = m.get(RecursiveParserWrapper.TIKA_CONTENT);\n+                        String c = m.get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT);\n                         if (c != null) {\n                             sb.append(c);\n                             sb.append(\" \");\n                         }\n                     }\n-                    containerMetadata.set(RecursiveParserWrapper.TIKA_CONTENT, sb.toString());\n+                    containerMetadata.set(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT, sb.toString());\n                     while (metadataList.size() > 1) {\n                         metadataList.remove(metadataList.size()-1);\n                     }\n@@ -179,7 +180,7 @@ private List<Metadata> generateListFromTextFile(Reader reader,\n         List<Metadata> metadataList = new ArrayList<>();\n         String content = IOUtils.toString(reader);\n         Metadata m = new Metadata();\n-        m.set(RecursiveParserWrapper.TIKA_CONTENT, content);\n+        m.set(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT, content);\n         //Let's hope the file name has a suffix that can\n         //be used to determine the mime.  Could be wrong or missing,\n         //but better than nothing."
        },
        {
            "sha": "de09fa1d16467981735c067dac16cf33edb49694",
            "filename": "tika-eval/src/test/java/org/apache/tika/eval/SimpleComparerTest.java",
            "status": "modified",
            "additions": 8,
            "deletions": 7,
            "changes": 15,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-eval%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Feval%2FSimpleComparerTest.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-eval%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Feval%2FSimpleComparerTest.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-eval%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Feval%2FSimpleComparerTest.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -41,6 +41,7 @@\n import org.apache.tika.eval.util.LanguageIDWrapper;\n import org.apache.tika.metadata.Metadata;\n import org.apache.tika.parser.RecursiveParserWrapper;\n+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;\n import org.junit.Before;\n import org.junit.Ignore;\n import org.junit.Test;\n@@ -184,7 +185,7 @@ public void testEmpty() throws Exception {\n     @Test\n     public void testGetContent() throws Exception {\n         Metadata m = new Metadata();\n-        m.add(RecursiveParserWrapper.TIKA_CONTENT, \"0123456789\");\n+        m.add(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT, \"0123456789\");\n         Map<Cols, String> data = new HashMap<>();\n         String content = getContent(m, 10, data);\n         assertEquals(10, content.length());\n@@ -233,23 +234,23 @@ public void testAccessException() throws Exception {\n     public void testAttachmentCounts() {\n         List<Metadata> list = new ArrayList<>();\n         Metadata m0 = new Metadata();\n-        m0.set(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH, \"dir1/dir2/file.zip\");//bad data should be ignored\n+        m0.set(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH, \"dir1/dir2/file.zip\");//bad data should be ignored\n                                                                                     //in the first metadata object\n         list.add(m0);\n         Metadata m1 = new Metadata();\n-        m1.set(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH, \"/f1.docx/f2.zip/text1.txt\");\n+        m1.set(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH, \"/f1.docx/f2.zip/text1.txt\");\n         list.add(m1);\n         Metadata m2 = new Metadata();\n-        m2.set(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH, \"/f1.docx/f2.zip/text2.txt\");\n+        m2.set(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH, \"/f1.docx/f2.zip/text2.txt\");\n         list.add(m2);\n         Metadata m3 = new Metadata();\n-        m3.set(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH, \"/f1.docx/f2.zip\");\n+        m3.set(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH, \"/f1.docx/f2.zip\");\n         list.add(m3);\n         Metadata m4 = new Metadata();\n-        m4.set(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH, \"/f1.docx\");\n+        m4.set(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH, \"/f1.docx\");\n         list.add(m4);\n         Metadata m5 = new Metadata();\n-        m5.set(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH, \"/f1.docx/text3.txt\");\n+        m5.set(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH, \"/f1.docx/text3.txt\");\n         list.add(m5);\n \n         List<Integer> counts = AbstractProfiler.countAttachments(list);"
        },
        {
            "sha": "47d5934fed7217652a4700b594ed3b3713bf1f0e",
            "filename": "tika-eval/src/test/java/org/apache/tika/eval/io/ExtractReaderTest.java",
            "status": "modified",
            "additions": 13,
            "deletions": 12,
            "changes": 25,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-eval%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Feval%2Fio%2FExtractReaderTest.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-eval%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Feval%2Fio%2FExtractReaderTest.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-eval%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Feval%2Fio%2FExtractReaderTest.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -26,6 +26,7 @@\n import org.apache.tika.TikaTest;\n import org.apache.tika.metadata.Metadata;\n import org.apache.tika.parser.RecursiveParserWrapper;\n+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;\n import org.junit.Before;\n import org.junit.Test;\n \n@@ -47,24 +48,24 @@ public void testBasic() throws Exception {\n         List<Metadata> metadataList = extractReader.loadExtract(testJsonFile);\n \n         assertEquals(2, metadataList.size());\n-        assertEquals(1, metadataList.get(0).getValues(RecursiveParserWrapper.TIKA_CONTENT).length);\n-        assertEquals(1, metadataList.get(1).getValues(RecursiveParserWrapper.TIKA_CONTENT).length);\n-        assertContains(\"fox\", metadataList.get(0).get(RecursiveParserWrapper.TIKA_CONTENT));\n-        assertContains(\"attachment\", metadataList.get(1).get(RecursiveParserWrapper.TIKA_CONTENT));\n+        assertEquals(1, metadataList.get(0).getValues(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT).length);\n+        assertEquals(1, metadataList.get(1).getValues(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT).length);\n+        assertContains(\"fox\", metadataList.get(0).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n+        assertContains(\"attachment\", metadataList.get(1).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n \n         extractReader = new ExtractReader(ExtractReader.ALTER_METADATA_LIST.FIRST_ONLY);\n         metadataList = extractReader.loadExtract(testJsonFile);\n         assertEquals(1, metadataList.size());\n-        assertEquals(1, metadataList.get(0).getValues(RecursiveParserWrapper.TIKA_CONTENT).length);\n-        assertContains(\"fox\", metadataList.get(0).get(RecursiveParserWrapper.TIKA_CONTENT));\n-        assertNotContained(\"attachment\", metadataList.get(0).get(RecursiveParserWrapper.TIKA_CONTENT));\n+        assertEquals(1, metadataList.get(0).getValues(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT).length);\n+        assertContains(\"fox\", metadataList.get(0).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n+        assertNotContained(\"attachment\", metadataList.get(0).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n \n         extractReader = new ExtractReader(ExtractReader.ALTER_METADATA_LIST.CONCATENATE_CONTENT_INTO_FIRST);\n         metadataList = extractReader.loadExtract(testJsonFile);\n         assertEquals(1, metadataList.size());\n-        assertEquals(1, metadataList.get(0).getValues(RecursiveParserWrapper.TIKA_CONTENT).length);\n-        assertContains(\"fox\", metadataList.get(0).get(RecursiveParserWrapper.TIKA_CONTENT));\n-        assertContains(\"attachment\", metadataList.get(0).get(RecursiveParserWrapper.TIKA_CONTENT));\n+        assertEquals(1, metadataList.get(0).getValues(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT).length);\n+        assertContains(\"fox\", metadataList.get(0).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n+        assertContains(\"attachment\", metadataList.get(0).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n     }\n \n     @Test\n@@ -73,9 +74,9 @@ public void testTextBasic() throws IOException {\n         List<Metadata> metadataList = extractReader.loadExtract(testTxtFile);\n         assertEquals(1, metadataList.size());\n         Metadata m = metadataList.get(0);\n-        assertEquals(1, m.getValues(RecursiveParserWrapper.TIKA_CONTENT).length);\n+        assertEquals(1, m.getValues(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT).length);\n         assertEquals(\"the quick brown fox fox fox jumped over the lazy lazy dog\\n\",\n-                m.get(RecursiveParserWrapper.TIKA_CONTENT));\n+                m.get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n \n         //test that the mime is inferred from the file extension\n         assertEquals(\"application/msword\", m.get(Metadata.CONTENT_TYPE));"
        },
        {
            "sha": "d85c2af66cab555a87d44ab12399647448271d72",
            "filename": "tika-example/src/main/java/org/apache/tika/example/ParsingExample.java",
            "status": "modified",
            "additions": 6,
            "deletions": 4,
            "changes": 10,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-example%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fexample%2FParsingExample.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-example%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fexample%2FParsingExample.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-example%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fexample%2FParsingExample.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -40,6 +40,7 @@\n import org.apache.tika.sax.BasicContentHandlerFactory;\n import org.apache.tika.sax.BodyContentHandler;\n import org.apache.tika.sax.ContentHandlerFactory;\n+import org.apache.tika.sax.RecursiveParserWrapperHandler;\n import org.xml.sax.SAXException;\n import org.xml.sax.helpers.DefaultHandler;\n \n@@ -164,15 +165,16 @@ public List<Metadata> recursiveParserWrapperExample() throws IOException,\n         ContentHandlerFactory factory = new BasicContentHandlerFactory(\n                 BasicContentHandlerFactory.HANDLER_TYPE.HTML, -1);\n \n-        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(p, factory);\n+        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(p);\n         Metadata metadata = new Metadata();\n         metadata.set(TikaCoreProperties.RESOURCE_NAME_KEY, \"test_recursive_embedded.docx\");\n         ParseContext context = new ParseContext();\n-\n+        RecursiveParserWrapperHandler handler = new RecursiveParserWrapperHandler(factory, -1);\n         try (InputStream stream = ParsingExample.class.getResourceAsStream(\"test_recursive_embedded.docx\")) {\n-            wrapper.parse(stream, new DefaultHandler(), metadata, context);\n+            wrapper.parse(stream, handler, metadata, context);\n         }\n-        return wrapper.getMetadata();\n+\n+        return handler.getMetadataList();\n     }\n \n     /**"
        },
        {
            "sha": "1044298735470b1fa7502750322d59c9cb1588e9",
            "filename": "tika-parsers/src/main/java/org/apache/tika/parser/multiple/PickBestTextEncodingParser.java",
            "status": "modified",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-parsers%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Fmultiple%2FPickBestTextEncodingParser.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-parsers%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Fmultiple%2FPickBestTextEncodingParser.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-parsers%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Fmultiple%2FPickBestTextEncodingParser.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -170,6 +170,11 @@ public ContentHandler getNewContentHandler(OutputStream os,\n                 String encoding) throws UnsupportedEncodingException {\n             return getNewContentHandler();\n         }\n+\n+        @Override\n+        public ContentHandler getNewContentHandler(OutputStream os, Charset charset) {\n+            return getNewContentHandler();\n+        }\n     }\n \n     protected class CharsetTester {"
        },
        {
            "sha": "5c2e11c30283fe51c04c1e6ffb8ada69dcbd48c8",
            "filename": "tika-parsers/src/test/java/org/apache/tika/parser/RecursiveParserWrapperTest.java",
            "status": "modified",
            "additions": 94,
            "deletions": 27,
            "changes": 121,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2FRecursiveParserWrapperTest.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2FRecursiveParserWrapperTest.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2FRecursiveParserWrapperTest.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -19,6 +19,7 @@\n \n \n import static org.apache.tika.TikaTest.assertContains;\n+import static org.apache.tika.TikaTest.debug;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n@@ -34,8 +35,10 @@\n import org.apache.tika.metadata.Metadata;\n import org.apache.tika.metadata.TikaCoreProperties;\n import org.apache.tika.parser.utils.CommonsDigester;\n+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;\n import org.apache.tika.sax.BasicContentHandlerFactory;\n import org.apache.tika.sax.ContentHandlerFactory;\n+import org.apache.tika.sax.RecursiveParserWrapperHandler;\n import org.apache.tika.utils.ParserUtils;\n import org.junit.Test;\n import org.xml.sax.helpers.DefaultHandler;\n@@ -47,7 +50,7 @@ public void testBasicXML() throws Exception {\n         List<Metadata> list = getMetadata(new Metadata(),\n                 new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.XML, -1));\n         Metadata container = list.get(0);\n-        String content = container.get(RecursiveParserWrapper.TIKA_CONTENT);\n+        String content = container.get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT);\n         //not much differentiates html from xml in this test file\n         assertTrue(content.indexOf(\"<p class=\\\"header\\\" />\") > -1);\n     }\n@@ -57,7 +60,7 @@ public void testBasicHTML() throws Exception {\n         List<Metadata> list = getMetadata(new Metadata(),\n                 new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.HTML, -1));\n         Metadata container = list.get(0);\n-        String content = container.get(RecursiveParserWrapper.TIKA_CONTENT);\n+        String content = container.get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT);\n         //not much differentiates html from xml in this test file\n         assertTrue(content.indexOf(\"<p class=\\\"header\\\"></p>\") > -1);\n     }\n@@ -67,7 +70,7 @@ public void testBasicText() throws Exception {\n         List<Metadata> list = getMetadata(new Metadata(),\n                 new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.TEXT, -1));\n         Metadata container = list.get(0);\n-        String content = container.get(RecursiveParserWrapper.TIKA_CONTENT);\n+        String content = container.get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT);\n         assertTrue(content.indexOf(\"<p \") < 0);\n         assertTrue(content.indexOf(\"embed_0\") > -1);\n     }\n@@ -77,7 +80,7 @@ public void testIgnoreContent() throws Exception {\n         List<Metadata> list = getMetadata(new Metadata(),\n                 new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.IGNORE, -1));\n         Metadata container = list.get(0);\n-        String content = container.get(RecursiveParserWrapper.TIKA_CONTENT);\n+        String content = container.get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT);\n         assertNull(content);\n     }\n \n@@ -88,18 +91,19 @@ public void testCharLimit() throws Exception {\n         Metadata metadata = new Metadata();\n \n         Parser wrapped = new AutoDetectParser();\n-        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(wrapped,\n-                new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.TEXT, 60));\n+        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(wrapped);\n         InputStream stream = RecursiveParserWrapperTest.class.getResourceAsStream(\n                 \"/test-documents/test_recursive_embedded.docx\");\n-        wrapper.parse(stream, new DefaultHandler(), metadata, context);\n-        List<Metadata> list = wrapper.getMetadata();\n+        RecursiveParserWrapperHandler handler = new RecursiveParserWrapperHandler(\n+                new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.TEXT, 60));\n+        wrapper.parse(stream, handler, metadata, context);\n+        List<Metadata> list = handler.getMetadataList();\n \n         assertEquals(5, list.size());\n \n         int wlr = 0;\n         for (Metadata m : list) {\n-            String limitReached = m.get(RecursiveParserWrapper.WRITE_LIMIT_REACHED);\n+            String limitReached = m.get(AbstractRecursiveParserWrapperHandler.WRITE_LIMIT_REACHED);\n             if (limitReached != null && limitReached.equals(\"true\")) {\n                 wlr++;\n             }\n@@ -108,8 +112,12 @@ public void testCharLimit() throws Exception {\n \n     }\n \n+    /**\n+     * @deprecated this will be removed in 1.20 or 2.0\n+     * @throws Exception\n+     */\n     @Test\n-    public void testMaxEmbedded() throws Exception {\n+    public void testMaxEmbeddedLegacy() throws Exception {\n         int maxEmbedded = 4;\n         int totalNoLimit = 12;//including outer container file\n         ParseContext context = new ParseContext();\n@@ -127,7 +135,7 @@ public void testMaxEmbedded() throws Exception {\n         //test default\n         assertEquals(totalNoLimit, list.size());\n \n-        limitReached = list.get(0).get(RecursiveParserWrapper.EMBEDDED_RESOURCE_LIMIT_REACHED);\n+        limitReached = list.get(0).get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_LIMIT_REACHED);\n         assertNull(limitReached);\n \n \n@@ -143,9 +151,9 @@ public void testMaxEmbedded() throws Exception {\n         list = wrapper.getMetadata();\n \n         //add 1 for outer container file\n-        assertEquals(maxEmbedded + 1, list.size());\n+        assertEquals(maxEmbedded, list.size());\n \n-        limitReached = list.get(0).get(RecursiveParserWrapper.EMBEDDED_RESOURCE_LIMIT_REACHED);\n+        limitReached = list.get(0).get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_LIMIT_REACHED);\n         assertEquals(\"true\", limitReached);\n \n         wrapper.reset();\n@@ -158,11 +166,68 @@ public void testMaxEmbedded() throws Exception {\n \n         wrapper.setMaxEmbeddedResources(-2);\n         wrapper.parse(stream, new DefaultHandler(), metadata, context);\n+        assertEquals(totalNoLimit, wrapper.getMetadata().size());\n+        limitReached = wrapper.getMetadata().get(0).get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_LIMIT_REACHED);\n+        assertNull(limitReached);\n+    }\n+\n+    @Test\n+    public void testMaxEmbedded() throws Exception {\n+        int maxEmbedded = 4;\n+        int totalNoLimit = 12;//including outer container file\n+        ParseContext context = new ParseContext();\n+        Metadata metadata = new Metadata();\n+        String limitReached = null;\n+\n+        Parser wrapped = new AutoDetectParser();\n+        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(wrapped);\n+\n+        InputStream stream = RecursiveParserWrapperTest.class.getResourceAsStream(\n+                \"/test-documents/test_recursive_embedded.docx\");\n+        RecursiveParserWrapperHandler handler = new RecursiveParserWrapperHandler(\n+\n+                new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.TEXT,-1));\n+        wrapper.parse(stream, handler, metadata, context);\n+        List<Metadata> list = handler.getMetadataList();\n+        //test default\n         assertEquals(totalNoLimit, list.size());\n-        limitReached = list.get(0).get(RecursiveParserWrapper.EMBEDDED_RESOURCE_LIMIT_REACHED);\n+\n+        limitReached = list.get(0).get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_LIMIT_REACHED);\n+        assertNull(limitReached);\n+\n+        stream.close();\n+\n+        //test setting value\n+        metadata = new Metadata();\n+        stream = RecursiveParserWrapperTest.class.getResourceAsStream(\n+                \"/test-documents/test_recursive_embedded.docx\");\n+        handler = new RecursiveParserWrapperHandler(\n+                new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.TEXT, -1), maxEmbedded);\n+        wrapper.parse(stream, handler, metadata, context);\n+        list = handler.getMetadataList();\n+\n+        //add 1 for outer container file\n+        assertEquals(maxEmbedded, list.size());\n+\n+        limitReached = list.get(0).get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_LIMIT_REACHED);\n+        assertEquals(\"true\", limitReached);\n+\n+        stream.close();\n+\n+        //test setting value < 0\n+        metadata = new Metadata();\n+        stream = RecursiveParserWrapperTest.class.getResourceAsStream(\n+                \"/test-documents/test_recursive_embedded.docx\");\n+        handler = new RecursiveParserWrapperHandler(\n+                new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.TEXT,-1), -2);\n+        wrapper.parse(stream, handler, metadata, context);\n+        list = handler.getMetadataList();\n+        assertEquals(totalNoLimit, list.size());\n+        limitReached = list.get(0).get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_LIMIT_REACHED);\n         assertNull(limitReached);\n     }\n \n+\n     @Test\n     public void testEmbeddedResourcePath() throws Exception {\n \n@@ -184,12 +249,12 @@ public void testEmbeddedResourcePath() throws Exception {\n         List<Metadata> list = getMetadata(metadata,\n                 new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.XML, -1));\n         Metadata container = list.get(0);\n-        String content = container.get(RecursiveParserWrapper.TIKA_CONTENT);\n+        String content = container.get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT);\n         assertTrue(content.indexOf(\"<p class=\\\"header\\\" />\") > -1);\n \n         Set<String> seen = new HashSet<String>();\n         for (Metadata m : list) {\n-            String path = m.get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH);\n+            String path = m.get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH);\n             if (path != null) {\n                 seen.add(path);\n             }\n@@ -231,16 +296,18 @@ public void testPrimaryExcWEmbedded() throws Exception {\n \n         ParseContext context = new ParseContext();\n         Parser wrapped = new AutoDetectParser();\n-        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(wrapped,\n-                new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.TEXT, -1), true);\n+        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(wrapped, true);\n+        RecursiveParserWrapperHandler handler = new RecursiveParserWrapperHandler(\n+                new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.TEXT, -1));\n+\n         String path = \"/test-documents/mock/embedded_then_npe.xml\";\n \n         InputStream stream = null;\n         boolean npe = false;\n         try {\n             stream = RecursiveParserWrapperTest.class.getResourceAsStream(\n                     path);\n-            wrapper.parse(stream, new DefaultHandler(), metadata, context);\n+            wrapper.parse(stream, handler, metadata, context);\n         } catch (TikaException e) {\n             if (e.getCause().getClass().equals(NullPointerException.class)) {\n                 npe = true;\n@@ -250,15 +317,15 @@ public void testPrimaryExcWEmbedded() throws Exception {\n         }\n         assertTrue(\"npe\", npe);\n \n-        List<Metadata> metadataList = wrapper.getMetadata();\n+        List<Metadata> metadataList = handler.getMetadataList();\n         assertEquals(2, metadataList.size());\n         Metadata outerMetadata = metadataList.get(0);\n         Metadata embeddedMetadata = metadataList.get(1);\n-        assertContains(\"main_content\", outerMetadata.get(RecursiveParserWrapper.TIKA_CONTENT));\n+        assertContains(\"main_content\", outerMetadata.get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n         assertEquals(\"embedded_then_npe.xml\", outerMetadata.get(TikaCoreProperties.RESOURCE_NAME_KEY));\n         assertEquals(\"Nikolai Lobachevsky\", outerMetadata.get(\"author\"));\n \n-        assertContains(\"some_embedded_content\", embeddedMetadata.get(RecursiveParserWrapper.TIKA_CONTENT));\n+        assertContains(\"some_embedded_content\", embeddedMetadata.get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n         assertEquals(\"embed1.xml\", embeddedMetadata.get(TikaCoreProperties.RESOURCE_NAME_KEY));\n         assertEquals(\"embeddedAuthor\", embeddedMetadata.get(\"author\"));\n     }\n@@ -269,7 +336,7 @@ public void testDigesters() throws Exception {\n         metadata.set(TikaCoreProperties.RESOURCE_NAME_KEY, \"test_recursive_embedded.docx\");\n         List<Metadata> list = getMetadata(metadata,\n                 new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.TEXT, -1),\n-                true, new CommonsDigester(100000, CommonsDigester.DigestAlgorithm.MD5));\n+                true, new CommonsDigester(100000, \"md5\"));\n         int i = 0;\n         Metadata m0 = list.get(0);\n         Metadata m6 = list.get(6);\n@@ -287,22 +354,22 @@ private List<Metadata> getMetadata(Metadata metadata, ContentHandlerFactory cont\n         if (digester != null) {\n             wrapped = new DigestingParser(wrapped, digester);\n         }\n-        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(wrapped,\n-                contentHandlerFactory, catchEmbeddedExceptions);\n+        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(wrapped, catchEmbeddedExceptions);\n         String path = metadata.get(TikaCoreProperties.RESOURCE_NAME_KEY);\n         if (path == null) {\n             path = \"/test-documents/test_recursive_embedded.docx\";\n         } else {\n             path = \"/test-documents/\" + path;\n         }\n         InputStream stream = null;\n+        RecursiveParserWrapperHandler handler = new RecursiveParserWrapperHandler(contentHandlerFactory);\n         try {\n             stream = TikaInputStream.get(RecursiveParserWrapperTest.class.getResource(path).toURI());\n-            wrapper.parse(stream, new DefaultHandler(), metadata, context);\n+            wrapper.parse(stream, handler, metadata, context);\n         } finally {\n             IOUtils.closeQuietly(stream);\n         }\n-        return wrapper.getMetadata();\n+        return handler.getMetadataList();\n \n     }\n "
        },
        {
            "sha": "def25d16b64e24a7b0712c7771be8ccbbe1ca223",
            "filename": "tika-parsers/src/test/java/org/apache/tika/parser/html/HtmlParserTest.java",
            "status": "modified",
            "additions": 7,
            "deletions": 6,
            "changes": 13,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Fhtml%2FHtmlParserTest.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Fhtml%2FHtmlParserTest.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Fhtml%2FHtmlParserTest.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -71,6 +71,7 @@\n import org.apache.tika.parser.ParseContext;\n import org.apache.tika.parser.Parser;\n import org.apache.tika.parser.RecursiveParserWrapper;\n+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;\n import org.apache.tika.sax.BodyContentHandler;\n import org.apache.tika.sax.LinkContentHandler;\n import org.apache.tika.sax.TeeContentHandler;\n@@ -1249,8 +1250,8 @@ public void testExtractScript() throws Exception {\n         assertEquals(2, metadataList.size());\n         assertEquals(\"MACRO\", metadataList.get(1).get(TikaCoreProperties.EMBEDDED_RESOURCE_TYPE));\n         assertContains(\"cool\",\n-                metadataList.get(1).get(RecursiveParserWrapper.TIKA_CONTENT));\n-        assertNotContained(\"cool\", metadataList.get(0).get(RecursiveParserWrapper.TIKA_CONTENT));\n+                metadataList.get(1).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n+        assertNotContained(\"cool\", metadataList.get(0).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n     }\n \n     @Test\n@@ -1263,16 +1264,16 @@ public void testConfigExtractScript() throws Exception {\n         assertEquals(2, metadataList.size());\n         assertEquals(\"MACRO\", metadataList.get(1).get(TikaCoreProperties.EMBEDDED_RESOURCE_TYPE));\n         assertContains(\"cool\",\n-                metadataList.get(1).get(RecursiveParserWrapper.TIKA_CONTENT));\n-        assertNotContained(\"cool\", metadataList.get(0).get(RecursiveParserWrapper.TIKA_CONTENT));\n+                metadataList.get(1).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n+        assertNotContained(\"cool\", metadataList.get(0).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n \n     }\n \n     @Test\n     public void testDataURI() throws Exception {\n         List<Metadata> metadataList = getRecursiveMetadata(\"testHTML_embedded_img.html\");\n         assertEquals(2, metadataList.size());\n-        String content = metadataList.get(0).get(RecursiveParserWrapper.TIKA_CONTENT);\n+        String content = metadataList.get(0).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT);\n         assertContains(\"some content\", content);\n         //make sure that you've truncated the data: value\n         assertContains(\"src=\\\"data:\\\"\", content);\n@@ -1290,7 +1291,7 @@ public void testDataURIInJS() throws Exception {\n         Parser p = new AutoDetectParser(tikaConfig);\n         List<Metadata> metadataList = getRecursiveMetadata(\"testHTML_embedded_img_in_js.html\", p);\n         assertEquals(3, metadataList.size());\n-        String content = metadataList.get(0).get(RecursiveParserWrapper.TIKA_CONTENT);\n+        String content = metadataList.get(0).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT);\n         assertContains(\"some content\", content);\n         Metadata imgMetadata = metadataList.get(1);\n         assertEquals(\"image/jpeg\", imgMetadata.get(Metadata.CONTENT_TYPE));"
        },
        {
            "sha": "b4790272e3c81fad917e96c3f4cc93f2d751c2da",
            "filename": "tika-parsers/src/test/java/org/apache/tika/parser/jdbc/SQLite3ParserTest.java",
            "status": "modified",
            "additions": 15,
            "deletions": 9,
            "changes": 24,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Fjdbc%2FSQLite3ParserTest.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Fjdbc%2FSQLite3ParserTest.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Fjdbc%2FSQLite3ParserTest.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -41,8 +41,10 @@\n import org.apache.tika.parser.ParseContext;\n import org.apache.tika.parser.Parser;\n import org.apache.tika.parser.RecursiveParserWrapper;\n+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;\n import org.apache.tika.sax.BasicContentHandlerFactory;\n import org.apache.tika.sax.BodyContentHandler;\n+import org.apache.tika.sax.RecursiveParserWrapperHandler;\n import org.apache.tika.sax.ToXMLContentHandler;\n import org.junit.Test;\n import org.xml.sax.ContentHandler;\n@@ -145,31 +147,35 @@ public void testRecursiveParserWrapper() throws Exception {\n         Parser p = new AutoDetectParser();\n \n         RecursiveParserWrapper wrapper =\n-                new RecursiveParserWrapper(p, new BasicContentHandlerFactory(\n-                        BasicContentHandlerFactory.HANDLER_TYPE.BODY, -1));\n+                new RecursiveParserWrapper(p);\n         Metadata metadata = new Metadata();\n+        RecursiveParserWrapperHandler handler = new RecursiveParserWrapperHandler(\n+                new BasicContentHandlerFactory(\n+                        BasicContentHandlerFactory.HANDLER_TYPE.BODY, -1)\n+        );\n+\n         try (InputStream is = getResourceAsStream(TEST_FILE1)) {\n             metadata.set(TikaCoreProperties.RESOURCE_NAME_KEY, TEST_FILE_NAME);\n-            wrapper.parse(is, new BodyContentHandler(-1), metadata, new ParseContext());\n+            wrapper.parse(is, handler, metadata, new ParseContext());\n         }\n-        List<Metadata> metadataList = wrapper.getMetadata();\n+        List<Metadata> metadataList = handler.getMetadataList();\n         int i = 0;\n         assertEquals(5, metadataList.size());\n         //make sure the \\t are inserted in a body handler\n \n-        String table = metadataList.get(0).get(RecursiveParserWrapper.TIKA_CONTENT);\n+        String table = metadataList.get(0).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT);\n         assertContains(\"0\\t2.3\\t2.4\\tlorem\", table);\n         assertContains(\"\u666e\u6797\u65af\u987f\u5927\u5b66\", table);\n \n         //make sure the \\n is inserted\n-        String table2 = metadataList.get(0).get(RecursiveParserWrapper.TIKA_CONTENT);\n+        String table2 = metadataList.get(0).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT);\n         assertContains(\"do eiusmod tempor\\n\", table2);\n \n-        assertContains(\"The quick brown fox\", metadataList.get(2).get(RecursiveParserWrapper.TIKA_CONTENT));\n-        assertContains(\"The quick brown fox\", metadataList.get(4).get(RecursiveParserWrapper.TIKA_CONTENT));\n+        assertContains(\"The quick brown fox\", metadataList.get(2).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n+        assertContains(\"The quick brown fox\", metadataList.get(4).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n \n         //confirm .doc was added to blob\n-        assertEquals(\"/BYTES_COL_0.doc/image1.png\", metadataList.get(1).get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH));\n+        assertEquals(\"/BYTES_COL_0.doc/image1.png\", metadataList.get(1).get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH));\n     }\n \n     @Test"
        },
        {
            "sha": "ebd4ac56683ceaa0fb6e6e7926fb3eff457f0c4f",
            "filename": "tika-parsers/src/test/java/org/apache/tika/parser/mail/RFC822ParserTest.java",
            "status": "modified",
            "additions": 14,
            "deletions": 13,
            "changes": 27,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Fmail%2FRFC822ParserTest.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Fmail%2FRFC822ParserTest.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Fmail%2FRFC822ParserTest.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -58,6 +58,7 @@\n import org.apache.tika.parser.PasswordProvider;\n import org.apache.tika.parser.RecursiveParserWrapper;\n import org.apache.tika.parser.ocr.TesseractOCRParserTest;\n+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;\n import org.apache.tika.sax.BodyContentHandler;\n import org.apache.tika.sax.XHTMLContentHandler;\n import org.junit.BeforeClass;\n@@ -267,17 +268,17 @@ public void testMainBody() throws Exception {\n         //not treated as an attachment. TIKA-2547\n         List<Metadata> metadataList = getRecursiveMetadata(\"testRFC822_oddfrom\");\n         assertEquals(7, metadataList.size());\n-        assertContains(\"Air Quality Planning\", metadataList.get(0).get(RecursiveParserWrapper.TIKA_CONTENT));\n+        assertContains(\"Air Quality Planning\", metadataList.get(0).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n \n         //Make sure text alternative doesn't get treated as an attachment\n         metadataList = getRecursiveMetadata(\"testRFC822_normal_zip\");\n         assertEquals(3, metadataList.size());\n-        assertContains(\"This is the HTML part\", metadataList.get(0).get(RecursiveParserWrapper.TIKA_CONTENT));\n+        assertContains(\"This is the HTML part\", metadataList.get(0).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n         assertEquals(\"application/zip\", metadataList.get(2).get(Metadata.CONTENT_TYPE));\n \n         metadataList = getRecursiveMetadata(\"testRFC822-txt-body\");\n         assertEquals(2, metadataList.size());\n-        assertContains(\"body 1\", metadataList.get(0).get(RecursiveParserWrapper.TIKA_CONTENT));\n+        assertContains(\"body 1\", metadataList.get(0).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n     }\n \n     /**\n@@ -572,7 +573,7 @@ public void testExtractAttachments() throws Exception {\n         assertEquals(\"text/plain; charset=UTF-8\", metadataList.get(1).get(Metadata.CONTENT_TYPE));\n         assertEquals(\"image/png\", metadataList.get(2).get(Metadata.CONTENT_TYPE));\n         assertEquals(\"testPNG.png\", metadataList.get(2).get(TikaCoreProperties.RESOURCE_NAME_KEY));\n-        assertContains(\"This email has a PNG attachment included in it\", metadataList.get(1).get(RecursiveParserWrapper.TIKA_CONTENT));\n+        assertContains(\"This email has a PNG attachment included in it\", metadataList.get(1).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n         assertEquals(null, metadataList.get(1).get(Metadata.CONTENT_DISPOSITION));\n         assertEquals(\"attachment; filename=\\\"testPNG.png\\\"\", metadataList.get(2).get(Metadata.CONTENT_DISPOSITION));\n     }\n@@ -628,12 +629,12 @@ public void testBasicAlternativeBodyHandling() throws Exception {\n          */\n         List<Metadata> metadataList = getRecursiveMetadata(\"testRFC822-multipart\");\n         assertEquals(2, metadataList.size());\n-        String body = metadataList.get(0).get(RecursiveParserWrapper.TIKA_CONTENT);\n+        String body = metadataList.get(0).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT);\n         assertContains(\"body 2\", body);\n         assertNotContained(\"body 1\", body);\n         assertEquals(\"message/rfc822\", metadataList.get(0).get(Metadata.CONTENT_TYPE));\n         assertEquals(\"image/gif\", metadataList.get(1).get(Metadata.CONTENT_TYPE));\n-        assertEquals(\"/logo.gif\", metadataList.get(1).get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH));\n+        assertEquals(\"/logo.gif\", metadataList.get(1).get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH));\n     }\n \n     @Test\n@@ -652,17 +653,17 @@ public void testMixedRelatedMultipart() throws Exception {\n         List<Metadata> metadataList = getRecursiveMetadata(\"testRFC822-mixed-simple\");\n         assertEquals(3, metadataList.size());\n \n-        assertContains(\"body 2\", metadataList.get(0).get(RecursiveParserWrapper.TIKA_CONTENT));\n-        assertNotContained(\"body 1\", metadataList.get(0).get(RecursiveParserWrapper.TIKA_CONTENT));\n+        assertContains(\"body 2\", metadataList.get(0).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n+        assertNotContained(\"body 1\", metadataList.get(0).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n         assertEquals(\"message/rfc822\", metadataList.get(0).get(Metadata.CONTENT_TYPE));\n \n         assertEquals(\"image/jpeg\", metadataList.get(1).get(Metadata.CONTENT_TYPE));\n-        assertEquals(\"/Mary with cooler.jpeg\", metadataList.get(1).get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH));\n+        assertEquals(\"/Mary with cooler.jpeg\", metadataList.get(1).get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH));\n         assertEquals(TikaCoreProperties.EmbeddedResourceType.INLINE.toString(),\n                 metadataList.get(1).get(TikaCoreProperties.EMBEDDED_RESOURCE_TYPE));\n \n         assertEquals(\"image/jpeg\", metadataList.get(2).get(Metadata.CONTENT_TYPE));\n-        assertEquals(\"/mary-coffee.jpg\", metadataList.get(2).get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH));\n+        assertEquals(\"/mary-coffee.jpg\", metadataList.get(2).get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH));\n         assertEquals(TikaCoreProperties.EmbeddedResourceType.ATTACHMENT.toString(),\n                 metadataList.get(2).get(TikaCoreProperties.EMBEDDED_RESOURCE_TYPE));\n     }\n@@ -683,19 +684,19 @@ public void testAlternativeWithComplexMixedChild() throws Exception {\n          */\n         List<Metadata> metadataList = getRecursiveMetadata(\"testRFC822-mixed-with-pdf-inline\");\n         assertEquals(2, metadataList.size());\n-        String body = metadataList.get(0).get(RecursiveParserWrapper.TIKA_CONTENT);\n+        String body = metadataList.get(0).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT);\n         assertContains(\"body 2\", body);\n         assertContains(\"body 3\", body);\n         assertNotContained(\"body 1\", body);\n         assertEquals(\"message/rfc822\", metadataList.get(0).get(Metadata.CONTENT_TYPE));\n         assertEquals(\"application/pdf\", metadataList.get(1).get(Metadata.CONTENT_TYPE));\n-        assertEquals(\"/tzora-titan-4-hummer-xl-manual.pdf\", metadataList.get(1).get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH));\n+        assertEquals(\"/tzora-titan-4-hummer-xl-manual.pdf\", metadataList.get(1).get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH));\n     }\n \n     @Test\n     public void testSimpleBodyInlined() throws Exception {\n         List<Metadata> metadataList = getRecursiveMetadata(\"testRFC822_simple_inline_body.txt\");\n         assertEquals(1, metadataList.size());\n-        assertContains(\"asked\", metadataList.get(0).get(RecursiveParserWrapper.TIKA_CONTENT));\n+        assertContains(\"asked\", metadataList.get(0).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n     }\n }"
        },
        {
            "sha": "f75bd5965b799f90f72c8cb742c272adf03a3135",
            "filename": "tika-parsers/src/test/java/org/apache/tika/parser/mbox/MboxParserTest.java",
            "status": "modified",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Fmbox%2FMboxParserTest.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Fmbox%2FMboxParserTest.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Fmbox%2FMboxParserTest.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -30,6 +30,7 @@\n import org.apache.tika.parser.ParseContext;\n import org.apache.tika.parser.Parser;\n import org.apache.tika.parser.RecursiveParserWrapper;\n+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;\n import org.apache.tika.sax.BodyContentHandler;\n import org.junit.Before;\n import org.junit.Test;\n@@ -174,7 +175,7 @@ public void testTika2478() throws Exception {\n         assertEquals(2, metadataList.size());\n         assertEquals(\"application/mbox\", metadataList.get(0).get(Metadata.CONTENT_TYPE));\n         assertEquals(\"message/rfc822\", metadataList.get(1).get(Metadata.CONTENT_TYPE));\n-        assertContains(\"body 2\", metadataList.get(1).get(RecursiveParserWrapper.TIKA_CONTENT));\n-        assertNotContained(\"body 1\", metadataList.get(1).get(RecursiveParserWrapper.TIKA_CONTENT));\n+        assertContains(\"body 2\", metadataList.get(1).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n+        assertNotContained(\"body 1\", metadataList.get(1).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n     }\n }"
        },
        {
            "sha": "e6aef53de2234a2b630d6474aabd5c7a9da68e17",
            "filename": "tika-parsers/src/test/java/org/apache/tika/parser/microsoft/JackcessParserTest.java",
            "status": "modified",
            "additions": 7,
            "deletions": 6,
            "changes": 13,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Fmicrosoft%2FJackcessParserTest.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Fmicrosoft%2FJackcessParserTest.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Fmicrosoft%2FJackcessParserTest.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -36,6 +36,7 @@\n import org.apache.tika.parser.PasswordProvider;\n import org.apache.tika.parser.RecursiveParserWrapper;\n import org.apache.tika.sax.BasicContentHandlerFactory;\n+import org.apache.tika.sax.RecursiveParserWrapperHandler;\n import org.junit.Test;\n import org.xml.sax.helpers.DefaultHandler;\n \n@@ -46,22 +47,24 @@ public void testBasic() throws Exception {\n \n         Parser p = new AutoDetectParser();\n \n-        RecursiveParserWrapper w = new RecursiveParserWrapper(p,\n-                new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.XML, -1));\n+        RecursiveParserWrapper w = new RecursiveParserWrapper(p);\n \n         for (String fName : new String[]{\"testAccess2.accdb\", \"testAccess2_2000.mdb\",\n                 \"testAccess2_2002-2003.mdb\"}) {\n             InputStream is = null;\n+            RecursiveParserWrapperHandler handler = new RecursiveParserWrapperHandler(\n+                    new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.XML, -1)\n+            );\n             try {\n                 is = this.getResourceAsStream(\"/test-documents/\" + fName);\n \n                 Metadata meta = new Metadata();\n                 ParseContext c = new ParseContext();\n-                w.parse(is, new DefaultHandler(), meta, c);\n+                w.parse(is, handler, meta, c);\n             } finally {\n                 IOUtils.closeQuietly(is);\n             }\n-            List<Metadata> list = w.getMetadata();\n+            List<Metadata> list = handler.getMetadataList();\n             assertEquals(4, list.size());\n             String mainContent = list.get(0).get(RecursiveParserWrapper.TIKA_CONTENT);\n \n@@ -83,8 +86,6 @@ public void testBasic() throws Exception {\n             //test embedded document handling\n             assertContains(\"Test Document with embedded pdf\",\n                     list.get(3).get(RecursiveParserWrapper.TIKA_CONTENT));\n-\n-            w.reset();\n         }\n     }\n "
        },
        {
            "sha": "c17aad23d7d2cbd679ee6899d13a491cd1f7b686",
            "filename": "tika-parsers/src/test/java/org/apache/tika/parser/ocr/TesseractOCRParserTest.java",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Focr%2FTesseractOCRParserTest.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Focr%2FTesseractOCRParserTest.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Focr%2FTesseractOCRParserTest.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -38,6 +38,7 @@\n import org.apache.tika.parser.external.ExternalParser;\n import org.apache.tika.parser.image.ImageParser;\n import org.apache.tika.parser.pdf.PDFParserConfig;\n+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;\n import org.apache.tika.sax.BasicContentHandlerFactory;\n import org.junit.Test;\n import org.xml.sax.helpers.DefaultHandler;\n@@ -181,7 +182,7 @@ private String runOCR(String resource, String[] nonOCRContains, int numMetadatas\n \n         StringBuilder contents = new StringBuilder();\n         for (Metadata m : metadataList) {\n-            contents.append(m.get(RecursiveParserWrapper.TIKA_CONTENT));\n+            contents.append(m.get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n         }\n  \n         for (String needle : nonOCRContains) {"
        },
        {
            "sha": "55489a8b2d91b6168e207c75fe5027749e8422fb",
            "filename": "tika-parsers/src/test/java/org/apache/tika/parser/pdf/PDFParserTest.java",
            "status": "modified",
            "additions": 12,
            "deletions": 9,
            "changes": 21,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Fpdf%2FPDFParserTest.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Fpdf%2FPDFParserTest.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Fpdf%2FPDFParserTest.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -61,9 +61,11 @@\n import org.apache.tika.parser.RecursiveParserWrapper;\n import org.apache.tika.parser.ocr.TesseractOCRConfig;\n import org.apache.tika.parser.ocr.TesseractOCRParser;\n+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;\n import org.apache.tika.sax.BasicContentHandlerFactory;\n import org.apache.tika.sax.BodyContentHandler;\n import org.apache.tika.sax.ContentHandlerDecorator;\n+import org.apache.tika.sax.RecursiveParserWrapperHandler;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n import org.junit.Test;\n@@ -621,21 +623,22 @@ public void testEmbeddedFilesInChildren() throws Exception {\n         //\"regressiveness\" exists only in Unit10.doc not in the container pdf document\n         assertTrue(xml.contains(\"regressiveness\"));\n \n-        RecursiveParserWrapper p = new RecursiveParserWrapper(new AutoDetectParser(),\n-                new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.IGNORE, -1));\n+        RecursiveParserWrapper p = new RecursiveParserWrapper(new AutoDetectParser());\n         ParseContext context = new ParseContext();\n         PDFParserConfig config = new PDFParserConfig();\n         config.setExtractInlineImages(true);\n         config.setExtractUniqueInlineImagesOnly(false);\n         context.set(org.apache.tika.parser.pdf.PDFParserConfig.class, config);\n         context.set(org.apache.tika.parser.Parser.class, p);\n \n+        RecursiveParserWrapperHandler handler = new RecursiveParserWrapperHandler(\n+                new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.IGNORE,-1));\n         try (TikaInputStream tis = TikaInputStream.get(\n                 getResourceAsStream(\"/test-documents/testPDF_childAttachments.pdf\"))) {\n-            p.parse(tis, new BodyContentHandler(-1), new Metadata(), context);\n+            p.parse(tis, handler, new Metadata(), context);\n         }\n \n-        List<Metadata> metadatas = p.getMetadata();\n+        List<Metadata> metadatas = handler.getMetadataList();\n \n         assertEquals(5, metadatas.size());\n         assertNull(metadatas.get(0).get(TikaCoreProperties.RESOURCE_NAME_KEY));\n@@ -660,7 +663,7 @@ public void testEmbeddedJBIG2Image() throws Exception {\n \n         List<Metadata> metadatas = getRecursiveMetadata(\"testPDF_JBIG2.pdf\", context);\n         assertEquals(2, metadatas.size());\n-        assertContains(\"test images compressed using JBIG2\", metadatas.get(0).get(RecursiveParserWrapper.TIKA_CONTENT));\n+        assertContains(\"test images compressed using JBIG2\", metadatas.get(0).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n \n         for (String key : metadatas.get(1).names()) {\n             if (key.startsWith(\"X-TIKA:EXCEPTION\")) {\n@@ -894,13 +897,13 @@ public void testOSSpecificEmbeddedFileExtraction() throws Exception {\n         assertEquals(\"metadata size\", 5, metadatas.size());\n \n         assertEquals(\"file name\", \"Test.txt\", metadatas.get(1).get(TikaCoreProperties.RESOURCE_NAME_KEY));\n-        assertContains(\"os specific\", metadatas.get(1).get(RecursiveParserWrapper.TIKA_CONTENT));\n+        assertContains(\"os specific\", metadatas.get(1).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n         assertEquals(\"file name\", \"TestMac.txt\", metadatas.get(2).get(TikaCoreProperties.RESOURCE_NAME_KEY));\n-        assertContains(\"mac embedded\", metadatas.get(2).get(RecursiveParserWrapper.TIKA_CONTENT));\n+        assertContains(\"mac embedded\", metadatas.get(2).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n         assertEquals(\"file name\", \"TestDos.txt\", metadatas.get(3).get(TikaCoreProperties.RESOURCE_NAME_KEY));\n-        assertContains(\"dos embedded\", metadatas.get(3).get(RecursiveParserWrapper.TIKA_CONTENT));\n+        assertContains(\"dos embedded\", metadatas.get(3).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n         assertEquals(\"file name\", \"TestUnix.txt\", metadatas.get(4).get(TikaCoreProperties.RESOURCE_NAME_KEY));\n-        assertContains(\"unix embedded\", metadatas.get(4).get(RecursiveParserWrapper.TIKA_CONTENT));\n+        assertContains(\"unix embedded\", metadatas.get(4).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n \n     }\n "
        },
        {
            "sha": "47919e9732126bf527a405ba703d478dbfdb0d3c",
            "filename": "tika-parsers/src/test/java/org/apache/tika/parser/pkg/CompressorParserTest.java",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Fpkg%2FCompressorParserTest.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Fpkg%2FCompressorParserTest.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Fpkg%2FCompressorParserTest.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -40,6 +40,7 @@\n import org.apache.tika.mime.MediaType;\n import org.apache.tika.parser.ParseContext;\n import org.apache.tika.parser.RecursiveParserWrapper;\n+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n@@ -83,7 +84,7 @@ public void testBrotli() throws Exception {\n         metadata.set(TikaCoreProperties.RESOURCE_NAME_KEY, \"testBROTLI_compressed.br\");\n         List<Metadata> metadataList = getRecursiveMetadata(\"testBROTLI_compressed.br\", metadata);\n \n-        assertContains(\"XXXXXXXXXXYYYYYYYYYY\", metadataList.get(1).get(RecursiveParserWrapper.TIKA_CONTENT));\n+        assertContains(\"XXXXXXXXXXYYYYYYYYYY\", metadataList.get(1).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n         assertEquals(\"testBROTLI_compressed\", metadataList.get(1).get(TikaCoreProperties.RESOURCE_NAME_KEY));\n     }\n "
        },
        {
            "sha": "ae7eb96e8b68d618e4733ec8890867c2823612cd",
            "filename": "tika-parsers/src/test/java/org/apache/tika/parser/pkg/ZipParserTest.java",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Fpkg%2FZipParserTest.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Fpkg%2FZipParserTest.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Fpkg%2FZipParserTest.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -38,6 +38,7 @@\n import org.apache.tika.parser.ParseContext;\n import org.apache.tika.parser.Parser;\n import org.apache.tika.parser.RecursiveParserWrapper;\n+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;\n import org.apache.tika.sax.BodyContentHandler;\n import org.junit.Test;\n import org.xml.sax.ContentHandler;\n@@ -212,7 +213,7 @@ public void testZipEncrypted() throws Exception {\n         assertContains(\"EncryptedDocumentException: stream (encrypted.txt) is encrypted\", values[0]);\n \n \n-        assertContains(\"hello world\", metadataList.get(1).get(RecursiveParserWrapper.TIKA_CONTENT));\n+        assertContains(\"hello world\", metadataList.get(1).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n     }\n \n     @Test"
        },
        {
            "sha": "05113dda8c8918e4e561b5c20c6848c744725d81",
            "filename": "tika-parsers/src/test/java/org/apache/tika/parser/rtf/RTFParserTest.java",
            "status": "modified",
            "additions": 7,
            "deletions": 5,
            "changes": 12,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Frtf%2FRTFParserTest.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Frtf%2FRTFParserTest.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-parsers%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fparser%2Frtf%2FRTFParserTest.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -49,8 +49,10 @@\n import org.apache.tika.parser.ParseContext;\n import org.apache.tika.parser.Parser;\n import org.apache.tika.parser.RecursiveParserWrapper;\n+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;\n import org.apache.tika.sax.BasicContentHandlerFactory;\n import org.apache.tika.sax.BodyContentHandler;\n+import org.apache.tika.sax.RecursiveParserWrapperHandler;\n import org.apache.tika.sax.WriteOutContentHandler;\n import org.junit.Test;\n import org.xml.sax.ContentHandler;\n@@ -441,7 +443,7 @@ public void testEmbeddedMonster() throws Exception {\n             //directory: _1457338524/HW.txt\n             assertEquals(\"filename equals \",\n                     p.fileName, FilenameUtils.getName(\n-                            metadata.get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH)));\n+                            metadata.get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH)));\n \n             assertEquals(p.mimeType, metadata.get(Metadata.CONTENT_TYPE));\n         }\n@@ -454,15 +456,15 @@ public void testEmbeddedMonster() throws Exception {\n     public void testRegularImages() throws Exception {\n         Parser base = new AutoDetectParser();\n         ParseContext ctx = new ParseContext();\n-        RecursiveParserWrapper parser = new RecursiveParserWrapper(base,\n-                new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.IGNORE, -1));\n-        ContentHandler handler = new BodyContentHandler();\n+        RecursiveParserWrapper parser = new RecursiveParserWrapper(base);\n+        RecursiveParserWrapperHandler handler = new RecursiveParserWrapperHandler(\n+                new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.IGNORE, -1),-1);\n         Metadata rootMetadata = new Metadata();\n         rootMetadata.add(TikaCoreProperties.RESOURCE_NAME_KEY, \"testRTFRegularImages.rtf\");\n         try (TikaInputStream tis = TikaInputStream.get(getResourceAsStream(\"/test-documents/testRTFRegularImages.rtf\"))) {\n             parser.parse(tis, handler, rootMetadata, ctx);\n         }\n-        List<Metadata> metadatas = parser.getMetadata();\n+        List<Metadata> metadatas = handler.getMetadataList();\n \n         Metadata meta_jpg_exif = metadatas.get(1);//(\"testJPEG_EXIF_\\u666E\\u6797\\u65AF\\u987F.jpg\");\n         Metadata meta_jpg = metadatas.get(3);//(\"testJPEG_\\u666E\\u6797\\u65AF\\u987F.jpg\");"
        },
        {
            "sha": "5516c1d46ad7c193a27859aa1c0c4fba727c3901",
            "filename": "tika-serialization/src/main/java/org/apache/tika/metadata/serialization/PrettyMetadataKeyComparator.java",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-serialization%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fmetadata%2Fserialization%2FPrettyMetadataKeyComparator.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-serialization%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fmetadata%2Fserialization%2FPrettyMetadataKeyComparator.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-serialization%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fmetadata%2Fserialization%2FPrettyMetadataKeyComparator.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -26,7 +26,7 @@ public int compare(String s1, String s2) {\n             return -1;\n         }\n \n-        //this is stinky.  This should reference RecursiveParserWrapper.TIKA_CONTENT\n+        //this is stinky.  This should reference AbstractRecursiveParserWrapperHandler.TIKA_CONTENT\n         //but that would require making core a dependency of serialization...\n         //do we want to do that?\n         if (s1.equals(\"tika:content\")) {"
        },
        {
            "sha": "0658fc4154fc2ff095026a37062771ff7bc1dc8b",
            "filename": "tika-server/src/main/java/org/apache/tika/server/resource/RecursiveMetadataResource.java",
            "status": "modified",
            "additions": 17,
            "deletions": 8,
            "changes": 25,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fserver%2Fresource%2FRecursiveMetadataResource.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fserver%2Fresource%2FRecursiveMetadataResource.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ftika%2Fserver%2Fresource%2FRecursiveMetadataResource.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -37,6 +37,7 @@\n import org.apache.tika.parser.Parser;\n import org.apache.tika.parser.RecursiveParserWrapper;\n import org.apache.tika.sax.BasicContentHandlerFactory;\n+import org.apache.tika.sax.RecursiveParserWrapperHandler;\n import org.apache.tika.server.MetadataList;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -128,20 +129,28 @@ private MetadataList parseMetadata(InputStream is,\n \t\tfinal ParseContext context = new ParseContext();\n \t\tParser parser = TikaResource.createParser();\n \t\t// TODO: parameterize choice of max chars/max embedded attachments\n-\t\tBasicContentHandlerFactory.HANDLER_TYPE type =\n-                BasicContentHandlerFactory.parseHandlerType(handlerTypeName, DEFAULT_HANDLER_TYPE);\n-\t\tRecursiveParserWrapper wrapper = new RecursiveParserWrapper(parser,\n-\t\t\t\tnew BasicContentHandlerFactory(type, -1));\n+\t\tRecursiveParserWrapper wrapper = new RecursiveParserWrapper(parser);\n+\n+\n \t\tTikaResource.fillMetadata(parser, metadata, context, httpHeaders);\n \t\t// no need to add parser to parse recursively\n \t\tTikaResource.fillParseContext(context, httpHeaders, null);\n \t\tTikaResource.logRequest(LOG, info, metadata);\n-\t\tTikaResource.parse(wrapper, LOG, info.getPath(), is,\n-\t\t\t\tnew LanguageHandler() {\n+\n+        BasicContentHandlerFactory.HANDLER_TYPE type =\n+                BasicContentHandlerFactory.parseHandlerType(handlerTypeName, DEFAULT_HANDLER_TYPE);\n+\t\tRecursiveParserWrapperHandler handler = new RecursiveParserWrapperHandler(\n+\t\t        new BasicContentHandlerFactory(type, -1), -1);\n+\t\tTikaResource.parse(wrapper, LOG, info.getPath(), is, handler, metadata, context);\n+\t\t/*\n+\t\t    We used to have this non-functional bit of code...refactor to add it back and make it work?\n+\t\t\t\t\t\tnew LanguageHandler() {\n \t\t\t\t\tpublic void endDocument() {\n \t\t\t\t\t\tmetadata.set(\"language\", getLanguage().getLanguage());\n \t\t\t\t\t}\n-\t\t\t\t}, metadata, context);\n-\t\treturn new MetadataList(wrapper.getMetadata());\n+\t\t\t\t},\n+\t\t */\n+\t\treturn new MetadataList(handler.getMetadataList());\n \t}\n+\n }"
        },
        {
            "sha": "c50f98946ba68ea41f3b93c7c634e478a5b1d4b8",
            "filename": "tika-server/src/test/java/org/apache/tika/server/RecursiveMetadataResourceTest.java",
            "status": "modified",
            "additions": 12,
            "deletions": 11,
            "changes": 23,
            "blob_url": "https://github.com/apache/tika/blob/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fserver%2FRecursiveMetadataResourceTest.java",
            "raw_url": "https://github.com/apache/tika/raw/5f05b511d7d1184f6f25a2b644b615c4f21b8e68/tika-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fserver%2FRecursiveMetadataResourceTest.java",
            "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Ftika%2Fserver%2FRecursiveMetadataResourceTest.java?ref=5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "patch": "@@ -40,6 +40,7 @@\n import org.apache.tika.metadata.TikaCoreProperties;\n import org.apache.tika.metadata.serialization.JsonMetadataList;\n import org.apache.tika.parser.RecursiveParserWrapper;\n+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;\n import org.apache.tika.server.resource.RecursiveMetadataResource;\n import org.apache.tika.server.writer.MetadataListMessageBodyWriter;\n import org.junit.Test;\n@@ -130,7 +131,7 @@ public void testHandlerType() throws Exception {\n         Reader reader = new InputStreamReader((InputStream) response.getEntity(), UTF_8);\n         List<Metadata> metadataList = JsonMetadataList.fromJson(reader);\n         assertEquals(12, metadataList.size());\n-        String content = metadataList.get(6).get(RecursiveParserWrapper.TIKA_CONTENT).trim();\n+        String content = metadataList.get(6).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT).trim();\n         assertTrue(content.startsWith(\"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\"));\n \n         //extra slash\n@@ -142,7 +143,7 @@ public void testHandlerType() throws Exception {\n         reader = new InputStreamReader((InputStream) response.getEntity(), UTF_8);\n         metadataList = JsonMetadataList.fromJson(reader);\n         assertEquals(12, metadataList.size());\n-        content = metadataList.get(6).get(RecursiveParserWrapper.TIKA_CONTENT).trim();\n+        content = metadataList.get(6).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT).trim();\n         assertTrue(content.startsWith(\"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\"));\n \n         //unparseable\n@@ -154,7 +155,7 @@ public void testHandlerType() throws Exception {\n         reader = new InputStreamReader((InputStream) response.getEntity(), UTF_8);\n         metadataList = JsonMetadataList.fromJson(reader);\n         assertEquals(12, metadataList.size());\n-        content = metadataList.get(6).get(RecursiveParserWrapper.TIKA_CONTENT).trim();\n+        content = metadataList.get(6).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT).trim();\n         assertTrue(content.startsWith(\"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\"));\n \n         //xml\n@@ -166,7 +167,7 @@ public void testHandlerType() throws Exception {\n         reader = new InputStreamReader((InputStream) response.getEntity(), UTF_8);\n         metadataList = JsonMetadataList.fromJson(reader);\n         assertEquals(12, metadataList.size());\n-        content = metadataList.get(6).get(RecursiveParserWrapper.TIKA_CONTENT).trim();\n+        content = metadataList.get(6).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT).trim();\n         assertTrue(content.startsWith(\"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\"));\n \n         //text\n@@ -178,7 +179,7 @@ public void testHandlerType() throws Exception {\n         reader = new InputStreamReader((InputStream) response.getEntity(), UTF_8);\n         metadataList = JsonMetadataList.fromJson(reader);\n         assertEquals(12, metadataList.size());\n-        content = metadataList.get(6).get(RecursiveParserWrapper.TIKA_CONTENT).trim();\n+        content = metadataList.get(6).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT).trim();\n         assertTrue(content.startsWith(\"embed_3\"));\n \n         //ignore\n@@ -190,7 +191,7 @@ public void testHandlerType() throws Exception {\n         reader = new InputStreamReader((InputStream) response.getEntity(), UTF_8);\n         metadataList = JsonMetadataList.fromJson(reader);\n         assertEquals(12, metadataList.size());\n-        assertNull(metadataList.get(6).get(RecursiveParserWrapper.TIKA_CONTENT));\n+        assertNull(metadataList.get(6).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n \n     }\n \n@@ -209,7 +210,7 @@ public void testHandlerTypeInMultipartXML() throws Exception {\n         Reader reader = new InputStreamReader((InputStream) response.getEntity(), UTF_8);\n         List<Metadata> metadataList = JsonMetadataList.fromJson(reader);\n         assertEquals(12, metadataList.size());\n-        String content = metadataList.get(6).get(RecursiveParserWrapper.TIKA_CONTENT).trim();\n+        String content = metadataList.get(6).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT).trim();\n         assertTrue(content.startsWith(\"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\"));\n \n         //unparseable\n@@ -225,7 +226,7 @@ public void testHandlerTypeInMultipartXML() throws Exception {\n         reader = new InputStreamReader((InputStream) response.getEntity(), UTF_8);\n         metadataList = JsonMetadataList.fromJson(reader);\n         assertEquals(12, metadataList.size());\n-        content = metadataList.get(6).get(RecursiveParserWrapper.TIKA_CONTENT).trim();\n+        content = metadataList.get(6).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT).trim();\n         assertTrue(content.startsWith(\"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\"));\n \n         //xml\n@@ -241,7 +242,7 @@ public void testHandlerTypeInMultipartXML() throws Exception {\n         reader = new InputStreamReader((InputStream) response.getEntity(), UTF_8);\n         metadataList = JsonMetadataList.fromJson(reader);\n         assertEquals(12, metadataList.size());\n-        content = metadataList.get(6).get(RecursiveParserWrapper.TIKA_CONTENT).trim();\n+        content = metadataList.get(6).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT).trim();\n         assertTrue(content.startsWith(\"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\"));\n \n         //text\n@@ -257,7 +258,7 @@ public void testHandlerTypeInMultipartXML() throws Exception {\n         reader = new InputStreamReader((InputStream) response.getEntity(), UTF_8);\n         metadataList = JsonMetadataList.fromJson(reader);\n         assertEquals(12, metadataList.size());\n-        content = metadataList.get(6).get(RecursiveParserWrapper.TIKA_CONTENT).trim();\n+        content = metadataList.get(6).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT).trim();\n         assertTrue(content.startsWith(\"embed_3\"));\n \n         //ignore -- no content\n@@ -273,7 +274,7 @@ public void testHandlerTypeInMultipartXML() throws Exception {\n         reader = new InputStreamReader((InputStream) response.getEntity(), UTF_8);\n         metadataList = JsonMetadataList.fromJson(reader);\n         assertEquals(12, metadataList.size());\n-        assertNull(metadataList.get(6).get(RecursiveParserWrapper.TIKA_CONTENT));\n+        assertNull(metadataList.get(6).get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT));\n     }\n \n }"
        }
    ]
}