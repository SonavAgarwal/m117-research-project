{
    "sha": "bb8ff8f4e8969b46fdacffcd27781d223c8c7244",
    "node_id": "MDY6Q29tbWl0MzM4MjE5NTpiYjhmZjhmNGU4OTY5YjQ2ZmRhY2ZmY2QyNzc4MWQyMjNjOGM3MjQ0",
    "commit": {
        "author": {
            "name": "Filip Hanik",
            "email": "fhanik@gopivotal.com",
            "date": "2014-07-14T17:28:20Z"
        },
        "committer": {
            "name": "Filip Hanik",
            "email": "fhanik@gopivotal.com",
            "date": "2014-07-14T20:04:39Z"
        },
        "message": "Implement external group mapping endpoint\nhttps://www.pivotaltracker.com/story/show/74341376\n[#74341376]",
        "tree": {
            "sha": "0a8919949a9dc253bd02692d79de3b3441146f9a",
            "url": "https://api.github.com/repos/cloudfoundry/uaa/git/trees/0a8919949a9dc253bd02692d79de3b3441146f9a"
        },
        "url": "https://api.github.com/repos/cloudfoundry/uaa/git/commits/bb8ff8f4e8969b46fdacffcd27781d223c8c7244",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/cloudfoundry/uaa/commits/bb8ff8f4e8969b46fdacffcd27781d223c8c7244",
    "html_url": "https://github.com/cloudfoundry/uaa/commit/bb8ff8f4e8969b46fdacffcd27781d223c8c7244",
    "comments_url": "https://api.github.com/repos/cloudfoundry/uaa/commits/bb8ff8f4e8969b46fdacffcd27781d223c8c7244/comments",
    "author": null,
    "committer": null,
    "parents": [
        {
            "sha": "484bd39cd2fac12e9aaef7645acf570de6bbd014",
            "url": "https://api.github.com/repos/cloudfoundry/uaa/commits/484bd39cd2fac12e9aaef7645acf570de6bbd014",
            "html_url": "https://github.com/cloudfoundry/uaa/commit/484bd39cd2fac12e9aaef7645acf570de6bbd014"
        }
    ],
    "stats": {
        "total": 327,
        "additions": 320,
        "deletions": 7
    },
    "files": [
        {
            "sha": "34e97c03aab2ad06583e41302d284e0c8466e286",
            "filename": "docs/UAA-APIs.rst",
            "status": "modified",
            "additions": 175,
            "deletions": 0,
            "changes": 175,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/bb8ff8f4e8969b46fdacffcd27781d223c8c7244/docs%2FUAA-APIs.rst",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/bb8ff8f4e8969b46fdacffcd27781d223c8c7244/docs%2FUAA-APIs.rst",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/docs%2FUAA-APIs.rst?ref=bb8ff8f4e8969b46fdacffcd27781d223c8c7244",
            "patch": "@@ -925,6 +925,181 @@ See `SCIM - Deleting Resources <http://www.simplecloud.info/specs/draft-scim-res\n \n Deleting a group also removes the group from the 'groups' sub-attribute on users who were members of the group. \n \n+\n+List External Group mapping: ``GET /Groups/External/list``\n+----------------------------------\n+\n+Retrieves external group mappings in the form of a search result.\n+\n+* Request: ``GET /Groups/External/list``\n+* Request Headers: Authorization header containing an OAuth2_ bearer token with::\n+\n+        scope = scim.read\n+        aud = scim\n+\n+* Request(Query) Parameters::\n+\n+        startIndex - the start index of the pagination, default value is 1\n+        count - the number of results to retrieve, default value is 100\n+\n+* Request Body::\n+\n+* Response Body::\n+\n+        HTTP/1.1 200 Ok\n+        Content-Type: application/json\n+\n+        {\"resources\":\n+          [\n+            {\"groupId\":\"79f37b92-21db-4a3e-a28c-ff93df476eca\",\"displayName\":\"internal.write\",\"externalGroup\":\"cn=operators,ou=scopes,dc=test,dc=com\"},\n+            {\"groupId\":\"e66c720f-6f4b-4fb5-8b0a-37818045b5b7\",\"displayName\":\"internal.superuser\",\"externalGroup\":\"cn=superusers,ou=scopes,dc=test,dc=com\"},\n+            {\"groupId\":\"ef325dad-63eb-46e6-800b-796f254e13ee\",\"displayName\":\"organizations.acme\",\"externalGroup\":\"cn=test_org,ou=people,o=springsource,o=org\"},\n+            {\"groupId\":\"f149154e-c131-4e84-98cf-05aa94cc6b4e\",\"displayName\":\"internal.everything\",\"externalGroup\":\"cn=superusers,ou=scopes,dc=test,dc=com\"},\n+            {\"groupId\":\"f2be2506-45e3-412e-9d85-6420d7e4afe4\",\"displayName\":\"internal.read\",\"externalGroup\":\"cn=developers,ou=scopes,dc=test,dc=com\"}\n+          ],\n+          \"startIndex\":1,\n+          \"itemsPerPage\":100,\n+          \"totalResults\":5,\n+          \"schemas\":[\"urn:scim:schemas:core:1.0\"]\n+        }\n+\n+\n+        * Response Codes::\n+\n+        200 - Results retrieved successfully\n+        401 - Unauthorized\n+        403 - Forbidden - valid token but not enough privileges or invalid method\n+\n+Create a Group mapping: ``POST /Groups/External``\n+----------------------------------\n+\n+Creates a group mapping with an internal UAA groups (scope) and an external group, for example LDAP DN.\n+\n+* Request: ``POST /Groups/External``\n+* Request Headers: Authorization header containing an OAuth2_ bearer token with::\n+\n+        scope = scim.write\n+        aud = scim\n+\n+* Request Body(using group name)::\n+\n+        {\n+          \"schemas\":[\"urn:scim:schemas:core:1.0\"],\n+          \"displayName\":\"uaa.admin\",\n+          \"externalGroup\":\"cn=superusers,ou=scopes,dc=test,dc=com\"\n+        }\n+\n+* Request Body(using group ID)::\n+\n+        {\n+          \"schemas\":[\"urn:scim:schemas:core:1.0\"],\n+          \"groupId\":\"f2be2506-45e3-412e-9d85-6420d7e4afe3\",\n+          \"externalGroup\":\"cn=superusers,ou=scopes,dc=test,dc=com\"\n+        }\n+\n+The ``displayName`` is unique in the UAA, but is allowed to change.  Each group also has a fixed primary key which is a UUID (stored in the ``id`` field of the core schema).\n+It is possible to substitute the ``displayName`` field with a ``groupId`` field containing the UUID.\n+\n+* Response Body::\n+\n+        HTTP/1.1 201 Created\n+        Content-Type: application/json\n+        Location: https://example.com/v1/Groups/uid=123456\n+        ETag: \"0\"\n+\n+        {\n+          \"schemas\":[\"urn:scim:schemas:core:1.0\"],\n+          \"id\":\"123456\",\n+          \"meta\":{\n+            \"version\":0,\n+            \"created\":\"2011-08-01T21:32:44.882Z\",\n+            \"lastModified\":\"2011-08-01T21:32:44.882Z\"\n+          },\n+          \"displayName\":\"uaa.admin\",\n+          \"groupId\":\"3ebe4bda-74a2-40c4-8b70-f771d9bc8b9f\",\n+          \"externalGroup\":\"cn=superusers,ou=scopes,dc=test,dc=com\"\n+        }\n+\n+* Response Codes::\n+\n+        201 - Created successfully\n+        400 - Bad Request (unparseable, syntactically incorrect etc)\n+        401 - Unauthorized\n+\n+Remove a Group mapping: ``DELETE /Groups/External/id/{groupId}/{externalGroup}``\n+----------------------------------\n+\n+Removes the group mapping between an internal UAA groups (scope) and an external group, for example LDAP DN.\n+\n+* Request: ``DELETE /Groups/External/id/3ebe4bda-74a2-40c4-8b70-f771d9bc8b9f/cn=superusers,ou=scopes,dc=test,dc=com``\n+* Request Headers: Authorization header containing an OAuth2_ bearer token with::\n+\n+        scope = scim.write\n+        aud = scim\n+\n+* Response Body::\n+\n+        HTTP/1.1 200 Ok\n+        Content-Type: application/json\n+        Location: https://example.com/v1/Groups/uid=123456\n+        ETag: \"0\"\n+\n+        {\n+          \"schemas\":[\"urn:scim:schemas:core:1.0\"],\n+          \"id\":\"123456\",\n+          \"meta\":{\n+            \"version\":0,\n+            \"created\":\"2011-08-01T21:32:44.882Z\",\n+            \"lastModified\":\"2011-08-01T21:32:44.882Z\"\n+          },\n+          \"displayName\":\"uaa.admin\",\n+          \"groupId\":\"3ebe4bda-74a2-40c4-8b70-f771d9bc8b9f\",\n+          \"externalGroup\":\"cn=superusers,ou=scopes,dc=test,dc=com\"\n+        }\n+\n+* Response Codes::\n+\n+        200 - Deleted successfully\n+        400 - Bad Request (unparseable, syntactically incorrect etc)\n+        401 - Unauthorized\n+\n+Remove a Group mapping: ``DELETE /Groups/External/{displayName}/{externalGroup}``\n+----------------------------------\n+\n+Removes the group mapping between an internal UAA groups (scope) and an external group, for example LDAP DN.\n+\n+* Request: ``DELETE /Groups/External/internal.everything/cn=superusers,ou=scopes,dc=test,dc=com``\n+* Request Headers: Authorization header containing an OAuth2_ bearer token with::\n+\n+        scope = scim.write\n+        aud = scim\n+\n+* Response Body::\n+\n+        HTTP/1.1 200 Ok\n+        Content-Type: application/json\n+        Location: https://example.com/v1/Groups/uid=123456\n+        ETag: \"0\"\n+\n+        {\n+          \"schemas\":[\"urn:scim:schemas:core:1.0\"],\n+          \"id\":\"123456\",\n+          \"meta\":{\n+            \"version\":0,\n+            \"created\":\"2011-08-01T21:32:44.882Z\",\n+            \"lastModified\":\"2011-08-01T21:32:44.882Z\"\n+          },\n+          \"displayName\":\"internal.everything\",\n+          \"groupId\":\"3ebe4bda-74a2-40c4-8b70-f771d9bc8b9f\",\n+          \"externalGroup\":\"cn=superusers,ou=scopes,dc=test,dc=com\"\n+        }\n+\n+* Response Codes::\n+\n+        200 - Deleted successfully\n+        400 - Bad Request (unparseable, syntactically incorrect etc)\n+        401 - Unauthorized\n+\n Access Token Administration APIs\n =================================\n "
        },
        {
            "sha": "e7dd1edade0a75348157a0b5e1839dae7274b43d",
            "filename": "scim/src/main/java/org/cloudfoundry/identity/uaa/scim/ScimGroupExternalMembershipManager.java",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/bb8ff8f4e8969b46fdacffcd27781d223c8c7244/scim%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2FScimGroupExternalMembershipManager.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/bb8ff8f4e8969b46fdacffcd27781d223c8c7244/scim%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2FScimGroupExternalMembershipManager.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/scim%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2FScimGroupExternalMembershipManager.java?ref=bb8ff8f4e8969b46fdacffcd27781d223c8c7244",
            "patch": "@@ -22,6 +22,9 @@ public interface ScimGroupExternalMembershipManager {\n     public ScimGroupExternalMember mapExternalGroup(final String groupId, final String externalGroup)\n                     throws ScimResourceNotFoundException, MemberAlreadyExistsException;\n \n+    public ScimGroupExternalMember unmapExternalGroup(final String groupId, final String externalGroup)\n+        throws ScimResourceNotFoundException;\n+\n     public List<ScimGroupExternalMember> getExternalGroupMapsByGroupId(final String groupId)\n                     throws ScimResourceNotFoundException;\n "
        },
        {
            "sha": "e1836c4921d20cb88d85bf971c3e97c5550b5ad8",
            "filename": "scim/src/main/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimGroupEndpoints.java",
            "status": "modified",
            "additions": 106,
            "deletions": 0,
            "changes": 106,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/bb8ff8f4e8969b46fdacffcd27781d223c8c7244/scim%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fendpoints%2FScimGroupEndpoints.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/bb8ff8f4e8969b46fdacffcd27781d223c8c7244/scim%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fendpoints%2FScimGroupEndpoints.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/scim%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fendpoints%2FScimGroupEndpoints.java?ref=bb8ff8f4e8969b46fdacffcd27781d223c8c7244",
            "patch": "@@ -23,18 +23,23 @@\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n+import org.cloudfoundry.identity.uaa.UaaConfiguration;\n import org.cloudfoundry.identity.uaa.error.ConvertingExceptionView;\n import org.cloudfoundry.identity.uaa.error.ExceptionReport;\n import org.cloudfoundry.identity.uaa.rest.SearchResults;\n import org.cloudfoundry.identity.uaa.rest.SearchResultsFactory;\n import org.cloudfoundry.identity.uaa.scim.ScimCore;\n import org.cloudfoundry.identity.uaa.scim.ScimGroup;\n+import org.cloudfoundry.identity.uaa.scim.ScimGroupExternalMember;\n+import org.cloudfoundry.identity.uaa.scim.ScimGroupExternalMembershipManager;\n import org.cloudfoundry.identity.uaa.scim.ScimGroupMember;\n import org.cloudfoundry.identity.uaa.scim.ScimGroupMembershipManager;\n import org.cloudfoundry.identity.uaa.scim.ScimGroupProvisioning;\n import org.cloudfoundry.identity.uaa.scim.exception.InvalidScimResourceException;\n+import org.cloudfoundry.identity.uaa.scim.exception.MemberAlreadyExistsException;\n import org.cloudfoundry.identity.uaa.scim.exception.ScimException;\n import org.cloudfoundry.identity.uaa.scim.exception.ScimResourceNotFoundException;\n+import org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupExternalMembershipManager;\n import org.cloudfoundry.identity.uaa.security.DefaultSecurityContextAccessor;\n import org.cloudfoundry.identity.uaa.security.SecurityContextAccessor;\n import org.cloudfoundry.identity.uaa.util.UaaPagingUtils;\n@@ -67,6 +72,8 @@ public class ScimGroupEndpoints {\n \n     private ScimGroupMembershipManager membershipManager;\n \n+    private JdbcScimGroupExternalMembershipManager externalMembershipManager;\n+\n     private Map<Class<? extends Exception>, HttpStatus> statuses = new HashMap<Class<? extends Exception>, HttpStatus>();\n \n     private HttpMessageConverter<?>[] messageConverters = new RestTemplate().getMessageConverters().toArray(\n@@ -88,6 +95,14 @@ public void setMessageConverters(HttpMessageConverter<?>[] messageConverters) {\n         this.messageConverters = messageConverters;\n     }\n \n+    public JdbcScimGroupExternalMembershipManager getExternalMembershipManager() {\n+        return externalMembershipManager;\n+    }\n+\n+    public void setExternalMembershipManager(JdbcScimGroupExternalMembershipManager externalMembershipManager) {\n+        this.externalMembershipManager = externalMembershipManager;\n+    }\n+\n     public ScimGroupEndpoints(ScimGroupProvisioning scimGroupProvisioning, ScimGroupMembershipManager membershipManager) {\n         this.dao = scimGroupProvisioning;\n         this.membershipManager = membershipManager;\n@@ -162,6 +177,97 @@ public SearchResults<?> listGroups(\n         }\n     }\n \n+    @RequestMapping(value = { \"/Groups/External/list\" }, method = RequestMethod.GET)\n+    @ResponseBody\n+    public SearchResults<?> listExternalGroups(\n+        @RequestParam(required = false, defaultValue = \"1\") int startIndex,\n+        @RequestParam(required = false, defaultValue = \"100\") int count) {\n+        String filter = \"\";\n+        List<ScimGroupExternalMember> result;\n+        try {\n+            result = externalMembershipManager.query(filter);\n+        } catch (IllegalArgumentException e) {\n+            throw new ScimException(\"Invalid filter expression: [\" + filter + \"]\", HttpStatus.BAD_REQUEST);\n+        }\n+        String attributesCommaSeparated = null;\n+        try {\n+            return SearchResultsFactory.buildSearchResultFrom(\n+                result,\n+                startIndex,\n+                count,\n+                result.size(),\n+                new String[] {\"groupId\", \"displayName\",\"externalGroup\"},\n+                Arrays.asList(ScimCore.SCHEMAS));\n+        } catch (SpelParseException e) {\n+            throw new ScimException(\"Invalid attributes: [\" + attributesCommaSeparated + \"]\", HttpStatus.BAD_REQUEST);\n+        } catch (SpelEvaluationException e) {\n+            throw new ScimException(\"Invalid attributes: [\" + attributesCommaSeparated + \"]\", HttpStatus.BAD_REQUEST);\n+        }\n+    }\n+\n+    @RequestMapping(value = { \"/Groups/External\" }, method = RequestMethod.POST)\n+    @ResponseBody\n+    @ResponseStatus(HttpStatus.CREATED)\n+    public ScimGroupExternalMember mapExternalGroup(@RequestBody ScimGroupExternalMember sgm) {\n+        try {\n+            String displayName = sgm.getDisplayName();\n+            String groupId = sgm.getGroupId()==null?getGroupId(displayName):sgm.getGroupId();\n+            String externalGroup = sgm.getExternalGroup();\n+            return externalMembershipManager.mapExternalGroup(groupId, externalGroup);\n+        } catch (IllegalArgumentException e) {\n+            throw new ScimException(e.getMessage(), HttpStatus.BAD_REQUEST);\n+        } catch (ScimResourceNotFoundException e) {\n+            throw new ScimException(e.getMessage(), HttpStatus.NOT_FOUND);\n+        } catch (MemberAlreadyExistsException e) {\n+            throw new ScimException(e.getMessage(), HttpStatus.CONFLICT);\n+        }\n+    }\n+\n+    @RequestMapping(value = { \"/Groups/External/id/{groupId}/{externalGroup}\" }, method = RequestMethod.DELETE)\n+    @ResponseBody\n+    @ResponseStatus(HttpStatus.OK)\n+    public ScimGroupExternalMember unmapExternalGroup(@PathVariable String groupId, @PathVariable String externalGroup) {\n+        try {\n+            return externalMembershipManager.unmapExternalGroup(groupId, externalGroup);\n+        } catch (IllegalArgumentException e) {\n+            throw new ScimException(e.getMessage(), HttpStatus.BAD_REQUEST);\n+        } catch (ScimResourceNotFoundException e) {\n+            throw new ScimException(e.getMessage(), HttpStatus.NOT_FOUND);\n+        } catch (MemberAlreadyExistsException e) {\n+            throw new ScimException(e.getMessage(), HttpStatus.CONFLICT);\n+        }\n+    }\n+\n+    @RequestMapping(value = { \"/Groups/External/{displayName}/{externalGroup}\" }, method = RequestMethod.DELETE)\n+    @ResponseBody\n+    @ResponseStatus(HttpStatus.OK)\n+    public ScimGroupExternalMember unmapExternalGroupUsingName(@PathVariable String displayName, @PathVariable String externalGroup) {\n+        try {\n+            return externalMembershipManager.unmapExternalGroup(getGroupId(displayName), externalGroup);\n+        } catch (IllegalArgumentException e) {\n+            throw new ScimException(e.getMessage(), HttpStatus.BAD_REQUEST);\n+        } catch (ScimResourceNotFoundException e) {\n+            throw new ScimException(e.getMessage(), HttpStatus.NOT_FOUND);\n+        } catch (MemberAlreadyExistsException e) {\n+            throw new ScimException(e.getMessage(), HttpStatus.CONFLICT);\n+        }\n+    }\n+\n+    private String getGroupId(String displayName) {\n+        if (displayName==null || displayName.trim().length()==0) {\n+            throw new IllegalArgumentException(\"Missing group/displayName name\");\n+        }\n+        List<ScimGroup> result = dao.query(\"displayName eq \\\"\"+displayName+\"\\\"\");\n+        if (result==null || result.size()==0) {\n+            throw new ScimException(\"Group not found:\"+displayName, HttpStatus.NOT_FOUND);\n+        }\n+        if (result.size()>1) {\n+            throw new IllegalArgumentException(\"Group name should be unique:\"+displayName);\n+        }\n+        return result.get(0).getId();\n+    }\n+\n+\n     @RequestMapping(value = { \"/Groups/{groupId}\" }, method = RequestMethod.GET)\n     @ResponseBody\n     public ScimGroup getGroup(@PathVariable String groupId, HttpServletResponse httpServletResponse) {"
        },
        {
            "sha": "e19e5ba91b6f944bf721a9353b7ca4b4d24d2862",
            "filename": "scim/src/main/java/org/cloudfoundry/identity/uaa/scim/jdbc/JdbcScimGroupExternalMembershipManager.java",
            "status": "modified",
            "additions": 33,
            "deletions": 7,
            "changes": 40,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/bb8ff8f4e8969b46fdacffcd27781d223c8c7244/scim%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fjdbc%2FJdbcScimGroupExternalMembershipManager.java",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/bb8ff8f4e8969b46fdacffcd27781d223c8c7244/scim%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fjdbc%2FJdbcScimGroupExternalMembershipManager.java",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/scim%2Fsrc%2Fmain%2Fjava%2Forg%2Fcloudfoundry%2Fidentity%2Fuaa%2Fscim%2Fjdbc%2FJdbcScimGroupExternalMembershipManager.java?ref=bb8ff8f4e8969b46fdacffcd27781d223c8c7244",
            "patch": "@@ -12,13 +12,6 @@\n  *******************************************************************************/\n package org.cloudfoundry.identity.uaa.scim.jdbc;\n \n-import java.sql.PreparedStatement;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n-import java.sql.Timestamp;\n-import java.util.Date;\n-import java.util.List;\n-\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.cloudfoundry.identity.uaa.rest.jdbc.AbstractQueryable;\n@@ -32,11 +25,19 @@\n import org.cloudfoundry.identity.uaa.scim.exception.ScimResourceNotFoundException;\n import org.springframework.dao.DuplicateKeyException;\n import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jca.cci.InvalidResultSetAccessException;\n import org.springframework.jdbc.core.JdbcTemplate;\n import org.springframework.jdbc.core.PreparedStatementSetter;\n import org.springframework.jdbc.core.RowMapper;\n import org.springframework.util.Assert;\n \n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Timestamp;\n+import java.util.Date;\n+import java.util.List;\n+\n public class JdbcScimGroupExternalMembershipManager extends AbstractQueryable<ScimGroupExternalMember> implements\n                 ScimGroupExternalMembershipManager {\n \n@@ -134,6 +135,31 @@ public void setValues(PreparedStatement ps) throws SQLException {\n         }\n     }\n \n+    @Override\n+    public ScimGroupExternalMember unmapExternalGroup(final String groupId, final String externalGroup)\n+        throws ScimResourceNotFoundException {\n+        ScimGroup group = scimGroupProvisioning.retrieve(groupId);\n+        ScimGroupExternalMember result = getExternalGroupMap(groupId, externalGroup);\n+        if (null != group && null != result) {\n+            int count = jdbcTemplate.update(DELETE_EXTERNAL_GROUP_MAPPING_SQL, new PreparedStatementSetter() {\n+                @Override\n+                public void setValues(PreparedStatement ps) throws SQLException {\n+                    ps.setString(1, groupId);\n+                    ps.setString(2, externalGroup);\n+                }\n+            });\n+            if (count==1) {\n+                return result;\n+            } else if (count==0) {\n+                throw new ScimResourceNotFoundException(\"No group mappings deleted.\");\n+            } else {\n+                throw new InvalidResultSetAccessException(\"More than one mapping deleted count=\"+count, new SQLException());\n+            }\n+        } else {\n+            return null;\n+        }\n+    }\n+\n     @Override\n     public List<ScimGroupExternalMember> getExternalGroupMapsByGroupId(final String groupId)\n                     throws ScimResourceNotFoundException {"
        },
        {
            "sha": "4f47939f84f870d49efaf5e4776a1e0decf3e204",
            "filename": "uaa/src/main/webapp/WEB-INF/spring/scim-endpoints.xml",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/cloudfoundry/uaa/blob/bb8ff8f4e8969b46fdacffcd27781d223c8c7244/uaa%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fspring%2Fscim-endpoints.xml",
            "raw_url": "https://github.com/cloudfoundry/uaa/raw/bb8ff8f4e8969b46fdacffcd27781d223c8c7244/uaa%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fspring%2Fscim-endpoints.xml",
            "contents_url": "https://api.github.com/repos/cloudfoundry/uaa/contents/uaa%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fspring%2Fscim-endpoints.xml?ref=bb8ff8f4e8969b46fdacffcd27781d223c8c7244",
            "patch": "@@ -120,6 +120,7 @@\n         <property name=\"messageConverters\">\n             <bean class=\"org.cloudfoundry.identity.uaa.error.ExceptionReportHttpMessageConverter\" />\n         </property>\n+        <property name=\"externalMembershipManager\" ref=\"externalGroupMembershipManager\" />\n     </bean>\n \n     <bean id=\"groupAccessDecisionManager\" class=\"org.springframework.security.access.vote.AffirmativeBased\">\n@@ -170,6 +171,8 @@\n         xmlns=\"http://www.springframework.org/schema/security\">\n         <intercept-url pattern=\"/Groups/**\" access=\"scope=scim.write\" method=\"DELETE\" />\n         <intercept-url pattern=\"/Groups\" access=\"scope=scim.write\" method=\"POST\" />\n+        <intercept-url pattern=\"/Groups/External\" access=\"scope=scim.write\" method=\"POST\" />\n+        <intercept-url pattern=\"/Groups/External/**\" access=\"scope=scim.write\" method=\"DELETE\" />\n         <intercept-url pattern=\"/**\" access=\"ROLE_NONEXISTENT\" />\n         <custom-filter ref=\"scimResourceAuthenticationFilter\" position=\"PRE_AUTH_FILTER\" />\n         <access-denied-handler ref=\"oauthAccessDeniedHandler\" />"
        }
    ]
}