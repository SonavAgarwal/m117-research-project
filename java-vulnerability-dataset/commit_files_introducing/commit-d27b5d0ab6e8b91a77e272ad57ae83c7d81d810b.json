{
    "sha": "d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b",
    "node_id": "MDY6Q29tbWl0MTE0ODc1MzpkMjdiNWQwYWI2ZThiOTFhNzdlMjcyYWQ1N2FlODNjN2Q4MWQ4MTBi",
    "commit": {
        "author": {
            "name": "Sebastien Deleuze",
            "email": "sdeleuze@pivotal.io",
            "date": "2019-04-01T12:36:38Z"
        },
        "committer": {
            "name": "Sebastien Deleuze",
            "email": "sdeleuze@pivotal.io",
            "date": "2019-04-01T15:42:51Z"
        },
        "message": "Improve CORS handling\n\nThis commit improves CORS support by:\n - Using CORS processing only for CORS-enabled endpoints\n - Skipping CORS processing for same-origin requests\n - Adding Vary headers for non-CORS requests\n\nIt introduces an AbstractHandlerMapping#hasCorsConfigurationSource\nmethod in order to be able to check CORS endpoints efficiently.\n\nCloses gh-22273\nCloses gh-22496",
        "tree": {
            "sha": "ac78693a41af1663c57b40335adcbf9c41063a20",
            "url": "https://api.github.com/repos/spring-projects/spring-framework/git/trees/ac78693a41af1663c57b40335adcbf9c41063a20"
        },
        "url": "https://api.github.com/repos/spring-projects/spring-framework/git/commits/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b",
        "comment_count": 1,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b",
    "html_url": "https://github.com/spring-projects/spring-framework/commit/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b",
    "comments_url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/comments",
    "author": {
        "login": "sdeleuze",
        "id": 141109,
        "node_id": "MDQ6VXNlcjE0MTEwOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/141109?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdeleuze",
        "html_url": "https://github.com/sdeleuze",
        "followers_url": "https://api.github.com/users/sdeleuze/followers",
        "following_url": "https://api.github.com/users/sdeleuze/following{/other_user}",
        "gists_url": "https://api.github.com/users/sdeleuze/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sdeleuze/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sdeleuze/subscriptions",
        "organizations_url": "https://api.github.com/users/sdeleuze/orgs",
        "repos_url": "https://api.github.com/users/sdeleuze/repos",
        "events_url": "https://api.github.com/users/sdeleuze/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sdeleuze/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "sdeleuze",
        "id": 141109,
        "node_id": "MDQ6VXNlcjE0MTEwOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/141109?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdeleuze",
        "html_url": "https://github.com/sdeleuze",
        "followers_url": "https://api.github.com/users/sdeleuze/followers",
        "following_url": "https://api.github.com/users/sdeleuze/following{/other_user}",
        "gists_url": "https://api.github.com/users/sdeleuze/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sdeleuze/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sdeleuze/subscriptions",
        "organizations_url": "https://api.github.com/users/sdeleuze/orgs",
        "repos_url": "https://api.github.com/users/sdeleuze/repos",
        "events_url": "https://api.github.com/users/sdeleuze/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sdeleuze/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "8714710170dae03824416bf5aa8a19e14190c723",
            "url": "https://api.github.com/repos/spring-projects/spring-framework/commits/8714710170dae03824416bf5aa8a19e14190c723",
            "html_url": "https://github.com/spring-projects/spring-framework/commit/8714710170dae03824416bf5aa8a19e14190c723"
        }
    ],
    "stats": {
        "total": 401,
        "additions": 278,
        "deletions": 123
    },
    "files": [
        {
            "sha": "d24594cef06014be12113b869c98a40257a248de",
            "filename": "spring-web/src/main/java/org/springframework/web/cors/CorsUtils.java",
            "status": "modified",
            "additions": 34,
            "deletions": 4,
            "changes": 38,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2FCorsUtils.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2FCorsUtils.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2FCorsUtils.java?ref=d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -20,6 +20,10 @@\n \n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n+import org.springframework.lang.Nullable;\n+import org.springframework.util.ObjectUtils;\n+import org.springframework.web.util.UriComponents;\n+import org.springframework.web.util.UriComponentsBuilder;\n \n /**\n  * Utility class for CORS request handling based on the\n@@ -31,17 +35,43 @@\n public abstract class CorsUtils {\n \n \t/**\n-\t * Returns {@code true} if the request is a valid CORS one.\n+\t * Returns {@code true} if the request is a valid CORS one by checking {@code Origin}\n+\t * header presence and ensuring that origins are different.\n \t */\n \tpublic static boolean isCorsRequest(HttpServletRequest request) {\n-\t\treturn (request.getHeader(HttpHeaders.ORIGIN) != null);\n+\t\tString origin = request.getHeader(HttpHeaders.ORIGIN);\n+\t\tif (origin == null) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tUriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build();\n+\t\tString scheme = request.getScheme();\n+\t\tString host = request.getServerName();\n+\t\tint port = request.getServerPort();\n+\t\treturn !(ObjectUtils.nullSafeEquals(scheme, originUrl.getScheme()) &&\n+\t\t\t\tObjectUtils.nullSafeEquals(host, originUrl.getHost()) &&\n+\t\t\t\tgetPort(scheme, port) == getPort(originUrl.getScheme(), originUrl.getPort()));\n+\n+\t}\n+\n+\tprivate static int getPort(@Nullable String scheme, int port) {\n+\t\tif (port == -1) {\n+\t\t\tif (\"http\".equals(scheme) || \"ws\".equals(scheme)) {\n+\t\t\t\tport = 80;\n+\t\t\t}\n+\t\t\telse if (\"https\".equals(scheme) || \"wss\".equals(scheme)) {\n+\t\t\t\tport = 443;\n+\t\t\t}\n+\t\t}\n+\t\treturn port;\n \t}\n \n \t/**\n \t * Returns {@code true} if the request is a valid CORS pre-flight one.\n+\t * To be used in combination with {@link #isCorsRequest(HttpServletRequest)} since\n+\t * regular CORS checks are not invoked here for performance reasons.\n \t */\n \tpublic static boolean isPreFlightRequest(HttpServletRequest request) {\n-\t\treturn (isCorsRequest(request) && HttpMethod.OPTIONS.matches(request.getMethod()) &&\n+\t\treturn (HttpMethod.OPTIONS.matches(request.getMethod()) &&\n \t\t\t\trequest.getHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD) != null);\n \t}\n "
        },
        {
            "sha": "f4463077509cec1329754214bb658a92791a82dc",
            "filename": "spring-web/src/main/java/org/springframework/web/cors/DefaultCorsProcessor.java",
            "status": "modified",
            "additions": 10,
            "deletions": 28,
            "changes": 38,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2FDefaultCorsProcessor.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2FDefaultCorsProcessor.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2FDefaultCorsProcessor.java?ref=d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -19,7 +19,6 @@\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n@@ -36,7 +35,6 @@\n import org.springframework.http.server.ServletServerHttpResponse;\n import org.springframework.lang.Nullable;\n import org.springframework.util.CollectionUtils;\n-import org.springframework.web.util.WebUtils;\n \n /**\n  * The default implementation of {@link CorsProcessor}, as defined by the\n@@ -45,8 +43,7 @@\n  * <p>Note that when input {@link CorsConfiguration} is {@code null}, this\n  * implementation does not reject simple or actual requests outright but simply\n  * avoid adding CORS headers to the response. CORS processing is also skipped\n- * if the response already contains CORS headers, or if the request is detected\n- * as a same-origin one.\n+ * if the response already contains CORS headers.\n  *\n  * @author Sebastien Deleuze\n  * @author Rossen Stoyanchev\n@@ -62,44 +59,31 @@ public class DefaultCorsProcessor implements CorsProcessor {\n \tpublic boolean processRequest(@Nullable CorsConfiguration config, HttpServletRequest request,\n \t\t\tHttpServletResponse response) throws IOException {\n \n+\t\tresponse.addHeader(HttpHeaders.VARY, HttpHeaders.ORIGIN);\n+\t\tresponse.addHeader(HttpHeaders.VARY, HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD);\n+\t\tresponse.addHeader(HttpHeaders.VARY, HttpHeaders.ACCESS_CONTROL_REQUEST_HEADERS);\n+\n \t\tif (!CorsUtils.isCorsRequest(request)) {\n \t\t\treturn true;\n \t\t}\n \n-\t\tServletServerHttpResponse serverResponse = new ServletServerHttpResponse(response);\n-\t\tif (responseHasCors(serverResponse)) {\n+\t\tif (response.getHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN) != null) {\n \t\t\tlogger.trace(\"Skip: response already contains \\\"Access-Control-Allow-Origin\\\"\");\n \t\t\treturn true;\n \t\t}\n \n-\t\tServletServerHttpRequest serverRequest = new ServletServerHttpRequest(request);\n-\t\tif (WebUtils.isSameOrigin(serverRequest)) {\n-\t\t\tlogger.trace(\"Skip: request is from same origin\");\n-\t\t\treturn true;\n-\t\t}\n-\n \t\tboolean preFlightRequest = CorsUtils.isPreFlightRequest(request);\n \t\tif (config == null) {\n \t\t\tif (preFlightRequest) {\n-\t\t\t\trejectRequest(serverResponse);\n+\t\t\t\trejectRequest(new ServletServerHttpResponse(response));\n \t\t\t\treturn false;\n \t\t\t}\n \t\t\telse {\n \t\t\t\treturn true;\n \t\t\t}\n \t\t}\n \n-\t\treturn handleInternal(serverRequest, serverResponse, config, preFlightRequest);\n-\t}\n-\n-\tprivate boolean responseHasCors(ServerHttpResponse response) {\n-\t\ttry {\n-\t\t\treturn (response.getHeaders().getAccessControlAllowOrigin() != null);\n-\t\t}\n-\t\tcatch (NullPointerException npe) {\n-\t\t\t// SPR-11919 and https://issues.jboss.org/browse/WFLY-3474\n-\t\t\treturn false;\n-\t\t}\n+\t\treturn handleInternal(new ServletServerHttpRequest(request), new ServletServerHttpResponse(response), config, preFlightRequest);\n \t}\n \n \t/**\n@@ -110,6 +94,7 @@ private boolean responseHasCors(ServerHttpResponse response) {\n \tprotected void rejectRequest(ServerHttpResponse response) throws IOException {\n \t\tresponse.setStatusCode(HttpStatus.FORBIDDEN);\n \t\tresponse.getBody().write(\"Invalid CORS request\".getBytes(StandardCharsets.UTF_8));\n+\t\tresponse.flush();\n \t}\n \n \t/**\n@@ -122,9 +107,6 @@ protected boolean handleInternal(ServerHttpRequest request, ServerHttpResponse r\n \t\tString allowOrigin = checkOrigin(config, requestOrigin);\n \t\tHttpHeaders responseHeaders = response.getHeaders();\n \n-\t\tresponseHeaders.addAll(HttpHeaders.VARY, Arrays.asList(HttpHeaders.ORIGIN,\n-\t\t\t\tHttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, HttpHeaders.ACCESS_CONTROL_REQUEST_HEADERS));\n-\n \t\tif (allowOrigin == null) {\n \t\t\tlogger.debug(\"Reject: '\" + requestOrigin + \"' origin is not allowed\");\n \t\t\trejectRequest(response);"
        },
        {
            "sha": "006f32f684c33b9e5a8c52f03cbf21c34d8062ef",
            "filename": "spring-web/src/main/java/org/springframework/web/cors/reactive/CorsUtils.java",
            "status": "modified",
            "additions": 10,
            "deletions": 5,
            "changes": 15,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2Freactive%2FCorsUtils.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2Freactive%2FCorsUtils.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2Freactive%2FCorsUtils.java?ref=d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -36,18 +36,21 @@\n public abstract class CorsUtils {\n \n \t/**\n-\t * Returns {@code true} if the request is a valid CORS one.\n+\t * Returns {@code true} if the request is a valid CORS one by checking {@code Origin}\n+\t * header presence and ensuring that origins are different via {@link #isSameOrigin}.\n \t */\n+\t@SuppressWarnings(\"deprecation\")\n \tpublic static boolean isCorsRequest(ServerHttpRequest request) {\n-\t\treturn (request.getHeaders().get(HttpHeaders.ORIGIN) != null);\n+\t\treturn request.getHeaders().containsKey(HttpHeaders.ORIGIN) && !isSameOrigin(request);\n \t}\n \n \t/**\n \t * Returns {@code true} if the request is a valid CORS pre-flight one.\n+\t * To be used in combination with {@link #isCorsRequest(ServerHttpRequest)} since\n+\t * regular CORS checks are not invoked here for performance reasons.\n \t */\n \tpublic static boolean isPreFlightRequest(ServerHttpRequest request) {\n-\t\treturn (request.getMethod() == HttpMethod.OPTIONS && isCorsRequest(request) &&\n-\t\t\t\trequest.getHeaders().get(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD) != null);\n+\t\treturn (request.getMethod() == HttpMethod.OPTIONS && request.getHeaders().containsKey(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD));\n \t}\n \n \t/**\n@@ -61,7 +64,9 @@ public static boolean isPreFlightRequest(ServerHttpRequest request) {\n \t *\n \t * @return {@code true} if the request is a same-origin one, {@code false} in case\n \t * of a cross-origin request\n+\t * @deprecated as of 5.2, same-origin checks are performed directly by {@link #isCorsRequest}\n \t */\n+\t@Deprecated\n \tpublic static boolean isSameOrigin(ServerHttpRequest request) {\n \t\tString origin = request.getHeaders().getOrigin();\n \t\tif (origin == null) {"
        },
        {
            "sha": "f3f0ea11e1d50e70476725d62e30c3a55c0e2ed4",
            "filename": "spring-web/src/main/java/org/springframework/web/cors/reactive/CorsWebFilter.java",
            "status": "modified",
            "additions": 5,
            "deletions": 9,
            "changes": 14,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2Freactive%2FCorsWebFilter.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2Freactive%2FCorsWebFilter.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2Freactive%2FCorsWebFilter.java?ref=d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -75,14 +75,10 @@ public CorsWebFilter(CorsConfigurationSource configSource, CorsProcessor process\n \t@Override\n \tpublic Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\n \t\tServerHttpRequest request = exchange.getRequest();\n-\t\tif (CorsUtils.isCorsRequest(request)) {\n-\t\t\tCorsConfiguration corsConfiguration = this.configSource.getCorsConfiguration(exchange);\n-\t\t\tif (corsConfiguration != null) {\n-\t\t\t\tboolean isValid = this.processor.process(corsConfiguration, exchange);\n-\t\t\t\tif (!isValid || CorsUtils.isPreFlightRequest(request)) {\n-\t\t\t\t\treturn Mono.empty();\n-\t\t\t\t}\n-\t\t\t}\n+\t\tCorsConfiguration corsConfiguration = this.configSource.getCorsConfiguration(exchange);\n+\t\tboolean isValid = this.processor.process(corsConfiguration, exchange);\n+\t\tif (!isValid || CorsUtils.isPreFlightRequest(request)) {\n+\t\t\treturn Mono.empty();\n \t\t}\n \t\treturn chain.filter(exchange);\n \t}"
        },
        {
            "sha": "840eddb80a6da3857943c83c50210d025454c32d",
            "filename": "spring-web/src/main/java/org/springframework/web/cors/reactive/DefaultCorsProcessor.java",
            "status": "modified",
            "additions": 7,
            "deletions": 16,
            "changes": 23,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2Freactive%2FDefaultCorsProcessor.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2Freactive%2FDefaultCorsProcessor.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2Freactive%2FDefaultCorsProcessor.java?ref=d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -40,8 +40,7 @@\n  * <p>Note that when input {@link CorsConfiguration} is {@code null}, this\n  * implementation does not reject simple or actual requests outright but simply\n  * avoid adding CORS headers to the response. CORS processing is also skipped\n- * if the response already contains CORS headers, or if the request is detected\n- * as a same-origin one.\n+ * if the response already contains CORS headers.\n  *\n  * @author Sebastien Deleuze\n  * @author Rossen Stoyanchev\n@@ -51,27 +50,26 @@ public class DefaultCorsProcessor implements CorsProcessor {\n \n \tprivate static final Log logger = LogFactory.getLog(DefaultCorsProcessor.class);\n \n+\tprivate static final List<String> VARY_HEADERS = Arrays.asList(\n+\t\t\tHttpHeaders.ORIGIN, HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, HttpHeaders.ACCESS_CONTROL_REQUEST_HEADERS);\n+\n \n \t@Override\n \tpublic boolean process(@Nullable CorsConfiguration config, ServerWebExchange exchange) {\n \n \t\tServerHttpRequest request = exchange.getRequest();\n \t\tServerHttpResponse response = exchange.getResponse();\n+\t\tresponse.getHeaders().addAll(HttpHeaders.VARY, VARY_HEADERS);\n \n \t\tif (!CorsUtils.isCorsRequest(request)) {\n \t\t\treturn true;\n \t\t}\n \n-\t\tif (responseHasCors(response)) {\n+\t\tif (response.getHeaders().getFirst(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN) != null) {\n \t\t\tlogger.trace(\"Skip: response already contains \\\"Access-Control-Allow-Origin\\\"\");\n \t\t\treturn true;\n \t\t}\n \n-\t\tif (CorsUtils.isSameOrigin(request)) {\n-\t\t\tlogger.trace(\"Skip: request is from same origin\");\n-\t\t\treturn true;\n-\t\t}\n-\n \t\tboolean preFlightRequest = CorsUtils.isPreFlightRequest(request);\n \t\tif (config == null) {\n \t\t\tif (preFlightRequest) {\n@@ -86,10 +84,6 @@ public boolean process(@Nullable CorsConfiguration config, ServerWebExchange exc\n \t\treturn handleInternal(exchange, config, preFlightRequest);\n \t}\n \n-\tprivate boolean responseHasCors(ServerHttpResponse response) {\n-\t\treturn response.getHeaders().getFirst(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN) != null;\n-\t}\n-\n \t/**\n \t * Invoked when one of the CORS checks failed.\n \t */\n@@ -107,9 +101,6 @@ protected boolean handleInternal(ServerWebExchange exchange,\n \t\tServerHttpResponse response = exchange.getResponse();\n \t\tHttpHeaders responseHeaders = response.getHeaders();\n \n-\t\tresponse.getHeaders().addAll(HttpHeaders.VARY, Arrays.asList(HttpHeaders.ORIGIN,\n-\t\t\t\tHttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, HttpHeaders.ACCESS_CONTROL_REQUEST_HEADERS));\n-\n \t\tString requestOrigin = request.getHeaders().getOrigin();\n \t\tString allowOrigin = checkOrigin(config, requestOrigin);\n \t\tif (allowOrigin == null) {"
        },
        {
            "sha": "3a4bf501c589c9ea9418a11202788cd2e619a2f9",
            "filename": "spring-web/src/main/java/org/springframework/web/filter/CorsFilter.java",
            "status": "modified",
            "additions": 5,
            "deletions": 10,
            "changes": 15,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Ffilter%2FCorsFilter.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Ffilter%2FCorsFilter.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Ffilter%2FCorsFilter.java?ref=d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -83,16 +83,11 @@ public void setCorsProcessor(CorsProcessor processor) {\n \tprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n \t\t\tFilterChain filterChain) throws ServletException, IOException {\n \n-\t\tif (CorsUtils.isCorsRequest(request)) {\n-\t\t\tCorsConfiguration corsConfiguration = this.configSource.getCorsConfiguration(request);\n-\t\t\tif (corsConfiguration != null) {\n-\t\t\t\tboolean isValid = this.processor.processRequest(corsConfiguration, request, response);\n-\t\t\t\tif (!isValid || CorsUtils.isPreFlightRequest(request)) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n+\t\tCorsConfiguration corsConfiguration = this.configSource.getCorsConfiguration(request);\n+\t\tboolean isValid = this.processor.processRequest(corsConfiguration, request, response);\n+\t\tif (!isValid || CorsUtils.isPreFlightRequest(request)) {\n+\t\t\treturn;\n \t\t}\n-\n \t\tfilterChain.doFilter(request, response);\n \t}\n "
        },
        {
            "sha": "61f0b330fc088dd6f7eea7e5429046a79ae39e83",
            "filename": "spring-web/src/test/java/org/springframework/web/cors/CorsUtilsTests.java",
            "status": "modified",
            "additions": 1,
            "deletions": 6,
            "changes": 7,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2FCorsUtilsTests.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2FCorsUtilsTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2FCorsUtilsTests.java?ref=d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -62,11 +62,6 @@ public void isNotPreFlightRequest() {\n \t\trequest.setMethod(HttpMethod.OPTIONS.name());\n \t\trequest.addHeader(HttpHeaders.ORIGIN, \"https://domain.com\");\n \t\tassertFalse(CorsUtils.isPreFlightRequest(request));\n-\n-\t\trequest = new MockHttpServletRequest();\n-\t\trequest.setMethod(HttpMethod.OPTIONS.name());\n-\t\trequest.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, \"GET\");\n-\t\tassertFalse(CorsUtils.isPreFlightRequest(request));\n \t}\n \n }"
        },
        {
            "sha": "57a519350e2db07538d4abc377d8dc304392e826",
            "filename": "spring-web/src/test/java/org/springframework/web/cors/DefaultCorsProcessorTests.java",
            "status": "modified",
            "additions": 23,
            "deletions": 1,
            "changes": 24,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2FDefaultCorsProcessorTests.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2FDefaultCorsProcessorTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2FDefaultCorsProcessorTests.java?ref=d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b",
            "patch": "@@ -51,13 +51,35 @@ public class DefaultCorsProcessorTests {\n \tpublic void setup() {\n \t\tthis.request = new MockHttpServletRequest();\n \t\tthis.request.setRequestURI(\"/test.html\");\n-\t\tthis.request.setRemoteHost(\"domain1.com\");\n+\t\tthis.request.setServerName(\"domain1.com\");\n \t\tthis.conf = new CorsConfiguration();\n \t\tthis.response = new MockHttpServletResponse();\n \t\tthis.response.setStatus(HttpServletResponse.SC_OK);\n \t\tthis.processor = new DefaultCorsProcessor();\n \t}\n \n+\t@Test\n+\tpublic void requestWithoutOriginHeader() throws Exception {\n+\t\tthis.request.setMethod(HttpMethod.GET.name());\n+\n+\t\tthis.processor.processRequest(this.conf, this.request, this.response);\n+\t\tassertFalse(this.response.containsHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN));\n+\t\tassertThat(this.response.getHeaders(HttpHeaders.VARY), contains(HttpHeaders.ORIGIN,\n+\t\t\t\tHttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, HttpHeaders.ACCESS_CONTROL_REQUEST_HEADERS));\n+\t\tassertEquals(HttpServletResponse.SC_OK, this.response.getStatus());\n+\t}\n+\n+\t@Test\n+\tpublic void sameOriginRequest() throws Exception {\n+\t\tthis.request.setMethod(HttpMethod.GET.name());\n+\t\tthis.request.addHeader(HttpHeaders.ORIGIN, \"http://domain1.com\");\n+\n+\t\tthis.processor.processRequest(this.conf, this.request, this.response);\n+\t\tassertFalse(this.response.containsHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN));\n+\t\tassertThat(this.response.getHeaders(HttpHeaders.VARY), contains(HttpHeaders.ORIGIN,\n+\t\t\t\tHttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, HttpHeaders.ACCESS_CONTROL_REQUEST_HEADERS));\n+\t\tassertEquals(HttpServletResponse.SC_OK, this.response.getStatus());\n+\t}\n \n \t@Test\n \tpublic void actualRequestWithOriginHeader() throws Exception {"
        },
        {
            "sha": "fbe406f09883de1f9298ce51bcb1fb8dc49893af",
            "filename": "spring-web/src/test/java/org/springframework/web/cors/reactive/CorsUtilsTests.java",
            "status": "modified",
            "additions": 2,
            "deletions": 5,
            "changes": 7,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2Freactive%2FCorsUtilsTests.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2Freactive%2FCorsUtilsTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2Freactive%2FCorsUtilsTests.java?ref=d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -39,7 +39,7 @@ public class CorsUtilsTests {\n \n \t@Test\n \tpublic void isCorsRequest() {\n-\t\tServerHttpRequest request = get(\"/\").header(HttpHeaders.ORIGIN, \"https://domain.com\").build();\n+\t\tServerHttpRequest request = get(\"http://domain.com/\").header(HttpHeaders.ORIGIN, \"https://domain.com\").build();\n \t\tassertTrue(CorsUtils.isCorsRequest(request));\n \t}\n \n@@ -65,9 +65,6 @@ public void isNotPreFlightRequest() {\n \n \t\trequest = options(\"/\").header(HttpHeaders.ORIGIN, \"https://domain.com\").build();\n \t\tassertFalse(CorsUtils.isPreFlightRequest(request));\n-\n-\t\trequest = options(\"/\").header(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, \"GET\").build();\n-\t\tassertFalse(CorsUtils.isPreFlightRequest(request));\n \t}\n \n \t@Test  // SPR-16262"
        },
        {
            "sha": "d212e05d9b2770cf1e55dfa84480a12e244affcb",
            "filename": "spring-web/src/test/java/org/springframework/web/cors/reactive/CorsWebFilterTests.java",
            "status": "modified",
            "additions": 45,
            "deletions": 6,
            "changes": 51,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2Freactive%2FCorsWebFilterTests.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2Freactive%2FCorsWebFilterTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2Freactive%2FCorsWebFilterTests.java?ref=d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -63,6 +63,46 @@ public void setup() throws Exception {\n \t\tfilter = new CorsWebFilter(r -> config);\n \t}\n \n+\t@Test\n+\tpublic void nonCorsRequest() {\n+\t\tWebFilterChain filterChain = (filterExchange) -> {\n+\t\t\ttry {\n+\t\t\t\tHttpHeaders headers = filterExchange.getResponse().getHeaders();\n+\t\t\t\tassertNull(headers.getFirst(ACCESS_CONTROL_ALLOW_ORIGIN));\n+\t\t\t\tassertNull(headers.getFirst(ACCESS_CONTROL_EXPOSE_HEADERS));\n+\t\t\t} catch (AssertionError ex) {\n+\t\t\t\treturn Mono.error(ex);\n+\t\t\t}\n+\t\t\treturn Mono.empty();\n+\n+\t\t};\n+\t\tMockServerWebExchange exchange = MockServerWebExchange.from(\n+\t\t\t\tMockServerHttpRequest\n+\t\t\t\t\t\t.get(\"https://domain1.com/test.html\")\n+\t\t\t\t\t\t.header(HOST, \"domain1.com\"));\n+\t\tthis.filter.filter(exchange, filterChain).block();\n+\t}\n+\n+\t@Test\n+\tpublic void sameOriginRequest() {\n+\t\tWebFilterChain filterChain = (filterExchange) -> {\n+\t\t\ttry {\n+\t\t\t\tHttpHeaders headers = filterExchange.getResponse().getHeaders();\n+\t\t\t\tassertNull(headers.getFirst(ACCESS_CONTROL_ALLOW_ORIGIN));\n+\t\t\t\tassertNull(headers.getFirst(ACCESS_CONTROL_EXPOSE_HEADERS));\n+\t\t\t} catch (AssertionError ex) {\n+\t\t\t\treturn Mono.error(ex);\n+\t\t\t}\n+\t\t\treturn Mono.empty();\n+\n+\t\t};\n+\t\tMockServerWebExchange exchange = MockServerWebExchange.from(\n+\t\t\t\tMockServerHttpRequest\n+\t\t\t\t\t\t.get(\"https://domain1.com/test.html\")\n+\t\t\t\t\t\t.header(ORIGIN, \"https://domain1.com\"));\n+\t\tthis.filter.filter(exchange, filterChain).block();\n+\t}\n+\n \t@Test\n \tpublic void validActualRequest() {\n \t\tWebFilterChain filterChain = (filterExchange) -> {\n@@ -82,7 +122,7 @@ public void validActualRequest() {\n \t\t\t\t\t\t.header(HOST, \"domain1.com\")\n \t\t\t\t\t\t.header(ORIGIN, \"https://domain2.com\")\n \t\t\t\t\t\t.header(\"header2\", \"foo\"));\n-\t\tthis.filter.filter(exchange, filterChain);\n+\t\tthis.filter.filter(exchange, filterChain).block();\n \t}\n \n \t@Test\n@@ -96,8 +136,7 @@ public void invalidActualRequest() throws ServletException, IOException {\n \n \t\tWebFilterChain filterChain = (filterExchange) -> Mono.error(\n \t\t\t\tnew AssertionError(\"Invalid requests must not be forwarded to the filter chain\"));\n-\t\tfilter.filter(exchange, filterChain);\n-\n+\t\tfilter.filter(exchange, filterChain).block();\n \t\tassertNull(exchange.getResponse().getHeaders().getFirst(ACCESS_CONTROL_ALLOW_ORIGIN));\n \t}\n \n@@ -115,7 +154,7 @@ public void validPreFlightRequest() throws ServletException, IOException {\n \n \t\tWebFilterChain filterChain = (filterExchange) -> Mono.error(\n \t\t\t\tnew AssertionError(\"Preflight requests must not be forwarded to the filter chain\"));\n-\t\tfilter.filter(exchange, filterChain);\n+\t\tfilter.filter(exchange, filterChain).block();\n \n \t\tHttpHeaders headers = exchange.getResponse().getHeaders();\n \t\tassertEquals(\"https://domain2.com\", headers.getFirst(ACCESS_CONTROL_ALLOW_ORIGIN));\n@@ -138,7 +177,7 @@ public void invalidPreFlightRequest() throws ServletException, IOException {\n \t\tWebFilterChain filterChain = (filterExchange) -> Mono.error(\n \t\t\t\tnew AssertionError(\"Preflight requests must not be forwarded to the filter chain\"));\n \n-\t\tfilter.filter(exchange, filterChain);\n+\t\tfilter.filter(exchange, filterChain).block();\n \n \t\tassertNull(exchange.getResponse().getHeaders().getFirst(ACCESS_CONTROL_ALLOW_ORIGIN));\n \t}"
        },
        {
            "sha": "30584420662143d429b562afdc225ec255bcab64",
            "filename": "spring-web/src/test/java/org/springframework/web/cors/reactive/DefaultCorsProcessorTests.java",
            "status": "modified",
            "additions": 31,
            "deletions": 0,
            "changes": 31,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2Freactive%2FDefaultCorsProcessorTests.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2Freactive%2FDefaultCorsProcessorTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fcors%2Freactive%2FDefaultCorsProcessorTests.java?ref=d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b",
            "patch": "@@ -60,6 +60,37 @@ public void setup() {\n \t}\n \n \n+\t@Test\n+\tpublic void requestWithoutOriginHeader() throws Exception {\n+\t\tMockServerHttpRequest request = MockServerHttpRequest\n+\t\t\t\t.method(HttpMethod.GET, \"http://domain1.com/test.html\")\n+\t\t\t\t.build();\n+\t\tServerWebExchange exchange = MockServerWebExchange.from(request);\n+\t\tthis.processor.process(this.conf, exchange);\n+\n+\t\tServerHttpResponse response = exchange.getResponse();\n+\t\tassertFalse(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN));\n+\t\tassertThat(response.getHeaders().get(VARY), contains(ORIGIN,\n+\t\t\t\tACCESS_CONTROL_REQUEST_METHOD, ACCESS_CONTROL_REQUEST_HEADERS));\n+\t\tassertNull(response.getStatusCode());\n+\t}\n+\n+\t@Test\n+\tpublic void sameOriginRequest() throws Exception {\n+\t\tMockServerHttpRequest request = MockServerHttpRequest\n+\t\t\t\t.method(HttpMethod.GET, \"http://domain1.com/test.html\")\n+\t\t\t\t.header(HttpHeaders.ORIGIN, \"http://domain1.com\")\n+\t\t\t\t.build();\n+\t\tServerWebExchange exchange = MockServerWebExchange.from(request);\n+\t\tthis.processor.process(this.conf, exchange);\n+\n+\t\tServerHttpResponse response = exchange.getResponse();\n+\t\tassertFalse(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN));\n+\t\tassertThat(response.getHeaders().get(VARY), contains(ORIGIN,\n+\t\t\t\tACCESS_CONTROL_REQUEST_METHOD, ACCESS_CONTROL_REQUEST_HEADERS));\n+\t\tassertNull(response.getStatusCode());\n+\t}\n+\n \t@Test\n \tpublic void actualRequestWithOriginHeader() throws Exception {\n \t\tServerWebExchange exchange = actualRequest();"
        },
        {
            "sha": "d2bc3f471b88fdb5590a1ca201eb5f4be47e2792",
            "filename": "spring-web/src/test/java/org/springframework/web/filter/CorsFilterTests.java",
            "status": "modified",
            "additions": 31,
            "deletions": 1,
            "changes": 32,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Ffilter%2FCorsFilterTests.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Ffilter%2FCorsFilterTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Ffilter%2FCorsFilterTests.java?ref=d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -52,6 +52,36 @@ public void setup() throws Exception {\n \t\tfilter = new CorsFilter(r -> config);\n \t}\n \n+\t@Test\n+\tpublic void nonCorsRequest() throws ServletException, IOException {\n+\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest(HttpMethod.GET.name(), \"/test.html\");\n+\t\tMockHttpServletResponse response = new MockHttpServletResponse();\n+\n+\t\tFilterChain filterChain = (filterRequest, filterResponse) -> {\n+\t\t\tassertNull(response.getHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN));\n+\t\t\tassertNull(response.getHeader(HttpHeaders.ACCESS_CONTROL_EXPOSE_HEADERS));\n+\t\t};\n+\t\tfilter.doFilter(request, response, filterChain);\n+\t}\n+\n+\t@Test\n+\tpublic void sameOriginRequest() throws ServletException, IOException {\n+\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest(HttpMethod.GET.name(), \"https://domain1.com/test.html\");\n+\t\trequest.addHeader(HttpHeaders.ORIGIN, \"https://domain1.com\");\n+\t\trequest.setScheme(\"https\");\n+\t\trequest.setServerName(\"domain1.com\");\n+\t\trequest.setServerPort(443);\n+\t\tMockHttpServletResponse response = new MockHttpServletResponse();\n+\n+\t\tFilterChain filterChain = (filterRequest, filterResponse) -> {\n+\t\t\tassertNull(response.getHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN));\n+\t\t\tassertNull(response.getHeader(HttpHeaders.ACCESS_CONTROL_EXPOSE_HEADERS));\n+\t\t};\n+\t\tfilter.doFilter(request, response, filterChain);\n+\t}\n+\n \t@Test\n \tpublic void validActualRequest() throws ServletException, IOException {\n "
        },
        {
            "sha": "a323217cd80e1559281aa779bbcdea770d52f965",
            "filename": "spring-webflux/src/main/java/org/springframework/web/reactive/handler/AbstractHandlerMapping.java",
            "status": "modified",
            "additions": 25,
            "deletions": 10,
            "changes": 35,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-webflux%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fhandler%2FAbstractHandlerMapping.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-webflux%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fhandler%2FAbstractHandlerMapping.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-webflux%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fhandler%2FAbstractHandlerMapping.java?ref=d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -23,6 +23,7 @@\n import org.springframework.beans.factory.BeanNameAware;\n import org.springframework.context.support.ApplicationObjectSupport;\n import org.springframework.core.Ordered;\n+import org.springframework.http.server.reactive.ServerHttpRequest;\n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n import org.springframework.web.cors.CorsConfiguration;\n@@ -53,6 +54,7 @@ public abstract class AbstractHandlerMapping extends ApplicationObjectSupport\n \n \tprivate final PathPatternParser patternParser;\n \n+\t@Nullable\n \tprivate CorsConfigurationSource corsConfigurationSource;\n \n \tprivate CorsProcessor corsProcessor = new DefaultCorsProcessor();\n@@ -65,7 +67,6 @@ public abstract class AbstractHandlerMapping extends ApplicationObjectSupport\n \n \tpublic AbstractHandlerMapping() {\n \t\tthis.patternParser = new PathPatternParser();\n-\t\tthis.corsConfigurationSource = new UrlBasedCorsConfigurationSource(this.patternParser);\n \t}\n \n \n@@ -113,8 +114,14 @@ public PathPatternParser getPathPatternParser() {\n \t */\n \tpublic void setCorsConfigurations(Map<String, CorsConfiguration> corsConfigurations) {\n \t\tAssert.notNull(corsConfigurations, \"corsConfigurations must not be null\");\n-\t\tthis.corsConfigurationSource = new UrlBasedCorsConfigurationSource(this.patternParser);\n-\t\t((UrlBasedCorsConfigurationSource) this.corsConfigurationSource).setCorsConfigurations(corsConfigurations);\n+\t\tif (!corsConfigurations.isEmpty()) {\n+\t\t\tUrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource(this.patternParser);\n+\t\t\tsource.setCorsConfigurations(corsConfigurations);\n+\t\t\tthis.corsConfigurationSource = source;\n+\t\t}\n+\t\telse {\n+\t\t\tthis.corsConfigurationSource = null;\n+\t\t}\n \t}\n \n \t/**\n@@ -175,12 +182,12 @@ public Mono<Object> getHandler(ServerWebExchange exchange) {\n \t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\tlogger.debug(exchange.getLogPrefix() + \"Mapped to \" + handler);\n \t\t\t}\n-\t\t\tif (CorsUtils.isCorsRequest(exchange.getRequest())) {\n-\t\t\t\tCorsConfiguration configA = this.corsConfigurationSource.getCorsConfiguration(exchange);\n-\t\t\t\tCorsConfiguration configB = getCorsConfiguration(handler, exchange);\n-\t\t\t\tCorsConfiguration config = (configA != null ? configA.combine(configB) : configB);\n-\t\t\t\tif (!getCorsProcessor().process(config, exchange) ||\n-\t\t\t\t\t\tCorsUtils.isPreFlightRequest(exchange.getRequest())) {\n+\t\t\tif (hasCorsConfigurationSource(handler)) {\n+\t\t\t\tServerHttpRequest request = exchange.getRequest();\n+\t\t\t\tCorsConfiguration config = (this.corsConfigurationSource != null ? this.corsConfigurationSource.getCorsConfiguration(exchange) : null);\n+\t\t\t\tCorsConfiguration handlerConfig = getCorsConfiguration(handler, exchange);\n+\t\t\t\tconfig = (config != null ? config.combine(handlerConfig) : handlerConfig);\n+\t\t\t\tif (!this.corsProcessor.process(config, exchange) || CorsUtils.isPreFlightRequest(request)) {\n \t\t\t\t\treturn REQUEST_HANDLED_HANDLER;\n \t\t\t\t}\n \t\t\t}\n@@ -200,6 +207,14 @@ public Mono<Object> getHandler(ServerWebExchange exchange) {\n \t */\n \tprotected abstract Mono<?> getHandlerInternal(ServerWebExchange exchange);\n \n+\t/**\n+\t * Return {@code true} if there is a {@link CorsConfigurationSource} for this handler.\n+\t * @since 5.2\n+\t */\n+\tprotected boolean hasCorsConfigurationSource(Object handler) {\n+\t\treturn handler instanceof CorsConfigurationSource || this.corsConfigurationSource != null;\n+\t}\n+\n \t/**\n \t * Retrieve the CORS configuration for the given handler.\n \t * @param handler the handler to check (never {@code null})"
        },
        {
            "sha": "a4c02f75f09f274f281bdc2337121b0ea90880bd",
            "filename": "spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java",
            "status": "modified",
            "additions": 8,
            "deletions": 0,
            "changes": 8,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-webflux%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fresult%2Fmethod%2FAbstractHandlerMethodMapping.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-webflux%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fresult%2Fmethod%2FAbstractHandlerMethodMapping.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-webflux%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fresult%2Fmethod%2FAbstractHandlerMethodMapping.java?ref=d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b",
            "patch": "@@ -370,6 +370,13 @@ protected HandlerMethod handleNoMatch(Set<T> mappings, ServerWebExchange exchang\n \t\treturn null;\n \t}\n \n+\t@Override\n+\tprotected boolean hasCorsConfigurationSource(Object handler) {\n+\t\treturn super.hasCorsConfigurationSource(handler) ||\n+\t\t\t\t(handler instanceof HandlerMethod && this.mappingRegistry.getCorsConfiguration((HandlerMethod) handler) != null) ||\n+\t\t\t\thandler.equals(PREFLIGHT_AMBIGUOUS_MATCH);\n+\t}\n+\n \t@Override\n \tprotected CorsConfiguration getCorsConfiguration(Object handler, ServerWebExchange exchange) {\n \t\tCorsConfiguration corsConfig = super.getCorsConfiguration(handler, exchange);\n@@ -451,6 +458,7 @@ public Map<T, HandlerMethod> getMappings() {\n \t\t/**\n \t\t * Return CORS configuration. Thread-safe for concurrent use.\n \t\t */\n+\t\t@Nullable\n \t\tpublic CorsConfiguration getCorsConfiguration(HandlerMethod handlerMethod) {\n \t\t\tHandlerMethod original = handlerMethod.getResolvedFromHandlerMethod();\n \t\t\treturn this.corsLookup.get(original != null ? original : handlerMethod);"
        },
        {
            "sha": "ca03dd92441c5a8f13033f5b5e65f23253ee51ef",
            "filename": "spring-webflux/src/test/java/org/springframework/web/reactive/handler/CorsUrlHandlerMappingTests.java",
            "status": "modified",
            "additions": 2,
            "deletions": 4,
            "changes": 6,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-webflux%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fhandler%2FCorsUrlHandlerMappingTests.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-webflux%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fhandler%2FCorsUrlHandlerMappingTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-webflux%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fhandler%2FCorsUrlHandlerMappingTests.java?ref=d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -31,7 +31,6 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNotSame;\n-import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertSame;\n \n /**\n@@ -74,8 +73,7 @@ public void preflightRequestWithoutCorsConfigurationProvider() throws Exception\n \t\tObject actual = this.handlerMapping.getHandler(exchange).block();\n \n \t\tassertNotNull(actual);\n-\t\tassertNotSame(this.welcomeController, actual);\n-\t\tassertNull(exchange.getResponse().getHeaders().getFirst(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN));\n+\t\tassertSame(this.welcomeController, actual);\n \t}\n \n \t@Test"
        },
        {
            "sha": "d84e9eb19edf44ab3d55f8b0e6a2f14f837a71c5",
            "filename": "spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java",
            "status": "modified",
            "additions": 24,
            "deletions": 10,
            "changes": 34,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-webmvc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fhandler%2FAbstractHandlerMapping.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-webmvc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fhandler%2FAbstractHandlerMapping.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-webmvc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fhandler%2FAbstractHandlerMapping.java?ref=d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -81,7 +81,8 @@ public abstract class AbstractHandlerMapping extends WebApplicationObjectSupport\n \n \tprivate final List<HandlerInterceptor> adaptedInterceptors = new ArrayList<>();\n \n-\tprivate CorsConfigurationSource corsConfigurationSource = new UrlBasedCorsConfigurationSource();\n+\t@Nullable\n+\tprivate CorsConfigurationSource corsConfigurationSource;\n \n \tprivate CorsProcessor corsProcessor = new DefaultCorsProcessor();\n \n@@ -206,11 +207,16 @@ public void setInterceptors(Object... interceptors) {\n \t */\n \tpublic void setCorsConfigurations(Map<String, CorsConfiguration> corsConfigurations) {\n \t\tAssert.notNull(corsConfigurations, \"corsConfigurations must not be null\");\n-\t\tUrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n-\t\tsource.setCorsConfigurations(corsConfigurations);\n-\t\tsource.setPathMatcher(this.pathMatcher);\n-\t\tsource.setUrlPathHelper(this.urlPathHelper);\n-\t\tthis.corsConfigurationSource = source;\n+\t\tif (!corsConfigurations.isEmpty()) {\n+\t\t\tUrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n+\t\t\tsource.setCorsConfigurations(corsConfigurations);\n+\t\t\tsource.setPathMatcher(this.pathMatcher);\n+\t\t\tsource.setUrlPathHelper(this.urlPathHelper);\n+\t\t\tthis.corsConfigurationSource = source;\n+\t\t}\n+\t\telse {\n+\t\t\tthis.corsConfigurationSource = null;\n+\t\t}\n \t}\n \n \t/**\n@@ -420,10 +426,10 @@ else if (logger.isDebugEnabled() && !request.getDispatcherType().equals(Dispatch\n \t\t\tlogger.debug(\"Mapped to \" + executionChain.getHandler());\n \t\t}\n \n-\t\tif (CorsUtils.isCorsRequest(request)) {\n-\t\t\tCorsConfiguration globalConfig = this.corsConfigurationSource.getCorsConfiguration(request);\n+\t\tif (hasCorsConfigurationSource(handler)) {\n+\t\t\tCorsConfiguration config = (this.corsConfigurationSource != null ? this.corsConfigurationSource.getCorsConfiguration(request) : null);\n \t\t\tCorsConfiguration handlerConfig = getCorsConfiguration(handler, request);\n-\t\t\tCorsConfiguration config = (globalConfig != null ? globalConfig.combine(handlerConfig) : handlerConfig);\n+\t\t\tconfig = (config != null ? config.combine(handlerConfig) : handlerConfig);\n \t\t\texecutionChain = getCorsHandlerExecutionChain(request, executionChain, config);\n \t\t}\n \n@@ -488,6 +494,14 @@ protected HandlerExecutionChain getHandlerExecutionChain(Object handler, HttpSer\n \t\treturn chain;\n \t}\n \n+\t/**\n+\t * Return {@code true} if there is a {@link CorsConfigurationSource} for this handler.\n+\t * @since 5.2\n+\t */\n+\tprotected boolean hasCorsConfigurationSource(Object handler) {\n+\t\treturn handler instanceof CorsConfigurationSource || this.corsConfigurationSource != null;\n+\t}\n+\n \t/**\n \t * Retrieve the CORS configuration for the given handler.\n \t * @param handler the handler to check (never {@code null})."
        },
        {
            "sha": "cf4f430ca69cfcb2db6cac8bd4348f4d400eb89e",
            "filename": "spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java",
            "status": "modified",
            "additions": 8,
            "deletions": 0,
            "changes": 8,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-webmvc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fhandler%2FAbstractHandlerMethodMapping.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-webmvc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fhandler%2FAbstractHandlerMethodMapping.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-webmvc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fhandler%2FAbstractHandlerMethodMapping.java?ref=d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b",
            "patch": "@@ -448,6 +448,13 @@ protected HandlerMethod handleNoMatch(Set<T> mappings, String lookupPath, HttpSe\n \t\treturn null;\n \t}\n \n+\t@Override\n+\tprotected boolean hasCorsConfigurationSource(Object handler) {\n+\t\treturn super.hasCorsConfigurationSource(handler) ||\n+\t\t\t\t(handler instanceof HandlerMethod && this.mappingRegistry.getCorsConfiguration((HandlerMethod) handler) != null) ||\n+\t\t\t\thandler.equals(PREFLIGHT_AMBIGUOUS_MATCH);\n+\t}\n+\n \t@Override\n \tprotected CorsConfiguration getCorsConfiguration(Object handler, HttpServletRequest request) {\n \t\tCorsConfiguration corsConfig = super.getCorsConfiguration(handler, request);\n@@ -555,6 +562,7 @@ public List<HandlerMethod> getHandlerMethodsByMappingName(String mappingName) {\n \t\t/**\n \t\t * Return CORS configuration. Thread-safe for concurrent use.\n \t\t */\n+\t\t@Nullable\n \t\tpublic CorsConfiguration getCorsConfiguration(HandlerMethod handlerMethod) {\n \t\t\tHandlerMethod original = handlerMethod.getResolvedFromHandlerMethod();\n \t\t\treturn this.corsLookup.get(original != null ? original : handlerMethod);"
        },
        {
            "sha": "71b6617efc0b9e786151ca967430138940cd0231",
            "filename": "spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportExtensionTests.java",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-webmvc%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fconfig%2Fannotation%2FWebMvcConfigurationSupportExtensionTests.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-webmvc%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fconfig%2Fannotation%2FWebMvcConfigurationSupportExtensionTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-webmvc%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fconfig%2Fannotation%2FWebMvcConfigurationSupportExtensionTests.java?ref=d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -138,7 +138,7 @@ public void handlerMappings() throws Exception {\n \t\tHandlerExecutionChain chain = rmHandlerMapping.getHandler(new MockHttpServletRequest(\"GET\", \"/\"));\n \t\tassertNotNull(chain);\n \t\tassertNotNull(chain.getInterceptors());\n-\t\tassertEquals(3, chain.getInterceptors().length);\n+\t\tassertEquals(4, chain.getInterceptors().length);\n \t\tassertEquals(LocaleChangeInterceptor.class, chain.getInterceptors()[0].getClass());\n \t\tassertEquals(ConversionServiceExposingInterceptor.class, chain.getInterceptors()[1].getClass());\n \t\tassertEquals(ResourceUrlProviderExposingInterceptor.class, chain.getInterceptors()[2].getClass());\n@@ -177,7 +177,7 @@ public void handlerMappings() throws Exception {\n \t\tchain = handlerMapping.getHandler(new MockHttpServletRequest(\"GET\", \"/resources/foo.gif\"));\n \t\tassertNotNull(chain);\n \t\tassertNotNull(chain.getHandler());\n-\t\tassertEquals(Arrays.toString(chain.getInterceptors()), 4, chain.getInterceptors().length);\n+\t\tassertEquals(Arrays.toString(chain.getInterceptors()), 5, chain.getInterceptors().length);\n \t\t// PathExposingHandlerInterceptor at chain.getInterceptors()[0]\n \t\tassertEquals(LocaleChangeInterceptor.class, chain.getInterceptors()[1].getClass());\n \t\tassertEquals(ConversionServiceExposingInterceptor.class, chain.getInterceptors()[2].getClass());"
        },
        {
            "sha": "d400c4ca3ec072ceff2e662421141768da81a3f0",
            "filename": "spring-webmvc/src/test/java/org/springframework/web/servlet/handler/CorsAbstractHandlerMappingTests.java",
            "status": "modified",
            "additions": 2,
            "deletions": 3,
            "changes": 5,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-webmvc%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fhandler%2FCorsAbstractHandlerMappingTests.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-webmvc%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fhandler%2FCorsAbstractHandlerMappingTests.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-webmvc%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fhandler%2FCorsAbstractHandlerMappingTests.java?ref=d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b",
            "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -81,8 +81,7 @@ public void preflightRequestWithoutCorsConfigurationProvider() throws Exception\n \t\tthis.request.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, \"GET\");\n \t\tHandlerExecutionChain chain = handlerMapping.getHandler(this.request);\n \t\tassertNotNull(chain);\n-\t\tassertNotNull(chain.getHandler());\n-\t\tassertTrue(chain.getHandler().getClass().getSimpleName().equals(\"PreFlightHandler\"));\n+\t\tassertTrue(chain.getHandler() instanceof SimpleHandler);\n \t}\n \n \t@Test"
        },
        {
            "sha": "1d399b80491a0ec3372356fe7905967b4dc32614",
            "filename": "spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-websocket%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fsocket%2Fsockjs%2Fsupport%2FAbstractSockJsService.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b/spring-websocket%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fsocket%2Fsockjs%2Fsupport%2FAbstractSockJsService.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-websocket%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fsocket%2Fsockjs%2Fsupport%2FAbstractSockJsService.java?ref=d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b",
            "patch": "@@ -33,6 +33,7 @@\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n \n+import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.InvalidMediaTypeException;\n@@ -48,7 +49,6 @@\n import org.springframework.util.StringUtils;\n import org.springframework.web.cors.CorsConfiguration;\n import org.springframework.web.cors.CorsConfigurationSource;\n-import org.springframework.web.cors.CorsUtils;\n import org.springframework.web.socket.WebSocketHandler;\n import org.springframework.web.socket.sockjs.SockJsException;\n import org.springframework.web.socket.sockjs.SockJsService;\n@@ -495,7 +495,7 @@ protected boolean checkOrigin(ServerHttpRequest request, ServerHttpResponse resp\n \t@Override\n \t@Nullable\n \tpublic CorsConfiguration getCorsConfiguration(HttpServletRequest request) {\n-\t\tif (!this.suppressCors && CorsUtils.isCorsRequest(request)) {\n+\t\tif (!this.suppressCors && (request.getHeader(HttpHeaders.ORIGIN) != null)) {\n \t\t\tCorsConfiguration config = new CorsConfiguration();\n \t\t\tconfig.setAllowedOrigins(new ArrayList<>(this.allowedOrigins));\n \t\t\tconfig.addAllowedMethod(\"*\");"
        }
    ]
}