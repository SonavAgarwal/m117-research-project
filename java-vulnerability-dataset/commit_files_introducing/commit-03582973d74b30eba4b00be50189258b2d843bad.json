{
    "sha": "03582973d74b30eba4b00be50189258b2d843bad",
    "node_id": "MDY6Q29tbWl0MTE0ODc1MzowMzU4Mjk3M2Q3NGIzMGViYTRiMDBiZTUwMTg5MjU4YjJkODQzYmFk",
    "commit": {
        "author": {
            "name": "Arjen Poutsma",
            "email": "apoutsma@vmware.com",
            "date": "2009-01-06T11:18:27Z"
        },
        "committer": {
            "name": "Arjen Poutsma",
            "email": "apoutsma@vmware.com",
            "date": "2009-01-06T11:18:27Z"
        },
        "message": "Initial import of OXM module",
        "tree": {
            "sha": "472f3cf6902643e4c788b48afba4707ea1288762",
            "url": "https://api.github.com/repos/spring-projects/spring-framework/git/trees/472f3cf6902643e4c788b48afba4707ea1288762"
        },
        "url": "https://api.github.com/repos/spring-projects/spring-framework/git/commits/03582973d74b30eba4b00be50189258b2d843bad",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/spring-projects/spring-framework/commits/03582973d74b30eba4b00be50189258b2d843bad",
    "html_url": "https://github.com/spring-projects/spring-framework/commit/03582973d74b30eba4b00be50189258b2d843bad",
    "comments_url": "https://api.github.com/repos/spring-projects/spring-framework/commits/03582973d74b30eba4b00be50189258b2d843bad/comments",
    "author": {
        "login": "poutsma",
        "id": 330665,
        "node_id": "MDQ6VXNlcjMzMDY2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/330665?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/poutsma",
        "html_url": "https://github.com/poutsma",
        "followers_url": "https://api.github.com/users/poutsma/followers",
        "following_url": "https://api.github.com/users/poutsma/following{/other_user}",
        "gists_url": "https://api.github.com/users/poutsma/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/poutsma/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/poutsma/subscriptions",
        "organizations_url": "https://api.github.com/users/poutsma/orgs",
        "repos_url": "https://api.github.com/users/poutsma/repos",
        "events_url": "https://api.github.com/users/poutsma/events{/privacy}",
        "received_events_url": "https://api.github.com/users/poutsma/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "poutsma",
        "id": 330665,
        "node_id": "MDQ6VXNlcjMzMDY2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/330665?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/poutsma",
        "html_url": "https://github.com/poutsma",
        "followers_url": "https://api.github.com/users/poutsma/followers",
        "following_url": "https://api.github.com/users/poutsma/following{/other_user}",
        "gists_url": "https://api.github.com/users/poutsma/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/poutsma/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/poutsma/subscriptions",
        "organizations_url": "https://api.github.com/users/poutsma/orgs",
        "repos_url": "https://api.github.com/users/poutsma/repos",
        "events_url": "https://api.github.com/users/poutsma/events{/privacy}",
        "received_events_url": "https://api.github.com/users/poutsma/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "d116c8733a121855b703b989a2867251bdc633a1",
            "url": "https://api.github.com/repos/spring-projects/spring-framework/commits/d116c8733a121855b703b989a2867251bdc633a1",
            "html_url": "https://github.com/spring-projects/spring-framework/commit/d116c8733a121855b703b989a2867251bdc633a1"
        }
    ],
    "stats": {
        "total": 8496,
        "additions": 8496,
        "deletions": 0
    },
    "files": [
        {
            "sha": "c9239fb9d3a701e0b3310189c53ba3924f710fc8",
            "filename": "org.springframework.oxm/build.xml",
            "status": "added",
            "additions": 6,
            "deletions": 0,
            "changes": 6,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fbuild.xml",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fbuild.xml",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fbuild.xml?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project name=\"org.springframework.oxm\">\n+\t<property file=\"${basedir}/../build.properties\"/>\n+\t<import file=\"${basedir}/../build-spring-framework/package-bundle.xml\"/>\n+\t<import file=\"${basedir}/../spring-build/standard/default.xml\"/>\n+</project>"
        },
        {
            "sha": "872ec245644feb7f3640da3b8cdfc4bf3ccc403e",
            "filename": "org.springframework.oxm/ivy.xml",
            "status": "added",
            "additions": 46,
            "deletions": 0,
            "changes": 46,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fivy.xml",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fivy.xml",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fivy.xml?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,46 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<?xml-stylesheet type=\"text/xsl\" href=\"http://ivyrep.jayasoft.org/ivy-doc.xsl\"?>\n+<ivy-module\n+\t\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\t\txsi:noNamespaceSchemaLocation=\"http://incubator.apache.org/ivy/schemas/ivy.xsd\"\n+\t\tversion=\"1.3\">\n+\n+\t<info organisation=\"org.springframework\" module=\"${ant.project.name}\">\n+\t\t<license name=\"Apache 2.0\" url=\"http://www.apache.org/licenses/LICENSE-2.0\"/>\n+\t</info>\n+\n+\t<configurations>\n+\t\t<include file=\"${spring.build.dir}/common/default-ivy-configurations.xml\"/>\n+\t\t<conf name=\"castor\" extends=\"runtime\" description=\"JARs needed to use Castor\"/>\n+\t\t<conf name=\"jms\" extends=\"runtime\" description=\"JARs needed to use OXM in JMS\"/>\n+\t\t<conf name=\"jaxb\" extends=\"runtime\" description=\"JARs needed to use JAXB\"/>\n+\t\t<conf name=\"jibx\" extends=\"runtime\" description=\"JARs needed to use JiBX\"/>\n+\t\t<conf name=\"xmlbeans\" extends=\"runtime\" description=\"JARs needed to use XMLBeans\"/>\n+\t\t<conf name=\"xstream\" extends=\"runtime\" description=\"JARs needed to use XStream\"/>\n+\t\t<conf name=\"web\" extends=\"runtime\" description=\"JARs needed to use OXM in Web apps\"/>\n+\t</configurations>\n+\n+\t<publications>\n+\t\t<artifact name=\"${ant.project.name}\"/>\n+\t\t<artifact name=\"${ant.project.name}-sources\" type=\"src\" ext=\"jar\"/>\n+\t</publications>\n+\n+\t<dependencies>\n+\t\t<dependency org=\"com.thoughtworks.xstream\" name=\"com.springsource.com.thoughtworks.xstream\" rev=\"1.3.0\" conf=\"optional, xstream->compile\"/>\n+\t\t<dependency org=\"javax.jms\" name=\"com.springsource.javax.jms\" rev=\"1.1.0\" conf=\"provided, jms->compile\"/>\n+\t\t<dependency org=\"javax.servlet\" name=\"com.springsource.javax.servlet\" rev=\"2.5.0\" conf=\"provided, web->compile\"/>\n+\t\t<dependency org=\"javax.xml.bind\" name=\"com.springsource.javax.xml.bind\" rev=\"2.1.7\" conf=\"optional, jaxb->compile\"/>\n+\t\t<dependency org=\"net.sourceforge.jibx\" name=\"com.springsource.org.jibx.runtime\" rev=\"1.1.5\" conf=\"optional, jibx->compile\"/>\n+\t\t<dependency org=\"org.apache.commons\" name=\"com.springsource.org.apache.commons.logging\" rev=\"1.1.1\" conf=\"compile->compile\"/>\n+\t\t<dependency org=\"org.apache.xmlbeans\" name=\"com.springsource.org.apache.xmlbeans\" rev=\"2.4.0\" conf=\"optional, xmlbeans->compile\"/>\n+\t\t<dependency org=\"org.codehaus.castor\" name=\"com.springsource.org.castor\" rev=\"1.2.0\"  conf=\"optional, castor->compile\"/>\n+\t\t<dependency org=\"org.springframework\" name=\"org.springframework.beans\" rev=\"latest.integration\" conf=\"compile->compile\"/>\n+\t\t<dependency org=\"org.springframework\" name=\"org.springframework.core\" rev=\"latest.integration\" conf=\"compile->compile\"/>\n+\t\t<dependency org=\"org.springframework\" name=\"org.springframework.jms\" rev=\"latest.integration\" conf=\"optional, jms->compile\"/>\n+\t\t<dependency org=\"org.springframework\" name=\"org.springframework.web.servlet\" rev=\"latest.integration\" conf=\"optional, web->compile\"/>\n+\t\t<!-- test dependencies -->\n+\t\t<dependency org=\"org.junit\" name=\"com.springsource.org.junit\" rev=\"4.5.0\" conf=\"test->runtime\"/>\n+\t\t<dependency org=\"org.easymock\" name=\"com.springsource.org.easymock\" rev=\"2.3.0\" conf=\"test->compile\"/>\n+\t</dependencies>\n+\n+</ivy-module>"
        },
        {
            "sha": "4636982093dc7300d0aac5a980ed88e76171d132",
            "filename": "org.springframework.oxm/oxm.iml",
            "status": "added",
            "additions": 96,
            "deletions": 0,
            "changes": 96,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Foxm.iml",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Foxm.iml",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Foxm.iml?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,96 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<module relativePaths=\"true\" type=\"JAVA_MODULE\" version=\"4\">\n+  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\n+    <exclude-output />\n+    <content url=\"file://$MODULE_DIR$\">\n+      <sourceFolder url=\"file://$MODULE_DIR$/src/main/java\" isTestSource=\"false\" />\n+      <sourceFolder url=\"file://$MODULE_DIR$/src/main/resources\" isTestSource=\"false\" />\n+      <sourceFolder url=\"file://$MODULE_DIR$/src/test/java\" isTestSource=\"true\" />\n+      <sourceFolder url=\"file://$MODULE_DIR$/src/test/resources\" isTestSource=\"true\" />\n+    </content>\n+    <orderEntry type=\"inheritedJdk\" />\n+    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n+    <orderEntry type=\"module\" module-name=\"beans\" />\n+    <orderEntry type=\"module\" module-name=\"core\" />\n+    <orderEntry type=\"module-library\">\n+      <library>\n+        <CLASSES>\n+          <root url=\"jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.logging/1.1.1/com.springsource.org.apache.commons.logging-1.1.1.jar!/\" />\n+        </CLASSES>\n+        <JAVADOC />\n+        <SOURCES>\n+          <root url=\"jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.logging/1.1.1/com.springsource.org.apache.commons.logging-sources-1.1.1.jar!/\" />\n+        </SOURCES>\n+      </library>\n+    </orderEntry>\n+    <orderEntry type=\"module\" module-name=\"jms\" />\n+    <orderEntry type=\"module-library\">\n+      <library>\n+        <CLASSES>\n+          <root url=\"jar://$IVY_CACHE$/javax.jms/com.springsource.javax.jms/1.1.0/com.springsource.javax.jms-1.1.0.jar!/\" />\n+        </CLASSES>\n+        <JAVADOC />\n+        <SOURCES>\n+          <root url=\"jar://$IVY_CACHE$/javax.jms/com.springsource.javax.jms/1.1.0/com.springsource.javax.jms-sources-1.1.0.jar!/\" />\n+        </SOURCES>\n+      </library>\n+    </orderEntry>\n+    <orderEntry type=\"module\" module-name=\"web-servlet\" />\n+    <orderEntry type=\"module-library\">\n+      <library>\n+        <CLASSES>\n+          <root url=\"jar://$IVY_CACHE$/javax.servlet/com.springsource.javax.servlet/2.5.0/com.springsource.javax.servlet-2.5.0.jar!/\" />\n+        </CLASSES>\n+        <JAVADOC />\n+        <SOURCES>\n+          <root url=\"jar://$IVY_CACHE$/javax.servlet/com.springsource.javax.servlet/2.5.0/com.springsource.javax.servlet-sources-2.5.0.jar!/\" />\n+        </SOURCES>\n+      </library>\n+    </orderEntry>\n+    <orderEntry type=\"module-library\">\n+      <library>\n+        <CLASSES>\n+          <root url=\"jar://$IVY_CACHE$/org.apache.xmlbeans/com.springsource.org.apache.xmlbeans/2.4.0/com.springsource.org.apache.xmlbeans-2.4.0.jar!/\" />\n+        </CLASSES>\n+        <JAVADOC />\n+        <SOURCES>\n+          <root url=\"jar://$IVY_CACHE$/org.apache.xmlbeans/com.springsource.org.apache.xmlbeans/2.4.0/com.springsource.org.apache.xmlbeans-sources-2.4.0.jar!/\" />\n+        </SOURCES>\n+      </library>\n+    </orderEntry>\n+    <orderEntry type=\"module-library\">\n+      <library>\n+        <CLASSES>\n+          <root url=\"jar://$IVY_CACHE$/org.codehaus.castor/com.springsource.org.castor/1.2.0/com.springsource.org.castor-1.2.0.jar!/\" />\n+        </CLASSES>\n+        <JAVADOC />\n+        <SOURCES>\n+          <root url=\"jar://$IVY_CACHE$/org.codehaus.castor/com.springsource.org.castor/1.2.0/com.springsource.org.castor-sources-1.2.0.jar!/\" />\n+        </SOURCES>\n+      </library>\n+    </orderEntry>\n+    <orderEntry type=\"module-library\">\n+      <library>\n+        <CLASSES>\n+          <root url=\"jar://$IVY_CACHE$/net.sourceforge.jibx/com.springsource.org.jibx.runtime/1.1.5/com.springsource.org.jibx.runtime-1.1.5.jar!/\" />\n+        </CLASSES>\n+        <JAVADOC />\n+        <SOURCES>\n+          <root url=\"jar://$IVY_CACHE$/net.sourceforge.jibx/com.springsource.org.jibx.runtime/1.1.5/com.springsource.org.jibx.runtime-sources-1.1.5.jar!/\" />\n+        </SOURCES>\n+      </library>\n+    </orderEntry>\n+    <orderEntry type=\"module-library\">\n+      <library>\n+        <CLASSES>\n+          <root url=\"jar://$IVY_CACHE$/com.thoughtworks.xstream/com.springsource.com.thoughtworks.xstream/1.3.0/com.springsource.com.thoughtworks.xstream-1.3.0.jar!/\" />\n+        </CLASSES>\n+        <JAVADOC />\n+        <SOURCES>\n+          <root url=\"jar://$IVY_CACHE$/com.thoughtworks.xstream/com.springsource.com.thoughtworks.xstream/1.3.0/com.springsource.com.thoughtworks.xstream-sources-1.3.0.jar!/\" />\n+        </SOURCES>\n+      </library>\n+    </orderEntry>\n+  </component>\n+</module>\n+"
        },
        {
            "sha": "fc35d2fa88c6629816201c7153ddf50b2c932093",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/AbstractMarshaller.java",
            "status": "added",
            "additions": 496,
            "deletions": 0,
            "changes": 496,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FAbstractMarshaller.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FAbstractMarshaller.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FAbstractMarshaller.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,496 @@\n+/*\n+ * Copyright 2006 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.Writer;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.stream.XMLEventReader;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLStreamReader;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.Result;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.sax.SAXResult;\n+import javax.xml.transform.sax.SAXSource;\n+import javax.xml.transform.stax.StAXSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.w3c.dom.Node;\n+import org.xml.sax.ContentHandler;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.ext.LexicalHandler;\n+import org.xml.sax.helpers.XMLReaderFactory;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.xml.transform.StaxSource;\n+import org.springframework.xml.transform.TraxUtils;\n+\n+/**\n+ * Abstract implementation of the <code>Marshaller</code> and <code>Unmarshaller</code> interface. This implementation\n+ * inspects the given <code>Source</code> or <code>Result</code>, and defers further handling to overridable template\n+ * methods.\n+ *\n+ * @author Arjen Poutsma\n+ * @since 1.0.0\n+ */\n+public abstract class AbstractMarshaller implements Marshaller, Unmarshaller {\n+\n+    /** Logger available to subclasses. */\n+    protected final Log logger = LogFactory.getLog(getClass());\n+\n+    private DocumentBuilderFactory documentBuilderFactory;\n+\n+    /**\n+     * Marshals the object graph with the given root into the provided <code>javax.xml.transform.Result</code>.\n+     * <p/>\n+     * This implementation inspects the given result, and calls <code>marshalDomResult</code>,\n+     * <code>marshalSaxResult</code>, or <code>marshalStreamResult</code>.\n+     *\n+     * @param graph  the root of the object graph to marshal\n+     * @param result the result to marshal to\n+     * @throws XmlMappingException      if the given object cannot be marshalled to the result\n+     * @throws IOException              if an I/O exception occurs\n+     * @throws IllegalArgumentException if <code>result</code> if neither a <code>DOMResult</code>,\n+     *                                  <code>SAXResult</code>, <code>StreamResult</code>\n+     * @see #marshalDomResult(Object,javax.xml.transform.dom.DOMResult)\n+     * @see #marshalSaxResult(Object,javax.xml.transform.sax.SAXResult)\n+     * @see #marshalStreamResult(Object,javax.xml.transform.stream.StreamResult)\n+     */\n+    public final void marshal(Object graph, Result result) throws XmlMappingException, IOException {\n+        if (result instanceof DOMResult) {\n+            marshalDomResult(graph, (DOMResult) result);\n+        }\n+        else if (TraxUtils.isStaxResult(result)) {\n+            marshalStaxResult(graph, result);\n+        }\n+        else if (result instanceof SAXResult) {\n+            marshalSaxResult(graph, (SAXResult) result);\n+        }\n+        else if (result instanceof StreamResult) {\n+            marshalStreamResult(graph, (StreamResult) result);\n+        }\n+        else {\n+            throw new IllegalArgumentException(\"Unknown Result type: \" + result.getClass());\n+        }\n+    }\n+\n+    /**\n+     * Unmarshals the given provided <code>javax.xml.transform.Source</code> into an object graph.\n+     * <p/>\n+     * This implementation inspects the given result, and calls <code>unmarshalDomSource</code>,\n+     * <code>unmarshalSaxSource</code>, or <code>unmarshalStreamSource</code>.\n+     *\n+     * @param source the source to marshal from\n+     * @return the object graph\n+     * @throws XmlMappingException      if the given source cannot be mapped to an object\n+     * @throws IOException              if an I/O Exception occurs\n+     * @throws IllegalArgumentException if <code>source</code> is neither a <code>DOMSource</code>, a\n+     *                                  <code>SAXSource</code>, nor a <code>StreamSource</code>\n+     * @see #unmarshalDomSource(javax.xml.transform.dom.DOMSource)\n+     * @see #unmarshalSaxSource(javax.xml.transform.sax.SAXSource)\n+     * @see #unmarshalStreamSource(javax.xml.transform.stream.StreamSource)\n+     */\n+    public final Object unmarshal(Source source) throws XmlMappingException, IOException {\n+        if (source instanceof DOMSource) {\n+            return unmarshalDomSource((DOMSource) source);\n+        }\n+        else if (TraxUtils.isStaxSource(source)) {\n+            return unmarshalStaxSource(source);\n+        }\n+        else if (source instanceof SAXSource) {\n+            return unmarshalSaxSource((SAXSource) source);\n+        }\n+        else if (source instanceof StreamSource) {\n+            return unmarshalStreamSource((StreamSource) source);\n+        }\n+        else {\n+            throw new IllegalArgumentException(\"Unknown Source type: \" + source.getClass());\n+        }\n+    }\n+\n+    /**\n+     * Create a <code>DocumentBuilder</code> that this marshaller will use for creating DOM documents when passed an\n+     * empty <code>DOMSource</code>. Can be overridden in subclasses, adding further initialization of the builder.\n+     *\n+     * @param factory the <code>DocumentBuilderFactory</code> that the DocumentBuilder should be created with\n+     * @return the <code>DocumentBuilder</code>\n+     * @throws javax.xml.parsers.ParserConfigurationException\n+     *          if thrown by JAXP methods\n+     */\n+    protected DocumentBuilder createDocumentBuilder(DocumentBuilderFactory factory)\n+            throws ParserConfigurationException {\n+        return factory.newDocumentBuilder();\n+    }\n+\n+    /**\n+     * Create a <code>DocumentBuilder</code> that this marshaller will use for creating DOM documents when passed an\n+     * empty <code>DOMSource</code>. The resulting <code>DocumentBuilderFactory</code> is cached, so this method will\n+     * only be called once.\n+     *\n+     * @return the DocumentBuilderFactory\n+     * @throws ParserConfigurationException if thrown by JAXP methods\n+     */\n+    protected DocumentBuilderFactory createDocumentBuilderFactory() throws ParserConfigurationException {\n+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+        factory.setValidating(false);\n+        factory.setNamespaceAware(true);\n+        return factory;\n+    }\n+\n+    /**\n+     * Create a <code>XMLReader</code> that this marshaller will when passed an empty <code>SAXSource</code>.\n+     *\n+     * @return the XMLReader\n+     * @throws SAXException if thrown by JAXP methods\n+     */\n+    protected XMLReader createXmlReader() throws SAXException {\n+        return XMLReaderFactory.createXMLReader();\n+    }\n+\n+    //\n+    // Marshalling\n+    //\n+\n+    /**\n+     * Template method for handling <code>DOMResult</code>s. This implementation defers to <code>marshalDomNode</code>.\n+     *\n+     * @param graph     the root of the object graph to marshal\n+     * @param domResult the <code>DOMResult</code>\n+     * @throws XmlMappingException      if the given object cannot be marshalled to the result\n+     * @throws IllegalArgumentException if the <code>domResult</code> is empty\n+     * @see #marshalDomNode(Object,org.w3c.dom.Node)\n+     */\n+    protected void marshalDomResult(Object graph, DOMResult domResult) throws XmlMappingException {\n+        Assert.notNull(domResult.getNode(), \"DOMResult does not contain Node\");\n+        marshalDomNode(graph, domResult.getNode());\n+    }\n+\n+    /**\n+     * Template method for handling <code>StaxResult</code>s.  This implementation defers to\n+     * <code>marshalXMLSteamWriter</code>, or <code>marshalXMLEventConsumer</code>, depending on what is contained in\n+     * the <code>StaxResult</code>.\n+     *\n+     * @param graph      the root of the object graph to marshal\n+     * @param staxResult a Spring-WS {@link StaxSource} or JAXP 1.4 {@link StAXSource}\n+     * @throws XmlMappingException      if the given object cannot be marshalled to the result\n+     * @throws IllegalArgumentException if the <code>domResult</code> is empty\n+     * @see #marshalDomNode(Object,org.w3c.dom.Node)\n+     */\n+    protected void marshalStaxResult(Object graph, Result staxResult) throws XmlMappingException {\n+        XMLStreamWriter streamWriter = TraxUtils.getXMLStreamWriter(staxResult);\n+        if (streamWriter != null) {\n+            marshalXmlStreamWriter(graph, streamWriter);\n+        }\n+        else {\n+            XMLEventWriter eventWriter = TraxUtils.getXMLEventWriter(staxResult);\n+            if (eventWriter != null) {\n+                marshalXmlEventWriter(graph, eventWriter);\n+            }\n+            else {\n+                throw new IllegalArgumentException(\"StaxResult contains neither XMLStreamWriter nor XMLEventConsumer\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Template method for handling <code>SAXResult</code>s. This implementation defers to\n+     * <code>marshalSaxHandlers</code>.\n+     *\n+     * @param graph     the root of the object graph to marshal\n+     * @param saxResult the <code>SAXResult</code>\n+     * @throws XmlMappingException if the given object cannot be marshalled to the result\n+     * @see #marshalSaxHandlers(Object,org.xml.sax.ContentHandler,org.xml.sax.ext.LexicalHandler)\n+     */\n+    protected void marshalSaxResult(Object graph, SAXResult saxResult) throws XmlMappingException {\n+        ContentHandler contentHandler = saxResult.getHandler();\n+        Assert.notNull(contentHandler, \"ContentHandler not set on SAXResult\");\n+        LexicalHandler lexicalHandler = saxResult.getLexicalHandler();\n+        marshalSaxHandlers(graph, contentHandler, lexicalHandler);\n+    }\n+\n+    /**\n+     * Template method for handling <code>StreamResult</code>s. This implementation defers to\n+     * <code>marshalOutputStream</code>, or <code>marshalWriter</code>, depending on what is contained in the\n+     * <code>StreamResult</code>\n+     *\n+     * @param graph        the root of the object graph to marshal\n+     * @param streamResult the <code>StreamResult</code>\n+     * @throws IOException              if an I/O Exception occurs\n+     * @throws XmlMappingException      if the given object cannot be marshalled to the result\n+     * @throws IllegalArgumentException if <code>streamResult</code> contains neither <code>OutputStream</code> nor\n+     *                                  <code>Writer</code>.\n+     */\n+    protected void marshalStreamResult(Object graph, StreamResult streamResult)\n+            throws XmlMappingException, IOException {\n+        if (streamResult.getOutputStream() != null) {\n+            marshalOutputStream(graph, streamResult.getOutputStream());\n+        }\n+        else if (streamResult.getWriter() != null) {\n+            marshalWriter(graph, streamResult.getWriter());\n+        }\n+        else {\n+            throw new IllegalArgumentException(\"StreamResult contains neither OutputStream nor Writer\");\n+        }\n+    }\n+\n+    //\n+    // Unmarshalling\n+    //\n+\n+    /**\n+     * Template method for handling <code>DOMSource</code>s. This implementation defers to\n+     * <code>unmarshalDomNode</code>. If the given source is empty, an empty source <code>Document</code> will be\n+     * created as a placeholder.\n+     *\n+     * @param domSource the <code>DOMSource</code>\n+     * @return the object graph\n+     * @throws IllegalArgumentException if the <code>domSource</code> is empty\n+     * @throws XmlMappingException      if the given source cannot be mapped to an object\n+     * @see #unmarshalDomNode(org.w3c.dom.Node)\n+     */\n+    protected Object unmarshalDomSource(DOMSource domSource) throws XmlMappingException {\n+        if (domSource.getNode() == null) {\n+            try {\n+                if (documentBuilderFactory == null) {\n+                    documentBuilderFactory = createDocumentBuilderFactory();\n+                }\n+                DocumentBuilder documentBuilder = createDocumentBuilder(documentBuilderFactory);\n+                domSource.setNode(documentBuilder.newDocument());\n+            }\n+            catch (ParserConfigurationException ex) {\n+                throw new UnmarshallingFailureException(\n+                        \"Could not create document placeholder for DOMSource: \" + ex.getMessage(), ex);\n+            }\n+        }\n+        return unmarshalDomNode(domSource.getNode());\n+    }\n+\n+    /**\n+     * Template method for handling <code>StaxSource</code>s. This implementation defers to\n+     * <code>unmarshalXmlStreamReader</code>, or <code>unmarshalXmlEventReader</code>.\n+     *\n+     * @param staxSource the <code>StaxSource</code>\n+     * @return the object graph\n+     * @throws XmlMappingException if the given source cannot be mapped to an object\n+     */\n+    protected Object unmarshalStaxSource(Source staxSource) throws XmlMappingException {\n+        XMLStreamReader streamReader = TraxUtils.getXMLStreamReader(staxSource);\n+        if (streamReader != null) {\n+            return unmarshalXmlStreamReader(streamReader);\n+        }\n+        else {\n+            XMLEventReader eventReader = TraxUtils.getXMLEventReader(staxSource);\n+            if (eventReader != null) {\n+                return unmarshalXmlEventReader(eventReader);\n+            }\n+            else {\n+                throw new IllegalArgumentException(\"StaxSource contains neither XMLStreamReader nor XMLEventReader\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Template method for handling <code>SAXSource</code>s. This implementation defers to\n+     * <code>unmarshalSaxReader</code>.\n+     *\n+     * @param saxSource the <code>SAXSource</code>\n+     * @return the object graph\n+     * @throws XmlMappingException if the given source cannot be mapped to an object\n+     * @throws IOException         if an I/O Exception occurs\n+     * @see #unmarshalSaxReader(org.xml.sax.XMLReader,org.xml.sax.InputSource)\n+     */\n+    protected Object unmarshalSaxSource(SAXSource saxSource) throws XmlMappingException, IOException {\n+        if (saxSource.getXMLReader() == null) {\n+            try {\n+                saxSource.setXMLReader(createXmlReader());\n+            }\n+            catch (SAXException ex) {\n+                throw new UnmarshallingFailureException(\"Could not create XMLReader for SAXSource: \" + ex.getMessage(),\n+                        ex);\n+            }\n+        }\n+        if (saxSource.getInputSource() == null) {\n+            saxSource.setInputSource(new InputSource());\n+        }\n+        return unmarshalSaxReader(saxSource.getXMLReader(), saxSource.getInputSource());\n+    }\n+\n+    /**\n+     * Template method for handling <code>StreamSource</code>s. This implementation defers to\n+     * <code>unmarshalInputStream</code>, or <code>unmarshalReader</code>.\n+     *\n+     * @param streamSource the <code>StreamSource</code>\n+     * @return the object graph\n+     * @throws IOException         if an I/O exception occurs\n+     * @throws XmlMappingException if the given source cannot be mapped to an object\n+     */\n+    protected Object unmarshalStreamSource(StreamSource streamSource) throws XmlMappingException, IOException {\n+        if (streamSource.getInputStream() != null) {\n+            return unmarshalInputStream(streamSource.getInputStream());\n+        }\n+        else if (streamSource.getReader() != null) {\n+            return unmarshalReader(streamSource.getReader());\n+        }\n+        else {\n+            throw new IllegalArgumentException(\"StreamSource contains neither InputStream nor Reader\");\n+        }\n+    }\n+\n+    //\n+    // Abstract template methods\n+    //\n+\n+    /**\n+     * Abstract template method for marshalling the given object graph to a DOM <code>Node</code>.\n+     * <p/>\n+     * In practice, node is be a <code>Document</code> node, a <code>DocumentFragment</code> node, or a\n+     * <code>Element</code> node. In other words, a node that accepts children.\n+     *\n+     * @param graph the root of the object graph to marshal\n+     * @param node  The DOM node that will contain the result tree\n+     * @throws XmlMappingException if the given object cannot be marshalled to the DOM node\n+     * @see org.w3c.dom.Document\n+     * @see org.w3c.dom.DocumentFragment\n+     * @see org.w3c.dom.Element\n+     */\n+    protected abstract void marshalDomNode(Object graph, Node node) throws XmlMappingException;\n+\n+    /**\n+     * Abstract template method for marshalling the given object to a StAX <code>XMLEventWriter</code>.\n+     *\n+     * @param graph       the root of the object graph to marshal\n+     * @param eventWriter the <code>XMLEventWriter</code> to write to\n+     * @throws XmlMappingException if the given object cannot be marshalled to the DOM node\n+     */\n+    protected abstract void marshalXmlEventWriter(Object graph, XMLEventWriter eventWriter) throws XmlMappingException;\n+\n+    /**\n+     * Abstract template method for marshalling the given object to a StAX <code>XMLStreamWriter</code>.\n+     *\n+     * @param graph        the root of the object graph to marshal\n+     * @param streamWriter the <code>XMLStreamWriter</code> to write to\n+     * @throws XmlMappingException if the given object cannot be marshalled to the DOM node\n+     */\n+    protected abstract void marshalXmlStreamWriter(Object graph, XMLStreamWriter streamWriter)\n+            throws XmlMappingException;\n+\n+    /**\n+     * Abstract template method for marshalling the given object graph to a <code>OutputStream</code>.\n+     *\n+     * @param graph        the root of the object graph to marshal\n+     * @param outputStream the <code>OutputStream</code> to write to\n+     * @throws XmlMappingException if the given object cannot be marshalled to the writer\n+     * @throws IOException         if an I/O exception occurs\n+     */\n+    protected abstract void marshalOutputStream(Object graph, OutputStream outputStream)\n+            throws XmlMappingException, IOException;\n+\n+    /**\n+     * Abstract template method for marshalling the given object graph to a SAX <code>ContentHandler</code>.\n+     *\n+     * @param graph          the root of the object graph to marshal\n+     * @param contentHandler the SAX <code>ContentHandler</code>\n+     * @param lexicalHandler the SAX2 <code>LexicalHandler</code>. Can be <code>null</code>.\n+     * @throws XmlMappingException if the given object cannot be marshalled to the handlers\n+     */\n+    protected abstract void marshalSaxHandlers(Object graph,\n+                                               ContentHandler contentHandler,\n+                                               LexicalHandler lexicalHandler) throws XmlMappingException;\n+\n+    /**\n+     * Abstract template method for marshalling the given object graph to a <code>Writer</code>.\n+     *\n+     * @param graph  the root of the object graph to marshal\n+     * @param writer the <code>Writer</code> to write to\n+     * @throws XmlMappingException if the given object cannot be marshalled to the writer\n+     * @throws IOException         if an I/O exception occurs\n+     */\n+    protected abstract void marshalWriter(Object graph, Writer writer) throws XmlMappingException, IOException;\n+\n+    /**\n+     * Abstract template method for unmarshalling from a given DOM <code>Node</code>.\n+     *\n+     * @param node The DOM node that contains the objects to be unmarshalled\n+     * @return the object graph\n+     * @throws XmlMappingException if the given DOM node cannot be mapped to an object\n+     */\n+    protected abstract Object unmarshalDomNode(Node node) throws XmlMappingException;\n+\n+    /**\n+     * Abstract template method for unmarshalling from a given Stax <code>XMLEventReader</code>.\n+     *\n+     * @param eventReader The <code>XMLEventReader</code> to read from\n+     * @return the object graph\n+     * @throws XmlMappingException if the given event reader cannot be converted to an object\n+     */\n+    protected abstract Object unmarshalXmlEventReader(XMLEventReader eventReader) throws XmlMappingException;\n+\n+    /**\n+     * Abstract template method for unmarshalling from a given Stax <code>XMLStreamReader</code>.\n+     *\n+     * @param streamReader The <code>XMLStreamReader</code> to read from\n+     * @return the object graph\n+     * @throws XmlMappingException if the given stream reader cannot be converted to an object\n+     */\n+    protected abstract Object unmarshalXmlStreamReader(XMLStreamReader streamReader) throws XmlMappingException;\n+\n+    /**\n+     * Abstract template method for unmarshalling from a given <code>InputStream</code>.\n+     *\n+     * @param inputStream the <code>InputStreamStream</code> to read from\n+     * @return the object graph\n+     * @throws XmlMappingException if the given stream cannot be converted to an object\n+     * @throws IOException         if an I/O exception occurs\n+     */\n+    protected abstract Object unmarshalInputStream(InputStream inputStream) throws XmlMappingException, IOException;\n+\n+    /**\n+     * Abstract template method for unmarshalling from a given <code>Reader</code>.\n+     *\n+     * @param reader the <code>Reader</code> to read from\n+     * @return the object graph\n+     * @throws XmlMappingException if the given reader cannot be converted to an object\n+     * @throws IOException         if an I/O exception occurs\n+     */\n+    protected abstract Object unmarshalReader(Reader reader) throws XmlMappingException, IOException;\n+\n+    /**\n+     * Abstract template method for unmarshalling using a given SAX <code>XMLReader</code> and\n+     * <code>InputSource</code>.\n+     *\n+     * @param xmlReader   the SAX <code>XMLReader</code> to parse with\n+     * @param inputSource the input source to parse from\n+     * @return the object graph\n+     * @throws XmlMappingException if the given reader and input source cannot be converted to an object\n+     * @throws java.io.IOException if an I/O exception occurs\n+     */\n+    protected abstract Object unmarshalSaxReader(XMLReader xmlReader, InputSource inputSource)\n+            throws XmlMappingException, IOException;\n+}"
        },
        {
            "sha": "1acac5e54129f9877b7e09fa12ff91f98bfe1aa5",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/GenericMarshaller.java",
            "status": "added",
            "additions": 40,
            "deletions": 0,
            "changes": 40,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FGenericMarshaller.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FGenericMarshaller.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FGenericMarshaller.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2007 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Type;\n+\n+/**\n+ * Extension of the {@link Marshaller} interface that supports Java 5 generics. More specifically, this marshaller adds\n+ * support for the new {@link Type} hierarchy, returned by methods such as {@link Method#getGenericParameterTypes()} and\n+ * {@link Method#getGenericReturnType()}.\n+ *\n+ * @author Arjen Poutsma\n+ * @since 1.0.2\n+ */\n+public interface GenericMarshaller extends Marshaller {\n+\n+    /**\n+     * Indicates whether this marshaller can marshal instances of the supplied type.\n+     *\n+     * @param type the type that this marshaller is being asked if it can marshal\n+     * @return <code>true</code> if this marshaller can indeed marshal instances of the supplied type;\n+     *         <code>false</code> otherwise\n+     */\n+    boolean supports(Type type);\n+}"
        },
        {
            "sha": "9a3904eda9f1fe4c9a967847d0db3093e2bed064",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/GenericMarshallingFailureException.java",
            "status": "added",
            "additions": 38,
            "deletions": 0,
            "changes": 38,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FGenericMarshallingFailureException.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FGenericMarshallingFailureException.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FGenericMarshallingFailureException.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm;\n+\n+/**\n+ * Base class for exception thrown when a marshalling or unmarshalling error occurs.\n+ *\n+ * @author Arjen Poutsma\n+ * @see MarshallingFailureException\n+ * @see UnmarshallingFailureException\n+ * @since 1.0.0\n+ */\n+public abstract class GenericMarshallingFailureException extends XmlMappingException {\n+\n+    /** Constructor for <code>GenericMarshallingFailureException</code>. */\n+    public GenericMarshallingFailureException(String msg) {\n+        super(msg);\n+    }\n+\n+    /** Constructor for <code>GenericMarshallingFailureException</code>. */\n+    public GenericMarshallingFailureException(String msg, Throwable ex) {\n+        super(msg, ex);\n+    }\n+\n+}"
        },
        {
            "sha": "f9bdc6778f250d531a2f34c7df6799fc4eaf0108",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/GenericUnmarshaller.java",
            "status": "added",
            "additions": 40,
            "deletions": 0,
            "changes": 40,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FGenericUnmarshaller.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FGenericUnmarshaller.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FGenericUnmarshaller.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2007 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Type;\n+\n+/**\n+ * Extension of the {@link Unmarshaller} interface that supports Java 5 generics. More specifically, this unmarshaller\n+ * adds support for the new {@link Type} hierarchy, returned by methods such as {@link\n+ * Method#getGenericParameterTypes()} and {@link Method#getGenericReturnType()}.\n+ *\n+ * @author Arjen Poutsma\n+ * @since 1.0.2\n+ */\n+public interface GenericUnmarshaller extends Unmarshaller {\n+\n+    /**\n+     * Indicates whether this unmarshaller can unmarshal instances of the supplied type.\n+     *\n+     * @param type the type that this unmarshaller is being asked if it can marshal\n+     * @return <code>true</code> if this unmarshaller can indeed unmarshal to the supplied type; <code>false</code>\n+     *         otherwise\n+     */\n+    boolean supports(Type type);\n+}"
        },
        {
            "sha": "0f3e7ab688378a7fa7d95c9ce34d7e40d58eb061",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/Marshaller.java",
            "status": "added",
            "additions": 53,
            "deletions": 0,
            "changes": 53,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FMarshaller.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FMarshaller.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FMarshaller.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm;\n+\n+import java.io.IOException;\n+import javax.xml.transform.Result;\n+\n+/**\n+ * Defines the contract for Object XML Mapping Marshallers. Implementations of this interface can serialize a given\n+ * Object to an XML Stream.\n+ * <p/>\n+ * Although the <code>marshal</code> method accepts a <code>java.lang.Object</code> as its first parameter, most\n+ * <code>Marshaller</code> implementations cannot handle arbitrary <code>java.lang.Object</code>. Instead, a object\n+ * class must be registered with the marshaller, or have a common base class.\n+ *\n+ * @author Arjen Poutsma\n+ * @since 1.0.0\n+ */\n+public interface Marshaller {\n+\n+    /**\n+     * Marshals the object graph with the given root into the provided {@link Result}.\n+     *\n+     * @param graph  the root of the object graph to marshal\n+     * @param result the result to marshal to\n+     * @throws XmlMappingException if the given object cannot be marshalled to the result\n+     * @throws IOException         if an I/O exception occurs\n+     */\n+    void marshal(Object graph, Result result) throws XmlMappingException, IOException;\n+\n+    /**\n+     * Indicates whether this marshaller can marshal instances of the supplied type.\n+     *\n+     * @param clazz the class that this marshaller is being asked if it can marshal\n+     * @return <code>true</code> if this marshaller can indeed marshal instances of the supplied class;\n+     *         <code>false</code> otherwise\n+     */\n+    boolean supports(Class clazz);\n+\n+}"
        },
        {
            "sha": "011d9573bae2a7b80eb1aa82c8708f95fd152f1a",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/MarshallingFailureException.java",
            "status": "added",
            "additions": 44,
            "deletions": 0,
            "changes": 44,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FMarshallingFailureException.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FMarshallingFailureException.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FMarshallingFailureException.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm;\n+\n+/**\n+ * Exception thrown on marshalling failure.\n+ *\n+ * @author Arjen Poutsma\n+ * @since 1.0.0\n+ */\n+public class MarshallingFailureException extends GenericMarshallingFailureException {\n+\n+    /**\n+     * Construct a <code>MarshallingFailureException</code> with the specified detail message.\n+     *\n+     * @param msg the detail message\n+     */\n+    public MarshallingFailureException(String msg) {\n+        super(msg);\n+    }\n+\n+    /**\n+     * Construct a <code>MarshallingFailureException</code> with the specified detail message and nested exception.\n+     *\n+     * @param msg the detail message\n+     * @param ex  the nested exception\n+     */\n+    public MarshallingFailureException(String msg, Throwable ex) {\n+        super(msg, ex);\n+    }\n+}"
        },
        {
            "sha": "c19a77fe313e70088f0868b9cb3894a4c83f6556",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/UncategorizedXmlMappingException.java",
            "status": "added",
            "additions": 30,
            "deletions": 0,
            "changes": 30,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FUncategorizedXmlMappingException.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FUncategorizedXmlMappingException.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FUncategorizedXmlMappingException.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm;\n+\n+/**\n+ * Superclass for exceptions that cannot be distinguished further.\n+ *\n+ * @author Arjen Poutsma\n+ * @since 1.0.0\n+ */\n+public abstract class UncategorizedXmlMappingException extends XmlMappingException {\n+\n+    /** Constructor for <code>UncategorizedXmlMappingException</code>. */\n+    protected UncategorizedXmlMappingException(String msg, Throwable ex) {\n+        super(msg, ex);\n+    }\n+}"
        },
        {
            "sha": "c12cbbef03f7d7af0d7aeae906601a3903eb654f",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/Unmarshaller.java",
            "status": "added",
            "additions": 50,
            "deletions": 0,
            "changes": 50,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FUnmarshaller.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FUnmarshaller.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FUnmarshaller.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2005-2007 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm;\n+\n+import java.io.IOException;\n+import javax.xml.transform.Source;\n+\n+/**\n+ * Defines the contract for Object XML Mapping unmarshallers.\n+ * <p/>\n+ * <p>Implementations of this interface can deserialize a given XML Stream to an Object graph.\n+ *\n+ * @author Arjen Poutsma\n+ * @since 1.0.0\n+ */\n+public interface Unmarshaller {\n+\n+    /**\n+     * Unmarshals the given {@link Source} into an object graph.\n+     *\n+     * @param source the source to marshal from\n+     * @return the object graph\n+     * @throws XmlMappingException if the given source cannot be mapped to an object\n+     * @throws IOException         if an I/O Exception occurs\n+     */\n+    Object unmarshal(Source source) throws XmlMappingException, IOException;\n+\n+    /**\n+     * Indicates whether this unmarshaller can unmarshal instances of the supplied type.\n+     *\n+     * @param clazz the class that this unmarshaller is being asked if it can marshal\n+     * @return <code>true</code> if this unmarshaller can indeed unmarshal to the supplied class; <code>false</code>\n+     *         otherwise\n+     */\n+    boolean supports(Class clazz);\n+\n+}"
        },
        {
            "sha": "d6986f22c3c8bf801618a7b6cacc8bd64fc765e3",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/UnmarshallingFailureException.java",
            "status": "added",
            "additions": 35,
            "deletions": 0,
            "changes": 35,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FUnmarshallingFailureException.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FUnmarshallingFailureException.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FUnmarshallingFailureException.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm;\n+\n+/**\n+ * Exception thrown on unmarshalling failure.\n+ *\n+ * @author Arjen Poutsma\n+ * @since 1.0.0\n+ */\n+public class UnmarshallingFailureException extends GenericMarshallingFailureException {\n+\n+    /** Constructor for <code>UnmarshallingFailureException</code>. */\n+    public UnmarshallingFailureException(String msg) {\n+        super(msg);\n+    }\n+\n+    /** Constructor for <code>UnmarshallingFailureException</code>. */\n+    public UnmarshallingFailureException(String msg, Throwable ex) {\n+        super(msg, ex);\n+    }\n+}"
        },
        {
            "sha": "5e430ec381367830cc68cc6a2d2b102fdfbced02",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/ValidationFailureException.java",
            "status": "added",
            "additions": 35,
            "deletions": 0,
            "changes": 35,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FValidationFailureException.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FValidationFailureException.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FValidationFailureException.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm;\n+\n+/**\n+ * Exception thrown on marshalling validation failure.\n+ *\n+ * @author Arjen Poutsma\n+ * @since 1.0.0\n+ */\n+public class ValidationFailureException extends XmlMappingException {\n+\n+    /** Constructor for <code>ValidationFailureException</code>. */\n+    public ValidationFailureException(String msg) {\n+        super(msg);\n+    }\n+\n+    /** Constructor for <code>ValidationFailureException</code>. */\n+    public ValidationFailureException(String msg, Throwable ex) {\n+        super(msg, ex);\n+    }\n+}"
        },
        {
            "sha": "12f5575959a321af5b831d69de3269d8c753e3a6",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/XmlMappingException.java",
            "status": "added",
            "additions": 37,
            "deletions": 0,
            "changes": 37,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FXmlMappingException.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FXmlMappingException.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2FXmlMappingException.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm;\n+\n+import org.springframework.core.NestedRuntimeException;\n+\n+/**\n+ * Root of the hierarchy of Object XML Mapping exceptions.\n+ *\n+ * @author Arjen Poutsma\n+ * @since 3.0\n+ */\n+public abstract class XmlMappingException extends NestedRuntimeException {\n+\n+    /** Constructor for <code>XmlMappingException</code>. */\n+    public XmlMappingException(String msg) {\n+        super(msg);\n+    }\n+\n+    /** Constructor for <code>XmlMappingException</code>. */\n+    public XmlMappingException(String msg, Throwable ex) {\n+        super(msg, ex);\n+    }\n+}"
        },
        {
            "sha": "d7d9ea451fe303435546f916e21698af860e6c69",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/castor/CastorMarshaller.java",
            "status": "added",
            "additions": 433,
            "deletions": 0,
            "changes": 433,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorMarshaller.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorMarshaller.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorMarshaller.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,433 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm.castor;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Iterator;\n+import java.util.Properties;\n+import javax.xml.stream.XMLEventReader;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLStreamReader;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+import org.exolab.castor.mapping.Mapping;\n+import org.exolab.castor.mapping.MappingException;\n+import org.exolab.castor.xml.MarshalException;\n+import org.exolab.castor.xml.Marshaller;\n+import org.exolab.castor.xml.ResolverException;\n+import org.exolab.castor.xml.UnmarshalHandler;\n+import org.exolab.castor.xml.Unmarshaller;\n+import org.exolab.castor.xml.XMLContext;\n+import org.exolab.castor.xml.XMLException;\n+import org.w3c.dom.Node;\n+import org.xml.sax.ContentHandler;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.ext.LexicalHandler;\n+\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.core.io.Resource;\n+import org.springframework.oxm.AbstractMarshaller;\n+import org.springframework.oxm.XmlMappingException;\n+import org.springframework.util.ObjectUtils;\n+import org.springframework.util.StringUtils;\n+import org.springframework.xml.dom.DomContentHandler;\n+import org.springframework.xml.sax.SaxUtils;\n+import org.springframework.xml.stream.StaxEventContentHandler;\n+import org.springframework.xml.stream.StaxEventXmlReader;\n+import org.springframework.xml.stream.StaxStreamContentHandler;\n+import org.springframework.xml.stream.StaxStreamXmlReader;\n+\n+/**\n+ * Implementation of the <code>Marshaller</code> interface for Castor. By default, Castor does not require any further\n+ * configuration, though setting a target class or providing a mapping file can be used to have more control over the\n+ * behavior of Castor.\n+ * <p/>\n+ * If a target class is specified using <code>setTargetClass</code>, the <code>CastorMarshaller</code> can only be used\n+ * to unmarshall XML that represents that specific class. If you want to unmarshall multiple classes, you have to\n+ * provide a mapping file using <code>setMappingLocations</code>.\n+ * <p/>\n+ * Due to Castor's API, it is required to set the encoding used for writing to output streams. It defaults to\n+ * <code>UTF-8</code>.\n+ *\n+ * @author Arjen Poutsma\n+ * @see #setEncoding(String)\n+ * @see #setTargetClass(Class)\n+ * @see #setMappingLocation(org.springframework.core.io.Resource)\n+ * @see #setMappingLocations(org.springframework.core.io.Resource[])\n+ * @since 1.0.0\n+ */\n+public class CastorMarshaller extends AbstractMarshaller implements InitializingBean {\n+\n+    /** The default encoding used for stream access. */\n+    public static final String DEFAULT_ENCODING = \"UTF-8\";\n+\n+    private Resource[] mappingLocations;\n+\n+    private String encoding = DEFAULT_ENCODING;\n+\n+    private Class targetClass;\n+\n+    private XMLContext xmlContext;\n+\n+    private boolean validating = false;\n+\n+    private boolean whitespacePreserve = false;\n+\n+    private boolean ignoreExtraAttributes = true;\n+\n+    private boolean ignoreExtraElements = false;\n+\n+    private Properties namespaceMappings;\n+\n+    /** Returns whether the Castor  {@link Unmarshaller} should ignore attributes that do not match a specific field. */\n+    public boolean getIgnoreExtraAttributes() {\n+        return ignoreExtraAttributes;\n+    }\n+\n+    /**\n+     * Sets whether the Castor  {@link Unmarshaller} should ignore attributes that do not match a specific field.\n+     * Default is <code>true</code>: extra attributes are ignored.\n+     *\n+     * @see org.exolab.castor.xml.Unmarshaller#setIgnoreExtraAttributes(boolean)\n+     */\n+    public void setIgnoreExtraAttributes(boolean ignoreExtraAttributes) {\n+        this.ignoreExtraAttributes = ignoreExtraAttributes;\n+    }\n+\n+    /** Returns whether the Castor  {@link Unmarshaller} should ignore elements that do not match a specific field. */\n+    public boolean getIgnoreExtraElements() {\n+        return ignoreExtraElements;\n+    }\n+\n+    /**\n+     * Sets whether the Castor  {@link Unmarshaller} should ignore elements that do not match a specific field. Default\n+     * is <code>false</code>, extra attributes are flagged as an error.\n+     *\n+     * @see org.exolab.castor.xml.Unmarshaller#setIgnoreExtraElements(boolean)\n+     */\n+    public void setIgnoreExtraElements(boolean ignoreExtraElements) {\n+        this.ignoreExtraElements = ignoreExtraElements;\n+    }\n+\n+    /** Returns whether the Castor {@link Unmarshaller} should preserve \"ignorable\" whitespace. */\n+    public boolean getWhitespacePreserve() {\n+        return whitespacePreserve;\n+    }\n+\n+    /**\n+     * Sets whether the Castor {@link Unmarshaller} should preserve \"ignorable\" whitespace. Default is\n+     * <code>false</code>.\n+     *\n+     * @see org.exolab.castor.xml.Unmarshaller#setWhitespacePreserve(boolean)\n+     */\n+    public void setWhitespacePreserve(boolean whitespacePreserve) {\n+        this.whitespacePreserve = whitespacePreserve;\n+    }\n+\n+    /** Returns whether this marshaller should validate in- and outgoing documents. */\n+    public boolean isValidating() {\n+        return validating;\n+    }\n+\n+    /**\n+     * Sets whether this marshaller should validate in- and outgoing documents. Default is <code>false</code>.\n+     *\n+     * @see Marshaller#setValidation(boolean)\n+     */\n+    public void setValidating(boolean validating) {\n+        this.validating = validating;\n+    }\n+\n+    /** Returns the namespace mappings. Property names are interpreted as namespace prefixes; values are namespace URIs. */\n+    public Properties getNamespaceMappings() {\n+        return namespaceMappings;\n+    }\n+\n+    /**\n+     * Sets the namespace mappings. Property names are interpreted as namespace prefixes; values are namespace URIs.\n+     *\n+     * @see org.exolab.castor.xml.Marshaller#setNamespaceMapping(String, String)\n+     */\n+    public void setNamespaceMappings(Properties namespaceMappings) {\n+        this.namespaceMappings = namespaceMappings;\n+    }\n+\n+    /**\n+     * Sets the encoding to be used for stream access. If this property is not set, the default encoding is used.\n+     *\n+     * @see #DEFAULT_ENCODING\n+     */\n+    public void setEncoding(String encoding) {\n+        this.encoding = encoding;\n+    }\n+\n+    /** Sets the locations of the Castor XML Mapping files. */\n+    public void setMappingLocation(Resource mappingLocation) {\n+        mappingLocations = new Resource[]{mappingLocation};\n+    }\n+\n+    /** Sets the locations of the Castor XML Mapping files. */\n+    public void setMappingLocations(Resource[] mappingLocations) {\n+        this.mappingLocations = mappingLocations;\n+    }\n+\n+    /**\n+     * Sets the Castor target class. If this property is set, this <code>CastorMarshaller</code> is tied to this one\n+     * specific class. Use a mapping file for unmarshalling multiple classes.\n+     * <p/>\n+     * You cannot set both this property and the mapping (location).\n+     */\n+    public void setTargetClass(Class targetClass) {\n+        this.targetClass = targetClass;\n+    }\n+\n+    public final void afterPropertiesSet() throws IOException {\n+        if (mappingLocations != null && targetClass != null) {\n+            throw new IllegalArgumentException(\"Cannot set both the 'mappingLocations' and 'targetClass' property. \" +\n+                    \"Set targetClass for unmarshalling a single class, and 'mappingLocations' for multiple classes'\");\n+        }\n+        if (logger.isInfoEnabled()) {\n+            if (mappingLocations != null) {\n+                logger.info(\"Configured using \" + StringUtils.arrayToCommaDelimitedString(mappingLocations));\n+            }\n+            else if (targetClass != null) {\n+                logger.info(\"Configured for target class [\" + targetClass.getName() + \"]\");\n+            }\n+            else {\n+                logger.info(\"Using default configuration\");\n+            }\n+        }\n+        try {\n+            xmlContext = createXMLContext(mappingLocations, targetClass);\n+        }\n+        catch (MappingException ex) {\n+            throw new CastorSystemException(\"Could not load Castor mapping: \" + ex.getMessage(), ex);\n+        }\n+        catch (ResolverException rex) {\n+            throw new CastorSystemException(\"Could not load Castor mapping: \" + rex.getMessage(), rex);\n+        }\n+    }\n+\n+    /** Returns <code>true</code> for all classes, i.e. Castor supports arbitrary classes. */\n+    public boolean supports(Class clazz) {\n+        return true;\n+    }\n+\n+    /**\n+     * Creates the Castor <code>XMLContext</code>. Subclasses can override this to create a custom context.\n+     * <p/>\n+     * The default implementation loads mapping files if defined, and the target class if not defined.\n+     *\n+     * @return the created resolver\n+     * @throws MappingException when the mapping file cannot be loaded\n+     * @throws IOException      in case of I/O errors\n+     * @see XMLContext#addMapping(org.exolab.castor.mapping.Mapping)\n+     * @see XMLContext#addClass(Class)\n+     */\n+    protected XMLContext createXMLContext(Resource[] mappingLocations, Class targetClass)\n+            throws MappingException, IOException, ResolverException {\n+        XMLContext context = new XMLContext();\n+        if (!ObjectUtils.isEmpty(mappingLocations)) {\n+            Mapping mapping = new Mapping();\n+            for (int i = 0; i < mappingLocations.length; i++) {\n+                mapping.loadMapping(SaxUtils.createInputSource(mappingLocations[i]));\n+            }\n+            context.addMapping(mapping);\n+        }\n+        if (targetClass != null) {\n+            context.addClass(targetClass);\n+        }\n+        return context;\n+    }\n+\n+    //\n+    // Marshalling\n+    //\n+\n+    protected final void marshalDomNode(Object graph, Node node) throws XmlMappingException {\n+        marshalSaxHandlers(graph, new DomContentHandler(node), null);\n+    }\n+\n+    protected final void marshalSaxHandlers(Object graph, ContentHandler contentHandler, LexicalHandler lexicalHandler)\n+            throws XmlMappingException {\n+        Marshaller marshaller = xmlContext.createMarshaller();\n+        marshaller.setContentHandler(contentHandler);\n+        marshal(graph, marshaller);\n+    }\n+\n+    protected final void marshalOutputStream(Object graph, OutputStream outputStream)\n+            throws XmlMappingException, IOException {\n+        marshalWriter(graph, new OutputStreamWriter(outputStream, encoding));\n+    }\n+\n+    protected final void marshalWriter(Object graph, Writer writer) throws XmlMappingException, IOException {\n+        Marshaller marshaller = xmlContext.createMarshaller();\n+        marshaller.setWriter(writer);\n+        marshal(graph, marshaller);\n+    }\n+\n+    protected final void marshalXmlEventWriter(Object graph, XMLEventWriter eventWriter) throws XmlMappingException {\n+        marshalSaxHandlers(graph, new StaxEventContentHandler(eventWriter), null);\n+    }\n+\n+    protected final void marshalXmlStreamWriter(Object graph, XMLStreamWriter streamWriter) throws XmlMappingException {\n+        marshalSaxHandlers(graph, new StaxStreamContentHandler(streamWriter), null);\n+    }\n+\n+    private void marshal(Object graph, Marshaller marshaller) {\n+        try {\n+            customizeMarshaller(marshaller);\n+            marshaller.marshal(graph);\n+        }\n+        catch (XMLException ex) {\n+            throw convertCastorException(ex, true);\n+        }\n+    }\n+\n+    /**\n+     * Template method that allows for customizing of the given Castor {@link Marshaller}.\n+     * <p/>\n+     * Default implementation invokes {@link Marshaller#setValidation(boolean)} with the property set on this\n+     * marshaller, and calls {@link Marshaller#setNamespaceMapping(String, String)} with the {@linkplain\n+     * #setNamespaceMappings(java.util.Properties) namespace mappings}.\n+     */\n+    protected void customizeMarshaller(Marshaller marshaller) {\n+        marshaller.setValidation(isValidating());\n+        Properties namespaceMappings = getNamespaceMappings();\n+        if (namespaceMappings != null) {\n+            for (Iterator iterator = namespaceMappings.keySet().iterator(); iterator.hasNext();) {\n+                String prefix = (String) iterator.next();\n+                String uri = namespaceMappings.getProperty(prefix);\n+                marshaller.setNamespaceMapping(prefix, uri);\n+            }\n+        }\n+    }\n+\n+    //\n+    // Unmarshalling\n+    //\n+\n+    protected final Object unmarshalDomNode(Node node) throws XmlMappingException {\n+        try {\n+            return createUnmarshaller().unmarshal(node);\n+        }\n+        catch (XMLException ex) {\n+            throw convertCastorException(ex, false);\n+        }\n+    }\n+\n+    protected final Object unmarshalInputStream(InputStream inputStream) throws XmlMappingException, IOException {\n+        try {\n+            return createUnmarshaller().unmarshal(new InputSource(inputStream));\n+        }\n+        catch (XMLException ex) {\n+            throw convertCastorException(ex, false);\n+        }\n+    }\n+\n+    protected final Object unmarshalReader(Reader reader) throws XmlMappingException, IOException {\n+        try {\n+            return createUnmarshaller().unmarshal(new InputSource(reader));\n+        }\n+        catch (XMLException ex) {\n+            throw convertCastorException(ex, false);\n+        }\n+    }\n+\n+    protected final Object unmarshalXmlEventReader(XMLEventReader eventReader) {\n+        XMLReader reader = new StaxEventXmlReader(eventReader);\n+        try {\n+            return unmarshalSaxReader(reader, new InputSource());\n+        }\n+        catch (IOException ex) {\n+            throw new CastorUnmarshallingFailureException(new MarshalException(ex));\n+        }\n+    }\n+\n+    protected final Object unmarshalSaxReader(XMLReader xmlReader, InputSource inputSource)\n+            throws XmlMappingException, IOException {\n+        UnmarshalHandler unmarshalHandler = createUnmarshaller().createHandler();\n+        try {\n+            ContentHandler contentHandler = Unmarshaller.getContentHandler(unmarshalHandler);\n+            xmlReader.setContentHandler(contentHandler);\n+            xmlReader.parse(inputSource);\n+            return unmarshalHandler.getObject();\n+        }\n+        catch (SAXException ex) {\n+            throw new CastorUnmarshallingFailureException(ex);\n+        }\n+    }\n+\n+    protected final Object unmarshalXmlStreamReader(XMLStreamReader streamReader) {\n+        XMLReader reader = new StaxStreamXmlReader(streamReader);\n+        try {\n+            return unmarshalSaxReader(reader, new InputSource());\n+        }\n+        catch (IOException ex) {\n+            throw new CastorUnmarshallingFailureException(new MarshalException(ex));\n+        }\n+    }\n+\n+    private Unmarshaller createUnmarshaller() {\n+        Unmarshaller unmarshaller = xmlContext.createUnmarshaller();\n+        if (targetClass != null) {\n+            unmarshaller.setClass(targetClass);\n+            unmarshaller.setClassLoader(targetClass.getClassLoader());\n+        }\n+        customizeUnmarshaller(unmarshaller);\n+        return unmarshaller;\n+    }\n+\n+    /**\n+     * Template method that allows for customizing of the given Castor {@link Unmarshaller}.\n+     * <p/>\n+     * Default implementation invokes {@link Unmarshaller#setValidation(boolean)}, {@link\n+     * Unmarshaller#setWhitespacePreserve(boolean)}, {@link Unmarshaller#setIgnoreExtraAttributes(boolean)}, and {@link\n+     * Unmarshaller#setIgnoreExtraElements(boolean)} with the properties set on this marshaller.\n+     */\n+    protected void customizeUnmarshaller(Unmarshaller unmarshaller) {\n+        unmarshaller.setValidation(isValidating());\n+        unmarshaller.setWhitespacePreserve(getWhitespacePreserve());\n+        unmarshaller.setIgnoreExtraAttributes(getIgnoreExtraAttributes());\n+        unmarshaller.setIgnoreExtraElements(getIgnoreExtraElements());\n+    }\n+\n+    /**\n+     * Converts the given <code>CastorException</code> to an appropriate exception from the\n+     * <code>org.springframework.oxm</code> hierarchy.\n+     * <p/>\n+     * The default implementation delegates to <code>CastorUtils</code>. Can be overridden in subclasses.\n+     * <p/>\n+     * A boolean flag is used to indicate whether this exception occurs during marshalling or unmarshalling, since\n+     * Castor itself does not make this distinction in its exception hierarchy.\n+     *\n+     * @param ex          Castor <code>XMLException</code> that occured\n+     * @param marshalling indicates whether the exception occurs during marshalling (<code>true</code>), or\n+     *                    unmarshalling (<code>false</code>)\n+     * @return the corresponding <code>XmlMappingException</code>\n+     * @see CastorUtils#convertXmlException\n+     */\n+    public XmlMappingException convertCastorException(XMLException ex, boolean marshalling) {\n+        return CastorUtils.convertXmlException(ex, marshalling);\n+    }\n+}"
        },
        {
            "sha": "0a9987acfdcff08d43a44bf59f4f7336fb293cc9",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/castor/CastorMarshallingFailureException.java",
            "status": "added",
            "additions": 34,
            "deletions": 0,
            "changes": 34,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorMarshallingFailureException.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorMarshallingFailureException.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorMarshallingFailureException.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm.castor;\n+\n+import org.exolab.castor.xml.MarshalException;\n+import org.springframework.oxm.MarshallingFailureException;\n+\n+/**\n+ * Castor-specific subclass of <code>MarshallingFailureException</code>.\n+ *\n+ * @author Arjen Poutsma\n+ * @see CastorUtils#convertXmlException\n+ * @since 1.0.0\n+ */\n+public class CastorMarshallingFailureException extends MarshallingFailureException {\n+\n+    public CastorMarshallingFailureException(MarshalException ex) {\n+        super(\"Castor marshalling exception: \" + ex.getMessage(), ex);\n+    }\n+\n+}"
        },
        {
            "sha": "6e10d29a912eda69d681f02db289e3831baff27c",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/castor/CastorSystemException.java",
            "status": "added",
            "additions": 32,
            "deletions": 0,
            "changes": 32,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorSystemException.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorSystemException.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorSystemException.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm.castor;\n+\n+import org.springframework.oxm.UncategorizedXmlMappingException;\n+\n+/**\n+ * Castor-specific subclass of <code>UncategorizedXmlMappingException</code>, for Castor exceptions that cannot be\n+ * distinguished further.\n+ *\n+ * @author Arjen Poutsma\n+ * @since 1.0.0\n+ */\n+public class CastorSystemException extends UncategorizedXmlMappingException {\n+\n+    public CastorSystemException(String msg, Throwable ex) {\n+        super(msg, ex);\n+    }\n+}"
        },
        {
            "sha": "fbb4d20cd6fff771ffaf771d6d43ff54c8362917",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/castor/CastorUnmarshallingFailureException.java",
            "status": "added",
            "additions": 38,
            "deletions": 0,
            "changes": 38,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorUnmarshallingFailureException.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorUnmarshallingFailureException.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorUnmarshallingFailureException.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm.castor;\n+\n+import org.exolab.castor.xml.MarshalException;\n+import org.springframework.oxm.UnmarshallingFailureException;\n+import org.xml.sax.SAXException;\n+\n+/**\n+ * Castor-specific subclass of <code>UnmarshallingFailureException</code>.\n+ *\n+ * @author Arjen Poutsma\n+ * @see CastorUtils#convertXmlException\n+ * @since 1.0.0\n+ */\n+public class CastorUnmarshallingFailureException extends UnmarshallingFailureException {\n+\n+    public CastorUnmarshallingFailureException(MarshalException ex) {\n+        super(\"Castor unmarshalling exception: \" + ex.getMessage(), ex);\n+    }\n+\n+    public CastorUnmarshallingFailureException(SAXException ex) {\n+        super(\"Castor unmarshalling exception: \" + ex.getMessage(), ex);\n+    }\n+}"
        },
        {
            "sha": "c503a08ce9d8ead1cc3fc6f7738040554198deed",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/castor/CastorUtils.java",
            "status": "added",
            "additions": 60,
            "deletions": 0,
            "changes": 60,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorUtils.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorUtils.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorUtils.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm.castor;\n+\n+import org.exolab.castor.xml.MarshalException;\n+import org.exolab.castor.xml.ValidationException;\n+import org.exolab.castor.xml.XMLException;\n+import org.springframework.oxm.XmlMappingException;\n+\n+/**\n+ * Generic utility methods for working with Castor. Mainly for internal use within the framework.\n+ *\n+ * @author Arjen Poutsma\n+ * @since 1.0.0\n+ */\n+public class CastorUtils {\n+\n+    /**\n+     * Converts the given <code>XMLException</code> to an appropriate exception from the\n+     * <code>org.springframework.oxm</code> hierarchy.\n+     * <p/>\n+     * A boolean flag is used to indicate whether this exception occurs during marshalling or unmarshalling, since\n+     * Castor itself does not make this distinction in its exception hierarchy.\n+     *\n+     * @param ex          Castor <code>XMLException</code> that occured\n+     * @param marshalling indicates whether the exception occurs during marshalling (<code>true</code>), or\n+     *                    unmarshalling (<code>false</code>)\n+     * @return the corresponding <code>XmlMappingException</code>\n+     */\n+    public static XmlMappingException convertXmlException(XMLException ex, boolean marshalling) {\n+        if (ex instanceof MarshalException) {\n+            MarshalException marshalException = (MarshalException) ex;\n+            if (marshalling) {\n+                return new CastorMarshallingFailureException(marshalException);\n+            }\n+            else {\n+                return new CastorUnmarshallingFailureException(marshalException);\n+            }\n+        }\n+        else if (ex instanceof ValidationException) {\n+            return new CastorValidationFailureException((ValidationException) ex);\n+        }\n+        // fallback\n+        return new CastorSystemException(\"Unknown Castor exception: \" + ex.getMessage(), ex);\n+    }\n+\n+}"
        },
        {
            "sha": "a8842aaee6b25802edc26fd46c24502fbbcb194a",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/castor/CastorValidationFailureException.java",
            "status": "added",
            "additions": 33,
            "deletions": 0,
            "changes": 33,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorValidationFailureException.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorValidationFailureException.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorValidationFailureException.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm.castor;\n+\n+import org.exolab.castor.xml.ValidationException;\n+import org.springframework.oxm.ValidationFailureException;\n+\n+/**\n+ * Castor-specific subclass of <code>MarshallingFailureException</code>.\n+ *\n+ * @author Arjen Poutsma\n+ * @see CastorUtils#convertXmlException\n+ * @since 1.0.0\n+ */\n+public class CastorValidationFailureException extends ValidationFailureException {\n+\n+    public CastorValidationFailureException(ValidationException ex) {\n+        super(\"Castor validation exception: \" + ex.getMessage(), ex);\n+    }\n+}"
        },
        {
            "sha": "0ba0c30f4954629f835892610ef846187875e251",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/castor/package.html",
            "status": "added",
            "additions": 6,
            "deletions": 0,
            "changes": 6,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2Fpackage.html",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2Fpackage.html",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2Fpackage.html?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,6 @@\n+<html>\n+<body>\n+Package providing integration of <a href=\"http://www.castor.org/xml-mapping.html\">Castor</a> within Springs O/X Mapping\n+support.\n+</body>\n+</html>"
        },
        {
            "sha": "1f051a22c99396ed3fc9f65cb52c690fd695726e",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/config/Jaxb1MarshallerBeanDefinitionParser.java",
            "status": "added",
            "additions": 36,
            "deletions": 0,
            "changes": 36,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fconfig%2FJaxb1MarshallerBeanDefinitionParser.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fconfig%2FJaxb1MarshallerBeanDefinitionParser.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fconfig%2FJaxb1MarshallerBeanDefinitionParser.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2008 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.config;\n+\n+import org.w3c.dom.Element;\n+\n+import org.springframework.beans.factory.xml.AbstractSimpleBeanDefinitionParser;\n+\n+/**\n+ * Parser for the <code>&lt;oxm:jaxb1-marshaller/&gt; element.\n+ *\n+ * @author Arjen Poutsma\n+ * @since 1.5.0\n+ */\n+class Jaxb1MarshallerBeanDefinitionParser extends AbstractSimpleBeanDefinitionParser {\n+\n+    public static final String JAXB1_MARSHALLER_CLASS_NAME = \"org.springframework.oxm.jaxb.Jaxb1Marshaller\";\n+\n+    protected String getBeanClassName(Element element) {\n+        return JAXB1_MARSHALLER_CLASS_NAME;\n+    }\n+}"
        },
        {
            "sha": "b9b44e3017e71f78ce0cdb2058e61d63c1566fbc",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/config/Jaxb2MarshallerBeanDefinitionParser.java",
            "status": "added",
            "additions": 61,
            "deletions": 0,
            "changes": 61,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fconfig%2FJaxb2MarshallerBeanDefinitionParser.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fconfig%2FJaxb2MarshallerBeanDefinitionParser.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fconfig%2FJaxb2MarshallerBeanDefinitionParser.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2007 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.config;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.springframework.beans.factory.support.BeanDefinitionBuilder;\n+import org.springframework.beans.factory.support.ManagedList;\n+import org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;\n+import org.springframework.beans.factory.xml.ParserContext;\n+import org.springframework.util.StringUtils;\n+import org.springframework.util.xml.DomUtils;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Parser for the <code>&lt;oxm:jaxb2-marshaller/&gt; element.\n+ *\n+ * @author Arjen Poutsma\n+ * @since 1.5.0\n+ */\n+class Jaxb2MarshallerBeanDefinitionParser extends AbstractSingleBeanDefinitionParser {\n+\n+    private static final String JAXB2_MARSHALLER_CLASS_NAME = \"org.springframework.oxm.jaxb.Jaxb2Marshaller\";\n+\n+    protected String getBeanClassName(Element element) {\n+        return JAXB2_MARSHALLER_CLASS_NAME;\n+    }\n+\n+    protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder beanDefinitionBuilder) {\n+        String contextPath = element.getAttribute(\"contextPath\");\n+        if (StringUtils.hasText(contextPath)) {\n+            beanDefinitionBuilder.addPropertyValue(\"contextPath\", contextPath);\n+        }\n+        List classes = DomUtils.getChildElementsByTagName(element, \"class-to-be-bound\");\n+        if (!classes.isEmpty()) {\n+            ManagedList classesToBeBound = new ManagedList(classes.size());\n+            for (Iterator iterator = classes.iterator(); iterator.hasNext();) {\n+                Element classToBeBound = (Element) iterator.next();\n+                String className = classToBeBound.getAttribute(\"name\");\n+                classesToBeBound.add(className);\n+            }\n+            beanDefinitionBuilder.addPropertyValue(\"classesToBeBound\", classesToBeBound);\n+        }\n+    }\n+\n+}"
        },
        {
            "sha": "e25ac65cf7164185969d0b98ce60f5b350c65491",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/config/JibxMarshallerBeanDefinitionParser.java",
            "status": "added",
            "additions": 37,
            "deletions": 0,
            "changes": 37,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fconfig%2FJibxMarshallerBeanDefinitionParser.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fconfig%2FJibxMarshallerBeanDefinitionParser.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fconfig%2FJibxMarshallerBeanDefinitionParser.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2008 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.config;\n+\n+import org.w3c.dom.Element;\n+\n+import org.springframework.beans.factory.xml.AbstractSimpleBeanDefinitionParser;\n+\n+/**\n+ * Parser for the <code>&lt;oxm:jibx-marshaller/&gt; element.\n+ *\n+ * @author Arjen Poutsma\n+ * @since 1.5.0\n+ */\n+class JibxMarshallerBeanDefinitionParser extends AbstractSimpleBeanDefinitionParser {\n+\n+    private static final String JIBX_MARSHALLER_CLASS_NAME = \"org.springframework.oxm.jibx.JibxMarshaller\";\n+\n+    protected String getBeanClassName(Element element) {\n+        return JIBX_MARSHALLER_CLASS_NAME;\n+    }\n+\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "7387b639e42ddef2f964c578b626aa475a33028a",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/config/OxmNamespaceHandler.java",
            "status": "added",
            "additions": 36,
            "deletions": 0,
            "changes": 36,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fconfig%2FOxmNamespaceHandler.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fconfig%2FOxmNamespaceHandler.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fconfig%2FOxmNamespaceHandler.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2008 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.config;\n+\n+import org.springframework.beans.factory.xml.NamespaceHandler;\n+import org.springframework.beans.factory.xml.NamespaceHandlerSupport;\n+\n+/**\n+ * {@link NamespaceHandler} for the '<code>oxm</code>' namespace.\n+ *\n+ * @author Arjen Poutsma\n+ * @since 1.5.0\n+ */\n+public class OxmNamespaceHandler extends NamespaceHandlerSupport {\n+\n+    public void init() {\n+        registerBeanDefinitionParser(\"jaxb1-marshaller\", new Jaxb1MarshallerBeanDefinitionParser());\n+        registerBeanDefinitionParser(\"jaxb2-marshaller\", new Jaxb2MarshallerBeanDefinitionParser());\n+        registerBeanDefinitionParser(\"jibx-marshaller\", new JibxMarshallerBeanDefinitionParser());\n+        registerBeanDefinitionParser(\"xmlbeans-marshaller\", new XmlBeansMarshallerBeanDefinitionParser());\n+    }\n+}"
        },
        {
            "sha": "b3566d7bad7cf6e61eea6a5899a1462bf635a321",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/config/XmlBeansMarshallerBeanDefinitionParser.java",
            "status": "added",
            "additions": 46,
            "deletions": 0,
            "changes": 46,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fconfig%2FXmlBeansMarshallerBeanDefinitionParser.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fconfig%2FXmlBeansMarshallerBeanDefinitionParser.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fconfig%2FXmlBeansMarshallerBeanDefinitionParser.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2008 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.config;\n+\n+import org.w3c.dom.Element;\n+\n+import org.springframework.beans.factory.support.BeanDefinitionBuilder;\n+import org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;\n+import org.springframework.beans.factory.xml.ParserContext;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Parser for the <code>&lt;oxm:xmlbeans-marshaller/&gt; element.\n+ *\n+ * @author Arjen Poutsma\n+ * @since 1.5.0\n+ */\n+class XmlBeansMarshallerBeanDefinitionParser extends AbstractSingleBeanDefinitionParser {\n+\n+    public static final String XML_BEANS_MARSHALLER_CLASS_NAME = \"org.springframework.oxm.xmlbeans.XmlBeansMarshaller\";\n+\n+    protected String getBeanClassName(Element element) {\n+        return XML_BEANS_MARSHALLER_CLASS_NAME;\n+    }\n+\n+    protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder beanDefinitionBuilder) {\n+        String optionsName = element.getAttribute(\"options\");\n+        if (StringUtils.hasText(optionsName)) {\n+            beanDefinitionBuilder.addPropertyReference(\"xmlOptions\", optionsName);\n+        }\n+    }\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "e110b3618d02abd332943fafddf7fc83afd7a6eb",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/config/package.html",
            "status": "added",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fconfig%2Fpackage.html",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fconfig%2Fpackage.html",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fconfig%2Fpackage.html?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,5 @@\n+<html>\n+<body>\n+Provides an namespace handler for the Spring Object/XML namespace.\n+</body>\n+</html>"
        },
        {
            "sha": "2212f327aa4abed006745cd9f5608210efab57a7",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/jaxb/AbstractJaxbMarshaller.java",
            "status": "added",
            "additions": 208,
            "deletions": 0,
            "changes": 208,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FAbstractJaxbMarshaller.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FAbstractJaxbMarshaller.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FAbstractJaxbMarshaller.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2006 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.jaxb;\n+\n+import java.util.Iterator;\n+import java.util.Map;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.bind.ValidationEventHandler;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.oxm.XmlMappingException;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Abstract base class for implementations of the <code>Marshaller</code> and <code>Unmarshaller</code> interfaces that\n+ * use JAXB. This base class is responsible for creating JAXB marshallers from a <code>JAXBContext</code>.\n+ * <p/>\n+ * JAXB 2.0 added  breaking API changes, so specific subclasses must be used for JAXB 1.0 and 2.0\n+ * (<code>Jaxb1Marshaller</code> and <code>Jaxb2Marshaller</code> respectivaly).\n+ *\n+ * @author Arjen Poutsma\n+ * @see Jaxb1Marshaller\n+ * @see Jaxb2Marshaller\n+ * @since 1.0.0\n+ */\n+public abstract class AbstractJaxbMarshaller\n+        implements org.springframework.oxm.Marshaller, org.springframework.oxm.Unmarshaller, InitializingBean {\n+\n+    /** Logger available to subclasses. */\n+    protected final Log logger = LogFactory.getLog(getClass());\n+\n+    private String contextPath;\n+\n+    private Map marshallerProperties;\n+\n+    private Map unmarshallerProperties;\n+\n+    private JAXBContext jaxbContext;\n+\n+    private ValidationEventHandler validationEventHandler;\n+\n+    /** Returns the JAXB Context path. */\n+    protected String getContextPath() {\n+        return contextPath;\n+    }\n+\n+    /** Sets the JAXB Context path. */\n+    public void setContextPath(String contextPath) {\n+        Assert.notNull(contextPath, \"'contextPath' must not be null\");\n+        this.contextPath = contextPath;\n+    }\n+\n+    /**\n+     * Sets multiple JAXB Context paths. The given array of context paths is converted to a colon-delimited string, as\n+     * supported by JAXB.\n+     */\n+    public void setContextPaths(String[] contextPaths) {\n+        Assert.notEmpty(contextPaths, \"'contextPaths' must not be empty\");\n+        this.contextPath = StringUtils.arrayToDelimitedString(contextPaths, \":\");\n+    }\n+\n+    /**\n+     * Sets the JAXB <code>Marshaller</code> properties. These properties will be set on the underlying JAXB\n+     * <code>Marshaller</code>, and allow for features such as indentation.\n+     *\n+     * @param properties the properties\n+     * @see javax.xml.bind.Marshaller#setProperty(String,Object)\n+     * @see javax.xml.bind.Marshaller#JAXB_ENCODING\n+     * @see javax.xml.bind.Marshaller#JAXB_FORMATTED_OUTPUT\n+     * @see javax.xml.bind.Marshaller#JAXB_NO_NAMESPACE_SCHEMA_LOCATION\n+     * @see javax.xml.bind.Marshaller#JAXB_SCHEMA_LOCATION\n+     */\n+    public void setMarshallerProperties(Map properties) {\n+        this.marshallerProperties = properties;\n+    }\n+\n+    /**\n+     * Sets the JAXB <code>Unmarshaller</code> properties. These properties will be set on the underlying JAXB\n+     * <code>Unmarshaller</code>.\n+     *\n+     * @param properties the properties\n+     * @see javax.xml.bind.Unmarshaller#setProperty(String,Object)\n+     */\n+    public void setUnmarshallerProperties(Map properties) {\n+        this.unmarshallerProperties = properties;\n+    }\n+\n+    /**\n+     * Sets the JAXB validation event handler. This event handler will be called by JAXB if any validation errors are\n+     * encountered during calls to any of the marshal API's.\n+     *\n+     * @param validationEventHandler the event handler\n+     */\n+    public void setValidationEventHandler(ValidationEventHandler validationEventHandler) {\n+        this.validationEventHandler = validationEventHandler;\n+    }\n+\n+    /** Returns the {@link JAXBContext} created in {@link #afterPropertiesSet()}. */\n+    public JAXBContext getJaxbContext() {\n+        return jaxbContext;\n+    }\n+\n+    public final void afterPropertiesSet() throws Exception {\n+        try {\n+            jaxbContext = createJaxbContext();\n+        }\n+        catch (JAXBException ex) {\n+            throw convertJaxbException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Convert the given <code>JAXBException</code> to an appropriate exception from the\n+     * <code>org.springframework.oxm</code> hierarchy.\n+     * <p/>\n+     * The default implementation delegates to <code>JaxbUtils</code>. Can be overridden in subclasses.\n+     *\n+     * @param ex <code>JAXBException</code> that occured\n+     * @return the corresponding <code>XmlMappingException</code> instance\n+     * @see JaxbUtils#convertJaxbException\n+     */\n+    protected XmlMappingException convertJaxbException(JAXBException ex) {\n+        return JaxbUtils.convertJaxbException(ex);\n+    }\n+\n+    /** Returns a newly created JAXB marshaller. JAXB marshallers are not necessarily thread safe. */\n+    protected Marshaller createMarshaller() {\n+        try {\n+            Marshaller marshaller = jaxbContext.createMarshaller();\n+            if (marshallerProperties != null) {\n+                for (Iterator iterator = marshallerProperties.keySet().iterator(); iterator.hasNext();) {\n+                    String name = (String) iterator.next();\n+                    marshaller.setProperty(name, marshallerProperties.get(name));\n+                }\n+            }\n+            if (validationEventHandler != null) {\n+                marshaller.setEventHandler(validationEventHandler);\n+            }\n+            initJaxbMarshaller(marshaller);\n+            return marshaller;\n+        }\n+        catch (JAXBException ex) {\n+            throw convertJaxbException(ex);\n+        }\n+    }\n+\n+    /** Returns a newly created JAXB unmarshaller. JAXB unmarshallers are not necessarily thread safe. */\n+    protected Unmarshaller createUnmarshaller() {\n+        try {\n+            Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();\n+            if (unmarshallerProperties != null) {\n+                for (Iterator iterator = unmarshallerProperties.keySet().iterator(); iterator.hasNext();) {\n+                    String name = (String) iterator.next();\n+                    unmarshaller.setProperty(name, unmarshallerProperties.get(name));\n+                }\n+            }\n+            if (validationEventHandler != null) {\n+                unmarshaller.setEventHandler(validationEventHandler);\n+            }\n+            initJaxbUnmarshaller(unmarshaller);\n+            return unmarshaller;\n+        }\n+        catch (JAXBException ex) {\n+            throw convertJaxbException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Template method that can be overridden by concrete JAXB marshallers for custom initialization behavior. Gets\n+     * called after creation of JAXB <code>Marshaller</code>, and after the respective properties have been set.\n+     * <p/>\n+     * Default implementation does nothing.\n+     */\n+    protected void initJaxbMarshaller(Marshaller marshaller) throws JAXBException {\n+    }\n+\n+    /**\n+     * Template method that can overridden by concrete JAXB marshallers for custom initialization behavior. Gets called\n+     * after creation of JAXB <code>Unmarshaller</code>, and after the respective properties have been set.\n+     * <p/>\n+     * Default implementation does nothing.\n+     */\n+    protected void initJaxbUnmarshaller(Unmarshaller unmarshaller) throws JAXBException {\n+    }\n+\n+    /** Template method that returns a newly created JAXB context. Called from <code>afterPropertiesSet()</code>. */\n+    protected abstract JAXBContext createJaxbContext() throws Exception;\n+}"
        },
        {
            "sha": "b0a79196cdf2819410cc9eaef4fb31d900f778d1",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb1Marshaller.java",
            "status": "added",
            "additions": 152,
            "deletions": 0,
            "changes": 152,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxb1Marshaller.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxb1Marshaller.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxb1Marshaller.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm.jaxb;\n+\n+import javax.xml.bind.Element;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.stream.XMLEventReader;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLStreamReader;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.Result;\n+import javax.xml.transform.Source;\n+\n+import org.springframework.beans.factory.BeanClassLoaderAware;\n+import org.springframework.util.ClassUtils;\n+import org.springframework.util.StringUtils;\n+import org.springframework.xml.transform.StaxResult;\n+import org.springframework.xml.transform.StaxSource;\n+import org.springframework.xml.transform.TraxUtils;\n+\n+/**\n+ * Implementation of the <code>Marshaller</code> interface for JAXB 1.0.\n+ * <p/>\n+ * The typical usage will be to set the <code>contextPath</code> property on this bean, possibly customize the\n+ * marshaller and unmarshaller by setting properties, and validations, and to refer to it.\n+ *\n+ * @author Arjen Poutsma\n+ * @see #setContextPath(String)\n+ * @see #setMarshallerProperties(java.util.Map)\n+ * @see #setUnmarshallerProperties(java.util.Map)\n+ * @see #setValidating(boolean)\n+ * @since 1.0.0\n+ */\n+public class Jaxb1Marshaller extends AbstractJaxbMarshaller implements BeanClassLoaderAware {\n+\n+    private boolean validating = false;\n+\n+    private ClassLoader classLoader;\n+\n+    public void setBeanClassLoader(ClassLoader classLoader) {\n+        this.classLoader = classLoader;\n+    }\n+\n+    /** Set if the JAXB <code>Unmarshaller</code> should validate the incoming document. Default is <code>false</code>. */\n+    public void setValidating(boolean validating) {\n+        this.validating = validating;\n+    }\n+\n+    public boolean supports(Class clazz) {\n+        if (!Element.class.isAssignableFrom(clazz)) {\n+            return false;\n+        }\n+        if (StringUtils.hasLength(getContextPath())) {\n+            String className = ClassUtils.getQualifiedName(clazz);\n+            int lastDotIndex = className.lastIndexOf('.');\n+            if (lastDotIndex == -1) {\n+                return false;\n+            }\n+            String packageName = className.substring(0, lastDotIndex);\n+            String[] contextPaths = StringUtils.tokenizeToStringArray(getContextPath(), \":\");\n+            for (int i = 0; i < contextPaths.length; i++) {\n+                if (contextPaths[i].equals(packageName)) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+        return false;\n+\n+    }\n+\n+    protected final JAXBContext createJaxbContext() throws JAXBException {\n+        if (!StringUtils.hasLength(getContextPath())) {\n+            throw new IllegalArgumentException(\"contextPath is required\");\n+        }\n+        if (logger.isInfoEnabled()) {\n+            logger.info(\"Creating JAXBContext with context path [\" + getContextPath() + \"]\");\n+        }\n+        return classLoader != null ? JAXBContext.newInstance(getContextPath(), classLoader) :\n+                JAXBContext.newInstance(getContextPath());\n+    }\n+\n+    protected void initJaxbUnmarshaller(Unmarshaller unmarshaller) throws JAXBException {\n+        unmarshaller.setValidating(validating);\n+    }\n+\n+    public void marshal(Object graph, Result result) {\n+        if (TraxUtils.isStaxResult(result)) {\n+            XMLStreamWriter streamWriter = TraxUtils.getXMLStreamWriter(result);\n+            if (streamWriter != null) {\n+                result = new StaxResult(streamWriter);\n+            }\n+            else {\n+                XMLEventWriter eventWriter = TraxUtils.getXMLEventWriter(result);\n+                if (eventWriter != null) {\n+                    result = new StaxResult(eventWriter);\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\n+                            \"StAXResult contains neither XMLStreamWriter nor XMLEventWriter\");\n+                }\n+            }\n+        }\n+        try {\n+            createMarshaller().marshal(graph, result);\n+        }\n+        catch (JAXBException ex) {\n+            throw convertJaxbException(ex);\n+        }\n+    }\n+\n+    public Object unmarshal(Source source) {\n+        if (TraxUtils.isStaxSource(source)) {\n+            XMLStreamReader streamReader = TraxUtils.getXMLStreamReader(source);\n+            if (streamReader != null) {\n+                source = new StaxSource(streamReader);\n+            }\n+            else {\n+                XMLEventReader eventReader = TraxUtils.getXMLEventReader(source);\n+                if (eventReader != null) {\n+                    source = new StaxSource(eventReader);\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\n+                            \"StAXSource contains neither XMLStreamReader nor XMLEventReader\");\n+                }\n+            }\n+        }\n+        try {\n+            return createUnmarshaller().unmarshal(source);\n+        }\n+        catch (JAXBException ex) {\n+            throw convertJaxbException(ex);\n+        }\n+    }\n+\n+}"
        },
        {
            "sha": "fbc7d99952586325c8445996ec593ca775730b70",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java",
            "status": "added",
            "additions": 579,
            "deletions": 0,
            "changes": 579,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxb2Marshaller.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxb2Marshaller.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxb2Marshaller.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,579 @@\n+/*\n+ * Copyright 2006 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.jaxb;\n+\n+import java.awt.*;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.UnsupportedEncodingException;\n+import java.lang.reflect.GenericArrayType;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URLDecoder;\n+import java.net.URLEncoder;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.Map;\n+import java.util.UUID;\n+import javax.activation.DataHandler;\n+import javax.activation.DataSource;\n+import javax.xml.XMLConstants;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBElement;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import javax.xml.bind.annotation.adapters.XmlAdapter;\n+import javax.xml.bind.attachment.AttachmentMarshaller;\n+import javax.xml.bind.attachment.AttachmentUnmarshaller;\n+import javax.xml.datatype.Duration;\n+import javax.xml.datatype.XMLGregorianCalendar;\n+import javax.xml.namespace.QName;\n+import javax.xml.stream.XMLEventReader;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLStreamReader;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.Result;\n+import javax.xml.transform.Source;\n+import javax.xml.validation.Schema;\n+\n+import org.springframework.beans.factory.BeanClassLoaderAware;\n+import org.springframework.core.io.Resource;\n+import org.springframework.oxm.GenericMarshaller;\n+import org.springframework.oxm.GenericUnmarshaller;\n+import org.springframework.oxm.XmlMappingException;\n+import org.springframework.oxm.mime.MimeContainer;\n+import org.springframework.oxm.mime.MimeMarshaller;\n+import org.springframework.oxm.mime.MimeUnmarshaller;\n+import org.springframework.util.Assert;\n+import org.springframework.util.ClassUtils;\n+import org.springframework.util.FileCopyUtils;\n+import org.springframework.util.ObjectUtils;\n+import org.springframework.util.StringUtils;\n+import org.springframework.xml.transform.TraxUtils;\n+import org.springframework.xml.validation.SchemaLoaderUtils;\n+\n+/**\n+ * Implementation of the <code>Marshaller</code> interface for JAXB 2.0.\n+ * <p/>\n+ * The typical usage will be to set either the <code>contextPath</code> or the <code>classesToBeBound</code> property on\n+ * this bean, possibly customize the marshaller and unmarshaller by setting properties, schemas, adapters, and\n+ * listeners, and to refer to it.\n+ *\n+ * @author Arjen Poutsma\n+ * @see #setContextPath(String)\n+ * @see #setClassesToBeBound(Class[])\n+ * @see #setJaxbContextProperties(java.util.Map)\n+ * @see #setMarshallerProperties(java.util.Map)\n+ * @see #setUnmarshallerProperties(java.util.Map)\n+ * @see #setSchema(org.springframework.core.io.Resource)\n+ * @see #setSchemas(org.springframework.core.io.Resource[])\n+ * @see #setMarshallerListener(javax.xml.bind.Marshaller.Listener)\n+ * @see #setUnmarshallerListener(javax.xml.bind.Unmarshaller.Listener)\n+ * @see #setAdapters(javax.xml.bind.annotation.adapters.XmlAdapter[])\n+ * @since 1.0.0\n+ */\n+public class Jaxb2Marshaller extends AbstractJaxbMarshaller\n+        implements MimeMarshaller, MimeUnmarshaller, GenericMarshaller, GenericUnmarshaller, BeanClassLoaderAware {\n+\n+    private ClassLoader classLoader;\n+\n+    private Resource[] schemaResources;\n+\n+    private String schemaLanguage = XMLConstants.W3C_XML_SCHEMA_NS_URI;\n+\n+    private Marshaller.Listener marshallerListener;\n+\n+    private Unmarshaller.Listener unmarshallerListener;\n+\n+    private XmlAdapter[] adapters;\n+\n+    private Schema schema;\n+\n+    private Class[] classesToBeBound;\n+\n+    private Map<String, ?> jaxbContextProperties;\n+\n+    private boolean mtomEnabled = false;\n+\n+    public void setBeanClassLoader(ClassLoader classLoader) {\n+        this.classLoader = classLoader;\n+    }\n+\n+    /**\n+     * Sets the <code>XmlAdapter</code>s to be registered with the JAXB <code>Marshaller</code> and\n+     * <code>Unmarshaller</code>\n+     */\n+    public void setAdapters(XmlAdapter[] adapters) {\n+        this.adapters = adapters;\n+    }\n+\n+    /**\n+     * Sets the list of java classes to be recognized by a newly created JAXBContext. Setting this property or\n+     * <code>contextPath</code> is required.\n+     *\n+     * @see #setContextPath(String)\n+     */\n+    public void setClassesToBeBound(Class[] classesToBeBound) {\n+        this.classesToBeBound = classesToBeBound;\n+    }\n+\n+    /**\n+     * Sets the <code>JAXBContext</code> properties. These implementation-specific properties will be set on the\n+     * <code>JAXBContext</code>.\n+     */\n+    public void setJaxbContextProperties(Map<String, ?> jaxbContextProperties) {\n+        this.jaxbContextProperties = jaxbContextProperties;\n+    }\n+\n+    /** Sets the <code>Marshaller.Listener</code> to be registered with the JAXB <code>Marshaller</code>. */\n+    public void setMarshallerListener(Marshaller.Listener marshallerListener) {\n+        this.marshallerListener = marshallerListener;\n+    }\n+\n+    /**\n+     * Indicates whether MTOM support should be enabled or not. Default is <code>false</code>, marshalling using\n+     * XOP/MTOM is not enabled.\n+     */\n+    public void setMtomEnabled(boolean mtomEnabled) {\n+        this.mtomEnabled = mtomEnabled;\n+    }\n+\n+    /**\n+     * Sets the schema language. Default is the W3C XML Schema: <code>http://www.w3.org/2001/XMLSchema\"</code>.\n+     *\n+     * @see XMLConstants#W3C_XML_SCHEMA_NS_URI\n+     * @see XMLConstants#RELAXNG_NS_URI\n+     */\n+    public void setSchemaLanguage(String schemaLanguage) {\n+        this.schemaLanguage = schemaLanguage;\n+    }\n+\n+    /** Sets the schema resource to use for validation. */\n+    public void setSchema(Resource schemaResource) {\n+        schemaResources = new Resource[]{schemaResource};\n+    }\n+\n+    /** Sets the schema resources to use for validation. */\n+    public void setSchemas(Resource[] schemaResources) {\n+        this.schemaResources = schemaResources;\n+    }\n+\n+    /** Sets the <code>Unmarshaller.Listener</code> to be registered with the JAXB <code>Unmarshaller</code>. */\n+    public void setUnmarshallerListener(Unmarshaller.Listener unmarshallerListener) {\n+        this.unmarshallerListener = unmarshallerListener;\n+    }\n+\n+    public boolean supports(Type type) {\n+        if (type instanceof Class) {\n+            return supportsInternal((Class) type, true);\n+        }\n+        else if (type instanceof ParameterizedType) {\n+            ParameterizedType parameterizedType = (ParameterizedType) type;\n+            if (JAXBElement.class.equals(parameterizedType.getRawType())) {\n+                Assert.isTrue(parameterizedType.getActualTypeArguments().length == 1,\n+                        \"Invalid amount of parameterized types in JAXBElement\");\n+                Type typeArgument = parameterizedType.getActualTypeArguments()[0];\n+                if (typeArgument instanceof Class) {\n+                    Class clazz = (Class) typeArgument;\n+                    if (!isPrimitiveType(clazz) && !isStandardType(clazz) && !supportsInternal(clazz, false)) {\n+                        return false;\n+                    }\n+                }\n+                else if (typeArgument instanceof GenericArrayType) {\n+                    GenericArrayType genericArrayType = (GenericArrayType) typeArgument;\n+                    return genericArrayType.getGenericComponentType().equals(Byte.TYPE);\n+                }\n+                else if (!supports(typeArgument)) {\n+                    return false;\n+                }\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private boolean isPrimitiveType(Class clazz) {\n+        return (Boolean.class.equals(clazz) || Byte.class.equals(clazz) || Short.class.equals(clazz) ||\n+                Integer.class.equals(clazz) || Long.class.equals(clazz) || Float.class.equals(clazz) ||\n+                Double.class.equals(clazz) || byte[].class.equals(clazz));\n+    }\n+\n+    private boolean isStandardType(Class clazz) {\n+        return (String.class.equals(clazz) || BigInteger.class.equals(clazz) || BigDecimal.class.equals(clazz) ||\n+                Calendar.class.isAssignableFrom(clazz) || Date.class.isAssignableFrom(clazz) ||\n+                QName.class.equals(clazz) || URI.class.equals(clazz) ||\n+                XMLGregorianCalendar.class.isAssignableFrom(clazz) || Duration.class.isAssignableFrom(clazz) ||\n+                Object.class.equals(clazz) || Image.class.isAssignableFrom(clazz) || DataHandler.class.equals(clazz) ||\n+                Source.class.isAssignableFrom(clazz) || UUID.class.equals(clazz));\n+    }\n+\n+    public boolean supports(Class clazz) {\n+        return supportsInternal(clazz, true);\n+    }\n+\n+    private boolean supportsInternal(Class<?> clazz, boolean checkForXmlRootElement) {\n+        if (checkForXmlRootElement && clazz.getAnnotation(XmlRootElement.class) == null) {\n+            return false;\n+        }\n+        if (clazz.getAnnotation(XmlType.class) == null) {\n+            return false;\n+        }\n+        if (StringUtils.hasLength(getContextPath())) {\n+            String className = ClassUtils.getQualifiedName(clazz);\n+            int lastDotIndex = className.lastIndexOf('.');\n+            if (lastDotIndex == -1) {\n+                return false;\n+            }\n+            String packageName = className.substring(0, lastDotIndex);\n+            String[] contextPaths = StringUtils.tokenizeToStringArray(getContextPath(), \":\");\n+            for (int i = 0; i < contextPaths.length; i++) {\n+                if (contextPaths[i].equals(packageName)) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+        else if (!ObjectUtils.isEmpty(classesToBeBound)) {\n+            return Arrays.asList(classesToBeBound).contains(clazz);\n+        }\n+        return false;\n+    }\n+\n+    /*\n+     * JAXBContext\n+     */\n+\n+    protected JAXBContext createJaxbContext() throws Exception {\n+        if (JaxbUtils.getJaxbVersion() < JaxbUtils.JAXB_2) {\n+            throw new IllegalStateException(\n+                    \"Cannot use Jaxb2Marshaller in combination with JAXB 1.0. Use Jaxb1Marshaller instead.\");\n+        }\n+        if (StringUtils.hasLength(getContextPath()) && !ObjectUtils.isEmpty(classesToBeBound)) {\n+            throw new IllegalArgumentException(\"specify either contextPath or classesToBeBound property; not both\");\n+        }\n+        if (!ObjectUtils.isEmpty(schemaResources)) {\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\n+                        \"Setting validation schema to \" + StringUtils.arrayToCommaDelimitedString(schemaResources));\n+            }\n+            schema = SchemaLoaderUtils.loadSchema(schemaResources, schemaLanguage);\n+        }\n+        if (StringUtils.hasLength(getContextPath())) {\n+            return createJaxbContextFromContextPath();\n+        }\n+        else if (!ObjectUtils.isEmpty(classesToBeBound)) {\n+            return createJaxbContextFromClasses();\n+        }\n+        else {\n+            throw new IllegalArgumentException(\"setting either contextPath or classesToBeBound is required\");\n+        }\n+    }\n+\n+    private JAXBContext createJaxbContextFromContextPath() throws JAXBException {\n+        if (logger.isInfoEnabled()) {\n+            logger.info(\"Creating JAXBContext with context path [\" + getContextPath() + \"]\");\n+        }\n+        if (jaxbContextProperties != null) {\n+            if (classLoader != null) {\n+                return JAXBContext\n+                        .newInstance(getContextPath(), classLoader, jaxbContextProperties);\n+            }\n+            else {\n+                return JAXBContext\n+                        .newInstance(getContextPath(), ClassUtils.getDefaultClassLoader(), jaxbContextProperties);\n+            }\n+        }\n+        else {\n+            return classLoader != null ? JAXBContext.newInstance(getContextPath(), classLoader) :\n+                    JAXBContext.newInstance(getContextPath());\n+        }\n+    }\n+\n+    private JAXBContext createJaxbContextFromClasses() throws JAXBException {\n+        if (logger.isInfoEnabled()) {\n+            logger.info(\"Creating JAXBContext with classes to be bound [\" +\n+                    StringUtils.arrayToCommaDelimitedString(classesToBeBound) + \"]\");\n+        }\n+        if (jaxbContextProperties != null) {\n+            return JAXBContext.newInstance(classesToBeBound, jaxbContextProperties);\n+        }\n+        else {\n+            return JAXBContext.newInstance(classesToBeBound);\n+        }\n+    }\n+\n+    /*\n+     * Marshaller/Unmarshaller\n+     */\n+\n+    protected void initJaxbMarshaller(Marshaller marshaller) throws JAXBException {\n+        if (schema != null) {\n+            marshaller.setSchema(schema);\n+        }\n+        if (marshallerListener != null) {\n+            marshaller.setListener(marshallerListener);\n+        }\n+        if (adapters != null) {\n+            for (int i = 0; i < adapters.length; i++) {\n+                marshaller.setAdapter(adapters[i]);\n+            }\n+        }\n+    }\n+\n+    protected void initJaxbUnmarshaller(Unmarshaller unmarshaller) throws JAXBException {\n+        if (schema != null) {\n+            unmarshaller.setSchema(schema);\n+        }\n+        if (unmarshallerListener != null) {\n+            unmarshaller.setListener(unmarshallerListener);\n+        }\n+        if (adapters != null) {\n+            for (int i = 0; i < adapters.length; i++) {\n+                unmarshaller.setAdapter(adapters[i]);\n+            }\n+        }\n+    }\n+\n+    /*\n+     * Marshalling\n+     */\n+\n+    public void marshal(Object graph, Result result) throws XmlMappingException {\n+        marshal(graph, result, null);\n+    }\n+\n+    public void marshal(Object graph, Result result, MimeContainer mimeContainer) throws XmlMappingException {\n+        try {\n+            Marshaller marshaller = createMarshaller();\n+            if (mtomEnabled && mimeContainer != null) {\n+                marshaller.setAttachmentMarshaller(new Jaxb2AttachmentMarshaller(mimeContainer));\n+            }\n+            if (TraxUtils.isStaxResult(result)) {\n+                marshalStaxResult(marshaller, graph, result);\n+            }\n+            else {\n+                marshaller.marshal(graph, result);\n+            }\n+        }\n+        catch (JAXBException ex) {\n+            throw convertJaxbException(ex);\n+        }\n+    }\n+\n+    private void marshalStaxResult(Marshaller jaxbMarshaller, Object graph, Result staxResult) throws JAXBException {\n+        XMLStreamWriter streamWriter = TraxUtils.getXMLStreamWriter(staxResult);\n+        if (streamWriter != null) {\n+            jaxbMarshaller.marshal(graph, streamWriter);\n+        }\n+        else {\n+            XMLEventWriter eventWriter = TraxUtils.getXMLEventWriter(staxResult);\n+            if (eventWriter != null) {\n+                jaxbMarshaller.marshal(graph, eventWriter);\n+            }\n+            else {\n+                throw new IllegalArgumentException(\"StAX Result contains neither XMLStreamWriter nor XMLEventConsumer\");\n+            }\n+        }\n+    }\n+\n+    /*\n+     * Unmarshalling\n+     */\n+\n+    public Object unmarshal(Source source) throws XmlMappingException {\n+        return unmarshal(source, null);\n+    }\n+\n+    public Object unmarshal(Source source, MimeContainer mimeContainer) throws XmlMappingException {\n+        try {\n+            Unmarshaller unmarshaller = createUnmarshaller();\n+            if (mtomEnabled && mimeContainer != null) {\n+                unmarshaller.setAttachmentUnmarshaller(new Jaxb2AttachmentUnmarshaller(mimeContainer));\n+            }\n+            if (TraxUtils.isStaxSource(source)) {\n+                return unmarshalStaxSource(unmarshaller, source);\n+            }\n+            else {\n+                return unmarshaller.unmarshal(source);\n+            }\n+        }\n+        catch (JAXBException ex) {\n+            throw convertJaxbException(ex);\n+        }\n+    }\n+\n+    private Object unmarshalStaxSource(Unmarshaller jaxbUnmarshaller, Source staxSource) throws JAXBException {\n+        XMLStreamReader streamReader = TraxUtils.getXMLStreamReader(staxSource);\n+        if (streamReader != null) {\n+            return jaxbUnmarshaller.unmarshal(streamReader);\n+        }\n+        else {\n+            XMLEventReader eventReader = TraxUtils.getXMLEventReader(staxSource);\n+            if (eventReader != null) {\n+                return jaxbUnmarshaller.unmarshal(eventReader);\n+            }\n+            else {\n+                throw new IllegalArgumentException(\"StaxSource contains neither XMLStreamReader nor XMLEventReader\");\n+            }\n+        }\n+    }\n+\n+    /*\n+    * Inner classes\n+    */\n+\n+    private static class Jaxb2AttachmentMarshaller extends AttachmentMarshaller {\n+\n+        private final MimeContainer mimeContainer;\n+\n+        public Jaxb2AttachmentMarshaller(MimeContainer mimeContainer) {\n+            this.mimeContainer = mimeContainer;\n+        }\n+\n+        public String addMtomAttachment(byte[] data,\n+                                        int offset,\n+                                        int length,\n+                                        String mimeType,\n+                                        String elementNamespace,\n+                                        String elementLocalName) {\n+            ByteArrayDataSource dataSource = new ByteArrayDataSource(mimeType, data, offset, length);\n+            return addMtomAttachment(new DataHandler(dataSource), elementNamespace, elementLocalName);\n+        }\n+\n+        public String addMtomAttachment(DataHandler dataHandler, String elementNamespace, String elementLocalName) {\n+            String host = getHost(elementNamespace, dataHandler);\n+            String contentId = UUID.randomUUID() + \"@\" + host;\n+            mimeContainer.addAttachment(\"<\" + contentId + \">\", dataHandler);\n+            try {\n+                contentId = URLEncoder.encode(contentId, \"UTF-8\");\n+            }\n+            catch (UnsupportedEncodingException e) {\n+                // ignore\n+            }\n+            return \"cid:\" + contentId;\n+        }\n+\n+        private String getHost(String elementNamespace, DataHandler dataHandler) {\n+            try {\n+                URI uri = new URI(elementNamespace);\n+                return uri.getHost();\n+            }\n+            catch (URISyntaxException e) {\n+                // ignore\n+            }\n+            return dataHandler.getName();\n+        }\n+\n+        public String addSwaRefAttachment(DataHandler dataHandler) {\n+            String contentId = UUID.randomUUID() + \"@\" + dataHandler.getName();\n+            mimeContainer.addAttachment(contentId, dataHandler);\n+            return contentId;\n+        }\n+\n+        @Override\n+        public boolean isXOPPackage() {\n+            return mimeContainer.convertToXopPackage();\n+        }\n+    }\n+\n+    private static class Jaxb2AttachmentUnmarshaller extends AttachmentUnmarshaller {\n+\n+        private final MimeContainer mimeContainer;\n+\n+        public Jaxb2AttachmentUnmarshaller(MimeContainer mimeContainer) {\n+            this.mimeContainer = mimeContainer;\n+        }\n+\n+        public byte[] getAttachmentAsByteArray(String cid) {\n+            try {\n+                DataHandler dataHandler = getAttachmentAsDataHandler(cid);\n+                return FileCopyUtils.copyToByteArray(dataHandler.getInputStream());\n+            }\n+            catch (IOException ex) {\n+                throw new JaxbUnmarshallingFailureException(ex);\n+            }\n+        }\n+\n+        public DataHandler getAttachmentAsDataHandler(String contentId) {\n+            if (contentId.startsWith(\"cid:\")) {\n+                contentId = contentId.substring(\"cid:\".length());\n+                try {\n+                    contentId = URLDecoder.decode(contentId, \"UTF-8\");\n+                }\n+                catch (UnsupportedEncodingException e) {\n+                    // ignore\n+                }\n+                contentId = '<' + contentId + '>';\n+            }\n+            return mimeContainer.getAttachment(contentId);\n+        }\n+\n+        @Override\n+        public boolean isXOPPackage() {\n+            return mimeContainer.isXopPackage();\n+        }\n+    }\n+\n+    /*\n+     * DataSource that wraps around a byte array\n+     */\n+    private static class ByteArrayDataSource implements DataSource {\n+\n+        private byte[] data;\n+\n+        private String contentType;\n+\n+        private int offset;\n+\n+        private int length;\n+\n+        public ByteArrayDataSource(String contentType, byte[] data, int offset, int length) {\n+            this.contentType = contentType;\n+            this.data = data;\n+            this.offset = offset;\n+            this.length = length;\n+        }\n+\n+        public InputStream getInputStream() throws IOException {\n+            return new ByteArrayInputStream(data, offset, length);\n+        }\n+\n+        public OutputStream getOutputStream() throws IOException {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        public String getContentType() {\n+            return contentType;\n+        }\n+\n+        public String getName() {\n+            return \"ByteArrayDataSource\";\n+        }\n+    }\n+\n+}\n+"
        },
        {
            "sha": "8a0941b6e2e700989865f52240ae2ff8f8682df3",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/jaxb/JaxbMarshallingFailureException.java",
            "status": "added",
            "additions": 35,
            "deletions": 0,
            "changes": 35,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxbMarshallingFailureException.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxbMarshallingFailureException.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxbMarshallingFailureException.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm.jaxb;\n+\n+import javax.xml.bind.MarshalException;\n+\n+import org.springframework.oxm.MarshallingFailureException;\n+\n+/**\n+ * JAXB-specific subclass of <code>MarshallingFailureException</code>.\n+ *\n+ * @author Arjen Poutsma\n+ * @see JaxbUtils#convertJaxbException\n+ * @since 1.0.0\n+ */\n+public class JaxbMarshallingFailureException extends MarshallingFailureException {\n+\n+    public JaxbMarshallingFailureException(MarshalException ex) {\n+        super(\"JAXB marshalling exception: \" + ex.getMessage(), ex);\n+    }\n+\n+}"
        },
        {
            "sha": "00a3fa2dee3ca5b8848f6ab6e7f6eb2a2a66a739",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/jaxb/JaxbSystemException.java",
            "status": "added",
            "additions": 35,
            "deletions": 0,
            "changes": 35,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxbSystemException.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxbSystemException.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxbSystemException.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm.jaxb;\n+\n+import javax.xml.bind.JAXBException;\n+\n+import org.springframework.oxm.UncategorizedXmlMappingException;\n+\n+/**\n+ * JAXB-specific subclass of <code>UncategorizedXmlMappingException</code>, for <code>JAXBException</code>s that cannot\n+ * be distinguished further.\n+ *\n+ * @author Arjen Poutsma\n+ * @see JaxbUtils#convertJaxbException(javax.xml.bind.JAXBException)\n+ * @since 1.0.0\n+ */\n+public class JaxbSystemException extends UncategorizedXmlMappingException {\n+\n+    public JaxbSystemException(JAXBException ex) {\n+        super(ex.getMessage(), ex);\n+    }\n+}"
        },
        {
            "sha": "318fba8eb6c47da4569edcf1d0b6bfc92f6002f1",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/jaxb/JaxbUnmarshallingFailureException.java",
            "status": "added",
            "additions": 38,
            "deletions": 0,
            "changes": 38,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxbUnmarshallingFailureException.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxbUnmarshallingFailureException.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxbUnmarshallingFailureException.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm.jaxb;\n+\n+import java.io.IOException;\n+import javax.xml.bind.UnmarshalException;\n+\n+import org.springframework.oxm.UnmarshallingFailureException;\n+\n+/**\n+ * JAXB-specific subclass of <code>UnmarshallingFailureException</code>.\n+ *\n+ * @author Arjen Poutsma\n+ * @since 1.0.0\n+ */\n+public class JaxbUnmarshallingFailureException extends UnmarshallingFailureException {\n+\n+    public JaxbUnmarshallingFailureException(UnmarshalException ex) {\n+        super(\"JAXB unmarshalling exception: \" + ex.getMessage(), ex);\n+    }\n+\n+    public JaxbUnmarshallingFailureException(IOException ex) {\n+        super(\"JAXB unmarshalling exception: \" + ex.getMessage(), ex);\n+    }\n+}"
        },
        {
            "sha": "1a6ba154f5353c5efc38756405172f7ae37d2cd4",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/jaxb/JaxbUtils.java",
            "status": "added",
            "additions": 84,
            "deletions": 0,
            "changes": 84,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxbUtils.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxbUtils.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxbUtils.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm.jaxb;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.MarshalException;\n+import javax.xml.bind.UnmarshalException;\n+import javax.xml.bind.ValidationException;\n+\n+import org.springframework.oxm.XmlMappingException;\n+import org.springframework.util.ClassUtils;\n+\n+/**\n+ * Generic utility methods for working with JAXB. Mainly for internal use within the framework.\n+ *\n+ * @author Arjen Poutsma\n+ * @since 1.0.0\n+ */\n+public abstract class JaxbUtils {\n+\n+    public static final int JAXB_1 = 0;\n+\n+    public static final int JAXB_2 = 1;\n+\n+    private static final String JAXB_2_CLASS_NAME = \"javax.xml.bind.Binder\";\n+\n+    private static int jaxbVersion = JAXB_1;\n+\n+    static {\n+        try {\n+            ClassUtils.forName(JAXB_2_CLASS_NAME);\n+            jaxbVersion = JAXB_2;\n+        }\n+        catch (ClassNotFoundException ex1) {\n+            // leave JAXB 1 as default\n+        }\n+    }\n+\n+    /**\n+     * Gets the major JAXB version. This means we can do things like if <code>(getJaxbVersion() &lt;= JAXB_2)</code>.\n+     *\n+     * @return a code comparable to the JAXP_XX codes in this class\n+     * @see #JAXB_1\n+     * @see #JAXB_2\n+     */\n+    public static int getJaxbVersion() {\n+        return jaxbVersion;\n+    }\n+\n+    /**\n+     * Converts the given <code>JAXBException</code> to an appropriate exception from the\n+     * <code>org.springframework.oxm</code> hierarchy.\n+     *\n+     * @param ex <code>JAXBException</code> that occured\n+     * @return the corresponding <code>XmlMappingException</code>\n+     */\n+    public static XmlMappingException convertJaxbException(JAXBException ex) {\n+        if (ex instanceof MarshalException) {\n+            return new JaxbMarshallingFailureException((MarshalException) ex);\n+        }\n+        else if (ex instanceof UnmarshalException) {\n+            return new JaxbUnmarshallingFailureException((UnmarshalException) ex);\n+        }\n+        else if (ex instanceof ValidationException) {\n+            return new JaxbValidationFailureException((ValidationException) ex);\n+        }\n+        // fallback\n+        return new JaxbSystemException(ex);\n+    }\n+\n+}"
        },
        {
            "sha": "e87256f50b3bac63e2945fb1f39c0747d8d41934",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/jaxb/JaxbValidationFailureException.java",
            "status": "added",
            "additions": 35,
            "deletions": 0,
            "changes": 35,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxbValidationFailureException.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxbValidationFailureException.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxbValidationFailureException.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm.jaxb;\n+\n+import javax.xml.bind.ValidationException;\n+\n+import org.springframework.oxm.ValidationFailureException;\n+\n+/**\n+ * JAXB-specific subclass of <code>ValidationFailureException</code>.\n+ *\n+ * @author Arjen Poutsma\n+ * @see JaxbUtils#convertJaxbException\n+ * @since 1.0.0\n+ */\n+public class JaxbValidationFailureException extends ValidationFailureException {\n+\n+    public JaxbValidationFailureException(ValidationException ex) {\n+        super(\"JAXB validation exception: \" + ex.getMessage(), ex);\n+    }\n+\n+}"
        },
        {
            "sha": "7b398a83ea8a06a67aa7c44f3ecf1e40c1bb8cab",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/jaxb/package.html",
            "status": "added",
            "additions": 6,
            "deletions": 0,
            "changes": 6,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2Fpackage.html",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2Fpackage.html",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2Fpackage.html?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,6 @@\n+<html>\n+<body>\n+Package providing integration of <a href=\"http://java.sun.com/webservices/jaxb/\">JAXB</a> with Springs O/X Mapping\n+support.\n+</body>\n+</html>"
        },
        {
            "sha": "9d68d3a21e1fb7d34a8d25aad99b35ba014ca382",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/jibx/JibxMarshaller.java",
            "status": "added",
            "additions": 361,
            "deletions": 0,
            "changes": 361,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxMarshaller.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxMarshaller.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxMarshaller.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,361 @@\n+/*\n+ * Copyright 2006 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.jibx;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.Writer;\n+import javax.xml.stream.XMLEventReader;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamReader;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.sax.SAXResult;\n+import javax.xml.transform.sax.SAXSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.jibx.runtime.BindingDirectory;\n+import org.jibx.runtime.IBindingFactory;\n+import org.jibx.runtime.IMarshallingContext;\n+import org.jibx.runtime.IUnmarshallingContext;\n+import org.jibx.runtime.IXMLReader;\n+import org.jibx.runtime.IXMLWriter;\n+import org.jibx.runtime.JiBXException;\n+import org.jibx.runtime.impl.MarshallingContext;\n+import org.jibx.runtime.impl.StAXReaderWrapper;\n+import org.jibx.runtime.impl.StAXWriter;\n+import org.jibx.runtime.impl.UnmarshallingContext;\n+import org.w3c.dom.Node;\n+import org.xml.sax.ContentHandler;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.ext.LexicalHandler;\n+\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.oxm.AbstractMarshaller;\n+import org.springframework.oxm.XmlMappingException;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+import org.springframework.xml.stream.StaxEventContentHandler;\n+import org.springframework.xml.stream.XmlEventStreamReader;\n+\n+/**\n+ * Implementation of the <code>Marshaller</code> and <code>Unmarshaller</code> interfaces for JiBX.\n+ * <p/>\n+ * The typical usage will be to set the <code>targetClass</code> and optionally the <code>bindingName</code> property on\n+ * this bean, and to refer to it.\n+ *\n+ * @author Arjen Poutsma\n+ * @see org.jibx.runtime.IMarshallingContext\n+ * @see org.jibx.runtime.IUnmarshallingContext\n+ * @since 1.0.0\n+ */\n+public class JibxMarshaller extends AbstractMarshaller implements InitializingBean {\n+\n+    private Class targetClass;\n+\n+    private String bindingName;\n+\n+    private IBindingFactory bindingFactory;\n+\n+    private static TransformerFactory transformerFactory = TransformerFactory.newInstance();\n+\n+    private int indent = -1;\n+\n+    private String encoding;\n+\n+    private Boolean standalone;\n+\n+    /** Sets the optional binding name for this instance. */\n+    public void setBindingName(String bindingName) {\n+        this.bindingName = bindingName;\n+    }\n+\n+    /** Sets the target class for this instance. This property is required. */\n+    public void setTargetClass(Class targetClass) {\n+        this.targetClass = targetClass;\n+    }\n+\n+    /** Sets the number of nesting indent spaces. Default is <code>-1</code>, i.e. no indentation. */\n+    public void setIndent(int indent) {\n+        this.indent = indent;\n+    }\n+\n+    /** Sets the document encoding using for marshalling. Default is UTF-8. */\n+    public void setEncoding(String encoding) {\n+        this.encoding = encoding;\n+    }\n+\n+    /** Sets the document standalone flag for marshalling. By default, this flag is not present. */\n+    public void setStandalone(Boolean standalone) {\n+        this.standalone = standalone;\n+    }\n+\n+    public void afterPropertiesSet() throws Exception {\n+        Assert.notNull(targetClass, \"targetClass is required\");\n+        if (logger.isInfoEnabled()) {\n+            if (StringUtils.hasLength(bindingName)) {\n+                logger.info(\"Configured for target class [\" + targetClass + \"] using binding [\" + bindingName + \"]\");\n+            }\n+            else {\n+                logger.info(\"Configured for target class [\" + targetClass + \"]\");\n+            }\n+        }\n+        try {\n+            if (StringUtils.hasLength(bindingName)) {\n+                bindingFactory = BindingDirectory.getFactory(bindingName, targetClass);\n+            }\n+            else {\n+                bindingFactory = BindingDirectory.getFactory(targetClass);\n+            }\n+        }\n+        catch (JiBXException ex) {\n+            throw new JibxSystemException(ex);\n+        }\n+    }\n+\n+    public boolean supports(Class clazz) {\n+        Assert.notNull(clazz, \"'clazz' must not be null\");\n+        String[] mappedClasses = bindingFactory.getMappedClasses();\n+        String className = clazz.getName();\n+        for (int i = 0; i < mappedClasses.length; i++) {\n+            if (className.equals(mappedClasses[i])) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Convert the given <code>JiBXException</code> to an appropriate exception from the\n+     * <code>org.springframework.oxm</code> hierarchy.\n+     * <p/>\n+     * The default implementation delegates to <code>JibxUtils</code>. Can be overridden in subclasses.\n+     * <p/>\n+     * A boolean flag is used to indicate whether this exception occurs during marshalling or unmarshalling, since JiBX\n+     * itself does not make this distinction in its exception hierarchy.\n+     *\n+     * @param ex          <code>JiBXException</code> that occured\n+     * @param marshalling indicates whether the exception occurs during marshalling (<code>true</code>), or\n+     *                    unmarshalling (<code>false</code>)\n+     * @return the corresponding <code>XmlMappingException</code> instance\n+     * @see JibxUtils#convertJibxException(org.jibx.runtime.JiBXException,boolean)\n+     */\n+    public XmlMappingException convertJibxException(JiBXException ex, boolean marshalling) {\n+        return JibxUtils.convertJibxException(ex, marshalling);\n+    }\n+\n+    //\n+    // Supported Marshalling\n+    //\n+\n+    protected void marshalOutputStream(Object graph, OutputStream outputStream)\n+            throws XmlMappingException, IOException {\n+        try {\n+            IMarshallingContext marshallingContext = createMarshallingContext();\n+            marshallingContext.marshalDocument(graph, encoding, standalone, outputStream);\n+        }\n+        catch (JiBXException ex) {\n+            throw convertJibxException(ex, true);\n+        }\n+    }\n+\n+    protected void marshalWriter(Object graph, Writer writer) throws XmlMappingException, IOException {\n+        try {\n+            IMarshallingContext marshallingContext = createMarshallingContext();\n+            marshallingContext.marshalDocument(graph, encoding, standalone, writer);\n+        }\n+        catch (JiBXException ex) {\n+            throw convertJibxException(ex, true);\n+        }\n+    }\n+\n+    protected void marshalXmlStreamWriter(Object graph, XMLStreamWriter streamWriter) throws XmlMappingException {\n+        try {\n+            MarshallingContext marshallingContext = (MarshallingContext) createMarshallingContext();\n+            IXMLWriter xmlWriter = new StAXWriter(marshallingContext.getNamespaces(), streamWriter);\n+            marshallingContext.setXmlWriter(xmlWriter);\n+            marshallingContext.marshalDocument(graph);\n+        }\n+        catch (JiBXException ex) {\n+            throw convertJibxException(ex, false);\n+        }\n+    }\n+\n+    //\n+    // Unsupported Marshalling\n+    //\n+\n+    protected void marshalDomNode(Object graph, Node node) throws XmlMappingException {\n+        try {\n+            // JiBX does not support DOM natively, so we write to a buffer first, and transform that to the Node\n+            ByteArrayOutputStream os = new ByteArrayOutputStream();\n+            marshalOutputStream(graph, os);\n+            ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());\n+            Transformer transformer = transformerFactory.newTransformer();\n+            transformer.transform(new StreamSource(is), new DOMResult(node));\n+        }\n+        catch (IOException ex) {\n+            throw new JibxSystemException(ex);\n+        }\n+        catch (TransformerException ex) {\n+            throw new JibxSystemException(ex);\n+        }\n+    }\n+\n+    protected void marshalSaxHandlers(Object graph, ContentHandler contentHandler, LexicalHandler lexicalHandler)\n+            throws XmlMappingException {\n+        try {\n+            // JiBX does not support SAX natively, so we write to a buffer first, and transform that to the handlers\n+            ByteArrayOutputStream os = new ByteArrayOutputStream();\n+            marshalOutputStream(graph, os);\n+            ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());\n+            Transformer transformer = transformerFactory.newTransformer();\n+            SAXResult saxResult = new SAXResult(contentHandler);\n+            saxResult.setLexicalHandler(lexicalHandler);\n+            transformer.transform(new StreamSource(is), saxResult);\n+        }\n+        catch (IOException ex) {\n+            throw new JibxSystemException(ex);\n+        }\n+        catch (TransformerException ex) {\n+            throw new JibxSystemException(ex);\n+        }\n+    }\n+\n+    protected void marshalXmlEventWriter(Object graph, XMLEventWriter eventWriter) {\n+        ContentHandler contentHandler = new StaxEventContentHandler(eventWriter);\n+        marshalSaxHandlers(graph, contentHandler, null);\n+    }\n+\n+    //\n+    // Unmarshalling\n+    //\n+\n+    protected Object unmarshalInputStream(InputStream inputStream) throws XmlMappingException, IOException {\n+        try {\n+            IUnmarshallingContext unmarshallingContext = createUnmarshallingContext();\n+            return unmarshallingContext.unmarshalDocument(inputStream, null);\n+        }\n+        catch (JiBXException ex) {\n+            throw convertJibxException(ex, false);\n+        }\n+    }\n+\n+    protected Object unmarshalReader(Reader reader) throws XmlMappingException, IOException {\n+        try {\n+            IUnmarshallingContext unmarshallingContext = createUnmarshallingContext();\n+            return unmarshallingContext.unmarshalDocument(reader);\n+        }\n+        catch (JiBXException ex) {\n+            throw convertJibxException(ex, false);\n+        }\n+    }\n+\n+    protected Object unmarshalXmlStreamReader(XMLStreamReader streamReader) {\n+        try {\n+            UnmarshallingContext unmarshallingContext = (UnmarshallingContext) createUnmarshallingContext();\n+            IXMLReader xmlReader = new StAXReaderWrapper(streamReader, null, true);\n+            unmarshallingContext.setDocument(xmlReader);\n+            return unmarshallingContext.unmarshalElement();\n+        }\n+        catch (JiBXException ex) {\n+            throw convertJibxException(ex, false);\n+        }\n+    }\n+\n+    protected Object unmarshalXmlEventReader(XMLEventReader eventReader) {\n+        try {\n+            XMLStreamReader streamReader = new XmlEventStreamReader(eventReader);\n+            return unmarshalXmlStreamReader(streamReader);\n+        }\n+        catch (XMLStreamException ex) {\n+            throw new JibxSystemException(ex);\n+        }\n+    }\n+\n+    //\n+    // Unsupported Unmarshalling\n+    //\n+\n+    protected Object unmarshalDomNode(Node node) throws XmlMappingException {\n+        try {\n+            Transformer transformer = transformerFactory.newTransformer();\n+            ByteArrayOutputStream os = new ByteArrayOutputStream();\n+            transformer.transform(new DOMSource(node), new StreamResult(os));\n+            ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());\n+            return unmarshalInputStream(is);\n+        }\n+        catch (IOException ex) {\n+            throw new JibxSystemException(ex);\n+        }\n+        catch (TransformerException ex) {\n+            throw new JibxSystemException(ex);\n+        }\n+    }\n+\n+    protected Object unmarshalSaxReader(XMLReader xmlReader, InputSource inputSource)\n+            throws XmlMappingException, IOException {\n+        try {\n+            Transformer transformer = transformerFactory.newTransformer();\n+            ByteArrayOutputStream os = new ByteArrayOutputStream();\n+            transformer.transform(new SAXSource(xmlReader, inputSource), new StreamResult(os));\n+            ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());\n+            return unmarshalInputStream(is);\n+        }\n+        catch (IOException ex) {\n+            throw new JibxSystemException(ex);\n+        }\n+        catch (TransformerException ex) {\n+            throw new JibxSystemException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Creates a new <code>IMarshallingContext</code>, set with the correct indentation.\n+     *\n+     * @return the created marshalling context\n+     * @throws JiBXException in case of errors\n+     */\n+    protected IMarshallingContext createMarshallingContext() throws JiBXException {\n+        IMarshallingContext marshallingContext = bindingFactory.createMarshallingContext();\n+        marshallingContext.setIndent(indent);\n+        return marshallingContext;\n+    }\n+\n+    /**\n+     * Creates a new <code>IUnmarshallingContext</code>, set with the correct indentation.\n+     *\n+     * @return the created unmarshalling context\n+     * @throws JiBXException in case of errors\n+     */\n+    protected IUnmarshallingContext createUnmarshallingContext() throws JiBXException {\n+        return bindingFactory.createUnmarshallingContext();\n+    }\n+\n+\n+}"
        },
        {
            "sha": "4d9613e9f119274f32d3ec153b21da9c9ab8432e",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/jibx/JibxMarshallingFailureException.java",
            "status": "added",
            "additions": 34,
            "deletions": 0,
            "changes": 34,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxMarshallingFailureException.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxMarshallingFailureException.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxMarshallingFailureException.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2006 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.jibx;\n+\n+import org.jibx.runtime.JiBXException;\n+import org.springframework.oxm.MarshallingFailureException;\n+\n+/**\n+ * JiXB-specific subclass of <code>MarshallingFailureException</code>.\n+ *\n+ * @author Arjen Poutsma\n+ * @see JibxUtils#convertJibxException(org.jibx.runtime.JiBXException,boolean)\n+ * @since 1.0.0\n+ */\n+public class JibxMarshallingFailureException extends MarshallingFailureException {\n+\n+    public JibxMarshallingFailureException(JiBXException ex) {\n+        super(\"JiBX marshalling exception: \" + ex.getMessage(), ex);\n+    }\n+}"
        },
        {
            "sha": "e8962e996c3614b55859dc2f2a619f66b850ec64",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/jibx/JibxSystemException.java",
            "status": "added",
            "additions": 34,
            "deletions": 0,
            "changes": 34,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxSystemException.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxSystemException.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxSystemException.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2006 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.jibx;\n+\n+import org.springframework.oxm.UncategorizedXmlMappingException;\n+\n+/**\n+ * JiBX-specific subclass of <code>UncategorizedXmlMappingException</code>, for <code>JiBXBException</code>s that cannot\n+ * be distinguished further.\n+ *\n+ * @author Arjen Poutsma\n+ * @see JibxUtils#convertJibxException(org.jibx.runtime.JiBXException,boolean)\n+ * @since 1.0.0\n+ */\n+public class JibxSystemException extends UncategorizedXmlMappingException {\n+\n+    public JibxSystemException(Exception ex) {\n+        super(ex.getMessage(), ex);\n+    }\n+}"
        },
        {
            "sha": "797bbffdfc9747d4a3eed04fcbb948e59cb82a43",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/jibx/JibxUnmarshallingFailureException.java",
            "status": "added",
            "additions": 35,
            "deletions": 0,
            "changes": 35,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxUnmarshallingFailureException.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxUnmarshallingFailureException.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxUnmarshallingFailureException.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2006 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.jibx;\n+\n+import org.jibx.runtime.JiBXException;\n+import org.springframework.oxm.UnmarshallingFailureException;\n+\n+/**\n+ * JiXB-specific subclass of <code>UnmarshallingFailureException</code>.\n+ *\n+ * @author Arjen Poutsma\n+ * @see JibxUtils#convertJibxException(org.jibx.runtime.JiBXException,boolean)\n+ * @since 1.0.0\n+ */\n+public class JibxUnmarshallingFailureException extends UnmarshallingFailureException {\n+\n+    public JibxUnmarshallingFailureException(JiBXException ex) {\n+        super(\"JiBX unmarshalling exception: \" + ex.getMessage(), ex);\n+    }\n+\n+}"
        },
        {
            "sha": "56c1b9f03e0460430d49f9582df1502886d75fdc",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/jibx/JibxUtils.java",
            "status": "added",
            "additions": 56,
            "deletions": 0,
            "changes": 56,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxUtils.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxUtils.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxUtils.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2006 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.jibx;\n+\n+import org.jibx.runtime.JiBXException;\n+import org.jibx.runtime.ValidationException;\n+import org.springframework.oxm.XmlMappingException;\n+\n+/**\n+ * Generic utility methods for working with JiBX. Mainly for internal use within the framework.\n+ *\n+ * @author Arjen Poutsma\n+ * @since 1.0.0\n+ */\n+public abstract class JibxUtils {\n+\n+    /**\n+     * Converts the given <code>JiBXException</code> to an appropriate exception from the\n+     * <code>org.springframework.oxm</code> hierarchy.\n+     * <p/>\n+     * A boolean flag is used to indicate whether this exception occurs during marshalling or unmarshalling, since JiBX\n+     * itself does not make this distinction in its exception hierarchy.\n+     *\n+     * @param ex          <code>JiBXException</code> that occured\n+     * @param marshalling indicates whether the exception occurs during marshalling (<code>true</code>), or\n+     *                    unmarshalling (<code>false</code>)\n+     * @return the corresponding <code>XmlMappingException</code>\n+     */\n+    public static XmlMappingException convertJibxException(JiBXException ex, boolean marshalling) {\n+        if (ex instanceof ValidationException) {\n+            return new JibxValidationFailureException((ValidationException) ex);\n+        }\n+        else {\n+            if (marshalling) {\n+                return new JibxMarshallingFailureException(ex);\n+            }\n+            else {\n+                return new JibxUnmarshallingFailureException(ex);\n+            }\n+        }\n+    }\n+}"
        },
        {
            "sha": "23952b21b58b24c3410e90118cfc2223f7f77c00",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/jibx/JibxValidationFailureException.java",
            "status": "added",
            "additions": 35,
            "deletions": 0,
            "changes": 35,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxValidationFailureException.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxValidationFailureException.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxValidationFailureException.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2006 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.jibx;\n+\n+import org.jibx.runtime.ValidationException;\n+import org.springframework.oxm.ValidationFailureException;\n+\n+/**\n+ * JAXB-specific subclass of <code>ValidationFailureException</code>.\n+ *\n+ * @author Arjen Poutsma\n+ * @see JibxUtils#convertJibxException(org.jibx.runtime.JiBXException,boolean)\n+ * @since 1.0.0\n+ */\n+public class JibxValidationFailureException extends ValidationFailureException {\n+\n+    public JibxValidationFailureException(ValidationException ex) {\n+        super(\"JiBX validation exception: \" + ex.getMessage(), ex);\n+    }\n+\n+}"
        },
        {
            "sha": "a685b60e4cd9fa5e612262d18a99fcc646f5f106",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/jibx/package.html",
            "status": "added",
            "additions": 6,
            "deletions": 0,
            "changes": 6,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2Fpackage.html",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2Fpackage.html",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2Fpackage.html?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,6 @@\n+<html>\n+<body>\n+Package providing integration of <a href=\"http://jibx.sourceforge.net/\">JiBX</a> with Springs O/X Mapping\n+support.\n+</body>\n+</html>"
        },
        {
            "sha": "81767e5d04c65c2ebb1025494582ad611fffc3f2",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/mime/MimeContainer.java",
            "status": "added",
            "additions": 62,
            "deletions": 0,
            "changes": 62,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fmime%2FMimeContainer.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fmime%2FMimeContainer.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fmime%2FMimeContainer.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2007 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.mime;\n+\n+import javax.activation.DataHandler;\n+\n+/**\n+ * Represents a container for MIME attachments. Concrete implementations might adapt a SOAPMesage, or an email message.\n+ *\n+ * @author Arjen Poutsma\n+ * @see <a href=\"http://www.w3.org/TR/2005/REC-xop10-20050125/\">XML-binary Optimized Packaging</a>\n+ * @since 1.0.0\n+ */\n+public interface MimeContainer {\n+\n+    /**\n+     * Indicates whether this container is a XOP package.\n+     *\n+     * @return <code>true</code> when the constraints specified in <a href=\"http://www.w3.org/TR/2005/REC-xop10-20050125/#identifying_xop_documents\">Identifying\n+     *         XOP Documents</a> are met.\n+     * @see <a href=\"http://www.w3.org/TR/2005/REC-xop10-20050125/#xop_packages\">XOP Packages</a>\n+     */\n+    boolean isXopPackage();\n+\n+    /**\n+     * Turns this message into a XOP package.\n+     *\n+     * @return <code>true</code> when the message is a XOP package\n+     * @see <a href=\"http://www.w3.org/TR/2005/REC-xop10-20050125/#xop_packages\">XOP Packages</a>\n+     */\n+    boolean convertToXopPackage();\n+\n+    /**\n+     * Adds the given data handler as an attachment to this container.\n+     *\n+     * @param contentId   the content id of the attachment\n+     * @param dataHandler the data handler containing the data of the attachment\n+     */\n+    void addAttachment(String contentId, DataHandler dataHandler);\n+\n+    /**\n+     * Returns the attachment with the given content id, or <code>null</code> if not found.\n+     *\n+     * @param contentId the content id\n+     * @return the attachment, as a data handler\n+     */\n+    DataHandler getAttachment(String contentId);\n+}"
        },
        {
            "sha": "c7a1e6ee7a1d7f0f2b38c6c0ca70e201a82e50fc",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/mime/MimeMarshaller.java",
            "status": "added",
            "additions": 50,
            "deletions": 0,
            "changes": 50,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fmime%2FMimeMarshaller.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fmime%2FMimeMarshaller.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fmime%2FMimeMarshaller.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2007 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.mime;\n+\n+import java.io.IOException;\n+import javax.xml.transform.Result;\n+\n+import org.springframework.oxm.Marshaller;\n+import org.springframework.oxm.XmlMappingException;\n+\n+/**\n+ * Subinterface of {@link Marshaller} that can use MIME attachments to optimize storage of binary data. Attachments can\n+ * be added as MTOM, XOP, or SwA.\n+ *\n+ * @author Arjen Poutsma\n+ * @see <a href=\"http://www.w3.org/TR/2004/WD-soap12-mtom-20040608/\">SOAP Message Transmission Optimization\n+ *      Mechanism</a>\n+ * @see <a href=\"http://www.w3.org/TR/2005/REC-xop10-20050125/\">XML-binary Optimized Packaging</a>\n+ * @since 1.0.0\n+ */\n+public interface MimeMarshaller extends Marshaller {\n+\n+    /**\n+     * Marshals the object graph with the given root into the provided {@link Result}, writing binary data to a {@link\n+     * MimeContainer}.\n+     *\n+     * @param graph         the root of the object graph to marshal\n+     * @param result        the result to marshal to\n+     * @param mimeContainer the MIME container to write extracted binary content to\n+     * @throws XmlMappingException if the given object cannot be marshalled to the result\n+     * @throws IOException         if an I/O exception occurs\n+     */\n+    void marshal(Object graph, Result result, MimeContainer mimeContainer) throws XmlMappingException, IOException;\n+\n+\n+}"
        },
        {
            "sha": "e6a3edede910e5ea16d07066cbe095f213fcfa4d",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/mime/MimeUnmarshaller.java",
            "status": "added",
            "additions": 48,
            "deletions": 0,
            "changes": 48,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fmime%2FMimeUnmarshaller.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fmime%2FMimeUnmarshaller.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fmime%2FMimeUnmarshaller.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2007 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.mime;\n+\n+import java.io.IOException;\n+import javax.xml.transform.Source;\n+\n+import org.springframework.oxm.Unmarshaller;\n+import org.springframework.oxm.XmlMappingException;\n+\n+/**\n+ * Subinterface of {@link org.springframework.oxm.Marshaller} that can use MIME attachments to optimize storage of\n+ * binary data. Attachments can be added as MTOM, XOP, or SwA.\n+ *\n+ * @author Arjen Poutsma\n+ * @see <a href=\"http://www.w3.org/TR/2004/WD-soap12-mtom-20040608/\">SOAP Message Transmission Optimization\n+ *      Mechanism</a>\n+ * @see <a href=\"http://www.w3.org/TR/2005/REC-xop10-20050125/\">XML-binary Optimized Packaging</a>\n+ * @since 1.0.0\n+ */\n+public interface MimeUnmarshaller extends Unmarshaller {\n+\n+    /**\n+     * Unmarshals the given provided {@link Source} into an object graph, reading binary attachments from a {@link\n+     * MimeContainer}.\n+     *\n+     * @param source        the source to marshal from\n+     * @param mimeContainer the MIME container to read extracted binary content from\n+     * @return the object graph\n+     * @throws XmlMappingException if the given source cannot be mapped to an object\n+     * @throws IOException         if an I/O Exception occurs\n+     */\n+    Object unmarshal(Source source, MimeContainer mimeContainer) throws XmlMappingException, IOException;\n+}"
        },
        {
            "sha": "c5563d6e6a542e0a1e1ba25d699a33c4c3c39e5d",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/mime/package.html",
            "status": "added",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fmime%2Fpackage.html",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fmime%2Fpackage.html",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fmime%2Fpackage.html?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,5 @@\n+<html>\n+<body>\n+Contains (un)marshallers optimized to store binary data in MIME attachments.\n+</body>\n+</html>\n\\ No newline at end of file"
        },
        {
            "sha": "e7fdb73698ce97dfc1dbb9d33dc82e52d38208b1",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/package.html",
            "status": "added",
            "additions": 6,
            "deletions": 0,
            "changes": 6,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fpackage.html",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fpackage.html",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fpackage.html?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,6 @@\n+<html>\n+<body>\n+Root package for Spring's O/X Mapping integration classes. Contains generic Marshaller and Unmarshaller interfaces,\n+and XmlMappingExceptions related to O/X Mapping.\n+</body>\n+</html>"
        },
        {
            "sha": "26a2e787983cc527996f9ec5022ff005b5572a77",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/support/MarshallingMessageConverter.java",
            "status": "added",
            "additions": 306,
            "deletions": 0,
            "changes": 306,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fsupport%2FMarshallingMessageConverter.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fsupport%2FMarshallingMessageConverter.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fsupport%2FMarshallingMessageConverter.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,306 @@\n+/*\n+ * Copyright 2007 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.support;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import javax.jms.BytesMessage;\n+import javax.jms.JMSException;\n+import javax.jms.Message;\n+import javax.jms.Session;\n+import javax.jms.TextMessage;\n+import javax.xml.transform.Result;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.jms.support.converter.MessageConversionException;\n+import org.springframework.jms.support.converter.MessageConverter;\n+import org.springframework.oxm.Marshaller;\n+import org.springframework.oxm.MarshallingFailureException;\n+import org.springframework.oxm.Unmarshaller;\n+import org.springframework.oxm.UnmarshallingFailureException;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Spring JMS {@link MessageConverter} that uses a {@link Marshaller} and {@link Unmarshaller}. Marshals an object to a\n+ * {@link BytesMessage}, or to a {@link TextMessage} if the {@link #setMarshalTo marshalTo} is set to {@link\n+ * #MARSHAL_TO_TEXT_MESSAGE}. Unmarshals from a {@link TextMessage} or {@link BytesMessage} to an object.\n+ *\n+ * @author Arjen Poutsma\n+ * @see org.springframework.jms.core.JmsTemplate#convertAndSend\n+ * @see org.springframework.jms.core.JmsTemplate#receiveAndConvert\n+ * @since 1.5.1\n+ */\n+public class MarshallingMessageConverter implements MessageConverter, InitializingBean {\n+\n+    /** Constant that indicates that {@link #toMessage(Object, Session)} should marshal to a {@link BytesMessage}. */\n+    public static final int MARSHAL_TO_BYTES_MESSAGE = 1;\n+\n+    /** Constant that indicates that {@link #toMessage(Object, Session)} should marshal to a {@link TextMessage}. */\n+    public static final int MARSHAL_TO_TEXT_MESSAGE = 2;\n+\n+    private Marshaller marshaller;\n+\n+    private Unmarshaller unmarshaller;\n+\n+    private int marshalTo = MARSHAL_TO_BYTES_MESSAGE;\n+\n+    /**\n+     * Constructs a new <code>MarshallingMessageConverter</code> with no {@link Marshaller} set. The marshaller must be\n+     * set after construction by invoking {@link #setMarshaller(Marshaller)}.\n+     */\n+    public MarshallingMessageConverter() {\n+    }\n+\n+    /**\n+     * Constructs a new <code>MarshallingMessageConverter</code> with the given {@link Marshaller} set.  If the given\n+     * {@link Marshaller} also implements the {@link Unmarshaller} interface, it is used for both marshalling and\n+     * unmarshalling. Otherwise, an exception is thrown.\n+     * <p/>\n+     * Note that all {@link Marshaller} implementations in Spring-WS also implement the {@link Unmarshaller} interface,\n+     * so that you can safely use this constructor.\n+     *\n+     * @param marshaller object used as marshaller and unmarshaller\n+     * @throws IllegalArgumentException when <code>marshaller</code> does not implement the {@link Unmarshaller}\n+     *                                  interface\n+     */\n+    public MarshallingMessageConverter(Marshaller marshaller) {\n+        Assert.notNull(marshaller, \"marshaller must not be null\");\n+        if (!(marshaller instanceof Unmarshaller)) {\n+            throw new IllegalArgumentException(\"Marshaller [\" + marshaller + \"] does not implement the Unmarshaller \" +\n+                    \"interface. Please set an Unmarshaller explicitely by using the \" +\n+                    \"AbstractMarshallingPayloadEndpoint(Marshaller, Unmarshaller) constructor.\");\n+        }\n+        else {\n+            this.marshaller = marshaller;\n+            this.unmarshaller = (Unmarshaller) marshaller;\n+        }\n+    }\n+\n+    /**\n+     * Creates a new <code>MarshallingMessageConverter</code> with the given marshaller and unmarshaller.\n+     *\n+     * @param marshaller   the marshaller to use\n+     * @param unmarshaller the unmarshaller to use\n+     */\n+    public MarshallingMessageConverter(Marshaller marshaller, Unmarshaller unmarshaller) {\n+        Assert.notNull(marshaller, \"marshaller must not be null\");\n+        Assert.notNull(unmarshaller, \"unmarshaller must not be null\");\n+        this.marshaller = marshaller;\n+        this.unmarshaller = unmarshaller;\n+    }\n+\n+    /**\n+     * Indicates whether {@link #toMessage(Object,Session)} should marshal to a {@link BytesMessage} or a {@link\n+     * TextMessage}. The default is {@link #MARSHAL_TO_BYTES_MESSAGE}, i.e. this converter marshals to a {@link\n+     * BytesMessage}.\n+     *\n+     * @see #MARSHAL_TO_BYTES_MESSAGE\n+     * @see #MARSHAL_TO_TEXT_MESSAGE\n+     */\n+    public void setMarshalTo(int marshalTo) {\n+        this.marshalTo = marshalTo;\n+    }\n+\n+    /** Sets the {@link Marshaller} to be used by this message converter. */\n+    public void setMarshaller(Marshaller marshaller) {\n+        this.marshaller = marshaller;\n+    }\n+\n+    /** Sets the {@link Unmarshaller} to be used by this message converter. */\n+    public void setUnmarshaller(Unmarshaller unmarshaller) {\n+        this.unmarshaller = unmarshaller;\n+    }\n+\n+    public void afterPropertiesSet() throws Exception {\n+        Assert.notNull(marshaller, \"Property 'marshaller' is required\");\n+        Assert.notNull(unmarshaller, \"Property 'unmarshaller' is required\");\n+    }\n+\n+    /**\n+     * Marshals the given object to a {@link TextMessage} or {@link javax.jms.BytesMessage}. The desired message type\n+     * can be defined by setting the {@link #setMarshalTo(int) marshalTo} property.\n+     *\n+     * @see #marshalToTextMessage\n+     * @see #marshalToBytesMessage\n+     */\n+    public Message toMessage(Object object, Session session) throws JMSException, MessageConversionException {\n+        try {\n+            switch (marshalTo) {\n+                case MARSHAL_TO_TEXT_MESSAGE:\n+                    return marshalToTextMessage(object, session, marshaller);\n+                case MARSHAL_TO_BYTES_MESSAGE:\n+                    return marshalToBytesMessage(object, session, marshaller);\n+                default:\n+                    return marshalToMessage(object, session, marshaller);\n+            }\n+        }\n+        catch (MarshallingFailureException ex) {\n+            throw new MessageConversionException(\"Could not marshal [\" + object + \"]\", ex);\n+        }\n+        catch (IOException ex) {\n+            throw new MessageConversionException(\"Could not marshal  [\" + object + \"]\", ex);\n+        }\n+    }\n+\n+    /**\n+     * Unmarshals the given {@link Message} into an object.\n+     *\n+     * @see #unmarshalFromTextMessage\n+     * @see #unmarshalFromBytesMessage\n+     */\n+    public Object fromMessage(Message message) throws JMSException, MessageConversionException {\n+        try {\n+            if (message instanceof TextMessage) {\n+                TextMessage textMessage = (TextMessage) message;\n+                return unmarshalFromTextMessage(textMessage, unmarshaller);\n+            }\n+            else if (message instanceof BytesMessage) {\n+                BytesMessage bytesMessage = (BytesMessage) message;\n+                return unmarshalFromBytesMessage(bytesMessage, unmarshaller);\n+            }\n+            else {\n+                return unmarshalFromMessage(message, unmarshaller);\n+            }\n+        }\n+        catch (UnmarshallingFailureException ex) {\n+            throw new MessageConversionException(\"Could not unmarshal message [\" + message + \"]\", ex);\n+        }\n+        catch (IOException ex) {\n+            throw new MessageConversionException(\"Could not unmarshal message [\" + message + \"]\", ex);\n+        }\n+    }\n+\n+    /**\n+     * Marshals the given object to a {@link TextMessage}.\n+     *\n+     * @param object     the object to be marshalled\n+     * @param session    current JMS session\n+     * @param marshaller the marshaller to use\n+     * @return the resulting message\n+     * @throws JMSException if thrown by JMS methods\n+     * @throws IOException  in case of I/O errors\n+     * @see Session#createTextMessage\n+     * @see Marshaller#marshal(Object, Result)\n+     */\n+    protected TextMessage marshalToTextMessage(Object object, Session session, Marshaller marshaller)\n+            throws JMSException, IOException {\n+\t\tStringWriter writer = new StringWriter();\n+        Result result = new StreamResult(writer);\n+        marshaller.marshal(object, result);\n+        return session.createTextMessage(writer.toString());\n+    }\n+\n+    /**\n+     * Marshals the given object to a {@link BytesMessage}.\n+     *\n+     * @param object     the object to be marshalled\n+     * @param session    current JMS session\n+     * @param marshaller the marshaller to use\n+     * @return the resulting message\n+     * @throws JMSException if thrown by JMS methods\n+     * @throws IOException  in case of I/O errors\n+     * @see Session#createBytesMessage\n+     * @see Marshaller#marshal(Object, Result)\n+     */\n+    protected BytesMessage marshalToBytesMessage(Object object, Session session, Marshaller marshaller)\n+            throws JMSException, IOException {\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        StreamResult streamResult = new StreamResult(bos);\n+        marshaller.marshal(object, streamResult);\n+        BytesMessage message = session.createBytesMessage();\n+        message.writeBytes(bos.toByteArray());\n+        return message;\n+    }\n+\n+    /**\n+     * Template method that allows for custom message marshalling. Invoked when {@link #setMarshalTo(int)} is not {@link\n+     * #MARSHAL_TO_TEXT_MESSAGE} or {@link #MARSHAL_TO_BYTES_MESSAGE}.\n+     * <p/>\n+     * Default implemenetation throws a {@link MessageConversionException}.\n+     *\n+     * @param object     the object to marshal\n+     * @param session    the JMS session\n+     * @param marshaller the marshaller to use\n+     * @return the resulting message\n+     * @throws JMSException if thrown by JMS methods\n+     * @throws IOException  in case of I/O errors\n+     */\n+    protected Message marshalToMessage(Object object, Session session, Marshaller marshaller)\n+            throws JMSException, IOException {\n+        throw new MessageConversionException(\n+                \"Unknown 'marshalTo' value [\" + marshalTo + \"]. Cannot convert object to Message\");\n+    }\n+\n+    /**\n+     * Unmarshals the given {@link TextMessage} into an object.\n+     *\n+     * @param message      the message\n+     * @param unmarshaller the unmarshaller to use\n+     * @return the unmarshalled object\n+     * @throws JMSException if thrown by JMS methods\n+     * @throws IOException  in case of I/O errors\n+     * @see Unmarshaller#unmarshal(Source)\n+     */\n+    protected Object unmarshalFromTextMessage(TextMessage message, Unmarshaller unmarshaller)\n+            throws JMSException, IOException {\n+\t\tSource source = new StreamSource(new StringReader(message.getText()));\n+\t\treturn unmarshaller.unmarshal(source);\n+\t}\n+\n+    /**\n+     * Unmarshals the given {@link BytesMessage} into an object.\n+     *\n+     * @param message      the message\n+     * @param unmarshaller the unmarshaller to use\n+     * @return the unmarshalled object\n+     * @throws JMSException if thrown by JMS methods\n+     * @throws IOException  in case of I/O errors\n+     * @see Unmarshaller#unmarshal(Source)\n+     */\n+    protected Object unmarshalFromBytesMessage(BytesMessage message, Unmarshaller unmarshaller)\n+            throws JMSException, IOException {\n+        byte[] bytes = new byte[(int) message.getBodyLength()];\n+        message.readBytes(bytes);\n+        ByteArrayInputStream bis = new ByteArrayInputStream(bytes);\n+        StreamSource source = new StreamSource(bis);\n+        return unmarshaller.unmarshal(source);\n+    }\n+\n+    /**\n+     * Template method that allows for custom message unmarshalling. Invoked when {@link #fromMessage(Message)} is\n+     * invoked with a message that is not a {@link TextMessage} or {@link BytesMessage}.\n+     * <p/>\n+     * Default implemenetation throws a {@link MessageConversionException}.\n+     *\n+     * @param message      the message\n+     * @param unmarshaller the unmarshaller to use\n+     * @return the unmarshalled object\n+     * @throws JMSException if thrown by JMS methods\n+     * @throws IOException  in case of I/O errors\n+     */\n+    protected Object unmarshalFromMessage(Message message, Unmarshaller unmarshaller) throws JMSException, IOException {\n+        throw new MessageConversionException(\n+                \"MarshallingMessageConverter only supports TextMessages and BytesMessages\");\n+    }\n+}\n+"
        },
        {
            "sha": "b0d4c2bd1184cdcbab0ffe190059a2126398dafa",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/support/MarshallingSource.java",
            "status": "added",
            "additions": 104,
            "deletions": 0,
            "changes": 104,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fsupport%2FMarshallingSource.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fsupport%2FMarshallingSource.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fsupport%2FMarshallingSource.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2007 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.support;\n+\n+import java.io.IOException;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.sax.SAXResult;\n+import javax.xml.transform.sax.SAXSource;\n+\n+import org.springframework.oxm.Marshaller;\n+import org.springframework.util.Assert;\n+import org.springframework.xml.sax.AbstractXmlReader;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.SAXParseException;\n+\n+/**\n+ * {@link Source} implementation that uses a {@link Marshaller}.Can be constructed with a <code>Marshaller</code> and an\n+ * object to be marshalled.\n+ * <p/>\n+ * Even though <code>StaxSource</code> extends from <code>SAXSource</code>, calling the methods of\n+ * <code>SAXSource</code> is <strong>not supported</strong>. In general, the only supported operation on this class is\n+ * to use the <code>XMLReader</code> obtained via {@link #getXMLReader()} to parse the input source obtained via {@link\n+ * #getInputSource()}. Calling {@link #setXMLReader(org.xml.sax.XMLReader)} or {@link\n+ * #setInputSource(org.xml.sax.InputSource)} will result in <code>UnsupportedOperationException</code>s.\n+ *\n+ * @author Arjen Poutsma\n+ * @see javax.xml.transform.Transformer\n+ * @since 1.0.0\n+ */\n+public class MarshallingSource extends SAXSource {\n+\n+    private final Marshaller marshaller;\n+\n+    private final Object content;\n+\n+    /**\n+     * Creates a new <code>MarshallingSource</code> with the given marshaller and content.\n+     *\n+     * @param marshaller the marshaller to use\n+     * @param content    the object to be marshalled\n+     */\n+    public MarshallingSource(Marshaller marshaller, Object content) {\n+        Assert.notNull(marshaller, \"'marshaller' must not be null\");\n+        Assert.notNull(content, \"'content' must not be null\");\n+        this.marshaller = marshaller;\n+        this.content = content;\n+        setXMLReader(new MarshallingXmlReader());\n+        setInputSource(new InputSource());\n+    }\n+\n+    /** Returns the <code>Marshaller</code> used by this <code>MarshallingSource</code>. */\n+    public Marshaller getMarshaller() {\n+        return marshaller;\n+    }\n+\n+    /** Returns the object to be marshalled. */\n+    public Object getContent() {\n+        return content;\n+    }\n+\n+    private class MarshallingXmlReader extends AbstractXmlReader {\n+\n+        public void parse(InputSource input) throws IOException, SAXException {\n+            parse();\n+        }\n+\n+        public void parse(String systemId) throws IOException, SAXException {\n+            parse();\n+        }\n+\n+        private void parse() throws SAXException {\n+            SAXResult result = new SAXResult(getContentHandler());\n+            result.setLexicalHandler(getLexicalHandler());\n+            try {\n+                marshaller.marshal(content, result);\n+            }\n+            catch (IOException ex) {\n+                SAXParseException saxException = new SAXParseException(ex.getMessage(), null, null, -1, -1, ex);\n+                if (getErrorHandler() != null) {\n+                    getErrorHandler().fatalError(saxException);\n+                }\n+                else {\n+                    throw saxException;\n+                }\n+            }\n+        }\n+\n+    }\n+}"
        },
        {
            "sha": "9b4ef993619aba2d99cc77fb34481d0b37a33113",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/support/MarshallingView.java",
            "status": "added",
            "additions": 134,
            "deletions": 0,
            "changes": 134,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fsupport%2FMarshallingView.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fsupport%2FMarshallingView.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fsupport%2FMarshallingView.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2007 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.support;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.util.Map;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.xml.transform.stream.StreamResult;\n+\n+import org.springframework.beans.BeansException;\n+import org.springframework.oxm.Marshaller;\n+import org.springframework.util.Assert;\n+import org.springframework.web.servlet.View;\n+import org.springframework.web.servlet.view.AbstractUrlBasedView;\n+\n+/**\n+ * Spring-MVC {@link View} that allows for response context to be rendered as the result of marshalling by a {@link\n+ * Marshaller}.\n+ * <p/>\n+ * The Object to be marshalled is supplied as a parameter in the model and then {@linkplain #locateToBeMarshalled(Map)\n+ * detected} during response rendering. Users can either specify a specific entry in the model via the {@link\n+ * #setModelKey(String) sourceKey} property or have Spring locate the Source object.\n+ *\n+ * @author Arjen Poutsma\n+ * @since 1.5.1\n+ */\n+public class MarshallingView extends AbstractUrlBasedView {\n+\n+    /** Default content type. Overridable as bean property. */\n+    public static final String DEFAULT_CONTENT_TYPE = \"application/xml\";\n+\n+    private Marshaller marshaller;\n+\n+    private String modelKey;\n+\n+    /**\n+     * Constructs a new <code>MarshallingView</code> with no {@link Marshaller} set. The marshaller must be set after\n+     * construction by invoking {@link #setMarshaller(Marshaller)}.\n+     */\n+    public MarshallingView() {\n+        setContentType(DEFAULT_CONTENT_TYPE);\n+    }\n+\n+    /** Constructs a new <code>MarshallingView</code> with the given {@link Marshaller} set. */\n+    public MarshallingView(Marshaller marshaller) {\n+        Assert.notNull(marshaller, \"'marshaller' must not be null\");\n+        setContentType(DEFAULT_CONTENT_TYPE);\n+        this.marshaller = marshaller;\n+    }\n+\n+    /** Sets the {@link Marshaller} to be used by this view. */\n+    public void setMarshaller(Marshaller marshaller) {\n+        Assert.notNull(marshaller, \"'marshaller' must not be null\");\n+        this.marshaller = marshaller;\n+    }\n+\n+    /**\n+     * Set the name of the model key that represents the object to be marshalled. If not specified, the model map will\n+     * be searched for a supported value type.\n+     *\n+     * @see Marshaller#supports(Class)\n+     */\n+    public void setModelKey(String modelKey) {\n+        this.modelKey = modelKey;\n+    }\n+\n+    @Override\n+\tprotected void initApplicationContext() throws BeansException {\n+        Assert.notNull(marshaller, \"Property 'marshaller' is required\");\n+    }\n+\n+    @Override\n+\tprotected void renderMergedOutputModel(Map model, HttpServletRequest request, HttpServletResponse response)\n+            throws Exception {\n+        Object toBeMarshalled = locateToBeMarshalled(model);\n+        if (toBeMarshalled == null) {\n+            throw new ServletException(\"Unable to locate object to be marshalled in model: \" + model);\n+        }\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream(2048);\n+        marshaller.marshal(toBeMarshalled, new StreamResult(bos));\n+\n+        response.setContentType(getContentType());\n+        response.setContentLength(bos.size());\n+\n+        ServletOutputStream out = response.getOutputStream();\n+        bos.writeTo(out);\n+        out.flush();\n+    }\n+\n+    /**\n+     * Locates the object to be marshalled. The default implementation first attempts to look under the configured\n+     * {@linkplain #setModelKey(String) model key}, if any, before attempting to locate an object of {@linkplain\n+     * Marshaller#supports(Class) supported type}.\n+     *\n+     * @param model the model Map\n+     * @return the Object to be marshalled (or <code>null</code> if none found)\n+     * @throws ServletException if the model object specified by the {@linkplain #setModelKey(String) model key} is not\n+     *                          supported by the marshaller\n+     * @see #setModelKey(String)\n+     */\n+    protected Object locateToBeMarshalled(Map model) throws ServletException {\n+        if (this.modelKey != null) {\n+            Object o = model.get(this.modelKey);\n+            if (!this.marshaller.supports(o.getClass())) {\n+                throw new ServletException(\"Model object [\" + o + \"] retrieved via key [\" + modelKey +\n+                        \"] is not supported by the Marshaller\");\n+            }\n+            return o;\n+        }\n+\t\tfor (Object o : model.values()) {\n+\t\t\tif (this.marshaller.supports(o.getClass())) {\n+\t\t\t\treturn o;\n+\t\t\t}\n+\t\t}\n+        return null;\n+    }\n+}"
        },
        {
            "sha": "2ac6375fe60b66193afbb0f1c119a1550808d723",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/support/package.html",
            "status": "added",
            "additions": 7,
            "deletions": 0,
            "changes": 7,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fsupport%2Fpackage.html",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fsupport%2Fpackage.html",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fsupport%2Fpackage.html?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,7 @@\n+<html>\n+<body>\n+Provides generic support classes for using Spring's O/X Mapping integration within various scenario's. Includes the\n+MarshallingSource for compatibility with TrAX, MarshallingView for use withing Spring Web MVC, and the\n+MarshallingMessageConverter for use within Spring's JMS support.\n+</body>\n+</html>\n\\ No newline at end of file"
        },
        {
            "sha": "c915ccbc947282fe8a2e07e98c29856d71946208",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/xmlbeans/XmlBeansMarshaller.java",
            "status": "added",
            "additions": 257,
            "deletions": 0,
            "changes": 257,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansMarshaller.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansMarshaller.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansMarshaller.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,257 @@\n+package org.springframework.oxm.xmlbeans;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import javax.xml.stream.XMLEventReader;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLStreamReader;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+import org.apache.xmlbeans.XmlError;\n+import org.apache.xmlbeans.XmlException;\n+import org.apache.xmlbeans.XmlObject;\n+import org.apache.xmlbeans.XmlOptions;\n+import org.apache.xmlbeans.XmlSaxHandler;\n+import org.apache.xmlbeans.XmlValidationError;\n+import org.springframework.oxm.AbstractMarshaller;\n+import org.springframework.oxm.Marshaller;\n+import org.springframework.oxm.XmlMappingException;\n+import org.springframework.xml.stream.StaxEventContentHandler;\n+import org.springframework.xml.stream.StaxEventXmlReader;\n+import org.springframework.xml.stream.StaxStreamContentHandler;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.ContentHandler;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.SAXNotRecognizedException;\n+import org.xml.sax.SAXNotSupportedException;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.ext.LexicalHandler;\n+\n+/**\n+ * Implementation of the {@link Marshaller} interface for XMLBeans. Further options can be set by setting the\n+ * <code>xmlOptions</code> property. The {@link XmlOptionsFactoryBean} is provided to easily wire up {@link XmlOptions}\n+ * instances.\n+ * <p/>\n+ * Unmarshalled objects can be validated by setting the <code>validating</code> property, or by calling the {@link\n+ * #validate(XmlObject)} method directly. Invalid objects will result in an {@link XmlBeansValidationFailureException}.\n+ * <p/>\n+ * <strong>Note</strong> that due to the nature of XMLBeans, this marshaller requires all passed objects to be of type\n+ * {@link XmlObject}.\n+ *\n+ * @author Arjen Poutsma\n+ * @see #setXmlOptions(org.apache.xmlbeans.XmlOptions)\n+ * @see XmlOptionsFactoryBean\n+ * @see #setValidating(boolean)\n+ * @since 1.0.0\n+ */\n+public class XmlBeansMarshaller extends AbstractMarshaller {\n+\n+    private XmlOptions xmlOptions;\n+\n+    private boolean validating = false;\n+\n+    /** Returns the <code>XmlOptions</code>. */\n+    public XmlOptions getXmlOptions() {\n+        return xmlOptions;\n+    }\n+\n+    /**\n+     * Sets the <code>XmlOptions</code>.\n+     *\n+     * @see XmlOptionsFactoryBean\n+     */\n+    public void setXmlOptions(XmlOptions xmlOptions) {\n+        this.xmlOptions = xmlOptions;\n+    }\n+\n+    /** Returns whether this marshaller should validate in- and outgoing documents. */\n+    public boolean isValidating() {\n+        return validating;\n+    }\n+\n+    /** Sets whether this marshaller should validate in- and outgoing documents.  Default is <code>false</code>. */\n+    public void setValidating(boolean validating) {\n+        this.validating = validating;\n+    }\n+\n+    /** Returns true if the given class is an implementation of {@link XmlObject}. */\n+    public boolean supports(Class clazz) {\n+        return XmlObject.class.isAssignableFrom(clazz);\n+    }\n+\n+    protected final void marshalDomNode(Object graph, Node node) throws XmlMappingException {\n+        Document document = node.getNodeType() == Node.DOCUMENT_NODE ? (Document) node : node.getOwnerDocument();\n+        Node xmlBeansNode = ((XmlObject) graph).newDomNode(getXmlOptions());\n+        NodeList xmlBeansChildNodes = xmlBeansNode.getChildNodes();\n+        for (int i = 0; i < xmlBeansChildNodes.getLength(); i++) {\n+            Node xmlBeansChildNode = xmlBeansChildNodes.item(i);\n+            Node importedNode = document.importNode(xmlBeansChildNode, true);\n+            node.appendChild(importedNode);\n+        }\n+    }\n+\n+    protected final void marshalOutputStream(Object graph, OutputStream outputStream)\n+            throws XmlMappingException, IOException {\n+        ((XmlObject) graph).save(outputStream, getXmlOptions());\n+    }\n+\n+    protected final void marshalSaxHandlers(Object graph, ContentHandler contentHandler, LexicalHandler lexicalHandler)\n+            throws XmlMappingException {\n+        try {\n+            ((XmlObject) graph).save(contentHandler, lexicalHandler, getXmlOptions());\n+        }\n+        catch (SAXException ex) {\n+            throw convertXmlBeansException(ex, true);\n+        }\n+    }\n+\n+    protected final void marshalWriter(Object graph, Writer writer) throws XmlMappingException, IOException {\n+        ((XmlObject) graph).save(writer, getXmlOptions());\n+    }\n+\n+    protected final void marshalXmlEventWriter(Object graph, XMLEventWriter eventWriter) {\n+        ContentHandler contentHandler = new StaxEventContentHandler(eventWriter);\n+        marshalSaxHandlers(graph, contentHandler, null);\n+    }\n+\n+    protected final void marshalXmlStreamWriter(Object graph, XMLStreamWriter streamWriter) throws XmlMappingException {\n+        ContentHandler contentHandler = new StaxStreamContentHandler(streamWriter);\n+        marshalSaxHandlers(graph, contentHandler, null);\n+    }\n+\n+    protected final Object unmarshalDomNode(Node node) throws XmlMappingException {\n+        try {\n+            XmlObject object = XmlObject.Factory.parse(node, getXmlOptions());\n+            validate(object);\n+            return object;\n+        }\n+        catch (XmlException ex) {\n+            throw convertXmlBeansException(ex, false);\n+        }\n+    }\n+\n+    protected final Object unmarshalInputStream(InputStream inputStream) throws XmlMappingException, IOException {\n+        try {\n+            XmlObject object = XmlObject.Factory.parse(inputStream, getXmlOptions());\n+            validate(object);\n+            return object;\n+        }\n+        catch (XmlException ex) {\n+            throw convertXmlBeansException(ex, false);\n+        }\n+    }\n+\n+    protected final Object unmarshalReader(Reader reader) throws XmlMappingException, IOException {\n+        try {\n+            XmlObject object = XmlObject.Factory.parse(reader, getXmlOptions());\n+            validate(object);\n+            return object;\n+        }\n+        catch (XmlException ex) {\n+            throw convertXmlBeansException(ex, false);\n+        }\n+    }\n+\n+    protected final Object unmarshalSaxReader(XMLReader xmlReader, InputSource inputSource)\n+            throws XmlMappingException, IOException {\n+        XmlSaxHandler saxHandler = XmlObject.Factory.newXmlSaxHandler(getXmlOptions());\n+        xmlReader.setContentHandler(saxHandler.getContentHandler());\n+        try {\n+            xmlReader.setProperty(\"http://xml.org/sax/properties/lexical-handler\", saxHandler.getLexicalHandler());\n+        }\n+        catch (SAXNotRecognizedException e) {\n+            // ignore\n+        }\n+        catch (SAXNotSupportedException e) {\n+            // ignore\n+        }\n+        try {\n+            xmlReader.parse(inputSource);\n+            XmlObject object = saxHandler.getObject();\n+            validate(object);\n+            return object;\n+        }\n+        catch (SAXException ex) {\n+            throw convertXmlBeansException(ex, false);\n+        }\n+        catch (XmlException ex) {\n+            throw convertXmlBeansException(ex, false);\n+        }\n+    }\n+\n+    protected final Object unmarshalXmlEventReader(XMLEventReader eventReader) throws XmlMappingException {\n+        XMLReader reader = new StaxEventXmlReader(eventReader);\n+        try {\n+            return unmarshalSaxReader(reader, new InputSource());\n+        }\n+        catch (IOException ex) {\n+            throw convertXmlBeansException(ex, false);\n+        }\n+    }\n+\n+    protected final Object unmarshalXmlStreamReader(XMLStreamReader streamReader) throws XmlMappingException {\n+        try {\n+            XmlObject object = XmlObject.Factory.parse(streamReader, getXmlOptions());\n+            validate(object);\n+            return object;\n+        }\n+        catch (XmlException ex) {\n+            throw convertXmlBeansException(ex, false);\n+        }\n+    }\n+\n+    /**\n+     * Converts the given XMLBeans exception to an appropriate exception from the <code>org.springframework.oxm</code>\n+     * hierarchy.\n+     * <p/>\n+     * The default implementation delegates to <code>XmlBeansUtils</code>. Can be overridden in subclasses.\n+     * <p/>\n+     * A boolean flag is used to indicate whether this exception occurs during marshalling or unmarshalling, since\n+     * XMLBeans itself does not make this distinction in its exception hierarchy.\n+     *\n+     * @param ex          XMLBeans Exception that occured\n+     * @param marshalling indicates whether the exception occurs during marshalling (<code>true</code>), or\n+     *                    unmarshalling (<code>false</code>)\n+     * @return the corresponding <code>XmlMappingException</code>\n+     * @see XmlBeansUtils#convertXmlBeansException(Exception,boolean)\n+     */\n+    public XmlMappingException convertXmlBeansException(Exception ex, boolean marshalling) {\n+        return XmlBeansUtils.convertXmlBeansException(ex, marshalling);\n+    }\n+\n+    /**\n+     * Validates the given <code>XmlObject</code>.\n+     *\n+     * @param object the xml object to validate\n+     * @throws XmlBeansValidationFailureException\n+     *          if the given object is not valid\n+     */\n+    public void validate(XmlObject object) throws XmlBeansValidationFailureException {\n+        if (isValidating() && object != null) {\n+            // create a temporary xmlOptions just for validation\n+            XmlOptions validateOptions = getXmlOptions() != null ? getXmlOptions() : new XmlOptions();\n+            List errorsList = new ArrayList();\n+            validateOptions.setErrorListener(errorsList);\n+            if (!object.validate(validateOptions)) {\n+                StringBuffer buffer = new StringBuffer(\"Could not validate XmlObject :\");\n+                for (Iterator iterator = errorsList.iterator(); iterator.hasNext();) {\n+                    XmlError xmlError = (XmlError) iterator.next();\n+                    if (xmlError instanceof XmlValidationError) {\n+                        buffer.append(xmlError.toString());\n+                    }\n+                }\n+                XmlException ex = new XmlException(buffer.toString(), null, errorsList);\n+                throw new XmlBeansValidationFailureException(ex);\n+            }\n+        }\n+    }\n+}"
        },
        {
            "sha": "1f205d75bd7aab6c93452e49e2f17aa4478f015d",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/xmlbeans/XmlBeansMarshallingFailureException.java",
            "status": "added",
            "additions": 39,
            "deletions": 0,
            "changes": 39,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansMarshallingFailureException.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansMarshallingFailureException.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansMarshallingFailureException.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm.xmlbeans;\n+\n+import org.apache.xmlbeans.XmlException;\n+import org.springframework.oxm.MarshallingFailureException;\n+import org.xml.sax.SAXException;\n+\n+/**\n+ * XMLBeans-specific subclass of <code>MarshallingFailureException</code>.\n+ *\n+ * @author Arjen Poutsma\n+ * @see XmlBeansUtils#convertXmlBeansException(Exception,boolean)\n+ * @since 1.0.0\n+ */\n+public class XmlBeansMarshallingFailureException extends MarshallingFailureException {\n+\n+    public XmlBeansMarshallingFailureException(XmlException ex) {\n+        super(\"XMLBeans marshalling exception: \" + ex.getMessage(), ex);\n+    }\n+\n+    public XmlBeansMarshallingFailureException(SAXException ex) {\n+        super(\"XMLBeans marshalling exception: \" + ex.getMessage(), ex);\n+    }\n+\n+}"
        },
        {
            "sha": "7288e74592258cbe64ca4454149145218010a3fa",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/xmlbeans/XmlBeansSystemException.java",
            "status": "added",
            "additions": 33,
            "deletions": 0,
            "changes": 33,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansSystemException.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansSystemException.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansSystemException.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm.xmlbeans;\n+\n+import org.springframework.oxm.UncategorizedXmlMappingException;\n+\n+/**\n+ * XMLBeans-specific subclass of <code>UncategorizedXmlMappingException</code>, for XMLBeans exceptions that cannot be\n+ * distinguished further.\n+ *\n+ * @author Arjen Poutsma\n+ * @since 1.0.0\n+ */\n+public class XmlBeansSystemException extends UncategorizedXmlMappingException {\n+\n+    public XmlBeansSystemException(Exception e) {\n+        super(e.getMessage(), e);\n+    }\n+\n+}"
        },
        {
            "sha": "6393462f613daebb1fb42e3d08e571fc04c318f3",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/xmlbeans/XmlBeansUnmarshallingFailureException.java",
            "status": "added",
            "additions": 39,
            "deletions": 0,
            "changes": 39,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansUnmarshallingFailureException.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansUnmarshallingFailureException.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansUnmarshallingFailureException.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm.xmlbeans;\n+\n+import org.apache.xmlbeans.XmlException;\n+import org.springframework.oxm.UnmarshallingFailureException;\n+import org.xml.sax.SAXException;\n+\n+/**\n+ * XMLBeans-specific subclass of <code>UnmarshallingFailureException</code>.\n+ *\n+ * @author Arjen Poutsma\n+ * @see XmlBeansUtils#convertXmlBeansException(Exception,boolean)\n+ * @since 1.0.0\n+ */\n+public class XmlBeansUnmarshallingFailureException extends UnmarshallingFailureException {\n+\n+    public XmlBeansUnmarshallingFailureException(XmlException ex) {\n+        super(\"XMLBeans unmarshalling exception: \" + ex.getMessage(), ex);\n+    }\n+\n+    public XmlBeansUnmarshallingFailureException(SAXException ex) {\n+        super(\"XMLBeans unmarshalling exception: \" + ex.getMessage(), ex);\n+    }\n+\n+}"
        },
        {
            "sha": "3f78442ad0acfdd733b29954efc5ffd8726a4331",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/xmlbeans/XmlBeansUtils.java",
            "status": "added",
            "additions": 69,
            "deletions": 0,
            "changes": 69,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansUtils.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansUtils.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansUtils.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm.xmlbeans;\n+\n+import org.apache.xmlbeans.XMLStreamValidationException;\n+import org.apache.xmlbeans.XmlException;\n+import org.springframework.oxm.XmlMappingException;\n+import org.xml.sax.SAXException;\n+\n+/**\n+ * Generic utility methods for working with XMLBeans. Mainly for internal use within the framework.\n+ *\n+ * @author Arjen Poutsma\n+ * @since 1.0.0\n+ */\n+public class XmlBeansUtils {\n+\n+    /**\n+     * Converts the given XMLBeans exception to an appropriate exception from the <code>org.springframework.oxm</code>\n+     * hierarchy.\n+     * <p/>\n+     * A boolean flag is used to indicate whether this exception occurs during marshalling or unmarshalling, since\n+     * XMLBeans itself does not make this distinction in its exception hierarchy.\n+     *\n+     * @param ex          XMLBeans Exception that occured\n+     * @param marshalling indicates whether the exception occurs during marshalling (<code>true</code>), or\n+     *                    unmarshalling (<code>false</code>)\n+     * @return the corresponding <code>XmlMappingException</code>\n+     */\n+    public static XmlMappingException convertXmlBeansException(Exception ex, boolean marshalling) {\n+        if (ex instanceof XMLStreamValidationException) {\n+            return new XmlBeansValidationFailureException((XMLStreamValidationException) ex);\n+        }\n+        else if (ex instanceof XmlException) {\n+            XmlException xmlException = (XmlException) ex;\n+            if (marshalling) {\n+                return new XmlBeansMarshallingFailureException(xmlException);\n+            }\n+            else {\n+                return new XmlBeansUnmarshallingFailureException(xmlException);\n+            }\n+        }\n+        else if (ex instanceof SAXException) {\n+            SAXException saxException = (SAXException) ex;\n+            if (marshalling) {\n+                return new XmlBeansMarshallingFailureException(saxException);\n+            }\n+            else {\n+                return new XmlBeansUnmarshallingFailureException(saxException);\n+            }\n+        }\n+        // fallback\n+        return new XmlBeansSystemException(ex);\n+    }\n+\n+}"
        },
        {
            "sha": "346b7bc8984dcb2b90d1caa92305783c9a9e5506",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/xmlbeans/XmlBeansValidationFailureException.java",
            "status": "added",
            "additions": 38,
            "deletions": 0,
            "changes": 38,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansValidationFailureException.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansValidationFailureException.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansValidationFailureException.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm.xmlbeans;\n+\n+import org.apache.xmlbeans.XMLStreamValidationException;\n+import org.apache.xmlbeans.XmlException;\n+import org.springframework.oxm.ValidationFailureException;\n+\n+/**\n+ * XMLBeans-specific subclass of <code>ValidationFailureException</code>.\n+ *\n+ * @author Arjen Poutsma\n+ * @see org.springframework.oxm.xmlbeans.XmlBeansUtils#convertXmlBeansException\n+ * @since 1.0.0\n+ */\n+public class XmlBeansValidationFailureException extends ValidationFailureException {\n+\n+    public XmlBeansValidationFailureException(XMLStreamValidationException ex) {\n+        super(\"XmlBeans validation exception: \" + ex.getMessage(), ex);\n+    }\n+\n+    public XmlBeansValidationFailureException(XmlException ex) {\n+        super(\"XmlBeans validation exception: \" + ex.getMessage(), ex);\n+    }\n+}"
        },
        {
            "sha": "9322303146c0d8878f4d557196a3869d20931983",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/xmlbeans/XmlOptionsFactoryBean.java",
            "status": "added",
            "additions": 79,
            "deletions": 0,
            "changes": 79,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlOptionsFactoryBean.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlOptionsFactoryBean.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlOptionsFactoryBean.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2006 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.xmlbeans;\n+\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import org.apache.xmlbeans.XmlOptions;\n+import org.springframework.beans.factory.FactoryBean;\n+import org.springframework.beans.factory.InitializingBean;\n+\n+/**\n+ * Factory bean that configures an XMLBeans <code>XmlOptions</code> object and provides it as a bean reference.\n+ * <p/>\n+ * Typical usage will be to set XMLBeans options on this bean, and refer to it in the <code>XmlBeansMarshaller</code>.\n+ *\n+ * @author Arjen Poutsma\n+ * @see XmlOptions\n+ * @see #setOptions(java.util.Map)\n+ * @see XmlBeansMarshaller#setXmlOptions(org.apache.xmlbeans.XmlOptions)\n+ * @since 1.0.0\n+ */\n+public class XmlOptionsFactoryBean implements FactoryBean, InitializingBean {\n+\n+    private XmlOptions xmlOptions;\n+\n+    private Map options;\n+\n+    /** Returns the singleton <code>XmlOptions</code>. */\n+    public Object getObject() throws Exception {\n+        return xmlOptions;\n+    }\n+\n+    /** Returns the class of <code>XmlOptions</code>. */\n+    public Class getObjectType() {\n+        return XmlOptions.class;\n+    }\n+\n+    /** Returns <code>true</code>. */\n+    public boolean isSingleton() {\n+        return true;\n+    }\n+\n+    /**\n+     * Sets options on the underlying <code>XmlOptions</code> object. The keys of the supplied map should be one of the\n+     * string constants defined in <code>XmlOptions</code>, the values vary per option.\n+     *\n+     * @see XmlOptions#put(Object,Object)\n+     * @see XmlOptions#SAVE_PRETTY_PRINT\n+     * @see XmlOptions#LOAD_STRIP_COMMENTS\n+     */\n+    public void setOptions(Map options) {\n+        this.options = options;\n+    }\n+\n+    public void afterPropertiesSet() throws Exception {\n+        xmlOptions = new XmlOptions();\n+        if (options != null) {\n+            for (Iterator iterator = options.keySet().iterator(); iterator.hasNext();) {\n+                Object option = iterator.next();\n+                xmlOptions.put(option, options.get(option));\n+            }\n+        }\n+    }\n+}"
        },
        {
            "sha": "799fd625853e463f1816e7f719e0bd46bb9fcb91",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/xmlbeans/package.html",
            "status": "added",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2Fpackage.html",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2Fpackage.html",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2Fpackage.html?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,5 @@\n+<html>\n+<body>\n+Package providing integration of <a href=\"http://xmlbeans.apache.org/\">XMLBeans</a> with Springs O/X Mapping support.\n+</body>\n+</html>"
        },
        {
            "sha": "6fa2452bd57b0c66f55188ecc031422def470668",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/AnnotationXStreamMarshaller.java",
            "status": "added",
            "additions": 53,
            "deletions": 0,
            "changes": 53,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FAnnotationXStreamMarshaller.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FAnnotationXStreamMarshaller.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FAnnotationXStreamMarshaller.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2007 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.xstream;\n+\n+import com.thoughtworks.xstream.XStream;\n+import com.thoughtworks.xstream.annotations.Annotations;\n+import com.thoughtworks.xstream.annotations.XStreamAlias;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Subclass of the {@link XStreamMarshaller} that supports JDK 1.5+ annotation metadata for aliases.\n+ *\n+ * @author Arjen Poutsma\n+ * @see XStreamAlias\n+ * @since 1.0.2\n+ */\n+public class AnnotationXStreamMarshaller extends XStreamMarshaller {\n+\n+    /**\n+     * Sets the classes, for which mappings will be read from class-level JDK 1.5+ annotation metadata.\n+     *\n+     * @see Annotations#configureAliases(XStream, Class[])\n+     */\n+    public void setAnnotatedClass(Class<?> annotatedClass) {\n+        Assert.notNull(annotatedClass, \"'annotatedClass' must not be null\");\n+        Annotations.configureAliases(getXStream(), annotatedClass);\n+    }\n+\n+    /**\n+     * Sets annotated classes, for which aliases will be read from class-level JDK 1.5+ annotation metadata.\n+     *\n+     * @see Annotations#configureAliases(XStream, Class[])\n+     */\n+    public void setAnnotatedClasses(Class<?>[] annotatedClasses) {\n+        Assert.notEmpty(annotatedClasses, \"'annotatedClasses' must not be empty\");\n+        Annotations.configureAliases(getXStream(), annotatedClasses);\n+    }\n+\n+}"
        },
        {
            "sha": "839fa2c7cd7201f50f4407f345905c530d20991f",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java",
            "status": "added",
            "additions": 461,
            "deletions": 0,
            "changes": 461,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamMarshaller.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamMarshaller.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamMarshaller.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,461 @@\n+/*\n+ * Copyright 2006 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.xstream;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Iterator;\n+import java.util.Map;\n+import javax.xml.stream.XMLEventReader;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamReader;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+import com.thoughtworks.xstream.XStream;\n+import com.thoughtworks.xstream.converters.Converter;\n+import com.thoughtworks.xstream.converters.ConverterMatcher;\n+import com.thoughtworks.xstream.converters.SingleValueConverter;\n+import com.thoughtworks.xstream.io.HierarchicalStreamDriver;\n+import com.thoughtworks.xstream.io.HierarchicalStreamReader;\n+import com.thoughtworks.xstream.io.HierarchicalStreamWriter;\n+import com.thoughtworks.xstream.io.xml.CompactWriter;\n+import com.thoughtworks.xstream.io.xml.DomReader;\n+import com.thoughtworks.xstream.io.xml.DomWriter;\n+import com.thoughtworks.xstream.io.xml.QNameMap;\n+import com.thoughtworks.xstream.io.xml.SaxWriter;\n+import com.thoughtworks.xstream.io.xml.StaxReader;\n+import com.thoughtworks.xstream.io.xml.StaxWriter;\n+import com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer;\n+import com.thoughtworks.xstream.io.xml.XppReader;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.xml.sax.ContentHandler;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.ext.LexicalHandler;\n+\n+import org.springframework.beans.propertyeditors.ClassEditor;\n+import org.springframework.oxm.AbstractMarshaller;\n+import org.springframework.oxm.XmlMappingException;\n+import org.springframework.util.ObjectUtils;\n+import org.springframework.util.StringUtils;\n+import org.springframework.xml.stream.StaxEventContentHandler;\n+import org.springframework.xml.stream.XmlEventStreamReader;\n+\n+/**\n+ * Implementation of the <code>Marshaller</code> interface for XStream. By default, XStream does not require any further\n+ * configuration, though class aliases can be used to have more control over the behavior of XStream.\n+ * <p/>\n+ * Due to XStream's API, it is required to set the encoding used for writing to outputstreams. It defaults to\n+ * <code>UTF-8</code>.\n+ * <p/>\n+ * <b>Note</b> that XStream is an XML serialization library, not a data binding library. Therefore, it has limited\n+ * namespace support. As such, it is rather unsuitable for usage within Web services.\n+ *\n+ * @author Peter Meijer\n+ * @author Arjen Poutsma\n+ * @see #setEncoding(String)\n+ * @see #DEFAULT_ENCODING\n+ * @see #setAliases(Map)\n+ * @see #setConverters(ConverterMatcher[])\n+ * @since 1.0.0\n+ */\n+public class XStreamMarshaller extends AbstractMarshaller {\n+\n+    /** The default encoding used for stream access. */\n+    public static final String DEFAULT_ENCODING = \"UTF-8\";\n+\n+    private XStream xstream = new XStream();\n+\n+    private String encoding;\n+\n+    private Class[] supportedClasses;\n+\n+    /** Specialized driver to be used with stream readers and writers */\n+    private HierarchicalStreamDriver streamDriver;\n+\n+    /**\n+     * Returns the encoding to be used for stream access. If this property is not set, the default encoding is used.\n+     *\n+     * @see #DEFAULT_ENCODING\n+     */\n+    public String getEncoding() {\n+        return encoding != null ? encoding : DEFAULT_ENCODING;\n+    }\n+\n+    /**\n+     * Sets the encoding to be used for stream access. If this property is not set, the default encoding is used.\n+     *\n+     * @see #DEFAULT_ENCODING\n+     */\n+    public void setEncoding(String encoding) {\n+        this.encoding = encoding;\n+    }\n+\n+    /** Returns the XStream instance used by this marshaller. */\n+    public XStream getXStream() {\n+        return xstream;\n+    }\n+\n+    /**\n+     * Sets the XStream mode.\n+     *\n+     * @see XStream#XPATH_REFERENCES\n+     * @see XStream#ID_REFERENCES\n+     * @see XStream#NO_REFERENCES\n+     */\n+    public void setMode(int mode) {\n+        getXStream().setMode(mode);\n+    }\n+\n+    /**\n+     * Sets the classes supported by this marshaller. If this property is empty (the default), all classes are\n+     * supported.\n+     *\n+     * @see #supports(Class)\n+     */\n+    public void setSupportedClasses(Class[] supportedClasses) {\n+        this.supportedClasses = supportedClasses;\n+    }\n+\n+    /**\n+     * Sets the <code>Converters</code> or <code>SingleValueConverters</code> to be registered with the\n+     * <code>XStream</code> instance.\n+     *\n+     * @see Converter\n+     * @see SingleValueConverter\n+     */\n+    public void setConverters(ConverterMatcher[] converters) {\n+        for (int i = 0; i < converters.length; i++) {\n+            if (converters[i] instanceof Converter) {\n+                getXStream().registerConverter((Converter) converters[i], i);\n+            }\n+            else if (converters[i] instanceof SingleValueConverter) {\n+                getXStream().registerConverter((SingleValueConverter) converters[i], i);\n+            }\n+            else {\n+                throw new IllegalArgumentException(\"Invalid ConverterMatcher [\" + converters[i] + \"]\");\n+            }\n+        }\n+    }\n+\n+    /** Sets the XStream hierarchical stream driver to be used with stream readers and writers */\n+    public void setStreamDriver(HierarchicalStreamDriver streamDriver) {\n+        this.streamDriver = streamDriver;\n+    }\n+\n+    /**\n+     * Set a alias/type map, consisting of string aliases mapped to <code>Class</code> instances (or Strings to be\n+     * converted to <code>Class</code> instances).\n+     *\n+     * @see org.springframework.beans.propertyeditors.ClassEditor\n+     */\n+    public void setAliases(Map aliases) {\n+        for (Iterator iterator = aliases.entrySet().iterator(); iterator.hasNext();) {\n+            Map.Entry entry = (Map.Entry) iterator.next();\n+            // Check whether we need to convert from String to Class.\n+            Class type;\n+            if (entry.getValue() instanceof Class) {\n+                type = (Class) entry.getValue();\n+            }\n+            else {\n+                ClassEditor editor = new ClassEditor();\n+                editor.setAsText(String.valueOf(entry.getValue()));\n+                type = (Class) editor.getValue();\n+            }\n+            addAlias((String) entry.getKey(), type);\n+        }\n+    }\n+\n+    /**\n+     * Adds an alias for the given type.\n+     *\n+     * @param name alias to be used for the type\n+     * @param type the type to be aliased\n+     */\n+    public void addAlias(String name, Class type) {\n+        getXStream().alias(name, type);\n+    }\n+\n+    /**\n+     * Sets types to use XML attributes for.\n+     *\n+     * @see XStream#useAttributeFor(Class)\n+     */\n+    public void setUseAttributeForTypes(Class[] types) {\n+        for (int i = 0; i < types.length; i++) {\n+            getXStream().useAttributeFor(types[i]);\n+        }\n+    }\n+\n+    /**\n+     * Sets the types to use XML attributes for. The given map can contain either <code>&lt;String, Class&gt;</code>\n+     * pairs, in which case {@link XStream#useAttributeFor(String,Class)} is called, or <code>&lt;Class,\n+     * String&gt;</code> pairs, which results in {@link XStream#useAttributeFor(Class,String)}.\n+     */\n+    public void setUseAttributeFor(Map attributes) {\n+        for (Iterator iterator = attributes.entrySet().iterator(); iterator.hasNext();) {\n+            Map.Entry entry = (Map.Entry) iterator.next();\n+            if (entry.getKey() instanceof String && entry.getValue() instanceof Class) {\n+                getXStream().useAttributeFor((String) entry.getKey(), (Class) entry.getValue());\n+            }\n+            else if (entry.getKey() instanceof Class && entry.getValue() instanceof String) {\n+                getXStream().useAttributeFor((Class) entry.getKey(), (String) entry.getValue());\n+            }\n+            else {\n+                throw new IllegalArgumentException(\"Invalid attribute key and value pair. \" +\n+                        \"'useAttributesFor' property takes either a <String, Class> map or a <Class, String> map\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Adds an implicit Collection for the given type.\n+     *\n+     * @see XStream#addImplicitCollection(Class, String)\n+     */\n+    public void addImplicitCollection(String name, Class type) {\n+        getXStream().addImplicitCollection(type, name);\n+    }\n+\n+    /**\n+     * Set a implicit colletion/type map, consisting of string implicit collection mapped to <code>Class</code>\n+     * instances (or Strings to be converted to <code>Class</code> instances).\n+     *\n+     * @see XStream#addImplicitCollection(Class, String)\n+     */\n+    public void setImplicitCollection(Map implicitCollection) {\n+        for (Iterator iterator = implicitCollection.entrySet().iterator(); iterator.hasNext();) {\n+            Map.Entry entry = (Map.Entry) iterator.next();\n+            // Check whether we need to convert from String to Class.\n+            Class type;\n+            if (entry.getValue() instanceof Class) {\n+                type = (Class) entry.getValue();\n+            }\n+            else {\n+                ClassEditor editor = new ClassEditor();\n+                editor.setAsText(String.valueOf(entry.getValue()));\n+                type = (Class) editor.getValue();\n+            }\n+            addImplicitCollection((String) entry.getKey(), type);\n+        }\n+    }\n+\n+    /**\n+     * Adds an omitted field for the given type.\n+     *\n+     * @param type      the type to be containing the field\n+     * @param fieldName field to omitt\n+     * @see XStream#omitField(Class, String)\n+     */\n+    public void addOmittedField(Class type, String fieldName) {\n+        getXStream().omitField(type, fieldName);\n+    }\n+\n+    /**\n+     * Sets a ommited field map, consisting of <code>Class</code> instances (or Strings to be converted to\n+     * <code>Class</code> instances) mapped to comma separated field names.\n+     *\n+     * @see XStream#omitField(Class, String)\n+     */\n+    public void setOmittedFields(Map omittedFields) {\n+        for (Iterator iterator = omittedFields.entrySet().iterator(); iterator.hasNext();) {\n+            Map.Entry entry = (Map.Entry) iterator.next();\n+            // Check whether we need to convert from String to Class.\n+            Class type;\n+            if (entry.getKey() instanceof Class) {\n+                type = (Class) entry.getKey();\n+            }\n+            else {\n+                ClassEditor editor = new ClassEditor();\n+                editor.setAsText(String.valueOf(entry.getKey()));\n+                type = (Class) editor.getValue();\n+            }\n+            // add each omitted field for the current type\n+            String fieldsString = (String) entry.getValue();\n+            String[] fields = StringUtils.commaDelimitedListToStringArray(fieldsString);\n+            for (int i = 0; i < fields.length; i++) {\n+                addOmittedField(type, fields[i]);\n+            }\n+        }\n+    }\n+\n+    public boolean supports(Class clazz) {\n+        if (ObjectUtils.isEmpty(supportedClasses)) {\n+            return true;\n+        }\n+        else {\n+            for (int i = 0; i < supportedClasses.length; i++) {\n+                if (supportedClasses[i].isAssignableFrom(clazz)) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Convert the given XStream exception to an appropriate exception from the <code>org.springframework.oxm</code>\n+     * hierarchy.\n+     * <p/>\n+     * The default implementation delegates to <code>XStreamUtils</code>. Can be overridden in subclasses.\n+     *\n+     * @param ex          exception that occured\n+     * @param marshalling indicates whether the exception occurs during marshalling (<code>true</code>), or\n+     *                    unmarshalling (<code>false</code>)\n+     * @return the corresponding <code>XmlMappingException</code> instance\n+     * @see XStreamUtils#convertXStreamException(Exception,boolean)\n+     */\n+    public XmlMappingException convertXStreamException(Exception ex, boolean marshalling) {\n+        return XStreamUtils.convertXStreamException(ex, marshalling);\n+    }\n+\n+    //\n+    // Marshalling\n+    //\n+\n+    /**\n+     * Marshals the given graph to the given XStream HierarchicalStreamWriter. Converts exceptions using\n+     * <code>convertXStreamException</code>.\n+     */\n+    private void marshal(Object graph, HierarchicalStreamWriter streamWriter) {\n+        try {\n+            getXStream().marshal(graph, streamWriter);\n+        }\n+        catch (Exception ex) {\n+            throw convertXStreamException(ex, true);\n+        }\n+    }\n+\n+    protected void marshalDomNode(Object graph, Node node) throws XmlMappingException {\n+        HierarchicalStreamWriter streamWriter;\n+        if (node instanceof Document) {\n+            streamWriter = new DomWriter((Document) node);\n+        }\n+        else if (node instanceof Element) {\n+            streamWriter = new DomWriter((Element) node, node.getOwnerDocument(), new XmlFriendlyReplacer());\n+        }\n+        else {\n+            throw new IllegalArgumentException(\"DOMResult contains neither Document nor Element\");\n+        }\n+        marshal(graph, streamWriter);\n+    }\n+\n+    protected void marshalXmlEventWriter(Object graph, XMLEventWriter eventWriter) throws XmlMappingException {\n+        ContentHandler contentHandler = new StaxEventContentHandler(eventWriter);\n+        marshalSaxHandlers(graph, contentHandler, null);\n+    }\n+\n+    protected void marshalXmlStreamWriter(Object graph, XMLStreamWriter streamWriter) throws XmlMappingException {\n+        try {\n+            marshal(graph, new StaxWriter(new QNameMap(), streamWriter));\n+        }\n+        catch (XMLStreamException ex) {\n+            throw convertXStreamException(ex, true);\n+        }\n+    }\n+\n+    protected void marshalOutputStream(Object graph, OutputStream outputStream)\n+            throws XmlMappingException, IOException {\n+        marshalWriter(graph, new OutputStreamWriter(outputStream, getEncoding()));\n+    }\n+\n+    protected void marshalSaxHandlers(Object graph, ContentHandler contentHandler, LexicalHandler lexicalHandler)\n+            throws XmlMappingException {\n+        SaxWriter saxWriter = new SaxWriter();\n+        saxWriter.setContentHandler(contentHandler);\n+        marshal(graph, saxWriter);\n+    }\n+\n+    protected void marshalWriter(Object graph, Writer writer) throws XmlMappingException, IOException {\n+        if (streamDriver != null) {\n+            marshal(graph, streamDriver.createWriter(writer));\n+        }\n+        else {\n+            marshal(graph, new CompactWriter(writer));\n+        }\n+    }\n+\n+    //\n+    // Unmarshalling\n+    //\n+\n+    private Object unmarshal(HierarchicalStreamReader streamReader) {\n+        try {\n+            return getXStream().unmarshal(streamReader);\n+        }\n+        catch (Exception ex) {\n+            throw convertXStreamException(ex, false);\n+        }\n+    }\n+\n+    protected Object unmarshalDomNode(Node node) throws XmlMappingException {\n+        HierarchicalStreamReader streamReader;\n+        if (node instanceof Document) {\n+            streamReader = new DomReader((Document) node);\n+        }\n+        else if (node instanceof Element) {\n+            streamReader = new DomReader((Element) node);\n+        }\n+        else {\n+            throw new IllegalArgumentException(\"DOMSource contains neither Document nor Element\");\n+        }\n+        return unmarshal(streamReader);\n+    }\n+\n+    protected Object unmarshalXmlEventReader(XMLEventReader eventReader) throws XmlMappingException {\n+        try {\n+            XMLStreamReader streamReader = new XmlEventStreamReader(eventReader);\n+            return unmarshalXmlStreamReader(streamReader);\n+        }\n+        catch (XMLStreamException ex) {\n+            throw convertXStreamException(ex, false);\n+        }\n+    }\n+\n+    protected Object unmarshalXmlStreamReader(XMLStreamReader streamReader) throws XmlMappingException {\n+        return unmarshal(new StaxReader(new QNameMap(), streamReader));\n+    }\n+\n+    protected Object unmarshalInputStream(InputStream inputStream) throws XmlMappingException, IOException {\n+        return unmarshalReader(new InputStreamReader(inputStream, getEncoding()));\n+    }\n+\n+    protected Object unmarshalReader(Reader reader) throws XmlMappingException, IOException {\n+        if (streamDriver != null) {\n+            return unmarshal(streamDriver.createReader(reader));\n+        }\n+        else {\n+            return unmarshal(new XppReader(reader));\n+        }\n+    }\n+\n+    protected Object unmarshalSaxReader(XMLReader xmlReader, InputSource inputSource)\n+            throws XmlMappingException, IOException {\n+        throw new UnsupportedOperationException(\n+                \"XStreamMarshaller does not support unmarshalling using SAX XMLReaders\");\n+    }\n+\n+\n+}"
        },
        {
            "sha": "931d0068753a66e6958b3ce1c7f7c0cf363f9ca0",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshallingFailureException.java",
            "status": "added",
            "additions": 49,
            "deletions": 0,
            "changes": 49,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamMarshallingFailureException.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamMarshallingFailureException.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamMarshallingFailureException.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2006 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.xstream;\n+\n+import com.thoughtworks.xstream.alias.CannotResolveClassException;\n+import com.thoughtworks.xstream.converters.ConversionException;\n+import com.thoughtworks.xstream.io.StreamException;\n+import org.springframework.oxm.MarshallingFailureException;\n+\n+/**\n+ * XStream-specific subclass of <code>MarshallingFailureException</code>.\n+ *\n+ * @author Arjen Poutsma\n+ * @since 1.0.0\n+ */\n+public class XStreamMarshallingFailureException extends MarshallingFailureException {\n+\n+    public XStreamMarshallingFailureException(String msg) {\n+        super(msg);\n+    }\n+\n+    public XStreamMarshallingFailureException(StreamException ex) {\n+        super(\"XStream marshalling exception: \" + ex.getMessage(), ex);\n+\n+    }\n+\n+    public XStreamMarshallingFailureException(CannotResolveClassException ex) {\n+        super(\"XStream resolving exception: \" + ex.getMessage(), ex);\n+    }\n+\n+    public XStreamMarshallingFailureException(ConversionException ex) {\n+        super(\"XStream conversion exception: \" + ex.getMessage(), ex);\n+    }\n+\n+}"
        },
        {
            "sha": "a4e48a0bb97c797483180f07db539435264e1a88",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/XStreamSystemException.java",
            "status": "added",
            "additions": 34,
            "deletions": 0,
            "changes": 34,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamSystemException.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamSystemException.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamSystemException.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2006 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.xstream;\n+\n+import org.springframework.oxm.UncategorizedXmlMappingException;\n+\n+/**\n+ * XStream-specific subclass of <code>UncategorizedXmlMappingException</code>, for XStream exceptions that cannot be\n+ * distinguished further.\n+ *\n+ * @author Arjen Poutsma\n+ * @since 1.0.0\n+ */\n+public class XStreamSystemException extends UncategorizedXmlMappingException {\n+\n+    public XStreamSystemException(String msg, Throwable ex) {\n+        super(msg, ex);\n+    }\n+\n+}"
        },
        {
            "sha": "e293c9029d244ba6c50918bbc4bff79c0f2af6b3",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/XStreamUnmarshallingFailureException.java",
            "status": "added",
            "additions": 54,
            "deletions": 0,
            "changes": 54,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamUnmarshallingFailureException.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamUnmarshallingFailureException.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamUnmarshallingFailureException.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2006 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.xstream;\n+\n+import javax.xml.stream.XMLStreamException;\n+\n+import com.thoughtworks.xstream.alias.CannotResolveClassException;\n+import com.thoughtworks.xstream.converters.ConversionException;\n+import com.thoughtworks.xstream.io.StreamException;\n+import org.springframework.oxm.UnmarshallingFailureException;\n+\n+/**\n+ * XStream-specific subclass of <code>UnmarshallingFailureException</code>.\n+ *\n+ * @author Arjen Poutsma\n+ * @since 1.0.0\n+ */\n+public class XStreamUnmarshallingFailureException extends UnmarshallingFailureException {\n+\n+    public XStreamUnmarshallingFailureException(StreamException ex) {\n+        super(\"XStream unmarshalling exception: \" + ex.getMessage(), ex);\n+    }\n+\n+    public XStreamUnmarshallingFailureException(CannotResolveClassException ex) {\n+        super(\"XStream resolving exception: \" + ex.getMessage(), ex);\n+    }\n+\n+    public XStreamUnmarshallingFailureException(ConversionException ex) {\n+        super(\"XStream conversion exception: \" + ex.getMessage(), ex);\n+    }\n+\n+    public XStreamUnmarshallingFailureException(String msg) {\n+        super(msg);\n+    }\n+\n+    public XStreamUnmarshallingFailureException(String msg, XMLStreamException ex) {\n+        super(msg, ex);\n+    }\n+\n+}"
        },
        {
            "sha": "929a66263a4bcbab0a7d95f7f8ffba2eb3daed06",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/XStreamUtils.java",
            "status": "added",
            "additions": 73,
            "deletions": 0,
            "changes": 73,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamUtils.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamUtils.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamUtils.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2006 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.xstream;\n+\n+import com.thoughtworks.xstream.alias.CannotResolveClassException;\n+import com.thoughtworks.xstream.converters.ConversionException;\n+import com.thoughtworks.xstream.io.StreamException;\n+import org.springframework.oxm.XmlMappingException;\n+\n+/**\n+ * Generic utility methods for working with XStream. Mainly for internal use within the framework.\n+ *\n+ * @author Arjen Poutsma\n+ * @since 1.0.0\n+ */\n+public abstract class XStreamUtils {\n+\n+    /**\n+     * Converts the given XStream exception to an appropriate exception from the <code>org.springframework.oxm</code>\n+     * hierarchy.\n+     * <p/>\n+     * A boolean flag is used to indicate whether this exception occurs during marshalling or unmarshalling, since\n+     * XStream itself does not make this distinction in its exception hierarchy.\n+     *\n+     * @param ex          XStream exception that occured\n+     * @param marshalling indicates whether the exception occurs during marshalling (<code>true</code>), or\n+     *                    unmarshalling (<code>false</code>)\n+     * @return the corresponding <code>XmlMappingException</code>\n+     */\n+    public static XmlMappingException convertXStreamException(Exception ex, boolean marshalling) {\n+        if (ex instanceof StreamException) {\n+            if (marshalling) {\n+                return new XStreamMarshallingFailureException((StreamException) ex);\n+            }\n+            else {\n+                return new XStreamUnmarshallingFailureException((StreamException) ex);\n+            }\n+        }\n+        else if (ex instanceof CannotResolveClassException) {\n+            if (marshalling) {\n+                return new XStreamMarshallingFailureException((CannotResolveClassException) ex);\n+            }\n+            else {\n+                return new XStreamUnmarshallingFailureException((CannotResolveClassException) ex);\n+            }\n+        }\n+        else if (ex instanceof ConversionException) {\n+            if (marshalling) {\n+                return new XStreamMarshallingFailureException((ConversionException) ex);\n+            }\n+            else {\n+                return new XStreamUnmarshallingFailureException((ConversionException) ex);\n+            }\n+        }\n+        // fallback\n+        return new XStreamSystemException(\"Unknown XStream exception: \" + ex.getMessage(), ex);\n+    }\n+\n+}"
        },
        {
            "sha": "ab174437f975021897764a57174664763873bfec",
            "filename": "org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/package.html",
            "status": "added",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2Fpackage.html",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2Fpackage.html",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2Fpackage.html?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,5 @@\n+<html>\n+<body>\n+Package providing integration of <a href=\"http://xstream.codehaus.org/\">XStream</a> with Springs O/X Mapping support.\n+</body>\n+</html>"
        },
        {
            "sha": "22a2a50458bdfdd284c2137a3990fb16064c87f8",
            "filename": "org.springframework.oxm/src/main/resources/META-INF/spring.handlers",
            "status": "added",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.handlers",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.handlers",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.handlers?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1 @@\n+http\\://www.springframework.org/schema/oxm=org.springframework.oxm.config.OxmNamespaceHandler\n\\ No newline at end of file"
        },
        {
            "sha": "43b7186b4f5491958032329c6b661cec05f4262d",
            "filename": "org.springframework.oxm/src/main/resources/META-INF/spring.schemas",
            "status": "added",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.schemas",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.schemas",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.schemas?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1 @@\n+http\\://www.springframework.org/schema/oxm/spring-oxm-1.5.xsd=/org/springframework/oxm/config/spring-oxm-1.5.xsd\n\\ No newline at end of file"
        },
        {
            "sha": "a81a43a5fdeaa2181f27b553b4d262aa22446792",
            "filename": "org.springframework.oxm/src/main/resources/org/springframework/oxm/config/spring-oxm-1.5.xsd",
            "status": "added",
            "additions": 146,
            "deletions": 0,
            "changes": 146,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fresources%2Forg%2Fspringframework%2Foxm%2Fconfig%2Fspring-oxm-1.5.xsd",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Fmain%2Fresources%2Forg%2Fspringframework%2Foxm%2Fconfig%2Fspring-oxm-1.5.xsd",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Fmain%2Fresources%2Forg%2Fspringframework%2Foxm%2Fconfig%2Fspring-oxm-1.5.xsd?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,146 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<xsd:schema xmlns=\"http://www.springframework.org/schema/oxm\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n+            xmlns:beans=\"http://www.springframework.org/schema/beans\"\n+            xmlns:tool=\"http://www.springframework.org/schema/tool\"\n+            targetNamespace=\"http://www.springframework.org/schema/oxm\" elementFormDefault=\"qualified\"\n+            attributeFormDefault=\"unqualified\">\n+\n+    <xsd:import namespace=\"http://www.springframework.org/schema/beans\"/>\n+    <xsd:import namespace=\"http://www.springframework.org/schema/tool\"/>\n+\n+    <xsd:annotation>\n+        <xsd:documentation>\n+            Defines the elements used in Spring's Object/XML Mapping integration.\n+        </xsd:documentation>\n+    </xsd:annotation>\n+\n+    <xsd:element name=\"jaxb1-marshaller\">\n+        <xsd:complexType>\n+            <xsd:annotation>\n+                <xsd:documentation source=\"java:org.springframework.oxm.jaxb.Jaxb1Marshaller\">\n+                    Defines a JAXB1 Marshaller.\n+                </xsd:documentation>\n+                <xsd:appinfo>\n+                    <tool:annotation>\n+                        <tool:exports type=\"org.springframework.oxm.jaxb.Jaxb1Marshaller\"/>\n+                    </tool:annotation>\n+                </xsd:appinfo>\n+            </xsd:annotation>\n+            <xsd:complexContent>\n+                <xsd:extension base=\"beans:identifiedType\">\n+                    <xsd:attribute name=\"contextPath\" type=\"xsd:string\" use=\"required\">\n+                        <xsd:annotation>\n+                            <xsd:documentation>The JAXB Context path</xsd:documentation>\n+                        </xsd:annotation>\n+                    </xsd:attribute>\n+                    <xsd:attribute name=\"validating\" type=\"xsd:boolean\" default=\"false\">\n+                        <xsd:annotation>\n+                            <xsd:documentation>Whether incoming XML should be validated.</xsd:documentation>\n+                        </xsd:annotation>\n+                    </xsd:attribute>\n+                </xsd:extension>\n+            </xsd:complexContent>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"jaxb2-marshaller\">\n+        <xsd:complexType>\n+            <xsd:annotation>\n+                <xsd:documentation source=\"java:org.springframework.oxm.jaxb.Jaxb2Marshaller\">\n+                    Defines a JAXB2 Marshaller.\n+                </xsd:documentation>\n+                <xsd:appinfo>\n+                    <tool:annotation>\n+                        <tool:exports type=\"org.springframework.oxm.jaxb.Jaxb2Marshaller\"/>\n+                    </tool:annotation>\n+                </xsd:appinfo>\n+            </xsd:annotation>\n+            <xsd:complexContent>\n+                <xsd:extension base=\"beans:identifiedType\">\n+                    <xsd:sequence>\n+                        <xsd:element name=\"class-to-be-bound\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+                            <xsd:complexType>\n+                                <xsd:attribute name=\"name\" type=\"classType\" use=\"required\"/>\n+                            </xsd:complexType>\n+                        </xsd:element>\n+                    </xsd:sequence>\n+                    <xsd:attribute name=\"contextPath\" type=\"xsd:string\">\n+                        <xsd:annotation>\n+                            <xsd:documentation>The JAXB Context path</xsd:documentation>\n+                        </xsd:annotation>\n+                    </xsd:attribute>\n+                </xsd:extension>\n+            </xsd:complexContent>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"jibx-marshaller\">\n+        <xsd:complexType>\n+            <xsd:annotation>\n+                <xsd:documentation source=\"java:org.springframework.oxm.jibx.JibxMarshaller\">\n+                    Defines a JiBX Marshaller.\n+                </xsd:documentation>\n+                <xsd:appinfo>\n+                    <tool:annotation>\n+                        <tool:exports type=\"org.springframework.oxm.jibx.JibxMarshaller\"/>\n+                    </tool:annotation>\n+                </xsd:appinfo>\n+            </xsd:annotation>\n+            <xsd:complexContent>\n+                <xsd:extension base=\"beans:identifiedType\">\n+                    <xsd:attribute name=\"target-class\" type=\"classType\" use=\"required\"/>\n+                    <xsd:attribute name=\"bindingName\" type=\"xsd:string\">\n+                        <xsd:annotation>\n+                            <xsd:documentation>The binding name used by this marshaller.</xsd:documentation>\n+                        </xsd:annotation>\n+                    </xsd:attribute>\n+                </xsd:extension>\n+            </xsd:complexContent>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"xmlbeans-marshaller\">\n+        <xsd:complexType>\n+            <xsd:annotation>\n+                <xsd:documentation source=\"java:org.springframework.oxm.xmlbeans.XmlBeansMarshaller\">\n+                    Defines a XMLBeans Marshaller.\n+                </xsd:documentation>\n+                <xsd:appinfo>\n+                    <tool:annotation>\n+                        <tool:exports type=\"org.springframework.oxm.xmlbeans.XmlBeansMarshaller\"/>\n+                    </tool:annotation>\n+                </xsd:appinfo>\n+            </xsd:annotation>\n+            <xsd:complexContent>\n+                <xsd:extension base=\"beans:identifiedType\">\n+                    <xsd:attribute name=\"options\" type=\"xsd:string\">\n+                        <xsd:annotation>\n+                            <xsd:documentation source=\"java:org.apache.xmlbeans.XmlOptions\">\n+                                The bean name of the XmlOptions that is to be used for this marshaller. Typically a\n+                                XmlOptionsFactoryBean definition.\n+                            </xsd:documentation>\n+                            <xsd:appinfo>\n+                                <tool:annotation kind=\"ref\">\n+                                    <tool:expected-type type=\"org.apache.xmlbeans.XmlOptions\"/>\n+                                </tool:annotation>\n+                            </xsd:appinfo>\n+                        </xsd:annotation>\n+                    </xsd:attribute>\n+                </xsd:extension>\n+            </xsd:complexContent>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:simpleType name=\"classType\">\n+        <xsd:annotation>\n+            <xsd:documentation source=\"java:java.lang.Class\">A class supported by a marshaller.</xsd:documentation>\n+            <xsd:appinfo>\n+                <tool:annotation kind=\"direct\">\n+                    <tool:expected-type type=\"java.lang.Class\"/>\n+                </tool:annotation>\n+            </xsd:appinfo>\n+        </xsd:annotation>\n+        <xsd:union memberTypes=\"xsd:string\"/>\n+    </xsd:simpleType>\n+\n+</xsd:schema>"
        },
        {
            "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
            "filename": "org.springframework.oxm/src/test/castor/castorbuilder.properties",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fcastor%2Fcastorbuilder.properties",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fcastor%2Fcastorbuilder.properties",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fcastor%2Fcastorbuilder.properties?ref=03582973d74b30eba4b00be50189258b2d843bad"
        },
        {
            "sha": "033ddc83a43bf8c8813c878623a952694c0e44f4",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/AbstractMarshallerTestCase.java",
            "status": "added",
            "additions": 130,
            "deletions": 0,
            "changes": 130,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2FAbstractMarshallerTestCase.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2FAbstractMarshallerTestCase.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2FAbstractMarshallerTestCase.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.StringWriter;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.stax.StAXResult;\n+import javax.xml.transform.stream.StreamResult;\n+\n+import org.custommonkey.xmlunit.XMLTestCase;\n+import org.custommonkey.xmlunit.XMLUnit;\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Text;\n+\n+import org.springframework.xml.transform.StaxResult;\n+\n+public abstract class AbstractMarshallerTestCase extends XMLTestCase {\n+\n+    protected Marshaller marshaller;\n+\n+    protected Object flights;\n+\n+    protected static final String EXPECTED_STRING =\n+            \"<tns:flights xmlns:tns=\\\"http://samples.springframework.org/flight\\\">\" +\n+                    \"<tns:flight><tns:number>42</tns:number></tns:flight></tns:flights>\";\n+\n+    protected final void setUp() throws Exception {\n+        marshaller = createMarshaller();\n+        flights = createFlights();\n+        XMLUnit.setIgnoreWhitespace(true);\n+    }\n+\n+    protected abstract Marshaller createMarshaller() throws Exception;\n+\n+    protected abstract Object createFlights();\n+\n+    public void testMarshalDOMResult() throws Exception {\n+        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n+        documentBuilderFactory.setNamespaceAware(true);\n+        DocumentBuilder builder = documentBuilderFactory.newDocumentBuilder();\n+        Document result = builder.newDocument();\n+        DOMResult domResult = new DOMResult(result);\n+        marshaller.marshal(flights, domResult);\n+        Document expected = builder.newDocument();\n+        Element flightsElement = expected.createElementNS(\"http://samples.springframework.org/flight\", \"tns:flights\");\n+        Attr namespace = expected.createAttributeNS(\"http://www.w3.org/2000/xmlns/\", \"xmlns:tns\");\n+        namespace.setNodeValue(\"http://samples.springframework.org/flight\");\n+        flightsElement.setAttributeNode(namespace);\n+        expected.appendChild(flightsElement);\n+        Element flightElement = expected.createElementNS(\"http://samples.springframework.org/flight\", \"tns:flight\");\n+        flightsElement.appendChild(flightElement);\n+        Element numberElement = expected.createElementNS(\"http://samples.springframework.org/flight\", \"tns:number\");\n+        flightElement.appendChild(numberElement);\n+        Text text = expected.createTextNode(\"42\");\n+        numberElement.appendChild(text);\n+        assertXMLEqual(\"Marshaller writes invalid DOMResult\", expected, result);\n+    }\n+\n+    public void testMarshalStreamResultWriter() throws Exception {\n+        StringWriter writer = new StringWriter();\n+        StreamResult result = new StreamResult(writer);\n+        marshaller.marshal(flights, result);\n+        assertXMLEqual(\"Marshaller writes invalid StreamResult\", EXPECTED_STRING, writer.toString());\n+    }\n+\n+    public void testMarshalStreamResultOutputStream() throws Exception {\n+        ByteArrayOutputStream os = new ByteArrayOutputStream();\n+        StreamResult result = new StreamResult(os);\n+        marshaller.marshal(flights, result);\n+        assertXMLEqual(\"Marshaller writes invalid StreamResult\", EXPECTED_STRING,\n+                new String(os.toByteArray(), \"UTF-8\"));\n+    }\n+\n+    public void testMarshalStaxResultStreamWriter() throws Exception {\n+        XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();\n+        StringWriter writer = new StringWriter();\n+        XMLStreamWriter streamWriter = outputFactory.createXMLStreamWriter(writer);\n+        StaxResult result = new StaxResult(streamWriter);\n+        marshaller.marshal(flights, result);\n+        assertXMLEqual(\"Marshaller writes invalid StreamResult\", EXPECTED_STRING, writer.toString());\n+    }\n+\n+    public void testMarshalStaxResultEventWriter() throws Exception {\n+        XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();\n+        StringWriter writer = new StringWriter();\n+        XMLEventWriter eventWriter = outputFactory.createXMLEventWriter(writer);\n+        StaxResult result = new StaxResult(eventWriter);\n+        marshaller.marshal(flights, result);\n+        assertXMLEqual(\"Marshaller writes invalid StreamResult\", EXPECTED_STRING, writer.toString());\n+    }\n+\n+    public void testMarshalJaxp14StaxResultStreamWriter() throws Exception {\n+        XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();\n+        StringWriter writer = new StringWriter();\n+        XMLStreamWriter streamWriter = outputFactory.createXMLStreamWriter(writer);\n+        StAXResult result = new StAXResult(streamWriter);\n+        marshaller.marshal(flights, result);\n+        assertXMLEqual(\"Marshaller writes invalid StreamResult\", EXPECTED_STRING, writer.toString());\n+    }\n+\n+    public void testMarshalJaxp14StaxResultEventWriter() throws Exception {\n+        XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();\n+        StringWriter writer = new StringWriter();\n+        XMLEventWriter eventWriter = outputFactory.createXMLEventWriter(writer);\n+        StAXResult result = new StAXResult(eventWriter);\n+        marshaller.marshal(flights, result);\n+        assertXMLEqual(\"Marshaller writes invalid StreamResult\", EXPECTED_STRING, writer.toString());\n+    }\n+}"
        },
        {
            "sha": "a9b0a665ab38f2b8cdb7960b1ea85e27929b7b96",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/AbstractUnmarshallerTestCase.java",
            "status": "added",
            "additions": 139,
            "deletions": 0,
            "changes": 139,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2FAbstractUnmarshallerTestCase.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2FAbstractUnmarshallerTestCase.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2FAbstractUnmarshallerTestCase.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.StringReader;\n+import javax.xml.namespace.QName;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.stream.XMLEventReader;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLStreamReader;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.sax.SAXSource;\n+import javax.xml.transform.stax.StAXSource;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import junit.framework.TestCase;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Text;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.XMLReaderFactory;\n+\n+import org.springframework.xml.transform.StaxSource;\n+\n+public abstract class AbstractUnmarshallerTestCase extends TestCase {\n+\n+    protected Unmarshaller unmarshaller;\n+\n+    protected static final String INPUT_STRING =\n+            \"<tns:flights xmlns:tns=\\\"http://samples.springframework.org/flight\\\">\" +\n+                    \"<tns:flight><tns:number>42</tns:number></tns:flight></tns:flights>\";\n+\n+    protected final void setUp() throws Exception {\n+        unmarshaller = createUnmarshaller();\n+    }\n+\n+    protected abstract Unmarshaller createUnmarshaller() throws Exception;\n+\n+    protected abstract void testFlights(Object o);\n+\n+    protected abstract void testFlight(Object o);\n+\n+    public void testUnmarshalDomSource() throws Exception {\n+        DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+        Document document = builder.newDocument();\n+        Element flightsElement = document.createElementNS(\"http://samples.springframework.org/flight\", \"tns:flights\");\n+        document.appendChild(flightsElement);\n+        Element flightElement = document.createElementNS(\"http://samples.springframework.org/flight\", \"tns:flight\");\n+        flightsElement.appendChild(flightElement);\n+        Element numberElement = document.createElementNS(\"http://samples.springframework.org/flight\", \"tns:number\");\n+        flightElement.appendChild(numberElement);\n+        Text text = document.createTextNode(\"42\");\n+        numberElement.appendChild(text);\n+        DOMSource source = new DOMSource(document);\n+        Object flights = unmarshaller.unmarshal(source);\n+        testFlights(flights);\n+    }\n+\n+    public void testUnmarshalStreamSourceReader() throws Exception {\n+        StreamSource source = new StreamSource(new StringReader(INPUT_STRING));\n+        Object flights = unmarshaller.unmarshal(source);\n+        testFlights(flights);\n+    }\n+\n+    public void testUnmarshalStreamSourceInputStream() throws Exception {\n+        StreamSource source = new StreamSource(new ByteArrayInputStream(INPUT_STRING.getBytes(\"UTF-8\")));\n+        Object flights = unmarshaller.unmarshal(source);\n+        testFlights(flights);\n+    }\n+\n+    public void testUnmarshalSAXSource() throws Exception {\n+        XMLReader reader = XMLReaderFactory.createXMLReader();\n+        SAXSource source = new SAXSource(reader, new InputSource(new StringReader(INPUT_STRING)));\n+        Object flights = unmarshaller.unmarshal(source);\n+        testFlights(flights);\n+    }\n+\n+    public void testUnmarshalStaxSourceXmlStreamReader() throws Exception {\n+        XMLInputFactory inputFactory = XMLInputFactory.newInstance();\n+        XMLStreamReader streamReader = inputFactory.createXMLStreamReader(new StringReader(INPUT_STRING));\n+        StaxSource source = new StaxSource(streamReader);\n+        Object flights = unmarshaller.unmarshal(source);\n+        testFlights(flights);\n+    }\n+\n+    public void testUnmarshalStaxSourceXmlEventReader() throws Exception {\n+        XMLInputFactory inputFactory = XMLInputFactory.newInstance();\n+        XMLEventReader eventReader = inputFactory.createXMLEventReader(new StringReader(INPUT_STRING));\n+        StaxSource source = new StaxSource(eventReader);\n+        Object flights = unmarshaller.unmarshal(source);\n+        testFlights(flights);\n+    }\n+\n+    public void testUnmarshalJaxp14StaxSourceXmlStreamReader() throws Exception {\n+        XMLInputFactory inputFactory = XMLInputFactory.newInstance();\n+        XMLStreamReader streamReader = inputFactory.createXMLStreamReader(new StringReader(INPUT_STRING));\n+        StAXSource source = new StAXSource(streamReader);\n+        Object flights = unmarshaller.unmarshal(source);\n+        testFlights(flights);\n+    }\n+\n+    public void testUnmarshalJaxp14StaxSourceXmlEventReader() throws Exception {\n+        XMLInputFactory inputFactory = XMLInputFactory.newInstance();\n+        XMLEventReader eventReader = inputFactory.createXMLEventReader(new StringReader(INPUT_STRING));\n+        StAXSource source = new StAXSource(eventReader);\n+        Object flights = unmarshaller.unmarshal(source);\n+        testFlights(flights);\n+    }\n+\n+    public void testUnmarshalPartialStaxSourceXmlStreamReader() throws Exception {\n+        XMLInputFactory inputFactory = XMLInputFactory.newInstance();\n+        XMLStreamReader streamReader = inputFactory.createXMLStreamReader(new StringReader(INPUT_STRING));\n+        streamReader.nextTag(); // skip to flights\n+        assertEquals(\"Invalid element\", new QName(\"http://samples.springframework.org/flight\", \"flights\"),\n+                streamReader.getName());\n+        streamReader.nextTag(); // skip to flight\n+        assertEquals(\"Invalid element\", new QName(\"http://samples.springframework.org/flight\", \"flight\"),\n+                streamReader.getName());\n+        StaxSource source = new StaxSource(streamReader);\n+        Object flight = unmarshaller.unmarshal(source);\n+        testFlight(flight);\n+    }\n+}"
        },
        {
            "sha": "893c9ef446aaa4367cf3666b027f7bb4b3a01b34",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/castor/CastorMarshallerTest.java",
            "status": "added",
            "additions": 75,
            "deletions": 0,
            "changes": 75,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorMarshallerTest.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorMarshallerTest.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorMarshallerTest.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm.castor;\n+\n+import javax.xml.transform.sax.SAXResult;\n+\n+import org.easymock.MockControl;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.oxm.AbstractMarshallerTestCase;\n+import org.springframework.oxm.Marshaller;\n+import org.xml.sax.ContentHandler;\n+\n+public class CastorMarshallerTest extends AbstractMarshallerTestCase {\n+\n+    protected Marshaller createMarshaller() throws Exception {\n+        CastorMarshaller marshaller = new CastorMarshaller();\n+        ClassPathResource mappingLocation = new ClassPathResource(\"mapping.xml\", CastorMarshaller.class);\n+        marshaller.setMappingLocation(mappingLocation);\n+        marshaller.afterPropertiesSet();\n+        return marshaller;\n+    }\n+\n+    protected Object createFlights() {\n+        Flight flight = new Flight();\n+        flight.setNumber(42L);\n+        Flights flights = new Flights();\n+        flights.addFlight(flight);\n+        return flights;\n+    }\n+\n+    public void testMarshalSaxResult() throws Exception {\n+        MockControl handlerControl = MockControl.createControl(ContentHandler.class);\n+        ContentHandler handlerMock = (ContentHandler) handlerControl.getMock();\n+        handlerMock.startDocument();\n+        handlerMock.startPrefixMapping(\"tns\", \"http://samples.springframework.org/flight\");\n+        handlerMock.startElement(\"http://samples.springframework.org/flight\", \"flights\", \"tns:flights\", null);\n+        handlerControl.setMatcher(MockControl.ALWAYS_MATCHER);\n+        handlerMock.startElement(\"http://samples.springframework.org/flight\", \"flight\", \"tns:flight\", null);\n+        handlerControl.setMatcher(MockControl.ALWAYS_MATCHER);\n+        handlerMock.startElement(\"http://samples.springframework.org/flight\", \"number\", \"tns:number\", null);\n+        handlerControl.setMatcher(MockControl.ALWAYS_MATCHER);\n+        handlerMock.characters(new char[]{'4', '2'}, 0, 2);\n+        handlerControl.setMatcher(MockControl.ARRAY_MATCHER);\n+        handlerMock.endElement(\"http://samples.springframework.org/flight\", \"number\", \"tns:number\");\n+        handlerMock.endElement(\"http://samples.springframework.org/flight\", \"flight\", \"tns:flight\");\n+        handlerMock.endElement(\"http://samples.springframework.org/flight\", \"flights\", \"tns:flights\");\n+        handlerMock.endPrefixMapping(\"tns\");\n+        handlerMock.endDocument();\n+\n+        handlerControl.replay();\n+        SAXResult result = new SAXResult(handlerMock);\n+        marshaller.marshal(flights, result);\n+        handlerControl.verify();\n+    }\n+\n+    public void testSupports() throws Exception {\n+        assertTrue(\"CastorMarshaller does not support Flights\", marshaller.supports(Flights.class));\n+        assertTrue(\"CastorMarshaller does not support Flight\", marshaller.supports(Flight.class));\n+    }\n+\n+\n+}"
        },
        {
            "sha": "d271a0aeeaa84e0a27139e476e948ee8a5c38e63",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/castor/CastorUnmarshallerTest.java",
            "status": "added",
            "additions": 71,
            "deletions": 0,
            "changes": 71,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorUnmarshallerTest.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorUnmarshallerTest.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorUnmarshallerTest.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm.castor;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.oxm.AbstractUnmarshallerTestCase;\n+import org.springframework.oxm.Unmarshaller;\n+\n+public class CastorUnmarshallerTest extends AbstractUnmarshallerTestCase {\n+\n+    protected void testFlights(Object o) {\n+        Flights flights = (Flights) o;\n+        assertNotNull(\"Flights is null\", flights);\n+        assertEquals(\"Invalid amount of flight elements\", 1, flights.getFlightCount());\n+        testFlight(flights.getFlight()[0]);\n+    }\n+\n+    protected void testFlight(Object o) {\n+        Flight flight = (Flight) o;\n+        assertNotNull(\"Flight is null\", flight);\n+        assertEquals(\"Number is invalid\", 42L, flight.getNumber());\n+    }\n+\n+    protected Unmarshaller createUnmarshaller() throws Exception {\n+        CastorMarshaller marshaller = new CastorMarshaller();\n+        ClassPathResource mappingLocation = new ClassPathResource(\"mapping.xml\", CastorMarshaller.class);\n+        marshaller.setMappingLocation(mappingLocation);\n+        marshaller.afterPropertiesSet();\n+        return marshaller;\n+    }\n+\n+    public void testUnmarshalTargetClass() throws Exception {\n+        CastorMarshaller unmarshaller = new CastorMarshaller();\n+        unmarshaller.setTargetClass(Flights.class);\n+        unmarshaller.afterPropertiesSet();\n+        StreamSource source = new StreamSource(new ByteArrayInputStream(INPUT_STRING.getBytes(\"UTF-8\")));\n+        Object flights = unmarshaller.unmarshal(source);\n+        testFlights(flights);\n+    }\n+\n+    public void testSetBothTargetClassAndMapping() throws IOException {\n+        try {\n+            CastorMarshaller marshaller = new CastorMarshaller();\n+            marshaller.setMappingLocation(new ClassPathResource(\"mapping.xml\", CastorMarshaller.class));\n+            marshaller.setTargetClass(getClass());\n+            marshaller.afterPropertiesSet();\n+            fail(\"IllegalArgumentException expected\");\n+        }\n+        catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+}"
        },
        {
            "sha": "8f663d0d1325217377dcaf028d0bdd940c5341b5",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/castor/CastorUtilsTest.java",
            "status": "added",
            "additions": 42,
            "deletions": 0,
            "changes": 42,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorUtilsTest.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorUtilsTest.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fcastor%2FCastorUtilsTest.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm.castor;\n+\n+import junit.framework.TestCase;\n+import org.exolab.castor.xml.MarshalException;\n+import org.exolab.castor.xml.ValidationException;\n+import org.exolab.castor.xml.XMLException;\n+\n+public class CastorUtilsTest extends TestCase {\n+\n+    public void testConvertMarshalException() {\n+        assertTrue(\"Invalid exception conversion\", CastorUtils\n+                .convertXmlException(new MarshalException(\"\"), true) instanceof CastorMarshallingFailureException);\n+        assertTrue(\"Invalid exception conversion\", CastorUtils\n+                .convertXmlException(new MarshalException(\"\"), false) instanceof CastorUnmarshallingFailureException);\n+    }\n+\n+    public void testConvertValidationException() {\n+        assertTrue(\"Invalid exception conversion\", CastorUtils\n+                .convertXmlException(new ValidationException(\"\"), false) instanceof CastorValidationFailureException);\n+    }\n+\n+    public void testConvertXMLException() {\n+        assertTrue(\"Invalid exception conversion\",\n+                CastorUtils.convertXmlException(new XMLException(\"\"), false) instanceof CastorSystemException);\n+    }\n+\n+}"
        },
        {
            "sha": "c7a4548ea9cd6cdd0d8d5e95caf8eeab323649b5",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/config/Jaxb2OxmNamespaceHandlerTest.java",
            "status": "added",
            "additions": 41,
            "deletions": 0,
            "changes": 41,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fconfig%2FJaxb2OxmNamespaceHandlerTest.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fconfig%2FJaxb2OxmNamespaceHandlerTest.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fconfig%2FJaxb2OxmNamespaceHandlerTest.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright ${YEAR} the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.config;\n+\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+\n+import junit.framework.TestCase;\n+\n+public class Jaxb2OxmNamespaceHandlerTest extends TestCase {\n+\n+    private ApplicationContext applicationContext;\n+\n+    protected void setUp() throws Exception {\n+        applicationContext = new ClassPathXmlApplicationContext(\"jaxb2OxmNamespaceHandlerTest.xml\", getClass());\n+    }\n+\n+    public void testContextPathMarshaller() throws Exception {\n+        applicationContext.getBean(\"contextPathMarshaller\", Jaxb2Marshaller.class);\n+    }\n+\n+    public void testClassesToBeBoundMarshaller() throws Exception {\n+        applicationContext.getBean(\"classesMarshaller\", Jaxb2Marshaller.class);\n+    }\n+\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "aa81c6ae91e37b5722fd51b797ff3422abf60a06",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/config/OxmNamespaceHandlerTest.java",
            "status": "added",
            "additions": 52,
            "deletions": 0,
            "changes": 52,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fconfig%2FOxmNamespaceHandlerTest.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fconfig%2FOxmNamespaceHandlerTest.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fconfig%2FOxmNamespaceHandlerTest.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright ${YEAR} the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.config;\n+\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+import org.springframework.oxm.jaxb.Jaxb1Marshaller;\n+import org.springframework.oxm.jibx.JibxMarshaller;\n+import org.springframework.oxm.xmlbeans.XmlBeansMarshaller;\n+\n+import junit.framework.TestCase;\n+import org.apache.xmlbeans.XmlOptions;\n+\n+public class OxmNamespaceHandlerTest extends TestCase {\n+\n+    private ApplicationContext applicationContext;\n+\n+    protected void setUp() throws Exception {\n+        applicationContext = new ClassPathXmlApplicationContext(\"oxmNamespaceHandlerTest.xml\", getClass());\n+    }\n+\n+    public void testJaxb1Marshaller() throws Exception {\n+        applicationContext.getBean(\"jaxb1Marshaller\", Jaxb1Marshaller.class);\n+    }\n+\n+    public void testJibxMarshaller() throws Exception {\n+        applicationContext.getBean(\"jibxMarshaller\", JibxMarshaller.class);\n+    }\n+\n+    public void testXmlBeansMarshaller() throws Exception {\n+        XmlBeansMarshaller marshaller =\n+                (XmlBeansMarshaller) applicationContext.getBean(\"xmlBeansMarshaller\", XmlBeansMarshaller.class);\n+        XmlOptions options = marshaller.getXmlOptions();\n+        assertNotNull(\"Options not set\", options);\n+        assertTrue(\"option not set\", options.hasOption(\"SAVE_PRETTY_PRINT\"));\n+        assertEquals(\"option not set\", \"true\", options.get(\"SAVE_PRETTY_PRINT\"));\n+    }\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "3e7895463fd649c3be3f6d7aa14da8b969826ed5",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/jaxb/AbstractJaxbMarshallerTestCase.java",
            "status": "added",
            "additions": 56,
            "deletions": 0,
            "changes": 56,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FAbstractJaxbMarshallerTestCase.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FAbstractJaxbMarshallerTestCase.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FAbstractJaxbMarshallerTestCase.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2006 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.jaxb;\n+\n+import javax.xml.transform.sax.SAXResult;\n+\n+import org.easymock.MockControl;\n+import org.xml.sax.ContentHandler;\n+\n+import org.springframework.oxm.AbstractMarshallerTestCase;\n+\n+public abstract class AbstractJaxbMarshallerTestCase extends AbstractMarshallerTestCase {\n+\n+    public void testMarshalSaxResult() throws Exception {\n+        MockControl handlerControl = MockControl.createStrictControl(ContentHandler.class);\n+        ContentHandler handlerMock = (ContentHandler) handlerControl.getMock();\n+        handlerMock.setDocumentLocator(null);\n+        handlerControl.setMatcher(MockControl.ALWAYS_MATCHER);\n+        handlerMock.startDocument();\n+        handlerMock.startPrefixMapping(\"\", \"http://samples.springframework.org/flight\");\n+        handlerMock.startElement(\"http://samples.springframework.org/flight\", \"flights\", \"flights\", null);\n+        handlerControl.setMatcher(MockControl.ALWAYS_MATCHER);\n+        handlerMock.startElement(\"http://samples.springframework.org/flight\", \"flight\", \"flight\", null);\n+        handlerControl.setMatcher(MockControl.ALWAYS_MATCHER);\n+        handlerMock.startElement(\"http://samples.springframework.org/flight\", \"number\", \"number\", null);\n+        handlerControl.setMatcher(MockControl.ALWAYS_MATCHER);\n+        handlerMock.characters(new char[]{'4', '2'}, 0, 2);\n+        handlerControl.setMatcher(MockControl.ALWAYS_MATCHER);\n+        handlerMock.endElement(\"http://samples.springframework.org/flight\", \"number\", \"number\");\n+        handlerMock.endElement(\"http://samples.springframework.org/flight\", \"flight\", \"flight\");\n+        handlerMock.endElement(\"http://samples.springframework.org/flight\", \"flights\", \"flights\");\n+        handlerMock.endPrefixMapping(\"\");\n+        handlerMock.endDocument();\n+\n+        handlerControl.replay();\n+        SAXResult result = new SAXResult(handlerMock);\n+        marshaller.marshal(flights, result);\n+        handlerControl.verify();\n+    }\n+\n+\n+}"
        },
        {
            "sha": "7f15d0417f3dc908ee5e9320af0aa9997b5d9ad3",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/jaxb/BinaryObject.java",
            "status": "added",
            "additions": 57,
            "deletions": 0,
            "changes": 57,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FBinaryObject.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FBinaryObject.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FBinaryObject.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2007 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.jaxb;\n+\n+import javax.activation.DataHandler;\n+import javax.xml.bind.annotation.XmlAttachmentRef;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlRootElement(namespace = \"http://springframework.org/spring-ws\")\n+public class BinaryObject {\n+\n+    @XmlElement(namespace = \"http://springframework.org/spring-ws\")\n+    private byte[] bytes;\n+\n+    @XmlElement(namespace = \"http://springframework.org/spring-ws\")\n+    private DataHandler dataHandler;\n+\n+    @XmlElement(namespace = \"http://springframework.org/spring-ws\")\n+    @XmlAttachmentRef\n+    private DataHandler swaDataHandler;\n+\n+    public BinaryObject() {\n+    }\n+\n+    public BinaryObject(byte[] bytes, DataHandler dataHandler) {\n+        this.bytes = bytes;\n+        this.dataHandler = dataHandler;\n+        swaDataHandler = dataHandler;\n+    }\n+\n+    public byte[] getBytes() {\n+        return bytes;\n+    }\n+\n+    public DataHandler getDataHandler() {\n+        return dataHandler;\n+    }\n+\n+    public DataHandler getSwaDataHandler() {\n+        return swaDataHandler;\n+    }\n+}"
        },
        {
            "sha": "74e3018ac1db263b7781e2980e5e44b4d419e3ac",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb1MarshallerTest.java",
            "status": "added",
            "additions": 82,
            "deletions": 0,
            "changes": 82,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxb1MarshallerTest.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxb1MarshallerTest.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxb1MarshallerTest.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm.jaxb;\n+\n+import java.util.Collections;\n+\n+import org.springframework.oxm.Marshaller;\n+import org.springframework.oxm.XmlMappingException;\n+import org.springframework.oxm.jaxb1.FlightType;\n+import org.springframework.oxm.jaxb1.Flights;\n+import org.springframework.oxm.jaxb1.FlightsType;\n+import org.springframework.oxm.jaxb1.impl.FlightTypeImpl;\n+import org.springframework.oxm.jaxb1.impl.FlightsImpl;\n+\n+public class Jaxb1MarshallerTest extends AbstractJaxbMarshallerTestCase {\n+\n+    private static final String CONTEXT_PATH = \"org.springframework.oxm.jaxb1\";\n+\n+    protected final Marshaller createMarshaller() throws Exception {\n+        Jaxb1Marshaller marshaller = new Jaxb1Marshaller();\n+        marshaller.setContextPaths(new String[]{CONTEXT_PATH});\n+        marshaller.afterPropertiesSet();\n+        return marshaller;\n+    }\n+\n+    protected Object createFlights() {\n+        FlightType flight = new FlightTypeImpl();\n+        flight.setNumber(42L);\n+        Flights flights = new FlightsImpl();\n+        flights.getFlight().add(flight);\n+        return flights;\n+    }\n+\n+    public void testProperties() throws Exception {\n+        Jaxb1Marshaller marshaller = new Jaxb1Marshaller();\n+        marshaller.setContextPath(CONTEXT_PATH);\n+        marshaller.setMarshallerProperties(\n+                Collections.singletonMap(javax.xml.bind.Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE));\n+        marshaller.afterPropertiesSet();\n+    }\n+\n+    public void testNoContextPath() throws Exception {\n+        try {\n+            Jaxb1Marshaller marshaller = new Jaxb1Marshaller();\n+            marshaller.afterPropertiesSet();\n+            fail(\"Should have thrown an IllegalArgumentException\");\n+        }\n+        catch (IllegalArgumentException e) {\n+        }\n+    }\n+\n+    public void testInvalidContextPath() throws Exception {\n+        try {\n+            Jaxb1Marshaller marshaller = new Jaxb1Marshaller();\n+            marshaller.setContextPath(\"ab\");\n+            marshaller.afterPropertiesSet();\n+            fail(\"Should have thrown an XmlMappingException\");\n+        }\n+        catch (XmlMappingException ex) {\n+        }\n+    }\n+\n+    public void testSupports() throws Exception {\n+        assertTrue(\"Jaxb1Marshaller does not support Flights\", marshaller.supports(Flights.class));\n+        assertFalse(\"Jaxb1Marshaller supports FlightsType\", marshaller.supports(FlightsType.class));\n+    }\n+\n+\n+}"
        },
        {
            "sha": "692f03141df046c7b47190ff8c899532bdc33f63",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb1UnmarshallerTest.java",
            "status": "added",
            "additions": 46,
            "deletions": 0,
            "changes": 46,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxb1UnmarshallerTest.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxb1UnmarshallerTest.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxb1UnmarshallerTest.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm.jaxb;\n+\n+import org.springframework.oxm.AbstractUnmarshallerTestCase;\n+import org.springframework.oxm.Unmarshaller;\n+import org.springframework.oxm.jaxb1.FlightType;\n+import org.springframework.oxm.jaxb1.Flights;\n+\n+public class Jaxb1UnmarshallerTest extends AbstractUnmarshallerTestCase {\n+\n+    protected Unmarshaller createUnmarshaller() throws Exception {\n+        Jaxb1Marshaller marshaller = new Jaxb1Marshaller();\n+        marshaller.setContextPath(\"org.springframework.oxm.jaxb1\");\n+        marshaller.setValidating(true);\n+        marshaller.afterPropertiesSet();\n+        return marshaller;\n+    }\n+\n+    protected void testFlights(Object o) {\n+        Flights flights = (Flights) o;\n+        assertNotNull(\"Flights is null\", flights);\n+        assertEquals(\"Invalid amount of flight elements\", 1, flights.getFlight().size());\n+        testFlight(flights.getFlight().get(0));\n+    }\n+\n+    protected void testFlight(Object o) {\n+        FlightType flight = (FlightType) o;\n+        assertNotNull(\"Flight is null\", flight);\n+        assertEquals(\"Number is invalid\", 42L, flight.getNumber());\n+    }\n+\n+}"
        },
        {
            "sha": "9172e67d308877ad4b5f22f19fd6e8cd47225493",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTest.java",
            "status": "added",
            "additions": 329,
            "deletions": 0,
            "changes": 329,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxb2MarshallerTest.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxb2MarshallerTest.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxb2MarshallerTest.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,329 @@\n+/*\n+ * Copyright 2006 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.jaxb;\n+\n+import java.awt.*;\n+import java.io.ByteArrayOutputStream;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.net.URI;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.UUID;\n+import javax.activation.DataHandler;\n+import javax.activation.FileDataSource;\n+import javax.xml.bind.JAXBElement;\n+import javax.xml.datatype.Duration;\n+import javax.xml.datatype.XMLGregorianCalendar;\n+import javax.xml.namespace.QName;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.Result;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.sax.SAXResult;\n+import javax.xml.transform.stax.StAXResult;\n+import javax.xml.transform.stream.StreamResult;\n+\n+import org.custommonkey.xmlunit.XMLTestCase;\n+import static org.easymock.EasyMock.*;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Text;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.ContentHandler;\n+import org.xml.sax.Locator;\n+\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.oxm.XmlMappingException;\n+import org.springframework.oxm.jaxb2.FlightType;\n+import org.springframework.oxm.jaxb2.Flights;\n+import org.springframework.oxm.jaxb2.ObjectFactory;\n+import org.springframework.oxm.mime.MimeContainer;\n+import org.springframework.util.FileCopyUtils;\n+import org.springframework.xml.transform.StaxResult;\n+import org.springframework.xml.transform.StringResult;\n+\n+public class Jaxb2MarshallerTest extends XMLTestCase {\n+\n+    private static final String CONTEXT_PATH = \"org.springframework.oxm.jaxb2\";\n+\n+    private static final String EXPECTED_STRING =\n+            \"<tns:flights xmlns:tns=\\\"http://samples.springframework.org/flight\\\">\" +\n+                    \"<tns:flight><tns:number>42</tns:number></tns:flight></tns:flights>\";\n+\n+    private Jaxb2Marshaller marshaller;\n+\n+    private Flights flights;\n+\n+    protected void setUp() throws Exception {\n+        marshaller = new Jaxb2Marshaller();\n+        marshaller.setContextPath(CONTEXT_PATH);\n+        marshaller.afterPropertiesSet();\n+        FlightType flight = new FlightType();\n+        flight.setNumber(42L);\n+        flights = new Flights();\n+        flights.getFlight().add(flight);\n+    }\n+\n+    public void testMarshalDOMResult() throws Exception {\n+        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n+        DocumentBuilder builder = documentBuilderFactory.newDocumentBuilder();\n+        Document document = builder.newDocument();\n+        DOMResult domResult = new DOMResult(document);\n+        marshaller.marshal(flights, domResult);\n+        Document expected = builder.newDocument();\n+        Element flightsElement = expected.createElementNS(\"http://samples.springframework.org/flight\", \"tns:flights\");\n+        expected.appendChild(flightsElement);\n+        Element flightElement = expected.createElementNS(\"http://samples.springframework.org/flight\", \"tns:flight\");\n+        flightsElement.appendChild(flightElement);\n+        Element numberElement = expected.createElementNS(\"http://samples.springframework.org/flight\", \"tns:number\");\n+        flightElement.appendChild(numberElement);\n+        Text text = expected.createTextNode(\"42\");\n+        numberElement.appendChild(text);\n+        assertXMLEqual(\"Marshaller writes invalid DOMResult\", expected, document);\n+    }\n+\n+    public void testMarshalStreamResultWriter() throws Exception {\n+        StringWriter writer = new StringWriter();\n+        StreamResult result = new StreamResult(writer);\n+        marshaller.marshal(flights, result);\n+        assertXMLEqual(\"Marshaller writes invalid StreamResult\", EXPECTED_STRING, writer.toString());\n+    }\n+\n+    public void testMarshalStreamResultOutputStream() throws Exception {\n+        ByteArrayOutputStream os = new ByteArrayOutputStream();\n+        StreamResult result = new StreamResult(os);\n+        marshaller.marshal(flights, result);\n+        assertXMLEqual(\"Marshaller writes invalid StreamResult\", EXPECTED_STRING,\n+                new String(os.toByteArray(), \"UTF-8\"));\n+    }\n+\n+    public void testMarshalStaxResultXMLStreamWriter() throws Exception {\n+        XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();\n+        StringWriter writer = new StringWriter();\n+        XMLStreamWriter streamWriter = outputFactory.createXMLStreamWriter(writer);\n+        StaxResult result = new StaxResult(streamWriter);\n+        marshaller.marshal(flights, result);\n+        assertXMLEqual(\"Marshaller writes invalid StreamResult\", EXPECTED_STRING, writer.toString());\n+    }\n+\n+    public void testMarshalStaxResultXMLEventWriter() throws Exception {\n+        XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();\n+        StringWriter writer = new StringWriter();\n+        XMLEventWriter eventWriter = outputFactory.createXMLEventWriter(writer);\n+        StaxResult result = new StaxResult(eventWriter);\n+        marshaller.marshal(flights, result);\n+        assertXMLEqual(\"Marshaller writes invalid StreamResult\", EXPECTED_STRING, writer.toString());\n+    }\n+\n+    public void testMarshalStaxResultXMLStreamWriterJaxp14() throws Exception {\n+        XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();\n+        StringWriter writer = new StringWriter();\n+        XMLStreamWriter streamWriter = outputFactory.createXMLStreamWriter(writer);\n+        StAXResult result = new StAXResult(streamWriter);\n+        marshaller.marshal(flights, result);\n+        assertXMLEqual(\"Marshaller writes invalid StreamResult\", EXPECTED_STRING, writer.toString());\n+    }\n+\n+    public void testMarshalStaxResultXMLEventWriterJaxp14() throws Exception {\n+        XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();\n+        StringWriter writer = new StringWriter();\n+        XMLEventWriter eventWriter = outputFactory.createXMLEventWriter(writer);\n+        StAXResult result = new StAXResult(eventWriter);\n+        marshaller.marshal(flights, result);\n+        assertXMLEqual(\"Marshaller writes invalid StreamResult\", EXPECTED_STRING, writer.toString());\n+    }\n+\n+    public void testProperties() throws Exception {\n+        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\n+        marshaller.setContextPath(CONTEXT_PATH);\n+        marshaller.setMarshallerProperties(\n+                Collections.singletonMap(javax.xml.bind.Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE));\n+        marshaller.afterPropertiesSet();\n+    }\n+\n+    public void testNoContextPathOrClassesToBeBound() throws Exception {\n+        try {\n+            Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\n+            marshaller.afterPropertiesSet();\n+            fail(\"Should have thrown an IllegalArgumentException\");\n+        }\n+        catch (IllegalArgumentException e) {\n+        }\n+    }\n+\n+    public void testInvalidContextPath() throws Exception {\n+        try {\n+            Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\n+            marshaller.setContextPath(\"ab\");\n+            marshaller.afterPropertiesSet();\n+            fail(\"Should have thrown an XmlMappingException\");\n+        }\n+        catch (XmlMappingException ex) {\n+        }\n+    }\n+\n+    public void testMarshalInvalidClass() throws Exception {\n+        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\n+        marshaller.setClassesToBeBound(new Class[]{FlightType.class});\n+        marshaller.afterPropertiesSet();\n+        Result result = new StreamResult(new StringWriter());\n+        Flights flights = new Flights();\n+        try {\n+            marshaller.marshal(flights, result);\n+            fail(\"Should have thrown an MarshallingFailureException\");\n+        }\n+        catch (XmlMappingException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testMarshalSaxResult() throws Exception {\n+        ContentHandler handlerMock = createStrictMock(ContentHandler.class);\n+        handlerMock.setDocumentLocator(isA(Locator.class));\n+        handlerMock.startDocument();\n+        handlerMock.startPrefixMapping(\"\", \"http://samples.springframework.org/flight\");\n+        handlerMock.startElement(eq(\"http://samples.springframework.org/flight\"), eq(\"flights\"), eq(\"flights\"),\n+                isA(Attributes.class));\n+        handlerMock.startElement(eq(\"http://samples.springframework.org/flight\"), eq(\"flight\"), eq(\"flight\"),\n+                isA(Attributes.class));\n+        handlerMock.startElement(eq(\"http://samples.springframework.org/flight\"), eq(\"number\"), eq(\"number\"),\n+                isA(Attributes.class));\n+        handlerMock.characters(isA(char[].class), eq(0), eq(2));\n+        handlerMock.endElement(\"http://samples.springframework.org/flight\", \"number\", \"number\");\n+        handlerMock.endElement(\"http://samples.springframework.org/flight\", \"flight\", \"flight\");\n+        handlerMock.endElement(\"http://samples.springframework.org/flight\", \"flights\", \"flights\");\n+        handlerMock.endPrefixMapping(\"\");\n+        handlerMock.endDocument();\n+        replay(handlerMock);\n+\n+        SAXResult result = new SAXResult(handlerMock);\n+        marshaller.marshal(flights, result);\n+        verify(handlerMock);\n+    }\n+\n+    public void testSupportsContextPath() throws Exception {\n+        Method createFlights = ObjectFactory.class.getDeclaredMethod(\"createFlights\");\n+        assertTrue(\"Jaxb2Marshaller does not support Flights\",\n+                marshaller.supports(createFlights.getGenericReturnType()));\n+        Method createFlight = ObjectFactory.class.getDeclaredMethod(\"createFlight\", FlightType.class);\n+        assertTrue(\"Jaxb2Marshaller does not support JAXBElement<FlightsType>\",\n+                marshaller.supports(createFlight.getGenericReturnType()));\n+        assertFalse(\"Jaxb2Marshaller supports non-parameterized JAXBElement\", marshaller.supports(JAXBElement.class));\n+        JAXBElement<Jaxb2MarshallerTest> testElement =\n+                new JAXBElement<Jaxb2MarshallerTest>(new QName(\"something\"), Jaxb2MarshallerTest.class, null, this);\n+        assertFalse(\"Jaxb2Marshaller supports wrong JAXBElement\", marshaller.supports(testElement.getClass()));\n+    }\n+\n+    public void testSupportsClassesToBeBound() throws Exception {\n+        marshaller = new Jaxb2Marshaller();\n+        marshaller.setClassesToBeBound(new Class[]{Flights.class, FlightType.class});\n+        marshaller.afterPropertiesSet();\n+        Method createFlights = ObjectFactory.class.getDeclaredMethod(\"createFlights\");\n+        assertTrue(\"Jaxb2Marshaller does not support Flights\",\n+                marshaller.supports(createFlights.getGenericReturnType()));\n+        Method createFlight = ObjectFactory.class.getDeclaredMethod(\"createFlight\", FlightType.class);\n+        assertTrue(\"Jaxb2Marshaller does not support JAXBElement<FlightsType>\",\n+                marshaller.supports(createFlight.getGenericReturnType()));\n+        assertFalse(\"Jaxb2Marshaller supports non-parameterized JAXBElement\", marshaller.supports(JAXBElement.class));\n+        JAXBElement<Jaxb2MarshallerTest> testElement =\n+                new JAXBElement<Jaxb2MarshallerTest>(new QName(\"something\"), Jaxb2MarshallerTest.class, null, this);\n+        assertFalse(\"Jaxb2Marshaller supports wrong JAXBElement\", marshaller.supports(testElement.getClass()));\n+    }\n+\n+    public void testSupportsPrimitives() throws Exception {\n+        Method primitives = getClass().getDeclaredMethod(\"primitives\", JAXBElement.class, JAXBElement.class,\n+                JAXBElement.class, JAXBElement.class, JAXBElement.class, JAXBElement.class, JAXBElement.class,\n+                JAXBElement.class);\n+        Type[] types = primitives.getGenericParameterTypes();\n+        for (int i = 0; i < types.length; i++) {\n+            ParameterizedType type = (ParameterizedType) types[i];\n+            assertTrue(\"Jaxb2Marshaller does not support \" + type, marshaller.supports(types[i]));\n+        }\n+    }\n+\n+    public void testSupportsStandards() throws Exception {\n+        Method standards = getClass().getDeclaredMethod(\"standards\", JAXBElement.class, JAXBElement.class,\n+                JAXBElement.class, JAXBElement.class, JAXBElement.class, JAXBElement.class, JAXBElement.class,\n+                JAXBElement.class, JAXBElement.class, JAXBElement.class, JAXBElement.class, JAXBElement.class,\n+                JAXBElement.class, JAXBElement.class);\n+        Type[] types = standards.getGenericParameterTypes();\n+        for (int i = 0; i < types.length; i++) {\n+            ParameterizedType type = (ParameterizedType) types[i];\n+            assertTrue(\"Jaxb2Marshaller does not support \" + type, marshaller.supports(types[i]));\n+        }\n+    }\n+\n+    public void testMarshalAttachments() throws Exception {\n+        marshaller = new Jaxb2Marshaller();\n+        marshaller.setClassesToBeBound(new Class[]{BinaryObject.class});\n+        marshaller.setMtomEnabled(true);\n+        marshaller.afterPropertiesSet();\n+        MimeContainer mimeContainer = createMock(MimeContainer.class);\n+\n+        Resource logo = new ClassPathResource(\"spring-ws.png\", getClass());\n+        DataHandler dataHandler = new DataHandler(new FileDataSource(logo.getFile()));\n+\n+        expect(mimeContainer.convertToXopPackage()).andReturn(true);\n+        mimeContainer.addAttachment(isA(String.class), isA(DataHandler.class));\n+        expectLastCall().times(3);\n+\n+        replay(mimeContainer);\n+        byte[] bytes = FileCopyUtils.copyToByteArray(logo.getInputStream());\n+        BinaryObject object = new BinaryObject(bytes, dataHandler);\n+        Result result = new StringResult();\n+        marshaller.marshal(object, result, mimeContainer);\n+        verify(mimeContainer);\n+        assertTrue(\"No XML written\", result.toString().length() > 0);\n+    }\n+\n+    private void primitives(JAXBElement<Boolean> bool,\n+                            JAXBElement<Byte> aByte,\n+                            JAXBElement<Short> aShort,\n+                            JAXBElement<Integer> anInteger,\n+                            JAXBElement<Long> aLong,\n+                            JAXBElement<Float> aFloat,\n+                            JAXBElement<Double> aDouble,\n+                            JAXBElement<byte[]> byteArray) {\n+    }\n+\n+    private void standards(JAXBElement<String> string,\n+                           JAXBElement<BigInteger> integer,\n+                           JAXBElement<BigDecimal> decimal,\n+                           JAXBElement<Calendar> calendar,\n+                           JAXBElement<Date> date,\n+                           JAXBElement<QName> qName,\n+                           JAXBElement<URI> uri,\n+                           JAXBElement<XMLGregorianCalendar> xmlGregorianCalendar,\n+                           JAXBElement<Duration> duration,\n+                           JAXBElement<Object> object,\n+                           JAXBElement<Image> image,\n+                           JAXBElement<DataHandler> dataHandler,\n+                           JAXBElement<Source> source,\n+                           JAXBElement<UUID> uuid) {\n+    }\n+}"
        },
        {
            "sha": "a0689559c1a779bf4e765d97b524fffabe1510b8",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2UnmarshallerTest.java",
            "status": "added",
            "additions": 196,
            "deletions": 0,
            "changes": 196,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxb2UnmarshallerTest.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxb2UnmarshallerTest.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxb2UnmarshallerTest.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2006 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.jaxb;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.StringReader;\n+import javax.activation.DataHandler;\n+import javax.activation.FileDataSource;\n+import javax.xml.bind.JAXBElement;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.stream.XMLEventReader;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLStreamReader;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.sax.SAXSource;\n+import javax.xml.transform.stax.StAXSource;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import junit.framework.TestCase;\n+import static org.easymock.EasyMock.*;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Text;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.XMLReaderFactory;\n+\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.oxm.jaxb2.FlightType;\n+import org.springframework.oxm.jaxb2.Flights;\n+import org.springframework.oxm.mime.MimeContainer;\n+import org.springframework.xml.transform.StaxSource;\n+import org.springframework.xml.transform.StringSource;\n+\n+public class Jaxb2UnmarshallerTest extends TestCase {\n+\n+    private static final String INPUT_STRING = \"<tns:flights xmlns:tns=\\\"http://samples.springframework.org/flight\\\">\" +\n+            \"<tns:flight><tns:number>42</tns:number></tns:flight></tns:flights>\";\n+\n+    private Jaxb2Marshaller unmarshaller;\n+\n+    protected void setUp() throws Exception {\n+        unmarshaller = new Jaxb2Marshaller();\n+        unmarshaller.setContextPath(\"org.springframework.oxm.jaxb2\");\n+        unmarshaller.setSchema(new ClassPathResource(\"org/springframework/oxm/flight.xsd\"));\n+        unmarshaller.afterPropertiesSet();\n+    }\n+\n+    public void testUnmarshalDomSource() throws Exception {\n+        DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+        Document document = builder.newDocument();\n+        Element flightsElement = document.createElementNS(\"http://samples.springframework.org/flight\", \"tns:flights\");\n+        document.appendChild(flightsElement);\n+        Element flightElement = document.createElementNS(\"http://samples.springframework.org/flight\", \"tns:flight\");\n+        flightsElement.appendChild(flightElement);\n+        Element numberElement = document.createElementNS(\"http://samples.springframework.org/flight\", \"tns:number\");\n+        flightElement.appendChild(numberElement);\n+        Text text = document.createTextNode(\"42\");\n+        numberElement.appendChild(text);\n+        DOMSource source = new DOMSource(document);\n+        Object flights = unmarshaller.unmarshal(source);\n+        testFlights(flights);\n+    }\n+\n+    public void testUnmarshalStreamSourceReader() throws Exception {\n+        StreamSource source = new StreamSource(new StringReader(INPUT_STRING));\n+        Object flights = unmarshaller.unmarshal(source);\n+        testFlights(flights);\n+    }\n+\n+    public void testUnmarshalStreamSourceInputStream() throws Exception {\n+        StreamSource source = new StreamSource(new ByteArrayInputStream(INPUT_STRING.getBytes(\"UTF-8\")));\n+        Object flights = unmarshaller.unmarshal(source);\n+        testFlights(flights);\n+    }\n+\n+    public void testUnmarshalSAXSource() throws Exception {\n+        XMLReader reader = XMLReaderFactory.createXMLReader();\n+        SAXSource source = new SAXSource(reader, new InputSource(new StringReader(INPUT_STRING)));\n+        Object flights = unmarshaller.unmarshal(source);\n+        testFlights(flights);\n+    }\n+\n+    public void testUnmarshalStaxSourceXmlStreamReader() throws Exception {\n+        XMLInputFactory inputFactory = XMLInputFactory.newInstance();\n+        XMLStreamReader streamReader = inputFactory.createXMLStreamReader(new StringReader(INPUT_STRING));\n+        StaxSource source = new StaxSource(streamReader);\n+        Object flights = unmarshaller.unmarshal(source);\n+        testFlights(flights);\n+    }\n+\n+    public void testUnmarshalStaxSourceXmlEventReader() throws Exception {\n+        XMLInputFactory inputFactory = XMLInputFactory.newInstance();\n+        XMLEventReader eventReader = inputFactory.createXMLEventReader(new StringReader(INPUT_STRING));\n+        StaxSource source = new StaxSource(eventReader);\n+        Object flights = unmarshaller.unmarshal(source);\n+        testFlights(flights);\n+    }\n+\n+    public void testUnmarshalStaxSourceXmlStreamReaderJaxp14() throws Exception {\n+        XMLInputFactory inputFactory = XMLInputFactory.newInstance();\n+        XMLStreamReader streamReader = inputFactory.createXMLStreamReader(new StringReader(INPUT_STRING));\n+        StAXSource source = new StAXSource(streamReader);\n+        Object flights = unmarshaller.unmarshal(source);\n+        testFlights(flights);\n+    }\n+\n+    public void testUnmarshalStaxSourceXmlEventReaderJaxp14() throws Exception {\n+        XMLInputFactory inputFactory = XMLInputFactory.newInstance();\n+        XMLEventReader eventReader = inputFactory.createXMLEventReader(new StringReader(INPUT_STRING));\n+        StAXSource source = new StAXSource(eventReader);\n+        Object flights = unmarshaller.unmarshal(source);\n+        testFlights(flights);\n+    }\n+\n+    public void testMarshalAttachments() throws Exception {\n+        unmarshaller = new Jaxb2Marshaller();\n+        unmarshaller.setClassesToBeBound(new Class[]{BinaryObject.class});\n+        unmarshaller.setMtomEnabled(true);\n+        unmarshaller.afterPropertiesSet();\n+        MimeContainer mimeContainer = createMock(MimeContainer.class);\n+\n+        Resource logo = new ClassPathResource(\"spring-ws.png\", getClass());\n+        DataHandler dataHandler = new DataHandler(new FileDataSource(logo.getFile()));\n+\n+        expect(mimeContainer.isXopPackage()).andReturn(true);\n+        expect(mimeContainer.getAttachment(\n+                \"<6b76528d-7a9c-4def-8e13-095ab89e9bb7@http://springframework.org/spring-ws>\"))\n+                .andReturn(dataHandler);\n+        expect(mimeContainer.getAttachment(\n+                \"<99bd1592-0521-41a2-9688-a8bfb40192fb@http://springframework.org/spring-ws>\"))\n+                .andReturn(dataHandler);\n+        expect(mimeContainer.getAttachment(\"696cfb9a-4d2d-402f-bb5c-59fa69e7f0b3@spring-ws.png\"))\n+                .andReturn(dataHandler);\n+        replay(mimeContainer);\n+        String content = \"<binaryObject xmlns='http://springframework.org/spring-ws'>\" + \"<bytes>\" +\n+                \"<xop:Include href='cid:6b76528d-7a9c-4def-8e13-095ab89e9bb7@http://springframework.org/spring-ws' xmlns:xop='http://www.w3.org/2004/08/xop/include'/>\" +\n+                \"</bytes>\" + \"<dataHandler>\" +\n+                \"<xop:Include href='cid:99bd1592-0521-41a2-9688-a8bfb40192fb@http://springframework.org/spring-ws' xmlns:xop='http://www.w3.org/2004/08/xop/include'/>\" +\n+                \"</dataHandler>\" +\n+                \"<swaDataHandler>696cfb9a-4d2d-402f-bb5c-59fa69e7f0b3@spring-ws.png</swaDataHandler>\" +\n+                \"</binaryObject>\";\n+\n+        Source source = new StringSource(content);\n+        Object result = unmarshaller.unmarshal(source, mimeContainer);\n+        assertTrue(\"Result is not a BinaryObject\", result instanceof BinaryObject);\n+        verify(mimeContainer);\n+        BinaryObject object = (BinaryObject) result;\n+        assertNotNull(\"bytes property not set\", object.getBytes());\n+        assertTrue(\"bytes property not set\", object.getBytes().length > 0);\n+        assertNotNull(\"datahandler property not set\", object.getSwaDataHandler());\n+    }\n+\n+    private void testFlights(Object o) {\n+        Flights flights = (Flights) o;\n+        assertNotNull(\"Flights is null\", flights);\n+        assertEquals(\"Invalid amount of flight elements\", 1, flights.getFlight().size());\n+        testFlight(flights.getFlight().get(0));\n+    }\n+\n+    private void testFlight(Object o) {\n+        FlightType flight = (FlightType) o;\n+        assertNotNull(\"Flight is null\", flight);\n+        assertEquals(\"Number is invalid\", 42L, flight.getNumber());\n+    }\n+\n+    public void testUnmarshalPartialStaxSourceXmlStreamReader() throws Exception {\n+        XMLInputFactory inputFactory = XMLInputFactory.newInstance();\n+        XMLStreamReader streamReader = inputFactory.createXMLStreamReader(new StringReader(INPUT_STRING));\n+        streamReader.nextTag(); // skip to flights\n+        streamReader.nextTag(); // skip to flight\n+        StaxSource source = new StaxSource(streamReader);\n+        JAXBElement<FlightType> element = (JAXBElement<FlightType>) unmarshaller.unmarshal(source);\n+        FlightType flight = element.getValue();\n+        testFlight(flight);\n+    }\n+\n+\n+}"
        },
        {
            "sha": "393770fb468b6052226015e0c088217fa97899de",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/jaxb/JaxbUtilsTest.java",
            "status": "added",
            "additions": 30,
            "deletions": 0,
            "changes": 30,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxbUtilsTest.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxbUtilsTest.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjaxb%2FJaxbUtilsTest.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2006 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm.jaxb;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.MarshalException;\n+import javax.xml.bind.UnmarshalException;\n+import javax.xml.bind.ValidationException;\n+\n+import junit.framework.TestCase;\n+\n+public class JaxbUtilsTest extends TestCase {\n+\n+    public void testGetJaxbVersion() throws Exception {\n+        assertEquals(\"Invalid JAXB version\", JaxbUtils.JAXB_2, JaxbUtils.getJaxbVersion());\n+    }\n+}"
        },
        {
            "sha": "c34003aa922531800276856195c189cc2190d19d",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/jibx/FlightType.java",
            "status": "added",
            "additions": 30,
            "deletions": 0,
            "changes": 30,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FFlightType.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FFlightType.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FFlightType.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2006 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.jibx;\n+\n+public class FlightType {\n+\n+    protected long number;\n+\n+    public long getNumber() {\n+        return this.number;\n+    }\n+\n+    public void setNumber(long number) {\n+        this.number = number;\n+    }\n+}"
        },
        {
            "sha": "739a3ab9bf20f2e9fca5b09dae32e7ea56dfcca1",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/jibx/Flights.java",
            "status": "added",
            "additions": 36,
            "deletions": 0,
            "changes": 36,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FFlights.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FFlights.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FFlights.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2006 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.jibx;\n+\n+import java.util.ArrayList;\n+\n+public class Flights {\n+\n+    protected ArrayList flightList = new ArrayList();\n+\n+    public void addFlight(FlightType flight) {\n+        flightList.add(flight);\n+    }\n+\n+    public FlightType getFlight(int index) {\n+        return (FlightType) flightList.get(index);\n+    }\n+\n+    public int sizeFlightList() {\n+        return flightList.size();\n+    }\n+}"
        },
        {
            "sha": "38c3fa275feb6d3f818b39e6478e5ae4869fca29",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/jibx/JibxMarshallerTest.java",
            "status": "added",
            "additions": 79,
            "deletions": 0,
            "changes": 79,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxMarshallerTest.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxMarshallerTest.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxMarshallerTest.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2006 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.jibx;\n+\n+import org.custommonkey.xmlunit.XMLUnit;\n+\n+import org.springframework.oxm.AbstractMarshallerTestCase;\n+import org.springframework.oxm.Marshaller;\n+import org.springframework.xml.transform.StringResult;\n+\n+public class JibxMarshallerTest extends AbstractMarshallerTestCase {\n+\n+    protected Marshaller createMarshaller() throws Exception {\n+        JibxMarshaller marshaller = new JibxMarshaller();\n+        marshaller.setTargetClass(Flights.class);\n+        marshaller.afterPropertiesSet();\n+        return marshaller;\n+    }\n+\n+    protected Object createFlights() {\n+        Flights flights = new Flights();\n+        FlightType flight = new FlightType();\n+        flight.setNumber(42L);\n+        flights.addFlight(flight);\n+        return flights;\n+    }\n+\n+    public void testAfterPropertiesSetNoContextPath() throws Exception {\n+        try {\n+            JibxMarshaller marshaller = new JibxMarshaller();\n+            marshaller.afterPropertiesSet();\n+            fail(\"Should have thrown an IllegalArgumentException\");\n+        }\n+        catch (IllegalArgumentException e) {\n+        }\n+    }\n+\n+    public void testIndentation() throws Exception {\n+        ((JibxMarshaller) marshaller).setIndent(4);\n+        StringResult result = new StringResult();\n+        marshaller.marshal(flights, result);\n+        XMLUnit.setIgnoreWhitespace(false);\n+        String expected = \"<?xml version=\\\"1.0\\\"?>\\n\" +\n+                \"<flights xmlns=\\\"http://samples.springframework.org/flight\\\">\\n\" + \"    <flight>\\n\" +\n+                \"        <number>42</number>\\n\" + \"    </flight>\\n\" + \"</flights>\";\n+        assertXMLEqual(expected, result.toString());\n+    }\n+\n+    public void testEncodingAndStandalone() throws Exception {\n+        ((JibxMarshaller) marshaller).setEncoding(\"ISO-8859-1\");\n+        ((JibxMarshaller) marshaller).setStandalone(Boolean.TRUE);\n+        StringResult result = new StringResult();\n+        marshaller.marshal(flights, result);\n+        assertTrue(\"Encoding and standalone not set\",\n+                result.toString().startsWith(\"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\" standalone=\\\"yes\\\"?>\"));\n+    }\n+\n+    public void testSupports() throws Exception {\n+        assertTrue(\"JibxMarshaller does not support Flights\", marshaller.supports(Flights.class));\n+        assertTrue(\"JibxMarshaller does not support FlightType\", marshaller.supports(FlightType.class));\n+        assertFalse(\"JibxMarshaller supports illegal type\", marshaller.supports(getClass()));\n+    }\n+\n+\n+}"
        },
        {
            "sha": "35db639d308806a599b3f946c10534259e3eb4fe",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/jibx/JibxUnmarshallerTest.java",
            "status": "added",
            "additions": 46,
            "deletions": 0,
            "changes": 46,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxUnmarshallerTest.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxUnmarshallerTest.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxUnmarshallerTest.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm.jibx;\n+\n+import org.springframework.oxm.AbstractUnmarshallerTestCase;\n+import org.springframework.oxm.Unmarshaller;\n+\n+public class JibxUnmarshallerTest extends AbstractUnmarshallerTestCase {\n+\n+    protected Unmarshaller createUnmarshaller() throws Exception {\n+        JibxMarshaller unmarshaller = new JibxMarshaller();\n+        unmarshaller.setTargetClass(Flights.class);\n+        unmarshaller.afterPropertiesSet();\n+        return unmarshaller;\n+    }\n+\n+    protected void testFlights(Object o) {\n+        Flights flights = (Flights) o;\n+        assertNotNull(\"Flights is null\", flights);\n+        assertEquals(\"Invalid amount of flight elements\", 1, flights.sizeFlightList());\n+        testFlight(flights.getFlight(0));\n+    }\n+\n+    protected void testFlight(Object o) {\n+        FlightType flight = (FlightType) o;\n+        assertNotNull(\"Flight is null\", flight);\n+        assertEquals(\"Number is invalid\", 42L, flight.getNumber());\n+    }\n+\n+    public void testUnmarshalPartialStaxSourceXmlStreamReader() throws Exception {\n+        // JiBX does not support reading XML fragments, hence the override here\n+    }\n+}"
        },
        {
            "sha": "545139a27d3e20e16761b4c9c6c4d716cf138f77",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/jibx/JibxUtilsTest.java",
            "status": "added",
            "additions": 39,
            "deletions": 0,
            "changes": 39,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxUtilsTest.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxUtilsTest.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fjibx%2FJibxUtilsTest.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2006 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.jibx;\n+\n+import junit.framework.TestCase;\n+import org.jibx.runtime.JiBXException;\n+import org.jibx.runtime.ValidationException;\n+\n+public class JibxUtilsTest extends TestCase {\n+\n+    public void testConvertMarshallingException() throws Exception {\n+        assertTrue(\"Invalid exception conversion\",\n+                JibxUtils.convertJibxException(new JiBXException(\"\"), true) instanceof JibxMarshallingFailureException);\n+    }\n+\n+    public void testConvertUnmarshallingException() throws Exception {\n+        assertTrue(\"Invalid exception conversion\", JibxUtils\n+                .convertJibxException(new JiBXException(\"\"), false) instanceof JibxUnmarshallingFailureException);\n+    }\n+\n+    public void testConvertValidationException() throws Exception {\n+        assertTrue(\"Invalid exception conversion\", JibxUtils\n+                .convertJibxException(new ValidationException(\"\"), true) instanceof JibxValidationFailureException);\n+    }\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "3ec3682568de3905d22729f14fb1b92af1a0ae60",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/support/MarshallingMessageConverterTest.java",
            "status": "added",
            "additions": 156,
            "deletions": 0,
            "changes": 156,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fsupport%2FMarshallingMessageConverterTest.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fsupport%2FMarshallingMessageConverterTest.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fsupport%2FMarshallingMessageConverterTest.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2007 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.support;\n+\n+import javax.jms.BytesMessage;\n+import javax.jms.Session;\n+import javax.jms.TextMessage;\n+\n+import junit.framework.TestCase;\n+import org.easymock.MockControl;\n+\n+import org.springframework.oxm.Marshaller;\n+import org.springframework.oxm.Unmarshaller;\n+import org.springframework.xml.transform.StringResult;\n+import org.springframework.xml.transform.StringSource;\n+\n+public class MarshallingMessageConverterTest extends TestCase {\n+\n+    private MarshallingMessageConverter converter;\n+\n+    private MockControl marshallerControl;\n+\n+    private Marshaller marshallerMock;\n+\n+    private MockControl unmarshallerControl;\n+\n+    private Unmarshaller unmarshallerMock;\n+\n+    private MockControl sessionControl;\n+\n+    private Session sessionMock;\n+\n+    protected void setUp() throws Exception {\n+        marshallerControl = MockControl.createControl(Marshaller.class);\n+        marshallerMock = (Marshaller) marshallerControl.getMock();\n+        unmarshallerControl = MockControl.createControl(Unmarshaller.class);\n+        unmarshallerMock = (Unmarshaller) unmarshallerControl.getMock();\n+        converter = new MarshallingMessageConverter(marshallerMock, unmarshallerMock);\n+        sessionControl = MockControl.createControl(Session.class);\n+        sessionMock = (Session) sessionControl.getMock();\n+\n+    }\n+\n+    public void testToBytesMessage() throws Exception {\n+        MockControl bytesMessageControl = MockControl.createControl(BytesMessage.class);\n+        BytesMessage bytesMessageMock = (BytesMessage) bytesMessageControl.getMock();\n+        Object toBeMarshalled = new Object();\n+\n+        sessionControl.expectAndReturn(sessionMock.createBytesMessage(), bytesMessageMock);\n+        marshallerMock.marshal(toBeMarshalled, new StringResult());\n+        marshallerControl.setMatcher(MockControl.ALWAYS_MATCHER);\n+        bytesMessageMock.writeBytes(new byte[0]);\n+        bytesMessageControl.setMatcher(MockControl.ALWAYS_MATCHER);\n+\n+        marshallerControl.replay();\n+        unmarshallerControl.replay();\n+        sessionControl.replay();\n+        bytesMessageControl.replay();\n+\n+        converter.toMessage(toBeMarshalled, sessionMock);\n+\n+        marshallerControl.verify();\n+        unmarshallerControl.verify();\n+        sessionControl.verify();\n+        bytesMessageControl.verify();\n+    }\n+\n+    public void testFromBytesMessage() throws Exception {\n+        MockControl bytesMessageControl = MockControl.createControl(BytesMessage.class);\n+        BytesMessage bytesMessageMock = (BytesMessage) bytesMessageControl.getMock();\n+        Object unmarshalled = new Object();\n+\n+        bytesMessageControl.expectAndReturn(bytesMessageMock.getBodyLength(), 10);\n+        bytesMessageMock.readBytes(new byte[0]);\n+        bytesMessageControl.setMatcher(MockControl.ALWAYS_MATCHER);\n+        bytesMessageControl.setReturnValue(0);\n+        unmarshallerMock.unmarshal(new StringSource(\"\"));\n+        unmarshallerControl.setMatcher(MockControl.ALWAYS_MATCHER);\n+        unmarshallerControl.setReturnValue(unmarshalled);\n+\n+        marshallerControl.replay();\n+        unmarshallerControl.replay();\n+        sessionControl.replay();\n+        bytesMessageControl.replay();\n+\n+        Object result = converter.fromMessage(bytesMessageMock);\n+        assertEquals(\"Invalid result\", result, unmarshalled);\n+\n+        marshallerControl.verify();\n+        unmarshallerControl.verify();\n+        sessionControl.verify();\n+        bytesMessageControl.verify();\n+    }\n+\n+    public void testToTextMessage() throws Exception {\n+        converter.setMarshalTo(MarshallingMessageConverter.MARSHAL_TO_TEXT_MESSAGE);\n+        MockControl textMessageControl = MockControl.createControl(TextMessage.class);\n+        TextMessage textMessageMock = (TextMessage) textMessageControl.getMock();\n+        Object toBeMarshalled = new Object();\n+\n+        sessionControl.expectAndReturn(sessionMock.createTextMessage(\"\"), textMessageMock);\n+        marshallerMock.marshal(toBeMarshalled, new StringResult());\n+        marshallerControl.setMatcher(MockControl.ALWAYS_MATCHER);\n+\n+        marshallerControl.replay();\n+        unmarshallerControl.replay();\n+        sessionControl.replay();\n+        textMessageControl.replay();\n+\n+        converter.toMessage(toBeMarshalled, sessionMock);\n+\n+        marshallerControl.verify();\n+        unmarshallerControl.verify();\n+        sessionControl.verify();\n+        textMessageControl.verify();\n+    }\n+\n+    public void testFromTextMessage() throws Exception {\n+        MockControl textMessageControl = MockControl.createControl(TextMessage.class);\n+        TextMessage textMessageMock = (TextMessage) textMessageControl.getMock();\n+        Object unmarshalled = new Object();\n+\n+        unmarshallerMock.unmarshal(new StringSource(\"\"));\n+        unmarshallerControl.setMatcher(MockControl.ALWAYS_MATCHER);\n+        unmarshallerControl.setReturnValue(unmarshalled);\n+        textMessageControl.expectAndReturn(textMessageMock.getText(), \"\");\n+\n+        marshallerControl.replay();\n+        unmarshallerControl.replay();\n+        sessionControl.replay();\n+        textMessageControl.replay();\n+\n+        Object result = converter.fromMessage(textMessageMock);\n+        assertEquals(\"Invalid result\", result, unmarshalled);\n+\n+        marshallerControl.verify();\n+        unmarshallerControl.verify();\n+        sessionControl.verify();\n+        textMessageControl.verify();\n+    }\n+\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "54d982e37973c24801aaf0743bea240bcfd8e95c",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/support/MarshallingViewTest.java",
            "status": "added",
            "additions": 135,
            "deletions": 0,
            "changes": 135,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fsupport%2FMarshallingViewTest.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fsupport%2FMarshallingViewTest.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fsupport%2FMarshallingViewTest.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2007 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.support;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.servlet.ServletException;\n+import javax.xml.transform.stream.StreamResult;\n+\n+import junit.framework.Assert;\n+import junit.framework.TestCase;\n+import org.easymock.MockControl;\n+\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import org.springframework.oxm.Marshaller;\n+\n+public class MarshallingViewTest extends TestCase {\n+\n+    private MarshallingView view;\n+\n+    private MockControl control;\n+\n+    private Marshaller marshallerMock;\n+\n+    protected void setUp() throws Exception {\n+        control = MockControl.createControl(Marshaller.class);\n+        marshallerMock = (Marshaller) control.getMock();\n+        view = new MarshallingView(marshallerMock);\n+    }\n+\n+    public void testGetContentType() {\n+        Assert.assertEquals(\"Invalid content type\", \"application/xml\", view.getContentType());\n+    }\n+\n+    public void testRenderModelKey() throws Exception {\n+        Object toBeMarshalled = new Object();\n+        String modelKey = \"key\";\n+        view.setModelKey(modelKey);\n+        Map model = new HashMap();\n+        model.put(modelKey, toBeMarshalled);\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        MockHttpServletResponse response = new MockHttpServletResponse();\n+\n+        control.expectAndReturn(marshallerMock.supports(Object.class), true);\n+        marshallerMock.marshal(toBeMarshalled, new StreamResult(response.getOutputStream()));\n+        control.setMatcher(MockControl.ALWAYS_MATCHER);\n+\n+        control.replay();\n+        view.render(model, request, response);\n+        Assert.assertEquals(\"Invalid content type\", \"application/xml\", response.getContentType());\n+        Assert.assertEquals(\"Invalid content length\", 0, response.getContentLength());\n+        control.verify();\n+    }\n+\n+    public void testRenderModelKeyUnsupported() throws Exception {\n+        Object toBeMarshalled = new Object();\n+        String modelKey = \"key\";\n+        view.setModelKey(modelKey);\n+        Map model = new HashMap();\n+        model.put(modelKey, toBeMarshalled);\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        MockHttpServletResponse response = new MockHttpServletResponse();\n+\n+        control.expectAndReturn(marshallerMock.supports(Object.class), false);\n+\n+        control.replay();\n+        try {\n+            view.render(model, request, response);\n+            fail(\"ServletException expected\");\n+        }\n+        catch (ServletException ex) {\n+            // expected\n+        }\n+        control.verify();\n+    }\n+\n+    public void testRenderNoModelKey() throws Exception {\n+        Object toBeMarshalled = new Object();\n+        String modelKey = \"key\";\n+        Map model = new HashMap();\n+        model.put(modelKey, toBeMarshalled);\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        MockHttpServletResponse response = new MockHttpServletResponse();\n+\n+        control.expectAndReturn(marshallerMock.supports(Object.class), true);\n+        marshallerMock.marshal(toBeMarshalled, new StreamResult(response.getOutputStream()));\n+        control.setMatcher(MockControl.ALWAYS_MATCHER);\n+\n+        control.replay();\n+        view.render(model, request, response);\n+        Assert.assertEquals(\"Invalid content type\", \"application/xml\", response.getContentType());\n+        Assert.assertEquals(\"Invalid content length\", 0, response.getContentLength());\n+        control.verify();\n+    }\n+\n+    public void testRenderUnsupportedModel() throws Exception {\n+        Object toBeMarshalled = new Object();\n+        String modelKey = \"key\";\n+        Map model = new HashMap();\n+        model.put(modelKey, toBeMarshalled);\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        MockHttpServletResponse response = new MockHttpServletResponse();\n+\n+        control.expectAndReturn(marshallerMock.supports(Object.class), false);\n+\n+        control.replay();\n+        try {\n+            view.render(model, request, response);\n+            fail(\"ServletException expected\");\n+        }\n+        catch (ServletException ex) {\n+            // expected\n+        }\n+        control.verify();\n+    }\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "5a390a77a3b64e0310b5577fac53de74df63d9cf",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/xmlbeans/XmlBeansMarshallerTest.java",
            "status": "added",
            "additions": 59,
            "deletions": 0,
            "changes": 59,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansMarshallerTest.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansMarshallerTest.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansMarshallerTest.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm.xmlbeans;\n+\n+import java.io.ByteArrayOutputStream;\n+import javax.xml.transform.stream.StreamResult;\n+\n+import org.apache.xmlbeans.XmlObject;\n+import org.springframework.oxm.AbstractMarshallerTestCase;\n+import org.springframework.oxm.Marshaller;\n+import org.springframework.samples.flight.FlightType;\n+import org.springframework.samples.flight.FlightsDocument;\n+import org.springframework.samples.flight.FlightsDocument.Flights;\n+\n+public class XmlBeansMarshallerTest extends AbstractMarshallerTestCase {\n+\n+    protected Marshaller createMarshaller() throws Exception {\n+        return new XmlBeansMarshaller();\n+    }\n+\n+    public void testMarshalNonXmlObject() throws Exception {\n+        try {\n+            marshaller.marshal(new Object(), new StreamResult(new ByteArrayOutputStream()));\n+            fail(\"XmlBeansMarshaller did not throw ClassCastException for non-XmlObject\");\n+        }\n+        catch (ClassCastException e) {\n+            // Expected behavior\n+        }\n+    }\n+\n+    protected Object createFlights() {\n+        FlightsDocument flightsDocument = FlightsDocument.Factory.newInstance();\n+        Flights flights = flightsDocument.addNewFlights();\n+        FlightType flightType = flights.addNewFlight();\n+        flightType.setNumber(42L);\n+        return flightsDocument;\n+    }\n+\n+    public void testSupports() throws Exception {\n+        assertTrue(\"XmlBeansMarshaller does not support XmlObject\", marshaller.supports(XmlObject.class));\n+        assertFalse(\"XmlBeansMarshaller supports other objects\", marshaller.supports(Object.class));\n+        assertTrue(\"XmlBeansMarshaller does not support FlightsDocument\", marshaller.supports(FlightsDocument.class));\n+        assertTrue(\"XmlBeansMarshaller does not support Flights\", marshaller.supports(Flights.class));\n+        assertTrue(\"XmlBeansMarshaller does not support FlightType\", marshaller.supports(FlightType.class));\n+    }\n+}"
        },
        {
            "sha": "ab6c835960ae84680ffbf1d719fedc42b5ac3a3b",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/xmlbeans/XmlBeansUnmarshallerTest.java",
            "status": "added",
            "additions": 89,
            "deletions": 0,
            "changes": 89,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansUnmarshallerTest.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansUnmarshallerTest.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansUnmarshallerTest.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm.xmlbeans;\n+\n+import java.io.StringReader;\n+import javax.xml.namespace.QName;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLStreamReader;\n+\n+import org.springframework.oxm.AbstractUnmarshallerTestCase;\n+import org.springframework.oxm.Unmarshaller;\n+import org.springframework.samples.flight.FlightDocument;\n+import org.springframework.samples.flight.FlightType;\n+import org.springframework.samples.flight.FlightsDocument;\n+import org.springframework.samples.flight.FlightsDocument.Flights;\n+import org.springframework.xml.transform.StaxSource;\n+import org.springframework.xml.transform.StringSource;\n+\n+public class XmlBeansUnmarshallerTest extends AbstractUnmarshallerTestCase {\n+\n+    protected Unmarshaller createUnmarshaller() throws Exception {\n+        return new XmlBeansMarshaller();\n+    }\n+\n+    protected void testFlights(Object o) {\n+        FlightsDocument flightsDocument = (FlightsDocument) o;\n+        assertNotNull(\"FlightsDocument is null\", flightsDocument);\n+        Flights flights = flightsDocument.getFlights();\n+        assertEquals(\"Invalid amount of flight elements\", 1, flights.sizeOfFlightArray());\n+        testFlight(flights.getFlightArray(0));\n+    }\n+\n+    protected void testFlight(Object o) {\n+        FlightType flight = null;\n+        if (o instanceof FlightType) {\n+            flight = (FlightType) o;\n+        }\n+        else if (o instanceof FlightDocument) {\n+            FlightDocument flightDocument = (FlightDocument) o;\n+            flight = flightDocument.getFlight();\n+        }\n+        assertNotNull(\"Flight is null\", flight);\n+        assertEquals(\"Number is invalid\", 42L, flight.getNumber());\n+    }\n+\n+    public void testUnmarshalPartialStaxSourceXmlStreamReader() throws Exception {\n+        XMLInputFactory inputFactory = XMLInputFactory.newInstance();\n+        XMLStreamReader streamReader = inputFactory.createXMLStreamReader(new StringReader(INPUT_STRING));\n+        streamReader.nextTag(); // skip to flights\n+        assertEquals(\"Invalid element\", new QName(\"http://samples.springframework.org/flight\", \"flights\"),\n+                streamReader.getName());\n+        streamReader.nextTag(); // skip to flight\n+        assertEquals(\"Invalid element\", new QName(\"http://samples.springframework.org/flight\", \"flight\"),\n+                streamReader.getName());\n+        StaxSource source = new StaxSource(streamReader);\n+        Object flight = unmarshaller.unmarshal(source);\n+        testFlight(flight);\n+    }\n+\n+    public void testValidate() throws Exception {\n+        ((XmlBeansMarshaller) unmarshaller).setValidating(true);\n+\n+        try {\n+            String invalidInput = \"<tns:flights xmlns:tns=\\\"http://samples.springframework.org/flight\\\">\" +\n+                    \"<tns:flight><tns:number>abc</tns:number></tns:flight></tns:flights>\";\n+            unmarshaller.unmarshal(new StringSource(invalidInput));\n+            fail(\"Expected a XmlBeansValidationFailureException\");\n+        }\n+        catch (XmlBeansValidationFailureException ex) {\n+            // expected\n+        }\n+\n+\n+    }\n+\n+}"
        },
        {
            "sha": "9b765b1fef16e981696ed5e522579ca1c758b518",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/xmlbeans/XmlBeansUtilsTest.java",
            "status": "added",
            "additions": 53,
            "deletions": 0,
            "changes": 53,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansUtilsTest.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansUtilsTest.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlBeansUtilsTest.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2005 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.oxm.xmlbeans;\n+\n+import junit.framework.TestCase;\n+import org.apache.xmlbeans.XMLStreamValidationException;\n+import org.apache.xmlbeans.XmlError;\n+import org.apache.xmlbeans.XmlException;\n+import org.xml.sax.SAXException;\n+\n+public class XmlBeansUtilsTest extends TestCase {\n+\n+    public void testConvertXMLStreamValidationException() {\n+        assertTrue(\"Invalid exception conversion\", XmlBeansUtils.convertXmlBeansException(\n+                new XMLStreamValidationException(XmlError.forMessage(\"\")),\n+                true) instanceof XmlBeansValidationFailureException);\n+\n+    }\n+\n+    public void testConvertXmlException() {\n+        assertTrue(\"Invalid exception conversion\", XmlBeansUtils\n+                .convertXmlBeansException(new XmlException(\"\"), true) instanceof XmlBeansMarshallingFailureException);\n+        assertTrue(\"Invalid exception conversion\", XmlBeansUtils.convertXmlBeansException(new XmlException(\"\"),\n+                false) instanceof XmlBeansUnmarshallingFailureException);\n+    }\n+\n+    public void testConvertSAXException() {\n+        assertTrue(\"Invalid exception conversion\", XmlBeansUtils\n+                .convertXmlBeansException(new SAXException(\"\"), true) instanceof XmlBeansMarshallingFailureException);\n+        assertTrue(\"Invalid exception conversion\", XmlBeansUtils.convertXmlBeansException(new SAXException(\"\"),\n+                false) instanceof XmlBeansUnmarshallingFailureException);\n+    }\n+\n+    public void testFallbackException() {\n+        assertTrue(\"Invalid exception conversion\",\n+                XmlBeansUtils.convertXmlBeansException(new Exception(\"\"), false) instanceof XmlBeansSystemException);\n+\n+    }\n+\n+}"
        },
        {
            "sha": "26fc31de947b6d996867a78ad71f208bba121f74",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/xmlbeans/XmlOptionsFactoryBeanTest.java",
            "status": "added",
            "additions": 40,
            "deletions": 0,
            "changes": 40,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlOptionsFactoryBeanTest.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlOptionsFactoryBeanTest.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxmlbeans%2FXmlOptionsFactoryBeanTest.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2006 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.xmlbeans;\n+\n+import java.util.Collections;\n+\n+import junit.framework.TestCase;\n+import org.apache.xmlbeans.XmlOptions;\n+\n+public class XmlOptionsFactoryBeanTest extends TestCase {\n+\n+    private XmlOptionsFactoryBean factoryBean;\n+\n+    protected void setUp() throws Exception {\n+        factoryBean = new XmlOptionsFactoryBean();\n+    }\n+\n+    public void testXmlOptionsFactoryBean() throws Exception {\n+        factoryBean.setOptions(Collections.singletonMap(XmlOptions.SAVE_PRETTY_PRINT, Boolean.TRUE));\n+        factoryBean.afterPropertiesSet();\n+        XmlOptions xmlOptions = (XmlOptions) factoryBean.getObject();\n+        assertNotNull(\"No XmlOptions returned\", xmlOptions);\n+        assertTrue(\"Option not set\", xmlOptions.hasOption(XmlOptions.SAVE_PRETTY_PRINT));\n+        assertFalse(\"Invalid option set\", xmlOptions.hasOption(XmlOptions.LOAD_LINE_NUMBERS));\n+    }\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "ab9d56b60ce85f72d402ece4cb822c7932307a52",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/xstream/AnnotationXStreamMarshallerTest.java",
            "status": "added",
            "additions": 46,
            "deletions": 0,
            "changes": 46,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FAnnotationXStreamMarshallerTest.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FAnnotationXStreamMarshallerTest.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FAnnotationXStreamMarshallerTest.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2007 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.xstream;\n+\n+import java.io.StringWriter;\n+import javax.xml.transform.stream.StreamResult;\n+\n+import org.custommonkey.xmlunit.XMLTestCase;\n+\n+public class AnnotationXStreamMarshallerTest extends XMLTestCase {\n+\n+    private AnnotationXStreamMarshaller marshaller;\n+\n+    private static final String EXPECTED_STRING = \"<flight><number>42</number></flight>\";\n+\n+    private Flight flight;\n+\n+    protected void setUp() throws Exception {\n+        marshaller = new AnnotationXStreamMarshaller();\n+        marshaller.setAnnotatedClass(Flight.class);\n+        flight = new Flight();\n+        flight.setFlightNumber(42L);\n+    }\n+\n+    public void testMarshalStreamResultWriter() throws Exception {\n+        StringWriter writer = new StringWriter();\n+        StreamResult result = new StreamResult(writer);\n+        marshaller.marshal(flight, result);\n+        assertXMLEqual(\"Marshaller writes invalid StreamResult\", EXPECTED_STRING, writer.toString());\n+    }\n+\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "8152f1e2d2de1bc593ccc56e14e4e6d17667282e",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/xstream/Flight.java",
            "status": "added",
            "additions": 34,
            "deletions": 0,
            "changes": 34,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FFlight.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FFlight.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FFlight.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2007 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.xstream;\n+\n+import com.thoughtworks.xstream.annotations.XStreamAlias;\n+\n+@XStreamAlias(\"flight\")\n+public class Flight {\n+\n+    @XStreamAlias(\"number\")\n+    private long flightNumber;\n+\n+    public long getFlightNumber() {\n+        return flightNumber;\n+    }\n+\n+    public void setFlightNumber(long number) {\n+        this.flightNumber = number;\n+    }\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "e7e941465ad256043cf83533e89ea2905315abd3",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/xstream/XStreamMarshallerTest.java",
            "status": "added",
            "additions": 222,
            "deletions": 0,
            "changes": 222,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamMarshallerTest.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamMarshallerTest.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamMarshallerTest.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,222 @@\n+/*\n+ * Copyright 2006 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.xstream;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.StringWriter;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Properties;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.sax.SAXResult;\n+import javax.xml.transform.stream.StreamResult;\n+\n+import com.thoughtworks.xstream.converters.Converter;\n+import com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter;\n+import com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver;\n+import org.custommonkey.xmlunit.XMLTestCase;\n+import org.easymock.MockControl;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Text;\n+import org.xml.sax.ContentHandler;\n+\n+import org.springframework.xml.transform.StaxResult;\n+import org.springframework.xml.transform.StringResult;\n+import org.springframework.xml.transform.StringSource;\n+\n+public class XStreamMarshallerTest extends XMLTestCase {\n+\n+    private static final String EXPECTED_STRING = \"<flight><flightNumber>42</flightNumber></flight>\";\n+\n+    private XStreamMarshaller marshaller;\n+\n+    private Flight flight;\n+\n+    protected void setUp() throws Exception {\n+        marshaller = new XStreamMarshaller();\n+        Properties aliases = new Properties();\n+        aliases.setProperty(\"flight\", Flight.class.getName());\n+        marshaller.setAliases(aliases);\n+        flight = new Flight();\n+        flight.setFlightNumber(42L);\n+    }\n+\n+    public void testMarshalDOMResult() throws Exception {\n+        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n+        DocumentBuilder builder = documentBuilderFactory.newDocumentBuilder();\n+        Document document = builder.newDocument();\n+        DOMResult domResult = new DOMResult(document);\n+        marshaller.marshal(flight, domResult);\n+        Document expected = builder.newDocument();\n+        Element flightElement = expected.createElement(\"flight\");\n+        expected.appendChild(flightElement);\n+        Element numberElement = expected.createElement(\"flightNumber\");\n+        flightElement.appendChild(numberElement);\n+        Text text = expected.createTextNode(\"42\");\n+        numberElement.appendChild(text);\n+        assertXMLEqual(\"Marshaller writes invalid DOMResult\", expected, document);\n+    }\n+\n+    // see SWS-392\n+    public void testMarshalDOMResultToExistentDocument() throws Exception {\n+        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n+        DocumentBuilder builder = documentBuilderFactory.newDocumentBuilder();\n+        Document existent = builder.newDocument();\n+        Element rootElement = existent.createElement(\"root\");\n+        Element flightsElement = existent.createElement(\"flights\");\n+        rootElement.appendChild(flightsElement);\n+        existent.appendChild(rootElement);\n+\n+        // marshall into the existent document\n+        DOMResult domResult = new DOMResult(flightsElement);\n+        marshaller.marshal(flight, domResult);\n+\n+        Document expected = builder.newDocument();\n+        Element eRootElement = expected.createElement(\"root\");\n+        Element eFlightsElement = expected.createElement(\"flights\");\n+        Element eFlightElement = expected.createElement(\"flight\");\n+        eRootElement.appendChild(eFlightsElement);\n+        eFlightsElement.appendChild(eFlightElement);\n+        expected.appendChild(eRootElement);\n+        Element eNumberElement = expected.createElement(\"flightNumber\");\n+        eFlightElement.appendChild(eNumberElement);\n+        Text text = expected.createTextNode(\"42\");\n+        eNumberElement.appendChild(text);\n+        assertXMLEqual(\"Marshaller writes invalid DOMResult\", expected, existent);\n+    }\n+\n+    public void testMarshalStreamResultWriter() throws Exception {\n+        StringWriter writer = new StringWriter();\n+        StreamResult result = new StreamResult(writer);\n+        marshaller.marshal(flight, result);\n+        assertXMLEqual(\"Marshaller writes invalid StreamResult\", EXPECTED_STRING, writer.toString());\n+    }\n+\n+    public void testMarshalStreamResultOutputStream() throws Exception {\n+        ByteArrayOutputStream os = new ByteArrayOutputStream();\n+        StreamResult result = new StreamResult(os);\n+        marshaller.marshal(flight, result);\n+        String s = new String(os.toByteArray(), \"UTF-8\");\n+        assertXMLEqual(\"Marshaller writes invalid StreamResult\", EXPECTED_STRING, s);\n+    }\n+\n+    public void testMarshalSaxResult() throws Exception {\n+        MockControl handlerControl = MockControl.createStrictControl(ContentHandler.class);\n+        handlerControl.setDefaultMatcher(MockControl.ALWAYS_MATCHER);\n+        ContentHandler handlerMock = (ContentHandler) handlerControl.getMock();\n+        handlerMock.startDocument();\n+        handlerMock.startElement(\"\", \"flight\", \"flight\", null);\n+        handlerMock.startElement(\"\", \"number\", \"number\", null);\n+        handlerMock.characters(new char[]{'4', '2'}, 0, 2);\n+        handlerMock.endElement(\"\", \"number\", \"number\");\n+        handlerMock.endElement(\"\", \"flight\", \"flight\");\n+        handlerMock.endDocument();\n+\n+        handlerControl.replay();\n+        SAXResult result = new SAXResult(handlerMock);\n+        marshaller.marshal(flight, result);\n+        handlerControl.verify();\n+    }\n+\n+    public void testMarshalStaxResultXMLStreamWriter() throws Exception {\n+        XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();\n+        StringWriter writer = new StringWriter();\n+        XMLStreamWriter streamWriter = outputFactory.createXMLStreamWriter(writer);\n+        StaxResult result = new StaxResult(streamWriter);\n+        marshaller.marshal(flight, result);\n+        assertXMLEqual(\"Marshaller writes invalid StreamResult\", EXPECTED_STRING, writer.toString());\n+    }\n+\n+    public void testMarshalStaxResultXMLEventWriter() throws Exception {\n+        XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();\n+        StringWriter writer = new StringWriter();\n+        XMLEventWriter eventWriter = outputFactory.createXMLEventWriter(writer);\n+        StaxResult result = new StaxResult(eventWriter);\n+        marshaller.marshal(flight, result);\n+        assertXMLEqual(\"Marshaller writes invalid StreamResult\", EXPECTED_STRING, writer.toString());\n+    }\n+\n+    public void testConverters() throws Exception {\n+        marshaller.setConverters(new Converter[]{new EncodedByteArrayConverter()});\n+        byte[] buf = new byte[]{0x1, 0x2};\n+        StringResult result = new StringResult();\n+        marshaller.marshal(buf, result);\n+        assertXMLEqual(\"<byte-array>AQI=</byte-array>\", result.toString());\n+        StringSource source = new StringSource(result.toString());\n+        byte[] bufResult = (byte[]) marshaller.unmarshal(source);\n+        assertTrue(\"Invalid result\", Arrays.equals(buf, bufResult));\n+    }\n+\n+    public void testUseAttributesFor() throws Exception {\n+        marshaller.setUseAttributeForTypes(new Class[]{Long.TYPE});\n+        StringResult result = new StringResult();\n+        marshaller.marshal(flight, result);\n+        String expected = \"<flight flightNumber=\\\"42\\\" />\";\n+        assertXMLEqual(\"Marshaller does not use attributes\", expected, result.toString());\n+    }\n+\n+    public void testUseAttributesForStringClassMap() throws Exception {\n+        marshaller.setUseAttributeFor(Collections.singletonMap(\"flightNumber\", Long.TYPE));\n+        StringResult result = new StringResult();\n+        marshaller.marshal(flight, result);\n+        String expected = \"<flight flightNumber=\\\"42\\\" />\";\n+        assertXMLEqual(\"Marshaller does not use attributes\", expected, result.toString());\n+    }\n+\n+    public void testUseAttributesForClassStringMap() throws Exception {\n+        marshaller.setUseAttributeFor(Collections.singletonMap(Flight.class, \"flightNumber\"));\n+        StringResult result = new StringResult();\n+        marshaller.marshal(flight, result);\n+        String expected = \"<flight flightNumber=\\\"42\\\" />\";\n+        assertXMLEqual(\"Marshaller does not use attributes\", expected, result.toString());\n+    }\n+\n+    public void testOmitField() throws Exception {\n+        marshaller.addOmittedField(Flight.class, \"flightNumber\");\n+        StringResult result = new StringResult();\n+        marshaller.marshal(flight, result);\n+        assertXpathNotExists(\"/flight/flightNumber\", result.toString());\n+    }\n+\n+    public void testOmitFields() throws Exception {\n+        Map omittedFieldsMap = Collections.singletonMap(Flight.class, \"flightNumber\");\n+        marshaller.setOmittedFields(omittedFieldsMap);\n+        StringResult result = new StringResult();\n+        marshaller.marshal(flight, result);\n+        assertXpathNotExists(\"/flight/flightNumber\", result.toString());\n+    }\n+\n+    public void testDriver() throws Exception {\n+        marshaller.setStreamDriver(new JettisonMappedXmlDriver());\n+        StringResult result = new StringResult();\n+        marshaller.marshal(flight, result);\n+        assertEquals(\"Invalid result\", \"{\\\"flight\\\":{\\\"flightNumber\\\":\\\"42\\\"}}\", result.toString());\n+        Object o = marshaller.unmarshal(new StringSource(result.toString()));\n+        assertTrue(\"Unmarshalled object is not Flights\", o instanceof Flight);\n+        Flight unflight = (Flight) o;\n+        assertNotNull(\"Flight is null\", unflight);\n+        assertEquals(\"Number is invalid\", 42L, unflight.getFlightNumber());\n+    }\n+\n+}"
        },
        {
            "sha": "3b838f74ab0741ad100355a1fef504e2fa0483c2",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/xstream/XStreamUnmarshallerTest.java",
            "status": "added",
            "additions": 84,
            "deletions": 0,
            "changes": 84,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamUnmarshallerTest.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamUnmarshallerTest.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamUnmarshallerTest.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2006 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.xstream;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.StringReader;\n+import java.util.Properties;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLStreamReader;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import junit.framework.TestCase;\n+import org.w3c.dom.Document;\n+import org.xml.sax.InputSource;\n+\n+import org.springframework.xml.transform.StaxSource;\n+\n+public class XStreamUnmarshallerTest extends TestCase {\n+\n+    protected static final String INPUT_STRING = \"<flight><flightNumber>42</flightNumber></flight>\";\n+\n+    private XStreamMarshaller unmarshaller;\n+\n+    protected void setUp() throws Exception {\n+        unmarshaller = new XStreamMarshaller();\n+        Properties aliases = new Properties();\n+        aliases.setProperty(\"flight\", Flight.class.getName());\n+        unmarshaller.setAliases(aliases);\n+    }\n+\n+    private void testFlight(Object o) {\n+        assertTrue(\"Unmarshalled object is not Flights\", o instanceof Flight);\n+        Flight flight = (Flight) o;\n+        assertNotNull(\"Flight is null\", flight);\n+        assertEquals(\"Number is invalid\", 42L, flight.getFlightNumber());\n+    }\n+\n+    public void testUnmarshalDomSource() throws Exception {\n+        DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+        Document document = builder.parse(new InputSource(new StringReader(INPUT_STRING)));\n+        DOMSource source = new DOMSource(document);\n+        Object flight = unmarshaller.unmarshal(source);\n+        testFlight(flight);\n+    }\n+\n+    public void testUnmarshalStaxSourceXmlStreamReader() throws Exception {\n+        XMLInputFactory inputFactory = XMLInputFactory.newInstance();\n+        XMLStreamReader streamReader = inputFactory.createXMLStreamReader(new StringReader(INPUT_STRING));\n+        StaxSource source = new StaxSource(streamReader);\n+        Object flights = unmarshaller.unmarshal(source);\n+        testFlight(flights);\n+    }\n+\n+    public void testUnmarshalStreamSourceInputStream() throws Exception {\n+        StreamSource source = new StreamSource(new ByteArrayInputStream(INPUT_STRING.getBytes(\"UTF-8\")));\n+        Object flights = unmarshaller.unmarshal(source);\n+        testFlight(flights);\n+    }\n+\n+    public void testUnmarshalStreamSourceReader() throws Exception {\n+        StreamSource source = new StreamSource(new StringReader(INPUT_STRING));\n+        Object flights = unmarshaller.unmarshal(source);\n+        testFlight(flights);\n+    }\n+}\n+"
        },
        {
            "sha": "3e20331f213768dde5f79c734c521db18e161c6a",
            "filename": "org.springframework.oxm/src/test/java/org/springframework/oxm/xstream/XStreamUtilsTest.java",
            "status": "added",
            "additions": 39,
            "deletions": 0,
            "changes": 39,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamUtilsTest.java",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamUtilsTest.java",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamUtilsTest.java?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2006 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.oxm.xstream;\n+\n+import com.thoughtworks.xstream.io.StreamException;\n+import com.thoughtworks.xstream.mapper.CannotResolveClassException;\n+\n+import junit.framework.TestCase;\n+\n+public class XStreamUtilsTest extends TestCase {\n+\n+    public void testConvertStreamException() {\n+        assertTrue(\"Invalid exception conversion\", XStreamUtils.convertXStreamException(\n+                new StreamException(new Exception()), true) instanceof XStreamMarshallingFailureException);\n+        assertTrue(\"Invalid exception conversion\", XStreamUtils.convertXStreamException(\n+                new StreamException(new Exception()), false) instanceof XStreamUnmarshallingFailureException);\n+    }\n+\n+    public void testConvertCannotResolveClassException() {\n+        assertTrue(\"Invalid exception conversion\", XStreamUtils.convertXStreamException(\n+                new CannotResolveClassException(\"\"), true) instanceof XStreamMarshallingFailureException);\n+        assertTrue(\"Invalid exception conversion\", XStreamUtils.convertXStreamException(\n+                new CannotResolveClassException(\"\"), false) instanceof XStreamUnmarshallingFailureException);\n+    }\n+}\n\\ No newline at end of file"
        },
        {
            "sha": "5645c16575a70238cf4b16b1f4b2178d2b3bf041",
            "filename": "org.springframework.oxm/src/test/resources/log4j.properties",
            "status": "added",
            "additions": 6,
            "deletions": 0,
            "changes": 6,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fresources%2Flog4j.properties",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fresources%2Flog4j.properties",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fresources%2Flog4j.properties?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,6 @@\n+log4j.rootCategory=INFO, stdout\n+log4j.logger.org.springframework.oxm=DEBUG\n+\n+log4j.appender.stdout=org.apache.log4j.ConsoleAppender\n+log4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n+log4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - <%m>%n\n\\ No newline at end of file"
        },
        {
            "sha": "e85971251c24f8aff4cd26f43977bf84ec2698c2",
            "filename": "org.springframework.oxm/src/test/resources/org/springframework/oxm/castor/mapping.xml",
            "status": "added",
            "additions": 31,
            "deletions": 0,
            "changes": 31,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fresources%2Forg%2Fspringframework%2Foxm%2Fcastor%2Fmapping.xml",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fresources%2Forg%2Fspringframework%2Foxm%2Fcastor%2Fmapping.xml",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fresources%2Forg%2Fspringframework%2Foxm%2Fcastor%2Fmapping.xml?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,31 @@\n+<?xml version=\"1.0\"?>\n+<!DOCTYPE mapping PUBLIC \"-//EXOLAB/Castor Mapping DTD Version 1.0//EN\" \"http://castor.org/mapping.dtd\">\n+<mapping>\n+    <description>Castor generated mapping file</description>\n+    <class name=\"org.springframework.oxm.castor.Flights\">\n+        <description>\n+            Default mapping for class\n+            org.springframework.oxm.castor.Flights\n+        </description>\n+        <map-to xml=\"flights\"\n+                ns-uri=\"http://samples.springframework.org/flight\" ns-prefix=\"tns\"/>\n+        <field name=\"flight\"\n+               type=\"org.springframework.oxm.castor.Flight\"\n+               required=\"true\" collection=\"array\">\n+            <bind-xml name=\"tns:flight\" node=\"element\" QName-prefix=\"tns\"\n+                      xmlns:tns=\"http://samples.springframework.org/flight\"/>\n+        </field>\n+    </class>\n+    <class name=\"org.springframework.oxm.castor.Flight\">\n+        <description>\n+            Default mapping for class\n+            org.springframework.oxm.castor.Flight\n+        </description>\n+        <map-to xml=\"flight\"\n+                ns-uri=\"http://samples.springframework.org/flight\" ns-prefix=\"tns\"/>\n+        <field name=\"number\" type=\"long\" required=\"true\">\n+            <bind-xml name=\"tns:number\" node=\"element\"\n+                      xmlns:tns=\"http://samples.springframework.org/flight\"/>\n+        </field>\n+    </class>\n+</mapping>\n\\ No newline at end of file"
        },
        {
            "sha": "56f175954290bc105757e9241aec885f13106866",
            "filename": "org.springframework.oxm/src/test/resources/org/springframework/oxm/config/jaxb2OxmNamespaceHandlerTest.xml",
            "status": "added",
            "additions": 11,
            "deletions": 0,
            "changes": 11,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fresources%2Forg%2Fspringframework%2Foxm%2Fconfig%2Fjaxb2OxmNamespaceHandlerTest.xml",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fresources%2Forg%2Fspringframework%2Foxm%2Fconfig%2Fjaxb2OxmNamespaceHandlerTest.xml",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fresources%2Forg%2Fspringframework%2Foxm%2Fconfig%2Fjaxb2OxmNamespaceHandlerTest.xml?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,11 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:oxm=\"http://www.springframework.org/schema/oxm\" xsi:schemaLocation=\"\n+       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd\n+       http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-1.5.xsd\">\n+    <oxm:jaxb2-marshaller id=\"contextPathMarshaller\" contextPath=\"org.springframework.oxm.jaxb2\"/>\n+    <oxm:jaxb2-marshaller id=\"classesMarshaller\">\n+        <oxm:class-to-be-bound name=\"org.springframework.oxm.jaxb2.Flights\"/>\n+        <oxm:class-to-be-bound name=\"org.springframework.oxm.jaxb2.FlightType\"/>\n+    </oxm:jaxb2-marshaller>\n+</beans>"
        },
        {
            "sha": "861a41ebec7d9d10bfc14d218e286fae2889e280",
            "filename": "org.springframework.oxm/src/test/resources/org/springframework/oxm/config/oxmNamespaceHandlerTest.xml",
            "status": "added",
            "additions": 17,
            "deletions": 0,
            "changes": 17,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fresources%2Forg%2Fspringframework%2Foxm%2Fconfig%2FoxmNamespaceHandlerTest.xml",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fresources%2Forg%2Fspringframework%2Foxm%2Fconfig%2FoxmNamespaceHandlerTest.xml",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fresources%2Forg%2Fspringframework%2Foxm%2Fconfig%2FoxmNamespaceHandlerTest.xml?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:oxm=\"http://www.springframework.org/schema/oxm\" xsi:schemaLocation=\"\n+       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd\n+       http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-1.5.xsd\">\n+    <oxm:jaxb1-marshaller id=\"jaxb1Marshaller\" contextPath=\"org.springframework.oxm.jaxb1\"/>\n+    <oxm:jibx-marshaller id=\"jibxMarshaller\" target-class=\"org.springframework.oxm.jibx.Flights\"/>\n+    <oxm:xmlbeans-marshaller id=\"xmlBeansMarshaller\" options=\"xmlBeansOptions\"/>\n+\n+    <bean id=\"xmlBeansOptions\" class=\"org.springframework.oxm.xmlbeans.XmlOptionsFactoryBean\">\n+        <property name=\"options\">\n+            <props>\n+                <prop key=\"SAVE_PRETTY_PRINT\">true</prop>\n+            </props>\n+        </property>\n+    </bean>\n+</beans>"
        },
        {
            "sha": "5f46e0b91a0ca5b7fdcb6cb168f0fcdc9687d20c",
            "filename": "org.springframework.oxm/src/test/resources/org/springframework/oxm/flight.xsd",
            "status": "added",
            "additions": 20,
            "deletions": 0,
            "changes": 20,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fresources%2Forg%2Fspringframework%2Foxm%2Fflight.xsd",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fresources%2Forg%2Fspringframework%2Foxm%2Fflight.xsd",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fresources%2Forg%2Fspringframework%2Foxm%2Fflight.xsd?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<schema xmlns=\"http://www.w3.org/2001/XMLSchema\" elementFormDefault=\"qualified\"\n+        targetNamespace=\"http://samples.springframework.org/flight\"\n+        xmlns:tns=\"http://samples.springframework.org/flight\">\n+    <element name=\"flights\">\n+        <complexType>\n+            <sequence>\n+                <element name=\"flight\" type=\"tns:flightType\"\n+                         maxOccurs=\"unbounded\">\n+                </element>\n+            </sequence>\n+        </complexType>\n+    </element>\n+    <element name=\"flight\" type=\"tns:flightType\"/>\n+    <complexType name=\"flightType\">\n+        <sequence>\n+            <element name=\"number\" type=\"long\"/>\n+        </sequence>\n+    </complexType>\n+</schema>"
        },
        {
            "sha": "f589a8a8023b02a2f4a3d44d15c8f86525790381",
            "filename": "org.springframework.oxm/src/test/resources/org/springframework/oxm/jaxb/spring-ws.png",
            "status": "added",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fresources%2Forg%2Fspringframework%2Foxm%2Fjaxb%2Fspring-ws.png",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fresources%2Forg%2Fspringframework%2Foxm%2Fjaxb%2Fspring-ws.png",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fresources%2Forg%2Fspringframework%2Foxm%2Fjaxb%2Fspring-ws.png?ref=03582973d74b30eba4b00be50189258b2d843bad"
        },
        {
            "sha": "415021ce06410056a963af68b2e07ea21d6c8b98",
            "filename": "org.springframework.oxm/src/test/resources/org/springframework/oxm/jibx/binding.xml",
            "status": "added",
            "additions": 13,
            "deletions": 0,
            "changes": 13,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fresources%2Forg%2Fspringframework%2Foxm%2Fjibx%2Fbinding.xml",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Fsrc%2Ftest%2Fresources%2Forg%2Fspringframework%2Foxm%2Fjibx%2Fbinding.xml",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Fsrc%2Ftest%2Fresources%2Forg%2Fspringframework%2Foxm%2Fjibx%2Fbinding.xml?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,13 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<binding>\n+    <mapping name=\"flights\" class=\"org.springframework.oxm.jibx.Flights\">\n+        <namespace uri=\"http://samples.springframework.org/flight\" default=\"elements\"/>\n+        <collection field=\"flightList\">\n+            <structure map-as=\"org.springframework.oxm.jibx.FlightType\"/>\n+        </collection>\n+    </mapping>\n+    <mapping name=\"flight\" class=\"org.springframework.oxm.jibx.FlightType\">\n+        <namespace uri=\"http://samples.springframework.org/flight\" default=\"elements\"/>\n+        <value name=\"number\" field=\"number\" usage=\"required\"/>\n+    </mapping>\n+</binding>"
        },
        {
            "sha": "cc1ecaeab1bddc29ddcd055593a8389083861965",
            "filename": "org.springframework.oxm/template.mf",
            "status": "added",
            "additions": 71,
            "deletions": 0,
            "changes": 71,
            "blob_url": "https://github.com/spring-projects/spring-framework/blob/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Ftemplate.mf",
            "raw_url": "https://github.com/spring-projects/spring-framework/raw/03582973d74b30eba4b00be50189258b2d843bad/org.springframework.oxm%2Ftemplate.mf",
            "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.oxm%2Ftemplate.mf?ref=03582973d74b30eba4b00be50189258b2d843bad",
            "patch": "@@ -0,0 +1,71 @@\n+Bundle-SymbolicName: org.springframework.orm\n+Bundle-Name: Spring ORM\n+Bundle-Vendor: SpringSource\n+Bundle-ManifestVersion: 2\n+Import-Package: \n+ com.ibatis.sqlmap.engine.transaction.external;version=\"[2.3.0.677, 3.0.0)\";resolution:=optional,\n+ oracle.toplink.essentials.expressions;version=\"[2.0.0.b41-beta2, 3.0.0)\";resolution:=optional,\n+ org.eclipse.persistence.expressions;version=\"[1.0.0, 2.0.0)\";resolution:=optional\n+Import-Template: \n+ com.ibatis.*;version=\"[2.3.0.677, 3.0.0)\";resolution:=optional,\n+ javax.jdo.*;version=\"[2.0.0, 3.0.0)\";resolution:=optional,\n+ javax.persistence.*;version=\"[1.0.0, 2.0.0)\";resolution:=optional,\n+ javax.servlet.*;version=\"[2.4.0, 3.0.0)\";resolution:=optional,\n+ javax.transaction.*;version=\"[1.0.1, 2.0.0)\";resolution:=optional,\n+ oracle.toplink.essentials.*;version=\"[2.0.0.b41-beta2, 3.0.0)\";resolution:=optional,\n+ oracle.toplink.exceptions;version=\"[10.1.3, 11.0.0)\";resolution:=optional,\n+ oracle.toplink.expressions;version=\"[10.1.3, 11.0.0)\";resolution:=optional,\n+ oracle.toplink.internal.databaseaccess;version=\"[10.1.3, 11.0.0)\";resolution:=optional,\n+ oracle.toplink.jndi;version=\"[10.1.3, 11.0.0)\";resolution:=optional,\n+ oracle.toplink.logging;version=\"[10.1.3, 11.0.0)\";resolution:=optional,\n+ oracle.toplink.publicinterface;version=\"[10.1.3, 11.0.0)\";resolution:=optional,\n+ oracle.toplink.queryframework;version=\"[10.1.3, 11.0.0)\";resolution:=optional,\n+ oracle.toplink.sessionbroker;version=\"[10.1.3, 11.0.0)\";resolution:=optional,\n+ oracle.toplink.sessions;version=\"[10.1.3, 11.0.0)\";resolution:=optional,\n+ oracle.toplink.threetier;version=\"[10.1.3, 11.0.0)\";resolution:=optional,\n+ oracle.toplink.tools.*;version=\"[10.1.3, 11.0.0)\";resolution:=optional,\n+ org.aopalliance.*;version=\"[1.0.0, 2.0.0)\",\n+ org.apache.commons.logging.*;version=\"[1.1.1, 2.0.0)\",\n+ org.apache.openjpa.persistence.*;version=\"[1.0.2, 2.0.0)\";resolution:=optional,\n+ org.eclipse.persistence.*;version=\"[1.0.0, 2.0.0)\";resolution:=optional,\n+ org.hibernate;version=\"[3.2.6.ga, 3.3.0)\";resolution:=optional,\n+ org.hibernate.cache;version=\"[3.2.6.ga, 3.3.0)\";resolution:=optional,\n+ org.hibernate.cfg;version=\"[3.2.6.ga, 3.3.0)\";resolution:=optional,\n+ org.hibernate.classic;version=\"[3.2.6.ga, 3.3.0)\";resolution:=optional,\n+ org.hibernate.connection;version=\"[3.2.6.ga, 3.3.0)\";resolution:=optional,\n+ org.hibernate.context;version=\"[3.2.6.ga, 3.3.0)\";resolution:=optional,\n+ org.hibernate.criterion;version=\"[3.2.6.ga, 3.3.0)\";resolution:=optional,\n+ org.hibernate.dialect;version=\"[3.2.6.ga, 3.3.0)\";resolution:=optional,\n+ org.hibernate.ejb;version=\"[3.3.0.ga, 3.4.0)\";resolution:=optional,\n+ org.hibernate.engine;version=\"[3.2.6.ga, 3.3.0)\";resolution:=optional,\n+ org.hibernate.event.*;version=\"[3.2.6.ga, 3.3.0)\";resolution:=optional,\n+ org.hibernate.exception;version=\"[3.2.6.ga, 3.3.0)\";resolution:=optional,\n+ org.hibernate.impl;version=\"[3.2.6.ga, 3.3.0)\";resolution:=optional,\n+ org.hibernate.jdbc;version=\"[3.2.6.ga, 3.3.0)\";resolution:=optional,\n+ org.hibernate.persister.entity;version=\"[3.2.6.ga, 3.3.0)\";resolution:=optional,\n+ org.hibernate.tool.hbm2ddl;version=\"[3.2.6.ga, 3.3.0)\";resolution:=optional,\n+ org.hibernate.transaction;version=\"[3.2.6.ga, 3.3.0)\";resolution:=optional,\n+ org.hibernate.transform;version=\"[3.2.6.ga, 3.3.0)\";resolution:=optional,\n+ org.hibernate.type;version=\"[3.2.6.ga, 3.3.0)\";resolution:=optional,\n+ org.hibernate.usertype;version=\"[3.2.6.ga, 3.3.0)\";resolution:=optional,\n+ org.hibernate.util;version=\"[3.2.6.ga, 3.3.0)\";resolution:=optional,\n+ org.springframework.aop.*;version=\"[3.0.0, 3.0.1)\",\n+ org.springframework.beans.*;version=\"[3.0.0, 3.0.1)\",\n+ org.springframework.context.*;version=\"[3.0.0, 3.0.1)\",\n+ org.springframework.core.*;version=\"[3.0.0, 3.0.1)\",\n+ org.springframework.dao.*;version=\"[3.0.0, 3.0.1)\",\n+ org.springframework.instrument.classloading.*;version=\"[3.0.0, 3.0.1)\";resolution:=optional,\n+ org.springframework.jdbc.*;version=\"[3.0.0, 3.0.1)\",\n+ org.springframework.jndi.*;version=\"[3.0.0, 3.0.1)\";resolution:=optional,\n+ org.springframework.transaction.*;version=\"[3.0.0, 3.0.1)\",\n+ org.springframework.util.*;version=\"[3.0.0, 3.0.1)\",\n+ org.springframework.web.*;version=\"[3.0.0, 3.0.1)\";resolution:=optional,\n+ org.springframework.ui.*;version=\"[3.0.0, 3.0.1)\";resolution:=optional\n+Unversioned-Imports: \n+ *\n+Ignored-Existing-Headers: \n+ Bnd-LastModified,\n+ DynamicImport-Package,\n+ Import-Package,\n+ Export-Package,\n+ Tool"
        }
    ]
}