{
    "sha": "e91f279199ac5419d71ba7b15070c585f4962eb3",
    "node_id": "MDY6Q29tbWl0ODg3MTE5ODE6ZTkxZjI3OTE5OWFjNTQxOWQ3MWJhN2IxNTA3MGM1ODVmNDk2MmViMw==",
    "commit": {
        "author": {
            "name": "Robert Godfrey",
            "email": "rgodfrey@apache.org",
            "date": "2014-10-17T14:23:19Z"
        },
        "committer": {
            "name": "Robert Godfrey",
            "email": "rgodfrey@apache.org",
            "date": "2014-10-17T14:23:19Z"
        },
        "message": "QPID-6125 : [Java Broker] AMQP 0-8/9/9-1 protocol handler refactoring",
        "tree": {
            "sha": "44ba7be219f145a26f7a1dfd56cef4facac28cea",
            "url": "https://api.github.com/repos/apache/qpid-broker-j/git/trees/44ba7be219f145a26f7a1dfd56cef4facac28cea"
        },
        "url": "https://api.github.com/repos/apache/qpid-broker-j/git/commits/e91f279199ac5419d71ba7b15070c585f4962eb3",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/qpid-broker-j/commits/e91f279199ac5419d71ba7b15070c585f4962eb3",
    "html_url": "https://github.com/apache/qpid-broker-j/commit/e91f279199ac5419d71ba7b15070c585f4962eb3",
    "comments_url": "https://api.github.com/repos/apache/qpid-broker-j/commits/e91f279199ac5419d71ba7b15070c585f4962eb3/comments",
    "author": {
        "login": "rgodfrey",
        "id": 70211,
        "node_id": "MDQ6VXNlcjcwMjEx",
        "avatar_url": "https://avatars.githubusercontent.com/u/70211?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rgodfrey",
        "html_url": "https://github.com/rgodfrey",
        "followers_url": "https://api.github.com/users/rgodfrey/followers",
        "following_url": "https://api.github.com/users/rgodfrey/following{/other_user}",
        "gists_url": "https://api.github.com/users/rgodfrey/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rgodfrey/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rgodfrey/subscriptions",
        "organizations_url": "https://api.github.com/users/rgodfrey/orgs",
        "repos_url": "https://api.github.com/users/rgodfrey/repos",
        "events_url": "https://api.github.com/users/rgodfrey/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rgodfrey/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "rgodfrey",
        "id": 70211,
        "node_id": "MDQ6VXNlcjcwMjEx",
        "avatar_url": "https://avatars.githubusercontent.com/u/70211?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rgodfrey",
        "html_url": "https://github.com/rgodfrey",
        "followers_url": "https://api.github.com/users/rgodfrey/followers",
        "following_url": "https://api.github.com/users/rgodfrey/following{/other_user}",
        "gists_url": "https://api.github.com/users/rgodfrey/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rgodfrey/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rgodfrey/subscriptions",
        "organizations_url": "https://api.github.com/users/rgodfrey/orgs",
        "repos_url": "https://api.github.com/users/rgodfrey/repos",
        "events_url": "https://api.github.com/users/rgodfrey/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rgodfrey/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "1d643884270f1cd44d12063938828540fb9228fa",
            "url": "https://api.github.com/repos/apache/qpid-broker-j/commits/1d643884270f1cd44d12063938828540fb9228fa",
            "html_url": "https://github.com/apache/qpid-broker-j/commit/1d643884270f1cd44d12063938828540fb9228fa"
        }
    ],
    "stats": {
        "total": 67199,
        "additions": 10406,
        "deletions": 56793
    },
    "files": [
        {
            "sha": "1d689090aeae658991ae9f7114c911497a995729",
            "filename": "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom4To5.java",
            "status": "modified",
            "additions": 14,
            "deletions": 41,
            "changes": 55,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/bdbstore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fstore%2Fberkeleydb%2Fupgrade%2FUpgradeFrom4To5.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/bdbstore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fstore%2Fberkeleydb%2Fupgrade%2FUpgradeFrom4To5.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/bdbstore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fstore%2Fberkeleydb%2Fupgrade%2FUpgradeFrom4To5.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -30,33 +30,33 @@\n import java.util.List;\n import java.util.Set;\n \n+import com.sleepycat.bind.tuple.ByteBinding;\n+import com.sleepycat.bind.tuple.LongBinding;\n+import com.sleepycat.bind.tuple.TupleBase;\n+import com.sleepycat.bind.tuple.TupleBinding;\n+import com.sleepycat.bind.tuple.TupleInput;\n+import com.sleepycat.bind.tuple.TupleOutput;\n+import com.sleepycat.je.Database;\n+import com.sleepycat.je.DatabaseEntry;\n+import com.sleepycat.je.Environment;\n+import com.sleepycat.je.Transaction;\n import org.apache.log4j.Logger;\n+\n import org.apache.qpid.common.AMQPFilterTypes;\n import org.apache.qpid.exchange.ExchangeDefaults;\n import org.apache.qpid.framing.AMQFrameDecodingException;\n import org.apache.qpid.framing.AMQProtocolVersionException;\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.ContentHeaderBody;\n import org.apache.qpid.framing.FieldTable;\n-import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n+import org.apache.qpid.framing.MessagePublishInfo;\n import org.apache.qpid.server.model.ConfiguredObject;\n import org.apache.qpid.server.protocol.v0_8.MessageMetaData;\n-import org.apache.qpid.server.store.StoreException;\n import org.apache.qpid.server.store.StorableMessageMetaData;\n+import org.apache.qpid.server.store.StoreException;\n import org.apache.qpid.server.store.berkeleydb.AMQShortStringEncoding;\n import org.apache.qpid.server.store.berkeleydb.FieldTableEncoding;\n \n-import com.sleepycat.bind.tuple.ByteBinding;\n-import com.sleepycat.bind.tuple.LongBinding;\n-import com.sleepycat.bind.tuple.TupleBase;\n-import com.sleepycat.bind.tuple.TupleBinding;\n-import com.sleepycat.bind.tuple.TupleInput;\n-import com.sleepycat.bind.tuple.TupleOutput;\n-import com.sleepycat.je.Database;\n-import com.sleepycat.je.DatabaseEntry;\n-import com.sleepycat.je.Environment;\n-import com.sleepycat.je.Transaction;\n-\n public class UpgradeFrom4To5 extends AbstractStoreUpgrade\n {\n     private static final String OLD_DELIVERY_DB = \"deliveryDb_v4\";\n@@ -662,34 +662,7 @@ private MessagePublishInfo readMessagePublishInfo(TupleInput tupleInput)\n             final boolean mandatory = tupleInput.readBoolean();\n             final boolean immediate = tupleInput.readBoolean();\n \n-            return new MessagePublishInfo()\n-            {\n-\n-                public AMQShortString getExchange()\n-                {\n-                    return exchange;\n-                }\n-\n-                public void setExchange(AMQShortString exchange)\n-                {\n-\n-                }\n-\n-                public boolean isImmediate()\n-                {\n-                    return immediate;\n-                }\n-\n-                public boolean isMandatory()\n-                {\n-                    return mandatory;\n-                }\n-\n-                public AMQShortString getRoutingKey()\n-                {\n-                    return routingKey;\n-                }\n-            };\n+            return new MessagePublishInfo(exchange, immediate, mandatory, routingKey);\n \n         }\n "
        },
        {
            "sha": "fb0c11f6e51851c4244acd533f666a7fadbbd8a5",
            "filename": "bdbstore/src/test/java/org/apache/qpid/server/store/berkeleydb/BDBMessageStoreTest.java",
            "status": "modified",
            "additions": 4,
            "deletions": 36,
            "changes": 40,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/bdbstore%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fstore%2Fberkeleydb%2FBDBMessageStoreTest.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/bdbstore%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fstore%2Fberkeleydb%2FBDBMessageStoreTest.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/bdbstore%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fstore%2Fberkeleydb%2FBDBMessageStoreTest.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -30,9 +30,7 @@\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.BasicContentHeaderProperties;\n import org.apache.qpid.framing.ContentHeaderBody;\n-import org.apache.qpid.framing.MethodRegistry;\n-import org.apache.qpid.framing.ProtocolVersion;\n-import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n+import org.apache.qpid.framing.MessagePublishInfo;\n import org.apache.qpid.server.model.VirtualHost;\n import org.apache.qpid.server.protocol.v0_10.MessageMetaDataType_0_10;\n import org.apache.qpid.server.protocol.v0_10.MessageMetaData_0_10;\n@@ -234,44 +232,14 @@ private MessageProperties createMessageProperties_0_10(int bodySize)\n \n     private MessagePublishInfo createPublishInfoBody_0_8()\n     {\n-        return new MessagePublishInfo()\n-        {\n-            public AMQShortString getExchange()\n-            {\n-                return new AMQShortString(\"exchange12345\");\n-            }\n-\n-            @Override\n-            public void setExchange(AMQShortString exchange)\n-            {\n-            }\n-\n-            @Override\n-            public boolean isImmediate()\n-            {\n-                return false;\n-            }\n-\n-            @Override\n-            public boolean isMandatory()\n-            {\n-                return true;\n-            }\n-\n-            @Override\n-            public AMQShortString getRoutingKey()\n-            {\n-                return new AMQShortString(\"routingKey12345\");\n-            }\n-        };\n+        return new MessagePublishInfo(new AMQShortString(\"exchange12345\"), false, true,\n+                                      new AMQShortString(\"routingKey12345\"));\n \n     }\n \n     private ContentHeaderBody createContentHeaderBody_0_8(BasicContentHeaderProperties props, int length)\n     {\n-        MethodRegistry methodRegistry = MethodRegistry.getMethodRegistry(ProtocolVersion.v0_9);\n-        int classForBasic = methodRegistry.createBasicQosOkBody().getClazz();\n-        return new ContentHeaderBody(classForBasic, 1, props, length);\n+        return new ContentHeaderBody(props, length);\n     }\n \n     private BasicContentHeaderProperties createContentHeaderProperties_0_8()"
        },
        {
            "sha": "5ca94891c1cd6fcc9ece30df72f84c83dcf8bf12",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
            "status": "modified",
            "additions": 1697,
            "deletions": 146,
            "changes": 1843,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FAMQChannel.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FAMQChannel.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FAMQChannel.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -20,6 +20,8 @@\n  */\n package org.apache.qpid.server.protocol.v0_8;\n \n+import static org.apache.qpid.transport.util.Functions.hex;\n+\n import java.nio.ByteBuffer;\n import java.security.AccessControlException;\n import java.security.PrivilegedAction;\n@@ -47,28 +49,24 @@\n import org.apache.qpid.AMQConnectionException;\n import org.apache.qpid.AMQException;\n import org.apache.qpid.common.AMQPFilterTypes;\n-import org.apache.qpid.framing.AMQMethodBody;\n-import org.apache.qpid.framing.AMQShortString;\n-import org.apache.qpid.framing.BasicContentHeaderProperties;\n-import org.apache.qpid.framing.ContentBody;\n-import org.apache.qpid.framing.ContentHeaderBody;\n-import org.apache.qpid.framing.FieldTable;\n-import org.apache.qpid.framing.MethodRegistry;\n-import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n+import org.apache.qpid.exchange.ExchangeDefaults;\n+import org.apache.qpid.framing.*;\n import org.apache.qpid.protocol.AMQConstant;\n import org.apache.qpid.server.TransactionTimeoutHelper;\n import org.apache.qpid.server.TransactionTimeoutHelper.CloseAction;\n import org.apache.qpid.server.configuration.BrokerProperties;\n import org.apache.qpid.server.connection.SessionPrincipal;\n import org.apache.qpid.server.consumer.ConsumerImpl;\n import org.apache.qpid.server.consumer.ConsumerTarget;\n+import org.apache.qpid.server.exchange.ExchangeImpl;\n import org.apache.qpid.server.filter.AMQInvalidArgumentException;\n import org.apache.qpid.server.filter.FilterManager;\n import org.apache.qpid.server.filter.FilterManagerFactory;\n import org.apache.qpid.server.filter.Filterable;\n import org.apache.qpid.server.filter.MessageFilter;\n import org.apache.qpid.server.filter.SimpleFilterManager;\n import org.apache.qpid.server.flow.FlowCreditManager;\n+import org.apache.qpid.server.flow.MessageOnlyCreditManager;\n import org.apache.qpid.server.flow.Pre0_10CreditManager;\n import org.apache.qpid.server.logging.LogMessage;\n import org.apache.qpid.server.logging.LogSubject;\n@@ -85,13 +83,18 @@\n import org.apache.qpid.server.model.ConfiguredObject;\n import org.apache.qpid.server.model.Consumer;\n import org.apache.qpid.server.model.Exchange;\n+import org.apache.qpid.server.model.ExclusivityPolicy;\n+import org.apache.qpid.server.model.LifetimePolicy;\n+import org.apache.qpid.server.model.NoFactoryForTypeException;\n+import org.apache.qpid.server.model.Queue;\n import org.apache.qpid.server.model.Session;\n import org.apache.qpid.server.model.State;\n+import org.apache.qpid.server.model.UnknownConfiguredObjectException;\n import org.apache.qpid.server.protocol.AMQSessionModel;\n import org.apache.qpid.server.protocol.CapacityChecker;\n import org.apache.qpid.server.protocol.ConsumerListener;\n-import org.apache.qpid.server.protocol.v0_8.output.ProtocolOutputConverter;\n import org.apache.qpid.server.queue.AMQQueue;\n+import org.apache.qpid.server.queue.QueueArgumentsConverter;\n import org.apache.qpid.server.security.SecurityManager;\n import org.apache.qpid.server.store.MessageStore;\n import org.apache.qpid.server.store.StoreFuture;\n@@ -103,12 +106,18 @@\n import org.apache.qpid.server.txn.ServerTransaction;\n import org.apache.qpid.server.util.Action;\n import org.apache.qpid.server.util.ConnectionScopedRuntimeException;\n+import org.apache.qpid.server.virtualhost.ExchangeExistsException;\n+import org.apache.qpid.server.virtualhost.ExchangeIsAlternateException;\n+import org.apache.qpid.server.virtualhost.QueueExistsException;\n+import org.apache.qpid.server.virtualhost.RequiredExchangeException;\n+import org.apache.qpid.server.virtualhost.ReservedExchangeNameException;\n import org.apache.qpid.server.virtualhost.VirtualHostImpl;\n import org.apache.qpid.transport.TransportException;\n \n-public class AMQChannel<T extends AMQProtocolSession<T>>\n-        implements AMQSessionModel<AMQChannel<T>,T>,\n-                   AsyncAutoCommitTransaction.FutureRecorder\n+public class AMQChannel\n+        implements AMQSessionModel<AMQChannel, AMQProtocolEngine>,\n+                   AsyncAutoCommitTransaction.FutureRecorder,\n+                   ServerChannelMethodProcessor\n {\n     public static final int DEFAULT_PREFETCH = 4096;\n \n@@ -159,7 +168,7 @@ public class AMQChannel<T extends AMQProtocolSession<T>>\n     private final AtomicLong _txnRejects = new AtomicLong(0);\n     private final AtomicLong _txnCount = new AtomicLong(0);\n \n-    private final T _session;\n+    private final AMQProtocolEngine _connection;\n     private AtomicBoolean _closing = new AtomicBoolean(false);\n \n     private final Set<Object> _blockingEntities = Collections.synchronizedSet(new HashSet<Object>());\n@@ -181,8 +190,8 @@ public class AMQChannel<T extends AMQProtocolSession<T>>\n     private final TransactionTimeoutHelper _transactionTimeoutHelper;\n     private final UUID _id = UUID.randomUUID();\n \n-    private final List<Action<? super AMQChannel<T>>> _taskList =\n-            new CopyOnWriteArrayList<Action<? super AMQChannel<T>>>();\n+    private final List<Action<? super AMQChannel>> _taskList =\n+            new CopyOnWriteArrayList<Action<? super AMQChannel>>();\n \n \n     private final CapacityCheckAction _capacityCheckAction = new CapacityCheckAction();\n@@ -194,15 +203,14 @@ public class AMQChannel<T extends AMQProtocolSession<T>>\n     private Session<?> _modelObject;\n \n \n-    public AMQChannel(T session, int channelId, final MessageStore messageStore)\n-            throws AMQException\n+    public AMQChannel(AMQProtocolEngine connection, int channelId, final MessageStore messageStore)\n     {\n-        _session = session;\n+        _connection = connection;\n         _channelId = channelId;\n \n-        _subject = new Subject(false, session.getAuthorizedSubject().getPrincipals(),\n-                               session.getAuthorizedSubject().getPublicCredentials(),\n-                               session.getAuthorizedSubject().getPrivateCredentials());\n+        _subject = new Subject(false, connection.getAuthorizedSubject().getPrincipals(),\n+                               connection.getAuthorizedSubject().getPublicCredentials(),\n+                               connection.getAuthorizedSubject().getPrivateCredentials());\n         _subject.getPrincipals().add(new SessionPrincipal(this));\n         _logSubject = new ChannelLogSubject(this);\n \n@@ -211,7 +219,7 @@ public AMQChannel(T session, int channelId, final MessageStore messageStore)\n         // by default the session is non-transactional\n         _transaction = new AsyncAutoCommitTransaction(_messageStore, this);\n \n-        _clientDeliveryMethod = session.createDeliveryMethod(_channelId);\n+        _clientDeliveryMethod = connection.createDeliveryMethod(_channelId);\n \n         _transactionTimeoutHelper = new TransactionTimeoutHelper(_logSubject, new CloseAction()\n         {\n@@ -242,6 +250,52 @@ public Object run()\n \n     }\n \n+    private boolean performGet(final AMQQueue queue,\n+                               final boolean acks)\n+            throws MessageSource.ExistingConsumerPreventsExclusive,\n+                   MessageSource.ExistingExclusiveConsumer, MessageSource.ConsumerAccessRefused\n+    {\n+\n+        final FlowCreditManager singleMessageCredit = new MessageOnlyCreditManager(1L);\n+\n+        final GetDeliveryMethod getDeliveryMethod =\n+                new GetDeliveryMethod(singleMessageCredit, queue);\n+        final RecordDeliveryMethod getRecordMethod = new RecordDeliveryMethod()\n+        {\n+\n+            public void recordMessageDelivery(final ConsumerImpl sub,\n+                                              final MessageInstance entry,\n+                                              final long deliveryTag)\n+            {\n+                addUnacknowledgedMessage(entry, deliveryTag, null);\n+            }\n+        };\n+\n+        ConsumerTarget_0_8 target;\n+        EnumSet<ConsumerImpl.Option> options = EnumSet.of(ConsumerImpl.Option.TRANSIENT, ConsumerImpl.Option.ACQUIRES,\n+                                                          ConsumerImpl.Option.SEES_REQUEUES);\n+        if (acks)\n+        {\n+\n+            target = ConsumerTarget_0_8.createAckTarget(this,\n+                                                        AMQShortString.EMPTY_STRING, null,\n+                                                        singleMessageCredit, getDeliveryMethod, getRecordMethod);\n+        }\n+        else\n+        {\n+            target = ConsumerTarget_0_8.createGetNoAckTarget(this,\n+                                                             AMQShortString.EMPTY_STRING, null,\n+                                                             singleMessageCredit, getDeliveryMethod, getRecordMethod);\n+        }\n+\n+        ConsumerImpl sub = queue.addConsumer(target, null, AMQMessage.class, \"\", options);\n+        sub.flush();\n+        sub.close();\n+        return getDeliveryMethod.hasDeliveredMessage();\n+\n+\n+    }\n+\n     /** Sets this channel to be part of a local transaction */\n     public void setLocalTransactional()\n     {\n@@ -250,7 +304,7 @@ public void setLocalTransactional()\n             @Override\n             public long getActivityTime()\n             {\n-                return _session.getLastReceivedTime();\n+                return _connection.getLastReceivedTime();\n             }\n         });\n         _txnStarts.incrementAndGet();\n@@ -324,27 +378,18 @@ public void setPublishFrame(MessagePublishInfo info, final MessageDestination e)\n     }\n \n     public void publishContentHeader(ContentHeaderBody contentHeaderBody)\n-            throws AMQException\n     {\n-        if (_currentMessage == null)\n+        if (_logger.isDebugEnabled())\n         {\n-            throw new AMQException(\"Received content header without previously receiving a BasicPublish frame\");\n+            _logger.debug(\"Content header received on channel \" + _channelId);\n         }\n-        else\n-        {\n-            if (_logger.isDebugEnabled())\n-            {\n-                _logger.debug(\"Content header received on channel \" + _channelId);\n-            }\n \n-            _currentMessage.setContentHeaderBody(contentHeaderBody);\n+        _currentMessage.setContentHeaderBody(contentHeaderBody);\n \n-            deliverCurrentMessageIfComplete();\n-        }\n+        deliverCurrentMessageIfComplete();\n     }\n \n     private void deliverCurrentMessageIfComplete()\n-            throws AMQException\n     {\n         // check and deliver if header says body length is zero\n         if (_currentMessage.allContentReceived())\n@@ -355,7 +400,7 @@ private void deliverCurrentMessageIfComplete()\n                 final MessageMetaData messageMetaData =\n                         new MessageMetaData(_currentMessage.getMessagePublishInfo(),\n                                             _currentMessage.getContentHeader(),\n-                                            getProtocolSession().getLastReceivedTime());\n+                                            getConnection().getLastReceivedTime());\n \n                 final StoredMessage<MessageMetaData> handle = _messageStore.addMessage(messageMetaData);\n                 final AMQMessage amqMessage = createAMQMessage(_currentMessage, handle);\n@@ -430,7 +475,7 @@ public Object getProperty(final Property prop)\n             {\n                 long bodySize = _currentMessage.getSize();\n                 long timestamp = _currentMessage.getContentHeader().getProperties().getTimestamp();\n-                _session.registerMessageReceived(bodySize, timestamp);\n+                _connection.registerMessageReceived(bodySize, timestamp);\n                 _currentMessage = null;\n             }\n         }\n@@ -443,13 +488,13 @@ public Object getProperty(final Property prop)\n      * Pre-requisite: the current message is judged to have no destination queues.\n      *\n      * @throws AMQConnectionException if the message is mandatory close-on-no-route\n-     * @see AMQProtocolSession#isCloseWhenNoRoute()\n+     * @see AMQProtocolEngine#isCloseWhenNoRoute()\n      */\n-    private void handleUnroutableMessage(AMQMessage message) throws AMQConnectionException\n+    private void handleUnroutableMessage(AMQMessage message)\n     {\n         boolean mandatory = message.isMandatory();\n         String description = currentMessageDescription();\n-        boolean closeOnNoRoute = _session.isCloseWhenNoRoute();\n+        boolean closeOnNoRoute = _connection.isCloseWhenNoRoute();\n \n         if(_logger.isDebugEnabled())\n         {\n@@ -458,29 +503,29 @@ private void handleUnroutableMessage(AMQMessage message) throws AMQConnectionExc\n                     description, mandatory, isTransactional(), closeOnNoRoute));\n         }\n \n-        if (mandatory && isTransactional() && _session.isCloseWhenNoRoute())\n-        {\n-            throw new AMQConnectionException(\n-                    AMQConstant.NO_ROUTE,\n-                    \"No route for message \" + currentMessageDescription(),\n-                    0, 0, // default class and method ids\n-                    getProtocolSession().getProtocolVersion().getMajorVersion(),\n-                    getProtocolSession().getProtocolVersion().getMinorVersion(),\n-                    (Throwable) null);\n-        }\n-\n-        if (mandatory || message.isImmediate())\n+        if (mandatory && isTransactional() && _connection.isCloseWhenNoRoute())\n         {\n-            _transaction.addPostTransactionAction(new WriteReturnAction(AMQConstant.NO_ROUTE, \"No Route for message \" + currentMessageDescription(), message));\n+            _connection.closeConnection(AMQConstant.NO_ROUTE,\n+                    \"No route for message \" + currentMessageDescription(), _channelId);\n         }\n         else\n         {\n-            AMQShortString exchangeName = _currentMessage.getExchangeName();\n-            AMQShortString routingKey = _currentMessage.getMessagePublishInfo().getRoutingKey();\n+            if (mandatory || message.isImmediate())\n+            {\n+                _transaction.addPostTransactionAction(new WriteReturnAction(AMQConstant.NO_ROUTE,\n+                                                                            \"No Route for message \"\n+                                                                            + currentMessageDescription(),\n+                                                                            message));\n+            }\n+            else\n+            {\n+                AMQShortString exchangeName = _currentMessage.getExchangeName();\n+                AMQShortString routingKey = _currentMessage.getMessagePublishInfo().getRoutingKey();\n \n-            getVirtualHost().getEventLogger().message(\n-                    ExchangeMessages.DISCARDMSG(exchangeName == null ? null : exchangeName.asString(),\n-                                                routingKey == null ? null : routingKey.asString()));\n+                getVirtualHost().getEventLogger().message(\n+                        ExchangeMessages.DISCARDMSG(exchangeName == null ? null : exchangeName.asString(),\n+                                                    routingKey == null ? null : routingKey.asString()));\n+            }\n         }\n     }\n \n@@ -499,13 +544,8 @@ private String currentMessageDescription()\n                         : _currentMessage.getMessagePublishInfo().getRoutingKey().toString());\n     }\n \n-    public void publishContentBody(ContentBody contentBody) throws AMQException\n+    public void publishContentBody(ContentBody contentBody)\n     {\n-        if (_currentMessage == null)\n-        {\n-            throw new AMQException(\"Received content body without previously receiving a Content Header\");\n-        }\n-\n         if (_logger.isDebugEnabled())\n         {\n             _logger.debug(debugIdentity() + \" content body received on channel \" + _channelId);\n@@ -517,13 +557,6 @@ public void publishContentBody(ContentBody contentBody) throws AMQException\n \n             deliverCurrentMessageIfComplete();\n         }\n-        catch (AMQException e)\n-        {\n-            // we want to make sure we don't keep a reference to the message in the\n-            // event of an error\n-            _currentMessage = null;\n-            throw e;\n-        }\n         catch (RuntimeException e)\n         {\n             // we want to make sure we don't keep a reference to the message in the\n@@ -566,9 +599,10 @@ public ConsumerTarget getSubscription(AMQShortString tag)\n      */\n     public AMQShortString consumeFromSource(AMQShortString tag, Collection<MessageSource> sources, boolean acks,\n                                             FieldTable filters, boolean exclusive, boolean noLocal)\n-            throws AMQException, MessageSource.ExistingConsumerPreventsExclusive,\n-                   MessageSource.ExistingExclusiveConsumer, AMQInvalidArgumentException,\n-                   MessageSource.ConsumerAccessRefused\n+            throws MessageSource.ExistingConsumerPreventsExclusive,\n+                   MessageSource.ExistingExclusiveConsumer,\n+                   AMQInvalidArgumentException,\n+                   MessageSource.ConsumerAccessRefused, ConsumerTagInUseException\n     {\n         if (tag == null)\n         {\n@@ -577,7 +611,7 @@ public AMQShortString consumeFromSource(AMQShortString tag, Collection<MessageSo\n \n         if (_tag2SubscriptionTargetMap.containsKey(tag))\n         {\n-            throw new AMQException(\"Consumer already exists with same tag: \" + tag);\n+            throw new ConsumerTagInUseException(\"Consumer already exists with same tag: \" + tag);\n         }\n \n         ConsumerTarget_0_8 target;\n@@ -649,27 +683,11 @@ public boolean matches(final Filterable message)\n                 }\n             }\n         }\n-        catch (AccessControlException e)\n-        {\n-            _tag2SubscriptionTargetMap.remove(tag);\n-            throw e;\n-        }\n-        catch (MessageSource.ExistingExclusiveConsumer e)\n-        {\n-            _tag2SubscriptionTargetMap.remove(tag);\n-            throw e;\n-        }\n-        catch (MessageSource.ExistingConsumerPreventsExclusive e)\n-        {\n-            _tag2SubscriptionTargetMap.remove(tag);\n-            throw e;\n-        }\n-        catch (AMQInvalidArgumentException e)\n-        {\n-            _tag2SubscriptionTargetMap.remove(tag);\n-            throw e;\n-        }\n-        catch (MessageSource.ConsumerAccessRefused e)\n+        catch (AccessControlException\n+                | MessageSource.ExistingExclusiveConsumer\n+                | MessageSource.ExistingConsumerPreventsExclusive\n+                | AMQInvalidArgumentException\n+                | MessageSource.ConsumerAccessRefused e)\n         {\n             _tag2SubscriptionTargetMap.remove(tag);\n             throw e;\n@@ -730,7 +748,7 @@ public void close(AMQConstant cause, String message)\n \n         unsubscribeAllConsumers();\n \n-        for (Action<? super AMQChannel<T>> task : _taskList)\n+        for (Action<? super AMQChannel> task : _taskList)\n         {\n             task.performAction(this);\n         }\n@@ -897,9 +915,8 @@ public boolean isDeliveredTooManyTimes(final long deliveryTag)\n     /**\n      * Called to resend all outstanding unacknowledged messages to this same channel.\n      *\n-     * @throws AMQException When something goes wrong.\n      */\n-    public void resend() throws AMQException\n+    public void resend()\n     {\n \n \n@@ -985,9 +1002,8 @@ public void resend() throws AMQException\n      * @param multiple    if true will acknowledge all messages up to an including the delivery tag. if false only\n      *                    acknowledges the single message specified by the delivery tag\n      *\n-     * @throws AMQException if the delivery tag is unknown (e.g. not outstanding) on this channel\n      */\n-    public void acknowledgeMessage(long deliveryTag, boolean multiple) throws AMQException\n+    public void acknowledgeMessage(long deliveryTag, boolean multiple)\n     {\n         Collection<MessageInstance> ackedMessages = getAckedMessages(deliveryTag, multiple);\n         _transaction.dequeue(ackedMessages, new MessageAcknowledgeAction(ackedMessages));\n@@ -1084,22 +1100,13 @@ public void setSuspended(boolean suspended)\n \n     public boolean isSuspended()\n     {\n-        return _suspended.get()  || _closing.get() || _session.isClosing();\n+        return _suspended.get()  || _closing.get() || _connection.isClosing();\n     }\n \n-    public void commit() throws AMQException\n-    {\n-        commit(null, false);\n-    }\n \n-\n-    public void commit(final Runnable immediateAction, boolean async) throws AMQException\n+    public void commit(final Runnable immediateAction, boolean async)\n     {\n \n-        if (!isTransactional())\n-        {\n-            throw new AMQException(\"Fatal error: commit called on non-transactional channel\");\n-        }\n \n         if(async && _transaction instanceof LocalTransaction)\n         {\n@@ -1132,17 +1139,8 @@ public void run()\n         }\n     }\n \n-    public void rollback() throws AMQException\n-    {\n-        rollback(NULL_TASK);\n-    }\n-\n-    public void rollback(Runnable postRollbackTask) throws AMQException\n+    public void rollback(Runnable postRollbackTask)\n     {\n-        if (!isTransactional())\n-        {\n-            throw new AMQException(\"Fatal error: commit called on non-transactional channel\");\n-        }\n \n         // stop all subscriptions\n         _rollingBack = true;\n@@ -1200,7 +1198,7 @@ public void rollback(Runnable postRollbackTask) throws AMQException\n \n     public String toString()\n     {\n-        return \"(\"+ _suspended.get() + \", \" + _closing.get() + \", \" + _session.isClosing() + \") \"+\"[\"+_session.toString()+\":\"+_channelId+\"]\";\n+        return \"(\"+ _suspended.get() + \", \" + _closing.get() + \", \" + _connection.isClosing() + \") \"+\"[\"+ _connection.toString()+\":\"+_channelId+\"]\";\n     }\n \n     public void setDefaultQueue(AMQQueue queue)\n@@ -1219,9 +1217,9 @@ public boolean isClosing()\n         return _closing.get();\n     }\n \n-    public AMQProtocolSession getProtocolSession()\n+    public AMQProtocolEngine getConnection()\n     {\n-        return _session;\n+        return _connection;\n     }\n \n     public FlowCreditManager getCreditManager()\n@@ -1261,21 +1259,17 @@ public RecordDeliveryMethod getRecordDeliveryMethod()\n \n \n     private AMQMessage createAMQMessage(IncomingMessage incomingMessage, StoredMessage<MessageMetaData> handle)\n-            throws AMQException\n     {\n \n-        AMQMessage message = new AMQMessage(handle, _session.getReference());\n-\n-        final BasicContentHeaderProperties properties =\n-                  incomingMessage.getContentHeader().getProperties();\n+        AMQMessage message = new AMQMessage(handle, _connection.getReference());\n \n         return message;\n     }\n \n     private boolean checkMessageUserId(ContentHeaderBody header)\n     {\n         AMQShortString userID = header.getProperties().getUserId();\n-        return (!_messageAuthorizationRequired || _session.getAuthorizedPrincipal().getName().equals(userID == null? \"\" : userID.toString()));\n+        return (!_messageAuthorizationRequired || _connection.getAuthorizedPrincipal().getName().equals(userID == null? \"\" : userID.toString()));\n \n     }\n \n@@ -1286,14 +1280,14 @@ public UUID getId()\n     }\n \n     @Override\n-    public T getConnectionModel()\n+    public AMQProtocolEngine getConnectionModel()\n     {\n-        return _session;\n+        return _connection;\n     }\n \n     public String getClientID()\n     {\n-        return String.valueOf(_session.getContextKey());\n+        return String.valueOf(_connection.getContextKey());\n     }\n \n     public LogSubject getLogSubject()\n@@ -1308,13 +1302,13 @@ public int compareTo(AMQChannel o)\n     }\n \n     @Override\n-    public void addDeleteTask(final Action<? super AMQChannel<T>> task)\n+    public void addDeleteTask(final Action<? super AMQChannel> task)\n     {\n         _taskList.add(task);\n     }\n \n     @Override\n-    public void removeDeleteTask(final Action<? super AMQChannel<T>> task)\n+    public void removeDeleteTask(final Action<? super AMQChannel> task)\n     {\n         _taskList.remove(task);\n     }\n@@ -1324,6 +1318,46 @@ public Subject getSubject()\n         return _subject;\n     }\n \n+    public boolean hasCurrentMessage()\n+    {\n+        return _currentMessage != null;\n+    }\n+\n+    private class GetDeliveryMethod implements ClientDeliveryMethod\n+    {\n+\n+        private final FlowCreditManager _singleMessageCredit;\n+        private final AMQQueue _queue;\n+        private boolean _deliveredMessage;\n+\n+        public GetDeliveryMethod(final FlowCreditManager singleMessageCredit,\n+                                 final AMQQueue queue)\n+        {\n+            _singleMessageCredit = singleMessageCredit;\n+            _queue = queue;\n+        }\n+\n+        @Override\n+        public long deliverToClient(final ConsumerImpl sub, final ServerMessage message,\n+                                    final InstanceProperties props, final long deliveryTag)\n+        {\n+            _singleMessageCredit.useCreditForMessage(message.getSize());\n+            long size = _connection.getProtocolOutputConverter().writeGetOk(message,\n+                                                                            props,\n+                                                                            AMQChannel.this.getChannelId(),\n+                                                                            deliveryTag,\n+                                                                            _queue.getQueueDepthMessages());\n+\n+            _deliveredMessage = true;\n+            return size;\n+        }\n+\n+        public boolean hasDeliveredMessage()\n+        {\n+            return _deliveredMessage;\n+        }\n+    }\n+\n \n     private class ImmediateAction implements Action<MessageInstance>\n     {\n@@ -1352,7 +1386,7 @@ public void performAction(MessageInstance entry)\n                                     public void postCommit()\n                                     {\n                                         final ProtocolOutputConverter outputConverter =\n-                                                    _session.getProtocolOutputConverter();\n+                                                    _connection.getProtocolOutputConverter();\n \n                                         outputConverter.writeReturn(message.getMessagePublishInfo(),\n                                                                     message.getContentHeaderBody(),\n@@ -1475,7 +1509,7 @@ public WriteReturnAction(AMQConstant errorCode,\n         public void postCommit()\n         {\n             AMQMessage message = _reference.getMessage();\n-            _session.getProtocolOutputConverter().writeReturn(message.getMessagePublishInfo(),\n+            _connection.getProtocolOutputConverter().writeReturn(message.getMessagePublishInfo(),\n                                                           message.getContentHeaderBody(),\n                                                           message,\n                                                           _channelId,\n@@ -1544,7 +1578,7 @@ public synchronized void unblock(AMQQueue queue)\n     @Override\n     public Object getConnectionReference()\n     {\n-        return getProtocolSession().getReference();\n+        return getConnection().getReference();\n     }\n \n     public int getUnacknowledgedMessageCount()\n@@ -1554,9 +1588,9 @@ public int getUnacknowledgedMessageCount()\n \n     private void flow(boolean flow)\n     {\n-        MethodRegistry methodRegistry = _session.getMethodRegistry();\n+        MethodRegistry methodRegistry = _connection.getMethodRegistry();\n         AMQMethodBody responseBody = methodRegistry.createChannelFlowBody(flow);\n-        _session.writeFrame(responseBody.generateFrame(_channelId));\n+        _connection.writeFrame(responseBody.generateFrame(_channelId));\n     }\n \n     @Override\n@@ -1567,7 +1601,7 @@ public boolean getBlocking()\n \n     public VirtualHostImpl getVirtualHost()\n     {\n-        return getProtocolSession().getVirtualHost();\n+        return getConnection().getVirtualHost();\n     }\n \n     public void checkTransactionStatus(long openWarn, long openClose, long idleWarn, long idleClose)\n@@ -1581,19 +1615,19 @@ public void checkTransactionStatus(long openWarn, long openClose, long idleWarn,\n      */\n     private void closeConnection(String reason) throws AMQException\n     {\n-        Lock receivedLock = _session.getReceivedLock();\n+        Lock receivedLock = _connection.getReceivedLock();\n         receivedLock.lock();\n         try\n         {\n-            _session.close(AMQConstant.RESOURCE_ERROR, reason);\n+            _connection.close(AMQConstant.RESOURCE_ERROR, reason);\n         }\n         finally\n         {\n             receivedLock.unlock();\n         }\n     }\n \n-    public void deadLetter(long deliveryTag) throws AMQException\n+    public void deadLetter(long deliveryTag)\n     {\n         final UnacknowledgedMessageMap unackedMap = getUnacknowledgedMessageMap();\n         final MessageInstance rejectedQueueEntry = unackedMap.remove(deliveryTag);\n@@ -1816,4 +1850,1521 @@ public long getTransactionUpdateTime()\n             return 0L;\n         }\n     }\n+\n+    @Override\n+    public void receiveAccessRequest(final AMQShortString realm,\n+                                     final boolean exclusive,\n+                                     final boolean passive,\n+                                     final boolean active, final boolean write, final boolean read)\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV[\" + _channelId + \"] AccessRequest[\" +\" realm: \" + realm +\n+                          \" exclusive: \" + exclusive +\n+                          \" passive: \" + passive +\n+                          \" active: \" + active +\n+                          \" write: \" + write + \" read: \" + read + \" ]\");\n+        }\n+\n+        MethodRegistry methodRegistry = _connection.getMethodRegistry();\n+\n+        if (ProtocolVersion.v0_91.equals(_connection.getProtocolVersion()))\n+        {\n+            _connection.closeConnection(AMQConstant.COMMAND_INVALID,\n+                                                    \"AccessRequest not present in AMQP versions other than 0-8, 0-9\",\n+                                                    _channelId);\n+        }\n+        else\n+        {\n+            // We don't implement access control class, but to keep clients happy that expect it\n+            // always use the \"0\" ticket.\n+            AccessRequestOkBody response = methodRegistry.createAccessRequestOkBody(0);\n+            sync();\n+            _connection.writeFrame(response.generateFrame(_channelId));\n+        }\n+    }\n+\n+    @Override\n+    public void receiveBasicAck(final long deliveryTag, final boolean multiple)\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV[\" + _channelId + \"] BasicAck[\" +\" deliveryTag: \" + deliveryTag + \" multiple: \" + multiple + \" ]\");\n+        }\n+\n+        acknowledgeMessage(deliveryTag, multiple);\n+    }\n+\n+    @Override\n+    public void receiveBasicCancel(final AMQShortString consumerTag, final boolean nowait)\n+    {\n+\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV[\" + _channelId + \"] BasicCancel[\" +\" consumerTag: \" + consumerTag + \" noWait: \" + nowait + \" ]\");\n+        }\n+\n+        unsubscribeConsumer(consumerTag);\n+        if (!nowait)\n+        {\n+            MethodRegistry methodRegistry = _connection.getMethodRegistry();\n+            BasicCancelOkBody cancelOkBody = methodRegistry.createBasicCancelOkBody(consumerTag);\n+            sync();\n+            _connection.writeFrame(cancelOkBody.generateFrame(_channelId));\n+        }\n+    }\n+\n+    @Override\n+    public void receiveBasicConsume(final AMQShortString queue,\n+                                    final AMQShortString consumerTag,\n+                                    final boolean noLocal,\n+                                    final boolean noAck,\n+                                    final boolean exclusive, final boolean nowait, final FieldTable arguments)\n+    {\n+\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV[\" + _channelId + \"] BasicConsume[\" +\" queue: \" + queue +\n+                          \" consumerTag: \" + consumerTag +\n+                          \" noLocal: \" + noLocal +\n+                          \" noAck: \" + noAck +\n+                          \" exclusive: \" + exclusive + \" nowait: \" + nowait + \" arguments: \" + arguments + \" ]\");\n+        }\n+\n+        AMQShortString consumerTag1 = consumerTag;\n+        VirtualHostImpl<?, ?, ?> vHost = _connection.getVirtualHost();\n+        sync();\n+        String queueName = queue == null ? null : queue.asString();\n+\n+        MessageSource queue1 = queueName == null ? getDefaultQueue() : vHost.getQueue(queueName);\n+        final Collection<MessageSource> sources = new HashSet<>();\n+        if (queue1 != null)\n+        {\n+            sources.add(queue1);\n+        }\n+        else if (vHost.getContextValue(Boolean.class, \"qpid.enableMultiQueueConsumers\")\n+                 && arguments != null\n+                 && arguments.get(\"x-multiqueue\") instanceof Collection)\n+        {\n+            for (Object object : (Collection<Object>) arguments.get(\"x-multiqueue\"))\n+            {\n+                String sourceName = String.valueOf(object);\n+                sourceName = sourceName.trim();\n+                if (sourceName.length() != 0)\n+                {\n+                    MessageSource source = vHost.getMessageSource(sourceName);\n+                    if (source == null)\n+                    {\n+                        sources.clear();\n+                        break;\n+                    }\n+                    else\n+                    {\n+                        sources.add(source);\n+                    }\n+                }\n+            }\n+            queueName = arguments.get(\"x-multiqueue\").toString();\n+        }\n+\n+        if (sources.isEmpty())\n+        {\n+            if (_logger.isDebugEnabled())\n+            {\n+                _logger.debug(\"No queue for '\" + queueName + \"'\");\n+            }\n+            if (queueName != null)\n+            {\n+                closeChannel(AMQConstant.NOT_FOUND, \"No such queue, '\" + queueName + \"'\");\n+            }\n+            else\n+            {\n+                _connection.closeConnection(AMQConstant.NOT_ALLOWED,\n+                                            \"No queue name provided, no default queue defined.\", _channelId);\n+            }\n+        }\n+        else\n+        {\n+            try\n+            {\n+                consumerTag1 = consumeFromSource(consumerTag1,\n+                                                 sources,\n+                                                 !noAck,\n+                                                 arguments,\n+                                                 exclusive,\n+                                                 noLocal);\n+                if (!nowait)\n+                {\n+                    MethodRegistry methodRegistry = _connection.getMethodRegistry();\n+                    AMQMethodBody responseBody = methodRegistry.createBasicConsumeOkBody(consumerTag1);\n+                    _connection.writeFrame(responseBody.generateFrame(_channelId));\n+\n+                }\n+            }\n+            catch (ConsumerTagInUseException cte)\n+            {\n+\n+                _connection.closeConnection(AMQConstant.NOT_ALLOWED,\n+                                            \"Non-unique consumer tag, '\" + consumerTag1\n+                                            + \"'\", _channelId);\n+            }\n+            catch (AMQInvalidArgumentException ise)\n+            {\n+                _connection.closeConnection(AMQConstant.ARGUMENT_INVALID, ise.getMessage(), _channelId);\n+\n+\n+            }\n+            catch (AMQQueue.ExistingExclusiveConsumer e)\n+            {\n+                _connection.closeConnection(AMQConstant.ACCESS_REFUSED,\n+                                            \"Cannot subscribe to queue \"\n+                                                                    + queue1.getName()\n+                                                                    + \" as it already has an existing exclusive consumer\", _channelId);\n+\n+            }\n+            catch (AMQQueue.ExistingConsumerPreventsExclusive e)\n+            {\n+                _connection.closeConnection(AMQConstant.ACCESS_REFUSED,\n+                                            \"Cannot subscribe to queue \"\n+                                                                    + queue1.getName()\n+                                                                    + \" exclusively as it already has a consumer\", _channelId);\n+\n+            }\n+            catch (AccessControlException e)\n+            {\n+                _connection.closeConnection(AMQConstant.ACCESS_REFUSED, \"Cannot subscribe to queue \"\n+                                                                    + queue1.getName()\n+                                                                    + \" permission denied\", _channelId);\n+\n+            }\n+            catch (MessageSource.ConsumerAccessRefused consumerAccessRefused)\n+            {\n+                _connection.closeConnection(AMQConstant.ACCESS_REFUSED,\n+                                            \"Cannot subscribe to queue \"\n+                                                                    + queue1.getName()\n+                                                                    + \" as it already has an incompatible exclusivity policy\", _channelId);\n+\n+            }\n+\n+        }\n+    }\n+\n+    @Override\n+    public void receiveBasicGet(final AMQShortString queueName, final boolean noAck)\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV[\" + _channelId + \"] BasicGet[\" +\" queue: \" + queueName + \" noAck: \" + noAck + \" ]\");\n+        }\n+\n+        VirtualHostImpl vHost = _connection.getVirtualHost();\n+        sync();\n+        AMQQueue queue = queueName == null ? getDefaultQueue() : vHost.getQueue(queueName.toString());\n+        if (queue == null)\n+        {\n+            _logger.info(\"No queue for '\" + queueName + \"'\");\n+            if (queueName != null)\n+            {\n+                _connection.closeConnection(AMQConstant.NOT_FOUND, \"No such queue, '\" + queueName + \"'\", _channelId);\n+\n+            }\n+            else\n+            {\n+                _connection.closeConnection(AMQConstant.NOT_ALLOWED,\n+                                            \"No queue name provided, no default queue defined.\", _channelId);\n+\n+            }\n+        }\n+        else\n+        {\n+\n+            try\n+            {\n+                if (!performGet(queue, !noAck))\n+                {\n+                    MethodRegistry methodRegistry = _connection.getMethodRegistry();\n+\n+                    BasicGetEmptyBody responseBody = methodRegistry.createBasicGetEmptyBody(null);\n+\n+                    _connection.writeFrame(responseBody.generateFrame(_channelId));\n+                }\n+            }\n+            catch (AccessControlException e)\n+            {\n+                _connection.closeConnection(AMQConstant.ACCESS_REFUSED, e.getMessage(), _channelId);\n+            }\n+            catch (MessageSource.ExistingExclusiveConsumer e)\n+            {\n+                _connection.closeConnection(AMQConstant.NOT_ALLOWED, \"Queue has an exclusive consumer\", _channelId);\n+            }\n+            catch (MessageSource.ExistingConsumerPreventsExclusive e)\n+            {\n+                _connection.closeConnection(AMQConstant.INTERNAL_ERROR,\n+                                            \"The GET request has been evaluated as an exclusive consumer, \" +\n+                                        \"this is likely due to a programming error in the Qpid broker\", _channelId);\n+            }\n+            catch (MessageSource.ConsumerAccessRefused consumerAccessRefused)\n+            {\n+                _connection.closeConnection(AMQConstant.NOT_ALLOWED,\n+                                            \"Queue has an incompatible exclusivity policy\", _channelId);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void receiveBasicPublish(final AMQShortString exchangeName,\n+                                    final AMQShortString routingKey,\n+                                    final boolean mandatory,\n+                                    final boolean immediate)\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV[\" + _channelId + \"] BasicPublish[\" +\" exchange: \" + exchangeName +\n+                          \" routingKey: \" + routingKey +\n+                          \" mandatory: \" + mandatory +\n+                          \" immediate: \" + immediate + \" ]\");\n+        }\n+\n+        VirtualHostImpl vHost = _connection.getVirtualHost();\n+\n+        MessageDestination destination;\n+\n+        if (isDefaultExchange(exchangeName))\n+        {\n+            destination = vHost.getDefaultDestination();\n+        }\n+        else\n+        {\n+            destination = vHost.getMessageDestination(exchangeName.toString());\n+        }\n+\n+        // if the exchange does not exist we raise a channel exception\n+        if (destination == null)\n+        {\n+            closeChannel(AMQConstant.NOT_FOUND, \"Unknown exchange name: \" + exchangeName);\n+        }\n+        else\n+        {\n+\n+            MessagePublishInfo info = new MessagePublishInfo(exchangeName,\n+                                                             immediate,\n+                                                             mandatory,\n+                                                             routingKey);\n+\n+            try\n+            {\n+                setPublishFrame(info, destination);\n+            }\n+            catch (AccessControlException e)\n+            {\n+                _connection.closeConnection(AMQConstant.ACCESS_REFUSED, e.getMessage(), getChannelId());\n+\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void receiveBasicQos(final long prefetchSize, final int prefetchCount, final boolean global)\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV[\" + _channelId + \"] BasicQos[\" +\" prefetchSize: \" + prefetchSize + \" prefetchCount: \" + prefetchCount + \" global: \" + global + \" ]\");\n+        }\n+\n+        sync();\n+        setCredit(prefetchSize, prefetchCount);\n+\n+        MethodRegistry methodRegistry = _connection.getMethodRegistry();\n+        AMQMethodBody responseBody = methodRegistry.createBasicQosOkBody();\n+        _connection.writeFrame(responseBody.generateFrame(getChannelId()));\n+\n+    }\n+\n+    @Override\n+    public void receiveBasicRecover(final boolean requeue, final boolean sync)\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV[\" + _channelId + \"] BasicRecover[\" + \" requeue: \" + requeue + \" sync: \" + sync + \" ]\");\n+        }\n+\n+        resend();\n+\n+        if (sync)\n+        {\n+            MethodRegistry methodRegistry = _connection.getMethodRegistry();\n+            AMQMethodBody recoverOk = methodRegistry.createBasicRecoverSyncOkBody();\n+            sync();\n+            _connection.writeFrame(recoverOk.generateFrame(getChannelId()));\n+\n+        }\n+\n+    }\n+\n+    @Override\n+    public void receiveBasicReject(final long deliveryTag, final boolean requeue)\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV[\" + _channelId + \"] BasicReject[\" +\" deliveryTag: \" + deliveryTag + \" requeue: \" + requeue + \" ]\");\n+        }\n+\n+        MessageInstance message = getUnacknowledgedMessageMap().get(deliveryTag);\n+\n+        if (message == null)\n+        {\n+            _logger.warn(\"Dropping reject request as message is null for tag:\" + deliveryTag);\n+        }\n+        else\n+        {\n+\n+            if (message.getMessage() == null)\n+            {\n+                _logger.warn(\"Message has already been purged, unable to Reject.\");\n+            }\n+            else\n+            {\n+\n+                if (_logger.isDebugEnabled())\n+                {\n+                    _logger.debug(\"Rejecting: DT:\" + deliveryTag\n+                                                             + \"-\" + message.getMessage() +\n+                                  \": Requeue:\" + requeue\n+                                  +\n+                                  \" on channel:\" + debugIdentity());\n+                }\n+\n+                if (requeue)\n+                {\n+                    //this requeue represents a message rejected from the pre-dispatch queue\n+                    //therefore we need to amend the delivery counter.\n+                    message.decrementDeliveryCount();\n+\n+                    requeue(deliveryTag);\n+                }\n+                else\n+                {\n+                    // Since the Java client abuses the reject flag for requeing after rollback, we won't set reject here\n+                    // as it would prevent redelivery\n+                    // message.reject();\n+\n+                    final boolean maxDeliveryCountEnabled = isMaxDeliveryCountEnabled(deliveryTag);\n+                    _logger.debug(\"maxDeliveryCountEnabled: \"\n+                                  + maxDeliveryCountEnabled\n+                                  + \" deliveryTag \"\n+                                  + deliveryTag);\n+                    if (maxDeliveryCountEnabled)\n+                    {\n+                        final boolean deliveredTooManyTimes = isDeliveredTooManyTimes(deliveryTag);\n+                        _logger.debug(\"deliveredTooManyTimes: \"\n+                                      + deliveredTooManyTimes\n+                                      + \" deliveryTag \"\n+                                      + deliveryTag);\n+                        if (deliveredTooManyTimes)\n+                        {\n+                            deadLetter(deliveryTag);\n+                        }\n+                        else\n+                        {\n+                            //this requeue represents a message rejected because of a recover/rollback that we\n+                            //are not ready to DLQ. We rely on the reject command to resend from the unacked map\n+                            //and therefore need to increment the delivery counter so we cancel out the effect\n+                            //of the AMQChannel#resend() decrement.\n+                            message.incrementDeliveryCount();\n+                        }\n+                    }\n+                    else\n+                    {\n+                        requeue(deliveryTag);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void receiveChannelClose(final int replyCode,\n+                                    final AMQShortString replyText,\n+                                    final int classId,\n+                                    final int methodId)\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV[\" + _channelId + \"] ChannelClose[\" +\" replyCode: \" + replyCode + \" replyText: \" + replyText + \" classId: \" + classId + \" methodId: \" + methodId + \" ]\");\n+        }\n+\n+\n+        sync();\n+        _connection.closeChannel(this);\n+\n+        _connection.writeFrame(new AMQFrame(getChannelId(),\n+                                            _connection.getMethodRegistry().createChannelCloseOkBody()));\n+    }\n+\n+    @Override\n+    public void receiveChannelCloseOk()\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV[\" + _channelId + \"] ChannelCloseOk\");\n+        }\n+\n+        _connection.closeChannelOk(getChannelId());\n+    }\n+\n+    @Override\n+    public void receiveMessageContent(final byte[] data)\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV[\" + _channelId + \"] MessageContent[\" +\" data: \" + hex(data,_connection.getBinaryDataLimit()) + \" ] \");\n+        }\n+\n+        if(hasCurrentMessage())\n+        {\n+            publishContentBody(new ContentBody(data));\n+        }\n+        else\n+        {\n+            _connection.closeConnection(AMQConstant.COMMAND_INVALID,\n+                                        \"Attempt to send a content header without first sending a publish frame\",\n+                                        _channelId);\n+        }\n+    }\n+\n+    @Override\n+    public void receiveMessageHeader(final BasicContentHeaderProperties properties, final long bodySize)\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV[\" + _channelId + \"] MessageHeader[ properties: {\" + properties + \"} bodySize: \" + bodySize + \" ]\");\n+        }\n+\n+        if(hasCurrentMessage())\n+        {\n+            publishContentHeader(new ContentHeaderBody(properties, bodySize));\n+        }\n+        else\n+        {\n+            _connection.closeConnection(AMQConstant.COMMAND_INVALID,\n+                                        \"Attempt to send a content header without first sending a publish frame\",\n+                                        _channelId);\n+        }\n+    }\n+\n+    @Override\n+    public boolean ignoreAllButCloseOk()\n+    {\n+        return _connection.ignoreAllButCloseOk() || _connection.channelAwaitingClosure(_channelId);\n+    }\n+\n+    @Override\n+    public void receiveChannelFlow(final boolean active)\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV[\" + _channelId + \"] ChannelFlow[\" +\" active: \" + active + \" ]\");\n+        }\n+\n+\n+        sync();\n+        setSuspended(!active);\n+\n+        MethodRegistry methodRegistry = _connection.getMethodRegistry();\n+        AMQMethodBody responseBody = methodRegistry.createChannelFlowOkBody(active);\n+        _connection.writeFrame(responseBody.generateFrame(getChannelId()));\n+\n+    }\n+\n+    @Override\n+    public void receiveChannelFlowOk(final boolean active)\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV[\" + _channelId + \"] ChannelFlowOk[\" +\" active: \" + active + \" ]\");\n+        }\n+\n+        // TODO - should we do anything here?\n+    }\n+\n+    @Override\n+    public void receiveExchangeBound(final AMQShortString exchangeName,\n+                                     final AMQShortString routingKey,\n+                                     final AMQShortString queueName)\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV[\" + _channelId + \"] ExchangeBound[\" +\" exchange: \" + exchangeName + \" routingKey: \" +\n+                          routingKey + \" queue: \" + queueName + \" ]\");\n+        }\n+\n+        VirtualHostImpl virtualHost = _connection.getVirtualHost();\n+        MethodRegistry methodRegistry = _connection.getMethodRegistry();\n+\n+        sync();\n+\n+        int replyCode;\n+        String replyText;\n+\n+        if (isDefaultExchange(exchangeName))\n+        {\n+            if (routingKey == null)\n+            {\n+                if (queueName == null)\n+                {\n+                    replyCode = virtualHost.getQueues().isEmpty()\n+                            ? ExchangeBoundOkBody.NO_BINDINGS\n+                            : ExchangeBoundOkBody.OK;\n+                    replyText = null;\n+\n+                }\n+                else\n+                {\n+                    AMQQueue queue = virtualHost.getQueue(queueName.toString());\n+                    if (queue == null)\n+                    {\n+                        replyCode = ExchangeBoundOkBody.QUEUE_NOT_FOUND;\n+                        replyText = \"Queue '\" + queueName + \"' not found\";\n+                    }\n+                    else\n+                    {\n+                        replyCode = ExchangeBoundOkBody.OK;\n+                        replyText = null;\n+                    }\n+                }\n+            }\n+            else\n+            {\n+                if (queueName == null)\n+                {\n+                    replyCode = virtualHost.getQueue(routingKey.toString()) == null\n+                            ? ExchangeBoundOkBody.NO_QUEUE_BOUND_WITH_RK\n+                            : ExchangeBoundOkBody.OK;\n+                    replyText = null;\n+                }\n+                else\n+                {\n+                    AMQQueue queue = virtualHost.getQueue(queueName.toString());\n+                    if (queue == null)\n+                    {\n+\n+                        replyCode = ExchangeBoundOkBody.QUEUE_NOT_FOUND;\n+                        replyText = \"Queue '\" + queueName + \"' not found\";\n+                    }\n+                    else\n+                    {\n+                        replyCode = queueName.equals(routingKey)\n+                                ? ExchangeBoundOkBody.OK\n+                                : ExchangeBoundOkBody.SPECIFIC_QUEUE_NOT_BOUND_WITH_RK;\n+                        replyText = null;\n+                    }\n+                }\n+            }\n+        }\n+        else\n+        {\n+            ExchangeImpl exchange = virtualHost.getExchange(exchangeName.toString());\n+            if (exchange == null)\n+            {\n+\n+                replyCode = ExchangeBoundOkBody.EXCHANGE_NOT_FOUND;\n+                replyText = \"Exchange '\" + exchangeName + \"' not found\";\n+            }\n+            else if (routingKey == null)\n+            {\n+                if (queueName == null)\n+                {\n+                    if (exchange.hasBindings())\n+                    {\n+                        replyCode = ExchangeBoundOkBody.OK;\n+                        replyText = null;\n+                    }\n+                    else\n+                    {\n+                        replyCode = ExchangeBoundOkBody.NO_BINDINGS;\n+                        replyText = null;\n+                    }\n+                }\n+                else\n+                {\n+\n+                    AMQQueue queue = virtualHost.getQueue(queueName.toString());\n+                    if (queue == null)\n+                    {\n+                        replyCode = ExchangeBoundOkBody.QUEUE_NOT_FOUND;\n+                        replyText = \"Queue '\" + queueName + \"' not found\";\n+                    }\n+                    else\n+                    {\n+                        if (exchange.isBound(queue))\n+                        {\n+                            replyCode = ExchangeBoundOkBody.OK;\n+                            replyText = null;\n+                        }\n+                        else\n+                        {\n+                            replyCode = ExchangeBoundOkBody.QUEUE_NOT_BOUND;\n+                            replyText = \"Queue '\"\n+                                        + queueName\n+                                        + \"' not bound to exchange '\"\n+                                        + exchangeName\n+                                        + \"'\";\n+                        }\n+                    }\n+                }\n+            }\n+            else if (queueName != null)\n+            {\n+                AMQQueue queue = virtualHost.getQueue(queueName.toString());\n+                if (queue == null)\n+                {\n+                    replyCode = ExchangeBoundOkBody.QUEUE_NOT_FOUND;\n+                    replyText = \"Queue '\" + queueName + \"' not found\";\n+                }\n+                else\n+                {\n+                    String bindingKey = routingKey == null ? null : routingKey.asString();\n+                    if (exchange.isBound(bindingKey, queue))\n+                    {\n+\n+                        replyCode = ExchangeBoundOkBody.OK;\n+                        replyText = null;\n+                    }\n+                    else\n+                    {\n+                        replyCode = ExchangeBoundOkBody.SPECIFIC_QUEUE_NOT_BOUND_WITH_RK;\n+                        replyText = \"Queue '\" + queueName + \"' not bound with routing key '\" +\n+                                    routingKey + \"' to exchange '\" + exchangeName + \"'\";\n+\n+                    }\n+                }\n+            }\n+            else\n+            {\n+                if (exchange.isBound(routingKey == null ? \"\" : routingKey.asString()))\n+                {\n+\n+                    replyCode = ExchangeBoundOkBody.OK;\n+                    replyText = null;\n+                }\n+                else\n+                {\n+                    replyCode = ExchangeBoundOkBody.NO_QUEUE_BOUND_WITH_RK;\n+                    replyText =\n+                            \"No queue bound with routing key '\" + routingKey + \"' to exchange '\" + exchangeName + \"'\";\n+                }\n+            }\n+        }\n+\n+        ExchangeBoundOkBody exchangeBoundOkBody =\n+                methodRegistry.createExchangeBoundOkBody(replyCode, AMQShortString.validValueOf(replyText));\n+\n+        _connection.writeFrame(exchangeBoundOkBody.generateFrame(getChannelId()));\n+\n+    }\n+\n+    @Override\n+    public void receiveExchangeDeclare(final AMQShortString exchangeName,\n+                                       final AMQShortString type,\n+                                       final boolean passive,\n+                                       final boolean durable,\n+                                       final boolean autoDelete,\n+                                       final boolean internal,\n+                                       final boolean nowait,\n+                                       final FieldTable arguments)\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV[\" + _channelId + \"] ExchangeDeclare[\" +\" exchange: \" + exchangeName +\n+                          \" type: \" + type +\n+                          \" passive: \" + passive +\n+                          \" durable: \" + durable +\n+                          \" autoDelete: \" + autoDelete +\n+                          \" internal: \" + internal + \" nowait: \" + nowait + \" arguments: \" + arguments + \" ]\");\n+        }\n+\n+        ExchangeImpl exchange;\n+        VirtualHostImpl<?, ?, ?> virtualHost = _connection.getVirtualHost();\n+        if (isDefaultExchange(exchangeName))\n+        {\n+            if (!new AMQShortString(ExchangeDefaults.DIRECT_EXCHANGE_CLASS).equals(type))\n+            {\n+                _connection.closeConnection(AMQConstant.NOT_ALLOWED, \"Attempt to redeclare default exchange: \"\n+                                                                 + \" of type \"\n+                                                                 + ExchangeDefaults.DIRECT_EXCHANGE_CLASS\n+                                                                 + \" to \" + type + \".\", getChannelId());\n+            }\n+            else if (!nowait)\n+            {\n+                MethodRegistry methodRegistry = _connection.getMethodRegistry();\n+                AMQMethodBody responseBody = methodRegistry.createExchangeDeclareOkBody();\n+                sync();\n+                _connection.writeFrame(responseBody.generateFrame(getChannelId()));\n+            }\n+\n+        }\n+        else\n+        {\n+            if (passive)\n+            {\n+                exchange = virtualHost.getExchange(exchangeName.toString());\n+                if (exchange == null)\n+                {\n+                    closeChannel(AMQConstant.NOT_FOUND, \"Unknown exchange: \" + exchangeName);\n+                }\n+                else if (!(type == null || type.length() == 0) && !exchange.getType().equals(type.asString()))\n+                {\n+\n+                    _connection.closeConnection(AMQConstant.NOT_ALLOWED, \"Attempt to redeclare exchange: \"\n+                                                                         +\n+                                                                         exchangeName\n+                                                                         + \" of type \"\n+                                                                         + exchange.getType()\n+                                                                         + \" to \"\n+                                                                         + type\n+                                                                         + \".\", getChannelId());\n+                }\n+                else if (!nowait)\n+                {\n+                    MethodRegistry methodRegistry = _connection.getMethodRegistry();\n+                    AMQMethodBody responseBody = methodRegistry.createExchangeDeclareOkBody();\n+                    sync();\n+                    _connection.writeFrame(responseBody.generateFrame(getChannelId()));\n+                }\n+\n+            }\n+            else\n+            {\n+                try\n+                {\n+                    String name = exchangeName == null ? null : exchangeName.intern().toString();\n+                    String typeString = type == null ? null : type.intern().toString();\n+\n+                    Map<String, Object> attributes = new HashMap<String, Object>();\n+                    if (arguments != null)\n+                    {\n+                        attributes.putAll(FieldTable.convertToMap(arguments));\n+                    }\n+                    attributes.put(Exchange.ID, null);\n+                    attributes.put(Exchange.NAME, name);\n+                    attributes.put(Exchange.TYPE, typeString);\n+                    attributes.put(Exchange.DURABLE, durable);\n+                    attributes.put(Exchange.LIFETIME_POLICY,\n+                                   autoDelete ? LifetimePolicy.DELETE_ON_NO_LINKS : LifetimePolicy.PERMANENT);\n+                    if (!attributes.containsKey(Exchange.ALTERNATE_EXCHANGE))\n+                    {\n+                        attributes.put(Exchange.ALTERNATE_EXCHANGE, null);\n+                    }\n+                    exchange = virtualHost.createExchange(attributes);\n+\n+                    if (!nowait)\n+                    {\n+                        MethodRegistry methodRegistry = _connection.getMethodRegistry();\n+                        AMQMethodBody responseBody = methodRegistry.createExchangeDeclareOkBody();\n+                        sync();\n+                        _connection.writeFrame(responseBody.generateFrame(\n+                                getChannelId()));\n+                    }\n+\n+                }\n+                catch (ReservedExchangeNameException e)\n+                {\n+                    _connection.closeConnection(AMQConstant.NOT_ALLOWED,\n+                                                \"Attempt to declare exchange: \" + exchangeName +\n+                                                                         \" which begins with reserved prefix.\", getChannelId());\n+\n+\n+                }\n+                catch (ExchangeExistsException e)\n+                {\n+                    exchange = e.getExistingExchange();\n+                    if (!new AMQShortString(exchange.getType()).equals(type))\n+                    {\n+                        _connection.closeConnection(AMQConstant.NOT_ALLOWED, \"Attempt to redeclare exchange: \"\n+                                                                                 + exchangeName + \" of type \"\n+                                                                                 + exchange.getType()\n+                                                                                 + \" to \" + type + \".\", getChannelId());\n+\n+                    }\n+                }\n+                catch (NoFactoryForTypeException e)\n+                {\n+                    _connection.closeConnection(AMQConstant.COMMAND_INVALID, \"Unknown exchange type '\"\n+                                                                             + e.getType()\n+                                                                             + \"' for exchange '\"\n+                                                                             + exchangeName\n+                                                                             + \"'\", getChannelId());\n+\n+                }\n+                catch (AccessControlException e)\n+                {\n+                    _connection.closeConnection(AMQConstant.ACCESS_REFUSED, e.getMessage(), getChannelId());\n+\n+                }\n+                catch (UnknownConfiguredObjectException e)\n+                {\n+                    // note - since 0-8/9/9-1 can't set the alt. exchange this exception should never occur\n+                    final String message = \"Unknown alternate exchange \"\n+                                           + (e.getName() != null\n+                            ? \"name: \\\"\" + e.getName() + \"\\\"\"\n+                            : \"id: \" + e.getId());\n+                    _connection.closeConnection(AMQConstant.NOT_FOUND, message, getChannelId());\n+\n+                }\n+                catch (IllegalArgumentException e)\n+                {\n+                    _connection.closeConnection(AMQConstant.COMMAND_INVALID, \"Error creating exchange '\"\n+                                                                             + exchangeName\n+                                                                             + \"': \"\n+                                                                             + e.getMessage(), getChannelId());\n+\n+                }\n+            }\n+        }\n+\n+    }\n+\n+    @Override\n+    public void receiveExchangeDelete(final AMQShortString exchangeStr, final boolean ifUnused, final boolean nowait)\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV[\" + _channelId + \"] ExchangeDelete[\" +\" exchange: \" + exchangeStr + \" ifUnused: \" + ifUnused + \" nowait: \" + nowait + \" ]\");\n+        }\n+\n+\n+        VirtualHostImpl virtualHost = _connection.getVirtualHost();\n+        sync();\n+        try\n+        {\n+\n+            if (isDefaultExchange(exchangeStr))\n+            {\n+                _connection.closeConnection(AMQConstant.NOT_ALLOWED,\n+                                            \"Default Exchange cannot be deleted\", getChannelId());\n+\n+            }\n+\n+            else\n+            {\n+                final String exchangeName = exchangeStr.toString();\n+\n+                final ExchangeImpl exchange = virtualHost.getExchange(exchangeName);\n+                if (exchange == null)\n+                {\n+                    closeChannel(AMQConstant.NOT_FOUND, \"No such exchange: \" + exchangeStr);\n+                }\n+                else\n+                {\n+                    virtualHost.removeExchange(exchange, !ifUnused);\n+\n+                    ExchangeDeleteOkBody responseBody = _connection.getMethodRegistry().createExchangeDeleteOkBody();\n+\n+                    _connection.writeFrame(responseBody.generateFrame(getChannelId()));\n+                }\n+            }\n+        }\n+        catch (ExchangeIsAlternateException e)\n+        {\n+            closeChannel(AMQConstant.NOT_ALLOWED, \"Exchange in use as an alternate exchange\");\n+        }\n+        catch (RequiredExchangeException e)\n+        {\n+            closeChannel(AMQConstant.NOT_ALLOWED,\n+                         \"Exchange '\" + exchangeStr + \"' cannot be deleted\");\n+        }\n+        catch (AccessControlException e)\n+        {\n+            _connection.closeConnection(AMQConstant.ACCESS_REFUSED, e.getMessage(), getChannelId());\n+        }\n+    }\n+\n+    @Override\n+    public void receiveQueueBind(final AMQShortString queueName,\n+                                 final AMQShortString exchange,\n+                                 AMQShortString routingKey,\n+                                 final boolean nowait,\n+                                 final FieldTable argumentsTable)\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV[\" + _channelId + \"] QueueBind[\" +\" queue: \" + queueName +\n+                          \" exchange: \" + exchange +\n+                          \" bindingKey: \" + routingKey +\n+                          \" nowait: \" + nowait + \" arguments: \" + argumentsTable + \" ]\");\n+        }\n+\n+        VirtualHostImpl virtualHost = _connection.getVirtualHost();\n+        AMQQueue<?> queue;\n+        if (queueName == null)\n+        {\n+\n+            queue = getDefaultQueue();\n+\n+            if (queue != null)\n+            {\n+                if (routingKey == null)\n+                {\n+                    routingKey = AMQShortString.valueOf(queue.getName());\n+                }\n+                else\n+                {\n+                    routingKey = routingKey.intern();\n+                }\n+            }\n+        }\n+        else\n+        {\n+            queue = virtualHost.getQueue(queueName.toString());\n+            routingKey = routingKey == null ? AMQShortString.EMPTY_STRING : routingKey.intern();\n+        }\n+\n+        if (queue == null)\n+        {\n+            String message = queueName == null\n+                    ? \"No default queue defined on channel and queue was null\"\n+                    : \"Queue \" + queueName + \" does not exist.\";\n+                closeChannel(AMQConstant.NOT_FOUND, message);\n+        }\n+        else if (isDefaultExchange(exchange))\n+        {\n+            _connection.closeConnection(AMQConstant.NOT_ALLOWED,\n+                                        \"Cannot bind the queue \" + queueName + \" to the default exchange\", getChannelId());\n+\n+        }\n+        else\n+        {\n+\n+            final String exchangeName = exchange.toString();\n+\n+            final ExchangeImpl exch = virtualHost.getExchange(exchangeName);\n+            if (exch == null)\n+            {\n+                closeChannel(AMQConstant.NOT_FOUND,\n+                             \"Exchange \" + exchangeName + \" does not exist.\");\n+            }\n+            else\n+            {\n+\n+                try\n+                {\n+\n+                    Map<String, Object> arguments = FieldTable.convertToMap(argumentsTable);\n+                    String bindingKey = String.valueOf(routingKey);\n+\n+                    if (!exch.isBound(bindingKey, arguments, queue))\n+                    {\n+\n+                        if (!exch.addBinding(bindingKey, queue, arguments)\n+                            && ExchangeDefaults.TOPIC_EXCHANGE_CLASS.equals(\n+                                exch.getType()))\n+                        {\n+                            exch.replaceBinding(bindingKey, queue, arguments);\n+                        }\n+                    }\n+\n+                    if (_logger.isInfoEnabled())\n+                    {\n+                        _logger.info(\"Binding queue \"\n+                                     + queue\n+                                     + \" to exchange \"\n+                                     + exch\n+                                     + \" with routing key \"\n+                                     + routingKey);\n+                    }\n+                    if (!nowait)\n+                    {\n+                        sync();\n+                        MethodRegistry methodRegistry = _connection.getMethodRegistry();\n+                        AMQMethodBody responseBody = methodRegistry.createQueueBindOkBody();\n+                        _connection.writeFrame(responseBody.generateFrame(getChannelId()));\n+\n+                    }\n+                }\n+                catch (AccessControlException e)\n+                {\n+                    _connection.closeConnection(AMQConstant.ACCESS_REFUSED, e.getMessage(), getChannelId());\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void receiveQueueDeclare(final AMQShortString queueStr,\n+                                    final boolean passive,\n+                                    final boolean durable,\n+                                    final boolean exclusive,\n+                                    final boolean autoDelete,\n+                                    final boolean nowait,\n+                                    final FieldTable arguments)\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV[\" + _channelId + \"] QueueDeclare[\" +\" queue: \" + queueStr +\n+                          \" passive: \" + passive +\n+                          \" durable: \" + durable +\n+                          \" exclusive: \" + exclusive +\n+                          \" autoDelete: \" + autoDelete + \" nowait: \" + nowait + \" arguments: \" + arguments + \" ]\");\n+        }\n+\n+        VirtualHostImpl virtualHost = _connection.getVirtualHost();\n+\n+        final AMQShortString queueName;\n+\n+        // if we aren't given a queue name, we create one which we return to the client\n+        if ((queueStr == null) || (queueStr.length() == 0))\n+        {\n+            queueName = new AMQShortString(\"tmp_\" + UUID.randomUUID());\n+        }\n+        else\n+        {\n+            queueName = queueStr.intern();\n+        }\n+\n+        AMQQueue queue;\n+\n+        //TODO: do we need to check that the queue already exists with exactly the same \"configuration\"?\n+\n+\n+        if (passive)\n+        {\n+            queue = virtualHost.getQueue(queueName.toString());\n+            if (queue == null)\n+            {\n+                closeChannel(AMQConstant.NOT_FOUND,\n+                                                     \"Queue: \"\n+                                                     + queueName\n+                                                     + \" not found on VirtualHost(\"\n+                                                     + virtualHost\n+                                                     + \").\");\n+            }\n+            else\n+            {\n+                if (!queue.verifySessionAccess(this))\n+                {\n+                    _connection.closeConnection(AMQConstant.NOT_ALLOWED, \"Queue \"\n+                                                + queue.getName()\n+                                                + \" is exclusive, but not created on this Connection.\", getChannelId());\n+                }\n+                else\n+                {\n+                    //set this as the default queue on the channel:\n+                    setDefaultQueue(queue);\n+                    if (!nowait)\n+                    {\n+                        sync();\n+                        MethodRegistry methodRegistry = _connection.getMethodRegistry();\n+                        QueueDeclareOkBody responseBody =\n+                                methodRegistry.createQueueDeclareOkBody(queueName,\n+                                                                        queue.getQueueDepthMessages(),\n+                                                                        queue.getConsumerCount());\n+                        _connection.writeFrame(responseBody.generateFrame(getChannelId()));\n+\n+                        _logger.info(\"Queue \" + queueName + \" declared successfully\");\n+                    }\n+                }\n+            }\n+        }\n+        else\n+        {\n+\n+            try\n+            {\n+                Map<String, Object> attributes =\n+                        QueueArgumentsConverter.convertWireArgsToModel(FieldTable.convertToMap(arguments));\n+                final String queueNameString = AMQShortString.toString(queueName);\n+                attributes.put(Queue.NAME, queueNameString);\n+                attributes.put(Queue.ID, UUID.randomUUID());\n+                attributes.put(Queue.DURABLE, durable);\n+\n+                LifetimePolicy lifetimePolicy;\n+                ExclusivityPolicy exclusivityPolicy;\n+\n+                if (exclusive)\n+                {\n+                    lifetimePolicy = autoDelete\n+                            ? LifetimePolicy.DELETE_ON_NO_OUTBOUND_LINKS\n+                            : durable ? LifetimePolicy.PERMANENT : LifetimePolicy.DELETE_ON_CONNECTION_CLOSE;\n+                    exclusivityPolicy = durable ? ExclusivityPolicy.CONTAINER : ExclusivityPolicy.CONNECTION;\n+                }\n+                else\n+                {\n+                    lifetimePolicy = autoDelete ? LifetimePolicy.DELETE_ON_NO_OUTBOUND_LINKS : LifetimePolicy.PERMANENT;\n+                    exclusivityPolicy = ExclusivityPolicy.NONE;\n+                }\n+\n+                attributes.put(Queue.EXCLUSIVE, exclusivityPolicy);\n+                attributes.put(Queue.LIFETIME_POLICY, lifetimePolicy);\n+\n+\n+                queue = virtualHost.createQueue(attributes);\n+\n+                setDefaultQueue(queue);\n+\n+                if (!nowait)\n+                {\n+                    sync();\n+                    MethodRegistry methodRegistry = _connection.getMethodRegistry();\n+                    QueueDeclareOkBody responseBody =\n+                            methodRegistry.createQueueDeclareOkBody(queueName,\n+                                                                    queue.getQueueDepthMessages(),\n+                                                                    queue.getConsumerCount());\n+                    _connection.writeFrame(responseBody.generateFrame(getChannelId()));\n+\n+                    _logger.info(\"Queue \" + queueName + \" declared successfully\");\n+                }\n+            }\n+            catch (QueueExistsException qe)\n+            {\n+\n+                queue = qe.getExistingQueue();\n+\n+                if (!queue.verifySessionAccess(this))\n+                {\n+                    _connection.closeConnection(AMQConstant.NOT_ALLOWED, \"Queue \"\n+                                                + queue.getName()\n+                                                + \" is exclusive, but not created on this Connection.\", getChannelId());\n+\n+                }\n+                else if (queue.isExclusive() != exclusive)\n+                {\n+\n+                    closeChannel(AMQConstant.ALREADY_EXISTS,\n+                                                         \"Cannot re-declare queue '\"\n+                                                         + queue.getName()\n+                                                         + \"' with different exclusivity (was: \"\n+                                                         + queue.isExclusive()\n+                                                         + \" requested \"\n+                                                         + exclusive\n+                                                         + \")\");\n+                }\n+                else if ((autoDelete\n+                          && queue.getLifetimePolicy() != LifetimePolicy.DELETE_ON_NO_OUTBOUND_LINKS)\n+                         || (!autoDelete && queue.getLifetimePolicy() != ((exclusive\n+                                                                           && !durable)\n+                        ? LifetimePolicy.DELETE_ON_CONNECTION_CLOSE\n+                        : LifetimePolicy.PERMANENT)))\n+                {\n+                    closeChannel(AMQConstant.ALREADY_EXISTS,\n+                                                         \"Cannot re-declare queue '\"\n+                                                         + queue.getName()\n+                                                         + \"' with different lifetime policy (was: \"\n+                                                         + queue.getLifetimePolicy()\n+                                                         + \" requested autodelete: \"\n+                                                         + autoDelete\n+                                                         + \")\");\n+                }\n+                else if (queue.isDurable() != durable)\n+                {\n+                    closeChannel(AMQConstant.ALREADY_EXISTS,\n+                                                         \"Cannot re-declare queue '\"\n+                                                         + queue.getName()\n+                                                         + \"' with different durability (was: \"\n+                                                         + queue.isDurable()\n+                                                         + \" requested \"\n+                                                         + durable\n+                                                         + \")\");\n+                }\n+                else\n+                {\n+                    setDefaultQueue(queue);\n+                    if (!nowait)\n+                    {\n+                        sync();\n+                        MethodRegistry methodRegistry = _connection.getMethodRegistry();\n+                        QueueDeclareOkBody responseBody =\n+                                methodRegistry.createQueueDeclareOkBody(queueName,\n+                                                                        queue.getQueueDepthMessages(),\n+                                                                        queue.getConsumerCount());\n+                        _connection.writeFrame(responseBody.generateFrame(getChannelId()));\n+\n+                        _logger.info(\"Queue \" + queueName + \" declared successfully\");\n+                    }\n+                }\n+            }\n+            catch (AccessControlException e)\n+            {\n+                _connection.closeConnection(AMQConstant.ACCESS_REFUSED, e.getMessage(), getChannelId());\n+            }\n+\n+        }\n+    }\n+\n+    @Override\n+    public void receiveQueueDelete(final AMQShortString queueName,\n+                                   final boolean ifUnused,\n+                                   final boolean ifEmpty,\n+                                   final boolean nowait)\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV[\" + _channelId + \"] QueueDelete[\" +\" queue: \" + queueName + \" ifUnused: \" + ifUnused + \" ifEmpty: \" + ifEmpty + \" nowait: \" + nowait + \" ]\");\n+        }\n+\n+        VirtualHostImpl virtualHost = _connection.getVirtualHost();\n+        sync();\n+        AMQQueue queue;\n+        if (queueName == null)\n+        {\n+\n+            //get the default queue on the channel:\n+            queue = getDefaultQueue();\n+        }\n+        else\n+        {\n+            queue = virtualHost.getQueue(queueName.toString());\n+        }\n+\n+        if (queue == null)\n+        {\n+            closeChannel(AMQConstant.NOT_FOUND, \"Queue \" + queueName + \" does not exist.\");\n+\n+        }\n+        else\n+        {\n+            if (ifEmpty && !queue.isEmpty())\n+            {\n+                closeChannel(AMQConstant.IN_USE, \"Queue: \" + queueName + \" is not empty.\");\n+            }\n+            else if (ifUnused && !queue.isUnused())\n+            {\n+                // TODO - Error code\n+                closeChannel(AMQConstant.IN_USE, \"Queue: \" + queueName + \" is still used.\");\n+            }\n+            else\n+            {\n+                if (!queue.verifySessionAccess(this))\n+                {\n+                    _connection.closeConnection(AMQConstant.NOT_ALLOWED, \"Queue \"\n+                                                + queue.getName()\n+                                                + \" is exclusive, but not created on this Connection.\", getChannelId());\n+\n+                }\n+                else\n+                {\n+                    try\n+                    {\n+                        int purged = virtualHost.removeQueue(queue);\n+\n+                        MethodRegistry methodRegistry = _connection.getMethodRegistry();\n+                        QueueDeleteOkBody responseBody = methodRegistry.createQueueDeleteOkBody(purged);\n+                        _connection.writeFrame(responseBody.generateFrame(getChannelId()));\n+                    }\n+                    catch (AccessControlException e)\n+                    {\n+                        _connection.closeConnection(AMQConstant.ACCESS_REFUSED, e.getMessage(), getChannelId());\n+\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void receiveQueuePurge(final AMQShortString queueName, final boolean nowait)\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV[\" + _channelId + \"] QueuePurge[\" +\" queue: \" + queueName + \" nowait: \" + nowait + \" ]\");\n+        }\n+\n+        VirtualHostImpl virtualHost = _connection.getVirtualHost();\n+        AMQQueue queue = null;\n+        if (queueName == null && (queue = getDefaultQueue()) == null)\n+        {\n+\n+            _connection.closeConnection(AMQConstant.NOT_ALLOWED, \"No queue specified.\", getChannelId());\n+        }\n+        else if ((queueName != null) && (queue = virtualHost.getQueue(queueName.toString())) == null)\n+        {\n+            closeChannel(AMQConstant.NOT_FOUND, \"Queue \" + queueName + \" does not exist.\");\n+        }\n+        else if (!queue.verifySessionAccess(this))\n+        {\n+            _connection.closeConnection(AMQConstant.NOT_ALLOWED,\n+                                        \"Queue is exclusive, but not created on this Connection.\", getChannelId());\n+        }\n+        else\n+        {\n+            try\n+            {\n+                long purged = queue.clearQueue();\n+                if (!nowait)\n+                {\n+                    sync();\n+                    MethodRegistry methodRegistry = _connection.getMethodRegistry();\n+                    AMQMethodBody responseBody = methodRegistry.createQueuePurgeOkBody(purged);\n+                    _connection.writeFrame(responseBody.generateFrame(getChannelId()));\n+\n+                }\n+            }\n+            catch (AccessControlException e)\n+            {\n+                _connection.closeConnection(AMQConstant.ACCESS_REFUSED, e.getMessage(), getChannelId());\n+\n+            }\n+\n+        }\n+    }\n+\n+    @Override\n+    public void receiveQueueUnbind(final AMQShortString queueName,\n+                                   final AMQShortString exchange,\n+                                   final AMQShortString routingKey,\n+                                   final FieldTable arguments)\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV[\" + _channelId + \"] QueueUnbind[\" +\" queue: \" + queueName +\n+                          \" exchange: \" + exchange +\n+                          \" bindingKey: \" + routingKey +\n+                          \" arguments: \" + arguments + \" ]\");\n+        }\n+\n+        VirtualHostImpl virtualHost = _connection.getVirtualHost();\n+\n+\n+        final boolean useDefaultQueue = queueName == null;\n+        final AMQQueue queue = useDefaultQueue\n+                ? getDefaultQueue()\n+                : virtualHost.getQueue(queueName.toString());\n+\n+\n+        if (queue == null)\n+        {\n+            String message = useDefaultQueue\n+                    ? \"No default queue defined on channel and queue was null\"\n+                    : \"Queue \" + queueName + \" does not exist.\";\n+            closeChannel(AMQConstant.NOT_FOUND, message);\n+        }\n+        else if (isDefaultExchange(exchange))\n+        {\n+            _connection.closeConnection(AMQConstant.NOT_ALLOWED, \"Cannot unbind the queue \"\n+                                                         + queue.getName()\n+                                                         + \" from the default exchange\", getChannelId());\n+\n+        }\n+        else\n+        {\n+\n+            final ExchangeImpl exch = virtualHost.getExchange(exchange.toString());\n+\n+            if (exch == null)\n+            {\n+                closeChannel(AMQConstant.NOT_FOUND, \"Exchange \" + exchange + \" does not exist.\");\n+            }\n+            else if (!exch.hasBinding(String.valueOf(routingKey), queue))\n+            {\n+                closeChannel(AMQConstant.NOT_FOUND, \"No such binding\");\n+            }\n+            else\n+            {\n+                try\n+                {\n+                    exch.deleteBinding(String.valueOf(routingKey), queue);\n+\n+                    final AMQMethodBody responseBody = _connection.getMethodRegistry().createQueueUnbindOkBody();\n+                    sync();\n+                    _connection.writeFrame(responseBody.generateFrame(getChannelId()));\n+                }\n+                catch (AccessControlException e)\n+                {\n+                    _connection.closeConnection(AMQConstant.ACCESS_REFUSED, e.getMessage(), getChannelId());\n+\n+                }\n+            }\n+\n+        }\n+    }\n+\n+    @Override\n+    public void receiveTxSelect()\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV[\" + _channelId + \"] TxSelect\");\n+        }\n+\n+        setLocalTransactional();\n+\n+        MethodRegistry methodRegistry = _connection.getMethodRegistry();\n+        TxSelectOkBody responseBody = methodRegistry.createTxSelectOkBody();\n+        _connection.writeFrame(responseBody.generateFrame(_channelId));\n+\n+    }\n+\n+    @Override\n+    public void receiveTxCommit()\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV[\" + _channelId + \"] TxCommit\");\n+        }\n+\n+\n+        if (!isTransactional())\n+        {\n+            closeChannel(AMQConstant.COMMAND_INVALID,\n+                         \"Fatal error: commit called on non-transactional channel\");\n+        }\n+        commit(new Runnable()\n+        {\n+\n+            @Override\n+            public void run()\n+            {\n+                MethodRegistry methodRegistry = _connection.getMethodRegistry();\n+                AMQMethodBody responseBody = methodRegistry.createTxCommitOkBody();\n+                _connection.writeFrame(responseBody.generateFrame(_channelId));\n+            }\n+        }, true);\n+\n+    }\n+\n+    @Override\n+    public void receiveTxRollback()\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV[\" + _channelId + \"] TxRollback\");\n+        }\n+\n+        if (!isTransactional())\n+        {\n+            closeChannel(AMQConstant.COMMAND_INVALID,\n+                         \"Fatal error: rollback called on non-transactional channel\");\n+        }\n+\n+        final MethodRegistry methodRegistry = _connection.getMethodRegistry();\n+        final AMQMethodBody responseBody = methodRegistry.createTxRollbackOkBody();\n+\n+        Runnable task = new Runnable()\n+        {\n+\n+            public void run()\n+            {\n+                _connection.writeFrame(responseBody.generateFrame(_channelId));\n+            }\n+        };\n+\n+        rollback(task);\n+\n+        //Now resend all the unacknowledged messages back to the original subscribers.\n+        //(Must be done after the TxnRollback-ok response).\n+        // Why, are we not allowed to send messages back to client before the ok method?\n+        resend();\n+    }\n+\n+\n+    private void closeChannel(final AMQConstant cause, final String message)\n+    {\n+        _connection.closeChannelAndWriteFrame(this, cause, message);\n+    }\n+\n+\n+    private boolean isDefaultExchange(final AMQShortString exchangeName)\n+    {\n+        return exchangeName == null || AMQShortString.EMPTY_STRING.equals(exchangeName);\n+    }\n+\n }"
        },
        {
            "sha": "716a84eeb024bd467a3f65c2a64e9b0522f64404",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQMessage.java",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FAMQMessage.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FAMQMessage.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FAMQMessage.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -24,7 +24,7 @@\n \n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.ContentHeaderBody;\n-import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n+import org.apache.qpid.framing.MessagePublishInfo;\n import org.apache.qpid.server.message.AMQMessageHeader;\n import org.apache.qpid.server.message.AbstractServerMessageImpl;\n import org.apache.qpid.server.store.StoredMessage;"
        },
        {
            "sha": "413cf49eaf835dd03ddbacd48dc70b16eea386f5",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQProtocolEngine.java",
            "status": "modified",
            "additions": 570,
            "deletions": 361,
            "changes": 931,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FAMQProtocolEngine.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FAMQProtocolEngine.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FAMQProtocolEngine.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -21,9 +21,13 @@\n package org.apache.qpid.server.protocol.v0_8;\n \n import java.io.IOException;\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n import java.net.InetSocketAddress;\n import java.net.SocketAddress;\n import java.nio.ByteBuffer;\n+import java.security.AccessControlException;\n import java.security.AccessController;\n import java.security.Principal;\n import java.security.PrivilegedAction;\n@@ -41,11 +45,11 @@\n import java.util.concurrent.locks.ReentrantLock;\n \n import javax.security.auth.Subject;\n+import javax.security.sasl.SaslException;\n import javax.security.sasl.SaslServer;\n \n import org.apache.log4j.Logger;\n \n-import org.apache.qpid.AMQChannelException;\n import org.apache.qpid.AMQConnectionException;\n import org.apache.qpid.AMQException;\n import org.apache.qpid.codec.AMQDecoder;\n@@ -54,7 +58,6 @@\n import org.apache.qpid.framing.*;\n import org.apache.qpid.properties.ConnectionStartProperties;\n import org.apache.qpid.protocol.AMQConstant;\n-import org.apache.qpid.protocol.AMQMethodEvent;\n import org.apache.qpid.protocol.ServerProtocolEngine;\n import org.apache.qpid.server.configuration.BrokerProperties;\n import org.apache.qpid.server.connection.ConnectionPrincipal;\n@@ -67,15 +70,15 @@\n import org.apache.qpid.server.message.ServerMessage;\n import org.apache.qpid.server.model.Broker;\n import org.apache.qpid.server.model.Port;\n+import org.apache.qpid.server.model.State;\n import org.apache.qpid.server.model.Transport;\n+import org.apache.qpid.server.model.port.AmqpPort;\n+import org.apache.qpid.server.protocol.AMQConnectionModel;\n import org.apache.qpid.server.protocol.AMQSessionModel;\n import org.apache.qpid.server.protocol.SessionModelListener;\n-import org.apache.qpid.server.protocol.v0_8.handler.ServerMethodDispatcherImpl;\n-import org.apache.qpid.server.protocol.v0_8.output.ProtocolOutputConverter;\n-import org.apache.qpid.server.protocol.v0_8.output.ProtocolOutputConverterRegistry;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQState;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n+import org.apache.qpid.server.security.SubjectCreator;\n import org.apache.qpid.server.security.auth.AuthenticatedPrincipal;\n+import org.apache.qpid.server.security.auth.SubjectAuthenticationResult;\n import org.apache.qpid.server.stats.StatisticsCounter;\n import org.apache.qpid.server.util.Action;\n import org.apache.qpid.server.util.ConnectionScopedRuntimeException;\n@@ -86,14 +89,18 @@\n import org.apache.qpid.transport.network.NetworkConnection;\n import org.apache.qpid.util.BytesDataOutput;\n \n-public class AMQProtocolEngine implements ServerProtocolEngine, AMQProtocolSession<AMQProtocolEngine>\n+public class AMQProtocolEngine implements ServerProtocolEngine,\n+                                          AMQConnectionModel<AMQProtocolEngine, AMQChannel>,\n+                                          ServerMethodProcessor<ServerChannelMethodProcessor>\n {\n     private static final Logger _logger = Logger.getLogger(AMQProtocolEngine.class);\n \n     // to save boxing the channelId and looking up in a map... cache in an array the low numbered\n     // channels.  This value must be of the form 2^x - 1.\n     private static final int CHANNEL_CACHE_SIZE = 0xff;\n     private static final int REUSABLE_BYTE_BUFFER_CAPACITY = 65 * 1024;\n+    public static final String BROKER_DEBUG_BINARY_DATA_LENGTH = \"broker.debug.binaryDataLength\";\n+    public static final int DEFAULT_DEBUG_BINARY_DATA_LENGTH = 80;\n     private final Port<?> _port;\n     private final long _creationTime;\n \n@@ -105,13 +112,12 @@ public class AMQProtocolEngine implements ServerProtocolEngine, AMQProtocolSessi\n \n     private VirtualHostImpl<?,?,?> _virtualHost;\n \n-    private final Map<Integer, AMQChannel<AMQProtocolEngine>> _channelMap =\n-            new HashMap<Integer, AMQChannel<AMQProtocolEngine>>();\n+    private final Map<Integer, AMQChannel> _channelMap =\n+            new HashMap<>();\n     private final CopyOnWriteArrayList<SessionModelListener> _sessionListeners =\n-            new CopyOnWriteArrayList<SessionModelListener>();\n+            new CopyOnWriteArrayList<>();\n \n-    @SuppressWarnings(\"unchecked\")\n-    private final AMQChannel<AMQProtocolEngine>[] _cachedChannels = new AMQChannel[CHANNEL_CACHE_SIZE + 1];\n+    private final AMQChannel[] _cachedChannels = new AMQChannel[CHANNEL_CACHE_SIZE + 1];\n \n     /**\n      * The channels that the latest call to {@link #received(ByteBuffer)} applied to.\n@@ -120,10 +126,8 @@ public class AMQProtocolEngine implements ServerProtocolEngine, AMQProtocolSessi\n      *\n      * Thread-safety: guarded by {@link #_receivedLock}.\n      */\n-    private final Set<AMQChannel<AMQProtocolEngine>> _channelsForCurrentMessage =\n-            new HashSet<AMQChannel<AMQProtocolEngine>>();\n-\n-    private final AMQStateManager _stateManager;\n+    private final Set<AMQChannel> _channelsForCurrentMessage =\n+            new HashSet<>();\n \n     private AMQDecoder _decoder;\n \n@@ -136,14 +140,13 @@ public class AMQProtocolEngine implements ServerProtocolEngine, AMQProtocolSessi\n \n     /* AMQP Version for this session */\n     private ProtocolVersion _protocolVersion = ProtocolVersion.getLatestSupportedVersion();\n-    private MethodRegistry _methodRegistry = MethodRegistry.getMethodRegistry(_protocolVersion);\n+    private final MethodRegistry _methodRegistry = new MethodRegistry(_protocolVersion);\n     private final List<Action<? super AMQProtocolEngine>> _taskList =\n-            new CopyOnWriteArrayList<Action<? super AMQProtocolEngine>>();\n+            new CopyOnWriteArrayList<>();\n \n-    private Map<Integer, Long> _closingChannelsList = new ConcurrentHashMap<Integer, Long>();\n+    private Map<Integer, Long> _closingChannelsList = new ConcurrentHashMap<>();\n     private ProtocolOutputConverter _protocolOutputConverter;\n     private final Subject _authorizedSubject = new Subject();\n-    private MethodDispatcher _dispatcher;\n \n     private final long _connectionID;\n     private Object _reference = new Object();\n@@ -177,6 +180,9 @@ public class AMQProtocolEngine implements ServerProtocolEngine, AMQProtocolSessi\n     private boolean _authenticated;\n     private boolean _compressionSupported;\n     private int _messageCompressionThreshold;\n+    private int _currentClassId;\n+    private int _currentMethodId;\n+    private int _binaryDataLimit;\n \n     public AMQProtocolEngine(Broker broker,\n                              final NetworkConnection network,\n@@ -189,11 +195,12 @@ public AMQProtocolEngine(Broker broker,\n         _transport = transport;\n         _maxNoOfChannels = broker.getConnection_sessionCountLimit();\n         _receivedLock = new ReentrantLock();\n-        _stateManager = new AMQStateManager(broker, this);\n-        _decoder = new AMQDecoder(true, this);\n+        _decoder = new BrokerDecoder(this);\n         _connectionID = connectionId;\n         _logSubject = new ConnectionLogSubject(this);\n-\n+        _binaryDataLimit = _broker.getContextKeys(false).contains(BROKER_DEBUG_BINARY_DATA_LENGTH)\n+                ? _broker.getContextValue(Integer.class, BROKER_DEBUG_BINARY_DATA_LENGTH)\n+                : DEFAULT_DEBUG_BINARY_DATA_LENGTH;\n         _authorizedSubject.getPrincipals().add(new ConnectionPrincipal(this));\n         runAsSubject(new PrivilegedAction<Void>()\n         {\n@@ -303,28 +310,7 @@ public Void run()\n                 _receivedLock.lock();\n                 try\n                 {\n-                    final ArrayList<AMQDataBlock> dataBlocks = _decoder.decodeBuffer(msg);\n-                    for (AMQDataBlock dataBlock : dataBlocks)\n-                    {\n-                        try\n-                        {\n-                            dataBlockReceived(dataBlock);\n-                        }\n-                        catch(AMQConnectionException e)\n-                        {\n-                            if(_logger.isDebugEnabled())\n-                            {\n-                                _logger.debug(\"Caught AMQConnectionException but will simply stop processing data blocks - the connection should already be closed.\", e);\n-                            }\n-                            break;\n-                        }\n-                        catch (AMQException e)\n-                        {\n-                            _logger.error(\"Unexpected exception when processing datablock\", e);\n-                            closeProtocolSession();\n-                            break;\n-                        }\n-                    }\n+                    _decoder.decodeBuffer(msg);\n                     receivedComplete();\n                 }\n                 catch (ConnectionScopedRuntimeException e)\n@@ -366,7 +352,7 @@ private void receivedComplete()\n     {\n         RuntimeException exception = null;\n \n-        for (AMQChannel<AMQProtocolEngine> channel : _channelsForCurrentMessage)\n+        for (AMQChannel channel : _channelsForCurrentMessage)\n         {\n             try\n             {\n@@ -391,112 +377,10 @@ private void receivedComplete()\n         }\n     }\n \n-    /**\n-     * Process the data block.\n-     * If the message is for a channel it is added to {@link #_channelsForCurrentMessage}.\n-     *\n-     * @throws AMQConnectionException if unable to process the data block. In this case,\n-     * the connection is already closed by the time the exception is thrown. If any other\n-     * type of exception is thrown, the connection is not already closed.\n-     */\n-    private void dataBlockReceived(AMQDataBlock message) throws AMQException\n-    {\n-        if (message instanceof ProtocolInitiation)\n-        {\n-            protocolInitiationReceived((ProtocolInitiation) message);\n-\n-        }\n-        else if (message instanceof AMQFrame)\n-        {\n-            AMQFrame frame = (AMQFrame) message;\n-            frameReceived(frame);\n-\n-        }\n-        else\n-        {\n-            throw new AMQException(\"Unknown message type: \" + message.getClass().getName() + \": \" + message);\n-        }\n-    }\n \n-    /**\n-     * Handle the supplied frame.\n-     * Adds this frame's channel to {@link #_channelsForCurrentMessage}.\n-     *\n-     * @throws AMQConnectionException if unable to process the data block. In this case,\n-     * the connection is already closed by the time the exception is thrown. If any other\n-     * type of exception is thrown, the connection is not already closed.\n-     */\n-    private void frameReceived(AMQFrame frame) throws AMQException\n+    void channelRequiresSync(final AMQChannel amqChannel)\n     {\n-        int channelId = frame.getChannel();\n-        AMQChannel<AMQProtocolEngine> amqChannel = _channelMap.get(channelId);\n-        if(amqChannel != null)\n-        {\n-            // The _receivedLock is already acquired in the caller\n-            // It is safe to add channel\n-            _channelsForCurrentMessage.add(amqChannel);\n-        }\n-        else\n-        {\n-            // Not an error. The frame is probably a channel Open for this channel id, which\n-            // does not require asynchronous work therefore its absence from\n-            // _channelsForCurrentMessage is ok.\n-        }\n-\n-        AMQBody body = frame.getBodyFrame();\n-\n-        long startTime = 0;\n-        String frameToString = null;\n-        if (_logger.isDebugEnabled())\n-        {\n-            startTime = System.currentTimeMillis();\n-            frameToString = frame.toString();\n-            _logger.debug(\"RECV: \" + frame);\n-        }\n-\n-        // Check that this channel is not closing\n-        if (channelAwaitingClosure(channelId))\n-        {\n-            if ((frame.getBodyFrame() instanceof ChannelCloseOkBody))\n-            {\n-                if (_logger.isInfoEnabled())\n-                {\n-                    _logger.info(\"Channel[\" + channelId + \"] awaiting closure - processing close-ok\");\n-                }\n-            }\n-            else\n-            {\n-                // The channel has been told to close, we don't process any more frames until\n-                // it's closed.\n-                return;\n-            }\n-        }\n-\n-        try\n-        {\n-            body.handle(channelId, this);\n-        }\n-        catch(AMQConnectionException e)\n-        {\n-            _logger.info(e.getMessage() + \" whilst processing frame: \" + body);\n-            closeConnection(channelId, e);\n-            throw e;\n-        }\n-        catch (AMQException e)\n-        {\n-            closeChannel(channelId, e.getErrorCode() == null ? AMQConstant.INTERNAL_ERROR : e.getErrorCode(), e.getMessage());\n-            throw e;\n-        }\n-        catch (TransportException e)\n-        {\n-            closeChannel(channelId, AMQConstant.CHANNEL_ERROR, e.getMessage());\n-            throw e;\n-        }\n-\n-        if(_logger.isDebugEnabled())\n-        {\n-            _logger.debug(\"Frame handled in \" + (System.currentTimeMillis() - startTime) + \" ms. Frame: \" + frameToString);\n-        }\n+        _channelsForCurrentMessage.add(amqChannel);\n     }\n \n     private synchronized void protocolInitiationReceived(ProtocolInitiation pi)\n@@ -615,87 +499,6 @@ private ByteBuffer asByteBuffer(AMQDataBlock block)\n         return buf;\n     }\n \n-    public void methodFrameReceived(int channelId, AMQMethodBody methodBody)\n-    {\n-        final AMQMethodEvent<AMQMethodBody> evt = new AMQMethodEvent<AMQMethodBody>(channelId, methodBody);\n-\n-        try\n-        {\n-            try\n-            {\n-                boolean wasAnyoneInterested = _stateManager.methodReceived(evt);\n-\n-                if (!wasAnyoneInterested)\n-                {\n-                    throw new AMQNoMethodHandlerException(evt);\n-                }\n-            }\n-            catch (AMQChannelException e)\n-            {\n-                if (getChannel(channelId) != null)\n-                {\n-                    if (_logger.isInfoEnabled())\n-                    {\n-                        _logger.info(\"Closing channel due to: \" + e.getMessage());\n-                    }\n-\n-                    writeFrame(e.getCloseFrame(channelId));\n-                    closeChannel(channelId, e.getErrorCode() == null ? AMQConstant.INTERNAL_ERROR : e.getErrorCode(), e.getMessage());\n-                }\n-                else\n-                {\n-                    if (_logger.isDebugEnabled())\n-                    {\n-                        _logger.debug(\"ChannelException occurred on non-existent channel:\" + e.getMessage());\n-                    }\n-\n-                    if (_logger.isInfoEnabled())\n-                    {\n-                        _logger.info(\"Closing connection due to: \" + e.getMessage());\n-                    }\n-\n-                    AMQConnectionException ce =\n-                            evt.getMethod().getConnectionException(AMQConstant.CHANNEL_ERROR,\n-                                                                   AMQConstant.CHANNEL_ERROR.getName().toString());\n-\n-                    _logger.info(e.getMessage() + \" whilst processing:\" + methodBody);\n-                    closeConnection(channelId, ce);\n-                }\n-            }\n-            catch (AMQConnectionException e)\n-            {\n-                _logger.info(e.getMessage() + \" whilst processing:\" + methodBody);\n-                closeConnection(channelId, e);\n-            }\n-        }\n-        catch (Exception e)\n-        {\n-            _logger.error(\"Unexpected exception while processing frame.  Closing connection.\", e);\n-\n-            closeProtocolSession();\n-        }\n-    }\n-\n-    public void contentHeaderReceived(int channelId, ContentHeaderBody body) throws AMQException\n-    {\n-\n-        AMQChannel<AMQProtocolEngine> channel = getAndAssertChannel(channelId);\n-\n-        channel.publishContentHeader(body);\n-\n-    }\n-\n-    public void contentBodyReceived(int channelId, ContentBody body) throws AMQException\n-    {\n-        AMQChannel<AMQProtocolEngine> channel = getAndAssertChannel(channelId);\n-\n-        channel.publishContentBody(body);\n-    }\n-\n-    public void heartbeatBodyReceived(int channelId, HeartbeatBody body)\n-    {\n-        // NO - OP\n-    }\n \n     /**\n      * Convenience method that writes a frame to the protocol session. Equivalent to calling\n@@ -735,28 +538,17 @@ public void setContextKey(AMQShortString contextKey)\n         _contextKey = contextKey;\n     }\n \n-    public List<AMQChannel<AMQProtocolEngine>> getChannels()\n+    public List<AMQChannel> getChannels()\n     {\n         synchronized (_channelMap)\n         {\n-            return new ArrayList<AMQChannel<AMQProtocolEngine>>(_channelMap.values());\n-        }\n-    }\n-\n-    public AMQChannel<AMQProtocolEngine> getAndAssertChannel(int channelId) throws AMQException\n-    {\n-        AMQChannel<AMQProtocolEngine> channel = getChannel(channelId);\n-        if (channel == null)\n-        {\n-            throw new AMQException(AMQConstant.NOT_FOUND, \"Channel not found with id:\" + channelId);\n+            return new ArrayList<>(_channelMap.values());\n         }\n-\n-        return channel;\n     }\n \n-    public AMQChannel<AMQProtocolEngine> getChannel(int channelId)\n+    public AMQChannel getChannel(int channelId)\n     {\n-        final AMQChannel<AMQProtocolEngine> channel =\n+        final AMQChannel channel =\n                 ((channelId & CHANNEL_CACHE_SIZE) == channelId) ? _cachedChannels[channelId] : _channelMap.get(channelId);\n         if ((channel == null) || channel.isClosing())\n         {\n@@ -773,38 +565,17 @@ public boolean channelAwaitingClosure(int channelId)\n         return !_closingChannelsList.isEmpty() && _closingChannelsList.containsKey(channelId);\n     }\n \n-    public void addChannel(AMQChannel<AMQProtocolEngine> channel) throws AMQException\n+    public void addChannel(AMQChannel channel)\n     {\n-        if (_closed)\n-        {\n-            throw new AMQException(\"Session is closed\");\n-        }\n-\n         final int channelId = channel.getChannelId();\n \n-        if (_closingChannelsList.containsKey(channelId))\n-        {\n-            throw new AMQException(\"Session is marked awaiting channel close\");\n-        }\n-\n-        if (_channelMap.size() == _maxNoOfChannels)\n-        {\n-            String errorMessage =\n-                    toString() + \": maximum number of channels has been reached (\" + _maxNoOfChannels\n-                    + \"); can't create channel\";\n-            _logger.error(errorMessage);\n-            throw new AMQException(AMQConstant.NOT_ALLOWED, errorMessage);\n-        }\n-        else\n+        synchronized (_channelMap)\n         {\n-            synchronized (_channelMap)\n+            _channelMap.put(channel.getChannelId(), channel);\n+            sessionAdded(channel);\n+            if(_blocking)\n             {\n-                _channelMap.put(channel.getChannelId(), channel);\n-                sessionAdded(channel);\n-                if(_blocking)\n-                {\n-                    channel.block();\n-                }\n+                channel.block();\n             }\n         }\n \n@@ -830,7 +601,7 @@ private void sessionRemoved(final AMQSessionModel<?,?> session)\n         }\n     }\n \n-    public Long getMaximumNumberOfChannels()\n+    public long getMaximumNumberOfChannels()\n     {\n         return _maxNoOfChannels;\n     }\n@@ -840,52 +611,52 @@ public void setMaximumNumberOfChannels(Long value)\n         _maxNoOfChannels = value;\n     }\n \n-    /**\n-     * Close a specific channel. This will remove any resources used by the channel, including: <ul><li>any queue\n-     * subscriptions (this may in turn remove queues if they are auto delete</li> </ul>\n-     *\n-     * @param channelId id of the channel to close\n-     *\n-     * @throws IllegalArgumentException if the channel id is not valid\n-     */\n-    @Override\n-    public void closeChannel(int channelId)\n+\n+    void closeChannel(AMQChannel channel)\n     {\n-        closeChannel(channelId, null, null);\n+        closeChannel(channel, null, null, false);\n+    }\n+\n+    public void closeChannelAndWriteFrame(AMQChannel channel, AMQConstant cause, String message)\n+    {\n+        writeFrame(new AMQFrame(channel.getChannelId(),\n+                                getMethodRegistry().createChannelCloseBody(cause.getCode(),\n+                                                                           AMQShortString.validValueOf(message),\n+                                                                           _currentClassId,\n+                                                                           _currentMethodId)));\n+        closeChannel(channel, cause, message, true);\n     }\n \n     public void closeChannel(int channelId, AMQConstant cause, String message)\n     {\n-        final AMQChannel<AMQProtocolEngine> channel = getChannel(channelId);\n+        final AMQChannel channel = getChannel(channelId);\n         if (channel == null)\n         {\n             throw new IllegalArgumentException(\"Unknown channel id\");\n         }\n-        else\n+        closeChannel(channel, cause, message, true);\n+    }\n+\n+    void closeChannel(AMQChannel channel, AMQConstant cause, String message, boolean mark)\n+    {\n+        int channelId = channel.getChannelId();\n+        try\n         {\n-            try\n+            channel.close(cause, message);\n+            if(mark)\n             {\n-                channel.close(cause, message);\n                 markChannelAwaitingCloseOk(channelId);\n             }\n-            finally\n-            {\n-                removeChannel(channelId);\n-            }\n+        }\n+        finally\n+        {\n+            removeChannel(channelId);\n         }\n     }\n \n+\n     public void closeChannelOk(int channelId)\n     {\n-        // todo QPID-847 - This is called from two locations ChannelCloseHandler and ChannelCloseOkHandler.\n-        // When it is the CC_OK_Handler then it makes sense to remove the channel else we will leak memory.\n-        // We do it from the Close Handler as we are sending the OK back to the client.\n-        // While this is AMQP spec compliant. The Java client in the event of an IllegalArgumentException\n-        // will send a close-ok.. Where we should call removeChannel.\n-        // However, due to the poor exception handling on the client. The client-user will be notified of the\n-        // InvalidArgument and if they then decide to close the session/connection then the there will be time\n-        // for that to occur i.e. a new close method be sent before the exception handling can mark the session closed.\n-\n         _closingChannelsList.remove(channelId);\n     }\n \n@@ -901,7 +672,7 @@ private void markChannelAwaitingCloseOk(int channelId)\n      */\n     public void removeChannel(int channelId)\n     {\n-        AMQChannel<AMQProtocolEngine> session;\n+        AMQChannel session;\n         synchronized (_channelMap)\n         {\n             session = _channelMap.remove(channelId);\n@@ -937,7 +708,7 @@ public void initHeartbeats(int delay)\n      */\n     private void closeAllChannels()\n     {\n-        for (AMQChannel<AMQProtocolEngine> channel : getChannels())\n+        for (AMQChannel channel : getChannels())\n         {\n             channel.close();\n         }\n@@ -952,7 +723,6 @@ private void closeAllChannels()\n     }\n \n     /** This must be called when the session is _closed in order to free up any resources managed by the session. */\n-    @Override\n     public void closeSession()\n     {\n \n@@ -1042,22 +812,38 @@ public Object run()\n \n     private void closeConnection(int channelId, AMQConnectionException e)\n     {\n-        try\n+\n+        if (_logger.isInfoEnabled())\n         {\n-            if (_logger.isInfoEnabled())\n-            {\n-                _logger.info(\"Closing connection due to: \" + e);\n-            }\n+            _logger.info(\"Closing connection due to: \" + e);\n+        }\n+        closeConnection(channelId, e.getCloseFrame());\n+    }\n+\n \n+    void closeConnection(AMQConstant errorCode,\n+                         String message, int channelId)\n+    {\n+\n+        if (_logger.isInfoEnabled())\n+        {\n+            _logger.info(\"Closing connection due to: \" + message);\n+        }\n+        closeConnection(channelId, new AMQFrame(0, new ConnectionCloseBody(getProtocolVersion(), errorCode.getCode(), AMQShortString.validValueOf(message), _currentClassId, _currentMethodId)));\n+    }\n+\n+    private void closeConnection(int channelId, AMQFrame frame)\n+    {\n+        try\n+        {\n             markChannelAwaitingCloseOk(channelId);\n             closeSession();\n         }\n         finally\n         {\n             try\n             {\n-                _stateManager.changeState(AMQState.CONNECTION_CLOSING);\n-                writeFrame(e.getCloseFrame(channelId));\n+                writeFrame(frame);\n             }\n             finally\n             {\n@@ -1068,23 +854,9 @@ private void closeConnection(int channelId, AMQConnectionException e)\n \n     }\n \n-    @Override\n     public void closeProtocolSession()\n     {\n         _network.close();\n-\n-        try\n-        {\n-            _stateManager.changeState(AMQState.CONNECTION_CLOSED);\n-        }\n-        catch (ConnectionScopedRuntimeException e)\n-        {\n-            _logger.info(e.getMessage());\n-        }\n-        catch (TransportException e)\n-        {\n-            _logger.info(e.getMessage());\n-        }\n     }\n \n     public String toString()\n@@ -1174,9 +946,8 @@ public void setClientProperties(FieldTable clientProperties)\n     private void setProtocolVersion(ProtocolVersion pv)\n     {\n         _protocolVersion = pv;\n-        _methodRegistry = MethodRegistry.getMethodRegistry(_protocolVersion);\n-        _protocolOutputConverter = ProtocolOutputConverterRegistry.getConverter(this);\n-        _dispatcher = ServerMethodDispatcherImpl.createMethodDispatcher(_stateManager, _protocolVersion);\n+        _methodRegistry.setProtocolVersion(_protocolVersion);\n+        _protocolOutputConverter = new ProtocolOutputConverterImpl(this);\n     }\n \n     public byte getProtocolMajorVersion()\n@@ -1204,7 +975,7 @@ public VirtualHostImpl<?,?,?> getVirtualHost()\n         return _virtualHost;\n     }\n \n-    public void setVirtualHost(VirtualHostImpl<?,?,?> virtualHost) throws AMQException\n+    public void setVirtualHost(VirtualHostImpl<?,?,?> virtualHost)\n     {\n         _virtualHost = virtualHost;\n \n@@ -1285,11 +1056,6 @@ public MethodRegistry getMethodRegistry()\n         return _methodRegistry;\n     }\n \n-    public MethodDispatcher getMethodDispatcher()\n-    {\n-        return _dispatcher;\n-    }\n-\n     public void closed()\n     {\n         try\n@@ -1303,14 +1069,10 @@ public void closed()\n                 closeProtocolSession();\n             }\n         }\n-        catch (ConnectionScopedRuntimeException e)\n+        catch (ConnectionScopedRuntimeException | TransportException e)\n         {\n             _logger.error(\"Could not close protocol engine\", e);\n         }\n-        catch (TransportException e)\n-        {\n-           _logger.error(\"Could not close protocol engine\", e);\n-        }\n     }\n \n     public void readerIdle()\n@@ -1351,9 +1113,11 @@ else if (throwable instanceof IOException)\n             {\n                 _logger.error(\"Exception caught in \" + this + \", closing connection explicitly: \" + throwable, throwable);\n \n-\n-                MethodRegistry methodRegistry = MethodRegistry.getMethodRegistry(getProtocolVersion());\n-                ConnectionCloseBody closeBody = methodRegistry.createConnectionCloseBody(200, AMQShortString.validValueOf(throwable.getMessage()),0,0);\n+                ConnectionCloseBody closeBody = _methodRegistry.createConnectionCloseBody(AMQConstant.INTERNAL_ERROR.getCode(),\n+                                                                                             AMQShortString.validValueOf(\n+                                                                                                     throwable.getMessage()),\n+                                                                                             _currentClassId,\n+                                                                                             _currentMethodId);\n \n                 writeFrame(closeBody.generateFrame(0));\n \n@@ -1374,11 +1138,6 @@ else if (throwable instanceof IOException)\n         }\n     }\n \n-    public void setSender(Sender<ByteBuffer> sender)\n-    {\n-        // Do nothing\n-    }\n-\n     public long getReadBytes()\n     {\n         return _readBytes;\n@@ -1460,7 +1219,7 @@ public String getAddress()\n         return String.valueOf(getRemoteAddress());\n     }\n \n-    public void closeSession(AMQChannel<AMQProtocolEngine> session, AMQConstant cause, String message)\n+    public void closeSession(AMQChannel session, AMQConstant cause, String message)\n     {\n         int channelId = session.getChannelId();\n         closeChannel(channelId, cause, message);\n@@ -1470,17 +1229,16 @@ public void closeSession(AMQChannel<AMQProtocolEngine> session, AMQConstant caus\n                 methodRegistry.createChannelCloseBody(\n                         cause.getCode(),\n                         AMQShortString.validValueOf(message),\n-                        0,0);\n+                        0, 0);\n \n         writeFrame(responseBody.generateFrame(channelId));\n     }\n \n     public void close(AMQConstant cause, String message)\n     {\n         closeConnection(0, new AMQConnectionException(cause, message, 0, 0,\n-\t\t                getProtocolOutputConverter().getProtocolMajorVersion(),\n-\t\t                getProtocolOutputConverter().getProtocolMinorVersion(),\n-\t\t                null));\n+                                                      getMethodRegistry(),\n+\t\t                                              null));\n     }\n \n     public void block()\n@@ -1490,7 +1248,7 @@ public void block()\n             if(!_blocking)\n             {\n                 _blocking = true;\n-                for(AMQChannel<AMQProtocolEngine> channel : _channelMap.values())\n+                for(AMQChannel channel : _channelMap.values())\n                 {\n                     channel.block();\n                 }\n@@ -1505,7 +1263,7 @@ public void unblock()\n             if(_blocking)\n             {\n                 _blocking = false;\n-                for(AMQChannel<AMQProtocolEngine> channel : _channelMap.values())\n+                for(AMQChannel channel : _channelMap.values())\n                 {\n                     channel.unblock();\n                 }\n@@ -1518,9 +1276,9 @@ public boolean isClosed()\n         return _closed;\n     }\n \n-    public List<AMQChannel<AMQProtocolEngine>> getSessionModels()\n+    public List<AMQChannel> getSessionModels()\n     {\n-\t\treturn new ArrayList<AMQChannel<AMQProtocolEngine>>(getChannels());\n+\t\treturn new ArrayList<>(getChannels());\n     }\n \n     public LogSubject getLogSubject()\n@@ -1609,6 +1367,382 @@ public void setDeferFlush(boolean deferFlush)\n         _deferFlush = deferFlush;\n     }\n \n+    @Override\n+    public void receiveChannelOpen(final int channelId)\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV[\" + channelId + \"] ChannelOpen\");\n+        }\n+\n+        // Protect the broker against out of order frame request.\n+        if (_virtualHost == null)\n+        {\n+            closeConnection(AMQConstant.COMMAND_INVALID,\n+                            \"Virtualhost has not yet been set. ConnectionOpen has not been called.\", channelId);\n+        }\n+        else if(getChannel(channelId) != null || channelAwaitingClosure(channelId))\n+        {\n+            closeConnection(AMQConstant.CHANNEL_ERROR, \"Channel \" + channelId + \" already exists\", channelId);\n+        }\n+        else if(channelId > getMaximumNumberOfChannels())\n+        {\n+            closeConnection(AMQConstant.CHANNEL_ERROR,\n+                            \"Channel \" + channelId + \" cannot be created as the max allowed channel id is \"\n+                            + getMaximumNumberOfChannels(),\n+                            channelId);\n+        }\n+        else\n+        {\n+            _logger.info(\"Connecting to: \" + _virtualHost.getName());\n+\n+            final AMQChannel channel = new AMQChannel(this, channelId, _virtualHost.getMessageStore());\n+\n+            addChannel(channel);\n+\n+            ChannelOpenOkBody response;\n+\n+\n+            response = getMethodRegistry().createChannelOpenOkBody();\n+\n+\n+            writeFrame(response.generateFrame(channelId));\n+        }\n+    }\n+\n+    @Override\n+    public void receiveConnectionOpen(AMQShortString virtualHostName,\n+                                      AMQShortString capabilities,\n+                                      boolean insist)\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV ConnectionOpen[\" +\" virtualHost: \" + virtualHostName + \" capabilities: \" + capabilities + \" insist: \" + insist + \" ]\");\n+        }\n+\n+        String virtualHostStr;\n+        if ((virtualHostName != null) && virtualHostName.charAt(0) == '/')\n+        {\n+            virtualHostStr = virtualHostName.toString().substring(1);\n+        }\n+        else\n+        {\n+            virtualHostStr = virtualHostName == null ? null : virtualHostName.toString();\n+        }\n+\n+        VirtualHostImpl virtualHost = ((AmqpPort)getPort()).getVirtualHost(virtualHostStr);\n+\n+        if (virtualHost == null)\n+        {\n+            closeConnection(AMQConstant.NOT_FOUND,\n+                            \"Unknown virtual host: '\" + virtualHostName + \"'\",0);\n+\n+        }\n+        else\n+        {\n+            // Check virtualhost access\n+            if (virtualHost.getState() != State.ACTIVE)\n+            {\n+                closeConnection(AMQConstant.CONNECTION_FORCED,\n+                                \"Virtual host '\" + virtualHost.getName() + \"' is not active\",0);\n+\n+            }\n+            else\n+            {\n+                setVirtualHost(virtualHost);\n+                try\n+                {\n+                    virtualHost.getSecurityManager().authoriseCreateConnection(this);\n+                    if (getContextKey() == null)\n+                    {\n+                        setContextKey(new AMQShortString(Long.toString(System.currentTimeMillis())));\n+                    }\n+\n+                    MethodRegistry methodRegistry = getMethodRegistry();\n+                    AMQMethodBody responseBody = methodRegistry.createConnectionOpenOkBody(virtualHostName);\n+\n+                    writeFrame(responseBody.generateFrame(0));\n+                }\n+                catch (AccessControlException e)\n+                {\n+                    closeConnection(AMQConstant.ACCESS_REFUSED, e.getMessage(),0);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void receiveConnectionClose(final int replyCode,\n+                                       final AMQShortString replyText,\n+                                       final int classId,\n+                                       final int methodId)\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV ConnectionClose[\" +\" replyCode: \" + replyCode + \" replyText: \" + replyText + \" classId: \" + classId + \" methodId: \" + methodId + \" ]\");\n+        }\n+\n+        if (_logger.isInfoEnabled())\n+        {\n+            _logger.info(\"ConnectionClose received with reply code/reply text \" + replyCode + \"/\" +\n+                         replyText + \" for \" + this);\n+        }\n+        try\n+        {\n+            closeSession();\n+        }\n+        catch (Exception e)\n+        {\n+            _logger.error(\"Error closing protocol session: \" + e, e);\n+        }\n+\n+        MethodRegistry methodRegistry = getMethodRegistry();\n+        ConnectionCloseOkBody responseBody = methodRegistry.createConnectionCloseOkBody();\n+        writeFrame(responseBody.generateFrame(0));\n+\n+        closeProtocolSession();\n+\n+    }\n+\n+    @Override\n+    public void receiveConnectionCloseOk()\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV ConnectionCloseOk\");\n+        }\n+\n+        _logger.info(\"Received Connection-close-ok\");\n+\n+        try\n+        {\n+            closeSession();\n+        }\n+        catch (Exception e)\n+        {\n+            _logger.error(\"Error closing protocol session: \" + e, e);\n+        }\n+    }\n+\n+    @Override\n+    public void receiveConnectionSecureOk(final byte[] response)\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV ConnectionSecureOk[ response: ******** ] \");\n+        }\n+\n+        Broker<?> broker = getBroker();\n+\n+        SubjectCreator subjectCreator = getSubjectCreator();\n+\n+        SaslServer ss = getSaslServer();\n+        if (ss == null)\n+        {\n+            closeConnection(AMQConstant.INTERNAL_ERROR, \"No SASL context set up in session\",0 );\n+        }\n+        MethodRegistry methodRegistry = getMethodRegistry();\n+        SubjectAuthenticationResult authResult = subjectCreator.authenticate(ss, response);\n+        switch (authResult.getStatus())\n+        {\n+            case ERROR:\n+                Exception cause = authResult.getCause();\n+\n+                _logger.info(\"Authentication failed:\" + (cause == null ? \"\" : cause.getMessage()));\n+\n+                closeConnection(AMQConstant.NOT_ALLOWED, \"Authentication failed\",0);\n+\n+                disposeSaslServer();\n+                break;\n+            case SUCCESS:\n+                if (_logger.isInfoEnabled())\n+                {\n+                    _logger.info(\"Connected as: \" + authResult.getSubject());\n+                }\n+\n+                int frameMax = broker.getContextValue(Integer.class, Broker.BROKER_FRAME_SIZE);\n+\n+                if (frameMax <= 0)\n+                {\n+                    frameMax = Integer.MAX_VALUE;\n+                }\n+\n+                ConnectionTuneBody tuneBody =\n+                        methodRegistry.createConnectionTuneBody(broker.getConnection_sessionCountLimit(),\n+                                                                frameMax,\n+                                                                broker.getConnection_heartBeatDelay());\n+                writeFrame(tuneBody.generateFrame(0));\n+                setAuthorizedSubject(authResult.getSubject());\n+                disposeSaslServer();\n+                break;\n+            case CONTINUE:\n+\n+                ConnectionSecureBody\n+                        secureBody = methodRegistry.createConnectionSecureBody(authResult.getChallenge());\n+                writeFrame(secureBody.generateFrame(0));\n+        }\n+    }\n+\n+\n+    private void disposeSaslServer()\n+    {\n+        SaslServer ss = getSaslServer();\n+        if (ss != null)\n+        {\n+            setSaslServer(null);\n+            try\n+            {\n+                ss.dispose();\n+            }\n+            catch (SaslException e)\n+            {\n+                _logger.error(\"Error disposing of Sasl server: \" + e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void receiveConnectionStartOk(final FieldTable clientProperties,\n+                                         final AMQShortString mechanism,\n+                                         final byte[] response,\n+                                         final AMQShortString locale)\n+    {\n+        if (_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV ConnectionStartOk[\"\n+                          + \" clientProperties: \"\n+                          + clientProperties\n+                          + \" mechanism: \"\n+                          + mechanism\n+                          + \" response: ********\"\n+                          + \" locale: \"\n+                          + locale\n+                          + \" ]\");\n+        }\n+\n+        Broker<?> broker = getBroker();\n+\n+        _logger.info(\"SASL Mechanism selected: \" + mechanism);\n+        _logger.info(\"Locale selected: \" + locale);\n+\n+        SubjectCreator subjectCreator = getSubjectCreator();\n+        SaslServer ss = null;\n+        try\n+        {\n+            ss = subjectCreator.createSaslServer(String.valueOf(mechanism),\n+                                                 getLocalFQDN(),\n+                                                 getPeerPrincipal());\n+\n+            if (ss == null)\n+            {\n+                closeConnection(AMQConstant.RESOURCE_ERROR, \"Unable to create SASL Server:\" + mechanism, 0);\n+\n+            }\n+            else\n+            {\n+                //save clientProperties\n+                setClientProperties(clientProperties);\n+\n+                setSaslServer(ss);\n+\n+                final SubjectAuthenticationResult authResult = subjectCreator.authenticate(ss, response);\n+\n+                MethodRegistry methodRegistry = getMethodRegistry();\n+\n+                switch (authResult.getStatus())\n+                {\n+                    case ERROR:\n+                        Exception cause = authResult.getCause();\n+\n+                        _logger.info(\"Authentication failed:\" + (cause == null ? \"\" : cause.getMessage()));\n+\n+                        closeConnection(AMQConstant.NOT_ALLOWED, \"Authentication failed\", 0);\n+\n+                        disposeSaslServer();\n+                        break;\n+\n+                    case SUCCESS:\n+                        if (_logger.isInfoEnabled())\n+                        {\n+                            _logger.info(\"Connected as: \" + authResult.getSubject());\n+                        }\n+                        setAuthorizedSubject(authResult.getSubject());\n+\n+                        int frameMax = broker.getContextValue(Integer.class, Broker.BROKER_FRAME_SIZE);\n+\n+                        if (frameMax <= 0)\n+                        {\n+                            frameMax = Integer.MAX_VALUE;\n+                        }\n+\n+                        ConnectionTuneBody\n+                                tuneBody =\n+                                methodRegistry.createConnectionTuneBody(broker.getConnection_sessionCountLimit(),\n+                                                                        frameMax,\n+                                                                        broker.getConnection_heartBeatDelay());\n+                        writeFrame(tuneBody.generateFrame(0));\n+                        break;\n+                    case CONTINUE:\n+                        ConnectionSecureBody\n+                                secureBody = methodRegistry.createConnectionSecureBody(authResult.getChallenge());\n+                        writeFrame(secureBody.generateFrame(0));\n+                }\n+            }\n+        }\n+        catch (SaslException e)\n+        {\n+            disposeSaslServer();\n+            closeConnection(AMQConstant.INTERNAL_ERROR, \"SASL error: \" + e, 0);\n+        }\n+    }\n+\n+    @Override\n+    public void receiveConnectionTuneOk(final int channelMax, final long frameMax, final int heartbeat)\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV ConnectionTuneOk[\" +\" channelMax: \" + channelMax + \" frameMax: \" + frameMax + \" heartbeat: \" + heartbeat + \" ]\");\n+        }\n+\n+        initHeartbeats(heartbeat);\n+\n+        int brokerFrameMax = getBroker().getContextValue(Integer.class, Broker.BROKER_FRAME_SIZE);\n+        if (brokerFrameMax <= 0)\n+        {\n+            brokerFrameMax = Integer.MAX_VALUE;\n+        }\n+\n+        if (frameMax > (long) brokerFrameMax)\n+        {\n+            closeConnection(AMQConstant.SYNTAX_ERROR,\n+                            \"Attempt to set max frame size to \" + frameMax\n+                            + \" greater than the broker will allow: \"\n+                            + brokerFrameMax, 0);\n+        }\n+        else if (frameMax > 0 && frameMax < AMQConstant.FRAME_MIN_SIZE.getCode())\n+        {\n+            closeConnection(AMQConstant.SYNTAX_ERROR,\n+                            \"Attempt to set max frame size to \" + frameMax\n+                            + \" which is smaller than the specification defined minimum: \"\n+                            + AMQConstant.FRAME_MIN_SIZE.getCode(), 0);\n+        }\n+        else\n+        {\n+            int calculatedFrameMax = frameMax == 0 ? brokerFrameMax : (int) frameMax;\n+            setMaxFrameSize(calculatedFrameMax);\n+\n+            //0 means no implied limit, except that forced by protocol limitations (0xFFFF)\n+            setMaximumNumberOfChannels( ((channelMax == 0l) || (channelMax > 0xFFFFL))\n+                                               ? 0xFFFFL\n+                                               : channelMax);\n+        }\n+    }\n+\n+    public int getBinaryDataLimit()\n+    {\n+        return _binaryDataLimit;\n+    }\n+\n     public final class WriteDeliverMethod\n             implements ClientDeliveryMethod\n     {\n@@ -1656,24 +1790,31 @@ public long getLastWriteTime()\n         return _lastWriteTime.get();\n     }\n \n-    @Override\n     public boolean isCloseWhenNoRoute()\n     {\n         return _closeWhenNoRoute;\n     }\n \n-    @Override\n     public boolean isCompressionSupported()\n     {\n         return _compressionSupported && _broker.isMessageCompressionEnabled();\n     }\n \n-    @Override\n     public int getMessageCompressionThreshold()\n     {\n         return _messageCompressionThreshold;\n     }\n \n+    public Broker<?> getBroker()\n+    {\n+        return _broker;\n+    }\n+\n+    public SubjectCreator getSubjectCreator()\n+    {\n+        return _broker.getSubjectCreator(getLocalAddress(), getTransport().isSecure());\n+    }\n+\n     public EventLogger getEventLogger()\n     {\n         if(_virtualHost != null)\n@@ -1685,4 +1826,72 @@ public EventLogger getEventLogger()\n             return _broker.getEventLogger();\n         }\n     }\n+\n+    @Override\n+    public ServerChannelMethodProcessor getChannelMethodProcessor(final int channelId)\n+    {\n+        ServerChannelMethodProcessor channelMethodProcessor = getChannel(channelId);\n+        if(channelMethodProcessor == null)\n+        {\n+            channelMethodProcessor = (ServerChannelMethodProcessor) Proxy.newProxyInstance(ServerMethodDispatcher.class.getClassLoader(),\n+                                                            new Class[] { ServerChannelMethodProcessor.class }, new InvocationHandler()\n+                    {\n+                        @Override\n+                        public Object invoke(final Object proxy, final Method method, final Object[] args)\n+                                throws Throwable\n+                        {\n+                            if(method.getName().startsWith(\"receive\"))\n+                            {\n+                                closeConnection(AMQConstant.CHANNEL_ERROR,\n+                                                \"Unknown channel id: \" + channelId,\n+                                                channelId);\n+                                return null;\n+                            }\n+                            else if(method.getName().equals(\"ignoreAllButCloseOk\"))\n+                            {\n+                                return false;\n+                            }\n+                            return null;\n+                        }\n+                    });\n+        }\n+        return channelMethodProcessor;\n+    }\n+\n+    @Override\n+    public void receiveHeartbeat()\n+    {\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV Heartbeat\");\n+        }\n+\n+        // No op\n+    }\n+\n+    @Override\n+    public void receiveProtocolHeader(final ProtocolInitiation protocolInitiation)\n+    {\n+\n+        if(_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"RECV ProtocolHeader [\" + protocolInitiation + \" ]\");\n+        }\n+\n+        protocolInitiationReceived(protocolInitiation);\n+    }\n+\n+    @Override\n+    public void setCurrentMethod(final int classId, final int methodId)\n+    {\n+        _currentClassId = classId;\n+        _currentMethodId = methodId;\n+    }\n+\n+    @Override\n+    public boolean ignoreAllButCloseOk()\n+    {\n+        return _closing.get();\n+    }\n+\n }"
        },
        {
            "sha": "587669dadc13dcf36bafda26a8dac551b1321894",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQProtocolSession.java",
            "status": "removed",
            "additions": 0,
            "deletions": 217,
            "changes": 217,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FAMQProtocolSession.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FAMQProtocolSession.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FAMQProtocolSession.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,217 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8;\n-\n-import java.net.SocketAddress;\n-import java.security.Principal;\n-import java.util.List;\n-import java.util.concurrent.locks.Lock;\n-\n-import javax.security.auth.Subject;\n-import javax.security.sasl.SaslServer;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.AMQShortString;\n-import org.apache.qpid.framing.FieldTable;\n-import org.apache.qpid.framing.MethodDispatcher;\n-import org.apache.qpid.framing.MethodRegistry;\n-import org.apache.qpid.protocol.AMQConstant;\n-import org.apache.qpid.protocol.AMQVersionAwareProtocolSession;\n-import org.apache.qpid.server.protocol.AMQConnectionModel;\n-import org.apache.qpid.server.protocol.v0_8.output.ProtocolOutputConverter;\n-import org.apache.qpid.server.security.AuthorizationHolder;\n-import org.apache.qpid.server.virtualhost.VirtualHostImpl;\n-\n-\n-public interface AMQProtocolSession<T extends AMQProtocolSession<T>>\n-        extends AMQVersionAwareProtocolSession, AuthorizationHolder, AMQConnectionModel<T,AMQChannel<T>>\n-{\n-    long getSessionID();\n-\n-    void setMaxFrameSize(int frameMax);\n-\n-    long getMaxFrameSize();\n-\n-    boolean isClosing();\n-\n-    void flushBatched();\n-\n-    void setDeferFlush(boolean defer);\n-\n-    ClientDeliveryMethod createDeliveryMethod(int channelId);\n-\n-    long getLastReceivedTime();\n-\n-    /**\n-     * Return the local socket address for the connection\n-     *\n-     * @return the socket address\n-     */\n-    SocketAddress getLocalAddress();\n-\n-    /**\n-     * Get the context key associated with this session. Context key is described in the AMQ protocol specification (RFC\n-     * 6).\n-     *\n-     * @return the context key\n-     */\n-    AMQShortString getContextKey();\n-\n-    /**\n-     * Set the context key associated with this session. Context key is described in the AMQ protocol specification (RFC\n-     * 6).\n-     *\n-     * @param contextKey the context key\n-     */\n-    void setContextKey(AMQShortString contextKey);\n-\n-    /**\n-     * Get the channel for this session associated with the specified id. A channel id is unique per connection (i.e.\n-     * per session).\n-     *\n-     * @param channelId the channel id which must be valid\n-     *\n-     * @return null if no channel exists, the channel otherwise\n-     */\n-    AMQChannel<T> getChannel(int channelId);\n-\n-    /**\n-     * Associate a channel with this session.\n-     *\n-     * @param channel the channel to associate with this session. It is an error to associate the same channel with more\n-     *                than one session but this is not validated.\n-     */\n-    void addChannel(AMQChannel<T> channel) throws AMQException;\n-\n-    /**\n-     * Close a specific channel. This will remove any resources used by the channel, including: <ul><li>any queue\n-     * subscriptions (this may in turn remove queues if they are auto delete</li> </ul>\n-     *\n-     * @param channelId id of the channel to close\n-     *\n-     * @throws org.apache.qpid.AMQException if an error occurs closing the channel\n-     * @throws IllegalArgumentException     if the channel id is not valid\n-     */\n-    void closeChannel(int channelId) throws AMQException;\n-\n-    void closeChannel(int channelId, AMQConstant cause, String message) throws AMQException;\n-\n-    /**\n-     * Marks the specific channel as closed. This will release the lock for that channel id so a new channel can be\n-     * created on that id.\n-     *\n-     * @param channelId id of the channel to close\n-     */\n-    void closeChannelOk(int channelId);\n-\n-    /**\n-     * Check to see if this chanel is closing\n-     *\n-     * @param channelId id to check\n-     * @return boolean with state of channel awaiting closure\n-     */\n-    boolean channelAwaitingClosure(int channelId);\n-\n-    /**\n-     * Remove a channel from the session but do not close it.\n-     *\n-     * @param channelId\n-     */\n-    void removeChannel(int channelId);\n-\n-    /**\n-     * Initialise heartbeats on the session.\n-     *\n-     * @param delay delay in seconds (not ms)\n-     */\n-    void initHeartbeats(int delay);\n-\n-    /** This must be called when the session is _closed in order to free up any resources managed by the session. */\n-    void closeSession();\n-\n-    void closeProtocolSession();\n-\n-    /** @return a key that uniquely identifies this session */\n-    Object getKey();\n-\n-    /**\n-     * Get the fully qualified domain name of the local address to which this session is bound. Since some servers may\n-     * be bound to multiple addresses this could vary depending on the acceptor this session was created from.\n-     *\n-     * @return a String FQDN\n-     */\n-    String getLocalFQDN();\n-\n-    /** @return the sasl server that can perform authentication for this session. */\n-    SaslServer getSaslServer();\n-\n-    /**\n-     * Set the sasl server that is to perform authentication for this session.\n-     *\n-     * @param saslServer\n-     */\n-    void setSaslServer(SaslServer saslServer);\n-\n-    void setClientProperties(FieldTable clientProperties);\n-\n-    Object getReference();\n-\n-    VirtualHostImpl<?,?,?> getVirtualHost();\n-\n-    void setVirtualHost(VirtualHostImpl<?,?,?> virtualHost) throws AMQException;\n-\n-    public ProtocolOutputConverter getProtocolOutputConverter();\n-\n-    void setAuthorizedSubject(Subject authorizedSubject);\n-\n-    public java.net.SocketAddress getRemoteAddress();\n-\n-    public MethodRegistry getMethodRegistry();\n-\n-    public MethodDispatcher getMethodDispatcher();\n-\n-    String getClientVersion();\n-\n-    long getLastIoTime();\n-\n-    long getWrittenBytes();\n-\n-    Long getMaximumNumberOfChannels();\n-\n-    void setMaximumNumberOfChannels(Long value);\n-\n-    List<AMQChannel<T>> getChannels();\n-\n-    public Principal getPeerPrincipal();\n-\n-    Lock getReceivedLock();\n-\n-    /**\n-     * Used for 0-8/0-9/0-9-1 connections to choose to close\n-     * the connection when a transactional session receives a 'mandatory' message which\n-     * can't be routed rather than returning the message.\n-     */\n-    boolean isCloseWhenNoRoute();\n-\n-    boolean isCompressionSupported();\n-\n-    int getMessageCompressionThreshold();\n-}"
        },
        {
            "sha": "6497a04946f57f530fcdf54e92a704c1fb3dce26",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/BrokerDecoder.java",
            "status": "added",
            "additions": 117,
            "deletions": 0,
            "changes": 117,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FBrokerDecoder.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FBrokerDecoder.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FBrokerDecoder.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -0,0 +1,117 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.protocol.v0_8;\n+\n+import java.io.IOException;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n+\n+import javax.security.auth.Subject;\n+\n+import org.apache.log4j.Logger;\n+\n+import org.apache.qpid.codec.MarkableDataInput;\n+import org.apache.qpid.codec.ServerDecoder;\n+import org.apache.qpid.framing.AMQFrameDecodingException;\n+import org.apache.qpid.server.util.ServerScopedRuntimeException;\n+\n+public class BrokerDecoder extends ServerDecoder\n+{\n+    private static final Logger _logger = Logger.getLogger(BrokerDecoder.class);\n+    private final AMQProtocolEngine _connection;\n+    /**\n+     * Creates a new AMQP decoder.\n+     *\n+     * @param connection\n+     */\n+    public BrokerDecoder(final AMQProtocolEngine connection)\n+    {\n+        super(connection);\n+        _connection = connection;\n+    }\n+\n+    @Override\n+    protected void processFrame(final int channelId, final byte type, final long bodySize, final MarkableDataInput in)\n+            throws AMQFrameDecodingException, IOException\n+    {\n+        long startTime = 0;\n+        if (_logger.isDebugEnabled())\n+        {\n+            startTime = System.currentTimeMillis();\n+        }\n+        Subject subject;\n+        AMQChannel channel = _connection.getChannel(channelId);\n+        if(channel == null)\n+        {\n+            subject = _connection.getSubject();\n+        }\n+        else\n+        {\n+            _connection.channelRequiresSync(channel);\n+\n+            subject = channel.getSubject();\n+        }\n+        try\n+        {\n+            Subject.doAs(subject, new PrivilegedExceptionAction<Object>()\n+            {\n+                @Override\n+                public Void run() throws IOException, AMQFrameDecodingException\n+                {\n+                    doProcessFrame(channelId, type, bodySize, in);\n+                    return null;\n+                }\n+            });\n+            if(_logger.isDebugEnabled())\n+            {\n+                _logger.debug(\"Frame handled in \" + (System.currentTimeMillis() - startTime) + \" ms.\");\n+            }\n+\n+        }\n+        catch (PrivilegedActionException e)\n+        {\n+            Throwable cause = e.getCause();\n+            if(cause instanceof IOException)\n+            {\n+                throw (IOException) cause;\n+            }\n+            else if(cause instanceof AMQFrameDecodingException)\n+            {\n+                throw (AMQFrameDecodingException) cause;\n+            }\n+            else if(cause instanceof RuntimeException)\n+            {\n+                throw (RuntimeException) cause;\n+            }\n+            else throw new ServerScopedRuntimeException(cause);\n+        }\n+\n+    }\n+\n+\n+    private void doProcessFrame(final int channelId, final byte type, final long bodySize, final MarkableDataInput in)\n+            throws AMQFrameDecodingException, IOException\n+    {\n+        super.processFrame(channelId, type, bodySize, in);\n+\n+    }\n+\n+}"
        },
        {
            "sha": "25c1462060ca4bbf1d1e7ace44a3dbb9906e3279",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/ConsumerTagInUseException.java",
            "status": "renamed",
            "additions": 6,
            "deletions": 7,
            "changes": 13,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FConsumerTagInUseException.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FConsumerTagInUseException.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FConsumerTagInUseException.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -7,9 +7,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -18,13 +18,12 @@\n  * under the License.\n  *\n  */\n-package org.apache.qpid.gentools;\n+package org.apache.qpid.server.protocol.v0_8;\n \n-@SuppressWarnings(\"serial\")\n-public class AmqpParseException extends RuntimeException\n+public class ConsumerTagInUseException extends Exception\n {\n-    public AmqpParseException(String msg)\n+    public ConsumerTagInUseException(final String message)\n     {\n-        super(msg);\n+        super(message);\n     }\n }",
            "previous_filename": "common/gentools/src/org/apache/qpid/gentools/AmqpParseException.java"
        },
        {
            "sha": "43982db2fd97f93ebba6b3d5c9368b49dab45d50",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/ConsumerTarget_0_8.java",
            "status": "modified",
            "additions": 10,
            "deletions": 18,
            "changes": 28,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FConsumerTarget_0_8.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FConsumerTarget_0_8.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FConsumerTarget_0_8.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -39,7 +39,6 @@\n import org.apache.qpid.server.message.MessageReference;\n import org.apache.qpid.server.message.ServerMessage;\n import org.apache.qpid.server.protocol.AMQSessionModel;\n-import org.apache.qpid.server.protocol.v0_8.output.ProtocolOutputConverter;\n import org.apache.qpid.server.queue.QueueEntry;\n import org.apache.qpid.server.txn.AutoCommitTransaction;\n import org.apache.qpid.server.txn.ServerTransaction;\n@@ -80,7 +79,7 @@ public void stateChanged(final MessageInstance entry,\n \n     public static ConsumerTarget_0_8 createBrowserTarget(AMQChannel channel,\n                                                          AMQShortString consumerTag, FieldTable filters,\n-                                                         FlowCreditManager creditManager) throws AMQException\n+                                                         FlowCreditManager creditManager)\n     {\n         return new BrowserConsumer(channel, consumerTag, filters, creditManager, channel.getClientDeliveryMethod(), channel.getRecordDeliveryMethod());\n     }\n@@ -90,7 +89,7 @@ public static ConsumerTarget_0_8 createGetNoAckTarget(final AMQChannel channel,\n                                                           final FieldTable filters,\n                                                           final FlowCreditManager creditManager,\n                                                           final ClientDeliveryMethod deliveryMethod,\n-                                                          final RecordDeliveryMethod recordMethod) throws AMQException\n+                                                          final RecordDeliveryMethod recordMethod)\n     {\n         return new GetNoAckConsumer(channel, consumerTag, filters, creditManager, deliveryMethod, recordMethod);\n     }\n@@ -107,7 +106,6 @@ public BrowserConsumer(AMQChannel channel,\n                                FlowCreditManager creditManager,\n                                ClientDeliveryMethod deliveryMethod,\n                                RecordDeliveryMethod recordMethod)\n-            throws AMQException\n         {\n             super(channel, consumerTag,\n                   filters, creditManager, deliveryMethod, recordMethod);\n@@ -148,7 +146,7 @@ public boolean allocateCredit(ServerMessage msg)\n \n     public static ConsumerTarget_0_8 createNoAckTarget(AMQChannel channel,\n                                                            AMQShortString consumerTag, FieldTable filters,\n-                                                           FlowCreditManager creditManager) throws AMQException\n+                                                           FlowCreditManager creditManager)\n     {\n         return new NoAckConsumer(channel, consumerTag, filters, creditManager, channel.getClientDeliveryMethod(), channel.getRecordDeliveryMethod());\n     }\n@@ -171,7 +169,6 @@ public NoAckConsumer(AMQChannel channel,\n                              FlowCreditManager creditManager,\n                              ClientDeliveryMethod deliveryMethod,\n                              RecordDeliveryMethod recordMethod)\n-            throws AMQException\n         {\n             super(channel, consumerTag, filters, creditManager, deliveryMethod, recordMethod);\n \n@@ -207,7 +204,7 @@ public long send(final ConsumerImpl consumer, MessageInstance entry, boolean bat\n             long size;\n             synchronized (getChannel())\n             {\n-                getChannel().getProtocolSession().setDeferFlush(batch);\n+                getChannel().getConnection().setDeferFlush(batch);\n                 long deliveryTag = getChannel().getNextDeliveryTag();\n \n                 size = sendToClient(consumer, message, props, deliveryTag);\n@@ -249,7 +246,6 @@ public GetNoAckConsumer(AMQChannel channel,\n                                 FlowCreditManager creditManager,\n                                 ClientDeliveryMethod deliveryMethod,\n                                 RecordDeliveryMethod recordMethod)\n-            throws AMQException\n         {\n             super(channel, consumerTag, filters, creditManager, deliveryMethod, recordMethod);\n         }\n@@ -265,7 +261,6 @@ public boolean allocateCredit(ServerMessage msg)\n     public static ConsumerTarget_0_8 createAckTarget(AMQChannel channel,\n                                                          AMQShortString consumerTag, FieldTable filters,\n                                                          FlowCreditManager creditManager)\n-            throws AMQException\n     {\n         return new AckConsumer(channel,consumerTag,filters,creditManager, channel.getClientDeliveryMethod(), channel.getRecordDeliveryMethod());\n     }\n@@ -276,7 +271,6 @@ public static ConsumerTarget_0_8 createAckTarget(AMQChannel channel,\n                                                          FlowCreditManager creditManager,\n                                                          ClientDeliveryMethod deliveryMethod,\n                                                          RecordDeliveryMethod recordMethod)\n-            throws AMQException\n     {\n         return new AckConsumer(channel,consumerTag,filters,creditManager, deliveryMethod, recordMethod);\n     }\n@@ -288,7 +282,6 @@ public AckConsumer(AMQChannel channel,\n                            FlowCreditManager creditManager,\n                            ClientDeliveryMethod deliveryMethod,\n                            RecordDeliveryMethod recordMethod)\n-            throws AMQException\n         {\n             super(channel, consumerTag, filters, creditManager, deliveryMethod, recordMethod);\n         }\n@@ -308,7 +301,7 @@ public long send(final ConsumerImpl consumer, MessageInstance entry, boolean bat\n \n             synchronized (getChannel())\n             {\n-                getChannel().getProtocolSession().setDeferFlush(batch);\n+                getChannel().getConnection().setDeferFlush(batch);\n                 long deliveryTag = getChannel().getNextDeliveryTag();\n \n                 addUnacknowledgedMessage(entry);\n@@ -346,7 +339,6 @@ public ConsumerTarget_0_8(AMQChannel channel,\n                               FlowCreditManager creditManager,\n                               ClientDeliveryMethod deliveryMethod,\n                               RecordDeliveryMethod recordMethod)\n-            throws AMQException\n     {\n         super(State.ACTIVE);\n \n@@ -474,9 +466,9 @@ public AMQShortString getConsumerTag()\n         return _consumerTag;\n     }\n \n-    public AMQProtocolSession getProtocolSession()\n+    public AMQProtocolEngine getProtocolSession()\n     {\n-        return _channel.getProtocolSession();\n+        return _channel.getConnection();\n     }\n \n     public void restoreCredit(final ServerMessage message)\n@@ -525,7 +517,7 @@ protected void recordMessageDelivery(final ConsumerImpl consumer,\n \n     public void confirmAutoClose()\n     {\n-        ProtocolOutputConverter converter = getChannel().getProtocolSession().getProtocolOutputConverter();\n+        ProtocolOutputConverter converter = getChannel().getConnection().getProtocolOutputConverter();\n         converter.confirmConsumerAutoClose(getChannel().getChannelId(), getConsumerTag());\n     }\n \n@@ -540,9 +532,9 @@ public void queueEmpty()\n \n     public void flushBatched()\n     {\n-        _channel.getProtocolSession().setDeferFlush(false);\n+        _channel.getConnection().setDeferFlush(false);\n \n-        _channel.getProtocolSession().flushBatched();\n+        _channel.getConnection().flushBatched();\n     }\n \n     protected void addUnacknowledgedMessage(MessageInstance entry)"
        },
        {
            "sha": "d61eb1b223b72597ad4511d494e3f838ab6b45cf",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/ExtractResendAndRequeue.java",
            "status": "modified",
            "additions": 3,
            "deletions": 4,
            "changes": 7,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FExtractResendAndRequeue.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FExtractResendAndRequeue.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FExtractResendAndRequeue.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -20,14 +20,13 @@\n  */\n package org.apache.qpid.server.protocol.v0_8;\n \n+import java.util.Map;\n+\n import org.apache.log4j.Logger;\n \n-import org.apache.qpid.AMQException;\n import org.apache.qpid.server.consumer.ConsumerImpl;\n import org.apache.qpid.server.message.MessageInstance;\n \n-import java.util.Map;\n-\n public class ExtractResendAndRequeue implements UnacknowledgedMessageMap.Visitor\n {\n     private static final Logger _log = Logger.getLogger(ExtractResendAndRequeue.class);\n@@ -45,7 +44,7 @@ public ExtractResendAndRequeue(UnacknowledgedMessageMap unacknowledgedMessageMap\n         _msgToResend = msgToResend;\n     }\n \n-    public boolean callback(final long deliveryTag, MessageInstance message) throws AMQException\n+    public boolean callback(final long deliveryTag, MessageInstance message)\n     {\n \n         message.setRedelivered();"
        },
        {
            "sha": "d966e9c9c6613e603849df68f1fb5d975b6000f3",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/IncomingMessage.java",
            "status": "modified",
            "additions": 6,
            "deletions": 7,
            "changes": 13,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FIncomingMessage.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FIncomingMessage.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FIncomingMessage.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -20,16 +20,15 @@\n  */\n package org.apache.qpid.server.protocol.v0_8;\n \n-import org.apache.qpid.AMQException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.ContentBody;\n import org.apache.qpid.framing.ContentHeaderBody;\n-import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n+import org.apache.qpid.framing.MessagePublishInfo;\n import org.apache.qpid.server.message.MessageDestination;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-\n public class IncomingMessage\n {\n \n@@ -58,7 +57,7 @@ public MessagePublishInfo getMessagePublishInfo()\n         return _messagePublishInfo;\n     }\n \n-    public void addContentBodyFrame(final ContentBody contentChunk) throws AMQException\n+    public void addContentBodyFrame(final ContentBody contentChunk)\n     {\n         _bodyLengthReceived += contentChunk.getSize();\n         _contentChunks.add(contentChunk);\n@@ -94,7 +93,7 @@ public void setMessageDestination(final MessageDestination e)\n         _messageDestination = e;\n     }\n \n-    public int getBodyCount() throws AMQException\n+    public int getBodyCount()\n     {\n         return _contentChunks.size();\n     }"
        },
        {
            "sha": "55746dfa958379e4b1adb6a6c35e5de2d5f7bbf8",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/MessageConverter_Internal_to_v0_8.java",
            "status": "modified",
            "additions": 6,
            "deletions": 34,
            "changes": 40,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FMessageConverter_Internal_to_v0_8.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FMessageConverter_Internal_to_v0_8.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FMessageConverter_Internal_to_v0_8.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -33,7 +33,7 @@\n import org.apache.qpid.framing.BasicContentHeaderProperties;\n import org.apache.qpid.framing.ContentHeaderBody;\n import org.apache.qpid.framing.FieldTable;\n-import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n+import org.apache.qpid.framing.MessagePublishInfo;\n import org.apache.qpid.server.message.internal.InternalMessage;\n import org.apache.qpid.server.plugin.MessageConverter;\n import org.apache.qpid.server.plugin.PluggableService;\n@@ -135,38 +135,10 @@ public boolean flowToDisk()\n     private MessageMetaData convertMetaData(final InternalMessage serverMsg, final String bodyMimeType, final int size)\n     {\n \n-        MessagePublishInfo publishInfo = new MessagePublishInfo()\n-                                            {\n-                                                @Override\n-                                                public AMQShortString getExchange()\n-                                                {\n-                                                    return AMQShortString.EMPTY_STRING;\n-                                                }\n-\n-                                                @Override\n-                                                public void setExchange(final AMQShortString amqShortString)\n-                                                {\n-                                                    throw new UnsupportedOperationException();\n-                                                }\n-\n-                                                @Override\n-                                                public boolean isImmediate()\n-                                                {\n-                                                    return false;\n-                                                }\n-\n-                                                @Override\n-                                                public boolean isMandatory()\n-                                                {\n-                                                    return false;\n-                                                }\n-\n-                                                @Override\n-                                                public AMQShortString getRoutingKey()\n-                                                {\n-                                                    return AMQShortString.valueOf(serverMsg.getInitialRoutingAddress());\n-                                                }\n-                                            };\n+        MessagePublishInfo publishInfo = new MessagePublishInfo(AMQShortString.EMPTY_STRING,\n+                                                                false,\n+                                                                false,\n+                                                                AMQShortString.valueOf(serverMsg.getInitialRoutingAddress()));\n \n \n         final BasicContentHeaderProperties props = new BasicContentHeaderProperties();\n@@ -191,7 +163,7 @@ public AMQShortString getRoutingKey()\n \n         props.setHeaders(FieldTable.convertToFieldTable(headerProps));\n \n-        final ContentHeaderBody chb = new ContentHeaderBody(props, BASIC_CLASS_ID);\n+        final ContentHeaderBody chb = new ContentHeaderBody(props);\n         chb.setBodySize(size);\n         return new MessageMetaData(publishInfo, chb, serverMsg.getArrivalTime());\n     }"
        },
        {
            "sha": "6b2902d0fa62fd7fc2e03e569e3f1c881e023db4",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/MessageMetaData.java",
            "status": "modified",
            "additions": 12,
            "deletions": 35,
            "changes": 47,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FMessageMetaData.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FMessageMetaData.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FMessageMetaData.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -20,29 +20,28 @@\n  */\n package org.apache.qpid.server.protocol.v0_8;\n \n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n import java.util.Collection;\n-import org.apache.qpid.AMQException;\n+import java.util.Set;\n+\n import org.apache.qpid.framing.AMQFrameDecodingException;\n import org.apache.qpid.framing.AMQProtocolVersionException;\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.BasicContentHeaderProperties;\n import org.apache.qpid.framing.ContentHeaderBody;\n import org.apache.qpid.framing.EncodingUtils;\n import org.apache.qpid.framing.FieldTable;\n-import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n+import org.apache.qpid.framing.MessagePublishInfo;\n import org.apache.qpid.server.message.AMQMessageHeader;\n import org.apache.qpid.server.plugin.MessageMetaDataType;\n import org.apache.qpid.server.store.StorableMessageMetaData;\n import org.apache.qpid.server.util.ByteBufferOutputStream;\n import org.apache.qpid.server.util.ConnectionScopedRuntimeException;\n import org.apache.qpid.util.ByteBufferInputStream;\n \n-import java.io.DataInputStream;\n-import java.io.DataOutputStream;\n-import java.io.IOException;\n-import java.nio.ByteBuffer;\n-import java.util.Set;\n-\n /**\n  * Encapsulates a publish body and a content header. In the context of the message store these are treated as a\n  * single unit.\n@@ -170,33 +169,11 @@ public MessageMetaData createMetaData(ByteBuffer buf)\n                 long arrivalTime = EncodingUtils.readLong(dais);\n \n                 MessagePublishInfo publishBody =\n-                        new MessagePublishInfo()\n-                        {\n-\n-                            public AMQShortString getExchange()\n-                            {\n-                                return exchange;\n-                            }\n-\n-                            public void setExchange(AMQShortString exchange)\n-                            {\n-                            }\n-\n-                            public boolean isImmediate()\n-                            {\n-                                return (flags & IMMEDIATE_FLAG) != 0;\n-                            }\n-\n-                            public boolean isMandatory()\n-                            {\n-                                return (flags & MANDATORY_FLAG) != 0;\n-                            }\n-\n-                            public AMQShortString getRoutingKey()\n-                            {\n-                                return routingKey;\n-                            }\n-                        };\n+                        new MessagePublishInfo(exchange,\n+                                               (flags & IMMEDIATE_FLAG) != 0,\n+                                               (flags & MANDATORY_FLAG) != 0,\n+                                               routingKey);\n+\n                 return new MessageMetaData(publishBody, chb, arrivalTime);\n             }\n             catch (IOException e)"
        },
        {
            "sha": "69f71f14a9384d1a329e02842285c2462a77bc3c",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/ProtocolOutputConverter.java",
            "status": "renamed",
            "additions": 2,
            "deletions": 12,
            "changes": 14,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FProtocolOutputConverter.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FProtocolOutputConverter.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FProtocolOutputConverter.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -24,26 +24,20 @@\n  * Supported AMQP versions:\n  *   8-0\n  */\n-package org.apache.qpid.server.protocol.v0_8.output;\n+package org.apache.qpid.server.protocol.v0_8;\n \n import org.apache.qpid.framing.AMQDataBlock;\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.ContentHeaderBody;\n-import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n+import org.apache.qpid.framing.MessagePublishInfo;\n import org.apache.qpid.server.message.InstanceProperties;\n import org.apache.qpid.server.message.MessageContentSource;\n import org.apache.qpid.server.message.ServerMessage;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n \n public interface ProtocolOutputConverter\n {\n     void confirmConsumerAutoClose(int channelId, AMQShortString consumerTag);\n \n-    interface Factory\n-    {\n-        ProtocolOutputConverter newInstance(AMQProtocolSession session);\n-    }\n-\n     long writeDeliver(final ServerMessage msg,\n                       final InstanceProperties props, int channelId,\n                       long deliveryTag,\n@@ -55,10 +49,6 @@ long writeGetOk(final ServerMessage msg,\n                     long deliveryTag,\n                     int queueSize);\n \n-    byte getProtocolMinorVersion();\n-\n-    byte getProtocolMajorVersion();\n-\n     void writeReturn(MessagePublishInfo messagePublishInfo, ContentHeaderBody header, MessageContentSource msgContent,  int channelId, int replyCode, AMQShortString replyText);\n \n     void writeFrame(AMQDataBlock block);",
            "previous_filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/output/ProtocolOutputConverter.java"
        },
        {
            "sha": "b616aab126c37f746c696dbfda9d9730a722f93b",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/ProtocolOutputConverterImpl.java",
            "status": "renamed",
            "additions": 27,
            "deletions": 47,
            "changes": 74,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FProtocolOutputConverterImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FProtocolOutputConverterImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FProtocolOutputConverterImpl.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -18,7 +18,7 @@\n  * under the License.\n  *\n  */\n-package org.apache.qpid.server.protocol.v0_8.output;\n+package org.apache.qpid.server.protocol.v0_8;\n \n import java.io.DataOutput;\n import java.io.IOException;\n@@ -35,38 +35,28 @@\n import org.apache.qpid.framing.BasicGetOkBody;\n import org.apache.qpid.framing.BasicReturnBody;\n import org.apache.qpid.framing.ContentHeaderBody;\n-import org.apache.qpid.framing.MethodRegistry;\n-import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n+import org.apache.qpid.framing.MessagePublishInfo;\n import org.apache.qpid.protocol.AMQVersionAwareProtocolSession;\n import org.apache.qpid.server.message.InstanceProperties;\n import org.apache.qpid.server.message.MessageContentSource;\n import org.apache.qpid.server.message.ServerMessage;\n import org.apache.qpid.server.plugin.MessageConverter;\n import org.apache.qpid.server.protocol.MessageConverterRegistry;\n-import org.apache.qpid.server.protocol.v0_8.AMQMessage;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n import org.apache.qpid.util.GZIPUtils;\n \n-class ProtocolOutputConverterImpl implements ProtocolOutputConverter\n+public class ProtocolOutputConverterImpl implements ProtocolOutputConverter\n {\n     private static final int BASIC_CLASS_ID = 60;\n \n-    private final MethodRegistry _methodRegistry;\n-    private final AMQProtocolSession _protocolSession;\n+    private final AMQProtocolEngine _connection;\n     private static final AMQShortString GZIP_ENCODING = AMQShortString.valueOf(GZIPUtils.GZIP_CONTENT_ENCODING);\n \n-    ProtocolOutputConverterImpl(AMQProtocolSession session, MethodRegistry methodRegistry)\n+    public ProtocolOutputConverterImpl(AMQProtocolEngine connection)\n     {\n-        _protocolSession = session;\n-        _methodRegistry = methodRegistry;\n+        _connection = connection;\n     }\n \n \n-    public AMQProtocolSession getProtocolSession()\n-    {\n-        return _protocolSession;\n-    }\n-\n     public long writeDeliver(final ServerMessage m,\n                              final InstanceProperties props, int channelId,\n                              long deliveryTag,\n@@ -86,7 +76,7 @@ private AMQMessage convertToAMQMessage(ServerMessage serverMessage)\n         }\n         else\n         {\n-            return getMessageConverter(serverMessage).convert(serverMessage, _protocolSession.getVirtualHost());\n+            return getMessageConverter(serverMessage).convert(serverMessage, _connection.getVirtualHost());\n         }\n     }\n \n@@ -109,7 +99,7 @@ private long writeMessageDelivery(MessageContentSource message, ContentHeaderBod\n         byte[] modifiedContent;\n \n         // straight through case\n-        boolean compressionSupported = _protocolSession.isCompressionSupported();\n+        boolean compressionSupported = _connection.isCompressionSupported();\n \n         if(msgCompressed && !compressionSupported &&\n                 (modifiedContent = GZIPUtils.uncompressBufferToArray(message.getContent(0,bodySize))) != null)\n@@ -125,7 +115,7 @@ private long writeMessageDelivery(MessageContentSource message, ContentHeaderBod\n         else if(!msgCompressed\n                 && compressionSupported\n                 && contentHeaderBody.getProperties().getEncoding()==null\n-                && bodySize > _protocolSession.getMessageCompressionThreshold()\n+                && bodySize > _connection.getMessageCompressionThreshold()\n                 && (modifiedContent = GZIPUtils.compressBufferToArray(message.getContent(0, bodySize))) != null)\n         {\n             BasicContentHeaderProperties modifiedProps =\n@@ -152,7 +142,7 @@ private int writeMessageDeliveryModified(final int channelId,\n         final int bodySize;\n         bodySize = content.length;\n         ContentHeaderBody modifiedHeaderBody =\n-                new ContentHeaderBody(BASIC_CLASS_ID, 0, modifiedProps, bodySize);\n+                new ContentHeaderBody(modifiedProps, bodySize);\n         final MessageContentSource wrappedSource = new MessageContentSource()\n         {\n             @Override\n@@ -192,7 +182,7 @@ private void writeMessageDeliveryUnchanged(final MessageContentSource message,\n         }\n         else\n         {\n-            int maxBodySize = (int) getProtocolSession().getMaxFrameSize() - AMQFrame.getFrameOverhead();\n+            int maxBodySize = (int) _connection.getMaxFrameSize() - AMQFrame.getFrameOverhead();\n \n \n             int capacity = bodySize > maxBodySize ? maxBodySize : bodySize;\n@@ -326,11 +316,11 @@ private EncodedDeliveryBody(long deliveryTag, AMQShortString routingKey, AMQShor\n \n         public AMQBody createAMQBody()\n         {\n-            return _methodRegistry.createBasicDeliverBody(_consumerTag,\n-                                                          _deliveryTag,\n-                                                          _isRedelivered,\n-                                                          _exchangeName,\n-                                                          _routingKey);\n+            return _connection.getMethodRegistry().createBasicDeliverBody(_consumerTag,\n+                                                                               _deliveryTag,\n+                                                                               _isRedelivered,\n+                                                                               _exchangeName,\n+                                                                               _routingKey);\n         }\n \n         public byte getFrameType()\n@@ -382,35 +372,25 @@ private AMQBody createEncodedGetOkBody(ServerMessage msg, InstanceProperties pro\n         final boolean isRedelivered = Boolean.TRUE.equals(props.getProperty(InstanceProperties.Property.REDELIVERED));\n \n         BasicGetOkBody getOkBody =\n-                _methodRegistry.createBasicGetOkBody(deliveryTag,\n-                                                    isRedelivered,\n-                                                    exchangeName,\n-                                                    routingKey,\n-                                                    queueSize);\n+                _connection.getMethodRegistry().createBasicGetOkBody(deliveryTag,\n+                                                                          isRedelivered,\n+                                                                          exchangeName,\n+                                                                          routingKey,\n+                                                                          queueSize);\n \n         return getOkBody;\n     }\n \n-    public byte getProtocolMinorVersion()\n-    {\n-        return _protocolSession.getProtocolMinorVersion();\n-    }\n-\n-    public byte getProtocolMajorVersion()\n-    {\n-        return getProtocolSession().getProtocolMajorVersion();\n-    }\n-\n     private AMQBody createEncodedReturnFrame(MessagePublishInfo messagePublishInfo,\n                                              int replyCode,\n                                              AMQShortString replyText)\n     {\n \n         BasicReturnBody basicReturnBody =\n-                _methodRegistry.createBasicReturnBody(replyCode,\n-                                                     replyText,\n-                                                     messagePublishInfo.getExchange(),\n-                                                     messagePublishInfo.getRoutingKey());\n+                _connection.getMethodRegistry().createBasicReturnBody(replyCode,\n+                                                                           replyText,\n+                                                                           messagePublishInfo.getExchange(),\n+                                                                           messagePublishInfo.getRoutingKey());\n \n \n         return basicReturnBody;\n@@ -427,14 +407,14 @@ public void writeReturn(MessagePublishInfo messagePublishInfo, ContentHeaderBody\n \n     public void writeFrame(AMQDataBlock block)\n     {\n-        getProtocolSession().writeFrame(block);\n+        _connection.writeFrame(block);\n     }\n \n \n     public void confirmConsumerAutoClose(int channelId, AMQShortString consumerTag)\n     {\n \n-        BasicCancelOkBody basicCancelOkBody = _methodRegistry.createBasicCancelOkBody(consumerTag);\n+        BasicCancelOkBody basicCancelOkBody = _connection.getMethodRegistry().createBasicCancelOkBody(consumerTag);\n         writeFrame(basicCancelOkBody.generateFrame(channelId));\n \n     }",
            "previous_filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/output/ProtocolOutputConverterImpl.java"
        },
        {
            "sha": "bd7b070cd28c88da67d0970c42ad9d0835efce00",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/UnacknowledgedMessageMap.java",
            "status": "modified",
            "additions": 5,
            "deletions": 6,
            "changes": 11,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FUnacknowledgedMessageMap.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FUnacknowledgedMessageMap.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FUnacknowledgedMessageMap.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -20,13 +20,12 @@\n  */\n package org.apache.qpid.server.protocol.v0_8;\n \n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.server.message.MessageInstance;\n-import org.apache.qpid.server.queue.QueueEntry;\n-\n import java.util.Collection;\n import java.util.Set;\n \n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.server.message.MessageInstance;\n+\n \n public interface UnacknowledgedMessageMap\n {\n@@ -37,12 +36,12 @@ public interface Visitor\n          *@param message the message being iterated over @return true to stop iteration, false to continue\n          * @throws AMQException\n          */\n-        boolean callback(final long deliveryTag, MessageInstance message) throws AMQException;\n+        boolean callback(final long deliveryTag, MessageInstance message);\n \n         void visitComplete();\n     }\n \n-    void visit(Visitor visitor) throws AMQException;\n+    void visit(Visitor visitor);\n \n     void add(long deliveryTag, MessageInstance message);\n "
        },
        {
            "sha": "2d39daed1c0985fbac1872aebb291c04aba514c9",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/UnacknowledgedMessageMapImpl.java",
            "status": "modified",
            "additions": 1,
            "deletions": 2,
            "changes": 3,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FUnacknowledgedMessageMapImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FUnacknowledgedMessageMapImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FUnacknowledgedMessageMapImpl.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -27,7 +27,6 @@\n import java.util.Map;\n import java.util.Set;\n \n-import org.apache.qpid.AMQException;\n import org.apache.qpid.server.message.MessageInstance;\n \n public class UnacknowledgedMessageMapImpl implements UnacknowledgedMessageMap\n@@ -82,7 +81,7 @@ public MessageInstance remove(long deliveryTag)\n         }\n     }\n \n-    public void visit(Visitor visitor) throws AMQException\n+    public void visit(Visitor visitor)\n     {\n         synchronized (_lock)\n         {"
        },
        {
            "sha": "432a725c86a5d1ae727de8002d3e6cf572388e02",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/UnexpectedMethodException.java",
            "status": "renamed",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FUnexpectedMethodException.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FUnexpectedMethodException.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FUnexpectedMethodException.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -18,7 +18,7 @@\n  * under the License.\r\n  *\r\n  */\r\n-package org.apache.qpid.server.protocol.v0_8.handler;\r\n+package org.apache.qpid.server.protocol.v0_8;\r\n \r\n \r\n import org.apache.qpid.AMQException;\r",
            "previous_filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/UnexpectedMethodException.java"
        },
        {
            "sha": "ae07d60c4eeeb08c4f059f774d217596c201568e",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/AccessRequestHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 85,
            "changes": 85,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FAccessRequestHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FAccessRequestHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FAccessRequestHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,85 +0,0 @@\n-/*\r\n- *\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- *\r\n- */\r\n-package org.apache.qpid.server.protocol.v0_8.handler;\r\n-\r\n-\r\n-import org.apache.qpid.AMQException;\r\n-import org.apache.qpid.framing.AccessRequestBody;\r\n-import org.apache.qpid.framing.AccessRequestOkBody;\r\n-import org.apache.qpid.framing.MethodRegistry;\r\n-import org.apache.qpid.framing.amqp_0_9.MethodRegistry_0_9;\r\n-import org.apache.qpid.framing.amqp_8_0.MethodRegistry_8_0;\r\n-import org.apache.qpid.protocol.AMQConstant;\r\n-import org.apache.qpid.server.protocol.v0_8.AMQChannel;\r\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\r\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\r\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\r\n-\r\n-/**\r\n- * @author Apache Software Foundation\r\n- *\r\n- *\r\n- */\r\n-public class AccessRequestHandler implements StateAwareMethodListener<AccessRequestBody>\r\n-{\r\n-    private static final AccessRequestHandler _instance = new AccessRequestHandler();\r\n-\r\n-\r\n-    public static AccessRequestHandler getInstance()\r\n-    {\r\n-        return _instance;\r\n-    }\r\n-\r\n-    private AccessRequestHandler()\r\n-    {\r\n-    }\r\n-\r\n-    public void methodReceived(AMQStateManager stateManager, AccessRequestBody body, int channelId) throws AMQException\r\n-    {\r\n-        AMQProtocolSession session = stateManager.getProtocolSession();\r\n-        final AMQChannel channel = session.getChannel(channelId);\r\n-        if (channel == null)\r\n-        {\r\n-            throw body.getChannelNotFoundException(channelId);\r\n-        }\r\n-\r\n-        MethodRegistry methodRegistry = session.getMethodRegistry();\r\n-\r\n-        // We don't implement access control class, but to keep clients happy that expect it\r\n-        // always use the \"0\" ticket.\r\n-        AccessRequestOkBody response;\r\n-        if(methodRegistry instanceof MethodRegistry_0_9)\r\n-        {\r\n-            response = ((MethodRegistry_0_9)methodRegistry).createAccessRequestOkBody(0);\r\n-        }\r\n-        else if(methodRegistry instanceof MethodRegistry_8_0)\r\n-        {\r\n-            response = ((MethodRegistry_8_0)methodRegistry).createAccessRequestOkBody(0);\r\n-        }\r\n-        else\r\n-        {\r\n-            throw new AMQException(AMQConstant.COMMAND_INVALID, \"AccessRequest not present in AMQP versions other than 0-8, 0-9\");\r\n-        }\r\n-\r\n-        channel.sync();\r\n-        session.writeFrame(response.generateFrame(channelId));\r\n-    }\r\n-}\r"
        },
        {
            "sha": "f623d27e871c24d994dc18bca6ffee1f46b88d69",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/BasicAckMethodHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 67,
            "changes": 67,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FBasicAckMethodHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FBasicAckMethodHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FBasicAckMethodHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,67 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import org.apache.log4j.Logger;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.BasicAckBody;\n-import org.apache.qpid.server.protocol.v0_8.AMQChannel;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-\n-public class BasicAckMethodHandler implements StateAwareMethodListener<BasicAckBody>\n-{\n-    private static final Logger _log = Logger.getLogger(BasicAckMethodHandler.class);\n-\n-    private static final BasicAckMethodHandler _instance = new BasicAckMethodHandler();\n-\n-    public static BasicAckMethodHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    private BasicAckMethodHandler()\n-    {\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, BasicAckBody body, int channelId) throws AMQException\n-    {\n-        AMQProtocolSession protocolSession = stateManager.getProtocolSession();\n-\n-\n-        if (_log.isDebugEnabled())\n-        {\n-            _log.debug(\"Ack(Tag:\" + body.getDeliveryTag() + \":Mult:\" + body.getMultiple() + \") received on channel \" + channelId);\n-        }\n-\n-        final AMQChannel channel = protocolSession.getChannel(channelId);\n-\n-        if (channel == null)\n-        {\n-            throw body.getChannelNotFoundException(channelId);\n-        }\n-\n-        // this method throws an AMQException if the delivery tag is not known\n-        channel.acknowledgeMessage(body.getDeliveryTag(), body.getMultiple());\n-    }\n-}"
        },
        {
            "sha": "5a6a7bdc189b5b4817244a27222360beec885050",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/BasicCancelMethodHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 76,
            "changes": 76,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FBasicCancelMethodHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FBasicCancelMethodHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FBasicCancelMethodHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,76 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import org.apache.log4j.Logger;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.BasicCancelBody;\n-import org.apache.qpid.framing.BasicCancelOkBody;\n-import org.apache.qpid.framing.MethodRegistry;\n-import org.apache.qpid.server.protocol.v0_8.AMQChannel;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-\n-public class BasicCancelMethodHandler implements StateAwareMethodListener<BasicCancelBody>\n-{\n-    private static final Logger _log = Logger.getLogger(BasicCancelMethodHandler.class);\n-\n-    private static final BasicCancelMethodHandler _instance = new BasicCancelMethodHandler();\n-\n-    public static BasicCancelMethodHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    private BasicCancelMethodHandler()\n-    {\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, BasicCancelBody body, int channelId) throws AMQException\n-    {\n-        AMQProtocolSession session = stateManager.getProtocolSession();\n-\n-        final AMQChannel channel = session.getChannel(channelId);\n-\n-\n-        if (channel == null)\n-        {\n-            throw body.getChannelNotFoundException(channelId);\n-        }\n-\n-        if (_log.isDebugEnabled())\n-        {\n-            _log.debug(\"BasicCancel: for:\" + body.getConsumerTag() +\n-                       \" nowait:\" + body.getNowait());\n-        }\n-\n-        channel.unsubscribeConsumer(body.getConsumerTag());\n-        if (!body.getNowait())\n-        {\n-            MethodRegistry methodRegistry = session.getMethodRegistry();\n-            BasicCancelOkBody cancelOkBody = methodRegistry.createBasicCancelOkBody(body.getConsumerTag());\n-            channel.sync();\n-            session.writeFrame(cancelOkBody.generateFrame(channelId));\n-        }\n-    }\n-}"
        },
        {
            "sha": "c1e3d850efd64f2fa9b5c2e8c9a1afdf461fa5d8",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/BasicConsumeMethodHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 220,
            "changes": 220,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FBasicConsumeMethodHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FBasicConsumeMethodHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FBasicConsumeMethodHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,220 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import java.security.AccessControlException;\n-import java.util.Collection;\n-import java.util.HashSet;\n-\n-import org.apache.log4j.Logger;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.AMQMethodBody;\n-import org.apache.qpid.framing.AMQShortString;\n-import org.apache.qpid.framing.BasicConsumeBody;\n-import org.apache.qpid.framing.MethodRegistry;\n-import org.apache.qpid.protocol.AMQConstant;\n-import org.apache.qpid.server.filter.AMQInvalidArgumentException;\n-import org.apache.qpid.server.message.MessageSource;\n-import org.apache.qpid.server.protocol.v0_8.AMQChannel;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-import org.apache.qpid.server.queue.AMQQueue;\n-import org.apache.qpid.server.virtualhost.VirtualHostImpl;\n-\n-public class BasicConsumeMethodHandler implements StateAwareMethodListener<BasicConsumeBody>\n-{\n-    private static final Logger _logger = Logger.getLogger(BasicConsumeMethodHandler.class);\n-\n-    private static final BasicConsumeMethodHandler _instance = new BasicConsumeMethodHandler();\n-\n-    public static BasicConsumeMethodHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    private BasicConsumeMethodHandler()\n-    {\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, BasicConsumeBody body, int channelId) throws AMQException\n-    {\n-        AMQProtocolSession protocolConnection = stateManager.getProtocolSession();\n-\n-        AMQChannel channel = protocolConnection.getChannel(channelId);\n-        VirtualHostImpl<?,?,?> vHost = protocolConnection.getVirtualHost();\n-\n-        if (channel == null)\n-        {\n-            throw body.getChannelNotFoundException(channelId);\n-        }\n-        else\n-        {\n-            channel.sync();\n-            String queueName = body.getQueue() == null ? null : body.getQueue().asString();\n-            if (_logger.isDebugEnabled())\n-            {\n-                _logger.debug(\"BasicConsume: from '\" + queueName +\n-                              \"' for:\" + body.getConsumerTag() +\n-                              \" nowait:\" + body.getNowait() +\n-                              \" args:\" + body.getArguments());\n-            }\n-\n-            MessageSource queue = queueName == null ? channel.getDefaultQueue() : vHost.getQueue(queueName);\n-            final Collection<MessageSource> sources = new HashSet<>();\n-            if(queue != null)\n-            {\n-                sources.add(queue);\n-            }\n-            else if(vHost.getContextValue(Boolean.class, \"qpid.enableMultiQueueConsumers\")\n-                    && body.getArguments() != null\n-                    && body.getArguments().get(\"x-multiqueue\") instanceof Collection)\n-            {\n-                for(Object object : (Collection<Object>)body.getArguments().get(\"x-multiqueue\"))\n-                {\n-                    String sourceName = String.valueOf(object);\n-                    sourceName = sourceName.trim();\n-                    if(sourceName.length() != 0)\n-                    {\n-                        MessageSource source = vHost.getMessageSource(sourceName);\n-                        if(source == null)\n-                        {\n-                            sources.clear();\n-                            break;\n-                        }\n-                        else\n-                        {\n-                            sources.add(source);\n-                        }\n-                    }\n-                }\n-                queueName = body.getArguments().get(\"x-multiqueue\").toString();\n-            }\n-\n-            if (sources.isEmpty())\n-            {\n-                if (_logger.isDebugEnabled())\n-                {\n-                    _logger.debug(\"No queue for '\" + queueName + \"'\");\n-                }\n-                if (queueName != null)\n-                {\n-                    String msg = \"No such queue, '\" + queueName + \"'\";\n-                    throw body.getChannelException(AMQConstant.NOT_FOUND, msg);\n-                }\n-                else\n-                {\n-                    String msg = \"No queue name provided, no default queue defined.\";\n-                    throw body.getConnectionException(AMQConstant.NOT_ALLOWED, msg);\n-                }\n-            }\n-            else\n-            {\n-                final AMQShortString consumerTagName;\n-\n-                if (body.getConsumerTag() != null)\n-                {\n-                    consumerTagName = body.getConsumerTag().intern(false);\n-                }\n-                else\n-                {\n-                    consumerTagName = null;\n-                }\n-\n-                try\n-                {\n-                    if(consumerTagName == null || channel.getSubscription(consumerTagName) == null)\n-                    {\n-\n-                        AMQShortString consumerTag = channel.consumeFromSource(consumerTagName,\n-                                                                               sources,\n-                                                                               !body.getNoAck(),\n-                                                                               body.getArguments(),\n-                                                                               body.getExclusive(),\n-                                                                               body.getNoLocal());\n-                        if (!body.getNowait())\n-                        {\n-                            MethodRegistry methodRegistry = protocolConnection.getMethodRegistry();\n-                            AMQMethodBody responseBody = methodRegistry.createBasicConsumeOkBody(consumerTag);\n-                            protocolConnection.writeFrame(responseBody.generateFrame(channelId));\n-\n-                        }\n-                    }\n-                    else\n-                    {\n-                        AMQShortString msg = AMQShortString.validValueOf(\"Non-unique consumer tag, '\" + body.getConsumerTag() + \"'\");\n-\n-                        MethodRegistry methodRegistry = protocolConnection.getMethodRegistry();\n-                        AMQMethodBody responseBody = methodRegistry.createConnectionCloseBody(AMQConstant.NOT_ALLOWED.getCode(),    // replyCode\n-                                                                 msg,               // replytext\n-                                                                 body.getClazz(),\n-                                                                 body.getMethod());\n-                        protocolConnection.writeFrame(responseBody.generateFrame(0));\n-                    }\n-\n-                }\n-                catch (AMQInvalidArgumentException ise)\n-                {\n-                    _logger.debug(\"Closing connection due to invalid selector\");\n-\n-                    MethodRegistry methodRegistry = protocolConnection.getMethodRegistry();\n-                    AMQMethodBody responseBody = methodRegistry.createChannelCloseBody(AMQConstant.ARGUMENT_INVALID.getCode(),\n-                                                                                       AMQShortString.validValueOf(ise.getMessage()),\n-                                                                                       body.getClazz(),\n-                                                                                       body.getMethod());\n-                    protocolConnection.writeFrame(responseBody.generateFrame(channelId));\n-\n-\n-                }\n-                catch (AMQQueue.ExistingExclusiveConsumer e)\n-                {\n-                    throw body.getConnectionException(AMQConstant.ACCESS_REFUSED,\n-                                                      \"Cannot subscribe to queue \"\n-                                                      + queue.getName()\n-                                                      + \" as it already has an existing exclusive consumer\");\n-                }\n-                catch (AMQQueue.ExistingConsumerPreventsExclusive e)\n-                {\n-                    throw body.getConnectionException(AMQConstant.ACCESS_REFUSED,\n-                                                      \"Cannot subscribe to queue \"\n-                                                      + queue.getName()\n-                                                      + \" exclusively as it already has a consumer\");\n-                }\n-                catch (AccessControlException e)\n-                {\n-                    throw body.getConnectionException(AMQConstant.ACCESS_REFUSED,\n-                                                      \"Cannot subscribe to queue \"\n-                                                      + queue.getName()\n-                                                      + \" permission denied\");\n-                }\n-                catch (MessageSource.ConsumerAccessRefused consumerAccessRefused)\n-                {\n-                    throw body.getConnectionException(AMQConstant.ACCESS_REFUSED,\n-                                                      \"Cannot subscribe to queue \"\n-                                                      + queue.getName()\n-                                                      + \" as it already has an incompatible exclusivity policy\");\n-                }\n-\n-            }\n-        }\n-    }\n-}"
        },
        {
            "sha": "c3bdedf44dd69c47fc2bd5db4cba1e5685ade38c",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/BasicGetMethodHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 224,
            "changes": 224,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FBasicGetMethodHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FBasicGetMethodHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FBasicGetMethodHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,224 +0,0 @@\n-/*\n- *  Licensed to the Apache Software Foundation (ASF) under one\n- *  or more contributor license agreements.  See the NOTICE file\n- *  distributed with this work for additional information\n- *  regarding copyright ownership.  The ASF licenses this file\n- *  to you under the Apache License, Version 2.0 (the\n- *  \"License\"); you may not use this file except in compliance\n- *  with the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing,\n- *  software distributed under the License is distributed on an\n- *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- *  KIND, either express or implied.  See the License for the\n- *  specific language governing permissions and limitations\n- *  under the License.\n- *\n- *\n- */\n-\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import java.security.AccessControlException;\n-import java.util.EnumSet;\n-\n-import org.apache.log4j.Logger;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.AMQShortString;\n-import org.apache.qpid.framing.BasicGetBody;\n-import org.apache.qpid.framing.BasicGetEmptyBody;\n-import org.apache.qpid.framing.MethodRegistry;\n-import org.apache.qpid.protocol.AMQConstant;\n-import org.apache.qpid.server.consumer.ConsumerImpl;\n-import org.apache.qpid.server.flow.FlowCreditManager;\n-import org.apache.qpid.server.flow.MessageOnlyCreditManager;\n-import org.apache.qpid.server.message.InstanceProperties;\n-import org.apache.qpid.server.message.MessageInstance;\n-import org.apache.qpid.server.message.MessageSource;\n-import org.apache.qpid.server.message.ServerMessage;\n-import org.apache.qpid.server.protocol.v0_8.AMQChannel;\n-import org.apache.qpid.server.protocol.v0_8.AMQMessage;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.protocol.v0_8.ClientDeliveryMethod;\n-import org.apache.qpid.server.protocol.v0_8.ConsumerTarget_0_8;\n-import org.apache.qpid.server.protocol.v0_8.RecordDeliveryMethod;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-import org.apache.qpid.server.queue.AMQQueue;\n-import org.apache.qpid.server.virtualhost.VirtualHostImpl;\n-\n-public class BasicGetMethodHandler implements StateAwareMethodListener<BasicGetBody>\n-{\n-    private static final Logger _log = Logger.getLogger(BasicGetMethodHandler.class);\n-\n-    private static final BasicGetMethodHandler _instance = new BasicGetMethodHandler();\n-\n-    public static BasicGetMethodHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    private BasicGetMethodHandler()\n-    {\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, BasicGetBody body, int channelId) throws AMQException\n-    {\n-        AMQProtocolSession protocolConnection = stateManager.getProtocolSession();\n-\n-\n-        VirtualHostImpl vHost = protocolConnection.getVirtualHost();\n-\n-        AMQChannel channel = protocolConnection.getChannel(channelId);\n-        if (channel == null)\n-        {\n-            throw body.getChannelNotFoundException(channelId);\n-        }\n-        else\n-        {\n-            channel.sync();\n-            AMQQueue queue = body.getQueue() == null ? channel.getDefaultQueue() : vHost.getQueue(body.getQueue().toString());\n-            if (queue == null)\n-            {\n-                _log.info(\"No queue for '\" + body.getQueue() + \"'\");\n-                if(body.getQueue()!=null)\n-                {\n-                    throw body.getConnectionException(AMQConstant.NOT_FOUND,\n-                                                      \"No such queue, '\" + body.getQueue()+ \"'\");\n-                }\n-                else\n-                {\n-                    throw body.getConnectionException(AMQConstant.NOT_ALLOWED,\n-                                                      \"No queue name provided, no default queue defined.\");\n-                }\n-            }\n-            else\n-            {\n-\n-                try\n-                {\n-                    if (!performGet(queue,protocolConnection, channel, !body.getNoAck()))\n-                    {\n-                        MethodRegistry methodRegistry = protocolConnection.getMethodRegistry();\n-                        // TODO - set clusterId\n-                        BasicGetEmptyBody responseBody = methodRegistry.createBasicGetEmptyBody(null);\n-\n-\n-                        protocolConnection.writeFrame(responseBody.generateFrame(channelId));\n-                    }\n-                }\n-                catch (AccessControlException e)\n-                {\n-                    throw body.getConnectionException(AMQConstant.ACCESS_REFUSED,\n-                                                      e.getMessage());\n-                }\n-                catch (MessageSource.ExistingExclusiveConsumer e)\n-                {\n-                    throw body.getConnectionException(AMQConstant.NOT_ALLOWED,\n-                                                      \"Queue has an exclusive consumer\");\n-                }\n-                catch (MessageSource.ExistingConsumerPreventsExclusive e)\n-                {\n-                    throw body.getConnectionException(AMQConstant.INTERNAL_ERROR,\n-                                                      \"The GET request has been evaluated as an exclusive consumer, \" +\n-                                                      \"this is likely due to a programming error in the Qpid broker\");\n-                }\n-                catch (MessageSource.ConsumerAccessRefused consumerAccessRefused)\n-                {\n-                    throw body.getConnectionException(AMQConstant.NOT_ALLOWED,\n-                                                      \"Queue has an incompatible exclusivit policy\");\n-                }\n-            }\n-        }\n-    }\n-\n-    public static boolean performGet(final AMQQueue queue,\n-                                     final AMQProtocolSession session,\n-                                     final AMQChannel channel,\n-                                     final boolean acks)\n-            throws AMQException, MessageSource.ExistingConsumerPreventsExclusive,\n-                   MessageSource.ExistingExclusiveConsumer, MessageSource.ConsumerAccessRefused\n-    {\n-\n-        final FlowCreditManager singleMessageCredit = new MessageOnlyCreditManager(1L);\n-\n-        final GetDeliveryMethod getDeliveryMethod =\n-                new GetDeliveryMethod(singleMessageCredit, session, channel, queue);\n-        final RecordDeliveryMethod getRecordMethod = new RecordDeliveryMethod()\n-        {\n-\n-            public void recordMessageDelivery(final ConsumerImpl sub, final MessageInstance entry, final long deliveryTag)\n-            {\n-                channel.addUnacknowledgedMessage(entry, deliveryTag, null);\n-            }\n-        };\n-\n-        ConsumerTarget_0_8 target;\n-        EnumSet<ConsumerImpl.Option> options = EnumSet.of(ConsumerImpl.Option.TRANSIENT, ConsumerImpl.Option.ACQUIRES,\n-                                                          ConsumerImpl.Option.SEES_REQUEUES);\n-        if(acks)\n-        {\n-\n-            target = ConsumerTarget_0_8.createAckTarget(channel,\n-                                                        AMQShortString.EMPTY_STRING, null,\n-                                                        singleMessageCredit, getDeliveryMethod, getRecordMethod);\n-        }\n-        else\n-        {\n-            target = ConsumerTarget_0_8.createGetNoAckTarget(channel,\n-                                                          AMQShortString.EMPTY_STRING, null,\n-                                                          singleMessageCredit, getDeliveryMethod, getRecordMethod);\n-        }\n-\n-        ConsumerImpl sub = queue.addConsumer(target, null, AMQMessage.class, \"\", options);\n-        sub.flush();\n-        sub.close();\n-        return(getDeliveryMethod.hasDeliveredMessage());\n-\n-\n-    }\n-\n-\n-    private static class GetDeliveryMethod implements ClientDeliveryMethod\n-    {\n-\n-        private final FlowCreditManager _singleMessageCredit;\n-        private final AMQProtocolSession _session;\n-        private final AMQChannel _channel;\n-        private final AMQQueue _queue;\n-        private boolean _deliveredMessage;\n-\n-        public GetDeliveryMethod(final FlowCreditManager singleMessageCredit,\n-                                 final AMQProtocolSession session,\n-                                 final AMQChannel channel, final AMQQueue queue)\n-        {\n-            _singleMessageCredit = singleMessageCredit;\n-            _session = session;\n-            _channel = channel;\n-            _queue = queue;\n-        }\n-\n-        @Override\n-        public long deliverToClient(final ConsumerImpl sub, final ServerMessage message,\n-                                    final InstanceProperties props, final long deliveryTag)\n-        {\n-            _singleMessageCredit.useCreditForMessage(message.getSize());\n-            long size =_session.getProtocolOutputConverter().writeGetOk(message,\n-                                                            props,\n-                                                            _channel.getChannelId(),\n-                                                            deliveryTag,\n-                                                            _queue.getQueueDepthMessages());\n-\n-            _deliveredMessage = true;\n-            return size;\n-        }\n-\n-        public boolean hasDeliveredMessage()\n-        {\n-            return _deliveredMessage;\n-        }\n-    }\n-}"
        },
        {
            "sha": "0d09c31ec8462b09ba1fe4af152695332c369bc6",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/BasicPublishMethodHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 112,
            "changes": 112,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FBasicPublishMethodHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FBasicPublishMethodHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FBasicPublishMethodHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,112 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import org.apache.log4j.Logger;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.AMQShortString;\n-import org.apache.qpid.framing.BasicPublishBody;\n-import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n-import org.apache.qpid.protocol.AMQConstant;\n-import org.apache.qpid.server.message.MessageDestination;\n-import org.apache.qpid.server.protocol.v0_8.AMQChannel;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-import org.apache.qpid.server.virtualhost.VirtualHostImpl;\n-\n-import java.security.AccessControlException;\n-\n-public class BasicPublishMethodHandler implements StateAwareMethodListener<BasicPublishBody>\n-{\n-    private static final Logger _logger = Logger.getLogger(BasicPublishMethodHandler.class);\n-\n-    private static final BasicPublishMethodHandler _instance = new BasicPublishMethodHandler();\n-\n-\n-    public static BasicPublishMethodHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    private BasicPublishMethodHandler()\n-    {\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, BasicPublishBody body, int channelId) throws AMQException\n-    {\n-        AMQProtocolSession session = stateManager.getProtocolSession();\n-        if (_logger.isDebugEnabled())\n-        {\n-            _logger.debug(\"Publish received on channel \" + channelId);\n-        }\n-\n-        AMQShortString exchangeName = body.getExchange();\n-        VirtualHostImpl vHost = session.getVirtualHost();\n-\n-        // TODO: check the delivery tag field details - is it unique across the broker or per subscriber?\n-\n-        MessageDestination destination;\n-\n-        if (exchangeName == null || AMQShortString.EMPTY_STRING.equals(exchangeName))\n-        {\n-            destination = vHost.getDefaultDestination();\n-        }\n-        else\n-        {\n-            destination = vHost.getMessageDestination(exchangeName.toString());\n-        }\n-\n-        // if the exchange does not exist we raise a channel exception\n-        if (destination == null)\n-        {\n-            throw body.getChannelException(AMQConstant.NOT_FOUND, \"Unknown exchange name\");\n-        }\n-        else\n-        {\n-            // The partially populated BasicDeliver frame plus the received route body\n-            // is stored in the channel. Once the final body frame has been received\n-            // it is routed to the exchange.\n-            AMQChannel channel = session.getChannel(channelId);\n-\n-            if (channel == null)\n-            {\n-                throw body.getChannelNotFoundException(channelId);\n-            }\n-\n-            MessagePublishInfo info = session.getMethodRegistry().getProtocolVersionMethodConverter().convertToInfo(body);\n-            info.setExchange(exchangeName);\n-            try\n-            {\n-                channel.setPublishFrame(info, destination);\n-            }\n-            catch (AccessControlException e)\n-            {\n-                throw body.getConnectionException(AMQConstant.ACCESS_REFUSED, e.getMessage());\n-            }\n-        }\n-    }\n-\n-}\n-\n-\n-"
        },
        {
            "sha": "e4a6636a7412f997c594b15da650be3b39d57387",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/BasicQosHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 58,
            "changes": 58,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FBasicQosHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FBasicQosHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FBasicQosHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,58 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.AMQMethodBody;\n-import org.apache.qpid.framing.BasicQosBody;\n-import org.apache.qpid.framing.MethodRegistry;\n-import org.apache.qpid.server.protocol.v0_8.AMQChannel;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-\n-public class BasicQosHandler implements StateAwareMethodListener<BasicQosBody>\n-{\n-    private static final BasicQosHandler _instance = new BasicQosHandler();\n-\n-    public static BasicQosHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, BasicQosBody body, int channelId) throws AMQException\n-    {\n-        AMQProtocolSession session = stateManager.getProtocolSession();\n-        AMQChannel channel = session.getChannel(channelId);\n-        if (channel == null)\n-        {\n-            throw body.getChannelNotFoundException(channelId);\n-        }\n-        channel.sync();\n-        channel.setCredit(body.getPrefetchSize(), body.getPrefetchCount());\n-\n-\n-        MethodRegistry methodRegistry = session.getMethodRegistry();\n-        AMQMethodBody responseBody = methodRegistry.createBasicQosOkBody();\n-        session.writeFrame(responseBody.generateFrame(channelId));\n-\n-    }\n-}"
        },
        {
            "sha": "606bcf1693c7b81af405c6982a803093f1bdf9cc",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/BasicRecoverMethodHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 73,
            "changes": 73,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FBasicRecoverMethodHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FBasicRecoverMethodHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FBasicRecoverMethodHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,73 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import org.apache.log4j.Logger;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.AMQMethodBody;\n-import org.apache.qpid.framing.BasicRecoverBody;\n-import org.apache.qpid.framing.ProtocolVersion;\n-import org.apache.qpid.framing.amqp_8_0.MethodRegistry_8_0;\n-import org.apache.qpid.server.protocol.v0_8.AMQChannel;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-\n-public class BasicRecoverMethodHandler implements StateAwareMethodListener<BasicRecoverBody>\n-{\n-    private static final Logger _logger = Logger.getLogger(BasicRecoverMethodHandler.class);\n-\n-    private static final BasicRecoverMethodHandler _instance = new BasicRecoverMethodHandler();\n-\n-    public static BasicRecoverMethodHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, BasicRecoverBody body, int channelId) throws AMQException\n-    {\n-        AMQProtocolSession session = stateManager.getProtocolSession();\n-\n-        _logger.debug(\"Recover received on protocol session \" + session + \" and channel \" + channelId);\n-        AMQChannel channel = session.getChannel(channelId);\n-\n-\n-        if (channel == null)\n-        {\n-            throw body.getChannelNotFoundException(channelId);\n-        }\n-\n-        channel.resend();\n-\n-        // Qpid 0-8 hacks a synchronous -ok onto recover.\n-        // In Qpid 0-9 we create a separate sync-recover, sync-recover-ok pair to be \"more\" compliant\n-        if(session.getProtocolVersion().equals(ProtocolVersion.v8_0))\n-        {\n-            MethodRegistry_8_0 methodRegistry = (MethodRegistry_8_0) session.getMethodRegistry();\n-            AMQMethodBody recoverOk = methodRegistry.createBasicRecoverOkBody();\n-            channel.sync();\n-            session.writeFrame(recoverOk.generateFrame(channelId));\n-\n-        }\n-\n-    }\n-}"
        },
        {
            "sha": "ef26e60a62b2948cbabe2f37fa49eb2752d85786",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/BasicRecoverSyncMethodHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 81,
            "changes": 81,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FBasicRecoverSyncMethodHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FBasicRecoverSyncMethodHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FBasicRecoverSyncMethodHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,81 +0,0 @@\n-/*\r\n- *\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- *\r\n- */\r\n-package org.apache.qpid.server.protocol.v0_8.handler;\r\n-\r\n-\r\n-import org.apache.log4j.Logger;\r\n-\r\n-import org.apache.qpid.AMQException;\r\n-import org.apache.qpid.framing.AMQMethodBody;\r\n-import org.apache.qpid.framing.BasicRecoverSyncBody;\r\n-import org.apache.qpid.framing.ProtocolVersion;\r\n-import org.apache.qpid.framing.amqp_0_9.MethodRegistry_0_9;\r\n-import org.apache.qpid.framing.amqp_0_91.MethodRegistry_0_91;\r\n-import org.apache.qpid.server.protocol.v0_8.AMQChannel;\r\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\r\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\r\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\r\n-\r\n-public class BasicRecoverSyncMethodHandler implements StateAwareMethodListener<BasicRecoverSyncBody>\r\n-{\r\n-    private static final Logger _logger = Logger.getLogger(BasicRecoverSyncMethodHandler.class);\r\n-\r\n-    private static final BasicRecoverSyncMethodHandler _instance = new BasicRecoverSyncMethodHandler();\r\n-\r\n-    public static BasicRecoverSyncMethodHandler getInstance()\r\n-    {\r\n-        return _instance;\r\n-    }\r\n-\r\n-    public void methodReceived(AMQStateManager stateManager, BasicRecoverSyncBody body, int channelId) throws AMQException\r\n-    {\r\n-        AMQProtocolSession session = stateManager.getProtocolSession();\r\n-\r\n-        _logger.debug(\"Recover received on protocol session \" + session + \" and channel \" + channelId);\r\n-        AMQChannel channel = session.getChannel(channelId);\r\n-\r\n-\r\n-        if (channel == null)\r\n-        {\r\n-            throw body.getChannelNotFoundException(channelId);\r\n-        }\r\n-        channel.sync();\r\n-        channel.resend();\r\n-\r\n-        // Qpid 0-8 hacks a synchronous -ok onto recover.\r\n-        // In Qpid 0-9 we create a separate sync-recover, sync-recover-ok pair to be \"more\" compliant\r\n-        if(session.getProtocolVersion().equals(ProtocolVersion.v0_9))\r\n-        {\r\n-            MethodRegistry_0_9 methodRegistry = (MethodRegistry_0_9) session.getMethodRegistry();\r\n-            AMQMethodBody recoverOk = methodRegistry.createBasicRecoverSyncOkBody();\r\n-            session.writeFrame(recoverOk.generateFrame(channelId));\r\n-\r\n-        }\r\n-        else if(session.getProtocolVersion().equals(ProtocolVersion.v0_91))\r\n-        {\r\n-            MethodRegistry_0_91 methodRegistry = (MethodRegistry_0_91) session.getMethodRegistry();\r\n-            AMQMethodBody recoverOk = methodRegistry.createBasicRecoverSyncOkBody();\r\n-            session.writeFrame(recoverOk.generateFrame(channelId));\r\n-\r\n-        }\r\n-\r\n-    }\r\n-}\r"
        },
        {
            "sha": "fdbd44b06d6b2b42812c2ac1d40af9e7af9a0c41",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/BasicRejectMethodHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 132,
            "changes": 132,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FBasicRejectMethodHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FBasicRejectMethodHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FBasicRejectMethodHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,132 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import org.apache.log4j.Logger;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.BasicRejectBody;\n-import org.apache.qpid.server.message.MessageInstance;\n-import org.apache.qpid.server.protocol.v0_8.AMQChannel;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.queue.QueueEntry;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-\n-public class BasicRejectMethodHandler implements StateAwareMethodListener<BasicRejectBody>\n-{\n-    private static final Logger _logger = Logger.getLogger(BasicRejectMethodHandler.class);\n-\n-    private static BasicRejectMethodHandler _instance = new BasicRejectMethodHandler();\n-\n-    public static BasicRejectMethodHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    private BasicRejectMethodHandler()\n-    {\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, BasicRejectBody body, int channelId) throws AMQException\n-    {\n-        AMQProtocolSession session = stateManager.getProtocolSession();\n-\n-        AMQChannel channel = session.getChannel(channelId);\n-\n-        if (channel == null)\n-        {\n-            throw body.getChannelNotFoundException(channelId);\n-        }\n-\n-        if (_logger.isDebugEnabled())\n-        {\n-            _logger.debug(\"Rejecting:\" + body.getDeliveryTag() +\n-                          \": Requeue:\" + body.getRequeue() +\n-                          \" on channel:\" + channel.debugIdentity());\n-        }\n-\n-        long deliveryTag = body.getDeliveryTag();\n-\n-        MessageInstance message = channel.getUnacknowledgedMessageMap().get(deliveryTag);\n-\n-        if (message == null)\n-        {\n-            _logger.warn(\"Dropping reject request as message is null for tag:\" + deliveryTag);\n-        }\n-        else\n-        {\n-\n-            if (message.getMessage() == null)\n-            {\n-                _logger.warn(\"Message has already been purged, unable to Reject.\");\n-                return;\n-            }\n-\n-\n-            if (_logger.isDebugEnabled())\n-            {\n-                _logger.debug(\"Rejecting: DT:\" + deliveryTag + \"-\" + message.getMessage() +\n-                              \": Requeue:\" + body.getRequeue() +\n-                              \" on channel:\" + channel.debugIdentity());\n-            }\n-\n-            if (body.getRequeue())\n-            {\n-                //this requeue represents a message rejected from the pre-dispatch queue\n-                //therefore we need to amend the delivery counter.\n-                message.decrementDeliveryCount();\n-\n-                channel.requeue(deliveryTag);\n-            }\n-            else\n-            {\n-                // Since the Java client abuses the reject flag for requeing after rollback, we won't set reject here\n-                // as it would prevent redelivery\n-                // message.reject();\n-\n-                final boolean maxDeliveryCountEnabled = channel.isMaxDeliveryCountEnabled(deliveryTag);\n-                _logger.debug(\"maxDeliveryCountEnabled: \" + maxDeliveryCountEnabled + \" deliveryTag \" + deliveryTag);\n-                if (maxDeliveryCountEnabled)\n-                {\n-                    final boolean deliveredTooManyTimes = channel.isDeliveredTooManyTimes(deliveryTag);\n-                    _logger.debug(\"deliveredTooManyTimes: \" + deliveredTooManyTimes + \" deliveryTag \" + deliveryTag);\n-                    if (deliveredTooManyTimes)\n-                    {\n-                        channel.deadLetter(body.getDeliveryTag());\n-                    }\n-                    else\n-                    {\n-                        //this requeue represents a message rejected because of a recover/rollback that we\n-                        //are not ready to DLQ. We rely on the reject command to resend from the unacked map\n-                        //and therefore need to increment the delivery counter so we cancel out the effect\n-                        //of the AMQChannel#resend() decrement.\n-                        message.incrementDeliveryCount();\n-                    }\n-                }\n-                else\n-                {\n-                    channel.requeue(deliveryTag);\n-                }\n-            }\n-        }\n-    }\n-}"
        },
        {
            "sha": "e96d098618f2ff22eaabfff0c85ef4921615f27b",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/ChannelCloseHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 76,
            "changes": 76,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FChannelCloseHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FChannelCloseHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FChannelCloseHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,76 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import org.apache.log4j.Logger;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.ChannelCloseBody;\n-import org.apache.qpid.framing.ChannelCloseOkBody;\n-import org.apache.qpid.framing.MethodRegistry;\n-import org.apache.qpid.protocol.AMQConstant;\n-import org.apache.qpid.server.protocol.v0_8.AMQChannel;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-\n-public class ChannelCloseHandler implements StateAwareMethodListener<ChannelCloseBody>\n-{\n-    private static final Logger _logger = Logger.getLogger(ChannelCloseHandler.class);\n-\n-    private static ChannelCloseHandler _instance = new ChannelCloseHandler();\n-\n-    public static ChannelCloseHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    private ChannelCloseHandler()\n-    {\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, ChannelCloseBody body, int channelId) throws AMQException\n-    {\n-        AMQProtocolSession session = stateManager.getProtocolSession();\n-\n-        if (_logger.isInfoEnabled())\n-        {\n-            _logger.info(\"Received channel close for id \" + channelId + \" citing class \" + body.getClassId() +\n-                         \" and method \" + body.getMethodId());\n-        }\n-\n-\n-        AMQChannel channel = session.getChannel(channelId);\n-\n-        if (channel == null)\n-        {\n-            throw body.getConnectionException(AMQConstant.CHANNEL_ERROR, \"Trying to close unknown channel\");\n-        }\n-        channel.sync();\n-        session.closeChannel(channelId);\n-        // Client requested closure so we don't wait for ok we send it\n-        stateManager.getProtocolSession().closeChannelOk(channelId);\n-\n-        MethodRegistry methodRegistry = session.getMethodRegistry();\n-        ChannelCloseOkBody responseBody = methodRegistry.createChannelCloseOkBody();\n-        session.writeFrame(responseBody.generateFrame(channelId));\n-    }\n-}"
        },
        {
            "sha": "2a220ff78d290a7b2b96ab41044259e6784b7e15",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/ChannelCloseOkHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 53,
            "changes": 53,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FChannelCloseOkHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FChannelCloseOkHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FChannelCloseOkHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,53 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import org.apache.log4j.Logger;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.ChannelCloseOkBody;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-\n-public class ChannelCloseOkHandler implements StateAwareMethodListener<ChannelCloseOkBody>\n-{\n-    private static final Logger _logger = Logger.getLogger(ChannelCloseOkHandler.class);\n-\n-    private static ChannelCloseOkHandler _instance = new ChannelCloseOkHandler();\n-\n-    public static ChannelCloseOkHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    private ChannelCloseOkHandler()\n-    {\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, ChannelCloseOkBody body, int channelId) throws AMQException\n-    {\n-\n-        _logger.info(\"Received channel-close-ok for channel-id \" + channelId);\n-\n-        // Let the Protocol Session know the channel is now closed.\n-        stateManager.getProtocolSession().closeChannelOk(channelId);\n-    }\n-}"
        },
        {
            "sha": "cc1677c93eb206e37072c973dbac0a838a2f1360",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/ChannelFlowHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 68,
            "changes": 68,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FChannelFlowHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FChannelFlowHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FChannelFlowHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,68 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import org.apache.log4j.Logger;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.AMQMethodBody;\n-import org.apache.qpid.framing.ChannelFlowBody;\n-import org.apache.qpid.framing.MethodRegistry;\n-import org.apache.qpid.server.protocol.v0_8.AMQChannel;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-\n-public class ChannelFlowHandler implements StateAwareMethodListener<ChannelFlowBody>\n-{\n-    private static final Logger _logger = Logger.getLogger(ChannelFlowHandler.class);\n-\n-    private static ChannelFlowHandler _instance = new ChannelFlowHandler();\n-\n-    public static ChannelFlowHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    private ChannelFlowHandler()\n-    {\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, ChannelFlowBody body, int channelId) throws AMQException\n-    {\n-        AMQProtocolSession session = stateManager.getProtocolSession();\n-\n-\n-        AMQChannel channel = session.getChannel(channelId);\n-\n-        if (channel == null)\n-        {\n-            throw body.getChannelNotFoundException(channelId);\n-        }\n-        channel.sync();\n-        channel.setSuspended(!body.getActive());\n-        _logger.debug(\"Channel.Flow for channel \" + channelId + \", active=\" + body.getActive());\n-\n-        MethodRegistry methodRegistry = session.getMethodRegistry();\n-        AMQMethodBody responseBody = methodRegistry.createChannelFlowOkBody(body.getActive());\n-        session.writeFrame(responseBody.generateFrame(channelId));\n-    }\n-}"
        },
        {
            "sha": "63c685721604693c4a14458fca1d83d096ed824a",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/ChannelOpenHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 143,
            "changes": 143,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FChannelOpenHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FChannelOpenHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FChannelOpenHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,143 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import org.apache.log4j.Logger;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.ChannelOpenBody;\n-import org.apache.qpid.framing.ChannelOpenOkBody;\n-import org.apache.qpid.framing.MethodRegistry;\n-import org.apache.qpid.framing.ProtocolVersion;\n-import org.apache.qpid.framing.amqp_0_9.MethodRegistry_0_9;\n-import org.apache.qpid.framing.amqp_0_91.MethodRegistry_0_91;\n-import org.apache.qpid.framing.amqp_8_0.MethodRegistry_8_0;\n-import org.apache.qpid.protocol.AMQConstant;\n-import org.apache.qpid.server.protocol.v0_8.AMQChannel;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-import org.apache.qpid.server.util.ConnectionScopedRuntimeException;\n-import org.apache.qpid.server.virtualhost.VirtualHostImpl;\n-\n-import java.io.ByteArrayOutputStream;\n-import java.io.DataOutputStream;\n-import java.io.IOException;\n-import java.util.UUID;\n-\n-public class ChannelOpenHandler implements StateAwareMethodListener<ChannelOpenBody>\n-{\n-    private static final Logger _logger = Logger.getLogger(ChannelOpenHandler.class);\n-\n-    private static ChannelOpenHandler _instance = new ChannelOpenHandler();\n-\n-    public static ChannelOpenHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    private ChannelOpenHandler()\n-    {\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, ChannelOpenBody body, int channelId) throws AMQException\n-    {\n-        AMQProtocolSession session = stateManager.getProtocolSession();\n-        VirtualHostImpl virtualHost = session.getVirtualHost();\n-\n-        // Protect the broker against out of order frame request.\n-        if (virtualHost == null)\n-        {\n-            throw new AMQException(AMQConstant.COMMAND_INVALID, \"Virtualhost has not yet been set. ConnectionOpen has not been called.\", null);\n-        }\n-        _logger.info(\"Connecting to: \" + virtualHost.getName());\n-\n-        final AMQChannel channel = new AMQChannel(session,channelId, virtualHost.getMessageStore());\n-\n-        session.addChannel(channel);\n-\n-        ChannelOpenOkBody response;\n-\n-        ProtocolVersion pv = session.getProtocolVersion();\n-\n-        if(pv.equals(ProtocolVersion.v8_0))\n-        {\n-            MethodRegistry_8_0 methodRegistry = (MethodRegistry_8_0) MethodRegistry.getMethodRegistry(ProtocolVersion.v8_0);\n-            response = methodRegistry.createChannelOpenOkBody();\n-\n-        }\n-        else if(pv.equals(ProtocolVersion.v0_9))\n-        {\n-            MethodRegistry_0_9 methodRegistry = (MethodRegistry_0_9) MethodRegistry.getMethodRegistry(ProtocolVersion.v0_9);\n-            UUID uuid = UUID.randomUUID();\n-            ByteArrayOutputStream output = new ByteArrayOutputStream();\n-            DataOutputStream dataOut = new DataOutputStream(output);\n-            try\n-            {\n-                dataOut.writeLong(uuid.getMostSignificantBits());\n-                dataOut.writeLong(uuid.getLeastSignificantBits());\n-                dataOut.flush();\n-                dataOut.close();\n-            }\n-            catch (IOException e)\n-            {\n-                // This *really* shouldn't happen as we're not doing any I/O\n-                throw new ConnectionScopedRuntimeException(\"I/O exception when writing to byte array\", e);\n-            }\n-\n-            // should really associate this channelId to the session\n-            byte[] channelName = output.toByteArray();\n-\n-            response = methodRegistry.createChannelOpenOkBody(channelName);\n-        }\n-        else if(pv.equals(ProtocolVersion.v0_91))\n-        {\n-            MethodRegistry_0_91 methodRegistry = (MethodRegistry_0_91) MethodRegistry.getMethodRegistry(ProtocolVersion.v0_91);\n-            UUID uuid = UUID.randomUUID();\n-            ByteArrayOutputStream output = new ByteArrayOutputStream();\n-            DataOutputStream dataOut = new DataOutputStream(output);\n-            try\n-            {\n-                dataOut.writeLong(uuid.getMostSignificantBits());\n-                dataOut.writeLong(uuid.getLeastSignificantBits());\n-                dataOut.flush();\n-                dataOut.close();\n-            }\n-            catch (IOException e)\n-            {\n-                // This *really* shouldn't happen as we're not doing any I/O\n-                throw new ConnectionScopedRuntimeException(\"I/O exception when writing to byte array\", e);\n-            }\n-\n-            // should really associate this channelId to the session\n-            byte[] channelName = output.toByteArray();\n-\n-            response = methodRegistry.createChannelOpenOkBody(channelName);\n-        }\n-        else\n-        {\n-            throw new AMQException(AMQConstant.INTERNAL_ERROR, \"Got channel open for protocol version not catered for: \" + pv, null);\n-        }\n-\n-\n-        session.writeFrame(response.generateFrame(channelId));\n-    }\n-}"
        },
        {
            "sha": "60f9c1d495d23cde5a0a0c904cbb859ed7fb6264",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/ConnectionCloseMethodHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 72,
            "changes": 72,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FConnectionCloseMethodHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FConnectionCloseMethodHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FConnectionCloseMethodHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,72 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import org.apache.log4j.Logger;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.ConnectionCloseBody;\n-import org.apache.qpid.framing.ConnectionCloseOkBody;\n-import org.apache.qpid.framing.MethodRegistry;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-\n-public class ConnectionCloseMethodHandler implements StateAwareMethodListener<ConnectionCloseBody>\n-{\n-    private static final Logger _logger = Logger.getLogger(ConnectionCloseMethodHandler.class);\n-\n-    private static ConnectionCloseMethodHandler _instance = new ConnectionCloseMethodHandler();\n-\n-    public static ConnectionCloseMethodHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    private ConnectionCloseMethodHandler()\n-    {\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, ConnectionCloseBody body, int channelId) throws AMQException\n-    {\n-        AMQProtocolSession session = stateManager.getProtocolSession();\n-        if (_logger.isInfoEnabled())\n-        {\n-            _logger.info(\"ConnectionClose received with reply code/reply text \" + body.getReplyCode() + \"/\" +\n-                         body.getReplyText() + \" for \" + session);\n-        }\n-        try\n-        {\n-            session.closeSession();\n-        }\n-        catch (Exception e)\n-        {\n-            _logger.error(\"Error closing protocol session: \" + e, e);\n-        }\n-\n-        MethodRegistry methodRegistry = session.getMethodRegistry();\n-        ConnectionCloseOkBody responseBody = methodRegistry.createConnectionCloseOkBody();\n-        session.writeFrame(responseBody.generateFrame(channelId));\n-\n-        session.closeProtocolSession();\n-\n-    }\n-}"
        },
        {
            "sha": "fe46b6c0cdcf9b406330fa84c94eafa145820898",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/ConnectionCloseOkMethodHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 63,
            "changes": 63,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FConnectionCloseOkMethodHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FConnectionCloseOkMethodHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FConnectionCloseOkMethodHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,63 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import org.apache.log4j.Logger;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.ConnectionCloseOkBody;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQState;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-\n-public class ConnectionCloseOkMethodHandler implements StateAwareMethodListener<ConnectionCloseOkBody>\n-{\n-    private static final Logger _logger = Logger.getLogger(ConnectionCloseOkMethodHandler.class);\n-\n-    private static ConnectionCloseOkMethodHandler _instance = new ConnectionCloseOkMethodHandler();\n-\n-    public static ConnectionCloseOkMethodHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    private ConnectionCloseOkMethodHandler()\n-    {\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, ConnectionCloseOkBody body, int channelId) throws AMQException\n-    {\n-        AMQProtocolSession session = stateManager.getProtocolSession();\n-        //todo should this not do more than just log the method?\n-        _logger.info(\"Received Connection-close-ok\");\n-\n-        try\n-        {\n-            stateManager.changeState(AMQState.CONNECTION_CLOSED);\n-            session.closeSession();\n-        }\n-        catch (Exception e)\n-        {\n-            _logger.error(\"Error closing protocol session: \" + e, e);\n-        }\n-    }\n-}"
        },
        {
            "sha": "632f751756c6da6d8c5dda6a0dda1862b63d201b",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/ConnectionOpenMethodHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 114,
            "changes": 114,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FConnectionOpenMethodHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FConnectionOpenMethodHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FConnectionOpenMethodHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,114 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import java.security.AccessControlException;\n-\n-import org.apache.log4j.Logger;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.AMQMethodBody;\n-import org.apache.qpid.framing.AMQShortString;\n-import org.apache.qpid.framing.ConnectionOpenBody;\n-import org.apache.qpid.framing.MethodRegistry;\n-import org.apache.qpid.protocol.AMQConstant;\n-import org.apache.qpid.server.model.State;\n-import org.apache.qpid.server.model.port.AmqpPort;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQState;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-import org.apache.qpid.server.virtualhost.VirtualHostImpl;\n-\n-public class ConnectionOpenMethodHandler implements StateAwareMethodListener<ConnectionOpenBody>\n-{\n-    private static final Logger _logger = Logger.getLogger(ConnectionOpenMethodHandler.class);\n-\n-    private static ConnectionOpenMethodHandler _instance = new ConnectionOpenMethodHandler();\n-\n-    public static ConnectionOpenMethodHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    private ConnectionOpenMethodHandler()\n-    {\n-    }\n-\n-    private static AMQShortString generateClientID()\n-    {\n-        return new AMQShortString(Long.toString(System.currentTimeMillis()));\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, ConnectionOpenBody body, int channelId) throws AMQException\n-    {\n-        AMQProtocolSession session = stateManager.getProtocolSession();\n-\n-        //ignore leading '/'\n-        String virtualHostName;\n-        if ((body.getVirtualHost() != null) && body.getVirtualHost().charAt(0) == '/')\n-        {\n-            virtualHostName = new StringBuilder(body.getVirtualHost().subSequence(1, body.getVirtualHost().length())).toString();\n-        }\n-        else\n-        {\n-            virtualHostName = body.getVirtualHost() == null ? null : String.valueOf(body.getVirtualHost());\n-        }\n-\n-        VirtualHostImpl virtualHost = ((AmqpPort)stateManager.getProtocolSession().getPort()).getVirtualHost(virtualHostName);\n-\n-        if (virtualHost == null)\n-        {\n-            throw body.getConnectionException(AMQConstant.NOT_FOUND, \"Unknown virtual host: '\" + virtualHostName + \"'\");\n-        }\n-        else\n-        {\n-            // Check virtualhost access\n-            if (virtualHost.getState() != State.ACTIVE)\n-            {\n-                throw body.getConnectionException(AMQConstant.CONNECTION_FORCED, \"Virtual host '\" + virtualHost.getName() + \"' is not active\");\n-            }\n-\n-            session.setVirtualHost(virtualHost);\n-            try\n-            {\n-                virtualHost.getSecurityManager().authoriseCreateConnection(session);\n-            }\n-            catch (AccessControlException e)\n-            {\n-                throw body.getConnectionException(AMQConstant.ACCESS_REFUSED, e.getMessage());\n-            }\n-\n-            // See Spec (0.8.2). Section  3.1.2 Virtual Hosts\n-            if (session.getContextKey() == null)\n-            {\n-                session.setContextKey(generateClientID());\n-            }\n-\n-            MethodRegistry methodRegistry = session.getMethodRegistry();\n-            AMQMethodBody responseBody =  methodRegistry.createConnectionOpenOkBody(body.getVirtualHost());\n-\n-            stateManager.changeState(AMQState.CONNECTION_OPEN);\n-\n-            session.writeFrame(responseBody.generateFrame(channelId));\n-        }\n-    }\n-}"
        },
        {
            "sha": "8a1160314b9e5ecfe5d2b9f0c6699083dc943b23",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/ConnectionSecureOkMethodHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 138,
            "changes": 138,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FConnectionSecureOkMethodHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FConnectionSecureOkMethodHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FConnectionSecureOkMethodHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,138 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-\n-import javax.security.sasl.SaslException;\n-import javax.security.sasl.SaslServer;\n-\n-import org.apache.log4j.Logger;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.ConnectionCloseBody;\n-import org.apache.qpid.framing.ConnectionSecureBody;\n-import org.apache.qpid.framing.ConnectionSecureOkBody;\n-import org.apache.qpid.framing.ConnectionTuneBody;\n-import org.apache.qpid.framing.MethodRegistry;\n-import org.apache.qpid.protocol.AMQConstant;\n-import org.apache.qpid.server.model.Broker;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQState;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-import org.apache.qpid.server.security.SubjectCreator;\n-import org.apache.qpid.server.security.auth.SubjectAuthenticationResult;\n-\n-public class ConnectionSecureOkMethodHandler implements StateAwareMethodListener<ConnectionSecureOkBody>\n-{\n-    private static final Logger _logger = Logger.getLogger(ConnectionSecureOkMethodHandler.class);\n-\n-    private static ConnectionSecureOkMethodHandler _instance = new ConnectionSecureOkMethodHandler();\n-\n-    public static ConnectionSecureOkMethodHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    private ConnectionSecureOkMethodHandler()\n-    {\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, ConnectionSecureOkBody body, int channelId) throws AMQException\n-    {\n-        Broker<?> broker = stateManager.getBroker();\n-        AMQProtocolSession session = stateManager.getProtocolSession();\n-\n-        SubjectCreator subjectCreator = stateManager.getSubjectCreator();\n-\n-        SaslServer ss = session.getSaslServer();\n-        if (ss == null)\n-        {\n-            throw new AMQException(\"No SASL context set up in session\");\n-        }\n-        MethodRegistry methodRegistry = session.getMethodRegistry();\n-        SubjectAuthenticationResult authResult = subjectCreator.authenticate(ss, body.getResponse());\n-        switch (authResult.getStatus())\n-        {\n-            case ERROR:\n-                Exception cause = authResult.getCause();\n-\n-                _logger.info(\"Authentication failed:\" + (cause == null ? \"\" : cause.getMessage()));\n-\n-                // This should be abstracted\n-                stateManager.changeState(AMQState.CONNECTION_CLOSING);\n-\n-                ConnectionCloseBody connectionCloseBody =\n-                        methodRegistry.createConnectionCloseBody(AMQConstant.NOT_ALLOWED.getCode(),\n-                                                                 AMQConstant.NOT_ALLOWED.getName(),\n-                                                                 body.getClazz(),\n-                                                                 body.getMethod());\n-\n-                session.writeFrame(connectionCloseBody.generateFrame(0));\n-                disposeSaslServer(session);\n-                break;\n-            case SUCCESS:\n-                if (_logger.isInfoEnabled())\n-                {\n-                    _logger.info(\"Connected as: \" + authResult.getSubject());\n-                }\n-                stateManager.changeState(AMQState.CONNECTION_NOT_TUNED);\n-\n-                int frameMax = broker.getContextValue(Integer.class, Broker.BROKER_FRAME_SIZE);\n-\n-                if(frameMax <= 0)\n-                {\n-                    frameMax = Integer.MAX_VALUE;\n-                }\n-\n-                ConnectionTuneBody tuneBody =\n-                        methodRegistry.createConnectionTuneBody(broker.getConnection_sessionCountLimit(),\n-                                                                frameMax,\n-                                                                broker.getConnection_heartBeatDelay());\n-                session.writeFrame(tuneBody.generateFrame(0));\n-                session.setAuthorizedSubject(authResult.getSubject());\n-                disposeSaslServer(session);\n-                break;\n-            case CONTINUE:\n-                stateManager.changeState(AMQState.CONNECTION_NOT_AUTH);\n-\n-                ConnectionSecureBody secureBody = methodRegistry.createConnectionSecureBody(authResult.getChallenge());\n-                session.writeFrame(secureBody.generateFrame(0));\n-        }\n-    }\n-\n-    private void disposeSaslServer(AMQProtocolSession ps)\n-    {\n-        SaslServer ss = ps.getSaslServer();\n-        if (ss != null)\n-        {\n-            ps.setSaslServer(null);\n-            try\n-            {\n-                ss.dispose();\n-            }\n-            catch (SaslException e)\n-            {\n-                _logger.error(\"Error disposing of Sasl server: \" + e);\n-            }\n-        }\n-    }\n-}"
        },
        {
            "sha": "e59032b87f1e7cda1c5d3e7c57e83af04a3afac7",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/ConnectionStartOkMethodHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 159,
            "changes": 159,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FConnectionStartOkMethodHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FConnectionStartOkMethodHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FConnectionStartOkMethodHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,159 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import javax.security.sasl.SaslException;\n-import javax.security.sasl.SaslServer;\n-\n-import org.apache.log4j.Logger;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.ConnectionCloseBody;\n-import org.apache.qpid.framing.ConnectionSecureBody;\n-import org.apache.qpid.framing.ConnectionStartOkBody;\n-import org.apache.qpid.framing.ConnectionTuneBody;\n-import org.apache.qpid.framing.MethodRegistry;\n-import org.apache.qpid.protocol.AMQConstant;\n-import org.apache.qpid.server.model.Broker;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQState;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-import org.apache.qpid.server.security.SubjectCreator;\n-import org.apache.qpid.server.security.auth.SubjectAuthenticationResult;\n-\n-\n-public class ConnectionStartOkMethodHandler implements StateAwareMethodListener<ConnectionStartOkBody>\n-{\n-    private static final Logger _logger = Logger.getLogger(ConnectionStartOkMethodHandler.class);\n-\n-    private static ConnectionStartOkMethodHandler _instance = new ConnectionStartOkMethodHandler();\n-\n-    public static ConnectionStartOkMethodHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    private ConnectionStartOkMethodHandler()\n-    {\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, ConnectionStartOkBody body, int channelId) throws AMQException\n-    {\n-        Broker<?> broker = stateManager.getBroker();\n-        AMQProtocolSession session = stateManager.getProtocolSession();\n-\n-        _logger.info(\"SASL Mechanism selected: \" + body.getMechanism());\n-        _logger.info(\"Locale selected: \" + body.getLocale());\n-\n-        SubjectCreator subjectCreator = stateManager.getSubjectCreator();\n-        SaslServer ss = null;\n-        try\n-        {\n-            ss = subjectCreator.createSaslServer(String.valueOf(body.getMechanism()), session.getLocalFQDN(), session.getPeerPrincipal());\n-\n-            if (ss == null)\n-            {\n-                throw body.getConnectionException(AMQConstant.RESOURCE_ERROR, \"Unable to create SASL Server:\" + body.getMechanism());\n-            }\n-\n-            session.setSaslServer(ss);\n-\n-            final SubjectAuthenticationResult authResult = subjectCreator.authenticate(ss, body.getResponse());\n-            //save clientProperties\n-            session.setClientProperties(body.getClientProperties());\n-\n-            MethodRegistry methodRegistry = session.getMethodRegistry();\n-\n-            switch (authResult.getStatus())\n-            {\n-                case ERROR:\n-                    Exception cause = authResult.getCause();\n-\n-                    _logger.info(\"Authentication failed:\" + (cause == null ? \"\" : cause.getMessage()));\n-\n-                    stateManager.changeState(AMQState.CONNECTION_CLOSING);\n-\n-                    ConnectionCloseBody closeBody =\n-                            methodRegistry.createConnectionCloseBody(AMQConstant.NOT_ALLOWED.getCode(),    // replyCode\n-                                                                     AMQConstant.NOT_ALLOWED.getName(),\n-                                                                     body.getClazz(),\n-                                                                     body.getMethod());\n-\n-                    session.writeFrame(closeBody.generateFrame(0));\n-                    disposeSaslServer(session);\n-                    break;\n-\n-                case SUCCESS:\n-                    if (_logger.isInfoEnabled())\n-                    {\n-                        _logger.info(\"Connected as: \" + authResult.getSubject());\n-                    }\n-                    session.setAuthorizedSubject(authResult.getSubject());\n-\n-                    stateManager.changeState(AMQState.CONNECTION_NOT_TUNED);\n-                    int frameMax = broker.getContextValue(Integer.class, Broker.BROKER_FRAME_SIZE);\n-\n-                    if(frameMax <= 0)\n-                    {\n-                        frameMax = Integer.MAX_VALUE;\n-                    }\n-\n-                    ConnectionTuneBody tuneBody = methodRegistry.createConnectionTuneBody(broker.getConnection_sessionCountLimit(),\n-                                                                                          frameMax,\n-                                                                                          broker.getConnection_heartBeatDelay());\n-                    session.writeFrame(tuneBody.generateFrame(0));\n-                    break;\n-                case CONTINUE:\n-                    stateManager.changeState(AMQState.CONNECTION_NOT_AUTH);\n-\n-                    ConnectionSecureBody secureBody = methodRegistry.createConnectionSecureBody(authResult.getChallenge());\n-                    session.writeFrame(secureBody.generateFrame(0));\n-            }\n-        }\n-        catch (SaslException e)\n-        {\n-            disposeSaslServer(session);\n-            throw new AMQException(\"SASL error: \" + e, e);\n-        }\n-    }\n-\n-    private void disposeSaslServer(AMQProtocolSession ps)\n-    {\n-        SaslServer ss = ps.getSaslServer();\n-        if (ss != null)\n-        {\n-            ps.setSaslServer(null);\n-            try\n-            {\n-                ss.dispose();\n-            }\n-            catch (SaslException e)\n-            {\n-                _logger.error(\"Error disposing of Sasl server: \" + e);\n-            }\n-        }\n-    }\n-\n-}\n-\n-\n-"
        },
        {
            "sha": "fb4818d3ed9a8988c6d72e05bb534e84c3a8cd2d",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/ConnectionTuneOkMethodHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 89,
            "changes": 89,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FConnectionTuneOkMethodHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FConnectionTuneOkMethodHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FConnectionTuneOkMethodHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,89 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import org.apache.log4j.Logger;\n-\n-import org.apache.qpid.AMQConnectionException;\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.ConnectionTuneOkBody;\n-import org.apache.qpid.protocol.AMQConstant;\n-import org.apache.qpid.server.model.Broker;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQState;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-\n-public class ConnectionTuneOkMethodHandler implements StateAwareMethodListener<ConnectionTuneOkBody>\n-{\n-    private static final Logger _logger = Logger.getLogger(ConnectionTuneOkMethodHandler.class);\n-\n-    private static ConnectionTuneOkMethodHandler _instance = new ConnectionTuneOkMethodHandler();\n-\n-    public static ConnectionTuneOkMethodHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, ConnectionTuneOkBody body, int channelId) throws AMQException\n-    {\n-        AMQProtocolSession session = stateManager.getProtocolSession();\n-\n-        if (_logger.isDebugEnabled())\n-        {\n-            _logger.debug(body);\n-        }\n-        stateManager.changeState(AMQState.CONNECTION_NOT_OPENED);\n-\n-        session.initHeartbeats(body.getHeartbeat());\n-\n-        int brokerFrameMax = stateManager.getBroker().getContextValue(Integer.class,Broker.BROKER_FRAME_SIZE);\n-        if(brokerFrameMax <= 0)\n-        {\n-            brokerFrameMax = Integer.MAX_VALUE;\n-        }\n-\n-        if(body.getFrameMax() > (long) brokerFrameMax)\n-        {\n-            throw new AMQConnectionException(AMQConstant.SYNTAX_ERROR,\n-                                             \"Attempt to set max frame size to \" + body.getFrameMax()\n-                                             + \"greater than the broker will allow: \"\n-                                             + brokerFrameMax,\n-                                             body.getClazz(), body.getMethod(),\n-                                             body.getMajor(), body.getMinor(),null);\n-        }\n-        else if(body.getFrameMax() > 0 && body.getFrameMax() < AMQConstant.FRAME_MIN_SIZE.getCode())\n-        {\n-            throw new AMQConnectionException(AMQConstant.SYNTAX_ERROR,\n-                                             \"Attempt to set max frame size to \" + body.getFrameMax()\n-                                             + \"which is smaller than the specification definined minimum: \"\n-                                             + AMQConstant.FRAME_MIN_SIZE.getCode(),\n-                                             body.getClazz(), body.getMethod(),\n-                                             body.getMajor(), body.getMinor(),null);\n-        }\n-        int frameMax = body.getFrameMax() == 0 ? brokerFrameMax : (int) body.getFrameMax();\n-        session.setMaxFrameSize(frameMax);\n-\n-        long maxChannelNumber = body.getChannelMax();\n-        //0 means no implied limit, except that forced by protocol limitations (0xFFFF)\n-        session.setMaximumNumberOfChannels( maxChannelNumber == 0 ? 0xFFFFL : maxChannelNumber);\n-    }\n-}"
        },
        {
            "sha": "2ea638a358df2b85570e673baa6d0fca7a9d4e1c",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/ExchangeBoundHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 238,
            "changes": 238,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FExchangeBoundHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FExchangeBoundHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FExchangeBoundHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,238 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.AMQShortString;\n-import org.apache.qpid.framing.ExchangeBoundBody;\n-import org.apache.qpid.framing.ExchangeBoundOkBody;\n-import org.apache.qpid.framing.MethodRegistry;\n-import org.apache.qpid.server.exchange.ExchangeImpl;\n-import org.apache.qpid.server.protocol.v0_8.AMQChannel;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.queue.AMQQueue;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-import org.apache.qpid.server.virtualhost.VirtualHostImpl;\n-\n-/**\n- * @author Apache Software Foundation\n- *\n- *\n- */\n-public class ExchangeBoundHandler implements StateAwareMethodListener<ExchangeBoundBody>\n-{\n-    private static final ExchangeBoundHandler _instance = new ExchangeBoundHandler();\n-\n-    public static final int OK = 0;\n-\n-    public static final int EXCHANGE_NOT_FOUND = 1;\n-\n-    public static final int QUEUE_NOT_FOUND = 2;\n-\n-    public static final int NO_BINDINGS = 3;\n-\n-    public static final int QUEUE_NOT_BOUND = 4;\n-\n-    public static final int NO_QUEUE_BOUND_WITH_RK = 5;\n-\n-    public static final int SPECIFIC_QUEUE_NOT_BOUND_WITH_RK = 6;\n-\n-    public static ExchangeBoundHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    private ExchangeBoundHandler()\n-    {\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, ExchangeBoundBody body, int channelId) throws AMQException\n-    {\n-        AMQProtocolSession session = stateManager.getProtocolSession();\n-        VirtualHostImpl virtualHost = session.getVirtualHost();\n-        MethodRegistry methodRegistry = session.getMethodRegistry();\n-\n-        final AMQChannel channel = session.getChannel(channelId);\n-        if (channel == null)\n-        {\n-            throw body.getChannelNotFoundException(channelId);\n-        }\n-        channel.sync();\n-\n-\n-        AMQShortString exchangeName = body.getExchange();\n-        AMQShortString queueName = body.getQueue();\n-        AMQShortString routingKey = body.getRoutingKey();\n-        ExchangeBoundOkBody response;\n-\n-        if(isDefaultExchange(exchangeName))\n-        {\n-            if(routingKey == null)\n-            {\n-                if(queueName == null)\n-                {\n-                    response = methodRegistry.createExchangeBoundOkBody(virtualHost.getQueues().isEmpty() ? NO_BINDINGS : OK, null);\n-                }\n-                else\n-                {\n-                    AMQQueue queue = virtualHost.getQueue(queueName.toString());\n-                    if (queue == null)\n-                    {\n-\n-                        response = methodRegistry.createExchangeBoundOkBody(QUEUE_NOT_FOUND,\t// replyCode\n-                                                                            AMQShortString.validValueOf(\"Queue '\" + queueName + \"' not found\"));\t// replyText\n-                    }\n-                    else\n-                    {\n-                        response = methodRegistry.createExchangeBoundOkBody(OK, null);\n-                    }\n-                }\n-            }\n-            else\n-            {\n-                if(queueName == null)\n-                {\n-                    response = methodRegistry.createExchangeBoundOkBody(virtualHost.getQueue(routingKey.toString()) == null ? NO_QUEUE_BOUND_WITH_RK : OK, null);\n-                }\n-                else\n-                {\n-                    AMQQueue queue = virtualHost.getQueue(queueName.toString());\n-                    if (queue == null)\n-                    {\n-\n-                        response = methodRegistry.createExchangeBoundOkBody(QUEUE_NOT_FOUND,\t// replyCode\n-                                                                            AMQShortString.validValueOf(\"Queue '\" + queueName + \"' not found\"));\t// replyText\n-                    }\n-                    else\n-                    {\n-                        response = methodRegistry.createExchangeBoundOkBody(queueName.equals(routingKey) ? OK : SPECIFIC_QUEUE_NOT_BOUND_WITH_RK, null);\n-                    }\n-                }\n-            }\n-        }\n-        else\n-        {\n-            ExchangeImpl exchange = virtualHost.getExchange(exchangeName.toString());\n-            if (exchange == null)\n-            {\n-\n-\n-                response = methodRegistry.createExchangeBoundOkBody(EXCHANGE_NOT_FOUND,\n-                                                                    AMQShortString.validValueOf(\"Exchange '\" + exchangeName + \"' not found\"));\n-            }\n-            else if (routingKey == null)\n-            {\n-                if (queueName == null)\n-                {\n-                    if (exchange.hasBindings())\n-                    {\n-                        response = methodRegistry.createExchangeBoundOkBody(OK, null);\n-                    }\n-                    else\n-                    {\n-\n-                        response = methodRegistry.createExchangeBoundOkBody(NO_BINDINGS,\t// replyCode\n-                            null);\t// replyText\n-                    }\n-                }\n-                else\n-                {\n-\n-                    AMQQueue queue = virtualHost.getQueue(queueName.toString());\n-                    if (queue == null)\n-                    {\n-\n-                        response = methodRegistry.createExchangeBoundOkBody(QUEUE_NOT_FOUND,\t// replyCode\n-                            AMQShortString.validValueOf(\"Queue '\" + queueName + \"' not found\"));\t// replyText\n-                    }\n-                    else\n-                    {\n-                        if (exchange.isBound(queue))\n-                        {\n-\n-                            response = methodRegistry.createExchangeBoundOkBody(OK,\t// replyCode\n-                                null);\t// replyText\n-                        }\n-                        else\n-                        {\n-\n-                            response = methodRegistry.createExchangeBoundOkBody(QUEUE_NOT_BOUND,\t// replyCode\n-                                AMQShortString.validValueOf(\"Queue '\" + queueName + \"' not bound to exchange '\" + exchangeName + \"'\"));\t// replyText\n-                        }\n-                    }\n-                }\n-            }\n-            else if (queueName != null)\n-            {\n-                AMQQueue queue = virtualHost.getQueue(queueName.toString());\n-                if (queue == null)\n-                {\n-\n-                    response = methodRegistry.createExchangeBoundOkBody(QUEUE_NOT_FOUND,\t// replyCode\n-                        AMQShortString.validValueOf(\"Queue '\" + queueName + \"' not found\"));\t// replyText\n-                }\n-                else\n-                {\n-                    String bindingKey = body.getRoutingKey() == null ? null : body.getRoutingKey().asString();\n-                    if (exchange.isBound(bindingKey, queue))\n-                    {\n-\n-                        response = methodRegistry.createExchangeBoundOkBody(OK,\t// replyCode\n-                            null);\t// replyText\n-                    }\n-                    else\n-                    {\n-\n-                        String message = \"Queue '\" + queueName + \"' not bound with routing key '\" +\n-                                            body.getRoutingKey() + \"' to exchange '\" + exchangeName + \"'\";\n-\n-                        response = methodRegistry.createExchangeBoundOkBody(SPECIFIC_QUEUE_NOT_BOUND_WITH_RK,\t// replyCode\n-                            AMQShortString.validValueOf(message));\t// replyText\n-                    }\n-                }\n-            }\n-            else\n-            {\n-                if (exchange.isBound(body.getRoutingKey() == null ? \"\" : body.getRoutingKey().asString()))\n-                {\n-\n-                    response = methodRegistry.createExchangeBoundOkBody(OK,\t// replyCode\n-                        null);\t// replyText\n-                }\n-                else\n-                {\n-\n-                    response = methodRegistry.createExchangeBoundOkBody(NO_QUEUE_BOUND_WITH_RK,\t// replyCode\n-                        AMQShortString.validValueOf(\"No queue bound with routing key '\" + body.getRoutingKey() +\n-                        \"' to exchange '\" + exchangeName + \"'\"));\t// replyText\n-                }\n-            }\n-        }\n-        session.writeFrame(response.generateFrame(channelId));\n-    }\n-\n-    protected boolean isDefaultExchange(final AMQShortString exchangeName)\n-    {\n-        return exchangeName == null || exchangeName.equals(AMQShortString.EMPTY_STRING);\n-    }\n-\n-}"
        },
        {
            "sha": "3f48b413ef0461ed87b92bb808a705248dfa2d6d",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/ExchangeDeclareHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 191,
            "changes": 191,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FExchangeDeclareHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FExchangeDeclareHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FExchangeDeclareHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,191 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import java.security.AccessControlException;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import org.apache.log4j.Logger;\n-\n-import org.apache.qpid.AMQConnectionException;\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.exchange.ExchangeDefaults;\n-import org.apache.qpid.framing.AMQMethodBody;\n-import org.apache.qpid.framing.AMQShortString;\n-import org.apache.qpid.framing.ExchangeDeclareBody;\n-import org.apache.qpid.framing.FieldTable;\n-import org.apache.qpid.framing.MethodRegistry;\n-import org.apache.qpid.protocol.AMQConstant;\n-import org.apache.qpid.server.exchange.ExchangeImpl;\n-import org.apache.qpid.server.model.LifetimePolicy;\n-import org.apache.qpid.server.model.NoFactoryForTypeException;\n-import org.apache.qpid.server.model.UnknownConfiguredObjectException;\n-import org.apache.qpid.server.protocol.v0_8.AMQChannel;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-import org.apache.qpid.server.virtualhost.ExchangeExistsException;\n-import org.apache.qpid.server.virtualhost.ReservedExchangeNameException;\n-import org.apache.qpid.server.virtualhost.VirtualHostImpl;\n-\n-public class ExchangeDeclareHandler implements StateAwareMethodListener<ExchangeDeclareBody>\n-{\n-    private static final Logger _logger = Logger.getLogger(ExchangeDeclareHandler.class);\n-\n-    private static final ExchangeDeclareHandler _instance = new ExchangeDeclareHandler();\n-\n-    public static ExchangeDeclareHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    private ExchangeDeclareHandler()\n-    {\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, ExchangeDeclareBody body, int channelId) throws AMQException\n-    {\n-        AMQProtocolSession session = stateManager.getProtocolSession();\n-        VirtualHostImpl virtualHost = session.getVirtualHost();\n-        final AMQChannel channel = session.getChannel(channelId);\n-        if (channel == null)\n-        {\n-            throw body.getChannelNotFoundException(channelId);\n-        }\n-\n-        final AMQShortString exchangeName = body.getExchange();\n-        if (_logger.isDebugEnabled())\n-        {\n-            _logger.debug(\"Request to declare exchange of type \" + body.getType() + \" with name \" + exchangeName);\n-        }\n-\n-        ExchangeImpl exchange;\n-\n-        if(isDefaultExchange(exchangeName))\n-        {\n-            if(!new AMQShortString(ExchangeDefaults.DIRECT_EXCHANGE_CLASS).equals(body.getType()))\n-            {\n-                throw new AMQConnectionException(AMQConstant.NOT_ALLOWED, \"Attempt to redeclare default exchange: \"\n-                                                                          + \" of type \"\n-                                                                          + ExchangeDefaults.DIRECT_EXCHANGE_CLASS\n-                                                                          + \" to \" + body.getType() +\".\",\n-                                                 body.getClazz(), body.getMethod(),\n-                                                 body.getMajor(), body.getMinor(),null);\n-            }\n-        }\n-        else\n-        {\n-            if (body.getPassive())\n-            {\n-                exchange = virtualHost.getExchange(exchangeName.toString());\n-                if(exchange == null)\n-                {\n-                    throw body.getChannelException(AMQConstant.NOT_FOUND, \"Unknown exchange: \" + exchangeName);\n-                }\n-                else if (!(body.getType() == null || body.getType().length() ==0) && !exchange.getType().equals(body.getType().asString()))\n-                {\n-\n-                    throw new AMQConnectionException(AMQConstant.NOT_ALLOWED, \"Attempt to redeclare exchange: \" +\n-                                      exchangeName + \" of type \" + exchange.getType()\n-                                      + \" to \" + body.getType() +\".\",body.getClazz(), body.getMethod(),body.getMajor(),body.getMinor(),null);\n-                }\n-\n-            }\n-            else\n-            {\n-                try\n-                {\n-                    String name = exchangeName == null ? null : exchangeName.intern().toString();\n-                    String type = body.getType() == null ? null : body.getType().intern().toString();\n-\n-                    Map<String,Object> attributes = new HashMap<String, Object>();\n-                    if(body.getArguments() != null)\n-                    {\n-                        attributes.putAll(FieldTable.convertToMap(body.getArguments()));\n-                    }\n-                    attributes.put(org.apache.qpid.server.model.Exchange.ID, null);\n-                    attributes.put(org.apache.qpid.server.model.Exchange.NAME,name);\n-                    attributes.put(org.apache.qpid.server.model.Exchange.TYPE,type);\n-                    attributes.put(org.apache.qpid.server.model.Exchange.DURABLE, body.getDurable());\n-                    attributes.put(org.apache.qpid.server.model.Exchange.LIFETIME_POLICY,\n-                                   body.getAutoDelete() ? LifetimePolicy.DELETE_ON_NO_LINKS : LifetimePolicy.PERMANENT);\n-                    if(!attributes.containsKey(org.apache.qpid.server.model.Exchange.ALTERNATE_EXCHANGE))\n-                    {\n-                        attributes.put(org.apache.qpid.server.model.Exchange.ALTERNATE_EXCHANGE, null);\n-                    }\n-                    exchange = virtualHost.createExchange(attributes);\n-\n-                }\n-                catch(ReservedExchangeNameException e)\n-                {\n-                    throw body.getConnectionException(AMQConstant.NOT_ALLOWED,\n-                                              \"Attempt to declare exchange: \" + exchangeName +\n-                                              \" which begins with reserved prefix.\");\n-\n-                }\n-                catch(ExchangeExistsException e)\n-                {\n-                    exchange = e.getExistingExchange();\n-                    if(!new AMQShortString(exchange.getType()).equals(body.getType()))\n-                    {\n-                        throw new AMQConnectionException(AMQConstant.NOT_ALLOWED, \"Attempt to redeclare exchange: \"\n-                                                                                  + exchangeName + \" of type \"\n-                                                                                  + exchange.getType()\n-                                                                                  + \" to \" + body.getType() +\".\",\n-                                                         body.getClazz(), body.getMethod(),\n-                                                         body.getMajor(), body.getMinor(),null);\n-                    }\n-                }\n-                catch(NoFactoryForTypeException e)\n-                {\n-                    throw body.getConnectionException(AMQConstant.COMMAND_INVALID, \"Unknown exchange: \" + exchangeName,e);\n-                }\n-                catch (AccessControlException e)\n-                {\n-                    throw body.getConnectionException(AMQConstant.ACCESS_REFUSED, e.getMessage());\n-                }\n-                catch (UnknownConfiguredObjectException e)\n-                {\n-                    // note - since 0-8/9/9-1 can't set the alt. exchange this exception should never occur\n-                    throw body.getConnectionException(AMQConstant.NOT_FOUND, \"Unknown alternate exchange\",e);\n-                }\n-                catch (IllegalArgumentException e)\n-                {\n-                    throw body.getConnectionException(AMQConstant.COMMAND_INVALID, \"Error creating exchange\",e);\n-                }\n-            }\n-        }\n-\n-        if(!body.getNowait())\n-        {\n-            MethodRegistry methodRegistry = session.getMethodRegistry();\n-            AMQMethodBody responseBody = methodRegistry.createExchangeDeclareOkBody();\n-            channel.sync();\n-            session.writeFrame(responseBody.generateFrame(channelId));\n-        }\n-    }\n-\n-    protected boolean isDefaultExchange(final AMQShortString exchangeName)\n-    {\n-        return exchangeName == null || exchangeName.equals(AMQShortString.EMPTY_STRING);\n-    }\n-}"
        },
        {
            "sha": "1c01a24f639e1b748c8bdbaa313470023567a8a7",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/ExchangeDeleteHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 105,
            "changes": 105,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FExchangeDeleteHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FExchangeDeleteHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FExchangeDeleteHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,105 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.AMQShortString;\n-import org.apache.qpid.framing.ExchangeDeleteBody;\n-import org.apache.qpid.framing.ExchangeDeleteOkBody;\n-import org.apache.qpid.protocol.AMQConstant;\n-import org.apache.qpid.server.exchange.ExchangeImpl;\n-import org.apache.qpid.server.protocol.v0_8.AMQChannel;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-import org.apache.qpid.server.virtualhost.ExchangeIsAlternateException;\n-import org.apache.qpid.server.virtualhost.RequiredExchangeException;\n-import org.apache.qpid.server.virtualhost.VirtualHostImpl;\n-\n-import java.security.AccessControlException;\n-\n-public class ExchangeDeleteHandler implements StateAwareMethodListener<ExchangeDeleteBody>\n-{\n-    private static final ExchangeDeleteHandler _instance = new ExchangeDeleteHandler();\n-\n-    public static ExchangeDeleteHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    private ExchangeDeleteHandler()\n-    {\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, ExchangeDeleteBody body, int channelId) throws AMQException\n-    {\n-        AMQProtocolSession session = stateManager.getProtocolSession();\n-        VirtualHostImpl virtualHost = session.getVirtualHost();\n-        final AMQChannel channel = session.getChannel(channelId);\n-        if (channel == null)\n-        {\n-            throw body.getChannelNotFoundException(channelId);\n-        }\n-        channel.sync();\n-        try\n-        {\n-\n-            if(isDefaultExchange(body.getExchange()))\n-            {\n-                throw body.getConnectionException(AMQConstant.NOT_ALLOWED, \"Default Exchange cannot be deleted\");\n-            }\n-\n-            final String exchangeName = body.getExchange().toString();\n-\n-            final ExchangeImpl exchange = virtualHost.getExchange(exchangeName);\n-            if(exchange == null)\n-            {\n-                throw body.getChannelException(AMQConstant.NOT_FOUND, \"No such exchange: \" + body.getExchange());\n-            }\n-\n-            virtualHost.removeExchange(exchange, !body.getIfUnused());\n-\n-            ExchangeDeleteOkBody responseBody = session.getMethodRegistry().createExchangeDeleteOkBody();\n-\n-            session.writeFrame(responseBody.generateFrame(channelId));\n-        }\n-\n-        catch (ExchangeIsAlternateException e)\n-        {\n-            throw body.getChannelException(AMQConstant.NOT_ALLOWED, \"Exchange in use as an alternate exchange\");\n-\n-        }\n-        catch (RequiredExchangeException e)\n-        {\n-            throw body.getChannelException(AMQConstant.NOT_ALLOWED, \"Exchange '\"+body.getExchange()+\"' cannot be deleted\");\n-        }\n-        catch (AccessControlException e)\n-        {\n-            throw body.getConnectionException(AMQConstant.ACCESS_REFUSED, e.getMessage());\n-        }\n-    }\n-\n-\n-    protected boolean isDefaultExchange(final AMQShortString exchangeName)\n-    {\n-        return exchangeName == null || exchangeName.equals(AMQShortString.EMPTY_STRING);\n-    }\n-}"
        },
        {
            "sha": "6ff511ea30c0376ce64ccc07f43c23637fadb731",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/OnCurrentThreadExecutor.java",
            "status": "removed",
            "additions": 0,
            "deletions": 34,
            "changes": 34,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FOnCurrentThreadExecutor.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FOnCurrentThreadExecutor.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FOnCurrentThreadExecutor.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,34 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import java.util.concurrent.Executor;\n-\n-/**\n- * An executor that executes the task on the current thread.\n- */\n-public class OnCurrentThreadExecutor implements Executor\n-{\n-    public void execute(Runnable command)\n-    {\n-        command.run();\n-    }\n-}"
        },
        {
            "sha": "0140d2ec7ecdffb9473c802375b1d7fdf7f935a7",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/QueueBindHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 157,
            "changes": 157,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FQueueBindHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FQueueBindHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FQueueBindHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,157 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import java.security.AccessControlException;\n-import java.util.Map;\n-\n-import org.apache.log4j.Logger;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.exchange.ExchangeDefaults;\n-import org.apache.qpid.framing.AMQMethodBody;\n-import org.apache.qpid.framing.AMQShortString;\n-import org.apache.qpid.framing.FieldTable;\n-import org.apache.qpid.framing.MethodRegistry;\n-import org.apache.qpid.framing.QueueBindBody;\n-import org.apache.qpid.protocol.AMQConstant;\n-import org.apache.qpid.server.exchange.ExchangeImpl;\n-import org.apache.qpid.server.protocol.v0_8.AMQChannel;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-import org.apache.qpid.server.queue.AMQQueue;\n-import org.apache.qpid.server.virtualhost.VirtualHostImpl;\n-\n-public class QueueBindHandler implements StateAwareMethodListener<QueueBindBody>\n-{\n-    private static final Logger _log = Logger.getLogger(QueueBindHandler.class);\n-\n-    private static final QueueBindHandler _instance = new QueueBindHandler();\n-\n-    public static QueueBindHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    private QueueBindHandler()\n-    {\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, QueueBindBody body, int channelId) throws AMQException\n-    {\n-        AMQProtocolSession protocolConnection = stateManager.getProtocolSession();\n-        VirtualHostImpl virtualHost = protocolConnection.getVirtualHost();\n-        AMQChannel channel = protocolConnection.getChannel(channelId);\n-\n-        if (channel == null)\n-        {\n-            throw body.getChannelNotFoundException(channelId);\n-        }\n-\n-        final AMQQueue queue;\n-        final AMQShortString routingKey;\n-\n-        final AMQShortString queueName = body.getQueue();\n-\n-        if (queueName == null)\n-        {\n-\n-            queue = channel.getDefaultQueue();\n-\n-            if (queue == null)\n-            {\n-                throw body.getChannelException(AMQConstant.NOT_FOUND, \"No default queue defined on channel and queue was null\");\n-            }\n-\n-            if (body.getRoutingKey() == null)\n-            {\n-                routingKey = AMQShortString.valueOf(queue.getName());\n-            }\n-            else\n-            {\n-                routingKey = body.getRoutingKey().intern();\n-            }\n-        }\n-        else\n-        {\n-            queue = virtualHost.getQueue(queueName.toString());\n-            routingKey = body.getRoutingKey() == null ? AMQShortString.EMPTY_STRING : body.getRoutingKey().intern();\n-        }\n-\n-        if (queue == null)\n-        {\n-            throw body.getChannelException(AMQConstant.NOT_FOUND, \"Queue \" + queueName + \" does not exist.\");\n-        }\n-\n-        if(isDefaultExchange(body.getExchange()))\n-        {\n-            throw body.getConnectionException(AMQConstant.NOT_ALLOWED, \"Cannot bind the queue \" + queueName + \" to the default exchange\");\n-        }\n-\n-        final String exchangeName = body.getExchange().toString();\n-\n-        final ExchangeImpl exch = virtualHost.getExchange(exchangeName);\n-        if (exch == null)\n-        {\n-            throw body.getChannelException(AMQConstant.NOT_FOUND, \"Exchange \" + exchangeName + \" does not exist.\");\n-        }\n-\n-\n-        try\n-        {\n-\n-            Map<String,Object> arguments = FieldTable.convertToMap(body.getArguments());\n-            String bindingKey = String.valueOf(routingKey);\n-\n-            if (!exch.isBound(bindingKey, arguments, queue))\n-            {\n-\n-                if(!exch.addBinding(bindingKey, queue, arguments) && ExchangeDefaults.TOPIC_EXCHANGE_CLASS.equals(exch.getType()))\n-                {\n-                    exch.replaceBinding(bindingKey, queue, arguments);\n-                }\n-            }\n-        }\n-        catch (AccessControlException e)\n-        {\n-            throw body.getConnectionException(AMQConstant.ACCESS_REFUSED, e.getMessage());\n-        }\n-\n-        if (_log.isInfoEnabled())\n-        {\n-            _log.info(\"Binding queue \" + queue + \" to exchange \" + exch + \" with routing key \" + routingKey);\n-        }\n-        if (!body.getNowait())\n-        {\n-            channel.sync();\n-            MethodRegistry methodRegistry = protocolConnection.getMethodRegistry();\n-            AMQMethodBody responseBody = methodRegistry.createQueueBindOkBody();\n-            protocolConnection.writeFrame(responseBody.generateFrame(channelId));\n-\n-        }\n-    }\n-\n-    protected boolean isDefaultExchange(final AMQShortString exchangeName)\n-    {\n-        return exchangeName == null || exchangeName.equals(AMQShortString.EMPTY_STRING);\n-    }\n-}"
        },
        {
            "sha": "ef8d01d89fe4246f1fd8f5e472e1481cf4e1d661",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/QueueDeclareHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 221,
            "changes": 221,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FQueueDeclareHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FQueueDeclareHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FQueueDeclareHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,221 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import java.security.AccessControlException;\n-import java.util.Map;\n-import java.util.UUID;\n-\n-import org.apache.log4j.Logger;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.AMQShortString;\n-import org.apache.qpid.framing.FieldTable;\n-import org.apache.qpid.framing.MethodRegistry;\n-import org.apache.qpid.framing.QueueDeclareBody;\n-import org.apache.qpid.framing.QueueDeclareOkBody;\n-import org.apache.qpid.protocol.AMQConstant;\n-import org.apache.qpid.server.model.ExclusivityPolicy;\n-import org.apache.qpid.server.model.LifetimePolicy;\n-import org.apache.qpid.server.model.Queue;\n-import org.apache.qpid.server.protocol.AMQSessionModel;\n-import org.apache.qpid.server.protocol.v0_8.AMQChannel;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-import org.apache.qpid.server.queue.AMQQueue;\n-import org.apache.qpid.server.queue.QueueArgumentsConverter;\n-import org.apache.qpid.server.virtualhost.QueueExistsException;\n-import org.apache.qpid.server.virtualhost.VirtualHostImpl;\n-\n-public class QueueDeclareHandler implements StateAwareMethodListener<QueueDeclareBody>\n-{\n-    private static final Logger _logger = Logger.getLogger(QueueDeclareHandler.class);\n-\n-    private static final QueueDeclareHandler _instance = new QueueDeclareHandler();\n-\n-    public static QueueDeclareHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, QueueDeclareBody body, int channelId) throws AMQException\n-    {\n-        final AMQProtocolSession protocolConnection = stateManager.getProtocolSession();\n-        final AMQSessionModel session = protocolConnection.getChannel(channelId);\n-        VirtualHostImpl virtualHost = protocolConnection.getVirtualHost();\n-\n-        final AMQShortString queueName;\n-\n-        // if we aren't given a queue name, we create one which we return to the client\n-        if ((body.getQueue() == null) || (body.getQueue().length() == 0))\n-        {\n-            queueName = createName();\n-        }\n-        else\n-        {\n-            queueName = body.getQueue().intern();\n-        }\n-\n-        AMQQueue queue;\n-\n-        //TODO: do we need to check that the queue already exists with exactly the same \"configuration\"?\n-\n-        AMQChannel channel = protocolConnection.getChannel(channelId);\n-\n-        if (channel == null)\n-        {\n-            throw body.getChannelNotFoundException(channelId);\n-        }\n-\n-        if(body.getPassive())\n-        {\n-            queue = virtualHost.getQueue(queueName.toString());\n-            if (queue == null)\n-            {\n-                String msg = \"Queue: \" + queueName + \" not found on VirtualHost(\" + virtualHost + \").\";\n-                throw body.getChannelException(AMQConstant.NOT_FOUND, msg);\n-            }\n-            else\n-            {\n-                if (!queue.verifySessionAccess(channel))\n-                {\n-                    throw body.getConnectionException(AMQConstant.NOT_ALLOWED,\n-                                                      \"Queue \" + queue.getName() + \" is exclusive, but not created on this Connection.\");\n-                }\n-\n-                //set this as the default queue on the channel:\n-                channel.setDefaultQueue(queue);\n-            }\n-        }\n-        else\n-        {\n-\n-            try\n-            {\n-\n-                queue = createQueue(channel, queueName, body, virtualHost, protocolConnection);\n-\n-            }\n-            catch(QueueExistsException qe)\n-            {\n-\n-                queue = qe.getExistingQueue();\n-\n-                if (!queue.verifySessionAccess(channel))\n-                {\n-                    throw body.getConnectionException(AMQConstant.NOT_ALLOWED,\n-                                                      \"Queue \" + queue.getName() + \" is exclusive, but not created on this Connection.\");\n-                }\n-                else if(queue.isExclusive() != body.getExclusive())\n-                {\n-\n-                    throw body.getChannelException(AMQConstant.ALREADY_EXISTS,\n-                            \"Cannot re-declare queue '\" + queue.getName() + \"' with different exclusivity (was: \"\n-                            + queue.isExclusive() + \" requested \" + body.getExclusive() + \")\");\n-                }\n-                else if((body.getAutoDelete() && queue.getLifetimePolicy() != LifetimePolicy.DELETE_ON_NO_OUTBOUND_LINKS)\n-                    || (!body.getAutoDelete() && queue.getLifetimePolicy() != ((body.getExclusive() && !body.getDurable()) ? LifetimePolicy.DELETE_ON_CONNECTION_CLOSE : LifetimePolicy.PERMANENT)))\n-                {\n-                    throw body.getChannelException(AMQConstant.ALREADY_EXISTS,\n-                                                      \"Cannot re-declare queue '\" + queue.getName() + \"' with different lifetime policy (was: \"\n-                                                        + queue.getLifetimePolicy() + \" requested autodelete: \" + body.getAutoDelete() + \")\");\n-                }\n-                else if(queue.isDurable() != body.getDurable())\n-                {\n-                    throw body.getChannelException(AMQConstant.ALREADY_EXISTS,\n-                                                      \"Cannot re-declare queue '\" + queue.getName() + \"' with different durability (was: \"\n-                                                        + queue.isDurable() + \" requested \" + body.getDurable() + \")\");\n-                }\n-\n-            }\n-            catch (AccessControlException e)\n-            {\n-                throw body.getConnectionException(AMQConstant.ACCESS_REFUSED, e.getMessage());\n-            }\n-\n-            //set this as the default queue on the channel:\n-            channel.setDefaultQueue(queue);\n-        }\n-\n-        if (!body.getNowait())\n-        {\n-            channel.sync();\n-            MethodRegistry methodRegistry = protocolConnection.getMethodRegistry();\n-            QueueDeclareOkBody responseBody =\n-                    methodRegistry.createQueueDeclareOkBody(queueName,\n-                                                            queue.getQueueDepthMessages(),\n-                                                            queue.getConsumerCount());\n-            protocolConnection.writeFrame(responseBody.generateFrame(channelId));\n-\n-            _logger.info(\"Queue \" + queueName + \" declared successfully\");\n-        }\n-    }\n-\n-    protected AMQShortString createName()\n-    {\n-        return new AMQShortString(\"tmp_\" + UUID.randomUUID());\n-    }\n-\n-    protected AMQQueue createQueue(final AMQChannel channel, final AMQShortString queueName,\n-                                   QueueDeclareBody body,\n-                                   final VirtualHostImpl virtualHost,\n-                                   final AMQProtocolSession session)\n-            throws AMQException, QueueExistsException\n-    {\n-\n-        final boolean durable = body.getDurable();\n-        final boolean autoDelete = body.getAutoDelete();\n-        final boolean exclusive = body.getExclusive();\n-\n-\n-        Map<String, Object> attributes =\n-                QueueArgumentsConverter.convertWireArgsToModel(FieldTable.convertToMap(body.getArguments()));\n-        final String queueNameString = AMQShortString.toString(queueName);\n-        attributes.put(Queue.NAME, queueNameString);\n-        attributes.put(Queue.ID, UUID.randomUUID());\n-        attributes.put(Queue.DURABLE, durable);\n-\n-        LifetimePolicy lifetimePolicy;\n-        ExclusivityPolicy exclusivityPolicy;\n-\n-        if(exclusive)\n-        {\n-            lifetimePolicy = autoDelete\n-                    ? LifetimePolicy.DELETE_ON_NO_OUTBOUND_LINKS\n-                    : durable ? LifetimePolicy.PERMANENT : LifetimePolicy.DELETE_ON_CONNECTION_CLOSE;\n-            exclusivityPolicy = durable ? ExclusivityPolicy.CONTAINER : ExclusivityPolicy.CONNECTION;\n-        }\n-        else\n-        {\n-            lifetimePolicy = autoDelete ? LifetimePolicy.DELETE_ON_NO_OUTBOUND_LINKS : LifetimePolicy.PERMANENT;\n-            exclusivityPolicy = ExclusivityPolicy.NONE;\n-        }\n-\n-        attributes.put(Queue.EXCLUSIVE, exclusivityPolicy);\n-        attributes.put(Queue.LIFETIME_POLICY, lifetimePolicy);\n-\n-\n-        final AMQQueue queue = virtualHost.createQueue(attributes);\n-\n-        return queue;\n-    }\n-}"
        },
        {
            "sha": "84efcb68b8ceed4517a1bc9c01529bd53725ae2f",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/QueueDeleteHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 128,
            "changes": 128,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FQueueDeleteHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FQueueDeleteHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FQueueDeleteHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,128 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.MethodRegistry;\n-import org.apache.qpid.framing.QueueDeleteBody;\n-import org.apache.qpid.framing.QueueDeleteOkBody;\n-import org.apache.qpid.protocol.AMQConstant;\n-import org.apache.qpid.server.protocol.v0_8.AMQChannel;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.queue.AMQQueue;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-import org.apache.qpid.server.store.DurableConfigurationStore;\n-import org.apache.qpid.server.virtualhost.VirtualHostImpl;\n-\n-import java.security.AccessControlException;\n-\n-public class QueueDeleteHandler implements StateAwareMethodListener<QueueDeleteBody>\n-{\n-    private static final QueueDeleteHandler _instance = new QueueDeleteHandler();\n-\n-    public static QueueDeleteHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    private final boolean _failIfNotFound;\n-\n-    public QueueDeleteHandler()\n-    {\n-        this(true);\n-    }\n-\n-    public QueueDeleteHandler(boolean failIfNotFound)\n-    {\n-        _failIfNotFound = failIfNotFound;\n-\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, QueueDeleteBody body, int channelId) throws AMQException\n-    {\n-        AMQProtocolSession protocolConnection = stateManager.getProtocolSession();\n-        VirtualHostImpl virtualHost = protocolConnection.getVirtualHost();\n-        DurableConfigurationStore store = virtualHost.getDurableConfigurationStore();\n-\n-\n-        AMQChannel channel = protocolConnection.getChannel(channelId);\n-\n-        if (channel == null)\n-        {\n-            throw body.getChannelNotFoundException(channelId);\n-        }\n-        channel.sync();\n-        AMQQueue queue;\n-        if (body.getQueue() == null)\n-        {\n-\n-            //get the default queue on the channel:\n-            queue = channel.getDefaultQueue();\n-        }\n-        else\n-        {\n-            queue = virtualHost.getQueue(body.getQueue().toString());\n-        }\n-\n-        if (queue == null)\n-        {\n-            if (_failIfNotFound)\n-            {\n-                throw body.getChannelException(AMQConstant.NOT_FOUND, \"Queue \" + body.getQueue() + \" does not exist.\");\n-            }\n-        }\n-        else\n-        {\n-            if (body.getIfEmpty() && !queue.isEmpty())\n-            {\n-                throw body.getChannelException(AMQConstant.IN_USE, \"Queue: \" + body.getQueue() + \" is not empty.\");\n-            }\n-            else if (body.getIfUnused() && !queue.isUnused())\n-            {\n-                // TODO - Error code\n-                throw body.getChannelException(AMQConstant.IN_USE, \"Queue: \" + body.getQueue() + \" is still used.\");\n-            }\n-            else\n-            {\n-                if (!queue.verifySessionAccess(channel))\n-                {\n-                    throw body.getConnectionException(AMQConstant.NOT_ALLOWED,\n-                                                      \"Queue \" + queue.getName() + \" is exclusive, but not created on this Connection.\");\n-                }\n-\n-                int purged = 0;\n-                try\n-                {\n-                    purged = virtualHost.removeQueue(queue);\n-                }\n-                catch (AccessControlException e)\n-                {\n-                    throw body.getConnectionException(AMQConstant.ACCESS_REFUSED, e.getMessage());\n-                }\n-\n-                MethodRegistry methodRegistry = protocolConnection.getMethodRegistry();\n-                QueueDeleteOkBody responseBody = methodRegistry.createQueueDeleteOkBody(purged);\n-                protocolConnection.writeFrame(responseBody.generateFrame(channelId));\n-            }\n-        }\n-    }\n-}"
        },
        {
            "sha": "68ecf0324c8a3d5afb35fa9c10a029d4f56d4af7",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/QueuePurgeHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 125,
            "changes": 125,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FQueuePurgeHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FQueuePurgeHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FQueuePurgeHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,125 +0,0 @@\n-/*\n- *  Licensed to the Apache Software Foundation (ASF) under one\n- *  or more contributor license agreements.  See the NOTICE file\n- *  distributed with this work for additional information\n- *  regarding copyright ownership.  The ASF licenses this file\n- *  to you under the Apache License, Version 2.0 (the\n- *  \"License\"); you may not use this file except in compliance\n- *  with the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing,\n- *  software distributed under the License is distributed on an\n- *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- *  KIND, either express or implied.  See the License for the\n- *  specific language governing permissions and limitations\n- *  under the License.\n- *\n- *\n- */\n-\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.AMQMethodBody;\n-import org.apache.qpid.framing.MethodRegistry;\n-import org.apache.qpid.framing.QueuePurgeBody;\n-import org.apache.qpid.protocol.AMQConstant;\n-import org.apache.qpid.server.protocol.v0_8.AMQChannel;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.queue.AMQQueue;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-import org.apache.qpid.server.virtualhost.VirtualHostImpl;\n-\n-import java.security.AccessControlException;\n-\n-public class QueuePurgeHandler implements StateAwareMethodListener<QueuePurgeBody>\n-{\n-    private static final QueuePurgeHandler _instance = new QueuePurgeHandler();\n-\n-    public static QueuePurgeHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    private final boolean _failIfNotFound;\n-\n-    public QueuePurgeHandler()\n-    {\n-        this(true);\n-    }\n-\n-    public QueuePurgeHandler(boolean failIfNotFound)\n-    {\n-        _failIfNotFound = failIfNotFound;\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, QueuePurgeBody body, int channelId) throws AMQException\n-    {\n-        AMQProtocolSession protocolConnection = stateManager.getProtocolSession();\n-        VirtualHostImpl virtualHost = protocolConnection.getVirtualHost();\n-\n-        AMQChannel channel = protocolConnection.getChannel(channelId);\n-        if (channel == null)\n-        {\n-            throw body.getChannelNotFoundException(channelId);\n-        }\n-        AMQQueue queue;\n-        if(body.getQueue() == null)\n-        {\n-\n-           //get the default queue on the channel:\n-           queue = channel.getDefaultQueue();\n-\n-            if(queue == null)\n-            {\n-                if(_failIfNotFound)\n-                {\n-                    throw body.getConnectionException(AMQConstant.NOT_ALLOWED,\"No queue specified.\");\n-                }\n-            }\n-        }\n-        else\n-        {\n-            queue = virtualHost.getQueue(body.getQueue().toString());\n-        }\n-\n-        if(queue == null)\n-        {\n-            if(_failIfNotFound)\n-            {\n-                throw body.getChannelException(AMQConstant.NOT_FOUND, \"Queue \" + body.getQueue() + \" does not exist.\");\n-            }\n-        }\n-        else\n-        {\n-                if (!queue.verifySessionAccess(channel))\n-                {\n-                    throw body.getConnectionException(AMQConstant.NOT_ALLOWED,\n-                                                      \"Queue is exclusive, but not created on this Connection.\");\n-                }\n-\n-            long purged = 0;\n-            try\n-            {\n-                purged = queue.clearQueue();\n-            }\n-            catch (AccessControlException e)\n-            {\n-                throw body.getConnectionException(AMQConstant.ACCESS_REFUSED, e.getMessage());\n-            }\n-\n-\n-            if(!body.getNowait())\n-                {\n-                    channel.sync();\n-                    MethodRegistry methodRegistry = protocolConnection.getMethodRegistry();\n-                    AMQMethodBody responseBody = methodRegistry.createQueuePurgeOkBody(purged);\n-                    protocolConnection.writeFrame(responseBody.generateFrame(channelId));\n-\n-                }\n-        }\n-    }\n-}"
        },
        {
            "sha": "4e2d1bc8a218d349c5e39ab67054042f0d96a28a",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/QueueUnbindHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 154,
            "changes": 154,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FQueueUnbindHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FQueueUnbindHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FQueueUnbindHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,154 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import org.apache.log4j.Logger;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.AMQMethodBody;\n-import org.apache.qpid.framing.AMQShortString;\n-import org.apache.qpid.framing.MethodRegistry;\n-import org.apache.qpid.framing.QueueUnbindBody;\n-import org.apache.qpid.framing.amqp_0_9.MethodRegistry_0_9;\n-import org.apache.qpid.framing.amqp_0_91.MethodRegistry_0_91;\n-import org.apache.qpid.protocol.AMQConstant;\n-import org.apache.qpid.server.exchange.ExchangeImpl;\n-import org.apache.qpid.server.protocol.v0_8.AMQChannel;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.queue.AMQQueue;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-import org.apache.qpid.server.virtualhost.VirtualHostImpl;\n-\n-import java.security.AccessControlException;\n-\n-public class QueueUnbindHandler implements StateAwareMethodListener<QueueUnbindBody>\n-{\n-    private static final Logger _log = Logger.getLogger(QueueUnbindHandler.class);\n-\n-    private static final QueueUnbindHandler _instance = new QueueUnbindHandler();\n-\n-    public static QueueUnbindHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    private QueueUnbindHandler()\n-    {\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, QueueUnbindBody body, int channelId) throws AMQException\n-    {\n-        AMQProtocolSession session = stateManager.getProtocolSession();\n-        VirtualHostImpl virtualHost = session.getVirtualHost();\n-\n-        final AMQQueue queue;\n-        final AMQShortString routingKey;\n-\n-\n-        AMQChannel channel = session.getChannel(channelId);\n-        if (channel == null)\n-        {\n-            throw body.getChannelNotFoundException(channelId);\n-        }\n-\n-        if (body.getQueue() == null)\n-        {\n-\n-            queue = channel.getDefaultQueue();\n-\n-            if (queue == null)\n-            {\n-                throw body.getChannelException(AMQConstant.NOT_FOUND, \"No default queue defined on channel and queue was null\");\n-            }\n-\n-            routingKey = body.getRoutingKey() == null ? null : body.getRoutingKey().intern(false);\n-\n-        }\n-        else\n-        {\n-            queue = virtualHost.getQueue(body.getQueue().toString());\n-            routingKey = body.getRoutingKey() == null ? null : body.getRoutingKey().intern(false);\n-        }\n-\n-        if (queue == null)\n-        {\n-            throw body.getChannelException(AMQConstant.NOT_FOUND, \"Queue \" + body.getQueue() + \" does not exist.\");\n-        }\n-\n-        if(isDefaultExchange(body.getExchange()))\n-        {\n-            throw body.getConnectionException(AMQConstant.NOT_ALLOWED, \"Cannot unbind the queue \" + queue.getName() + \" from the default exchange\");\n-        }\n-\n-        final ExchangeImpl exch = virtualHost.getExchange(body.getExchange() == null ? null : body.getExchange().toString());\n-        if (exch == null)\n-        {\n-            throw body.getChannelException(AMQConstant.NOT_FOUND, \"Exchange \" + body.getExchange() + \" does not exist.\");\n-        }\n-\n-        if(!exch.hasBinding(String.valueOf(routingKey), queue))\n-        {\n-            throw body.getChannelException(AMQConstant.NOT_FOUND,\"No such binding\");\n-        }\n-        else\n-        {\n-            try\n-            {\n-                exch.deleteBinding(String.valueOf(routingKey), queue);\n-            }\n-            catch (AccessControlException e)\n-            {\n-                throw body.getConnectionException(AMQConstant.ACCESS_REFUSED, e.getMessage());\n-            }\n-        }\n-\n-\n-        if (_log.isInfoEnabled())\n-        {\n-            _log.info(\"Binding queue \" + queue + \" to exchange \" + exch + \" with routing key \" + routingKey);\n-        }\n-\n-        final MethodRegistry registry = session.getMethodRegistry();\n-        final AMQMethodBody responseBody;\n-        if (registry instanceof MethodRegistry_0_9)\n-        {\n-            responseBody = ((MethodRegistry_0_9)registry).createQueueUnbindOkBody();\n-        }\n-        else if (registry instanceof MethodRegistry_0_91)\n-        {\n-            responseBody = ((MethodRegistry_0_91)registry).createQueueUnbindOkBody();\n-        }\n-        else\n-        {\n-            // 0-8 does not support QueueUnbind\n-            throw new AMQException(AMQConstant.COMMAND_INVALID, \"QueueUnbind not present in AMQP version: \" + session.getProtocolVersion(), null);\n-        }\n-        channel.sync();\n-        session.writeFrame(responseBody.generateFrame(channelId));\n-    }\n-\n-    protected boolean isDefaultExchange(final AMQShortString exchangeName)\n-    {\n-        return exchangeName == null || exchangeName.equals(AMQShortString.EMPTY_STRING);\n-    }\n-\n-}"
        },
        {
            "sha": "43e97c0cb6d77db3b0014b562824638abcd329f9",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/ServerMethodDispatcherImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 574,
            "changes": 574,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FServerMethodDispatcherImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FServerMethodDispatcherImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FServerMethodDispatcherImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,574 +0,0 @@\n-/*\r\n- *\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- *\r\n- */\r\n-package org.apache.qpid.server.protocol.v0_8.handler;\r\n-\r\n-import org.apache.qpid.AMQException;\r\n-import org.apache.qpid.framing.*;\r\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-\r\n-public class ServerMethodDispatcherImpl implements MethodDispatcher\r\n-{\r\n-    private final AMQStateManager _stateManager;\r\n-\r\n-    private static interface DispatcherFactory\r\n-        {\r\n-            public MethodDispatcher createMethodDispatcher(AMQStateManager stateManager);\r\n-        }\r\n-\r\n-        private static final Map<ProtocolVersion, DispatcherFactory> _dispatcherFactories =\r\n-                new HashMap<ProtocolVersion, DispatcherFactory>();\r\n-\r\n-\r\n-    static\r\n-        {\r\n-            _dispatcherFactories.put(ProtocolVersion.v8_0,\r\n-                                     new DispatcherFactory()\r\n-                                     {\r\n-                                         public MethodDispatcher createMethodDispatcher(AMQStateManager stateManager)\r\n-                                         {\r\n-                                             return new ServerMethodDispatcherImpl_8_0(stateManager);\r\n-                                         }\r\n-                                     });\r\n-\r\n-            _dispatcherFactories.put(ProtocolVersion.v0_9,\r\n-                                     new DispatcherFactory()\r\n-                                     {\r\n-                                         public MethodDispatcher createMethodDispatcher(AMQStateManager stateManager)\r\n-                                         {\r\n-                                             return new ServerMethodDispatcherImpl_0_9(stateManager);\r\n-                                         }\r\n-                                     });\r\n-            _dispatcherFactories.put(ProtocolVersion.v0_91,\r\n-                         new DispatcherFactory()\r\n-                         {\r\n-                             public MethodDispatcher createMethodDispatcher(AMQStateManager stateManager)\r\n-                             {\r\n-                                 return new ServerMethodDispatcherImpl_0_91(stateManager);\r\n-                             }\r\n-                         });\r\n-\r\n-        }\r\n-\r\n-\r\n-    private static final AccessRequestHandler _accessRequestHandler = AccessRequestHandler.getInstance();\r\n-    private static final ChannelCloseHandler _channelCloseHandler = ChannelCloseHandler.getInstance();\r\n-    private static final ChannelOpenHandler _channelOpenHandler = ChannelOpenHandler.getInstance();\r\n-    private static final ChannelCloseOkHandler _channelCloseOkHandler = ChannelCloseOkHandler.getInstance();\r\n-    private static final ConnectionCloseMethodHandler _connectionCloseMethodHandler = ConnectionCloseMethodHandler.getInstance();\r\n-    private static final ConnectionCloseOkMethodHandler _connectionCloseOkMethodHandler = ConnectionCloseOkMethodHandler.getInstance();\r\n-    private static final ConnectionOpenMethodHandler _connectionOpenMethodHandler = ConnectionOpenMethodHandler.getInstance();\r\n-    private static final ConnectionTuneOkMethodHandler _connectionTuneOkMethodHandler = ConnectionTuneOkMethodHandler.getInstance();\r\n-    private static final ConnectionSecureOkMethodHandler _connectionSecureOkMethodHandler = ConnectionSecureOkMethodHandler.getInstance();\r\n-    private static final ConnectionStartOkMethodHandler _connectionStartOkMethodHandler = ConnectionStartOkMethodHandler.getInstance();\r\n-    private static final ExchangeDeclareHandler _exchangeDeclareHandler = ExchangeDeclareHandler.getInstance();\r\n-    private static final ExchangeDeleteHandler _exchangeDeleteHandler = ExchangeDeleteHandler.getInstance();\r\n-    private static final ExchangeBoundHandler _exchangeBoundHandler = ExchangeBoundHandler.getInstance();\r\n-    private static final BasicAckMethodHandler _basicAckMethodHandler = BasicAckMethodHandler.getInstance();\r\n-    private static final BasicRecoverMethodHandler _basicRecoverMethodHandler = BasicRecoverMethodHandler.getInstance();\r\n-    private static final BasicConsumeMethodHandler _basicConsumeMethodHandler = BasicConsumeMethodHandler.getInstance();\r\n-    private static final BasicGetMethodHandler _basicGetMethodHandler = BasicGetMethodHandler.getInstance();\r\n-    private static final BasicCancelMethodHandler _basicCancelMethodHandler = BasicCancelMethodHandler.getInstance();\r\n-    private static final BasicPublishMethodHandler _basicPublishMethodHandler = BasicPublishMethodHandler.getInstance();\r\n-    private static final BasicQosHandler _basicQosHandler = BasicQosHandler.getInstance();\r\n-    private static final QueueBindHandler _queueBindHandler = QueueBindHandler.getInstance();\r\n-    private static final QueueDeclareHandler _queueDeclareHandler = QueueDeclareHandler.getInstance();\r\n-    private static final QueueDeleteHandler _queueDeleteHandler = QueueDeleteHandler.getInstance();\r\n-    private static final QueuePurgeHandler _queuePurgeHandler = QueuePurgeHandler.getInstance();\r\n-    private static final ChannelFlowHandler _channelFlowHandler = ChannelFlowHandler.getInstance();\r\n-    private static final TxSelectHandler _txSelectHandler = TxSelectHandler.getInstance();\r\n-    private static final TxCommitHandler _txCommitHandler = TxCommitHandler.getInstance();\r\n-    private static final TxRollbackHandler _txRollbackHandler = TxRollbackHandler.getInstance();\r\n-    private static final BasicRejectMethodHandler _basicRejectMethodHandler = BasicRejectMethodHandler.getInstance();\r\n-\r\n-\r\n-\r\n-    public static MethodDispatcher createMethodDispatcher(AMQStateManager stateManager, ProtocolVersion protocolVersion)\r\n-    {\r\n-        return _dispatcherFactories.get(protocolVersion).createMethodDispatcher(stateManager);\r\n-    }\r\n-\r\n-\r\n-    public ServerMethodDispatcherImpl(AMQStateManager stateManager)\r\n-    {\r\n-        _stateManager = stateManager;\r\n-    }\r\n-\r\n-\r\n-    protected AMQStateManager getStateManager()\r\n-    {\r\n-        return _stateManager;\r\n-    }\r\n-\r\n-\r\n-\r\n-    public boolean dispatchAccessRequest(AccessRequestBody body, int channelId) throws AMQException\r\n-    {\r\n-        _accessRequestHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-    public boolean dispatchBasicAck(BasicAckBody body, int channelId) throws AMQException\r\n-    {\r\n-        _basicAckMethodHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-    public boolean dispatchBasicCancel(BasicCancelBody body, int channelId) throws AMQException\r\n-    {\r\n-        _basicCancelMethodHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-    public boolean dispatchBasicConsume(BasicConsumeBody body, int channelId) throws AMQException\r\n-    {\r\n-        _basicConsumeMethodHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-    public boolean dispatchBasicGet(BasicGetBody body, int channelId) throws AMQException\r\n-    {\r\n-        _basicGetMethodHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-    public boolean dispatchBasicPublish(BasicPublishBody body, int channelId) throws AMQException\r\n-    {\r\n-        _basicPublishMethodHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-    public boolean dispatchBasicQos(BasicQosBody body, int channelId) throws AMQException\r\n-    {\r\n-        _basicQosHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-    public boolean dispatchBasicRecover(BasicRecoverBody body, int channelId) throws AMQException\r\n-    {\r\n-        _basicRecoverMethodHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-    public boolean dispatchBasicReject(BasicRejectBody body, int channelId) throws AMQException\r\n-    {\r\n-        _basicRejectMethodHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-    public boolean dispatchChannelOpen(ChannelOpenBody body, int channelId) throws AMQException\r\n-    {\r\n-        _channelOpenHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-\r\n-    public boolean dispatchAccessRequestOk(AccessRequestOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchBasicCancelOk(BasicCancelOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchBasicConsumeOk(BasicConsumeOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchBasicDeliver(BasicDeliverBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchBasicGetEmpty(BasicGetEmptyBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchBasicGetOk(BasicGetOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchBasicQosOk(BasicQosOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchBasicReturn(BasicReturnBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchChannelClose(ChannelCloseBody body, int channelId) throws AMQException\r\n-    {\r\n-        _channelCloseHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-\r\n-    public boolean dispatchChannelCloseOk(ChannelCloseOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        _channelCloseOkHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-\r\n-    public boolean dispatchChannelFlow(ChannelFlowBody body, int channelId) throws AMQException\r\n-    {\r\n-        _channelFlowHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-    public boolean dispatchChannelFlowOk(ChannelFlowOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchChannelOpenOk(ChannelOpenOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-\r\n-    public boolean dispatchConnectionOpen(ConnectionOpenBody body, int channelId) throws AMQException\r\n-    {\r\n-        _connectionOpenMethodHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-\r\n-    public boolean dispatchConnectionClose(ConnectionCloseBody body, int channelId) throws AMQException\r\n-    {\r\n-        _connectionCloseMethodHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-\r\n-    public boolean dispatchConnectionCloseOk(ConnectionCloseOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        _connectionCloseOkMethodHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-    public boolean dispatchConnectionOpenOk(ConnectionOpenOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchConnectionRedirect(ConnectionRedirectBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchConnectionSecure(ConnectionSecureBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchConnectionStart(ConnectionStartBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchConnectionTune(ConnectionTuneBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchDtxSelectOk(DtxSelectOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchDtxStartOk(DtxStartOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchExchangeBoundOk(ExchangeBoundOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchExchangeDeclareOk(ExchangeDeclareOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchExchangeDeleteOk(ExchangeDeleteOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchFileCancelOk(FileCancelOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchFileConsumeOk(FileConsumeOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchFileDeliver(FileDeliverBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchFileOpen(FileOpenBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchFileOpenOk(FileOpenOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchFileQosOk(FileQosOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchFileReturn(FileReturnBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchFileStage(FileStageBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchQueueBindOk(QueueBindOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchQueueDeclareOk(QueueDeclareOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchQueueDeleteOk(QueueDeleteOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchQueuePurgeOk(QueuePurgeOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchStreamCancelOk(StreamCancelOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchStreamConsumeOk(StreamConsumeOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchStreamDeliver(StreamDeliverBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchStreamQosOk(StreamQosOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchStreamReturn(StreamReturnBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchTxCommitOk(TxCommitOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchTxRollbackOk(TxRollbackOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchTxSelectOk(TxSelectOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-\r\n-    public boolean dispatchConnectionSecureOk(ConnectionSecureOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        _connectionSecureOkMethodHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-    public boolean dispatchConnectionStartOk(ConnectionStartOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        _connectionStartOkMethodHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-    public boolean dispatchConnectionTuneOk(ConnectionTuneOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        _connectionTuneOkMethodHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-    public boolean dispatchDtxSelect(DtxSelectBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchDtxStart(DtxStartBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchExchangeBound(ExchangeBoundBody body, int channelId) throws AMQException\r\n-    {\r\n-        _exchangeBoundHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-    public boolean dispatchExchangeDeclare(ExchangeDeclareBody body, int channelId) throws AMQException\r\n-    {\r\n-        _exchangeDeclareHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-    public boolean dispatchExchangeDelete(ExchangeDeleteBody body, int channelId) throws AMQException\r\n-    {\r\n-        _exchangeDeleteHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-    public boolean dispatchFileAck(FileAckBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchFileCancel(FileCancelBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchFileConsume(FileConsumeBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchFilePublish(FilePublishBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchFileQos(FileQosBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchFileReject(FileRejectBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchQueueBind(QueueBindBody body, int channelId) throws AMQException\r\n-    {\r\n-        _queueBindHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-    public boolean dispatchQueueDeclare(QueueDeclareBody body, int channelId) throws AMQException\r\n-    {\r\n-        _queueDeclareHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-    public boolean dispatchQueueDelete(QueueDeleteBody body, int channelId) throws AMQException\r\n-    {\r\n-        _queueDeleteHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-    public boolean dispatchQueuePurge(QueuePurgeBody body, int channelId) throws AMQException\r\n-    {\r\n-        _queuePurgeHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-    public boolean dispatchStreamCancel(StreamCancelBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchStreamConsume(StreamConsumeBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchStreamPublish(StreamPublishBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchStreamQos(StreamQosBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchTunnelRequest(TunnelRequestBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchTxCommit(TxCommitBody body, int channelId) throws AMQException\r\n-    {\r\n-        _txCommitHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-    public boolean dispatchTxRollback(TxRollbackBody body, int channelId) throws AMQException\r\n-    {\r\n-        _txRollbackHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-    public boolean dispatchTxSelect(TxSelectBody body, int channelId) throws AMQException\r\n-    {\r\n-        _txSelectHandler.methodReceived(_stateManager, body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-\r\n-\r\n-\r\n-}\r"
        },
        {
            "sha": "1ee6d732c256ec5dae29c20be89e4bcf9e90e0cd",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/ServerMethodDispatcherImpl_0_9.java",
            "status": "removed",
            "additions": 0,
            "deletions": 164,
            "changes": 164,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FServerMethodDispatcherImpl_0_9.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FServerMethodDispatcherImpl_0_9.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FServerMethodDispatcherImpl_0_9.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,164 +0,0 @@\n-/*\r\n- *\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- *\r\n- */\r\n-package org.apache.qpid.server.protocol.v0_8.handler;\r\n-\r\n-\r\n-import org.apache.qpid.AMQException;\r\n-import org.apache.qpid.framing.*;\r\n-import org.apache.qpid.framing.amqp_0_9.MethodDispatcher_0_9;\r\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\r\n-\r\n-\r\n-\r\n-public class ServerMethodDispatcherImpl_0_9\r\n-        extends ServerMethodDispatcherImpl\r\n-        implements MethodDispatcher_0_9\r\n-\r\n-{\r\n-\r\n-    private static final BasicRecoverSyncMethodHandler _basicRecoverSyncMethodHandler =\r\n-            BasicRecoverSyncMethodHandler.getInstance();\r\n-    private static final QueueUnbindHandler _queueUnbindHandler =\r\n-            QueueUnbindHandler.getInstance();\r\n-\r\n-\r\n-    public ServerMethodDispatcherImpl_0_9(AMQStateManager stateManager)\r\n-    {\r\n-        super(stateManager);\r\n-    }\r\n-\r\n-    public boolean dispatchBasicRecoverSync(BasicRecoverSyncBody body, int channelId) throws AMQException\r\n-    {\r\n-        _basicRecoverSyncMethodHandler.methodReceived(getStateManager(), body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-    public boolean dispatchBasicRecoverSyncOk(BasicRecoverSyncOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchChannelOk(ChannelOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchChannelPing(ChannelPingBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchChannelPong(ChannelPongBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchChannelResume(ChannelResumeBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageAppend(MessageAppendBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageCancel(MessageCancelBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageCheckpoint(MessageCheckpointBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageClose(MessageCloseBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageConsume(MessageConsumeBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageEmpty(MessageEmptyBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageGet(MessageGetBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageOffset(MessageOffsetBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageOk(MessageOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageOpen(MessageOpenBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageQos(MessageQosBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageRecover(MessageRecoverBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageReject(MessageRejectBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageResume(MessageResumeBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageTransfer(MessageTransferBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchQueueUnbindOk(QueueUnbindOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchQueueUnbind(QueueUnbindBody body, int channelId) throws AMQException\r\n-    {\r\n-        _queueUnbindHandler.methodReceived(getStateManager(),body,channelId);\r\n-        return true;\r\n-    }\r\n-}\r"
        },
        {
            "sha": "b11b9cff2bdd6090edfd1fcca0a624b9e012c17b",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/ServerMethodDispatcherImpl_0_91.java",
            "status": "removed",
            "additions": 0,
            "deletions": 168,
            "changes": 168,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FServerMethodDispatcherImpl_0_91.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FServerMethodDispatcherImpl_0_91.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FServerMethodDispatcherImpl_0_91.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,168 +0,0 @@\n-/*\r\n- *\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- *\r\n- */\r\n-package org.apache.qpid.server.protocol.v0_8.handler;\r\n-\r\n-\r\n-import org.apache.qpid.AMQException;\r\n-import org.apache.qpid.framing.*;\r\n-import org.apache.qpid.framing.amqp_0_91.MethodDispatcher_0_91;\r\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\r\n-\r\n-\r\n-public class ServerMethodDispatcherImpl_0_91\r\n-        extends ServerMethodDispatcherImpl\r\n-        implements MethodDispatcher_0_91\r\n-\r\n-{\r\n-\r\n-    private static final BasicRecoverSyncMethodHandler _basicRecoverSyncMethodHandler =\r\n-            BasicRecoverSyncMethodHandler.getInstance();\r\n-    private static final QueueUnbindHandler _queueUnbindHandler =\r\n-            QueueUnbindHandler.getInstance();\r\n-\r\n-\r\n-    public ServerMethodDispatcherImpl_0_91(AMQStateManager stateManager)\r\n-    {\r\n-        super(stateManager);\r\n-    }\r\n-\r\n-    public boolean dispatchBasicRecoverSync(BasicRecoverSyncBody body, int channelId) throws AMQException\r\n-    {\r\n-        _basicRecoverSyncMethodHandler.methodReceived(getStateManager(), body, channelId);\r\n-        return true;\r\n-    }\r\n-\r\n-    public boolean dispatchBasicRecoverSyncOk(BasicRecoverSyncOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchChannelOk(ChannelOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchChannelPing(ChannelPingBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchChannelPong(ChannelPongBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchChannelResume(ChannelResumeBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageAppend(MessageAppendBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageCancel(MessageCancelBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageCheckpoint(MessageCheckpointBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageClose(MessageCloseBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageConsume(MessageConsumeBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageEmpty(MessageEmptyBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageGet(MessageGetBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageOffset(MessageOffsetBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageOk(MessageOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageOpen(MessageOpenBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageQos(MessageQosBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageRecover(MessageRecoverBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageReject(MessageRejectBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageResume(MessageResumeBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchMessageTransfer(MessageTransferBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchBasicRecoverOk(BasicRecoverOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;  //To change body of implemented methods use File | Settings | File Templates.\r\n-    }\r\n-\r\n-    public boolean dispatchQueueUnbindOk(QueueUnbindOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchQueueUnbind(QueueUnbindBody body, int channelId) throws AMQException\r\n-    {\r\n-        _queueUnbindHandler.methodReceived(getStateManager(),body,channelId);\r\n-        return true;\r\n-    }\r\n-}\r"
        },
        {
            "sha": "f05219712ffae40525e36b8f1afcc4cf414722bf",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/ServerMethodDispatcherImpl_8_0.java",
            "status": "removed",
            "additions": 0,
            "deletions": 95,
            "changes": 95,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FServerMethodDispatcherImpl_8_0.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FServerMethodDispatcherImpl_8_0.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FServerMethodDispatcherImpl_8_0.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,95 +0,0 @@\n-/*\r\n- *\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- *\r\n- */\r\n-package org.apache.qpid.server.protocol.v0_8.handler;\r\n-\r\n-import org.apache.qpid.AMQException;\r\n-import org.apache.qpid.framing.BasicRecoverOkBody;\r\n-import org.apache.qpid.framing.ChannelAlertBody;\r\n-import org.apache.qpid.framing.TestContentBody;\r\n-import org.apache.qpid.framing.TestContentOkBody;\r\n-import org.apache.qpid.framing.TestIntegerBody;\r\n-import org.apache.qpid.framing.TestIntegerOkBody;\r\n-import org.apache.qpid.framing.TestStringBody;\r\n-import org.apache.qpid.framing.TestStringOkBody;\r\n-import org.apache.qpid.framing.TestTableBody;\r\n-import org.apache.qpid.framing.TestTableOkBody;\r\n-import org.apache.qpid.framing.amqp_8_0.MethodDispatcher_8_0;\r\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\r\n-\r\n-public class ServerMethodDispatcherImpl_8_0\r\n-        extends ServerMethodDispatcherImpl\r\n-        implements MethodDispatcher_8_0\r\n-{\r\n-    public ServerMethodDispatcherImpl_8_0(AMQStateManager stateManager)\r\n-    {\r\n-        super(stateManager);\r\n-    }\r\n-\r\n-    public boolean dispatchBasicRecoverOk(BasicRecoverOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchChannelAlert(ChannelAlertBody body, int channelId) throws AMQException\r\n-    {\r\n-        throw new UnexpectedMethodException(body);\r\n-    }\r\n-\r\n-    public boolean dispatchTestContent(TestContentBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchTestContentOk(TestContentOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchTestInteger(TestIntegerBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchTestIntegerOk(TestIntegerOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchTestString(TestStringBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchTestStringOk(TestStringOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchTestTable(TestTableBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean dispatchTestTableOk(TestTableOkBody body, int channelId) throws AMQException\r\n-    {\r\n-        return false;\r\n-    }\r\n-}\r"
        },
        {
            "sha": "b257030a59838aa1ad78c5fa7cac4436ec7217df",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/TxCommitHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 85,
            "changes": 85,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FTxCommitHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FTxCommitHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FTxCommitHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,85 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import org.apache.log4j.Logger;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.AMQMethodBody;\n-import org.apache.qpid.framing.MethodRegistry;\n-import org.apache.qpid.framing.TxCommitBody;\n-import org.apache.qpid.server.protocol.v0_8.AMQChannel;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-\n-public class TxCommitHandler implements StateAwareMethodListener<TxCommitBody>\n-{\n-    private static final Logger _log = Logger.getLogger(TxCommitHandler.class);\n-\n-    private static TxCommitHandler _instance = new TxCommitHandler();\n-\n-    public static TxCommitHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    private TxCommitHandler()\n-    {\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, TxCommitBody body, final int channelId) throws AMQException\n-    {\n-        final AMQProtocolSession session = stateManager.getProtocolSession();\n-\n-        try\n-        {\n-            if (_log.isDebugEnabled())\n-            {\n-                _log.debug(\"Commit received on channel \" + channelId);\n-            }\n-            AMQChannel channel = session.getChannel(channelId);\n-\n-            if (channel == null)\n-            {\n-                throw body.getChannelNotFoundException(channelId);\n-            }\n-            channel.commit(new Runnable()\n-            {\n-\n-                @Override\n-                public void run()\n-                {\n-                    MethodRegistry methodRegistry = session.getMethodRegistry();\n-                    AMQMethodBody responseBody = methodRegistry.createTxCommitOkBody();\n-                    session.writeFrame(responseBody.generateFrame(channelId));\n-                }\n-            }, true);\n-\n-\n-\n-        }\n-        catch (AMQException e)\n-        {\n-            throw body.getChannelException(e.getErrorCode(), \"Failed to commit: \" + e.getMessage());\n-        }\n-    }\n-}"
        },
        {
            "sha": "69ad1a0a21aa53409b59d6a008543c6d13a6ebd2",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/TxRollbackHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 85,
            "changes": 85,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FTxRollbackHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FTxRollbackHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FTxRollbackHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,85 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.AMQMethodBody;\n-import org.apache.qpid.framing.MethodRegistry;\n-import org.apache.qpid.framing.TxRollbackBody;\n-import org.apache.qpid.server.protocol.v0_8.AMQChannel;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-\n-public class TxRollbackHandler implements StateAwareMethodListener<TxRollbackBody>\n-{\n-    private static TxRollbackHandler _instance = new TxRollbackHandler();\n-\n-    public static TxRollbackHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    private TxRollbackHandler()\n-    {\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, TxRollbackBody body, final int channelId) throws AMQException\n-    {\n-        final AMQProtocolSession session = stateManager.getProtocolSession();\n-\n-        try\n-        {\n-            AMQChannel channel = session.getChannel(channelId);\n-\n-            if (channel == null)\n-            {\n-                throw body.getChannelNotFoundException(channelId);\n-            }\n-\n-\n-\n-            final MethodRegistry methodRegistry = session.getMethodRegistry();\n-            final AMQMethodBody responseBody = methodRegistry.createTxRollbackOkBody();\n-\n-            Runnable task = new Runnable()\n-            {\n-\n-                public void run()\n-                {\n-                    session.writeFrame(responseBody.generateFrame(channelId));\n-                }\n-            };\n-\n-            channel.rollback(task);\n-\n-            //Now resend all the unacknowledged messages back to the original subscribers.\n-            //(Must be done after the TxnRollback-ok response).\n-            // Why, are we not allowed to send messages back to client before the ok method?\n-            channel.resend();\n-\n-        }\n-        catch (AMQException e)\n-        {\n-            throw body.getChannelException(e.getErrorCode(), \"Failed to rollback: \" + e.getMessage());\n-        }\n-    }\n-}"
        },
        {
            "sha": "a43e1ebdabf5f1c3888c63b3903533c9e604dd7b",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/handler/TxSelectHandler.java",
            "status": "removed",
            "additions": 0,
            "deletions": 62,
            "changes": 62,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FTxSelectHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FTxSelectHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fhandler%2FTxSelectHandler.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,62 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.handler;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.MethodRegistry;\n-import org.apache.qpid.framing.TxSelectBody;\n-import org.apache.qpid.framing.TxSelectOkBody;\n-import org.apache.qpid.server.protocol.v0_8.AMQChannel;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.protocol.v0_8.state.AMQStateManager;\n-import org.apache.qpid.server.protocol.v0_8.state.StateAwareMethodListener;\n-\n-public class TxSelectHandler implements StateAwareMethodListener<TxSelectBody>\n-{\n-    private static TxSelectHandler _instance = new TxSelectHandler();\n-\n-    public static TxSelectHandler getInstance()\n-    {\n-        return _instance;\n-    }\n-\n-    private TxSelectHandler()\n-    {\n-    }\n-\n-    public void methodReceived(AMQStateManager stateManager, TxSelectBody body, int channelId) throws AMQException\n-    {\n-        AMQProtocolSession session = stateManager.getProtocolSession();\n-\n-        AMQChannel channel = session.getChannel(channelId);\n-\n-        if (channel == null)\n-        {\n-            throw body.getChannelNotFoundException(channelId);\n-        }\n-\n-        channel.setLocalTransactional();\n-\n-        MethodRegistry methodRegistry = session.getMethodRegistry();\n-        TxSelectOkBody responseBody = methodRegistry.createTxSelectOkBody();\n-        session.writeFrame(responseBody.generateFrame(channelId));\n-    }\n-}"
        },
        {
            "sha": "d4332b37ee1bb482dd0400e9fbf2d2df6687de7d",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/output/ProtocolOutputConverterRegistry.java",
            "status": "removed",
            "additions": 0,
            "deletions": 90,
            "changes": 90,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Foutput%2FProtocolOutputConverterRegistry.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Foutput%2FProtocolOutputConverterRegistry.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Foutput%2FProtocolOutputConverterRegistry.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,90 +0,0 @@\n-/*\r\n- *\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- *\r\n- */\r\n-\r\n-/*\r\n- * This file is auto-generated by Qpid Gentools v.0.1 - do not modify.\r\n- * Supported AMQP versions:\r\n- *   8-0\r\n- */\r\n-package org.apache.qpid.server.protocol.v0_8.output;\r\n-\r\n-import org.apache.qpid.framing.MethodRegistry;\r\n-import org.apache.qpid.framing.ProtocolVersion;\r\n-import org.apache.qpid.server.protocol.v0_8.output.ProtocolOutputConverter.Factory;\r\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-\r\n-public class ProtocolOutputConverterRegistry\r\n-{\r\n-\r\n-    private static final Map<ProtocolVersion, Factory> _registry =\r\n-            new HashMap<ProtocolVersion, Factory>();\r\n-\r\n-\r\n-    static\r\n-    {\r\n-        register(ProtocolVersion.v8_0);\r\n-        register(ProtocolVersion.v0_9);\r\n-        register(ProtocolVersion.v0_91);\r\n-    }\r\n-\r\n-    private ProtocolOutputConverterRegistry()\r\n-    {\r\n-    }\r\n-\r\n-    private static void register(ProtocolVersion version)\r\n-    {\r\n-\r\n-        _registry.put(version,new ConverterFactory(version));\r\n-    }\r\n-\r\n-\r\n-    public static ProtocolOutputConverter getConverter(AMQProtocolSession session)\r\n-    {\r\n-        return _registry.get(session.getProtocolVersion()).newInstance(session);\r\n-    }\r\n-\r\n-    private static class ConverterFactory implements Factory\r\n-    {\r\n-        private ProtocolVersion _protocolVersion;\r\n-        private MethodRegistry _methodRegistry;\r\n-        private int _classId;\r\n-\r\n-        public ConverterFactory(ProtocolVersion pv)\r\n-        {\r\n-            _protocolVersion = pv;\r\n-\r\n-        }\r\n-\r\n-        public synchronized ProtocolOutputConverter newInstance(AMQProtocolSession session)\r\n-        {\r\n-            if(_methodRegistry == null)\r\n-            {\r\n-\r\n-                _methodRegistry = MethodRegistry.getMethodRegistry(_protocolVersion);\r\n-\r\n-            }\r\n-            return new ProtocolOutputConverterImpl(session, _methodRegistry);\r\n-        }\r\n-    }\r\n-}\r"
        },
        {
            "sha": "ee97d5fa87f767398ca807e834ad7d0d7bb7f370",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/state/AMQState.java",
            "status": "removed",
            "additions": 0,
            "deletions": 36,
            "changes": 36,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fstate%2FAMQState.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fstate%2FAMQState.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fstate%2FAMQState.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,36 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.state;\n-\n-/**\n- * States used in the AMQ protocol. Used by the finite state machine to determine\n- * valid responses.\n- */\n-public enum AMQState\n-{\n-    CONNECTION_NOT_STARTED,\n-    CONNECTION_NOT_AUTH,\n-    CONNECTION_NOT_TUNED,\n-    CONNECTION_NOT_OPENED,\n-    CONNECTION_OPEN,\n-    CONNECTION_CLOSING,\n-    CONNECTION_CLOSED\n-}"
        },
        {
            "sha": "3c1f1dedc32722b653bd5e892908d7b003a9ecce",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/state/AMQStateManager.java",
            "status": "removed",
            "additions": 0,
            "deletions": 153,
            "changes": 153,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fstate%2FAMQStateManager.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fstate%2FAMQStateManager.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fstate%2FAMQStateManager.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,153 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.state;\n-\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n-\n-import javax.security.auth.Subject;\n-\n-import org.apache.log4j.Logger;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.AMQMethodBody;\n-import org.apache.qpid.framing.ChannelCloseBody;\n-import org.apache.qpid.framing.ChannelCloseOkBody;\n-import org.apache.qpid.framing.ChannelOpenBody;\n-import org.apache.qpid.framing.MethodDispatcher;\n-import org.apache.qpid.protocol.AMQConstant;\n-import org.apache.qpid.protocol.AMQMethodEvent;\n-import org.apache.qpid.protocol.AMQMethodListener;\n-import org.apache.qpid.server.model.Broker;\n-import org.apache.qpid.server.protocol.v0_8.AMQChannel;\n-import org.apache.qpid.server.protocol.v0_8.AMQProtocolSession;\n-import org.apache.qpid.server.security.SubjectCreator;\n-import org.apache.qpid.server.util.ServerScopedRuntimeException;\n-\n-/**\n- * The state manager is responsible for managing the state of the protocol session.\n- * <p>\n- * For each AMQProtocolHandler there is a separate state manager.\n- */\n-public class AMQStateManager implements AMQMethodListener\n-{\n-    private static final Logger _logger = Logger.getLogger(AMQStateManager.class);\n-\n-    private final Broker<?> _broker;\n-    private final AMQProtocolSession _protocolSession;\n-    /** The current state */\n-    private AMQState _currentState;\n-\n-    public AMQStateManager(Broker<?> broker, AMQProtocolSession protocolSession)\n-    {\n-        _broker = broker;\n-        _protocolSession = protocolSession;\n-        _currentState = AMQState.CONNECTION_NOT_STARTED;\n-\n-    }\n-\n-    /**\n-     * Get the Broker instance\n-     *\n-     * @return the Broker\n-     */\n-    public Broker<?> getBroker()\n-    {\n-        return _broker;\n-    }\n-\n-    public void changeState(AMQState newState)\n-    {\n-        _logger.debug(\"State changing to \" + newState + \" from old state \" + _currentState);\n-        final AMQState oldState = _currentState;\n-        _currentState = newState;\n-\n-    }\n-\n-    public void error(Exception e)\n-    {\n-        _logger.error(\"State manager received error notification[Current State:\" + _currentState + \"]: \" + e, e);\n-    }\n-\n-    public <B extends AMQMethodBody> boolean methodReceived(AMQMethodEvent<B> evt) throws AMQException\n-    {\n-        final MethodDispatcher dispatcher = _protocolSession.getMethodDispatcher();\n-\n-        final int channelId = evt.getChannelId();\n-        final B body = evt.getMethod();\n-\n-        final AMQChannel channel = _protocolSession.getChannel(channelId);\n-        if(channelId != 0 && channel == null)\n-        {\n-\n-            if(! ((body instanceof ChannelOpenBody)\n-                  || (body instanceof ChannelCloseOkBody)\n-                  || (body instanceof ChannelCloseBody)))\n-            {\n-                throw body.getConnectionException(AMQConstant.CHANNEL_ERROR, \"channel is closed won't process:\" + body);\n-            }\n-\n-        }\n-        if(channel == null)\n-        {\n-            return body.execute(dispatcher, channelId);\n-        }\n-        else\n-        {\n-            try\n-            {\n-                return Subject.doAs(channel.getSubject(), new PrivilegedExceptionAction<Boolean>()\n-                {\n-                    @Override\n-                    public Boolean run() throws AMQException\n-                    {\n-                        return body.execute(dispatcher, channelId);\n-                    }\n-                });\n-            }\n-            catch (PrivilegedActionException e)\n-            {\n-                if(e.getCause() instanceof AMQException)\n-                {\n-                    throw (AMQException) e.getCause();\n-                }\n-                else\n-                {\n-                    throw new ServerScopedRuntimeException(e.getCause());\n-                }\n-            }\n-\n-\n-        }\n-\n-    }\n-\n-    public AMQProtocolSession getProtocolSession()\n-    {\n-        return _protocolSession;\n-    }\n-\n-\n-    public SubjectCreator getSubjectCreator()\n-    {\n-        return _broker.getSubjectCreator(getProtocolSession().getLocalAddress(), getProtocolSession().getTransport().isSecure());\n-    }\n-}"
        },
        {
            "sha": "63ab23919d6ec46a418f41216dcb0bba742046e9",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/state/StateAwareMethodListener.java",
            "status": "removed",
            "additions": 0,
            "deletions": 34,
            "changes": 34,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fstate%2FStateAwareMethodListener.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fstate%2FStateAwareMethodListener.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fstate%2FStateAwareMethodListener.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,34 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.state;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.AMQMethodBody;\n-\n-/**\n- * A frame listener that is informed of the protocol state when invoked and has\n- * the opportunity to update state.\n- *\n- */\n-public interface StateAwareMethodListener<B extends AMQMethodBody>\n-{\n-    void methodReceived(AMQStateManager stateManager,  B evt, int channelId) throws AMQException;\n-}"
        },
        {
            "sha": "e065ae0d42f62e569dbcd6bb852d8e4ac3f151ad",
            "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/state/StateListener.java",
            "status": "removed",
            "additions": 0,
            "deletions": 30,
            "changes": 30,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fstate%2FStateListener.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fstate%2FStateListener.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2Fstate%2FStateListener.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,30 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8.state;\n-\n-import org.apache.qpid.AMQException;\n-\n-public interface StateListener\n-{\n-    void stateChanged(AMQState oldState, AMQState newState) throws AMQException;\n-\n-    void error(Throwable t);\n-}"
        },
        {
            "sha": "2c710bcf9ff14ecd203124a30eaa39ea2544389c",
            "filename": "broker-plugins/amqp-0-8-protocol/src/test/java/org/apache/qpid/server/protocol/v0_8/AMQChannelTest.java",
            "status": "modified",
            "additions": 6,
            "deletions": 8,
            "changes": 14,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FAMQChannelTest.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FAMQChannelTest.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FAMQChannelTest.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -29,7 +29,7 @@\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.BasicContentHeaderProperties;\n import org.apache.qpid.framing.ContentHeaderBody;\n-import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n+import org.apache.qpid.framing.MessagePublishInfo;\n import org.apache.qpid.server.configuration.BrokerProperties;\n import org.apache.qpid.server.exchange.ExchangeImpl;\n import org.apache.qpid.server.message.MessageContentSource;\n@@ -41,7 +41,7 @@\n public class AMQChannelTest extends QpidTestCase\n {\n     private VirtualHostImpl _virtualHost;\n-    private AMQProtocolSession _protocolSession;\n+    private AMQProtocolEngine _protocolSession;\n     private Map<Integer,String> _replies;\n     private Broker _broker;\n \n@@ -98,18 +98,17 @@ public void testPublishContentHeaderWhenMessageAuthorizationFails() throws Excep\n         AMQChannel channel = new AMQChannel(_protocolSession, 1, _virtualHost.getMessageStore());\n         channel.setLocalTransactional();\n \n-        MessagePublishInfo info = mock(MessagePublishInfo.class);\n+        MessagePublishInfo info = new MessagePublishInfo(new AMQShortString(\"test\"), false, false, null);\n         ExchangeImpl e = mock(ExchangeImpl.class);\n         ContentHeaderBody contentHeaderBody= mock(ContentHeaderBody.class);\n         BasicContentHeaderProperties properties = mock(BasicContentHeaderProperties.class);\n \n         when(contentHeaderBody.getProperties()).thenReturn(properties);\n-        when(info.getExchange()).thenReturn(new AMQShortString(\"test\"));\n         when(properties.getUserId()).thenReturn(new AMQShortString(_protocolSession.getAuthorizedPrincipal().getName() + \"_incorrect\"));\n \n         channel.setPublishFrame(info, e);\n         channel.publishContentHeader(contentHeaderBody);\n-        channel.commit();\n+        channel.commit(null, false);\n \n         assertEquals(\"Unexpected number of replies\", 1, _replies.size());\n         assertEquals(\"Message authorization passed\", \"Access Refused\", _replies.get(403));\n@@ -121,18 +120,17 @@ public void testPublishContentHeaderWhenMessageAuthorizationPasses() throws Exce\n         AMQChannel channel = new AMQChannel(_protocolSession, 1, _virtualHost.getMessageStore());\n         channel.setLocalTransactional();\n \n-        MessagePublishInfo info = mock(MessagePublishInfo.class);\n+        MessagePublishInfo info = new MessagePublishInfo(new AMQShortString(\"test\"), false, false, null);\n         ExchangeImpl e = mock(ExchangeImpl.class);\n         ContentHeaderBody contentHeaderBody= mock(ContentHeaderBody.class);\n         BasicContentHeaderProperties properties = mock(BasicContentHeaderProperties.class);\n \n         when(contentHeaderBody.getProperties()).thenReturn(properties);\n-        when(info.getExchange()).thenReturn(new AMQShortString(\"test\"));\n         when(properties.getUserId()).thenReturn(new AMQShortString(_protocolSession.getAuthorizedPrincipal().getName()));\n \n         channel.setPublishFrame(info, e);\n         channel.publishContentHeader(contentHeaderBody);\n-        channel.commit();\n+        channel.commit(null, false);\n \n         assertEquals(\"Unexpected number of replies\", 0, _replies.size());\n     }"
        },
        {
            "sha": "9326f167031fce0e31f8061402e48132202b5d1c",
            "filename": "broker-plugins/amqp-0-8-protocol/src/test/java/org/apache/qpid/server/protocol/v0_8/AckTest.java",
            "status": "modified",
            "additions": 7,
            "deletions": 34,
            "changes": 41,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FAckTest.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FAckTest.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FAckTest.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -29,7 +29,7 @@\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.BasicContentHeaderProperties;\n import org.apache.qpid.framing.ContentHeaderBody;\n-import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n+import org.apache.qpid.framing.MessagePublishInfo;\n import org.apache.qpid.server.consumer.ConsumerImpl;\n import org.apache.qpid.server.flow.LimitlessCreditManager;\n import org.apache.qpid.server.flow.Pre0_10CreditManager;\n@@ -51,7 +51,7 @@ public class AckTest extends QpidTestCase\n     private ConsumerTarget_0_8 _subscriptionTarget;\n     private ConsumerImpl _consumer;\n \n-    private AMQProtocolSession _protocolSession;\n+    private AMQProtocolEngine _protocolEngine;\n \n     private TestMemoryMessageStore _messageStore;\n \n@@ -68,8 +68,8 @@ public void setUp() throws Exception\n         super.setUp();\n         BrokerTestHelper.setUp();\n         _channel = BrokerTestHelper_0_8.createChannel(5);\n-        _protocolSession = _channel.getProtocolSession();\n-        _virtualHost = _protocolSession.getVirtualHost();\n+        _protocolEngine = _channel.getConnection();\n+        _virtualHost = _protocolEngine.getVirtualHost();\n         _queue = BrokerTestHelper.createQueue(getTestName(), _virtualHost);\n         _messageStore = (TestMemoryMessageStore)_virtualHost.getMessageStore();\n     }\n@@ -90,37 +90,10 @@ private void publishMessages(int count, boolean persistent) throws AMQException\n     {\n         for (int i = 1; i <= count; i++)\n         {\n-            MessagePublishInfo publishBody = new MessagePublishInfo()\n-            {\n-\n-                public AMQShortString getExchange()\n-                {\n-                    return new AMQShortString(\"someExchange\");\n-                }\n-\n-                public void setExchange(AMQShortString exchange)\n-                {\n-                    //To change body of implemented methods use File | Settings | File Templates.\n-                }\n-\n-                public boolean isImmediate()\n-                {\n-                    return false;\n-                }\n-\n-                public boolean isMandatory()\n-                {\n-                    return false;\n-                }\n-\n-                public AMQShortString getRoutingKey()\n-                {\n-                    return new AMQShortString(\"rk\");\n-                }\n-            };\n+            MessagePublishInfo publishBody = new MessagePublishInfo(new AMQShortString(\"someExchange\"), false, false,\n+                                                                    new AMQShortString(\"rk\"));\n             BasicContentHeaderProperties b = new BasicContentHeaderProperties();\n-            ContentHeaderBody cb = new ContentHeaderBody();\n-            cb.setProperties(b);\n+            ContentHeaderBody cb = new ContentHeaderBody(b);\n \n             if (persistent)\n             {"
        },
        {
            "sha": "dcdac07eae77b83d412e5c20b11eeaa487f9f6b3",
            "filename": "broker-plugins/amqp-0-8-protocol/src/test/java/org/apache/qpid/server/protocol/v0_8/AcknowledgeTest.java",
            "status": "modified",
            "additions": 5,
            "deletions": 4,
            "changes": 9,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FAcknowledgeTest.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FAcknowledgeTest.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FAcknowledgeTest.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -25,6 +25,7 @@\n \n import org.apache.qpid.exchange.ExchangeDefaults;\n import org.apache.qpid.framing.AMQShortString;\n+import org.apache.qpid.server.message.MessageSource;\n import org.apache.qpid.server.queue.AMQQueue;\n import org.apache.qpid.server.store.MessageCounter;\n import org.apache.qpid.server.store.MessageStore;\n@@ -75,7 +76,7 @@ private AMQChannel getChannel()\n \n     private InternalTestProtocolSession getSession()\n     {\n-        return (InternalTestProtocolSession)_channel.getProtocolSession();\n+        return (InternalTestProtocolSession)_channel.getConnection();\n     }\n \n     private AMQQueue getQueue()\n@@ -129,7 +130,7 @@ protected void runMessageAck(int sendMessageCount, long firstDeliveryTag, long a\n \n         if (getChannel().isTransactional())\n         {\n-            getChannel().commit();\n+            getChannel().commit(null, false);\n         }\n \n         //Ensure they are stored\n@@ -140,7 +141,7 @@ protected void runMessageAck(int sendMessageCount, long firstDeliveryTag, long a\n \n         //Subscribe to the queue\n         AMQShortString subscriber = _channel.consumeFromSource(null,\n-                                                               Collections.singleton(_queue),\n+                                                               Collections.<MessageSource>singleton(_queue),\n                                                                true, null, true, false);\n \n         getQueue().deliverAsync();\n@@ -164,7 +165,7 @@ protected void runMessageAck(int sendMessageCount, long firstDeliveryTag, long a\n \n         if (getChannel().isTransactional())\n         {\n-            getChannel().commit();\n+            getChannel().commit(null, false);\n         }\n \n         // Check Remaining Acknowledgements"
        },
        {
            "sha": "d4c10c50c1995b751f787213015844f4ce1341c6",
            "filename": "broker-plugins/amqp-0-8-protocol/src/test/java/org/apache/qpid/server/protocol/v0_8/BrokerTestHelper_0_8.java",
            "status": "modified",
            "additions": 6,
            "deletions": 13,
            "changes": 19,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FBrokerTestHelper_0_8.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FBrokerTestHelper_0_8.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FBrokerTestHelper_0_8.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -24,18 +24,15 @@\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.BasicContentHeaderProperties;\n import org.apache.qpid.framing.ContentHeaderBody;\n-import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n+import org.apache.qpid.framing.MessagePublishInfo;\n import org.apache.qpid.server.message.MessageDestination;\n import org.apache.qpid.server.util.BrokerTestHelper;\n import org.apache.qpid.server.virtualhost.VirtualHostImpl;\n \n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n public class BrokerTestHelper_0_8 extends BrokerTestHelper\n {\n \n-    public static AMQChannel createChannel(int channelId, AMQProtocolSession session) throws AMQException\n+    public static AMQChannel createChannel(int channelId, AMQProtocolEngine session) throws AMQException\n     {\n         AMQChannel channel = new AMQChannel(session, channelId, session.getVirtualHost().getMessageStore());\n         session.addChannel(channel);\n@@ -69,9 +66,7 @@ public static void publishMessages(AMQChannel channel, int numberOfMessages, Str\n     {\n         AMQShortString routingKey = new AMQShortString(queueName);\n         AMQShortString exchangeNameAsShortString = new AMQShortString(exchangeName);\n-        MessagePublishInfo info = mock(MessagePublishInfo.class);\n-        when(info.getExchange()).thenReturn(exchangeNameAsShortString);\n-        when(info.getRoutingKey()).thenReturn(routingKey);\n+        MessagePublishInfo info = new MessagePublishInfo(exchangeNameAsShortString, false, false, routingKey);\n \n         MessageDestination destination;\n         if(exchangeName == null || \"\".equals(exchangeName))\n@@ -86,22 +81,20 @@ public static void publishMessages(AMQChannel channel, int numberOfMessages, Str\n         {\n             channel.setPublishFrame(info, destination);\n \n-            // Set the body size\n-            ContentHeaderBody _headerBody = new ContentHeaderBody();\n-            _headerBody.setBodySize(0);\n \n             // Set Minimum properties\n             BasicContentHeaderProperties properties = new BasicContentHeaderProperties();\n \n+\n             properties.setExpiration(0L);\n             properties.setTimestamp(System.currentTimeMillis());\n \n             // Make Message Persistent\n             properties.setDeliveryMode((byte) 2);\n \n-            _headerBody.setProperties(properties);\n+            ContentHeaderBody headerBody = new ContentHeaderBody(properties, 0);\n \n-            channel.publishContentHeader(_headerBody);\n+            channel.publishContentHeader(headerBody);\n         }\n         channel.sync();\n     }"
        },
        {
            "sha": "895c8e687c134dc1a927d42ea3589443f24d3fcf",
            "filename": "broker-plugins/amqp-0-8-protocol/src/test/java/org/apache/qpid/server/protocol/v0_8/InternalTestProtocolSession.java",
            "status": "modified",
            "additions": 2,
            "deletions": 3,
            "changes": 5,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FInternalTestProtocolSession.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FInternalTestProtocolSession.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FInternalTestProtocolSession.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -39,14 +39,13 @@\n import org.apache.qpid.AMQException;\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.ContentHeaderBody;\n-import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n+import org.apache.qpid.framing.MessagePublishInfo;\n import org.apache.qpid.protocol.AMQConstant;\n import org.apache.qpid.server.consumer.ConsumerImpl;\n import org.apache.qpid.server.message.InstanceProperties;\n import org.apache.qpid.server.message.MessageContentSource;\n import org.apache.qpid.server.message.ServerMessage;\n import org.apache.qpid.server.model.Broker;\n-import org.apache.qpid.server.protocol.v0_8.output.ProtocolOutputConverter;\n import org.apache.qpid.server.security.auth.AuthenticatedPrincipal;\n import org.apache.qpid.server.security.auth.UsernamePrincipal;\n import org.apache.qpid.server.virtualhost.VirtualHostImpl;\n@@ -231,7 +230,7 @@ public void closeSession(AMQChannel session, AMQConstant cause, String message)\n         //Simulate the Client responding with a CloseOK\n         // should really update the StateManger but we don't have access here\n         // changeState(AMQState.CONNECTION_CLOSED);\n-        ((AMQChannel)session).getProtocolSession().closeSession();\n+        ((AMQChannel)session).getConnection().closeSession();\n \n     }\n "
        },
        {
            "sha": "107e64bee59fedf241e294b7f14438d8f1ce8e3f",
            "filename": "broker-plugins/amqp-0-8-protocol/src/test/java/org/apache/qpid/server/protocol/v0_8/MaxChannelsTest.java",
            "status": "modified",
            "additions": 7,
            "deletions": 16,
            "changes": 23,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FMaxChannelsTest.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FMaxChannelsTest.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FMaxChannelsTest.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -20,8 +20,6 @@\n  */\n package org.apache.qpid.server.protocol.v0_8;\n \n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.protocol.AMQConstant;\n import org.apache.qpid.server.util.BrokerTestHelper;\n import org.apache.qpid.test.utils.QpidTestCase;\n \n@@ -46,23 +44,16 @@ public void testChannels() throws Exception\n \n         long maxChannels = 10L;\n         _session.setMaximumNumberOfChannels(maxChannels);\n-        assertEquals(\"Number of channels not correctly set.\", new Long(maxChannels), _session.getMaximumNumberOfChannels());\n+        assertEquals(\"Number of channels not correctly set.\", maxChannels, _session.getMaximumNumberOfChannels());\n \n-        for (long currentChannel = 0L; currentChannel < maxChannels; currentChannel++)\n+        for (long currentChannel = 1L; currentChannel <= maxChannels; currentChannel++)\n         {\n-            _session.addChannel(new AMQChannel(_session, (int) currentChannel, null));\n+            _session.receiveChannelOpen( (int) currentChannel);\n         }\n-\n-        try\n-        {\n-            _session.addChannel(new AMQChannel(_session, (int) maxChannels, null));\n-            fail(\"Cannot create more channels then maximum\");\n-        }\n-        catch (AMQException e)\n-        {\n-            assertEquals(\"Wrong exception received.\", e.getErrorCode(), AMQConstant.NOT_ALLOWED);\n-        }\n-        assertEquals(\"Maximum number of channels not set.\", new Long(maxChannels), new Long(_session.getChannels().size()));\n+        assertFalse(\"Connection should not be closed after opening \" + maxChannels + \" channels\",_session.isClosed());\n+        assertEquals(\"Maximum number of channels not set.\", maxChannels, _session.getChannels().size());\n+        _session.receiveChannelOpen((int) maxChannels+1);\n+        assertTrue(\"Connection should be closed after opening \" + (maxChannels + 1) + \" channels\",_session.isClosed());\n     }\n \n     @Override"
        },
        {
            "sha": "ab29e58a6caa49462a3f2c6b3b66030e019f0883",
            "filename": "broker-plugins/amqp-0-8-protocol/src/test/java/org/apache/qpid/server/protocol/v0_8/MockMessagePublishInfo.java",
            "status": "removed",
            "additions": 0,
            "deletions": 52,
            "changes": 52,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FMockMessagePublishInfo.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FMockMessagePublishInfo.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FMockMessagePublishInfo.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,52 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.protocol.v0_8;\n-\n-import org.apache.qpid.framing.AMQShortString;\n-import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n-\n-public class MockMessagePublishInfo implements MessagePublishInfo\n-{\n-    public AMQShortString getExchange()\n-    {\n-        return null;  //To change body of implemented methods use File | Settings | File Templates.\n-    }\n-\n-    public void setExchange(AMQShortString exchange)\n-    {\n-        //To change body of implemented methods use File | Settings | File Templates.\n-    }\n-\n-    public boolean isImmediate()\n-    {\n-        return false;  //To change body of implemented methods use File | Settings | File Templates.\n-    }\n-\n-    public boolean isMandatory()\n-    {\n-        return false;  //To change body of implemented methods use File | Settings | File Templates.\n-    }\n-\n-    public AMQShortString getRoutingKey()\n-    {\n-        return null;  //To change body of implemented methods use File | Settings | File Templates.\n-    }\n-}"
        },
        {
            "sha": "f21bf07faecf5b7f285d7a82bb8bdc7078e42ac9",
            "filename": "broker-plugins/amqp-0-8-protocol/src/test/java/org/apache/qpid/server/protocol/v0_8/MockStoredMessage.java",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FMockStoredMessage.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FMockStoredMessage.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FMockStoredMessage.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -25,7 +25,7 @@\n import org.apache.qpid.framing.BasicContentHeaderProperties;\n import org.apache.qpid.framing.ContentHeaderBody;\n import org.apache.qpid.framing.FieldTable;\n-import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n+import org.apache.qpid.framing.MessagePublishInfo;\n import org.apache.qpid.server.store.StoredMessage;\n \n public class MockStoredMessage implements StoredMessage<MessageMetaData>\n@@ -41,7 +41,7 @@ public MockStoredMessage(long messageId)\n \n     public MockStoredMessage(long messageId, String headerName, Object headerValue)\n     {\n-        this(messageId, new MockMessagePublishInfo(), new ContentHeaderBody(new BasicContentHeaderProperties(), 60), headerName, headerValue);\n+        this(messageId, new MessagePublishInfo(null, false, false, null), new ContentHeaderBody(new BasicContentHeaderProperties()), headerName, headerValue);\n     }\n \n     public MockStoredMessage(long messageId, MessagePublishInfo info, ContentHeaderBody chb)"
        },
        {
            "sha": "816485c42b6f06f88f9aaaa0b1ef122227bb3a4b",
            "filename": "broker-plugins/amqp-0-8-protocol/src/test/java/org/apache/qpid/server/protocol/v0_8/QueueBrowserUsesNoAckTest.java",
            "status": "modified",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FQueueBrowserUsesNoAckTest.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FQueueBrowserUsesNoAckTest.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FQueueBrowserUsesNoAckTest.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -27,6 +27,7 @@\n import org.apache.qpid.exchange.ExchangeDefaults;\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.FieldTable;\n+import org.apache.qpid.server.message.MessageSource;\n import org.apache.qpid.server.queue.AMQQueue;\n import org.apache.qpid.server.store.MessageCounter;\n import org.apache.qpid.server.store.MessageStore;\n@@ -77,7 +78,7 @@ private AMQChannel getChannel()\n \n     private InternalTestProtocolSession getSession()\n     {\n-        return (InternalTestProtocolSession)_channel.getProtocolSession();\n+        return (InternalTestProtocolSession)_channel.getConnection();\n     }\n \n     private AMQQueue getQueue()\n@@ -144,6 +145,6 @@ private AMQShortString browse(AMQChannel channel, AMQQueue queue) throws Excepti\n         FieldTable filters = new FieldTable();\n         filters.put(AMQPFilterTypes.NO_CONSUME.getValue(), true);\n \n-        return channel.consumeFromSource(null, Collections.singleton(queue), true, filters, true, false);\n+        return channel.consumeFromSource(null, Collections.<MessageSource>singleton(queue), true, filters, true, false);\n     }\n }"
        },
        {
            "sha": "6059f7f4e5900687d3db2ddbfcb1e2437c0f8596",
            "filename": "broker-plugins/amqp-0-8-protocol/src/test/java/org/apache/qpid/server/protocol/v0_8/ReferenceCountingTest.java",
            "status": "modified",
            "additions": 4,
            "deletions": 62,
            "changes": 66,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FReferenceCountingTest.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FReferenceCountingTest.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-0-8-protocol%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fv0_8%2FReferenceCountingTest.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -23,10 +23,9 @@\n import java.util.UUID;\n \n import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.BasicContentHeaderProperties;\n import org.apache.qpid.framing.ContentHeaderBody;\n-import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n+import org.apache.qpid.framing.MessagePublishInfo;\n import org.apache.qpid.server.message.EnqueueableMessage;\n import org.apache.qpid.server.message.MessageReference;\n import org.apache.qpid.server.store.MessageCounter;\n@@ -57,36 +56,7 @@ public void testMessageGetsRemoved() throws AMQException\n     {\n         ContentHeaderBody chb = createPersistentContentHeader();\n \n-        MessagePublishInfo info = new MessagePublishInfo()\n-        {\n-\n-            public AMQShortString getExchange()\n-            {\n-                return null;\n-            }\n-\n-            public void setExchange(AMQShortString exchange)\n-            {\n-                //To change body of implemented methods use File | Settings | File Templates.\n-            }\n-\n-            public boolean isImmediate()\n-            {\n-                return false;\n-            }\n-\n-            public boolean isMandatory()\n-            {\n-                return false;\n-            }\n-\n-            public AMQShortString getRoutingKey()\n-            {\n-                return null;\n-            }\n-        };\n-\n-\n+        MessagePublishInfo info = new MessagePublishInfo(null, false, false, null);\n \n         final MessageMetaData mmd = new MessageMetaData(info, chb);\n \n@@ -114,44 +84,16 @@ private int getStoreMessageCount()\n \n     private ContentHeaderBody createPersistentContentHeader()\n     {\n-        ContentHeaderBody chb = new ContentHeaderBody();\n         BasicContentHeaderProperties bchp = new BasicContentHeaderProperties();\n         bchp.setDeliveryMode((byte)2);\n-        chb.setProperties(bchp);\n+        ContentHeaderBody chb = new ContentHeaderBody(bchp);\n         return chb;\n     }\n \n     public void testMessageRemains() throws AMQException\n     {\n \n-        MessagePublishInfo info = new MessagePublishInfo()\n-        {\n-\n-            public AMQShortString getExchange()\n-            {\n-                return null;\n-            }\n-\n-            public void setExchange(AMQShortString exchange)\n-            {\n-                //To change body of implemented methods use File | Settings | File Templates.\n-            }\n-\n-            public boolean isImmediate()\n-            {\n-                return false;\n-            }\n-\n-            public boolean isMandatory()\n-            {\n-                return false;\n-            }\n-\n-            public AMQShortString getRoutingKey()\n-            {\n-                return null;\n-            }\n-        };\n+        MessagePublishInfo info = new MessagePublishInfo(null, false, false, null);\n \n         final ContentHeaderBody chb = createPersistentContentHeader();\n "
        },
        {
            "sha": "02c3373f856677174826814334a589326adcb46f",
            "filename": "broker-plugins/amqp-msg-conv-0-8-to-0-10/src/main/java/org/apache/qpid/server/protocol/converter/v0_8_v0_10/MessageConverter_0_10_to_0_8.java",
            "status": "modified",
            "additions": 3,
            "deletions": 34,
            "changes": 37,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-msg-conv-0-8-to-0-10%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fconverter%2Fv0_8_v0_10%2FMessageConverter_0_10_to_0_8.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-msg-conv-0-8-to-0-10%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fconverter%2Fv0_8_v0_10%2FMessageConverter_0_10_to_0_8.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-msg-conv-0-8-to-0-10%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fconverter%2Fv0_8_v0_10%2FMessageConverter_0_10_to_0_8.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -30,7 +30,7 @@\n import org.apache.qpid.framing.BasicContentHeaderProperties;\n import org.apache.qpid.framing.ContentHeaderBody;\n import org.apache.qpid.framing.FieldTable;\n-import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n+import org.apache.qpid.framing.MessagePublishInfo;\n import org.apache.qpid.server.exchange.ExchangeImpl;\n import org.apache.qpid.server.plugin.MessageConverter;\n import org.apache.qpid.server.plugin.PluggableService;\n@@ -239,7 +239,7 @@ private MessageMetaData convertMetaData(MessageTransferMessage message, VirtualH\n     private ContentHeaderBody convertContentHeaderBody(MessageTransferMessage message, VirtualHostImpl vhost)\n     {\n         BasicContentHeaderProperties props = convertContentHeaderProperties(message, vhost);\n-        ContentHeaderBody chb = new ContentHeaderBody(props, BASIC_CLASS_ID);\n+        ContentHeaderBody chb = new ContentHeaderBody(props);\n         chb.setBodySize(message.getSize());\n         return chb;\n     }\n@@ -256,38 +256,7 @@ private MessagePublishInfo convertPublishBody(MessageTransferMessage message)\n         final boolean immediate = delvProps != null && delvProps.getImmediate();\n         final boolean mandatory = delvProps != null && !delvProps.getDiscardUnroutable();\n \n-        return new MessagePublishInfo()\n-        {\n-            @Override\n-            public AMQShortString getExchange()\n-            {\n-                return exchangeName;\n-            }\n-\n-            @Override\n-            public void setExchange(AMQShortString exchange)\n-            {\n-                throw new UnsupportedOperationException();\n-            }\n-\n-            @Override\n-            public boolean isImmediate()\n-            {\n-                return immediate;\n-            }\n-\n-            @Override\n-            public boolean isMandatory()\n-            {\n-                return mandatory;\n-            }\n-\n-            @Override\n-            public AMQShortString getRoutingKey()\n-            {\n-                return routingKey;\n-            }\n-        };\n+        return new MessagePublishInfo(exchangeName, immediate, mandatory, routingKey);\n     }\n \n     @Override"
        },
        {
            "sha": "647e6be28adc7a7af4c6f9bb54214d189817327e",
            "filename": "broker-plugins/amqp-msg-conv-0-8-to-1-0/src/main/java/org/apache/qpid/server/protocol/converter/v0_8_v1_0/MessageConverter_1_0_to_v0_8.java",
            "status": "modified",
            "additions": 8,
            "deletions": 40,
            "changes": 48,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-msg-conv-0-8-to-1-0%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fconverter%2Fv0_8_v1_0%2FMessageConverter_1_0_to_v0_8.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/broker-plugins%2Famqp-msg-conv-0-8-to-1-0%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fconverter%2Fv0_8_v1_0%2FMessageConverter_1_0_to_v0_8.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-plugins%2Famqp-msg-conv-0-8-to-1-0%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fserver%2Fprotocol%2Fconverter%2Fv0_8_v1_0%2FMessageConverter_1_0_to_v0_8.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -28,7 +28,7 @@\n import org.apache.qpid.framing.BasicContentHeaderProperties;\n import org.apache.qpid.framing.ContentHeaderBody;\n import org.apache.qpid.framing.FieldTable;\n-import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n+import org.apache.qpid.framing.MessagePublishInfo;\n import org.apache.qpid.server.plugin.MessageConverter;\n import org.apache.qpid.server.plugin.PluggableService;\n import org.apache.qpid.server.protocol.v0_8.AMQMessage;\n@@ -137,45 +137,13 @@ private MessageMetaData convertMetaData(final Message_1_0 serverMsg, final Strin\n     {\n \n         final MessageMetaData_1_0.MessageHeader_1_0 header = serverMsg.getMessageHeader();\n+        String key = header.getTo();\n+        if(key == null)\n+        {\n+            key = header.getSubject();\n+        }\n \n-        MessagePublishInfo publishInfo = new MessagePublishInfo()\n-                                            {\n-                                                @Override\n-                                                public AMQShortString getExchange()\n-                                                {\n-                                                    return null;\n-                                                }\n-\n-                                                @Override\n-                                                public void setExchange(final AMQShortString amqShortString)\n-                                                {\n-                                                    throw new UnsupportedOperationException();\n-                                                }\n-\n-                                                @Override\n-                                                public boolean isImmediate()\n-                                                {\n-                                                    return false;\n-                                                }\n-\n-                                                @Override\n-                                                public boolean isMandatory()\n-                                                {\n-                                                    return false;\n-                                                }\n-\n-                                                @Override\n-                                                public AMQShortString getRoutingKey()\n-                                                {\n-                                                    String key = header.getTo();\n-                                                    if(key == null)\n-                                                    {\n-                                                        key = header.getSubject();\n-                                                    }\n-\n-                                                    return AMQShortString.valueOf(key);\n-                                                }\n-                                            };\n+        MessagePublishInfo publishInfo = new MessagePublishInfo(null, false, false, AMQShortString.valueOf(key));\n \n \n         final BasicContentHeaderProperties props = new BasicContentHeaderProperties();\n@@ -204,7 +172,7 @@ public AMQShortString getRoutingKey()\n \n         props.setHeaders(FieldTable.convertToFieldTable(headerProps));\n \n-        final ContentHeaderBody chb = new ContentHeaderBody(props, BASIC_CLASS_ID);\n+        final ContentHeaderBody chb = new ContentHeaderBody(props);\n         chb.setBodySize(size);\n \n         return new MessageMetaData(publishInfo, chb, serverMsg.getArrivalTime());"
        },
        {
            "sha": "d86a2739f26e3ef6e29bb7154ad7ee743e9d4837",
            "filename": "client/src/main/java/org/apache/qpid/client/AMQSession_0_8.java",
            "status": "modified",
            "additions": 11,
            "deletions": 33,
            "changes": 44,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2FAMQSession_0_8.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2FAMQSession_0_8.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2FAMQSession_0_8.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -62,8 +62,6 @@\n import org.apache.qpid.common.AMQPFilterTypes;\n import org.apache.qpid.configuration.ClientProperties;\n import org.apache.qpid.framing.*;\n-import org.apache.qpid.framing.amqp_0_9.MethodRegistry_0_9;\n-import org.apache.qpid.framing.amqp_0_91.MethodRegistry_0_91;\n import org.apache.qpid.jms.Session;\n import org.apache.qpid.protocol.AMQConstant;\n import org.apache.qpid.protocol.AMQMethodEvent;\n@@ -316,21 +314,12 @@ public void sendRecover() throws AMQException, FailoverException\n             if(getProtocolHandler().getProtocolVersion().equals(ProtocolVersion.v8_0))\n             {\n                 BasicRecoverBody body = getMethodRegistry().createBasicRecoverBody(false);\n-                getAMQConnection().getProtocolHandler().syncWrite(body.generateFrame(getChannelId()), BasicRecoverOkBody.class);\n-            }\n-            else if(getProtocolVersion().equals(ProtocolVersion.v0_9))\n-            {\n-                BasicRecoverSyncBody body = ((MethodRegistry_0_9)getMethodRegistry()).createBasicRecoverSyncBody(false);\n-                getAMQConnection().getProtocolHandler().syncWrite(body.generateFrame(getChannelId()), BasicRecoverSyncOkBody.class);\n-            }\n-            else if(getProtocolVersion().equals(ProtocolVersion.v0_91))\n-            {\n-                BasicRecoverSyncBody body = ((MethodRegistry_0_91)getMethodRegistry()).createBasicRecoverSyncBody(false);\n                 getAMQConnection().getProtocolHandler().syncWrite(body.generateFrame(getChannelId()), BasicRecoverSyncOkBody.class);\n             }\n             else\n             {\n-                throw new RuntimeException(\"Unsupported version of the AMQP Protocol: \" + getProtocolVersion());\n+                BasicRecoverSyncBody body = getMethodRegistry().createBasicRecoverSyncBody(false);\n+                getAMQConnection().getProtocolHandler().syncWrite(body.generateFrame(getChannelId()), BasicRecoverSyncOkBody.class);\n             }\n         }\n     }\n@@ -1148,33 +1137,22 @@ public Object execute() throws AMQException, FailoverException\n \n                 if (isBound(null, AMQShortString.valueOf(queue), null))\n                 {\n-                    MethodRegistry methodRegistry = getProtocolHandler().getMethodRegistry();\n-                    AMQMethodBody body;\n-                    if (methodRegistry instanceof MethodRegistry_0_9)\n+\n+                    if(ProtocolVersion.v8_0.equals(getProtocolVersion()))\n                     {\n-                        String bindingKey = binding.getBindingKey() == null ? queue : binding.getBindingKey();\n+                        throw new AMQException(AMQConstant.NOT_IMPLEMENTED, \"Cannot unbind a queue in AMQP 0-8\");\n+                    }\n \n-                        MethodRegistry_0_9 methodRegistry_0_9 = (MethodRegistry_0_9) methodRegistry;\n-                        body = methodRegistry_0_9.createQueueUnbindBody(getTicket(),\n+                    MethodRegistry methodRegistry = getProtocolHandler().getMethodRegistry();\n+\n+                    String bindingKey = binding.getBindingKey() == null ? queue : binding.getBindingKey();\n+\n+                    AMQMethodBody body = methodRegistry.createQueueUnbindBody(getTicket(),\n                                                                         AMQShortString.valueOf(queue),\n                                                                         AMQShortString.valueOf(exchange),\n                                                                         AMQShortString.valueOf(bindingKey),\n                                                                         null);\n-                    }\n-                    else if (methodRegistry instanceof MethodRegistry_0_91)\n-                    {\n-                        MethodRegistry_0_91 methodRegistry_0_91 = (MethodRegistry_0_91) methodRegistry;\n-                        body = methodRegistry_0_91.createQueueUnbindBody(getTicket(),\n-                                                                         AMQShortString.valueOf(queue),\n-                                                                         AMQShortString.valueOf(exchange),\n-                                                                         AMQShortString.valueOf(binding.getBindingKey()),\n-                                                                         null);\n \n-                    }\n-                    else\n-                    {\n-                        throw new AMQException(AMQConstant.NOT_IMPLEMENTED, \"Cannot unbind a queue in AMQP 0-8\");\n-                    }\n                     getProtocolHandler().syncWrite(body.generateFrame(getChannelId()), QueueUnbindOkBody.class);\n                     return null;\n                 }"
        },
        {
            "sha": "69d02566bf752232a834469d13ce84199c021527",
            "filename": "client/src/main/java/org/apache/qpid/client/BasicMessageProducer_0_8.java",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2FBasicMessageProducer_0_8.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2FBasicMessageProducer_0_8.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2FBasicMessageProducer_0_8.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -216,7 +216,7 @@ && getConnection().isMessageCompressionDesired()\n \n         AMQFrame contentHeaderFrame =\n             ContentHeaderBody.createAMQFrame(getChannelId(),\n-                                             classIfForBasic, 0, contentHeaderProperties, size);\n+                                             contentHeaderProperties, size);\n         if(contentHeaderFrame.getSize() > getSession().getAMQConnection().getMaximumFrameSize())\n         {\n             throw new JMSException(\"Unable to send message as the headers are too large (\""
        },
        {
            "sha": "e6eb2d814fe7153bcafa77376e6e15c10469ea55",
            "filename": "client/src/main/java/org/apache/qpid/client/handler/ClientMethodDispatcherImpl.java",
            "status": "modified",
            "additions": 29,
            "deletions": 133,
            "changes": 162,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2Fhandler%2FClientMethodDispatcherImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2Fhandler%2FClientMethodDispatcherImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2Fhandler%2FClientMethodDispatcherImpl.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -125,6 +125,28 @@ public boolean dispatchAccessRequestOk(AccessRequestOkBody body, int channelId)\n         return false;\n     }\n \n+    @Override\n+    public boolean dispatchQueueUnbindOk(final QueueUnbindOkBody body, final int channelId)\n+            throws AMQException\n+    {\n+        throw new AMQMethodNotImplementedException(body);\n+    }\n+\n+    @Override\n+    public boolean dispatchBasicRecoverSyncOk(final BasicRecoverSyncOkBody basicRecoverSyncOkBody,\n+                                              final int channelId)\n+            throws AMQException\n+    {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean dispatchChannelAlert(final ChannelAlertBody channelAlertBody, final int channelId)\n+            throws AMQException\n+    {\n+        return false;\n+    }\n+\n     public boolean dispatchBasicCancelOk(BasicCancelOkBody body, int channelId) throws AMQException\n     {\n         _basicCancelOkMethodHandler.methodReceived(_session, body, channelId);\n@@ -244,16 +266,6 @@ public boolean dispatchQueuePurgeOk(QueuePurgeOkBody body, int channelId) throws\n         return false;\n     }\n \n-    public boolean dispatchStreamCancelOk(StreamCancelOkBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchStreamConsumeOk(StreamConsumeOkBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n     public boolean dispatchAccessRequest(AccessRequestBody body, int channelId) throws AMQException\n     {\n         throw new AMQMethodNotImplementedException(body);\n@@ -324,16 +336,6 @@ public boolean dispatchConnectionTuneOk(ConnectionTuneOkBody body, int channelId\n         throw new AMQMethodNotImplementedException(body);\n     }\n \n-    public boolean dispatchDtxSelect(DtxSelectBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchDtxStart(DtxStartBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n     public boolean dispatchExchangeBound(ExchangeBoundBody body, int channelId) throws AMQException\n     {\n         throw new AMQMethodNotImplementedException(body);\n@@ -349,36 +351,6 @@ public boolean dispatchExchangeDelete(ExchangeDeleteBody body, int channelId) th\n         throw new AMQMethodNotImplementedException(body);\n     }\n \n-    public boolean dispatchFileAck(FileAckBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchFileCancel(FileCancelBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchFileConsume(FileConsumeBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchFilePublish(FilePublishBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchFileQos(FileQosBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchFileReject(FileRejectBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n     public boolean dispatchQueueBind(QueueBindBody body, int channelId) throws AMQException\n     {\n         throw new AMQMethodNotImplementedException(body);\n@@ -399,30 +371,6 @@ public boolean dispatchQueuePurge(QueuePurgeBody body, int channelId) throws AMQ\n         throw new AMQMethodNotImplementedException(body);\n     }\n \n-    public boolean dispatchStreamCancel(StreamCancelBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchStreamConsume(StreamConsumeBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchStreamPublish(StreamPublishBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchStreamQos(StreamQosBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchTunnelRequest(TunnelRequestBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n \n     public boolean dispatchTxCommit(TxCommitBody body, int channelId) throws AMQException\n     {\n@@ -439,14 +387,17 @@ public boolean dispatchTxSelect(TxSelectBody body, int channelId) throws AMQExce\n         throw new AMQMethodNotImplementedException(body);\n     }\n \n-    public boolean dispatchDtxSelectOk(DtxSelectOkBody body, int channelId) throws AMQException\n+    @Override\n+    public boolean dispatchQueueUnbind(final QueueUnbindBody queueUnbindBody, final int channelId) throws AMQException\n     {\n-        throw new AMQMethodNotImplementedException(body);\n+        return false;\n     }\n \n-    public boolean dispatchDtxStartOk(DtxStartOkBody body, int channelId) throws AMQException\n+    @Override\n+    public boolean dispatchBasicRecoverSync(final BasicRecoverSyncBody basicRecoverSyncBody, final int channelId)\n+            throws AMQException\n     {\n-        throw new AMQMethodNotImplementedException(body);\n+        return false;\n     }\n \n     public boolean dispatchExchangeBoundOk(ExchangeBoundOkBody body, int channelId) throws AMQException\n@@ -465,46 +416,6 @@ public boolean dispatchExchangeDeleteOk(ExchangeDeleteOkBody body, int channelId\n         return false;\n     }\n \n-    public boolean dispatchFileCancelOk(FileCancelOkBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchFileConsumeOk(FileConsumeOkBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchFileDeliver(FileDeliverBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchFileOpen(FileOpenBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchFileOpenOk(FileOpenOkBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchFileQosOk(FileQosOkBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchFileReturn(FileReturnBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchFileStage(FileStageBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n     public boolean dispatchQueueBindOk(QueueBindOkBody body, int channelId) throws AMQException\n     {\n         return false;\n@@ -515,21 +426,6 @@ public boolean dispatchQueueDeclareOk(QueueDeclareOkBody body, int channelId) th\n         return false;\n     }\n \n-    public boolean dispatchStreamDeliver(StreamDeliverBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchStreamQosOk(StreamQosOkBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchStreamReturn(StreamReturnBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n     public boolean dispatchTxCommitOk(TxCommitOkBody body, int channelId) throws AMQException\n     {\n         return false;"
        },
        {
            "sha": "4232f59292ee89d870b6dfaa2b195a177f5a9c72",
            "filename": "client/src/main/java/org/apache/qpid/client/handler/ClientMethodDispatcherImpl_0_9.java",
            "status": "modified",
            "additions": 12,
            "deletions": 96,
            "changes": 108,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2Fhandler%2FClientMethodDispatcherImpl_0_9.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2Fhandler%2FClientMethodDispatcherImpl_0_9.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2Fhandler%2FClientMethodDispatcherImpl_0_9.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -23,10 +23,14 @@\n import org.apache.qpid.AMQException;\n import org.apache.qpid.client.protocol.AMQProtocolSession;\n import org.apache.qpid.client.state.AMQMethodNotImplementedException;\n-import org.apache.qpid.framing.*;\n-import org.apache.qpid.framing.amqp_0_9.MethodDispatcher_0_9;\n-\n-public class ClientMethodDispatcherImpl_0_9 extends ClientMethodDispatcherImpl implements MethodDispatcher_0_9\n+import org.apache.qpid.framing.BasicRecoverSyncBody;\n+import org.apache.qpid.framing.BasicRecoverSyncOkBody;\n+import org.apache.qpid.framing.ChannelAlertBody;\n+import org.apache.qpid.framing.MethodDispatcher;\n+import org.apache.qpid.framing.QueueUnbindBody;\n+import org.apache.qpid.framing.QueueUnbindOkBody;\n+\n+public class ClientMethodDispatcherImpl_0_9 extends ClientMethodDispatcherImpl implements MethodDispatcher\n {\n     public ClientMethodDispatcherImpl_0_9(AMQProtocolSession session)\n     {\n@@ -38,106 +42,18 @@ public boolean dispatchBasicRecoverSyncOk(BasicRecoverSyncOkBody body, int chann\n         return false;\n     }\n \n-    public boolean dispatchBasicRecoverSync(BasicRecoverSyncBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchChannelOk(ChannelOkBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchChannelPing(ChannelPingBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchChannelPong(ChannelPongBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchChannelResume(ChannelResumeBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchMessageAppend(MessageAppendBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchMessageCancel(MessageCancelBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchMessageCheckpoint(MessageCheckpointBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchMessageClose(MessageCloseBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchMessageConsume(MessageConsumeBody body, int channelId) throws AMQException\n+    @Override\n+    public boolean dispatchChannelAlert(final ChannelAlertBody body, final int channelId)\n+            throws AMQException\n     {\n         throw new AMQMethodNotImplementedException(body);\n     }\n \n-    public boolean dispatchMessageEmpty(MessageEmptyBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchMessageGet(MessageGetBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchMessageOffset(MessageOffsetBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchMessageOk(MessageOkBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchMessageOpen(MessageOpenBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchMessageQos(MessageQosBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchMessageRecover(MessageRecoverBody body, int channelId) throws AMQException\n+    public boolean dispatchBasicRecoverSync(BasicRecoverSyncBody body, int channelId) throws AMQException\n     {\n         throw new AMQMethodNotImplementedException(body);\n     }\n \n-    public boolean dispatchMessageReject(MessageRejectBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchMessageResume(MessageResumeBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchMessageTransfer(MessageTransferBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n     public boolean dispatchQueueUnbind(QueueUnbindBody body, int channelId) throws AMQException\n     {\n         throw new AMQMethodNotImplementedException(body);"
        },
        {
            "sha": "573ab52cc3a098df3997377dc27cf1ff1434bf9b",
            "filename": "client/src/main/java/org/apache/qpid/client/handler/ClientMethodDispatcherImpl_0_91.java",
            "status": "modified",
            "additions": 13,
            "deletions": 102,
            "changes": 115,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2Fhandler%2FClientMethodDispatcherImpl_0_91.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2Fhandler%2FClientMethodDispatcherImpl_0_91.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2Fhandler%2FClientMethodDispatcherImpl_0_91.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -23,10 +23,14 @@\n import org.apache.qpid.AMQException;\n import org.apache.qpid.client.protocol.AMQProtocolSession;\n import org.apache.qpid.client.state.AMQMethodNotImplementedException;\n-import org.apache.qpid.framing.*;\n-import org.apache.qpid.framing.amqp_0_91.MethodDispatcher_0_91;\n-\n-public class ClientMethodDispatcherImpl_0_91 extends ClientMethodDispatcherImpl implements MethodDispatcher_0_91\n+import org.apache.qpid.framing.BasicRecoverSyncBody;\n+import org.apache.qpid.framing.BasicRecoverSyncOkBody;\n+import org.apache.qpid.framing.ChannelAlertBody;\n+import org.apache.qpid.framing.MethodDispatcher;\n+import org.apache.qpid.framing.QueueUnbindBody;\n+import org.apache.qpid.framing.QueueUnbindOkBody;\n+\n+public class ClientMethodDispatcherImpl_0_91 extends ClientMethodDispatcherImpl implements MethodDispatcher\n {\n     public ClientMethodDispatcherImpl_0_91(AMQProtocolSession session)\n     {\n@@ -38,119 +42,26 @@ public boolean dispatchBasicRecoverSyncOk(BasicRecoverSyncOkBody body, int chann\n         return false;\n     }\n \n-    public boolean dispatchBasicRecoverSync(BasicRecoverSyncBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchChannelOk(ChannelOkBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchChannelPing(ChannelPingBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchChannelPong(ChannelPongBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchChannelResume(ChannelResumeBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchMessageAppend(MessageAppendBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchMessageCancel(MessageCancelBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchMessageCheckpoint(MessageCheckpointBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchMessageClose(MessageCloseBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchMessageConsume(MessageConsumeBody body, int channelId) throws AMQException\n+    @Override\n+    public boolean dispatchChannelAlert(final ChannelAlertBody body, final int channelId)\n+            throws AMQException\n     {\n         throw new AMQMethodNotImplementedException(body);\n     }\n \n-    public boolean dispatchMessageEmpty(MessageEmptyBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchMessageGet(MessageGetBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchMessageOffset(MessageOffsetBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchMessageOk(MessageOkBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchMessageOpen(MessageOpenBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchMessageQos(MessageQosBody body, int channelId) throws AMQException\n-    {\n-        throw new AMQMethodNotImplementedException(body);\n-    }\n-\n-    public boolean dispatchMessageRecover(MessageRecoverBody body, int channelId) throws AMQException\n+    public boolean dispatchBasicRecoverSync(BasicRecoverSyncBody body, int channelId) throws AMQException\n     {\n         throw new AMQMethodNotImplementedException(body);\n     }\n \n-    public boolean dispatchMessageReject(MessageRejectBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchMessageResume(MessageResumeBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchMessageTransfer(MessageTransferBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n     public boolean dispatchQueueUnbind(QueueUnbindBody body, int channelId) throws AMQException\n     {\n         throw new AMQMethodNotImplementedException(body);\n     }\n \n-    public boolean dispatchBasicRecoverOk(BasicRecoverOkBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n     public boolean dispatchQueueUnbindOk(QueueUnbindOkBody body, int channelId) throws AMQException\n     {\n         return false;\n     }\n \n-}\n\\ No newline at end of file\n+}"
        },
        {
            "sha": "7d421622e702d4274184bd3bf1667499e974cd3f",
            "filename": "client/src/main/java/org/apache/qpid/client/handler/ClientMethodDispatcherImpl_8_0.java",
            "status": "modified",
            "additions": 19,
            "deletions": 42,
            "changes": 61,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2Fhandler%2FClientMethodDispatcherImpl_8_0.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2Fhandler%2FClientMethodDispatcherImpl_8_0.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2Fhandler%2FClientMethodDispatcherImpl_8_0.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -22,72 +22,49 @@\n \n import org.apache.qpid.AMQException;\n import org.apache.qpid.client.protocol.AMQProtocolSession;\n-import org.apache.qpid.framing.BasicRecoverOkBody;\n+import org.apache.qpid.client.state.AMQMethodNotImplementedException;\n+import org.apache.qpid.framing.BasicRecoverSyncBody;\n+import org.apache.qpid.framing.BasicRecoverSyncOkBody;\n import org.apache.qpid.framing.ChannelAlertBody;\n-import org.apache.qpid.framing.TestContentBody;\n-import org.apache.qpid.framing.TestContentOkBody;\n-import org.apache.qpid.framing.TestIntegerBody;\n-import org.apache.qpid.framing.TestIntegerOkBody;\n-import org.apache.qpid.framing.TestStringBody;\n-import org.apache.qpid.framing.TestStringOkBody;\n-import org.apache.qpid.framing.TestTableBody;\n-import org.apache.qpid.framing.TestTableOkBody;\n-import org.apache.qpid.framing.amqp_8_0.MethodDispatcher_8_0;\n+import org.apache.qpid.framing.MethodDispatcher;\n+import org.apache.qpid.framing.QueueUnbindBody;\n+import org.apache.qpid.framing.QueueUnbindOkBody;\n \n-public class ClientMethodDispatcherImpl_8_0 extends ClientMethodDispatcherImpl implements MethodDispatcher_8_0\n+public class ClientMethodDispatcherImpl_8_0 extends ClientMethodDispatcherImpl implements MethodDispatcher\n {\n     public ClientMethodDispatcherImpl_8_0(AMQProtocolSession session)\n     {\n         super(session);\n     }\n \n-    public boolean dispatchBasicRecoverOk(BasicRecoverOkBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n     public boolean dispatchChannelAlert(ChannelAlertBody body, int channelId) throws AMQException\n     {\n         return false;\n     }\n \n-    public boolean dispatchTestContent(TestContentBody body, int channelId) throws AMQException\n+    @Override\n+    public boolean dispatchQueueUnbindOk(final QueueUnbindOkBody queueUnbindOkBody, final int channelId)\n     {\n         return false;\n     }\n \n-    public boolean dispatchTestContentOk(TestContentOkBody body, int channelId) throws AMQException\n+    @Override\n+    public boolean dispatchBasicRecoverSyncOk(final BasicRecoverSyncOkBody basicRecoverSyncOkBody,\n+                                              final int channelId)\n     {\n         return false;\n     }\n \n-    public boolean dispatchTestInteger(TestIntegerBody body, int channelId) throws AMQException\n+    @Override\n+    public boolean dispatchQueueUnbind(final QueueUnbindBody body, final int channelId) throws AMQException\n     {\n-        return false;\n-    }\n-\n-    public boolean dispatchTestIntegerOk(TestIntegerOkBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchTestString(TestStringBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchTestStringOk(TestStringOkBody body, int channelId) throws AMQException\n-    {\n-        return false;\n-    }\n-\n-    public boolean dispatchTestTable(TestTableBody body, int channelId) throws AMQException\n-    {\n-        return false;\n+        throw new AMQMethodNotImplementedException(body);\n     }\n \n-    public boolean dispatchTestTableOk(TestTableOkBody body, int channelId) throws AMQException\n+    @Override\n+    public boolean dispatchBasicRecoverSync(final BasicRecoverSyncBody body, final int channelId)\n+            throws AMQException\n     {\n-        return false;  \n+        throw new AMQMethodNotImplementedException(body);\n     }\n }"
        },
        {
            "sha": "bb98c0abbd0e5189b665083440ed29fa5be2dd68",
            "filename": "client/src/main/java/org/apache/qpid/client/protocol/AMQProtocolHandler.java",
            "status": "modified",
            "additions": 15,
            "deletions": 5,
            "changes": 20,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2Fprotocol%2FAMQProtocolHandler.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2Fprotocol%2FAMQProtocolHandler.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2Fprotocol%2FAMQProtocolHandler.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -23,8 +23,8 @@\n import java.io.IOException;\n import java.net.SocketAddress;\n import java.nio.ByteBuffer;\n-import java.util.ArrayList;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Set;\n import java.util.concurrent.CopyOnWriteArraySet;\n import java.util.concurrent.CountDownLatch;\n@@ -48,6 +48,7 @@\n import org.apache.qpid.client.state.StateWaiter;\n import org.apache.qpid.client.state.listener.SpecificMethodFrameListener;\n import org.apache.qpid.codec.AMQDecoder;\n+import org.apache.qpid.codec.ClientDecoder;\n import org.apache.qpid.configuration.ClientProperties;\n import org.apache.qpid.framing.AMQBody;\n import org.apache.qpid.framing.AMQDataBlock;\n@@ -193,7 +194,7 @@ public AMQProtocolHandler(AMQConnection con)\n         _connection = con;\n         _protocolSession = new AMQProtocolSession(this, _connection);\n         _stateManager = new AMQStateManager(_protocolSession);\n-        _decoder = new AMQDecoder(false, _protocolSession);\n+        _decoder = new ClientDecoder(_protocolSession.getMethodProcessor());\n         _failoverHandler = new FailoverHandler(this);\n     }\n \n@@ -459,9 +460,10 @@ public void received(ByteBuffer msg)\n     {\n         _readBytes += msg.remaining();\n         _lastReadTime = System.currentTimeMillis();\n+        final List<AMQDataBlock> dataBlocks = _protocolSession.getMethodProcessor().getProcessedMethods();\n         try\n         {\n-            final ArrayList<AMQDataBlock> dataBlocks = _decoder.decodeBuffer(msg);\n+            _decoder.decodeBuffer(msg);\n \n             // Decode buffer\n             int size = dataBlocks.size();\n@@ -511,6 +513,10 @@ else if (message instanceof ProtocolInitiation)\n             propagateExceptionToFrameListeners(e);\n             exception(e);\n         }\n+        finally\n+        {\n+            dataBlocks.clear();\n+        }\n \n \n     }\n@@ -753,8 +759,12 @@ public void closeConnection(long timeout) throws AMQException\n             // Connection is already closed then don't do a syncWrite\n             try\n             {\n-                final ConnectionCloseBody body = _protocolSession.getMethodRegistry().createConnectionCloseBody(AMQConstant.REPLY_SUCCESS.getCode(), // replyCode\n-                        new AMQShortString(\"JMS client is closing the connection.\"), 0, 0);\n+                final ConnectionCloseBody body = _protocolSession.getMethodRegistry().createConnectionCloseBody(\n+                        AMQConstant.REPLY_SUCCESS.getCode(),\n+                        // replyCode\n+                        new AMQShortString(\"JMS client is closing the connection.\"),\n+                        0,\n+                        0);\n                 final AMQFrame frame = body.generateFrame(0);\n \n                 syncWrite(frame, ConnectionCloseOkBody.class, timeout);"
        },
        {
            "sha": "2fbb13079ef3f2c03c9ee6148f93c1713ed854d1",
            "filename": "client/src/main/java/org/apache/qpid/client/protocol/AMQProtocolSession.java",
            "status": "modified",
            "additions": 13,
            "deletions": 3,
            "changes": 16,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2Fprotocol%2FAMQProtocolSession.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2Fprotocol%2FAMQProtocolSession.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2Fprotocol%2FAMQProtocolSession.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -44,6 +44,7 @@\n import org.apache.qpid.framing.ContentBody;\n import org.apache.qpid.framing.ContentHeaderBody;\n import org.apache.qpid.framing.FieldTable;\n+import org.apache.qpid.framing.FrameCreatingMethodProcessor;\n import org.apache.qpid.framing.HeartbeatBody;\n import org.apache.qpid.framing.MethodDispatcher;\n import org.apache.qpid.framing.MethodRegistry;\n@@ -88,8 +89,11 @@ public class AMQProtocolSession implements AMQVersionAwareProtocolSession\n \n     private ProtocolVersion _protocolVersion;\n \n-    private MethodRegistry _methodRegistry =\n-            MethodRegistry.getMethodRegistry(ProtocolVersion.getLatestSupportedVersion());\n+    private final MethodRegistry _methodRegistry =\n+            new MethodRegistry(ProtocolVersion.getLatestSupportedVersion());\n+\n+    private final FrameCreatingMethodProcessor _methodProcessor =\n+            new FrameCreatingMethodProcessor(ProtocolVersion.getLatestSupportedVersion());\n \n     private MethodDispatcher _methodDispatcher;\n \n@@ -416,7 +420,8 @@ public void setProtocolVersion(final ProtocolVersion pv)\n             _logger.debug(\"Setting ProtocolVersion to :\" + pv);\n         }\n         _protocolVersion = pv;\n-        _methodRegistry = MethodRegistry.getMethodRegistry(pv);\n+        _methodRegistry.setProtocolVersion(pv);\n+        _methodProcessor.setProtocolVersion(pv);\n         _methodDispatcher = ClientMethodDispatcherImpl.newMethodDispatcher(pv, this);\n   }\n \n@@ -549,4 +554,9 @@ public void setMaxFrameSize(final long frameMax)\n     {\n         _protocolHandler.setMaxFrameSize(frameMax);\n     }\n+\n+    public FrameCreatingMethodProcessor getMethodProcessor()\n+    {\n+        return _methodProcessor;\n+    }\n }"
        },
        {
            "sha": "2a8ab22b81c9bdc1aa2296122b7847b2d55615f8",
            "filename": "client/src/test/java/org/apache/qpid/client/AMQSession_0_8Test.java",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2FAMQSession_0_8Test.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2FAMQSession_0_8Test.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2FAMQSession_0_8Test.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -23,7 +23,7 @@\n import org.apache.qpid.AMQException;\n import org.apache.qpid.client.transport.TestNetworkConnection;\n import org.apache.qpid.framing.AMQShortString;\n-import org.apache.qpid.framing.amqp_0_91.QueueDeclareOkBodyImpl;\n+import org.apache.qpid.framing.QueueDeclareOkBody;\n import org.apache.qpid.test.utils.QpidTestCase;\n import org.apache.qpid.transport.network.NetworkConnection;\n import org.apache.qpid.url.AMQBindingURL;\n@@ -50,7 +50,7 @@ public void bytesSent(long count)\n             {\n                 try\n                 {\n-                    _connection.getProtocolHandler().methodBodyReceived(1, new QueueDeclareOkBodyImpl(testQueueName, 0, 0));\n+                    _connection.getProtocolHandler().methodBodyReceived(1, new QueueDeclareOkBody(testQueueName, 0, 0));\n                 }\n                 catch (AMQException e)\n                 {"
        },
        {
            "sha": "61e5247eade283cb573096ef9a0652d5093fc2d2",
            "filename": "client/src/test/java/org/apache/qpid/client/protocol/AMQProtocolHandlerTest.java",
            "status": "modified",
            "additions": 6,
            "deletions": 5,
            "changes": 11,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2Fprotocol%2FAMQProtocolHandlerTest.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2Fprotocol%2FAMQProtocolHandlerTest.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fqpid%2Fclient%2Fprotocol%2FAMQProtocolHandlerTest.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -20,6 +20,9 @@\n  */\n package org.apache.qpid.client.protocol;\n \n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n import junit.framework.TestCase;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -32,12 +35,10 @@\n import org.apache.qpid.framing.AMQBody;\n import org.apache.qpid.framing.AMQFrame;\n import org.apache.qpid.framing.AMQMethodBody;\n-import org.apache.qpid.framing.amqp_8_0.BasicRecoverOkBodyImpl;\n+import org.apache.qpid.framing.BasicRecoverSyncOkBody;\n+import org.apache.qpid.framing.ProtocolVersion;\n import org.apache.qpid.protocol.AMQConstant;\n \n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n /**\n  * This is a test address QPID-1431 where frame listeners would fail to be notified of an incomming exception.\n  *\n@@ -75,7 +76,7 @@ public void setUp() throws Exception\n         //Create a new ProtocolHandler with a fake connection.\n         _handler = new AMQProtocolHandler(new MockAMQConnection(\"amqp://guest:guest@client/test?brokerlist='tcp://localhost:1'\"));\n         _handler.setNetworkConnection(new TestNetworkConnection());\n-         AMQBody body = BasicRecoverOkBodyImpl.getFactory().newInstance(null, 1);\n+         AMQBody body = new BasicRecoverSyncOkBody(ProtocolVersion.v8_0);\n         _blockFrame = new AMQFrame(0, body);\n \n         _handleCountDown = new CountDownLatch(1);"
        },
        {
            "sha": "d5a28e3130ae9a93408f77770553164025019dde",
            "filename": "common/build-generate-sources.xml",
            "status": "modified",
            "additions": 2,
            "deletions": 33,
            "changes": 35,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fbuild-generate-sources.xml",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fbuild-generate-sources.xml",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fbuild-generate-sources.xml?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -23,11 +23,7 @@\n   <fail message=\"A required property was not set\">\n     <condition>\n       <not>\n-        <and>\n-          <isset property=\"generated-amqp-0-8-dir\"/>\n-          <isset property=\"generated-amqp-0-10-dir\"/>\n-          <isset property=\"gentools.classes\"/>\n-        </and>\n+        <isset property=\"generated-amqp-0-10-dir\"/>\n       </not>\n     </condition>\n   </fail>\n@@ -39,14 +35,8 @@\n   <property name=\"mllib.dir\" value=\"${basedir}/../../python\"/>\n   <property name=\"xml.spec.dir\" value=\"${basedir}/../../specs\"/>\n \n-  <property name=\"xml.spec.0-8\" value=\"amqp0-8-qpid.stripped.xml\"/>\n-  <property name=\"xml.spec.0-9\" value=\"amqp0-9-qpid.stripped.xml\"/>\n-  <property name=\"xml.spec.0-9-1\" value=\"amqp0-9-1.stripped.xml\"/>\n   <property name=\"xml.spec.0-10\" value=\"amqp.0-10-qpid-errata.stripped.xml\"/>\n-  <property name=\"xml.spec.deps.0-8\" value=\"${xml.spec.0-8} ${xml.spec.0-9} ${xml.spec.0-9-1}\"/>\n-  <property name=\"xml.spec.list.0-8\" value='\"${xml.spec.dir}/${xml.spec.0-8}\" \"${xml.spec.dir}/${xml.spec.0-9}\" \"${xml.spec.dir}/${xml.spec.0-9-1}\"'/>\n \n-  <property name=\"gentools.src\" value=\"${basedir}/gentools/src\"/>\n   <property name=\"generated.package\" value=\"org/apache/qpid/framing\" />\n \n \n@@ -65,27 +55,6 @@\n       </java>\n   </target>\n \n-  <target name=\"compile-gentools\">\n-    <mkdir dir=\"${gentools.classes}\"/>\n-    <javac srcdir=\"${gentools.src}\" destdir=\"${gentools.classes}\" source=\"${java.source}\" target=\"${java.target}\" fork=\"true\" includeantruntime=\"false\">\n-      <classpath>\n-        <path refid=\"source.generation.classpathref\"/>\n-      </classpath>\n-    </javac>\n-  </target>\n-\n-  <target name=\"amqp-0-8-generation\" depends=\"compile-gentools\" if=\"generate.protocol.sources\">\n-    <mkdir dir=\"${generated-amqp-0-8-dir}/${generated.package}\"/>\n-    <echo message=\"Generating AMQP 0-8/0-9/0-9-1 protocol classes...\"/>\n-    <java classname=\"org.apache.qpid.gentools.Main\" fork=\"true\" dir=\"${gentools.classes}\" failonerror=\"true\">\n-      <arg line='-j -o \"${generated-amqp-0-8-dir}/${generated.package}\" -t \"${basedir}/templates\" ${xml.spec.list.0-8}'/>\n-      <classpath>\n-        <pathelement path=\"${gentools.classes}\" />\n-        <path refid=\"source.generation.classpathref\"/>\n-      </classpath>\n-    </java>\n-  </target>\n-\n-  <target name=\"generate-sources\" depends=\"amqp-0-8-generation, amqp-0-10-generation\"/>\n+  <target name=\"generate-sources\" depends=\"amqp-0-10-generation\"/>\n \n </project>"
        },
        {
            "sha": "26195da2e3f60d8e5dd2063f1d7815c780690fb2",
            "filename": "common/gentools/src/org/apache/qpid/gentools/AmqpClass.java",
            "status": "removed",
            "additions": 0,
            "deletions": 197,
            "changes": 197,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpClass.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpClass.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpClass.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,197 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import org.w3c.dom.Node;\n-import org.w3c.dom.NodeList;\n-\n-import java.io.PrintStream;\n-import java.util.Collection;\n-\n-public class AmqpClass implements Printable, NodeAware\n-{\n-\n-    private final AmqpVersionSet _versionSet = new AmqpVersionSet();\n-    private final AmqpFieldMap _fieldMap = new AmqpFieldMap();\n-    private final AmqpMethodMap _methodMap = new AmqpMethodMap();\n-    private final AmqpOrdinalVersionMap _indexMap = new AmqpOrdinalVersionMap();\n-\n-\n-    private final String _name;\n-    private final Generator _generator;\n-\n-    public AmqpClass(String name, Generator generator)\n-    {\n-        _name = name;\n-        _generator = generator;\n-    }\n-\n-    public boolean addFromNode(Node classNode, int ordinal, AmqpVersion version)\n-            throws AmqpParseException, AmqpTypeMappingException\n-    {\n-        getVersionSet().add(version);\n-        int index = Utils.getNamedIntegerAttribute(classNode, \"index\");\n-        AmqpVersionSet indexVersionSet = getIndexMap().get(index);\n-        if (indexVersionSet != null)\n-        {\n-            indexVersionSet.add(version);\n-        }\n-        else\n-        {\n-            indexVersionSet = new AmqpVersionSet();\n-            indexVersionSet.add(version);\n-            getIndexMap().put(index, indexVersionSet);\n-        }\n-        NodeList nList = classNode.getChildNodes();\n-        int fieldCntr = getFieldMap().size();\n-        for (int i = 0; i < nList.getLength(); i++)\n-        {\n-            Node child = nList.item(i);\n-            if (child.getNodeName().compareTo(Utils.ELEMENT_FIELD) == 0)\n-            {\n-                String fieldName = getGenerator().prepareDomainName(Utils.getNamedAttribute(child,\n-                                                                                            Utils.ATTRIBUTE_NAME));\n-                AmqpField thisField = getFieldMap().get(fieldName);\n-                if (thisField == null)\n-                {\n-                    thisField = new AmqpField(fieldName, getGenerator());\n-                    getFieldMap().add(fieldName, thisField);\n-                }\n-                if (!thisField.addFromNode(child, fieldCntr++, version))\n-                {\n-                    String className = getGenerator().prepareClassName(Utils.getNamedAttribute(classNode,\n-                                                                                               Utils.ATTRIBUTE_NAME));\n-                    System.out.println(\"INFO: Generation supression tag found for field \" +\n-                                       className + \".\" + fieldName + \" - removing.\");\n-                    thisField.removeVersion(version);\n-                    getFieldMap().remove(fieldName);\n-                }\n-            }\n-            else if (child.getNodeName().compareTo(Utils.ELEMENT_METHOD) == 0)\n-            {\n-                String methodName = getGenerator().prepareMethodName(Utils.getNamedAttribute(child,\n-                                                                                             Utils.ATTRIBUTE_NAME));\n-                AmqpMethod thisMethod = getMethodMap().get(methodName);\n-                if (thisMethod == null)\n-                {\n-                    thisMethod = new AmqpMethod(methodName, getGenerator());\n-                    getMethodMap().put(methodName, thisMethod);\n-                }\n-                if (!thisMethod.addFromNode(child, 0, version))\n-                {\n-                    String className = getGenerator().prepareClassName(Utils.getNamedAttribute(classNode,\n-                                                                                               Utils.ATTRIBUTE_NAME));\n-                    System.out.println(\"INFO: Generation supression tag found for method \" +\n-                                       className + \".\" + methodName + \" - removing.\");\n-                    thisMethod.removeVersion(version);\n-                    getMethodMap().remove(methodName);\n-                }\n-            }\n-            else if (child.getNodeName().compareTo(Utils.ELEMENT_CODEGEN) == 0)\n-            {\n-                String value = Utils.getNamedAttribute(child, Utils.ATTRIBUTE_VALUE);\n-                if (value.compareTo(\"no-gen\") == 0)\n-                {\n-                    return false;\n-                }\n-            }\n-        }\n-        return true;\n-    }\n-\n-    public void removeVersion(AmqpVersion version)\n-    {\n-        getIndexMap().removeVersion(version);\n-        getFieldMap().removeVersion(version);\n-        getMethodMap().removeVersion(version);\n-        getVersionSet().remove(version);\n-    }\n-\n-    public void print(PrintStream out, int marginSize, int tabSize)\n-    {\n-        String margin = Utils.createSpaces(marginSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        out.println(margin + \"[C] \" + getName() + \": \" + getVersionSet());\n-\n-        for (Integer thisIndex : getIndexMap().keySet())\n-        {\n-            AmqpVersionSet indexVersionSet = getIndexMap().get(thisIndex);\n-            out.println(margin + tab + \"[I] \" + thisIndex + indexVersionSet);\n-        }\n-\n-        for (String thisFieldName : getFieldMap().keySet())\n-        {\n-            AmqpField thisField = getFieldMap().get(thisFieldName);\n-            thisField.print(out, marginSize + tabSize, tabSize);\n-        }\n-\n-        for (String thisMethodName : getMethodMap().keySet())\n-        {\n-            AmqpMethod thisMethod = getMethodMap().get(thisMethodName);\n-            thisMethod.print(out, marginSize + tabSize, tabSize);\n-        }\n-    }\n-\n-    public AmqpVersionSet getVersionSet()\n-    {\n-        return _versionSet;\n-    }\n-\n-    public Generator getGenerator()\n-    {\n-        return _generator;\n-    }\n-\n-\n-    public AmqpFieldMap getFieldMap()\n-    {\n-        return _fieldMap;\n-    }\n-\n-\n-    public AmqpMethodMap getMethodMap()\n-    {\n-        return _methodMap;\n-    }\n-\n-    public Collection<AmqpMethod> getMethods()\n-    {\n-        return getMethodMap().values();\n-    }\n-\n-\n-    public String getName()\n-    {\n-        return _name;\n-    }\n-\n-\n-    public AmqpOrdinalVersionMap getIndexMap()\n-    {\n-        return _indexMap;\n-    }\n-\n-    public SingleVersionClass asSingleVersionClass(AmqpVersion version)\n-    {\n-        return new SingleVersionClass(this,version, _generator);\n-    }\n-\n-}"
        },
        {
            "sha": "a27a50d07e75c684bc7628f29a7b3dfac066616b",
            "filename": "common/gentools/src/org/apache/qpid/gentools/AmqpClassMap.java",
            "status": "removed",
            "additions": 0,
            "deletions": 29,
            "changes": 29,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpClassMap.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpClassMap.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpClassMap.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,29 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import java.util.TreeMap;\n-\n-@SuppressWarnings(\"serial\")\n-public class AmqpClassMap extends TreeMap<String, AmqpClass>\n-{\n-\n-}"
        },
        {
            "sha": "df5bc6c36257cefc1390c12bc648daa494770716",
            "filename": "common/gentools/src/org/apache/qpid/gentools/AmqpConstant.java",
            "status": "removed",
            "additions": 0,
            "deletions": 191,
            "changes": 191,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpConstant.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpConstant.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpConstant.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,191 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import java.io.PrintStream;\n-import java.util.TreeMap;\n-\n-/**\n- * @author kpvdr\n- *         Class to represent the &lt;constant&gt; declaration within the AMQP specification.\n- *         Currently, only integer values exist within the specification, however looking forward\n- *         to other possible types in the future, string and double types are also supported.\n- *         <p/>\n- *         The &lt;constant&gt; declaration in the specification contains only two attributes:\n- *         name and value.\n- *         <p/>\n- *         The value of the constant is mapped against the version(s) for which the name is defined.\n- *         This allows for a change in the value rather than the name only from one version to the next.\n- */\n-@SuppressWarnings(\"serial\")\n-public class AmqpConstant extends TreeMap<String, AmqpVersionSet>\n-        implements Printable, VersionConsistencyCheck, Comparable<AmqpConstant>\n-{\n-    /**\n-     * Constant name as defined by the name attribute of the &lt;constant&gt; declaration.\n-     */\n-    private final String _name;\n-\n-    /**\n-     * Set of versions for which this constant name is defined.\n-     */\n-    private final AmqpVersionSet _versionSet;\n-\n-    /**\n-     * Constructor\n-     *\n-     * @param name    Constant name as defined by the name attribute of the &lt;constant&gt; declaration.\n-     * @param value   Constant value as defined by the value attribute of the &lt;constant&gt; declaration.\n-     * @param version AMQP version for which this constant is defined\n-     */\n-    public AmqpConstant(String name, String value, AmqpVersion version)\n-    {\n-        _name = name;\n-        _versionSet = new AmqpVersionSet(version);\n-        AmqpVersionSet valueVersionSet = new AmqpVersionSet(version);\n-        put(value, valueVersionSet);\n-    }\n-\n-\n-    /**\n-     * Get the name of this constant.\n-     *\n-     * @return Name of this constant, being the name attribute of the &lt;constant&gt; declaration\n-     *         represented by this class.\n-     */\n-    public String getName()\n-    {\n-        return _name;\n-    }\n-\n-    /**\n-     * Get the value of this constant as a String.\n-     *\n-     * @param version AMQP version for which this value is required.\n-     * @return Value of this constant, being the value attribute of the &lt;constant&gt; declaration\n-     *         represented by this class.\n-     * @throws AmqpTypeMappingException when a value is requested for a version for which it is not\n-     *                                  defined in the AMQP specifications.\n-     */\n-    public String getStringValue(AmqpVersion version)\n-            throws AmqpTypeMappingException\n-    {\n-        for (String thisValue : keySet())\n-        {\n-            AmqpVersionSet versionSet = get(thisValue);\n-            if (versionSet.contains(version))\n-            {\n-                return thisValue;\n-            }\n-        }\n-        throw new AmqpTypeMappingException(\"Unable to find value for constant \\\"\" + getName() +\n-                                           \"\\\" for version \" + version.toString() + \".\");\n-    }\n-\n-    /**\n-     * Get the value of this constant as an integer.\n-     *\n-     * @param version AMQP version for which this value is required.\n-     * @return Value of this constant, being the value attribute of the &lt;constant&gt; declaration\n-     *         represented by this class.\n-     * @throws AmqpTypeMappingException when a value is requested for a version for which it is not\n-     *                                  defined in the AMQP specifications.\n-     */\n-    public int getIntegerValue(AmqpVersion version)\n-            throws AmqpTypeMappingException\n-    {\n-        return Integer.parseInt(getStringValue(version));\n-    }\n-\n-    /**\n-     * Get the value of this constant as a double.\n-     *\n-     * @param version AMQP version for which this value is required.\n-     * @return Value of this constant, being the value attribute of the &lt;constant&gt; declaration\n-     *         represented by this class.\n-     * @throws AmqpTypeMappingException when a value is requested for a version for which it is not\n-     *                                  defined in the AMQP specifications.\n-     */\n-    public double getDoubleValue(AmqpVersion version)\n-            throws AmqpTypeMappingException\n-    {\n-        return Double.parseDouble(getStringValue(version));\n-    }\n-\n-    /**\n-     * Get the version set for this constant. It contains the all the versions for which this\n-     * constant name exists.\n-     *\n-     * @return Set of versions for which this constant exists.\n-     */\n-    public AmqpVersionSet getVersionSet()\n-    {\n-        return _versionSet;\n-    }\n-\n-    /* (non-Javadoc)\n-    * @see java.lang.Comparable#compareTo(java.lang.Object)\n-    */\n-\n-    public int compareTo(AmqpConstant other)\n-    {\n-        int res = getName().compareTo(other.getName());\n-        if (res != 0)\n-        {\n-            return res;\n-        }\n-        return getVersionSet().compareTo(other.getVersionSet());\n-    }\n-\n-    /* (non-Javadoc)\n-     * @see org.apache.qpid.gentools.VersionConsistencyCheck#isVersionConsistent(org.apache.qpid.gentools.AmqpVersionSet)\n-     */\n-    public boolean isVersionConsistent(AmqpVersionSet globalVersionSet)\n-    {\n-        if (size() != 1)\n-        {\n-            return false;\n-        }\n-        return get(firstKey()).equals(globalVersionSet);\n-    }\n-\n-    /* (non-Javadoc)\n-     * @see org.apache.qpid.gentools.Printable#print(java.io.PrintStream, int, int)\n-     */\n-    public void print(PrintStream out, int marginSize, int tabSize)\n-    {\n-        String margin = Utils.createSpaces(marginSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        if (size() == 1)\n-        {\n-            out.println(margin + tab + \"[C] \" + getName() + \" = \\\"\" + firstKey() + \"\\\" \" + getVersionSet());\n-        }\n-        else\n-        {\n-            out.println(margin + tab + \"[C] \" + getName() + \": \" + getVersionSet());\n-            for (String thisValue : keySet())\n-            {\n-                out.println(margin + tab + tab + \"= \\\"\" + thisValue + \"\\\" \" + get(thisValue));\n-            }\n-        }\n-    }\n-\n-}"
        },
        {
            "sha": "ab8b8be61e0de79dbfeeb667ad7c444a5a1d2642",
            "filename": "common/gentools/src/org/apache/qpid/gentools/AmqpConstantSet.java",
            "status": "removed",
            "additions": 0,
            "deletions": 152,
            "changes": 152,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpConstantSet.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpConstantSet.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpConstantSet.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,152 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import org.w3c.dom.Node;\n-import org.w3c.dom.NodeList;\n-\n-import java.io.PrintStream;\n-import java.util.Iterator;\n-import java.util.TreeSet;\n-\n-/**\n- * @author kpvdr\n- *         This class implements a set collection for {@link AmqpConstant AmqpConstant} objects, being the collection\n- *         of constants accumulated from various AMQP specification files processed. Each name occurs once only in the set.\n- *         The {@link AmqpConstant AmqpConstant} objects (derived from {@link java.util.TreeMap TreeMap}) keep track of\n- *         the value and version(s) assigned to this name.\n- */\n-@SuppressWarnings(\"serial\")\n-public class AmqpConstantSet implements Printable, NodeAware //, Comparable<AmqpConstantSet>\n-{\n-    private final LanguageConverter _converter;\n-    private final TreeSet<AmqpConstant> _constants = new TreeSet<AmqpConstant>();\n-    private final AmqpVersionSet _versionSet = new AmqpVersionSet();\n-\n-    public AmqpConstantSet(LanguageConverter converter)\n-    {\n-        _converter = converter;\n-\n-    }\n-\n-    /* (non-Javadoc)\n-    * @see org.apache.qpid.gentools.NodeAware#addFromNode(org.w3c.dom.Node, int, org.apache.qpid.gentools.AmqpVersion)\n-    */\n-    public boolean addFromNode(Node node, int ordinal, AmqpVersion version)\n-            throws AmqpParseException, AmqpTypeMappingException\n-    {\n-        _versionSet.add(version);\n-        NodeList nodeList = node.getChildNodes();\n-        for (int i = 0; i < nodeList.getLength(); i++)\n-        {\n-            Node childNode = nodeList.item(i);\n-            if (childNode.getNodeName().compareTo(Utils.ELEMENT_CONSTANT) == 0)\n-            {\n-                String name = getConverter().prepareConstantName(Utils.getNamedAttribute(childNode, Utils.ATTRIBUTE_NAME));\n-                String value = Utils.getNamedAttribute(childNode, Utils.ATTRIBUTE_VALUE);\n-                // Find this name in the existing set of objects\n-                boolean foundName = false;\n-                Iterator<AmqpConstant> cItr = _constants.iterator();\n-                while (cItr.hasNext() && !foundName)\n-                {\n-                    AmqpConstant thisConstant = cItr.next();\n-                    if (name.compareTo(thisConstant.getName()) == 0)\n-                    {\n-                        foundName = true;\n-                        thisConstant.getVersionSet().add(version);\n-                        // Now, find the value in the map\n-                        boolean foundValue = false;\n-                        for (String thisValue : thisConstant.keySet())\n-                        {\n-                            if (value.compareTo(thisValue) == 0)\n-                            {\n-                                foundValue = true;\n-                                // Add this version to existing version set.\n-                                AmqpVersionSet versionSet = thisConstant.get(thisValue);\n-                                versionSet.add(version);\n-                            }\n-                        }\n-                        // Check that the value was found - if not, add it\n-                        if (!foundValue)\n-                        {\n-                            thisConstant.put(value, new AmqpVersionSet(version));\n-                        }\n-                    }\n-                }\n-                // Check that the name was found - if not, add it\n-                if (!foundName)\n-                {\n-                    _constants.add(new AmqpConstant(name, value, version));\n-                }\n-            }\n-        }\n-        return true;\n-    }\n-\n-    /* (non-Javadoc)\n-    * @see org.apache.qpid.gentools.Printable#print(java.io.PrintStream, int, int)\n-    */\n-    public void print(PrintStream out, int marginSize, int tabSize)\n-    {\n-        out.println(Utils.createSpaces(marginSize) + \"Constants: \");\n-        for (AmqpConstant thisAmqpConstant : _constants)\n-        {\n-            thisAmqpConstant.print(out, marginSize, tabSize);\n-        }\n-    }\n-\n-    /* (non-Javadoc)\n-    * @see java.lang.Comparable#compareTo(java.lang.Object)\n-    */\n-//    public int compareTo(AmqpConstantSet other)\n-//    {\n-//        int res = size() - other.size();\n-//        if (res != 0)\n-//            return res;\n-//        Iterator<AmqpConstant> cItr = iterator();\n-//        Iterator<AmqpConstant> oItr = other.iterator();\n-//        while (cItr.hasNext() && oItr.hasNext())\n-//        {\n-//            AmqpConstant constant = cItr.next();\n-//            AmqpConstant oConstant = oItr.next();\n-//            res = constant.compareTo(oConstant);\n-//            if (res != 0)\n-//                return res;\n-//        }\n-//        return 0;\n-//    }\n-\n-    public Iterable<? extends AmqpConstant> getContstants()\n-    {\n-        return _constants;\n-    }\n-\n-    public AmqpVersionSet getVersionSet()\n-    {\n-        return _versionSet;\n-    }\n-\n-    public LanguageConverter getConverter()\n-    {\n-        return _converter;\n-    }\n-\n-}"
        },
        {
            "sha": "ba8552a6a6fc2b6847f38f7a7a339b251e932b12",
            "filename": "common/gentools/src/org/apache/qpid/gentools/AmqpDomain.java",
            "status": "removed",
            "additions": 0,
            "deletions": 89,
            "changes": 89,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpDomain.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpDomain.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpDomain.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,89 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import java.io.PrintStream;\n-import java.util.TreeMap;\n-\n-@SuppressWarnings(\"serial\")\n-public class AmqpDomain extends TreeMap<String, AmqpVersionSet> implements Printable\n-{\n-    private final String _domainName;\n-\n-    public AmqpDomain(String domainName)\n-    {\n-        _domainName = domainName;\n-    }\n-\n-    public void addDomain(String domainType, AmqpVersion version) throws AmqpParseException\n-    {\n-        AmqpVersionSet versionSet = get(domainType);\n-        if (versionSet == null) // First time, create new entry\n-        {\n-            versionSet = new AmqpVersionSet();\n-            put(domainType, versionSet);\n-        }\n-        versionSet.add(version);\n-    }\n-\n-    public String getDomainType(AmqpVersion version)\n-            throws AmqpTypeMappingException\n-    {\n-        for (String thisDomainType : keySet())\n-        {\n-            AmqpVersionSet versionSet = get(thisDomainType);\n-            if (versionSet.contains(version))\n-            {\n-                return thisDomainType;\n-            }\n-        }\n-        throw new AmqpTypeMappingException(\"Unable to find version \" + version + \".\");\n-    }\n-\n-    public boolean hasVersion(String type, AmqpVersion v)\n-    {\n-        AmqpVersionSet vs = get(type);\n-        if (vs == null)\n-        {\n-            return false;\n-        }\n-        return vs.contains(v);\n-    }\n-\n-    public void print(PrintStream out, int marginSize, int tabSize)\n-    {\n-        String margin = Utils.createSpaces(marginSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        out.println(margin + getDomainName() + \":\");\n-\n-        for (String thisDomainType : keySet())\n-        {\n-            AmqpVersionSet vs = get(thisDomainType);\n-            out.println(margin + tab + thisDomainType + \" : \" + vs.toString());\n-        }\n-    }\n-\n-    public String getDomainName()\n-    {\n-        return _domainName;\n-    }\n-\n-}"
        },
        {
            "sha": "0cd9d214bd0490055070fdbcc961f9afac6c2044",
            "filename": "common/gentools/src/org/apache/qpid/gentools/AmqpDomainMap.java",
            "status": "removed",
            "additions": 0,
            "deletions": 128,
            "changes": 128,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpDomainMap.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpDomainMap.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpDomainMap.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,128 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import org.w3c.dom.Node;\n-import org.w3c.dom.NodeList;\n-\n-import java.io.PrintStream;\n-import java.util.TreeMap;\n-\n-@SuppressWarnings(\"serial\")\n-public class AmqpDomainMap extends TreeMap<String, AmqpDomain> implements Printable, NodeAware\n-{\n-    private final LanguageConverter _converter;\n-\n-    public AmqpDomainMap(LanguageConverter converter)\n-    {\n-        _converter = converter;\n-\n-    }\n-\n-    public boolean addFromNode(Node n, int o, AmqpVersion v)\n-            throws AmqpParseException, AmqpTypeMappingException\n-    {\n-        NodeList nl = n.getChildNodes();\n-        for (int i = 0; i < nl.getLength(); i++)\n-        {\n-            Node c = nl.item(i);\n-            // All versions 0.9 and greater use <domain> for all domains\n-            if (c.getNodeName().compareTo(Utils.ELEMENT_DOMAIN) == 0)\n-            {\n-                String domainName = getConverter().prepareDomainName(Utils.getNamedAttribute(c, Utils.ATTRIBUTE_NAME));\n-                String type = Utils.getNamedAttribute(c, Utils.ATTRIBUTE_TYPE);\n-                AmqpDomain thisDomain = get(domainName);\n-                if (thisDomain == null)\n-                {\n-                    thisDomain = new AmqpDomain(domainName);\n-                    put(domainName, thisDomain);\n-                }\n-                thisDomain.addDomain(type, v);\n-            }\n-            // Version(s) 0.8 and earlier use <domain> for all complex domains and use\n-            // attribute <field type=\"\"...> for simple types. Add these simple types to\n-            // domain list - but beware of duplicates!\n-            else if (c.getNodeName().compareTo(Utils.ELEMENT_FIELD) == 0)\n-            {\n-                try\n-                {\n-                    String type = getConverter().prepareDomainName(Utils.getNamedAttribute(c, Utils.ATTRIBUTE_TYPE));\n-                    AmqpDomain thisDomain = get(type);\n-                    if (thisDomain == null)\n-                    {\n-                        thisDomain = new AmqpDomain(type);\n-                        put(type, thisDomain);\n-                    }\n-                    if (!thisDomain.hasVersion(type, v))\n-                    {\n-                        thisDomain.addDomain(type, v);\n-                    }\n-                }\n-                catch (AmqpParseException e)\n-                {\n-                } // Ignore fields without type attribute\n-            }\n-            else if (c.getNodeName().compareTo(Utils.ELEMENT_CLASS) == 0 ||\n-                     c.getNodeName().compareTo(Utils.ELEMENT_METHOD) == 0)\n-            {\n-                addFromNode(c, 0, v);\n-            }\n-        }\n-        return true;\n-    }\n-\n-    public String getDomainType(String domainName, AmqpVersion version)\n-    {\n-        AmqpDomain domainType = get(domainName);\n-        // For AMQP 8.0, primitive types were not described as domains, so\n-        // return itself as the type.\n-        if (domainType == null)\n-        {\n-            return domainName;\n-        }\n-        try\n-        {\n-            return domainType.getDomainType(version);\n-        }\n-        catch (AmqpTypeMappingException e)\n-        {\n-            throw new AmqpTypeMappingException(\"Unable to find domain type for domain \\\"\" + domainName +\n-                                               \"\\\" version \" + version + \".\");\n-        }\n-    }\n-\n-\n-    public void print(PrintStream out, int marginSize, int tabSize)\n-    {\n-        out.println(Utils.createSpaces(marginSize) + \"Domain Map:\");\n-        for (String thisDomainName : keySet())\n-        {\n-            AmqpDomain domain = get(thisDomainName);\n-            domain.print(out, marginSize + tabSize, tabSize);\n-        }\n-    }\n-\n-    public LanguageConverter getConverter()\n-    {\n-        return _converter;\n-    }\n-\n-}"
        },
        {
            "sha": "e39550b96f5d2e721a3ffd95a550b87662492c8c",
            "filename": "common/gentools/src/org/apache/qpid/gentools/AmqpDomainVersionMap.java",
            "status": "removed",
            "additions": 0,
            "deletions": 62,
            "changes": 62,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpDomainVersionMap.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpDomainVersionMap.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpDomainVersionMap.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,62 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import java.util.ArrayList;\n-import java.util.TreeMap;\n-\n-@SuppressWarnings(\"serial\")\n-public class AmqpDomainVersionMap extends TreeMap<String, AmqpVersionSet> implements VersionConsistencyCheck\n-{\n-    public boolean isVersionConsistent(AmqpVersionSet globalVersionSet)\n-    {\n-        if (size() != 1)\n-        {\n-            return false;\n-        }\n-        return get(firstKey()).equals(globalVersionSet);\n-    }\n-\n-    public boolean removeVersion(AmqpVersion version)\n-    {\n-        Boolean res = false;\n-        ArrayList<String> removeList = new ArrayList<String>();\n-        for (String domainName : keySet())\n-        {\n-            AmqpVersionSet versionSet = get(domainName);\n-            if (versionSet.contains(version))\n-            {\n-                versionSet.remove(version);\n-                if (versionSet.isEmpty())\n-                {\n-                    removeList.add(domainName);\n-                }\n-                res = true;\n-            }\n-        }\n-        // Get rid of domains no longer in use\n-        for (String domainName : removeList)\n-        {\n-            remove(domainName);\n-        }\n-        return res;\n-    }\n-}"
        },
        {
            "sha": "7c721cf913f35266b77469f483ce4b5c8f4a8394",
            "filename": "common/gentools/src/org/apache/qpid/gentools/AmqpField.java",
            "status": "removed",
            "additions": 0,
            "deletions": 269,
            "changes": 269,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpField.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpField.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpField.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,269 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import org.w3c.dom.Node;\n-import org.w3c.dom.NodeList;\n-\n-import java.io.PrintStream;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-public class AmqpField implements Printable, NodeAware, VersionConsistencyCheck\n-{\n-\n-    private final AmqpVersionSet _versionSet = new AmqpVersionSet();\n-    private final AmqpDomainVersionMap _domainMap = new AmqpDomainVersionMap();\n-    private final AmqpOrdinalVersionMap _ordinalMap = new AmqpOrdinalVersionMap();\n-\n-    private final String _name;\n-    private final Generator _generator;\n-\n-    private final Map<AmqpVersion, String> _versionToDomainMap = new HashMap<AmqpVersion, String>();\n-    private final Map<AmqpVersion, Integer> _versionToOrdinalMap = new HashMap<AmqpVersion, Integer>();\n-\n-\n-    public AmqpField(String name, Generator generator)\n-    {\n-        _name = name;\n-        _generator = generator;\n-\n-    }\n-\n-    public boolean addFromNode(Node fieldNode, int ordinal, AmqpVersion version)\n-            throws AmqpParseException, AmqpTypeMappingException\n-    {\n-        _versionSet.add(version);\n-        String domainType;\n-        // Early versions of the spec (8.0) used the \"type\" attribute instead of \"domain\" for some fields.\n-        try\n-        {\n-            domainType = _generator.prepareDomainName(Utils.getNamedAttribute(fieldNode, Utils.ATTRIBUTE_DOMAIN));\n-        }\n-        catch (AmqpParseException e)\n-        {\n-            domainType = _generator.prepareDomainName(Utils.getNamedAttribute(fieldNode, Utils.ATTRIBUTE_TYPE));\n-        }\n-        AmqpVersionSet thisVersionList = _domainMap.get(domainType);\n-        if (thisVersionList == null) // First time, create new entry\n-        {\n-            thisVersionList = new AmqpVersionSet();\n-            _domainMap.put(domainType, thisVersionList);\n-        }\n-\n-        _versionToDomainMap.put(version, domainType);\n-        _versionToOrdinalMap.put(version, ordinal);\n-\n-        thisVersionList.add(version);\n-        thisVersionList = _ordinalMap.get(ordinal);\n-        if (thisVersionList == null) // First time, create new entry\n-        {\n-            thisVersionList = new AmqpVersionSet();\n-            _ordinalMap.put(ordinal, thisVersionList);\n-        }\n-        thisVersionList.add(version);\n-        NodeList nList = fieldNode.getChildNodes();\n-        for (int i = 0; i < nList.getLength(); i++)\n-        {\n-            Node child = nList.item(i);\n-            if (child.getNodeName().compareTo(Utils.ELEMENT_CODEGEN) == 0)\n-            {\n-                String value = Utils.getNamedAttribute(child, Utils.ATTRIBUTE_VALUE);\n-                if (value.compareTo(\"no-gen\") == 0)\n-                {\n-                    return false;\n-                }\n-            }\n-        }\n-        return true;\n-    }\n-\n-    public void removeVersion(AmqpVersion version)\n-    {\n-        _domainMap.removeVersion(version);\n-        _ordinalMap.removeVersion(version);\n-        _versionSet.remove(version);\n-    }\n-\n-    public boolean isCodeTypeConsistent(LanguageConverter converter)\n-            throws AmqpTypeMappingException\n-    {\n-        if (_domainMap.size() == 1)\n-        {\n-            return true; // By definition\n-        }\n-        ArrayList<String> codeTypeList = new ArrayList<String>();\n-        for (String thisDomainName : _domainMap.keySet())\n-        {\n-            AmqpVersionSet versionSet = _domainMap.get(thisDomainName);\n-            String codeType = converter.getGeneratedType(thisDomainName, versionSet.first());\n-            if (!codeTypeList.contains(codeType))\n-            {\n-                codeTypeList.add(codeType);\n-            }\n-        }\n-        return codeTypeList.size() == 1;\n-    }\n-\n-    public boolean isConsistent(Generator generator)\n-            throws AmqpTypeMappingException\n-    {\n-        if (!isCodeTypeConsistent(generator))\n-        {\n-            return false;\n-        }\n-        if (_ordinalMap.size() != 1)\n-        {\n-            return false;\n-        }\n-        // Since the various doamin names map to the same code type, add the version occurrences\n-        // across all domains to see we have all possible versions covered\n-        int vCntr = 0;\n-        for (String thisDomainName : _domainMap.keySet())\n-        {\n-            vCntr += _domainMap.get(thisDomainName).size();\n-        }\n-        return vCntr == generator.getVersionSet().size();\n-    }\n-\n-    public boolean isTypeAndNameConsistent(Generator generator)\n-            throws AmqpTypeMappingException\n-    {\n-        if (!isCodeTypeConsistent(generator))\n-        {\n-            return false;\n-        }\n-        // Since the various doamin names map to the same code type, add the version occurrences\n-        // across all domains to see we have all possible versions covered\n-        int vCntr = 0;\n-        for (String thisDomainName : _domainMap.keySet())\n-        {\n-            vCntr += _domainMap.get(thisDomainName).size();\n-        }\n-        return vCntr == getVersionSet().size();\n-    }\n-\n-\n-    public void print(PrintStream out, int marginSize, int tabSize)\n-    {\n-        String margin = Utils.createSpaces(marginSize);\n-        out.println(margin + \"[F] \" + _name + \": \" + _versionSet);\n-\n-        for (Integer thisOrdinal : _ordinalMap.keySet())\n-        {\n-            AmqpVersionSet versionList = _ordinalMap.get(thisOrdinal);\n-            out.println(margin + \"  [O] \" + thisOrdinal + \" : \" + versionList.toString());\n-        }\n-\n-        for (String thisDomainName : _domainMap.keySet())\n-        {\n-            AmqpVersionSet versionList = _domainMap.get(thisDomainName);\n-            out.println(margin + \"  [D] \" + thisDomainName + \" : \" + versionList.toString());\n-        }\n-    }\n-\n-    public boolean isVersionConsistent(AmqpVersionSet globalVersionSet)\n-    {\n-        if (!_versionSet.equals(globalVersionSet))\n-        {\n-            return false;\n-        }\n-        if (!_domainMap.isVersionConsistent(globalVersionSet))\n-        {\n-            return false;\n-        }\n-        if (!_ordinalMap.isVersionConsistent(globalVersionSet))\n-        {\n-            return false;\n-        }\n-        return true;\n-    }\n-\n-\n-    public boolean isVersionInterfaceConsistent(AmqpVersionSet globalVersionSet)\n-    {\n-        if (!_versionSet.equals(globalVersionSet))\n-        {\n-            return false;\n-        }\n-        if (!_domainMap.isVersionConsistent(globalVersionSet))\n-        {\n-            return false;\n-        }\n-        if (!_ordinalMap.isVersionConsistent(globalVersionSet))\n-        {\n-            return false;\n-        }\n-        return true;\n-    }\n-\n-    public String getDomain(AmqpVersion version)\n-    {\n-        return _versionToDomainMap.get(version);\n-    }\n-\n-    public String getConsistentNativeType()\n-    {\n-        return _generator.getNativeType(_generator.getDomainType(getDomain(_versionSet.first()),_versionSet.first()));\n-    }\n-\n-    public int getOrdinal(AmqpVersion version)\n-    {\n-        return _versionToOrdinalMap.get(version);\n-    }\n-\n-    public AmqpVersionSet getVersionSet()\n-    {\n-        return _versionSet;\n-    }\n-\n-    public AmqpDomainVersionMap getDomainMap()\n-    {\n-        return _domainMap;\n-    }\n-\n-    public AmqpOrdinalVersionMap getOrdinalMap()\n-    {\n-        return _ordinalMap;\n-    }\n-\n-    public String getName()\n-    {\n-        return _name;\n-    }\n-\n-    public LanguageConverter getGenerator()\n-    {\n-        return _generator;\n-    }\n-\n-    public Map<AmqpVersion, String> getVersionToDomainMap()\n-    {\n-        return _versionToDomainMap;\n-    }\n-\n-    public Map<AmqpVersion, Integer> getVersionToOrdinalMap()\n-    {\n-        return _versionToOrdinalMap;\n-    }\n-\n-}"
        },
        {
            "sha": "0bb5e03a61eb3d0f8622da3d16972715e45a7fb5",
            "filename": "common/gentools/src/org/apache/qpid/gentools/AmqpFieldMap.java",
            "status": "removed",
            "additions": 0,
            "deletions": 452,
            "changes": 452,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpFieldMap.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpFieldMap.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpFieldMap.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,452 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Iterator;\n-import java.util.Map;\n-import java.util.Map.Entry;\n-import java.util.Set;\n-import java.util.TreeMap;\n-\n-@SuppressWarnings(\"serial\")\n-public class AmqpFieldMap implements VersionConsistencyCheck\n-{\n-\n-    private final TreeMap<String, AmqpField> _map = new TreeMap<String, AmqpField>();\n-\n-    private final AmqpVersionSet _versionSet = new AmqpVersionSet();\n-\n-    public void removeVersion(AmqpVersion version)\n-    {\n-        String[] fieldNameArray = new String[size()];\n-        _map.keySet().toArray(fieldNameArray);\n-        Iterator<Entry<String, AmqpField>> iter = _map.entrySet().iterator();\n-\n-        while (iter.hasNext())\n-        {\n-            Entry<String, AmqpField> entry = iter.next();\n-            entry.getValue().removeVersion(version);\n-            iter.remove();\n-        }\n-    }\n-\n-    public int size()\n-    {\n-        return _map.size();\n-\n-    }\n-\n-    public AmqpFieldMap getFieldMapForOrdinal(int ordinal)\n-    {\n-        AmqpFieldMap newMap = new AmqpFieldMap();\n-        for (AmqpField field : _map.values())\n-        {\n-\n-            TreeMap<Integer, AmqpVersionSet> ordinalMap = field.getOrdinalMap();\n-            AmqpVersionSet ordinalVersions = ordinalMap.get(ordinal);\n-            if (ordinalVersions != null)\n-            {\n-                newMap.add(field.getName(), field);\n-            }\n-        }\n-        return newMap;\n-    }\n-\n-    public void add(String name, AmqpField field)\n-    {\n-        _versionSet.addAll(field.getVersionSet());\n-        _map.put(name, field);\n-    }\n-\n-    public AmqpOrdinalFieldMap getMapForVersion(AmqpVersion version, boolean codeTypeFlag,\n-                                                LanguageConverter converter)\n-    {\n-        // TODO: REVIEW THIS! There may be a bug here that affects C++ generation (only with >1 version)...\n-        // If version == null (a common scenario) then the version map is built up on the\n-        // basis of first found item, and ignores other version variations.\n-        // This should probably be disallowed by throwing an NPE, as AmqpOrdinalFieldMap cannot\n-        // represent these possibilities.\n-        // *OR*\n-        // Change the structure of AmqpOrdianlFieldMap to allow for the various combinations that\n-        // will result from version variation - but that is what AmqpFieldMap is... :-$\n-        AmqpOrdinalFieldMap ordinalFieldMap = new AmqpOrdinalFieldMap();\n-        for (AmqpField field : _map.values())\n-        {\n-\n-            if (version == null || field.getVersionSet().contains(version))\n-            {\n-                // 1. Search for domain name in field domain map with version that matches\n-                String domain = \"\";\n-                boolean dFound = false;\n-                for (String thisDomainName : field.getDomainMap().keySet())\n-                {\n-                    domain = thisDomainName;\n-                    AmqpVersionSet versionSet = field.getDomainMap().get(domain);\n-                    if (version == null || versionSet.contains(version))\n-                    {\n-                        if (codeTypeFlag)\n-                        {\n-                            domain = converter.getGeneratedType(domain, version);\n-                        }\n-                        dFound = true;\n-                    }\n-                }\n-\n-                // 2. Search for ordinal in field ordianl map with version that matches\n-                int ordinal = -1;\n-                boolean oFound = false;\n-                for (Integer thisOrdinal : field.getOrdinalMap().keySet())\n-                {\n-                    ordinal = thisOrdinal;\n-                    AmqpVersionSet versionSet = field.getOrdinalMap().get(ordinal);\n-                    if (version == null || versionSet.contains(version))\n-                    {\n-                        oFound = true;\n-                    }\n-                }\n-\n-                if (dFound && oFound)\n-                {\n-                    String[] fieldDomainPair = {field.getName(), domain};\n-                    ordinalFieldMap.put(ordinal, fieldDomainPair);\n-                }\n-            }\n-        }\n-        return ordinalFieldMap;\n-    }\n-\n-    public boolean isDomainConsistent(Generator generator, AmqpVersionSet versionSet)\n-            throws AmqpTypeMappingException\n-    {\n-        if (size() != 1) // Only one field for this ordinal\n-        {\n-            return false;\n-        }\n-        return _map.get(_map.firstKey()).isConsistent(generator);\n-    }\n-\n-    public int getNumFields(AmqpVersion version)\n-    {\n-        int fCntr = 0;\n-        for (AmqpField field : _map.values())\n-        {\n-\n-            if (field.getVersionSet().contains(version))\n-            {\n-                fCntr++;\n-            }\n-        }\n-        return fCntr;\n-    }\n-\n-    public String parseFieldMap(CommandGenerateMethod commonGenerateMethod, MangledGenerateMethod mangledGenerateMethod,\n-                                int indentSize, int tabSize, LanguageConverter converter)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        String cr = Utils.LINE_SEPARATOR;\n-        StringBuffer sb = new StringBuffer();\n-\n-        if (commonGenerateMethod == null)\n-        {\n-            // Generate warnings in code if required methods are null.\n-            sb.append(indent + \"/*********************************************************\" + cr);\n-            sb.append(indent + \" * WARNING: Generated code could be missing.\" + cr);\n-            sb.append(indent + \" * In call to parseFieldMap(), generation method was null.\" + cr);\n-            sb.append(indent + \" * Check for NoSuchMethodException on startup.\" + cr);\n-            sb.append(indent + \" *********************************************************/\" + cr);\n-        }\n-\n-        Iterator<Entry<String, AmqpField>> itr = _map.entrySet().iterator();\n-        while (itr.hasNext())\n-        {\n-            Entry<String, AmqpField> entry = itr.next();\n-            String fieldName = entry.getKey();\n-            AmqpField field = entry.getValue();\n-            if (field.isCodeTypeConsistent(converter))\n-            {\n-                // All versions identical - Common declaration\n-                String domainName = field.getDomainMap().firstKey();\n-                AmqpVersionSet versionSet = field.getDomainMap().get(domainName);\n-                String codeType = converter.getGeneratedType(domainName, versionSet.first());\n-                if (commonGenerateMethod != null)\n-                {\n-                    sb.append(commonGenerateMethod.generate(codeType, field, versionSet,\n-                                                            indentSize, tabSize, itr.hasNext()));\n-                }\n-            }\n-            else if (mangledGenerateMethod != null) // Version-mangled\n-            {\n-                sb.append(mangledGenerateMethod.generate(field, indentSize, tabSize,\n-                                                         itr.hasNext()));\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    public String parseFieldMapOrdinally(GenerateMethod generateMethod, BitFieldGenerateMethod bitGenerateMethod,\n-                                         int indentSize, int tabSize, Generator codeGenerator)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        String cr = Utils.LINE_SEPARATOR;\n-        StringBuffer sb = new StringBuffer();\n-\n-        // Generate warnings in code if required methods are null.\n-        if (generateMethod == null || bitGenerateMethod == null)\n-        {\n-            sb.append(indent + \"/***********************************************\" + cr);\n-            sb.append(indent + \" * WARNING: In call to parseFieldMapOrdinally():\" + cr);\n-            if (generateMethod == null)\n-            {\n-                sb.append(indent + \" *  => generateMethod is null.\" + cr);\n-            }\n-            if (bitGenerateMethod == null)\n-            {\n-                sb.append(indent + \" *  => bitGenerateMethod is null.\" + cr);\n-            }\n-            sb.append(indent + \" * Generated code could be missing.\" + cr);\n-            sb.append(indent + \" * Check for NoSuchMethodException on startup.\" + cr);\n-            sb.append(indent + \" ***********************************************/\" + cr);\n-        }\n-\n-        /* We must process elements in ordinal order because adjacent booleans (bits)\n-           * must be combined into a single byte (in groups of up to 8). Start with shared\n-           * declarations until an ordinal divergence is found. (For most methods where\n-           * there is no difference between versions, this will simplify the generated\n-           * code. */\n-\n-        ArrayList<String> bitFieldList = new ArrayList<String>();\n-        boolean ordinalDivergenceFlag = false;\n-        int ordinal = 0;\n-        while (ordinal < size() && !ordinalDivergenceFlag)\n-        {\n-            /* Since the getFieldMapOrdinal() function may map more than one Field to\n-                * an ordinal, the number of ordinals may be less than the total number of\n-                * fields in the fieldMap. Check for empty fieldmaps... */\n-            AmqpFieldMap ordinalFieldMap = getFieldMapForOrdinal(ordinal);\n-            if (ordinalFieldMap.size() > 0)\n-            {\n-                if (ordinalFieldMap.isDomainConsistent(codeGenerator, getVersionSet()))\n-                {\n-                    String fieldName = ordinalFieldMap.getFirstFieldName();\n-                    String domain = ordinalFieldMap._map.get(fieldName).getDomainMap().firstKey();\n-\n-                    String domainType = codeGenerator.getDomainType(domain,\n-                                                                    codeGenerator.getVersionSet().first());\n-\n-                    if (domainType.compareTo(\"bit\") == 0)\n-                    {\n-                        bitFieldList.add(fieldName);\n-                    }\n-                    else if (bitFieldList.size() > 0)\n-                    {\n-                        // End of bit types - handle deferred bit type generation\n-                        if (bitGenerateMethod != null)\n-                        {\n-                            sb.append(bitGenerateMethod.generate(bitFieldList, ordinal,\n-                                                                 indentSize, tabSize));\n-                        }\n-                        bitFieldList.clear();\n-                    }\n-                    if (!ordinalDivergenceFlag)\n-                    {\n-                        // Defer generation of bit types until all adjacent bits have been\n-                        // accounted for.\n-                        if (bitFieldList.size() == 0 && generateMethod != null)\n-                        {\n-                            sb.append(generateMethod.generate(domainType, fieldName, ordinal,\n-                                                              indentSize, tabSize));\n-                        }\n-                    }\n-                    ordinal++;\n-                }\n-                else\n-                {\n-                    ordinalDivergenceFlag = true;\n-                }\n-            }\n-        }\n-\n-        // Check if there is still more to do under a version-specific breakout\n-        if (ordinalDivergenceFlag && ordinal < size())\n-        {\n-            // 1. Cycle through all versions in order, create outer if(version) structure\n-            AmqpVersion[] versionArray = new AmqpVersion[getVersionSet().size()];\n-            getVersionSet().toArray(versionArray);\n-            for (int v = 0; v < versionArray.length; v++)\n-            {\n-                sb.append(indent);\n-                if (v > 0)\n-                {\n-                    sb.append(\"else \");\n-                }\n-                sb.append(\"if (major == \" + versionArray[v].getMajor() + \" && minor == \" +\n-                          versionArray[v].getMinor() + \")\" + cr);\n-                sb.append(indent + \"{\" + cr);\n-\n-                // 2. Cycle though each ordinal from where we left off in the loop above.\n-                ArrayList<String> bitFieldList2 = new ArrayList<String>(bitFieldList);\n-                for (int o = ordinal; o < size(); o++)\n-                {\n-                    AmqpFieldMap ordinalFieldMap = getFieldMapForOrdinal(o);\n-                    if (ordinalFieldMap.size() > 0)\n-                    {\n-                        // 3. Cycle through each of the fields that have this ordinal.\n-                        Iterator<Map.Entry<String, AmqpField>> i = ordinalFieldMap._map.entrySet().iterator();\n-                        while (i.hasNext())\n-                        {\n-\n-                            Map.Entry<String, AmqpField> entry = i.next();\n-                            AmqpField field = entry.getValue();\n-                            String fieldName = entry.getKey();\n-\n-                            // 4. Some fields may have more than one ordinal - match by both\n-                            //    ordinal and version.\n-                            Iterator<Integer> j = field.getOrdinalMap().keySet().iterator();\n-                            while (j.hasNext())\n-                            {\n-                                int thisOrdinal = j.next();\n-                                AmqpVersionSet v1 = field.getOrdinalMap().get(thisOrdinal);\n-                                if (thisOrdinal == o && v1.contains(versionArray[v]))\n-                                {\n-                                    // 5. Now get the domain for this version\n-                                    int domainCntr = 0;\n-                                    Iterator<String> k = field.getDomainMap().keySet().iterator();\n-                                    while (k.hasNext())\n-                                    {\n-                                        // Mangle domain-divergent field names\n-                                        String mangledFieldName = fieldName;\n-                                        if (field.getDomainMap().size() > 1)\n-                                        {\n-                                            mangledFieldName += \"_\" + (domainCntr++);\n-                                        }\n-                                        String domainName = k.next();\n-                                        AmqpVersionSet v2 = field.getDomainMap().get(domainName);\n-                                        if (v2.contains(versionArray[v]))\n-                                        {\n-                                            // 6. (Finally!!) write the declaration\n-                                            String domainType = codeGenerator.getDomainType(domainName,\n-                                                                                            versionArray[v]);\n-                                            if (domainType.compareTo(\"bit\") == 0)\n-                                            {\n-                                                bitFieldList2.add(mangledFieldName);\n-                                            }\n-                                            else if (bitFieldList2.size() > 0)\n-                                            {\n-                                                // End of bit types - handle deferred bit type generation\n-                                                if (bitGenerateMethod != null)\n-                                                {\n-                                                    sb.append(bitGenerateMethod.generate(\n-                                                            bitFieldList2, o, indentSize + tabSize,\n-                                                            tabSize));\n-                                                }\n-                                                bitFieldList2.clear();\n-                                            }\n-                                            // Defer generation of bit types until all adjacent bits have\n-                                            // been accounted for.\n-                                            if (bitFieldList2.size() == 0 && generateMethod != null)\n-                                            {\n-                                                sb.append(generateMethod.generate(domainType,\n-                                                                                  mangledFieldName, o, indentSize + tabSize, tabSize));\n-                                            }\n-                                        }\n-                                    }\n-                                }\n-                            }\n-                        }\n-                    }\n-                }\n-                // Check for remaining deferred bits\n-                if (bitFieldList2.size() > 0 && bitGenerateMethod != null)\n-                {\n-                    sb.append(bitGenerateMethod.generate(bitFieldList2, size(),\n-                                                         indentSize + tabSize, tabSize));\n-                }\n-                sb.append(indent + \"}\" + cr);\n-            }\n-        }\n-        // Check for remaining deferred bits\n-        else if (bitFieldList.size() > 0 && bitGenerateMethod != null)\n-        {\n-            sb.append(bitGenerateMethod.generate(bitFieldList, size(),\n-                                                 indentSize, tabSize));\n-        }\n-        return sb.toString();\n-    }\n-\n-    private String getFirstFieldName()\n-    {\n-        return _map.firstKey();\n-    }\n-\n-    public boolean isVersionConsistent(AmqpVersionSet globalVersionSet)\n-    {\n-        for (String thisFieldName : _map.keySet())\n-        {\n-            AmqpField field = _map.get(thisFieldName);\n-            if (!field.isVersionConsistent(globalVersionSet))\n-            {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n-    public boolean isVersionInterfaceConsistent(AmqpVersionSet globalVersionSet)\n-    {\n-        for (String thisFieldName : _map.keySet())\n-        {\n-            AmqpField field = _map.get(thisFieldName);\n-            if (!field.isVersionInterfaceConsistent(globalVersionSet))\n-            {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n-\n-    public AmqpVersionSet getVersionSet()\n-    {\n-        return _versionSet;\n-    }\n-\n-    public Collection<AmqpField> values()\n-    {\n-        return _map.values();\n-    }\n-\n-    public AmqpField get(String fieldName)\n-    {\n-        return _map.get(fieldName);\n-    }\n-\n-    public void remove(String fieldName)\n-    {\n-        _map.remove(fieldName);\n-    }\n-\n-    public Set<String> keySet()\n-    {\n-        return _map.keySet();\n-    }\n-}"
        },
        {
            "sha": "5993a1b715cd96490fad9c7675ae0ee0241daf4c",
            "filename": "common/gentools/src/org/apache/qpid/gentools/AmqpFlagMap.java",
            "status": "removed",
            "additions": 0,
            "deletions": 77,
            "changes": 77,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpFlagMap.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpFlagMap.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpFlagMap.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,77 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import java.util.ArrayList;\n-import java.util.TreeMap;\n-\n-@SuppressWarnings(\"serial\")\n-public class AmqpFlagMap extends TreeMap<Boolean, AmqpVersionSet> implements VersionConsistencyCheck\n-{\n-    public boolean isSet()\n-    {\n-        return containsKey(true);\n-    }\n-\n-    public String toString()\n-    {\n-        AmqpVersionSet versionSet = get(true);\n-        if (versionSet != null)\n-        {\n-            return versionSet.toString();\n-        }\n-        return \"\";\n-    }\n-\n-    public boolean isVersionConsistent(AmqpVersionSet globalVersionSet)\n-    {\n-        if (size() != 1)\n-        {\n-            return false;\n-        }\n-        return get(firstKey()).equals(globalVersionSet);\n-    }\n-\n-    public boolean removeVersion(AmqpVersion version)\n-    {\n-        Boolean res = false;\n-        ArrayList<Boolean> removeList = new ArrayList<Boolean>();\n-        for (Boolean flag : keySet())\n-        {\n-            AmqpVersionSet versionSet = get(flag);\n-            if (versionSet.contains(version))\n-            {\n-                versionSet.remove(version);\n-                if (versionSet.isEmpty())\n-                {\n-                    removeList.add(flag);\n-                }\n-                res = true;\n-            }\n-        }\n-        // Get rid of flags no longer in use\n-        for (Boolean flag : removeList)\n-        {\n-            remove(flag);\n-        }\n-        return res;\n-    }\n-}"
        },
        {
            "sha": "4ec39b209e2ad0a4e3bff8a6b59e7664fd484e7f",
            "filename": "common/gentools/src/org/apache/qpid/gentools/AmqpMethod.java",
            "status": "removed",
            "additions": 0,
            "deletions": 351,
            "changes": 351,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpMethod.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpMethod.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpMethod.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,351 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import org.w3c.dom.Node;\n-import org.w3c.dom.NodeList;\n-\n-import java.io.PrintStream;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Collection;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n-public class AmqpMethod implements Printable, NodeAware, VersionConsistencyCheck\n-{\n-    private final AmqpVersionSet _versionSet = new AmqpVersionSet();\n-    private final AmqpFieldMap _fieldMap = new AmqpFieldMap();\n-\n-    private final AmqpOrdinalVersionMap _indexMap = new AmqpOrdinalVersionMap();\n-    private final AmqpFlagMap _clientMethodFlagMap = new AmqpFlagMap(); // Method called on client (<chassis name=\"server\"> in XML)\n-    private final AmqpFlagMap _serverMethodFlagMap = new AmqpFlagMap(); // Method called on server (<chassis name=\"client\"> in XML)\n-\n-    private final Map<AmqpVersion, AmqpFieldMap> _versionToFieldsMap = new HashMap<AmqpVersion, AmqpFieldMap>();\n-\n-    private final Map<AmqpVersion, AtomicInteger> _versionToFieldCount = new HashMap<AmqpVersion, AtomicInteger>();\n-\n-    private final String _name;\n-    private final Generator _generator;\n-\n-\n-    public AmqpMethod(String name, Generator generator)\n-    {\n-        _name = name;\n-        _generator = generator;\n-    }\n-\n-    public boolean addFromNode(Node methodNode, int ordinal, AmqpVersion version)\n-            throws AmqpParseException, AmqpTypeMappingException\n-    {\n-        _versionSet.add(version);\n-        boolean serverChassisFlag = false;\n-        boolean clientChassisFlag = false;\n-        int index = Utils.getNamedIntegerAttribute(methodNode, \"index\");\n-        AmqpVersionSet indexVersionSet = _indexMap.get(index);\n-        if (indexVersionSet != null)\n-        {\n-            indexVersionSet.add(version);\n-        }\n-        else\n-        {\n-            indexVersionSet = new AmqpVersionSet();\n-            indexVersionSet.add(version);\n-            _indexMap.put(index, indexVersionSet);\n-        }\n-        NodeList nList = methodNode.getChildNodes();\n-        AtomicInteger fieldCntr = _versionToFieldCount.get(version);\n-        if(fieldCntr == null)\n-        {\n-            fieldCntr = new AtomicInteger(0);\n-            _versionToFieldCount.put(version, fieldCntr);\n-        }\n-        for (int i = 0; i < nList.getLength(); i++)\n-        {\n-            Node child = nList.item(i);\n-            if (child.getNodeName().compareTo(Utils.ELEMENT_FIELD) == 0)\n-            {\n-                String fieldName = _generator.prepareDomainName(Utils.getNamedAttribute(child,\n-                                                                                        Utils.ATTRIBUTE_NAME));\n-                AmqpField thisField = _fieldMap.get(fieldName);\n-                AmqpFieldMap versionSpecificFieldMap = _versionToFieldsMap.get(version);\n-                if (versionSpecificFieldMap == null)\n-                {\n-                    versionSpecificFieldMap = new AmqpFieldMap();\n-                    _versionToFieldsMap.put(version, versionSpecificFieldMap);\n-                }\n-\n-\n-                if (thisField == null)\n-                {\n-                    thisField = new AmqpField(fieldName, _generator);\n-                    _fieldMap.add(fieldName, thisField);\n-                }\n-\n-                AmqpField versionSpecificField = new AmqpField(fieldName, _generator);\n-                versionSpecificFieldMap.add(fieldName, versionSpecificField);\n-\n-                versionSpecificField.addFromNode(child, fieldCntr.intValue(), version);\n-\n-                if (!thisField.addFromNode(child, fieldCntr.getAndIncrement(), version))\n-                {\n-                    String className = _generator.prepareClassName(Utils.getNamedAttribute(methodNode.getParentNode(),\n-                                                                                           Utils.ATTRIBUTE_NAME));\n-                    String methodName = _generator.prepareMethodName(Utils.getNamedAttribute(methodNode,\n-                                                                                             Utils.ATTRIBUTE_NAME));\n-                    System.out.println(\"INFO: Generation supression tag found for field \" +\n-                                       className + \".\" + methodName + \".\" + fieldName + \" - removing.\");\n-                    thisField.removeVersion(version);\n-                    _fieldMap.remove(fieldName);\n-                }\n-            }\n-            else if (child.getNodeName().compareTo(Utils.ELEMENT_CHASSIS) == 0)\n-            {\n-                String chassisName = Utils.getNamedAttribute(child, Utils.ATTRIBUTE_NAME);\n-                if (chassisName.compareTo(\"server\") == 0)\n-                {\n-                    serverChassisFlag = true;\n-                }\n-                else if (chassisName.compareTo(\"client\") == 0)\n-                {\n-                    clientChassisFlag = true;\n-                }\n-            }\n-            else if (child.getNodeName().compareTo(Utils.ELEMENT_CODEGEN) == 0)\n-            {\n-                String value = Utils.getNamedAttribute(child, Utils.ATTRIBUTE_VALUE);\n-                if (value.compareTo(\"no-gen\") == 0)\n-                {\n-                    return false;\n-                }\n-            }\n-        }\n-        processChassisFlags(serverChassisFlag, clientChassisFlag, version);\n-        return true;\n-    }\n-\n-    public void removeVersion(AmqpVersion version)\n-    {\n-        _clientMethodFlagMap.removeVersion(version);\n-        _serverMethodFlagMap.removeVersion(version);\n-        _indexMap.removeVersion(version);\n-        _fieldMap.removeVersion(version);\n-        _versionSet.remove(version);\n-    }\n-\n-    public void print(PrintStream out, int marginSize, int tabSize)\n-    {\n-        String margin = Utils.createSpaces(marginSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        out.println(margin + \"[M] \" + _name + \" {\" + (_serverMethodFlagMap.isSet() ? \"S \" +\n-                                                                                     _serverMethodFlagMap + (\n-                _clientMethodFlagMap.isSet() ? \", \" : \"\") : \"\") +\n-                                                                (_clientMethodFlagMap.isSet()\n-                                                                 ? \"C \" + _clientMethodFlagMap : \"\") + \"}\" + \": \" +\n-                                                                                                     _versionSet);\n-\n-        for (Integer thisIndex : _indexMap.keySet())\n-        {\n-            AmqpVersionSet indexVersionSet = _indexMap.get(thisIndex);\n-            out.println(margin + tab + \"[I] \" + thisIndex + indexVersionSet);\n-        }\n-\n-        for (String thisFieldName : _fieldMap.keySet())\n-        {\n-            AmqpField thisField = _fieldMap.get(thisFieldName);\n-            thisField.print(out, marginSize + tabSize, tabSize);\n-        }\n-    }\n-\n-    protected void processChassisFlags(boolean serverFlag, boolean clientFlag, AmqpVersion version)\n-    {\n-        AmqpVersionSet versionSet = _serverMethodFlagMap.get(serverFlag);\n-        if (versionSet != null)\n-        {\n-            versionSet.add(version);\n-        }\n-        else\n-        {\n-            versionSet = new AmqpVersionSet();\n-            versionSet.add(version);\n-            _serverMethodFlagMap.put(serverFlag, versionSet);\n-        }\n-\n-        versionSet = _clientMethodFlagMap.get(clientFlag);\n-        if (versionSet != null)\n-        {\n-            versionSet.add(version);\n-        }\n-        else\n-        {\n-            versionSet = new AmqpVersionSet();\n-            versionSet.add(version);\n-            _clientMethodFlagMap.put(clientFlag, versionSet);\n-        }\n-    }\n-\n-    public AmqpOverloadedParameterMap getOverloadedParameterLists(AmqpVersionSet globalVersionSet,\n-                                                                  Generator generator)\n-            throws AmqpTypeMappingException\n-    {\n-        AmqpOverloadedParameterMap parameterVersionMap = new AmqpOverloadedParameterMap();\n-        for (AmqpVersion thisVersion : globalVersionSet)\n-        {\n-            AmqpOrdinalFieldMap ordinalFieldMap = _fieldMap.getMapForVersion(thisVersion, true, generator);\n-            AmqpVersionSet methodVersionSet = parameterVersionMap.get(ordinalFieldMap);\n-            if (methodVersionSet == null)\n-            {\n-                methodVersionSet = new AmqpVersionSet();\n-                methodVersionSet.add(thisVersion);\n-                parameterVersionMap.put(ordinalFieldMap, methodVersionSet);\n-            }\n-            else\n-            {\n-                methodVersionSet.add(thisVersion);\n-            }\n-        }\n-        return parameterVersionMap;\n-    }\n-\n-    public boolean isVersionInterfaceConsistent()\n-    {\n-        return isVersionInterfaceConsistent(_generator.getVersionSet());\n-    }\n-\n-    public boolean isVersionInterfaceConsistent(AmqpVersionSet globalVersionSet)\n-    {\n-         if (!_versionSet.equals(globalVersionSet))\n-        {\n-            return false;\n-        }\n-        if (!_clientMethodFlagMap.isVersionConsistent(globalVersionSet))\n-        {\n-            return false;\n-        }\n-        if (!_serverMethodFlagMap.isVersionConsistent(globalVersionSet))\n-        {\n-            return false;\n-        }\n-        if (!_fieldMap.isVersionInterfaceConsistent(globalVersionSet))\n-        {\n-            return false;\n-        }\n-        return true;\n-    }\n-\n-    public boolean isVersionConsistent()\n-    {\n-        return isVersionConsistent(_generator.getVersionSet());\n-    }\n-\n-\n-    public boolean isVersionConsistent(AmqpVersionSet globalVersionSet)\n-    {\n-        return isVersionInterfaceConsistent(globalVersionSet)\n-               && _indexMap.isVersionConsistent(globalVersionSet)\n-               && _fieldMap.isVersionConsistent(globalVersionSet);\n-    }\n-\n-    public AmqpVersionSet getVersionSet()\n-    {\n-        return _versionSet;\n-    }\n-\n-    public AmqpFieldMap getFieldMap()\n-    {\n-        return _fieldMap;\n-    }\n-\n-    public AmqpOrdinalVersionMap getIndexMap()\n-    {\n-        return _indexMap;\n-    }\n-\n-    public AmqpFlagMap getClientMethodFlagMap()\n-    {\n-        return _clientMethodFlagMap;\n-    }\n-\n-    public AmqpFlagMap getServerMethodFlagMap()\n-    {\n-        return _serverMethodFlagMap;\n-    }\n-\n-    public Map<AmqpVersion, AmqpFieldMap> getVersionToFieldsMap()\n-    {\n-        return _versionToFieldsMap;\n-    }\n-\n-    public String getName()\n-    {\n-        return _name;\n-    }\n-\n-    public LanguageConverter getGenerator()\n-    {\n-        return _generator;\n-    }\n-\n-    public SingleVersionMethod asSingleVersionMethod(AmqpVersion version)\n-    {\n-        return new SingleVersionMethod(this, version, _generator);\n-    }\n-\n-    public Collection<AmqpField> getFields()\n-    {\n-        return _fieldMap.values();\n-    }\n-\n-    public boolean isCommon(AmqpField field)\n-    {\n-        return field.getVersionSet().equals(getVersionSet()) && field.isTypeAndNameConsistent(_generator);\n-    }\n-\n-    public boolean isConsistentServerMethod()\n-    {\n-        AmqpVersionSet serverVersions = _serverMethodFlagMap.get(true);\n-        return (serverVersions != null) && serverVersions.containsAll(_generator.getVersionSet());\n-    }\n-\n-\n-    public boolean isConsistentClientMethod()\n-    {\n-        AmqpVersionSet clientVersions = _clientMethodFlagMap.get(true);\n-        return (clientVersions != null) && clientVersions.containsAll(_generator.getVersionSet());\n-    }\n-\n-    public boolean isServerMethod(AmqpVersion version)\n-    {\n-        AmqpVersionSet serverVersions = _serverMethodFlagMap.get(true);\n-        return (serverVersions != null) && serverVersions.contains(version);\n-    }\n-\n-\n-    public boolean isClientMethod(AmqpVersion version)\n-    {\n-        AmqpVersionSet clientVersions = _clientMethodFlagMap.get(true);\n-        return (clientVersions != null) && clientVersions.contains(version);\n-    }\n-\n-    public boolean inAllVersions()\n-    {\n-        return _versionSet.containsAll(_generator.getVersionSet());\n-    }\n-}"
        },
        {
            "sha": "d98dab4a3960ae8c97ff484192292b89c7f9a0a3",
            "filename": "common/gentools/src/org/apache/qpid/gentools/AmqpMethodMap.java",
            "status": "removed",
            "additions": 0,
            "deletions": 36,
            "changes": 36,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpMethodMap.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpMethodMap.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpMethodMap.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,36 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import java.util.TreeMap;\n-\n-@SuppressWarnings(\"serial\")\n-public class AmqpMethodMap extends TreeMap<String, AmqpMethod>\n-{\n-    public void removeVersion(AmqpVersion version)\n-    {\n-        for (String methodName : keySet())\n-        {\n-            get(methodName).removeVersion(version);\n-        }\n-    }\n-\n-}"
        },
        {
            "sha": "45f0adb18da9f5b13f84e47bbdfb5133772c6efb",
            "filename": "common/gentools/src/org/apache/qpid/gentools/AmqpModel.java",
            "status": "removed",
            "additions": 0,
            "deletions": 132,
            "changes": 132,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpModel.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpModel.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpModel.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,132 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import org.w3c.dom.Node;\n-import org.w3c.dom.NodeList;\n-\n-import java.io.PrintStream;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Collection;\n-\n-public class AmqpModel implements Printable, NodeAware\n-{\n-    private final Generator _generator;\n-    private final AmqpClassMap classMap = new AmqpClassMap();\n-    private final AmqpVersionSet _versionSet = new AmqpVersionSet();\n-\n-    private final Map<AmqpVersion, AmqpClassMap> _versionToClassMapMap = new HashMap<AmqpVersion, AmqpClassMap>();\n-\n-    public AmqpModel(Generator generator)\n-    {\n-        _generator = generator;\n-    }\n-\n-    public AmqpClassMap getAmqpClassMap(AmqpVersion version)\n-    {\n-        return _versionToClassMapMap.get(version);\n-    }\n-\n-\n-    public AmqpVersionSet getVersionSet()\n-    {\n-        return _versionSet;\n-    }\n-\n-    public boolean addFromNode(Node n, int o, AmqpVersion version)\n-            throws AmqpParseException, AmqpTypeMappingException\n-    {\n-        _versionSet.add(version);\n-        NodeList nList = n.getChildNodes();\n-\n-        AmqpClassMap versionSpecificClassMap = _versionToClassMapMap.get(version);\n-\n-        if (versionSpecificClassMap == null)\n-        {\n-            versionSpecificClassMap = new AmqpClassMap();\n-            _versionToClassMapMap.put(version, versionSpecificClassMap);\n-        }\n-\n-        int eCntr = 0;\n-        for (int i = 0; i < nList.getLength(); i++)\n-        {\n-            Node c = nList.item(i);\n-            if (c.getNodeName().compareTo(Utils.ELEMENT_CLASS) == 0)\n-            {\n-                String className = _generator.prepareClassName(Utils.getNamedAttribute(c, Utils.ATTRIBUTE_NAME));\n-                AmqpClass thisClass = classMap.get(className);\n-                if (thisClass == null)\n-                {\n-                    thisClass = new AmqpClass(className, _generator);\n-                    classMap.put(className, thisClass);\n-                }\n-\n-                AmqpClass versionSpecificClass = new AmqpClass(className, _generator);\n-                versionSpecificClassMap.put(className, versionSpecificClass);\n-\n-                versionSpecificClass.addFromNode(c, eCntr, version);\n-\n-                if (!thisClass.addFromNode(c, eCntr++, version))\n-                {\n-                    System.out.println(\"INFO: Generation supression tag found for class \" + className + \" - removing.\");\n-                    thisClass.removeVersion(version);\n-                    classMap.remove(className);\n-                }\n-            }\n-        }\n-        return true;\n-    }\n-\n-    public void print(PrintStream out, int marginSize, int tabSize)\n-    {\n-        out.println(Utils.createSpaces(marginSize) +\n-                    \"[C]=class; [M]=method; [F]=field; [D]=domain; [I]=index; [O]=ordinal\" + Utils.LINE_SEPARATOR);\n-        out.println(Utils.createSpaces(marginSize) + \"Model:\");\n-\n-        for (String thisClassName : classMap.keySet())\n-        {\n-            AmqpClass thisClass = classMap.get(thisClassName);\n-            thisClass.print(out, marginSize + tabSize, tabSize);\n-        }\n-    }\n-\n-    public LanguageConverter getGenerator()\n-    {\n-        return _generator;\n-    }\n-\n-    public AmqpClassMap getClassMap()\n-    {\n-        return classMap;\n-    }\n-\n-\n-    public Collection<AmqpClass> getClasses()\n-    {\n-        return classMap.values();\n-    }\n-\n-    public SingleVersionModel asSingleVersionModel()\n-    {\n-        return new SingleVersionModel(this, getVersionSet().first(), _generator);\n-    }\n-}"
        },
        {
            "sha": "0633eff1e10dffd0ae8da7ae7ce2512bc82a39ee",
            "filename": "common/gentools/src/org/apache/qpid/gentools/AmqpOrdinalFieldMap.java",
            "status": "removed",
            "additions": 0,
            "deletions": 96,
            "changes": 96,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpOrdinalFieldMap.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpOrdinalFieldMap.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpOrdinalFieldMap.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,96 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import java.util.Iterator;\n-import java.util.Set;\n-import java.util.TreeMap;\n-\n-@SuppressWarnings(\"serial\")\n-public class AmqpOrdinalFieldMap extends TreeMap<Integer, String[]> implements Comparable\n-{\n-\n-\n-    public int compareTo(Object obj)\n-    {\n-        AmqpOrdinalFieldMap o = (AmqpOrdinalFieldMap) obj;\n-        Set<Integer> thisKeySet = keySet();\n-        Set<Integer> oKeySet = o.keySet();\n-        if (!thisKeySet.equals(oKeySet)) // Not equal, but why?\n-        {\n-            // Size difference\n-            int sizeDiff = thisKeySet.size() - oKeySet.size(); // -ve if this < other\n-            if (sizeDiff != 0)\n-            {\n-                return sizeDiff;\n-            }\n-            // Conetent difference\n-            Iterator<Integer> itr = thisKeySet.iterator();\n-            Iterator<Integer> oItr = oKeySet.iterator();\n-            while (itr.hasNext() && oItr.hasNext())\n-            {\n-                int diff = itr.next() - oItr.next(); // -ve if this < other\n-                if (diff != 0)\n-                {\n-                    return diff;\n-                }\n-            }\n-            // We should never get here...\n-            System.err.println(\"AmqpOrdinalFieldMap.compareTo(): \" +\n-                               \"WARNING - unable to find cause of keySet difference.\");\n-        }\n-        // Keys are equal, now check the String[]s\n-        Iterator<Integer> itr = thisKeySet.iterator();\n-        Iterator<Integer> oItr = oKeySet.iterator();\n-        while (itr.hasNext() && oItr.hasNext())\n-        {\n-            String[] thisPair = get(itr.next());\n-            String[] oPair = o.get(oItr.next());\n-            // Size difference\n-            int sizeDiff = thisPair.length - oPair.length; // -ve if this < other\n-            if (sizeDiff != 0)\n-            {\n-                return sizeDiff;\n-            }\n-            // Conetent difference\n-            for (int i = 0; i < thisPair.length; i++)\n-            {\n-                int diff = thisPair[i].compareTo(oPair[i]);\n-                if (diff != 0)\n-                {\n-                    return diff;\n-                }\n-            }\n-        }\n-        return 0;\n-    }\n-\n-    public String toString()\n-    {\n-        StringBuffer sb = new StringBuffer();\n-        for (Integer thisOrdinal : keySet())\n-        {\n-            String[] pair = get(thisOrdinal);\n-            sb.append(\"[\" + thisOrdinal + \"] \" + pair[0] + \" : \" + pair[1] + Utils.LINE_SEPARATOR);\n-        }\n-        return sb.toString();\n-    }\n-}"
        },
        {
            "sha": "fede88631a2d2039affb1a493247cd0904a2f253",
            "filename": "common/gentools/src/org/apache/qpid/gentools/AmqpOrdinalVersionMap.java",
            "status": "removed",
            "additions": 0,
            "deletions": 76,
            "changes": 76,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpOrdinalVersionMap.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpOrdinalVersionMap.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpOrdinalVersionMap.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,76 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import java.util.ArrayList;\n-import java.util.TreeMap;\n-\n-@SuppressWarnings(\"serial\")\n-public class AmqpOrdinalVersionMap extends TreeMap<Integer, AmqpVersionSet> implements VersionConsistencyCheck\n-{\n-    public boolean isVersionConsistent(AmqpVersionSet globalVersionSet)\n-    {\n-        if (size() != 1)\n-        {\n-            return false;\n-        }\n-        return get(firstKey()).equals(globalVersionSet);\n-    }\n-\n-    public int getOrdinal(AmqpVersion version)\n-            throws AmqpTypeMappingException\n-    {\n-        for (Integer thisOrdinal : keySet())\n-        {\n-            AmqpVersionSet versionSet = get(thisOrdinal);\n-            if (versionSet.contains(version))\n-            {\n-                return thisOrdinal;\n-            }\n-        }\n-        throw new AmqpTypeMappingException(\"Unable to locate version \" + version + \" in ordianl version map.\");\n-    }\n-\n-    public boolean removeVersion(AmqpVersion version)\n-    {\n-        Boolean res = false;\n-        ArrayList<Integer> removeList = new ArrayList<Integer>();\n-        for (Integer ordinal : keySet())\n-        {\n-            AmqpVersionSet versionSet = get(ordinal);\n-            if (versionSet.contains(version))\n-            {\n-                versionSet.remove(version);\n-                if (versionSet.isEmpty())\n-                {\n-                    removeList.add(ordinal);\n-                }\n-                res = true;\n-            }\n-        }\n-        // Get rid of ordinals no longer in use\n-        for (Integer ordinal : removeList)\n-        {\n-            remove(ordinal);\n-        }\n-        return res;\n-    }\n-}"
        },
        {
            "sha": "10978d0e4a2c684020e931c34c8cc12625ff5d50",
            "filename": "common/gentools/src/org/apache/qpid/gentools/AmqpOverloadedParameterMap.java",
            "status": "removed",
            "additions": 0,
            "deletions": 29,
            "changes": 29,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpOverloadedParameterMap.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpOverloadedParameterMap.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpOverloadedParameterMap.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,29 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import java.util.TreeMap;\n-\n-@SuppressWarnings(\"serial\")\n-public class AmqpOverloadedParameterMap extends TreeMap<AmqpOrdinalFieldMap, AmqpVersionSet>\n-{\n-\n-}"
        },
        {
            "sha": "1ac09ea45329ec60d54ff54716393203003be44c",
            "filename": "common/gentools/src/org/apache/qpid/gentools/AmqpTemplateException.java",
            "status": "removed",
            "additions": 0,
            "deletions": 30,
            "changes": 30,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpTemplateException.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpTemplateException.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpTemplateException.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,30 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-@SuppressWarnings(\"serial\")\n-public class AmqpTemplateException extends RuntimeException\n-{\n-    public AmqpTemplateException(String msg)\n-    {\n-        super(msg);\n-    }\n-}"
        },
        {
            "sha": "127a8835b0e8a06b504d38cf212e7e947f3b11ca",
            "filename": "common/gentools/src/org/apache/qpid/gentools/AmqpTypeMappingException.java",
            "status": "removed",
            "additions": 0,
            "deletions": 30,
            "changes": 30,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpTypeMappingException.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpTypeMappingException.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpTypeMappingException.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,30 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-@SuppressWarnings(\"serial\")\n-public class AmqpTypeMappingException extends RuntimeException\n-{\n-    public AmqpTypeMappingException(String msg)\n-    {\n-        super(msg);\n-    }\n-}"
        },
        {
            "sha": "dbeef1b895f3f67bbbfcfdc717820cfff045bbf4",
            "filename": "common/gentools/src/org/apache/qpid/gentools/AmqpVersion.java",
            "status": "removed",
            "additions": 0,
            "deletions": 72,
            "changes": 72,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpVersion.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpVersion.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpVersion.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,72 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-public class AmqpVersion implements Comparable<AmqpVersion>\n-{\n-    private final int _major;\n-    private final int _minor;\n-\n-    public AmqpVersion(int major, int minor)\n-    {\n-        _major = major;\n-        _minor = minor;\n-    }\n-\n-    public AmqpVersion(AmqpVersion version)\n-    {\n-        _major = version.getMajor();\n-        _minor = version.getMinor();\n-    }\n-\n-    public int getMajor()\n-    {\n-        return _major;\n-    }\n-\n-    public int getMinor()\n-    {\n-        return _minor;\n-    }\n-\n-    public int compareTo(AmqpVersion v)\n-    {\n-        if (_major != v.getMajor())\n-        {\n-            return _major - v.getMajor();\n-        }\n-        if (_minor != v.getMinor())\n-        {\n-            return _minor - v.getMinor();\n-        }\n-        return 0;\n-    }\n-\n-    public String namespace()\n-    {\n-        return \"ver_\" + _major + \"_\" + _minor;\n-    }\n-\n-    public String toString()\n-    {\n-        return _major + \"-\" + _minor;\n-    }\n-}"
        },
        {
            "sha": "6419e23a1e6f632d5e88e5231304c855778228bf",
            "filename": "common/gentools/src/org/apache/qpid/gentools/AmqpVersionSet.java",
            "status": "removed",
            "additions": 0,
            "deletions": 79,
            "changes": 79,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpVersionSet.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpVersionSet.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FAmqpVersionSet.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,79 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import java.io.PrintStream;\n-import java.util.Iterator;\n-import java.util.TreeSet;\n-\n-@SuppressWarnings(\"serial\")\n-public class AmqpVersionSet extends TreeSet<AmqpVersion> implements Printable, Comparable<AmqpVersionSet>\n-{\n-    public AmqpVersionSet()\n-    {\n-        super();\n-    }\n-\n-    public AmqpVersionSet(AmqpVersion version)\n-    {\n-        super();\n-        add(version);\n-    }\n-\n-    public AmqpVersion find(AmqpVersion version)\n-    {\n-        for (AmqpVersion v : this)\n-        {\n-            if (v.compareTo(version) == 0)\n-            {\n-                return v;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    public void print(PrintStream out, int marginSize, int tabSize)\n-    {\n-        out.print(Utils.createSpaces(marginSize) + \"Version Set: \" + toString() + Utils.LINE_SEPARATOR);\n-    }\n-\n-    public int compareTo(AmqpVersionSet other)\n-    {\n-        int res = size() - other.size();\n-        if (res != 0)\n-        {\n-            return res;\n-        }\n-        Iterator<AmqpVersion> vItr = iterator();\n-        Iterator<AmqpVersion> oItr = other.iterator();\n-        while (vItr.hasNext() && oItr.hasNext())\n-        {\n-            AmqpVersion version = vItr.next();\n-            AmqpVersion oVersion = oItr.next();\n-            res = version.compareTo(oVersion);\n-            if (res != 0)\n-            {\n-                return res;\n-            }\n-        }\n-        return 0;\n-    }\n-}"
        },
        {
            "sha": "d85510ee9897d921c1f7a5f11a5c6aa8be608f92",
            "filename": "common/gentools/src/org/apache/qpid/gentools/BitFieldGenerateMethod.java",
            "status": "removed",
            "additions": 0,
            "deletions": 29,
            "changes": 29,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FBitFieldGenerateMethod.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FBitFieldGenerateMethod.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FBitFieldGenerateMethod.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,29 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-\n-import java.util.List;\n-\n-public interface BitFieldGenerateMethod\n-{\n-    String generate(List<String> bitFieldList, int ordinal, int indentSize, int tabSize);\n-}"
        },
        {
            "sha": "641f50c3f8adba8a2c75879a17913ee7f7fe5462",
            "filename": "common/gentools/src/org/apache/qpid/gentools/CommandGenerateMethod.java",
            "status": "removed",
            "additions": 0,
            "deletions": 26,
            "changes": 26,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FCommandGenerateMethod.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FCommandGenerateMethod.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FCommandGenerateMethod.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,26 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-public interface CommandGenerateMethod\n-{\n-    String generate(String codeType, AmqpField field, AmqpVersionSet versionSet, int indentSize, int tabSize, boolean notLast);\n-}"
        },
        {
            "sha": "9ab7eb178b493c9ec5065ac76f5b109101a89cf8",
            "filename": "common/gentools/src/org/apache/qpid/gentools/ConsolidatedField.java",
            "status": "removed",
            "additions": 0,
            "deletions": 120,
            "changes": 120,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FConsolidatedField.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FConsolidatedField.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FConsolidatedField.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,120 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import java.util.List;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-\n-/**\n- * Created by IntelliJ IDEA.\n- * User: U146758\n- * Date: 06-Mar-2007\n- * Time: 09:22:21\n- * To change this template use File | Settings | File Templates.\n- */\n-public class ConsolidatedField\n-{\n-    private final String _name;\n-    private final String _type;\n-    private final List<String> _underlyingFields = new ArrayList<String>();\n-    private final Generator _generator;\n-    private boolean _isConsolidated;\n-\n-    public ConsolidatedField(Generator generator, String name, String type)\n-    {\n-        this(generator,name,type,name,false);\n-    }\n-\n-    public ConsolidatedField(Generator generator, String name, String type, String firstField)\n-    {\n-           this(generator,name,type,firstField,true);\n-    }\n-\n-    public ConsolidatedField(Generator generator, String name, String type, String firstField, boolean consolidated)\n-    {\n-\n-        _generator = generator;\n-        _name = name;\n-        _type = type;\n-        _isConsolidated = consolidated;\n-        _underlyingFields.add(firstField);\n-\n-    }\n-\n-\n-    public void setConsolidated(boolean consolidated)\n-    {\n-        _isConsolidated = consolidated;\n-    }\n-\n-    public String getName()\n-    {\n-        return _name;\n-    }\n-\n-    public String getType()\n-    {\n-        return _type;\n-    }\n-\n-    public String getNativeType()\n-    {\n-        return _generator.getNativeType(_type);\n-    }\n-\n-    public String getEncodingType()\n-    {\n-        return _generator.getEncodingType(_type);\n-    }\n-\n-    public void add(String name)\n-    {\n-        _underlyingFields.add(name);\n-    }\n-\n-    public Collection<String> getUnderlyingFields()\n-    {\n-        return Collections.unmodifiableCollection(_underlyingFields);\n-    }\n-\n-    public int getPosition(String fieldName)\n-    {\n-        return _underlyingFields.indexOf(fieldName);\n-    }\n-\n-    public boolean isConsolidated()\n-    {\n-        return _isConsolidated;\n-    }\n-\n-    public boolean isFixedSize()\n-    {\n-        return _generator.isFixedSizeType( getType() );\n-    }\n-\n-    public int getSize()\n-    {\n-        return _generator.getTypeSize( getType() );\n-    }\n-\n-}"
        },
        {
            "sha": "4f58cba34ecdb3039f6bc2bdf548a3d8b29982b0",
            "filename": "common/gentools/src/org/apache/qpid/gentools/CppGenerator.java",
            "status": "removed",
            "additions": 0,
            "deletions": 1716,
            "changes": 1716,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FCppGenerator.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FCppGenerator.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FCppGenerator.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,1716 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import java.io.File;\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.TreeMap;\n-\n-public class CppGenerator extends Generator\n-{\n-    protected static final String versionNamespaceStartToken = \"${version_namespace_start}\";\n-    protected static final String versionNamespaceEndToken = \"${version_namespace_end}\";\n-\n-    // TODO: Move this to parent class\n-    protected static final int FIELD_NAME = 0;\n-    protected static final int FIELD_CODE_TYPE = 1;\n-\n-    /**\n-     * A complete list of C++ reserved words. The names of varous XML elements within the AMQP\n-     * specification file are used for C++ identifier names in the generated code. Each proposed\n-     * name is checked against this list and is modified (by adding an '_' to the end of the\n-     * name - see function parseForReservedWords()) if found to be present.\n-     */\n-    protected static final String[] cppReservedWords = {\"and\", \"and_eq\", \"asm\", \"auto\", \"bitand\",\n-                                                        \"bitor\", \"bool\", \"break\", \"case\", \"catch\", \"char\", \"class\", \"compl\", \"const\", \"const_cast\",\n-                                                        \"continue\", \"default\", \"delete\", \"do\", \"DomainInfo\", \"double\", \"dynamic_cast\", \"else\",\n-                                                        \"enum\", \"explicit\", \"extern\", \"false\", \"float\", \"for\", \"friend\", \"goto\", \"if\", \"inline\",\n-                                                        \"int\", \"long\", \"mutable\", \"namespace\", \"new\", \"not\", \"not_eq\", \"operator\", \"or\", \"or_eq\",\n-                                                        \"private\", \"protected\", \"public\", \"register\", \"reinterpret_cast\", \"return\", \"short\",\n-                                                        \"signed\", \"sizeof\", \"static\", \"static_cast\", \"struct\", \"switch\", \"template\", \"this\",\n-                                                        \"throw\", \"true\", \"try\", \"typedef\", \"typeid\", \"typename\", \"union\", \"unsigned\", \"using\",\n-                                                        \"virtual\", \"void\", \"volatile\", \"wchar_t\", \"while\", \"xor\", \"xor_eq\"};\n-\n-    /**\n-     * Although not reserved words, the following list of variable names that may cause compile\n-     * problems within a C++ environment because they clash with common #includes. The names of\n-     * varous XML elements within the AMQP specification file are used for C++ identifier names\n-     * in the generated code. Each proposed name is checked against this list and is modified\n-     * (by adding an '_' to the end of the name - see function parseForReservedWords()) if found\n-     * to be present. This list is best added to on an as-needed basis.\n-     */\n-    protected static final String[] cppCommonDefines = {\"string\"};\n-\n-    // TODO: Move this to the Generator superclass?\n-    protected boolean quietFlag; // Supress warning messages to the console\n-\n-    private class DomainInfo\n-    {\n-        public String type;\n-        public String size;\n-        public String encodeExpression;\n-        public String decodeExpression;\n-\n-        public DomainInfo(String domain, String size, String encodeExpression,\n-                          String decodeExpression)\n-        {\n-            this.type = domain;\n-            this.size = size;\n-            this.encodeExpression = encodeExpression;\n-            this.decodeExpression = decodeExpression;\n-        }\n-    }\n-\n-    private static TreeMap<String, DomainInfo> typeMap = new TreeMap<String, DomainInfo>();\n-\n-    public CppGenerator()\n-    {\n-        super();\n-        quietFlag = true;\n-        // Load C++ type and size maps.\n-        // Adjust or add to these lists as new types are added/defined.\n-        // The char '#' will be replaced by the field variable name (any type).\n-        // The char '~' will be replaced by the compacted bit array size (type bit only).\n-        typeMap.put(\"bit\", new DomainInfo(\n-                \"bool\",                    // type\n-                \"~\",                     // size\n-                \"\",                        // encodeExpression\n-                \"\"));                    // decodeExpression\n-        typeMap.put(\"content\", new DomainInfo(\n-                \"Content\",                // type\n-                \"#.size()\",             // size\n-                \"buffer.putContent(#)\",    // encodeExpression\n-                \"buffer.getContent(#)\")); // decodeExpression\n-        typeMap.put(\"long\", new DomainInfo(\n-                \"u_int32_t\",            // type\n-                \"4\",                     // size\n-                \"buffer.putLong(#)\",    // encodeExpression\n-                \"# = buffer.getLong()\"));    // decodeExpression\n-        typeMap.put(\"longlong\", new DomainInfo(\n-                \"u_int64_t\",            // type\n-                \"8\",                     // size\n-                \"buffer.putLongLong(#)\", // encodeExpression\n-                \"# = buffer.getLongLong()\")); // decodeExpression\n-        typeMap.put(\"longstr\", new DomainInfo(\n-                \"string\",                // type\n-                \"4 + #.length()\",         // size\n-                \"buffer.putLongString(#)\", // encodeExpression\n-                \"buffer.getLongString(#)\")); // decodeExpression\n-        typeMap.put(\"octet\", new DomainInfo(\n-                \"u_int8_t\",                // type\n-                \"1\",                     // size\n-                \"buffer.putOctet(#)\",    // encodeExpression\n-                \"# = buffer.getOctet()\"));    // decodeExpression\n-        typeMap.put(\"short\", new DomainInfo(\n-                \"u_int16_t\",            // type\n-                \"2\",                    // size\n-                \"buffer.putShort(#)\",    // encodeExpression\n-                \"# = buffer.getShort()\"));    // decodeExpression\n-        typeMap.put(\"shortstr\", new DomainInfo(\n-                \"string\",                // type\n-                \"1 + #.length()\",        // size\n-                \"buffer.putShortString(#)\", // encodeExpression\n-                \"buffer.getShortString(#)\")); // decodeExpression\n-        typeMap.put(\"table\", new DomainInfo(\n-                \"FieldTable\",            // type\n-                \"#.size()\",             // size\n-                \"buffer.putFieldTable(#)\", // encodeExpression\n-                \"buffer.getFieldTable(#)\")); // decodeExpression\n-        typeMap.put(\"timestamp\", new DomainInfo(\n-                \"u_int64_t\",            // type\n-                \"8\",                     // size\n-                \"buffer.putLongLong(#)\", // encodeExpression\n-                \"buffer.getLongLong(#)\")); // decodeExpression\n-    }\n-\n-\n-    public boolean isQuietFlag()\n-    {\n-        return quietFlag;\n-    }\n-\n-    public void setQuietFlag(boolean quietFlag)\n-    {\n-        this.quietFlag = quietFlag;\n-    }\n-\n-    // === Start of methods for Interface LanguageConverter ===\n-\n-    public String prepareClassName(String className)\n-    {\n-        return camelCaseName(className, true);\n-    }\n-\n-    public String prepareMethodName(String methodName)\n-    {\n-        return camelCaseName(methodName, false);\n-    }\n-\n-    public String prepareDomainName(String domainName)\n-    {\n-        return camelCaseName(domainName, false);\n-    }\n-\n-\n-    public String getGeneratedType(String domainName, AmqpVersion version)\n-            throws AmqpTypeMappingException\n-    {\n-        String domainType = getDomainType(domainName, version);\n-        if (domainType == null)\n-        {\n-            throw new AmqpTypeMappingException(\"Domain type \\\"\" + domainName +\n-                                               \"\\\" not found in C++ typemap.\");\n-        }\n-        DomainInfo info = typeMap.get(domainType);\n-        if (info == null)\n-        {\n-            throw new AmqpTypeMappingException(\"Unknown domain: \\\"\" + domainType + \"\\\"\");\n-        }\n-        return info.type;\n-    }\n-\n-    // === Abstract methods from class Generator - C++-specific implementation ===\n-\n-    @Override\n-    protected String prepareFilename(String filenameTemplate, AmqpClass thisClass, AmqpMethod method,\n-                                     AmqpField field, AmqpVersion version)\n-    {\n-        StringBuffer sb = new StringBuffer(filenameTemplate);\n-        if (thisClass != null)\n-        {\n-            replaceToken(sb, \"${CLASS}\", thisClass.getName());\n-        }\n-        if (method != null)\n-        {\n-            replaceToken(sb, \"${METHOD}\", method.getName());\n-        }\n-        if (field != null)\n-        {\n-            replaceToken(sb, \"${FIELD}\", field.getName());\n-        }\n-        return sb.toString();\n-    }\n-\n-    @Override\n-    protected void processModelTemplate(NamedTemplate template)\n-    {\n-        processTemplate(template, null, null, null, null);\n-    }\n-\n-    @Override\n-    protected void processClassTemplate(NamedTemplate template, AmqpClass thisClass)\n-    {\n-        processTemplate(template, thisClass, null, null, null);\n-    }\n-\n-    @Override\n-    protected void processMethodTemplate(NamedTemplate template, AmqpClass thisClass,\n-                                         AmqpMethod method)\n-    {\n-        StringBuffer sb = new StringBuffer(template.getTemplate());\n-        String filename = prepareFilename(getTemplateFileName(sb), thisClass, method, null, null);\n-        boolean templateProcessedFlag = false;\n-\n-        // If method is not version consistent, create a namespace for each version\n-        // i.e. copy the bit between the versionNamespaceStartToken and versionNamespaceEndToken\n-        // once for each namespace.\n-        if (method != null)\n-        {\n-            if (!method.isVersionConsistent(getVersionSet()))\n-            {\n-                int namespaceStartIndex = sb.indexOf(versionNamespaceStartToken);\n-                int namespaceEndIndex = sb.indexOf(versionNamespaceEndToken) +\n-                                        versionNamespaceEndToken.length();\n-                if (namespaceStartIndex >= 0 && namespaceEndIndex >= 0 &&\n-                    namespaceStartIndex <= namespaceEndIndex)\n-                {\n-                    String namespaceSpan = sb.substring(namespaceStartIndex, namespaceEndIndex) + CR;\n-                    sb.delete(namespaceStartIndex, namespaceEndIndex);\n-                    for (AmqpVersion v : method.getVersionSet())\n-                    {\n-                        StringBuffer nssb = new StringBuffer(namespaceSpan);\n-                        processTemplate(nssb, thisClass, method, null, template.getName(), v);\n-                        sb.insert(namespaceStartIndex, nssb);\n-                    }\n-                    // Process all tokens *not* within the namespace span prior to inserting namespaces\n-                    processTemplate(sb, thisClass, method, null, template.getName(), null);\n-                }\n-                templateProcessedFlag = true;\n-            }\n-        }\n-        // Remove any remaining namespace tags\n-        int nsTokenIndex = sb.indexOf(versionNamespaceStartToken);\n-        while (nsTokenIndex > 0)\n-        {\n-            sb.delete(nsTokenIndex, nsTokenIndex + versionNamespaceStartToken.length());\n-            nsTokenIndex = sb.indexOf(versionNamespaceStartToken);\n-        }\n-        nsTokenIndex = sb.indexOf(versionNamespaceEndToken);\n-        while (nsTokenIndex > 0)\n-        {\n-            sb.delete(nsTokenIndex, nsTokenIndex + versionNamespaceEndToken.length());\n-            nsTokenIndex = sb.indexOf(versionNamespaceEndToken);\n-        }\n-\n-        if (!templateProcessedFlag)\n-        {\n-            processTemplate(sb, thisClass, method, null, template.getName(), null);\n-        }\n-        writeTargetFile(sb, new File(getOutputDirectory() + Utils.FILE_SEPARATOR + filename));\n-        generatedFileCounter++;\n-    }\n-\n-    @Override\n-    protected void processTemplate(NamedTemplate template, AmqpClass thisClass, AmqpMethod method,\n-                                   AmqpField field, AmqpVersion version)\n-    {\n-        StringBuffer sb = new StringBuffer(template.getTemplate());\n-        String filename = prepareFilename(getTemplateFileName(sb), thisClass, method, field, version);\n-        processTemplate(sb, thisClass, method, field, template.getName(), null);\n-        writeTargetFile(sb, new File(getOutputDirectory() + Utils.FILE_SEPARATOR + filename));\n-        generatedFileCounter++;\n-    }\n-\n-    protected void processTemplate(StringBuffer sb, AmqpClass thisClass, AmqpMethod method,\n-                                   AmqpField field, String templateFileName, AmqpVersion version)\n-    {\n-        try\n-        {\n-            processAllLists(sb, thisClass, method, version);\n-        }\n-        catch (AmqpTemplateException e)\n-        {\n-            System.out.println(\"ERROR: \" + templateFileName + \": \" + e.getMessage());\n-        }\n-        try\n-        {\n-            processAllTokens(sb, thisClass, method, field, version);\n-        }\n-        catch (AmqpTemplateException e)\n-        {\n-            System.out.println(\"ERROR: \" + templateFileName + \": \" + e.getMessage());\n-        }\n-    }\n-\n-    @Override\n-    protected String processToken(String token, AmqpClass thisClass, AmqpMethod method, AmqpField field,\n-                                  AmqpVersion version)\n-    {\n-        if (token.compareTo(\"${GENERATOR}\") == 0)\n-        {\n-            return GENERATOR_INFO;\n-        }\n-        if (token.compareTo(\"${CLASS}\") == 0 && thisClass != null)\n-        {\n-            return thisClass.getName();\n-        }\n-        if (token.compareTo(\"${CLASS_ID_INIT}\") == 0 && thisClass != null)\n-        {\n-            if (version == null)\n-            {\n-                return String.valueOf(thisClass.getIndexMap().firstKey());\n-            }\n-            return getIndex(thisClass.getIndexMap(), version);\n-        }\n-        if (token.compareTo(\"${METHOD}\") == 0 && method != null)\n-        {\n-            return method.getName();\n-        }\n-        if (token.compareTo(\"${METHOD_ID_INIT}\") == 0 && method != null)\n-        {\n-            if (version == null)\n-            {\n-                return String.valueOf(method.getIndexMap().firstKey());\n-            }\n-            return getIndex(method.getIndexMap(), version);\n-        }\n-        if (token.compareTo(\"${FIELD}\") == 0 && field != null)\n-        {\n-            return field.getName();\n-        }\n-        if (token.compareTo(versionNamespaceStartToken) == 0 && version != null)\n-        {\n-            return \"namespace \" + version.namespace() + CR + \"{\";\n-        }\n-        if (token.compareTo(versionNamespaceEndToken) == 0 && version != null)\n-        {\n-            return \"} // namespace \" + version.namespace();\n-        }\n-        if (token.compareTo(\"${mb_constructor_with_initializers}\") == 0)\n-        {\n-            return generateConstructor(thisClass, method, version, 4, 4);\n-        }\n-        if (token.compareTo(\"${mb_server_operation_invoke}\") == 0)\n-        {\n-            return generateServerOperationsInvoke(thisClass, method, version, 4, 4);\n-        }\n-        if (token.compareTo(\"${mb_buffer_param}\") == 0)\n-        {\n-            return method.getFieldMap().size() > 0 ? \" buffer\" : \"\";\n-        }\n-        if (token.compareTo(\"${hv_latest_major}\") == 0)\n-        {\n-            return String.valueOf(getVersionSet().last().getMajor());\n-        }\n-        if (token.compareTo(\"${hv_latest_minor}\") == 0)\n-        {\n-            return String.valueOf(getVersionSet().last().getMinor());\n-        }\n-\n-        throw new AmqpTemplateException(\"Template token \" + token + \" unknown.\");\n-    }\n-\n-    @Override\n-    protected void processClassList(StringBuffer sb, int listMarkerStartIndex, int listMarkerEndIndex,\n-                                    AmqpModel model, AmqpVersion version)\n-    {\n-        String codeSnippet;\n-        int lend = sb.indexOf(CR, listMarkerStartIndex) + 1; // Include cr at end of line\n-        String tline = sb.substring(listMarkerEndIndex, lend); // Line excluding line marker, including cr\n-        int tokxStart = tline.indexOf('$');\n-        String token = tline.substring(tokxStart).trim();\n-        sb.delete(listMarkerStartIndex, lend);\n-\n-        // ClientOperations.h\n-        if (token.compareTo(\"${coh_method_handler_get_method}\") == 0)\n-        {\n-            codeSnippet = generateOpsMethodHandlerGetMethods(model, false, 4);\n-        }\n-        else if (token.compareTo(\"${coh_inner_class}\") == 0)\n-        {\n-            codeSnippet = generateOpsInnerClasses(model, false, 4, 4);\n-        }\n-\n-        // ServerOperations.h\n-        else if (token.compareTo(\"${soh_method_handler_get_method}\") == 0)\n-        {\n-            codeSnippet = generateOpsMethodHandlerGetMethods(model, true, 4);\n-        }\n-        else if (token.compareTo(\"${soh_inner_class}\") == 0)\n-        {\n-            codeSnippet = generateOpsInnerClasses(model, true, 4, 4);\n-        }\n-\n-        // ClientProxy.h/cpp\n-        else if (token.compareTo(\"${cph_inner_class_instance}\") == 0)\n-        {\n-            codeSnippet = generateProxyInnerClassInstances(model, false, 4);\n-        }\n-        else if (token.compareTo(\"${cph_inner_class_get_method}\") == 0)\n-        {\n-            codeSnippet = generateProxyInnerClassGetMethodDecls(model, false, 4);\n-        }\n-        else if (token.compareTo(\"${cph_inner_class_defn}\") == 0)\n-        {\n-            codeSnippet = generateProxyInnerClassDefinitions(model, false, 4, 4);\n-        }\n-        else if (token.compareTo(\"${cpc_constructor_initializer}\") == 0)\n-        {\n-            codeSnippet = generateProxyConstructorInitializers(model, false, 4);\n-        }\n-        else if (token.compareTo(\"${cpc_inner_class_get_method}\") == 0)\n-        {\n-            codeSnippet = generateProxyInnerClassGetMethodImpls(model, false, 0, 4);\n-        }\n-        else if (token.compareTo(\"${cpc_inner_class_impl}\") == 0)\n-        {\n-            codeSnippet = generateProxyInnerClassImpl(model, false, 0, 4);\n-        }\n-        else if (token.compareTo(\"${cph_handler_pointer_defn}\") == 0)\n-        {\n-            codeSnippet = generateHandlerPointerDefinitions(model, false, 4);\n-        }\n-        else if (token.compareTo(\"${cph_handler_pointer_get_method}\") == 0)\n-        {\n-            codeSnippet = generateHandlerPointerGetMethods(model, false, 4);\n-        }\n-\n-        // SerrverProxy.h/cpp\n-        else if (token.compareTo(\"${sph_inner_class_instance}\") == 0)\n-        {\n-            codeSnippet = generateProxyInnerClassInstances(model, true, 4);\n-        }\n-        else if (token.compareTo(\"${sph_inner_class_get_method}\") == 0)\n-        {\n-            codeSnippet = generateProxyInnerClassGetMethodDecls(model, true, 4);\n-        }\n-        else if (token.compareTo(\"${sph_inner_class_defn}\") == 0)\n-        {\n-            codeSnippet = generateProxyInnerClassDefinitions(model, true, 4, 4);\n-        }\n-        else if (token.compareTo(\"${spc_constructor_initializer}\") == 0)\n-        {\n-            codeSnippet = generateProxyConstructorInitializers(model, true, 4);\n-        }\n-        else if (token.compareTo(\"${spc_inner_class_get_method}\") == 0)\n-        {\n-            codeSnippet = generateProxyInnerClassGetMethodImpls(model, true, 0, 4);\n-        }\n-        else if (token.compareTo(\"${spc_inner_class_impl}\") == 0)\n-        {\n-            codeSnippet = generateProxyInnerClassImpl(model, true, 0, 4);\n-        }\n-        else if (token.compareTo(\"${sph_handler_pointer_defn}\") == 0)\n-        {\n-            codeSnippet = generateHandlerPointerDefinitions(model, true, 4);\n-        }\n-        else if (token.compareTo(\"${sph_handler_pointer_get_method}\") == 0)\n-        {\n-            codeSnippet = generateHandlerPointerGetMethods(model, true, 4);\n-        }\n-\n-        // amqp_methods.h/cpp\n-        else if (token.compareTo(\"${mh_method_body_class_indlude}\") == 0)\n-        {\n-            codeSnippet = generateMethodBodyIncludeList(model, 0);\n-        }\n-        else if (token.compareTo(\"${mh_method_body_class_instance}\") == 0)\n-        {\n-            codeSnippet = generateMethodBodyInstances(model, 0);\n-        }\n-        else if (token.compareTo(\"${mc_create_method_body_map_entry}\") == 0)\n-        {\n-            codeSnippet = generateMethodBodyMapEntry(model, 4);\n-        }\n-\n-        else // Oops!\n-        {\n-            throw new AmqpTemplateException(\"Template token \\\"\" + token + \"\\\" unknown.\");\n-        }\n-        sb.insert(listMarkerStartIndex, codeSnippet);\n-    }\n-\n-    @Override\n-    protected void processMethodList(StringBuffer sb, int listMarkerStartIndex, int listMarkerEndIndex,\n-                                     AmqpClass thisClass)\n-    {\n-        String codeSnippet;\n-        int lend = sb.indexOf(CR, listMarkerStartIndex) + 1; // Include cr at end of line\n-        String tline = sb.substring(listMarkerEndIndex, lend); // Line excluding line marker, including cr\n-        int tokxStart = tline.indexOf('$');\n-        String token = tline.substring(tokxStart).trim();\n-        sb.delete(listMarkerStartIndex, lend);\n-\n-        if (token.compareTo(\"${cpc_method_body_include}\") == 0)\n-        {\n-            codeSnippet = generateMethodBodyIncludes(thisClass, 0);\n-        }\n-        else if (token.compareTo(\"${spc_method_body_include}\") == 0)\n-        {\n-            codeSnippet = generateMethodBodyIncludes(thisClass, 0);\n-        }\n-        else if (token.compareTo(\"${mc_method_body_include}\") == 0)\n-        {\n-            codeSnippet = generateMethodBodyIncludes(thisClass, 0);\n-        }\n-\n-        else // Oops!\n-        {\n-            throw new AmqpTemplateException(\"Template token \" + token + \" unknown.\");\n-        }\n-        sb.insert(listMarkerStartIndex, codeSnippet);\n-    }\n-\n-    @Override\n-    protected void processFieldList(StringBuffer sb, int listMarkerStartIndex, int listMarkerEndIndex,\n-                                    AmqpFieldMap fieldMap, AmqpVersion version)\n-    {\n-        String codeSnippet;\n-        int lend = sb.indexOf(CR, listMarkerStartIndex) + 1; // Include cr at end of line\n-        String tline = sb.substring(listMarkerEndIndex, lend); // Line excluding line marker, including cr\n-        int tokxStart = tline.indexOf('$');\n-        String token = tline.substring(tokxStart).trim();\n-        sb.delete(listMarkerStartIndex, lend);\n-\n-        if (token.compareTo(\"${mb_field_declaration}\") == 0)\n-        {\n-            codeSnippet = generateFieldDeclarations(fieldMap, version, 4);\n-        }\n-        else if (token.compareTo(\"${mb_field_get_method}\") == 0)\n-        {\n-            codeSnippet = generateFieldGetMethods(fieldMap, version, 4);\n-        }\n-        else if (token.compareTo(\"${mb_field_print}\") == 0)\n-        {\n-            codeSnippet = generatePrintMethodContents(fieldMap, version, 8);\n-        }\n-        else if (token.compareTo(\"${mb_body_size}\") == 0)\n-        {\n-            codeSnippet = generateBodySizeMethodContents(fieldMap, version, 8);\n-        }\n-        else if (token.compareTo(\"${mb_encode}\") == 0)\n-        {\n-            codeSnippet = generateEncodeMethodContents(fieldMap, version, 8);\n-        }\n-        else if (token.compareTo(\"${mb_decode}\") == 0)\n-        {\n-            codeSnippet = generateDecodeMethodContents(fieldMap, version, 8);\n-        }\n-\n-        else // Oops!\n-        {\n-            throw new AmqpTemplateException(\"Template token \" + token + \" unknown.\");\n-        }\n-        sb.insert(listMarkerStartIndex, codeSnippet);\n-    }\n-\n-    @Override\n-    protected void processConstantList(StringBuffer sb, int listMarkerStartIndex, int listMarkerEndIndex,\n-                                       AmqpConstantSet constantSet)\n-    {\n-        String codeSnippet;\n-        int lend = sb.indexOf(CR, listMarkerStartIndex) + 1; // Include cr at end of line\n-        String tline = sb.substring(listMarkerEndIndex, lend); // Line excluding line marker, including cr\n-        int tokxStart = tline.indexOf('$');\n-        String token = tline.substring(tokxStart).trim();\n-        sb.delete(listMarkerStartIndex, lend);\n-\n-        if (token.compareTo(\"${ch_get_value_method}\") == 0)\n-        {\n-            codeSnippet = generateConstantGetMethods(constantSet, 4, 4);\n-        }\n-\n-        else // Oops!\n-        {\n-            throw new AmqpTemplateException(\"Template token \" + token + \" unknown.\");\n-        }\n-        sb.insert(listMarkerStartIndex, codeSnippet);\n-    }\n-\n-    // === Protected and private helper functions unique to C++ implementation ===\n-\n-    // Methods for generation of code snippets for AMQP_Constants.h file\n-\n-    protected String generateConstantGetMethods(AmqpConstantSet constantSet,\n-                                                int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-        for (AmqpConstant thisConstant : constantSet.getContstants())\n-        {\n-            if (thisConstant.isVersionConsistent(getVersionSet()))\n-            {\n-                // return a constant\n-                String value = thisConstant.firstKey();\n-                sb.append(indent + \"static const char* \" + thisConstant.getName() + \"() { return \\\"\" +\n-                          thisConstant.firstKey() + \"\\\"; }\" + CR);\n-                if (Utils.containsOnlyDigits(value))\n-                {\n-                    sb.append(indent + \"static int \" + thisConstant.getName() + \"AsInt() { return \" +\n-                              thisConstant.firstKey() + \"; }\" + CR);\n-                }\n-                if (Utils.containsOnlyDigitsAndDecimal(value))\n-                {\n-                    sb.append(indent + \"static double \" + thisConstant.getName() + \"AsDouble() { return (double)\" +\n-                              thisConstant.firstKey() + \"; }\" + CR);\n-                }\n-                sb.append(CR);\n-            }\n-            else\n-            {\n-                // Return version-specific constant\n-                sb.append(generateVersionDependentGet(thisConstant, \"const char*\", \"\", \"\\\"\", \"\\\"\", indentSize, tabSize));\n-                sb.append(generateVersionDependentGet(thisConstant, \"int\", \"AsInt\", \"\", \"\", indentSize, tabSize));\n-                sb.append(generateVersionDependentGet(thisConstant, \"double\", \"AsDouble\", \"(double)\", \"\", indentSize, tabSize));\n-                sb.append(CR);\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generateVersionDependentGet(AmqpConstant constant, String methodReturnType,\n-                                                 String methodNameSuffix, String returnPrefix, String returnPostfix, int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        StringBuffer sb = new StringBuffer();\n-        sb.append(indent + methodReturnType + \" \" + constant.getName() + methodNameSuffix +\n-                  \"() const\" + CR);\n-        sb.append(indent + \"{\" + CR);\n-        boolean first = true;\n-        for (String thisValue : constant.keySet())\n-        {\n-            AmqpVersionSet versionSet = constant.get(thisValue);\n-            sb.append(indent + tab + (first ? \"\" : \"else \") + \"if (\" + generateVersionCheck(versionSet) +\n-                      \")\" + CR);\n-            sb.append(indent + tab + \"{\" + CR);\n-            if (methodReturnType.compareTo(\"int\") == 0 && !Utils.containsOnlyDigits(thisValue))\n-            {\n-                sb.append(generateConstantDeclarationException(constant.getName(), methodReturnType,\n-                                                               indentSize + (2 * tabSize), tabSize));\n-            }\n-            else if (methodReturnType.compareTo(\"double\") == 0 && !Utils.containsOnlyDigitsAndDecimal(thisValue))\n-            {\n-                sb.append(generateConstantDeclarationException(constant.getName(), methodReturnType,\n-                                                               indentSize + (2 * tabSize), tabSize));\n-            }\n-            else\n-            {\n-                sb.append(indent + tab + tab + \"return \" + returnPrefix + thisValue + returnPostfix + \";\" + CR);\n-            }\n-            sb.append(indent + tab + \"}\" + CR);\n-            first = false;\n-        }\n-        sb.append(indent + tab + \"else\" + CR);\n-        sb.append(indent + tab + \"{\" + CR);\n-        sb.append(indent + tab + tab + \"std::stringstream ss;\" + CR);\n-        sb.append(indent + tab + tab + \"ss << \\\"Constant \\\\\\\"\" + constant.getName() +\n-                  \"\\\\\\\" is undefined for AMQP version \\\" <<\" + CR);\n-        sb.append(indent + tab + tab + tab + \"version.toString() << \\\".\\\";\" + CR);\n-        sb.append(indent + tab + tab + \"throw ProtocolVersionException(ss.str());\" + CR);\n-        sb.append(indent + tab + \"}\" + CR);\n-        sb.append(indent + \"}\" + CR);\n-        return sb.toString();\n-    }\n-\n-    protected String generateConstantDeclarationException(String name, String methodReturnType,\n-                                                          int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        StringBuffer sb = new StringBuffer();\n-        sb.append(indent + \"std::stringstream ss;\" + CR);\n-        sb.append(indent + \"ss << \\\"Constant \\\\\\\"\" + name + \"\\\\\\\" cannot be converted to type \" +\n-                  methodReturnType + \" for AMQP version \\\" <<\" + CR);\n-        sb.append(indent + tab + \"version.toString() << \\\".\\\";\" + CR);\n-        sb.append(indent + \"throw ProtocolVersionException(ss.str());\" + CR);\n-        return sb.toString();\n-    }\n-\n-    // Methods used for generation of code snippets for Server/ClientOperations class generation\n-\n-    protected String generateOpsMethodHandlerGetMethods(AmqpModel model, boolean serverFlag, int indentSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-        for (String thisClassName : model.getClassMap().keySet())\n-        {\n-            AmqpClass thisClass = model.getClassMap().get(thisClassName);\n-            // Only generate for this class if there is at least one method of the\n-            // required chassis (server/client flag).\n-            boolean chassisFoundFlag = false;\n-            for (String thisMethodName : thisClass.getMethodMap().keySet())\n-            {\n-                AmqpMethod method = thisClass.getMethodMap().get(thisMethodName);\n-                boolean clientChassisFlag = method.getClientMethodFlagMap().isSet();\n-                boolean serverChassisFlag = method.getServerMethodFlagMap().isSet();\n-                if ((serverFlag && serverChassisFlag) || (!serverFlag && clientChassisFlag))\n-                {\n-                    chassisFoundFlag = true;\n-                }\n-            }\n-            if (chassisFoundFlag)\n-            {\n-                sb.append(indent + \"virtual AMQP_\" + (serverFlag ? \"Server\" : \"Client\") + \"Operations::\" +\n-                          thisClass.getName() + \"Handler* get\" + thisClass.getName() + \"Handler() = 0;\" + CR);\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generateOpsInnerClasses(AmqpModel model, boolean serverFlag, int indentSize, int tabSize)\n-    {\n-\n-        String proxyClassName = \"AMQP_\" + (serverFlag ? \"Server\" : \"Client\") + \"Proxy\";\n-        String indent = Utils.createSpaces(indentSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        StringBuffer sb = new StringBuffer();\n-        boolean first = true;\n-        for (String thisClassName : model.getClassMap().keySet())\n-        {\n-            AmqpClass thisClass = model.getClassMap().get(thisClassName);\n-            String handlerClassName = thisClass.getName() + \"Handler\";\n-            if (!first)\n-            {\n-                sb.append(CR);\n-            }\n-            sb.append(indent + \"// ==================== class \" + handlerClassName +\n-                      \" ====================\" + CR);\n-            sb.append(indent + \"class \" + handlerClassName);\n-            if (thisClass.getVersionSet().size() != getVersionSet().size())\n-            {\n-                sb.append(\" // AMQP Version(s) \" + thisClass.getVersionSet() + CR);\n-            }\n-            else\n-            {\n-                sb.append(CR);\n-            }\n-            sb.append(indent + \"{\" + CR);\n-            sb.append(indent + \"private:\" + CR);\n-            sb.append(indent + tab + proxyClassName + \"* parent;\" + CR);\n-            sb.append(CR);\n-            sb.append(indent + tab + \"// Constructors and destructors\" + CR);\n-            sb.append(CR);\n-            sb.append(indent + \"protected:\" + CR);\n-            sb.append(indent + tab + handlerClassName + \"() {}\" + CR);\n-            sb.append(indent + \"public:\" + CR);\n-            sb.append(indent + tab + handlerClassName +\n-                      \"(\" + proxyClassName + \"* _parent) {parent = _parent;}\" + CR);\n-            sb.append(indent + tab + \"virtual ~\" + handlerClassName + \"() {}\" + CR);\n-            sb.append(CR);\n-            sb.append(indent + tab + \"// Protocol methods\" + CR);\n-            sb.append(CR);\n-            sb.append(generateInnerClassMethods(thisClass, serverFlag, true, indentSize + tabSize, tabSize));\n-            sb.append(indent + \"}; // class \" + handlerClassName + CR);\n-            first = false;\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generateInnerClassMethods(AmqpClass thisClass, boolean serverFlag,\n-                                               boolean abstractMethodFlag, int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-        String outerClassName = \"AMQP_\" + (serverFlag ? \"Server\" : \"Client\") + (abstractMethodFlag ? \"Operations\"\n-                                                                                : \"Proxy\");\n-        boolean first = true;\n-        for (String thisMethodName : thisClass.getMethodMap().keySet())\n-        {\n-            AmqpMethod method = thisClass.getMethodMap().get(thisMethodName);\n-            boolean clientChassisFlag = method.getClientMethodFlagMap().isSet();\n-            boolean serverChassisFlag = method.getServerMethodFlagMap().isSet();\n-            if ((serverFlag && serverChassisFlag) || (!serverFlag && clientChassisFlag))\n-            {\n-                String methodName = parseForReservedWords(method.getName(), outerClassName + \".\" + thisClass.getName());\n-                AmqpOverloadedParameterMap overloadededParameterMap =\n-                        method.getOverloadedParameterLists(thisClass.getVersionSet(), this);\n-                for (AmqpOrdinalFieldMap thisFieldMap : overloadededParameterMap.keySet())\n-                {\n-                    AmqpVersionSet versionSet = overloadededParameterMap.get(thisFieldMap);\n-                    if (!first)\n-                    {\n-                        sb.append(CR);\n-                    }\n-                    sb.append(indent + \"virtual void \" + methodName + \"( u_int16_t channel\");\n-                    sb.append(generateMethodParameterList(thisFieldMap, indentSize + (5 * tabSize), true, true, true));\n-                    sb.append(\" )\");\n-                    if (abstractMethodFlag)\n-                    {\n-                        sb.append(\" = 0\");\n-                    }\n-                    sb.append(\";\");\n-                    if (versionSet.size() != getVersionSet().size())\n-                    {\n-                        sb.append(\" // AMQP Version(s) \" + versionSet);\n-                    }\n-                    sb.append(CR);\n-                    first = false;\n-                }\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    // Methods used for generation of code snippets for Server/ClientProxy class generation\n-\n-    protected String generateHandlerPointerDefinitions(AmqpModel model, boolean serverFlag,\n-                                                       int indentSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-        String outerClassName = \"AMQP_\" + (serverFlag ? \"Server\" : \"Client\") + \"Operations\";\n-        for (String thisClassName : model.getClassMap().keySet())\n-        {\n-            AmqpClass thisClass = model.getClassMap().get(thisClassName);\n-            sb.append(indent + outerClassName + \"::\" + thisClass.getName() + \"Handler* \" +\n-                      thisClass.getName() + \"HandlerPtr;\" + CR);\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generateHandlerPointerGetMethods(AmqpModel model, boolean serverFlag,\n-                                                      int indentSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-        String outerClassName = \"AMQP_\" + (serverFlag ? \"Server\" : \"Client\") + \"Operations\";\n-        for (String thisClassName : model.getClassMap().keySet())\n-        {\n-            AmqpClass thisClass = model.getClassMap().get(thisClassName);\n-            sb.append(indent + \"virtual inline \" + outerClassName + \"::\" + thisClass.getName() + \"Handler* get\" +\n-                      thisClass.getName() + \"Handler() { return &\" + Utils.firstLower(thisClass.getName()) + \";}\" + CR);\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generateProxyInnerClassInstances(AmqpModel model, boolean serverFlag,\n-                                                      int indentSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-        String outerClassName = \"AMQP_\" + (serverFlag ? \"Server\" : \"Client\") + \"Proxy\";\n-        for (String thisClassName : model.getClassMap().keySet())\n-        {\n-            AmqpClass thisClass = model.getClassMap().get(thisClassName);\n-            String instanceName = parseForReservedWords(Utils.firstLower(thisClass.getName()), outerClassName);\n-            String className = parseForReservedWords(thisClass.getName(), null);\n-            sb.append(indent + className + \" \" + instanceName + \";\");\n-            if (thisClass.getVersionSet().size() != getVersionSet().size())\n-            {\n-                sb.append(\" // AMQP Version(s) \" + thisClass.getVersionSet() + CR);\n-            }\n-            else\n-            {\n-                sb.append(CR);\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generateProxyInnerClassGetMethodDecls(AmqpModel model, boolean serverFlag,\n-                                                           int indentSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-        String outerClassName = \"AMQP_\" + (serverFlag ? \"Server\" : \"Client\") + \"Proxy\";\n-        for (String thisClassName : model.getClassMap().keySet())\n-        {\n-            AmqpClass thisClass = model.getClassMap().get(thisClassName);\n-            String className = parseForReservedWords(thisClass.getName(), outerClassName);\n-            sb.append(indent + className + \"& get\" + className + \"();\");\n-            if (thisClass.getVersionSet().size() != getVersionSet().size())\n-            {\n-                sb.append(\" // AMQP Version(s) \" + thisClass.getVersionSet() + CR);\n-            }\n-            else\n-            {\n-                sb.append(CR);\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generateProxyInnerClassDefinitions(AmqpModel model, boolean serverFlag,\n-                                                        int indentSize, int tabSize)\n-    {\n-        String proxyClassName = \"AMQP_\" + (serverFlag ? \"Server\" : \"Client\") + \"Proxy\";\n-        String indent = Utils.createSpaces(indentSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        StringBuffer sb = new StringBuffer();\n-        boolean first = true;\n-        for (String thisClassName : model.getClassMap().keySet())\n-        {\n-            AmqpClass thisClass = model.getClassMap().get(thisClassName);\n-            String className = thisClass.getName();\n-            String superclassName = \"AMQP_\" + (serverFlag ? \"Server\" : \"Client\") + \"Operations::\" +\n-                                    thisClass.getName() + \"Handler\";\n-            if (!first)\n-            {\n-                sb.append(CR);\n-            }\n-            sb.append(indent + \"// ==================== class \" + className +\n-                      \" ====================\" + CR);\n-            sb.append(indent + \"class \" + className + \" : virtual public \" + superclassName);\n-            if (thisClass.getVersionSet().size() != getVersionSet().size())\n-            {\n-                sb.append(\" // AMQP Version(s) \" + thisClass.getVersionSet() + CR);\n-            }\n-            else\n-            {\n-                sb.append(CR);\n-            }\n-            sb.append(indent + \"{\" + CR);\n-            sb.append(indent + \"private:\" + CR);\n-            sb.append(indent + tab + \"OutputHandler* out;\" + CR);\n-            sb.append(indent + tab + proxyClassName + \"* parent;\" + CR);\n-            sb.append(CR);\n-            sb.append(indent + \"public:\" + CR);\n-            sb.append(indent + tab + \"// Constructors and destructors\" + CR);\n-            sb.append(CR);\n-            sb.append(indent + tab + className + \"(OutputHandler* out, \" + proxyClassName + \"* _parent) : \" + CR);\n-            sb.append(indent + tab + tab + \"out(out) {parent = _parent;}\" + CR);\n-            sb.append(indent + tab + \"virtual ~\" + className + \"() {}\" + CR);\n-            sb.append(CR);\n-            sb.append(indent + tab + \"// Protocol methods\" + CR);\n-            sb.append(CR);\n-            sb.append(generateInnerClassMethods(thisClass, serverFlag, false, indentSize + tabSize, tabSize));\n-            sb.append(indent + \"}; // class \" + className + CR);\n-            first = false;\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generateProxyConstructorInitializers(AmqpModel model, boolean serverFlag,\n-                                                          int indentSize)\n-    {\n-        String outerClassName = \"AMQP_\" + (serverFlag ? \"Server\" : \"Client\") + \"Proxy\";\n-        String superclassName = \"AMQP_\" + (serverFlag ? \"Server\" : \"Client\") + \"Operations\";\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer(indent + superclassName + \"(major, minor),\" + CR);\n-        sb.append(indent + \"version(major, minor),\" + CR);\n-        sb.append(indent + \"out(out)\");\n-        Iterator<String> cItr = model.getClassMap().keySet().iterator();\n-        while (cItr.hasNext())\n-        {\n-            AmqpClass thisClass = model.getClassMap().get(cItr.next());\n-            String instanceName = parseForReservedWords(Utils.firstLower(thisClass.getName()), outerClassName);\n-            sb.append(\",\" + CR);\n-            sb.append(indent + instanceName + \"(out, this)\");\n-            if (!cItr.hasNext())\n-            {\n-                sb.append(CR);\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generateProxyInnerClassGetMethodImpls(AmqpModel model, boolean serverFlag,\n-                                                           int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        StringBuffer sb = new StringBuffer();\n-        String outerClassName = \"AMQP_\" + (serverFlag ? \"Server\" : \"Client\") + \"Proxy\";\n-        Iterator<String> cItr = model.getClassMap().keySet().iterator();\n-        while (cItr.hasNext())\n-        {\n-            AmqpClass thisClass = model.getClassMap().get(cItr.next());\n-            String className = thisClass.getName();\n-            String instanceName = parseForReservedWords(Utils.firstLower(thisClass.getName()), outerClassName);\n-            sb.append(indent + outerClassName + \"::\" + className + \"& \" +\n-                      outerClassName + \"::get\" + className + \"()\" + CR);\n-            sb.append(indent + \"{\" + CR);\n-            if (thisClass.getVersionSet().size() != getVersionSet().size())\n-            {\n-                sb.append(indent + tab + \"if (!\" + generateVersionCheck(thisClass.getVersionSet()) + \")\" + CR);\n-                sb.append(indent + tab + tab + \"throw new ProtocolVersionException();\" + CR);\n-            }\n-            sb.append(indent + tab + \"return \" + instanceName + \";\" + CR);\n-            sb.append(indent + \"}\" + CR);\n-            if (cItr.hasNext())\n-            {\n-                sb.append(CR);\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generateProxyInnerClassImpl(AmqpModel model, boolean serverFlag,\n-                                                 int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-        boolean firstClassFlag = true;\n-        for (String thisClassName : model.getClassMap().keySet())\n-        {\n-            AmqpClass thisClass = model.getClassMap().get(thisClassName);\n-            String className = thisClass.getName();\n-            if (!firstClassFlag)\n-            {\n-                sb.append(CR);\n-            }\n-            sb.append(indent + \"// ==================== class \" + className +\n-                      \" ====================\" + CR);\n-            sb.append(generateInnerClassMethodImpls(thisClass, serverFlag, indentSize, tabSize));\n-            firstClassFlag = false;\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generateInnerClassMethodImpls(AmqpClass thisClass, boolean serverFlag,\n-                                                   int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-        String outerclassName = \"AMQP_\" + (serverFlag ? \"Server\" : \"Client\") + \"Proxy\";\n-        boolean first = true;\n-        for (String thisMethodName : thisClass.getMethodMap().keySet())\n-        {\n-            AmqpMethod method = thisClass.getMethodMap().get(thisMethodName);\n-            String methodBodyClassName = thisClass.getName() + Utils.firstUpper(method.getName()) + \"Body\";\n-            boolean clientChassisFlag = method.getClientMethodFlagMap().isSet();\n-            boolean serverChassisFlag = method.getServerMethodFlagMap().isSet();\n-            boolean versionConsistentFlag = method.isVersionConsistent(getVersionSet());\n-            if ((serverFlag && serverChassisFlag) || (!serverFlag && clientChassisFlag))\n-            {\n-                String methodName = parseForReservedWords(method.getName(), outerclassName + \".\" + thisClass.getName());\n-                AmqpOverloadedParameterMap overloadededParameterMap =\n-                        method.getOverloadedParameterLists(thisClass.getVersionSet(), this);\n-                for (AmqpOrdinalFieldMap thisFieldMap : overloadededParameterMap.keySet())\n-                {\n-                    AmqpVersionSet versionSet = overloadededParameterMap.get(thisFieldMap);\n-                    if (!first)\n-                    {\n-                        sb.append(CR);\n-                    }\n-                    sb.append(indent + \"void \" + outerclassName + \"::\" + thisClass.getName() + \"::\" +\n-                              methodName + \"( u_int16_t channel\");\n-                    sb.append(generateMethodParameterList(thisFieldMap, indentSize + (5 * tabSize), true, true, true));\n-                    sb.append(\" )\");\n-                    if (versionSet.size() != getVersionSet().size())\n-                    {\n-                        sb.append(\" // AMQP Version(s) \" + versionSet);\n-                    }\n-                    sb.append(CR);\n-                    sb.append(indent + \"{\" + CR);\n-                    sb.append(generateMethodBodyCallContext(thisFieldMap, outerclassName, methodBodyClassName,\n-                                                            versionConsistentFlag, versionSet, indentSize + tabSize, tabSize));\n-                    sb.append(indent + \"}\" + CR);\n-                    sb.append(CR);\n-                    first = false;\n-                }\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generateMethodBodyCallContext(AmqpOrdinalFieldMap fieldMap, String outerclassName,\n-                                                   String methodBodyClassName, boolean versionConsistentFlag, AmqpVersionSet versionSet,\n-                                                   int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        StringBuffer sb = new StringBuffer();\n-        if (versionConsistentFlag)\n-        {\n-            sb.append(generateMethodBodyCall(fieldMap, methodBodyClassName, null, indentSize, tabSize));\n-        }\n-        else\n-        {\n-            boolean firstOverloadedMethodFlag = true;\n-            for (AmqpVersion thisVersion : versionSet)\n-            {\n-                sb.append(indent);\n-                if (!firstOverloadedMethodFlag)\n-                {\n-                    sb.append(\"else \");\n-                }\n-                sb.append(\"if (\" + generateVersionCheck(thisVersion) + \")\" + CR);\n-                sb.append(indent + \"{\" + CR);\n-                sb.append(generateMethodBodyCall(fieldMap, methodBodyClassName, thisVersion,\n-                                                 indentSize + tabSize, tabSize));\n-                sb.append(indent + \"}\" + CR);\n-                firstOverloadedMethodFlag = false;\n-            }\n-            sb.append(indent + \"else\" + CR);\n-            sb.append(indent + \"{\" + CR);\n-            sb.append(indent + tab + \"std::stringstream ss;\" + CR);\n-            sb.append(indent + tab + \"ss << \\\"Call to \" + outerclassName + \"::\" + methodBodyClassName +\n-                      \"(u_int16_t\" + generateMethodParameterList(fieldMap, 0, true, true, false) + \")\\\"\" + CR);\n-            sb.append(indent + tab + tab + \"<< \\\" is invalid for AMQP version \\\" << version.toString() << \\\".\\\";\" + CR);\n-            sb.append(indent + tab + \"throw new ProtocolVersionException(ss.str());\" + CR);\n-            sb.append(indent + \"}\" + CR);\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generateMethodBodyCall(AmqpOrdinalFieldMap fieldMap, String methodBodyClassName,\n-                                            AmqpVersion version, int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        String namespace = version != null ? version.namespace() + \"::\" : \"\";\n-        StringBuffer sb = new StringBuffer(indent + \"out->send( new AMQFrame(parent->getProtocolVersion(), channel,\" + CR);\n-        sb.append(indent + tab + \"new \" + namespace + methodBodyClassName + \"( parent->getProtocolVersion()\");\n-        sb.append(generateMethodParameterList(fieldMap, indentSize + (5 * tabSize), true, false, true));\n-        sb.append(\" )));\" + CR);\n-        return sb.toString();\n-    }\n-\n-    protected String generateMethodBodyIncludes(AmqpClass thisClass, int indentSize)\n-    {\n-        StringBuffer sb = new StringBuffer();\n-        if (thisClass != null)\n-        {\n-            sb.append(generateClassMethodBodyInclude(thisClass, indentSize));\n-        }\n-        else\n-        {\n-            for (String thisClassName : getModel().getClassMap().keySet())\n-            {\n-                thisClass = getModel().getClassMap().get(thisClassName);\n-                sb.append(generateClassMethodBodyInclude(thisClass, indentSize));\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generateClassMethodBodyInclude(AmqpClass thisClass, int indentSize)\n-    {\n-        StringBuffer sb = new StringBuffer();\n-        String indent = Utils.createSpaces(indentSize);\n-        for (String thisMethodName : thisClass.getMethodMap().keySet())\n-        {\n-            AmqpMethod method = thisClass.getMethodMap().get(thisMethodName);\n-            sb.append(indent + \"#include <\" + thisClass.getName() +\n-                      Utils.firstUpper(method.getName()) + \"Body.h>\" + CR);\n-        }\n-        return sb.toString();\n-    }\n-\n-    // Methods used for generation of code snippets for MethodBody class generation\n-\n-    protected String getIndex(AmqpOrdinalVersionMap indexMap, AmqpVersion version)\n-    {\n-        for (Integer thisIndex : indexMap.keySet())\n-        {\n-            AmqpVersionSet versionSet = indexMap.get(thisIndex);\n-            if (versionSet.contains(version))\n-            {\n-                return String.valueOf(thisIndex);\n-            }\n-        }\n-        throw new AmqpTemplateException(\"Unable to find index for version \" + version);\n-    }\n-\n-    protected String generateFieldDeclarations(AmqpFieldMap fieldMap, AmqpVersion version, int indentSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-\n-        if (version == null)\n-        {\n-            version = getVersionSet().first();\n-        }\n-        AmqpOrdinalFieldMap ordinalFieldMap = fieldMap.getMapForVersion(version, true, this);\n-        for (Integer thisOrdinal : ordinalFieldMap.keySet())\n-        {\n-            String[] fieldDomainPair = ordinalFieldMap.get(thisOrdinal);\n-            sb.append(indent + fieldDomainPair[FIELD_CODE_TYPE] + \" \" + fieldDomainPair[FIELD_NAME] + \";\" + CR);\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generateFieldGetMethods(AmqpFieldMap fieldMap, AmqpVersion version, int indentSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-\n-        if (version == null)\n-        {\n-            version = getVersionSet().first();\n-        }\n-        AmqpOrdinalFieldMap ordinalFieldMap = fieldMap.getMapForVersion(version, true, this);\n-        for (Integer thisOrdinal : ordinalFieldMap.keySet())\n-        {\n-            String[] fieldDomainPair = ordinalFieldMap.get(thisOrdinal);\n-            sb.append(indent + \"inline \" + setRef(fieldDomainPair[FIELD_CODE_TYPE]) + \" get\" +\n-                      Utils.firstUpper(fieldDomainPair[FIELD_NAME]) + \"() { return \" +\n-                      fieldDomainPair[FIELD_NAME] + \"; }\" + CR);\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generatePrintMethodContents(AmqpFieldMap fieldMap, AmqpVersion version, int indentSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-\n-        if (version == null)\n-        {\n-            version = getVersionSet().first();\n-        }\n-        AmqpOrdinalFieldMap ordinalFieldMap = fieldMap.getMapForVersion(version, true, this);\n-        boolean firstFlag = true;\n-        for (Integer thisOrdinal : ordinalFieldMap.keySet())\n-        {\n-            String[] fieldDomainPair = ordinalFieldMap.get(thisOrdinal);\n-            String cast = fieldDomainPair[FIELD_CODE_TYPE].compareTo(\"u_int8_t\") == 0 ? \"(int)\" : \"\";\n-            sb.append(indent + \"out << \\\"\");\n-            if (!firstFlag)\n-            {\n-                sb.append(\"; \");\n-            }\n-            sb.append(fieldDomainPair[FIELD_NAME] + \"=\\\" << \" + cast + fieldDomainPair[FIELD_NAME] + \";\" + CR);\n-            firstFlag = false;\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generateBodySizeMethodContents(AmqpFieldMap fieldMap, AmqpVersion version,\n-                                                    int indentSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-        ArrayList<String> bitFieldList = new ArrayList<String>();\n-        AmqpOrdinalFieldMap ordinalFieldMap = fieldMap.getMapForVersion(version, false, this);\n-        Iterator<Integer> oItr = ordinalFieldMap.keySet().iterator();\n-        int ordinal = 0;\n-        while (oItr.hasNext())\n-        {\n-            ordinal = oItr.next();\n-            String[] fieldDomainPair = ordinalFieldMap.get(ordinal);\n-            AmqpVersion thisVersion = version == null ? getVersionSet().first() : version;\n-            String domainType = getDomainType(fieldDomainPair[FIELD_CODE_TYPE], thisVersion);\n-\n-            // Defer bit types by adding them to an array. When the first subsequent non-bit\n-            // type is encountered, then handle the bits. This allows consecutive bits to be\n-            // placed into the same byte(s) - 8 bits to the byte.\n-            if (domainType.compareTo(\"bit\") == 0)\n-            {\n-                bitFieldList.add(fieldDomainPair[FIELD_NAME]);\n-            }\n-            else\n-            {\n-                if (bitFieldList.size() > 0) // Handle accumulated bit types (if any)\n-                {\n-                    sb.append(generateBitArrayBodySizeMethodContents(bitFieldList, ordinal, indentSize));\n-                }\n-                sb.append(indent + \"size += \" +\n-                          typeMap.get(domainType).size.replaceAll(\"#\", fieldDomainPair[FIELD_NAME]) +\n-                          \"; /* \" + fieldDomainPair[FIELD_NAME] + \": \" +\n-                          domainType + \" */\" + CR);\n-            }\n-        }\n-        if (bitFieldList.size() > 0) // Handle any remaining accumulated bit types\n-        {\n-            sb.append(generateBitArrayBodySizeMethodContents(bitFieldList, ordinal, indentSize));\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generateBitArrayBodySizeMethodContents(ArrayList<String> bitFieldList,\n-                                                            int ordinal, int indentSize)\n-    {\n-        int numBytes = ((bitFieldList.size() - 1) / 8) + 1;\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-        String comment = bitFieldList.size() == 1 ?\n-                         bitFieldList.get(0) + \": bit\" :\n-                         \"Combinded bits: \" + bitFieldList;\n-        sb.append(indent + \"size += \" +\n-                  typeMap.get(\"bit\").size.replaceAll(\"~\", String.valueOf(numBytes)) +\n-                  \"; /* \" + comment + \" */\" + CR);\n-        bitFieldList.clear();\n-        return sb.toString();\n-    }\n-\n-    protected String generateEncodeMethodContents(AmqpFieldMap fieldMap, AmqpVersion version,\n-                                                  int indentSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-        ArrayList<String> bitFieldList = new ArrayList<String>();\n-        AmqpOrdinalFieldMap ordinalFieldMap = fieldMap.getMapForVersion(version, false, this);\n-        Iterator<Integer> oItr = ordinalFieldMap.keySet().iterator();\n-        int ordinal = 0;\n-        while (oItr.hasNext())\n-        {\n-            ordinal = oItr.next();\n-            String[] fieldDomainPair = ordinalFieldMap.get(ordinal);\n-            AmqpVersion thisVersion = version == null ? getVersionSet().first() : version;\n-            String domainType = getDomainType(fieldDomainPair[FIELD_CODE_TYPE], thisVersion);\n-\n-            // Defer bit types by adding them to an array. When the first subsequent non-bit\n-            // type is encountered, then handle the bits. This allows consecutive bits to be\n-            // placed into the same byte(s) - 8 bits to the byte.\n-            if (domainType.compareTo(\"bit\") == 0)\n-            {\n-                bitFieldList.add(fieldDomainPair[FIELD_NAME]);\n-            }\n-            else\n-            {\n-                if (bitFieldList.size() > 0) // Handle accumulated bit types (if any)\n-                {\n-                    sb.append(generateBitEncodeMethodContents(bitFieldList, ordinal, indentSize));\n-                }\n-                sb.append(indent +\n-                          typeMap.get(domainType).encodeExpression.replaceAll(\"#\", fieldDomainPair[FIELD_NAME]) +\n-                          \"; /* \" + fieldDomainPair[FIELD_NAME] + \": \" + domainType + \" */\" + CR);\n-            }\n-        }\n-        if (bitFieldList.size() > 0) // Handle any remaining accumulated bit types\n-        {\n-            sb.append(generateBitEncodeMethodContents(bitFieldList, ordinal, indentSize));\n-        }\n-\n-        return sb.toString();\n-    }\n-\n-    protected String generateBitEncodeMethodContents(ArrayList<String> bitFieldList, int ordinal,\n-                                                     int indentSize)\n-    {\n-        int numBytes = ((bitFieldList.size() - 1) / 8) + 1;\n-        String indent = Utils.createSpaces(indentSize);\n-        String bitArrayName = \"flags_\" + ordinal;\n-        StringBuffer sb = new StringBuffer(indent + \"u_int8_t \" + bitArrayName +\n-                                           \"[\" + numBytes + \"] = {0};\" +\n-                                           (numBytes != 1 ? \" /* All array elements will be initialized to 0 */\" : \"\") +\n-                                           CR);\n-        for (int i = 0; i < bitFieldList.size(); i++)\n-        {\n-            int bitIndex = i % 8;\n-            int byteIndex = i / 8;\n-            sb.append(indent + bitArrayName + \"[\" + byteIndex + \"] |= \" + bitFieldList.get(i) +\n-                      \" << \" + bitIndex + \"; /* \" + bitFieldList.get(i) + \": bit */\" + CR);\n-        }\n-        for (int i = 0; i < numBytes; i++)\n-        {\n-            sb.append(indent + \"buffer.putOctet(\" + bitArrayName + \"[\" + i + \"]);\" + CR);\n-        }\n-        bitFieldList.clear();\n-        return sb.toString();\n-    }\n-\n-    protected String generateDecodeMethodContents(AmqpFieldMap fieldMap, AmqpVersion version,\n-                                                  int indentSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-        ArrayList<String> bitFieldList = new ArrayList<String>();\n-        AmqpOrdinalFieldMap ordinalFieldMap = fieldMap.getMapForVersion(version, false, this);\n-        Iterator<Integer> oItr = ordinalFieldMap.keySet().iterator();\n-        int ordinal = 0;\n-        while (oItr.hasNext())\n-        {\n-            ordinal = oItr.next();\n-            String[] fieldDomainPair = ordinalFieldMap.get(ordinal);\n-            AmqpVersion thisVersion = version == null ? getVersionSet().first() : version;\n-            String domainType = getDomainType(fieldDomainPair[FIELD_CODE_TYPE], thisVersion);\n-\n-            // Defer bit types by adding them to an array. When the first subsequent non-bit\n-            // type is encountered, then handle the bits. This allows consecutive bits to be\n-            // placed into the same byte(s) - 8 bits to the byte.\n-            if (domainType.compareTo(\"bit\") == 0)\n-            {\n-                bitFieldList.add(fieldDomainPair[FIELD_NAME]);\n-            }\n-            else\n-            {\n-                if (bitFieldList.size() > 0) // Handle accumulated bit types (if any)\n-                {\n-                    sb.append(generateBitDecodeMethodContents(bitFieldList, ordinal, indentSize));\n-                }\n-                sb.append(indent +\n-                          typeMap.get(domainType).decodeExpression.replaceAll(\"#\", fieldDomainPair[FIELD_NAME]) +\n-                          \"; /* \" + fieldDomainPair[FIELD_NAME] + \": \" + domainType + \" */\" + CR);\n-            }\n-        }\n-        if (bitFieldList.size() > 0) // Handle any remaining accumulated bit types\n-        {\n-            sb.append(generateBitDecodeMethodContents(bitFieldList, ordinal, indentSize));\n-        }\n-\n-        return sb.toString();\n-    }\n-\n-    protected String generateBitDecodeMethodContents(ArrayList<String> bitFieldList, int ordinal,\n-                                                     int indentSize)\n-    {\n-        int numBytes = ((bitFieldList.size() - 1) / 8) + 1;\n-        String indent = Utils.createSpaces(indentSize);\n-        String bitArrayName = \"flags_\" + ordinal;\n-        StringBuffer sb = new StringBuffer(indent + \"u_int8_t \" + bitArrayName +\n-                                           \"[\" + numBytes + \"];\" + CR);\n-        for (int i = 0; i < numBytes; i++)\n-        {\n-            sb.append(indent + bitArrayName + \"[\" + i + \"] = buffer.getOctet();\" + CR);\n-        }\n-        for (int i = 0; i < bitFieldList.size(); i++)\n-        {\n-            int bitIndex = i % 8;\n-            int byteIndex = i / 8;\n-            sb.append(indent + bitFieldList.get(i) + \" = (1 << \" + bitIndex + \") & \" +\n-                      bitArrayName + \"[\" + byteIndex + \"]; /* \" + bitFieldList.get(i) +\n-                      \": bit */\" + CR);\n-        }\n-        bitFieldList.clear();\n-        return sb.toString();\n-    }\n-\n-    protected String generateFieldList(AmqpFieldMap fieldMap, AmqpVersion version, boolean defineFlag,\n-                                       boolean initializerFlag, int indentSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-        AmqpOrdinalFieldMap ordinalFieldMap = fieldMap.getMapForVersion(version, true, this);\n-        Iterator<Integer> oItr = ordinalFieldMap.keySet().iterator();\n-        while (oItr.hasNext())\n-        {\n-            int ordinal = oItr.next();\n-            String[] fieldDomainPair = ordinalFieldMap.get(ordinal);\n-            sb.append(indent + (defineFlag ? setRef(fieldDomainPair[FIELD_CODE_TYPE]) + \" \" : \"\") +\n-                      fieldDomainPair[FIELD_NAME] + (initializerFlag ? \"(\" + fieldDomainPair[FIELD_NAME] + \")\" : \"\") +\n-                      (oItr.hasNext() ? \",\" : \"\") + CR);\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generateMethodParameterList(AmqpOrdinalFieldMap fieldMap, int indentSize,\n-                                                 boolean leadingCommaFlag, boolean fieldTypeFlag, boolean fieldNameFlag)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-        boolean first = true;\n-        Iterator<Integer> pItr = fieldMap.keySet().iterator();\n-        while (pItr.hasNext())\n-        {\n-            String[] field = fieldMap.get(pItr.next());\n-            if (first && leadingCommaFlag)\n-            {\n-                sb.append(\",\" + (fieldNameFlag ? CR : \" \"));\n-            }\n-            if (!first || leadingCommaFlag)\n-            {\n-                sb.append(indent);\n-            }\n-            sb.append(\n-                    (fieldTypeFlag ? setRef(field[FIELD_CODE_TYPE]) : \"\") +\n-                    (fieldNameFlag ? \" \" + field[FIELD_NAME] : \"\") +\n-                    (pItr.hasNext() ? \",\" + (fieldNameFlag ? CR : \" \") : \"\"));\n-            first = false;\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generateConstructor(AmqpClass thisClass, AmqpMethod method,\n-                                         AmqpVersion version, int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        StringBuffer sb = new StringBuffer();\n-        if (method.getFieldMap().size() > 0)\n-        {\n-            sb.append(indent + thisClass.getName() + Utils.firstUpper(method.getName()) + \"Body(ProtocolVersion& version,\" + CR);\n-            sb.append(generateFieldList(method.getFieldMap(), version, true, false, 8));\n-            sb.append(indent + tab + \") :\" + CR);\n-            sb.append(indent + tab + \"AMQMethodBody(version),\" + CR);\n-            sb.append(generateFieldList(method.getFieldMap(), version, false, true, 8));\n-            sb.append(indent + \"{ }\" + CR);\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generateServerOperationsInvoke(AmqpClass thisClass, AmqpMethod method,\n-                                                    AmqpVersion version, int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        StringBuffer sb = new StringBuffer();\n-\n-        if (method.getServerMethodFlagMap().size() > 0) // At least one AMQP version defines this method as a server method\n-        {\n-            Iterator<Boolean> bItr = method.getServerMethodFlagMap().keySet().iterator();\n-            while (bItr.hasNext())\n-            {\n-                if (bItr.next()) // This is a server operation\n-                {\n-                    boolean fieldMapNotEmptyFlag = method.getFieldMap().size() > 0;\n-                    sb.append(indent + \"inline void invoke(AMQP_ServerOperations& target, u_int16_t channel)\" + CR);\n-                    sb.append(indent + \"{\" + CR);\n-                    sb.append(indent + tab + \"target.get\" + thisClass.getName() + \"Handler()->\" +\n-                              parseForReservedWords(Utils.firstLower(method.getName()),\n-                                                    thisClass.getName() + Utils.firstUpper(method.getName()) + \"Body.invoke()\") + \"(channel\");\n-                    if (fieldMapNotEmptyFlag)\n-                    {\n-                        sb.append(\",\" + CR);\n-                        sb.append(generateFieldList(method.getFieldMap(), version, false, false, indentSize + 4 * tabSize));\n-                        sb.append(indent + tab + tab + tab + tab);\n-                    }\n-                    sb.append(\");\" + CR);\n-                    sb.append(indent + \"}\" + CR);\n-                }\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    // Methods for generation of code snippets for amqp_methods.h/cpp files\n-\n-    protected String generateMethodBodyIncludeList(AmqpModel model, int indentSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-\n-        for (String thisClassName : model.getClassMap().keySet())\n-        {\n-            AmqpClass thisClass = model.getClassMap().get(thisClassName);\n-            for (String thisMethodName : thisClass.getMethodMap().keySet())\n-            {\n-                AmqpMethod method = thisClass.getMethodMap().get(thisMethodName);\n-                sb.append(indent + \"#include \\\"\" + thisClass.getName() + Utils.firstUpper(method.getName()) + \"Body.h\\\"\" + CR);\n-            }\n-        }\n-\n-        return sb.toString();\n-    }\n-\n-    protected String generateMethodBodyInstances(AmqpModel model, int indentSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-\n-        for (String thisClassName : model.getClassMap().keySet())\n-        {\n-            AmqpClass thisClass = model.getClassMap().get(thisClassName);\n-            for (String thisMethodName : thisClass.getMethodMap().keySet())\n-            {\n-                AmqpMethod method = thisClass.getMethodMap().get(thisMethodName);\n-                sb.append(indent + \"const \" + thisClass.getName() + Utils.firstUpper(method.getName()) + \"Body \" +\n-                          Utils.firstLower(thisClass.getName()) + \"_\" + method.getName() + \";\" + CR);\n-            }\n-        }\n-\n-        return sb.toString();\n-    }\n-\n-    protected String generateMethodBodyMapEntry(AmqpModel model, int indentSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-\n-        for (AmqpVersion version : getVersionSet())\n-        {\n-            for (String thisClassName : model.getClassMap().keySet())\n-            {\n-                AmqpClass thisClass = model.getClassMap().get(thisClassName);\n-                for (String thisMethodName : thisClass.getMethodMap().keySet())\n-                {\n-                    AmqpMethod method = thisClass.getMethodMap().get(thisMethodName);\n-                    String namespace = method.isVersionConsistent(getVersionSet()) ? \"\" : version.namespace() + \"::\";\n-                    try\n-                    {\n-                        int classOrdinal = thisClass.getIndexMap().getOrdinal(version);\n-                        int methodOrdinal = method.getIndexMap().getOrdinal(version);\n-                        String methodModyClassName = namespace + thisClass.getName() + Utils.firstUpper(method.getName()) + \"Body\";\n-                        sb.append(indent + \"insert(std::make_pair(createMapKey(\" + classOrdinal + \", \" +\n-                                  methodOrdinal + \", \" + version.getMajor() + \", \" + version.getMinor() +\n-                                  \"), &createMethodBodyFn<\" + methodModyClassName + \">));\" + CR);\n-                    }\n-                    catch (AmqpTypeMappingException e)\n-                    {\n-                    } // ignore\n-                }\n-            }\n-        }\n-\n-        return sb.toString();\n-    }\n-\n-    // Helper functions\n-\n-    private String generateVersionCheck(AmqpVersion version)\n-    {\n-        return \"version.equals(\" + version.getMajor() + \", \" + version.getMinor() + \")\";\n-    }\n-\n-    private String generateVersionCheck(AmqpVersionSet versionSet)\n-    {\n-        StringBuffer sb = new StringBuffer();\n-        for (AmqpVersion v : versionSet)\n-        {\n-            if (!v.equals(versionSet.first()))\n-            {\n-                sb.append(\" || \");\n-            }\n-            if (versionSet.size() > 1)\n-            {\n-                sb.append(\"(\");\n-            }\n-            sb.append(\"version.equals(\" + v.getMajor() + \", \" + v.getMinor() + \")\");\n-            if (versionSet.size() > 1)\n-            {\n-                sb.append(\")\");\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    private String parseForReservedWords(String name, String context)\n-    {\n-        for (String cppReservedWord : cppReservedWords)\n-        {\n-            if (name.compareTo(cppReservedWord) == 0)\n-            {\n-                if (!quietFlag)\n-                {\n-                    System.out.println(\"WARNING: \" + (context == null ? \"\" : context + \": \") +\n-                                       \"Found XML method \\\"\" + name + \"\\\", which is a C++ reserved word. \" +\n-                                       \"Changing generated name to \\\"\" + name + \"_\\\".\");\n-                }\n-                return name + \"_\";\n-            }\n-        }\n-\n-        for (String cppCommonDefine : cppCommonDefines)\n-        {\n-            if (name.compareTo(cppCommonDefine) == 0)\n-            {\n-                if (!quietFlag)\n-                {\n-                    System.out.println(\"WARNING: \" + (context == null ? \"\" : context + \": \") +\n-                                       \"Found XML method \\\"\" + name + \"\\\", which may clash with commonly used defines within C++. \" +\n-                                       \"Changing generated name to \\\"\" + name + \"_\\\".\");\n-                }\n-                return name + \"_\";\n-            }\n-        }\n-\n-        return name;\n-    }\n-\n-    private String setRef(String codeType)\n-    {\n-        if (codeType.compareTo(\"string\") == 0 ||\n-            codeType.compareTo(\"FieldTable\") == 0)\n-        {\n-            return \"const \" + codeType + \"&\";\n-        }\n-        return codeType;\n-    }\n-\n-    private String camelCaseName(String name, boolean upperFirstFlag)\n-    {\n-        StringBuffer ccn = new StringBuffer();\n-        String[] toks = name.split(\"[-_.\\\\ ]\");\n-        for (int i = 0; i < toks.length; i++)\n-        {\n-            StringBuffer b = new StringBuffer(toks[i]);\n-            if (upperFirstFlag || i > 0)\n-            {\n-                b.setCharAt(0, Character.toUpperCase(toks[i].charAt(0)));\n-            }\n-            ccn.append(b);\n-        }\n-        return ccn.toString();\n-    }\n-\n-    public static Factory<CppGenerator> _factoryInstance = new Factory<CppGenerator>()\n-    {\n-\n-        public CppGenerator newInstance()\n-        {\n-            return new CppGenerator();\n-        }\n-    };\n-\n-    public static Factory<CppGenerator> getFactory()\n-    {\n-        return _factoryInstance;\n-    }\n-\n-    void processModelTemplate(NamedTemplate template, AmqpVersion version)\n-    {\n-        //To change body of implemented methods use File | Settings | File Templates.\n-    }\n-    public String getNativeType(String type)\n-    {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    public String getEncodingType(String type)\n-    {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-}"
        },
        {
            "sha": "9fc81dd428405188141a70a874d37317ce56a43d",
            "filename": "common/gentools/src/org/apache/qpid/gentools/DotnetGenerator.java",
            "status": "removed",
            "additions": 0,
            "deletions": 382,
            "changes": 382,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FDotnetGenerator.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FDotnetGenerator.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FDotnetGenerator.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,382 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-\n-package org.apache.qpid.gentools;\n-\n-import java.io.File;\n-import java.util.TreeMap;\n-\n-public class DotnetGenerator extends Generator\n-{\n-    private class DomainInfo\n-    {\n-        public String type;\n-        public String size;\n-        public String encodeExpression;\n-        public String decodeExpression;\n-\n-        public DomainInfo(String domain, String size, String encodeExpression, String decodeExpression)\n-        {\n-            this.type = domain;\n-            this.size = size;\n-            this.encodeExpression = encodeExpression;\n-            this.decodeExpression = decodeExpression;\n-        }\n-    }\n-\n-    private static TreeMap<String, DomainInfo> typeMap = new TreeMap<String, DomainInfo>();\n-\n-    public String getNativeType(String type)\n-    {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    public String getEncodingType(String type)\n-    {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    public DotnetGenerator()\n-    {\n-        super();\n-        // Load .NET type and size maps.\n-        // Adjust or add to these lists as new types are added/defined.\n-        // The char '#' will be replaced by the field variable name (any type).\n-        // The char '~' will be replaced by the compacted bit array size (type bit only).\n-        // TODO: I have left a copy of the Java typeMap here - replace with appropriate .NET values.\n-        typeMap.put(\"bit\", new DomainInfo(\n-                \"boolean\",                                        // .NET code type\n-                \"~\",                                            // size\n-                \"EncodingUtils.writeBooleans(buffer, #)\",        // encode expression\n-                \"# = EncodingUtils.readBooleans(buffer)\"));        // decode expression\n-        typeMap.put(\"content\", new DomainInfo(\n-                \"Content\",                                        // .NET code type\n-                \"EncodingUtils.encodedContentLength(#)\",     // size\n-                \"EncodingUtils.writeContentBytes(buffer, #)\", // encode expression\n-                \"# = EncodingUtils.readContent(buffer)\"));    // decode expression\n-        typeMap.put(\"long\", new DomainInfo(\n-                \"long\",                                            // .NET code type\n-                \"4\",                                            // size\n-                \"EncodingUtils.writeUnsignedInteger(buffer, #)\", // encode expression\n-                \"# = buffer.getUnsignedInt()\"));                 // decode expression\n-        typeMap.put(\"longlong\", new DomainInfo(\n-                \"long\",                                            // .NET code type\n-                \"8\",                                            // size\n-                \"buffer.putLong(#)\",                             // encode expression\n-                \"# = buffer.getLong()\"));                         // decode expression\n-        typeMap.put(\"longstr\", new DomainInfo(\n-                \"byte[]\",                                        // .NET code type\n-                \"EncodingUtils.encodedLongstrLength(#)\",         // size\n-                \"EncodingUtils.writeLongStringBytes(buffer, #)\", // encode expression\n-                \"# = EncodingUtils.readLongstr(buffer)\"));        // decode expression\n-        typeMap.put(\"octet\", new DomainInfo(\n-                \"short\",                                        // .NET code type\n-                \"1\",                                            // size\n-                \"EncodingUtils.writeUnsignedByte(buffer, #)\",    // encode expression\n-                \"# = buffer.getUnsigned()\"));                     // decode expression\n-        typeMap.put(\"short\", new DomainInfo(\n-                \"int\",                                            // .NET code type\n-                \"2\",                                            // size\n-                \"EncodingUtils.writeUnsignedShort(buffer, #)\",    // encode expression\n-                \"# = buffer.getUnsignedShort()\"));                 // decode expression\n-        typeMap.put(\"shortstr\", new DomainInfo(\n-                \"AMQShortString\",                                // .NET code type\n-                \"EncodingUtils.encodedShortStringLength(#)\",    // size\n-                \"EncodingUtils.writeShortStringBytes(buffer, #)\", // encode expression\n-                \"# = EncodingUtils.readAMQShortString(buffer)\"));    // decode expression\n-        typeMap.put(\"table\", new DomainInfo(\n-                \"FieldTable\",                                    // .NET code type\n-                \"EncodingUtils.encodedFieldTableLength(#)\",     // size\n-                \"EncodingUtils.writeFieldTableBytes(buffer, #)\", // encode expression\n-                \"# = EncodingUtils.readFieldTable(buffer)\"));    // decode expression\n-        typeMap.put(\"timestamp\", new DomainInfo(\n-                \"long\",                                            // .NET code type\n-                \"8\",                                            // size\n-                \"EncodingUtils.writeTimestamp(buffer, #)\",        // encode expression\n-                \"# = EncodingUtils.readTimestamp(buffer)\"));    // decode expression\n-    }\n-\n-    void processModelTemplate(NamedTemplate template, AmqpVersion version)\n-    {\n-        //To change body of implemented methods use File | Settings | File Templates.\n-    }\n-\n-    void processClassTemplate(NamedTemplate template, AmqpClass amqpClass, AmqpVersion version)\n-    {\n-        //To change body of implemented methods use File | Settings | File Templates.\n-    }\n-\n-    void processMethodTemplate(NamedTemplate template, AmqpClass amqpClass, AmqpMethod amqpMethod, AmqpVersion version)\n-    {\n-        //To change body of implemented methods use File | Settings | File Templates.\n-    }\n-\n-    void processFieldTemplate(NamedTemplate template, AmqpClass amqpClass, AmqpMethod amqpMethod, AmqpField amqpField, AmqpVersion version)\n-    {\n-        //To change body of implemented methods use File | Settings | File Templates.\n-    }\n-\n-    @Override\n-    protected String prepareFilename(String filenameTemplate,\n-                                     AmqpClass thisClass, AmqpMethod method, AmqpField field, AmqpVersion version)\n-    {\n-        StringBuffer sb = new StringBuffer(filenameTemplate);\n-        if (thisClass != null)\n-        {\n-            replaceToken(sb, \"${CLASS}\", thisClass.getName());\n-        }\n-        if (method != null)\n-        {\n-            replaceToken(sb, \"${METHOD}\", method.getName());\n-        }\n-        if (field != null)\n-        {\n-            replaceToken(sb, \"${FIELD}\", field.getName());\n-        }\n-        return sb.toString();\n-    }\n-\n-    @Override\n-    protected void processClassList(StringBuffer sb, int listMarkerStartIndex,\n-                                    int listMarkerEndIndex, AmqpModel model, AmqpVersion version)\n-            throws AmqpTemplateException, AmqpTypeMappingException\n-    {\n-        String codeSnippet;\n-        int lend = sb.indexOf(CR, listMarkerStartIndex) + 1; // Include cr at end of line\n-        String tline = sb.substring(listMarkerEndIndex, lend); // Line excluding line marker, including cr\n-        int tokStart = tline.indexOf('$');\n-        String token = tline.substring(tokStart).trim();\n-        sb.delete(listMarkerStartIndex, lend);\n-\n-        // TODO: Add in tokens and calls to their corresponding generator methods here...\n-        if (token.compareTo(\"${??????????}\") == 0)\n-        {\n-            codeSnippet = token; // This is a stub to get the compile working - remove when gen method is present.\n-//\t\t\tcodeSnippet = generateRegistry(model, 8, 4); \n-        }\n-\n-        else // Oops!\n-        {\n-            throw new AmqpTemplateException(\"Template token \" + token + \" unknown.\");\n-        }\n-        sb.insert(listMarkerStartIndex, codeSnippet);\n-    }\n-\n-    @Override\n-    protected void processConstantList(StringBuffer sb,\n-                                       int listMarkerStartIndex, int listMarkerEndIndex,\n-                                       AmqpConstantSet constantSet) throws AmqpTemplateException,\n-                                                                           AmqpTypeMappingException\n-    {\n-        String codeSnippet;\n-        int lend = sb.indexOf(CR, listMarkerStartIndex) + 1; // Include cr at end of line\n-        String tline = sb.substring(listMarkerEndIndex, lend); // Line excluding line marker, including cr\n-        int tokStart = tline.indexOf('$');\n-        String token = tline.substring(tokStart).trim();\n-        sb.delete(listMarkerStartIndex, lend);\n-\n-        // TODO: Add in tokens and calls to their corresponding generator methods here...\n-        if (token.compareTo(\"${??????????}\") == 0)\n-        {\n-            codeSnippet = token; // This is a stub to get the compile working - remove when gen method is present.\n-//            codeSnippet = generateConstantGetMethods(constantSet, 4, 4); \n-        }\n-\n-        else // Oops!\n-        {\n-            throw new AmqpTemplateException(\"Template token \" + token + \" unknown.\");\n-        }\n-        sb.insert(listMarkerStartIndex, codeSnippet);\n-    }\n-\n-    @Override\n-    protected void processFieldList(StringBuffer sb, int listMarkerStartIndex,\n-                                    int listMarkerEndIndex, AmqpFieldMap fieldMap, AmqpVersion version)\n-    {\n-        String codeSnippet;\n-        int lend = sb.indexOf(CR, listMarkerStartIndex) + 1; // Include cr at end of line\n-        String tline = sb.substring(listMarkerEndIndex, lend); // Line excluding line marker, including cr\n-        int tokStart = tline.indexOf('$');\n-        String token = tline.substring(tokStart).trim();\n-        sb.delete(listMarkerStartIndex, lend);\n-\n-        // TODO: Add in tokens and calls to their corresponding generator methods here...\n-        if (token.compareTo(\"${??????????}\") == 0)\n-        {\n-            codeSnippet = token; // This is a stub to get the compile working - remove when gen method is present.\n-//\t\t\tcodeSnippet = fieldMap.parseFieldMap(declarationGenerateMethod,\n-//\t\t\t\tmangledDeclarationGenerateMethod, 4, 4, this);\n-        }\n-\n-        else // Oops!\n-        {\n-            throw new AmqpTemplateException(\"Template token \" + token + \" unknown.\");\n-        }\n-        sb.insert(listMarkerStartIndex, codeSnippet);\n-    }\n-\n-    @Override\n-    protected void processMethodList(StringBuffer sb, int listMarkerStartIndex,\n-                                     int listMarkerEndIndex, AmqpClass thisClass)\n-            throws AmqpTemplateException, AmqpTypeMappingException\n-    {\n-        String codeSnippet;\n-        int lend = sb.indexOf(CR, listMarkerStartIndex) + 1; // Include cr at end of line\n-        String tline = sb.substring(listMarkerEndIndex, lend); // Line excluding line marker, including cr\n-        int tokStart = tline.indexOf('$');\n-        String token = tline.substring(tokStart).trim();\n-        sb.delete(listMarkerStartIndex, lend);\n-\n-        // TODO: Add in tokens and calls to their corresponding generator methods here...\n-        if (token.compareTo(\"${??????????}\") == 0)\n-        {\n-            codeSnippet = token; // This is a stub to get the compile working - remove when gen method is present.\n-        }\n-\n-        else // Oops!\n-        {\n-            throw new AmqpTemplateException(\"Template token \" + token + \" unknown.\");\n-        }\n-        sb.insert(listMarkerStartIndex, codeSnippet);\n-    }\n-\n-    @Override\n-    protected void processModelTemplate(NamedTemplate template)\n-    {\n-        // I've put in the Java model here - this can be changed if a different pattern is required.\n-        processTemplate(template, null, null, null, null);\n-    }\n-\n-    @Override\n-    protected void processClassTemplate(NamedTemplate template, AmqpClass thisClass)\n-    {\n-        // I've put in the Java model here - this can be changed if a different pattern is required.\n-        processTemplate(template, thisClass, null, null, null);\n-    }\n-\n-    @Override\n-    protected void processMethodTemplate(NamedTemplate template, AmqpClass thisClass,\n-                                         AmqpMethod method)\n-    {\n-        // I've put in the Java model here - this can be changed if a different pattern is required.\n-        processTemplate(template, thisClass, method, null, null);\n-    }\n-\n-    @Override\n-    protected void processTemplate(NamedTemplate template, AmqpClass thisClass,\n-                                   AmqpMethod method, AmqpField field, AmqpVersion version)\n-    {\n-        // I've put in the Java model here - this can be changed if a different pattern is required.\n-        StringBuffer sb = new StringBuffer(template.getTemplate());\n-        String filename = prepareFilename(getTemplateFileName(sb), thisClass, method, field, version);\n-        try\n-        {\n-            processAllLists(sb, thisClass, method, null);\n-        }\n-        catch (AmqpTemplateException e)\n-        {\n-            System.out.println(\"WARNING: \" + template.getName() + \": \" + e.getMessage());\n-        }\n-        try\n-        {\n-            processAllTokens(sb, thisClass, method, field, null);\n-        }\n-        catch (AmqpTemplateException e)\n-        {\n-            System.out.println(\"WARNING: \" + template.getName() + \": \" + e.getMessage());\n-        }\n-        writeTargetFile(sb, new File(getOutputDirectory() + Utils.FILE_SEPARATOR + filename));\n-        generatedFileCounter++;\n-    }\n-\n-    @Override\n-    protected String processToken(String token, AmqpClass thisClass,\n-                                  AmqpMethod method, AmqpField field, AmqpVersion version)\n-            throws AmqpTemplateException, AmqpTypeMappingException\n-    {\n-        // TODO Auto-generated method stub\n-        return null;\n-    }\n-\n-    public String getGeneratedType(String domainName, AmqpVersion version)\n-            throws AmqpTypeMappingException\n-    {\n-        String domainType = getDomainType(domainName, version);\n-        if (domainType == null)\n-        {\n-            throw new AmqpTypeMappingException(\"Domain type \\\"\" + domainName +\n-                                               \"\\\" not found in Java typemap.\");\n-        }\n-        DomainInfo info = typeMap.get(domainType);\n-        if (info == null)\n-        {\n-            throw new AmqpTypeMappingException(\"Unknown domain: \\\"\" + domainType + \"\\\"\");\n-        }\n-        return info.type;\n-    }\n-\n-    public String prepareClassName(String className)\n-    {\n-        return camelCaseName(className, true);\n-    }\n-\n-    public String prepareDomainName(String domainName)\n-    {\n-        return camelCaseName(domainName, false);\n-    }\n-\n-    public String prepareMethodName(String methodName)\n-    {\n-        return camelCaseName(methodName, false);\n-    }\n-\n-    private String camelCaseName(String name, boolean upperFirstFlag)\n-    {\n-        StringBuffer ccn = new StringBuffer();\n-        String[] toks = name.split(\"[-_.\\\\ ]\");\n-        for (int i = 0; i < toks.length; i++)\n-        {\n-            StringBuffer b = new StringBuffer(toks[i]);\n-            if (upperFirstFlag || i > 0)\n-            {\n-                b.setCharAt(0, Character.toUpperCase(toks[i].charAt(0)));\n-            }\n-            ccn.append(b);\n-        }\n-        return ccn.toString();\n-    }\n-\n-\n-    public static Factory<DotnetGenerator> _factoryInstance = new Factory<DotnetGenerator>()\n-    {\n-\n-        public DotnetGenerator newInstance()\n-        {\n-            return new DotnetGenerator();\n-        }\n-    };\n-\n-    public static Factory<DotnetGenerator> getFactory()\n-    {\n-        return _factoryInstance;\n-    }\n-\n-}"
        },
        {
            "sha": "8b0bb99b4140d910f3441463c6c70f3f18075460",
            "filename": "common/gentools/src/org/apache/qpid/gentools/GenerateMethod.java",
            "status": "removed",
            "additions": 0,
            "deletions": 27,
            "changes": 27,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FGenerateMethod.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FGenerateMethod.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FGenerateMethod.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,27 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-\n-public interface GenerateMethod\n-{\n-    String generate(String domainType, String fieldName, int ordinal, int indentSize, int tabSize);\n-}"
        },
        {
            "sha": "5d6e7be52774d9a111bc85ed789f586619a35039",
            "filename": "common/gentools/src/org/apache/qpid/gentools/Generator.java",
            "status": "removed",
            "additions": 0,
            "deletions": 857,
            "changes": 857,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FGenerator.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FGenerator.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FGenerator.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,857 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import org.apache.velocity.Template;\n-import org.apache.velocity.VelocityContext;\n-import org.apache.velocity.app.Velocity;\n-import org.w3c.dom.Node;\n-\n-import java.io.File;\n-import java.io.FileNotFoundException;\n-import java.io.FileReader;\n-import java.io.FileWriter;\n-import java.io.FilenameFilter;\n-import java.io.IOException;\n-import java.io.LineNumberReader;\n-import java.io.StringWriter;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.EnumMap;\n-import java.util.EnumSet;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-public abstract class Generator implements LanguageConverter\n-{\n-    protected static String CR = Utils.LINE_SEPARATOR;\n-\n-\n-    private static final Map<String, Integer> FIXED_SIZE_TYPES = new HashMap<String, Integer>();\n-\n-    static\n-    {\n-        FIXED_SIZE_TYPES.put(\"bit\", 1);\n-        FIXED_SIZE_TYPES.put(\"bitfield\", 1);\n-        FIXED_SIZE_TYPES.put(\"long\", 4);\n-        FIXED_SIZE_TYPES.put(\"longlong\", 8);\n-        FIXED_SIZE_TYPES.put(\"octet\", 1);\n-        FIXED_SIZE_TYPES.put(\"short\", 2);\n-        FIXED_SIZE_TYPES.put(\"timestamp\", 8);\n-\n-    }\n-\n-    private String _templateDirectory;\n-    private String _outputDirectory;\n-\n-    public AmqpDomainMap getDomainMap()\n-    {\n-        return _domainMap;\n-    }\n-\n-    public AmqpConstantSet getConstantSet()\n-    {\n-        return _constantSet;\n-    }\n-\n-    public AmqpModel getModel()\n-    {\n-        return _model;\n-    }\n-\n-    abstract public String getNativeType(String type);\n-\n-    abstract public String getEncodingType(String type);\n-\n-\n-\n-    protected static enum EnumConstOutputTypes\n-    {\n-        OUTPUT_STRING,\n-        OUTPUT_INTEGER,\n-        OUTPUT_DOUBLE;\n-    }\n-\n-    ;\n-\n-    public static enum TemplateType\n-    {\n-        model(\"model\"),\n-        clazz(\"class\"),\n-        method(\"method\"),\n-        field(\"field\");\n-\n-        private final String _name;\n-\n-        private TemplateType(String name)\n-        {\n-            _name = name;\n-        }\n-\n-        public String getName()\n-        {\n-            return _name;\n-        }\n-    }\n-\n-    ;\n-\n-\n-    public static interface Factory<X extends Generator>\n-    {\n-        public X newInstance();\n-    }\n-\n-\n-    protected static final class NamedTemplate\n-    {\n-        private final String _name;\n-        private final String _template;\n-        private final File _file;\n-\n-\n-        public NamedTemplate(String relativePath, File templateFile)\n-        {\n-            _file = templateFile;\n-            _name = relativePath + Utils.FILE_SEPARATOR + templateFile.getName();\n-\n-            _template = loadTemplate(templateFile);\n-        }\n-\n-\n-        public String getName()\n-        {\n-            return _name;\n-        }\n-\n-        public String getTemplate()\n-        {\n-            return _template;\n-        }\n-\n-\n-        public File getFile()\n-        {\n-            return _file;\n-        }\n-\n-    }\n-\n-\n-    private static final String VELOCITY_TEMPLATE_SUFFIX = \".vm\";\n-    private static final String STANDARD_TEMPLATE_SUFFIX = \".tmpl\";\n-    private static FilenameFilter _tmplFileFilter = new FilenameFilter()\n-    {\n-\n-        public boolean accept(File dir, String name)\n-        {\n-            return name.endsWith(STANDARD_TEMPLATE_SUFFIX) || name.endsWith(VELOCITY_TEMPLATE_SUFFIX);\n-        }\n-    };\n-\n-\n-    // This string is reproduced in every generated file as a comment\n-    // TODO: Tie the version info into the build system.\n-    protected static final String GENERATOR_INFO = \"Qpid Gentools v.0.1\";\n-\n-\n-    private final Map<TemplateType, Collection<NamedTemplate>> _templates =\n-            new EnumMap<TemplateType, Collection<NamedTemplate>>(TemplateType.class);\n-\n-    private final Map<TemplateType, Collection<NamedTemplate>> _versionSpecificTemplates =\n-            new EnumMap<TemplateType, Collection<NamedTemplate>>(TemplateType.class);\n-\n-\n-    private final AmqpVersionSet _versionSet;\n-\n-    private final AmqpDomainMap _domainMap;\n-    private final Map<AmqpVersion, AmqpDomainMap> _versionToDomainMapMap = new HashMap<AmqpVersion, AmqpDomainMap>();\n-\n-    private final AmqpConstantSet _constantSet;\n-    private final Map<AmqpVersion, AmqpConstantSet> _versionToConstantSetMap = new HashMap<AmqpVersion, AmqpConstantSet>();\n-\n-\n-    public AmqpVersionSet getVersionSet()\n-    {\n-        return _versionSet;\n-    }\n-\n-    private final AmqpModel _model;\n-    private final Map<AmqpVersion, AmqpModel> _versionToModelMap = new HashMap<AmqpVersion, AmqpModel>();\n-\n-    protected int generatedFileCounter;\n-\n-    public Generator()\n-    {\n-        _versionSet = new AmqpVersionSet();\n-        _model = new AmqpModel(this);\n-        _constantSet = new AmqpConstantSet(this);\n-        _domainMap = new AmqpDomainMap(this);\n-\n-        generatedFileCounter = 0;\n-    }\n-\n-//    public final AmqpVersionSet getVersionSet()\n-//    {\n-//        return _versionSet;\n-//    }\n-\n-\n-    public void addVersion(AmqpVersion version)\n-    {\n-        _versionSet.add(version);\n-        if (!_versionToModelMap.containsKey(version))\n-        {\n-            _versionToModelMap.put(version, new AmqpModel(this));\n-        }\n-        if (!_versionToDomainMapMap.containsKey(version))\n-        {\n-            _versionToDomainMapMap.put(version, new AmqpDomainMap(this));\n-        }\n-        if (!_versionToConstantSetMap.containsKey(version))\n-        {\n-            _versionToConstantSetMap.put(version, new AmqpConstantSet(this));\n-        }\n-    }\n-\n-    public int getNumberGeneratedFiles()\n-    {\n-        return generatedFileCounter;\n-    }\n-\n-//\tpublic AmqpDomainMap getDomainMap()\n-//\t{\n-//\t\treturn _domainMap;\n-//\t}\n-//\n-//    public AmqpConstantSet getConstantSet()\n-//    {\n-//        return _constantSet;\n-//    }\n-//\n-//\n-//\tpublic AmqpModel getModel()\n-//\t{\n-//\t\treturn _model;\n-//\t}\n-\n-    public void initializeTemplates() throws IOException\n-    {\n-\n-        for (TemplateType type : EnumSet.allOf(TemplateType.class))\n-        {\n-            ArrayList<NamedTemplate> typeTemplates = new ArrayList<NamedTemplate>();\n-            _templates.put(type, typeTemplates);\n-            ArrayList<NamedTemplate> versionSpecificTypeTemplates = new ArrayList<NamedTemplate>();\n-            _versionSpecificTemplates.put(type, versionSpecificTypeTemplates);\n-\n-            File templateDirectory = new File(getTemplateDirectory() + Utils.FILE_SEPARATOR + type.getName());\n-            File versionTemplateDirectory = new File(getTemplateDirectory() + Utils.FILE_SEPARATOR + type.getName() + Utils.FILE_SEPARATOR + \"version\");\n-\n-            System.out.println(\"Looking for template files in directory: \" + templateDirectory.getAbsoluteFile());\n-\n-            File[] templateFiles = templateDirectory.listFiles(_tmplFileFilter);\n-\n-            File[] versionTemplateFiles = new File[0];\n-\n-            System.out.println(\"Looking for version specific template files in directory: \" + versionTemplateDirectory.getAbsoluteFile());\n-\n-            if (versionTemplateDirectory.exists())\n-            {\n-                versionTemplateFiles = versionTemplateDirectory.listFiles(_tmplFileFilter);\n-            }\n-\n-\t\t\tif(templateFiles != null)\n-\t\t\t{\n-\t            for (File templateFile : templateFiles)\n-\t            {\n-\t                System.out.println(type.getName() + \" template file(s):\");\n-\t                System.out.println(\"  \" + templateFile.getCanonicalPath());\n-\t                typeTemplates.add(new NamedTemplate(type.getName(), templateFile));\n-\t            }\n-\t\t\t}\n-\n-            if(versionTemplateFiles != null)\n-\t\t\t{\n-\t\t\t\tfor (File versionTemplateFile : versionTemplateFiles)\n-\t            {\n-\t                System.out.println(type.getName() + \" template file(s):\");\n-\t                System.out.println(\"  \" + versionTemplateFile.getCanonicalPath());\n-\t                versionSpecificTypeTemplates.add(new NamedTemplate(type.getName() + Utils.FILE_SEPARATOR + \"version\", versionTemplateFile));\n-\t            }\n-\t\t\t}\n-\n-        }\n-    }\n-\n-    public String getTemplateDirectory()\n-    {\n-        return _templateDirectory;\n-    }\n-\n-\n-    public void setTemplateDirectory(String templateDirectory)\n-    {\n-        _templateDirectory = templateDirectory;\n-    }\n-\n-\n-    public void setOutputDirectory(String outputDirectory)\n-    {\n-        _outputDirectory = outputDirectory;\n-    }\n-\n-    public void generate()\n-    {\n-        prepareTargetDirectory(new File(_outputDirectory), true);\n-        System.out.println(\"Generation directory: \" + _outputDirectory);\n-\n-\n-        processModelTemplates(_templates);\n-\n-        for (AmqpClass amqpClass : _model.getClassMap().values())\n-        {\n-            processClassTemplates(_templates, amqpClass);\n-\n-            for (AmqpMethod amqpMethod : amqpClass.getMethodMap().values())\n-            {\n-                processMethodTemplates(_templates, amqpClass, amqpMethod);\n-\n-                for (AmqpField amqpField : amqpMethod.getFieldMap().values())\n-                {\n-                    processFieldTemplates(_templates, amqpClass, amqpMethod, amqpField, null);\n-                }\n-            }\n-        }\n-\n-\n-        for (AmqpVersion version : _versionSet)\n-        {\n-            AmqpModel model = _versionToModelMap.get(version);\n-            processModelTemplates(_versionSpecificTemplates, version);\n-\n-            for (AmqpClass amqpClass : model.getClassMap().values())\n-            {\n-                processClassTemplates(_versionSpecificTemplates, amqpClass, version);\n-\n-                for (AmqpMethod amqpMethod : amqpClass.getMethodMap().values())\n-                {\n-                    processMethodTemplates(_versionSpecificTemplates, amqpClass, amqpMethod, version);\n-\n-                    for (AmqpField amqpField : amqpMethod.getFieldMap().values())\n-                    {\n-                        processFieldTemplates(_versionSpecificTemplates, amqpClass, amqpMethod, amqpField, version);\n-                    }\n-                }\n-            }\n-\n-        }\n-    }\n-\n-    private void processMethodTemplates(Map<TemplateType, Collection<NamedTemplate>> templates, AmqpClass amqpClass, AmqpMethod amqpMethod, AmqpVersion version)\n-    {\n-        for (NamedTemplate template : templates.get(TemplateType.method))\n-        {\n-            if(isVelocityTemplate(template))\n-            {\n-                processVelocityTemplate(template,version,amqpClass,amqpMethod,null);\n-            }\n-            else\n-            {\n-                processMethodTemplate(template, amqpClass, amqpMethod);\n-            }\n-        }\n-        \n-    }\n-\n-    private void processClassTemplates(Map<TemplateType, Collection<NamedTemplate>> templates, AmqpClass amqpClass, AmqpVersion version)\n-    {\n-        for (NamedTemplate template : templates.get(TemplateType.clazz))\n-        {\n-            if(isVelocityTemplate(template))\n-            {\n-                processVelocityTemplate(template,version,amqpClass,null,null);\n-            }\n-            else\n-            {\n-                processClassTemplate(template, amqpClass);\n-            }\n-        }\n-\n-    }\n-\n-\n-    private void processModelTemplates(Map<TemplateType, Collection<NamedTemplate>> templates, AmqpVersion version)\n-    {\n-        for (NamedTemplate template : templates.get(TemplateType.model))\n-        {\n-            if (isVelocityTemplate(template))\n-            {\n-                processModelVelocityTemplate(template, version);\n-            }\n-            else\n-            {\n-                processModelTemplate(template, version);\n-            }\n-        }\n-    }\n-\n-    abstract void processModelTemplate(NamedTemplate template, AmqpVersion version);\n-\n-\n-    protected void processModelTemplates(Map<TemplateType, Collection<NamedTemplate>> templates)\n-    {\n-        for (NamedTemplate template : templates.get(TemplateType.model))\n-        {\n-            if (isVelocityTemplate(template))\n-            {\n-                processModelVelocityTemplate(template, null);\n-            }\n-            else\n-            {\n-                processModelTemplate(template);\n-            }\n-        }\n-    }\n-\n-    private boolean isVelocityTemplate(NamedTemplate template)\n-    {\n-        return template.getName().endsWith(VELOCITY_TEMPLATE_SUFFIX);\n-    }\n-\n-    private void processModelVelocityTemplate(NamedTemplate template, AmqpVersion version)\n-    {\n-        processVelocityTemplate(template,version,null,null,null);\n-    }\n-\n-    private void processVelocityTemplate(NamedTemplate template, AmqpVersion version,\n-                                              AmqpClass amqpClass, AmqpMethod amqpMethod, AmqpField amqpField)\n-    {\n-\n-        VelocityContext context = new VelocityContext();\n-\n-        AmqpModel model = _model;\n-        if(version != null)\n-        {\n-            model = _versionToModelMap.get(version);\n-        }\n-        context.put(\"model\", model);\n-        context.put(\"generator\", GENERATOR_INFO);\n-\n-        if (version != null)\n-        {\n-            context.put(\"version\", version);\n-        }\n-        if(amqpClass != null)\n-        {\n-            context.put(\"amqpClass\", amqpClass);\n-        }\n-\n-        if(amqpClass != null)\n-        {\n-            context.put(\"amqpMethod\", amqpMethod);\n-        }\n-\n-\n-        StringWriter sw = new StringWriter();\n-\n-\n-        try\n-        {\n-            Template velocityTemplate = Velocity.getTemplate(template.getName());\n-            velocityTemplate.merge(context, sw);\n-            String filename = String.valueOf(context.get(\"filename\"));\n-\n-            File outputFile = new File(getOutputDirectory() + Utils.FILE_SEPARATOR + filename);\n-            outputFile.getParentFile().mkdirs();\n-            FileWriter outputFileWriter = new FileWriter(outputFile);\n-\n-            outputFileWriter.append(sw.toString());\n-            outputFileWriter.close();\n-\n-        }\n-        catch (Exception e)\n-        {\n-            e.printStackTrace();\n-        }\n-\n-\n-    }\n-\n-\n-    protected void processClassTemplates(Map<TemplateType, Collection<NamedTemplate>> templates, AmqpClass amqpClass)\n-    {\n-        for (NamedTemplate template : templates.get(TemplateType.clazz))\n-        {\n-            if(isVelocityTemplate(template))\n-            {\n-                processVelocityTemplate(template,null,amqpClass,null,null);\n-            }\n-            else\n-            {\n-                processClassTemplate(template, amqpClass);\n-            }\n-        }\n-    }\n-\n-    protected void processMethodTemplates(Map<TemplateType, Collection<NamedTemplate>> templates, AmqpClass amqpClass, AmqpMethod amqpMethod)\n-    {\n-        for (NamedTemplate template : templates.get(TemplateType.method))\n-        {\n-            if(isVelocityTemplate(template))\n-            {\n-                processVelocityTemplate(template,null,amqpClass,amqpMethod,null);\n-            }\n-            else\n-            {\n-                processMethodTemplate(template, amqpClass, amqpMethod);\n-            }\n-        }\n-    }\n-\n-\n-    protected void processFieldTemplates(Map<TemplateType, Collection<NamedTemplate>> templates, AmqpClass amqpClass, AmqpMethod amqpMethod, AmqpField amqpField, AmqpVersion amqpVersion)\n-    {\n-        for (NamedTemplate template : templates.get(TemplateType.field))\n-        {\n-            if(isVelocityTemplate(template))\n-            {\n-                processVelocityTemplate(template,amqpVersion,amqpClass,amqpMethod,amqpField);\n-            }\n-            else\n-            {\n-                processTemplate(template, amqpClass, amqpMethod, amqpField, amqpVersion);\n-            }\n-        }\n-    }\n-\n-\n-    protected void processVersionList(StringBuffer sb, int tokStart, int tokEnd)\n-    {\n-        int lend = sb.indexOf(Utils.LINE_SEPARATOR, tokStart) + 1; // Include cr at end of line\n-        String tline = sb.substring(tokEnd, lend); // Line excluding line marker, including cr\n-        sb.delete(tokStart, lend);\n-\n-        for (AmqpVersion v : _versionSet)\n-        {\n-            // Insert copy of target line\n-            StringBuffer isb = new StringBuffer(tline);\n-            if (isb.indexOf(\"${protocol-version-list-entry}\") >= 0)\n-            {\n-                String versionListEntry = \"       { ${major}, ${minor} }\" +\n-                                          (v.equals(_versionSet.last()) ? \"\" : \",\");\n-                replaceToken(isb, \"${protocol-version-list-entry}\", String.valueOf(versionListEntry));\n-            }\n-            if (isb.indexOf(\"${major}\") >= 0)\n-            {\n-                replaceToken(isb, \"${major}\", String.valueOf(v.getMajor()));\n-            }\n-            if (isb.indexOf(\"${minor}\") >= 0)\n-            {\n-                replaceToken(isb, \"${minor}\", String.valueOf(v.getMinor()));\n-            }\n-            sb.insert(tokStart, isb.toString());\n-            tokStart += isb.length();\n-        }\n-    }\n-\n-    // Helper functions common to all generators\n-\n-    protected static void prepareTargetDirectory(File dir, boolean createFlag)\n-    {\n-        if (dir.exists())\n-        {\n-            if (!dir.isDirectory())\n-            {\n-                throw new TargetDirectoryException(\"\\\"\" + dir.getAbsolutePath() +\n-                                                   \"\\\" exists, but is not a directory.\");\n-            }\n-        }\n-        else if (createFlag) // Create dir\n-        {\n-            if (!dir.mkdirs())\n-            {\n-                throw new TargetDirectoryException(\"Unable to create directory \\\"\" +\n-                                                   dir.getAbsolutePath() + \"\\\".\");\n-            }\n-        }\n-        else\n-        {\n-            throw new TargetDirectoryException(\"Directory \\\"\" + dir.getAbsolutePath() +\n-                                               \"\\\" not found.\");\n-        }\n-\n-    }\n-\n-    protected void processAllLists(StringBuffer sb, AmqpClass thisClass, AmqpMethod method, AmqpVersion version)\n-    {\n-        AmqpModel model = (version == null) ? _model : _versionToModelMap.get(version);\n-\n-\n-        int lstart = sb.indexOf(\"%{\");\n-        while (lstart != -1)\n-        {\n-            int lend = sb.indexOf(\"}\", lstart + 2);\n-            if (lend > 0)\n-            {\n-                String listToken = sb.substring(lstart + 2, lend);\n-                if (listToken.compareTo(\"VLIST\") == 0)\n-                {\n-                    processVersionList(sb, lstart, lend + 1);\n-                }\n-                else if (listToken.compareTo(\"CLIST\") == 0)\n-                {\n-                    processClassList(sb, lstart, lend + 1, model, version);\n-                }\n-                else if (listToken.compareTo(\"MLIST\") == 0)\n-                {\n-                    processMethodList(sb, lstart, lend + 1, thisClass);\n-                }\n-                else if (listToken.compareTo(\"FLIST\") == 0)\n-                {\n-                    // Pass the FieldMap from either a class or a method.\n-                    // If this is called from a class-level template, we assume that the\n-                    // class field list is required. In this case, method will be null.\n-                    processFieldList(sb, lstart, lend + 1,\n-                                     (method == null ? thisClass.getFieldMap() : method.getFieldMap()),\n-                                     version);\n-                }\n-                else if (listToken.compareTo(\"TLIST\") == 0)\n-                {\n-                    processConstantList(sb, lstart, lend + 1, _constantSet);\n-                }\n-                else\n-                {\n-                    throw new AmqpTemplateException(\"Unknown list token \\\"%{\" + listToken +\n-                                                    \"}\\\" found in template at index \" + lstart + \".\");\n-                }\n-            }\n-            lstart = sb.indexOf(\"%{\", lstart + 1);\n-        }\n-    }\n-\n-    protected void processAllTokens(StringBuffer sb, AmqpClass thisClass, AmqpMethod method, AmqpField field,\n-                                    AmqpVersion version)\n-    {\n-        int lstart = sb.indexOf(\"${\");\n-        while (lstart != -1)\n-        {\n-            int lend = sb.indexOf(\"}\", lstart + 2);\n-            if (lend > 0)\n-            {\n-                String token = sb.substring(lstart, lend + 1);\n-                replaceToken(sb, lstart, token, processToken(token, thisClass, method, field, version));\n-            }\n-            lstart = sb.indexOf(\"${\", lstart);\n-        }\n-    }\n-\n-    protected static void writeTargetFile(StringBuffer sb, File f)\n-    {\n-        try\n-        {\n-            f.getParentFile().mkdirs();\n-            FileWriter fw = new FileWriter(f);\n-            fw.write(sb.toString().toCharArray());\n-            fw.flush();\n-            fw.close();\n-        }\n-        catch (IOException e)\n-        {\n-            throw new AmqpTemplateException(e.getMessage());\n-        }\n-    }\n-\n-\n-    protected static String getTemplateFileName(StringBuffer sb)\n-    {\n-        if (sb.charAt(0) != '&')\n-        {\n-            throw new AmqpTemplateException(\"No filename marker &{filename} found at start of template.\");\n-        }\n-        int cr = sb.indexOf(Utils.LINE_SEPARATOR);\n-        if (cr < 0)\n-        {\n-            throw new AmqpTemplateException(\"Bad template structure - unable to find first line.\");\n-        }\n-        String fileName = sb.substring(2, cr - 1);\n-        sb.delete(0, cr + 1);\n-        return fileName;\n-    }\n-\n-    protected static void replaceToken(StringBuffer sb, String token, String replacement)\n-    {\n-        replaceToken(sb, 0, token, replacement);\n-    }\n-\n-    protected static void replaceToken(StringBuffer sb, int index, String token, String replacement)\n-    {\n-        if (replacement != null)\n-        {\n-            int start = sb.indexOf(token, index);\n-            if (start != -1)\n-            {\n-                int len = token.length();\n-                // Find first letter in token and determine if it is capitalized\n-                char firstTokenLetter = getFirstLetter(token);\n-                if (firstTokenLetter != 0 && Character.isUpperCase(firstTokenLetter))\n-                {\n-                    sb.replace(start, start + len, Utils.firstUpper(replacement));\n-                }\n-                else\n-                {\n-                    sb.replace(start, start + len, replacement);\n-                }\n-            }\n-        }\n-    }\n-\n-    private static char getFirstLetter(String str)\n-    {\n-        int len = str.length();\n-        int index = 0;\n-        char tokChar = str.charAt(index);\n-        while (!Character.isLetter(tokChar) && index < len - 1)\n-        {\n-            tokChar = str.charAt(++index);\n-        }\n-        if (Character.isLetter(tokChar))\n-        {\n-            return tokChar;\n-        }\n-        return 0;\n-    }\n-\n-    private static String loadTemplate(File f)\n-    {\n-        try\n-        {\n-            StringBuffer sb = new StringBuffer();\n-            FileReader fr = new FileReader(f);\n-            LineNumberReader lnr = new LineNumberReader(fr);\n-            String line = lnr.readLine();\n-            while (line != null)\n-            {\n-\n-                sb.append(line);\n-                sb.append(Utils.LINE_SEPARATOR);\n-\n-                line = lnr.readLine();\n-            }\n-            lnr.close();\n-            fr.close();\n-            return sb.toString();\n-        }\n-        catch (FileNotFoundException e)\n-        {\n-            throw new AmqpTemplateException(\"File not found: \" + e.getMessage());\n-        }\n-        catch (IOException e)\n-        {\n-            throw new AmqpTemplateException(\"IOException: \" + e.getMessage());\n-        }\n-    }\n-\n-    public String getDomainType(String domainName, AmqpVersion version)\n-    {\n-        if (version == null)\n-        {\n-            version = _versionSet.first();\n-        }\n-        return getDomainMap().getDomainType(domainName, version);\n-    }\n-\n-\n-    public void addFromNode(Node amqpNode, AmqpVersion version)\n-    {\n-        // 1c. Extract domains\n-        getConstantSet().addFromNode(amqpNode, 0, version);\n-        _versionToConstantSetMap.get(version).addFromNode(amqpNode, 0, version);\n-\n-        // 1d. Extract domains\n-        getDomainMap().addFromNode(amqpNode, 0, version);\n-        _versionToDomainMapMap.get(version).addFromNode(amqpNode, 0, version);\n-\n-        // 1e. Extract class/method/field heirarchy\n-        getModel().addFromNode(amqpNode, 0, version);\n-        _versionToModelMap.get(version).addFromNode(amqpNode, 0, version);\n-    }\n-\n-\n-    public String getOutputDirectory()\n-    {\n-        return _outputDirectory;\n-    }\n-\n-    public String prepareConstantName(String constantName)\n-    {\n-        return prepareDomainName(constantName);\n-    }\n-\n-\n-    public boolean isFixedSizeType(String type)\n-    {\n-        return FIXED_SIZE_TYPES.containsKey(type);\n-    }\n-\n-\n-    public int getTypeSize(String type)\n-    {\n-        return FIXED_SIZE_TYPES.get(type);\n-    }\n-\n-\n-\n-    // Model-level template processing\n-    abstract protected void processModelTemplate(NamedTemplate template);\n-\n-    // Class-level template processing\n-    abstract protected void processClassTemplate(NamedTemplate template, AmqpClass thisClass);\n-\n-    // Method-level template processing\n-    abstract protected void processMethodTemplate(NamedTemplate template, AmqpClass thisClass,\n-                                                  AmqpMethod method);\n-\n-    // Field-level template processing\n-    abstract protected void processTemplate(NamedTemplate template, AmqpClass thisClass,\n-                                            AmqpMethod method, AmqpField field, AmqpVersion version);\n-\n-    abstract protected String prepareFilename(String filenameTemplate, AmqpClass thisClass, AmqpMethod method,\n-                                              AmqpField field, AmqpVersion version);\n-\n-    abstract protected String processToken(String token, AmqpClass thisClass, AmqpMethod method,\n-                                           AmqpField field, AmqpVersion version);\n-\n-    abstract protected void processClassList(StringBuffer sb, int listMarkerStartIndex, int listMarkerEndIndex,\n-                                             AmqpModel model, AmqpVersion version);\n-\n-    abstract protected void processMethodList(StringBuffer sb, int listMarkerStartIndex, int listMarkerEndIndex,\n-                                              AmqpClass thisClass);\n-\n-\n-    abstract protected void processFieldList(StringBuffer sb, int listMarkerStartIndex, int listMarkerEndIndex,\n-                                             AmqpFieldMap fieldMap, AmqpVersion version);\n-\n-    abstract protected void processConstantList(StringBuffer sb, int listMarkerStartIndex, int listMarkerEndIndex,\n-                                                AmqpConstantSet constantSet);\n-\n-\n-}"
        },
        {
            "sha": "7730fca1bdbf68f8c4d53a6c955eb65698411550",
            "filename": "common/gentools/src/org/apache/qpid/gentools/JavaGenerator.java",
            "status": "removed",
            "additions": 0,
            "deletions": 1826,
            "changes": 1826,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FJavaGenerator.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FJavaGenerator.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FJavaGenerator.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,1826 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import java.io.File;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.TreeMap;\n-\n-public class JavaGenerator extends Generator\n-{\n-    // TODO: Move this to parent class\n-    protected static final int FIELD_NAME = 0;\n-    protected static final int FIELD_CODE_TYPE = 1;\n-\n-    private class DomainInfo\n-    {\n-        final public String type;\n-        final public String size;\n-        final public String encodingType;\n-        final public String encodeExpression;\n-        final public String decodeExpression;\n-\n-        public DomainInfo(String domain, String size, String encodingType, String encodeExpression, String decodeExpression)\n-        {\n-            this.type = domain;\n-            this.size = size;\n-            this.encodeExpression = encodeExpression;\n-            this.decodeExpression = decodeExpression;\n-            this.encodingType = encodingType;\n-        }\n-    }\n-\n-    private static TreeMap<String, DomainInfo> typeMap = new TreeMap<String, DomainInfo>();\n-\n-    // Methods used for generation of code snippets called from the field map parsers\n-\n-    // Common methods\n-    private final CommandGenerateMethod declarationGenerateMethod = new CommandGenerateMethod()\n-    {\n-        public String generate(String codeType, AmqpField field, AmqpVersionSet versionSet, int indentSize, int tabSize, boolean notLast)\n-        {\n-            return generateFieldDeclaration(codeType, field, versionSet, indentSize, tabSize, notLast);\n-        }\n-    };\n-\n-    private MangledGenerateMethod mangledDeclarationGenerateMethod = new MangledGenerateMethod()\n-    {\n-        public String generate(AmqpField field, int indentSize, int tabSize, boolean notLast)\n-        {\n-            return generateMangledFieldDeclaration(field, indentSize, tabSize, notLast);\n-        }\n-    };\n-\n-    // Methods for MessageBody classes\n-    private CommandGenerateMethod mbGetGenerateMethod = new CommandGenerateMethod()\n-    {\n-        public String generate(String codeType, AmqpField field, AmqpVersionSet versionSet, int indentSize, int tabSize, boolean notLast)\n-        {\n-            return generateMbGetMethod(codeType, field, versionSet, indentSize, tabSize, notLast);  //To change body of implemented methods use File | Settings | File Templates.\n-        }\n-    };\n-\n-    private MangledGenerateMethod mbMangledGetGenerateMethod = new MangledGenerateMethod()\n-    {\n-        public String generate(AmqpField field, int indentSize, int tabSize, boolean notLast)\n-        {\n-            return generateMbMangledGetMethod(field, indentSize, tabSize, notLast);\n-        }\n-    };\n-    private CommandGenerateMethod mbParamListGenerateMethod = new CommandGenerateMethod()\n-    {\n-        public String generate(String codeType, AmqpField field, AmqpVersionSet versionSet, int indentSize, int tabSize, boolean notLast)\n-        {\n-            return generateMbParamList(codeType, field, versionSet, indentSize, tabSize, notLast);\n-        }\n-    };\n-    private CommandGenerateMethod mbPassedParamListGenerateMethod = new CommandGenerateMethod()\n-    {\n-        public String generate(String codeType, AmqpField field, AmqpVersionSet versionSet, int indentSize, int tabSize, boolean notLast)\n-        {\n-            return generateMbPassedParamList(codeType, field, versionSet, indentSize, tabSize, notLast);\n-        }\n-    };\n-    private MangledGenerateMethod mbMangledParamListGenerateMethod = new MangledGenerateMethod()\n-    {\n-        public String generate(AmqpField field, int indentSize, int tabSize, boolean notLast)\n-        {\n-            return generateMbMangledParamList(field, indentSize, tabSize, notLast);\n-        }\n-    };\n-    private MangledGenerateMethod mbMangledPassedParamListGenerateMethod = new MangledGenerateMethod()\n-    {\n-        public String generate(AmqpField field, int indentSize, int tabSize, boolean notLast)\n-        {\n-            return generateMbMangledPassedParamList(field, indentSize, tabSize, notLast);\n-        }\n-    };\n-    private CommandGenerateMethod mbBodyInitGenerateMethod = new CommandGenerateMethod()\n-    {\n-        public String generate(String codeType, AmqpField field, AmqpVersionSet versionSet, int indentSize, int tabSize, boolean notLast)\n-        {\n-            return generateMbBodyInit(codeType, field, versionSet, indentSize, tabSize, notLast);\n-        }\n-    };\n-    private MangledGenerateMethod mbMangledBodyInitGenerateMethod = new MangledGenerateMethod()\n-    {\n-        public String generate(AmqpField field, int indentSize, int tabSize, boolean notLast)\n-        {\n-            return generateMbMangledBodyInit(field, indentSize, tabSize, notLast);\n-        }\n-    };\n-    private GenerateMethod mbSizeGenerateMethod = new GenerateMethod()\n-    {\n-        public String generate(String domainType, String fieldName, int ordinal, int indentSize, int tabSize)\n-        {\n-            return generateMbFieldSize(domainType, fieldName, ordinal, indentSize, tabSize);\n-        }\n-    };\n-    private BitFieldGenerateMethod mbBitSizeGenerateMethod = new BitFieldGenerateMethod()\n-    {\n-        public String generate(List<String> bitFieldList, int ordinal, int indentSize, int tabSize)\n-        {\n-            return generateMbBitArrayFieldSize(bitFieldList, ordinal, indentSize, tabSize);\n-        }\n-    };\n-    private GenerateMethod mbEncodeGenerateMethod = new GenerateMethod()\n-    {\n-        public String generate(String domainType, String fieldName, int ordinal, int indentSize, int tabSize)\n-        {\n-            return generateMbFieldEncode(domainType, fieldName, ordinal, indentSize, tabSize);\n-        }\n-    };\n-    private BitFieldGenerateMethod mbBitEncodeGenerateMethod = new BitFieldGenerateMethod()\n-    {\n-        public String generate(List<String> bitFieldList, int ordinal, int indentSize, int tabSize)\n-        {\n-            return generateMbBitFieldEncode(bitFieldList, ordinal, indentSize, tabSize);\n-        }\n-    };\n-    private GenerateMethod mbDecodeGenerateMethod = new GenerateMethod()\n-    {\n-        public String generate(String domainType, String fieldName, int ordinal, int indentSize, int tabSize)\n-        {\n-            return generateMbFieldDecode(domainType, fieldName, ordinal, indentSize, tabSize);\n-        }\n-    };\n-    private BitFieldGenerateMethod mbBitDecodeGenerateMethod = new BitFieldGenerateMethod()\n-    {\n-        public String generate(List<String> bitFieldList, int ordinal, int indentSize, int tabSize)\n-        {\n-            return generateMbBitFieldDecode(bitFieldList, ordinal, indentSize, tabSize);\n-        }\n-    };\n-    private GenerateMethod mbToStringGenerateMethod = new GenerateMethod()\n-    {\n-        public String generate(String domainType, String fieldName, int ordinal, int indentSize, int tabSize)\n-        {\n-            return generateMbFieldToString(domainType, fieldName, ordinal, indentSize, tabSize);\n-        }\n-    };\n-    private BitFieldGenerateMethod mbBitToStringGenerateMethod = new BitFieldGenerateMethod()\n-    {\n-        public String generate(List<String> bitFieldList, int ordinal, int indentSize, int tabSize)\n-        {\n-            return generateMbBitFieldToString(bitFieldList, ordinal, indentSize, tabSize);\n-        }\n-    };\n-\n-    // Methods for PropertyContentHeader classes\n-    private CommandGenerateMethod pchClearGenerateMethod = new CommandGenerateMethod()\n-    {\n-        public String generate(String codeType, AmqpField field, AmqpVersionSet versionSet, int indentSize, int tabSize, boolean notLast)\n-        {\n-            return generatePchClearMethod(codeType, field, versionSet, indentSize, tabSize, notLast);\n-        }\n-    };\n-    private MangledGenerateMethod pchMangledClearGenerateMethod = new MangledGenerateMethod()\n-    {\n-        public String generate(AmqpField field, int indentSize, int tabSize, boolean notLast)\n-        {\n-            return generatePchMangledClearMethod(field, indentSize, tabSize, notLast);\n-        }\n-    };\n-    private CommandGenerateMethod pchGetGenerateMethod = new CommandGenerateMethod()\n-    {\n-        public String generate(String codeType, AmqpField field, AmqpVersionSet versionSet, int indentSize, int tabSize, boolean notLast)\n-        {\n-            return generatePchGetMethod(codeType, field, versionSet, indentSize, tabSize, notLast);\n-        }\n-    };\n-    private MangledGenerateMethod pchMangledGetGenerateMethod = new MangledGenerateMethod()\n-    {\n-        public String generate(AmqpField field, int indentSize, int tabSize, boolean notLast)\n-        {\n-            return generatePchMangledGetMethod(field, indentSize, tabSize, notLast);\n-        }\n-    };\n-    private CommandGenerateMethod pchSetGenerateMethod = new CommandGenerateMethod()\n-    {\n-        public String generate(String codeType, AmqpField field, AmqpVersionSet versionSet, int indentSize, int tabSize, boolean notLast)\n-        {\n-            return generatePchSetMethod(codeType, field, versionSet, indentSize, tabSize, notLast);\n-        }\n-    };\n-    private MangledGenerateMethod pchMangledSetGenerateMethod = new MangledGenerateMethod()\n-    {\n-        public String generate(AmqpField field, int indentSize, int tabSize, boolean notLast)\n-        {\n-            return generatePchMangledSetMethod(field, indentSize, tabSize, notLast);\n-        }\n-    };\n-    private GenerateMethod pchSizeGenerateMethod = new GenerateMethod()\n-    {\n-        public String generate(String domainType, String fieldName, int ordinal, int indentSize, int tabSize)\n-        {\n-            return generatePchFieldSize(domainType, fieldName, ordinal, indentSize, tabSize);\n-        }\n-    };\n-    private BitFieldGenerateMethod pchBitSizeGenerateMethod = new BitFieldGenerateMethod()\n-    {\n-        public String generate(List<String> bitFieldList, int ordinal, int indentSize, int tabSize)\n-        {\n-            return generatePchBitArrayFieldSize(bitFieldList, ordinal, indentSize, tabSize);\n-        }\n-    };\n-    private GenerateMethod pchEncodeGenerateMethod = new GenerateMethod()\n-    {\n-        public String generate(String domainType, String fieldName, int ordinal, int indentSize, int tabSize)\n-        {\n-            return generatePchFieldEncode(domainType, fieldName, ordinal, indentSize, tabSize);\n-        }\n-    };\n-    private BitFieldGenerateMethod pchBitEncodeGenerateMethod = new BitFieldGenerateMethod()\n-    {\n-        public String generate(List<String> bitFieldList, int ordinal, int indentSize, int tabSize)\n-        {\n-            return generatePchBitFieldEncode(bitFieldList, ordinal, indentSize, tabSize);\n-        }\n-    };\n-    private GenerateMethod pchDecodeGenerateMethod = new GenerateMethod()\n-    {\n-        public String generate(String domainType, String fieldName, int ordinal, int indentSize, int tabSize)\n-        {\n-            return generatePchFieldDecode(domainType, fieldName, ordinal, indentSize, tabSize);\n-        }\n-    };\n-    private BitFieldGenerateMethod pchBitDecodeGenerateMethod = new BitFieldGenerateMethod()\n-    {\n-        public String generate(List<String> bitFieldList, int ordinal, int indentSize, int tabSize)\n-        {\n-            return generatePchBitFieldDecode(bitFieldList, ordinal, indentSize, tabSize);\n-        }\n-    };\n-    private GenerateMethod pchGetPropertyFlagsGenerateMethod = new GenerateMethod()\n-    {\n-        public String generate(String domainType, String fieldName, int ordinal, int indentSize, int tabSize)\n-        {\n-            return generatePchGetPropertyFlags(domainType, fieldName, ordinal, indentSize, tabSize);\n-        }\n-    };\n-    private BitFieldGenerateMethod pchBitGetPropertyFlagsGenerateMethod = new BitFieldGenerateMethod()\n-    {\n-        public String generate(List<String> bitFieldList, int ordinal, int indentSize, int tabSize)\n-        {\n-            return generatePchBitGetPropertyFlags(bitFieldList, ordinal, indentSize, tabSize);\n-        }\n-    };\n-    private GenerateMethod pchSetPropertyFlagsGenerateMethod = new GenerateMethod()\n-    {\n-        public String generate(String domainType, String fieldName, int ordinal, int indentSize, int tabSize)\n-        {\n-            return generatePchSetPropertyFlags(domainType, fieldName, ordinal, indentSize, tabSize);\n-        }\n-    };\n-    private BitFieldGenerateMethod pchBitSetPropertyFlagsGenerateMethod = new BitFieldGenerateMethod()\n-    {\n-        public String generate(List<String> bitFieldList, int ordinal, int indentSize, int tabSize)\n-        {\n-            return generatePchBitSetPropertyFlags(bitFieldList, ordinal, indentSize, tabSize);\n-        }\n-    };\n-\n-\n-    public String getNativeType(String type)\n-    {\n-        return typeMap.get(type).type;\n-    }\n-\n-    public String getEncodingType(String type)\n-    {\n-        return typeMap.get(type).encodingType;\n-    }\n-\n-\n-    public JavaGenerator()\n-    {\n-        super();\n-        // Load Java type and size maps.\n-        // Adjust or add to these lists as new types are added/defined.\n-        // The char '#' will be replaced by the field variable name (any type).\n-        // The char '~' will be replaced by the compacted bit array size (type bit only).\n-        typeMap.put(\"bit\", new DomainInfo(\n-                \"boolean\",                                        // Java code type\n-                \"~\",                                            // size\n-                \"Boolean\",                                        // Java code type\n-                \"EncodingUtils.writeBooleans(buffer, #)\",        // encode expression\n-                \"# = EncodingUtils.readBooleans(buffer)\"));        // decode expression\n-        typeMap.put(\"bitfield\", new DomainInfo(\n-                        \"byte\",                                        // Java code type\n-                        \"~\",                                            // size\n-                        \"Bitfield\",\n-                        \"EncodingUtils.writeBooleans(buffer, #)\",        // encode expression\n-                        \"# = EncodingUtils.readBooleans(buffer)\"));        // decode expression\n-\n-        typeMap.put(\"content\", new DomainInfo(\n-                \"Content\",                                        // Java code type\n-                \"EncodingUtils.encodedContentLength(#)\",     // size\n-                \"Content\",                                        // Java code type\n-                \"EncodingUtils.writeContentBytes(buffer, #)\", // encode expression\n-                \"# = EncodingUtils.readContent(buffer)\"));    // decode expression\n-        typeMap.put(\"long\", new DomainInfo(\n-                \"long\",                                            // Java code type\n-                \"4\",                                            // size\n-                \"UnsignedInteger\",                              // Java code type\n-                \"EncodingUtils.writeUnsignedInteger(buffer, #)\", // encode expression\n-                \"# = buffer.getUnsignedInt()\"));                 // decode expression\n-        typeMap.put(\"longlong\", new DomainInfo(\n-                \"long\",                                            // Java code type\n-                \"8\",                                            // size\n-                \"Long\",\n-                \"buffer.putLong(#)\",                             // encode expression\n-                \"# = buffer.getLong()\"));                         // decode expression\n-        typeMap.put(\"longstr\", new DomainInfo(\n-                \"byte[]\",                                        // Java code type\n-                \"EncodingUtils.encodedLongstrLength(#)\",         // size\n-                \"Bytes\",\n-                \"EncodingUtils.writeLongStringBytes(buffer, #)\", // encode expression\n-                \"# = EncodingUtils.readLongstr(buffer)\"));        // decode expression\n-        typeMap.put(\"octet\", new DomainInfo(\n-                \"short\",                                        // Java code type\n-                \"1\",                                            // size\n-                \"UnsignedByte\",\n-                \"EncodingUtils.writeUnsignedByte(buffer, #)\",    // encode expression\n-                \"# = buffer.getUnsigned()\"));                     // decode expression\n-        typeMap.put(\"short\", new DomainInfo(\n-                \"int\",                                            // Java code type\n-                \"2\",                                            // size\n-                \"UnsignedShort\",\n-                \"EncodingUtils.writeUnsignedShort(buffer, #)\",    // encode expression\n-                \"# = buffer.getUnsignedShort()\"));                 // decode expression\n-        typeMap.put(\"shortstr\", new DomainInfo(\n-                \"AMQShortString\",                                        // Java code type\n-                \"EncodingUtils.encodedShortStringLength(#)\",    // size\n-                \"AMQShortString\",                                        // Java code type\n-                \"EncodingUtils.writeShortStringBytes(buffer, #)\", // encode expression\n-                \"# = EncodingUtils.readAMQShortString(buffer)\"));    // decode expression\n-        typeMap.put(\"table\", new DomainInfo(\n-                \"FieldTable\",                                    // Java code type\n-                \"EncodingUtils.encodedFieldTableLength(#)\",     // size\n-                \"FieldTable\",                                    // Java code type\n-                \"EncodingUtils.writeFieldTableBytes(buffer, #)\", // encode expression\n-                \"# = EncodingUtils.readFieldTable(buffer)\"));    // decode expression\n-        typeMap.put(\"timestamp\", new DomainInfo(\n-                \"long\",                                            // Java code type\n-                \"8\",                                            // size\n-                \"Timestamp\",\n-                \"EncodingUtils.writeTimestamp(buffer, #)\",        // encode expression\n-                \"# = EncodingUtils.readTimestamp(buffer)\"));    // decode expression\n-    }\n-\n-    // === Start of methods for Interface LanguageConverter ===\n-\n-    public String prepareClassName(String className)\n-    {\n-        return camelCaseName(className, true);\n-    }\n-\n-    public String prepareMethodName(String methodName)\n-    {\n-        return camelCaseName(methodName, false);\n-    }\n-\n-    public String prepareDomainName(String domainName)\n-    {\n-        return camelCaseName(domainName, false);\n-    }\n-\n-\n-    public String getGeneratedType(String domainName, AmqpVersion version)\n-    {\n-        String domainType = getDomainType(domainName, version);\n-        if (domainType == null)\n-        {\n-            throw new AmqpTypeMappingException(\"Domain type \\\"\" + domainName +\n-                                               \"\\\" not found in Java typemap.\");\n-        }\n-        DomainInfo info = typeMap.get(domainType);\n-        if (info == null)\n-        {\n-            throw new AmqpTypeMappingException(\"Unknown domain: \\\"\" + domainType + \"\\\"\");\n-        }\n-        return info.type;\n-    }\n-\n-    // === Abstract methods from class Generator - Java-specific implementations ===\n-\n-    @Override\n-    protected String prepareFilename(String filenameTemplate, AmqpClass thisClass, AmqpMethod method,\n-                                     AmqpField field, AmqpVersion version)\n-    {\n-        StringBuffer sb = new StringBuffer(filenameTemplate);\n-        if (thisClass != null)\n-        {\n-            replaceToken(sb, \"${CLASS}\", thisClass.getName());\n-        }\n-        if (method != null)\n-        {\n-            replaceToken(sb, \"${METHOD}\", method.getName());\n-        }\n-        if (field != null)\n-        {\n-            replaceToken(sb, \"${FIELD}\", field.getName());\n-        }\n-        if (version != null)\n-        {\n-            replaceToken(sb, \"${MAJOR}\", String.valueOf(version.getMajor()));\n-            replaceToken(sb, \"${MINOR}\", String.valueOf(version.getMinor()));\n-        }\n-        return sb.toString();\n-    }\n-\n-    @Override\n-    protected void processModelTemplate(NamedTemplate template)\n-    {\n-        processTemplate(template, null, null, null, null);\n-    }\n-\n-    @Override\n-    protected void processClassTemplate(NamedTemplate template, AmqpClass thisClass)\n-    {\n-        processTemplate(template, thisClass, null, null,\n-                        thisClass.getVersionSet().size() == 1 ? thisClass.getVersionSet().first() : null);\n-    }\n-\n-    @Override\n-    protected void processMethodTemplate(NamedTemplate template, AmqpClass thisClass,\n-                                         AmqpMethod method)\n-    {\n-        processTemplate(template, thisClass, method, null,\n-                        thisClass.getVersionSet().size() == 1 ? thisClass.getVersionSet().first() : null);\n-    }\n-\n-    protected void processFieldTemplate(NamedTemplate template, AmqpClass thisClass,\n-                                        AmqpMethod method, AmqpField field)\n-    {\n-        processTemplate(template, thisClass, method, field,\n-                        thisClass.getVersionSet().size() == 1 ? thisClass.getVersionSet().first() : null);\n-    }\n-\n-    @Override\n-    protected void processTemplate(NamedTemplate template, AmqpClass thisClass,\n-                                   AmqpMethod method, AmqpField field, AmqpVersion version)\n-    {\n-        StringBuffer sb = new StringBuffer(template.getTemplate());\n-        String filename = prepareFilename(getTemplateFileName(sb), thisClass, method, field, version);\n-        processTemplate(sb, thisClass, method, field, template.getName(), version);\n-        writeTargetFile(sb, new File(getOutputDirectory() + Utils.FILE_SEPARATOR + filename));\n-        generatedFileCounter++;\n-    }\n-\n-    protected void processTemplate(StringBuffer sb, AmqpClass thisClass, AmqpMethod method,\n-                                   AmqpField field, String templateFileName, AmqpVersion version)\n-    {\n-        try\n-        {\n-            processAllLists(sb, thisClass, method, version);\n-        }\n-        catch (AmqpTemplateException e)\n-        {\n-            System.out.println(\"WARNING: \" + templateFileName + \": \" + e.getMessage());\n-        }\n-        try\n-        {\n-            processAllTokens(sb, thisClass, method, field, version);\n-        }\n-        catch (AmqpTemplateException e)\n-        {\n-            System.out.println(\"WARNING: \" + templateFileName + \": \" + e.getMessage());\n-        }\n-    }\n-\n-    @Override\n-    protected String processToken(String token, AmqpClass thisClass, AmqpMethod method, AmqpField field,\n-                                  AmqpVersion version)\n-    {\n-        if (token.compareTo(\"${GENERATOR}\") == 0)\n-        {\n-            return GENERATOR_INFO;\n-        }\n-        if (token.compareTo(\"${CLASS}\") == 0 && thisClass != null)\n-        {\n-            return thisClass.getName();\n-        }\n-        if (token.compareTo(\"${CLASS_ID_INIT}\") == 0 && thisClass != null)\n-        {\n-            return generateIndexInitializer(\"registerClassId\", thisClass.getIndexMap(), 8);\n-        }\n-        if (token.compareTo(\"${METHOD}\") == 0 && method != null)\n-        {\n-            return method.getName();\n-        }\n-        if (token.compareTo(\"${METHOD_ID_INIT}\") == 0 && method != null)\n-        {\n-            return generateIndexInitializer(\"registerMethodId\", method.getIndexMap(), 8);\n-        }\n-        if (token.compareTo(\"${FIELD}\") == 0 && field != null)\n-        {\n-            return field.getName();\n-        }\n-\n-        // This token is used only with class or method-level templates\n-        if (token.compareTo(\"${pch_property_flags_declare}\") == 0)\n-        {\n-            return generatePchPropertyFlagsDeclare();\n-        }\n-        else if (token.compareTo(\"${pch_property_flags_initializer}\") == 0)\n-        {\n-            int mapSize = method == null ? thisClass.getFieldMap().size() : method.getFieldMap().size();\n-            return generatePchPropertyFlagsInitializer(mapSize);\n-        }\n-        else if (token.compareTo(\"${pch_compact_property_flags_initializer}\") == 0)\n-        {\n-            return generatePchCompactPropertyFlagsInitializer(thisClass, 8, 4);\n-        }\n-        else if (token.compareTo(\"${pch_compact_property_flags_check}\") == 0)\n-        {\n-            return generatePchCompactPropertyFlagsCheck(thisClass, 8, 4);\n-        }\n-\n-        // Oops!\n-        throw new AmqpTemplateException(\"Template token \" + token + \" unknown.\");\n-    }\n-\n-    @Override\n-    protected void processClassList(StringBuffer sb, int listMarkerStartIndex, int listMarkerEndIndex,\n-                                    AmqpModel model, AmqpVersion version)\n-    {\n-        String codeSnippet;\n-        int lend = sb.indexOf(CR, listMarkerStartIndex) + 1; // Include cr at end of line\n-        String tline = sb.substring(listMarkerEndIndex, lend); // Line excluding line marker, including cr\n-        int tokStart = tline.indexOf('$');\n-        String token = tline.substring(tokStart).trim();\n-        sb.delete(listMarkerStartIndex, lend);\n-\n-        if (token.compareTo(\"${reg_map_put_method}\") == 0)\n-        {\n-            codeSnippet = generateRegistry(model, 8, 4);\n-        }\n-\n-        else // Oops!\n-        {\n-            throw new AmqpTemplateException(\"Template token \" + token + \" unknown.\");\n-        }\n-\n-        sb.insert(listMarkerStartIndex, codeSnippet);\n-    }\n-\n-    @Override\n-    protected void processMethodList(StringBuffer sb, int listMarkerStartIndex, int listMarkerEndIndex,\n-                                     AmqpClass thisClass)\n-    {\n-        String codeSnippet;\n-        int lend = sb.indexOf(CR, listMarkerStartIndex) + 1; // Include cr at end of line\n-        String tline = sb.substring(listMarkerEndIndex, lend); // Line excluding line marker, including cr\n-        int tokStart = tline.indexOf('$');\n-        String token = tline.substring(tokStart).trim();\n-        sb.delete(listMarkerStartIndex, lend);\n-\n-        //TODO - we don't have any cases of this (yet).\n-        if (token.compareTo(\"${???}\") == 0)\n-        {\n-            codeSnippet = token;\n-        }\n-        else // Oops!\n-        {\n-            throw new AmqpTemplateException(\"Template token \" + token + \" unknown.\");\n-        }\n-\n-        sb.insert(listMarkerStartIndex, codeSnippet);\n-    }\n-\n-    @Override\n-    protected void processFieldList(StringBuffer sb, int listMarkerStartIndex, int listMarkerEndIndex,\n-                                    AmqpFieldMap fieldMap, AmqpVersion version)\n-    {\n-        String codeSnippet;\n-        int lend = sb.indexOf(CR, listMarkerStartIndex) + 1; // Include cr at end of line\n-        String tline = sb.substring(listMarkerEndIndex, lend); // Line excluding line marker, including cr\n-        int tokStart = tline.indexOf('$');\n-        String token = tline.substring(tokStart).trim();\n-        sb.delete(listMarkerStartIndex, lend);\n-\n-        // Field declarations - common to MethodBody and PropertyContentHeader classes\n-        if (token.compareTo(\"${field_declaration}\") == 0)\n-        {\n-            codeSnippet = fieldMap.parseFieldMap(declarationGenerateMethod,\n-                                                 mangledDeclarationGenerateMethod, 4, 4, this);\n-        }\n-\n-        // MethodBody classes\n-        else if (token.compareTo(\"${mb_field_get_method}\") == 0)\n-        {\n-            codeSnippet = fieldMap.parseFieldMap(mbGetGenerateMethod,\n-                                                 mbMangledGetGenerateMethod, 4, 4, this);\n-        }\n-        else if (token.compareTo(\"${mb_field_parameter_list}\") == 0)\n-        {\n-            // <cringe> The code generated by this is ugly... It puts a comma on a line by itself!\n-            // TODO: Find a more elegant solution here sometime...\n-            codeSnippet = fieldMap.size() > 0 ? Utils.createSpaces(42) + \",\" + CR : \"\";\n-            // </cringe>\n-            codeSnippet += fieldMap.parseFieldMap(mbParamListGenerateMethod,\n-                                                  mbMangledParamListGenerateMethod, 42, 4, this);\n-        }\n-\n-        else if (token.compareTo(\"${mb_field_passed_parameter_list}\") == 0)\n-        {\n-            // <cringe> The code generated by this is ugly... It puts a comma on a line by itself!\n-            // TODO: Find a more elegant solution here sometime...\n-            codeSnippet = fieldMap.size() > 0 ? Utils.createSpaces(42) + \",\" + CR : \"\";\n-            // </cringe>\n-            codeSnippet += fieldMap.parseFieldMap(mbPassedParamListGenerateMethod,\n-                                                  mbMangledPassedParamListGenerateMethod, 42, 4, this);\n-        }\n-        else if (token.compareTo(\"${mb_field_body_initialize}\") == 0)\n-        {\n-            codeSnippet = fieldMap.parseFieldMap(mbBodyInitGenerateMethod,\n-                                                 mbMangledBodyInitGenerateMethod, 8, 4, this);\n-        }\n-        else if (token.compareTo(\"${mb_field_size}\") == 0)\n-        {\n-            codeSnippet = fieldMap.parseFieldMapOrdinally(mbSizeGenerateMethod,\n-                                                          mbBitSizeGenerateMethod, 8, 4, this);\n-        }\n-        else if (token.compareTo(\"${mb_field_encode}\") == 0)\n-        {\n-            codeSnippet = fieldMap.parseFieldMapOrdinally(mbEncodeGenerateMethod,\n-                                                          mbBitEncodeGenerateMethod, 8, 4, this);\n-        }\n-        else if (token.compareTo(\"${mb_field_decode}\") == 0)\n-        {\n-            codeSnippet = fieldMap.parseFieldMapOrdinally(mbDecodeGenerateMethod,\n-                                                          mbBitDecodeGenerateMethod, 8, 4, this);\n-        }\n-        else if (token.compareTo(\"${mb_field_to_string}\") == 0)\n-        {\n-            codeSnippet = fieldMap.parseFieldMapOrdinally(mbToStringGenerateMethod,\n-                                                          mbBitToStringGenerateMethod, 8, 4, this);\n-        }\n-\n-        // PropertyContentHeader classes\n-        else if (token.compareTo(\"${pch_field_list_size}\") == 0)\n-        {\n-            codeSnippet = fieldMap.parseFieldMapOrdinally(pchSizeGenerateMethod,\n-                                                          pchBitSizeGenerateMethod, 12, 4, this);\n-        }\n-        else if (token.compareTo(\"${pch_field_list_payload}\") == 0)\n-        {\n-            codeSnippet = fieldMap.parseFieldMapOrdinally(pchEncodeGenerateMethod,\n-                                                          pchBitEncodeGenerateMethod, 12, 4, this);\n-        }\n-        else if (token.compareTo(\"${pch_field_list_decode}\") == 0)\n-        {\n-            codeSnippet = fieldMap.parseFieldMapOrdinally(pchDecodeGenerateMethod,\n-                                                          pchBitDecodeGenerateMethod, 12, 4, this);\n-        }\n-        else if (token.compareTo(\"${pch_get_compact_property_flags}\") == 0)\n-        {\n-            codeSnippet = fieldMap.parseFieldMapOrdinally(pchGetPropertyFlagsGenerateMethod,\n-                                                          pchBitGetPropertyFlagsGenerateMethod, 8, 4, this);\n-        }\n-        else if (token.compareTo(\"${pch_set_compact_property_flags}\") == 0)\n-        {\n-            codeSnippet = fieldMap.parseFieldMapOrdinally(pchSetPropertyFlagsGenerateMethod,\n-                                                          pchBitSetPropertyFlagsGenerateMethod, 8, 4, this);\n-        }\n-        else if (token.compareTo(\"${pch_field_clear_methods}\") == 0)\n-        {\n-            codeSnippet = fieldMap.parseFieldMap(pchClearGenerateMethod,\n-                                                 pchMangledClearGenerateMethod, 4, 4, this);\n-        }\n-        else if (token.compareTo(\"${pch_field_get_methods}\") == 0)\n-        {\n-            codeSnippet = fieldMap.parseFieldMap(pchGetGenerateMethod,\n-                                                 pchMangledGetGenerateMethod, 4, 4, this);\n-        }\n-        else if (token.compareTo(\"${pch_field_set_methods}\") == 0)\n-        {\n-            codeSnippet = fieldMap.parseFieldMap(pchSetGenerateMethod,\n-                                                 pchMangledSetGenerateMethod, 4, 4, this);\n-        }\n-\n-        else // Oops!\n-        {\n-            throw new AmqpTemplateException(\"Template token \" + token + \" unknown.\");\n-        }\n-        sb.insert(listMarkerStartIndex, codeSnippet);\n-    }\n-\n-    @Override\n-    protected void processConstantList(StringBuffer sb, int listMarkerStartIndex, int listMarkerEndIndex,\n-                                       AmqpConstantSet constantSet)\n-    {\n-        String codeSnippet;\n-        int lend = sb.indexOf(CR, listMarkerStartIndex) + 1; // Include cr at end of line\n-        String tline = sb.substring(listMarkerEndIndex, lend); // Line excluding line marker, including cr\n-        int tokStart = tline.indexOf('$');\n-        String token = tline.substring(tokStart).trim();\n-        sb.delete(listMarkerStartIndex, lend);\n-\n-        if (token.compareTo(\"${const_get_method}\") == 0)\n-        {\n-            codeSnippet = generateConstantGetMethods(constantSet, 4, 4);\n-        }\n-\n-        else // Oops!\n-        {\n-            throw new AmqpTemplateException(\"Template token \" + token + \" unknown.\");\n-        }\n-\n-        sb.insert(listMarkerStartIndex, codeSnippet);\n-    }\n-\n-    // === Protected and private helper functions unique to Java implementation ===\n-\n-    // Methods used for generation of code snippets called from the field map parsers\n-\n-    // Common methods\n-\n-    protected String generateFieldDeclaration(String codeType, AmqpField field,\n-                                              AmqpVersionSet versionSet, int indentSize, int tabSize, boolean nextFlag)\n-    {\n-        return Utils.createSpaces(indentSize) + \"public \" + codeType + \" \" + field.getName() +\n-               \"; // AMQP version(s): \" + versionSet + CR;\n-    }\n-\n-    protected String generateMangledFieldDeclaration(AmqpField field, int indentSize,\n-                                                     int tabSize, boolean nextFlag)\n-    {\n-        StringBuffer sb = new StringBuffer();\n-        Iterator<String> dItr = field.getDomainMap().keySet().iterator();\n-        int domainCntr = 0;\n-        while (dItr.hasNext())\n-        {\n-            String domainName = dItr.next();\n-            AmqpVersionSet versionSet = field.getDomainMap().get(domainName);\n-            String codeType = getGeneratedType(domainName, versionSet.first());\n-            sb.append(Utils.createSpaces(indentSize) + \"public \" + codeType + \" \" +\n-                      field.getName() + \"_\" + (domainCntr++) + \"; // AMQP Version(s): \" + versionSet +\n-                      CR);\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generateIndexInitializer(String mapName, AmqpOrdinalVersionMap indexMap, int indentSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-\n-        Iterator<Integer> iItr = indexMap.keySet().iterator();\n-        while (iItr.hasNext())\n-        {\n-            int index = iItr.next();\n-            AmqpVersionSet versionSet = indexMap.get(index);\n-            Iterator<AmqpVersion> vItr = versionSet.iterator();\n-            while (vItr.hasNext())\n-            {\n-                AmqpVersion version = vItr.next();\n-                sb.append(indent + mapName + \"( (byte) \" + version.getMajor() + \", (byte) \" + version.getMinor() + \", \" + index + \");\" + CR);\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generateRegistry(AmqpModel model, int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        StringBuffer sb = new StringBuffer();\n-\n-        for (String className : model.getClassMap().keySet())\n-        {\n-            AmqpClass thisClass = model.getClassMap().get(className);\n-            for (String methodName : thisClass.getMethodMap().keySet())\n-            {\n-                AmqpMethod method = thisClass.getMethodMap().get(methodName);\n-                for (AmqpVersion version : model.getVersionSet())\n-                {\n-                    // Find class and method index for this version (if it exists)\n-                    try\n-                    {\n-                        int classIndex = findIndex(thisClass.getIndexMap(), version);\n-                        int methodIndex = findIndex(method.getIndexMap(), version);\n-                        sb.append(indent + \"registerMethod(\" + CR);\n-                        sb.append(indent + tab + \"(short)\" + classIndex +\n-                                  \", (short)\" + methodIndex + \", (byte)\" + version.getMajor() +\n-                                  \", (byte)\" + version.getMinor() + \", \" + CR);\n-                        sb.append(indent + tab + Utils.firstUpper(thisClass.getName()) +\n-                                  Utils.firstUpper(method.getName()) + \"Body.getFactory());\" + CR);\n-                    }\n-                    catch (Exception e)\n-                    {\n-                    } // Ignore\n-                }\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected int findIndex(TreeMap<Integer, AmqpVersionSet> map, AmqpVersion version)\n-    {\n-        Iterator<Integer> iItr = map.keySet().iterator();\n-        while (iItr.hasNext())\n-        {\n-            int index = iItr.next();\n-            AmqpVersionSet versionSet = map.get(index);\n-            if (versionSet.contains(version))\n-            {\n-                return index;\n-            }\n-        }\n-        throw new IllegalArgumentException(\"Index not found\");\n-    }\n-\n-    // Methods for AmqpConstants class\n-\n-\n-    public String prepareConstantName(String constantName)\n-    {\n-        return upperCaseName(constantName);\n-    }\n-\n-\n-    protected String generateConstantGetMethods(AmqpConstantSet constantSet,\n-                                                int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-\n-        for (AmqpConstant constant : constantSet.getContstants())\n-        {\n-\n-            if (constant.isVersionConsistent(constantSet.getVersionSet()))\n-            {\n-                // return a constant\n-                String value = constant.firstKey();\n-                if (Utils.containsOnlyDigits(value))\n-                {\n-                    sb.append(indent + \"public static final int \" + constant.getName() + \" = \" +\n-                              constant.firstKey() + \";\" + CR);\n-                }\n-                else if (Utils.containsOnlyDigitsAndDecimal(value))\n-                {\n-                    sb.append(indent + \"public static double \" + constant.getName() + \" = \" +\n-                              constant.firstKey() + \"; \" + CR);\n-                }\n-                else\n-                {\n-                    sb.append(indent + \"public static String \" + constant.getName() + \" = \" +\n-                              constant.firstKey() + \"\\\"; \" + CR);\n-\n-                }\n-                sb.append(CR);\n-            }\n-            else\n-            {\n-                // Return version-specific constant\n-                sb.append(generateVersionDependentGet(constant, \"String\", \"\", \"\\\"\", \"\\\"\", indentSize, tabSize));\n-                sb.append(generateVersionDependentGet(constant, \"int\", \"AsInt\", \"\", \"\", indentSize, tabSize));\n-                sb.append(generateVersionDependentGet(constant, \"double\", \"AsDouble\", \"(double)\", \"\", indentSize, tabSize));\n-                sb.append(CR);\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generateVersionDependentGet(AmqpConstant constant,\n-                                                 String methodReturnType, String methodNameSuffix, String returnPrefix, String returnPostfix,\n-                                                 int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        StringBuffer sb = new StringBuffer();\n-        sb.append(indent + \"public static \" + methodReturnType + \" \" + constant.getName() +\n-                  methodNameSuffix + \"(byte major, byte minor) throws AMQProtocolVersionException\" + CR);\n-        sb.append(indent + \"{\" + CR);\n-        boolean first = true;\n-        Iterator<String> sItr = constant.keySet().iterator();\n-        while (sItr.hasNext())\n-        {\n-            String value = sItr.next();\n-            AmqpVersionSet versionSet = constant.get(value);\n-            sb.append(indent + tab + (first ? \"\" : \"else \") + \"if (\" + generateVersionCheck(versionSet) +\n-                      \")\" + CR);\n-            sb.append(indent + tab + \"{\" + CR);\n-            if (methodReturnType.compareTo(\"int\") == 0 && !Utils.containsOnlyDigits(value))\n-            {\n-                sb.append(generateConstantDeclarationException(constant.getName(), methodReturnType,\n-                                                               indentSize + (2 * tabSize), tabSize));\n-            }\n-            else if (methodReturnType.compareTo(\"double\") == 0 && !Utils.containsOnlyDigitsAndDecimal(value))\n-            {\n-                sb.append(generateConstantDeclarationException(constant.getName(), methodReturnType,\n-                                                               indentSize + (2 * tabSize), tabSize));\n-            }\n-            else\n-            {\n-                sb.append(indent + tab + tab + \"return \" + returnPrefix + value + returnPostfix + \";\" + CR);\n-            }\n-            sb.append(indent + tab + \"}\" + CR);\n-            first = false;\n-        }\n-        sb.append(indent + tab + \"else\" + CR);\n-        sb.append(indent + tab + \"{\" + CR);\n-        sb.append(indent + tab + tab + \"throw new AMQProtocolVersionException(\\\"Constant \\\\\\\"\" +\n-                  constant.getName() + \"\\\\\\\" \\\" +\" + CR);\n-        sb.append(indent + tab + tab + tab +\n-                  \"\\\"is undefined for AMQP version \\\" + major + \\\"-\\\" + minor + \\\".\\\");\" + CR);\n-        sb.append(indent + tab + \"}\" + CR);\n-        sb.append(indent + \"}\" + CR);\n-        return sb.toString();\n-    }\n-\n-    protected String generateConstantDeclarationException(String name, String methodReturnType,\n-                                                          int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        StringBuffer sb = new StringBuffer();\n-        sb.append(indent + \"throw new AMQProtocolVersionException(\\\"Constant \\\\\\\"\" +\n-                  name + \"\\\\\\\" \\\" +\" + CR);\n-        sb.append(indent + tab + \"\\\"cannot be converted to type \" + methodReturnType +\n-                  \" for AMQP version \\\" + major + \\\"-\\\" + minor + \\\".\\\");\" + CR);\n-        return sb.toString();\n-    }\n-\n-    // Methods for MessageBody classes\n-    protected String generateMbGetMethod(String codeType, AmqpField field,\n-                                         AmqpVersionSet versionSet, int indentSize, int tabSize, boolean nextFlag)\n-    {\n-        return Utils.createSpaces(indentSize) + \"public \" + codeType + \" get\" +\n-               Utils.firstUpper(field.getName()) + \"() { return \" + field.getName() + \"; }\" +\n-               CR;\n-    }\n-\n-    protected String generateMbMangledGetMethod(AmqpField field, int indentSize,\n-                                                int tabSize, boolean nextFlag)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        StringBuffer sb = new StringBuffer(CR);\n-        sb.append(indent + \"public <T> T get\" + Utils.firstUpper(field.getName()) +\n-                  \"(Class<T> classObj) throws AMQProtocolVersionException\" + CR);\n-        sb.append(indent + \"{\" + CR);\n-        Iterator<String> dItr = field.getDomainMap().keySet().iterator();\n-        int domainCntr = 0;\n-        while (dItr.hasNext())\n-        {\n-            String domainName = dItr.next();\n-            AmqpVersionSet versionSet = field.getDomainMap().get(domainName);\n-            String codeType = getGeneratedType(domainName, versionSet.first());\n-            sb.append(indent + tab + \"if (classObj.equals(\" + codeType +\n-                      \".class)) // AMQP Version(s): \" + versionSet + CR);\n-            sb.append(indent + tab + tab + \"return (T)(Object)\" + field.getName() + \"_\" +\n-                      (domainCntr++) + \";\" + CR);\n-        }\n-        sb.append(indent + tab +\n-                  \"throw new AMQProtocolVersionException(\\\"None of the AMQP versions defines \\\" +\" +\n-                  CR + \"            \\\"field \\\\\\\"\" + field.getName() +\n-                  \"\\\\\\\" as domain \\\\\\\"\\\" + classObj.getName() + \\\"\\\\\\\".\\\");\" + CR);\n-        sb.append(indent + \"}\" + CR);\n-        sb.append(CR);\n-        return sb.toString();\n-    }\n-\n-    protected String generateMbParamList(String codeType, AmqpField field,\n-                                         AmqpVersionSet versionSet, int indentSize, int tabSize, boolean nextFlag)\n-    {\n-        return Utils.createSpaces(indentSize) + codeType + \" \" + field.getName() +\n-               (nextFlag ? \",\" : \"\") + \" // AMQP version(s): \" + versionSet + CR;\n-    }\n-\n-\n-    protected String generateMbPassedParamList(String codeType, AmqpField field,\n-                                               AmqpVersionSet versionSet, int indentSize, int tabSize, boolean nextFlag)\n-    {\n-        return Utils.createSpaces(indentSize) + field.getName() +\n-               (nextFlag ? \",\" : \"\") + \" // AMQP version(s): \" + versionSet + CR;\n-    }\n-\n-\n-    protected String generateMbMangledParamList(AmqpField field, int indentSize,\n-                                                int tabSize, boolean nextFlag)\n-    {\n-        StringBuffer sb = new StringBuffer();\n-        Iterator<String> dItr = field.getDomainMap().keySet().iterator();\n-        int domainCntr = 0;\n-        while (dItr.hasNext())\n-        {\n-            String domainName = dItr.next();\n-            AmqpVersionSet versionSet = field.getDomainMap().get(domainName);\n-            String codeType = getGeneratedType(domainName, versionSet.first());\n-            sb.append(Utils.createSpaces(indentSize) + codeType + \" \" + field.getName() + \"_\" +\n-                      (domainCntr++) + (nextFlag ? \",\" : \"\") + \" // AMQP version(s): \" +\n-                      versionSet + CR);\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generateMbMangledPassedParamList(AmqpField field, int indentSize,\n-                                                      int tabSize, boolean nextFlag)\n-    {\n-        StringBuffer sb = new StringBuffer();\n-        Iterator<String> dItr = field.getDomainMap().keySet().iterator();\n-        int domainCntr = 0;\n-        while (dItr.hasNext())\n-        {\n-            String domainName = dItr.next();\n-            AmqpVersionSet versionSet = field.getDomainMap().get(domainName);\n-            sb.append(Utils.createSpaces(indentSize) + field.getName() + \"_\" +\n-                      (domainCntr++) + (nextFlag ? \",\" : \"\") + \" // AMQP version(s): \" +\n-                      versionSet + CR);\n-        }\n-        return sb.toString();\n-    }\n-\n-\n-    protected String generateMbBodyInit(String codeType, AmqpField field,\n-                                        AmqpVersionSet versionSet, int indentSize, int tabSize, boolean nextFlag)\n-    {\n-        return Utils.createSpaces(indentSize) + \"this.\" + field.getName() + \" = \" + field.getName() +\n-               \";\" + CR;\n-    }\n-\n-    protected String generateMbMangledBodyInit(AmqpField field, int indentSize,\n-                                               int tabSize, boolean nextFlag)\n-    {\n-        StringBuffer sb = new StringBuffer();\n-        Iterator<String> dItr = field.getDomainMap().keySet().iterator();\n-        int domainCntr = 0;\n-        while (dItr.hasNext())\n-        {\n-            dItr.next();\n-            sb.append(Utils.createSpaces(indentSize) + \"this.\" + field.getName() + \"_\" + domainCntr +\n-                      \" = \" + field.getName() + \"_\" + (domainCntr++) + \";\" + CR);\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generateMbFieldSize(String domainType, String fieldName,\n-                                         int ordinal, int indentSize, int tabSize)\n-    {\n-        StringBuffer sb = new StringBuffer();\n-        sb.append(Utils.createSpaces(indentSize) + \"size += \" +\n-                  typeMap.get(domainType).size.replaceAll(\"#\", fieldName) +\n-                  \"; // \" + fieldName + \": \" + domainType + CR);\n-        return sb.toString();\n-    }\n-\n-    protected String generateMbBitArrayFieldSize(List<String> bitFieldList,\n-                                                 int ordinal, int indentSize, int tabSize)\n-    {\n-        StringBuffer sb = new StringBuffer();\n-        int numBytes = ((bitFieldList.size() - 1) / 8) + 1;\n-        String comment = bitFieldList.size() == 1 ?\n-                         bitFieldList.get(0) + \": bit\" :\n-                         \"Combinded bits: \" + bitFieldList;\n-        sb.append(Utils.createSpaces(indentSize) + \"size += \" +\n-                  typeMap.get(\"bit\").size.replaceAll(\"~\", String.valueOf(numBytes)) +\n-                  \"; // \" + comment + CR);\n-        return sb.toString();\n-    }\n-\n-    protected String generateMbFieldEncode(String domain, String fieldName,\n-                                           int ordinal, int indentSize, int tabSize)\n-    {\n-        StringBuffer sb = new StringBuffer();\n-        sb.append(Utils.createSpaces(indentSize) +\n-                  typeMap.get(domain).encodeExpression.replaceAll(\"#\", fieldName) +\n-                  \"; // \" + fieldName + \": \" + domain + CR);\n-        return sb.toString();\n-    }\n-\n-    protected String generateMbBitFieldEncode(List<String> bitFieldList,\n-                                              int ordinal, int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-\n-        StringBuilder sb = new StringBuilder();\n-        int i = 0;\n-        while (i < bitFieldList.size())\n-        {\n-\n-            StringBuilder line = new StringBuilder();\n-\n-            for (int j = 0; i < bitFieldList.size() && j < 8; i++, j++)\n-            {\n-                if (j != 0)\n-                {\n-                    line.append(\", \");\n-                }\n-                line.append(bitFieldList.get(i));\n-            }\n-\n-            sb.append(indent +\n-                      typeMap.get(\"bit\").encodeExpression.replaceAll(\"#\", line.toString()) + \";\" + CR);\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generateMbFieldDecode(String domain, String fieldName,\n-                                           int ordinal, int indentSize, int tabSize)\n-    {\n-        StringBuffer sb = new StringBuffer();\n-        sb.append(Utils.createSpaces(indentSize) +\n-                  typeMap.get(domain).decodeExpression.replaceAll(\"#\", fieldName) +\n-                  \"; // \" + fieldName + \": \" + domain + CR);\n-        return sb.toString();\n-    }\n-\n-    protected String generateMbBitFieldDecode(List<String> bitFieldList,\n-                                              int ordinal, int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-\n-        StringBuilder sb = new StringBuilder(indent);\n-        sb.append(\"byte packedValue;\");\n-        sb.append(CR);\n-\n-        // RG HERE!\n-\n-        int i = 0;\n-        while (i < bitFieldList.size())\n-        {\n-            sb.append(indent + \"packedValue = EncodingUtils.readByte(buffer);\" + CR);\n-\n-            for (int j = 0; i < bitFieldList.size() && j < 8; i++, j++)\n-            {\n-                sb.append(indent + bitFieldList.get(i) + \" = ( packedValue & (byte) (1 << \" + j + \") ) != 0;\" + CR);\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generateMbFieldToString(String domain, String fieldName,\n-                                             int ordinal, int indentSize, int tabSize)\n-    {\n-        StringBuffer sb = new StringBuffer();\n-        sb.append(Utils.createSpaces(indentSize) +\n-                  \"buf.append(\\\"  \" + fieldName + \": \\\" + \" + fieldName + \");\" + CR);\n-        return sb.toString();\n-    }\n-\n-    protected String generateMbBitFieldToString(List<String> bitFieldList,\n-                                                int ordinal, int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-        for (int i = 0; i < bitFieldList.size(); i++)\n-        {\n-            String bitFieldName = bitFieldList.get(i);\n-            sb.append(indent + \"buf.append(\\\"  \" + bitFieldName + \": \\\" + \" + bitFieldName +\n-                      \");\" + CR);\n-        }\n-        return sb.toString();\n-    }\n-\n-    // Methods for PropertyContentHeader classes\n-\n-    protected String generatePchClearMethod(String codeType, AmqpField field,\n-                                            AmqpVersionSet versionSet, int indentSize, int tabSize, boolean nextFlag)\n-    {\n-        // This is one case where the ordinal info is the only significant factor,\n-        // the domain info plays no part. Defer to the mangled version; the code would be\n-        // identical anyway...\n-        return generatePchMangledClearMethod(field, indentSize, tabSize, nextFlag);\n-    }\n-\n-    protected String generatePchMangledClearMethod(AmqpField field, int indentSize,\n-                                                   int tabSize, boolean nextFlag)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        StringBuffer sb = new StringBuffer();\n-        sb.append(indent + \"public void clear\" + Utils.firstUpper(field.getName()) +\n-                  \"()\" + CR);\n-        sb.append(indent + \"{\" + CR);\n-\n-        // If there is more than one ordinal for this field or the ordinal does not\n-        // apply to all known versions, then we need to generate version checks so\n-        // we know which fieldProperty to clear.\n-        if (field.getOrdinalMap().size() == 1 &&\n-            field.getOrdinalMap().get(field.getOrdinalMap().firstKey()).size() == field.getVersionSet().size())\n-        {\n-            int ordinal = field.getOrdinalMap().firstKey();\n-            sb.append(indent + tab + \"clearEncodedForm();\" + CR);\n-            sb.append(indent + tab + \"propertyFlags[\" + ordinal + \"] = false;\" + CR);\n-        }\n-        else\n-        {\n-            Iterator<Integer> oItr = field.getOrdinalMap().keySet().iterator();\n-            while (oItr.hasNext())\n-            {\n-                int ordinal = oItr.next();\n-                AmqpVersionSet versionSet = field.getOrdinalMap().get(ordinal);\n-                sb.append(indent + tab);\n-                if (ordinal != field.getOrdinalMap().firstKey())\n-                {\n-                    sb.append(\"else \");\n-                }\n-                sb.append(\"if (\");\n-                sb.append(generateVersionCheck(versionSet));\n-                sb.append(\")\" + CR);\n-                sb.append(indent + tab + \"{\" + CR);\n-                sb.append(indent + tab + tab + \"clearEncodedForm();\" + CR);\n-                sb.append(indent + tab + tab + \"propertyFlags[\" + ordinal + \"] = false;\" + CR);\n-                sb.append(indent + tab + \"}\" + CR);\n-            }\n-        }\n-        sb.append(indent + \"}\" + CR);\n-        sb.append(CR);\n-        return sb.toString();\n-    }\n-\n-    protected String generatePchGetMethod(String codeType, AmqpField field,\n-                                          AmqpVersionSet versionSet, int indentSize, int tabSize, boolean nextFlag)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        StringBuffer sb = new StringBuffer(indent + \"public \" + codeType + \" get\" +\n-                                           Utils.firstUpper(field.getName()) + \"()\" + CR);\n-        sb.append(indent + \"{\" + CR);\n-        sb.append(indent + tab + \"decodeIfNecessary();\" + CR);\n-        sb.append(indent + tab + \"return \" + field.getName() + \";\" + CR);\n-        sb.append(indent + \"}\" + CR);\n-        sb.append(CR);\n-        return sb.toString();\n-    }\n-\n-    protected String generatePchMangledGetMethod(AmqpField field, int indentSize,\n-                                                 int tabSize, boolean nextFlag)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        StringBuffer sb = new StringBuffer(indent + \"public <T> T get\" +\n-                                           Utils.firstUpper(field.getName()) +\n-                                           \"(Class<T> classObj) throws AMQProtocolVersionException\" + CR);\n-        sb.append(indent + \"{\" + CR);\n-        Iterator<String> dItr = field.getDomainMap().keySet().iterator();\n-        int domainCntr = 0;\n-        while (dItr.hasNext())\n-        {\n-            String domainName = dItr.next();\n-            AmqpVersionSet versionSet = field.getDomainMap().get(domainName);\n-            String codeType = getGeneratedType(domainName, versionSet.first());\n-            sb.append(indent + tab + \"if (classObj.equals(\" + codeType +\n-                      \".class)) // AMQP Version(s): \" + versionSet + CR);\n-            sb.append(indent + tab + \"{\" + CR);\n-            sb.append(indent + tab + tab + \"decodeIfNecessary();\" + CR);\n-            sb.append(indent + tab + tab + \"return (T)(Object)\" + field.getName() + \"_\" +\n-                      (domainCntr++) + \";\" + CR);\n-            sb.append(indent + tab + \"}\" + CR);\n-        }\n-        sb.append(indent + tab +\n-                  \"throw new AMQProtocolVersionException(\\\"None of the AMQP versions defines \\\" +\" +\n-                  CR + \"            \\\"field \\\\\\\"\" + field.getName() +\n-                  \"\\\\\\\" as domain \\\\\\\"\\\" + classObj.getName() + \\\"\\\\\\\".\\\");\" + CR);\n-        sb.append(indent + \"}\" + CR);\n-        sb.append(CR);\n-        return sb.toString();\n-    }\n-\n-    protected String generatePchSetMethod(String codeType, AmqpField field,\n-                                          AmqpVersionSet versionSet, int indentSize, int tabSize, boolean nextFlag)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        StringBuffer sb = new StringBuffer();\n-        sb.append(indent + \"public void set\" + Utils.firstUpper(field.getName()) +\n-                  \"(\" + codeType + \" \" + field.getName() + \")\" + CR);\n-        sb.append(indent + \"{\" + CR);\n-\n-        // If there is more than one ordinal for this field or the ordinal does not\n-        // apply to all known versions, then we need to generate version checks so\n-        // we know which fieldProperty to clear.\n-        if (field.getOrdinalMap().size() == 1 &&\n-            field.getOrdinalMap().get(field.getOrdinalMap().firstKey()).size() == field.getVersionSet().size())\n-        {\n-            int ordinal = field.getOrdinalMap().firstKey();\n-            sb.append(indent + tab + \"clearEncodedForm();\" + CR);\n-            sb.append(indent + tab + \"propertyFlags[\" + ordinal + \"] = true;\" + CR);\n-            sb.append(indent + tab + \"this.\" + field.getName() + \" = \" + field.getName() + \";\" + CR);\n-        }\n-        else\n-        {\n-            Iterator<Integer> oItr = field.getOrdinalMap().keySet().iterator();\n-            while (oItr.hasNext())\n-            {\n-                int ordinal = oItr.next();\n-                AmqpVersionSet oVersionSet = field.getOrdinalMap().get(ordinal);\n-                sb.append(indent + tab);\n-                if (ordinal != field.getOrdinalMap().firstKey())\n-                {\n-                    sb.append(\"else \");\n-                }\n-                sb.append(\"if (\");\n-                sb.append(generateVersionCheck(oVersionSet));\n-                sb.append(\")\" + CR);\n-                sb.append(indent + tab + \"{\" + CR);\n-                sb.append(indent + tab + tab + \"clearEncodedForm();\" + CR);\n-                sb.append(indent + tab + tab + \"propertyFlags[\" + ordinal + \"] = true;\" + CR);\n-                sb.append(indent + tab + tab + \"this.\" + field.getName() + \" = \" + field.getName() + \";\" + CR);\n-                sb.append(indent + tab + \"}\" + CR);\n-            }\n-        }\n-        sb.append(indent + \"}\" + CR);\n-        sb.append(CR);\n-        return sb.toString();\n-    }\n-\n-    protected String generatePchMangledSetMethod(AmqpField field, int indentSize,\n-                                                 int tabSize, boolean nextFlag)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        StringBuffer sb = new StringBuffer();\n-\n-        Iterator<String> dItr = field.getDomainMap().keySet().iterator();\n-        int domainCntr = 0;\n-        while (dItr.hasNext())\n-        {\n-            String domainName = dItr.next();\n-            AmqpVersionSet versionSet = field.getDomainMap().get(domainName);\n-            String codeType = getGeneratedType(domainName, versionSet.first());\n-\n-            // Find ordinal with matching version\n-            AmqpVersionSet commonVersionSet = new AmqpVersionSet();\n-            Iterator<Integer> oItr = field.getOrdinalMap().keySet().iterator();\n-            while (oItr.hasNext())\n-            {\n-                int ordinal = oItr.next();\n-                AmqpVersionSet oVersionSet = field.getOrdinalMap().get(ordinal);\n-                Iterator<AmqpVersion> vItr = oVersionSet.iterator();\n-                boolean first = true;\n-                while (vItr.hasNext())\n-                {\n-                    AmqpVersion thisVersion = vItr.next();\n-                    if (versionSet.contains(thisVersion))\n-                    {\n-                        commonVersionSet.add(thisVersion);\n-                    }\n-                }\n-                if (!commonVersionSet.isEmpty())\n-                {\n-                    sb.append(indent + \"public void set\" + Utils.firstUpper(field.getName()) +\n-                              \"(\" + codeType + \" \" + field.getName() + \")\" + CR);\n-                    sb.append(indent + \"{\" + CR);\n-                    sb.append(indent + tab);\n-                    if (!first)\n-                    {\n-                        sb.append(\"else \");\n-                    }\n-                    sb.append(\"if (\");\n-                    sb.append(generateVersionCheck(commonVersionSet));\n-                    sb.append(\")\" + CR);\n-                    sb.append(indent + tab + \"{\" + CR);\n-                    sb.append(indent + tab + tab + \"clearEncodedForm();\" + CR);\n-                    sb.append(indent + tab + tab + \"propertyFlags[\" + ordinal + \"] = true;\" + CR);\n-                    sb.append(indent + tab + tab + \"this.\" + field.getName() + \"_\" + (domainCntr++) +\n-                              \" = \" + field.getName() + \";\" + CR);\n-                    sb.append(indent + tab + \"}\" + CR);\n-                    sb.append(indent + \"}\" + CR);\n-                    sb.append(CR);\n-                    first = false;\n-                }\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected String generatePchFieldSize(String domainType, String fieldName,\n-                                          int ordinal, int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer(indent + \"if (propertyFlags[\" + ordinal + \"]) // \" +\n-                                           fieldName + \": \" + domainType + CR);\n-        sb.append(indent + Utils.createSpaces(tabSize) + \"size += \" +\n-                  typeMap.get(domainType).size.replaceAll(\"#\", fieldName) + \";\" + CR);\n-        sb.append(CR);\n-        return sb.toString();\n-    }\n-\n-    protected String generatePchBitArrayFieldSize(List<String> bitFieldList,\n-                                                  int ordinal, int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        String comment = bitFieldList.size() == 1 ?\n-                         bitFieldList.get(0) + \": bit\" :\n-                         \"Combinded bits: \" + bitFieldList;\n-        StringBuffer sb = new StringBuffer();\n-\n-        if (bitFieldList.size() == 1) // single bit\n-        {\n-            sb.append(indent + \"if (propertyFlags[\" + (ordinal - 1) + \"]) // \" + comment + CR);\n-            sb.append(indent + tab + \"size += \" +\n-                      typeMap.get(\"bit\").size.replaceAll(\"~\", \"1\") + \";\" + CR);\n-        }\n-        else // multiple bits - up to 8 are combined into one byte\n-        {\n-            String bitCntrName = \"bitCntr_\" + ordinal;\n-            int startOrdinal = ordinal - bitFieldList.size();\n-            sb.append(indent + \"// \" + comment + CR);\n-            sb.append(indent + \"int \" + bitCntrName + \" = 0;\" + CR);\n-            sb.append(indent + \"for (int i=\" + startOrdinal + \"; i<\" + ordinal + \"; i++)\" + CR);\n-            sb.append(indent + \"{\" + CR);\n-            sb.append(indent + tab + \"if (propertyFlags[i])\" + CR);\n-            sb.append(indent + tab + tab + bitCntrName + \"++;\" + CR);\n-            sb.append(indent + \"}\" + CR);\n-            sb.append(indent + \"size += \" +\n-                      typeMap.get(\"bit\").size.replaceAll(\"~\", bitCntrName +\n-                                                              \" > 0 ? ((\" + bitCntrName + \" - 1) / 8) + 1 : 0\") + \";\" + CR);\n-        }\n-        sb.append(CR);\n-        return sb.toString();\n-    }\n-\n-    protected String generatePchFieldEncode(String domainType, String fieldName,\n-                                            int ordinal, int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-        sb.append(indent + \"if (propertyFlags[\" + ordinal + \"]) // \" + fieldName + \": \" +\n-                  domainType + CR);\n-        sb.append(indent + Utils.createSpaces(tabSize) +\n-                  typeMap.get(domainType).encodeExpression.replaceAll(\"#\", fieldName) + \";\" + CR);\n-        sb.append(CR);\n-        return sb.toString();\n-    }\n-\n-    protected String generatePchBitFieldEncode(List<String> bitFieldList,\n-                                               int ordinal, int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        String comment = bitFieldList.size() == 1 ?\n-                         bitFieldList.get(0) + \": bit\" :\n-                         \"Combinded bits: \" + bitFieldList;\n-        StringBuffer sb = new StringBuffer();\n-\n-        if (bitFieldList.size() == 1) // single bit\n-        {\n-            sb.append(indent + \"if (propertyFlags[\" + (ordinal - 1) + \"]) // \" +\n-                      bitFieldList.get(0) + \": bit\" + CR);\n-            sb.append(indent + tab + typeMap.get(\"bit\").encodeExpression.replaceAll(\"#\",\n-                                                                                    \"new boolean[] {\" + bitFieldList.get(0) + \"}\") + \";\" + CR);\n-        }\n-        else // multiple bits - up to 8 are combined into one byte\n-        {\n-            int startOrdinal = ordinal - bitFieldList.size();\n-            String bitCntrName = \"bitCntr\" + startOrdinal;\n-            sb.append(indent + \"// \" + comment + CR);\n-            sb.append(indent + \"int \" + bitCntrName + \" = 0;\" + CR);\n-            sb.append(indent + \"for (int i=\" + startOrdinal + \"; i<=\" + (ordinal - 1) + \"; i++)\" + CR);\n-            sb.append(indent + \"{\" + CR);\n-            sb.append(indent + tab + \"if (propertyFlags[i])\" + CR);\n-            sb.append(indent + tab + tab + bitCntrName + \"++;\" + CR);\n-            sb.append(indent + \"}\" + CR);\n-            sb.append(indent + \"if (\" + bitCntrName + \" > 0) // Are any of the property bits set?\" + CR);\n-            sb.append(indent + \"{\" + CR);\n-            sb.append(indent + tab + \"boolean[] fullBitArray = new boolean[] { \");\n-            for (int i = 0; i < bitFieldList.size(); i++)\n-            {\n-                if (i != 0)\n-                {\n-                    sb.append(\", \");\n-                }\n-                sb.append(bitFieldList.get(i));\n-            }\n-            sb.append(\" };\" + CR);\n-            sb.append(indent + tab + \"boolean[] flaggedBitArray = new boolean[\" + bitCntrName +\n-                      \"];\" + CR);\n-            sb.append(indent + tab + bitCntrName + \" = 0;\" + CR);\n-            sb.append(indent + tab + \"for (int i=\" + startOrdinal + \"; i<=\" + (ordinal - 1) +\n-                      \"; i++)\" + CR);\n-            sb.append(indent + tab + \"{\" + CR);\n-            sb.append(indent + tab + tab + \"if (propertyFlags[i])\" + CR);\n-            sb.append(indent + tab + tab + tab + \"flaggedBitArray[\" + bitCntrName +\n-                      \"++] = fullBitArray[i];\" + CR);\n-            sb.append(indent + tab + \"}\" + CR);\n-            sb.append(indent + tab + typeMap.get(\"bit\").encodeExpression.replaceAll(\"#\",\n-                                                                                    \"flaggedBitArray\") + \";\" + CR);\n-            sb.append(indent + \"}\" + CR);\n-        }\n-        sb.append(CR);\n-        return sb.toString();\n-    }\n-\n-    protected String generatePchFieldDecode(String domainType, String fieldName,\n-                                            int ordinal, int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-        sb.append(indent + \"if (propertyFlags[\" + ordinal + \"]) // \" + fieldName + \": \" +\n-                  domainType + CR);\n-        sb.append(indent + Utils.createSpaces(tabSize) +\n-                  typeMap.get(domainType).decodeExpression.replaceAll(\"#\", fieldName) + \";\" + CR);\n-        sb.append(CR);\n-        return sb.toString();\n-    }\n-\n-    protected String generatePchBitFieldDecode(List<String> bitFieldList,\n-                                               int ordinal, int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        String comment = bitFieldList.size() == 1 ?\n-                         bitFieldList.get(0) + \": bit\" :\n-                         \"Combinded bits: \" + bitFieldList;\n-        StringBuffer sb = new StringBuffer();\n-\n-        if (bitFieldList.size() == 1) // single bit\n-        {\n-            sb.append(indent + \"if (propertyFlags[\" + (ordinal - 1) + \"]) // \" +\n-                      bitFieldList.get(0) + \": bit\" + CR);\n-            sb.append(indent + \"{\" + CR);\n-            sb.append(indent + tab + typeMap.get(\"bit\").decodeExpression.replaceAll(\"#\",\n-                                                                                    \"boolean[] flaggedBitArray\") + \";\" + CR);\n-            sb.append(indent + tab + bitFieldList.get(0) + \" = flaggedBitArray[0];\" + CR);\n-            sb.append(indent + \"}\" + CR);\n-        }\n-        else // multiple bits - up to 8 are combined into one byte\n-        {\n-            int startOrdinal = ordinal - bitFieldList.size();\n-            String bitCntr = \"bitCntr\" + startOrdinal;\n-            sb.append(indent + \"// \" + comment + CR);\n-            sb.append(indent + \"int \" + bitCntr + \" = 0;\" + CR);\n-            sb.append(indent + \"for (int i=\" + startOrdinal + \"; i<=\" + (ordinal - 1) + \"; i++)\" + CR);\n-            sb.append(indent + \"{\" + CR);\n-            sb.append(indent + tab + \"if (propertyFlags[i])\" + CR);\n-            sb.append(indent + tab + tab + bitCntr + \"++;\" + CR);\n-            sb.append(indent + \"}\" + CR);\n-            sb.append(indent + \"if (\" + bitCntr + \" > 0) // Are any of the property bits set?\" + CR);\n-            sb.append(indent + \"{\" + CR);\n-            sb.append(indent + tab + typeMap.get(\"bit\").decodeExpression.replaceAll(\"#\",\n-                                                                                    \"boolean[] flaggedBitArray\") + \";\" + CR);\n-            sb.append(indent + tab + bitCntr + \" = 0;\" + CR);\n-            for (int i = 0; i < bitFieldList.size(); i++)\n-            {\n-                sb.append(indent + tab + \"if (propertyFlags[\" + (startOrdinal + i) + \"])\" + CR);\n-                sb.append(indent + tab + tab + bitFieldList.get(i) + \" = flaggedBitArray[\" +\n-                          bitCntr + \"++];\" + CR);\n-            }\n-            sb.append(indent + \"}\" + CR);\n-        }\n-\n-        sb.append(CR);\n-        return sb.toString();\n-    }\n-\n-    protected String generatePchGetPropertyFlags(String domainType, String fieldName,\n-                                                 int ordinal, int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        StringBuffer sb = new StringBuffer();\n-        int word = ordinal / 15;\n-        int bit = 15 - (ordinal % 15);\n-        sb.append(indent + \"if (propertyFlags[\" + ordinal + \"]) // \" + fieldName + \": \" +\n-                  domainType + CR);\n-        sb.append(indent + tab + \"compactPropertyFlags[\" + word + \"] |= (1 << \" +\n-                  bit + \");\" + CR);\n-        sb.append(CR);\n-        return sb.toString();\n-    }\n-\n-    protected String generatePchBitGetPropertyFlags(List<String> bitFieldList,\n-                                                    int ordinal, int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        StringBuffer sb = new StringBuffer();\n-        int startOrdinal = ordinal - bitFieldList.size();\n-\n-        for (int i = 0; i < bitFieldList.size(); i++)\n-        {\n-            int thisOrdinal = startOrdinal + i;\n-            int word = thisOrdinal / 15;\n-            int bit = 15 - (thisOrdinal % 15);\n-            sb.append(indent + \"if (propertyFlags[\" + thisOrdinal + \"])\" + CR);\n-            sb.append(indent + tab + \"compactPropertyFlags[\" + word +\n-                      \"] |= (1 << \" + bit + \");\" + CR);\n-        }\n-\n-        sb.append(CR);\n-        return sb.toString();\n-    }\n-\n-    protected String generatePchSetPropertyFlags(String domainType, String fieldName,\n-                                                 int ordinal, int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-        int word = ordinal / 15;\n-        int bit = 15 - (ordinal % 15);\n-        sb.append(indent + \"propertyFlags[\" + ordinal + \"] = (compactPropertyFlags[\" +\n-                  word + \"] & (1 << \" + bit + \")) > 0;\" + CR);\n-        return sb.toString();\n-    }\n-\n-    protected String generatePchBitSetPropertyFlags(List<String> bitFieldList,\n-                                                    int ordinal, int indentSize, int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        StringBuffer sb = new StringBuffer();\n-        int startOrdinal = ordinal - bitFieldList.size();\n-\n-        for (int i = 0; i < bitFieldList.size(); i++)\n-        {\n-            int thisOrdinal = startOrdinal + i;\n-            int word = thisOrdinal / 15;\n-            int bit = 15 - (thisOrdinal % 15);\n-            sb.append(indent + \"propertyFlags[\" + thisOrdinal + \"] = (compactPropertyFlags[\" +\n-                      word + \"] & (1 << \" + bit + \")) > 0;\" + CR);\n-        }\n-        return sb.toString();\n-    }\n-\n-    private String generatePchPropertyFlagsDeclare()\n-    {\n-        return \"private boolean[] propertyFlags;\";\n-    }\n-\n-    private String generatePchPropertyFlagsInitializer(int totNumFields)\n-    {\n-        return \"propertyFlags = new boolean[\" + totNumFields + \"];\";\n-    }\n-\n-    private String generatePchCompactPropertyFlagsInitializer(AmqpClass thisClass, int indentSize,\n-                                                              int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        StringBuffer sb = new StringBuffer();\n-        Iterator<AmqpVersion> vItr = thisClass.getVersionSet().iterator();\n-        while (vItr.hasNext())\n-        {\n-            AmqpVersion version = vItr.next();\n-            int numBytes = ((thisClass.getFieldMap().getNumFields(version) - 1) / 15) + 1;\n-\n-            sb.append(indent);\n-            if (!version.equals(thisClass.getVersionSet().first()))\n-            {\n-                sb.append(\"else \");\n-            }\n-            sb.append(\"if ( major == \" + version.getMajor() + \" && minor == \" +\n-                      version.getMinor() + \" )\" + CR);\n-            sb.append(indent + tab + \"compactPropertyFlags = new int[] { \");\n-            for (int i = 0; i < numBytes; i++)\n-            {\n-                if (i != 0)\n-                {\n-                    sb.append(\", \");\n-                }\n-                sb.append(i < numBytes - 1 ? \"1\" : \"0\"); // Set the \"continue\" flag where required\n-            }\n-            sb.append(\" };\" + CR);\n-        }\n-        return sb.toString();\n-    }\n-\n-    private String generatePchCompactPropertyFlagsCheck(AmqpClass thisClass, int indentSize,\n-                                                        int tabSize)\n-    {\n-        String indent = Utils.createSpaces(indentSize);\n-        String tab = Utils.createSpaces(tabSize);\n-        StringBuffer sb = new StringBuffer();\n-        Iterator<AmqpVersion> vItr = thisClass.getVersionSet().iterator();\n-        while (vItr.hasNext())\n-        {\n-            AmqpVersion version = vItr.next();\n-            int numFields = thisClass.getFieldMap().getNumFields(version);\n-            int numBytes = ((numFields - 1) / 15) + 1;\n-\n-            sb.append(indent);\n-            if (!version.equals(thisClass.getVersionSet().first()))\n-            {\n-                sb.append(\"else \");\n-            }\n-            sb.append(\"if ( major == \" + version.getMajor() + \" && minor == \" +\n-                      version.getMinor() + \" && compactPropertyFlags.length != \" + numBytes + \" )\" + CR);\n-            sb.append(indent + tab +\n-                      \"throw new AMQProtocolVersionException(\\\"Property flag array size mismatch:\\\" +\" + CR);\n-            sb.append(indent + tab + tab + \"\\\"(Size found: \\\" + compactPropertyFlags.length +\" + CR);\n-            sb.append(indent + tab + tab + \"\\\") Version \" + version + \" has \" + numFields +\n-                      \" fields which requires an int array of size \" + numBytes + \".\\\");\" + CR);\n-        }\n-        return sb.toString();\n-    }\n-\n-    private String generateVersionCheck(AmqpVersionSet v)\n-    {\n-        StringBuffer sb = new StringBuffer();\n-        AmqpVersion[] versionArray = new AmqpVersion[v.size()];\n-        v.toArray(versionArray);\n-        for (int i = 0; i < versionArray.length; i++)\n-        {\n-            if (i != 0)\n-            {\n-                sb.append(\" || \");\n-            }\n-            if (versionArray.length > 1)\n-            {\n-                sb.append(\"(\");\n-            }\n-            sb.append(\"major == (byte)\" + versionArray[i].getMajor() + \" && minor == (byte)\" +\n-                      versionArray[i].getMinor());\n-            if (versionArray.length > 1)\n-            {\n-                sb.append(\")\");\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    private String camelCaseName(String name, boolean upperFirstFlag)\n-    {\n-        StringBuffer ccn = new StringBuffer();\n-        String[] toks = name.split(\"[-_.\\\\ ]\");\n-        for (int i = 0; i < toks.length; i++)\n-        {\n-            StringBuffer b = new StringBuffer(toks[i]);\n-            if (upperFirstFlag || i > 0)\n-            {\n-                b.setCharAt(0, Character.toUpperCase(toks[i].charAt(0)));\n-            }\n-            ccn.append(b);\n-        }\n-        return ccn.toString();\n-    }\n-\n-\n-    private String upperCaseName(String name)\n-    {\n-        StringBuffer ccn = new StringBuffer();\n-        String[] toks = name.split(\"[-_.\\\\ ]\");\n-        for (int i = 0; i < toks.length; i++)\n-        {\n-            if (i != 0)\n-            {\n-                ccn.append('_');\n-            }\n-            ccn.append(toks[i].toUpperCase());\n-\n-\n-        }\n-        return ccn.toString();\n-    }\n-\n-\n-    public static Factory<JavaGenerator> _factoryInstance = new Factory<JavaGenerator>()\n-    {\n-\n-        public JavaGenerator newInstance()\n-        {\n-            return new JavaGenerator();\n-        }\n-    };\n-\n-    public static Factory<JavaGenerator> getFactory()\n-    {\n-        return _factoryInstance;\n-    }\n-\n-\n-    void processModelTemplate(NamedTemplate template, AmqpVersion version)\n-    {\n-        //To change body of implemented methods use File | Settings | File Templates.\n-    }\n-\n-    void processClassTemplate(NamedTemplate template, AmqpClass amqpClass, AmqpVersion version)\n-    {\n-        //To change body of implemented methods use File | Settings | File Templates.\n-    }\n-\n-    void processMethodTemplate(NamedTemplate template, AmqpClass amqpClass, AmqpMethod amqpMethod, AmqpVersion version)\n-    {\n-        //To change body of implemented methods use File | Settings | File Templates.\n-    }\n-\n-    void processFieldTemplate(NamedTemplate template, AmqpClass amqpClass, AmqpMethod amqpMethod, AmqpField amqpField, AmqpVersion version)\n-    {\n-        //To change body of implemented methods use File | Settings | File Templates.\n-    }\n-\n-\n-}"
        },
        {
            "sha": "5e692d86e719aab3972f02e631a7418d83df529b",
            "filename": "common/gentools/src/org/apache/qpid/gentools/LanguageConverter.java",
            "status": "removed",
            "additions": 0,
            "deletions": 42,
            "changes": 42,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FLanguageConverter.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FLanguageConverter.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FLanguageConverter.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,42 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-public interface LanguageConverter\n-{\n-\n-//\tpublic AmqpDomainMap getDomainMap();\n-//    public AmqpConstantSet getConstantSet();\n-//\tpublic AmqpModel getModel();\n-\n-    //\n-    public String prepareClassName(String className);\n-\n-    public String prepareMethodName(String methodName);\n-\n-    public String prepareDomainName(String domainName);\n-\n-    public String getDomainType(String domainName, AmqpVersion version);\n-\n-    public String getGeneratedType(String domainName, AmqpVersion version);\n-\n-    public String prepareConstantName(String constantName);\n-}"
        },
        {
            "sha": "c0584f7ca71755e9ab4953070d4803c420db99a8",
            "filename": "common/gentools/src/org/apache/qpid/gentools/Main.java",
            "status": "removed",
            "additions": 0,
            "deletions": 301,
            "changes": 301,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FMain.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FMain.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FMain.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,301 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import org.apache.velocity.app.Velocity;\n-import org.w3c.dom.Document;\n-import org.w3c.dom.Node;\n-import org.xml.sax.SAXException;\n-\n-import javax.xml.parsers.DocumentBuilder;\n-import javax.xml.parsers.DocumentBuilderFactory;\n-import javax.xml.parsers.ParserConfigurationException;\n-import java.io.File;\n-import java.io.IOException;\n-import java.lang.reflect.InvocationTargetException;\n-import java.util.ArrayList;\n-import java.util.Properties;\n-\n-public class Main\n-{\n-    private static final String DEFAULT_OUTPUT_DIR = \"..\" + Utils.FILE_SEPARATOR + \"gen\";\n-    private static final String DEFAULT_TEMPLATE_DIR_BASE = \"..\" + Utils.FILE_SEPARATOR;\n-\n-    private enum GeneratedLanguage\n-    {\n-        CPP(\".cpp\", CppGenerator.getFactory()),\n-        DOTNET(\".net\", DotnetGenerator.getFactory()),\n-        JAVA(\".java\", JavaGenerator.getFactory());\n-\n-        private final String _suffix;\n-        private final Generator.Factory _factory;\n-\n-\n-        private final String _defaultTemplateDirectory;\n-\n-        GeneratedLanguage(String suffix, Generator.Factory factory)\n-        {\n-            _suffix = suffix;\n-            _factory = factory;\n-            _defaultTemplateDirectory = DEFAULT_TEMPLATE_DIR_BASE + \"templ\" + _suffix;\n-        }\n-\n-        public String getSuffix()\n-        {\n-            return _suffix;\n-        }\n-\n-        public Generator newGenerator()\n-        {\n-            return _factory.newInstance();\n-        }\n-\n-        public String getDefaultTemplateDirectory()\n-        {\n-            return _defaultTemplateDirectory;\n-        }\n-    }\n-\n-    private Generator generator;\n-\n-    private String outDir;\n-    private String tmplDir;\n-    private GeneratedLanguage _generatorLang;\n-    private ArrayList<String> xmlFiles;\n-\n-    public Main()\n-    {\n-        xmlFiles = new ArrayList<String>();\n-    }\n-\n-    public void run(String[] args)\n-            throws Exception,\n-                   SAXException,\n-                   AmqpParseException,\n-                   AmqpTypeMappingException,\n-                   AmqpTemplateException,\n-                   TargetDirectoryException,\n-                   IllegalAccessException,\n-                   InvocationTargetException, ParserConfigurationException\n-    {\n-\n-        // 0. Initialize\n-        outDir = DEFAULT_OUTPUT_DIR;\n-        tmplDir = null;\n-        _generatorLang = GeneratedLanguage.CPP; // Default generation language\n-        xmlFiles.clear();\n-        processArgs(args);\n-\n-        if (tmplDir == null)\n-        {\n-            tmplDir = _generatorLang.getDefaultTemplateDirectory();\n-        }\n-\n-\n-        generator = _generatorLang.newGenerator();\n-        generator.setTemplateDirectory(tmplDir);\n-        generator.setOutputDirectory(outDir);\n-\n-        // 1. Suck in all the XML spec files provided on the command line\n-        analyzeXML();\n-\n-        Properties p = new Properties();\n-        p.setProperty(\"file.resource.loader.path\", tmplDir);\n-\n-        Velocity.init(p);\n-\n-        // 2. Load up all templates\n-        generator.initializeTemplates();\n-\n-        // 3. Generate output\n-        generator.generate();\n-\n-        System.out.println(\"Files generated: \" + generator.getNumberGeneratedFiles());\n-        System.out.println(\"Done.\");\n-    }\n-\n-    private void processArgs(String[] args)\n-    {\n-        // Crude but simple...\n-        for (int i = 0; i < args.length; i++)\n-        {\n-            String arg = args[i];\n-            if (arg.charAt(0) == '-')\n-            {\n-                switch (arg.charAt(1))\n-                {\n-                    case'c':\n-                    case'C':\n-                        _generatorLang = GeneratedLanguage.CPP;\n-                        break;\n-                    case'j':\n-                    case'J':\n-                        _generatorLang = GeneratedLanguage.JAVA;\n-                        break;\n-                    case'n':\n-                    case'N':\n-                        _generatorLang = GeneratedLanguage.DOTNET;\n-                        break;\n-                    case'o':\n-                    case'O':\n-                        if (++i < args.length)\n-                        {\n-                            outDir = args[i];\n-                        }\n-                        break;\n-                    case't':\n-                    case'T':\n-                        if (++i < args.length)\n-                        {\n-                            tmplDir = args[i];\n-                        }\n-                        break;\n-                }\n-            }\n-            else\n-            {\n-                xmlFiles.add(args[i]);\n-            }\n-        }\n-    }\n-\n-    private void analyzeXML()\n-            throws IOException, SAXException, AmqpParseException, AmqpTypeMappingException, ParserConfigurationException\n-    {\n-        DocumentBuilder docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n-\n-        System.out.println(\"XML files: \" + xmlFiles);\n-        for (String filename : xmlFiles)\n-        {\n-            File f = new File(filename);\n-            if (f.exists())\n-            {\n-                // 1a. Initialize dom\n-                System.out.print(\"  \\\"\" + filename + \"\\\":\");\n-                Document doc = docBuilder.parse(new File(filename));\n-                Node amqpNode = Utils.findChild(doc, Utils.ELEMENT_AMQP);\n-\n-                // 1b. Extract version (major and minor) from the XML file\n-                int major = Utils.getNamedIntegerAttribute(amqpNode, Utils.ATTRIBUTE_MAJOR);\n-                int minor = Utils.getNamedIntegerAttribute(amqpNode, Utils.ATTRIBUTE_MINOR);\n-                AmqpVersion version = new AmqpVersion(major, minor);\n-                System.out.println(\" Found version \" + version.toString() + \".\");\n-                generator.addVersion(version);\n-                generator.addFromNode(amqpNode, version);\n-\n-\n-            }\n-            else\n-            {\n-                System.err.println(\"ERROR: AMQP XML file \\\"\" + filename + \"\\\" not found.\");\n-            }\n-        }\n-// *** DEBUG INFO ***  Uncomment bits from this block to see lots of stuff....\n-//      System.out.println();\n-//      System.out.println(\"*** Debug output ***\");\n-//      System.out.println();\n-//      versionSet.print(System.out, 0, 2); // List of loaded versions\n-//      System.out.println();\n-//      constants.print(System.out, 0, 2); // List of constants\n-//      System.out.println();\n-//      domainMap.print(System.out, 0, 2); // List of domains\n-//      System.out.println();\n-//      model.print(System.out, 0, 2); // Internal version map model\n-//      System.out.println();\n-//      System.out.println(\"*** End debug output ***\");\n-//      System.out.println();        \n-    }\n-\n-    public static void main(String[] args)\n-    {\n-        int exitCode = 1;\n-        // TODO: This is a simple and klunky way of hangling command-line args, and could be improved upon.\n-        if (args.length < 2)\n-        {\n-            usage();\n-        }\n-        else\n-        {\n-            try\n-            {\n-                new Main().run(args);\n-                exitCode = 0;\n-            }\n-            catch (IOException e)\n-            {\n-                e.printStackTrace();\n-            }\n-            catch (ParserConfigurationException e)\n-            {\n-                e.printStackTrace();\n-            }\n-            catch (SAXException e)\n-            {\n-                e.printStackTrace();\n-            }\n-            catch (AmqpParseException e)\n-            {\n-                e.printStackTrace();\n-            }\n-            catch (AmqpTypeMappingException e)\n-            {\n-                e.printStackTrace();\n-            }\n-            catch (AmqpTemplateException e)\n-            {\n-                e.printStackTrace();\n-            }\n-            catch (TargetDirectoryException e)\n-            {\n-                e.printStackTrace();\n-            }\n-            catch (IllegalAccessException e)\n-            {\n-                e.printStackTrace();\n-            }\n-            catch (InvocationTargetException e)\n-            {\n-                e.printStackTrace();\n-            }\n-            catch (Exception e)\n-            {\n-                e.printStackTrace();\n-            }\n-        }\n-        System.exit(exitCode);\n-    }\n-\n-    public static void usage()\n-    {\n-        System.out.println(\"AMQP XML generator v.0.0\");\n-        System.out.println(\"Usage: Main -c|-j [-o outDir] [-t tmplDir] XMLfile [XMLfile ...]\");\n-        System.out.println(\"       where -c:         Generate C++.\");\n-        System.out.println(\"             -j:         Generate Java.\");\n-        System.out.println(\"             -n:         Generate .NET.\");\n-        System.out.println(\"             -o outDir:  Use outDir as the output dir (default=\\\"\" + DEFAULT_OUTPUT_DIR + \"\\\").\");\n-        System.out.println(\"             -t tmplDir: Find templates in tmplDir.\");\n-        System.out.println(\"                         Defaults: \\\"\" + GeneratedLanguage.CPP.getDefaultTemplateDirectory() + \"\\\" for C++;\");\n-        System.out.println(\"                                   \\\"\" + GeneratedLanguage.JAVA.getDefaultTemplateDirectory() + \"\\\" for java.;\");\n-        System.out.println(\"                                   \\\"\" + GeneratedLanguage.DOTNET.getDefaultTemplateDirectory() + \"\\\" for .NET.\");\n-        System.out.println(\"             XMLfile is a space-separated list of AMQP XML files to be parsed.\");\n-    }\n-\n-}"
        },
        {
            "sha": "ffeefed900b16b47918103578201b9d6511ccb61",
            "filename": "common/gentools/src/org/apache/qpid/gentools/MangledGenerateMethod.java",
            "status": "removed",
            "additions": 0,
            "deletions": 26,
            "changes": 26,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FMangledGenerateMethod.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FMangledGenerateMethod.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FMangledGenerateMethod.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,26 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-public interface MangledGenerateMethod\n-{\n-    String generate(AmqpField field, int indentSize, int tabSize, boolean notLast);\n-}"
        },
        {
            "sha": "f832da75ad47c38a6c97d07cf2ba845933716b98",
            "filename": "common/gentools/src/org/apache/qpid/gentools/NodeAware.java",
            "status": "removed",
            "additions": 0,
            "deletions": 47,
            "changes": 47,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FNodeAware.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FNodeAware.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FNodeAware.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,47 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import org.w3c.dom.Node;\n-\n-/**\n- * @author kpvdr\n- *         Interface allowing the addition of elements from a node in the\n- *         DOM of the AMQP specification. It is used by each of the model\n- *         elements in a recursive fashion to build the model.\n- */\n-public interface NodeAware\n-{\n-    /**\n-     * Add a model element from the current DOM node. All model elements must implement\n-     * this interface. If the node contains children that are also a part of the model,\n-     * then this method is called on new instances of those model elements.\n-     *\n-     * @param n Node from which the current model element is to be added.\n-     * @param o Ordinal value of the current model elemet.\n-     * @param v Verion of the DOM from which the node comes.\n-     * @throws AmqpParseException\n-     * @throws AmqpTypeMappingException\n-     * @returns true if a node was added, false if not\n-     */\n-    public boolean addFromNode(Node n, int o, AmqpVersion v)\n-            throws AmqpParseException, AmqpTypeMappingException;\n-}"
        },
        {
            "sha": "aa13df7b6844cb4ddeac80112a7f4331786b28b2",
            "filename": "common/gentools/src/org/apache/qpid/gentools/Printable.java",
            "status": "removed",
            "additions": 0,
            "deletions": 28,
            "changes": 28,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FPrintable.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FPrintable.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FPrintable.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,28 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import java.io.PrintStream;\n-\n-public interface Printable\n-{\n-    public void print(PrintStream out, int marginSize, int tabSize);\n-}"
        },
        {
            "sha": "8e1af1c551637bc1764d8399d87d4900c9de2944",
            "filename": "common/gentools/src/org/apache/qpid/gentools/SingleVersionClass.java",
            "status": "removed",
            "additions": 0,
            "deletions": 103,
            "changes": 103,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FSingleVersionClass.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FSingleVersionClass.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FSingleVersionClass.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,103 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import java.util.Map;\n-import java.util.List;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.Map.Entry;\n-\n-\n-public class SingleVersionClass\n-{\n-    private final int _classId;\n-\n-\n-    private final AmqpClass _amqpClass;\n-    private final AmqpVersion _amqpVersion;\n-    private final Generator _generator;\n-    private final List<SingleVersionMethod> _methodList = new ArrayList<SingleVersionMethod>();\n-\n-    public SingleVersionClass(AmqpClass amqpClass, AmqpVersion amqpVersion, Generator generator)\n-    {\n-        _amqpClass = amqpClass;\n-        _amqpVersion = amqpVersion;\n-        _generator = generator;\n-\n-        AmqpOrdinalVersionMap indexMap = amqpClass.getIndexMap();\n-        int classId = 0;\n-        for(Entry<Integer, AmqpVersionSet> entry : indexMap.entrySet())\n-        {\n-            if(entry.getValue().contains(_amqpVersion))\n-            {\n-                classId = entry.getKey();\n-                break;\n-            }\n-        }\n-        _classId = classId;\n-\n-\n-        Collection<AmqpMethod> methods = _amqpClass.getMethodMap().values();\n-\n-        for(AmqpMethod amqpMethod : methods)\n-        {\n-            _methodList.add(new SingleVersionMethod(amqpMethod, _amqpVersion, _generator));\n-\n-        }\n-\n-        Collections.sort(_methodList, new Comparator<SingleVersionMethod>(){\n-            public int compare(SingleVersionMethod method1, SingleVersionMethod method2)\n-            {\n-                return method1.getMethodId() - method2.getMethodId();\n-            }\n-        });\n-\n-\n-    }\n-\n-    public int getClassId()\n-    {\n-        return _classId;\n-    }\n-\n-    public String getName()\n-    {\n-        return _amqpClass.getName();\n-    }\n-\n-    \n-\n-\n-\n-    public List<SingleVersionMethod> getMethodList()\n-    {\n-        return _methodList;\n-    }\n-\n-\n-    public int getMaximumMethodId()\n-    {\n-        return _methodList.get(_methodList.size()-1).getMethodId();\n-    }\n-}"
        },
        {
            "sha": "b795663d155794b18810f42b268797f7a049d3e5",
            "filename": "common/gentools/src/org/apache/qpid/gentools/SingleVersionField.java",
            "status": "removed",
            "additions": 0,
            "deletions": 68,
            "changes": 68,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FSingleVersionField.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FSingleVersionField.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FSingleVersionField.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,68 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-\n-public class SingleVersionField\n-{\n-    private final AmqpField _field;\n-    private final AmqpVersion _amqpVersion;\n-    private final Generator _generator;\n-\n-    public SingleVersionField(AmqpField field, AmqpVersion amqpVersion, Generator generator)\n-    {\n-        _field = field;\n-        _amqpVersion = amqpVersion;\n-        _generator = generator;\n-    }\n-\n-    public String getName()\n-    {\n-        return _field.getName();\n-    }\n-\n-    public String getDomain()\n-    {\n-        return _field.getDomain(_amqpVersion);\n-    }\n-\n-\n-    public String getDomainType()\n-    {\n-        return _generator.getDomainType(_field.getDomain(_amqpVersion),_amqpVersion);\n-    }\n-\n-    public String getNativeType()\n-    {\n-        return _generator.getNativeType(getDomainType());\n-    }\n-\n-    public String getEncodingType()\n-    {\n-        return _generator.getEncodingType(getDomainType());\n-    }\n-\n-\n-    public int getPosition()\n-    {\n-        return _field.getOrdinal(_amqpVersion);\n-    }\n-}"
        },
        {
            "sha": "59a6d9e28a930939e80549b31035e51b548cbc42",
            "filename": "common/gentools/src/org/apache/qpid/gentools/SingleVersionMethod.java",
            "status": "removed",
            "additions": 0,
            "deletions": 154,
            "changes": 154,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FSingleVersionMethod.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FSingleVersionMethod.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FSingleVersionMethod.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,154 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import java.util.Map.Entry;\n-import java.util.Collection;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.HashMap;\n-\n-public class SingleVersionMethod\n-{\n-    private final AmqpMethod _amqpMethod;\n-    private final AmqpVersion _amqpVersion;\n-    private final int _methodId;\n-    private final List<SingleVersionField> _fieldList = new ArrayList<SingleVersionField>();\n-    private final Generator _generator;\n-    private final List<ConsolidatedField> _consolidatedFields = new ArrayList<ConsolidatedField>();\n-    private final Map<String, ConsolidatedField> _fieldNameToConsolidatedFieldMap = new HashMap<String, ConsolidatedField>();\n-\n-\n-    public SingleVersionMethod(AmqpMethod amqpMethod, AmqpVersion amqpVersion, Generator generator)\n-    {\n-        _amqpMethod = amqpMethod;\n-        _amqpVersion = amqpVersion;\n-        _generator = generator;\n-\n-        AmqpOrdinalVersionMap indexMap = amqpMethod.getIndexMap();\n-        int methodId = 0;\n-        for(Entry<Integer, AmqpVersionSet> entry : indexMap.entrySet())\n-        {\n-            if(entry.getValue().contains(_amqpVersion))\n-            {\n-                methodId = entry.getKey();\n-                break;\n-            }\n-        }\n-        _methodId = methodId;\n-\n-        Collection<AmqpField> fields = _amqpMethod.getFieldMap().values();\n-\n-        for(AmqpField field : fields)\n-        {\n-            _fieldList.add(new SingleVersionField(field, _amqpVersion, _generator));\n-\n-        }\n-\n-        Collections.sort(_fieldList, new Comparator<SingleVersionField>(){\n-            public int compare(SingleVersionField field1, SingleVersionField field2)\n-            {\n-                return field1.getPosition() - field2.getPosition();\n-            }\n-        });\n-\n-\n-\n-        ConsolidatedField lastField = null;\n-        int bitfieldNum = 0;\n-        for(SingleVersionField field : _fieldList)\n-        {\n-            String domainType = field.getDomainType();\n-            if(!domainType.equals(\"bit\"))\n-            {\n-                lastField = new ConsolidatedField(_generator,\n-                                                  field.getName(),\n-                                                  field.getDomainType());\n-                _consolidatedFields.add(lastField);\n-            }\n-            else if(lastField == null || !lastField.getType().equals(\"bitfield\"))\n-            {\n-                lastField = new ConsolidatedField(_generator,\n-                                                  domainType.equals(\"bit\") ? \"bitfield\"+bitfieldNum++ : field.getName(),\n-                                                  domainType.equals(\"bit\") ? \"bitfield\" : field.getDomainType(),\n-                                                  field.getName());\n-                _consolidatedFields.add(lastField);\n-            }\n-            else\n-            {\n-                lastField.add(field.getName());\n-            }\n-            _fieldNameToConsolidatedFieldMap.put(field.getName(), lastField);\n-\n-        }\n-    }\n-\n-    public int getMethodId()\n-    {\n-        return _methodId;\n-    }\n-\n-    public String getName()\n-    {\n-        return _amqpMethod.getName();\n-    }\n-\n-    public Collection<SingleVersionField> getFieldList()\n-    {\n-        return Collections.unmodifiableCollection(_fieldList);\n-    }\n-\n-    public List<ConsolidatedField> getConsolidatedFields()\n-    {\n-        return _consolidatedFields;\n-    }\n-\n-    public String getConsolidatedFieldName(String fieldName)\n-    {\n-        return _fieldNameToConsolidatedFieldMap.get(fieldName).getName();\n-    }\n-\n-    public boolean isConsolidated(String fieldName)\n-    {\n-        return _fieldNameToConsolidatedFieldMap.get(fieldName).isConsolidated();\n-    }\n-\n-    public int getPositionInBitField(String fieldName)\n-    {\n-        return _fieldNameToConsolidatedFieldMap.get(fieldName).getPosition(fieldName);\n-    }\n-\n-\n-    public boolean isServerMethod()\n-    {\n-        return _amqpMethod.isServerMethod(_amqpVersion);\n-    }\n-\n-\n-    public boolean isClientMethod()\n-    {\n-        return _amqpMethod.isClientMethod(_amqpVersion);        \n-    }\n-\n-}"
        },
        {
            "sha": "22b416e45a2951e879d4ebe82dc6d57dbfa1a12e",
            "filename": "common/gentools/src/org/apache/qpid/gentools/SingleVersionModel.java",
            "status": "removed",
            "additions": 0,
            "deletions": 71,
            "changes": 71,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FSingleVersionModel.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FSingleVersionModel.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FSingleVersionModel.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,71 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Comparator;\n-\n-\n-public class SingleVersionModel\n-{\n-    private final AmqpModel _amqpModel;\n-    private final AmqpVersion _amqpVersion;\n-    private final Generator _generator;\n-    private final List<SingleVersionClass> _classList = new ArrayList<SingleVersionClass>();\n-\n-    public SingleVersionModel(AmqpModel amqpModel, AmqpVersion amqpVersion, Generator generator)\n-    {\n-        _amqpModel = amqpModel;\n-        _amqpVersion = amqpVersion;\n-        _generator = generator;\n-\n-\n-        Collection<AmqpClass> originalClasses = _amqpModel.getClassMap().values();\n-\n-        for(AmqpClass amqpClass : originalClasses)\n-        {\n-            _classList.add(new SingleVersionClass(amqpClass, _amqpVersion, _generator));\n-\n-        }\n-\n-        Collections.sort(_classList, new Comparator<SingleVersionClass>(){\n-            public int compare(SingleVersionClass amqpClass1, SingleVersionClass amqpClass2)\n-            {\n-                return amqpClass1.getClassId() - amqpClass2.getClassId();\n-            }\n-        });\n-\n-\n-    }\n-\n-    public Collection<SingleVersionClass> getClassList()\n-    {\n-        return Collections.unmodifiableCollection(_classList);\n-    }\n-\n-    public int getMaximumClassId()\n-    {\n-        return _classList.get(_classList.size()-1).getClassId();\n-    }\n-}"
        },
        {
            "sha": "39ce6662886319334f5f9112ecabd94286dda0fd",
            "filename": "common/gentools/src/org/apache/qpid/gentools/TargetDirectoryException.java",
            "status": "removed",
            "additions": 0,
            "deletions": 30,
            "changes": 30,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FTargetDirectoryException.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FTargetDirectoryException.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FTargetDirectoryException.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,30 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-@SuppressWarnings(\"serial\")\n-public class TargetDirectoryException extends RuntimeException\n-{\n-    public TargetDirectoryException(String msg)\n-    {\n-        super(msg);\n-    }\n-}"
        },
        {
            "sha": "1cedaeea126609be7419fb0ea04cb87aee920fb8",
            "filename": "common/gentools/src/org/apache/qpid/gentools/Utils.java",
            "status": "removed",
            "additions": 0,
            "deletions": 159,
            "changes": 159,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FUtils.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FUtils.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FUtils.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,159 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-import org.w3c.dom.Attr;\n-import org.w3c.dom.NamedNodeMap;\n-import org.w3c.dom.Node;\n-import org.w3c.dom.NodeList;\n-\n-public class Utils\n-{\n-    public final static String FILE_SEPARATOR = System.getProperty(\"file.separator\");\n-    public final static String LINE_SEPARATOR = System.getProperty(\"line.separator\");\n-\n-    public final static String ATTRIBUTE_NAME = \"name\";\n-    public final static String ATTRIBUTE_MAJOR = \"major\";\n-    public final static String ATTRIBUTE_MINOR = \"minor\";\n-    public final static String ATTRIBUTE_INDEX = \"index\";\n-    public final static String ATTRIBUTE_LABEL = \"label\";\n-    public final static String ATTRIBUTE_SYNCHRONOUS = \"synchronous\";\n-    public final static String ATTRIBUTE_CONTENT = \"content\";\n-    public final static String ATTRIBUTE_HANDLER = \"handler\";\n-    public final static String ATTRIBUTE_DOMAIN = \"domain\";\n-    public final static String ATTRIBUTE_VALUE = \"value\";\n-    public final static String ATTRIBUTE_TYPE = \"type\"; // For compatibility with AMQP 8.0\n-\n-    public final static String ELEMENT_AMQP = \"amqp\";\n-    public final static String ELEMENT_CHASSIS = \"chassis\";\n-    public final static String ELEMENT_CLASS = \"class\";\n-    public final static String ELEMENT_CODEGEN = \"codegen\";\n-    public final static String ELEMENT_CONSTANT = \"constant\";\n-    public final static String ELEMENT_DOMAIN = \"domain\";\n-    public final static String ELEMENT_METHOD = \"method\";\n-    public final static String ELEMENT_FIELD = \"field\";\n-    public final static String ELEMENT_VERSION = \"version\";\n-\n-    // Attribute functions\n-\n-    public static String getNamedAttribute(Node n, String attrName) throws AmqpParseException\n-    {\n-        NamedNodeMap nnm = n.getAttributes();\n-        if (nnm == null)\n-        {\n-            throw new AmqpParseException(\"Node \\\"\" + n.getNodeName() + \"\\\" has no attributes.\");\n-        }\n-        Attr a = (Attr) nnm.getNamedItem(attrName);\n-        if (a == null)\n-        {\n-            throw new AmqpParseException(\"Node \\\"\" + n.getNodeName() + \"\\\" has no attribute \\\"\" + attrName + \"\\\".\");\n-        }\n-        return a.getNodeValue();\n-    }\n-\n-    public static int getNamedIntegerAttribute(Node n, String attrName) throws AmqpParseException\n-    {\n-        return Integer.parseInt(getNamedAttribute(n, attrName));\n-    }\n-\n-    // Element functions\n-\n-    public static Node findChild(Node n, String eltName) throws AmqpParseException\n-    {\n-        NodeList nl = n.getChildNodes();\n-        for (int i = 0; i < nl.getLength(); i++)\n-        {\n-            Node cn = nl.item(i);\n-            if (cn.getNodeName().compareTo(eltName) == 0)\n-            {\n-                return cn;\n-            }\n-        }\n-        throw new AmqpParseException(\"Node \\\"\" + n.getNodeName() +\n-                                     \"\\\" does not contain child element \\\"\" + eltName + \"\\\".\");\n-    }\n-\n-    // String functions\n-\n-    public static String firstUpper(String str)\n-    {\n-        if (!Character.isLetter(str.charAt(0)) || !Character.isLowerCase(str.charAt(0)))\n-        {\n-            return str;\n-        }\n-        StringBuffer sb = new StringBuffer(str);\n-        sb.setCharAt(0, Character.toUpperCase(str.charAt(0)));\n-        return sb.toString();\n-    }\n-\n-    public static String firstLower(String str)\n-    {\n-        if (!Character.isUpperCase(str.charAt(0)))\n-        {\n-            return str;\n-        }\n-        StringBuffer sb = new StringBuffer(str);\n-        sb.setCharAt(0, Character.toLowerCase(str.charAt(0)));\n-        return sb.toString();\n-    }\n-\n-    public static String createSpaces(int cnt)\n-    {\n-        StringBuffer sb = new StringBuffer();\n-        for (int i = 0; i < cnt; i++)\n-        {\n-            sb.append(' ');\n-        }\n-        return sb.toString();\n-    }\n-\n-    public static boolean containsOnlyDigits(String str)\n-    {\n-        boolean foundNonDigit = false;\n-        for (int i = 0; i < str.length() && !foundNonDigit; i++)\n-        {\n-            if (!Character.isDigit(str.charAt(i)))\n-            {\n-                foundNonDigit = true;\n-            }\n-        }\n-        return !foundNonDigit;\n-    }\n-\n-    public static boolean containsOnlyDigitsAndDecimal(String str)\n-    {\n-        boolean foundNonDigit = false;\n-        int decimalCntr = 0;\n-        for (int i = 0; i < str.length() && !foundNonDigit && decimalCntr < 2; i++)\n-        {\n-            char ch = str.charAt(i);\n-            if (!(Character.isDigit(ch) || ch == '.'))\n-            {\n-                foundNonDigit = true;\n-            }\n-            else if (ch == '.')\n-            {\n-                decimalCntr++;\n-            }\n-        }\n-        return !foundNonDigit && decimalCntr < 2;\n-    }\n-}"
        },
        {
            "sha": "a9cdd56e88b635c2bbf1bc22122b0e1eb00b9fa0",
            "filename": "common/gentools/src/org/apache/qpid/gentools/VersionConsistencyCheck.java",
            "status": "removed",
            "additions": 0,
            "deletions": 26,
            "changes": 26,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FVersionConsistencyCheck.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FVersionConsistencyCheck.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fgentools%2Fsrc%2Forg%2Fapache%2Fqpid%2Fgentools%2FVersionConsistencyCheck.java?ref=1d643884270f1cd44d12063938828540fb9228fa",
            "patch": "@@ -1,26 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.gentools;\n-\n-public interface VersionConsistencyCheck\n-{\n-    public boolean isVersionConsistent(AmqpVersionSet globalVersionSet);\n-}"
        },
        {
            "sha": "3ebb0098e066f552e8e900b7e35fb90851a5f9ab",
            "filename": "common/pom.xml",
            "status": "modified",
            "additions": 0,
            "deletions": 11,
            "changes": 11,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fpom.xml",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fpom.xml",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fpom.xml?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -111,24 +111,13 @@\n                 <target>\n                     <ant antfile=\"build-generate-sources.xml\">\n                       <reference torefid=\"source.generation.classpathref\" refid=\"maven.plugin.classpath\" />\n-                      <property name=\"gentools.classes\" value=\"${project.build.directory}/gentools-classes\" />\n                       <property name=\"build.compiler\" value=\"extJavac\" />\n                     </ant>\n                 </target>\n               </configuration>\n             </execution>\n         </executions>\n         <dependencies>\n-          <dependency>\n-            <groupId>velocity</groupId>\n-            <artifactId>velocity</artifactId>\n-            <version>${velocity-version}</version>\n-          </dependency>\n-          <dependency>\n-            <groupId>velocity</groupId>\n-            <artifactId>velocity-dep</artifactId>\n-            <version>${velocity-version}</version>\n-          </dependency>\n           <dependency>\n             <groupId>org.python</groupId>\n             <artifactId>jython-standalone</artifactId>"
        },
        {
            "sha": "7ab422eb4f78ed3e4079a45ec376fbd99efc5027",
            "filename": "common/src/main/java/org/apache/qpid/AMQChannelException.java",
            "status": "modified",
            "additions": 22,
            "deletions": 14,
            "changes": 36,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2FAMQChannelException.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2FAMQChannelException.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2FAMQChannelException.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -20,10 +20,7 @@\n  */\n package org.apache.qpid;\n \n-import org.apache.qpid.framing.AMQFrame;\n-import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.MethodRegistry;\n-import org.apache.qpid.framing.ProtocolVersion;\n import org.apache.qpid.protocol.AMQConstant;\n \n /**\n@@ -34,24 +31,35 @@ public class AMQChannelException extends AMQException\n     private final int _classId;\n     private final int _methodId;\n     /* AMQP version for which exception ocurred */\n-    private final byte major;\n-    private final byte minor;\n+    private final MethodRegistry _methodRegistry;\n \n-    public AMQChannelException(AMQConstant errorCode, String msg, int classId, int methodId, byte major, byte minor,\n-        Throwable cause)\n+\n+    public AMQChannelException(AMQConstant errorCode,\n+                               String msg,\n+                               int classId,\n+                               int methodId,\n+                               MethodRegistry methodRegistry)\n     {\n-        super(errorCode, msg, cause);\n+        super(errorCode, msg);\n         _classId = classId;\n         _methodId = methodId;\n-        this.major = major;\n-        this.minor = minor;\n+        _methodRegistry = methodRegistry;\n+\n+    }\n+\n+    public int getClassId()\n+    {\n+        return _classId;\n+    }\n+\n+    public int getMethodId()\n+    {\n+        return _methodId;\n     }\n \n-    public AMQFrame getCloseFrame(int channel)\n+    public MethodRegistry getMethodRegistry()\n     {\n-        MethodRegistry reg = MethodRegistry.getMethodRegistry(new ProtocolVersion(major,minor));\n-        return new AMQFrame(channel, reg.createChannelCloseBody(getErrorCode() == null ? AMQConstant.INTERNAL_ERROR.getCode() : getErrorCode().getCode(),\n-                AMQShortString.validValueOf(getMessage()),_classId,_methodId));\n+        return _methodRegistry;\n     }\n \n }"
        },
        {
            "sha": "ca70d19420c8e6c88892a47ce1642dd560ad3d4b",
            "filename": "common/src/main/java/org/apache/qpid/AMQConnectionException.java",
            "status": "modified",
            "additions": 15,
            "deletions": 17,
            "changes": 32,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2FAMQConnectionException.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2FAMQConnectionException.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2FAMQConnectionException.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "patch": "@@ -22,9 +22,9 @@\n package org.apache.qpid;\n \n import org.apache.qpid.framing.AMQFrame;\n+import org.apache.qpid.framing.AMQMethodBody;\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.MethodRegistry;\n-import org.apache.qpid.framing.ProtocolVersion;\n import org.apache.qpid.protocol.AMQConstant;\n \n /**\n@@ -35,32 +35,30 @@ public class AMQConnectionException extends AMQException\n     private final int _classId;\n     private final int _methodId;\n \n-    /** AMQP version for which exception ocurred, major code. */\n-    private final byte major;\n+    private final MethodRegistry _methodRegistry;\n \n-    /** AMQP version for which exception ocurred, minor code. */\n-    private final byte minor;\n-\n-    private boolean _closeConnetion;\n+    public AMQConnectionException(AMQConstant errorCode, String msg, AMQMethodBody body, MethodRegistry methodRegistry)\n+    {\n+        this(errorCode, msg, body.getClazz(), body.getMethod(), methodRegistry, null);\n+    }\n \n-    public AMQConnectionException(AMQConstant errorCode, String msg, int classId, int methodId, byte major, byte minor,\n-        Throwable cause)\n+    public AMQConnectionException(AMQConstant errorCode, String msg, int classId, int methodId, MethodRegistry methodRegistry,\n+                                  Throwable cause)\n     {\n         super(errorCode, msg, cause);\n         _classId = classId;\n         _methodId = methodId;\n-        this.major = major;\n-        this.minor = minor;\n+        _methodRegistry = methodRegistry;\n+\n     }\n \n-    public AMQFrame getCloseFrame(int channel)\n+    public AMQFrame getCloseFrame()\n     {\n-        MethodRegistry reg = MethodRegistry.getMethodRegistry(new ProtocolVersion(major,minor));\n         return new AMQFrame(0,\n-                            reg.createConnectionCloseBody(getErrorCode().getCode(),\n-                                    AMQShortString.validValueOf(getMessage()),\n-                                                          _classId,\n-                                                          _methodId));\n+                            _methodRegistry.createConnectionCloseBody(getErrorCode().getCode(),\n+                                                                      AMQShortString.validValueOf(getMessage()),\n+                                                                      _classId,\n+                                                                      _methodId));\n \n     }\n "
        },
        {
            "sha": "7d2521a057b81e7ae0f84c4241b8226564e7d8dd",
            "filename": "common/src/main/java/org/apache/qpid/AMQException.java",
            "status": "modified",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2FAMQException.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2FAMQException.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2FAMQException.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "9d9816868759a8b285bf21f6e54a0032683b9fef",
            "filename": "common/src/main/java/org/apache/qpid/codec/AMQDecoder.java",
            "status": "modified",
            "additions": 121,
            "deletions": 26,
            "changes": 147,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fcodec%2FAMQDecoder.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fcodec%2FAMQDecoder.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fcodec%2FAMQDecoder.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "5048193cac59f754f6dc915fa08ffc1942a05eaf",
            "filename": "common/src/main/java/org/apache/qpid/codec/ClientDecoder.java",
            "status": "added",
            "additions": 258,
            "deletions": 0,
            "changes": 258,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fcodec%2FClientDecoder.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fcodec%2FClientDecoder.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fcodec%2FClientDecoder.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "3b138ba2786e576e20dad5e250ea730f40a534e2",
            "filename": "common/src/main/java/org/apache/qpid/codec/ServerDecoder.java",
            "status": "added",
            "additions": 234,
            "deletions": 0,
            "changes": 234,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fcodec%2FServerDecoder.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fcodec%2FServerDecoder.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fcodec%2FServerDecoder.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "291b7e8d2959afed83330d88c7f3daa4d7131f97",
            "filename": "common/src/main/java/org/apache/qpid/framing/AMQDataBlockDecoder.java",
            "status": "removed",
            "additions": 0,
            "deletions": 120,
            "changes": 120,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FAMQDataBlockDecoder.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FAMQDataBlockDecoder.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FAMQDataBlockDecoder.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "83397c37d8bedfe4e5e5214f610943d54f78cccb",
            "filename": "common/src/main/java/org/apache/qpid/framing/AMQFrame.java",
            "status": "modified",
            "additions": 0,
            "deletions": 8,
            "changes": 8,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FAMQFrame.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FAMQFrame.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FAMQFrame.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "23315d478786b8ec3e706ce6ab776e5c792d7477",
            "filename": "common/src/main/java/org/apache/qpid/framing/AMQMethodBody.java",
            "status": "modified",
            "additions": 11,
            "deletions": 21,
            "changes": 32,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FAMQMethodBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FAMQMethodBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FAMQMethodBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "7fe293b6b7938cf6c3036838f5e621d86b0d089f",
            "filename": "common/src/main/java/org/apache/qpid/framing/AMQMethodBodyFactory.java",
            "status": "removed",
            "additions": 0,
            "deletions": 46,
            "changes": 46,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FAMQMethodBodyFactory.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FAMQMethodBodyFactory.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FAMQMethodBodyFactory.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "e40452edea57ed200f6764de8778bd4414a9a22e",
            "filename": "common/src/main/java/org/apache/qpid/framing/AMQMethodBodyImpl.java",
            "status": "modified",
            "additions": 15,
            "deletions": 80,
            "changes": 95,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FAMQMethodBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FAMQMethodBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FAMQMethodBodyImpl.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "88b1ca71890ad2386a3627059a2bd8bd106294e1",
            "filename": "common/src/main/java/org/apache/qpid/framing/AMQMethodBodyInstanceFactory.java",
            "status": "removed",
            "additions": 0,
            "deletions": 32,
            "changes": 32,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FAMQMethodBodyInstanceFactory.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FAMQMethodBodyInstanceFactory.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FAMQMethodBodyInstanceFactory.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "765d742789dc296cada4e84b4d24f3e8a884b5d0",
            "filename": "common/src/main/java/org/apache/qpid/framing/AMQShortString.java",
            "status": "modified",
            "additions": 11,
            "deletions": 0,
            "changes": 11,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FAMQShortString.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FAMQShortString.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FAMQShortString.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "8dec50c400afc8f5eeae051d7a0e5ea6b8edcca2",
            "filename": "common/src/main/java/org/apache/qpid/framing/AccessRequestBody.java",
            "status": "modified",
            "additions": 148,
            "deletions": 11,
            "changes": 159,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FAccessRequestBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FAccessRequestBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FAccessRequestBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "7ed0b3602b56edfdaa6d7349665db6325ce5a257",
            "filename": "common/src/main/java/org/apache/qpid/framing/AccessRequestOkBody.java",
            "status": "modified",
            "additions": 78,
            "deletions": 6,
            "changes": 84,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FAccessRequestOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FAccessRequestOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FAccessRequestOkBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "68782231fe0263ef6b9d61a866251a6048fbf2bb",
            "filename": "common/src/main/java/org/apache/qpid/framing/BasicAckBody.java",
            "status": "modified",
            "additions": 95,
            "deletions": 7,
            "changes": 102,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicAckBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicAckBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicAckBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "c9a870e2a5ea84d662815fd008b18c0295ae49f7",
            "filename": "common/src/main/java/org/apache/qpid/framing/BasicCancelBody.java",
            "status": "modified",
            "additions": 96,
            "deletions": 7,
            "changes": 103,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicCancelBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicCancelBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicCancelBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "8d16aa44ececa72149e551695811eee701d90e2a",
            "filename": "common/src/main/java/org/apache/qpid/framing/BasicCancelOkBody.java",
            "status": "modified",
            "additions": 79,
            "deletions": 6,
            "changes": 85,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicCancelOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicCancelOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicCancelOkBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "502fa07e78786a4975185ffb1981ffe31956ceea",
            "filename": "common/src/main/java/org/apache/qpid/framing/BasicConsumeBody.java",
            "status": "modified",
            "additions": 177,
            "deletions": 13,
            "changes": 190,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicConsumeBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicConsumeBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicConsumeBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "d3df7f222a7877a427723133efc9e062432794dc",
            "filename": "common/src/main/java/org/apache/qpid/framing/BasicConsumeOkBody.java",
            "status": "modified",
            "additions": 79,
            "deletions": 6,
            "changes": 85,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicConsumeOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicConsumeOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicConsumeOkBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "f61ee2d55b61d4425a0cc21ac35e3f4b240c2da9",
            "filename": "common/src/main/java/org/apache/qpid/framing/BasicDeliverBody.java",
            "status": "modified",
            "additions": 135,
            "deletions": 10,
            "changes": 145,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicDeliverBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicDeliverBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicDeliverBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "68a6f2980bed9cd961a7dfd398430196b64d3922",
            "filename": "common/src/main/java/org/apache/qpid/framing/BasicGetBody.java",
            "status": "modified",
            "additions": 109,
            "deletions": 8,
            "changes": 117,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicGetBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicGetBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicGetBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "f37fb632db55cc08bbbaa6d5a19e7294ab120937",
            "filename": "common/src/main/java/org/apache/qpid/framing/BasicGetEmptyBody.java",
            "status": "modified",
            "additions": 78,
            "deletions": 6,
            "changes": 84,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicGetEmptyBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicGetEmptyBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicGetEmptyBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "37e9bdae5a05a711bc55537230992b000a16c9ba",
            "filename": "common/src/main/java/org/apache/qpid/framing/BasicGetOkBody.java",
            "status": "modified",
            "additions": 133,
            "deletions": 10,
            "changes": 143,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicGetOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicGetOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicGetOkBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "8e5d71a80425ff54698afc3d208cbe2610ba9192",
            "filename": "common/src/main/java/org/apache/qpid/framing/BasicPublishBody.java",
            "status": "modified",
            "additions": 136,
            "deletions": 10,
            "changes": 146,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicPublishBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicPublishBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicPublishBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "6b7e90f41f3903dacd373227649221e3966edb4f",
            "filename": "common/src/main/java/org/apache/qpid/framing/BasicQosBody.java",
            "status": "modified",
            "additions": 107,
            "deletions": 8,
            "changes": 115,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicQosBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicQosBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicQosBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "4be10906c23df6fd90972d5008dc69a9c5fe591c",
            "filename": "common/src/main/java/org/apache/qpid/framing/BasicQosOkBody.java",
            "status": "modified",
            "additions": 58,
            "deletions": 5,
            "changes": 63,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicQosOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicQosOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicQosOkBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "e5490c482735e081bd6806ebf74469be03fe035c",
            "filename": "common/src/main/java/org/apache/qpid/framing/BasicRecoverBody.java",
            "status": "modified",
            "additions": 85,
            "deletions": 6,
            "changes": 91,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicRecoverBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicRecoverBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicRecoverBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "a4abdd0cd714e591a7e981f2e4f2c73d0a8d985c",
            "filename": "common/src/main/java/org/apache/qpid/framing/BasicRecoverOkBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 34,
            "changes": 34,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicRecoverOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicRecoverOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicRecoverOkBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "f82ee7886227b5e10debe5c1c6168da5b90445f9",
            "filename": "common/src/main/java/org/apache/qpid/framing/BasicRecoverSyncBody.java",
            "status": "modified",
            "additions": 85,
            "deletions": 6,
            "changes": 91,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicRecoverSyncBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicRecoverSyncBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicRecoverSyncBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "dc60d539526c5ad76b2150a60caa856b0d294928",
            "filename": "common/src/main/java/org/apache/qpid/framing/BasicRecoverSyncOkBody.java",
            "status": "modified",
            "additions": 58,
            "deletions": 5,
            "changes": 63,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicRecoverSyncOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicRecoverSyncOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicRecoverSyncOkBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "8c8757f1d268644ea11395868b31a5f5c85b8acc",
            "filename": "common/src/main/java/org/apache/qpid/framing/BasicRejectBody.java",
            "status": "modified",
            "additions": 95,
            "deletions": 7,
            "changes": 102,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicRejectBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicRejectBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicRejectBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "afdb343c9fd05f95e049138262b56bd56a141ad0",
            "filename": "common/src/main/java/org/apache/qpid/framing/BasicReturnBody.java",
            "status": "modified",
            "additions": 117,
            "deletions": 9,
            "changes": 126,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicReturnBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicReturnBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBasicReturnBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "554e9373d881e9da00d97edb198c8c83f18d2274",
            "filename": "common/src/main/java/org/apache/qpid/framing/BodyFactory.java",
            "status": "removed",
            "additions": 0,
            "deletions": 33,
            "changes": 33,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBodyFactory.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBodyFactory.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FBodyFactory.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "289cf2cc10a7395abf9e42d2c025118c921232b6",
            "filename": "common/src/main/java/org/apache/qpid/framing/ChannelAlertBody.java",
            "status": "modified",
            "additions": 105,
            "deletions": 8,
            "changes": 113,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelAlertBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelAlertBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelAlertBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "a3b92a1fad0e2005056cb41a154c126c1e00aaba",
            "filename": "common/src/main/java/org/apache/qpid/framing/ChannelCloseBody.java",
            "status": "modified",
            "additions": 115,
            "deletions": 9,
            "changes": 124,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelCloseBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelCloseBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelCloseBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "e9b1572eeff44ab7938886296f1fd1f4235cd127",
            "filename": "common/src/main/java/org/apache/qpid/framing/ChannelCloseOkBody.java",
            "status": "modified",
            "additions": 56,
            "deletions": 5,
            "changes": 61,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelCloseOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelCloseOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelCloseOkBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "1c3cc47d4e4f507862d96b3e8736f5b2a85793d0",
            "filename": "common/src/main/java/org/apache/qpid/framing/ChannelFlowBody.java",
            "status": "modified",
            "additions": 74,
            "deletions": 6,
            "changes": 80,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelFlowBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelFlowBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelFlowBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "9d4a2b09a1ef5df8076bc0eab11e66fb6c76ffd8",
            "filename": "common/src/main/java/org/apache/qpid/framing/ChannelFlowOkBody.java",
            "status": "modified",
            "additions": 76,
            "deletions": 6,
            "changes": 82,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelFlowOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelFlowOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelFlowOkBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "84cd1e13c2657e93924342fab1962016f8d0cda0",
            "filename": "common/src/main/java/org/apache/qpid/framing/ChannelMethodProcessor.java",
            "status": "renamed",
            "additions": 8,
            "deletions": 17,
            "changes": 25,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelMethodProcessor.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelMethodProcessor.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelMethodProcessor.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "previous_filename": "common/src/main/java/org/apache/qpid/framing/StreamConsumeBody.java"
        },
        {
            "sha": "4f332aea8f1f219cbe10d1f4730bd4007219ce03",
            "filename": "common/src/main/java/org/apache/qpid/framing/ChannelOkBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 34,
            "changes": 34,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelOkBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "af583f5fda26d15ea66ea53d57ba2cf0f2210b05",
            "filename": "common/src/main/java/org/apache/qpid/framing/ChannelOpenBody.java",
            "status": "modified",
            "additions": 65,
            "deletions": 6,
            "changes": 71,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelOpenBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelOpenBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelOpenBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "e3b4f38a8cea8d37016eae4c1ce0e1e7f9251c7e",
            "filename": "common/src/main/java/org/apache/qpid/framing/ChannelOpenOkBody.java",
            "status": "modified",
            "additions": 83,
            "deletions": 5,
            "changes": 88,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelOpenOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelOpenOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelOpenOkBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "29f2013e79fb68ff20936badb83f22333a1bc39e",
            "filename": "common/src/main/java/org/apache/qpid/framing/ChannelPingBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 34,
            "changes": 34,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelPingBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelPingBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelPingBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "2ac2388246fc997b412b76f6fb6029b2120b3216",
            "filename": "common/src/main/java/org/apache/qpid/framing/ChannelPongBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 34,
            "changes": 34,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelPongBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelPongBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelPongBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "f3b77e1db94952b69c3d12fce7bbea96b794e10e",
            "filename": "common/src/main/java/org/apache/qpid/framing/ChannelResumeBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 36,
            "changes": 36,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelResumeBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelResumeBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FChannelResumeBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "bef143e39b5bf4da19b537a759a0fadeecc79441",
            "filename": "common/src/main/java/org/apache/qpid/framing/ClientChannelMethodProcessor.java",
            "status": "added",
            "additions": 78,
            "deletions": 0,
            "changes": 78,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FClientChannelMethodProcessor.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FClientChannelMethodProcessor.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FClientChannelMethodProcessor.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "97de0ac487994adce1fb9f58255c10cbc303a8d5",
            "filename": "common/src/main/java/org/apache/qpid/framing/ClientMethodDispatcher.java",
            "status": "modified",
            "additions": 10,
            "deletions": 1,
            "changes": 11,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FClientMethodDispatcher.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FClientMethodDispatcher.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FClientMethodDispatcher.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "0b599ee40a21aed3d532a743731867f5ed2a25ed",
            "filename": "common/src/main/java/org/apache/qpid/framing/ClientMethodProcessor.java",
            "status": "renamed",
            "additions": 10,
            "deletions": 17,
            "changes": 27,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FClientMethodProcessor.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FClientMethodProcessor.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FClientMethodProcessor.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "previous_filename": "common/src/main/java/org/apache/qpid/framing/FilePublishBody.java"
        },
        {
            "sha": "546cf5fa0a07e9432f7bacb69fe96a9dca0bafcb",
            "filename": "common/src/main/java/org/apache/qpid/framing/ConnectionCloseBody.java",
            "status": "modified",
            "additions": 112,
            "deletions": 9,
            "changes": 121,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionCloseBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionCloseBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionCloseBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "30e9f90b9ae0310d69961871bb309e6d026acefd",
            "filename": "common/src/main/java/org/apache/qpid/framing/ConnectionCloseOkBody.java",
            "status": "modified",
            "additions": 53,
            "deletions": 5,
            "changes": 58,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionCloseOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionCloseOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionCloseOkBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "7fb815ae40962b6c51350e42178febed23bf8747",
            "filename": "common/src/main/java/org/apache/qpid/framing/ConnectionOpenBody.java",
            "status": "modified",
            "additions": 103,
            "deletions": 8,
            "changes": 111,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionOpenBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionOpenBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionOpenBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "95c48873f373f8eaef3162e7648a8668a73b871e",
            "filename": "common/src/main/java/org/apache/qpid/framing/ConnectionOpenOkBody.java",
            "status": "modified",
            "additions": 78,
            "deletions": 6,
            "changes": 84,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionOpenOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionOpenOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionOpenOkBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "491cc2512517e471efb7bb5a82997df8194a9c7f",
            "filename": "common/src/main/java/org/apache/qpid/framing/ConnectionRedirectBody.java",
            "status": "modified",
            "additions": 89,
            "deletions": 7,
            "changes": 96,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionRedirectBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionRedirectBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionRedirectBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "e10af3b4c1445db146e2ce684a1d0a92816b7601",
            "filename": "common/src/main/java/org/apache/qpid/framing/ConnectionSecureBody.java",
            "status": "modified",
            "additions": 79,
            "deletions": 6,
            "changes": 85,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionSecureBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionSecureBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionSecureBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "4c4a249bb63133f76f43bca92e94a4a51792afa8",
            "filename": "common/src/main/java/org/apache/qpid/framing/ConnectionSecureOkBody.java",
            "status": "modified",
            "additions": 77,
            "deletions": 6,
            "changes": 83,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionSecureOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionSecureOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionSecureOkBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "3b94919d4e039494d59f6959a766db2f62a8f696",
            "filename": "common/src/main/java/org/apache/qpid/framing/ConnectionStartBody.java",
            "status": "modified",
            "additions": 119,
            "deletions": 10,
            "changes": 129,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionStartBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionStartBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionStartBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "5b6a8e3ef7a2ca1c45b539f97145d83ee4c7c7b8",
            "filename": "common/src/main/java/org/apache/qpid/framing/ConnectionStartOkBody.java",
            "status": "modified",
            "additions": 109,
            "deletions": 9,
            "changes": 118,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionStartOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionStartOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionStartOkBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "04def21d44e47572d7654cf418c452a61fc35e18",
            "filename": "common/src/main/java/org/apache/qpid/framing/ConnectionTuneBody.java",
            "status": "modified",
            "additions": 101,
            "deletions": 8,
            "changes": 109,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionTuneBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionTuneBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionTuneBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "3141a857664a48b57c1d8b4bee05eccdbf30b199",
            "filename": "common/src/main/java/org/apache/qpid/framing/ConnectionTuneOkBody.java",
            "status": "modified",
            "additions": 101,
            "deletions": 8,
            "changes": 109,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionTuneOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionTuneOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FConnectionTuneOkBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "e5feeec2a49e16f05509e7f015c737c0cec520e7",
            "filename": "common/src/main/java/org/apache/qpid/framing/Content.java",
            "status": "removed",
            "additions": 0,
            "deletions": 26,
            "changes": 26,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FContent.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FContent.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FContent.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "4d9826d83cab03f9bd643767e4e206ae185480cd",
            "filename": "common/src/main/java/org/apache/qpid/framing/ContentBody.java",
            "status": "modified",
            "additions": 13,
            "deletions": 16,
            "changes": 29,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FContentBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FContentBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FContentBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "10df105ee65e40ad4ced4775f3bb3a1f88101085",
            "filename": "common/src/main/java/org/apache/qpid/framing/ContentBodyFactory.java",
            "status": "removed",
            "additions": 0,
            "deletions": 50,
            "changes": 50,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FContentBodyFactory.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FContentBodyFactory.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FContentBodyFactory.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "0d25e4dfbad75fcf413a20fb9f0fa516ebca5c9f",
            "filename": "common/src/main/java/org/apache/qpid/framing/ContentHeaderBody.java",
            "status": "modified",
            "additions": 57,
            "deletions": 48,
            "changes": 105,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FContentHeaderBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FContentHeaderBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FContentHeaderBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "83a5211013f2f717c7577d1b1cece2210961ff70",
            "filename": "common/src/main/java/org/apache/qpid/framing/ContentHeaderBodyFactory.java",
            "status": "removed",
            "additions": 0,
            "deletions": 52,
            "changes": 52,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FContentHeaderBodyFactory.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FContentHeaderBodyFactory.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FContentHeaderBodyFactory.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "e8eb47128480bf863488f003054dff68026553ef",
            "filename": "common/src/main/java/org/apache/qpid/framing/ContentHeaderPropertiesFactory.java",
            "status": "modified",
            "additions": 1,
            "deletions": 3,
            "changes": 4,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FContentHeaderPropertiesFactory.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FContentHeaderPropertiesFactory.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FContentHeaderPropertiesFactory.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "d6d7c87e23604ae4d7e01299ee81bee550fd5571",
            "filename": "common/src/main/java/org/apache/qpid/framing/DtxSelectBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 34,
            "changes": 34,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FDtxSelectBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FDtxSelectBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FDtxSelectBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "9ea4585b354ffb803c259fe5794b8c9fce2c6f88",
            "filename": "common/src/main/java/org/apache/qpid/framing/DtxSelectOkBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 34,
            "changes": 34,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FDtxSelectOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FDtxSelectOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FDtxSelectOkBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "e721bfcdd1240b104eaaa4590e9d16a471d6b7c5",
            "filename": "common/src/main/java/org/apache/qpid/framing/DtxStartBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 36,
            "changes": 36,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FDtxStartBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FDtxStartBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FDtxStartBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "c16e9d74477b63ebacdbb94daf514f194ec3149b",
            "filename": "common/src/main/java/org/apache/qpid/framing/DtxStartOkBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 34,
            "changes": 34,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FDtxStartOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FDtxStartOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FDtxStartOkBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "a7fe4b01f3a73cf3073cfac25667ff169fa2062b",
            "filename": "common/src/main/java/org/apache/qpid/framing/EncodingUtils.java",
            "status": "modified",
            "additions": 3,
            "deletions": 21,
            "changes": 24,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FEncodingUtils.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FEncodingUtils.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FEncodingUtils.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "e8dc2ae4420a5250d5b17817f925ab8870c89d09",
            "filename": "common/src/main/java/org/apache/qpid/framing/ExchangeBoundBody.java",
            "status": "modified",
            "additions": 106,
            "deletions": 8,
            "changes": 114,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FExchangeBoundBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FExchangeBoundBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FExchangeBoundBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "ef91c1d6356853484d945dd974d99181b873c743",
            "filename": "common/src/main/java/org/apache/qpid/framing/ExchangeBoundOkBody.java",
            "status": "modified",
            "additions": 99,
            "deletions": 7,
            "changes": 106,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FExchangeBoundOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FExchangeBoundOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FExchangeBoundOkBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "4001ba7aa02084c2ea82713fc6f854e3847ee030",
            "filename": "common/src/main/java/org/apache/qpid/framing/ExchangeDeclareBody.java",
            "status": "modified",
            "additions": 195,
            "deletions": 14,
            "changes": 209,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FExchangeDeclareBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FExchangeDeclareBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FExchangeDeclareBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "68b193cfb0717c9046b8a6727203ff1d79a4762c",
            "filename": "common/src/main/java/org/apache/qpid/framing/ExchangeDeclareOkBody.java",
            "status": "modified",
            "additions": 58,
            "deletions": 5,
            "changes": 63,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FExchangeDeclareOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FExchangeDeclareOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FExchangeDeclareOkBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "f4646315cde0afe2e29e36fe0fd1f787f30299f5",
            "filename": "common/src/main/java/org/apache/qpid/framing/ExchangeDeleteBody.java",
            "status": "modified",
            "additions": 123,
            "deletions": 9,
            "changes": 132,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FExchangeDeleteBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FExchangeDeleteBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FExchangeDeleteBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "7af0b02ef01dbfc782d2819daffb697657cab8d3",
            "filename": "common/src/main/java/org/apache/qpid/framing/ExchangeDeleteOkBody.java",
            "status": "modified",
            "additions": 58,
            "deletions": 5,
            "changes": 63,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FExchangeDeleteOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FExchangeDeleteOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FExchangeDeleteOkBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "9d5f1865214e3365d52893ee1e938e8651f7144b",
            "filename": "common/src/main/java/org/apache/qpid/framing/FileAckBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 38,
            "changes": 38,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileAckBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileAckBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileAckBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "ac85455ff5f30eb3d626699a25d56cb6848cda11",
            "filename": "common/src/main/java/org/apache/qpid/framing/FileCancelBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 38,
            "changes": 38,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileCancelBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileCancelBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileCancelBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "40364887c89dbe5544c4636d05e6932bb7e475c7",
            "filename": "common/src/main/java/org/apache/qpid/framing/FileCancelOkBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 36,
            "changes": 36,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileCancelOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileCancelOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileCancelOkBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "dd6dd3f64bec8bf4493b03c15ebc7ec48c5768af",
            "filename": "common/src/main/java/org/apache/qpid/framing/FileConsumeOkBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 36,
            "changes": 36,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileConsumeOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileConsumeOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileConsumeOkBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "25ea3834bc12329658ddf56f9762b4918b234f29",
            "filename": "common/src/main/java/org/apache/qpid/framing/FileOpenBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 38,
            "changes": 38,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileOpenBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileOpenBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileOpenBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "4edff34eb4abd812cd96386040be2f4971e75d6c",
            "filename": "common/src/main/java/org/apache/qpid/framing/FileOpenOkBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 36,
            "changes": 36,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileOpenOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileOpenOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileOpenOkBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "378b6a3b5d4dfd5b9447f2654a5494a4663c1681",
            "filename": "common/src/main/java/org/apache/qpid/framing/FileQosBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 40,
            "changes": 40,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileQosBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileQosBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileQosBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "7296b36cc233f68bc08a5060c73a5bf89ba89baf",
            "filename": "common/src/main/java/org/apache/qpid/framing/FileQosOkBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 34,
            "changes": 34,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileQosOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileQosOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileQosOkBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "c569d8ed9fb4dbbf6002991038eccac121ae5731",
            "filename": "common/src/main/java/org/apache/qpid/framing/FileRejectBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 38,
            "changes": 38,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileRejectBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileRejectBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileRejectBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "8bd582514161100e4a6b8fc682294e20bdf461db",
            "filename": "common/src/main/java/org/apache/qpid/framing/FileReturnBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 42,
            "changes": 42,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileReturnBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileReturnBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileReturnBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "976fa3b0da3cbbe98a50b04c294558f44084322c",
            "filename": "common/src/main/java/org/apache/qpid/framing/FileStageBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 34,
            "changes": 34,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileStageBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileStageBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFileStageBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "19b091a35984ed10341f9cbcd8f9548c06bcd453",
            "filename": "common/src/main/java/org/apache/qpid/framing/FrameCreatingMethodProcessor.java",
            "status": "added",
            "additions": 611,
            "deletions": 0,
            "changes": 611,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFrameCreatingMethodProcessor.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFrameCreatingMethodProcessor.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FFrameCreatingMethodProcessor.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "b5f854eb0e1a88ca19b9de0c3a201b263f6787b4",
            "filename": "common/src/main/java/org/apache/qpid/framing/HeartbeatBody.java",
            "status": "modified",
            "additions": 17,
            "deletions": 3,
            "changes": 20,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FHeartbeatBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FHeartbeatBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FHeartbeatBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "971caca41aa980940c4bc70130a35718de1c5252",
            "filename": "common/src/main/java/org/apache/qpid/framing/HeartbeatBodyFactory.java",
            "status": "removed",
            "additions": 0,
            "deletions": 32,
            "changes": 32,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FHeartbeatBodyFactory.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FHeartbeatBodyFactory.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FHeartbeatBodyFactory.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "c981ad00f8d5328db0595c7425fb415301d1d934",
            "filename": "common/src/main/java/org/apache/qpid/framing/MessageAppendBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 38,
            "changes": 38,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageAppendBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageAppendBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageAppendBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "e440aca42f4f00d89e55b3128689440d07502e41",
            "filename": "common/src/main/java/org/apache/qpid/framing/MessageCancelBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 36,
            "changes": 36,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageCancelBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageCancelBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageCancelBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "1cc6dc598b5800b26050f5312860bdff39545134",
            "filename": "common/src/main/java/org/apache/qpid/framing/MessageCheckpointBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 38,
            "changes": 38,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageCheckpointBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageCheckpointBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageCheckpointBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "6898edec0058e02f2bb375d5e5c670cc999e18e4",
            "filename": "common/src/main/java/org/apache/qpid/framing/MessageCloseBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 36,
            "changes": 36,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageCloseBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageCloseBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageCloseBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "13fe4aec2bc3e4fa4bafa4898636f84ad454e1c6",
            "filename": "common/src/main/java/org/apache/qpid/framing/MessageConsumeBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 48,
            "changes": 48,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageConsumeBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageConsumeBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageConsumeBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "d4f1c6e02a8bf0083bf020f8f0530537a8d2b36f",
            "filename": "common/src/main/java/org/apache/qpid/framing/MessageEmptyBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 34,
            "changes": 34,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageEmptyBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageEmptyBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageEmptyBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "c2641679a8db840aa499ec551f03925733f24538",
            "filename": "common/src/main/java/org/apache/qpid/framing/MessageGetBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 42,
            "changes": 42,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageGetBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageGetBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageGetBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "3b7d94ae2ec70344b1f1b0c36bdad5ea31a1c58f",
            "filename": "common/src/main/java/org/apache/qpid/framing/MessageOffsetBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 36,
            "changes": 36,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageOffsetBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageOffsetBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageOffsetBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "c349acd2bb10290787820cf7412f7d58a172ddcb",
            "filename": "common/src/main/java/org/apache/qpid/framing/MessageOkBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 34,
            "changes": 34,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageOkBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "da021bd42c405caa45c769a7860d51ce24c6e6f2",
            "filename": "common/src/main/java/org/apache/qpid/framing/MessageOpenBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 36,
            "changes": 36,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageOpenBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageOpenBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageOpenBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "cc8f7eab5892ef6d511a531b4ab733c376d76269",
            "filename": "common/src/main/java/org/apache/qpid/framing/MessagePublishInfo.java",
            "status": "renamed",
            "additions": 7,
            "deletions": 8,
            "changes": 15,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessagePublishInfo.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessagePublishInfo.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessagePublishInfo.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "previous_filename": "common/src/main/java/org/apache/qpid/framing/abstraction/MessagePublishInfoImpl.java"
        },
        {
            "sha": "ecedcebcee3daf88b78aef0dcca49532a460fd78",
            "filename": "common/src/main/java/org/apache/qpid/framing/MessageQosBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 40,
            "changes": 40,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageQosBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageQosBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageQosBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "37188d5dc96e1d784a529df34fab574ed087c5bd",
            "filename": "common/src/main/java/org/apache/qpid/framing/MessageRecoverBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 36,
            "changes": 36,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageRecoverBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageRecoverBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageRecoverBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "3bd858c20da6b9e1723d7d4ee8c6bc102a6ab1b4",
            "filename": "common/src/main/java/org/apache/qpid/framing/MessageRejectBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 38,
            "changes": 38,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageRejectBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageRejectBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageRejectBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "ef68b97c19a5c8473a0b090e65cba0b6f0ea70d3",
            "filename": "common/src/main/java/org/apache/qpid/framing/MessageResumeBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 38,
            "changes": 38,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageResumeBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageResumeBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageResumeBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "11f8848431ee2dd77544d04ce980383d4af0d646",
            "filename": "common/src/main/java/org/apache/qpid/framing/MessageTransferBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 78,
            "changes": 78,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageTransferBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageTransferBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMessageTransferBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "62c0cd3c6d6bb4e53d3766e113cece83579eaa60",
            "filename": "common/src/main/java/org/apache/qpid/framing/MethodProcessor.java",
            "status": "renamed",
            "additions": 10,
            "deletions": 16,
            "changes": 26,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMethodProcessor.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMethodProcessor.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMethodProcessor.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "previous_filename": "common/src/main/java/org/apache/qpid/framing/FileDeliverBody.java"
        },
        {
            "sha": "45c198942bdebae85898beb8ab5b98d533ec2fd8",
            "filename": "common/src/main/java/org/apache/qpid/framing/MethodRegistry.java",
            "status": "modified",
            "additions": 482,
            "deletions": 283,
            "changes": 765,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMethodRegistry.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMethodRegistry.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FMethodRegistry.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "ed1935ca04cf1c93462846ca0f53f015b47cac15",
            "filename": "common/src/main/java/org/apache/qpid/framing/ProtocolInitiation.java",
            "status": "modified",
            "additions": 5,
            "deletions": 4,
            "changes": 9,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FProtocolInitiation.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FProtocolInitiation.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FProtocolInitiation.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "2b7e26a7f009efe38c63c7b20acbf4735d706442",
            "filename": "common/src/main/java/org/apache/qpid/framing/QueueBindBody.java",
            "status": "modified",
            "additions": 148,
            "deletions": 11,
            "changes": 159,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueueBindBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueueBindBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueueBindBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "cf6b18b9329d57785997459adb83587baf369020",
            "filename": "common/src/main/java/org/apache/qpid/framing/QueueBindOkBody.java",
            "status": "modified",
            "additions": 58,
            "deletions": 5,
            "changes": 63,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueueBindOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueueBindOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueueBindOkBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "5a359dc8df07d0955ef151c621f2798eae32c932",
            "filename": "common/src/main/java/org/apache/qpid/framing/QueueDeclareBody.java",
            "status": "modified",
            "additions": 176,
            "deletions": 13,
            "changes": 189,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueueDeclareBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueueDeclareBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueueDeclareBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "cf6fc656b31b78d63764cbef3040bc618f089b3c",
            "filename": "common/src/main/java/org/apache/qpid/framing/QueueDeclareOkBody.java",
            "status": "modified",
            "additions": 102,
            "deletions": 8,
            "changes": 110,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueueDeclareOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueueDeclareOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueueDeclareOkBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "ea933dc6442c865d777c99882ecf340b56095b6b",
            "filename": "common/src/main/java/org/apache/qpid/framing/QueueDeleteBody.java",
            "status": "modified",
            "additions": 136,
            "deletions": 10,
            "changes": 146,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueueDeleteBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueueDeleteBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueueDeleteBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "6d50153c15c05c1d38666c1ec22def09e896a5a7",
            "filename": "common/src/main/java/org/apache/qpid/framing/QueueDeleteOkBody.java",
            "status": "modified",
            "additions": 77,
            "deletions": 6,
            "changes": 83,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueueDeleteOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueueDeleteOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueueDeleteOkBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "58a424387c53aab8ad35f06eb3b2f981af6eb016",
            "filename": "common/src/main/java/org/apache/qpid/framing/QueuePurgeBody.java",
            "status": "modified",
            "additions": 108,
            "deletions": 8,
            "changes": 116,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueuePurgeBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueuePurgeBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueuePurgeBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "acab2bc0528d6056b59306d17ca787c0d6588279",
            "filename": "common/src/main/java/org/apache/qpid/framing/QueuePurgeOkBody.java",
            "status": "modified",
            "additions": 77,
            "deletions": 6,
            "changes": 83,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueuePurgeOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueuePurgeOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueuePurgeOkBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "30c5d19d2764cbad8c3a741bf0719e87583e4f10",
            "filename": "common/src/main/java/org/apache/qpid/framing/QueueUnbindBody.java",
            "status": "modified",
            "additions": 130,
            "deletions": 10,
            "changes": 140,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueueUnbindBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueueUnbindBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueueUnbindBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "2e504d6fc7c2534e9105562a839fb752d1f0c39b",
            "filename": "common/src/main/java/org/apache/qpid/framing/QueueUnbindOkBody.java",
            "status": "modified",
            "additions": 58,
            "deletions": 5,
            "changes": 63,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueueUnbindOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueueUnbindOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FQueueUnbindOkBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "89b75c2d2f3fbd81082a20966c4700a3fa5e2d32",
            "filename": "common/src/main/java/org/apache/qpid/framing/ServerChannelMethodProcessor.java",
            "status": "added",
            "additions": 92,
            "deletions": 0,
            "changes": 92,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FServerChannelMethodProcessor.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FServerChannelMethodProcessor.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FServerChannelMethodProcessor.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "f4ab67dad45333a981a8b27bc26471a7ec321b97",
            "filename": "common/src/main/java/org/apache/qpid/framing/ServerMethodDispatcher.java",
            "status": "modified",
            "additions": 5,
            "deletions": 1,
            "changes": 6,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FServerMethodDispatcher.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FServerMethodDispatcher.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FServerMethodDispatcher.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "77b4a1fc6bf4e5bfb141fe8ab1d527a316541654",
            "filename": "common/src/main/java/org/apache/qpid/framing/ServerMethodProcessor.java",
            "status": "renamed",
            "additions": 9,
            "deletions": 19,
            "changes": 28,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FServerMethodProcessor.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FServerMethodProcessor.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FServerMethodProcessor.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3",
            "previous_filename": "common/src/main/java/org/apache/qpid/framing/FileConsumeBody.java"
        },
        {
            "sha": "f5325ae4c00d0af6803874d0628c4c2d1f0bdbc1",
            "filename": "common/src/main/java/org/apache/qpid/framing/StreamCancelBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 38,
            "changes": 38,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FStreamCancelBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FStreamCancelBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FStreamCancelBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "f19410d97ff736f350179093faa9b3368c4cc32b",
            "filename": "common/src/main/java/org/apache/qpid/framing/StreamCancelOkBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 36,
            "changes": 36,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FStreamCancelOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FStreamCancelOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FStreamCancelOkBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "3d089823e290b97ce60589302037f30698516c8a",
            "filename": "common/src/main/java/org/apache/qpid/framing/StreamConsumeOkBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 36,
            "changes": 36,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FStreamConsumeOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FStreamConsumeOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FStreamConsumeOkBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "76a6231ad6cd05a8db9230dd45db9ee338fa4bfd",
            "filename": "common/src/main/java/org/apache/qpid/framing/StreamDeliverBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 42,
            "changes": 42,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FStreamDeliverBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FStreamDeliverBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FStreamDeliverBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "98860389bcc3ab598ec65e5d37250fddce9e7c21",
            "filename": "common/src/main/java/org/apache/qpid/framing/StreamPublishBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 44,
            "changes": 44,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FStreamPublishBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FStreamPublishBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FStreamPublishBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "e28c4abd59fe6e2330fe46b5e3f6541ea3e9da90",
            "filename": "common/src/main/java/org/apache/qpid/framing/StreamQosBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 42,
            "changes": 42,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FStreamQosBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FStreamQosBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FStreamQosBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "1a71ba1dfaf0f9a516b731ebe282a6e70de53732",
            "filename": "common/src/main/java/org/apache/qpid/framing/StreamQosOkBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 34,
            "changes": 34,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FStreamQosOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FStreamQosOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FStreamQosOkBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "e87863080d751e8a9f8a43d4cb314496559d6ae0",
            "filename": "common/src/main/java/org/apache/qpid/framing/StreamReturnBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 42,
            "changes": 42,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FStreamReturnBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FStreamReturnBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FStreamReturnBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "96b5a056c522dc85675acfa5b6aa018f02954e46",
            "filename": "common/src/main/java/org/apache/qpid/framing/TestContentBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 34,
            "changes": 34,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTestContentBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTestContentBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTestContentBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "9da514a20beee37450d91d36e3f7465076392933",
            "filename": "common/src/main/java/org/apache/qpid/framing/TestContentOkBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 36,
            "changes": 36,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTestContentOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTestContentOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTestContentOkBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "a024aba9c6c074b6776e9fc164a6d97d919be77f",
            "filename": "common/src/main/java/org/apache/qpid/framing/TestIntegerBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 44,
            "changes": 44,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTestIntegerBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTestIntegerBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTestIntegerBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "7f7003031cc04c868ceecdb8fde7b30a75a04cf5",
            "filename": "common/src/main/java/org/apache/qpid/framing/TestIntegerOkBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 36,
            "changes": 36,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTestIntegerOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTestIntegerOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTestIntegerOkBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "9474521aadc01c790705ad67030bac56ac88bc72",
            "filename": "common/src/main/java/org/apache/qpid/framing/TestStringBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 40,
            "changes": 40,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTestStringBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTestStringBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTestStringBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "7dc519a92e89752bce3be05b6a3964fd95957aca",
            "filename": "common/src/main/java/org/apache/qpid/framing/TestStringOkBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 36,
            "changes": 36,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTestStringOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTestStringOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTestStringOkBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "4b80b72771dcb98c19da02e61d892259b9897d41",
            "filename": "common/src/main/java/org/apache/qpid/framing/TestTableBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 40,
            "changes": 40,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTestTableBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTestTableBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTestTableBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "af3f3ca8647db9e8bc2bc39b910fafcc04d3c552",
            "filename": "common/src/main/java/org/apache/qpid/framing/TestTableOkBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 38,
            "changes": 38,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTestTableOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTestTableOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTestTableOkBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "98785aa4ccc7bb39f4a08d72c788e924d5fdf5f1",
            "filename": "common/src/main/java/org/apache/qpid/framing/TunnelRequestBody.java",
            "status": "removed",
            "additions": 0,
            "deletions": 36,
            "changes": 36,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTunnelRequestBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTunnelRequestBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTunnelRequestBody.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "63c12dffc649551362160223d7ec4ad6ed203912",
            "filename": "common/src/main/java/org/apache/qpid/framing/TxCommitBody.java",
            "status": "modified",
            "additions": 51,
            "deletions": 5,
            "changes": 56,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTxCommitBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTxCommitBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTxCommitBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "c1a8dd0d23839d71bf89e29705957a46ae90d15d",
            "filename": "common/src/main/java/org/apache/qpid/framing/TxCommitOkBody.java",
            "status": "modified",
            "additions": 49,
            "deletions": 5,
            "changes": 54,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTxCommitOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTxCommitOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTxCommitOkBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "97ac5ddcba1a68861ebdcf46ff2e879e4a5474d8",
            "filename": "common/src/main/java/org/apache/qpid/framing/TxRollbackBody.java",
            "status": "modified",
            "additions": 49,
            "deletions": 5,
            "changes": 54,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTxRollbackBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTxRollbackBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTxRollbackBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "d8ab92c1c33d8de9a2a9515f610fe2ba9e9bef3b",
            "filename": "common/src/main/java/org/apache/qpid/framing/TxRollbackOkBody.java",
            "status": "modified",
            "additions": 50,
            "deletions": 5,
            "changes": 55,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTxRollbackOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTxRollbackOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTxRollbackOkBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "79af85f1770ac4249eeda1b8c4f4badaf305a9c0",
            "filename": "common/src/main/java/org/apache/qpid/framing/TxSelectBody.java",
            "status": "modified",
            "additions": 52,
            "deletions": 5,
            "changes": 57,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTxSelectBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTxSelectBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTxSelectBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "64c8979deb827bc3de8ca169e2cc033c9cf18f30",
            "filename": "common/src/main/java/org/apache/qpid/framing/TxSelectOkBody.java",
            "status": "modified",
            "additions": 48,
            "deletions": 5,
            "changes": 53,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTxSelectOkBody.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/e91f279199ac5419d71ba7b15070c585f4962eb3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTxSelectOkBody.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2FTxSelectOkBody.java?ref=e91f279199ac5419d71ba7b15070c585f4962eb3"
        },
        {
            "sha": "1d7c05e9cc41cb7827107c92355456654c01150e",
            "filename": "common/src/main/java/org/apache/qpid/framing/abstraction/AbstractMethodConverter.java",
            "status": "removed",
            "additions": 0,
            "deletions": 47,
            "changes": 47,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Fabstraction%2FAbstractMethodConverter.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Fabstraction%2FAbstractMethodConverter.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Fabstraction%2FAbstractMethodConverter.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "a96bdcc17127fe51c30d10aa63effcbb6100c99f",
            "filename": "common/src/main/java/org/apache/qpid/framing/abstraction/MessagePublishInfo.java",
            "status": "removed",
            "additions": 0,
            "deletions": 38,
            "changes": 38,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Fabstraction%2FMessagePublishInfo.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Fabstraction%2FMessagePublishInfo.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Fabstraction%2FMessagePublishInfo.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "b3897771c5bd54e5c5c10785de6391ae60043e48",
            "filename": "common/src/main/java/org/apache/qpid/framing/abstraction/ProtocolVersionMethodConverter.java",
            "status": "removed",
            "additions": 0,
            "deletions": 30,
            "changes": 30,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Fabstraction%2FProtocolVersionMethodConverter.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Fabstraction%2FProtocolVersionMethodConverter.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Fabstraction%2FProtocolVersionMethodConverter.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "8d51343507240f7ed268ed2830aed1769bc45905",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/AMQMethodBody_0_9.java",
            "status": "removed",
            "additions": 0,
            "deletions": 37,
            "changes": 37,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FAMQMethodBody_0_9.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FAMQMethodBody_0_9.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FAMQMethodBody_0_9.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "88897e0ff66eff2665258cf63765c49356c890e7",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/AccessRequestBodyImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 181,
            "changes": 181,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FAccessRequestBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FAccessRequestBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FAccessRequestBodyImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "95087228f27efd00c411dc462c649d6f44602b85",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/AccessRequestOkBodyImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 111,
            "changes": 111,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FAccessRequestOkBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FAccessRequestOkBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FAccessRequestOkBodyImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "b1f9757391b8a433ef4f53987fe0a71b6c63d570",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/BasicAckBodyImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 128,
            "changes": 128,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicAckBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicAckBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicAckBodyImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "f536b9d8a572b8e30f28844fa00e047b27626669",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/BasicCancelBodyImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 129,
            "changes": 129,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicCancelBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicCancelBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicCancelBodyImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "ae2fe58ff93ca9f8a4ced4788c79ed72547d4671",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/BasicCancelOkBodyImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 112,
            "changes": 112,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicCancelOkBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicCancelOkBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicCancelOkBodyImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "177dc6ace21d69af309c5118b3cf207e30cb07d4",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/BasicConsumeBodyImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 207,
            "changes": 207,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicConsumeBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicConsumeBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicConsumeBodyImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "647c58cbc4823bcaad568fca01a04e22971d373e",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/BasicConsumeOkBodyImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 112,
            "changes": 112,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicConsumeOkBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicConsumeOkBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicConsumeOkBodyImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "3d2602e6054b48d8d03fc2179f56b7a230bda137",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/BasicDeliverBodyImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 168,
            "changes": 168,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicDeliverBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicDeliverBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicDeliverBodyImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "0b21ddf8e9a1ffac9ebdd6f50202b97243d6e17a",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/BasicGetBodyImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 141,
            "changes": 141,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicGetBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicGetBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicGetBodyImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "29cf72d0531df9b2bac7ed8a5c145ab6a4ef8d9c",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/BasicGetEmptyBodyImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 112,
            "changes": 112,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicGetEmptyBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicGetEmptyBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicGetEmptyBodyImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "00bbdd7082270ee9cacacf68f892e229d1294365",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/BasicGetOkBodyImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 167,
            "changes": 167,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicGetOkBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicGetOkBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicGetOkBodyImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "b9f941b85e7ca922d64b6e530985303b1661edce",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/BasicPublishBodyImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 167,
            "changes": 167,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicPublishBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicPublishBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicPublishBodyImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "c461f6b118343feac67c10074d25d1d8c5a3a3c7",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/BasicQosBodyImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 140,
            "changes": 140,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicQosBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicQosBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicQosBodyImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "9bc5d6f3b819c32ab5b8cc07264fbaba43d5f5fb",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/BasicQosOkBodyImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 100,
            "changes": 100,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicQosOkBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicQosOkBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicQosOkBodyImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "498e8f85dc9eca9fed7cf7fc583322b687736d14",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/BasicRecoverBodyImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 116,
            "changes": 116,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicRecoverBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicRecoverBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicRecoverBodyImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "05390ea493a07611fbb6b83d7c897d4905283f7b",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/BasicRecoverSyncBodyImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 116,
            "changes": 116,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicRecoverSyncBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicRecoverSyncBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicRecoverSyncBodyImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "0b889e4a21aa07552e303dc63048a6ee47000a0d",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/BasicRecoverSyncOkBodyImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 100,
            "changes": 100,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicRecoverSyncOkBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicRecoverSyncOkBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicRecoverSyncOkBodyImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "3e8cf6b8259f516f6d4ad8d441f0bb4331555446",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/BasicRejectBodyImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 128,
            "changes": 128,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicRejectBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicRejectBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicRejectBodyImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "c88391dca3522335f5434fd25dedacc9b2517f79",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/BasicReturnBodyImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 150,
            "changes": 150,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicReturnBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicReturnBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FBasicReturnBodyImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "ceadeb8f7c2475d10fc8172e6db7a04442986650",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/ChannelCloseBodyImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 148,
            "changes": 148,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FChannelCloseBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FChannelCloseBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FChannelCloseBodyImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "5df83134f771ac64254ebd058ff0e8cb901f3319",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/ChannelCloseOkBodyImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 100,
            "changes": 100,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FChannelCloseOkBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FChannelCloseOkBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FChannelCloseOkBodyImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "62e9bf90a005108f84ce05ffe7b3414fbbb83ee5",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/ChannelFlowBodyImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 116,
            "changes": 116,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FChannelFlowBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FChannelFlowBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FChannelFlowBodyImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "5c73bd2ff4efa7c3f1447655dd2cad75bbf915a9",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/ChannelFlowOkBodyImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 116,
            "changes": 116,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FChannelFlowOkBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FChannelFlowOkBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FChannelFlowOkBodyImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "7945fcec4764a2d97e3b856557b69d20973505aa",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/ChannelOkBodyImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 100,
            "changes": 100,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FChannelOkBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FChannelOkBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FChannelOkBodyImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "10c06cb1324b5f590417df1b2f0224db7b27f2f8",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/ChannelOpenBodyImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 112,
            "changes": 112,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FChannelOpenBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FChannelOpenBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FChannelOpenBodyImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "1c2a3f4a5756b7c2fa0e5292fbdf515ea967d721",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/ChannelOpenOkBodyImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 112,
            "changes": 112,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FChannelOpenOkBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FChannelOpenOkBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FChannelOpenOkBodyImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        },
        {
            "sha": "ba02f17b99164c578606e6b803ae7b6acf524843",
            "filename": "common/src/main/java/org/apache/qpid/framing/amqp_0_9/ChannelPingBodyImpl.java",
            "status": "removed",
            "additions": 0,
            "deletions": 100,
            "changes": 100,
            "blob_url": "https://github.com/apache/qpid-broker-j/blob/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FChannelPingBodyImpl.java",
            "raw_url": "https://github.com/apache/qpid-broker-j/raw/1d643884270f1cd44d12063938828540fb9228fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FChannelPingBodyImpl.java",
            "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fqpid%2Fframing%2Famqp_0_9%2FChannelPingBodyImpl.java?ref=1d643884270f1cd44d12063938828540fb9228fa"
        }
    ]
}