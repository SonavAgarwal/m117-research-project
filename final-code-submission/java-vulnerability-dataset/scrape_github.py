import csv
import os
import requests

# Your GitHub personal access token for authentication
GITHUB_TOKEN = "" # make a token here: https://github.com/settings/tokens

# Path to the CSV file
CSV_FILE_PATH = "scrape_fixing.csv"

# Directory to save the commit responses
OUTPUT_DIR = "commit_files_fixing" # rename based on if fixing or introducing
os.makedirs(OUTPUT_DIR, exist_ok=True)

def fetch_commit_data(repository_url, commit_hash):
    # Extract owner and repo from the repository URL
    try:
        _, owner, repo = repository_url.rstrip('/').rsplit('/', 2)
    except ValueError:
        print(f"Invalid repository URL: {repository_url}")
        return None

    # API endpoint for the commit
    api_url = f"https://api.github.com/repos/{owner}/{repo}/commits/{commit_hash}"
    headers = {
        "Authorization": f"token {GITHUB_TOKEN}",
        "Accept": "application/vnd.github.v3+json",
    }

    # Make the request to the GitHub API
    response = requests.get(api_url, headers=headers)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Failed to fetch commit data for {repository_url} {commit_hash} ({response.status_code}): {response.text}")
        return None

def main():
    # Open the CSV file
    with open(CSV_FILE_PATH, mode='r') as csv_file:
        reader = csv.DictReader(csv_file)
        for row in reader:
            repository_url = row["repository"]
            refs = row["ref"].split(",")  # Split refs by comma

            for commit_hash in map(str.strip, refs):  # Strip whitespace for each ref
                # Fetch the commit data
                commit_data = fetch_commit_data(repository_url, commit_hash)
                if commit_data:
                    # Save to a file named commit-<hash>.json
                    output_file = os.path.join(OUTPUT_DIR, f"commit-{commit_hash}.json")
                    with open(output_file, "w") as file:
                        import json
                        json.dump(commit_data, file, indent=4)
                    print(f"Saved commit data to {output_file}")

if __name__ == "__main__":
    main()
