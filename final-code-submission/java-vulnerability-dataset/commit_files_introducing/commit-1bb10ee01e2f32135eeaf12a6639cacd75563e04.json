{
    "sha": "1bb10ee01e2f32135eeaf12a6639cacd75563e04",
    "node_id": "MDY6Q29tbWl0MTg2MjcxMjY6MWJiMTBlZTAxZTJmMzIxMzVlZWFmMTJhNjYzOWNhY2Q3NTU2M2UwNA==",
    "commit": {
        "author": {
            "name": "Olivier Lamy",
            "email": "olamy@apache.org",
            "date": "2011-09-08T20:15:23Z"
        },
        "committer": {
            "name": "Olivier Lamy",
            "email": "olamy@apache.org",
            "date": "2011-09-08T20:15:23Z"
        },
        "message": "[MRM-1511] api to configure LegacyArtifactPath create services\nand add some beans for other archiva admin service\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1166882 13f79535-47bb-0310-9956-ffa450edef68",
        "tree": {
            "sha": "4cb571bf99b9675371f2cd5aa410e687feaa12ea",
            "url": "https://api.github.com/repos/apache/archiva/git/trees/4cb571bf99b9675371f2cd5aa410e687feaa12ea"
        },
        "url": "https://api.github.com/repos/apache/archiva/git/commits/1bb10ee01e2f32135eeaf12a6639cacd75563e04",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null,
            "verified_at": null
        }
    },
    "url": "https://api.github.com/repos/apache/archiva/commits/1bb10ee01e2f32135eeaf12a6639cacd75563e04",
    "html_url": "https://github.com/apache/archiva/commit/1bb10ee01e2f32135eeaf12a6639cacd75563e04",
    "comments_url": "https://api.github.com/repos/apache/archiva/commits/1bb10ee01e2f32135eeaf12a6639cacd75563e04/comments",
    "author": {
        "login": "olamy",
        "id": 19728,
        "node_id": "MDQ6VXNlcjE5NzI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/19728?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/olamy",
        "html_url": "https://github.com/olamy",
        "followers_url": "https://api.github.com/users/olamy/followers",
        "following_url": "https://api.github.com/users/olamy/following{/other_user}",
        "gists_url": "https://api.github.com/users/olamy/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/olamy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/olamy/subscriptions",
        "organizations_url": "https://api.github.com/users/olamy/orgs",
        "repos_url": "https://api.github.com/users/olamy/repos",
        "events_url": "https://api.github.com/users/olamy/events{/privacy}",
        "received_events_url": "https://api.github.com/users/olamy/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "committer": {
        "login": "olamy",
        "id": 19728,
        "node_id": "MDQ6VXNlcjE5NzI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/19728?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/olamy",
        "html_url": "https://github.com/olamy",
        "followers_url": "https://api.github.com/users/olamy/followers",
        "following_url": "https://api.github.com/users/olamy/following{/other_user}",
        "gists_url": "https://api.github.com/users/olamy/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/olamy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/olamy/subscriptions",
        "organizations_url": "https://api.github.com/users/olamy/orgs",
        "repos_url": "https://api.github.com/users/olamy/repos",
        "events_url": "https://api.github.com/users/olamy/events{/privacy}",
        "received_events_url": "https://api.github.com/users/olamy/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "cd10c1cde834b98445b95c7ddd9818da79098bc4",
            "url": "https://api.github.com/repos/apache/archiva/commits/cd10c1cde834b98445b95c7ddd9818da79098bc4",
            "html_url": "https://github.com/apache/archiva/commit/cd10c1cde834b98445b95c7ddd9818da79098bc4"
        }
    ],
    "stats": {
        "total": 560,
        "additions": 559,
        "deletions": 1
    },
    "files": [
        {
            "sha": "58ac3a0877f661a968fa23daf4aed1e955e64eb3",
            "filename": "archiva-modules/archiva-base/archiva-configuration/src/main/mdo/configuration.mdo",
            "status": "modified",
            "additions": 28,
            "deletions": 0,
            "changes": 28,
            "blob_url": "https://github.com/apache/archiva/blob/1bb10ee01e2f32135eeaf12a6639cacd75563e04/archiva-modules%2Farchiva-base%2Farchiva-configuration%2Fsrc%2Fmain%2Fmdo%2Fconfiguration.mdo",
            "raw_url": "https://github.com/apache/archiva/raw/1bb10ee01e2f32135eeaf12a6639cacd75563e04/archiva-modules%2Farchiva-base%2Farchiva-configuration%2Fsrc%2Fmain%2Fmdo%2Fconfiguration.mdo",
            "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-base%2Farchiva-configuration%2Fsrc%2Fmain%2Fmdo%2Fconfiguration.mdo?ref=1bb10ee01e2f32135eeaf12a6639cacd75563e04",
            "patch": "@@ -646,6 +646,34 @@\n     {\n         return artifact.split( \":\" )[4];\n     }\n+\n+    @Override\n+    public boolean equals( Object o )\n+    {\n+        if ( this == o )\n+        {\n+            return true;\n+        }\n+        if ( o == null || getClass() != o.getClass() )\n+        {\n+            return false;\n+        }\n+\n+        LegacyArtifactPath that = (LegacyArtifactPath) o;\n+\n+        if ( path != null ? !path.equals( that.path ) : that.path != null )\n+        {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+        return path != null ? 37 + path.hashCode() : 0;\n+    }\n        ]]></code>\n         </codeSegment>\n       </codeSegments>"
        },
        {
            "sha": "d917a6a48a5f0633dc9229873bb08d84999503ee",
            "filename": "archiva-modules/archiva-base/archiva-repository-admin/src/main/java/org/apache/archiva/admin/repository/AbstractRepositoryAdmin.java",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/apache/archiva/blob/1bb10ee01e2f32135eeaf12a6639cacd75563e04/archiva-modules%2Farchiva-base%2Farchiva-repository-admin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fadmin%2Frepository%2FAbstractRepositoryAdmin.java",
            "raw_url": "https://github.com/apache/archiva/raw/1bb10ee01e2f32135eeaf12a6639cacd75563e04/archiva-modules%2Farchiva-base%2Farchiva-repository-admin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fadmin%2Frepository%2FAbstractRepositoryAdmin.java",
            "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-base%2Farchiva-repository-admin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fadmin%2Frepository%2FAbstractRepositoryAdmin.java?ref=1bb10ee01e2f32135eeaf12a6639cacd75563e04",
            "patch": "@@ -24,10 +24,11 @@\n import org.apache.maven.archiva.configuration.ArchivaConfiguration;\n import org.apache.maven.archiva.configuration.Configuration;\n import org.apache.maven.archiva.configuration.IndeterminateConfigurationException;\n-import org.apache.maven.archiva.configuration.ProxyConnectorConfiguration;\n import org.codehaus.plexus.redback.users.User;\n import org.codehaus.plexus.registry.Registry;\n import org.codehaus.plexus.registry.RegistryException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import javax.inject.Inject;\n import javax.inject.Named;\n@@ -40,6 +41,7 @@\n  */\n public abstract class AbstractRepositoryAdmin\n {\n+    protected Logger log = LoggerFactory.getLogger( getClass() );\n \n     @Inject\n     private List<AuditListener> auditListeners = new ArrayList<AuditListener>();"
        },
        {
            "sha": "589e9a78c49f23c662b223cc8b42fbfb32d2ed15",
            "filename": "archiva-modules/archiva-base/archiva-repository-admin/src/main/java/org/apache/archiva/admin/repository/admin/ArchivaAdministration.java",
            "status": "added",
            "additions": 40,
            "deletions": 0,
            "changes": 40,
            "blob_url": "https://github.com/apache/archiva/blob/1bb10ee01e2f32135eeaf12a6639cacd75563e04/archiva-modules%2Farchiva-base%2Farchiva-repository-admin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fadmin%2Frepository%2Fadmin%2FArchivaAdministration.java",
            "raw_url": "https://github.com/apache/archiva/raw/1bb10ee01e2f32135eeaf12a6639cacd75563e04/archiva-modules%2Farchiva-base%2Farchiva-repository-admin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fadmin%2Frepository%2Fadmin%2FArchivaAdministration.java",
            "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-base%2Farchiva-repository-admin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fadmin%2Frepository%2Fadmin%2FArchivaAdministration.java?ref=1bb10ee01e2f32135eeaf12a6639cacd75563e04",
            "patch": "@@ -0,0 +1,40 @@\n+package org.apache.archiva.admin.repository.admin;\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import org.apache.archiva.admin.repository.RepositoryAdminException;\n+\n+import java.util.List;\n+\n+/**\n+ * @author Olivier Lamy\n+ * @since 1.4\n+ */\n+public interface ArchivaAdministration\n+{\n+\n+    List<LegacyArtifactPath> getLegacyArtifactPaths()\n+        throws RepositoryAdminException;\n+\n+    void addLegacyArtifactPath( LegacyArtifactPath legacyArtifactPath )\n+        throws RepositoryAdminException;\n+\n+    void deleteLegacyArtifactPath( String path )\n+        throws RepositoryAdminException;\n+}"
        },
        {
            "sha": "ac2b89e568da4ab58180eb0518f85ea2957be455",
            "filename": "archiva-modules/archiva-base/archiva-repository-admin/src/main/java/org/apache/archiva/admin/repository/admin/DefaultArchivaAdministration.java",
            "status": "added",
            "additions": 73,
            "deletions": 0,
            "changes": 73,
            "blob_url": "https://github.com/apache/archiva/blob/1bb10ee01e2f32135eeaf12a6639cacd75563e04/archiva-modules%2Farchiva-base%2Farchiva-repository-admin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fadmin%2Frepository%2Fadmin%2FDefaultArchivaAdministration.java",
            "raw_url": "https://github.com/apache/archiva/raw/1bb10ee01e2f32135eeaf12a6639cacd75563e04/archiva-modules%2Farchiva-base%2Farchiva-repository-admin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fadmin%2Frepository%2Fadmin%2FDefaultArchivaAdministration.java",
            "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-base%2Farchiva-repository-admin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fadmin%2Frepository%2Fadmin%2FDefaultArchivaAdministration.java?ref=1bb10ee01e2f32135eeaf12a6639cacd75563e04",
            "patch": "@@ -0,0 +1,73 @@\n+package org.apache.archiva.admin.repository.admin;\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import net.sf.beanlib.provider.replicator.BeanReplicator;\n+import org.apache.archiva.admin.repository.AbstractRepositoryAdmin;\n+import org.apache.archiva.admin.repository.RepositoryAdminException;\n+import org.apache.maven.archiva.configuration.Configuration;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * @author Olivier Lamy\n+ */\n+@Service(\"archivaAdministration#default\")\n+public class DefaultArchivaAdministration\n+    extends AbstractRepositoryAdmin\n+    implements ArchivaAdministration\n+{\n+    public List<LegacyArtifactPath> getLegacyArtifactPaths()\n+        throws RepositoryAdminException\n+    {\n+        List<LegacyArtifactPath> legacyArtifactPaths = new ArrayList<LegacyArtifactPath>();\n+        for ( org.apache.maven.archiva.configuration.LegacyArtifactPath legacyArtifactPath : getArchivaConfiguration().getConfiguration().getLegacyArtifactPaths() )\n+        {\n+            legacyArtifactPaths.add(\n+                new BeanReplicator().replicateBean( legacyArtifactPath, LegacyArtifactPath.class ) );\n+        }\n+        return legacyArtifactPaths;\n+    }\n+\n+    public void addLegacyArtifactPath( LegacyArtifactPath legacyArtifactPath )\n+        throws RepositoryAdminException\n+    {\n+        Configuration configuration = getArchivaConfiguration().getConfiguration();\n+\n+        configuration.addLegacyArtifactPath( new BeanReplicator().replicateBean( legacyArtifactPath,\n+                                                                                 org.apache.maven.archiva.configuration.LegacyArtifactPath.class ) );\n+\n+        saveConfiguration( configuration );\n+    }\n+\n+    public void deleteLegacyArtifactPath( String path )\n+        throws RepositoryAdminException\n+    {\n+        Configuration configuration = getArchivaConfiguration().getConfiguration();\n+        org.apache.maven.archiva.configuration.LegacyArtifactPath legacyArtifactPath =\n+            new org.apache.maven.archiva.configuration.LegacyArtifactPath();\n+\n+        legacyArtifactPath.setPath( path );\n+        configuration.removeLegacyArtifactPath( legacyArtifactPath );\n+\n+        saveConfiguration( configuration );\n+    }\n+}"
        },
        {
            "sha": "eba5b262ce91e64702aae982eec734b82cde80f1",
            "filename": "archiva-modules/archiva-base/archiva-repository-admin/src/main/java/org/apache/archiva/admin/repository/admin/FileType.java",
            "status": "added",
            "additions": 109,
            "deletions": 0,
            "changes": 109,
            "blob_url": "https://github.com/apache/archiva/blob/1bb10ee01e2f32135eeaf12a6639cacd75563e04/archiva-modules%2Farchiva-base%2Farchiva-repository-admin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fadmin%2Frepository%2Fadmin%2FFileType.java",
            "raw_url": "https://github.com/apache/archiva/raw/1bb10ee01e2f32135eeaf12a6639cacd75563e04/archiva-modules%2Farchiva-base%2Farchiva-repository-admin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fadmin%2Frepository%2Fadmin%2FFileType.java",
            "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-base%2Farchiva-repository-admin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fadmin%2Frepository%2Fadmin%2FFileType.java?ref=1bb10ee01e2f32135eeaf12a6639cacd75563e04",
            "patch": "@@ -0,0 +1,109 @@\n+package org.apache.archiva.admin.repository.admin;\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * @author Olivier Lamy\n+ * @since 1.4\n+ */\n+public class FileType\n+    implements Serializable\n+{\n+    /**\n+     * Field id.\n+     */\n+    private String id;\n+\n+    /**\n+     * Field patterns.\n+     */\n+    private List<String> patterns;\n+\n+    public FileType()\n+    {\n+        // no op\n+    }\n+\n+    public FileType( String id, List<String> patterns )\n+    {\n+        this.id = id;\n+        this.patterns = patterns;\n+    }\n+\n+    public String getId()\n+    {\n+        return id;\n+    }\n+\n+    public void setId( String id )\n+    {\n+        this.id = id;\n+    }\n+\n+    public List<String> getPatterns()\n+    {\n+        if ( patterns == null )\n+        {\n+            this.patterns = new ArrayList<String>();\n+        }\n+        return patterns;\n+    }\n+\n+    public void setPatterns( List<String> patterns )\n+    {\n+        this.patterns = patterns;\n+    }\n+\n+    public void addPattern( String pattern )\n+    {\n+        getPatterns().add( pattern );\n+    }\n+\n+    @Override\n+    public boolean equals( Object o )\n+    {\n+        if ( this == o )\n+        {\n+            return true;\n+        }\n+        if ( o == null || getClass() != o.getClass() )\n+        {\n+            return false;\n+        }\n+\n+        FileType fileType = (FileType) o;\n+\n+        if ( id != null ? !id.equals( fileType.id ) : fileType.id != null )\n+        {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+        return id != null ? 37 + id.hashCode() : 0;\n+    }\n+}"
        },
        {
            "sha": "e9489489e452d3ef401158f19994763ae5ad6845",
            "filename": "archiva-modules/archiva-base/archiva-repository-admin/src/main/java/org/apache/archiva/admin/repository/admin/LegacyArtifactPath.java",
            "status": "added",
            "additions": 141,
            "deletions": 0,
            "changes": 141,
            "blob_url": "https://github.com/apache/archiva/blob/1bb10ee01e2f32135eeaf12a6639cacd75563e04/archiva-modules%2Farchiva-base%2Farchiva-repository-admin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fadmin%2Frepository%2Fadmin%2FLegacyArtifactPath.java",
            "raw_url": "https://github.com/apache/archiva/raw/1bb10ee01e2f32135eeaf12a6639cacd75563e04/archiva-modules%2Farchiva-base%2Farchiva-repository-admin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fadmin%2Frepository%2Fadmin%2FLegacyArtifactPath.java",
            "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-base%2Farchiva-repository-admin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fadmin%2Frepository%2Fadmin%2FLegacyArtifactPath.java?ref=1bb10ee01e2f32135eeaf12a6639cacd75563e04",
            "patch": "@@ -0,0 +1,141 @@\n+package org.apache.archiva.admin.repository.admin;\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.Serializable;\n+\n+/**\n+ * @author Olivier Lamy\n+ * @since 1.4\n+ */\n+public class LegacyArtifactPath\n+    implements Serializable\n+{\n+    /**\n+     * The legacy path.\n+     */\n+    private String path;\n+\n+    /**\n+     * The artifact reference, as \" [groupId] :\n+     * [artifactId] : [version] : [classifier] : [type] \".\n+     */\n+    private String artifact;\n+\n+    public LegacyArtifactPath()\n+    {\n+        // no op\n+    }\n+\n+    public LegacyArtifactPath( String path, String artifact )\n+    {\n+        this.path = path;\n+        this.artifact = artifact;\n+    }\n+\n+    public String getPath()\n+    {\n+        return path;\n+    }\n+\n+    public void setPath( String path )\n+    {\n+        this.path = path;\n+    }\n+\n+    public String getArtifact()\n+    {\n+        return artifact;\n+    }\n+\n+    public void setArtifact( String artifact )\n+    {\n+        this.artifact = artifact;\n+    }\n+\n+    public boolean match( String path )\n+    {\n+        return path.equals( this.path );\n+    }\n+\n+    public String getGroupId()\n+    {\n+        return artifact.split( \":\" )[0];\n+    }\n+\n+    public String getArtifactId()\n+    {\n+        return artifact.split( \":\" )[1];\n+    }\n+\n+    public String getVersion()\n+    {\n+        return artifact.split( \":\" )[2];\n+    }\n+\n+    public String getClassifier()\n+    {\n+        String classifier = artifact.split( \":\" )[3];\n+        return classifier.length() > 0 ? classifier : null;\n+    }\n+\n+    public String getType()\n+    {\n+        return artifact.split( \":\" )[4];\n+    }\n+\n+    @Override\n+    public boolean equals( Object o )\n+    {\n+        if ( this == o )\n+        {\n+            return true;\n+        }\n+        if ( o == null || getClass() != o.getClass() )\n+        {\n+            return false;\n+        }\n+\n+        LegacyArtifactPath that = (LegacyArtifactPath) o;\n+\n+        if ( path != null ? !path.equals( that.path ) : that.path != null )\n+        {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+        return path != null ? 37 + path.hashCode() : 0;\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append( \"LegacyArtifactPath\" );\n+        sb.append( \"{path='\" ).append( path ).append( '\\'' );\n+        sb.append( \", artifact='\" ).append( artifact ).append( '\\'' );\n+        sb.append( '}' );\n+        return sb.toString();\n+    }\n+}"
        },
        {
            "sha": "2bb9db987c356e8e0f06d3ac1f1122a97d0d26ff",
            "filename": "archiva-modules/archiva-base/archiva-repository-admin/src/main/java/org/apache/archiva/admin/repository/admin/RepositoryScanning.java",
            "status": "added",
            "additions": 102,
            "deletions": 0,
            "changes": 102,
            "blob_url": "https://github.com/apache/archiva/blob/1bb10ee01e2f32135eeaf12a6639cacd75563e04/archiva-modules%2Farchiva-base%2Farchiva-repository-admin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fadmin%2Frepository%2Fadmin%2FRepositoryScanning.java",
            "raw_url": "https://github.com/apache/archiva/raw/1bb10ee01e2f32135eeaf12a6639cacd75563e04/archiva-modules%2Farchiva-base%2Farchiva-repository-admin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fadmin%2Frepository%2Fadmin%2FRepositoryScanning.java",
            "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-base%2Farchiva-repository-admin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fadmin%2Frepository%2Fadmin%2FRepositoryScanning.java?ref=1bb10ee01e2f32135eeaf12a6639cacd75563e04",
            "patch": "@@ -0,0 +1,102 @@\n+package org.apache.archiva.admin.repository.admin;\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import org.apache.maven.archiva.configuration.FileType;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * @author Olivier Lamy\n+ */\n+public class RepositoryScanning\n+    implements Serializable\n+{\n+    /**\n+     * Field fileTypes.\n+     */\n+    private List<FileType> fileTypes;\n+\n+    /**\n+     * Field knownContentConsumers.\n+     */\n+    private List<String> knownContentConsumers;\n+\n+    /**\n+     * Field invalidContentConsumers.\n+     */\n+    private List<String> invalidContentConsumers;\n+\n+    public RepositoryScanning()\n+    {\n+        // no op\n+    }\n+\n+    public RepositoryScanning( List<FileType> fileTypes, List<String> knownContentConsumers,\n+                               List<String> invalidContentConsumers )\n+    {\n+        this.fileTypes = fileTypes;\n+        this.knownContentConsumers = knownContentConsumers;\n+        this.invalidContentConsumers = invalidContentConsumers;\n+    }\n+\n+    public List<FileType> getFileTypes()\n+    {\n+        if ( this.fileTypes == null )\n+        {\n+            this.fileTypes = new ArrayList<FileType>();\n+        }\n+        return fileTypes;\n+    }\n+\n+    public void setFileTypes( List<FileType> fileTypes )\n+    {\n+        this.fileTypes = fileTypes;\n+    }\n+\n+    public List<String> getKnownContentConsumers()\n+    {\n+        if ( this.knownContentConsumers == null )\n+        {\n+            this.knownContentConsumers = new ArrayList<String>();\n+        }\n+        return knownContentConsumers;\n+    }\n+\n+    public void setKnownContentConsumers( List<String> knownContentConsumers )\n+    {\n+        this.knownContentConsumers = knownContentConsumers;\n+    }\n+\n+    public List<String> getInvalidContentConsumers()\n+    {\n+        if ( this.invalidContentConsumers == null )\n+        {\n+            this.invalidContentConsumers = new ArrayList<String>();\n+        }\n+        return invalidContentConsumers;\n+    }\n+\n+    public void setInvalidContentConsumers( List<String> invalidContentConsumers )\n+    {\n+        this.invalidContentConsumers = invalidContentConsumers;\n+    }\n+}"
        },
        {
            "sha": "76f283c3f6a976caa7279730a29a92761d6c1808",
            "filename": "archiva-modules/archiva-base/archiva-repository-admin/src/test/java/org/apache/archiva/admin/repository/admin/ArchivaAdministrationTest.java",
            "status": "added",
            "additions": 63,
            "deletions": 0,
            "changes": 63,
            "blob_url": "https://github.com/apache/archiva/blob/1bb10ee01e2f32135eeaf12a6639cacd75563e04/archiva-modules%2Farchiva-base%2Farchiva-repository-admin%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Farchiva%2Fadmin%2Frepository%2Fadmin%2FArchivaAdministrationTest.java",
            "raw_url": "https://github.com/apache/archiva/raw/1bb10ee01e2f32135eeaf12a6639cacd75563e04/archiva-modules%2Farchiva-base%2Farchiva-repository-admin%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Farchiva%2Fadmin%2Frepository%2Fadmin%2FArchivaAdministrationTest.java",
            "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-base%2Farchiva-repository-admin%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Farchiva%2Fadmin%2Frepository%2Fadmin%2FArchivaAdministrationTest.java?ref=1bb10ee01e2f32135eeaf12a6639cacd75563e04",
            "patch": "@@ -0,0 +1,63 @@\n+package org.apache.archiva.admin.repository.admin;\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import org.apache.archiva.admin.repository.AbstractRepositoryAdminTest;\n+import org.junit.Test;\n+\n+import javax.inject.Inject;\n+\n+/**\n+ * @author Olivier Lamy\n+ */\n+public class ArchivaAdministrationTest\n+    extends AbstractRepositoryAdminTest\n+{\n+    @Inject\n+    ArchivaAdministration archivaAdministration;\n+\n+\n+    @Test\n+    public void getAll()\n+        throws Exception\n+    {\n+        assertNotNull( archivaAdministration.getLegacyArtifactPaths() );\n+        assertFalse( archivaAdministration.getLegacyArtifactPaths().isEmpty() );\n+        assertEquals( 1, archivaAdministration.getLegacyArtifactPaths().size() );\n+        log.info( \"all legacy paths {}\", archivaAdministration.getLegacyArtifactPaths() );\n+    }\n+\n+    public void addAndDelete()\n+        throws Exception\n+    {\n+        int initialSize = archivaAdministration.getLegacyArtifactPaths().size();\n+\n+        LegacyArtifactPath legacyArtifactPath = new LegacyArtifactPath( \"foo\", \"bar\" );\n+        archivaAdministration.addLegacyArtifactPath( legacyArtifactPath );\n+\n+        assertTrue( archivaAdministration.getLegacyArtifactPaths().contains( new LegacyArtifactPath( \"foo\", \"bar\" ) ) );\n+        assertEquals( initialSize + 1, archivaAdministration.getLegacyArtifactPaths().size() );\n+\n+        archivaAdministration.deleteLegacyArtifactPath( legacyArtifactPath.getPath() );\n+\n+        assertFalse(\n+            archivaAdministration.getLegacyArtifactPaths().contains( new LegacyArtifactPath( \"foo\", \"bar\" ) ) );\n+        assertEquals( initialSize, archivaAdministration.getLegacyArtifactPaths().size() );\n+    }\n+}"
        }
    ]
}