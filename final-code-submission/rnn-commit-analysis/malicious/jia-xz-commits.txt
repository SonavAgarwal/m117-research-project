commit af071ef7702debef4f1d324616a0137a5001c14c
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Mar 26 01:50:02 2024 +0800

    Docs: Simplify SECURITY.md.

commit a4f2e20d8466369b1bb277c66f75c9e4ba9cc378
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Mar 9 11:27:27 2024 +0800

    Add NEWS for 5.6.1

commit f01be8ad754a905d8c418601767480ec11621b02
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Mar 9 10:43:20 2024 +0800

    Translations: Add missing --riscv option to man page translations.

commit 6e636819e8f070330d835fce46289a3ff72a7b89
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Mar 9 10:18:29 2024 +0800

    Tests: Update two test files.
    
    The original files were generated with random local to my machine.
    To better reproduce these files in the future, a constant seed was used
    to recreate these files.

commit a3a29bbd5d86183fc7eae8f0182dace374e778d8
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Mar 9 10:08:32 2024 +0800

    Tests: Test --single-stream can decompress bad-3-corrupt_lzma2.xz.
    
    The first stream in this file is valid, so this tests that xz properly
    stops after decompressing it.

commit 0b4ccc91454dbcf0bf521b9bd51aa270581ee23c
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Mar 9 10:05:32 2024 +0800

    Tests: Update RISC-V test files.
    
    This increases code coverage and tests for possible shifting bugs.

commit 8c9b8b2063daa78ead9f648c2ec3c91e8615dffb
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Mar 9 09:52:32 2024 +0800

    liblzma: Fix typos in crc32_fast.c and crc64_fast.c.

commit b93a8d7631d9517da63f03e0185455024a4609e8
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Mar 9 09:49:55 2024 +0800

    Tests: Replace HAVE_MICROLZMA usage in CMake and Autotools builds.
    
    This reverts commit adaacafde6661496ca2814b1e94a3ba5186428cb.

commit 82ecc538193b380a21622aea02b0ba078e7ade92
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Mar 9 09:20:57 2024 +0800

    liblzma: Fix false Valgrind error report with GCC.
    
    With GCC and a certain combination of flags, Valgrind will falsely
    trigger an invalid write. This appears to be due to the omission of
    instructions to properly save, set up, and restore the frame pointer.
    
    The IFUNC resolver is a leaf function since it only calls a function
    that is inlined. So sometimes GCC omits the frame pointer instructions
    in the resolver unless this optimization is explictly disabled.
    
    This fixes https://bugzilla.redhat.com/show_bug.cgi?id=2267598.

commit 72d2933bfae514e0dbb123488e9f1eb7cf64175f
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Mar 5 00:34:46 2024 +0800

    liblzma: Use attribute no_profile_instrument_function with ifunc.
    
    Thanks to Sam James for determining this was the attribute needed to
    workaround the GCC bug and for his version of the patch in Gentoo.

commit e5faaebbcf02ea880cfc56edc702d4f7298788ad
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Mar 5 00:27:31 2024 +0800

    Build: Require attribute no_profile_instrument_function for ifunc usage.
    
    Using __attribute__((__no_profile_instrument_function__)) on the ifunc
    resolver works around a bug in GCC -fprofile-generate:
    it adds profiling code even to ifunc resolvers which can make
    the ifunc resolver crash at program startup. This attribute
    was not introduced until GCC 7 and Clang 13, so ifunc won't
    be used with prior versions of these compilers.
    
    This bug was brought to our attention by:
    
        https://bugs.gentoo.org/925415
    
    And was reported to upstream GCC by:
    
        https://gcc.gnu.org/bugzilla/show_bug.cgi?id=11411

commit bbf112e32307a75a54a9e170bc392811443d5c87
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Feb 27 23:42:41 2024 +0800

    xz: Change logging level for thread reduction to highest verbosity only.
    
    Now that multi threaded encoding is the default, users do not need to
    see a warning message everytime the number of threads is reduced. On
    some machines, this could happen very often. It is not unreasonable for
    users to need to set double verbose mode to see this kind of
    information.
    
    To see these warning messages -vv or --verbose --verbose must be passed
    to set xz into the highest possible verbosity mode.
    
    These warnings had caused automated testing frameworks to fail when they
    expected no output to stderr.
    
    Thanks to Sebastian Andrzej Siewior for reporting this and for the
    initial version of the patch.

commit 1255b7d849bf53f196a842ef2a508ed0ff577eaa
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Feb 26 23:39:29 2024 +0800

    Update THANKS.

commit 328c52da8a2bbb81307644efdb58db2c422d9ba7
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Feb 26 23:02:06 2024 +0800

    Build: Fix Linux Landlock feature test in Autotools and CMake builds.
    
    The previous Linux Landlock feature test assumed that having the
    linux/landlock.h header file was enough. The new feature tests also
    requires that prctl() and the required Landlock system calls are
    supported.

commit eb8ad59e9bab32a8d655796afd39597ea6dcc64d
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Feb 26 20:06:10 2024 +0800

    Tests: Add test_microlzma to .gitignore and CMakeLists.txt.

commit 9eed1b9a3ae140e93a82febc05a0181e9a4f5093
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Feb 26 19:56:25 2024 +0800

    Tests: Correct license header in test_microlzma.c.

commit 8bf9f72ee1c05b9e205a72807e8a9e304785673d
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sun Feb 25 21:41:55 2024 +0800

    Fix typos in NEWS and CMakeLists.

commit 5d8d915ebe2e345820a0f54d1baf8d7d4824c0c7
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Feb 24 16:30:06 2024 +0800

    Bump version and soname for 5.7.0alpha.
    
    Like 5.5.0alpha, 5.7.0alpha won't be released, it's just to mark that
    the branch is not stable.
    
    Once again there is no API/ABI stability for new features in devel
    versions. The major soname won't be bumped even if API/ABI of new
    features breaks between devel releases.

commit a18fb1edef0d0aac12a09eed05e9c448c777af7b
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Feb 24 15:50:36 2024 +0800

    Add NEWS for 5.6.0.

commit 24355c5280bc95e3d594432d60bb8432aa6af173
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Feb 22 22:27:01 2024 +0800

    Translations: Remove obsolete and fuzzy matches from some translations.
    
    The French and Brazilian Portuguese man page translations have not been
    updated since the switch from public domain to 0BSD. The old GPLv2
    strings have now been removed from these files.

commit 02ca4a7d7b703e2ec63e00b70feec825e919dbc1
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Feb 21 00:31:54 2024 +0800

    Translations: Patch man pages to avoid fuzzy matches.
    
    This will be fixed in the next round of translations, but this avoids
    having a fuzzy match or not fixing the English version.

commit 898aad9fc711e03452d24d9e2c5b7f77a6f9ce64
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Feb 21 00:30:43 2024 +0800

    xzmore: Fix typo in xzmore.1.
    
    Thanks to Yuri Chornoivan.

commit 5631aa206c8d16b4eeab85a46b8b698f4fc4cdba
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Feb 24 12:12:16 2024 +0800

    Translations: Update the Vietnamese translation.

commit a65fd7ce9d6228e87faf61dc56a35984d0088248
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Feb 24 12:06:40 2024 +0800

    Translations: Update the Esperanto translation.

commit cf44e4b7f5dfdbf8c78aef377c10f71e274f63c0
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 23 23:09:59 2024 +0800

    Tests: Add a few test files.

commit 39f4a1a86ad80b2d064b812cee42668e6c8b8c73
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 23 20:58:36 2024 +0800

    Tests: Add MicroLZMA test.

commit adaacafde6661496ca2814b1e94a3ba5186428cb
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 23 20:57:59 2024 +0800

    Build: Define HAVE_MICROLZMA when it is configured.

commit eea78216d27182ca917bf00e02feaab058a4d21e
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 23 20:27:15 2024 +0800

    xz: Fix Capsicum sandbox compile error.
    
    user_abort_pipe[] was still being used instead of the parameters.

commit 32b0a3ce19224f9074d01a4ffbc1655b05fcb82d
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 23 16:12:32 2024 +0800

    Build: Fix ARM64 CRC32 instruction feature test.
    
    Old versions of Clang reported the unsupported function attribute and
    __crc32d() function as warnings instead of errors, so the feature test
    passed when it shouldn't have, causing a compile error at build time.
    -Werror was added to this feature test to fix this. The change is not
    needed for CMake because check_c_source_compiles() also performs
    linking and the error is caught then.
    
    Thanks to Sebastian Andrzej Siewior for reporting this.

commit 60462e42609a1d961868a1d1ebecc713c6d27e2e
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Feb 20 23:32:22 2024 +0800

    Translations: Update the Romanian man page translations.

commit 10d733e5b8929c642e00891cfa9ead9c2cdd2e05
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Feb 20 23:30:25 2024 +0800

    Translations: Update the Korean man page translations.

commit 797a34b72ac6baff237d7a546fa941d8f78f2f62
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Feb 20 21:03:53 2024 +0800

    Translations: Update the Spanish translation.

commit 5c3751d019f023e091df9a653e2bb1f6ea8b0d49
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Feb 20 20:18:07 2024 +0800

    Translations: Update the Romanian translation.

commit e2d31154ecc750935436e8b62c6b073b2cfa84e3
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Feb 20 20:15:50 2024 +0800

    Translations: Update the Croatian translation.

commit 704500f994d5ac271bfcfd592275c5a7da4dc8d2
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Feb 20 20:05:44 2024 +0800

    Translations: Update the German man page translations.

commit 1cfd3dca3fef321b06db73c3c9e13f347c2e2f5f
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Feb 20 19:58:25 2024 +0800

    Translations: Update the German translation.

commit 28b9b3f16cc7c6e5b42e691994569c17f4561c9a
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Feb 20 19:56:52 2024 +0800

    Translations: Update the Hungarian translation.

commit a7a3b62e2ab03c82b2bd5c78da1d1fb8b8490381
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sun Feb 18 01:09:11 2024 +0800

    Translations: Update the Korean man page translations.

commit 9b315db2d5e74700f3dc0755eb86c27947c0b393
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sun Feb 18 01:08:32 2024 +0800

    Translations: Update the Korean translation.

commit 3d198fb13b87f8803442e5799d465f7434a70555
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Feb 17 21:05:07 2024 +0800

    Translations: Update the Spanish translation.

commit cf278bfe60a25b54b3786f06503bc61272970820
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Feb 17 20:43:29 2024 +0800

    Translations: Update the Swedish translation.

commit b0f1a41be50560cc6cb528e8e96b02b2067c52c2
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Feb 17 20:41:38 2024 +0800

    Translations: Update the Polish translation.

commit d74ed48b30c631b6a4c7e7858b06828293bf8520
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Feb 17 20:41:02 2024 +0800

    Translations: Update the Ukrainian translation.

commit fb5f6aaf18584672d0fee5dbe41fd30fc6bf5422
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 16 22:53:46 2024 +0800

    Fix typos discovered by codespell.

commit c64723bbb094e29b4edd98f6fcce866e1b569b42
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 16 22:52:41 2024 +0800

    Translations: Update the Ukrainian man page translations.

commit 2895195ed0f68b245c7bd568c126ba6e685fa1d6
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 16 22:51:04 2024 +0800

    Translations: Update the Ukrainian translation.

commit 4323bc3e0c1e1d2037d5e670a3bf6633e8a3031e
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Feb 15 22:26:43 2024 +0800

    Update m4/.gitignore.

commit 6f1790254a03c5edf0f2976f773220f070450acd
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Feb 15 01:53:40 2024 +0800

    Bump version for 5.5.2beta.

commit de5c5e417645ad8906ef914bc059d08c1462fc29
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Feb 12 17:09:10 2024 +0200

    liblzma: Creates Non-resumable and Resumable modes for lzma_decoder.
    
    The new decoder resumes the first decoder loop in the Resumable mode.
    Then, the code executes in Non-resumable mode until it detects that it
    cannot guarantee to have enough input/output to decode another symbol.
    
    The Resumable mode is how the decoder has always worked. Before decoding
    every input bit, it checks if there is enough space and will save its
    location to be resumed later. When the decoder has more input/output,
    it jumps back to the correct sequence in the Resumable mode code.
    
    When the input/output buffers are large, the Resumable mode is much
    slower than the Non-resumable because it has more branches and is harder
    for the compiler to optimize since it is in a large switch block.
    
    Early benchmarking shows significant time improvement (8-10% on gcc and
    clang x86) by using the Non-resumable code as much as possible.

commit e446ab7a18abfde18f8d1cf02a914df72b1370e3
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Feb 12 17:09:10 2024 +0200

    liblzma: Creates separate "safe" range decoder mode.
    
    The new "safe" range decoder mode is the same as old range decoder, but
    now the default behavior of the range decoder will not check if there is
    enough input or output to complete the operation. When the buffers are
    close to fully consumed, the "safe" operations must be used instead. This
    will improve speed because it will reduce the number of branches needed
    for most of the range decoder operations.

commit 89ea1a22f4ed3685b053b7260bc5acf6c75d1664
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Feb 13 22:38:58 2024 +0800

    Tests: Add RISC-V filter support in a few places.

commit 45663443eb2b377e6171529380fee312f1adcdf4
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Feb 13 22:37:07 2024 +0800

    liblzma: Fix build error if only RISC-V BCJ filter is enabled.
    
    If any other BCJ filter was enabled for encoding or decoding, then this
    was not a problem.

commit 2f15597d677bc35743c777d4cf3bfa698b478681
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Feb 13 22:56:24 2024 +0800

    Translations: Update the Korean translation.

commit df873143ad1615c6d6aaa1bf8808b1676091dfe3
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Feb 13 01:55:53 2024 +0800

    Translations: Update the Korean man page translations.

commit b3f415eddb150341865a1af47959c3baba076b33
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Feb 13 01:53:33 2024 +0800

    Translations: Update the Chinese (simplified) translation.

commit adb073da76a920b5a81e6b32254f4ddb054dc57a
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 9 23:59:54 2024 +0800

    liblzma: Fix typo discovered by codespell.

commit 55d9fc883d221cbace951a370f1fb144698f8c2e
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 9 20:01:06 2024 +0800

    Translations: Update the Swedish translation.

commit 55ba4a1ea321499c805eedfa811ffde690bae311
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Feb 8 20:09:04 2024 +0800

    Translations: Update the Spanish translation.

commit 7f2293cd804a89d3c3b2d3ed573560ca9e1520ae
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Feb 7 21:34:35 2024 +0800

    Translations: Update the Spanish translation.

commit f4af2036bc625739d6d33d9e1fede583a25c3828
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Feb 7 21:28:32 2024 +0800

    Translations: Update the Polish translation.

commit e5e93bb816043c559cddf03a3b7ba13bec353ee4
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Feb 7 19:40:12 2024 +0800

    Translations: Update the German translation.

commit 28f18ff8e26902762fb007c13be235b4ac1ac071
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Feb 7 19:27:25 2024 +0800

    Translations: Update the German man page translations.

commit cabfbc7947da05aa5dfe39bec9759e076f940e3c
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Feb 6 23:44:06 2024 +0800

    Translations: Update the Romanian translation.

commit bf20c94f5d748cea2147779f4fa7e2fd2eb8555e
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Feb 6 23:45:02 2024 +0800

    Translations: Update the Romanian man page translations.

commit 7c25ec9feb0241e4affb7432681cc4f5696f3a96
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Feb 7 20:56:57 2024 +0800

    Translations: Update the Ukrainian translation.

commit b3523250e9eef10b017473754c1e1c9e31f10374
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Feb 6 23:30:03 2024 +0800

    Translations: Update the Ukrainian man page translations.

commit a5c177f514f4c90e0d2f6045636fca6c2e80a20d
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 2 01:39:28 2024 +0800

    Update AUTHORS.

commit 7f68a68c19d0ae57bd0e802be0ea8f974e41299f
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 2 01:38:51 2024 +0800

    liblzma: Update Authors list in crc32_arm64.h.

commit 97f9ba50b84e67b3dcb5b17dd5d3e1d14f9ad1d0
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Feb 1 16:07:03 2024 +0800

    liblzma: Check HAVE_USABLE_CLMUL before omitting CRC32 table.
    
    This was split from the prior commit so it could be easily applied to
    the 5.4 branch.
    
    Closes: https://github.com/tukaani-project/xz/pull/77

commit ca9015f4dead2c97b48f5a6933631b0a448b65b9
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Feb 1 16:06:29 2024 +0800

    liblzma: Check HAVE_USABLE_CLMUL before omitting CRC64 table.
    
    If liblzma is configured with --disable-clmul-crc
    CFLAGS="-msse4.1 -mpclmul", then it will fail to compile because the
    generic version must be used but the CRC tables were not included.

commit 2f1552a91c825e87013925e1a67a0930e7aef592
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Jan 23 18:02:13 2024 +0800

    liblzma: Only use ifunc in crcXX_fast.c if its needed.
    
    The code was using HAVE_FUNC_ATTRIBUTE_IFUNC instead of CRC_USE_IFUNC.
    With ARM64, ifunc is incompatible because it requires non-inline
    function calls for runtime detection.

commit 30a25f3742287697bc57a1bef86c19ecf5129322
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Jan 22 22:08:45 2024 +0800

    Docs: Add --disable-arm64-crc32 description to INSTALL.

commit 1940f0ec28f08c0ac72c1413d9706fb82eabe6ad
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Jan 22 21:36:09 2024 +0800

    liblzma: Omit CRC tables when not needed with ARM64 optimizations.
    
    This is similar to the existing x86-64 CLMUL conditions to omit the
    tables. They were slightly refactored to improve readability.

commit 761f5b69a4c778c8bcb09279b845b07c28790575
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Jan 22 20:54:56 2024 +0800

    liblzma: Rename crc32_aarch64.h to crc32_arm64.h.
    
    Even though the proper name for the architecture is aarch64, this
    project uses ARM64 throughout. So the rename is for consistency.
    
    Additionally, crc32_arm64.h was slightly refactored for the following
    changes:
    
       * Added MSVC, FreeBSD, and macOS support in
         is_arch_extension_supported().
    
       * crc32_arch_optimized() now checks the size when aligning the
         buffer.
    
       * crc32_arch_optimized() loop conditions were slightly modified to
         avoid both decrementing the size and incrementing the buffer
         pointer.
    
       * Use the intrinsic wrappers defined in <arm_acle.h> because GCC and
         Clang name them differently.
    
       * Minor spacing and comment changes.

commit 455a08609caa3223066a717fb01bfa42c5dba47d
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Jan 22 20:49:30 2024 +0800

    liblzma: Refactor crc_common.h.
    
    The CRC_GENERIC is now split into CRC32_GENERIC and CRC64_GENERIC, since
    the ARM64 optimizations will be different between CRC32 and CRC64.
    
    For the same reason, CRC_ARCH_OPTIMIZED is split into
    CRC32_ARCH_OPTIMIZED and CRC64_ARCH_OPTIMIZED.
    
    ifunc will only be used with x86-64 CLMUL because the runtime detection
    methods needed with ARM64 are not compatible with ifunc.

commit 61908e816049af7a9f43ea804a57ee8570e2e644
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Jan 22 00:42:28 2024 +0800

    CMake: Add support for ARM64 CRC32 instruction detection.

commit c5f6d79cc9515a7f22d7ea4860c6cc394b295732
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Jan 22 00:36:47 2024 +0800

    Build: Add support for ARM64 CRC32 instruction detection.
    
    This adds --enable-arm64-crc32/--disable-arm64-crc32 (enabled by
    default) for using the ARM64 CRC32 instruction. This can be disabled if
    one knows the binary will never need to run on an ARM64 machine
    with this instruction extension.

commit b43c3e48bf6097095eef36d44cdbec811074940a
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jan 26 19:05:51 2024 +0800

    Bump version number for 5.5.1alpha.

commit c7a7ae1500ea90bd3c2d54533e4f433933eb598f
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jan 26 19:00:52 2024 +0800

    Add NEWS for 5.5.1alpha

commit 0ef8192e8d5af4e6200d5d4aee22d1f177f7a2df
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jan 26 18:54:24 2024 +0800

    Add NEWS for 5.4.6.

commit 00fa01698df51c58ae2acf8c7fa4e1fb159f75a9
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Jan 9 17:05:01 2024 +0800

    README: Add COPYING.CC-BY-SA-4.0 entry to section 1.1.
    
    The Overall documentation section (1.1) table spacing had to be adjusted
    since the filename was very long.

commit e280470040b27c5e58d78b25b9e2bb71fc6c3882
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Jan 9 16:56:16 2024 +0800

    Build: Add the logo and license to the release.

commit b1ee6cf259bb49ce91abe9f622294524e37edf4c
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Jan 9 16:44:42 2024 +0800

    COPYING: Add the license for the XZ logo.

commit 31293ae7074802cc7286089a89c7b552d930c97f
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Jan 9 16:40:56 2024 +0800

    Doxygen: Added the XZ logo and copyright information.
    
    The PROJECT_LOGO field is now used to include the XZ logo. The footer
    of each page now lists the copyright information instead of the default
    footer. The license is also copied to statisfy the copyright and so the
    link in the documentation can be local.

commit a2dd2dc8e5307a7280bb99868bc478560facba2c
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Jan 23 23:52:49 2024 +0800

    CI: Use RISC-V filter when building with BCJ support.

commit 3060e1070b2421b26c0e17794c1307ec5622f11d
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Jan 23 23:52:14 2024 +0800

    Tests: Use smaller dictionary size in RISC-V test files.

commit 44ff2fa5c94dc345c4dd69195a19fc5238df60b3
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Jan 23 23:50:57 2024 +0800

    Tests: Skip RISC-V test files if decoder was not built.

commit db5eb5f563e8baa8d912ecf576f53391ff861596
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Jan 22 23:33:39 2024 +0800

    xz: Update xz -lvv for RISC-V filter.
    
    Version 5.6.0 will be shown, even though upcoming alphas and betas
    will be able to support this filter. 5.6.0 looks nicer in the output and
    people shouldn't be encouraged to use an unstable version in production
    in any way.

commit e2870db5be1503e6a489fc3d47daf950d6f62723
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Jan 22 23:33:39 2024 +0800

    Tests: Add two RISC-V Filter test files.
    
    These test files achieve 100% code coverage in
    src/liblzma/simple/riscv.c. They contain all of the instructions that
    should be filtered and a few cases that should not.

commit b26a89869315ece2f6d9d10d32d45f672550f245
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Jan 22 23:33:39 2024 +0800

    xz: Update message in --long-help for RISC-V Filter.

commit 283f778908873eca61388029fc418fa800c9d7d7
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Jan 22 23:33:39 2024 +0800

    xz: Update the man page for the RISC-V Filter.
    
    A special note was added to suggest using four-byte alignment when the
    compressed instruction extension is not present in a RISC-V binary.

commit ac3691ccca051d67f60b4a3b05b88e511d0b1b28
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Jan 22 23:33:39 2024 +0800

    Tests: Add RISC-V Filter test in test_compress.sh.

commit 2959dbc7358efcf421ce51bc9cd7eae8fdd8fec4
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Jan 22 23:33:39 2024 +0800

    liblzma: Update string_conversion.c to support RISC-V Filter.

commit 34372a5adbe5a7f6bf29498410ba3a463a720966
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Jan 22 23:33:39 2024 +0800

    CMake: Support RISC-V BCJ Filter for encoding and decoding.

commit 440a2eccb082dc13400c09e22308a58fef85146c
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Jan 22 23:33:39 2024 +0800

    liblzma: Add RISC-V BCJ filter.
    
    The new Filter ID is 0x0B.
    
    Thanks to Chien Wong <m@xv97.com> for the initial version of the Filter,
    the xz CLI updates, and the Autotools build system modifications.
    
    Thanks to Igor Pavlov for his many contributions to the design of
    the filter.

commit 5540f4329bbdb4deb4850d4af48b18ad074bba19
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jan 19 23:08:14 2024 +0800

    Docs: Update .xz file format specification to 1.2.0.
    
    The new RISC-V filter was added to the specification, in addition to
    updating the specification URL.

commit 22d86192f8cf00902a1f90ee2a83ca600794459b
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jan 19 23:08:14 2024 +0800

    xz: Update website URLs in the man pages.

commit 6b63c4c6139fa1bb21b570521d3d2b4a608bc34d
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jan 19 23:08:14 2024 +0800

    liblzma: Update website URL.

commit fce4758018f3a3589236f3fe7999fd9dd08c77e9
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jan 19 23:08:14 2024 +0800

    Docs: Update website URLs.

commit c26812c5b2c8a2a47f43214afe6b0b840c73e4f5
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jan 19 23:08:14 2024 +0800

    Build: Update website URL.

commit 133c5851eb917c6d99d0b623c1689c8518e65f38
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Dec 21 21:39:08 2023 +0800

    Translations: Update the French translation.

commit 710cbc186cad0ac601c38bd6bf31167648a5581e
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Dec 21 16:39:53 2023 +0800

    xz: Add a comment to Capsicum sandbox setup.
    
    This comment is repeated in xzdec.c to help remind us why all the
    capabilities are removed from stdin in certain situations.

commit 4e1c695676bafbaecc9fb307f6ee94138ae72c12
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Dec 20 22:19:19 2023 +0800

    Docs: Update --enable-sandbox option in INSTALL.
    
    xzdec now also uses the sandbox when its configured.

commit ebddf20214143a8e002ab897e95e880bb4c5ac44
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Dec 20 22:39:13 2023 +0800

    CMake: Move sandbox detection outside of xz section.
    
    The sandbox is now enabled for xzdec as well, so it no longer belongs
    in just the xz section. xz and xzdec are always built, except for older
    MSVC versions, so there isn't a need to conditionally show the sandbox
    configuration. CMake will do a little unecessary work on older MSVC
    versions that can't build xz or xzdec, but this is a very small
    downside.

commit 5feb09266fd2928ec0a4dcb98c1dc7f053111316
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Dec 20 22:43:44 2023 +0800

    Build: Allow sandbox to be configured for just xzdec.
    
    If xz is disabled, then xzdec can still use the sandbox.

commit d74fb5f060b76db709b50f5fd37490394e52f975
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Dec 19 21:18:28 2023 +0800

    xzdec: Add sandbox support for Pledge, Capsicum, and Landlock.
    
    A very strict sandbox is used when the last file is decompressed. The
    likely most common use case of xzdec is to decompress a single file.
    The Pledge sandbox is applied to the entire process with slightly more
    relaxed promises, until the last file is processed.
    
    Thanks to Christian Weisgerber for the initial patch adding Pledge
    sandboxing.

commit b34b6a9912d6165e34ba0db151b7f9941d2e06d5
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Dec 20 21:31:34 2023 +0800

    liblzma: Initialize lzma_lz_encoder pointers with NULL.
    
    This fixes the recent change to lzma_lz_encoder that used memzero
    instead of the NULL constant. On some compilers the NULL constant
    (always 0) may not equal the NULL pointer (this only needs to guarentee
    to not point to valid memory address).
    
    Later code compares the pointers to the NULL pointer so we must
    initialize them with the NULL pointer instead of 0 to guarentee
    code correctness.

commit 183a62f0b540ff4d23cc19b2b6bc2525f0bd64df
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Dec 16 20:51:38 2023 +0800

    liblzma: Set all values in lzma_lz_encoder to NULL after allocation.
    
    The first member of lzma_lz_encoder doesn't necessarily need to be set
    to NULL since it will always be set before anything tries to use it.
    However the function pointer members must be set to NULL since other
    functions rely on this NULL value to determine if this behavior is
    supported or not.
    
    This fixes a somewhat serious bug, where the options_update() and
    set_out_limit() function pointers are not set to NULL. This seems to
    have been forgotten since these function pointers were added many years
    after the original two (code() and end()).
    
    The problem is that by not setting this to NULL we are relying on the
    memory allocation to zero things out if lzma_filters_update() is called
    on a LZMA1 encoder. The function pointer for set_out_limit() is less
    serious because there is not an API function that could call this in an
    incorrect way. set_out_limit() is only called by the MicroLZMA encoder,
    which must use LZMA1 where set_out_limit() is always set. Its currently
    not possible to call set_out_limit() on an LZMA2 encoder at this time.
    
    So calling lzma_filters_update() on an LZMA1 encoder had undefined
    behavior since its possible that memory could be manipulated so the
    options_update member pointed to a different instruction sequence.
    
    This is unlikely to be a bug in an existing application since it relies
    on calling lzma_filters_update() on an LZMA1 encoder in the first place.
    For instance, it does not affect xz because lzma_filters_update() can
    only be used when encoding to the .xz format.
    
    This is fixed by using memzero() to set all members of lzma_lz_encoder
    to NULL after it is allocated. This ensures this mistake will not occur
    here in the future if any additional function pointers are added.

commit 1a1bb381db7a20cf86cb45a350e5cca35224d017
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Dec 16 20:30:55 2023 +0800

    liblzma: Tweak a comment.

commit 55810780e04f759747b02683fb8020b8cd022a85
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Dec 16 20:28:21 2023 +0800

    liblzma: Make parameter names in function definition match declaration.
    
    lzma_raw_encoder() and lzma_raw_encoder_init() used "options" as the
    parameter name instead of "filters" (used by the declaration). "filters"
    is more clear since the parameter represents the list of filters passed
    to the raw encoder, each of which contains filter options.

commit 5dad6f628af742bab826819760deb677597445f7
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Dec 16 20:18:47 2023 +0800

    liblzma: Improve lzma encoder init function consistency.
    
    lzma_encoder_init() did not check for NULL options, but
    lzma2_encoder_init() did. This is more of a code style improvement than
    anything else to help make lzma_encoder_init() and lzma2_encoder_init()
    more similar.

commit e1b1a9d6370b788bd6078952c6c201e12bc27cbf
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Dec 16 11:20:20 2023 +0800

    Docs: Update repository URL in Changelog.

commit f9b82bc64a9405e486575c65c1729229eb0a8198
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Dec 15 16:56:31 2023 +0800

    CI: Update Upload Artifact Action.

commit d0b24efe6cdc47db5b0fdf6306f70a2e0e63e49e
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Dec 7 21:48:07 2023 +0800

    Tests: Silence -Wsign-conversion warning on GCC version < 10.
    
    Since GCC version 10, GCC no longer complains about simple implicit
    integer conversions with Arithmetic operators.
    
    For instance:
    
        uint8_t a = 5;
        uint32_t b = a + 5;
    
    Give a warning on GCC 9 and earlier but this:
    
        uint8_t a = 5;
        uint32_t b = (a + 5) * 2;
    
    Gives a warning with GCC 10+.

commit 4a972a8ee3ed88ac14067c1d2f15b78988e5dae8
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Dec 6 18:39:03 2023 +0800

    Update THANKS.

commit ee2f48350099201694a7586e41d7aa2f09fc74da
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Dec 6 18:30:25 2023 +0800

    Tests: Minor cleanups to OSS-Fuzz files.
    
    Most of these fixes are small typos and tweaks. A few were caused by bad
    advice from me. Here is the summary of what is changed:
    
    - Author line edits
    
    - Small comment changes/additions
    
    - Using the return value in the error messages in the fuzz targets'
      coder initialization code
    
    - Removed fuzz_encode_stream.options. This set a max length, which may
      prevent some worthwhile code paths from being properly exercised.
    
    - Removed the max_len option from fuzz_decode_stream.options for the
      same reason as fuzz_encode_stream. The alone decoder fuzz target still
      has this restriction.
    
    - Altered the dictionary contents for fuzz_lzma.dict. Instead of keeping
      the properties static and varying the dictionary size, the properties
      are varied and the dictionary size is kept small. The dictionary size
      doesn't have much impact on the code paths but the properties do.
    
    Closes: https://github.com/tukaani-project/xz/pull/73

commit 685094b8e1c1aa1bf934de0366ca42ef599d25f7
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Nov 30 23:10:43 2023 +0800

    Update THANKS.

commit 35558adf9c45e5597f2c8dbd969885dd484038d2
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Nov 30 20:41:00 2023 +0800

    Update THANKS.

commit fd170e8557727bed6bec0518c16415064d972e4e
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Nov 22 21:20:12 2023 +0800

    CI: Test musl libc builds on Ubuntu runner.

commit db2b4aa068a492c0013279a4ed43803e8ff9bb3e
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Nov 22 21:12:15 2023 +0800

    CI: Allow ci_build.sh to set a different C compiler.

commit ff7badef53c2cd698d4b72b945f34dfd0835e13c
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Nov 24 21:19:12 2023 +0800

    CMake: Use consistent indentation with check_c_source_compiles().

commit d4af167570f2c14b002ee18a39d5b1e7e5a892b1
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Nov 22 20:33:36 2023 +0800

    CMake: Change __attribute__((__ifunc__())) detection.
    
    This renames ALLOW_ATTR_IFUNC to USE_ATTR_IFUNC and applies the ifunc
    detection changes that were made to the Autotools build.
    
    Fixes: https://github.com/tukaani-project/xz/issues/70

commit 20ecee40a0053fd16371ef0628046bf45e548d72
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Nov 24 20:19:11 2023 +0800

    Docs: Update INSTALL for --enable_ifunc change.

commit ffb456593d695d70052a2f71c7a2e6269217d194
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Nov 21 20:56:55 2023 +0800

    Build: Change --enable-ifunc handling.
    
    Some compilers support __attribute__((__ifunc__())) even though the
    dynamic linker does not. The compiler is able to create the binary
    but it will fail on startup. So it is not enough to just test if
    the attribute is supported.
    
    The default value for enable_ifunc is now auto, which will attempt
    to compile a program using __attribute__((__ifunc__())). There are
    additional checks in this program if glibc is being used or if it
    is running on FreeBSD.
    
    Setting --enable-ifunc will skip this test and always enable
    __attribute__((__ifunc__())), even if is not supported.

commit 2ab2e4b5a542eab93902985ce4e642719a8b7a4e
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Nov 23 22:13:39 2023 +0800

    xz: Use is_tty() in message.c.

commit 584e3a258f32d579b1d07f99b4dc6e856c10ac7e
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Nov 23 22:04:35 2023 +0800

    xz: Create separate is_tty() function.
    
    The new is_tty() will report if a file descriptor is a terminal or not.
    On POSIX systems, it is a wrapper around isatty(). However, the native
    Windows implementation of isatty() will return true for all character
    devices, not just terminals. So is_tty() has a special case for Windows
    so it can use alternative Windows API functions to determine if a file
    descriptor is a terminal.
    
    This fixes a bug with MSVC and MinGW-w64 builds that refused to read from
    or write to non-terminal character devices because xz thought it was a
    terminal. For instance:
    
        xz foo -c > /dev/null
    
    would fail because /dev/null was assumed to be a terminal.

commit 6b05f827f50e686537e9a23c49c5aa4c0aa6b23d
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Nov 22 20:39:41 2023 +0800

    tuklib_integer: Fix typo discovered by codespell.
    
    Based on internet dictionary searches, 'choise' is an outdated spelling
    of 'choice'.

commit ca278eb2b7f5a4940f5ab18955297b398d423824
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Nov 17 20:35:11 2023 +0800

    Tests: Create test_suffix.sh.
    
    This tests some complicated interactions with the --suffix= option.
    The suffix option must be used with --format=raw, but can optionally
    be used to override the default .xz suffix.
    
    This test also verifies some recent bugs have been correctly solved
    and to hopefully avoid further regressions in the future.

commit 2a732aba22da1b0d4a1241cb32280ed010ba03ce
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Nov 17 20:19:26 2023 +0800

    xz: Fix a bug with --files and --files0 in raw mode without a suffix.
    
    The following command caused a segmentation fault:
    
        xz -Fraw --lzma1 --files=foo
    
    when foo was a valid file. The usage of --files or --files0 was not
    being checked when compressing or decompressing in raw mode without a
    suffix. The suffix checking code was meant to validate that all files
    to be processed are "-" (if not writing to standard out), meaning the
    data is only coming from standard in. In this case, there were no file
    names to check since --files and --files0 store their file name in a
    different place.
    
    Later code assumed the suffix was set and caused a segmentation fault.
    Now, the above command results in an error.

commit 299920bab9ae258a247366339264e8aefca9e3ce
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Nov 17 20:04:58 2023 +0800

    Tests: Fix typo in a comment.

commit f481523baac946fa3bc13d79186ffaf0c0b818a7
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Nov 15 23:40:13 2023 +0800

    xz: Refactor suffix test with raw format.
    
    The previous version set opt_stdout, but this caused an issue with
    copying an input file to standard out when decompressing an unknown file
    type. The following needs to result in an error:
    
        echo foo | xz -df
    
    since -c, --stdout is not used. This fixes the previous error by not
    setting opt_stdout.

commit 837ea40b1c9d4998cac4500b55171bf33e0c31a6
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Nov 14 20:27:46 2023 +0800

    xz: Move suffix check after stdout mode is detected.
    
    This fixes a bug introduced in cc5aa9ab138beeecaee5a1e81197591893ee9ca0
    when the suffix check was initially moved. This caused a situation that
    previously worked:
    
        echo foo | xz -Fraw --lzma1 | wc -c
    
    to fail because the old code knew that this would write to standard out
    so a suffix was not needed.

commit d4f4a4d040ef47a5e82dffd0f067e92716606ddf
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Nov 14 20:27:04 2023 +0800

    xz: Detect when all data will be written to standard out earlier.
    
    If the -c, --stdout argument is not used, then we can still detect when
    the data will be written to standard out if all of the provided
    filenames are "-" (denoting standard in) or if no filenames are
    provided.

commit 2ade7246e7ba729a91460d2fab0f4c7b89d3998b
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Nov 9 01:21:53 2023 +0800

    liblzma: Add missing comments to lz_encoder.h.

commit 5fe1450603dc625340b8b7866fb4a83ff748ad06
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Nov 1 20:18:30 2023 +0800

    Add NEWS for 5.4.5.

commit 148e20607e95781558bdfc823ecba07b7af4b590
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Oct 31 21:51:40 2023 +0800

    Build: Fix text wrapping in an output message.

commit 5e3d890f8862a7d4fbef5e38e11b6c9fbd98f468
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Oct 24 00:50:08 2023 +0800

    CI: Disable sandboxing in fsanitize=address,undefined job.
    
    The sandboxing on Linux now supports Landlock, which restricts all
    supported filesystem actions after xz opens the files it needs. The
    sandbox is only enabled when one file is input and we are writing to
    standard out. With fsanitize=address,undefined, the instrumentation
    needs to read additional files after the sandbox is in place. This
    forces all xz based test to fail, so the sandbox must instead be
    disabled.

commit b1408987ea832e2760e478ae960a636df17a1363
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Oct 24 00:15:39 2023 +0800

    CI: Allow disabling the sandbox in ci_build.sh.

commit 988e09f27b9b04a43d45d10f92782e0092ee27a9
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Oct 20 19:17:46 2023 +0800

    liblzma: Move is_clmul_supported() back to crc_common.h.
    
    This partially reverts creating crc_clmul.c
    (8c0f9376f58c0696d5d6719705164d35542dd891) where is_clmul_supported()
    was moved, extern'ed, and renamed to lzma_is_clmul_supported(). This
    caused a problem when the function call to lzma_is_clmul_supported()
    results in a call through the PLT. ifunc resolvers run very early in
    the dynamic loading sequence, so the PLT may not be setup properly at
    this point. Whether the PLT is used or not for
    lzma_is_clmul_supported() depened upon the compiler-toolchain used and
    flags.
    
    In liblzma compiled with GCC, for instance, GCC will go through the PLT
    for function calls internal to liblzma if the version scripts and
    symbol visibility hiding are not used. If lazy-binding is disabled,
    then it would have made any program linked with liblzma fail during
    dynamic loading in the ifunc resolver.

commit 105c7ca90d4152942e0798580a37f736d02faa22
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Oct 19 16:23:32 2023 +0800

    Build: Remove check for COND_CHECK_CRC32 in check/Makefile.inc.
    
    Currently crc32 is always enabled, so COND_CHECK_CRC32 must always be
    set. Because of this, it makes the recent change to conditionally
    compile check/crc_clmul.c appear wrong since that file has CLMUL
    implementations for both CRC32 and CRC64.

commit 139757170468f0f1fafdf0a8ffa74363d1ea1d0c
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Oct 19 16:09:01 2023 +0800

    CMake: Add ALLOW_CLMUL_CRC option to enable/disable CLMUL.
    
    The option is enabled by default, but will only be visible to a user
    listing cache variables or using a CMake GUI application if the
    immintrin.h header file is found.
    
    This mirrors our Autotools build --disable-clmul-crc functionality.

commit c60b25569d414bb73b705977a4dd342f8f9f1965
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Oct 19 00:22:50 2023 +0800

    liblzma: Fix -fsanitize=address failure with crc_clmul functions.
    
    After forcing crc_simd_body() to always be inlined it caused
    -fsanitize=address to fail for lzma_crc32_clmul() and
    lzma_crc64_clmul(). The __no_sanitize_address__ attribute was added
    to lzma_crc32_clmul() and lzma_crc64_clmul(), but not removed from
    crc_simd_body(). ASAN and inline functions behavior has changed over
    the years for GCC specifically, so while strictly required we will
    keep __attribute__((__no_sanitize_address__)) on crc_simd_body() in
    case this becomes a requirement in the future.
    
    Older GCC versions refuse to inline a function with ASAN if the
    caller and callee do not agree on sanitization flags
    (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=89124#c3). If the
    function was forced to be inlined, it will not compile if the callee
    function has __no_sanitize_address__ but the caller doesn't.

commit 1c8884f0af28b3a4690bb573cdf3240a8ec73416
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Oct 18 19:57:10 2023 +0800

    liblzma: Set the MSVC optimization fix to only cover lzma_crc64_clmul().
    
    After testing a 32-bit Release build on MSVC, only lzma_crc64_clmul()
    has the bug. crc_simd_body() and lzma_crc32_clmul() do not need the
    optimizations disabled.

commit e13b7947b92355c334edd594295d3a2c99c4bca1
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Oct 18 01:23:26 2023 +0800

    liblzma: Add include guards to crc_common.h.

commit 40abd88afcc61a8157fcd12d78d491caeb8e12be
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Oct 18 22:50:25 2023 +0800

    liblzma: Add the crc_always_inline macro to crc_simd_body().
    
    Forcing this to be inline has a significant speed improvement at the
    cost of a few repeated instructions. The compilers tested on did not
    inline this function since it is large and is used twice in the same
    translation unit.

commit a5966c276bd6fa975f0389f8a8dc61393de750b0
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Oct 18 22:48:19 2023 +0800

    liblzma: Create crc_always_inline macro.
    
    This macro must be used instead of the inline keyword. On MSVC, it is
    a replacement for __forceinline which is an MSVC specific keyword that
    should not be used with inline (it will issue a warning if it is).
    
    It does not use a build system check to determine if
    __attribute__((__always_inline__)) since all compilers that can use
    CLMUL extensions (except the special case for MSVC) should support this
    attribute. If this assumption is incorrect then it will result in a bug
    report instead of silently producing slow code.

commit 96b663f67c0e738a99ba8f35d9f4ced9add74544
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Oct 14 13:23:23 2023 +0800

    liblzma: Refactor CRC comments.
    
    A detailed description of the three dispatch methods was added. Also,
    duplicated comments now only appear in crc32_fast.c or were removed from
    both crc32_fast.c and crc64_fast.c if they appeared in crc_clmul.c.

commit 8c0f9376f58c0696d5d6719705164d35542dd891
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Oct 14 12:17:57 2023 +0800

    liblzma: Create crc_clmul.c.
    
    Both crc32_clmul() and crc64_clmul() are now exported from
    crc32_clmul.c as lzma_crc32_clmul() and lzma_crc64_clmul(). This
    ensures that is_clmul_supported() (now lzma_is_clmul_supported()) is
    not duplicated between crc32_fast.c and crc64_fast.c.
    
    Also, it encapsulates the complexity of the CLMUL implementations into a
    single file and reduces the complexity of crc32_fast.c and crc64_fast.c.
    Before, CLMUL code was present in crc32_fast.c, crc64_fast.c, and
    crc_common.h.
    
    During the conversion, various cleanups were applied to code (thanks to
    Lasse Collin) including:
    
    - Require using semicolons with MASK_/L/H/LH macros.
    - Variable typing and const handling improvements.
    - Improvements to comments.
    - Fixes to the pragmas used.
    - Removed unneeded variables.
    - Whitespace improvements.
    - Fixed CRC_USE_GENERIC_FOR_SMALL_INPUTS handling.
    - Silenced warnings and removed the need for some #pragmas

commit a3ebc2c516b09616638060806c841bd4bcf7bce3
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Oct 14 10:23:03 2023 +0800

    liblzma: Define CRC_USE_IFUNC in crc_common.h.
    
    When ifunc is supported, we can define a simpler macro instead of
    repeating the more complex check in both crc32_fast.c and crc64_fast.c.

commit f74f1740067b75042497edbfa6ea457ff75484b9
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Oct 12 20:12:18 2023 +0800

    Build: Update visibility.m4 from Gnulib.
    
    Updating from version 6 -> 8 from upstream. Declarations for variables
    and function bodies were added to avoid unnecessary failures with
    -Werror.

commit 01e34aa1171b04f8b28960b1cc6135a903e0c13d
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Sep 29 22:11:54 2023 +0800

    CI: Disable CLANG64 MSYS2 environment until bug is resolved.
    
    lld 17.0.1 searches for libraries to link first in the toolchain
    directories before the local directory when building. The is a problem
    for us because liblzma.a is installed in MSYS2 CLANG64 by default and
    xz.exe will thus use the installed library instead of the one being
    built.
    
    This causes tests to fail when they are expecting features to be
    disabled. More importantly, it will compile xz.exe with an incorrect
    liblzma and could cause unexpected behavior by being unable to update
    liblzma code in static builds. The CLANG64 environment can be tested
    again once this is fixed.
    
    Link to bug: https://github.com/llvm/llvm-project/issues/67779.

commit 30d0c35327f3639cb11224872aa58fdbf0b1526e
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Sep 29 20:14:39 2023 +0800

    CMake: Rename xz and man page symlink custom targets.
    
    The Ninja Generator for CMake cannot have a custom target and its
    BYPRODUCTS have the same name. This has prevented Ninja builds on
    Unix-like systems since the xz symlinks were introduced in
    80a1a8bb838842a2be343bd88ad1462c21c5e2c9.

commit 506d03127a8565442b028ec991e1578124fd3025
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Sep 29 19:58:44 2023 +0800

    CMake: Specify LINKER_LANGUAGE for libgnu target to fix Ninja Generator.
    
    CMake is unable to guess the linker language for just a header file so
    it must be explicitly set.

commit 8ebaf3f665ddc7e4f19c613005050dde5ccbe499
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Sep 27 00:02:11 2023 +0800

    liblzma: Avoid compiler warning without creating extra symbol.
    
    When the generic fast crc64 method is used, then we omit
    lzma_crc64_table[][]. Similar to
    d9166b52cf3458a4da3eb92224837ca8fc208d79, we can avoid compiler warnings
    with -Wempty-translation-unit (Clang) or -pedantic (GCC) by creating a
    never used typedef instead of an extra symbol.

commit 519e47c2818acde571fadc79551294527fe6cc22
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Sep 26 01:17:11 2023 +0800

    CMake: Remove accidental extra newline.

commit bbb42412da6a02705ba3e668e90840c2683e4e67
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Sep 26 00:47:26 2023 +0800

    Build: Remove Gnulib dependency from tests.
    
    The tests do not use any Gnulib replacements so they do not need to link
    libgnu.a or have /lib in the include path.

commit d265f6b75691c6c8fa876eb5320c3ff5aed17dfa
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Sep 26 00:43:43 2023 +0800

    CMake: Remove /lib from tests include path.
    
    The tests never included anything from /lib, so this was not needed.

commit 9fb5de41f2fb654ca952d4bda15cf3777c2b720f
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sun Sep 24 22:10:41 2023 +0800

    Scripts: Change quoting style from `...' to '...'.

commit eaebdef4d4de3c088b0905f42626b74e0d23abf3
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sun Sep 24 22:10:18 2023 +0800

    xz: Change quoting style from `...' to '...'.

commit f6667702bf075a05fbe336dbf3576ad1a82ec645
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sun Sep 24 22:09:47 2023 +0800

    liblzma: Change quoting style from `...' to '...'.
    
    This was done for both internal and API headers.

commit be012b8097a4eaee335b51357d6befa745f753ce
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sun Sep 24 22:09:16 2023 +0800

    Build: Change quoting style from `...' to '...'.

commit ce162db07f03495bd333696e66883c8f36abdc1e
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sun Sep 24 22:05:02 2023 +0800

    Docs: Change quoting style from `...' to '...'.
    
    These days the ` and ' do not look symmetric. This quoting style has
    been changed in various apps over the years including the GNU tools.

commit db17656721e43939bfa4ec13506e7c76f4b86da6
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sun Sep 24 21:25:01 2023 +0800

    lib: Silence -Wsign-conversion in getopt.c.

commit a6234f677d66888f435010bc0b67de6a32fefcf6
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sun Sep 24 20:48:52 2023 +0800

    Build: Update getopt.m4 from Gnulib.
    
    This file was modified from upstream since we do not need to replace
    getopt() and can avoid complexity and feature tests.

commit 84808b68f1075e8603a8ef95d361a61fdc6a5b10
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Sep 26 00:09:53 2023 +0800

    CMake: Add /lib to include path.

commit 01804a0b4b64e0f33568e947e0579263808c59d3
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sun Sep 24 20:36:34 2023 +0800

    CMake: Update libgnu target with new header files.

commit d34558388fe1d8929f6478d61dc322eb4f2900af
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Sep 23 00:47:52 2023 +0800

    lib: Update Makefile.am for new header files.

commit 52bf644bdf536e20fcc743b712cede135e05eec5
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sun Sep 24 20:34:03 2023 +0800

    lib: Update getopt1.c from Gnulib.
    
    The only difference was maintaining the conditional inclusion for
    config.h.

commit 7e884c00d0093c38339f17fb1d280eec493f42ca
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Sep 23 03:27:00 2023 +0800

    lib: Update getopt.in.h from Gnulib with modifications.
    
    We can still avoid modifying the contents of this file during
    configuration to simplify the build systems. Gnulib added replacements
    for inclusions guards for Cygwin. Cygwin should not need getopt_long
    replacement so this feature can be omitted.
    
    <unistd.h> is conditionally included to avoid MSVC since it is not
    available.
    
    The definition for _GL_ARG_NONNULL was also copied into this file from
    Gnulib since this stage is usually done during gnulib-tool.

commit cff05f82066ca3ce9425dafdb086325a8eef8de3
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Sep 23 00:31:55 2023 +0800

    lib: Update getopt_int.h from Gnulib.

commit 04bd86a4b010d43c6a016a3857ecb38dc1d5b024
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Sep 23 00:27:23 2023 +0800

    lib: Update getopt.c from Gnulib with modifications.
    
    The code maintains the prior modifications of conditionally including
    config.h and disabling NLS support.
    
    _GL_UNUSED is repalced with the simple cast to void trick. _GL_UNUSED
    is only used for these two parameters so its simpler than having to
    define it.

commit 56b42be7287844db20b3a3bc1372c6ae8c040d63
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Sep 23 00:18:56 2023 +0800

    lib: Add getopt-cdefs.h for getopt_long update.
    
    This was modified slightly from Gnulib. In Gnulib, it expects the
    @HAVE_SYS_CDEFS_H@ to be replaced. Instead, we can set HAVE_SYS_CDEFS_H
    on systems that have it and avoid copying another file into the build
    directory. Since we are not using gnulib-tool, copying extra files
    requires extra build system updates (and special handling with CMake) so
    we should avoid when possible.

commit 9834e591a4cf9dc2f49e42e26bf28d1d247bc196
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Sep 23 00:15:25 2023 +0800

    lib: Copy new header files from Gnulib without modification.
    
    The getopt related files have changed from Gnulib by splitting up
    getopt.in.h into more modular header files. We could have kept
    everything in just getopt.in.h, but this will help us continue to update
    in the future.

commit 953e775941a25bfcfa353f802b13e66acb1edf2c
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Sep 14 21:13:23 2023 +0800

    CI: Enable CLMUL in address sanitization test.
    
    The crc64_clmul() function should be ignored by the address sanitizer
    now so these builds should still pass.

commit 7379bb3eed428c0ae734d0cc4a1fd04359d53f08
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Sep 12 22:36:12 2023 +0800

    CMake: Fix time.h checks not running on second CMake run.
    
    If CMake was configured more than once, HAVE_CLOCK_GETTIME and
    HAVE_CLOCK_MONOTONIC would not be set as compile definitions. The check
    for librt being needed to provide HAVE_CLOCK_GETTIME was also
    simplified.

commit 5d691fe58286b92d704c0dc5cd0c4df22881c6c6
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Sep 12 22:34:06 2023 +0800

    CMake: Fix unconditionally defining HAVE_CLOCK_MONOTONIC.
    
    If HAVE_CLOCK_GETTIME was defined, then HAVE_CLOCK_MONOTONIC was always
    added as a compile definition even if the check for it failed.

commit 74c3449d8b816a724b12ebce7417e00fb597309a
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Aug 28 23:14:45 2023 +0800

    Tests: Improve invalid unpadded size check in test_lzma_index_append().
    
    This check was extended to test the code added to fix a failing assert
    in ae5c07b22a6b3766b84f409f1b6b5c100469068a.

commit 2544274a8b8a27f4ea6c457d2c4c32eb1e4cd336
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Aug 28 21:54:41 2023 +0800

    Tests: Improve comments in test_index.c.

commit 49be29d6380b94e6fb26e511dd2cdbd9afce0f8b
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Aug 28 21:52:54 2023 +0800

    Update THANKS.

commit 721e3d9f7a82f59f32795d5fb97e0210d1aa839a
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Aug 28 21:50:16 2023 +0800

    liblzma: Update assert in vli_ceil4().
    
    The argument to vli_ceil4() should always guarantee the return value
    is also a valid lzma_vli. Thus the highest three valid lzma_vli values
    are invalid arguments. All uses of the function ensure this so the
    assert is updated to match this.

commit ae5c07b22a6b3766b84f409f1b6b5c100469068a
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Aug 28 21:31:25 2023 +0800

    liblzma: Add overflow check for Unpadded size in lzma_index_append().
    
    This was not a security bug since there was no path to overflow
    UINT64_MAX in lzma_index_append() or when it calls index_file_size().
    The bug was discovered by a failing assert() in vli_ceil4() when called
    from index_file_size() when unpadded_sum (the sum of the compressed size
    of current Stream and the unpadded_size parameter) exceeds LZMA_VLI_MAX.
    
    Previously, the unpadded_size parameter was checked to be not greater
    than UNPADDED_SIZE_MAX, but no check was done once compressed_base was
    added.
    
    This could not have caused an integer overflow in index_file_size() when
    called by lzma_index_append(). The calculation for file_size breaks down
    into the sum of:
    
    - Compressed base from all previous Streams
    - 2 * LZMA_STREAM_HEADER_SIZE (size of the current Streams header and
      footer)
    - stream_padding (can be set by lzma_index_stream_padding())
    - Compressed base from the current Stream
    - Unpadded size (parameter to lzma_index_append())
    
    The sum of everything except for Unpadded size must be less than
    LZMA_VLI_MAX. This is guarenteed by overflow checks in the functions
    that can set these values including lzma_index_stream_padding(),
    lzma_index_append(), and lzma_index_cat(). The maximum value for
    Unpadded size is enforced by lzma_index_append() to be less than or
    equal UNPADDED_SIZE_MAX. Thus, the sum cannot exceed UINT64_MAX since
    LZMA_VLI_MAX is half of UINT64_MAX.
    
    Thanks to Joona Kannisto for reporting this.

commit 1057765aaabfe0f1397b8094531846655376ae38
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Aug 28 22:18:29 2023 +0800

    Translations: Update the Esperanto translation.

commit f2e94d064f305bb8ad77ca70f91d93e55f5cf856
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Aug 26 20:10:23 2023 +0800

    Translations: Update the Esperanto translation.

commit 2b871f4dbffe3801d0da3f89806b5935f758d5f3
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Aug 9 20:55:36 2023 +0800

    Docs: Update INSTALL for --enable-threads method win95.
    
    The Autotools build allows win95 threads and --enable-small together now
    if the compiler supports __attribute__((__constructor__)).

commit 356ad5b26b4196f085ce3afa1869154ca81faad8
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Aug 9 20:54:15 2023 +0800

    CMake: Conditionally allow win95 threads and --enable-small.

commit de574404c4c2f87aca049f232c38526e3ce092aa
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Aug 9 20:35:16 2023 +0800

    Build: Conditionally allow win95 threads and --enable-small.
    
    When the compiler supports __attribute__((__constructor__))
    mythread_once() is never used, even with --enable-small. A configuration
    with win95 threads and --enable-small will compile and be thread safe so
    it can be allowed.
    
    This isn't a very common configuration since MSVC does not support
    __attribute__((__constructor__)), but MINGW32 and CLANG32 environments
    for MSYS2 can use win95 threads and have
    __attribute__((__constructor__)) support.

commit 80cb961e5380a3878246d41341ff91378ca59e05
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Aug 4 22:17:11 2023 +0800

    codespell: Add .codespellrc to set default options.
    
    The .codespellrc allows setting default options to avoid false positive
    matches, set additional dictionaries, etc. For now, codespell can be
    used locally before committing doc and comment changes.
    
    It should help prevent silly errors and fix up commits in the future.

commit cd678a6077358935249b64a4a16fe8d17434f9c9
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Aug 3 20:10:21 2023 +0800

    Tests: Style fixes to test_lzip_decoder.c.

commit 1cac5ed4fa45c9861d745b02d80575cb2ff01d81
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Aug 3 15:56:20 2023 +0800

    Translations: Update the Chinese (simplified) translation.

commit 9ae4371b5106189486e850ce777e40f7b6021c0b
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Aug 2 20:30:07 2023 +0800

    Add NEWS for 5.4.4.

commit 71c638c611324e606d324c8189fef8fe79db6991
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Aug 1 21:58:51 2023 +0800

    Add newline to end of .gitignore.
    
    Newline was accidentally removed in commit
    01cbb7f023ee7fda8ddde04bd17cf7d3c2418706.

commit 01cbb7f023ee7fda8ddde04bd17cf7d3c2418706
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Jul 26 20:26:23 2023 +0800

    Update .gitignore.

commit f97a1afd564c48ad9cb94682e10972a72e11fa08
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jul 28 22:03:08 2023 +0800

    CMake: Conditionally allow the creation of broken symlinks.
    
    The CMake build will try to create broken symlinks on Unix and Unix-like
    platforms. Cygwin and MSYS2 are Unix-like, but may not be able to create
    broken symlinks. The value of the CYGWIN or MSYS environment variables
    determine if broken symlinks are valid.
    
    The default for MSYS2 does not allow for broken symlinks, so the CMake
    build has been broken for MSYS2 since commit
    80a1a8bb838842a2be343bd88ad1462c21c5e2c9.

commit 7190f4cc7c9ade5b9b3675d0cbfa3b6d6ec9cb4f
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jul 28 21:56:48 2023 +0800

    CI: Fix windows-ci dependency installation.
    
    All of the MSYS2 environments need make, and it does not come with the
    toolchain package. The toolchain package will install the needed
    compiler toolchains since without this package CMake cannot properly
    generate the Makefiles.

commit a048f472cd9a2245265cb292853cbbcdd4f02001
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jul 28 21:54:22 2023 +0800

    CI: Update ci_build.sh CMake to always make Unix Makefiles.
    
    The default for many of the MSYS2 environments is for CMake to create
    Ninja build files. This would complicate the build script since we would
    need a different command to run the tests. Its simpler to always use
    Unix Makefiles so that "make test" is always a usable target for
    testing.

commit 7870396a0ca945473aa0d1d790f4cbef456610bd
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Jul 25 20:17:23 2023 +0800

    CI: Test CMake builds and test framework with MSYS2.

commit 6497d1f8875cb7e3007f714336cc09c06fed235b
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Jul 25 20:14:53 2023 +0800

    CI: Windows CI rename system matrix variable -> msys2_env.
    
    Calling the MSYS2 environment "system" was a bit vague and should be
    more specific.

commit 785e4121d9b2921ad36bd3af1cf61fa20a9265bd
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Jul 24 23:11:45 2023 +0800

    CI: Add Clang64 MSYS2 environment to Windows CI.

commit d9166b52cf3458a4da3eb92224837ca8fc208d79
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Jul 24 21:43:44 2023 +0800

    liblzma: Prevent an empty translation unit in Windows builds.
    
    To workaround Automake lacking Windows resource compiler support, an
    empty source file is compiled to overwrite the resource files for static
    library builds. Translation units without an external declaration are
    not allowed by the C standard and result in a warning when used with
    -Wempty-translation-unit (Clang) or -pedantic (GCC).

commit db5019d691f980d622fb56fdcf383af2c3519c98
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Jul 22 18:37:56 2023 +0800

    Translations: Update the Vietnamese translation.

commit f3a055f762ba5b71b746fc2d44a6ababde2c61b5
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Jul 22 14:55:42 2023 +0800

    CI: Add Windows runner for Autotools builds with MSYS2.
    
    Only a subset of the tests run by the Linux and MacOS Autotools builds
    are run. The most interesting tests are the ones that disable threads,
    encoders, and decoders.
    
    The Windows runner will only be run manually since these tests will
    likely take much longer than the Linux and MacOS runners. This runner
    should be used before merging any large features and before releases.
    
    Currently the clang64 environment fails to due to a warning and
    -Werror is enabled for the CI tests. This is still an early version
    since the CMake build can be done for MSVC and optionally each of the
    MSYS2 environments. GitHub does not allow manually running the CI tests
    unless the workflow is checked on the default branch so checking in a
    minimum version is a good idea.
    
    Thanks to Arthur S for the original proposing the original patch.
    
    Closes: https://github.com/tukaani-project/xz/pull/34

commit 556536a3525df9e5ed78b8c7057991cfa9edfac8
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jul 21 22:11:01 2023 +0800

    CI: Add argument to ci_build.sh to pass flags to autogen.sh.

commit 39a32d36fc465c4e70f13192eea380e518ba6e8a
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jul 21 18:05:44 2023 +0800

    Tests: Skip .lz files in test_files.sh if not configured.
    
    Previously if the lzip decoder was not configured then test_files.sh
    would pass the lzip tests instead of skipping them.

commit 194d12724b30fe42789d12a0184f9d412c449347
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jul 20 22:11:13 2023 +0800

    Tests: Add ARM64 filter test to test_compress.sh.

commit d850365c444368102c69beaddf849ed463c33467
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jul 20 20:30:05 2023 +0800

    Translations: Update the Croatian translation.

commit 24049eb7acf6d42a60f00efe4e7289fe8e1797fe
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jul 20 20:28:32 2023 +0800

    Translations: Update the Korean man page translations.

commit 4d4a4fa07de6cb9d913fb2f97712fddda2527b49
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jul 20 20:25:24 2023 +0800

    Translations: Update the Korean translation.

commit 237f06d9c55cf438a7538a598354bcf103f23711
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jul 20 20:24:05 2023 +0800

    Translations: Update the Polish translation.

commit 80c2c832136656d5ac7a1bca8bc42d95e13d281a
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jul 20 20:22:23 2023 +0800

    Translations: Update the German man page translations.

commit fdbde14503ca03069d3649aa51926f5f796b89d8
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jul 20 20:18:44 2023 +0800

    Translations: Update the German translation.

commit 9f3bf5ff5b2b5cf0b252a2bf381238ca49dc4101
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jul 20 20:17:10 2023 +0800

    Translations: Update the Chinese (simplified) translation.

commit 376938c588011567c74f1d5a160c0ccce6336d46
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jul 20 20:15:47 2023 +0800

    Translations: Update the Swedish translation.

commit 26b0bc6eb82c84559936a7c7080de5c71c8276f8
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jul 20 20:14:00 2023 +0800

    Translations: Update the Ukrainian man page translations.

commit 2d02c8b7640b54f3c5aa1c8b5990ba56f322393b
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jul 20 20:09:15 2023 +0800

    Translations: Update the Ukrainian translation.

commit f881018b503fd334331c24a09075429558abbce1
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jul 20 20:06:57 2023 +0800

    Translations: Update the Spanish translation.

commit 791fe6d3ffd6877fa5f852be69d9251397dfaa31
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jul 20 20:05:19 2023 +0800

    Translations: Update the Romanian translation.

commit 8827e90704f699fe08bb5bed56b1717a2bc0eb77
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jul 20 20:02:56 2023 +0800

    Translations: Update the Romanian man page translations.

commit 0184d344fa4f215cd345bb131db9068e077c69b8
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Jul 19 23:36:00 2023 +0800

    liblzma: Suppress -Wunused-function warning.
    
    Clang 16.0.0 and earlier have a bug that the ifunc resolver function
    triggers the -Wunused-function warning. The resolver function is static
    and only "used" by the __attribute__((__ifunc()__)).
    
    At this time, the bug is still unresolved, but has been reported:
    https://github.com/llvm/llvm-project/issues/63957
    
    This is not a problem in GCC.

commit 43845fa70fc751736c44c18f4cee42d49bfd1392
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Jul 18 22:52:25 2023 +0800

    liblzma: Reword lzma_str_list_filters() documentation.
    
    This further improves the documentation from commit
    f36ca7982f6bd5e9827219ed4f3c5a1fbf5d7bdf. The previous wording of
    "supported options" was slightly misleading since the options that are
    printed are the ones that are relevant for encoding/decoding. It is not
    about which options can or must be specified.

commit 818701ba1c9dff780b7fbf28f9ab8eb11a25dd67
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Jul 18 22:49:57 2023 +0800

    liblzma: Improve comment in string_conversion.c.
    
    The comment used "flag" when referring to decoder options. Just
    referring to them as options is more clear and consistent.

commit abc1d5601b7e419ebc28a1ab4b268613b52e6f98
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Jul 18 00:51:48 2023 +0800

    xz: Update Authors list in a few files.

commit 289034a168878baa9df6ff6e159110aade69cba5
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jul 14 23:20:33 2023 +0800

    Docs: Add a new section to INSTALL for Tests.
    
    The new Tests section describes basic information about the tests, how
    to run them, and important details when cross compiling. We have had a
    few questions about how to compile the tests without running them, so
    hopefully this information will help others with the same question in the
    future.
    
    Fixes: https://github.com/tukaani-project/xz/issues/54

commit 1119e5f5a519b0ab71c81fc4dc84c0cc72abe513
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jul 14 21:10:27 2023 +0800

    Docs: Update README.
    
    This adds an entry to "Other implementations of the .xz format" for
    XZ for Java.

commit f99e2e4e53b7ea89e4eef32ddd4882e0416357c9
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jul 13 23:32:10 2023 +0800

    xz: Fix typo in man page.
    
    The Memory limit information section described three output
    columns when it actually has six. This was reworded to
    "multiple" to make it more future proof.

commit f907705eb1f6c5edaafc9668a34c51a989932f1d
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jul 13 21:46:12 2023 +0800

    xz: Minor clean up for coder.c
    
    * Moved max_block_list_size from a global to local variable.
    * Reworded error message in validate_block_list_filter().
    * Removed helper function filter_chain_error().
    * Changed 1 << X to 1U << X in many places

commit 9adc9e56157ecbf2948e5036df8567809b9ae177
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jul 13 21:26:47 2023 +0800

    xz: Update man page Authors and date.

commit c12e429f2635da8d8f5749e5f733f451baca6945
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Jun 20 20:32:59 2023 +0800

    xz: Add a section to man page for robot mode --filters-help.

commit e10f2db5d10300c16fa482a136ed31c1aa6e8e8d
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Jun 19 23:11:41 2023 +0800

    xz: Slight reword in xz man page for consistency.
    
    Changed will print => prints in xz --robot --version description to
    match --robot --info-memory description.

commit f5dc172a402fa946f3c45a16929d7fe14c9f5e81
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Jun 19 23:07:10 2023 +0800

    xz: Reorder robot mode subsections in the man page.
    
    The order is now consistent with the order the command line arguments
    are documented earlier in the man page. The new order is:
    1. --list
    2. --info-memory
    3. --version
    
    Instead of the previous order:
    1. --version
    2. --info-memory
    3. --list

commit 9628be23aef2784249fd9f3199799d785d2ec5cc
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat May 13 00:46:50 2023 +0800

    xz: Update man page for new --filters-help option.

commit a165d7df1964121eb9df715e6f836a31c865beef
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat May 13 00:44:41 2023 +0800

    xz: Add a new --filters-help option.
    
    The --filters-help can be used to help create filter chains with the
    --filters and --filtersX options. The message in --long-help is too
    short to fully explain the syntax to construct complex filter chains.
    
    In --robot mode, xz will only print the output from liblzma function
    lzma_str_list_filters.

commit 95f1a414b156ee35d3e71862a14915fdd138f913
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Apr 21 20:28:11 2023 +0800

    xz: Update the man page for --block-list and --filtersX
    
    The --block-list option description needed updating since the new
    --filtersX option changes how it can be used. The new entry for
    --filters1=FILTERS ... --filter9=FILTERS was created right after
    the --filters option.

commit 47a63cad2aa778280e0c1926b7159427ea028cb1
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Apr 21 19:50:14 2023 +0800

    xz: Update --long-help for the new --filtersX option.

commit 8b9913a13daca2550d02dfdcdc9be15f55ca4d13
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Jun 17 20:46:21 2023 +0800

    xz: Ignore filter chains that are set but never used in --block-list.
    
    If a filter chain is set but not used in --block-list, it introduced
    unexpected behavior such as requiring an unneeded amount of memory to
    compress, reducing the number of threads in multi-threaded encoding, and
    printing an incorrect amount of memory needed to decompress.
    
    This also renames filters_init_mask => filters_used_mask. A filter is
    assumed to be used if it is specified in --filtersX until
    coder_set_compression_settings() determines which filters are referenced
    in --block-list.

commit 183819bfd9efac8c184d9bf123325719b7eee30f
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat May 13 20:11:13 2023 +0800

    xz: Set the Block size for mt encoding correctly.
    
    When opt_block_size is not used, the Block size for mt encoder is
    derived from the minimum of the largest Block specified by
    --block-list and the recommended Block size on all filter chains
    calculated by lzma_mt_block_size(). This avoids using unnecessary
    memory and ensures that all Blocks are large enough for the most memory
    needy filter chain.

commit afb2dbec3d857b026486b75e42a4728e12d234cb
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu May 11 00:09:41 2023 +0800

    xz: Validate --flush-timeout for all specified filter chains.

commit 5f0c5a04388f8334962c70bc37a8c2ff8f605e0a
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat May 13 19:54:33 2023 +0800

    xz: Allows --block-list filters to scale down memory usage.
    
    Previously, only the default filter chain could have its memory usage
    adjusted. The filter chains specified with --filtersX were not checked
    for memory usage. Now, all used filter chains will be adjusted if
    necessary.

commit 479fd58d60622331fcbe48fddf756927b9f80d9a
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed May 10 21:50:33 2023 +0800

    xz: Do not include block splitting if encoders are disabled.
    
    The block splitting logic and split_block() function are not needed if
    encoders are disabled. This will help slightly reduce the binary size
    when built without encoders and allow split_block() to use functions
    that require encoders being enabled.

commit f86ede22500f7ae024ec3ec3f3489ab5a857a3b3
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed May 10 22:38:59 2023 +0800

    xz: Free filters[] in debug mode.
    
    This will only free filter chains created with --filters1-9 since the
    default filter chain may be set from a static function variable. The
    complexity to free the default filter chain is not worth the burden on
    code maintenance.

commit f281cd0d692ac0c70fc7669b80dddb863ea947e1
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat May 13 19:28:23 2023 +0800

    xz: Add a message if --block-list is used outside of xz compresssion.
    
    --block-list is only supported with compression in xz format. This avoids
    silently ignoring when --block-list is unused.

commit d6af7f347077b22403133239592e478931307759
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Apr 18 20:29:09 2023 +0800

    xz: Create command line options for filters[1-9].
    
    The new command line options are meant to be combined with --block-list.
    They work as an optional extension to --block-list to specify a custom
    filter chain for each block listed. The new options allow the creation
    of up to 9 reusable filter chains. For instance:
    
    xz --block-list=1:10MiB,3:5MiB,,2:5MiB,1:0 --filters1=delta--lzma2 \
    --filters2=x86--lzma2 --filters3=arm64--lzma2
    
    Will create the following blocks:
    1. A block of size 10 MiB with filter chain delta, lzma2.
    2. A block of size 5 MiB with filter chain arm64, lzma2.
    3. A block of size 5 MiB with filter chain arm64, lzma2.
    4. A block of size 5 MiB with filter chain x86, lzma2.
    5. A block containing the rest of the file contents with filter chain
       delta, lzma2.

commit 072d29250113268536719ad0e040ab8a66fb6435
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat May 13 19:36:09 2023 +0800

    xz: Use lzma_filters_free() in forget_filter_chain().
    
    This is a little cleaner than the previous implementation of
    forget_filter_chain(). It is also more consistent since
    lzma_str_to_filters() will always terminate the filter chain so there
    is no need to terminate it later in coder_set_compression_settings().

commit 3d21da5cff4b511633cb6e0d8a1090485c0c1059
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Apr 17 22:22:45 2023 +0800

    xz: Separate string to filter conversion into a helper function.
    
    Converting from string to filter will also need to be done for block
    specific filter chains.

commit a6583726e5f950278f96abcf79c04f1056810be6
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jan 6 00:03:35 2023 +0800

    Tests: Use new --filters option in test_compress.sh

commit 5f3b898d07cc9b7160c7c88b3120b7edabb8a5b0
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jan 6 00:03:06 2023 +0800

    xz: Update --long-help and man page for new --filters option.

commit 9ded880a0221f4d1256845fc4ab957ffd377c760
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jan 6 00:02:29 2023 +0800

    xz: Add --filters option to CLI.
    
    The --filters option uses the new lzma_str_to_filters() function
    to convert a string into a full filter chain. Using this option
    will reset all previous filters set by --preset, --[filter], or
    --filters.

commit 2c189bb00af73dc7ba1a67a9d274d5be03ee3a88
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jul 14 21:30:25 2023 +0800

    Tests: Improve feature testing for skipping.
    
    Fixed a bug where test_compress_* would all fail if arm64 or armthumb
    filters were enabled for compression but arm was disabled. Since the
    grep tests only checked for "define HAVE_ENCODER_ARM", this would match
    on HAVE_ENCODER_ARM64 or HAVE_ENCODER_ARMTHUMB.
    
    Now the config.h feature test requires " 1" at the end to prevent the
    prefix problem. have_feature() was also updated for this even though
    there were known current bugs affecting it. This is just in case future
    features have a similar prefix problem.

commit 80a6b9bcad016c99c9ba3f3eeb4a619fcadfd357
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Jul 10 20:56:28 2023 +0800

    Translations: Update the Chinese (traditional) translation.

commit 17f8844e6fc355abf997d77637a7447c4f7bbcbd
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Jul 8 21:24:19 2023 +0800

    liblzma: Remove non-portable empty initializer.
    
    Commit 78704f36e74205857c898a351c757719a6c8b666 added an empty
    initializer {} to prevent a warning. The empty initializer is a GNU
    extension and results in a build failure on MSVC. The -wpedantic flag
    warns about empty initializers.

commit 3aca4f629cd577f0c54f594d5d88722edf0b0413
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Jul 8 20:03:59 2023 +0800

    Translations: Update the Vietnamese translation.

commit 66bdcfa85fef2911cc80f5f30fed3f9610faccb4
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Jun 28 20:46:31 2023 +0800

    Tests: Fix memory leaks in test_index.
    
    Several tests were missing calls to lzma_index_end() to clean up the
    lzma_index structs. The memory leaks were discovered by using
    -fsanitize=address with GCC.

commit fe3bd438fb119f9bad3f08dc29d331e4956196e1
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Jun 28 20:43:29 2023 +0800

    Tests: Fix memory leaks in test_block_header.
    
    test_block_header was not properly freeing the filter options between
    calls to lzma_block_header_decode(). The memory leaks were discovered by
    using -fsanitize=address with GCC.

commit 78704f36e74205857c898a351c757719a6c8b666
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Jun 28 20:31:11 2023 +0800

    liblzma: Prevent uninitialzed warning in mt stream encoder.
    
    This change only impacts the compiler warning since it was impossible
    for the wait_abs struct in stream_encode_mt() to be used before it was
    initialized since mythread_condtime_set() will always be called before
    mythread_cond_timedwait().
    
    Since the mythread.h code is different between the POSIX and
    Windows versions, this warning was only present on Windows builds.
    
    Thanks to Arthur S for reporting the warning and providing an initial
    patch.

commit e3356a204c5ae02db3ec4552b6c1be354e9b6142
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Jun 28 20:22:38 2023 +0800

    liblzma: Prevent warning for MSYS2 Windows build.
    
    In lzma_memcmplen(), the <intrin.h> header file is only included if
    _MSC_VER and _M_X64 are both defined but _BitScanForward64() was
    previously used if _M_X64 was defined. GCC for MSYS2 defines _M_X64 but
    not _MSC_VER so _BitScanForward64() was used without including
    <intrin.h>.
    
    Now, lzma_memcmplen() will use __builtin_ctzll() for MSYS2 GCC builds as
    expected.

commit 45e250a9e9f3c3e8e8af2983366b170bf54f890e
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Jun 28 21:01:22 2023 +0800

    CI: Add test with -fsanitize=address,undefined.
    
    ci_build.sh was updated to accept disabling of __attribute__ ifunc
    and CLMUL. This will allow -fsanitize=address to pass because ifunc
    is incompatible with -fsanitize=address. The CLMUL implementation has
    optimizations that potentially read past the buffer and mask out the
    unwanted bytes.
    
    This test will only run on Autotools Linux.

commit 596ee722cd7ddf0afae584fc06365adc0e735977
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Jun 28 20:16:04 2023 +0800

    CI: Upgrade checkout action from v2 to v3.

commit 86118ea320f867e09e98a8682cc08cbbdfd640e2
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Jun 27 23:38:32 2023 +0800

    Update THANKS.

commit 3d1fdddf92321b516d55651888b9c669e254634e
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Jun 27 17:27:09 2023 +0300

    Docs: Document the configure option --disable-ifunc in INSTALL.

commit dbb3a536ed9873ffa0870321f6873e564c6a9da8
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Jun 7 00:18:30 2023 +0800

    CI: Add apt update command before installing dependencies.
    
    Without the extra command, all of the CI tests were automatically
    failing because the Ubuntu servers could not be reached properly.

commit 6bcd516812331de42b347922913230895bebad34
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Jun 7 00:10:38 2023 +0800

    Update THANKS.

commit 045d7aae286ecd2ce163be9e0d9041343a03f89a
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed May 31 20:26:42 2023 +0800

    Translations: Update the Esperanto translation.

commit b0cc7c2dcefe4cbc4e1e697598c14fb687ed0b78
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed May 31 20:25:00 2023 +0800

    Translations: Update the Croatian translation.

commit af045ef6f848f02cd14c9ad195a5f87bb0c02dce
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed May 31 20:15:53 2023 +0800

    Translations: Update the Chinese (simplified) translation.

commit e6b92d5817fe91ad27a0f7f57bd0f2144311e383
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed May 17 23:12:13 2023 +0800

    Translations: Update German translation of man pages.

commit 592961ccdbba39c7d60fe37e36764232feb57c60
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed May 17 23:09:18 2023 +0800

    Translations: Update the German translation.

commit 13572cb2c391f5b7503e333c6e05b20bd5bbb524
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed May 17 20:30:01 2023 +0800

    Translations: Update the Croatian translation.

commit 4e6e425ea8f097c6fb43e69cc9540294dca3680d
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed May 17 20:26:54 2023 +0800

    Translations: Update Korean translation of man pages.

commit d5ef1f6faf7c270f60093629257150085ecf19ca
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed May 17 20:13:01 2023 +0800

    Translations: Update the Korean translation.

commit e22d0b0f2e301e7906d0106689d967ed84362028
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue May 16 23:49:09 2023 +0800

    Translations: Update the Spanish translation.

commit f50da74d52d01f6cfd826a921249e289cf671678
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue May 16 23:47:23 2023 +0800

    Translations: Update the Romanian translation.

commit 4b9ad60a7305e9841b7cb4ea611bdf5fa7271696
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue May 16 23:45:43 2023 +0800

    Translations: Update Romanian translation of man pages.

commit cb6fd57f889c5d9fab36ae8c9e10083a5fe32dea
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue May 16 23:43:51 2023 +0800

    Translations: Update Ukrainian translation of man pages.

commit c3e8fcbc2db4861f92ad15606c995bd255803c52
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue May 16 23:37:54 2023 +0800

    Translations: Update the Ukrainian translation.

commit 27b81b84fcedbc55aa6e6b21004c44070b15b038
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue May 16 23:07:35 2023 +0800

    Translations: Update the Polish translation.

commit 8024ad636a65ed6ea95c94d57255be4c6724d6ed
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue May 16 22:52:14 2023 +0800

    Translations: Update the Swedish translation.

commit 6699a29673f227c4664826db485ed9f7596320d2
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue May 16 21:21:38 2023 +0800

    Translations: Update the Esperanto translation.

commit f36ca7982f6bd5e9827219ed4f3c5a1fbf5d7bdf
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat May 13 21:21:54 2023 +0800

    liblzma: Slightly rewords lzma_str_list_filters() documentation.
    
    Reword "options required" to "supported options". The previous may have
    suggested that the options listed were all required anytime a filter is
    used for encoding or decoding. The reword makes this more clear that
    adjusting the options is optional.

commit 3374a5359e52f1671d8f831d65827d5020fe2595
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu May 11 23:49:23 2023 +0800

    liblzma: Adds lzma_nothrow to MicroLZMA API functions.
    
    None of the liblzma functions may throw an exception, so this
    attribute should be applied to all liblzma API functions.

commit 8f236574986e7c414c0ea059f441982d1387e6a4
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue May 9 20:20:06 2023 +0800

    liblzma: Exports lzma_mt_block_size() as an API function.
    
    The lzma_mt_block_size() was previously just an internal function for
    the multithreaded .xz encoder. It is used to provide a recommended Block
    size for a given filter chain.
    
    This function is helpful to determine the maximum Block size for the
    multithreaded .xz encoder when one wants to change the filters between
    blocks. Then, this determined Block size can be provided to
    lzma_stream_encoder_mt() in the lzma_mt options parameter when
    intializing the coder. This requires one to know all the filter chains
    they are using before starting to encode (or at least the filter chain
    that will need the largest Block size), but that isn't a bad limitation.

commit d0f33d672a4da7985ebb5ba8d829f885de49c171
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon May 8 22:58:09 2023 +0800

    liblzma: Creates IS_ENC_DICT_SIZE_VALID() macro.
    
    This creates an internal liblzma macro to test if the dictionary size
    is valid for encoding.

commit c247d06e1f6cada9a76f4f6225cbd97ea760f52f
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue May 2 20:39:56 2023 +0800

    Add NEWS for 5.4.3.

commit 77050b78364ffb6b0f129e742b7c31602d725c08
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue May 2 20:39:37 2023 +0800

    Add NEWS for 5.2.12.

commit 713e15e43eb6279a7ab4bbad3d1325ebfdcf09a0
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu May 4 20:38:52 2023 +0800

    Translations: Update the Croatian translation.

commit 9ad64bdf309844b6ca6c3e8a4dfb6dbaedda0ca9
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu May 4 20:30:25 2023 +0800

    tuklib_integer.h: Reverts previous commit.
    
    Previous commit 6be460dde07113fe3f08f814b61ddc3264125a96 would cause an
    error if the integer size was 32 bit.

commit 6be460dde07113fe3f08f814b61ddc3264125a96
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu May 4 19:25:20 2023 +0800

    tuklib_integer.h: Changes two other UINT_MAX == UINT32_MAX to >=.

commit 2cf5ae5b5b279b0b2e69ca4724e7bd705865fe68
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Apr 25 20:06:15 2023 +0800

    CI: Adds a build and test for small configuration.

commit 16b81a057a87c2f18e6ed6447f003af0cbdcfe43
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Apr 25 20:05:26 2023 +0800

    CI: ci_build.sh allows configuring small build.

commit 78ccd93951f9e988d447bcdd70b24f6df5448d1d
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Apr 20 20:15:00 2023 +0800

    Update THANKS.

commit f41df2ac2fed347d3f107f3533e76e000d29c6cb
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Apr 19 22:22:16 2023 +0800

    Windows: Include <intrin.h> when needed.
    
    Legacy Windows did not need to #include <intrin.h> to use the MSVC
    intrinsics. Newer versions likely just issue a warning, but the MSVC
    documentation says to include the header file for the intrinsics we use.
    
    GCC and Clang can "pretend" to be MSVC on Windows, so extra checks are
    needed in tuklib_integer.h to only include <intrin.h> when it will is
    actually needed.

commit 7062348bf35c1e4cbfee00ad9fffb4a21aa6eff7
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Apr 19 21:59:03 2023 +0800

    tuklib_integer: Use __builtin_clz() with Clang.
    
    Clang has support for __builtin_clz(), but previously Clang would
    fallback to either the MSVC intrinsic or the regular C code. This was
    discovered due to a bug where a new version of Clang required the
    <intrin.h> header file in order to use the MSVC intrinsics.
    
    Thanks to Anton Kochkov for notifying us about the bug.

commit 2a89670ab295e377f8b44f5bda6d198deb8ea285
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Apr 13 20:45:19 2023 +0800

    liblzma: Cleans up old commented out code.

commit 0fbb2b87a7b5a1dd9d0f4a5e84ac7919557dbe81
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Apr 7 20:46:41 2023 +0800

    Docs: Add missing word to SECURITY.md.

commit fb9c50f38a17bf37581de4034b36c8df8ec90a87
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Apr 7 20:43:22 2023 +0800

    Update THANKS.

commit 537c6cd8a9db0dd6b13683e64ddac2943190d715
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Apr 7 20:42:12 2023 +0800

    Docs: Minor edits to SECURITY.md.

commit d0faa85df5a5d253a4625d45313cf5e9277e6cd2
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Mar 28 22:48:24 2023 +0800

    CI: Tests for disabling threading on CMake builds.

commit 8be5cc3b1359d88b4b30a39067466c0ae0bfbc4d
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Mar 28 22:45:42 2023 +0800

    CI: Removes CMakeCache.txt between builds.
    
    If the cache file is not removed, CMake will not reset configurations
    back to their default values. In order to make the tests independent, it
    is simplest to purge the cache. Unfortunatly, this will slow down the
    tests a little and repeat some checks.

commit 2cb6028fc31de082b7f927632363bb1426b61aaa
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Mar 28 22:32:40 2023 +0800

    CMake: Update liblzma-config.cmake generation.
    
    Now that the threading is configurable, the liblzma CMake package only
    needs the threading library when using POSIX threads.

commit 4d7fac0b07cc722825ba8d7838c558827e635611
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Mar 28 22:25:33 2023 +0800

    CMake: Allows setting thread method.
    
    The thread method is now configurable for the CMake build. It matches
    the Autotools build by allowing ON (pick the best threading method),
    OFF (no threading), posix, win95, and vista. If both Windows and
    posix threading are both available, then ON will choose Windows
    threading. Windows threading will also not use:
    
    target_link_libraries(liblzma Threads::Threads)
    
    since on systems like MinGW-w64 it would link the posix threads
    without purpose.

commit 20cd905d898c1494dee42b78530769bb9c9f8076
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Mar 24 23:05:48 2023 +0800

    CI: Runs CMake feature tests.
    
    Now, CMake will run similar feature disable tests that the Autotools
    version did before. In order to do this without repeating lines in
    ci.yml, it now makes sense to use the GitHub Workflow matrix to create
    a loop.

commit 4fabdb269f1fc5624b3b94a170c4efb329d1d229
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Mar 24 20:35:11 2023 +0800

    CI: ci_build.sh allows CMake features to be configured.
    
    Also included various clean ups for style and helper functions for
    repeated work.

commit cf3d1f130e50cf63da4bb1031771605f6f443b6a
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Mar 24 20:06:33 2023 +0800

    CI: Change ci_build.sh to use bash instead of sh.
    
    This script is only meant to be run as part of the CI build/test process
    on machines that are known to have bash (Ubuntu and MacOS). If this
    assumption changes in the future, then the bash specific commands will
    need to be replaced with a more portable option. For now, it is
    convenient to use bash commands.

commit ddfe164368e779c40d061aa4ccc376129e92f8e1
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Mar 24 20:05:59 2023 +0800

    CMake: Only build xzdec if decoders are enabled.

commit 116e81f002c503d3c3cd12726db8f9116e58ef25
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Mar 22 15:42:04 2023 +0800

    Build: Removes redundant check for LZMA1 filter support.

commit b0891684b4436aed31510fddcbb218d513bd5489
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Mar 21 23:36:00 2023 +0800

    CMake: Conditionally build xz list.* files if decoders are enabled.

commit 2c1a830efb61d9d65906a09c9ee3ce27c2c49227
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Feb 25 11:46:50 2023 +0800

    CMake: Allow configuring features as cache variables.
    
    This allows users to change the features they build either in
    CMakeCache.txt or by using a CMake GUI. The sources built for
    liblzma are affected by this too, so only the necessary files
    will be compiled.

commit f0c580c5fc38bf49a184b48d76c1d8c057d499ce
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Mar 18 22:10:57 2023 +0800

    Add NEWS for 5.4.2.

commit af4925e6043113ec9b5f9c0cf13abf2a18ccb1f6
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Mar 18 22:10:12 2023 +0800

    Add NEWS for 5.2.11.

commit 8b2f6001b4f412c259a7883427f2f2c8cea98ea8
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Mar 18 00:40:28 2023 +0800

    CMake: Fix typo in a comment.

commit 509157c80c500426ec853bd992d684ebafc8500c
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Mar 17 01:30:36 2023 +0800

    Doc: Rename Doxygen HTML doc directory name liblzma => api.
    
    When the docs are installed, calling the directory "liblzma" is
    confusing since multiple other files in the doc directory are for
    liblzma. This should also make it more natural for distros when they
    package the documentation.

commit fd90e2f4c29180b44e33c7ef726f94e4eae54ed3
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Mar 16 22:07:15 2023 +0800

    liblzma: Remove note from lzma_options_bcj about the ARM64 exception.
    
    This was left in by mistake since an early version of the ARM64 filter
    used a different struct for its options.

commit 4f50763b981f9056c5f1763dfb26cfa4a26a181d
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Mar 16 21:44:02 2023 +0800

    CI: Add doxygen as a dependency.
    
    Autogen now requires --no-doxygen or having doxygen installed to run
    without errors.

commit 8979308528c1f45cb9ee52d511f05232b4ad90a1
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Mar 16 21:41:09 2023 +0800

    Doc: Update PACKAGERS with details about liblzma API docs install.

commit 55ba6e93004842ae0a0792214a23504267ad8f43
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Mar 16 21:38:32 2023 +0800

    liblzma: Add set lzma.h as the main page for Doxygen documentation.
    
    The \mainpage command is used in the first block of comments in lzma.h.
    This changes the previously nearly empty index.html to use the first
    comment block in lzma.h for its contents.
    
    lzma.h is no longer documented separately, but this is for the better
    since lzma.h only defined a few macros that users do not need to use.
    The individual API header files all have a disclaimer that they should
    not be #included directly, so there should be no confusion on the fact
    that lzma.h should be the only header used by applications.
    
    Additionally, the note "See ../lzma.h for information about liblzma as
    a whole." was removed since lzma.h is now the main page of the
    generated HTML and does not have its own page anymore. So it would be
    confusing in the HTML version and was only a "nice to have" when
    browsing the source files.

commit 16f21255597f6a57e5692780f962cdc090f62b8c
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Mar 16 21:37:32 2023 +0800

    Build: Generate doxygen documentation in autogen.sh.
    
    Another command line option (--no-doxygen) was added to disable
    creating the doxygen documenation in cases where it not wanted or
    if the doxygen tool is not installed.

commit 1321852a3be7196bd7fcfd146221a5669e46407c
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Mar 16 21:35:55 2023 +0800

    Build: Create doxygen/update-doxygen script.
    
    This is a helper script to generate the Doxygen documentation. It can be
    run in 'liblzma' or 'internal' mode by setting the first argument. It
    will default to 'liblzma' mode and only generate documentation for the
    liblzma API header files.
    
    The helper script will be run during the custom mydist hook when we
    create releases. This hook already alters the source directory, so its
    fine to do it here too. This way, we can include the Doxygen generated
    files in the distrubtion and when installing.
    
    In 'liblzma' mode, the JavaScript is stripped from the .html files and
    the .js files are removed. This avoids license hassle from jQuery and
    other libraries that Doxygen 1.9.6 puts into jquery.js in minified form.

commit b1216a7772952d2fe7fe9c6acfcbd98d30abbc7b
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Mar 16 21:34:36 2023 +0800

    Build: Install Doxygen docs and include in distribution if generated.
    
    Added a install-data-local target to install the Doxygen documentation
    only when it has been generated. In order to correctly remove the docs,
    a corresponding uninstall-local target was added.
    
    If the doxygen docs exist in the source tree, they will also be included
    in the distribution now too.

commit 1b7661faa4bbf4a54c6b75900b5059835c382a0f
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Feb 28 23:22:36 2023 +0800

    Tests: Remove unused macros and functions.

commit af55191102f01e76de658c881299f0909ca0feda
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Dec 29 21:52:15 2022 +0800

    liblzma: Defines masks for return values from lzma_index_checks().

commit 8f38cdd9ab71e2a9d5a9787550222b7578243b73
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jan 12 22:29:07 2023 +0800

    Tests: Refactors existing lzma_index tests.
    
    Converts the existing lzma_index tests into tuktests and covers every
    API function from index.h except for lzma_file_info_decoder, which can
    be tested in the future.

commit 916448d624aaf55cef0fc3e53754affb8c4f309d
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Mar 8 23:08:46 2023 +0800

    Revert: "Add warning if Capsicum sandbox system calls are unsupported."
    
    The warning causes the exit status to be 2, so this will cause problems
    for many scripted use cases for xz. The sandbox usage is already very
    limited already, so silently disabling this allows it to be more usable.

commit 01587dda2a8f13fef7e12fd624e6d05da5f9624f
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Mar 7 20:02:22 2023 +0800

    xz: Fix -Wunused-label in io_sandbox_enter().
    
    Thanks to Xin Li for recommending the fix.

commit 5fb936786601a1cd013a5d436adde65982b1e13c
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Mar 6 21:37:45 2023 +0800

    xz: Add warning if Capsicum sandbox system calls are unsupported.
    
    The warning is only used when errno == ENOSYS. Otherwise, xz still
    issues a fatal error.

commit 61ee82cb1232a402c82282bbae42821f2b952b0d
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Mar 6 21:27:53 2023 +0800

    xz: Skip Capsicum sandbox system calls when they are unsupported.
    
    If a system has the Capsicum header files but does not actually
    implement the system calls, then this would render xz unusable. Instead,
    we can check if errno == ENOSYS and not issue a fatal error.

commit f070722b57ba975a0dff36492d766f03026b1d21
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Mar 6 21:08:26 2023 +0800

    xz: Reorder cap_enter() to beginning of capsicum sandbox code.
    
    cap_enter() puts the process into the sandbox. If later calls to
    cap_rights_limit() fail, then the process can still have some extra
    protections.

commit f1ab1f6b339d16a53ac53efeb97779ecd2bae70f
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 24 23:46:23 2023 +0800

    liblzma: Clarify lzma_lzma_preset() documentation in lzma12.h.
    
    lzma_lzma_preset() does not guarentee that the lzma_options_lzma are
    usable in an encoder even if it returns false (success). If liblzma
    is built with default configurations, then the options will always be
    usable. However if the match finders hc3, hc4, or bt4 are disabled, then
    the options may not be usable depending on the preset level requested.
    
    The documentation was updated to reflect this complexity, since this
    behavior was unclear before.

commit 9aa7fdeb04c486d2700967090956af88fdccab7e
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 24 18:10:37 2023 +0800

    Tests: Small tweak to test-vli.c.
    
    The static global variables can be disabled if encoders and decoders
    are not built. If they are not disabled and -Werror is used, it will
    cause an usused warning as an error.

commit 3cf72c4bcba5370f07477c9b9b62ae33069ef9a9
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Feb 6 21:46:43 2023 +0800

    liblzma: Replace '\n' -> newline in filter.h documentation.
    
    The '\n' renders as a newline when the comments are converted to html
    by Doxygen.

commit 002006be62d77c706565fa6ec828bea64be302da
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Feb 6 21:45:37 2023 +0800

    liblzma: Shorten return description for two functions in filter.h.
    
    Shorten the description for lzma_raw_encoder_memusage() and
    lzma_raw_decoder_memusage().

commit 463d9359b8595f01d44ada1739d75aeb87f36524
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Feb 6 21:44:45 2023 +0800

    liblzma: Reword a few lines in filter.h

commit 01441df92c0fd6a6c02fe5ac27982a54ce887cc0
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Feb 6 21:35:06 2023 +0800

    liblzma: Improve documentation in filter.h.
    
    All functions now explicitly specify parameter and return values.
    The notes and code annotations were moved before the parameter and
    return value descriptions for consistency.
    
    Also, the description above lzma_filter_encoder_is_supported() about
    not being able to list available filters was removed since
    lzma_str_list_filters() will do this.

commit fa9065fac54194fe0407fc7f0cc9633fdce13c21
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Feb 7 00:00:44 2023 +0800

    liblzma: Adjust container.h for consistency with filter.h.

commit 00a721b63d82dfb658dca8d8cb599d8a245c663f
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Feb 7 00:00:09 2023 +0800

    liblzma: Fix small typos and reword a few things in filter.h.

commit 5b1c171d4ffe89ef18fa31509bb0185d6fd11d39
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Feb 6 23:42:08 2023 +0800

    liblzma: Convert list of flags in lzma_mt to bulleted list.

commit dbd47622eb99fefb3538a22baec3def002aa56f5
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jan 26 23:17:41 2023 +0800

    liblzma: Fix typo in documentation in container.h
    
    lzma_microlzma_decoder -> lzma_microlzma_encoder

commit 14cd30806d69e55906073745bcce3ee50e0ec942
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jan 26 23:16:34 2023 +0800

    liblzma: Improve documentation for container.h
    
    Standardizing each function to always specify parameters and return
    values. Also moved the parameters and return values to the end of each
    function description.

commit c9c8bfae3502842dcead85eeb2b951b437c2cd88
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Feb 22 20:59:41 2023 +0800

    CMake: Add LZIP decoder test to list of tests.

commit f029daea39c215fd7d5cb6b6798818b055cf5b22
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 17 00:54:33 2023 +0800

    liblzma: Adjust spacing in doc headers in bcj.h.

commit a5de68bac2bb7e1b9119e6cea7d761a22ea73e9c
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 17 00:44:44 2023 +0800

    liblzma: Adjust documentation in bcj.h for consistent style.

commit efa498c13b883810497e0ea8a169efd6f48f5026
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 17 00:36:05 2023 +0800

    liblzma: Rename field => member in documentation.
    
    Also adjusted preset value => preset level.

commit 87c53553fa7d50f777b4edfa99f2083628f590fe
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Feb 16 21:04:54 2023 +0800

     liblzma: Improve documentation for stream_flags.h
    
    Standardizing each function to always specify parameters and return
    values. Also moved the parameters and return values to the end of each
    function description.
    
    A few small things were reworded and long sentences broken up.

commit 13d99e75a543e9e5f8633cc241eae55b91a3b242
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Feb 14 21:50:16 2023 +0800

    liblzma: Improve documentation in lzma12.h.
    
    All functions now explicitly specify parameter and return values.

commit 43ec344c868f930e96879eb9e49212cce92a9884
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jan 27 22:44:06 2023 +0800

    liblzma: Improve documentation in check.h.
    
    All functions now explicitly specify parameter and return values.
    Also moved the note about SHA-256 functions not being exported to the
    top of the file.

commit 9c71db4e884fd49aea3d1e711036bff45ca66487
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Feb 8 21:33:52 2023 +0800

    liblzma: Improve documentation in index.h
    
    All functions now explicitly specify parameter and return values.

commit 421f2f2e160720f6009e3b6a125cafe2feaa9419
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Feb 8 20:35:32 2023 +0800

    liblzma: Reword a comment in index.h.

commit b67539484981351d501b68de5e925425e50c59b1
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Feb 8 20:30:23 2023 +0800

    liblzma: Omit lzma_index_iter's internal field from Doxygen docs.
    
    Add \private above this field and its sub-fields since it is not meant
    to be modified by users.

commit 0c9e4fc2ad6d88d54f299240fcc5a2ce7d695d96
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Jan 21 21:32:03 2023 +0800

    liblzma: Fix documentation for LZMA_MEMLIMIT_ERROR.
    
    LZMA_MEMLIMIT_ERROR was missing the "<" character needed to put
    documentation after a member.

commit 816fec125aa74bcef46512c73acc6d9e5a700d15
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Jan 21 00:29:38 2023 +0800

    liblzma: Improve documentation for base.h.
    
    Standardizing each function to always specify params and return values.
    Also fixed a small grammar mistake.

commit 862dacef1a4e7e1b28d465956fa4244ed01df154
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Feb 14 00:12:34 2023 +0800

    liblzma: Add one more missing [out] annotation in vli.h

commit 867b08ae4254bf55dd1f7fd502cc618231b92f75
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Feb 14 00:08:33 2023 +0800

    liblzma: Minor improvements to vli.h.
    
    Added [out] annotations to parameters that are pointers and can have
    their value changed. Also added a clarification to lzma_vli_is_valid.

commit 90d0e628ff11e5030bcc4fc000bca056adda6603
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 10 21:38:02 2023 +0800

    liblzma: Add comments for macros in delta.h.
    
    Document LZMA_DELTA_DIST_MIN and LZMA_DELTA_DIST_MAX for completeness
    and to avoid Doxygen warnings.

commit 9255fffdb13e59874bf7f95c370c410ad3a7e114
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 10 21:35:23 2023 +0800

    liblzma: Improve documentation in index_hash.h.
    
    All functions now explicitly specify parameter and return values.
    Also reworded the description of lzma_index_hash_init() for readability.

commit 7673ef5aa80c1af7fb693360dd82f527b46c2c56
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Feb 4 21:06:35 2023 +0800

    Build: Adjust CMake version search regex.
    
    Now, the LZMA_VERSION_MAJOR, LZMA_VERSION_MINOR, and LZMA_VERSION_PATCH
    macros do not need to be on consecutive lines in version.h. They can be
    separated by more whitespace, comments, or even other content, as long
    as they appear in the proper order (major, minor, patch).

commit b8bce89be7fb5bffe5fef4a2782ca9b2b107eaac
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Feb 4 12:01:23 2023 +0800

    xz: Add a comment clarifying the use of start_time in mytime.c.

commit 912af91b10a18fb9bb3167247ecaaefca8248ee9
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jan 26 09:50:21 2023 +0800

    liblzma: Improve documentation for version.h.
    
    Specified parameter and return values for API functions and documented
    a few more of the macros.

commit 850adec171203cd22b57d016084d713f72ae5307
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 3 22:52:55 2023 +0800

    Docs: Omit SIGTSTP not handled from TODO.

commit 2c78a83c6faec70154d9eb78022a618ed62cdcb3
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 3 00:33:32 2023 +0800

    liblzma: Fix bug in lzma_str_from_filters() not checking filters[] length.
    
    The bug is only a problem in applications that do not properly terminate
    the filters[] array with LZMA_VLI_UNKNOWN or have more than
    LZMA_FILTERS_MAX filters. This bug does not affect xz.

commit e01f01b9af1c074463b92694a16ecc16a31907c0
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 3 00:32:47 2023 +0800

    Tests: Create test_filter_str.c.
    
    Tests lzma_str_to_filters(), lzma_str_from_filters(), and
    lzma_str_list_filters() API functions.

commit 8dfc029e7a4ce45809c30313dc0e502f0d22be26
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sun Jan 22 08:49:00 2023 +0800

    liblzma: Fix typos in comments in string_conversion.c.

commit 54ad83c1ae2180dcc0cb2445b181dc1e9732a5d6
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 3 00:20:20 2023 +0800

    liblzma: Clarify block encoder and decoder documentation.
    
    Added a few sentences to the description for lzma_block_encoder() and
    lzma_block_decoder() to highlight that the Block Header must be coded
    before calling these functions.

commit f680e771b3eb2a46310fe85b3e000ac3a1a0640f
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 3 00:12:24 2023 +0800

    Update lzma_block documentation for lzma_block_uncomp_encode().

commit 504cf4af895fd45aad0c56eb3b49d90acd54465b
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 3 00:11:37 2023 +0800

    liblzma: Minor edits to lzma_block header_size documentation.

commit 115b720fb521f99aa832d06b2c12b7f8c6c50680
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 3 00:11:07 2023 +0800

    liblzma: Enumerate functions that read version in lzma_block.

commit 85ea0979adcf808a3830aefbe7a4ec884e542ea1
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 3 00:10:34 2023 +0800

    liblzma: Clarify comment in block.h.

commit 1f7ab90d9ce224230a04de6b921ad6e2029023a8
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Feb 3 00:07:23 2023 +0800

    liblzma: Improve documentation for block.h.
    
    Standardizing each function to always specify params and return values.
    Output pointer parameters are also marked with doxygen style [out] to
    make it clear. Any note sections were also moved above the parameter and
    return sections for consistency.

commit c563a4bc554a96bd0b6aab3c139715b7ec8f6ca3
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Feb 1 23:38:30 2023 +0800

    liblzma: Clarify a comment about LZMA_STR_NO_VALIDATION.
    
    The flag description for LZMA_STR_NO_VALIDATION was previously confusing
    about the treatment for filters than cannot be used with .xz format
    (lzma1) without using LZMA_STR_ALL_FILTERS. Now, it is clear that
    LZMA_STR_NO_VALIDATION is not a super set of LZMA_STR_ALL_FILTERS.

commit 315c64c7e18acc59a745b68148188a73e998252b
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Feb 1 21:43:33 2023 +0800

    CI: Update .gitignore for artifacts directory in build-aux.
    
    The workflow action for our CI pipeline can only reference artifacts in
    the source directory, so we should ignore these files if the ci_build.sh
    is run locally.

commit 2c1341f4fa06e7f487d61142aa354c433e17ec7f
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Feb 1 21:36:46 2023 +0800

    CI: Add quotes around variables in a few places.

commit 3a401b0e0c7a2658af7801dd0690256ef24149e0
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Feb 1 21:36:22 2023 +0800

    CI: Upload test logs as artifacts if a test fails.

commit 3b1c8ac8d1d553cbb1fb22b545d2b1424c752b76
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jan 27 20:14:51 2023 +0800

    Translations: Add Brazilian Portuguese translation of man pages.
    
    Thanks to Rafael Fontenelle.

commit f35d98e20609e0be6a04ae2604bfb7cb9d5bd5e4
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Jan 24 20:48:50 2023 +0800

    liblzma: Fix documentation in filter.h for lzma_str_to_filters()
    
    The previous documentation for lzma_str_to_filters() was technically
    correct, but misleading. lzma_str_to_filters() returns NULL on success,
    which is in practice always defined to 0. This is the same value as
    LZMA_OK, but lzma_str_to_filters() does not return lzma_ret so we should
    be more clear.

commit cc5aa9ab138beeecaee5a1e81197591893ee9ca0
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Jan 7 21:55:06 2023 +0800

    xz: Refactor duplicated check for custom suffix when using --format=raw

commit 9663141274e01592a281a7f2df5d7a31a1dac8bf
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jan 20 21:53:14 2023 +0800

    liblzma: Set documentation on all reserved fields to private.
    
    This prevents the reserved fields from being part of the generated
    Doxygen documentation.

commit 6327a045f34d48fc5afc58ba0d32a82c94403049
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Dec 20 21:39:59 2022 +0800

    Doxygen: Update Doxyfile.in from 1.4.7 to 1.8.17.
    
    A few Doxygen tags were obsolete from 1.4.7. Version 1.8.17 released
    in 2019, so this should be compatible with resonable modern distros.
    The purpose of Doxygen these days is for docs on the website, so it
    doesn't necessarily have to work for everyone. Just when the maintainers
    want to update the docs.

commit bbf71b69ebf9d0d62a0af150a5c37d193b8159ad
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Jan 3 20:37:30 2023 +0800

    Doxygen: Make Doxygen only produce liblzma API documentation by default.
    
    Doxygen is now configurable in autotools only with
    --enable-doxygen=[api|all]. The default is "api", which will only
    generate HTML output for liblzma API functions. The LaTex documentation
    output was also disabled.

commit 6fcf4671b6047113c583a0919fc850987a4ec5f4
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Dec 21 23:59:43 2022 +0800

    liblzma: Highlight liblzma API headers should not be included directly.
    
    This improves the generated Doxygen HTML files to better highlight
    how to properly use the liblzma API header files.

commit b43ff180fb2e372adce876bfa155fc9bcf0c3db4
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jan 19 20:35:09 2023 +0800

    tuklib_physmem: Silence warning from -Wcast-function-type on MinGW-w64.
    
    tuklib_physmem depends on GetProcAddress() for both MSVC and MinGW-w64
    to retrieve a function address. The proper way to do this is to cast the
    return value to the type of function pointer retrieved. Unfortunately,
    this causes a cast-function-type warning, so the best solution is to
    simply ignore the warning.

commit 82e3c968bfa10e3ff13333bd9cbbadb5988d6766
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jan 19 20:32:40 2023 +0800

    tuklib_common: Define __has_warning if it is not defined.
    
    clang supports the __has_warning macro to determine if the version of
    clang compiling the code supports a given warning. If we do not define
    it for other compilers, it may cause a preprocessor error.

commit b2ba1a489df451cdcd93b2334e319dd06778de19
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Jan 18 22:11:05 2023 +0800

    CI: Reorder 32-bit build first for Linux autotool builds.
    
    The 32-bit build needs to be first so the configure cache only needs to
    be reset one time. The 32-bit build sets the CFLAGS env variable, so any
    build using that flag after will fail unless the cache is reset.

commit dd1c1135741057c91e8d018be9ec4d43968b0e64
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Jan 18 21:51:43 2023 +0800

    CI: Enable --config-cache in autotool builds.
    
    If CFLAGS are set in a build, the cache must be cleared with
    "make distclean", or by deleting the cache file.

commit d3e11477053764c003eec2daa5198c747d70ff69
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Jan 16 21:35:45 2023 +0800

    xz: Add missing comment for coder_set_compression_settings()

commit 123255b6ed15f4428b2aa92e4962015a5362f6bf
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Jan 16 20:55:10 2023 +0800

    xz: Do not set compression settings with raw format in list mode.
    
    Calling coder_set_compression_settings() in list mode with verbose mode
    on caused the filter chain and memory requirements to print. This was
    unnecessary since the command results in an error and not consistent
    with other formats like lzma and alone.

commit 571919c47b9ff5171ede84378620ed0a9aeb98c0
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jan 13 20:37:06 2023 +0800

    Translations: Update the Brazilian Portuguese translation.

commit 81cb02e2c22bbc036cdfaa2d2c4176f6bd60d3cf
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jan 12 23:43:06 2023 +0800

    CI: Disable shared and nls from various jobs in autotool runners.
    
    Disabling shared library generation and linking should help speed up the
    runners. The shared library is still being tested in the 32 bit build
    and the full feature.
    
    Disabling nls is to check for any unexpected warnings or errors.

commit 58a052198a7bcaf6e958f87fad72e69e19a2579b
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jan 12 23:39:19 2023 +0800

    CI: Reorder the 32-bit job in the Ubuntu runner.
    
    Run the 32 bit job sooner since this is a more interesting test than
    some of the later jobs.

commit 4110a998b83459fe2bc9bc1bec30ad68afa8f797
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jan 12 23:09:03 2023 +0800

    CI: Allow disabling Native Language Support.

commit 0dec634e705b5bf89a37c5d62d71e8511d480058
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jan 12 23:02:20 2023 +0800

    CI: Only run autogen.sh if it has not already run.

commit 32287dc8def94df4546e903495d14c132bd54cc4
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jan 12 22:58:36 2023 +0800

    CI: Allow disabling shared library in autotools builds.

commit 77d1ebcc99ddd82a300d1838f608150221931dcd
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jan 12 22:44:18 2023 +0800

    CI: Improve Usage readability and add -h option.

commit 62efd48a825e8f439e84c85e165d8774ddc68fd2
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Jan 11 23:58:16 2023 +0800

    Add NEWS for 5.4.1.

commit d1561c47ec8cd3844a785d3741dc932f9b9c5790
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Jan 11 22:46:48 2023 +0800

    xz: Fix warning -Wformat-nonliteral on clang in message.c.
    
    clang and gcc differ in how they handle -Wformat-nonliteral. gcc will
    allow a non-literal format string as long as the function takes its
    format arguments as a va_list.

commit 8c0f115cc489331c48df77beca92fe378039d919
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Jan 11 20:58:31 2023 +0800

    Tests: Fix test_filter_flags copy/paste error.

commit 25035813d1d596fde692addc33e7f715f1fe55eb
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Jan 11 20:42:29 2023 +0800

    Tests: Fix type-limits warning in test_filter_flags.
    
    This only occurs in test_filter_flags when the BCJ filters are not
    configured and built. In this case, ARRAY_SIZE() returns 0 and causes a
    type-limits warning with the loop variable since an unsigned number will
    always be >= 0.

commit 765354b50c2886fc0d294d6be3b207f7ae2ada70
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Jan 11 01:18:50 2023 +0800

    Tests: Fix unused function warning in test_block_header.
    
    One of the global arrays of filters was only used in a test that
    required both encoders and decoders to be configured in the build.

commit 7c23c05befdcc73231c0d6632a7d943dbeaea1aa
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Jan 11 01:08:03 2023 +0800

    Tests: Fix unused function warning in test_index_hash.
    
    test_index_hash does not use fill_index_hash() unless both encoders
    and decoders are configured in the build.

commit 57464bb4ebd6c00dc8b19803f05ea55ddd0826f6
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Jan 11 00:54:45 2023 +0800

    CI/CD: Add 32-bit build and test steps to Ubuntu autotools runner.
    
    If all goes well, Mac autotools and Linux and Mac CMake will be added
    later for 32-bit builds.

commit 923eb689a4b863b6cca8df6360d4962aae994edf
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Jan 11 00:51:01 2023 +0800

    CI/CD: Enables warnings as errors in autotool build.
    
    This will help us catch warnings and potential bugs in builds that are
    not often tested by us.

commit feae5528a30c006b6e2f96a95116e20b983703fc
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Jan 11 00:48:35 2023 +0800

    CI/CD: Add -f argument to set CFLAGS in ci_build.sh.
    
    For now, the suggested option is for -m32 only, but this can be updated
    later if other flags are deemed useful.

commit 5c9fdd3bf53a9655f5eb2807d662b3af0d5e1865
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Dec 29 23:33:33 2022 +0800

    Tests: Refactors existing filter flags tests.
    
    Converts the existing filter flags tests into tuktests.

commit 8d372bd94066b1a5b0570b2550f83c2868486adf
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Jan 7 21:05:15 2023 +0800

    CI/CD: Split CMake Linux and MacOS build phase to build and test.
    
    The phase split was only done for Autotools before, so should also
    apply to CMake.

commit 747c7f2b34bd498f6702c6875500a26b06201772
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Jan 7 11:16:55 2023 +0800

    CI/CD: Reduce job runners to 4 instead of using matrix strategy.
    
    The old version used too many runners that resulted in unnecessary
    dependency downloads. Now, the runners are reused for the different
    configurations for each OS and build system.

commit 4de35fd6b58d46fc887c78faf163f6a37b790c45
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Jan 7 10:07:20 2023 +0800

    CI/CD: Add new -p (PHASE) argument to ci_build.sh
    
    The new PHASE argument can be build, test, or all. all is the default.
    This way, the CI/CD script can differentiate between the build and test
    phases to make it easier to track down errors when they happen.

commit 6fd39664de47801e670a16617863196bfbde4755
Merge: 78e0561d fc0c7884
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Jan 7 00:10:50 2023 +0800

    Merge pull request #7 from tukaani-project/tuktest_index_hash
    
    Tuktest index hash

commit 78e0561dfebaa9d5e34558de537efcda890e0629
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jan 6 20:43:31 2023 +0800

    Style: Change #if !defined() to #ifndef in mythread.h.

commit e834e1e934ed0af673598d8c0c34afb2af56bee0
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jan 6 20:35:55 2023 +0800

    Build: Add missing stream_decoder_mt.c to .vcxproj files.
    
    The line in the .vcxproj files for building with was missing in 5.4.0.
    Thank to Hajin Jang for reporting the issue.

commit 84f9687cbae972c2c342e10bf69f8ec8f70ae111
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jan 5 20:57:25 2023 +0800

    liblzma: Remove common.h include from common/index.h.
    
    common/index.h is needed by liblzma internally and tests. common.h will
    include and define many things that are not needed by the tests. Also,
    this prevents include order problems because common.h will redefine
    LZMA_API resulting in a warning.

commit 52380678f42364daa4510f92f6d3b18ec98c3638
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Jan 4 23:58:58 2023 +0800

    Tests: Replace non portable shell parameter expansion
    
    The shell parameter expansion using # and ## is not supported in
    Solaris 10 Bourne shell (/bin/sh). Even though this is POSIX, it is not fully
    portable, so we should avoid it.

commit d0eb345bb7d148a62883ee299adec2b74a0f6f3b
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Jan 3 21:02:38 2023 +0800

    Translations: Add Korean translation of man pages.
    
    Thanks to Seong-ho Cho

commit c4145978d95ebf1690c778d354e15f7c2823d7a8
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Jan 3 20:47:27 2023 +0800

    Translations: Update the Esperanto translation.

commit bb740e3b117f1a3c65152d01e5755523a908ecb1
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Jan 2 22:33:48 2023 +0800

    Build: Only define HAVE_PROGRAM_INVOCATION_NAME if it is set to 1.
    
    HAVE_DECL_PROGRAM_INVOCATION_NAME is renamed to
    HAVE_PROGRAM_INVOCATION_NAME. Previously,
    HAVE_DECL_PROGRAM_INVOCATION_NAME was always set when
    building with autotools. CMake would only set this when it was 1, and the
    dos/config.h did not define it. The new macro definition is consistent
    across build systems.

commit 064cd385a716abc78d93a3612411a82d69ceb221
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Dec 29 00:30:52 2022 +0800

    Adds test_index_hash to .gitignore.

commit 3959162baec074511d83ba0fec1284c3ed724799
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Dec 29 00:25:18 2022 +0800

    Tests: Creates test_index_hash.c
    
    Tests all API functions exported from index_hash.h. Does not have a
    dedicated test for lzma_index_hash_end.

commit f16e12d5e755d371247202fcccbcccd1ec16b2cf
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Aug 17 20:20:16 2022 +0800

    liblzma: Add NULL check to lzma_index_hash_append.
    
    This is for consistency with lzma_index_append.

commit 203b008eb220208981902e0db541c02d1c1c9f5e
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Aug 17 17:59:51 2022 +0800

    liblzma: Replaced hardcoded 0x0 index indicator byte with macro

commit 2fcba17fc4d7eda8fc60567169cf2a0e6fcfb2f8
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Dec 29 01:55:19 2022 +0800

    xz: Includes <time.h> and <sys/time.h> conditionally in mytime.c.
    
    Previously, mytime.c depended on mythread.h for <time.h> to be included.

commit f82294c8318a7a0990583d51ac5c7de682ad36ef
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Dec 29 01:15:27 2022 +0800

    liblzma: Includes sys/time.h conditionally in mythread
    
    Previously, <sys/time.h> was always included, even if mythread only used
    clock_gettime. <time.h> is still needed even if clock_gettime is not used
    though because struct timespec is needed for mythread_condtime.

commit 74dae7d30091e906d6a92a57952dea4354473f9b
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Dec 29 01:10:53 2022 +0800

    Build: No longer require HAVE_DECL_CLOCK_MONOTONIC to always be set.
    
    Previously, if threading was enabled HAVE_DECL_CLOCK_MONOTONIC would always
    be set to 0 or 1. However, this macro was needed in xz so if xz was not
    built with threading and HAVE_DECL_CLOCK_MONOTONIC was not defined but
    HAVE_CLOCK_GETTIME was, it caused a warning during build. Now,
    HAVE_DECL_CLOCK_MONOTONIC has been renamed to HAVE_CLOCK_MONOTONIC and
    will only be set if it is 1.

commit 7339e39dc060df6eda74a2c5b69961befc3d5d24
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Dec 28 01:14:07 2022 +0800

    Translations: Add Ukrainian translations of man pages.
    
    Thanks to Yuri Chornoivan

commit 9f05c27a58ce8cd7803079aa295e41c24665ce6e
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Dec 23 00:34:48 2022 +0800

    CI/CD: Create initial version of CI/CD workflow.
    
    The CI/CD workflow will only execute on Ubuntu and MacOS latest version.
    The workflow will attempt to build with autotools and CMake and execute
    the tests. The workflow will run for all pull requests and pushes done
    to the master branch.

commit 1275ebfba74230dbd028049141423c79c8b83b8f
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Dec 22 23:14:53 2022 +0800

    liblzma: Update documentation for lzma_filter_encoder.

commit 7c9ff5f1667a16733163b75dfd4b509662c387f4
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Dec 21 21:12:03 2022 +0800

    Tests: Adds lzip decoder tests

commit 5f7ce42a16b1e86ca8408b5c670c25e2a12acc4e
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Dec 20 20:46:44 2022 +0800

    liblzma: Fix lzma_microlzma_encoder() return value.
    
    Using return_if_error on lzma_lzma_lclppb_encode was improper because
    return_if_error is expecting an lzma_ret value, but
    lzma_lzma_lclppb_encode returns a boolean. This could result in
    lzma_microlzma_encoder, which would be misleading for applications.

commit 8ace358d65059152d9a1f43f4770170d29d35754
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Dec 16 20:58:55 2022 +0800

    CMake: Update .gitignore for CMake artifacts from in source build.
    
    In source builds are not recommended, but we can make it easier
    by ignoring the generated artifacts from CMake.

commit 8bdbe42a8d0d75dff70206b923fc4bce5c69a40a
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Dec 6 23:05:56 2022 +0800

    Translations: Update the German translation.

commit 5c304b57c24ef40ff57f864301065f0244c05bde
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Dec 6 23:04:25 2022 +0800

    Translations: Update the Turkish translation.

commit 6d86781fdb937970486500447ebb49b98244235b
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Dec 6 23:02:11 2022 +0800

    Translations: Update the Croatian translation.

commit 7a5b4b8075eb36026b1796f04ffed5830c42396a
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Dec 6 22:56:30 2022 +0800

    Translations: Add Romanian translation of man pages.
    
    Thanks to Remus-Gabriel Chelu.

commit c6977e7400088177556e8771bcb839eb7d90caa3
Author: Jia Tan <jiat0218@gmail.com>
Date:   Tue Dec 6 22:52:13 2022 +0800

    Translations: Update the Romanian translation.

commit 7c16e312cb2f40b81154c0e5be13a3c6b8da485d
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Nov 30 23:33:08 2022 +0800

    xz: Remove message_filters_to_str function prototype from message.h.
    
    This was forgotten from 7484744af6cbabe81e92af7d9e061dfd597fff7b.

commit 0a72b9ca2fe20082da9b7128fe0d908af947a851
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Nov 30 00:52:06 2022 +0800

    liblzma: Improve documentation for string to filter functions.

commit 75f1a6c26df4ce329da0882786403e3ccf5cd898
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu May 5 20:53:42 2022 +0800

    liblzma: Add support for LZMA_SYNC_FLUSH in the Block encoder.
    
    The documentation mentions that lzma_block_encoder() supports
    LZMA_SYNC_FLUSH but it was never added to supported_actions[]
    in the internal structure. Because of this, LZMA_SYNC_FLUSH could
    not be used with the Block encoder unless it was the next coder
    after something like stream_encoder() or stream_encoder_mt().

commit a11a2b8b5e830ba682c1d81aaa7078842b296995
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sat Nov 19 23:18:04 2022 +0800

    CMake: Adds test_memlimit to CMake tests

commit 1fc6e7dd1fabdb60124d449b99273330ccab3ff1
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Nov 7 16:24:14 2022 +0200

    xz: Avoid a compiler warning in progress_speed() in message.c.
    
    This should be smaller too since it avoids the string constants.

commit ce30ada91951d0746879ae438da11f1ee8a90aa0
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sun Oct 23 21:01:08 2022 +0800

    Tests: test_bcj_exact_size skips properly now if PowerPC filter disabled.

commit 6a86e81cab202d0a812a7b2e9efacaf70c58ba38
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Oct 6 21:53:09 2022 +0300

    Tests: Refactor test_stream_flags.c.
    
    Converts test_stream_flags to tuktest. Also the test will now
    compile and skip properly if encoders or decoders are disabled.
    
    Thanks to Sebastian Andrzej Siewior.

commit 827ac5b4821491fd3afe0d0e1ddac326253aeb66
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Oct 6 17:00:38 2022 +0800

    Tests: Refactor test_block_header.c.
    
    test_block_header now achieves higher test coverage. Also the
    test will now compile and skip properly if encoders or decoders
    are disabled.
    
    Thanks to Sebastian Andrzej Siewior.

commit 84963318952064a93bfc52edd6b0ef70593384ee
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Oct 5 23:54:12 2022 +0800

    Tests: Fix compilation issues.
    
    test_bcj_exact_size, test_check, test_hardware, and test_index will
    all now compile and skip properly if encoders or decoders are disabled.
    
    Also fixed a small typo (disabed -> disabled).
    
    Thanks to Sebastian Andrzej Siewior.

commit 14af758a770c7781af18fb66d6d21ee5b1c27f04
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Oct 5 20:57:16 2022 +0800

    liblzma: Fix a compilation issue when encoders are disabled.
    
    When encoders were disabled and threading enabled, outqueue.c and
    outqueue.h were not compiled. The multi threaded decoder required
    these files, so compilation failed.

commit 6ca5c354bd4620aa7f81da68870eef1b1f26288f
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Oct 5 16:41:38 2022 +0800

    Tests: Fix compilation error when threading support has been disabled.
    
    Now tests that require threading are skipped when threading
    support has been disabled.
    
    Thanks to Sebastian Andrzej Siewior.

commit 8cc9874a7974cd575aee44f218836f7acdbeb0ed
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Sep 21 16:15:50 2022 +0800

    liblzma: Add dest and src NULL checks to lzma_index_cat.
    
    The documentation states LZMA_PROG_ERROR can be returned from
    lzma_index_cat. Previously, lzma_index_cat could not return
    LZMA_PROG_ERROR. Now, the validation is similar to
    lzma_index_append, which does a NULL check on the index
    parameter.

commit afd5a8bf5374eba82804a999e1ea7af680784086
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Sep 21 20:29:28 2022 +0800

    Tests: Create a test for the lzma_index_cat bug.

commit 3d5a99ca373a4e86faf671226ca6487febb9eeac
Author: Jia Tan <jiat0218@gmail.com>
Date:   Wed Sep 21 19:28:53 2022 +0800

    liblzma: Fix copying of check type statistics in lzma_index_cat().
    
    The check type of the last Stream in dest was never copied to
    dest->checks (the code tried to copy it but it was done too late).
    This meant that the value returned by lzma_index_checks() would
    only include the check type of the last Stream when multiple
    lzma_indexes had been concatenated.
    
    In xz --list this meant that the summary would only list the
    check type of the last Stream, so in this sense this was only
    a visual bug. However, it's possible that some applications
    use this information for purposes other than merely showing
    it to the users in an informational message. I'm not aware of
    such applications though and it's quite possible that such
    applications don't exist.
    
    Regular streamed decompression in xz or any other application
    doesn't use lzma_index_cat() and so this bug cannot affect them.

commit 18d7facd3802b55c287581405c4d49c98708c136
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Sep 2 20:18:55 2022 +0800

    liblzma: lzma_index_append: Add missing integer overflow check.
    
    The documentation in src/liblzma/api/lzma/index.h suggests that
    both the unpadded (compressed) size and the uncompressed size
    are checked for overflow, but only the unpadded size was checked.
    The uncompressed check is done first since that is more likely to
    occur than the unpadded or index field size overflows.

commit ba3e4ba2de034ae93a513f9c3a0823b80cdb66dc
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Sep 8 15:07:00 2022 +0300

    CMake: Clarify a comment about Windows symlinks without file extension.

commit 61f8ec804abdb4c5dac01e8ae9b90c7be58a5c24
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Jul 25 18:30:05 2022 +0300

    liblzma: Refactor lzma_mf_is_supported() to use a switch-statement.

commit 4d80b463a1251aa22eabc87d2732fec13b1adda6
Author: Jia Tan <jiat0218@gmail.com>
Date:   Mon Jul 25 18:20:01 2022 +0300

    Build: Don't allow empty LIST in --enable-match-finders=LIST.
    
    It's enforced only when a match finder is needed, that is,
    when LZMA1 or LZMA2 encoder is enabled.

commit d1bfa3dc703325ecd974167e864a8712fdfe936e
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jul 1 21:19:26 2022 +0800

    Created script to generate code coverage reports.
    
    The script uses lcov and genhtml after running the tests
    to show the code coverage statistics. The script will create
    a coverage directory where it is run. It can be run both in
    and out of the source directory.

commit 86a30b0255d8064169fabfd213d907016d2f9f2a
Author: Jia Tan <jiat0218@gmail.com>
Date:   Thu Jun 16 17:32:19 2022 +0300

    Tests: Add more tests into test_check.

commit 0354d6cce3ff98ea6f927107baf216253f6ce2bb
Author: Jia Tan <jiat75@gmail.com>
Date:   Mon Jun 13 20:27:03 2022 +0800

    Added vli tests to .gitignore

commit a08f5ccf6bdc20ef70e41f6f3321618ef146f96e
Author: Jia Tan <jiat0218@gmail.com>
Date:   Sun Jun 12 11:31:40 2022 +0800

    Created tests for all functions exported in vli.h
    
    Achieved 100% code coverage vli_encoder.c, vli_decoder.c, and vli_size.c

commit aa75c5563a760aea3aa23d997d519e702e82726b
Author: Jia Tan <jiat0218@gmail.com>
Date:   Fri Jun 10 21:35:18 2022 +0800

    Tests: Created tests for hardware functions.
    
    Created tests for all API functions exported in
    src/liblzma/api/lzma/hardware.h. The tests are fairly trivial
    but are helpful because they will inform users if their machines
    cannot support these functions. They also improve the code
    coverage metrics.
