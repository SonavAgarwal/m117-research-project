)]}'
{
  "commit": "04f5866e41fb70690e28397487d8bd8eea7d712a",
  "tree": "e2058b00a20f67fcdc84495d76cc24b08e4462d6",
  "parents": [
    "dce5b0bdeec61bdbee56121ceb1d014151d5cab1"
  ],
  "author": {
    "name": "Andrea Arcangeli",
    "email": "aarcange@redhat.com",
    "time": "Thu Apr 18 17:50:52 2019 -0700"
  },
  "committer": {
    "name": "Linus Torvalds",
    "email": "torvalds@linux-foundation.org",
    "time": "Fri Apr 19 09:46:05 2019 -0700"
  },
  "message": "coredump: fix race condition between mmget_not_zero()/get_task_mm() and core dumping\n\nThe core dumping code has always run without holding the mmap_sem for\nwriting, despite that is the only way to ensure that the entire vma\nlayout will not change from under it.  Only using some signal\nserialization on the processes belonging to the mm is not nearly enough.\nThis was pointed out earlier.  For example in Hugh\u0027s post from Jul 2017:\n\n  https://lkml.kernel.org/r/alpine.LSU.2.11.1707191716030.2055@eggly.anvils\n\n  \"Not strictly relevant here, but a related note: I was very surprised\n   to discover, only quite recently, how handle_mm_fault() may be called\n   without down_read(mmap_sem) - when core dumping. That seems a\n   misguided optimization to me, which would also be nice to correct\"\n\nIn particular because the growsdown and growsup can move the\nvm_start/vm_end the various loops the core dump does around the vma will\nnot be consistent if page faults can happen concurrently.\n\nPretty much all users calling mmget_not_zero()/get_task_mm() and then\ntaking the mmap_sem had the potential to introduce unexpected side\neffects in the core dumping code.\n\nAdding mmap_sem for writing around the -\u003ecore_dump invocation is a\nviable long term fix, but it requires removing all copy user and page\nfaults and to replace them with get_dump_page() for all binary formats\nwhich is not suitable as a short term fix.\n\nFor the time being this solution manually covers the places that can\nconfuse the core dump either by altering the vma layout or the vma flags\nwhile it runs.  Once -\u003ecore_dump runs under mmap_sem for writing the\nfunction mmget_still_valid() can be dropped.\n\nAllowing mmap_sem protected sections to run in parallel with the\ncoredump provides some minor parallelism advantage to the swapoff code\n(which seems to be safe enough by never mangling any vma field and can\nkeep doing swapins in parallel to the core dumping) and to some other\ncorner case.\n\nIn order to facilitate the backporting I added \"Fixes: 86039bd3b4e6\"\nhowever the side effect of this same race condition in /proc/pid/mem\nshould be reproducible since before 2.6.12-rc2 so I couldn\u0027t add any\nother \"Fixes:\" because there\u0027s no hash beyond the git genesis commit.\n\nBecause find_extend_vma() is the only location outside of the process\ncontext that could modify the \"mm\" structures under mmap_sem for\nreading, by adding the mmget_still_valid() check to it, all other cases\nthat take the mmap_sem for reading don\u0027t need the new check after\nmmget_not_zero()/get_task_mm().  The expand_stack() in page fault\ncontext also doesn\u0027t need the new check, because all tasks under core\ndumping are frozen.\n\nLink: http://lkml.kernel.org/r/20190325224949.11068-1-aarcange@redhat.com\nFixes: 86039bd3b4e6 (\"userfaultfd: add new syscall to provide memory externalization\")\nSigned-off-by: Andrea Arcangeli \u003caarcange@redhat.com\u003e\nReported-by: Jann Horn \u003cjannh@google.com\u003e\nSuggested-by: Oleg Nesterov \u003coleg@redhat.com\u003e\nAcked-by: Peter Xu \u003cpeterx@redhat.com\u003e\nReviewed-by: Mike Rapoport \u003crppt@linux.ibm.com\u003e\nReviewed-by: Oleg Nesterov \u003coleg@redhat.com\u003e\nReviewed-by: Jann Horn \u003cjannh@google.com\u003e\nAcked-by: Jason Gunthorpe \u003cjgg@mellanox.com\u003e\nAcked-by: Michal Hocko \u003cmhocko@suse.com\u003e\nCc: \u003cstable@vger.kernel.org\u003e\nSigned-off-by: Andrew Morton \u003cakpm@linux-foundation.org\u003e\nSigned-off-by: Linus Torvalds \u003ctorvalds@linux-foundation.org\u003e\n",
  "tree_diff": [
    {
      "type": "modify",
      "old_id": "70b7d80431a9b935b9a7ffa6fa50be6601f9c4a0",
      "old_mode": 33188,
      "old_path": "drivers/infiniband/core/uverbs_main.c",
      "new_id": "f2e7ffe6fc546612f62da9cde853b9c1bf37d8bb",
      "new_mode": 33188,
      "new_path": "drivers/infiniband/core/uverbs_main.c"
    },
    {
      "type": "modify",
      "old_id": "92a91e7816d8472c3451a99a456f6f5b7b84c5b5",
      "old_mode": 33188,
      "old_path": "fs/proc/task_mmu.c",
      "new_id": "95ca1fe7283cff265247c6f3a84e5fa573299fca",
      "new_mode": 33188,
      "new_path": "fs/proc/task_mmu.c"
    },
    {
      "type": "modify",
      "old_id": "89800fc7dc9d562cd3557988adc766fa41c51209",
      "old_mode": 33188,
      "old_path": "fs/userfaultfd.c",
      "new_id": "f5de1e726356a51c27ff529f98d99032650eb839",
      "new_mode": 33188,
      "new_path": "fs/userfaultfd.c"
    },
    {
      "type": "modify",
      "old_id": "0cd9f10423fb8e60645685ab5bdbad675d803a51",
      "old_mode": 33188,
      "old_path": "include/linux/sched/mm.h",
      "new_id": "a3fda9f024c3c1988b6ff60954d7f7e74a9c1ecf",
      "new_mode": 33188,
      "new_path": "include/linux/sched/mm.h"
    },
    {
      "type": "modify",
      "old_id": "41eb48d9b5276733e48b95f1addfcb228becd993",
      "old_mode": 33188,
      "old_path": "mm/mmap.c",
      "new_id": "bd7b9f293b391f22b85810e48bc7c0679b217f05",
      "new_mode": 33188,
      "new_path": "mm/mmap.c"
    }
  ]
}
